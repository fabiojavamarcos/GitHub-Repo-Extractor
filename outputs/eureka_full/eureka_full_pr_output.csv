Issue_NumberIssue_TitleIssue_Author_NameIssue_Author_LoginIssue_Closed_DateIssue_BodyIssue_CommentsPR_TitlePR_Author_NamePR_Author_LoginPR_Closed_DatePR_BodyPR_CommentsCommit_Author_NameCommit_DateCommit_MessageisPR
1Provide better documentation for (Non-AWS) datacenter configurationDavid Trottdtrott12/06/12, 06:23:59 PM"I am trying to configure two Eureka servers on a pair of machines on a LAN to verify inter-server communication is configured correctly.

It would be extremely helpful to have a sample configuration for this configuration so that I can verify everything is setup/working correctly.""The documentation may not discuss too much about non-AWS environments, but it is pretty similar to AWS environment, except the EIP part. I will revisit this again
tomorrow to see if I can provide some more details.

---

From: David Trott [notifications@github.com]
Sent: Monday, October 15, 2012 6:09 PM
To: Netflix/eureka
Subject: [eureka] Provide better documentation for (Non-AWS) datacenter configuration (#1)

I am trying to configure two Eureka servers on a pair of machines on a LAN to verify inter-server communication is configured correctly.

It would be extremely helpful to have a sample configuration for this configuration so that I can verify everything is setup/working correctly.

—
Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/issues/1.
 =||= Thanks, David. I think I found the problem. There was a bug related to bootstrapping non-AWS data centers the first time due to a recent priming feature we introduced which was preventing the application from deploying correctly. I fixed it and release a new revision. Please retain the property configurations you have already and get the new archive(1.1.16) and then give it a try. Your problem should be fixed. I also updated the documentation to make the server configurations little more clear - https://github.com/Netflix/eureka/wiki/Getting-started-with-Eureka

Unfortunately, I cannot change the default port number now since I may break a few.

The following error was the key :

2012-10-16 13:06:26,683 ERROR com.netflix.eureka.PeerAwareInstanceRegistry:399 [localhost-startStop-1] [openForTraffic] Could not contact null
java.lang.NullPointerException
    at com.netflix.eureka.PeerAwareInstanceRegistry.openForTraffic(PeerAwareInstanceRegistry.java:373)
    at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:105)
    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791)
    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1105)
    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1664)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:662)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
2"""Gold bars adventure"" Eureka logo"Joe Sondowjoesondow12/25/12, 09:55:06 PMFor use in documentation, perhaps in Eureka GUINaN"""Gold bars adventure"" Eureka logo"Joe Sondowjoesondow12/25/12, 09:55:06 PMFor use in documentation, perhaps in Eureka GUINaNJoe Sondow11/27/12, 05:29:53 PM"""Gold bars adventure"" Eureka logo"1
3Amazon Route53 requires quotes around the values of DNS TXT records.Eric Dowdericdowd12/24/12, 01:17:33 AM Will now strip leading and traling quote from TXT record when reading it."Hi,

I'm wondering if something is different about how you are storing these records in Route53. We also store the information in Route53 but store the value as for e.g.. ""a"" ""b"" ""c"".

When we retrieve it, the DnsContextFactory retrieves the values without quotes and a split with a space works perfectly.
 =||= Ah. That explains quite a bit. I put it in as ""a b c"". Fortunately easy
change on my end to fix the DNS records. I guess it shows if there are two
ways of doing something and one way is wrong, someone will inevitably do it
the wrong way :)

On Thursday, December 20, 2012, karthik-vn wrote:

> Hi,
> 
> I'm wondering if something is different about how you are storing these
> records in Route53. We also store the information in Route53 but store the
> value as for e.g.. ""a"" ""b"" ""c"".
> 
> When we retrieve it, the DnsContextFactory retrieves the values without
> quotes and a split with a space works perfectly.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/3#issuecomment-11577122.
 =||= Closing this as this works for you.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4eureka.port appears to be pulling double duty:Eric Dowdericdowd12/25/12, 09:48:33 PMboth telling what port to register as and what port the eureka server is listening on. Changed the properties that deal with DNS discovery of eureka servers to be eureka.eurekaServer.<property>"It does seem like including the ""eurekaServer"" will make it clear that it is not the client's information but the server's information. So, I will try to merge this information in.
 =||= "eureka.port appears to be pulling double duty:Eric Dowdericdowd12/25/12, 09:48:33 PMboth telling what port to register as and what port the eureka server is listening on. Changed the properties that deal with DNS discovery of eureka servers to be eureka.eurekaServer.<property>NaNEric Dowd12/18/12, 10:11:12 AMeureka.port appears to be pulling double duty: both telling what port to register as and what port the eureka server is listening on. Changed the properties that deal with DNS discovery of eureka servers to be eureka.eurekaServer.<property>1
5Use IAM role as fallback when AWS credentials are not providedEric Dowdericdowd03/11/13, 09:15:15 PMNaN"What's the state of this pull request? I'd really like to have Eureka lookup its credentials via its iam-role.
 =||= Yes, it is in my to-do list. We had an internal conflict with aws-jdk version earlier. Will try again this week.

Sent from my iPhone

On Mar 10, 2013, at 5:49 PM, ""Trotter Cashion"" <notifications@github.com<mailto:notifications@github.com>> wrote:

What's the state of this pull request? I'd really like to have Eureka lookup its credentials via its iam-role.

—
Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/5#issuecomment-14693288.
 =||= I merged in this pull request after upgrading aws-java-sdk. I hope this worked for you.

---

From: Karthik Ranganathan
Sent: Monday, March 11, 2013 12:13 AM
To: Netflix/eureka
Cc: Netflix/eureka
Subject: Re: [eureka] Use IAM role as fallback when AWS credentials are not provided (#5)

Yes, it is in my to-do list. We had an internal conflict with aws-jdk version earlier. Will try again this week.

Sent from my iPhone

On Mar 10, 2013, at 5:49 PM, ""Trotter Cashion"" <notifications@github.com<mailto:notifications@github.com>> wrote:

What's the state of this pull request? I'd really like to have Eureka lookup its credentials via its iam-role.

—
Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/5#issuecomment-14693288.
 =||= Thank you, @karthik-vn. I'll test it out later this week.
 =||= @karthik-vn I was able to get it working.  Thx!
 =||= Cool. Thanks for getting back to me.

On Wed, Apr 17, 2013 at 3:31 PM, Aaron Feng notifications@github.comwrote:

> @karthik-vn https://github.com/karthik-vn I was able to get it working.
> Thx!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/5#issuecomment-16539884
> .
 =||= "Use IAM role as fallback when AWS credentials are not providedEric Dowdericdowd03/11/13, 09:15:15 PMNaNNaNEric Dowd03/11/13, 01:10:15 AMMerge branch 'master' into iam-role1
6Isolate replication events (primarily renewals) from one peer node from affecting the other peer nodeskarthik-vn12/25/12, 09:48:02 PM"Currently, the replication pool is shared across all peer nodes and hence if one of the peers go down it severely affects the ability to replicate to other nodes.

Move the renewals to a separate pool for its peer node so that a peer going down does not affect other peers in an adverse way.""New and improved replication pipeline

1) One per peer per action
2) Taking down peers do not affect replication to other peers.
3) Indefinite retries during network timeouts because of the above isolation.
4) Replication Events hanging around for more than 30 s automatically removed.
5) On AWS, it immediately represents a 5X increase in replication scalability.
6) The new model lends itself pretty easily to future batching of events which further increases scalability depending on the batch size 

https://github.com/Netflix/eureka/commit/7af3a79a7f4e5969096b030b628f9ead1bd06c66
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7Upgrading to the latest gradle-templateJustin Ryanquidryan12/29/12, 09:00:33 PM"This includes the javadoc and sources changes, and brings eureka up to gradle-template style-wise. I fixed some tabs in build.gradle. 

I'm a little concerned with the delete and copy directly in eureka-server section. These are running outside of an actually task and not part a tasks lifecycle. Meaning it'll run when the script is being parsed, no work should done at this stage. It probably only works after a build, e.g. right after a clean, it wouldn't do anything. Likewise the directory structure of eureka-server is pretty out of line with gradle convention, we should sit down sometime to clean it up."NaNUpgrading to the latest gradle-templateJustin Ryanquidryan12/29/12, 09:00:33 PM"This includes the javadoc and sources changes, and brings eureka up to gradle-template style-wise. I fixed some tabs in build.gradle. 

I'm a little concerned with the delete and copy directly in eureka-server section. These are running outside of an actually task and not part a tasks lifecycle. Meaning it'll run when the script is being parsed, no work should done at this stage. It probably only works after a build, e.g. right after a clean, it wouldn't do anything. Likewise the directory structure of eureka-server is pretty out of line with gradle convention, we should sit down sometime to clean it up."NaNJustin Ryan12/29/12, 05:49:36 PMPutting aws-java-sdk back to 1.3.11 until 1.3.22 is approved internally1
8Docfix: remove extra spaces, fix bulletsBlake Gentrybgentry12/31/12, 09:58:10 PMNaNNaNDocfix: remove extra spaces, fix bulletsBlake Gentrybgentry12/31/12, 09:58:10 PMNaNNaNBlake Gentry12/31/12, 02:18:37 AMRemove extra spaces, fix bullets.1
9Cannot bootstrap eureka serverEric Dowdericdowd01/09/13, 08:28:22 AM"Getting the following issue when trying to start up eureka server: 

Dec 31, 2012 4:02:51 AM org.apache.catalina.core.StandardContext listenerStart
SEVERE: Exception sending context initialized event to listener instance of class com.netflix.eureka.EurekaBootStrap
java.lang.RuntimeException: Cannot bootstrap eureka server :
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:120)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4791)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5285)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:968)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1646)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
        at java.lang.Thread.run(Thread.java:679)
Caused by: java.lang.ExceptionInInitializerError
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:100)
        ... 14 more
Caused by: java.lang.IllegalStateException: java.lang.NullPointerException
        at com.netflix.eureka.PeerAwareInstanceRegistry.setupPeerEurekaNodes(PeerAwareInstanceRegistry.java:197)
        at com.netflix.eureka.PeerAwareInstanceRegistry.init(PeerAwareInstanceRegistry.java:150)
        at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
        at com.netflix.eureka.PeerAwareInstanceRegistry.<clinit>(PeerAwareInstanceRegistry.java:124)
        ... 15 more
Caused by: java.lang.NullPointerException
        at com.netflix.logging.messaging.MessageBatcher.<init>(MessageBatcher.java:136)
        at com.netflix.logging.messaging.BatcherFactory.createBatcher(BatcherFactory.java:70)
        at com.netflix.eureka.cluster.PeerEurekaNode.getBatcher(PeerEurekaNode.java:577)
        at com.netflix.eureka.cluster.PeerEurekaNode.<init>(PeerEurekaNode.java:88)
        at com.netflix.eureka.PeerAwareInstanceRegistry.updatePeerEurekaNodes(PeerAwareInstanceRegistry.java:213)
        at com.netflix.eureka.PeerAwareInstanceRegistry.setupPeerEurekaNodes(PeerAwareInstanceRegistry.java:181)
        ... 18 more

Full catalina.out: https://gist.github.com/4417295""I'm looking into the problem...
 =||= I'm still not able to reproduce the problem.. But it does look like there is a problem. I will update you by EOD tomorrow.
 =||= If it will help, created an AMI that reproduces the problem, ami-eb8a0482 in us-east-1. Based off Amazon Linux 2012.09, so log in with ec2-user. AWS credentials need to be set in eureka-server.properties.

https://gist.github.com/4423040 has the description of how I set it up.
 =||= Thanks. I'm able to reproduce the issue and will check in a fix soon. We had some custom netflix configurations hiding the bug for us.

I'm waiting for the latest blitz4j library to show up in the maven library and once that shows up I will check in the fix.
 =||= BTW, I will have to rollback this change https://github.com/Netflix/eureka/commit/68acc47b82191ff0be2f2c418b209e8fe21e5c87 before the release as I realized the name has been used quite a bit and this might break a few things. May be we will have make this backward compatible too with the old property.
 =||= It is a bit of a relief, I was afraid I misconfigured something again. As for the change rollback, makes sense. Though I am curious, if the eureka server is listening on port 8080 and I want to register a service on port 80, how would I do that? Looking at the documentation and what I've gotten from looking at the code, it seems like in eureka-client.properties they both would have eureka.port = 8080 (for the server) and eureka.port = 80 (for registering the service)
 =||= Is this service you are registering running on the same host as the eureka server? 

As far as eureka server is concerned, the register port and listen port would always be the same and it is identified by the property eureka.port in eureka-client.properties.

I can't think of a scenario where you would listen in a different port than the one advertised (registered).
 =||= BTW, I have already fixed this issue. With the latest change your problem should go away. The binary will take sometime to show up. Please let me know if this fixes your issue.
 =||= It would be a client service on a different server. For example with the demo service, in eureka-server/conf/sampleservice/sample-eureka-service.properties, if I wanted to have it listen on port 8001 for the service and have the eureka server listen on port 8080 on a separate server
 =||= You can do that by specifying eureka.port in eureka-client.properties both the server and the service. There will be 2 eureka-client.properties one for the eureka server and one for the service. For example,

the server configuration might be something like. This will register the client part of the server (and advertises it to other peers)

eureka.name=eureka-server
eureka.port=8080

The service configuration will be something like

eureka.name=myservice
eureka.port=8001

Hence, there will be 2 different sets of eureka-client.properties in this situation. Please let me know if this clarifies the confusion.
 =||= BTW, You can see the example set up here https://github.com/Netflix/eureka/wiki/Running-the-Demo-Application. And in the run configurations, I have specified an example where in I change the name of the eureka-client.properties by specifying

-Deureka.client.props

https://github.com/Netflix/eureka/blob/master/eureka-server/runservice.sh
https://github.com/Netflix/eureka/blob/master/eureka-server/runclient.sh

The above system property -Deureka.client.props is not needed, if you have your configurations in eureka-client.properties.
 =||= Okay, I'm following you, I think. I will give it a shot. Thanks
 =||= OK, I see the confusion now. For the ""service"", you need different sets of ports eureka.port represents both the advertising port and the port where eureka server runs. Internally, here in netflix we map the namespaces to be different and hence there is no problem.

This can be overcome by specifying the namespace of your choice to https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/CloudInstanceConfig.java

and 

https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/EurekaInstanceConfig.java

Meanwhile, I will try to incorporate your earlier change so as to reduce the confusion.
 =||= Ah yes! I get it now. Thanks :)
 =||= Can bootstrap now. So closing the issue
 =||= BTW, if you have not already noticed - I merged your change https://github.com/Netflix/eureka/commit/68acc47b82191ff0be2f2c418b209e8fe21e5c87 by providing backward compatibility now.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
10Support other AWS region as fallbackkarthik-vn01/31/13, 11:04:26 PM"Latency and cost may sometimes force applications to be run on one AWS region and then fallback to applications for other region. 

There should be support for region fallback if an application does not exist in one region if the fallback region is configured.""This is now supported with https://github.com/Netflix/eureka/commit/26816f32873bb2f6cd4c75b464d2ad831c9b74d4
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
11Content-Type with charset=utf-8 failsTyson Stewarttysonstewart01/18/13, 01:54:09 AM"When I attempt to POST to /v2/apps/APPID, if the Content-Type request header is ""application/json; charset=utf-8"", the application throws an exception. If the header is simply ""application/json"", it works as expected. This is on [1.1.72](https://github.com/Netflix/eureka/tree/eureka-1.1.72).

Here is the stack trace for the failing scenario:

```
java.lang.NullPointerException
    com.netflix.eureka.PeerAwareInstanceRegistry.register(PeerAwareInstanceRegistry.java:444)
    com.netflix.eureka.resources.ApplicationResource.addInstance(ApplicationResource.java:124)
    sun.reflect.GeneratedMethodAccessor39.invoke(Unknown Source)
    sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    java.lang.reflect.Method.invoke(Unknown Source)
    com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
    com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$VoidOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:167)
    com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
    com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)
    com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:134)
    com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
    com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
    com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1469)
    com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1400)
    com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1349)
    com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1339)
    com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
    com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537)
    com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:895)
    com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:843)
    com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:804)
    com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
```""HI,

Do you have any more stack trace? Or is that all?
 =||= That's the trace from the response message. Here's the stack trace from the Tomcat logs. Doesn't look much more useful.

```
Jan 16, 2013 4:55:33 AM com.sun.jersey.spi.container.ContainerResponse mapMappableContainerException
SEVERE: The RuntimeException could not be mapped to a response, re-throwing to the HTTP container
java.lang.NullPointerException
    at com.netflix.eureka.PeerAwareInstanceRegistry.register(PeerAwareInstanceRegistry.java:444)
    at com.netflix.eureka.resources.ApplicationResource.addInstance(ApplicationResource.java:124)
    at sun.reflect.GeneratedMethodAccessor39.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$VoidOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:167)
    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)
    at com.sun.jersey.server.impl.uri.rules.SubLocatorRule.accept(SubLocatorRule.java:134)
    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1469)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1400)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1349)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1339)
    at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
    at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537)
    at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:895)
    at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:843)
    at com.sun.jersey.spi.container.servlet.ServletContainer.doFilter(ServletContainer.java:804)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
```
 =||= We will try to reproduce this and get back to you.
 =||= Was able to reproduce it. And it has been fixed by this change list https://github.com/Netflix/eureka/commit/3e8cfd3bde5879a5a70442f844838d408db25903

Please let me know if it works for you and then we can close the issue.
 =||= Confirmed. Fixed! Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
12Request: REST interface for updating metadataTyson Stewarttysonstewart01/18/13, 02:01:40 AMAs far as I can tell, the only way to update metadata for a service is to re-register the service. It would be super handy for me if there existed a PUT endpoint similar to the {...}/status?value= endpoint that could be used to update the metadata, in part or in whole."Makes sense. I will try to get to it today.

On Jan 17, 2013, at 9:04 AM, ""Tyson Stewart"" <notifications@github.com<mailto:notifications@github.com>> wrote:

As far as I can tell, the only way to update metadata for a service is to re-register the service. It would be super handy for me if there existed a PUT endpoint similar to the {...}/status?value= endpoint that could be used to update the metadata, in part or in whole.

—
Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/issues/12.
 =||= Awesome! Thanks!
 =||= I fixed this with this change list :https://github.com/Netflix/eureka/commit/6feaa10f315e456170905fc6bbc1f01c2ffb4e42

Give it a try: Example below

curl -X PUT http://localhost/discovery/v2/apps/APIPROXY/i-8a59f494/metadata?key1=value1&key2=value2
 =||= Works perfectly. Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
13Failed to read artifact descriptor for com.netflix.servo:servo-core:jar:0.4.13Chris Freglycfregly01/30/13, 04:52:55 PM"karthik-

i'm working on an end-to-end reference app that uses a lot of the Netflix OSS components and i'm having trouble integrating the latest build of eureka.

you can find the reference app here, btw:  https://github.com/cfregly/refapp

is there any known issue around depending on an older, unreleased version (0.4.13) of servo-core?

to reproduce, just uncomment out the eureka-core dependency in refapp-core/pom.xml and do a maven build.

another piece of info:  eureka-client by itself seems to be fine.  it's only when either eureka-server, eureka-core, or eureka-resources are introduced.

i tried the latest SNAPSHOT from source and it's giving the same error.

i also tried the usual rm -rf .m2/repository directory, etc.

i wanted to check with you before i spend more time digging into the dependencies.

any guidance would be helpful.

thanks!

-chris""Chris,

There are no known issues with the servo 0.4.13. If you can tell me how exactly I can reproduce the issue (i.e.) the exact steps for doing the maven build, I will try to see why the problem happens.

I just verified that the gradle build for eureka works fine.
Thanks.
 =||= i've added build instructions to Refapp's README.md:  https://github.com/cfregly/refapp#how-to-build

you'll want to uncomment out eureka-core from the refapp-core/pom.xml before building to reproduce the error.

but i just realized that i only need the eureka-client dependency in my eureka clients (refapp-middletier, in this case).  in other words, i don't need the eureka-server, eureka-core, eureka-resources dependencies in my eureka clients - just the eureka-client dependency which works fine.

so unless you want to investigate this non-standard dependency configuration further, we can close this out.

thanks, karthik!

-chris
 =||= reopening based on https://github.com/Netflix/ribbon/issues/3
 =||= Chris,

I update eureka to use servo 0.4.15. Can you do a build and see if that solves the problem. I will release the latest version to maven central soon.
 =||= looks good, karthik.  i pulled the latest from source, installed eureka-core-1.1.74-SNAPSHOT.jar to my local maven repo, and re-ran my build and it's successful.

note:  in my pom configuration, i'm explicitly declaring servo-core-0.4.32.jar because i need StatsTimer (not available in 0.4.15, apparently).  

maven is doing the proper thing and pulling in this later 0.4.32 version versus the older, transitive 0.4.15 version declared in your latest eureka-core-1.1.74-SNAPSHOT.jar.

 here's my pom snippet:

```
    <dependency>      
        <groupId>com.netflix.servo</groupId>
        <artifactId>servo-core</artifactId>
        <version>0.4.32</version>
    </dependency>
    <dependency>      
        <groupId>com.netflix.eureka</groupId>
        <artifactId>eureka-core</artifactId>
        <version>1.1.74-SNAPSHOT</version>
    </dependency>
```

just an fyi.  things look good and i'm unblocked.
 =||= Cool- I also release the latest version of eureka.

http://search.maven.org/remotecontent?filepath=com/netflix/eureka/eureka-core/1.1.73/eureka-core-1.1.73.pom

I'm going to close the issue. Please reopen as needed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
14eureka-client should declare dependency on JettisonCraig Forstercraigforster01/28/13, 08:26:49 PM"The eureka-client package requires Jettison to be on the classpath, but doesn't declare the dependency.  Without Jettison on the classpath, `com.netflix.discovery.converters.JsonXStream` can't load resulting in this error from the heartbeat thread:

```
| Error 2013-01-28 13:21:32,659 [DiscoveryClient_Heartbeat] ERROR discovery.DiscoveryClient  - DiscoveryClient_AIQ/172.16.16.137 - registration failedjava.io.IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
Message: java.io.IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
    Line | Method
->>  184 | handle         in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    120 | handle         in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle . . . . in com.sun.jersey.api.client.Client
|    670 | handle         in com.sun.jersey.api.client.WebResource
|     74 | access$200 . . in     ''
|    563 | post           in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register . . . in     ''
|   1224 | run            in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop . . . in java.util.TimerThread
^    462 | run            in     ''

Caused by IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
->>  144 | writeTo        in com.netflix.discovery.provider.DiscoveryJerseyProvider
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    231 | writeRequestEntity in com.sun.jersey.api.client.RequestWriter$RequestEntityWriterImpl
|    262 | writeTo . . .  in com.sun.jersey.client.apache4.ApacheHttpClient4Handler$2
|    115 | writeTo        in org.apache.http.entity.BufferedHttpEntity
|     98 | writeTo . . .  in org.apache.http.entity.HttpEntityWrapper
|    108 | writeTo        in org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper
|    122 | serialize . .  in org.apache.http.impl.entity.EntitySerializer
|    271 | sendRequestEntity in org.apache.http.impl.AbstractHttpClientConnection
|    227 | sendRequestEntity in org.apache.http.impl.conn.AbstractClientConnAdapter
|    257 | doSendRequest  in org.apache.http.protocol.HttpRequestExecutor
|    125 | execute . . .  in     ''
|    712 | tryExecute     in org.apache.http.impl.client.DefaultRequestDirector
|    517 | execute . . .  in     ''
|    906 | execute        in org.apache.http.impl.client.AbstractHttpClient
|    827 | execute . . .  in     ''
|    170 | handle         in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
|    120 | handle . . . . in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle         in com.sun.jersey.api.client.Client
|    670 | handle . . . . in com.sun.jersey.api.client.WebResource
|     74 | access$200     in     ''
|    563 | post . . . . . in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register       in     ''
|   1224 | run . . . . .  in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop       in java.util.TimerThread
^    462 | run . . . . .  in     ''

Caused by NoClassDefFoundError: Could not initialize class com.netflix.discovery.converters.JsonXStream
->>   78 | write          in com.netflix.discovery.converters.EntityBodyConverter
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    142 | writeTo        in com.netflix.discovery.provider.DiscoveryJerseyProvider
|    231 | writeRequestEntity in com.sun.jersey.api.client.RequestWriter$RequestEntityWriterImpl
|    262 | writeTo        in com.sun.jersey.client.apache4.ApacheHttpClient4Handler$2
|    115 | writeTo . . .  in org.apache.http.entity.BufferedHttpEntity
|     98 | writeTo        in org.apache.http.entity.HttpEntityWrapper
|    108 | writeTo . . .  in org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper
|    122 | serialize      in org.apache.http.impl.entity.EntitySerializer
|    271 | sendRequestEntity in org.apache.http.impl.AbstractHttpClientConnection
|    227 | sendRequestEntity in org.apache.http.impl.conn.AbstractClientConnAdapter
|    257 | doSendRequest  in org.apache.http.protocol.HttpRequestExecutor
|    125 | execute        in     ''
|    712 | tryExecute . . in org.apache.http.impl.client.DefaultRequestDirector
|    517 | execute        in     ''
|    906 | execute . . .  in org.apache.http.impl.client.AbstractHttpClient
|    827 | execute        in     ''
|    170 | handle . . . . in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
|    120 | handle         in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle . . . . in com.sun.jersey.api.client.Client
|    670 | handle         in com.sun.jersey.api.client.WebResource
|     74 | access$200 . . in     ''
|    563 | post           in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register . . . in     ''
|   1224 | run            in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop . . . in java.util.TimerThread
^    462 | run            in     ''
```"NaNeureka-client should declare dependency on JettisonCraig Forstercraigforster01/28/13, 08:26:49 PM"The eureka-client package requires Jettison to be on the classpath, but doesn't declare the dependency.  Without Jettison on the classpath, `com.netflix.discovery.converters.JsonXStream` can't load resulting in this error from the heartbeat thread:

```
| Error 2013-01-28 13:21:32,659 [DiscoveryClient_Heartbeat] ERROR discovery.DiscoveryClient  - DiscoveryClient_AIQ/172.16.16.137 - registration failedjava.io.IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
Message: java.io.IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
    Line | Method
->>  184 | handle         in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    120 | handle         in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle . . . . in com.sun.jersey.api.client.Client
|    670 | handle         in com.sun.jersey.api.client.WebResource
|     74 | access$200 . . in     ''
|    563 | post           in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register . . . in     ''
|   1224 | run            in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop . . . in java.util.TimerThread
^    462 | run            in     ''

Caused by IOException: Cannot write the object for :class com.netflix.appinfo.InstanceInfo
->>  144 | writeTo        in com.netflix.discovery.provider.DiscoveryJerseyProvider
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    231 | writeRequestEntity in com.sun.jersey.api.client.RequestWriter$RequestEntityWriterImpl
|    262 | writeTo . . .  in com.sun.jersey.client.apache4.ApacheHttpClient4Handler$2
|    115 | writeTo        in org.apache.http.entity.BufferedHttpEntity
|     98 | writeTo . . .  in org.apache.http.entity.HttpEntityWrapper
|    108 | writeTo        in org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper
|    122 | serialize . .  in org.apache.http.impl.entity.EntitySerializer
|    271 | sendRequestEntity in org.apache.http.impl.AbstractHttpClientConnection
|    227 | sendRequestEntity in org.apache.http.impl.conn.AbstractClientConnAdapter
|    257 | doSendRequest  in org.apache.http.protocol.HttpRequestExecutor
|    125 | execute . . .  in     ''
|    712 | tryExecute     in org.apache.http.impl.client.DefaultRequestDirector
|    517 | execute . . .  in     ''
|    906 | execute        in org.apache.http.impl.client.AbstractHttpClient
|    827 | execute . . .  in     ''
|    170 | handle         in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
|    120 | handle . . . . in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle         in com.sun.jersey.api.client.Client
|    670 | handle . . . . in com.sun.jersey.api.client.WebResource
|     74 | access$200     in     ''
|    563 | post . . . . . in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register       in     ''
|   1224 | run . . . . .  in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop       in java.util.TimerThread
^    462 | run . . . . .  in     ''

Caused by NoClassDefFoundError: Could not initialize class com.netflix.discovery.converters.JsonXStream
->>   78 | write          in com.netflix.discovery.converters.EntityBodyConverter
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|    142 | writeTo        in com.netflix.discovery.provider.DiscoveryJerseyProvider
|    231 | writeRequestEntity in com.sun.jersey.api.client.RequestWriter$RequestEntityWriterImpl
|    262 | writeTo        in com.sun.jersey.client.apache4.ApacheHttpClient4Handler$2
|    115 | writeTo . . .  in org.apache.http.entity.BufferedHttpEntity
|     98 | writeTo        in org.apache.http.entity.HttpEntityWrapper
|    108 | writeTo . . .  in org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper
|    122 | serialize      in org.apache.http.impl.entity.EntitySerializer
|    271 | sendRequestEntity in org.apache.http.impl.AbstractHttpClientConnection
|    227 | sendRequestEntity in org.apache.http.impl.conn.AbstractClientConnAdapter
|    257 | doSendRequest  in org.apache.http.protocol.HttpRequestExecutor
|    125 | execute        in     ''
|    712 | tryExecute . . in org.apache.http.impl.client.DefaultRequestDirector
|    517 | execute        in     ''
|    906 | execute . . .  in org.apache.http.impl.client.AbstractHttpClient
|    827 | execute        in     ''
|    170 | handle . . . . in com.sun.jersey.client.apache4.ApacheHttpClient4Handler
|    120 | handle         in com.sun.jersey.api.client.filter.GZIPContentEncodingFilter
|    648 | handle . . . . in com.sun.jersey.api.client.Client
|    670 | handle         in com.sun.jersey.api.client.WebResource
|     74 | access$200 . . in     ''
|    563 | post           in com.sun.jersey.api.client.WebResource$Builder
|    810 | makeRemoteCall in com.netflix.discovery.DiscoveryClient
|    753 | makeRemoteCall in     ''
|    427 | register . . . in     ''
|   1224 | run            in com.netflix.discovery.DiscoveryClient$HeartbeatThread
|    512 | mainLoop . . . in java.util.TimerThread
^    462 | run            in     ''
```"NaNCraig Forster01/28/13, 07:18:08 PMeureka-client should declare dependency on jettison1
15New REST endpoints for (S)VIPNitesh KantNiteshKant07/17/13, 02:51:02 AM"Added two new endpoints to retrieve instances registered with eureka for a Virtual IP or secure Virtual IP.

Update to the WIKI for details about the REST operations is added to my for of eureka. I will add them to the main WIKI after the pull request merge.""[eureka-pull-requests #1](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/1/) FAILURE
Looks like there's a problem with this pull request
 =||= Canceling this pull request, will include few more changes and submit a new pull request.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
16use embedded jetty or tomcat for standalone startup?Chris Freglycfregly02/13/13, 12:59:30 AM"karthik-

any thought to using jetty (similar to exhibitor) or embedded tomcat (similar to asgard) for an easier standalone startup?  this would simplify the deploy instructions a bit as it would remove the dependency on a separate tomcat install.

additionally, this would allow additional CLI params like --port to allow eureka to startup on a custom port.

i really like how jordan built - and documented - his exhibitor CLI:  https://github.com/Netflix/exhibitor/wiki/Running-Exhibitor 

just a thought - this would address one of the items that we discussed at the recent Netflix OSS meetup.  specifically, the fact that my instructions to deploy eureka on a custom port are very involved:  https://github.com/cfregly/fluxcapacitor#build-and-deploy-eureka-server  

lemme know what you think.

thanks!

-chris""Chris,

May be I'm not understanding clearly when you say, configuring the port is pretty involved.

Are you saying specifying the following URL is complicated?

eureka.serviceUrl.defaultZone=http://localhost:8080/eureka/v2/
 =||= right, so the use case is changing the default port that eureka runs on.

unless i'm missing something, i need to modify tomcat's server.xml as well as one of the following:

1) modify the tomcat startup scripts to pass -D's to override the defaultZone property that you highlighted (not that bad)

or

2) manually change the property files in the source, rebuild the war, and redeploy the war (bad).

the ideal state is to pass --port 8080 or equivalent and everything would just work - without having to modify tomcat or eureka configs.

i'm likely missing something, however.

-chris
 =||= Chris,

You have it all correct. 

Eureka has not been built to support embedded servers. But these would be used only for dev purposes - correct. In production you may have to change server.xml etc based on your traffic needs. Isn't it?

And the option you are looking for - to change a port setting and everything should just work - will be available only with an embedded tomcat/jetty kind of setup.
 =||= understood.  yeah, this is primarily a development versus production request.

from a dev perspective, it may be useful to have an EmbeddedEureka server used for end-to-end integration testing.

i did something similar when building end-to-end tests for an implementation of Curator's Service Discovery feature.  Jordan exposes an embedded ZooKeeper TestingServer that proved very helpful in this situation.  it actually helped us identify a regression bug in Curator that was introduced when we picked up a newer version (https://github.com/Netflix/curator/issues/227)

here's the TestingServer code:  https://github.com/Netflix/curator/blob/master/curator-test/src/main/java/com/netflix/curator/test/TestingServer.java

again, not something that would be used in production, but definitely helpful for development/testing.

thanks, karthik!

-chris
 =||= The client surely does not assume that you are running inside a web
application. It just requires you to call discoverManager.initcomponents()
which initializes the client. The client provided in the eureka project
demonstrates this behavior.
Eureka server requires an HTTP endpoint, the easiest way of doing that is
to package it in a war & have your embedded servlet container.

On Thursday, February 6, 2014, viveklon notifications@github.com wrote:

> Can Eureka be used for a distributed (non web) JAVA application(s) to
> achieve same results? I am assuming yes, any example client/server known to
> anyone?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/issues/16#issuecomment-34373742
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
17bridging eureka and archaius configsChris Freglycfregly03/30/15, 09:41:50 PM"is there a way to avoid the following code snippet used to bridge the archaius and eureka configs:

https://github.com/cfregly/fluxcapacitor/blob/master/flux-edge/src/main/java/com/fluxcapacitor/edge/server/EdgeServer.java

i understand the desire to let eureka run standalone without requiring an archaius configuration, but is there a best-of-both-worlds approach where archaius will be used if these properties don't exist, maybe?

lemme know.

-chris""I think it is reasonable to fall back on archaius configs in case the specified eureka properties do not exist. I will make that change.
 =||= Closing old issue. Please re-open if the issue is still not resolved.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
18Feature request: REST method to reset renews thresholdTyson Stewarttysonstewart07/23/13, 06:52:44 PMIf the renewals falls below the threshold for a legitimate reason, it would be very helpful to have a method to reset the threshold to clear the alert state. As it is now, the only way to reset it is to restart Eureka."Not needed anymore - since the deletions are now honored properly.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
19Feature request: DELETEing a service lowers the renews thresholdTyson Stewarttysonstewart03/21/13, 10:48:40 PMWhen a service is deleted via the REST API, it's an active removal instead of passive like in the case of an automatic expiration. For that reason, Eureka should lower the renews threshold value so that an alert state will be resolved."Fixed by the commit : https://github.com/Netflix/eureka/commit/3478052ddef01a6de5fca9a601959c90e4bb3d6a
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
20Version 1.1.92 isn't taggedMat Schaffermatschaffer08/21/13, 05:41:14 PMNot sure if we push jars to maven central or not, but artifacts.netflix.com (internal) has a 1.1.92 version that isn't tagged here. Thought I'd file incase this indicates a build process bug."There were a few times there was a mismatch between what is available internally & what is available in maven.
Since, then we have fixed the problem (manual release process) and now the artifacts should be available in both repos.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
21Merge gradle template as of May 2013Justin Ryanquidryan06/06/13, 06:53:11 PM"Eureka's fallen behind in the gradle-template, this get it up to date. This adds a more stable release process, support for automatically publishing javadocs into gh-pages, upgrades to Gradle 1.5, and less strict header checking. Please merge at your convenience.

There's one problem with the current publishing which is putting signatures into the ivy files, but it's not uploading them. I also don't see any tags for 1.1.98. How is it being released? It's causing problems for other consumers of this library as of today."NaNMerge gradle template as of May 2013Justin Ryanquidryan06/06/13, 06:53:11 PM"Eureka's fallen behind in the gradle-template, this get it up to date. This adds a more stable release process, support for automatically publishing javadocs into gh-pages, upgrades to Gradle 1.5, and less strict header checking. Please merge at your convenience.

There's one problem with the current publishing which is putting signatures into the ivy files, but it's not uploading them. I also don't see any tags for 1.1.98. How is it being released? It's causing problems for other consumers of this library as of today."NaNJustin Ryan05/29/13, 11:31:00 PMAlways use version of the NEXT version1
22Problems with multiple eips and TXT?OskarKjellin07/23/13, 06:56:10 PM"I ran into some issues when I tried to setup multiple zones with eureka. According to the wiki, the txt records should be separated with ','. However, it seems like the code is using the whitespace character?
Wiki page I am referring to:
https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud

But on this line it splits using whitespace:
https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1366

This would be fine if it was as simple as a code->wiki mismatch. But when there is a whitespace within a txt record it returns it as ""eu-west1a eu-west1b"", instead of with comma as eu-west1a,eu-west1b (hard to illustrate but in the first case it returns a string containing actual quotation marks). So when it splits it winds up with:
- ""eu-west1a
- eu-west1b"" 

Which of course causes problems. 

Am I the only one who ran into this issue? Like the way that the TXT-records and automatic assigning of EIPs but it's very fragile to have only one eureka server.""Curious whether you tried with the actual TXT record having a comma between
entries as suggested by the wiki? If yes, does that work?

On Fri, Jun 14, 2013 at 4:34 AM, OskarKjellin notifications@github.comwrote:

> I ran into some issues when I tried to setup multiple zones with eureka.
> According to the wiki, the txt records should be separated with ','.
> However, it seems like the code is using the whitespace character?
> Wiki page I am referring to:
> https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud
> 
> But on this line it splits using whitespace:
> 
> https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1366
> 
> This would be fine if it was as simple as a code->wiki mismatch. But when
> there is a whitespace within a txt record it returns it as ""eu-west1a
> eu-west1b"", instead of with comma as eu-west1a,eu-west1b (hard to
> illustrate but in the first case it returns a string containing actual
> quotation marks). So when it splits it winds up with:
> - ""eu-west1a
> - eu-west1b""
> 
> Which of course causes problems.
> 
> Am I the only one who ran into this issue? Like the way that the
> TXT-records and automatic assigning of EIPs but it's very fragile to have
> only one eureka server.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/issues/22
> .
 =||= @NiteshKant Well yeah, that was the first thing I tried. That ended up just like trying to connect to 
""ec2-54-216-23-251.eu-west-1.compute.amazonaws.com,ec2-54-216-23-251.eu-west-1.compute.amazonaws.com:8080""

which of course didn't work which was when I started stepping through the code and found that it was actually splitting on a whitespace:

String[] cnames = txtRecord.split("" "");
 =||= Hi,

Yes - the wiki has to be fixed. I think you are probably getting the format of the TXT record wrong. I think the TXT records should be similar to this

""eu-west-1a"" ""eu-west-1b"".

Can you try this and let me know?
 =||= @karthik-vn It ends up the same. Tries to query like 
txt.""eu-west1.mydomain.com

Which doesn't work. According to the route53 documentation, multiple values should be one per line. But that doesn't work either. I had a fix before that just did value.replace(""\"""", """") which worked. But I should be able to use your jars and not need to modify my code.
 =||= Not sure what is going wrong in your case. Our route53 configuration works perfectly.

For eg. here is the TXT record for our test environment.

http://www.dnswatch.info/dns/dnslookup?la=en&host=txt.us-east-1.discoverytest.netflix.net&type=TXT&submit=Resolve
 =||= @karthik-vn thanks. The issue was the setup in route53 that I had made. The test link helped me narrow down the issue with my configuration. It's working now.

The wiki should be updated to match our discussion here
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
23Register VPC Eureka node in Route53 instead of EIPpommerien07/23/13, 06:56:20 PM"Hi there,
We are trying to run Eureka in a solely VPC environment and don't have the need for EIP registration.  Instead we are considering adding functionality to have Eureka register itself directly in Route53 as discovery.us-west-2c.xyz.com, or similar.  That way we can make Eureka part of an ASG, avoid middle-tier ELBs, and use round-robin DNS once we need more than one Eureka node per AZ.

Before we go through the effort, what is your guys' thinking around VPC deployments of Eureka and would you be interested in us committing this back?

Cheers
Nils""Hi, (Answering on behalf of Karthik)
   The eureka clients (for instances deployed in AWS) have a default logic
of registering and subsequently obtaining the list of registered instances
by communicating specifically to the eureka instance in its own zone (and
will failover to another eureka instance in its own zone etc.)

Although using Route53 might work technically, the clients will then route
to different instances resolved by Route53 (i.e they will not be pinned)
thus bypassing some of the optimizations built around this pinning.

Will get back to you once we pour some more thought on it.

Thanks
/Sudhir

On Fri, Jun 14, 2013 at 2:33 PM, pommerien notifications@github.com wrote:

> Hi there,
> We are trying to run Eureka in a solely VPC environment and don't have the
> need for EIP registration. Instead we are considering adding functionality
> to have Eureka register itself directly in Route53 as
> discovery.us-west-2c.xyz.com, or similar. That way we can make Eureka
> part of an ASG, avoid middle-tier ELBs, and use round-robin DNS once we
> need more than one Eureka node per AZ.
> 
> Before we go through the effort, what is your guys' thinking around VPC
> deployments of Eureka and would you be interested in us committing this
> back?
> 
> Cheers
> Nils
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/issues/23
> .

## 

/Sudhir
 =||= @Nils.

What is the motivation behind your design? Is it to autoscale the eureka nodes or load balance the requests to multiple eureka servers for a particular AZ?

Autoscaling has to be dealt with carefully because of  the horizontal replication in eureka.If it is to load balance across multiple servers in an AZ, we have thought of a way do this by retaining all the optimizations that Sudhir was talking about earlier.
 =||= Hi Karthik,
The main motivation is self-healing, and secondly autoscale, even though I understand we won't have to scale out Eureka until we hit thousands of nodes.  That said, I was envisioning putting Eureka into ASGs (one per AZ), with a size of maximum size of 1.  Whenever a node dies, it spins up a new one, and (correct me if I am wrong), in the non-VPC world, it would go out and grab an EIP.  So how would we do it in VPC?  I thought about it more this weekend and the other alternative is to do it via ""Network Interfaces"" which you bind to a ""static IP"", configure route 53 accordingly, e.g. discover.us-west2c.company.com, and through metadata lookup the newly born Eureka instance will know what interface to grab and bind to itself as secondary interface.

Does our motivation make sense?  And if so, what are your thoruhgts?

THank you!
--Nils
 =||= Your motivation does make sense with regards to distributing one eureka server per AZ with a max size of 1. Autoscaling may not be necessary. I will have to refresh my knowledge of how VPC and EIP works. Can you now bind an EIP in a VPC environment?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
24Hostname reused as InstanceId disallows multiple service instances on 1 hostdanielkwinsor03/30/15, 09:45:42 PM"Original thread is at https://groups.google.com/forum/#!topic/eureka_netflix/Rntihgo1i50

My usecase is that I'd like to have 1 service with multiple instances running on the same host.  Since they are the same service, they should have the same app name.  And since they are on the same host, they have the same hostname.  The problem is that in a non-AWS datacenter, the instanceID is populated by the hostname.  Same app name and same instanceId leads to overwriting in the service registry.  I would appreciate it if the EurekaInstanceConfig interface had a getId() method that I can implement.

Thank you.""This is possible by implementing a DataCenterInfo that also implement UniqueIdentifier.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
25Creating ability to have a custom (non-hostname) instanceId in non-AWS instancesdanielkwinsor07/02/13, 10:20:14 PM"https://groups.google.com/forum/#!topic/eureka_netflix/Rntihgo1i50
https://github.com/Netflix/eureka/issues/24""[eureka-pull-requests #2](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/2/) FAILURE
Looks like there's a problem with this pull request
 =||= I will provide another pull request soon.  I found some new code in ApplicationInfoManager.refreshDataCenterInfoIfRequired where if the hostname changes it should update... I should do the same thing for instance ID.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
26Creating ability to have a custom (non-hostname) instanceId in non-AWS instancesdanielkwinsor07/12/13, 09:15:43 PMNaN"[eureka-pull-requests #3](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/3/) FAILURE
Looks like there's a problem with this pull request
 =||= https://groups.google.com/forum/#!topic/eureka_netflix/Rntihgo1i50

https://github.com/Netflix/eureka/issues/24

There's no problem with the CI build, it just complains there is no junit test case.
 =||= [eureka-pull-requests #4](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/4/) FAILURE
Looks like there's a problem with this pull request
 =||= Not sure how my latest commit got into the pull request, I didn't request that, will remove it.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
27How to integrate CloudWatch?Panos Partheniadispparth08/07/13, 07:35:57 AM"Hello,

I can see the metrics exposed through Servo and JMX successfully. How do i integrate CloudWatch though? Where should i provide AWS credentials? Are these a standard accessKey and secretKey combination? For the server configuration, i can see the accessKey and secretKey configuration parameters. Are these used for CloudWatch integration? If this is the case, i do not see these parameters for the client configuration. Is CloudWatch available only to server?""Panos-

my https://github.com/cfregly/fluxcapacitor project has Eureka-Client/CloudWatch integration.

I'm currently passing in the accessKey and secretKey as -D system properties at tomcat startup.

these get used by the DefaultAwsCredentialsChain class.

here is the code you'll want to review: https://github.com/cfregly/fluxcapacitor/blob/master/flux-core/src/main/java/com/fluxcapacitor/core/metrics/FluxMetrics.java

this code also demonstrates how to configure Graphite integration.

also, it's worth noting that if you use something like Karyon that contains an Admin tool to inspect your System properties at runtime, your AWS credentials will now be exposed.

I'm about to issue a karyon pull request that will allow masking - and immutability - of certain properties such as these.

lemme know if you have other issues.

thanks!

-Chris

On Jul 5, 2013, at 3:32 AM, Panos Partheniadis notifications@github.com wrote:

> Hello,
> 
> I can see the metrics exposed through Servo and JMX successfully. How do i integrate CloudWatch though? Where should i provide AWS credentials? Are these a standard accessKey and secretKey combination? For the server configuration, i can see the accessKey and secretKey configuration parameters. Are these used for CloudWatch integration? If this is the case, i do not see these parameters for the client configuration. Is CloudWatch available only to server?
> 
> —
> Reply to this email directly or view it on GitHub.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
28Creating ability to have a custom (non-hostname) instanceId in non-AWS instancesdanielkwinsor04/23/14, 07:16:53 PM"https://groups.google.com/forum/#!topic/eureka_netflix/Rntihgo1i50

https://github.com/Netflix/eureka/issues/24

There's no problem with the CI build, it just complains there is no junit test case.""[eureka-pull-requests #5](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/5/) FAILURE
Looks like there's a problem with this pull request
 =||= I also would like this pull request to be merged. Is there any other change needed to get it done?
 =||= I merged this pull request: https://github.com/Netflix/eureka/pull/85 recently. Does that suffice? @danielkwinsor unfortunately we have not been able to merge this request before. In the light of the other code change (https://github.com/Netflix/eureka/pull/85), if you think this is required, can you sync this pull request to the master?
 =||= I've looked ino that pull request. If I get it right, it only works for Amazon Data Center, not MyOwn Data Center. Unfortunately, we are using the latter one. So it would be better to have this instance level of configuration.
 =||= @CH3CHO if your DatacenterInfo Object implements UniqueIdentifier interface, the id for the instance will be assigned the id returned via getId()
 =||= Closing this pull request as it is not required anymore. @CH3CHO let me know if you think otherwise.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
29Add ability to retrieve instances from any remote regionNitesh KantNiteshKant08/01/13, 08:34:51 PM"Currently eureka provides a way to get registry information from a remote aws region.
However, the behavior of this is not controllable by the user.
The instances from the remote region is added to the local registry only if the application, the instance belongs to, is not already available locally. 

This change should allow users to retrieve instances for a specific region (via the eureka client).

The following setup would be required to achieve this:
# Eureka Server

1) The eureka server which will get data from a remote region must create a property: eureka.remoteRegionUrlsWithName with the content as key value pairs separated by a comma. The key is the name of the region and value is the http(s) url to the eureka server in the remote region. This will deprecate the existing property: eureka.remoteRegionUrls which does not have any insight into which region the URL belongs to.
2) Optionally provide a whitelist of applications, per region (or global) which will restrict only a certain set of applications to be retrieved from a remote region. The retrieval here is referred to as the API view of the remote registry. The server internally will fetch the entire remote registry. The whitelist follows the property name: eureka.remoteRegion.[region_name].appWhiteList, where [region_name] can either be the string ""global"" or the name of the region (must match with what is provided in 1 above). The value is a comma separated list of app names. The global list is only consulted  when there is no whitelist for the specific region. In absence of any whitelist all instances from the remote region will be retrieved.
# Client

1) Define a property: eureka.fetchRemoteRegionsRegistry with the value as comma separated list of regions from which this client should fetch the registry information. This obviously requires that the server actually is pulling data from those regions.
2) For each remote region that the client need to fetch, define a property: ""eureka.[region_name].availabilityZones"" containing a comma separated list of all availability zones in the region. This is to reverse map, the availability zones (available as instance metadata) in eureka server registry response. Since, this mapping is static, it adds little value to add the extra parameter region in all the instance information. We can possibly infer this from availability zone, i.e. us-west-1c is in region us-west-1 but this is more or less to externalize this logic rather than bake in the code.
2) Use the methods in DiscoveryClient to get instances for a specific region. In absence of a region, the client will fetch instances from the local region only.
# Caveat

If the client choose this mode of fetching instances, it can not go back to the previous way of getting remote region instances i.e. only applications that are not available locally will be fetched from remote region without the client knowing about it."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
30Ability to retrieve instances from any remote regionNitesh KantNiteshKant07/29/13, 09:28:30 PM"Fix for issue # 29
Also adds two new Jersey endpoints to retrieve instances by (S)VIPAddress""[eureka-pull-requests #6](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/6/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #7](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/7/) SUCCESS
This pull request looks good
 =||= "Ability to retrieve instances from any remote regionNitesh KantNiteshKant07/29/13, 09:28:30 PM"Fix for issue # 29
Also adds two new Jersey endpoints to retrieve instances by (S)VIPAddress"NaNNitesh Kant07/27/13, 12:28:15 AMMerge branch 'master' of https://github.com/Netflix/eureka1
31Add service UP time trackingScott Escotte08/06/13, 08:38:19 PMTrack timestamp when a service is first marked UP in Eureka, and report this through REST payloads."[eureka-pull-requests #8](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/8/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #10](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/10/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #12](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/12/) SUCCESS
This pull request looks good
 =||= "Add service UP time trackingScott Escotte08/06/13, 08:38:19 PMTrack timestamp when a service is first marked UP in Eureka, and report this through REST payloads.NaNScott Emmons07/29/13, 11:52:33 PMAdd service UP time tracking1
32EIPManager should choose unbounded EIP as the first candidateNitesh KantNiteshKant08/01/13, 08:34:39 PM"Currently, EIPManager.getCandidateEIP() will prefer EIPs attached to unreachable instances first if they appear in the available EIP list first.
This can be optimized more by first choosing the EIP which is not attached to any instance (as per other peer nodes registry info) at all. "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
33Fixes issue #32Nitesh KantNiteshKant07/30/13, 07:57:10 PMNaN"[eureka-pull-requests #9](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/9/) SUCCESS
This pull request looks good
 =||= Made changes based on your comments.
 =||= [eureka-pull-requests #11](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/11/) SUCCESS
This pull request looks good
 =||= "Fixes issue #32Nitesh KantNiteshKant07/30/13, 07:57:10 PMNaNNaNNitesh Kant07/29/13, 11:19:44 PMFixes issue #321
34Adding some debug statements in the testsNitesh KantNiteshKant07/31/13, 08:27:17 PMThis helps in better asserting the reason of the test failures"[eureka-pull-requests #13](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/13/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #14](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/14/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #15](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/15/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #16](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/16/) SUCCESS
This pull request looks good
 =||= "Adding some debug statements in the testsNitesh KantNiteshKant07/31/13, 08:27:17 PMThis helps in better asserting the reason of the test failuresNaNNitesh Kant07/31/13, 08:20:07 PMAdded cloudbees link1
35Fixing test flakinessNitesh KantNiteshKant07/31/13, 09:26:20 PM"The global application whitelist was getting set in a test but not cleaned up.
This was the reason tests were failing in some environments depending in which order the tests were run.""[eureka-pull-requests #17](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/17/) SUCCESS
This pull request looks good
 =||= "Fixing test flakinessNitesh KantNiteshKant07/31/13, 09:26:20 PM"The global application whitelist was getting set in a test but not cleaned up.
This was the reason tests were failing in some environments depending in which order the tests were run."NaNNitesh Kant07/31/13, 09:19:15 PMFixing flakiness of the tests because of improper property cleanup.1
36Bug fix & default az->region mappingNitesh KantNiteshKant08/01/13, 07:13:00 AM"1) Provided a default availability zone -> region mapping for ec2 so that every client does not have to provide the same. This can be overridden by a property per region.
2) Fixed a bug in DiscoveryClient.getInstancesByVipAddress() for a region. For invalid VIPs, the null check was wrong.""[eureka-pull-requests #18](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/18/) SUCCESS
This pull request looks good
 =||= "Bug fix & default az->region mappingNitesh KantNiteshKant08/01/13, 07:13:00 AM"1) Provided a default availability zone -> region mapping for ec2 so that every client does not have to provide the same. This can be overridden by a property per region.
2) Fixed a bug in DiscoveryClient.getInstancesByVipAddress() for a region. For invalid VIPs, the null check was wrong."NaNNitesh Kant08/01/13, 07:03:33 AM"Did the following changes:

1) Provided a default availability zone -> region mapping for ec2 so that every client does not have to provide the same. This can be overridden by a property per region.
2) Fixed a bug in DiscoveryClient.getInstancesByVipAddress() for a region. For invalid VIPs, the null check was wrong."1
37Ability to fetch instances from remote region should be changeable dynamicallyNitesh KantNiteshKant08/02/13, 07:25:35 AM"The changes in issue #29 enabled eureka client to fetch instances from a remote region (if available with the server) if configured via a property. This behavior is determined at client initialization. This will cause applications to restart whenever a change in behavior is required.
We should make this decision dynamically everytime we refresh the client's cache. This will lead to clearing up the local cache and fetching entire registry whenever the property changes."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
38Availability Zone -> region mapping can be fetched from DNSNitesh KantNiteshKant08/02/13, 07:25:35 AM"The fix for issue #29 derives the region for an availability zone based on a property.
This same information is available for netflix environment in DNS entry. 
Hence, if available (i.e. eureka client is configured to fetch service urls from DNS) we should use the DNS for this mapping. Also, the mapping must be refreshed everytime we fetch data from the eureka server."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
39Fix for issue #37 & #38Nitesh KantNiteshKant08/02/13, 07:17:35 AMNaN"[eureka-pull-requests #19](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/19/) SUCCESS
This pull request looks good
 =||= "Fix for issue #37 & #38Nitesh KantNiteshKant08/02/13, 07:17:35 AMNaNNaNNitesh Kant08/02/13, 07:10:06 AMFix for issue #37 & #381
40Failure in initializing remote registry must be fatalNitesh KantNiteshKant08/21/13, 05:39:10 PM"Currently, if the eureka server is configured to fetch data from a remote region registry but fails to initialize the same, the error is ignored.
This results in unexpected behavior of the server without any indication of what is wrong. We should fail fast in such a scenario."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
41Fixes for issue #40Nitesh KantNiteshKant08/09/13, 06:19:20 PMAlso added some debug logs to provide more info about the remote calls and the instance registry contents (app hashcodes) after refresh from server."[eureka-pull-requests #20](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/20/) SUCCESS
This pull request looks good
 =||= "Fixes for issue #40Nitesh KantNiteshKant08/09/13, 06:19:20 PMAlso added some debug logs to provide more info about the remote calls and the instance registry contents (app hashcodes) after refresh from server.NaNNitesh Kant08/09/13, 06:09:48 PMSome debug logs to give a view of the registry contents (app hashcodes for every region) after each registry refresh from the server.1
42Startup of Eureka in local environment takes 3-5 minutesJon Fennerjfenner02/26/15, 12:16:48 AM"When starting Eureka in a dev environment with no other Eureka servers available, the startup times takes between 3 and 5 minutes.  I was that setting the following parameters would bypass this:

eureka.enableSelfPreservation=false
eureka.registration.enabled=false

However, it still is taking 3-5 minutes.  Is there something else that needs to be set for this to work?""When eureka first starts up without peers it takes about 5 mins for it to start serving requests because it waits for all clients to register completely before it can give out the list. You can disable this by setting this

#Set this only for this sample service without which starting the instance will by default wait for the default of 5 mins
eureka.waitTimeInMsWhenSyncEmpty=0

In a production environment, it is recommended that you don't set this property. You might want to revert the other property changes above as they are unrelated.
 =||= Hi Karthik-vn,

Thanks for the reply.  I'm actually already setting that parameter, but it doesn't seem to make a difference.  Here's what I have for a config:

Tomcat setenv.sh:

```
export JAVA_OPTS=""$JAVA_OPTS \
                   -Deureka.enableSelfPreservation=false \
                   -Deureka.registration.enabled=false \
                   -Deureka.environment=dev \
                   -Deureka.datacenter=ndc""
echo $JAVA_OPTS
```

And my eureka-server.properties (masked):

```
#Set this only for this sample service without which starting the instance will by default wait for the default of 5 mins
eureka.waitTimeInMsWhenSyncEmpty=0

#AWS access key which has access to EIP binding and looking up autoscaling information
eureka.awsAccessId=*****
eureka.awsSecretKey=******
@next=eureka-${environment}-${region}.properties
```

And finally eureka-server-dev.properties (masked):

```
#AWS access key which has access to EIP binding and looking up autoscaling information
eureka.awsAccessId=******
eureka.awsSecretKey=*******
```
 =||= @jfenner -  this might sound silly, but are you rebuilding the eureka-server webapp with the new properties being set?  

also, you might want to try setting those -D's in the actually eureka-server.properties file itself.

here's a link to my FluxCapacitor Netflix OSS FAQ that describes this issue:  https://github.com/cfregly/fluxcapacitor/wiki/NetflixOSS-FAQ#eureka-service-discovery-load-balancer

The eureka.registration.enabled=false should have taken care of the problem (it has for others), so i wonder if those -D's aren't being picked up for some reason.

i just added karthik's recent suggestion of setting eureka.waitTimeInMsWhenSyncEmpty=0 to the FAQ as i hadn't heard of that before.

lemme know if that helps.

-chris
 =||= I'm also seeing this, even with `eureka.waitTimeInMsWhenSyncEmpty` set to `0`.  While this is hard to see with Tomcat, attempting to run under Jetty shows a tremendous number of stack traces as Eureka server tries and fails to connect to itself with the Eureka client, presumably because it's still attempting to come up.
 =||= @NiteshKant @cfregly @karthik-vn This is actually happening in `EurekaBootStrap.contextInitialized`, when it calls `registry.syncUp()` (roughly line 102, depending on which PRs are merged when you look this up).  `syncUp()` will sleep up to, by default, five times, for 30 seconds, until it can find a peer to register with.  There's your 3-5 minute start-up time with the default `.properties` files.

There are two possible fixes to this:
1. Modify the wiki to also note that you have to set `eureka.numberRegistrySyncRetries` to `0` for debugging
2. Introduce a new setting, called something like `eurekaServer.testingMode`, that bypasses the initial `syncUp` call entirely.

The first is obviously less work, but second's also pretty simple.  Thoughts?
 =||= @bpollack I personally like the option 2. so that there is less configuration to set.
In fact we should be able to support starting the servers with no eureka peers configured. This would automatically remove all these issues. Thoughts?
 =||= @NiteshKant Hmm, I like your idea.  Will quickly whip up a PR in that style for feedback.
 =||= To eliminate syncUp just set `eureka.numberRegistrySyncRetries=0`. Once it is set, the server starts up instantly.
I propose to close this issue, as there was no follow up on it for some time, and there is alternative approach to achieve this goal.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
43Restarting eureka server with EIP binding causes the next bind to take a long timeMelvin Cardozomampcs08/30/13, 08:19:36 PM"On Amazon, when eureka is brought down, it releases the EIP address. Amazon does not reassign a new public ip address to the instance for atleast a couple of minutes once the EIP is released. Restarting the eureka server during this time causes the EIP binding to fail the first time because the public IP is null. Here's the stack trace:

2013-08-20 15:05:55,365 ERROR com.netflix.eureka.EurekaBootStrap:266 [localhost-startStop-1] [bindEIP] Cannot bind to EIP
java.lang.NullPointerException
        at com.netflix.eureka.util.EIPManager.getCandidateEIP(EIPManager.java:196)
        at com.netflix.eureka.util.EIPManager.bindToEIP(EIPManager.java:114)
        at com.netflix.eureka.EurekaBootStrap.bindEIP(EurekaBootStrap.java:263)
        at com.netflix.eureka.EurekaBootStrap.handleEIPbinding(EurekaBootStrap.java:222)

It would be nice to allow the binding to go ahead if the current ip is null.""Created a pull request for the change.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
44Add capability to invoke a registered callback when instance is evictedMelvin Cardozomampcs07/01/16, 10:28:23 PM"We have been extending the eureka server to add additional capabilities to it. But we would like to be able to do this without actually making any changes to the eureka code itself.
One nice feature that would help us if to have the ability to register a callback function that should be invoked whenever an instance is evicted by eureka (once it's become non responsive). That would allow us to keep our code base independent of the eureka code base.""Sounds like a good feature request, do you wish to contribute?
 =||= Sure. I'll work on getting the changes done.
 =||= Awesome, thanks!

nitesh

On Aug 22, 2013, at 3:19 PM, Melvin Cardozo notifications@github.com wrote:

> Sure. I'll work on getting the changes done.
> 
> —
> Reply to this email directly or view it on GitHub.
 =||= Closing due to inactivity. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
45NPE when remote discovery is not available/reachableNitesh KantNiteshKant08/22/13, 04:48:51 PM"RemoteRegionRegistry: https://github.com/Netflix/eureka/blob/4897114c759524bdebef9f9daa8baf372263d430/eureka-core/src/main/java/com/netflix/eureka/RemoteRegionRegistry.java#L193

tries to access response object which will be null if the remote discovery is not reachable."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
46Fixes issue #45Nitesh KantNiteshKant08/22/13, 04:48:17 PMNaN"[eureka-pull-requests #21](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/21/) SUCCESS
This pull request looks good
 =||= "Fixes issue #45Nitesh KantNiteshKant08/22/13, 04:48:17 PMNaNNaNNitesh Kant08/21/13, 08:45:36 PMFixes issue #451
47Disable transparent fallback to remote regionNitesh KantNiteshKant08/27/13, 12:02:48 AM"The first implementation of fetching instances from a remote registry was done in a way that iff there are no instances of an application in the local region, then we get instances from remote region transparently, without the caller knowing it.
The above worked for the usecase inside Netflix initially. However, the flaw is that there was no way to fetch instances from a remote region if there were some instances of the same app in the local region. This will be prohibitive in an active-active multiple region setup.
Issue #29 provided a new way of fetching instances from a remote region.

This issue here is created to phase out the older behavior in a controlled way."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
48Fixes issue #47Nitesh KantNiteshKant08/27/13, 12:02:42 AMNaN"[eureka-pull-requests #22](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/22/) SUCCESS
This pull request looks good
 =||= "Fixes issue #47Nitesh KantNiteshKant08/27/13, 12:02:42 AMNaNNaNNitesh Kant08/26/13, 09:39:57 PMFixes issue #471
49Allow EIP binding if the current IP of the instance is null.Melvin Cardozomampcs08/29/13, 05:38:00 PM"It's possible for myPublicIP to be null when eureka is restarted
because unbinding an EIP on Amazon results in a null IP for the
instance for a few minutes. In that case, it's ok to rebind the
new EIP.""[eureka-pull-requests #23](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/23/) SUCCESS
This pull request looks good
 =||= Thanks @mampcs 
 =||= "Allow EIP binding if the current IP of the instance is null.Melvin Cardozomampcs08/29/13, 05:38:00 PM"It's possible for myPublicIP to be null when eureka is restarted
because unbinding an EIP on Amazon results in a null IP for the
instance for a few minutes. In that case, it's ok to rebind the
new EIP."NaNMelvin Cardozo08/29/13, 05:22:20 PM"Allow EIP binding if the current IP of the instance is null.

It's possible for myPublicIP to be null when eureka is restarted
because unbinding an EIP on Amazon results in a null IP for the
instance for a few minutes. In that case, it's ok to rebind the
new EIP."1
50Instance region checker should fallback to parsing the availability zoneNitesh KantNiteshKant09/19/13, 06:42:33 AM"Currently discovery client determines the region of an instance by looking up the availability zone into the set of known availability zone -> region mapping. This mapping is determined via DNS or properties.
However, in case, when there is no valid information in this mapping for an availability zone, it puts this instance into the local bucket. We can have one fallback which can see if the availability zone follows a format like: us-east-1c where us-east-1 is the region name and ""c"" is the zone. If so, we can see if the resulting name is a valid, known region, if so, use the same."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
51Fixes issue #50Nitesh KantNiteshKant08/30/13, 11:59:33 PMAlso, provided some handy methods in DiscoveryClient to get all known regions and apps for a region."[eureka-pull-requests #24](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/24/) SUCCESS
This pull request looks good
 =||= "Fixes issue #50Nitesh KantNiteshKant08/30/13, 11:59:33 PMAlso, provided some handy methods in DiscoveryClient to get all known regions and apps for a region.NaNNitesh Kant08/30/13, 11:53:14 PM"Fixes issue #50

Also, provided some handy methods in DiscoveryClient to get all known regions and apps for a region."1
52Handling empty AZ in AZtoRegionMapperNitesh KantNiteshKant08/31/13, 08:13:13 AMNaN"[eureka-pull-requests #25](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/25/) SUCCESS
This pull request looks good
 =||= "Handling empty AZ in AZtoRegionMapperNitesh KantNiteshKant08/31/13, 08:13:13 AMNaNNaNNitesh Kant08/31/13, 07:55:47 AMHandling empty AZ in AZtoRegionMapper1
53eureka-client should not depend on jersey-bundleTom GoldenTomRK108902/24/14, 06:12:51 PM"From the description of the jersey-bundle artifact:

> Such a bundle is _only intended_ for developers that do not use Maven's dependency system.

Consider specifying in POM/gradle build script exactly which Jersey artifacts are required. The inclusion of the bundle artifact leads to issues with managing transitive dependency conflicts of different Jersey versions."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
54Add support for Eucalyptus endpointschris grzegorczykgrze07/22/14, 11:21:56 PM"- Use EurekaClientConfig to obtain EC2 and AutoScaling endpoints.
- Introduce EucalyptusEurekaClientConfig for construcing euca URLs.
- Modify AwsAsgUtil and EIPManager accordingly.""[eureka-pull-requests #26](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/26/) SUCCESS
This pull request looks good
 =||= @grze Apologies that we have not been able to merge this change till now. If this is required can you sync the code with the master for this request?
 =||= Closing this PR as it can not be merged and there doesn't seem to be any activity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
55"RemoteRegionRegistry does not set ""ready for traffic"" to false if connection to remote region fails"Nitesh KantNiteshKant09/17/13, 08:43:07 PM"The connection error is silently ignored.
This should not be the case because this will be cause an issue of eureka not showing up instances from the other region."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
56Fix for issue #55Nitesh KantNiteshKant09/17/13, 08:42:48 PMNaN"[eureka-pull-requests #27](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/27/) SUCCESS
This pull request looks good
 =||= "Fix for issue #55Nitesh KantNiteshKant09/17/13, 08:42:48 PMNaNNaNnkant09/17/13, 08:35:34 PMFix for issue #551
57DiscoveryClient should honor remote regions when querying backupNitesh KantNiteshKant12/13/13, 06:19:36 PMDiscovery client while querying from the backup registry, in the event of all eureka servers not being available, does not honor remote regions requested. NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
58Fix for issue #57Nitesh KantNiteshKant09/19/13, 07:20:05 AMNaN"[eureka-pull-requests #28](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/28/) SUCCESS
This pull request looks good
 =||= "Fix for issue #57Nitesh KantNiteshKant09/19/13, 07:20:05 AMNaNNaNnkant09/19/13, 06:44:11 AMFix for issue #571
59Eureka client optimizations for failover and loadbalancingkarthik-vn12/13/13, 06:17:44 PM"1) Eureka client tries to talk to a server in the same zone and fails over to the next server predictably for all clients in that zone. This could put a lot of pressure on the server that all these clients are failing over. These clients should distribute the load to other servers in the case of failover. This can be achieved by choosing a different failover server depending on the client.

2) Currently when there are 2 servers in the same zone, the eureka client always chooses the same server every time. The second server is not utilized until failover. This restricts the ability to loadbalance requests across multiple servers in the same zone."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
60Disable full registry download during eureka self-preservationkarthik-vn12/13/13, 06:19:05 PMDuring self-preservation mode, eureka clients try to download the full registry instead of deltas.  There does not seem to be any apparent benefit for this - we should continue with fetching the delta fetch and download full registry only if the clients cache and the server information gets out of sync.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
61Fix for https://github.com/Netflix/eureka/issues/59karthik-vn10/16/13, 07:50:15 PMNaN"[eureka-pull-requests #29](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/29/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #30](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/30/) SUCCESS
This pull request looks good
 =||= Looks good to me
 =||= "Fix for https://github.com/Netflix/eureka/issues/59karthik-vn10/16/13, 07:50:15 PMNaNNaNKarthik Ranganathan10/16/13, 06:52:56 PM"Fix for https://github.com/Netflix/eureka/issues/60:

During self-preservation mode, eureka clients try to download the full registry instead of deltas. There does not seem to be any apparent benefit for this - we should continue with fetching the delta fetch and download full registry only if the clients cache and the server information gets out of sync."1
62Fine tune EIP associationkarthik-vn12/13/13, 06:19:14 PM"When eureka server startups, it tries to find the unused EIPS based on the list from it neighboring nodes.

If that communication fails for some reason, multiple eureka servers will bind to the same EIP there by snatching it from one another.

AWS does not prevent reassociation in EC2-classic. A better way to handle this edge-case scenario is to find if the an instance id is associated with an elastic IP and if so skip that binding."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
63https://github.com/Netflix/eureka/issues/62karthik-vn10/18/13, 09:14:51 PM"When eureka server startups, it tries to find the unused EIPS based on the list from it neighboring nodes.

If that communication fails for some reason, multiple eureka servers will bind to the same EIP there by snatching it from one another.

AWS does not prevent reassociation in EC2-classic. A better way to handle this edge-case scenario is to find if the an instance id is associated with an elastic IP and if so skip that binding.""[eureka-pull-requests #31](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/31/) SUCCESS
This pull request looks good
 =||= Does this also solves the race condition when two instances try to take the same EIP concurrently? I guess not.
 =||= "https://github.com/Netflix/eureka/issues/62karthik-vn10/18/13, 09:14:51 PM"When eureka server startups, it tries to find the unused EIPS based on the list from it neighboring nodes.

If that communication fails for some reason, multiple eureka servers will bind to the same EIP there by snatching it from one another.

AWS does not prevent reassociation in EC2-classic. A better way to handle this edge-case scenario is to find if the an instance id is associated with an elastic IP and if so skip that binding."NaNKarthik Ranganathan10/18/13, 09:10:13 PM"https://github.com/Netflix/eureka/issues/62

When eureka server startups, it tries to find the unused EIPS based on the list from it neighboring nodes.

If that communication fails for some reason, multiple eureka servers will bind to the same EIP there by snatching it from one another.

AWS does not prevent reassociation in EC2-classic. A better way to handle this edge-case scenario is to find if the an instance id is associated with an elastic IP and if so skip that binding."1
64Break after we have associated the EIP without going through the entire ...karthik-vn10/18/13, 10:18:05 PM...list."[eureka-pull-requests #32](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/32/) SUCCESS
This pull request looks good
 =||= "Break after we have associated the EIP without going through the entire ...karthik-vn10/18/13, 10:18:05 PM...list.NaNKarthik Ranganathan10/18/13, 10:16:23 PMBreak after we have associated the EIP without going through the entire list.1
65https://github.com/Netflix/eureka/issues/62: Simplify EIP assignment logic.karthik-vn10/21/13, 06:35:53 PMNaN"[eureka-pull-requests #33](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/33/) SUCCESS
This pull request looks good
 =||= "https://github.com/Netflix/eureka/issues/62: Simplify EIP assignment logic.karthik-vn10/21/13, 06:35:53 PMNaNNaNKarthik Ranganathan10/21/13, 06:33:46 PMFix a minor bug with respect to logging information.1
66"Change jersey bundle dependency to ""provided"" so that the upstream depen..."karthik-vn10/30/13, 05:49:16 PM...dencies can specify their own."[eureka-pull-requests #34](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/34/) SUCCESS
This pull request looks good
 =||= ""Change jersey bundle dependency to ""provided"" so that the upstream depen..."karthik-vn10/30/13, 05:49:16 PM...dencies can specify their own.NaNKarthik Ranganathan10/30/13, 05:47:29 PM"Change jersey bundle dependency to ""provided"" so that the upstream dependencies can specify their own."1
67Add missing dependency.karthik-vn11/04/13, 07:11:08 PMNaN"[eureka-pull-requests #35](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/35/) SUCCESS
This pull request looks good
 =||= "Add missing dependency.karthik-vn11/04/13, 07:11:08 PMNaNNaNKarthik Ranganathan11/04/13, 07:08:55 PMAdd missing dependency.1
68Replication optimization where the network traffic between eureka nodes ...karthik-vn12/23/13, 11:07:06 PM"...are considerably reduced by executing the replication events as one batch instead of individual requests.

This has both the effect of reducing the number of threads on the eureka server side and also makes the replication lightning fast (where 100s of replication request are executed at the same time as 1 request). This optimization has a great positive effect of scaling eureka servers much much more horizontally making replication and state maintenance a non-issue when the cluster expands to have more nodes.""[eureka-pull-requests #36](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/36/) SUCCESS
This pull request looks good
 =||= I haven't yet seen the entire code, but have a question: How do we assert whether a peer node supports batched requests? 
 =||= [eureka-pull-requests #37](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/37/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #38](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/38/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #39](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/39/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #40](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/40/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #41](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/41/) SUCCESS
This pull request looks good
 =||= LGTM
 =||= "Replication optimization where the network traffic between eureka nodes ...karthik-vn12/23/13, 11:07:06 PM"...are considerably reduced by executing the replication events as one batch instead of individual requests.

This has both the effect of reducing the number of threads on the eureka server side and also makes the replication lightning fast (where 100s of replication request are executed at the same time as 1 request). This optimization has a great positive effect of scaling eureka servers much much more horizontally making replication and state maintenance a non-issue when the cluster expands to have more nodes."NaNKarthik Ranganathan11/19/13, 06:46:01 PMMinor refactors and bug fixes.1
69Add Client Update CallbackJames Kojojameskojo09/24/15, 12:01:02 AM"Add a callback to allow for listeners to be notified when the eureka client gets an update in it's poller.

I'm managing a connection pool to a set of instances in a cluster. I'd like to be able to react in a timely manner to status changes of those instances. E.G. mark-down, mark-up, instance termination and metadata changes. 

My current strategy is to poll the client periodically, but that introduces even more latency on top of the latency introduced by the polling thread.""It is supported via EventBus service, where discovery events are emitted (StatusChangeEvent and CacheRefreshedEvent).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
70Add metrics for HTTP client connection poolNitesh KantNiteshKant01/11/14, 09:11:35 AM"The apache HTTP client, used by eureka for making HTTP requests to eureka servers does not have any metrics for connection pool. We should atleast be adding the following:

1) Available connections per host.
2) Idle connections per host.
3) Total connections per host.
4) In flight requests per host.""[Ribbon](https://github.com/Netflix/ribbon) provides a [MonitoredConnectionManager](https://github.com/Netflix/ribbon/blob/master/ribbon-httpclient/src/main/java/com/netflix/http4/MonitoredConnectionManager.java) that can be used instead of the currently used ThreadSafeClientConnManager. It provides similar metrics to what we are looking for here.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
71Support for more than just plain/secure portJay Zarfosszarfide07/01/16, 10:28:53 PM"Currently a server can only offer services on 2 ports when integrated with Ribbon since announced addresses are limited to port/secureport.

Ideally an arbitrary number of ports could be supported.  Or at the very least 3, one each for http, https with client auth, https without client auth.""Eureka supports a comma separated VIP list for an instance but the port/secure port can just be one. Which makes the usage of multiple VIPs limited.
So, one should be able to register a list of ""endpoints"" which translates to a set of properties like VIP address, port, SSL config (client auth, etc.). This would result in a substantial change in the way we register (via properties as making them hierarchical is non-intutive) with eureka & the REST payload.
 =||= Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
72Connection leak on OOMNitesh KantNiteshKant01/11/14, 09:11:42 AMEureka uses jersey apache http client for eureka server communications. In order to cleanup connections, it relies on closing the ClientResponse object returned by jersey. In cases, when there is an unexpected error (like OOM) during reading of response, there is no ClientResponse object that is returned by jersey. In such a case, there happens to be a connection leak in the apache http client connection pool."Since, there isn't much handle that eureka code has in the internals of jersey & connection management for such errors, the only suitable place seems to be the [DiscoveryJerseyProvider](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/provider/DiscoveryJerseyProvider.java) where in we can close the underlying response stream when such an error occurs.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
73Fix for issue #53 #70 #72Nitesh KantNiteshKant01/04/14, 12:27:22 AM"Issue #70 Using ribbon's MonitoredConnectionManager instead of apache's ThreadSafeClientConnManager
Issue #72 Improved exception handling in DiscoveryJerseyProvider & closing inputstream on Error during read.""[eureka-pull-requests #42](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/42/) SUCCESS
This pull request looks good
 =||= "Fix for issue #53 #70 #72Nitesh KantNiteshKant01/04/14, 12:27:22 AM"Issue #70 Using ribbon's MonitoredConnectionManager instead of apache's ThreadSafeClientConnManager
Issue #72 Improved exception handling in DiscoveryJerseyProvider & closing inputstream on Error during read."NaNNitesh Kant01/04/14, 12:12:10 AMFix for issue #53 #70 #721
74Bumping snapshot versionNitesh KantNiteshKant01/07/14, 12:43:25 AMFor some odd reason the snapshot versions are messed up in Netflix artifactory. So bumping the revision manually."[eureka-pull-requests #43](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/43/) SUCCESS
This pull request looks good
 =||= "Bumping snapshot versionNitesh KantNiteshKant01/07/14, 12:43:25 AMFor some odd reason the snapshot versions are messed up in Netflix artifactory. So bumping the revision manually.NaNNitesh Kant01/07/14, 12:41:23 AMBumping snapshot version1
75Using a more qualified name for HTTP client stats.Nitesh KantNiteshKant01/07/14, 09:01:04 PMNaN"[eureka-pull-requests #44](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/44/) SUCCESS
This pull request looks good
 =||= "Using a more qualified name for HTTP client stats.Nitesh KantNiteshKant01/07/14, 09:01:04 PMNaNNaNNitesh Kant01/07/14, 07:51:14 PMUsing a more qualified name for HTTP client stats.1
76Discovery client should have a way to skip registry fetchNitesh KantNiteshKant02/24/14, 06:12:23 PMFor applications that do not make any outbound calls, do not need to fetch the discovery registry information which can have significant memory overhead depending on how many instances are in the registry.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
77Fix dependencies in gradle build.Veniamin Viflyantsevknok1601/13/14, 07:11:04 AMcom.sun.jersey:jersey-servlet:1.11 dependency was missed in one of previously commits (5d9fbd77f681b3a13d7689ce87ccab83be874ea8 Fix for issue #53 #70 #72)"[eureka-pull-requests #45](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/45/) SUCCESS
This pull request looks good
 =||= Thanks!
 =||= "Fix dependencies in gradle build.Veniamin Viflyantsevknok1601/13/14, 07:11:04 AMcom.sun.jersey:jersey-servlet:1.11 dependency was missed in one of previously commits (5d9fbd77f681b3a13d7689ce87ccab83be874ea8 Fix for issue #53 #70 #72)NaNVeniamin V01/12/14, 09:37:01 PMFix dependencies in gradle build. com.sun.jersey:jersey-servlet:1.11 was missed during some refactoring.1
78Fix for issue #76Nitesh KantNiteshKant01/14/14, 06:10:32 PMAdded a property eureka.shouldFetchRegistry which when set to false will disable registry fetch."[eureka-pull-requests #46](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/46/) SUCCESS
This pull request looks good
 =||= "Fix for issue #76Nitesh KantNiteshKant01/14/14, 06:10:32 PMAdded a property eureka.shouldFetchRegistry which when set to false will disable registry fetch.NaNNitesh Kant01/13/14, 07:35:07 AMFix for issue #761
79General code cleanupScott Escotte04/25/14, 10:07:01 PM"This pull request contains two commits:

1) Remove trailing whitespace in files, including one file converted from dos EOLs
2) General code cleanup

The changes in 2) are best viewed as a diff against 1).

I will add a few line comments for clarity and spots where things might have been correct but someone more familiar with the code would have a better idea; and I will happily revert any bits that shouldn't be changed.""[eureka-pull-requests #47](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/47/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #50](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/50/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #51](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/51/) SUCCESS
This pull request looks good
 =||= I'd suggest we go ahead and close this; I hit a lot of this in #110, and I've grabbed a lot of the rest in stuff waiting on that to clear or get modified.
 =||= @bpollack agreed, closed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
80Disabling batch replication by defaultNitesh KantNiteshKant02/06/14, 08:39:44 PMNaN"[eureka-pull-requests #48](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/48/) FAILURE
Looks like there's a problem with this pull request
 =||= "Disabling batch replication by defaultNitesh KantNiteshKant02/06/14, 08:39:44 PMNaNNaNNitesh Kant02/06/14, 08:32:05 PMDisabling replication batching by default.1
81Optimize amazon metadata service callsNitesh KantNiteshKant09/23/15, 11:57:14 PM"This code:

https://github.com/Netflix/eureka/blob/42d73d3e36be60e8ddad3ef2014da286c823c8a5/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java#L118

does 7 network calls for every AmazonInfo.autoBuild() call which gets triggered by default every 30 seconds by InstanceInfoReplicator thread in DiscoveryClient.

We can optimize this to only fetch the public hostname & IP which can only change after an instance has started. We can cache everything else.""Partial fix is available in release [1.1.128](https://github.com/Netflix/eureka/releases/tag/1.1.128) as part of fix for issue #97 
 =||= This was greatly optimized in release 1.1.158
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
82Fix service UP timestamp from getting resetScott Escotte02/07/14, 09:09:53 PM"There was an issue with service UP timestamp tracking where the
timestamp would get reset in cases where a lease was re-registered.

Also modified the sample service to start in STARTING mode and only
transition to UP status after simulating application initialization
time by sleeping for 60 seconds.""[eureka-pull-requests #49](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/49/) SUCCESS
This pull request looks good
 =||= "Fix service UP timestamp from getting resetScott Escotte02/07/14, 09:09:53 PM"There was an issue with service UP timestamp tracking where the
timestamp would get reset in cases where a lease was re-registered.

Also modified the sample service to start in STARTING mode and only
transition to UP status after simulating application initialization
time by sleeping for 60 seconds."NaNScott Emmons02/07/14, 07:42:09 PM"Fix service UP timestamp from getting reset

There was an issue with service UP timestamp tracking where the
timestamp would get reset in cases where a lease was re-registered.

Also modified the sample service to start in STARTING mode and only
transition to UP status after simulating application initialization
time by sleeping for 60 seconds."1
83Upgrade apache httpclient and add copy constructor for InstanceInfoJay Zarfosszarfide02/13/14, 06:16:05 AMcopy constructor needed for InstanceInfo to manipulate InstanceInfo information in LoadBalancers"[eureka-pull-requests #52](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/52/) SUCCESS
This pull request looks good
 =||= "Upgrade apache httpclient and add copy constructor for InstanceInfoJay Zarfosszarfide02/13/14, 06:16:05 AMcopy constructor needed for InstanceInfo to manipulate InstanceInfo information in LoadBalancersNaNJay Zarfoss02/13/14, 02:38:05 AMfix javadoc on copy constructor1
84Addition of UniqueIdentifier interface for use by InstanceInfoRyan Thomasrthomas02/17/14, 02:35:19 AM"Added the UniqueIdentifier interface and modified InstanceInfo to call this getId method if this interface is implemented, rather than checking if name is Name.AMAZON. Updated AmazonInfo to use this.

This change is to allow non-amazon instances to be identified by a mechanism other than their hostname - e.g. multiple docker containers on the same host, registering with Eureka with the docker-host address.""[eureka-pull-requests #53](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/53/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #54](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/54/) SUCCESS
This pull request looks good
 =||= Closed as it had additional commits from master that I didn't want in here.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
85Added the UniqueIdentifier interfaceRyan Thomasrthomas02/19/14, 08:53:04 PM"Added the UniqueIdentifier interface and modified InstanceInfo to call this getId method if this interface is implemented, rather than checking if name is Name.AMAZON. Updated AmazonInfo to use this.

This change is to allow non-amazon instances to be identified by a mechanism other than their hostname - e.g. multiple docker containers on the same host, registering with Eureka with the docker-host address.""Clone of PR #84, which was closed due to additional commits.
 =||= [eureka-pull-requests #55](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/55/) SUCCESS
This pull request looks good
 =||= Thanks Ryan for the contribution!

Since, you are only using UniqueIdentifier for DataCenterInfo & there isn't any general purpose use of the interface, do you think it is simple to just add the method getInstanceId() in DataCenterInfo interface itself?
 =||= The reason I chose to have a new interface was to not introduce a breaking change for existing implementations of DataCenterInfo.

If that is acceptable however, I am happy to move it across.

Cheers,

ryan
 =||= That makes sense, I will merge the pull request.

On Monday, February 17, 2014, Ryan Thomas notifications@github.com wrote:

> The reason I chose to have a new interface was to not introduce a breaking
> change for existing implementations of DataCenterInfo.
> 
> If that is acceptable however, I am happy to move it across.
> 
> Cheers,
> 
> ryan
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/85#issuecomment-35321350
> .
 =||= "Added the UniqueIdentifier interfaceRyan Thomasrthomas02/19/14, 08:53:04 PM"Added the UniqueIdentifier interface and modified InstanceInfo to call this getId method if this interface is implemented, rather than checking if name is Name.AMAZON. Updated AmazonInfo to use this.

This change is to allow non-amazon instances to be identified by a mechanism other than their hostname - e.g. multiple docker containers on the same host, registering with Eureka with the docker-host address."NaNRyan Thomas02/13/14, 09:17:32 PM"Added the UniqueIdentifier interface and modified InstanceInfo to call this getId method if this interface is implemented, rather than checking if name is Name.AMAZON. Updated AmazonInfo to use this.

This change is to allow non-amazon instances to be identified by a mechanism other than their hostname - e.g. multiple docker containers on the same host, registering with Eureka with the docker-host address."1
86Fix the bug that unable to read metadata from the property file.Kent DongCH3CHO02/20/14, 08:56:43 AM"Remove the trailing ""."" when calling config.subset.""[eureka-pull-requests #56](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/56/) FAILURE
Looks like there's a problem with this pull request
 =||= I don't think the test error is related to my change. Could you re-run the build? Thanks.
 =||= Yes the failure is not related to your code, it is a flaky test.
 =||= I just added the trailing ""."" check in the new commit.
 =||= [eureka-pull-requests #57](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/57/) SUCCESS
This pull request looks good
 =||= Thanks @CH3CHO for the contribution
 =||= "Fix the bug that unable to read metadata from the property file.Kent DongCH3CHO02/20/14, 08:56:43 AM"Remove the trailing ""."" when calling config.subset."NaNCH3CHO02/20/14, 08:22:46 AMAdd a check to make sure the metadata namespace is correct no matter the trailing '.' exists or not.1
87StatsTimer usage causes large amount of heap usage.Nitesh KantNiteshKant02/24/14, 06:19:23 PM"As discussed in this thread: https://groups.google.com/forum/?fromgroups#!topic/eureka_netflix/ddBO6ostCp0 usage of StatsTimer in this class: https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/EurekaJerseyClient.java#L270 causes memory leak because of misconfiguration of StatsTimer.

In this particular case, we do not need the percentile times provided by StatsTimer over BasicTimer. So, changing to BasicTimer should resolve this issue."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
88Fix for issue #87Nitesh KantNiteshKant02/24/14, 06:19:00 PMChanging StatsTimer usage to BasicTimer."[eureka-pull-requests #58](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/58/) SUCCESS
This pull request looks good
 =||= "Fix for issue #87Nitesh KantNiteshKant02/24/14, 06:19:00 PMChanging StatsTimer usage to BasicTimer.NaNNitesh Kant02/24/14, 06:16:59 PM"Fix for issue #87

Changing StatsTimer usage to BasicTimer."1
89Provide an API to remove all overridden statusNitesh KantNiteshKant02/10/15, 06:55:40 PM"Eureka has two instance states, one as overridden status and other as actual instance status published by the instance.

The override is generally used to manage instance state from an administration tool like asgard. It will be handy to have an API TO remove all overridden state which will start honoring instance status as published by the instance itself. ""Fixed by PR #412
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
90Eureka console should show the count of instances by instance status.Nitesh KantNiteshKant07/01/16, 10:29:12 PMThe console currently shows the number per application, but does not have the total numbers for the entire registry."The console just being the main status page, or is there something else?  I'm happy to add this; I need/want to go clean up that page a bit today or tomorrow, anyway.
 =||= @bpollack its just a read-only status page. Sure, I can assign this issue to to you then?
 =||= @NiteshKant Sure, go for it.
 =||= Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
91Add option for field validationJay Zarfosszarfide07/01/16, 10:34:42 PM"Feature request:

Add option for variable validation in Eureka Client, for example validation options for what ""application"" field can look like.  An example of an optional validation could look like something provided by Frigga already: 

https://github.com/Netflix/frigga/blob/master/src/main/java/com/netflix/frigga/NameValidation.java""Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
92Feature Request: Client support for multiple applications registering from 1 processElad Regevelad-regev07/14/16, 05:14:31 PM"I would like Eureka to support multiple services hosted within the same JVM,
which would allow the eureka-client to register all of them instead of the current 1 app per process model (The singleton design prevents me from creating multiple DiscoveryClients in the same JVM).

I would like to know if others may require such feature, in order to decide how to proceed with bridging this gap.

Thanks,
Elad.""This may now be possible thanks to the DI-refactoring work introduced in recent versions. You may still be stuck by the issue https://github.com/Netflix/eureka/issues/554 though.
 =||= Is there an example how code looks like to do that multi register?
 =||= Issue #554 have been addressed, so it is now possible to create multiple instances of DiscoveryClient (with their own configs) and achieve multiple registration from the same process. Note that to do this the server would have to not use Guice to create the clients.
 =||= Could you please give it a sample, thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
93Dependency version for jersey-apache-client4 should be 1.11 instead of 1.8SrinathSrinathc04/22/14, 09:41:31 PM"Since eureka-client directly depends on ribbon-httpclient version 0.3.10, it should use jersey-apache-client4 version 1.11 which is compatible with it instead of version 1.8.

Here is the output of maven enforcer plugin which points to the discrepancy:
Dependency convergence error for com.sun.jersey.contribs:jersey-apache-client4:1.11 paths to dependency are:

<pre>
  +-com.netflix.eureka:eureka-client:1.1.127
    +-com.netflix.ribbon:ribbon-httpclient:0.3.10
      +-com.sun.jersey.contribs:jersey-apache-client4:1.11
and
  +-com.netflix.eureka:eureka-client:1.1.127
    +-com.sun.jersey.contribs:jersey-apache-client4:1.8
</pre>""Fixed in eureka-1.1.128
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
94Current instance status notificationelandau04/16/14, 08:03:29 PM"- Add RefreshCallback so that custom instance status check logic can be implemented after getting an update from discovery.
- Add Cancel/Register support to MockRemoteEureakServer
- Add eureka-lifecycle project with a guide module for eureka bindings.
- Includes binding for an Rx Observable<Boolean> with running instance up status notification

Here is a usage example.  Note that the Observable is backed by a BehaviorSubject and as such emits the last known up status immediately after subscribe is called.  

```
    public static class Service {
        @Inject
        public Service(@UpStatus   Observable<Boolean> upStatusObservable) {
            upStatusObservable.subscribe(new Action1<Boolean>() {
                @Override
                public void call(Boolean status) {
                    System.out.println(""***** Status changed to : "" + status);
                }
            });
        }
    }
```""[eureka-pull-requests #59](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/59/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #61](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/61/) FAILURE
Looks like there's a problem with this pull request
 =||= > > > Looks like there's a problem with this pull request

Since, the same test failed twice, which does not happen in other pull requests. I suspect that there is a change in this PR that is causing the failure. @elandau can you verify?
 =||= There was something wrong with the original pull request but I've since
fixed it.  Yet the test still fails.  From looking at the code this seems
to be a problem that always existed with the MockRemoteEurekaServer so I'm
not sure how this ever passed.  Although the fact that it ran before means
that I probably missed something.

On Tue, Apr 1, 2014 at 11:26 AM, Nitesh Kant notifications@github.comwrote:

>  Looks like there's a problem with this pull request
> 
>  Since, the same test failed twice, which does not happen in other pull
> requests. I suspect that there is a change in this PR that is causing the
> failure. @elandau https://github.com/elandau can you verify?
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/Netflix/eureka/pull/94#issuecomment-39240617
> .
 =||= [eureka-pull-requests #65](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/65/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #66](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/66/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #67](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/67/) ABORTED
 =||= [eureka-pull-requests #68](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/68/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #73](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/73/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #74](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/74/) SUCCESS
This pull request looks good
 =||= "Current instance status notificationelandau04/16/14, 08:03:29 PM"- Add RefreshCallback so that custom instance status check logic can be implemented after getting an update from discovery.
- Add Cancel/Register support to MockRemoteEureakServer
- Add eureka-lifecycle project with a guide module for eureka bindings.
- Includes binding for an Rx Observable<Boolean> with running instance up status notification

Here is a usage example.  Note that the Observable is backed by a BehaviorSubject and as such emits the last known up status immediately after subscribe is called.  

```
    public static class Service {
        @Inject
        public Service(@UpStatus   Observable<Boolean> upStatusObservable) {
            upStatusObservable.subscribe(new Action1<Boolean>() {
                @Override
                public void call(Boolean status) {
                    System.out.println(""***** Status changed to : "" + status);
                }
            });
        }
    }
```"NaNelandau04/15/14, 11:31:07 PM"Fix the unit tests by setting proper properties in advance

Make MockRemoteEruekaServer an ExternalResource so it can be used as an
@Rule"1
95Fix typo in Eureka clientBenjamin Pollackbpollack04/01/14, 05:45:03 PMJust fixes a minor typo I came across while testing"[eureka-pull-requests #60](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/60/) SUCCESS
This pull request looks good
 =||= Thanks @bpollack !
 =||= "Fix typo in Eureka clientBenjamin Pollackbpollack04/01/14, 05:45:03 PMJust fixes a minor typo I came across while testingNaNBenjamin Pollack03/27/14, 12:16:39 PMFix typo in Eureka client1
96Do not instantly fail tests when MockEureka port is in useBenjamin Pollackbpollack04/15/14, 02:02:09 PM"When the tests run quickly, the MockRemoteEurekaServer port is frequently still
in use, throwing a BindError.  Rather than dying instantly, repeatedly try to
grab the port, backing off slightly each time.""[eureka-pull-requests #62](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/62/) SUCCESS
This pull request looks good
 =||= The other way to fix this, by the way, would be to both expand DiscoveryClientRegistryTest:51 to multiply by 20, rather than 10, pulling the general creation of `mockLocalEurekaServer` in front of the `ConfigurationManager` calls, and then changing the port each time through the loop.  That's just a more invasive change, IMHO, but it might be the better one.  I'm happy to submit either.
 =||= [eureka-pull-requests #63](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/63/) SUCCESS
This pull request looks good
 =||= @bpollack I agree that the other option would be cleaner. Although, you will have to make that change in all the tests using the mock server.
Instead, how about creating a factory method in mock eureka server like: MockRemoteEurekaServer.createWithRandomPortIfAlreadyBound(int port ... ) which retries on random ports (derived from the passed port) for X times before giving up. The chosen port can then be retrieved from the returned instance.
We can then replace all new MockRemoteEurekaServer() with this factory calls in all tests.

Thanks again for the contribution!
 =||= You got it @NiteshKant.  I'll modify this PR later today or early tomorrow with the second approach.
 =||= @bpollack Sounds awesome!
 =||= And incidentally, Java's not exactly my main language, so I apologize in advance if the code formatting is off.  I wanted to just tell IntelliJ to do its thing, but that reformatted a lot more than just my methods, so I wasn't really sure if that was actually a good way to proceed.
 =||= [eureka-pull-requests #64](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/64/) SUCCESS
This pull request looks good
 =||= Please take a look at #94.  I ran into the same problem for a different feature and I've reworked the tests to use ephemeral ports instead of random ports.  Using ephemeral ports guarantees that there will be no port collisions whereas random ports requires unnecessary logic around port collisions. 
 =||= Thanks @elandau for the ephemeral port tip. I had to fix a critical bug in the client and did not have time to completely review your request. So, I just plucked the ephemeral port changes from your commit. Can you resubmit your PR after I merge #100 
Apologies for the inconvenience & thanks again for the tip!

@bpollack Can I close this PR as the ephemeral port fix is better?
 =||= @NiteshKant Yeah, go ahead; I completely agree with @elandau that ephemeral ports are better, and feel silly for not thinking of that first.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
97too many queries to metadata url?Andrew Spykeraspyker04/16/14, 06:11:53 PM"https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java#L118

autoBuild seems to have an algorithm that retries awsMetaDataRetries in case of error.  I expected to see a break from the while (numOfRetries-- > 0) upon success (where it does result.metadata.put(key.getName(), value);).  Instead in a version of this we copied and changed, we see it just try every query awsMetaDataRetries times.

We could submit a patch for this when we submit our similar class.  However, I wanted to double check that I understood the code right and there is really a issue here.""@aspyker it indeed is a bug. There should be a break after line 136. I will fix this.
 =||= Available in release [1.1.128](https://github.com/Netflix/eureka/releases/tag/1.1.128)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
98Client's clean shutdownNitesh KantNiteshKant04/16/14, 06:11:43 PM"Eureka client on shutdown does not cancel all the scheduled tasks it has scheduled.
This may create a race-condition under which, the client may re-register with the server even after shutdown.

The race-condition lies in the [Instance Info replication scheduled task](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1416) which if there is a healthcheck handler registered with eureka, will re-register with the eureka server.

The fix is to cancel all the scheduled tasks at shutdown.""Available in release [1.1.128](https://github.com/Netflix/eureka/releases/tag/1.1.128)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
99Add application group to instance infoNitesh KantNiteshKant04/16/14, 06:11:09 PM"Inside netflix we wish to add a grouping criteria for different application under an umbrella. For this purpose eureka needs to publish the application group which then can be used by other clients to do any logic based on the application group.

The application group can be specified via a property ""namespace"" + ""appGroup"" where namespace by default is ""eureka."" and hence the property eureka.appGroup can be used to specify the application group. Alternatively, in absence of this property, eureka will also look at a java environment property ""NETFLIX_APP_GROUP"" to infer the application group. The requirement of this environment property is purely due to internal requirements.""Available in release [1.1.128](https://github.com/Netflix/eureka/releases/tag/1.1.128)
 =||= is the application group just a label to tell apart application ? or the different application group can not find other if they has not permission ?
My requirement is apps in different group and regist in a eureka ,for example ,group A and B，if A has permission to B,then apps in group A  can get  address in app Group B,so A can invoke B' api,if not ,A has no B's app's address,and can not invoke. =||= @zhangdc007 你解决了吗 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
100Fixes issue #93 #97 #98 #99Nitesh KantNiteshKant04/15/14, 07:11:32 PM"1) Implementing clean shutdown of client. Moved away from Timer to ScheduledExecutorService as it gives better control of shutdown by interrupting the running thread, which is what we want.
2) Implemented addition of ""application group"" to instance info.""[eureka-pull-requests #69](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/69/) FAILURE
Looks like there's a problem with this pull request
 =||= ScheduledExecutorService part looks fine.
 =||= [eureka-pull-requests #70](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/70/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #71](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/71/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #72](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/72/) SUCCESS
This pull request looks good
 =||= "Fixes issue #93 #97 #98 #99Nitesh KantNiteshKant04/15/14, 07:11:32 PM"1) Implementing clean shutdown of client. Moved away from Timer to ScheduledExecutorService as it gives better control of shutdown by interrupting the running thread, which is what we want.
2) Implemented addition of ""application group"" to instance info."NaNNitesh Kant04/15/14, 07:07:28 PMAdded testcase for app group.1
101Fixing the scheduling delay for InstanceInfoReplicator.Nitesh KantNiteshKant04/16/14, 01:00:44 AMThe timeunit got changed to Seconds but the value was still MS"[eureka-pull-requests #75](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/75/) SUCCESS
This pull request looks good
 =||= "Fixing the scheduling delay for InstanceInfoReplicator.Nitesh KantNiteshKant04/16/14, 01:00:44 AMThe timeunit got changed to Seconds but the value was still MSNaNNitesh Kant04/16/14, 12:53:06 AM"Fixing the scheduling delay for InstanceInfoReplicator.

The timeunit got changed to Seconds but the value was still MS"1
102remove import of com.netflix.logging.* from status.jsp, as it does not a...Joe Hohertzjhohertz04/16/14, 04:41:36 PM"Remove import of com.netflix.logging.\* from status.jsp, as it does not appear to be actually used. (Should be hidden to app layer really)

And it makes jetty9 angry due to there being no classes at that node of the package namespace, only below it. 

Alternate possibility, if classes _are_ needed, is to import deeper into the package space where needed. But if its not referenced, removal is probably better.""[eureka-pull-requests #76](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/76/) SUCCESS
This pull request looks good
 =||= Thanks @jhohertz !
 =||= "remove import of com.netflix.logging.* from status.jsp, as it does not a...Joe Hohertzjhohertz04/16/14, 04:41:36 PM"Remove import of com.netflix.logging.\* from status.jsp, as it does not appear to be actually used. (Should be hidden to app layer really)

And it makes jetty9 angry due to there being no classes at that node of the package namespace, only below it. 

Alternate possibility, if classes _are_ needed, is to import deeper into the package space where needed. But if its not referenced, removal is probably better."NaNJoe Hohertz04/16/14, 03:22:14 AMremove import of com.netflix.logging.* from status.jsp, as it does not appear to be actually used, and makes jetty9 angry as there are no classes at that node of the package namespace, only below it. alternate fix, if classes are needed, is to import deeper into the package space where needed. But if its not referenced, removal is probably better.1
103Full DiscoveryClient Governationelandau04/16/14, 08:03:29 PMAlternative implementation to #93 with full DI support for DiscoveryClient without the need for a Guice module.  This implementation is also fully backwards compatible with DiscoveryManager.getInstance()"[eureka-pull-requests #77](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/77/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #78](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/78/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #79](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/79/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #80](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/80/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #81](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/81/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #82](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/82/) ABORTED
 =||= "Full DiscoveryClient Governationelandau04/16/14, 08:03:29 PMAlternative implementation to #93 with full DI support for DiscoveryClient without the need for a Guice module.  This implementation is also fully backwards compatible with DiscoveryManager.getInstance()NaNelandau04/16/14, 07:00:18 PMAdd logging info to failing tests1
104Fixing the indefinite wait in testcase.Nitesh KantNiteshKant04/21/14, 08:02:35 PMNaN"[eureka-pull-requests #84](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/84/) SUCCESS
This pull request looks good
 =||= "Fixing the indefinite wait in testcase.Nitesh KantNiteshKant04/21/14, 08:02:35 PMNaNNaNNitesh Kant04/21/14, 07:02:16 PMFixing the indefinite wait in testcase.1
105Fix some bad JavaDoc (bad params, incorrect @link)Benjamin Pollackbpollack04/21/14, 08:03:17 PMNaN"[eureka-pull-requests #85](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/85/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #86](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/86/) SUCCESS
This pull request looks good
 =||= Thanks @bpollack !
 =||= "Fix some bad JavaDoc (bad params, incorrect @link)Benjamin Pollackbpollack04/21/14, 08:03:17 PMNaNNaNBenjamin Pollack04/21/14, 07:16:46 PMFix some bad JavaDoc (bad params, incorrect @link)1
106Remove a lot of dead code and unused importsBenjamin Pollackbpollack04/23/14, 06:46:52 PMNaN"[eureka-pull-requests #87](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/87/) ABORTED
 =||= [eureka-pull-requests #88](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/88/) FAILURE
Looks like there's a problem with this pull request
 =||= Hey, I'm a bit nonplussed about this.  Running locally on 3e6e16ba0bb92159d6335da1d1cde13366aee72e, `./gradlew build test` works just fine.  The first run of Cloudbees aborted due to timeout, and the second failed after much longer than usual due to an assert failure that I can't replicate.  Is there any way to get more insight into Cloudbees?
 =||= [eureka-pull-requests #89](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/89/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #90](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/90/) SUCCESS
This pull request looks good
 =||= @bpollack time sensitive tests sometime fail in cloudbees builds and we are working towards fixing flaky tests like these. There isn't any issue with this PR, I will merge it soon.
 =||= Thanks @bpollack!
 =||= "Remove a lot of dead code and unused importsBenjamin Pollackbpollack04/23/14, 06:46:52 PMNaNNaNBenjamin Pollack04/21/14, 07:40:04 PMRemove dead code and unused imports1
107Fix DefaultEurekaClientConfig unitsPeter Kelleypgkelley404/25/14, 09:52:16 PM"EurekaServiceUrlPollInterval is named
getEurekaServiceUrlPollIntervalSeconds in EurekaClientConfig interface
but serviceUrlPollIntervalMs in config files. Its default looks
suspiciously like it shouldn't be multiplied by 1000. This config is
actually used as seconds. Changed to be seconds
serviceUrlPollIntervalSeconds and fixed the default.

EurekaServerReadTimeoutSeconds and EurekaServerConnectTimeoutSeconds
were both being contributed as millseconds and used as milliseconds.
Changed to seconds in config files and use of the config changed to use
seconds.""[eureka-pull-requests #91](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/91/) SUCCESS
This pull request looks good
 =||= This change will break existing config files that specify serviceUrlPollIntervalMs, or that specify either eurekaServer.readTimeout or eurekaServer.connectTimeout as milliseconds, not seconds.

To fix the inconsistencies either the config files must be changed or the interface must be changed. I have changed the config files here, but I can submit the other if that is preferred. 
 =||= [eureka-pull-requests #94](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/94/) FAILURE
Looks like there's a problem with this pull request
 =||= This is passing tests locally.

Note that this will still break with config files that specify either eurekaServer.readTimeout or eurekaServer.connectTimeout as milliseconds, not seconds.
 =||= [eureka-pull-requests #95](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/95/) SUCCESS
This pull request looks good
 =||= @pgkelley4 

> > > Note that this will still break with config files that specify either eurekaServer.readTimeout or eurekaServer.connectTimeout as milliseconds, not seconds.

Yes that is reasonable as we are atleast being truthful to what the property name is :)
 =||= "Fix DefaultEurekaClientConfig unitsPeter Kelleypgkelley404/25/14, 09:52:16 PM"EurekaServiceUrlPollInterval is named
getEurekaServiceUrlPollIntervalSeconds in EurekaClientConfig interface
but serviceUrlPollIntervalMs in config files. Its default looks
suspiciously like it shouldn't be multiplied by 1000. This config is
actually used as seconds. Changed to be seconds
serviceUrlPollIntervalSeconds and fixed the default.

EurekaServerReadTimeoutSeconds and EurekaServerConnectTimeoutSeconds
were both being contributed as millseconds and used as milliseconds.
Changed to seconds in config files and use of the config changed to use
seconds."NaNPeter Kelley04/22/14, 07:09:19 PM"Fix DefaultEurekaClientConfig units

EurekaServiceUrlPollInterval is named
getEurekaServiceUrlPollIntervalSeconds in EurekaClientConfig interface
but serviceUrlPollIntervalMs in config files. Its default looks
suspiciously like it shouldn't be multiplied by 1000. This config is
actually used as seconds. Changed to convert the config
serviceUrlPollIntervalMs to into seconds.

EurekaServerReadTimeoutSeconds and EurekaServerConnectTimeoutSeconds
were both being contributed as millseconds and used as milliseconds.
Changed to seconds in config files and use of the config changed to use
seconds."1
108Do not get into a 500 state when a bad app registersBenjamin Pollackbpollack04/23/14, 09:51:05 PM"Previously, the DataCenterInfo was not effectively ""validated"" until read
time, which meant that a malicious (or simply badly coded) app could take the
Eureka cluster offline by specifying a dataCenterName that wasn't one of
Amazon, MyOwn, or Netflix.  Move the validation code to write time by doing
the conversion to DataCenterInfo.Name as part of the deserialization process.""[eureka-pull-requests #92](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/92/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #93](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/93/) SUCCESS
This pull request looks good
 =||= "Do not get into a 500 state when a bad app registersBenjamin Pollackbpollack04/23/14, 09:51:05 PM"Previously, the DataCenterInfo was not effectively ""validated"" until read
time, which meant that a malicious (or simply badly coded) app could take the
Eureka cluster offline by specifying a dataCenterName that wasn't one of
Amazon, MyOwn, or Netflix.  Move the validation code to write time by doing
the conversion to DataCenterInfo.Name as part of the deserialization process."NaNBenjamin Pollack04/22/14, 08:29:03 PM"Do not get into a 500 state when a bad app registers

Previously, the DataCenterInfo was not effectively ""validated"" until read time,
which meant that a malicious (or simply badly coded) app could take the Eureka
cluster offline by specifying a dataCenterName that wasn't one of Amazon,
MyOwn, or Netflix.  Move the validation code to write time by doing the
conversion to DataCenterInfo.Name as part of the deserialization process."1
109Do we want to upgrade to Java 7?Benjamin Pollackbpollack01/04/15, 04:53:56 AMI'm going through the code to just crush as many generic CheckStyles issues as I can, and noticed that a lot of lines longer than 120 characters would be fine if we went to Java 7 for the diamond operator.  We'd also pick up a bunch of other Java 7 enhancements.  How do you feel about requiring Java 7?"If we produce compiled code that can run on java 6 its fine.
Inside Netflix we have not yet moved completely to java 7 & hence if we require java 7 for eureka (specifically the client), it will not be possible to use it inside netflix.
 =||= We completed migration to Java 7.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
110Fixes for various CheckStyles issuesBenjamin Pollackbpollack04/28/14, 01:15:32 AMThis series of patches each fix one very simple CheckStyle issue.  These are all focused on cosmetic issues, and each cosmetic issue is dealt with in its own patch; I haven't yet attempted to address bigger issues, like missing JavaDoc comments or imports that are only imported to make `@link`s shorter.  Nevertheless, this gets us from 1600 to 580 CheckStyles violations, which dramatically improves the signal-to-noise ratio."[eureka-pull-requests #96](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/96/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #97](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/97/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #98](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/98/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #99](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/99/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #100](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/100/) FAILURE
Looks like there's a problem with this pull request
 =||= Cloudbees is flagging these due to the timing errors that I'm trying to fix, but I'm trying to clean up the code a bit and get a handle on how to approach fixing the timing issues first.  Sorry about the chicken/egg issue, but these should pass `./gradlew test` locally.
 =||= @bpollack I have reviewed these changes and they seem fine to me. If you can sync this with the master, i will merge it.
 =||= Rebased onto master.  I ran tests at about half the commits (and all the ones that I had to tweak to rebase) to verify that I didn't accidentally break or regress anything, and the branch head obviously passes.
 =||= [eureka-pull-requests #105](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/105/) FAILURE
Looks like there's a problem with this pull request
 =||= "Fixes for various CheckStyles issuesBenjamin Pollackbpollack04/28/14, 01:15:32 AMThis series of patches each fix one very simple CheckStyle issue.  These are all focused on cosmetic issues, and each cosmetic issue is dealt with in its own patch; I haven't yet attempted to address bigger issues, like missing JavaDoc comments or imports that are only imported to make `@link`s shorter.  Nevertheless, this gets us from 1600 to 580 CheckStyles violations, which dramatically improves the signal-to-noise ratio.NaNBenjamin Pollack04/24/14, 06:48:29 PMMake some public values private that can be1
111AmazonInfo doesn't delimit namespace when querying propertiesTim McCormacktimmc07/01/16, 10:34:25 PM"The [current version of AmazonInfo](https://github.com/Netflix/eureka/blob/ce1929b/eureka-client/src/main/java/com/netflix/appinfo/AmazonInfo.java#L162) prepends the  namespace parameter to property suffixes such as `mt.read_timeout`. Since other Netflix projects [such as Zuul](https://github.com/Netflix/zuul/blob/8ca9636a/zuul-netflix/src/main/java/com/netflix/zuul/stats/AmazonInfoHolder.java#L27) use the namespace `eureka`, the resulting properties look like `eurekamt.read_timeout` instead of `eureka.mt.read_timeout`.

I'm filing this against Eureka instead of Zuul because I think Eureka should be adding a `.` when there is a namespace -- I'm happy to submit a PR that does this and also falls back on the old behavior -- but I can understand if the response is instead that Zuul's usage should be changed.""Yeah thats just the way things have been. Eureka Client defaults the namespace to ""eureka."" and hence properties are more legible. 
Feel free to submit a patch if the changes are backward compatible.
 =||= Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
112Remove dead code in ApplicationResourceBenjamin Pollackbpollack04/25/14, 10:02:05 PMNaN"[eureka-pull-requests #101](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/101/) FAILURE
Looks like there's a problem with this pull request
 =||= "Remove dead code in ApplicationResourceBenjamin Pollackbpollack04/25/14, 10:02:05 PMNaNNaNBenjamin Pollack04/25/14, 03:52:30 PMRemove dead code in ApplicationResource1
113Fix wrong interface being providedelandau04/25/14, 10:02:35 PMNaN"[eureka-pull-requests #102](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/102/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #103](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/103/) FAILURE
Looks like there's a problem with this pull request
 =||= "Fix wrong interface being providedelandau04/25/14, 10:02:35 PMNaNNaNelandau04/25/14, 08:43:57 PMMake DiscoveryClient constructor public so it can be created by a provider1
114Add additional JavaDocBenjamin Pollackbpollack04/28/14, 11:53:55 PMI did my best job to get all these correct, but I'd appreciate a second set of eyes to make sure that my comments are all correct."[eureka-pull-requests #106](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/106/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #107](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/107/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #108](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/108/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #109](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/109/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #110](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/110/) FAILURE
Looks like there's a problem with this pull request
 =||= Thanks @bpollack !
 =||= "Add additional JavaDocBenjamin Pollackbpollack04/28/14, 11:53:55 PMI did my best job to get all these correct, but I'd appreciate a second set of eyes to make sure that my comments are all correct.NaNBenjamin Pollack04/28/14, 06:51:53 PMFix typos in JavaDoc/comments in EurekaBootStrap1
115Pin to latest release of Netflix componentselandau04/28/14, 09:35:28 PMEureka is currently pulling in old versions of netflix components and for some reason gradle is randomly picking up these transitive dependencies in other projects.  This will ensure that eureka is always built against the latest and greatest Netflix OSS components.  "[eureka-pull-requests #111](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/111/) FAILURE
Looks like there's a problem with this pull request
 =||= #116 achieves the same goal but with an upper bound on the current major version.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
116Changing external dependencies to follow a range version scheme.Nitesh KantNiteshKant04/29/14, 12:01:00 AM"The fixed version numbers for dependencies requires too many changes for every upgrade of any library.
This new scheme will pin to the same major version instead.""[eureka-pull-requests #113](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/113/) SUCCESS
This pull request looks good
 =||= "Changing external dependencies to follow a range version scheme.Nitesh KantNiteshKant04/29/14, 12:01:00 AM"The fixed version numbers for dependencies requires too many changes for every upgrade of any library.
This new scheme will pin to the same major version instead."NaNNitesh Kant04/28/14, 11:46:01 PMUsing upper bounds for dependency versions1
117CheckStyles/code cleanup and JavaDocBenjamin Pollackbpollack04/30/14, 08:49:51 PMLast of the nearly-purely-cleanup PRs for a bit, I promise.  I hit all of this while wrapping my head around how to approach the test suite issue.  This does get us down to 479 CheckStyles violations, though, basically all of which are just CheckStyles whinging about the lack of JavaDoc on protected members, and eliminates a lot of stuff that was picked up by IntelliJ and findbugs on general code cleanliness."[eureka-pull-requests #114](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/114/) SUCCESS
This pull request looks good
 =||= Thanks @bpollack !
 =||= "CheckStyles/code cleanup and JavaDocBenjamin Pollackbpollack04/30/14, 08:49:51 PMLast of the nearly-purely-cleanup PRs for a bit, I promise.  I hit all of this while wrapping my head around how to approach the test suite issue.  This does get us down to 479 CheckStyles violations, though, basically all of which are just CheckStyles whinging about the lack of JavaDoc on protected members, and eliminates a lot of stuff that was picked up by IntelliJ and findbugs on general code cleanliness.NaNBenjamin Pollack04/29/14, 12:53:49 PMClean up if block and add JavaDoc in DiscoveryClient1
118Missing cache invalidation for remote region requestsNitesh KantNiteshKant05/08/14, 05:52:41 AM"In situations where a discovery client is configured to fetch registry information also from remote region(s), [the cache within the REST endpoint](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/resources/ResponseCache.java) is not invalidated for any change in the local registry information. Instead it expires after the configured cache expiry time (defaults to 3 mins)

The reason for this behavior is that [on invalidate() callback](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/resources/ResponseCache.java#L203) the keys it invalidates does not include the region names. Since, for the API calls that include the region parameter, the cache key is created with the region string, the invalidate call does not match that key. Hence, the cache does not get invalidated which results in no changes to the registry being visible to the client.""Available in [1.1.131](https://github.com/Netflix/eureka/releases/tag/1.1.131)
 =||= This issue is close . But how to change this default behavior **(defaults to 3 mins)**.
I am facing issue with invalidating when it runs locally with one eureka server.
https://github.com/spring-cloud/spring-cloud-netflix/issues/3652
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
119Instantly start up if there are no peers to sync withBenjamin Pollackbpollack04/29/15, 06:31:59 PMPlease feel free to reject this; it's as much an RFC on how to address #42 as anything else.  Instead of introducing new settings for instant startup in development environments, I'm instead simply bypassing the wait part of the cycle if there are no peers to sync with.  This _might_ have negative implications in a production environment, but I'm struggling to come up with one; it only shows up if you launch Eurekas a second before you populate DNS or the like.  I believe it ought to be safe."[eureka-pull-requests #115](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/115/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #116](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/116/) SUCCESS
This pull request looks good
 =||= @bpollack I am not merging this PR assuming you are working on the comment I provided. Let me know if you think otherwise.
 =||= @NiteshKant Yeah; Peter and I have been fixing up some Eureka production issues the last few days, so I haven't had a chance to do another version of this, but there is one coming.  Please don't close it, but don't merge it yet, either.
 =||= any news regarding this topic?
 =||= @looztra I unfortunately got transferred off the deployment team right after committing to do this, so I don't have the time to do this anymore.  @pgkelley4 may know if that's still on the roadmap, though.
 =||= @looztra We should be getting back to this within the next few weeks.
 =||= I looked at finishing this per your recommendations @NiteshKant, and I think that adding another property somewhat defeats the purpose. This can already be accomplished by changing a property. Internally we are now setting numberRegistrySyncRetries=0 to get essentially the same effect. Is there any reason this doesn't work in all cases?

Either way, I think in another thread (https://github.com/Netflix/eureka/issues/42) you said that having a mode that starts without peers would be beneficial outside of this use case, if you are still thinking this makes sense I can fix up this PR.

Thoughts?
 =||= > > >  having a mode that starts without peers would be beneficial outside of this use case, if you are still thinking this makes sense I can fix up this PR.

Yes, certainly. I think it makes sense. 
 =||= @NiteshKant I hit a few snags on this one...

1) The proposal was to check if peerEurekaNodes was empty before syncUp. However, on my box when run locally, peerEurekaNodes is not empty becuase my local computer makes it into the list. This is because the PeerAwareInstanceRegistry.isThisMe method doesn't work in this circumstance.

My computers hostname is username.local, and the default files shipped with Eureka specify localhost as the default serviceUrl for testing locally. So the hostname comparison is never equal. (It works in AWS because the hostname is actually retrieved from ec2 metadata)

Potential solutions for this: 
- When testing locally, have serviceUrls be ""localmode"" or some other non-URL flag that you special case.
- Require people put their actual hostname in the config. (Not a big fan of this option, one more step to get everything up and running to test out Eureka)

Other solutions to the original problem:
- Leave the local computer in the peerEureka Nodes list. Now before syncUp see if that is the only peer in the list with a special case and skip the syncUp if it is.
- The testing mode proposed could instead skip looking for other servers.
- Just add to the wiki that people should set numberRegistrySyncRetries=0 for testing (worth considering again).

2) I also looked at adding a new property to make it fail fast if the client doesn't discover any servers. But where would that go? There isn't a central place where the servers are resolved on startup (nor should there probably be). Am I missing some obvious place where this check could go?

Obviously 2 only applies if we stick with the approach we previously discussed. Tagging @bpollack so he sees this.
 =||= Thanks @pgkelley4 for working on this.

> > > 1) The proposal was to check if peerEurekaNodes was empty before syncUp. However, on my box when run locally, peerEurekaNodes is not empty becuase my local computer makes it into the list. This is because the PeerAwareInstanceRegistry.isThisMe method doesn't work in this circumstance.
> > > My computers hostname is username.local, and the default files shipped with Eureka specify localhost as the default serviceUrl for testing locally. So the hostname comparison is never equal. (It works in AWS because the hostname is actually retrieved from ec2 metadata)

Is it possible to fix `PeerAwareInstanceRegistry.isThisMe()` then? One possible solution could be to change the default service URL in the eureka properties to have 127.0.0.1 instead of localhost and then use `InetAddress.getLocalHost().getHostAddress()` and see if the URL host is same as the localhost. This of course will be on top of the existing pure host string based matching.
 =||= I thought about that and I think it is really no different from putting in a special flag in the service URL. In that case you would only be able to check if the service URL is equal to `InetAddress.getLocalHost().getHostAddress()` if the service URL is 127.0.0.1 (Because those are always equal). So instead it would make sense to just return true from isThisME() if the service URL is 127.0.0.1.

I am fine with doing that and I can't think of any valid cases this would mess up. You could potentially deploy to ec2 with 127.0.0.1 as the service URL... but I don't think we really need to worry about that.

If we do go ahead with that, can you respond to point 2) in my post from 14 days ago.
 =||= @pgkelley4 the associated issue for this pull (#42) has been closed and it seems the settled upon way to remove the initial start up wait is just to set property `eureka.numberRegistrySyncRetries=0`. If you still want to continue working on this PR that would be more than welcome. Otherwise, we can just close this one out.
 =||= I am fine with this being closed @qiangdavidliu. I do still think that it should be documented in the wiki if the code isn't changed though.
 =||= Thanks. Have added a paragraph for this in https://github.com/Netflix/eureka/wiki/Configuring-Eureka#configuration-1, under **Configuring for local development**.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
120Eureka-JerseyClient-Conn-Cleaner thread should be a daemonNitesh KantNiteshKant05/08/14, 05:52:25 AMThis prevents application shutdowns."Available in [1.1.131](https://github.com/Netflix/eureka/releases/tag/1.1.131)
 =||= why i have two thread is same name “ Daemon Thread [Eureka-JerseyClient-Conn-Cleaner2] (Running)”	
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
121Fix log level for serviceUrlsPeter Kelleypgkelley405/06/14, 08:26:36 PM"Currently Eureka will log.info serviceUrls everytime it reads them.
It should only log.info serviceUrls if they have changed. Logging
everytime it reads should be at the debug level.""[eureka-pull-requests #117](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/117/) SUCCESS
This pull request looks good
 =||= Thanks @pgkelley4 !
 =||= "Fix log level for serviceUrlsPeter Kelleypgkelley405/06/14, 08:26:36 PM"Currently Eureka will log.info serviceUrls everytime it reads them.
It should only log.info serviceUrls if they have changed. Logging
everytime it reads should be at the debug level."NaNPeter Kelley05/06/14, 07:23:11 PM"Fix log level for serviceUrls

Currently Eureka will log.info serviceUrls everytime it reads them.
It should only log.info serviceUrls if they have changed. Logging
everytime it reads should be at the debug level."1
122Fixes issues #118 #120Nitesh KantNiteshKant05/07/14, 11:44:28 PM"Issue #118 Removed the read-only cache in ResponseCache, it was not useful. Created a mapping for which keys without any regions map to keys with regions. This is looked up whenever there is an invalidation to also get keys which has remote regions.

Issue #120 Making connection cleaner thread a daemon.""[eureka-pull-requests #118](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/118/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #119](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/119/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #120](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/120/) FAILURE
Looks like there's a problem with this pull request
 =||= The failure is a flaky test, merging this now.
 =||= [eureka-pull-requests #121](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/121/) FAILURE
Looks like there's a problem with this pull request
 =||= "Fixes issues #118 #120Nitesh KantNiteshKant05/07/14, 11:44:28 PM"Issue #118 Removed the read-only cache in ResponseCache, it was not useful. Created a mapping for which keys without any regions map to keys with regions. This is looked up whenever there is an invalidation to also get keys which has remote regions.

Issue #120 Making connection cleaner thread a daemon."NaNNitesh Kant05/07/14, 11:32:40 PMFixing build failure due to cross-module test deps1
123Fixing dependency versions suitable for netflix artifactory.Nitesh KantNiteshKant05/08/14, 05:34:47 AMNaN"[eureka-pull-requests #122](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/122/) SUCCESS
This pull request looks good
 =||= "Fixing dependency versions suitable for netflix artifactory.Nitesh KantNiteshKant05/08/14, 05:34:47 AMNaNNaNNitesh Kant05/08/14, 05:34:20 AMFixing dependency versions suitable for netflix artifactory.1
124Fix Guice Providers to cache provided entityelandau05/08/14, 05:07:21 PMNaN"[eureka-pull-requests #123](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/123/) SUCCESS
This pull request looks good
 =||= Pull request looks ugly.  Created a new one #125 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
125Fix Providers to cache and return the same instanceelandau05/08/14, 07:07:44 PMNaN"[eureka-pull-requests #124](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/124/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #125](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/125/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #126](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/126/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #127](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/127/) SUCCESS
This pull request looks good
 =||= "Fix Providers to cache and return the same instanceelandau05/08/14, 07:07:44 PMNaNNaNelandau05/08/14, 05:18:58 PMFix Providers to cache and return the same instance1
126Fix injecting of EventBus into DiscoveryClientelandau05/08/14, 09:01:31 PM"Discovery client currently does a bunch of stuff in the constructor.
These operations previous saw a null eventBus because it is optional.
The fix ensures that the optional EventBus is properly resolved before
the constructor is called
Disable the DiscoveryStatusCheckTest until we can write a more robust
mock server.""[eureka-pull-requests #128](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/128/) FAILURE
Looks like there's a problem with this pull request
 =||= "Fix injecting of EventBus into DiscoveryClientelandau05/08/14, 09:01:31 PM"Discovery client currently does a bunch of stuff in the constructor.
These operations previous saw a null eventBus because it is optional.
The fix ensures that the optional EventBus is properly resolved before
the constructor is called
Disable the DiscoveryStatusCheckTest until we can write a more robust
mock server."NaNelandau05/08/14, 08:59:27 PMMinor cleanup1
127Fixing build failuresNitesh KantNiteshKant05/08/14, 09:27:05 PMAlso removing dependency version ranges as they do not play well with internal netflix infrastructure."[eureka-pull-requests #129](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/129/) SUCCESS
This pull request looks good
 =||= "Fixing build failuresNitesh KantNiteshKant05/08/14, 09:27:05 PMAlso removing dependency version ranges as they do not play well with internal netflix infrastructure.NaNNitesh Kant05/08/14, 09:18:26 PM"Fixing build failures

Also removing dependency version ranges as they do not play well with internal netflix infrastructure."1
128Scheduled executor should be a daemonelandau05/19/14, 04:27:54 PMNaN"[eureka-pull-requests #130](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/130/) SUCCESS
This pull request looks good
 =||= Thanks @elandau!
 =||= "Scheduled executor should be a daemonelandau05/19/14, 04:27:54 PMNaNNaNelandau05/14/14, 08:25:14 PMScheduled executor should be a daemon1
129Update CloudInstanceConfig.javaTom Macktommack05/19/14, 04:28:22 PMAdding missing whitespace to log line."[eureka-pull-requests #131](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/131/) SUCCESS
This pull request looks good
 =||= Thanks @tommack!
 =||= "Update CloudInstanceConfig.javaTom Macktommack05/19/14, 04:28:22 PMAdding missing whitespace to log line.NaNtommack05/14/14, 11:57:40 PM"Update CloudInstanceConfig.java

Adding missing whitespace to log line."1
130Fix Eureka instance count and status loggingPeter Kelleypgkelley405/30/14, 10:09:40 PM"Eureka client would only log the number of UP instances but with the
deceiving message:

logger.debug(""The total number of instances in the client now is {}"",
                totInstances);""The log message is deceiving as-is. Another fix would be to change the log message to be:

logger.debug(""The total number of UP instances in the client now is {}"", totInstances);

Let me know which you would prefer.
 =||= [eureka-pull-requests #132](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/132/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #133](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/133/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #134](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/134/) FAILURE
Looks like there's a problem with this pull request
 =||= A few points to make about the ""Fix appsHashCode not getting updated"" commit.
- There could be other code paths I have missed where AppsHashCode isn't getting set correctly. It is currently inconsistent where it is set. In InstanceRegistry it is set in `getApplicationsFromMultipleRegions` but there isn't an analogous place in `DiscoveryClient`. This should probably be rethought, I think it made it easy to miss this bug.
- Why is `AbstractDiscoveryClientTester.CLIENT_REFRESH_RATE = 10`? Can we lower it to speed up the tests?
- This code `reconcileHashCode.equals(delta.getAppsHashCode())` In `fetchRegistry` will not return false and log differences if one app goes from UP to DOWN and another from DOWN to UP. Is this not a concern?
 =||= [eureka-pull-requests #135](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/135/) SUCCESS
This pull request looks good
 =||= @pgkelley4 apologies for the late reply.

> > > There could be other code paths I have missed where AppsHashCode isn't getting set correctly. It is currently inconsistent where it is set. In InstanceRegistry it is set in getApplicationsFromMultipleRegions but there isn't an analogous place in DiscoveryClient. This should probably be rethought, I think it made it easy to miss this bug.

In the DiscoveryClient, the app hash code used to always come from the server (in the response) but looks like after the remote region change, this hash code was not getting updated to reflect the  remote instances.
The app hashcode is used only when applying delta, where it seems to be checking correctly. Which bug are you referring to?

> > > Why is AbstractDiscoveryClientTester.CLIENT_REFRESH_RATE = 10? Can we lower it to speed up the tests?

Sure it can be.

> > > This code reconcileHashCode.equals(delta.getAppsHashCode()) In fetchRegistry will not return false and log differences if one app goes from UP to DOWN and another from DOWN to UP. Is this not a concern?

Yes thats a valid point and we have thought about it before. You are correct that this scenario can occur and will incorrectly indicate that the registry contents are identical.
However, the point to note is that the hashcode comes into picture only when it does not match (after applying the delta on the client). So, if the delta calculation at the server is correct, then the client would get the same registry information after applying the delta even though the hashcode did not change between the two calls (before and after this delta).
In other words, since the delta application is not conditional (based on the hashcode) the fact that the hashcode is not completely indicative of the registry content is not really an issue.
 =||= The changes look good to me. Should I merge it or you have some more changes to make?
 =||= My first point was more about when/where AppsHashCode should be set. I followed the pattern already in the code, but I really think it would be cleaner if it was managed by the Applications class, where it is stored. Then anytime the apps changed the AppsHashCode would be updated. This is a bit tricker because if someone changes instances through Application and not Applications, then AppHashCode would still have to be updated.

Either way at this point that is something long term to consider. Please merge this immediate fix.
 =||= @pgkelley4 sure if you have thoughts on how to fix it, feel free to issue a PR or open an issue to discuss.
 =||= "Fix Eureka instance count and status loggingPeter Kelleypgkelley405/30/14, 10:09:40 PM"Eureka client would only log the number of UP instances but with the
deceiving message:

logger.debug(""The total number of instances in the client now is {}"",
                totInstances);"NaNPeter Kelley05/20/14, 11:12:38 PM"Fix appsHashCode not getting updated

appsHashCode was not getting updated under 2 circumstances.

First when a BackupRegistry is used at all. Second when
fetchRegistry is called. Most notably when this is called
by the CacheRefreshThread."1
131Recent changes breaks eureka.shouldUseDns=trueJoe Hohertzjhohertz05/21/14, 08:37:29 PM"The DNS based lookup appears to have broken in 1.1.132 (or near there).

Nodes come up and never acquire the elastic IP as they should.""Just an added data point, 1.1.131 is confirmed to work fine, so this regression comes from a later commit.
 =||= Thanks @jhohertz for reporting this. I am also deploying this build inside Netflix and will look into this.
In the meanwhile, can you provide the logs from your server which is showing this behavior?
 =||= I've captured some logs, but they'e fairly long, happy to email them to you?

From the client side of it, it looks to be trying the right thing, trying to reach an existing Eureka server via the DNS records, cycles through all of them (getting not found as nothing has bound the IPs yet), which is normal in my experience as it's initializing, once it's cycled through them all, I see this:

```
2014-05-21 19:02:44,295 WARN  com.netflix.discovery.DiscoveryClient:1611 [main] [fetchRegistryFromBackup] No backup registry instance defined & unable to find any discovery servers.
2014-05-21 19:02:44,298 INFO  com.netflix.discovery.DiscoveryClient:1048 [main] [initScheduledTasks] Starting heartbeat executor: renew interval is: 30
2014-05-21 19:02:45,170 INFO  com.netflix.eureka.PeerAwareInstanceRegistry:218 [main] [updatePeerEurekaNodes] Adding replica node: http://ec2-54-243-35-38.compute-1.amazonaws.com:80/eureka/v2/
2014-05-21 19:02:45,776 INFO  com.netflix.eureka.PeerAwareInstanceRegistry:218 [main] [updatePeerEurekaNodes] Adding replica node: http://ec2-54-243-35-32.compute-1.amazonaws.com:80/eureka/v2/
2014-05-21 19:02:46,735 INFO  com.netflix.eureka.PeerAwareInstanceRegistry:218 [main] [updatePeerEurekaNodes] Adding replica node: http://ec2-54-243-35-42.compute-1.amazonaws.com:80/eureka/v2/
2014-05-21 19:02:47,281 INFO  com.netflix.eureka.PeerAwareInstanceRegistry:236 [main] [updatePeerEurekaNodes] Updating the replica nodes as they seem to have changed from [] to [http://ec2-54-243-35-38.compute-1.amazonaws.com:80/eureka/v2/, http://ec2-54-243-35-32.compute-1.amazonaws.com:80/eureka/v2/, http://ec2-54-243-35-42.compute-1.amazonaws.com:80/eureka/v2/] 
2014-05-21 19:03:14,297 INFO  com.netflix.discovery.DiscoveryClient:638 [pool-4-thread-1] [fetchRegistry] Disable delta property : false
2014-05-21 19:03:14,299 INFO  com.netflix.discovery.DiscoveryClient:639 [pool-4-thread-1] [fetchRegistry] Force full registry fetch : false
2014-05-21 19:03:14,299 INFO  com.netflix.discovery.DiscoveryClient:640 [pool-4-thread-1] [fetchRegistry] Application is null : false
2014-05-21 19:03:14,303 INFO  com.netflix.discovery.DiscoveryClient:641 [pool-4-thread-1] [fetchRegistry] Registered Applications size is zero : true
2014-05-21 19:03:14,304 INFO  com.netflix.discovery.DiscoveryClient:643 [pool-4-thread-1] [fetchRegistry] Application version is -1: true
```

At which we cycle into the routine seeing as when we have a single node up and it's looking for it's peers endlessly.

From the status page, it had all the replicas listed as available and registered....

... and as I went to grab a screenshot of that, I now see it's gotten past this somehow, I have a valid 3-node cluster of nodes... perhaps I was too impatient with it earlier... I'll try shutting it down and up again a couple time to see if I just got lucky here...
 =||= I've so far been unable to reproduce the issue I reported, perhaps it was something transient. (No longer have the log from the original failure... so can't check)

@NiteshKant,  my apologies for any harm to your signal-to-noise ratio, I'll close this off for now, can always re-open if I run into it again.
 =||= No problems at all @jhohertz. Sure reopen this if you see this again.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
132Add ability for eureka-client to only fetch registry of a single application on periodic refreshDavid Liuqiangdavidliu06/03/14, 07:55:38 PMEureka-server already support application specific registry fetch. It would be useful for eureka-client's periodic refresh to be able to support application specific refresh as well as the more general full/delta refresh."Property <namespace>.registryRefreshSingleVipAddress can be used to specify a **single** VIP address that will be fetched by the client instead of the complete registry.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
133Adding config override in eureka-client to force registry refresh to only pick up data for a single appDavid Liuqiangdavidliu06/03/14, 07:52:13 PM#132"[eureka-pull-requests #136](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/136/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #138](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/138/) SUCCESS
This pull request looks good
 =||= "Adding config override in eureka-client to force registry refresh to only pick up data for a single appDavid Liuqiangdavidliu06/03/14, 07:52:13 PM#132NaNDavid Liu06/03/14, 07:10:21 PM"Merge branch 'single-app-registry-refresh' of https://github.com/qiangdavidliu/eureka into single-app-registry-refresh

Conflicts:
	eureka-client/src/test/java/com/netflix/discovery/AbstractDiscoveryClientTester.java
	eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientRegistryTest.java"1
134Automatically re-register all DC instance by defaultJerome Boulonjboulon07/22/14, 11:01:10 PMNaN"[eureka-pull-requests #137](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/137/) SUCCESS
This pull request looks good
 =||= Pull request #150 achieves this without a property knob, which seems unnecessary, as discussed in previous comments.

I am closing this PR, the other PR will be released as part of milestone [1.1.137](https://github.com/Netflix/eureka/issues?milestone=4&state=open)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
135DC services are not registered by default after an Eureka re-startJerome Boulonjboulon07/22/14, 11:23:09 PM"When Eureka is running in a Data center and in case of Eureka re-start (even rolling upgrade). Eureka will not re-register existing services on the new Eureka node e after re-start. 
For AWS instance there's some specific code in place to re-register instances from the same region but that function return false in all other cases.""See https://github.com/Netflix/eureka/pull/134 for the fix
 =||= Thanks @jboulon! I have provided my comments on #134 
 =||= The fix is done in #150 instead.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
136Removing range dependencies.Nitesh KantNiteshKant06/03/14, 11:28:21 PMNaN"[eureka-pull-requests #139](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/139/) FAILURE
Looks like there's a problem with this pull request
 =||= "Removing range dependencies.Nitesh KantNiteshKant06/03/14, 11:28:21 PMNaNNaNNitesh Kant06/03/14, 11:27:49 PMRemoving range dependencies.1
137Introduce rate limiting for eureka serverNitesh KantNiteshKant01/04/15, 04:49:30 AM"Eureka servers assumes well behaving clients, i.e.:
- Clients do not aggressively query the servers for data.
- Clients do not do full registry calls but do delta updates.

Although most of the clients use the provided eureka client but there may be some offending clients which do not behave well. These clients can potentially bring down the server by throwing a high amount of load on the server and hence penalizing the other well behaved clients.

Eureka servers should apply quotas for clients based on different criterions:
- Same client.
- Same application.""Guava has some low level APIs that may be useful here.

http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/util/concurrent/RateLimiter.html
 =||= Rate limiter functionality was implemented for Eureka 1.0. The rate limiting is performed only for full/delta/application fetches. There are two quotas. One for all query types, and a dedicated one for the full registry fetch.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
138Eureka Client not resilient to socket read timeouts not getting triggeredNitesh KantNiteshKant07/06/14, 06:19:25 AM"Eureka client uses thread pool schedulers to schedule tasks:
- Fetch registry
- Heartbeats

This assumes that every scheduled task finishes either with success or error. If this assumption is broken, no new tasks (for the same type) gets scheduled.
In some scenarios we have seen inside AWS that the socket read timeouts do not get triggered which makes the thread reading HTTP response stuck and hence break the above assumption.

The client should be able to identify this scenario and be resilient."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
139Eureka client should identify itself when connecting to the serverDavid Liuqiangdavidliu07/08/14, 05:50:47 PM"Eureka client requests should include some identifiable header data when connecting to eureka server for tracking and metric purposes. Fields of interest would be:
- client-identifier
- client-ip
- client-version""#142 
 =||= merged
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
140add eureka.appinfo.initial.replicate.time property to allow faster initi...Andrew Spykeraspyker06/18/14, 07:57:10 AM...al registration"[eureka-pull-requests #140](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/140/) SUCCESS
This pull request looks good
 =||= Thanks @aspyker 
 =||= "add eureka.appinfo.initial.replicate.time property to allow faster initi...Andrew Spykeraspyker06/18/14, 07:57:10 AM...al registrationNaNaspyker06/15/14, 01:57:18 AMadd eureka.appinfo.initial.replicate.time property to allow faster initial registration1
141Adding timeout and backup on DiscoveryClient's heartbeat and cacheRefreshDavid Liuqiangdavidliu06/23/14, 05:40:40 AMNaN"[eureka-pull-requests #141](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/141/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #142](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/142/) SUCCESS
This pull request looks good
 =||= #138 
 =||= "Adding timeout and backup on DiscoveryClient's heartbeat and cacheRefreshDavid Liuqiangdavidliu06/23/14, 05:40:40 AMNaNNaNDavid Liu06/16/14, 10:01:27 PMAdding new files1
142Adding auth headersDavid Liuqiangdavidliu07/07/14, 11:26:47 PM"Adding auth headers to eureka client and server outbound requests.
Adding filter to optionally log auth headers in eureka server.""[eureka-pull-requests #143](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/143/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #154](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/154/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #155](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/155/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #156](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/156/) SUCCESS
This pull request looks good
 =||= "Adding auth headersDavid Liuqiangdavidliu07/07/14, 11:26:47 PM"Adding auth headers to eureka client and server outbound requests.
Adding filter to optionally log auth headers in eureka server."NaNDavid Liu07/07/14, 09:11:53 PM"Removing config for identity header filters.
Changing default config for server identity logging to true."1
143Improved locking for periodic registry refreshesDavid Liuqiangdavidliu07/04/14, 11:18:34 PMIn the very unlikely case where applying registry updates take > than the update periodicity, a subsequent update thread can trample the previous (still updating) thread."[eureka-pull-requests #144](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/144/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #145](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/145/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #146](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/146/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #147](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/147/) SUCCESS
This pull request looks good
 =||= "Improved locking for periodic registry refreshesDavid Liuqiangdavidliu07/04/14, 11:18:34 PMIn the very unlikely case where applying registry updates take > than the update periodicity, a subsequent update thread can trample the previous (still updating) thread.NaNDavid Liu06/30/14, 08:05:55 PMAdding log line for when client is configured to not register with the server1
144Make HealthCheckCallback injectableelandau07/04/14, 11:47:35 PM"Making HealthCheckCallback injectable instead of calling registerHealthCheckCallback removes the need to create custom providers that want to ensure registerHealthCheckCallback is called as part of DiscoveryClient instantiation. 

Also change a few @Singleton's to @FineGrainedLazySingleton""[eureka-pull-requests #148](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/148/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #149](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/149/) SUCCESS
This pull request looks good
 =||= @elandau LGTM, merge?
 =||= "Make HealthCheckCallback injectableelandau07/04/14, 11:47:35 PM"Making HealthCheckCallback injectable instead of calling registerHealthCheckCallback removes the need to create custom providers that want to ensure registerHealthCheckCallback is called as part of DiscoveryClient instantiation. 

Also change a few @Singleton's to @FineGrainedLazySingleton"NaNelandau07/04/14, 03:55:55 AMFix NPE1
145Healthcheck handler should support returning any InstanceInfo StatusNitesh KantNiteshKant07/06/14, 06:18:37 AM"Current `HealthCheckCallback` only supports a binary status which translates to UP and DOWN status for `InstanceInfo`. 
In order to have healthcheck status not used in STARTING state, eureka client does not invoke the healthcheck callback when the status is STARTING.
This forces applications to spread the instance status update in two places:
- `HealthCheckCallback` giving UP/DOWN status.
- Application code transitioning status from STARTING to UP

This change will provide a new interface (deprecating the old `HealthCheckCallback` interface), that will provide the `InstanceInfo.InstanceStatus` as its return value. This will enable applications to have the instance status update logic in one place i.e. the `HealthCheckHandler`"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
146Fixes issue #145Nitesh KantNiteshKant07/06/14, 03:42:17 AM"Provided a new interface `HealthcheckHandler` and deprecated `HealthcheckCallback`

This change is backward compatible i.e. the use of `HealthcheckCallback` stays as today.""[eureka-pull-requests #150](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/150/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #151](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/151/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #152](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/152/) SUCCESS
This pull request looks good
 =||= "Fixes issue #145Nitesh KantNiteshKant07/06/14, 03:42:17 AM"Provided a new interface `HealthcheckHandler` and deprecated `HealthcheckCallback`

This change is backward compatible i.e. the use of `HealthcheckCallback` stays as today."NaNNitesh Kant07/06/14, 03:15:24 AMFixes issue #1451
147Re-introduce read-only cache in ResponseCacheNitesh KantNiteshKant07/06/14, 06:18:29 AM"In eureka release 1.1.131 the read-only cache in `ResponseCache` was removed.
In our production we have seen high rate of cache misses causing higher latencies for get full registry requests."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
148Fixes issue #147Nitesh KantNiteshKant07/06/14, 06:18:17 AMRe-introducing read only response cache."[eureka-pull-requests #153](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/153/) SUCCESS
This pull request looks good
 =||= "Fixes issue #147Nitesh KantNiteshKant07/06/14, 06:18:17 AMRe-introducing read only response cache.NaNNitesh Kant07/06/14, 03:43:11 AM"Fixes issue #147

Re-introducing read only response cache."1
149Minor fixesDavid Liuqiangdavidliu07/22/14, 11:50:45 PM"Removing identity header id logging to reduce metric size
Quieten down periodic log messages in discoveryClient""[eureka-pull-requests #157](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/157/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #158](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/158/) SUCCESS
This pull request looks good
 =||= Not merged
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
150Enabling registration for non-amazon datacenters on server startup.Nitesh KantNiteshKant07/22/14, 11:19:50 PM"`PeerAwareInstanceRegistry` disregards any non-amazon instances got from a peer on initial startup. This change enabled the registration.

Changes were discussed as part of pull request: https://github.com/Netflix/eureka/pull/134""[eureka-pull-requests #159](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/159/) SUCCESS
This pull request looks good
 =||= "Enabling registration for non-amazon datacenters on server startup.Nitesh KantNiteshKant07/22/14, 11:19:50 PM"`PeerAwareInstanceRegistry` disregards any non-amazon instances got from a peer on initial startup. This change enabled the registration.

Changes were discussed as part of pull request: https://github.com/Netflix/eureka/pull/134"NaNNitesh Kant07/22/14, 10:57:23 PM"Enabling registration for non-amazon datacenters on server startup.

`PeerAwareInstanceRegistry` disregards any non-amazon instances got from a peer on initial startup. This change enabled the registration.

Changes were discussed as part of pull request: https://github.com/Netflix/eureka/pull/134"1
151Minor fixesDavid Liuqiangdavidliu07/23/14, 12:09:11 AM"- change periodic info logs to debug logs in DiscoveryClient
- remove clientId logging in discovery server""[eureka-pull-requests #160](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/160/) SUCCESS
This pull request looks good
 =||= "Minor fixesDavid Liuqiangdavidliu07/23/14, 12:09:11 AM"- change periodic info logs to debug logs in DiscoveryClient
- remove clientId logging in discovery server"NaNDavid Liu07/22/14, 11:53:15 PM"- change periodic info logs to debug logs in DiscoveryClient
- remove clientId logging in discovery server"1
152Cannot Bind Elastic IP in VPCEric Dowdericdowd08/01/14, 06:44:17 AMI was trying to run eureka in a VPC; I allocated VPC elastic IPs and started the instance in a VPC. I received an error message when trying to bind to an elastic IP because VPC EIPs require allocation id (which can be found in DescribeAddresses) instead of public IP (which EC2-Classic EIPs require). Though it didn't make it that far, unbinding would also run into a problem because it requires association id instead of the public IP."Fixed with pull request #153 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
153Fix for Issue #152Eric Dowdericdowd07/28/14, 06:57:31 PMCheck if the elastic ip is for VPC and behave appropriately"[eureka-pull-requests #161](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/161/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #164](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/164/) SUCCESS
This pull request looks good
 =||= Thanks @ericdowd !
 =||= "Fix for Issue #152Eric Dowdericdowd07/28/14, 06:57:31 PMCheck if the elastic ip is for VPC and behave appropriatelyNaNEric Dowd07/26/14, 01:38:46 AMUse domain of elastic IP to determine vpc or ec2-classic1
154Skeletal changes for 2.xNitesh KantNiteshKant07/26/14, 12:50:31 AM"All the source code is removed. This only contains the modules required for eureka 2.X
We will add the files required from 1.X as we need them.""[eureka-pull-requests #162](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/162/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #163](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/163/) SUCCESS
This pull request looks good
 =||= "Skeletal changes for 2.xNitesh KantNiteshKant07/26/14, 12:50:31 AM"All the source code is removed. This only contains the modules required for eureka 2.X
We will add the files required from 1.X as we need them."NaNNitesh Kant07/26/14, 12:46:54 AMAdding placeholder test files to keep cloudbees happy.1
155Eureka 2.0 transport prototype.tbak07/29/14, 06:59:38 AMContains the code we walked through today."[eureka-pull-requests #165](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/165/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #166](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/166/) SUCCESS
This pull request looks good
 =||= "Eureka 2.0 transport prototype.tbak07/29/14, 06:59:38 AMContains the code we walked through today.NaNTomasz Bak07/28/14, 11:07:56 PMMake sure project compiles under Java6.1
156Initial example interface/implementation of model and registryDavid Liuqiangdavidliu07/29/14, 05:10:06 PMNaN"[eureka-pull-requests #167](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/167/) SUCCESS
This pull request looks good
 =||= @qiangdavidliu please rebase + submit, will merge.
 =||= [eureka-pull-requests #168](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/168/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #169](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/169/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #170](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/170/) SUCCESS
This pull request looks good
 =||= "Initial example interface/implementation of model and registryDavid Liuqiangdavidliu07/29/14, 05:10:06 PMNaNNaNDavid Liu07/29/14, 08:21:53 AM@Ignore all tests in AvroMessageBrokerTest for now1
157Remote region registry lookup failure should not disable registry fetchNitesh KantNiteshKant08/01/14, 05:09:04 PM"Eureka server does not allow fetch registry if there is a remote region registry fetch configured and the remote region server is unavailable. Relevant code is [here](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/PeerAwareInstanceRegistry.java#L398)

This creates a circular dependency between two regions configured to fetch registry data from each other (which is typically the case) and hence makes it impossible to bootstrap two dependent regions.

This behavior should be altered such that remote region registry fetch is a 'best-effort' and any failure to retrieve this registry does not hamper clients fetching registry information.
#### Open question

Should we only disallow fetch registry calls that requires remote region data in this scenario?""PR #158 fixes this issue. 

> > > Should we only disallow fetch registry calls that requires remote region data in this scenario?

This change disallows remote registry fetch calls when remote region registry is not available. The local region registry fetch is allowed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
158Fixes #157Nitesh KantNiteshKant08/01/14, 05:09:03 PM"Making remote region registry fetch a soft dependency.

This means that clients that are making calls to fetch registry and delta for local region only, will continue to get registry data even if the configured remote region registry is unavailable.
This removes a circular dependency between cross-region eureka instances and hence it is possible to bootstrap both regions from scratch.""[eureka-pull-requests #172](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/172/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #173](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/173/) SUCCESS
This pull request looks good
 =||= "Fixes #157Nitesh KantNiteshKant08/01/14, 05:09:03 PM"Making remote region registry fetch a soft dependency.

This means that clients that are making calls to fetch registry and delta for local region only, will continue to get registry data even if the configured remote region registry is unavailable.
This removes a circular dependency between cross-region eureka instances and hence it is possible to bootstrap both regions from scratch."NaNNitesh Kant08/01/14, 06:51:19 AMModified the console error message1
159Eureka transport update.tbak08/04/14, 08:57:35 PMNaN"[eureka-pull-requests #174](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/174/) SUCCESS
This pull request looks good
 =||= "Eureka transport update.tbak08/04/14, 08:57:35 PMNaNNaNTomasz Bak08/04/14, 07:54:09 PMRegistration/discovery transport implementation - work in progress.1
160Initial attempt to interests implementationNitesh KantNiteshKant08/05/14, 02:23:10 AM"-- Provided a new EurekaRegistry API as I did not want a lot of conflicts for David. This can merge into existing registry implementation later.
-- Provided an Index and interest abstraction.
-- Had to comment a test case for EurekaTransport because avro was not able to handle an abstract class (why?)
-- Created a new module eureka-test-utils that will be used to provide test utilities for eureka for internal (eureka project) and external (people using eureka) use.""[eureka-pull-requests #175](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/175/) SUCCESS
This pull request looks good
 =||= "Initial attempt to interests implementationNitesh KantNiteshKant08/05/14, 02:23:10 AM"-- Provided a new EurekaRegistry API as I did not want a lot of conflicts for David. This can merge into existing registry implementation later.
-- Provided an Index and interest abstraction.
-- Had to comment a test case for EurekaTransport because avro was not able to handle an abstract class (why?)
-- Created a new module eureka-test-utils that will be used to provide test utilities for eureka for internal (eureka project) and external (people using eureka) use."NaNNitesh Kant08/05/14, 02:11:38 AMInterests infra (WIP)1
161Adding initial implementations to partially implemented model classesDavid Liuqiangdavidliu08/05/14, 04:17:59 PM"Changes to common classes:
- added an unique UUID to instanceInfo id in SampleInstanceInfo
- added a parallel SampleChangeNotification in the same style as SampleInstanceInfo that can also take a seed instanceInfo to creating notifications (so that the id can stay constant)""[eureka-pull-requests #176](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/176/) SUCCESS
This pull request looks good
 =||= "Adding initial implementations to partially implemented model classesDavid Liuqiangdavidliu08/05/14, 04:17:59 PM"Changes to common classes:
- added an unique UUID to instanceInfo id in SampleInstanceInfo
- added a parallel SampleChangeNotification in the same style as SampleInstanceInfo that can also take a seed instanceInfo to creating notifications (so that the id can stay constant)"NaNDavid Liu08/05/14, 06:12:09 AMAdding initial implementations to partially implemented model classes1
162Implementing init state & real time state consistency.Nitesh KantNiteshKant08/05/14, 02:28:35 PM"Created a special ""pausable"" Subject that can be used for any data set that needs a consistency between iterator creation and change notification stream.""[eureka-pull-requests #177](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/177/) SUCCESS
This pull request looks good
 =||= "Implementing init state & real time state consistency.Nitesh KantNiteshKant08/05/14, 02:28:35 PM"Created a special ""pausable"" Subject that can be used for any data set that needs a consistency between iterator creation and change notification stream."NaNNitesh Kant08/05/14, 07:25:43 AM"Implementing init state & real time state consistency.

Created a special ""pausable"" Subject that can be used for any data set that needs a consistency between iterator creation and change notification stream."1
163Merge EurekaRegistryImpl with InstanceRegistryDavid Liuqiangdavidliu08/06/14, 04:47:50 PMCaveats apply, see TODO comments in LeasedInstanceRegistry"[eureka-pull-requests #178](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/178/) SUCCESS
This pull request looks good
 =||= "Merge EurekaRegistryImpl with InstanceRegistryDavid Liuqiangdavidliu08/06/14, 04:47:50 PMCaveats apply, see TODO comments in LeasedInstanceRegistryNaNDavid Liu08/05/14, 11:18:41 PM"Merged EurekaRegistryImpl and InstanceRegistry, and renaming to LeasedInstanceRegistry
for better name context."1
164transport updatetbak08/06/14, 07:49:27 PMNaN"[eureka-pull-requests #179](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/179/) SUCCESS
This pull request looks good
 =||= "transport updatetbak08/06/14, 07:49:27 PMNaNNaNTomasz Bak08/06/14, 06:58:42 PMFix Json codec.1
165Transport update.tbak08/07/14, 06:34:40 PMNaN"[eureka-pull-requests #180](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/180/) ABORTED
 =||= [eureka-pull-requests #181](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/181/) SUCCESS
This pull request looks good
 =||= "Transport update.tbak08/07/14, 06:34:40 PMNaNNaNTomasz Bak08/07/14, 06:30:19 PMFix race condition in transport unit test.1
166Removing the unused Index enum.Nitesh KantNiteshKant08/12/14, 07:24:31 AM"-- Also modified the InitStateHolder to take an iterator which works well with filtering by interest.
-- Provided a shutdown() on registry so that we can simulate end of an index.""[eureka-pull-requests #182](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/182/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #183](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/183/) SUCCESS
This pull request looks good
 =||= "Removing the unused Index enum.Nitesh KantNiteshKant08/12/14, 07:24:31 AM"-- Also modified the InitStateHolder to take an iterator which works well with filtering by interest.
-- Provided a shutdown() on registry so that we can simulate end of an index."NaNNitesh Kant08/12/14, 07:16:27 AM"Increasing the maximum wait time for the test.

Cloudbees servers are sometimes slow which can result in flakiness of the test."1
167Initial naive implementation of InstanceLocationDavid Liuqiangdavidliu08/12/14, 04:40:06 PM- eventual consistent view of snapshotForInterest from the registry"[eureka-pull-requests #184](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/184/) SUCCESS
This pull request looks good
 =||= "Initial naive implementation of InstanceLocationDavid Liuqiangdavidliu08/12/14, 04:40:06 PM- eventual consistent view of snapshotForInterest from the registryNaNDavid Liu08/12/14, 08:15:59 AMAdding instanceLocation to InstanceInfo.toString, equal, hascode etc.1
168(WIP) Introducing the concept of EurekaService and ServiceChannel.Nitesh KantNiteshKant08/13/14, 06:33:36 AM"-- A service is the access point for registry access (both read/write)
-- A channel abstracts a protocol/command so that it provides a higher level abstraction of what is to be done for a command.

We can bikeshed on names but lets discuss the abstraction.""[eureka-pull-requests #185](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/185/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #186](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/186/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #188](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/188/) SUCCESS
This pull request looks good
 =||= "(WIP) Introducing the concept of EurekaService and ServiceChannel.Nitesh KantNiteshKant08/13/14, 06:33:36 AM"-- A service is the access point for registry access (both read/write)
-- A channel abstracts a protocol/command so that it provides a higher level abstraction of what is to be done for a command.

We can bikeshed on names but lets discuss the abstraction."NaNNitesh Kant08/13/14, 06:27:11 AM"Added stub implementations for EurekaService & ServiceChannel.

The abstractions between the protocol and the server side are not in sync so leaving a lot of stubs."1
169Initial proposal for DeltaInstanceInfoDavid Liuqiangdavidliu08/25/14, 03:06:30 PMNaN"[eureka-pull-requests #187](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/187/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #189](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/189/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #190](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/190/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #191](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/191/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #192](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/192/) ABORTED
 =||= [eureka-pull-requests #193](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/193/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #196](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/196/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #199](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/199/) SUCCESS
This pull request looks good
 =||= "Initial proposal for DeltaInstanceInfoDavid Liuqiangdavidliu08/25/14, 03:06:30 PMNaNNaNDavid Liu08/24/14, 01:39:17 AMUse interface TypeVariable instead of proprietary Impl1
170Eureka 2.x multiple commitstbak08/15/14, 05:08:13 PMNaN"[eureka-pull-requests #194](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/194/) SUCCESS
This pull request looks good
 =||= "Eureka 2.x multiple commitstbak08/15/14, 05:08:13 PMNaNNaNTomasz Bak08/15/14, 04:58:42 PM"Shift back Karyon version to the latest release so we can merge this code
into the main repo.
Some Karyon code was commented out. We will be able to uncomment it when
the new Karyon version is released."1
171Integration of registration protocol with EurekaServerService API tbak08/25/14, 03:17:36 PMNaN"[eureka-pull-requests #195](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/195/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #200](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/200/) SUCCESS
This pull request looks good
 =||= "Integration of registration protocol with EurekaServerService API tbak08/25/14, 03:17:36 PMNaNNaNTomasz Bak08/25/14, 03:13:42 PM"Merge #171 with 2.x latest commit.

Conflicts:
	eureka-server/src/test/java/com/netflix/eureka/server/transport/registration/protocol/asynchronous/AsyncRegistrationServerTest.java"1
172Fix logging stringJeff Williamsjeffw-wherethebitsroam08/21/14, 07:51:04 AM"Just getting it to log the availability zones correctly. Previously:

2014-08-20 06:28:02,249 DEBUG com.netflix.discovery.DiscoveryClient:522 [DiscoveryClient_ServiceURLUpdater] [getEurekaServiceUrlsFromConfig] The availability zone for the given region us-east-1 are %s""[eureka-pull-requests #197](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/197/) SUCCESS
This pull request looks good
 =||= Thanks @jeffw-wherethebitsroam 
 =||= "Fix logging stringJeff Williamsjeffw-wherethebitsroam08/21/14, 07:51:04 AM"Just getting it to log the availability zones correctly. Previously:

2014-08-20 06:28:02,249 DEBUG com.netflix.discovery.DiscoveryClient:522 [DiscoveryClient_ServiceURLUpdater] [getEurekaServiceUrlsFromConfig] The availability zone for the given region us-east-1 are %s"NaNJeff Williams08/20/14, 11:54:12 AMFix logging string1
173Adding a new gradle task (testJar) to allow test dependencies on eureka-clientchristorpelund08/26/14, 01:52:23 AMNaN"[eureka-pull-requests #198](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/198/) SUCCESS
This pull request looks good
 =||= @christorpelund can you explain the usecase you are solving with this change?
 =||= @NiteshKant we're trying to expose the mock eureka server as a test dependency so we can do TDD against our own opinionated client library.
 =||= @christorpelund that makes sense.
 =||= "Adding a new gradle task (testJar) to allow test dependencies on eureka-clientchristorpelund08/26/14, 01:52:23 AMNaNNaNChristopher Torpelund-Bruin, Dennis Leon and Dean McNiven08/21/14, 07:03:13 AMAdding a new gradle task (testJar) to allow test dependencies on eureka-client1
174Enable injection of BackupRegistry in DiscoveryClientNitesh KantNiteshKant08/26/14, 07:12:24 PM"Currently DiscoveryClient uses reflection to instantiate `BackupRegistry`. 
This makes it impossible for `BackupRegistry` to use injection."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
175Update eureka-client to use new domain model with Delta class.tbak08/26/14, 12:58:01 AMUpdate avro/json codecs to deal with modified data model."[eureka-pull-requests #201](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/201/) ABORTED
 =||= [eureka-pull-requests #202](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/202/) SUCCESS
This pull request looks good
 =||= "Update eureka-client to use new domain model with Delta class.tbak08/26/14, 12:58:01 AMUpdate avro/json codecs to deal with modified data model.NaNTomasz Bak08/26/14, 12:29:10 AMConfigure junit test timeouts for eureka-server tests.1
176Fixes #174Nitesh KantNiteshKant08/26/14, 07:12:24 PM"-- Making BackupRegistry injectable.
-- Fixed an annoying issue in EIPManager:  When no EIPs are free, it was throwing an NPE.""[eureka-pull-requests #203](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/203/) SUCCESS
This pull request looks good
 =||= "Fixes #174Nitesh KantNiteshKant08/26/14, 07:12:24 PM"-- Making BackupRegistry injectable.
-- Fixed an annoying issue in EIPManager:  When no EIPs are free, it was throwing an NPE."NaNNitesh Kant08/26/14, 12:46:26 AM"Fixes #174

-- Making BackupRegistry injectable.
-- Fixed an annoying issue in EIPManager:  When no EIPs are free, it was throwing an NPE."1
177Diff to generate deltas from instanceInfoDavid Liuqiangdavidliu08/26/14, 04:57:48 PMNaN"[eureka-pull-requests #204](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/204/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #205](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/205/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #206](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/206/) SUCCESS
This pull request looks good
 =||= "Diff to generate deltas from instanceInfoDavid Liuqiangdavidliu08/26/14, 04:57:48 PMNaNNaNDavid Liu08/26/14, 05:45:55 AMUpdate version when applying Delta in InstanceInfo.Builder.1
178Integrate discovery server transport layer with InterestChannel.tbak08/27/14, 04:10:11 PMNaN"[eureka-pull-requests #207](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/207/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #210](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/210/) SUCCESS
This pull request looks good
 =||= "Integrate discovery server transport layer with InterestChannel.tbak08/27/14, 04:10:11 PMNaNNaNTomasz Bak08/27/14, 04:01:58 PM"Merge

Conflicts:
	eureka-server/src/test/java/com/netflix/eureka/server/transport/discovery/protocol/asynchronous/AsyncDiscoveryServerTest.java"1
179Adding back the modified public constructor to DiscoveryClientNitesh KantNiteshKant08/27/14, 05:28:24 AM"Fix for issue #174 added another argument to the constructor used by guice.
This was considering the fact that code should not be using the @Inject constructor directly. However, some code inside Netflix was dependent on it.

 Adding the old constructor back and making the @Inject constructor package private.""[eureka-pull-requests #208](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/208/) SUCCESS
This pull request looks good
 =||= "Adding back the modified public constructor to DiscoveryClientNitesh KantNiteshKant08/27/14, 05:28:24 AM"Fix for issue #174 added another argument to the constructor used by guice.
This was considering the fact that code should not be using the @Inject constructor directly. However, some code inside Netflix was dependent on it.

 Adding the old constructor back and making the @Inject constructor package private."NaNNitesh Kant08/27/14, 04:59:47 AM"Adding the modified public constructor to DiscoveryClient

Fix for issue #174 added another argument to the constructor used by guice.
This was considering the fact that code should not be using the @Inject constructor directly. However, some code inside Netflix was dependent on it.

 Adding the old constructor back and making the @Inject constructor package private."1
180Reworked InstanceInfoField so reflection is not used to set InstanceInfoDavid Liuqiangdavidliu08/27/14, 06:11:54 PMAlso removed unused classes"[eureka-pull-requests #209](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/209/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #211](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/211/) SUCCESS
This pull request looks good
 =||= "Reworked InstanceInfoField so reflection is not used to set InstanceInfoDavid Liuqiangdavidliu08/27/14, 06:11:54 PMAlso removed unused classesNaNDavid Liu08/27/14, 05:39:13 AM"Reworked InstanceInfoField so reflection is not used to set InstanceInfo
Removed unused classes"1
181Guaranteed instance id uniqueness tbak06/02/16, 10:26:03 PM"Current Eureka design assumes that clients choose their instance id, and submit it to the Eureka server during registration process. It has some pros/cons versus reversed process, where the server assigns an id to a client and sends it back in a reply to a registration request.

**Client side instance id assignment**
Pros:
- client can choose their own naming schema (use instance id in AWS, or IP address or a descriptive name like backend-server-X)

Cons:
- client is responsible for instance id uniqueness, across multiple applications
- Eureka server must be able to detect situations where the same id is used by multiple different clients (when the id uniqueness contract is violated by clients)

**Server side instance id assignment**
Pros:
- clients are relieved from assigning globally unique ids
- no problem with misbehaving clients

Cons:
- it is difficult to generate compact, descriptive and unique ids in a distributed system. For example ip address itself is not enough (can be reassigned).
- using UUIDs would solve the uniqueness problem, but would leave us with long and cryptic ids""Why not both ids?

```
class GloballyUniqueIDs {
  String clientID;
  String serverID;
   ...
}
```
 =||= Thanks for the suggestion @futurely . That's an interesting idea and we will look into it.
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
182Upgrade to Java7 and remove redundancy from gradle scripts.tbak08/27/14, 11:27:24 PMNaN"[eureka-pull-requests #212](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/212/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #214](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/214/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #215](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/215/) SUCCESS
This pull request looks good
 =||= "Upgrade to Java7 and remove redundancy from gradle scripts.tbak08/27/14, 11:27:24 PMNaNNaNTomasz Bak08/27/14, 09:21:53 PMUpgrade to Java7 and remove redundancy from gradle scripts.1
183Add missing pieces to run Eureka client/server for the current code basetbak08/28/14, 09:58:23 PM"Add missing pieces to run Eureka client/server for the current code base

To run server execute:
cd eureka-server
../gradlew runWriteServer

To run client:
cd eureka-test-utils
../gradlew build
./build/cli.sh

Run help, to get a list of available commands.""[eureka-pull-requests #216](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/216/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #220](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/220/) SUCCESS
This pull request looks good
 =||= "Add missing pieces to run Eureka client/server for the current code basetbak08/28/14, 09:58:23 PM"Add missing pieces to run Eureka client/server for the current code base

To run server execute:
cd eureka-server
../gradlew runWriteServer

To run client:
cd eureka-test-utils
../gradlew build
./build/cli.sh

Run help, to get a list of available commands."NaNTomasz Bak08/28/14, 06:48:31 PM"Add missing pieces to run Eureka client/server for the current code base.

To run server execute:
cd eureka-server
../gradlew runWriteServer

To run client:
cd eureka-test-utils
../gradlew build
./build/cli.sh

Run help, to get a list of available commands."1
184Client usage parity between 1.x and 2.xNitesh KantNiteshKant06/02/16, 10:25:59 PM"#### Problem

How do we want people using eureka, primarily from the point of view of using eureka client, move from 1.x to 2.x stack?
#### Scope
- This obviously does not cover things that we are improving i.e. new APIs.
- This applies to things like InstanceInfo, DatacenterInfo, InstanceStatus, Healthcheck, etc which are plugin points for users and cause pain when changed.""\cc @tbak @qiangdavidliu 
 =||= From the data model point of view (InstanceInfo, DataCenterInfo, etc) we shall not be very far away in 2.0 from what is in 1.0. The reactive interface will be obviously totally different. To easy the migration we could provide on top of Rx API, something closer to 1.0 synchronous API.
 =||= Sync API over async implementation may not be beneficial.
[Should I expose synchronous wrappers for asynchronous methods?](http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx)
[Good practice - Use the sync-over-async invocation pattern with caution](https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/W7b59e5e25210_4b56_9b7e_69dab379734a/page/Good%20practice%20-%20%20Use%20the%20sync-over-async%20invocation%20pattern%20with%20caution)
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
185Unifying the channel and transport layers to use different data typesDavid Liuqiangdavidliu09/02/14, 07:40:45 PMFor Add, Modify and Delete operations, we have different data types of InstanceInfo, Delta and InstanceIdentifier (wrapper around the String id). Unifying these so that the transport layer can handle them."[eureka-pull-requests #221](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/221/) SUCCESS
This pull request looks good
 =||= Moving to a different design.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
186Add DataCenterInfo and a few other abstractiontbak09/02/14, 07:39:48 PMNaN"[eureka-pull-requests #222](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/222/) FAILURE
Looks like there's a problem with this pull request
 =||= "Add DataCenterInfo and a few other abstractiontbak09/02/14, 07:39:48 PMNaNNaNTomasz Bak09/02/14, 04:22:47 AMEnable tests there were accidently commented out.1
187A take on re-implementing channels (WIP- don't merge)Nitesh KantNiteshKant09/07/14, 08:41:08 PMThis is WIP and not yet finished."[eureka-pull-requests #223](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/223/) ABORTED
 =||= [eureka-pull-requests #224](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/224/) ABORTED
 =||= [eureka-pull-requests #225](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/225/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #226](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/226/) FAILURE
Looks like there's a problem with this pull request
 =||= @tbak This change is included in the other PR #188, so I can close this one?
 =||= yes

On Thu, Sep 4, 2014 at 10:15 PM, Nitesh Kant notifications@github.com
wrote:

> @tbak https://github.com/tbak This change is included in the other PR
> #188 https://github.com/Netflix/eureka/pull/188, so I can close this
> one?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/187#issuecomment-54585898.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1882.x reworked channelstbak09/04/14, 04:59:40 PMNaN"[eureka-pull-requests #227](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/227/) SUCCESS
This pull request looks good
 =||= "2.x reworked channelstbak09/04/14, 04:59:40 PMNaNNaNTomasz Bak09/04/14, 06:05:47 AM"Reimplement MessageBroker acknowledgement timeout mechanism.
Get rid of acknowledgement correlation id."1
189Add rate limiter, to cut-off custom clients if traffic goes above configured level.tbak09/08/14, 04:54:48 PMNaN"[eureka-pull-requests #228](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/228/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #229](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/229/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #235](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/235/) SUCCESS
This pull request looks good
 =||= "Add rate limiter, to cut-off custom clients if traffic goes above configured level.tbak09/08/14, 04:54:48 PMNaNNaNTomasz Bak09/08/14, 04:44:37 AMRate limter shall count statistcs about number of throttling candidates on a dedicated counter.1
190JAX-RS resources assume EurekaBootStrap driven before class loadsDavid Curriedavidcurrie10/10/14, 10:36:09 PM"Many of the Eureka JAX-RS resources assume that the web container is going to drive EurekaBootStrap before loading the classes for those resources. For example, ApplicationsResource has a static field for EurekaServerConfigurationManager. If the container loads the classes first (as is the case for WebSphere Liberty), the instance obtained and stored in the field ends up being null and everything falls over with a NullPointerException the first time the field is accessed.

Potential solutions include:
- Lazily instantiating the static fields on first access
- Changing the static fields to be instance fields
- Remove the fields entirely and access the configuration objects only when needed

Would you accept a PR to resolve this issue and, if so, which of the above would be your preferred approach?""Hi, the environment initialization is handled by contextInitialized and contextDestroyed methods inside EurekaBootStrap. Are you able to explicitly force these calls at bootstrap initialization time to see if that works for you?
 =||= Hi, nothing has happened at this point other than that the classes have been loaded. So, other than trying to hook a call to contextInitialized in to the static initialization (which seems completely wrong) I'm not sure where I could call this from. The initialization does happen, it's just after the statics have already tried to grab the uninitialized instances so deferring the latter through one of the three options above seems to make more sense.
 =||= Hi, I did a bit of reading on WebSphere class loaders and it looks like by default, it loads the web modules with a child loader of the application class loader.

Can you try to set your WAR class-loader policy control to ""Application"" instead of ""Module"" and see if that helps?
 =||= Hi @qiangdavidliu - This is the WebSphere Liberty Profile, not Full Profile, so that classloader hierarchy does not apply. I should probably declare that I work for the IBM WebSphere development team so I know exactly where the JAX-RS classes are being initialised and I still think the right thing is for Eureka not to rely on the bootstrapping having occurred before then.
 =||= Hi @davidcurrie, thanks for the clarifications. I only did a quick reading about WebSphere so it's good to know the differences between the two profiles.

Back to the problem at hand, are you only seeing this issue with EurekaServerConfigurationManager? If so, the second fix you proposed (instance fields instead of statics) seems the best way forward for this.
 =||= Hi @qiangdavidliu - the problem also applies (indirectly) to PeerAwareInstanceRegistry. Change would look as follows: https://github.com/davidcurrie/eureka/commit/7a3fd8bde67de4bcfdc623415924210279a3c822
 =||= Hi @davidcurrie , sorry I somehow missed your message. Your changes looks good.
 =||= hi @davidcurrie , I have merged in your changes to master. We have a couple of minor fixes that should be checked in this week after which a release should be ready.
 =||= Great - look forward to picking that up.
 =||= Released in version 1.1.142
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
191Channel/transport update - WIP.tbak09/06/14, 12:13:29 AMNaN"[eureka-pull-requests #230](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/230/) SUCCESS
This pull request looks good
 =||= "Channel/transport update - WIP.tbak09/06/14, 12:13:29 AMNaNNaNTomasz Bak09/05/14, 11:01:29 PMChannel/transport update - WIP.1
192Standardize InstanceInfoField namesDavid Liuqiangdavidliu09/07/14, 10:18:43 PMNaN"[eureka-pull-requests #231](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/231/) SUCCESS
This pull request looks good
 =||= "Standardize InstanceInfoField namesDavid Liuqiangdavidliu09/07/14, 10:18:43 PMNaNNaNDavid Liu09/07/14, 10:04:32 PMStandardize InstanceInfoField names1
193Test framework updatesDavid Liuqiangdavidliu09/08/14, 03:06:35 AM"- added interest command to CLI tool
- added testEurekaServer with pre-registered apps
- minor package refactoring""[eureka-pull-requests #232](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/232/) SUCCESS
This pull request looks good
 =||= "Test framework updatesDavid Liuqiangdavidliu09/08/14, 03:06:35 AM"- added interest command to CLI tool
- added testEurekaServer with pre-registered apps
- minor package refactoring"NaNDavid Liu09/08/14, 12:05:04 AM"Test framework updates:
- added interest command to CLI tool
- added testEurekaServer with pre-registered apps
- minor package refactoring"1
1942.x Interest channel upgradetbak09/08/14, 06:50:25 PM- a few EurekaCLI improvements."[eureka-pull-requests #233](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/233/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #234](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/234/) SUCCESS
This pull request looks good
 =||= "2.x Interest channel upgradetbak09/08/14, 06:50:25 PM- a few EurekaCLI improvements.NaNTomasz Bak09/08/14, 04:26:49 AMFix bug in InterestNotificationMultiplexer.1
1952.x Implement AwsDataCenterInfo provider.tbak09/09/14, 08:41:56 PMNaN"[eureka-pull-requests #236](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/236/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #238](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/238/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #239](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/239/) SUCCESS
This pull request looks good
 =||= "2.x Implement AwsDataCenterInfo provider.tbak09/09/14, 08:41:56 PMNaNNaNTomasz Bak09/09/14, 07:50:12 PMDisable failing test that depends on DNS access.1
196Initial client-side interest implDavid Liuqiangdavidliu09/10/14, 05:12:43 PMNaN"[eureka-pull-requests #237](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/237/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #242](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/242/) SUCCESS
This pull request looks good
 =||= "Initial client-side interest implDavid Liuqiangdavidliu09/10/14, 05:12:43 PMNaNNaNDavid Liu09/10/14, 04:40:14 AMRemoving need for lock in EurekaClient1
1972.x composite interest index + ribbon in eureka-clienttbak09/11/14, 10:42:26 PMI still keep InterestNotificationMultiplexer, as it allows us to dynamically adjust notification stream. During interest upgrade, we do not want to resend data of atomic interests that are still part of the upgraded interest set. Swapping composite interest subscriptions would sent everything again."[eureka-pull-requests #240](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/240/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #243](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/243/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #244](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/244/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #245](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/245/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #247](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/247/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #248](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/248/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #249](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/249/) SUCCESS
This pull request looks good
 =||= "2.x composite interest index + ribbon in eureka-clienttbak09/11/14, 10:42:26 PMI still keep InterestNotificationMultiplexer, as it allows us to dynamically adjust notification stream. During interest upgrade, we do not want to resend data of atomic interests that are still part of the upgraded interest set. Swapping composite interest subscriptions would sent everything again.NaNTomasz Bak09/11/14, 10:32:32 PMGet rid of easymock (use mockito instead).1
198Making the constructor that takes backupRegistryProvider as param PublicNaoman Abbasnaoman09/12/14, 12:55:37 AMNaN"[eureka-pull-requests #241](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/241/) FAILURE
Looks like there's a problem with this pull request
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
199Remove MessageBrokerServer and MessageBrokerBuilder abstractionstbak09/12/14, 04:49:34 AMRemove MessageBrokerServer and MessageBrokerBuilder abstractions, which are no longer needed."[eureka-pull-requests #250](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/250/) SUCCESS
This pull request looks good
 =||= "Remove MessageBrokerServer and MessageBrokerBuilder abstractionstbak09/12/14, 04:49:34 AMRemove MessageBrokerServer and MessageBrokerBuilder abstractions, which are no longer needed.NaNTomasz Bak09/12/14, 04:37:21 AM"Remove MessageBrokerServer and MessageBrokerBuilder abstractions, which are
no longer needed."1
200moving EurekaRegistry instantiation outside of EurekaService on the clientDavid Liuqiangdavidliu09/12/14, 08:27:38 PMNaN"[eureka-pull-requests #251](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/251/) SUCCESS
This pull request looks good
 =||= "moving EurekaRegistry instantiation outside of EurekaService on the clientDavid Liuqiangdavidliu09/12/14, 08:27:38 PMNaNNaNDavid Liu09/12/14, 08:12:10 PMmoving EurekaRegistry instantiation outside of EurekaService on the client1
201Reworked client impl of interestDavid Liuqiangdavidliu09/14/14, 07:27:02 PMNaN"[eureka-pull-requests #252](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/252/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #253](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/253/) SUCCESS
This pull request looks good
 =||= "Reworked client impl of interestDavid Liuqiangdavidliu09/14/14, 07:27:02 PMNaNNaNDavid Liu09/14/14, 07:14:45 PMIncrease wait time in test1
2022.x Eureka Read server + embedded clustertbak09/15/14, 04:51:14 AMNaN"[eureka-pull-requests #254](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/254/) SUCCESS
This pull request looks good
 =||= "2.x Eureka Read server + embedded clustertbak09/15/14, 04:51:14 AMNaNNaNTomasz Bak09/15/14, 04:39:33 AMMerge remote-tracking branch 'remotes/netflix/2.x' into tbak/2.x1
203Audit logDavid Liuqiangdavidliu11/24/14, 06:35:06 AM"Eureka 2.0 server should produce an audit log for ""write"" type operations. These would log metadata for InstanceInfo registrations, updates, unregistrations and expiries.

Metadata should include the five Ws:
- who (system, operator, ui)
- what (operation)
- when (timestamp)
- where (source write server)
- why (default categories, operator reasons)"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
204Fix bug in client side interestChannelImpl not propagating deltaDavid Liuqiangdavidliu09/17/14, 01:20:10 AMNaN"[eureka-pull-requests #255](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/255/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #256](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/256/) SUCCESS
This pull request looks good
 =||= "Fix bug in client side interestChannelImpl not propagating deltaDavid Liuqiangdavidliu09/17/14, 01:20:10 AMNaNNaNDavid Liu09/17/14, 01:15:50 AM"- Do not subscribe to client channel stream for all users
- fix test failures (change in behaviour to close(), define behaviour first)"1
205Add runCluster task to gradle.tbak09/17/14, 03:35:12 PMNaN"[eureka-pull-requests #257](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/257/) FAILURE
Looks like there's a problem with this pull request
 =||= "Add runCluster task to gradle.tbak09/17/14, 03:35:12 PMNaNNaNTomasz Bak09/17/14, 04:20:20 AMAdd runCluster task to gradle.1
206Client side refactoringNitesh KantNiteshKant09/18/14, 07:06:33 PM"-- Introducing a EurekaClientRegistry which feeds to all users of the client.
-- Separated eureka-server, eureka-read-server and eureka-write-server""[eureka-pull-requests #258](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/258/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #259](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/259/) SUCCESS
This pull request looks good
 =||= "Client side refactoringNitesh KantNiteshKant09/18/14, 07:06:33 PM"-- Introducing a EurekaClientRegistry which feeds to all users of the client.
-- Separated eureka-server, eureka-read-server and eureka-write-server"NaNNitesh Kant09/18/14, 06:30:37 PMReview comments & test fix1
2072.x audit service + further work on eureka-client API + example apptbak09/22/14, 04:27:29 AMNaN"[eureka-pull-requests #260](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/260/) SUCCESS
This pull request looks good
 =||= "2.x audit service + further work on eureka-client API + example apptbak09/22/14, 04:27:29 AMNaNNaNTomasz Bak09/22/14, 04:14:15 AMFurther work on eureka-client API + example application.1
208The modifications in this commit should be part of the previous onetbak09/22/14, 04:16:42 PM"(42ea54c2d03b81a4c2631bf8bb142aeb428f01dd), but due to my mistake were not
added to the change set.""[eureka-pull-requests #261](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/261/) SUCCESS
This pull request looks good
 =||= "The modifications in this commit should be part of the previous onetbak09/22/14, 04:16:42 PM"(42ea54c2d03b81a4c2631bf8bb142aeb428f01dd), but due to my mistake were not
added to the change set."NaNTomasz Bak09/22/14, 03:52:43 PM"The modifications in this commit should be part of the previous one
(42ea54c2d03b81a4c2631bf8bb142aeb428f01dd), but due to my mistake were not
added to the change set."1
209Upgrade to latest ribbon/rxnetty/karyon versiontbak09/22/14, 05:08:29 PM(2.0-RC9, 0.3.14, 2.1.00-RC5 respectively)."[eureka-pull-requests #262](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/262/) SUCCESS
This pull request looks good
 =||= "Upgrade to latest ribbon/rxnetty/karyon versiontbak09/22/14, 05:08:29 PM(2.0-RC9, 0.3.14, 2.1.00-RC5 respectively).NaNTomasz Bak09/22/14, 04:13:14 PM"Upgrade to latest ribbon/rxnetty/karyon version
(2.0-RC9, 0.3.13, 2.1.00-RC5 respectively)."1
210Replication related API update - WIPtbak09/22/14, 10:23:28 PMNaN"[eureka-pull-requests #263](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/263/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #265](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/265/) SUCCESS
This pull request looks good
 =||= "Replication related API update - WIPtbak09/22/14, 10:23:28 PMNaNNaNTomasz Bak09/22/14, 08:24:13 PMReplication related API update - WIP1
211Refactor of InterestChannel to consolidate apisDavid Liuqiangdavidliu09/22/14, 10:15:12 PMNaN"[eureka-pull-requests #264](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/264/) SUCCESS
This pull request looks good
 =||= "Refactor of InterestChannel to consolidate apisDavid Liuqiangdavidliu09/22/14, 10:15:12 PMNaNNaNDavid Liu09/22/14, 10:07:07 PMRemove dead code1
212Duplicate interest handlingDavid Liuqiangdavidliu09/25/14, 10:15:20 PM"Added server-side versioning and clientInterestChannel checks to deal with duplicates.
Removed lease times from data model as it will be handled by the channel.""[eureka-pull-requests #266](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/266/) SUCCESS
This pull request looks good
 =||= "Duplicate interest handlingDavid Liuqiangdavidliu09/25/14, 10:15:20 PM"Added server-side versioning and clientInterestChannel checks to deal with duplicates.
Removed lease times from data model as it will be handled by the channel."NaNDavid Liu09/25/14, 06:06:49 AM"Added server-side versioning and clientInterestChannel checks to deal with duplicates.
Removed lease times from data model as it will be handled by the channel."1
213Eureka read/write server self registration + eureka client update.tbak09/25/14, 10:32:37 PM"Eureka client can now resolve eureka read cluster using discovery endpoint
on the write cluster.
This commit adds also a startup configuration mechanism for
read/write server runners.""[eureka-pull-requests #267](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/267/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #268](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/268/) SUCCESS
This pull request looks good
 =||= "Eureka read/write server self registration + eureka client update.tbak09/25/14, 10:32:37 PM"Eureka client can now resolve eureka read cluster using discovery endpoint
on the write cluster.
This commit adds also a startup configuration mechanism for
read/write server runners."NaNTomasz Bak09/25/14, 10:23:48 PM"Merge remote-tracking branch 'remotes/netflix/2.x' into tbak/2.x

Conflicts:
	eureka-core/src/main/avro/eureka-registry-model.avdl"1
214Remove statics requiring bootstrapping from JAX-RS resourcesDavid Curriedavidcurrie10/03/14, 06:43:36 PMAs per issue #190, Eureka JAX-RS resources currently assume that bootstrapping via the servlet context listener will have occured before their static initialization is driven."[eureka-pull-requests #269](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/269/) SUCCESS
This pull request looks good
 =||= "Remove statics requiring bootstrapping from JAX-RS resourcesDavid Curriedavidcurrie10/03/14, 06:43:36 PMAs per issue #190, Eureka JAX-RS resources currently assume that bootstrapping via the servlet context listener will have occured before their static initialization is driven.NaNDavid Currie09/08/14, 02:46:18 PMRemove statics requiring bootstrapping from JAX-RS resources1
215Implement replication mechanism.tbak10/01/14, 04:53:24 PMNaN"[eureka-pull-requests #270](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/270/) SUCCESS
This pull request looks good
 =||= "Implement replication mechanism.tbak10/01/14, 04:53:24 PMNaNNaNTomasz Bak10/01/14, 04:33:08 PMImplement replication mechanism.1
2162.x Make configuration archaius friendly.tbak10/03/14, 05:51:47 AMNaN"[eureka-pull-requests #271](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/271/) SUCCESS
This pull request looks good
 =||= "2.x Make configuration archaius friendly.tbak10/03/14, 05:51:47 AMNaNNaNTomasz Bak10/03/14, 03:59:58 AMMake configuration archaius friendly.1
217Add configuration properties for proxy user name / password.tbak10/09/14, 08:35:40 PMNaN"[eureka-pull-requests #272](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/272/) SUCCESS
This pull request looks good
 =||= Did you test this?  I'm pretty sure this alone won't get around the bug in the jersey apache client.  If proxyhost is set, username and password are required.
 =||= You are right. I have checked that, and if user name/password is not set, that does not work.
I will set defaults to guest/guest, so it is more self explanatory.
 =||= [eureka-pull-requests #273](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/273/) SUCCESS
This pull request looks good
 =||= "Add configuration properties for proxy user name / password.tbak10/09/14, 08:35:40 PMNaNNaNTomasz Bak10/04/14, 04:51:49 AMAdd default proxy user name / password as a workaround for apache http client bug.1
218Eureka server keep Applications data with double underscoresSergey Krutskokrutsko12/03/14, 07:32:52 PM"E.g. /eureka/v2/apps endpoint return a wrong data.

```
<applications>
<versions__delta>1</versions__delta>
<apps__hashcode>STARTING_16_UP_142_</apps__hashcode>
```

Eureka uses 
https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/converters/JsonXStream.java#L44
which rely on http://grepcode.com/file/repo1.maven.org/maven2/com.thoughtworks.xstream/xstream/1.4.2/com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.java#108

XmlFriendlyNameCoder by default convert _ to __

Especially affected applications Metadata which can hold a various custom data.
Will be nice to have it flexible. ""Anything new on that guys?
 =||= Would you like to work on this change? By default we should use current encoding mechanism with an option to turn off `_` to `__` conversion.

In Eureka 2.0 we will not be using this format anymore.
 =||= Sure! @krutsko and i, will give it a try.
 =||= i created a PR https://github.com/Netflix/eureka/pull/272 with initial approach, please take a look.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
219Add search to Eureka website table with DataTablesPeter Kelleypgkelley410/13/14, 07:18:29 PM"Are you guys open to accepting website modifications/enhancements? We are using these changes internally and wanted to at least give you the option of pulling it. DataTables is MIT license.

Change website table to use jQuery DataTables. Add a search feature.

Upgrades jQuery to 1.11.1.""[eureka-pull-requests #274](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/274/) SUCCESS
This pull request looks good
 =||= Thanks for the contribution @pgkelley4 , we will take a look at the pull request.
 =||= @pgkelley4 we certainly are open to accepting any enhancement to eureka which adds value :)

The changes look good and will be useful for us internally too. Thanks!
 =||= "Add search to Eureka website table with DataTablesPeter Kelleypgkelley410/13/14, 07:18:29 PM"Are you guys open to accepting website modifications/enhancements? We are using these changes internally and wanted to at least give you the option of pulling it. DataTables is MIT license.

Change website table to use jQuery DataTables. Add a search feature.

Upgrades jQuery to 1.11.1."NaNPeter Kelley10/09/14, 09:42:50 PM"Add search to Eureka website table with DataTables

Change website table to use jQuery DataTables. Add a search
feature.

Upgrades jQuery to 1.11.1."1
220More consistent health check behaviorelandau05/09/16, 10:45:43 PM"HealthCheck status is currently tracked via a mutable master InstanceInfo which can be set manually via ApplicationInfoManager or automatically through HealthCheckHandler.  This design gives rise to several race conditions since there is a circular dependency in setting the status.

This PR changes the behavior of InstanceInfo so that its status is only set via the InstanceInfoReplicator.  The status for ApplicationInfoManager is tracked internally instead of through the master InstanceInfo.  Using this new method the health check is only consulted if ApplicationInfoManager.getInstanceStatus() is UP.  Otherwise the status in ApplicationInfoManager is used. 

There still exists the possibility for instance status info to be 'inconsistent' if client code sets the master InstanceInfo.setStatus() manually.  This is unavoidable given the current design without a more significant refactoring.""[eureka-pull-requests #275](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/275/) SUCCESS
This pull request looks good
 =||= > > > Using this new method the health check is only consulted if ApplicationInfoManager.getInstanceStatus() is UP.

This means a `HealthCheckHandler` can not transition health status from STARTING -> UP?
 =||= [eureka-pull-requests #359](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/359/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #360](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/360/) SUCCESS
This pull request looks good
 =||= closing this for now.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
221Move classes from com.netflix.eureka to com.netflix.rx.eureka package.tbak10/11/14, 03:37:53 AM"Move classes from com.netflix.eureka to com.netflix.rx.eureka package.
Add ""rx-"" prefix to gradle module names.""[eureka-pull-requests #276](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/276/) SUCCESS
This pull request looks good
 =||= "Move classes from com.netflix.eureka to com.netflix.rx.eureka package.tbak10/11/14, 03:37:53 AM"Move classes from com.netflix.eureka to com.netflix.rx.eureka package.
Add ""rx-"" prefix to gradle module names."NaNTomasz Bak10/11/14, 03:16:41 AM"Move classes from com.netflix.eureka to com.netflix.rx.eureka package.
Add ""rx-"" prefix to gradle module names."1
2222.x Move eureka ports to a different range to avoid overlapping with other services.tbak10/14/14, 05:04:22 PMNaN"[eureka-pull-requests #277](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/277/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #279](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/279/) SUCCESS
This pull request looks good
 =||= "2.x Move eureka ports to a different range to avoid overlapping with other services.tbak10/14/14, 05:04:22 PMNaNNaNTomasz Bak10/14/14, 04:30:48 PMUse constants for ports. Fix module boostrapping issue.1
223Adding eureka-compatibility module with BridgeServer that bridges data from v1 to rx/v2.David Liuqiangdavidliu10/14/14, 02:04:19 AMNaN"[eureka-pull-requests #278](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/278/) SUCCESS
This pull request looks good
 =||= "Adding eureka-compatibility module with BridgeServer that bridges data from v1 to rx/v2.David Liuqiangdavidliu10/14/14, 02:04:19 AMNaNNaNDavid Liu10/14/14, 01:08:28 AM"Adding eureka-compatibility module with BridgeServer that
bridges data from v1 to rx/v2."1
224Adding bridge server to embedded eureka cluster in test-utilsDavid Liuqiangdavidliu10/14/14, 10:09:45 PMNaN"[eureka-pull-requests #280](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/280/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #281](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/281/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #282](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/282/) SUCCESS
This pull request looks good
 =||= "Adding bridge server to embedded eureka cluster in test-utilsDavid Liuqiangdavidliu10/14/14, 10:09:45 PMNaNNaNDavid Liu10/14/14, 09:58:15 PMAdding bridge instance shutdown in embedded cluster1
225Changing default port numbers yet againDavid Liuqiangdavidliu10/15/14, 10:54:57 PMAlso giving Bridge Server its own SelfRegistrationService"[eureka-pull-requests #283](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/283/) SUCCESS
This pull request looks good
 =||= "Changing default port numbers yet againDavid Liuqiangdavidliu10/15/14, 10:54:57 PMAlso giving Bridge Server its own SelfRegistrationServiceNaNDavid Liu10/15/14, 10:09:55 PMChanging default port numbers yet again. Also giving Bridge Server it's own SelfRegistrationService1
2262.x Add server side servo metrics.tbak10/17/14, 04:11:22 PMAdd server side servo metrics."[eureka-pull-requests #284](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/284/) SUCCESS
This pull request looks good
 =||= "2.x Add server side servo metrics.tbak10/17/14, 04:11:22 PMAdd server side servo metrics.NaNTomasz Bak10/17/14, 03:58:01 PMMerge remote-tracking branch 'remotes/netflix/2.x' into 2.x1
2272.x Adjust metric names to be more readable in the monitoring system.tbak10/17/14, 11:43:18 PMNaNNaN2.x Adjust metric names to be more readable in the monitoring system.tbak10/17/14, 11:43:18 PMNaNNaNTomasz Bak10/17/14, 10:57:55 PMAdjust metric names to be more readable in the monitoring system.1
228Binding metrics to BridgeServerModuleDavid Liuqiangdavidliu10/18/14, 01:22:00 AMNaN"[eureka-pull-requests #285](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/285/) SUCCESS
This pull request looks good
 =||= "Binding metrics to BridgeServerModuleDavid Liuqiangdavidliu10/18/14, 01:22:00 AMNaNNaNDavid Liu10/18/14, 01:05:38 AMBinding metrics to BridgeServerModule1
2292.x Eureka metrics update.tbak10/22/14, 05:51:15 AMNaN"[eureka-pull-requests #286](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/286/) SUCCESS
This pull request looks good
 =||= "2.x Eureka metrics update.tbak10/22/14, 05:51:15 AMNaNNaNTomasz Bak10/21/14, 09:31:47 PMEureka metrics update.1
230TimedSupervisorTask should be registered with servo.tbak10/31/14, 07:33:10 PMNaN"[eureka-pull-requests #287](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/287/) SUCCESS
This pull request looks good
 =||= "TimedSupervisorTask should be registered with servo.tbak10/31/14, 07:33:10 PMNaNNaNTomasz Bak10/23/14, 12:16:13 AMTimedSupervisorTask should be registered with servo.1
2312.x Add client metrics.tbak10/23/14, 10:05:33 PMNaN"[eureka-pull-requests #288](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/288/) SUCCESS
This pull request looks good
 =||= "2.x Add client metrics.tbak10/23/14, 10:05:33 PMNaNNaNTomasz Bak10/23/14, 09:53:31 PMAdd client metrics.1
2322.x audit service and interest model updatestbak10/24/14, 08:33:02 PMNaN"[eureka-pull-requests #289](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/289/) SUCCESS
This pull request looks good
 =||= "2.x audit service and interest model updatestbak10/24/14, 08:33:02 PMNaNNaNTomasz Bak10/24/14, 08:15:36 PMAdd regexp support to the interests model.1
2332.x Configure metrics for Eureka bridge.tbak10/28/14, 04:46:00 AMNaN"[eureka-pull-requests #290](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/290/) SUCCESS
This pull request looks good
 =||= "2.x Configure metrics for Eureka bridge.tbak10/28/14, 04:46:00 AMNaNNaNTomasz Bak10/28/14, 04:14:46 AMUpdate to the self registration process.1
234Provide support for SystemSocketFactory for https client connectionsKeith Brantonkeithbranton10/31/14, 07:32:52 PM"Use SystemSocketFactory for https client connections if system property com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory is set to
true""[eureka-pull-requests #291](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/291/) FAILURE
Looks like there's a problem with this pull request
 =||= I'm not sure why/how this caused the cloudbees failure report. It's hard to tell if I introduced a regression - I can do a ./gradlew clean build on my fork without any tests breaking. If I did cause this, can you please give me a pointer and I'll fix it.
 =||= After looking at your change, I wonder why is it needed? By default eureka client is using Java system SSL socket factory, which I have just tested and it works. That includes reading the standard SSL system properties (javax.net.ssl.trustStore, javax.net.ssl.trustStorePassword, etc).

Can you tell me what extra functionality apache client SSLSocketFactory.getSystemSocketFactory provides?
 =||= It causes keystore and truststore to be configured for the socket via
system properties like:

-Djavax.net.ssl.keyStoreType=pkcs12
-Djavax.net.ssl.keyStore=src/test/resources/testServer.p12
-Djavax.net.ssl.keyStorePassword=password
-Djavax.net.ssl.trustStoreType=jks
-Djavax.net.ssl.trustStore=src/test/resources/server.jks
-Djavax.net.ssl.trustStorePassword=password

We use certificates to ensure a rogue service cannot impersonate a service,
and in the case of eureka, register itself as a service that it is not.
 =||= I was playing with this a little bit. I can get things working with the default `SSLSocketFactory.getSocketFactory`, but only for my truststore file (no client side authentication). Keystore is properly loaded only when `SSLSocketFactory.getSystemSocketFactory` is used. Lets move on with this change. Can you however refactor this code a little bit, in a way `EurekaJerseyClient.createSSLJerseyClient` factory method is implemented, by adding `EurekaJerseyClient.createSystemSSLJerseyClient` method, which would be conditionally called in `DiscoveryClient` durign jersey client creation. Now we have overlapping SSL setup for remote region connections.
 =||= The Eureka server seems to create three clients; the RemoteRegionRegistry
one at 78-98 which is easy, and one in DiscoveryClient line 295 which is a
bit of a mess because of the proxy support, and it not using a factory
method, and another in PeerEurekaNode line 114 which would be easy. Our
minimalist patch deals with all three in one place and just a few lines of
code.

DIscoveryClient is harder because it creates the connection manager, then
sets up the proxy, then calls the JerseyClient constructor directly. Maybe
this should be refactored into another static factory method first -
EurekaJerseyClient.createProxyJerseyClient? Either that or I could
conditionally generate a different ClientConfig in DiscoveryClient around
line 272, and then let all the proxy stuff go through as normal. I'm not
sure that supporting https and proxy at the same time makes much sense
though - we certainly don't need it, and from the look of this line:

 cc.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI,
""http://"" + proxyHost + "":"" + proxyPort);

it wouldn't work without a little more work anyway.

This is your project, and I'm happy to spend more time getting this to a
point where you are happy with the pull request. I just wanted to check if
you really want this change made in so many places, and your preferred
approach to DiscoveryClient.

Thanks.
 =||= [eureka-pull-requests #292](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/292/) FAILURE
Looks like there's a problem with this pull request
 =||= RemoteRegionRegistry registry has separate SSL configuration, as typically traffic must be encrypted during cross region communication, but can be sent without encryption within a datacenter. We need to keep backwards compatibility here. If we enforce SSL configuration globally, this will obviously change. I will send more comments once I go through the pull requests.
Thanks 
 =||= @keithbranton  
Is this supposed to be working w/ the discovery client or no (per the previous comments)?
 =||= @bitsofinfo It's been a long time and I haven't used this since I contributed it, but looking at the patch I think it should be working with the DiscoveryClient.
 =||= @keithbranton k thanks, yeah it seems to be broken: https://github.com/Netflix/eureka/issues/812
 =||= "Provide support for SystemSocketFactory for https client connectionsKeith Brantonkeithbranton10/31/14, 07:32:52 PM"Use SystemSocketFactory for https client connections if system property com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory is set to
true"NaNKeith Branton10/29/14, 05:16:44 AMAlternate patch for SystemSocketFactory1
235SystemSocket support - alternative approachKeith Brantonkeithbranton10/31/14, 07:32:52 PMAlternative pull request including refactor to DiscoveryClient so that it uses a factory method."[eureka-pull-requests #293](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/293/) SUCCESS
This pull request looks good
 =||= The implementation looks good, and covers all the important cases that I can think of.
@NiteshKant Can you have a look at this pull request?
 =||= [eureka-pull-requests #294](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/294/) FAILURE
Looks like there's a problem with this pull request
 =||= The change looks good to me.
 =||= @keithbranton Thank you for your contribution.
 =||= "SystemSocket support - alternative approachKeith Brantonkeithbranton10/31/14, 07:32:52 PMAlternative pull request including refactor to DiscoveryClient so that it uses a factory method.NaNkeithbranton10/30/14, 05:06:08 PM"Forgot to use ProxyCustomApacheHttpClientConfig to provide the client
configuration in EurekaJerseyClient.createProxyJerseyClient when I
initially refactored this."1
2362.x EurekaClients should return EurekaClient instance, not an observable of ittbak10/30/14, 08:43:10 PMNaN"[eureka-pull-requests #295](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/295/) SUCCESS
This pull request looks good
 =||= "2.x EurekaClients should return EurekaClient instance, not an observable of ittbak10/30/14, 08:43:10 PMNaNNaNTomasz Bak10/28/14, 05:44:02 PMEurekaClients should return EurekaClient instance, not an observable of it.1
2372.x InstanceInfo model update.tbak10/31/14, 03:39:22 PMNaN"[eureka-pull-requests #296](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/296/) SUCCESS
This pull request looks good
 =||= "2.x InstanceInfo model update.tbak10/31/14, 03:39:22 PMNaNNaNTomasz Bak10/29/14, 11:41:21 PMInstanceInfo model update.1
2382.x ServerResolver lazy startuptbak10/31/14, 06:04:38 PMNaN"[eureka-pull-requests #297](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/297/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #298](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/298/) SUCCESS
This pull request looks good
 =||= "2.x ServerResolver lazy startuptbak10/31/14, 06:04:38 PMNaNNaNTomasz Bak10/31/14, 03:50:42 PM"Merge branch '2.x' into features/server_resolver_lazy

Conflicts:
	rx-eureka-client/src/main/java/com/netflix/rx/eureka/client/bootstrap/EurekaServerResolver.java"1
2392.x Update jackson serialization configuration rules.tbak10/31/14, 07:03:31 PMNaNNaN2.x Update jackson serialization configuration rules.tbak10/31/14, 07:03:31 PMNaNNaNTomasz Bak10/31/14, 06:32:44 PMUpdate jackson serialization configuration rules.1
240Fix bug where shuffleVirtualHostNameMap isn't updatedPeter Kelleypgkelley411/06/14, 12:16:08 AM"shuffleVirtualHostNameMap and shuffledSecureVirtualHostNameMap were
not being updated when the last instance was removed from an application.

Added unit test to illustrate the issue and fixed it by clearing the map
on every update, just as virtualHostNameAppMap gets cleared.""[eureka-pull-requests #299](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/299/) SUCCESS
This pull request looks good
 =||= Thank you for spotting this.
 =||= "Fix bug where shuffleVirtualHostNameMap isn't updatedPeter Kelleypgkelley411/06/14, 12:16:08 AM"shuffleVirtualHostNameMap and shuffledSecureVirtualHostNameMap were
not being updated when the last instance was removed from an application.

Added unit test to illustrate the issue and fixed it by clearing the map
on every update, just as virtualHostNameAppMap gets cleared."NaNPeter Kelley11/04/14, 09:36:48 PM"Fix bug where shuffleVirtualHostNameMap isn't updated

shuffleVirtualHostNameMap and shuffledSecureVirtualHostNameMap were
not being updated when the last instance was removed from an application.

Added unit test to illustrate the issue and fixed it by clearing the map
on every update, just as virtualHostNameAppMap gets cleared."1
241Improve rate limiter to throttle only full and delta registry fetches.tbak11/07/14, 12:23:32 AMNaN"[eureka-pull-requests #300](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/300/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #301](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/301/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #302](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/302/) SUCCESS
This pull request looks good
 =||= "Improve rate limiter to throttle only full and delta registry fetches.tbak11/07/14, 12:23:32 AMNaNNaNTomasz Bak11/06/14, 09:26:28 PMAdd /apps/<app_id> to the rate limiter filter.1
242Add exponential backoff to heartbeat/cache refresh tasks.tbak11/07/14, 01:12:28 AMNaN"[eureka-pull-requests #303](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/303/) SUCCESS
This pull request looks good
 =||= "Add exponential backoff to heartbeat/cache refresh tasks.tbak11/07/14, 01:12:28 AMNaNNaNTomasz Bak11/06/14, 11:51:37 PMAdd exponential backoff to heartbeat/cache refresh tasks.1
243Update gradle configuration.tbak11/07/14, 06:50:05 AMNaN"[eureka-pull-requests #304](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/304/) SUCCESS
This pull request looks good
 =||= "Update gradle configuration.tbak11/07/14, 06:50:05 AMNaNNaNTomasz Bak11/07/14, 06:37:51 AMUpdate gradle configuration.1
244Fix rate limiter bug.tbak11/07/14, 10:45:30 PMNaN"[eureka-pull-requests #305](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/305/) SUCCESS
This pull request looks good
 =||= "Fix rate limiter bug.tbak11/07/14, 10:45:30 PMNaNNaNTomasz Bak11/07/14, 10:07:52 PMFix rate limiter bug.1
245New data type for Eureka registryDavid Liuqiangdavidliu11/10/14, 09:28:24 PMAdding new data type for Eureka registry that stores multiple copies of instanceInfo data w.r.t. to different input sources"[eureka-pull-requests #306](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/306/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #307](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/307/) SUCCESS
This pull request looks good
 =||= "New data type for Eureka registryDavid Liuqiangdavidliu11/10/14, 09:28:24 PMAdding new data type for Eureka registry that stores multiple copies of instanceInfo data w.r.t. to different input sourcesNaNDavid Liu11/10/14, 09:23:10 PMMultiSourcedDataHolder interface update1
2462.x Remove duplication in transporttbak11/10/14, 09:59:33 PMNaN"[eureka-pull-requests #308](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/308/) SUCCESS
This pull request looks good
 =||= "2.x Remove duplication in transporttbak11/10/14, 09:59:33 PMNaNNaNTomasz Bak11/10/14, 09:43:45 PM"Merge remote-tracking branch 'remotes/netflix/2.x' into 2.x

Conflicts:
	rx-eureka-client/src/main/java/com/netflix/rx/eureka/client/service/InterestChannelImpl.java
	rx-eureka-server/src/main/java/com/netflix/rx/eureka/server/service/ReplicationChannelImpl.java
	rx-eureka-write-server/src/main/java/com/netflix/rx/eureka/server/replication/ClientReplicationChannel.java"1
247Simplified resolver.Nitesh KantNiteshKant11/12/14, 06:48:12 PM"The current resolver interface has multiple concepts of protocol and ports and provides a stream of changes.
This change, cleans it up by providing a simplistic interface which only provides
host and port and instead of providing a stream of servers, provides a finites list of servers available at that time.

Also cleaned up EurekaClients factory and renamed it to Eureka""[eureka-pull-requests #309](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/309/) SUCCESS
This pull request looks good
 =||= "Simplified resolver.Nitesh KantNiteshKant11/12/14, 06:48:12 PM"The current resolver interface has multiple concepts of protocol and ports and provides a stream of changes.
This change, cleans it up by providing a simplistic interface which only provides
host and port and instead of providing a stream of servers, provides a finites list of servers available at that time.

Also cleaned up EurekaClients factory and renamed it to Eureka"NaNNitesh Kant11/12/14, 07:28:11 AM"Simplified resolver.

The current resolver interface has multiple concepts of protocol and ports and provides a stream of changes.
This change, cleans it up by providing a simplistic interface which only provides
host and port and instead of providing a stream of servers, provides a finites list of servers available at that time.

Also cleaned up EurekaClients factory and renamed it to Eureka"1
2482.x Eviction queue + EurekaRegistry refactoringtbak11/12/14, 10:12:45 PMWIP (unit tests and eviction/self preservation related metrics still missing)."[eureka-pull-requests #310](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/310/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #311](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/311/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #312](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/312/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #313](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/313/) SUCCESS
This pull request looks good
 =||= "2.x Eviction queue + EurekaRegistry refactoringtbak11/12/14, 10:12:45 PMWIP (unit tests and eviction/self preservation related metrics still missing).NaNTomasz Bak11/12/14, 09:05:54 PMRemove deps file added accidently.1
249Renaming artifact and package namesNitesh KantNiteshKant11/13/14, 12:11:52 AMremoved rx from package and artifact names."[eureka-pull-requests #314](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/314/) SUCCESS
This pull request looks good
 =||= "Renaming artifact and package namesNitesh KantNiteshKant11/13/14, 12:11:52 AMremoved rx from package and artifact names.NaNNitesh Kant11/13/14, 12:07:50 AMRenaming package to com.netflix.eureka21
2502.x Fix issue with update notifications in the interest channel.tbak11/13/14, 01:24:01 AMDiff.size == 0 causes NullPointerException."[eureka-pull-requests #315](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/315/) SUCCESS
This pull request looks good
 =||= "2.x Fix issue with update notifications in the interest channel.tbak11/13/14, 01:24:01 AMDiff.size == 0 causes NullPointerException.NaNTomasz Bak11/13/14, 01:11:46 AM"Fix issue with update notifications in the interest channel.
Diff.size == 0 causes NullPointerException."1
251ReplicationService should use port from the resolverDavid Liuqiangdavidliu11/13/14, 08:52:57 AMNaN"[eureka-pull-requests #316](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/316/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #317](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/317/) SUCCESS
This pull request looks good
 =||= "ReplicationService should use port from the resolverDavid Liuqiangdavidliu11/13/14, 08:52:57 AMNaNNaNDavid Liu11/13/14, 08:23:11 AMReplicationService should use port from the resolver1
252Upgrade to latest rxnetty versionNitesh KantNiteshKant11/13/14, 10:46:53 PMAlso removed dependency on ribbon from the client."[eureka-pull-requests #318](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/318/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #319](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/319/) SUCCESS
This pull request looks good
 =||= "Upgrade to latest rxnetty versionNitesh KantNiteshKant11/13/14, 10:46:53 PMAlso removed dependency on ribbon from the client.NaNNitesh Kant11/13/14, 05:55:44 PMUpgrade to latest rxnetty version1
253Add blocking in unit tests for more determinismDavid Liuqiangdavidliu11/13/14, 10:55:42 PMNaN"[eureka-pull-requests #320](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/320/) SUCCESS
This pull request looks good
 =||= "Add blocking in unit tests for more determinismDavid Liuqiangdavidliu11/13/14, 10:55:42 PMNaNNaNNaNNaNNaN1
254Rename eureka-compatibility to eureka-bridgeDavid Liuqiangdavidliu11/13/14, 11:41:29 PMNaN"[eureka-pull-requests #321](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/321/) SUCCESS
This pull request looks good
 =||= "Rename eureka-compatibility to eureka-bridgeDavid Liuqiangdavidliu11/13/14, 11:41:29 PMNaNNaNDavid Liu11/13/14, 11:33:00 PMRename eureka-compatibility to eureka-bridge1
255Reading heartbeat and eviction thresholds from system propsDavid Liuqiangdavidliu11/14/14, 12:28:44 AMNaN"[eureka-pull-requests #322](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/322/) SUCCESS
This pull request looks good
 =||= "Reading heartbeat and eviction thresholds from system propsDavid Liuqiangdavidliu11/14/14, 12:28:44 AMNaNNaNDavid Liu11/14/14, 12:15:10 AMReading heartbeat and eviction thresholds from system props1
256new version commit: '2.0.0-DP2-SNAPSHOT'David Liuqiangdavidliu11/14/14, 04:26:01 AMNaN"[eureka-pull-requests #323](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/323/) SUCCESS
This pull request looks good
 =||= "new version commit: '2.0.0-DP2-SNAPSHOT'David Liuqiangdavidliu11/14/14, 04:26:01 AMNaNNaNDavid Liu11/14/14, 01:38:29 AMnew version commit: '2.0.0-DP2-SNAPSHOT'1
257Simple system property settings for both registration and discovery heartbeats, for client and server.David Liuqiangdavidliu11/14/14, 05:59:21 AM"settings:
eureka2.eviction.timeoutMillis=""xxxx""
eureka2.eviction.allowedPercentage=""<0-100>"" 
eureka2.registration.heartbeat.intervalMillis=""xxxx""
eureka2.discovery.heartbeat.intervalMillis=""xxxx""""[eureka-pull-requests #324](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/324/) SUCCESS
This pull request looks good
 =||= "Simple system property settings for both registration and discovery heartbeats, for client and server.David Liuqiangdavidliu11/14/14, 05:59:21 AM"settings:
eureka2.eviction.timeoutMillis=""xxxx""
eureka2.eviction.allowedPercentage=""<0-100>"" 
eureka2.registration.heartbeat.intervalMillis=""xxxx""
eureka2.discovery.heartbeat.intervalMillis=""xxxx"""NaNDavid Liu11/14/14, 05:50:46 AMlog.info -> log.debug1
2582.x multiple changestbak11/15/14, 07:25:15 PMNaN"[eureka-pull-requests #325](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/325/) SUCCESS
This pull request looks good
 =||= "2.x multiple changestbak11/15/14, 07:25:15 PMNaNNaNTomasz Bak11/14/14, 10:53:11 PMMerge branch '2.x' into workspace1
259Adding metrics for bridge serverDavid Liuqiangdavidliu11/18/14, 12:47:25 AMNaN"[eureka-pull-requests #326](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/326/) SUCCESS
This pull request looks good
 =||= "Adding metrics for bridge serverDavid Liuqiangdavidliu11/18/14, 12:47:25 AMNaNNaNDavid Liu11/18/14, 12:36:45 AMAdding metrics for bridge server1
260Removing race condition in shuffleInstances due to premature .clear() ofDavid Liuqiangdavidliu11/18/14, 06:31:52 PMvirtualHostnameMap (needed by getter APIs)."[eureka-pull-requests #327](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/327/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #328](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/328/) SUCCESS
This pull request looks good
 =||= "Removing race condition in shuffleInstances due to premature .clear() ofDavid Liuqiangdavidliu11/18/14, 06:31:52 PMvirtualHostnameMap (needed by getter APIs).NaNDavid Liu11/18/14, 05:20:54 AM"Removing race condition in shuffleInstances due to premature .clear() of
virtualHostnameMap (needed by getter APIs)."1
2612.x Upgrade to the latest governator/karyon version.tbak11/20/14, 08:39:42 PMNaN"[eureka-pull-requests #329](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/329/) SUCCESS
This pull request looks good
 =||= "2.x Upgrade to the latest governator/karyon version.tbak11/20/14, 08:39:42 PMNaNNaNTomasz Bak11/17/14, 11:59:52 PMUpgrade to latest karyon/nf-karyon version.1
2622.x Servo Dependency - Separate as PluginBen Christensenbenjchristensen01/29/15, 04:57:26 PM"The Servo dependency should be removed from Eureka 2 and replaced instead with an optional Metrics Publisher plugin since many companies don't use Servo and it should not be a requirement or compile time dependency.

Instead a plugin should be usable to use alternatives such as Yammer/Codahale Metrics or Servo via a plugin implementation.

Example plugins:
- https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-servo-metrics-publisher
- https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-yammer-metrics-publisher
- https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-codahale-metrics-publisher""Here is what I'm referencing in 2.x: https://github.com/Netflix/eureka/blob/2.x/eureka-core/build.gradle#L30
 =||= I fully agree, and that is our ultimate goal. In the first iteration, to avoid additional work required to provide proper abstraction for this separation, we decided to use servo directly. The direct usage of servo is limited to a few metrics classes, and should be easy to make pluggable, without affecting the rest of the code base.
 =||= Eureka 2.0 comes now with set of interfaces for metrics integration. 
There are two implementations provided:
- NoOp - void implementation, set by default for eureka-client
- spectator plugin
 =||= +1
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
263Skipping doclint if building with Java 8. It breaks the build due to err...Tomasz Kowalczewskitkowalcz11/21/14, 11:47:08 PM"...ors in eureka javadoc (this strict doclint checking affects whole world really).

I'm a casual gradle user so the solution might not be the best one for this particular project. I just copied (and tested) solution posted on Stephen Colebourne's blog: http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html""[eureka-pull-requests #330](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/330/) SUCCESS
This pull request looks good
 =||= Thanks for the contribution @tkowalcz. The change looks good, though would you be able to move the change from convention.gradle to build.gradle? Thanks.
 =||= Sure I can. Somewhere on line 47?
 =||= Sure, there looks good
 =||= [eureka-pull-requests #331](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/331/) SUCCESS
This pull request looks good
 =||= "Skipping doclint if building with Java 8. It breaks the build due to err...Tomasz Kowalczewskitkowalcz11/21/14, 11:47:08 PM"...ors in eureka javadoc (this strict doclint checking affects whole world really).

I'm a casual gradle user so the solution might not be the best one for this particular project. I just copied (and tested) solution posted on Stephen Colebourne's blog: http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html"NaNTomasz Kowalczewski11/21/14, 11:18:24 PMMoved code that disables doclint from convention.gradle to build.gradle1
2642.x client updatestbak11/25/14, 07:15:45 PMNaN"[eureka-pull-requests #332](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/332/) SUCCESS
This pull request looks good
 =||= "2.x client updatestbak11/25/14, 07:15:45 PMNaNNaNTomasz Bak11/24/14, 06:23:54 PMAdd registration failover/reconnect mechanism.1
265current master does not build eureka-coreDeleted userghost01/29/15, 04:53:46 PM"testGetAppsDeltaFromAllRemoteRegions() fails With:

java.lang.AssertionError: Apps size from remote regions do not match expected: [2] but was:[1]
    at org.junit.Assert.fail(Assert.java:93)""Hi @george-smith , I just tried a build with a fresh clone and the test passes fine. Can you please try again and or post the complete stack trace? Thanks.
 =||= Yup. Here is the test output as well as the standard out. The standard error follows:

java.lang.AssertionError: Apps size from remote regions do not match expected:<2> but was:<1>
    at org.junit.Assert.fail(Assert.java:93)
    at org.junit.Assert.failNotEquals(Assert.java:647)
    at org.junit.Assert.assertEquals(Assert.java:128)
    at org.junit.Assert.assertEquals(Assert.java:472)
    at com.netflix.eureka.InstanceRegistryTest.testGetAppsDeltaFromAllRemoteRegions(InstanceRegistryTest.java:41)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)

Standard out:

Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860360861</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860360861</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860360861</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860360861</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860362703</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860362703</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860362703</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860362703</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363052</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363052</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363052</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363052</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Canceling application: MYLOCAPP from local registry.
Canceling application: MYLOCAPP from local registry.
Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Sleeping for 10 seconds to let the remote registry fetch delta. Attempt: 0
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860363425</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860363425</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Done sleeping for 10 seconds to let the remote registry fetch delta
Canceling application: MYLOCAPP from local registry.
Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860373803</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860373803</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860373803</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860373803</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Canceling application: MYLOCAPP from local registry.
Created eureka server mock with applications map { name : MYAPP , instance count: 1 } and applications delta map { name : MYAPP , instance count: 1 }
Eureka resource mock, received request on path: /eureka/v2/apps/delta. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/delta with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860374169</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860374169</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860374169</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860374169</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Eureka resource mock, received request on path: /eureka/v2/apps/. HTTP method: |GET|
Eureka resource mock, sent response for request path: /eureka/v2/apps/ with content<applications>
  <versions__delta>-1</versions__delta>
  <apps__hashcode>UP_1_</apps__hashcode>
  <application>
    <name>MYAPP</name>
    <instance>
      <hostName>blah</hostName>
      <app>MYAPP</app>
      <ipAddr>10.10.101.1</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">7001</port>
      <securePort enabled=""false"">7002</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <public-ipv4>XXX</public-ipv4>
          <public-hostname>blah</public-hostname>
          <instance-id>blah</instance-id>
          <local-ipv4>XXX</local-ipv4>
          <instance-type>XXX</instance-type>
          <ami-id>XXX</ami-id>
          <availability-zone>us-east-1c</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>0</registrationTimestamp>
        <lastRenewalTimestamp>0</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>0</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1416860374169</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1416860374169</lastDirtyTimestamp>
    </instance>
  </application>
</applications>
Canceling application: MYLOCAPP from local registry.

Standard Error:

148 [Test worker] WARN com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
163 [Test worker] INFO com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
188 [Test worker] INFO com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@48ba29f
300 [Test worker] INFO org.mortbay.log - Logging to org.slf4j.impl.SimpleLogger(org.mortbay.log) via org.mortbay.log.Slf4jLog
315 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
348 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
387 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
495 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
1110 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
1549 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
1610 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
1613 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
1629 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
1630 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
1681 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
1823 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
1826 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
1830 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
1903 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
1990 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
1990 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
1990 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
1990 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
1998 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
1999 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
1999 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
2105 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
2107 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
2108 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2108 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2171 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
2177 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2181 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
2182 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2187 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2187 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
2192 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
2196 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
2263 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
2343 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
2343 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
2343 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
2343 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
2353 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
2353 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
2454 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
2456 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
2456 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2457 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2533 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
2538 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2542 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
2543 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2549 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2549 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
2553 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
2555 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
2631 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
2695 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
2695 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
2695 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
2695 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
2704 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
2704 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
2723 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Registered instance id blahloc with status UP
2724 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Registered instance id blahloc with status UP
2724 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
2825 [Test worker] WARN com.netflix.eureka.InstanceRegistry - DS: Registry: cancel failed because Lease is not registered for: MYLOCAPP:MYLOCAPP
2825 [Test worker] WARN com.netflix.eureka.InstanceRegistry - DS: Registry: cancel failed because Lease is not registered for: MYLOCAPP:MYLOCAPP
2906 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
2908 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
2909 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2909 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2966 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
2970 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2972 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
2973 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2977 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
2977 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
2978 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
2980 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
3035 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
3094 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
3094 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
3094 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
3094 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
3102 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
3102 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
3102 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
3103 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Registered instance id blahloc2 with status UP
6999 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
7353 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
7704 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
8102 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
11999 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
12353 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
12704 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
13102 [Eureka-RemoteRegionCacheRefresher] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : true
13103 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
13204 [Test worker] WARN com.netflix.eureka.InstanceRegistry - DS: Registry: cancel failed because Lease is not registered for: MYLOCAPP:MYLOCAPP
13205 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
13207 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
13209 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13209 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13288 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
13288 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
13288 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
13288 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
13289 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
13289 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
13295 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
13299 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
13300 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
13306 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13307 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
13310 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
13312 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
13402 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
13463 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
13463 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
13463 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
13463 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
13469 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
13469 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
13469 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Registered instance id blahloc with status UP
13469 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: false, Regions argument []
13570 [Test worker] WARN com.netflix.eureka.InstanceRegistry - DS: Registry: cancel failed because Lease is not registered for: MYLOCAPP:MYLOCAPP
13570 [Test worker] INFO org.mortbay.log - jetty-6.1H.22
13572 [Test worker] INFO org.mortbay.log - Started SocketConnector@0.0.0.0:7777
13573 [Test worker] WARN com.netflix.eureka.DefaultEurekaServerConfig - Cannot find the properties specified : eureka-server. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13573 [Test worker] WARN com.netflix.discovery.DefaultEurekaClientConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
13630 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
13635 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
13637 [Test worker] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
13637 [Test worker] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
13640 [Test worker] WARN com.netflix.appinfo.PropertiesInstanceConfig - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
13640 [Test worker] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
13642 [Test worker] WARN com.netflix.eureka.PeerAwareInstanceRegistry - Cannot register the JMX monitor for the InstanceRegistry :
java.lang.IllegalArgumentException: value cannot be empty
    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:119)
    at com.netflix.servo.tag.BasicTag.checkNotEmpty(BasicTag.java:40)
    at com.netflix.servo.tag.BasicTag.<init>(BasicTag.java:34)
    at com.netflix.servo.tag.Tags.newTag(Tags.java:53)
    at com.netflix.servo.monitor.MonitorConfig$Builder.withTag(MonitorConfig.java:57)
    at com.netflix.servo.monitor.Monitors.newObjectConfig(Monitors.java:371)
    at com.netflix.servo.monitor.Monitors.newObjectMonitor(Monitors.java:150)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:207)
    at com.netflix.servo.monitor.Monitors.registerObject(Monitors.java:181)
    at com.netflix.eureka.PeerAwareInstanceRegistry.<init>(PeerAwareInstanceRegistry.java:138)
    at com.netflix.eureka.AbstractTester$2.<init>(AbstractTester.java:86)
    at com.netflix.eureka.AbstractTester.setUp(AbstractTester.java:86)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)
    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)
    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:483)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:355)
    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
13643 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Adding replica node: http://localhost:7777/eureka/v2/
13693 [Test worker] INFO com.netflix.eureka.PeerAwareInstanceRegistry - Updating the replica nodes as they seem to have changed from [] to [http://localhost:7777/eureka/v2/] 
13755 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Disable delta property : false
13756 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Application is null : false
13756 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Registered Applications size is zero : true
13756 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - Getting instance registry info from the eureka server : http://localhost:7777//eureka/v2/ , delta : false
13761 [Test worker] INFO com.netflix.eureka.RemoteRegionRegistry - The response status is 200
13761 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Finished initializing remote region registries. All known remote regions: [us-east-1]
13761 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
13762 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Registered instance id blahloc2 with status UP
13762 [Test worker] INFO com.netflix.eureka.InstanceRegistry - Fetching applications registry with remote regions: true, Regions argument [us-east-1]
13863 [Test worker] WARN com.netflix.eureka.InstanceRegistry - DS: Registry: cancel failed because Lease is not registered for: MYLOCAPP:MYLOCAPP
 =||= Hi, it looks like from the logs you are running the tests in a worker thread? Can you share your test setup (IDE, cmdline etc)? Additionally, can you try to ""./gradlew clean test"" to see if a cmdline test of eureka works for your environment? You can also use ""./gradlew -Dtest.single=InstanceRegistryTest :eureka-core:test"" to execute only the unit test in question on your cmdline. Thanks.
 =||= I'll do that. But, I am familiar with gradle.  I ran /gradlew clean build.
I'll let you know what I come up with.
On Nov 25, 2014 1:46 AM, ""qiangdavidliu"" notifications@github.com wrote:

> Hi, it looks like from the logs you are running the tests in a worker
> thread? Can you share your test setup (IDE, cmdline etc)? Additionally, can
> you try to ""./gradlew clean test"" to see if a cmdline test of eureka works
> for your environment? You can also use ""./gradlew
> -Dtest.single=InstanceRegistryTest :eureka-core:test"" to execute only the
> unit test in question on your cmdline. Thanks.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/265#issuecomment-64321319.
 =||= Im also running in Windoze. I know. I know. :-)
On Nov 25, 2014 1:46 AM, ""qiangdavidliu"" notifications@github.com wrote:

> Hi, it looks like from the logs you are running the tests in a worker
> thread? Can you share your test setup (IDE, cmdline etc)? Additionally, can
> you try to ""./gradlew clean test"" to see if a cmdline test of eureka works
> for your environment? You can also use ""./gradlew
> -Dtest.single=InstanceRegistryTest :eureka-core:test"" to execute only the
> unit test in question on your cmdline. Thanks.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/265#issuecomment-64321319.
 =||= As there was no further followup on this issue, I am closing it.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
266Upgrading to rxjava 1.0.0David Liuqiangdavidliu11/25/14, 07:15:58 PMNaN"[eureka-pull-requests #333](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/333/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #334](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/334/) SUCCESS
This pull request looks good
 =||= "Upgrading to rxjava 1.0.0David Liuqiangdavidliu11/25/14, 07:15:58 PMNaNNaNDavid Liu11/24/14, 10:25:09 PMUpgrading to rxjava 1.0.01
2672.xamit-git11/25/14, 08:30:36 PMEureka 2.0 Dashboard first cut - registry visualization w/ quick instance search"[eureka-pull-requests #335](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/335/) SUCCESS
This pull request looks good
 =||= "2.xamit-git11/25/14, 08:30:36 PMEureka 2.0 Dashboard first cut - registry visualization w/ quick instance searchNaNAmit Joshi11/25/14, 08:05:06 PMlocalhost config1
2682.x multiple updatestbak11/25/14, 10:49:25 PMNaN"[eureka-pull-requests #336](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/336/) SUCCESS
This pull request looks good
 =||= "2.x multiple updatestbak11/25/14, 10:49:25 PMNaNNaNTomasz Bak11/25/14, 10:38:07 PMApply Eureka server abstraction to the dashboard server.1
269Bootstrap config refactorDavid Liuqiangdavidliu11/26/14, 06:38:47 AMNaN"[eureka-pull-requests #337](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/337/) SUCCESS
This pull request looks good
 =||= "Bootstrap config refactorDavid Liuqiangdavidliu11/26/14, 06:38:47 AMNaNNaNDavid Liu11/26/14, 03:04:04 AM"Adding a ""dummy"" replication port to the bridge server config"1
2702.x Patch static content handlertbak11/26/14, 03:24:47 PMNaN"[eureka-pull-requests #338](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/338/) SUCCESS
This pull request looks good
 =||= "2.x Patch static content handlertbak11/26/14, 03:24:47 PMNaNNaNTomasz Bak11/26/14, 03:08:19 PMMerge remote-tracking branch 'remotes/netflix/2.x' into 2.x1
271ClassPathFileRequestHandler does not read resources from jar filestbak02/23/15, 07:41:58 PM"The problem is twofold. First issue is related to resolving resource URI:
- reading class path resource for file stored directly on the file system requires that is has './' prefix (not sure why)
- for a resource from jar file to be found it cannot have any leading characters like '/' or './'

Second issue is with loading the resource. If an URI is a hierarchical path, like in case of resource in jar (for example jar:file:/my.jar!/may_resource), it cannot be handled by the FileRequestHandler, and we need to have proper loaded in ClassPathFileRequestHandler.""This is RxNetty issue, not Eureka's. I am closing it.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
272ISSUE-218 Makes converter replacement char configurable thru config.Sergey Krutskokrutsko12/02/14, 06:31:18 PM"This PR is for issue https://github.com/Netflix/eureka/issues/218
The main idea to make char replacement configarable thru EurekaClientConfig. The default stay as is.""[eureka-pull-requests #339](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/339/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #340](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/340/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #341](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/341/) ABORTED
 =||= [eureka-pull-requests #345](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/345/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #351](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/351/) SUCCESS
This pull request looks good
 =||= Thanks for the contribution @krutsko 
 =||= @qiangdavidliu you're welcome. nice to be a little helpful :)
 =||= "ISSUE-218 Makes converter replacement char configurable thru config.Sergey Krutskokrutsko12/02/14, 06:31:18 PM"This PR is for issue https://github.com/Netflix/eureka/issues/218
The main idea to make char replacement configarable thru EurekaClientConfig. The default stay as is."NaNSergey Krutsko12/02/14, 06:30:29 AMISSUE-218 Remove static Eureka Client instance.1
273Does Eureka care about multi-tenancy? Xianheng Maxianhengma11/28/14, 09:48:41 PM"Hi,

When Eureka Registry returns app instance to a client, does it care about multi-tenancy?  E.g. which app instances can serve which tenants. Just wondering how does the Netflix OSS handle this?

Thanks!""Eureka does not support multi-tenancy concept. It is possible to add arbitrary key/value pairs to the registry entries, so if security is not a concern for you, you can handle the filtering on the client side.
 =||= I see. Thanks for clarifying this!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
274live stream updates paneamit-git11/26/14, 09:09:25 PM"1. live stream update pane to show change notification summary list
2. websocket port endpoint is created to build ws-url from client that removes any hardcoding""[eureka-pull-requests #342](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/342/) SUCCESS
This pull request looks good
 =||= "live stream updates paneamit-git11/26/14, 09:09:25 PM"1. live stream update pane to show change notification summary list
2. websocket port endpoint is created to build ws-url from client that removes any hardcoding"NaNAmit Joshi11/26/14, 09:05:17 PMwebsocket port config endpoint fix1
275layout bug fixamit-git11/27/14, 12:13:34 AMNaN"[eureka-pull-requests #343](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/343/) SUCCESS
This pull request looks good
 =||= "layout bug fixamit-git11/27/14, 12:13:34 AMNaNNaNAmit Joshi11/26/14, 11:33:42 PMlayout bug fix1
276re-subscribe logicamit-git11/28/14, 07:34:52 PM"1. Re-subscribe logic in registry handler that loops subscription logic for 3 times
2. Addresses gson serialization issue by providing a simple typeadapter for handling fields of type 'class' as seen in 'Modify' -type change notification.""[eureka-pull-requests #344](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/344/) SUCCESS
This pull request looks good
 =||= I am going to create a separate PR for re-connect logic, but merging this PR in order to get GSON serialization fix in.
 =||= If the EurekaClient is not obeying correct rx contact w.r.t. retry() we should look into that also.
 =||= "re-subscribe logicamit-git11/28/14, 07:34:52 PM"1. Re-subscribe logic in registry handler that loops subscription logic for 3 times
2. Addresses gson serialization issue by providing a simple typeadapter for handling fields of type 'class' as seen in 'Modify' -type change notification."NaNAmit Joshi11/27/14, 01:11:40 AMcleanup config1
2772.x Support for configuration file includes in Eureka CLI + configuration reload.tbak11/30/14, 08:22:27 PMNaN"[eureka-pull-requests #346](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/346/) SUCCESS
This pull request looks good
 =||= "2.x Support for configuration file includes in Eureka CLI + configuration reload.tbak11/30/14, 08:22:27 PMNaNNaNTomasz Bak11/28/14, 09:09:43 PMSupport for configuration file includes in Eureka CLI + configuration reload.1
278eureka client stream error sent back. Retry in websocket client.amit-git12/01/14, 05:51:01 PM"1. Eureka client error propagated to websocket client
2. websocket client handles 
   a. eureka stream errors
   b. connection drops are handled with new connection retries (max - 3 times) ""[eureka-pull-requests #347](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/347/) SUCCESS
This pull request looks good
 =||= chatted with David about this review, no major concern - merging
 =||= "eureka client stream error sent back. Retry in websocket client.amit-git12/01/14, 05:51:01 PM"1. Eureka client error propagated to websocket client
2. websocket client handles 
   a. eureka stream errors
   b. connection drops are handled with new connection retries (max - 3 times) "NaNAmit Joshi11/30/14, 02:21:43 AMeureka client stream error sent back. Retry in websocket client.1
279Refactored server-side config loading + code cleanupDavid Liuqiangdavidliu11/30/14, 08:29:01 PMNaN"[eureka-pull-requests #348](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/348/) SUCCESS
This pull request looks good
 =||= "Refactored server-side config loading + code cleanupDavid Liuqiangdavidliu11/30/14, 08:29:01 PMNaNNaNDavid Liu11/30/14, 07:41:14 AMRefactored server-side config loading + code cleanup1
280Config refactor fixesDavid Liuqiangdavidliu12/01/14, 09:50:33 PMNaN"[eureka-pull-requests #349](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/349/) SUCCESS
This pull request looks good
 =||= "Config refactor fixesDavid Liuqiangdavidliu12/01/14, 09:50:33 PMNaNNaNDavid Liu12/01/14, 09:39:16 PMConfig refactor fixes1
281Bridge channel fix to reduce statefullness of currentSnapshotDavid Liuqiangdavidliu12/02/14, 03:41:47 AMNaN"[eureka-pull-requests #350](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/350/) SUCCESS
This pull request looks good
 =||= "Bridge channel fix to reduce statefullness of currentSnapshotDavid Liuqiangdavidliu12/02/14, 03:41:47 AMNaNNaNDavid Liu12/02/14, 03:27:14 AMFix a terrible typo that causes discovery port to be used instead of replication1
282One implementation of removing the multisource data holder on removal of last copyDavid Liuqiangdavidliu12/03/14, 07:15:54 PMNaN"[eureka-pull-requests #352](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/352/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #353](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/353/) SUCCESS
This pull request looks good
 =||= "One implementation of removing the multisource data holder on removal of last copyDavid Liuqiangdavidliu12/03/14, 07:15:54 PMNaNNaNDavid Liu12/03/14, 08:16:13 AMMoving delegated update to execute inline instead of reenqueue as task in NotifyingInstanceInfoHolder1
2832.x Move archaius initialization to overridable methodtbak12/03/14, 04:58:48 PMNaN"[eureka-pull-requests #354](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/354/) SUCCESS
This pull request looks good
 =||= "2.x Move archaius initialization to overridable methodtbak12/03/14, 04:58:48 PMNaNNaNTomasz Bak12/03/14, 04:46:14 PMMerge remote-tracking branch 'remotes/netflix/2.x' into 2.x1
284fix: Binding base class to config instance in DashboardModuleDavid Liuqiangdavidliu12/03/14, 10:30:48 PMNaN"[eureka-pull-requests #355](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/355/) SUCCESS
This pull request looks good
 =||= "fix: Binding base class to config instance in DashboardModuleDavid Liuqiangdavidliu12/03/14, 10:30:48 PMNaNNaNDavid Liu12/03/14, 10:21:38 PMfix: Binding base class to config instance in DashboardModule1
285registry cache for dashboard streamamit-git12/04/14, 05:15:01 PM"1. Registry cache that streams a light version of instanceInfo to dashboard client
2. Uses retry() on eureka client stream to handle disconnection / onError callbacks

The result is after initial cache warm up, behaviorSubject streams cached objects as the cache gets refreshed every minute improving initial load time for the bubble chart drastically.""[eureka-pull-requests #356](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/356/) SUCCESS
This pull request looks good
 =||= "registry cache for dashboard streamamit-git12/04/14, 05:15:01 PM"1. Registry cache that streams a light version of instanceInfo to dashboard client
2. Uses retry() on eureka client stream to handle disconnection / onError callbacks

The result is after initial cache warm up, behaviorSubject streams cached objects as the cache gets refreshed every minute improving initial load time for the bubble chart drastically."NaNAmit Joshi12/04/14, 03:40:01 PMtests added for registry cache1
2862.x Use governator include, not install to make bindings visible across modulestbak12/05/14, 12:51:31 AMNaN"[eureka-pull-requests #357](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/357/) SUCCESS
This pull request looks good
 =||= "2.x Use governator include, not install to make bindings visible across modulestbak12/05/14, 12:51:31 AMNaNNaNTomasz Bak12/05/14, 12:36:10 AMUse governator include, not install to make bindings visible across modules.1
287Adding metrics to TaskInvoker in serverRegistryDavid Liuqiangdavidliu12/05/14, 02:17:16 AMNaN"[eureka-pull-requests #358](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/358/) SUCCESS
This pull request looks good
 =||= "Adding metrics to TaskInvoker in serverRegistryDavid Liuqiangdavidliu12/05/14, 02:17:16 AMNaNNaNDavid Liu12/05/14, 02:07:41 AMBetter dummy for the metric1
2881.x Change ribbon version to 2.0-RC9.tbak12/05/14, 07:01:16 PMNaN"[eureka-pull-requests #361](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/361/) SUCCESS
This pull request looks good
 =||= "1.x Change ribbon version to 2.0-RC9.tbak12/05/14, 07:01:16 PMNaNNaNTomasz Bak12/05/14, 05:11:44 PMChange ribbon version to 2.0-RC9.1
2892.x Fix resource leak in client registration path.tbak12/05/14, 11:50:06 PMNaN"[eureka-pull-requests #362](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/362/) SUCCESS
This pull request looks good
 =||= "2.x Fix resource leak in client registration path.tbak12/05/14, 11:50:06 PMNaNNaNTomasz Bak12/05/14, 11:37:37 PMFix resource leak in client registration path.1
290Recording accountId and vpcId from Amazon metadata (if available) for registrationDavid Liuqiangdavidliu12/08/14, 08:22:33 PMNaN"[eureka-pull-requests #363](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/363/) SUCCESS
This pull request looks good
 =||= "Recording accountId and vpcId from Amazon metadata (if available) for registrationDavid Liuqiangdavidliu12/08/14, 08:22:33 PMNaNNaNDavid Liu12/06/14, 01:49:31 AMRecording accountId and vpcId from Amazon metadata (if available) for registration1
2912.x Reorganize classes in packages/projects.tbak12/08/14, 06:04:44 AMNaN"[eureka-pull-requests #364](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/364/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #365](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/365/) SUCCESS
This pull request looks good
 =||= "2.x Reorganize classes in packages/projects.tbak12/08/14, 06:04:44 AMNaNNaNTomasz Bak12/08/14, 05:50:49 AMReorganize classes in packages/projects - cont.1
292eureka clusters viewamit-git12/08/14, 07:53:31 PMread and write cluster visualization in the form of a donut chart with an interactive details view"[eureka-pull-requests #366](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/366/) SUCCESS
This pull request looks good
 =||= "eureka clusters viewamit-git12/08/14, 07:53:31 PMread and write cluster visualization in the form of a donut chart with an interactive details viewNaNAmit Joshi12/06/14, 01:46:56 AMeureka clusters view first cut1
2932.x Allow for null values in delta updates.tbak12/08/14, 06:15:26 PMNaN"[eureka-pull-requests #367](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/367/) SUCCESS
This pull request looks good
 =||= "2.x Allow for null values in delta updates.tbak12/08/14, 06:15:26 PMNaNNaNTomasz Bak12/08/14, 06:02:58 PMAllow for null values in delta updates.1
2942.x Upgrade to governator 1.3.3.tbak12/09/14, 05:22:36 AMNaN"[eureka-pull-requests #368](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/368/) SUCCESS
This pull request looks good
 =||= "2.x Upgrade to governator 1.3.3.tbak12/09/14, 05:22:36 AMNaNNaNTomasz Bak12/08/14, 07:54:17 PMUpgrade to governator 1.3.3.1
295Server side registry changeNotifications require a Source identificationDavid Liuqiangdavidliu12/10/14, 11:05:29 PMNaN"[eureka-pull-requests #369](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/369/) SUCCESS
This pull request looks good
 =||= "Server side registry changeNotifications require a Source identificationDavid Liuqiangdavidliu12/10/14, 11:05:29 PMNaNNaNDavid Liu12/10/14, 10:06:17 PM"Server side registry changeNotifications require a Source identification for
replication interest stream."1
296Fix up server configsDavid Liuqiangdavidliu12/11/14, 12:00:18 AMNaN"[eureka-pull-requests #370](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/370/) SUCCESS
This pull request looks good
 =||= "Fix up server configsDavid Liuqiangdavidliu12/11/14, 12:00:18 AMNaNNaNDavid Liu12/10/14, 11:48:58 PMFix up server configs1
297Documentation out of date regarding privacy of ELBsBeth Skurriebethesque12/18/14, 07:34:35 PM"https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance#how-different-is-eureka-from-aws-elb

> While you can theoretically put your mid-tier services behind the AWS ELB, **you expose them to the outside world** and there by losing all the usefulness of the AWS security groups.

ELBs may be created in private VPCs and use security groups (since 2012).

http://aws.amazon.com/about-aws/whats-new/2012/06/10/announcing-internal-load-balancing-in-amazon-virtual-private-cloud/
http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-elb-security-groups.html""Thanks @bethesque. Have updated the relevant line in the documentation to reflect this is for EC2 classic.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
298dashboard update, remove state bug fixesamit-git12/11/14, 06:27:45 AM"Bug fixes
1. Remove instanceInfo log line fixed
2. Auto complete entry removed if no instances found for an app
3. Status update picked up for Modify log line""[eureka-pull-requests #371](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/371/) SUCCESS
This pull request looks good
 =||= "dashboard update, remove state bug fixesamit-git12/11/14, 06:27:45 AM"Bug fixes
1. Remove instanceInfo log line fixed
2. Auto complete entry removed if no instances found for an app
3. Status update picked up for Modify log line"NaNAmit Joshi12/11/14, 04:57:12 AMdashboard update, remove state bug fixes1
2992.x replication refactoringtbak12/11/14, 06:27:54 AMNaN"[eureka-pull-requests #372](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/372/) SUCCESS
This pull request looks good
 =||= "2.x replication refactoringtbak12/11/14, 06:27:54 AMNaNNaNTomasz Bak12/11/14, 05:59:26 AM"Merge + bug fix in replication channel.

Conflicts:
	eureka-test-utils/src/main/java/com/netflix/eureka2/server/EmbeddedEurekaCluster.java
	eureka-test-utils/src/main/java/com/netflix/eureka2/server/ServerInstance.java"1
300Adding integration (test) moduleDavid Liuqiangdavidliu12/11/14, 07:33:20 AM"- Adding integration (test) module.
- Re-enabling tests in RegistryIndexTest
- fix NPE in ReplicationPeerAddressesProvider""[eureka-pull-requests #373](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/373/) SUCCESS
This pull request looks good
 =||= "Adding integration (test) moduleDavid Liuqiangdavidliu12/11/14, 07:33:20 AM"- Adding integration (test) module.
- Re-enabling tests in RegistryIndexTest
- fix NPE in ReplicationPeerAddressesProvider"NaNDavid Liu12/11/14, 07:18:47 AM"- Adding integration (test) module.
- Re-enabling tests in RegistryIndexTest
- fix NPE in ReplicationPeerAddressesProvider"1
3012.x Move eureka-integration sources to src/main folder.tbak12/11/14, 05:24:04 PMNaN"[eureka-pull-requests #374](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/374/) SUCCESS
This pull request looks good
 =||= "2.x Move eureka-integration sources to src/main folder.tbak12/11/14, 05:24:04 PMNaNNaNTomasz Bak12/11/14, 05:13:10 PMMove eureka-integration sources to src/main folder.1
3022.x updatetbak12/13/14, 12:16:52 AMNaN"[eureka-pull-requests #375](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/375/) SUCCESS
This pull request looks good
 =||= "2.x updatetbak12/13/14, 12:16:52 AMNaNNaNNaNNaNNaN1
3032.x Extract eureka-testkit module out of eureka-test-utils.tbak12/13/14, 01:33:28 AMNaN"[eureka-pull-requests #376](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/376/) SUCCESS
This pull request looks good
 =||= "2.x Extract eureka-testkit module out of eureka-test-utils.tbak12/13/14, 01:33:28 AMNaNNaNTomasz Bak12/13/14, 01:05:16 AMExtract eureka-testkit module out of eureka-test-utils.1
304Simpifying EurekaClient creationDavid Liuqiangdavidliu12/14/14, 01:43:57 AM"- client automatically detects read server configuration from the read server vip.
- upgrade to ocelli-0.0.6""[eureka-pull-requests #377](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/377/) SUCCESS
This pull request looks good
 =||= "Simpifying EurekaClient creationDavid Liuqiangdavidliu12/14/14, 01:43:57 AM"- client automatically detects read server configuration from the read server vip.
- upgrade to ocelli-0.0.6"NaNDavid Liu12/14/14, 01:09:47 AM"- Simpifying EurekaClient creation where given write server configuration the
client automatically detects read server configuration from the read server vip.
- upgrade to ocelli-0.0.6"1
305ReplicationSender retry fixDavid Liuqiangdavidliu12/14/14, 10:25:48 AM"- replication reconnect delay to config
- @Singleton for SelfRegistrationServices
- Adding auditServer id to audit logs.""[eureka-pull-requests #378](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/378/) SUCCESS
This pull request looks good
 =||= "ReplicationSender retry fixDavid Liuqiangdavidliu12/14/14, 10:25:48 AM"- replication reconnect delay to config
- @Singleton for SelfRegistrationServices
- Adding auditServer id to audit logs."NaNDavid Liu12/14/14, 10:05:33 AM"- ReplicationSender retry fix
- replication reconnect delay to config
- @Singleton for SelfRegistrationServices
- Adding auditServer id to audit logs."1
306Adding connection self termination for all BaseMessageConnectionsDavid Liuqiangdavidliu12/16/14, 12:28:08 AMNaN"[eureka-pull-requests #379](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/379/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #380](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/380/) SUCCESS
This pull request looks good
 =||= "Adding connection self termination for all BaseMessageConnectionsDavid Liuqiangdavidliu12/16/14, 12:28:08 AMNaNNaNDavid Liu12/15/14, 11:24:40 PMRefactoring self closing baseMessageConnection to be a decorator instead.1
3072.x Refactor embedded cluster.tbak12/16/14, 07:46:20 AMNaN"[eureka-pull-requests #381](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/381/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #382](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/382/) SUCCESS
This pull request looks good
 =||= "2.x Refactor embedded cluster.tbak12/16/14, 07:46:20 AMNaNNaNTomasz Bak12/16/14, 07:23:21 AMEmbedded cluster + junit ExternalResource update.1
308Channel refactorDavid Liuqiangdavidliu12/18/14, 06:46:26 PMNaN"[eureka-pull-requests #383](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/383/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #385](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/385/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #388](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/388/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #389](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/389/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #390](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/390/) SUCCESS
This pull request looks good
 =||= "Channel refactorDavid Liuqiangdavidliu12/18/14, 06:46:26 PMNaNNaNDavid Liu12/18/14, 06:34:47 PMHandle retry for registrationChannel when already unregistered1
3092.x Embedded cluster/integration tests update.tbak12/17/14, 01:02:53 AMNaN"[eureka-pull-requests #384](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/384/) SUCCESS
This pull request looks good
 =||= "2.x Embedded cluster/integration tests update.tbak12/17/14, 01:02:53 AMNaNNaNTomasz Bak12/17/14, 12:47:40 AMEmbedded cluster/integration tests update.1
3102.x Remove eureka-ocelli module (will stay in ocelli project).tbak12/17/14, 06:25:37 PMNaN"[eureka-pull-requests #386](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/386/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #387](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/387/) SUCCESS
This pull request looks good
 =||= "2.x Remove eureka-ocelli module (will stay in ocelli project).tbak12/17/14, 06:25:37 PMNaNNaNTomasz Bak12/17/14, 06:07:11 PMUnit test update.1
311eureka2 tab in admin consoleamit-git12/19/14, 06:02:45 PM"1. eureka-karyon-admin module added under eureka-contrib which provides eureka2 admin console page
2. DataTable backed by server side pagination, sort and filtering for better page load performance (compared to fully client-side implementation)
3. It builds Eureka client provider implementation based on dynamic configuration for use with any karyon apps (which include karyon-admin module)""[eureka-pull-requests #391](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/391/) SUCCESS
This pull request looks good
 =||= "eureka2 tab in admin consoleamit-git12/19/14, 06:02:45 PM"1. eureka-karyon-admin module added under eureka-contrib which provides eureka2 admin console page
2. DataTable backed by server side pagination, sort and filtering for better page load performance (compared to fully client-side implementation)
3. It builds Eureka client provider implementation based on dynamic configuration for use with any karyon apps (which include karyon-admin module)"NaNAmit Joshi12/19/14, 05:09:27 AMadmin console page for eureka2 client1
3122.x Integrate eureka 2 UI tab into embedded cluster.tbak12/19/14, 10:51:23 PMNaN"[eureka-pull-requests #392](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/392/) SUCCESS
This pull request looks good
 =||= "2.x Integrate eureka 2 UI tab into embedded cluster.tbak12/19/14, 10:51:23 PMNaNNaNTomasz Bak12/19/14, 09:52:56 PMIntegrate eureka 2 UI tab into embedded cluster.1
313Registry refactorDavid Liuqiangdavidliu12/31/14, 05:29:10 PM"```
- Moving InstanceInfo related classes to a new package (to help with moving registries into core)
- Moving Sourced Registry and Preservable Registry to eureka-core
- Using a persistent preservable registry in eureka-client. During interest channel
  failover, the registry content is sent to the eviction queue.
- Fixed a bug with the EvictionSubscriber that drops one item when going into self preservation
- Cleaned up close() and shutdown() behaviours for a bunch of classes
- Test updates and fixes
- Fix integTest shutdown
```""[eureka-pull-requests #393](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/393/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #394](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/394/) SUCCESS
This pull request looks good
 =||= This is a pretty big change, and we should think it through carefully. The first two commits (Moving InstanceInfo related classes to a new package + Fix integTest shutdown), after minor correction could be merged immediately.

Regarding ""Refactoring Sourced EurekaRegistry into eureka-core"" commit, I would do a step back, and think about reusing eviction concept on the client side without changing existing class hierarchy. Reusing the same registry implementation on both ends makes its implementation even more complex, and in the future, the complexity will only increase. We can/should still reuse the building blocks.
 =||= I actually have the opposite opinion here, and would say that reuse of existing classes simplifies out code and design instead of adding more complexity, if the usecase is valid and we are not trying to shoehorn an implementation into a different purpose. Let's take a step back and look at the channel-registry problem for both replication and interest.

For replication, we have a channel writing data into a registry. The registry is persistent regardless of the channel lifecycle, and during channel changeover, we evict the data authored by the old channel until a new, replacement channel is recreated and reconnected up to some level of the old state (our 80% rule). While this rule is not met, self preservation is in effect.

For interest, we also have a channel writing data into a registry. The registry is persistent regardless of the channel lifecycle, and during channel changeover, we evict the data authored by the old channel until a new, replacement channel is recreated and reconnected up to some level of the old state. While this rule is not met, self preservation is in effect.

The two cases are identical, and the reuse of our current SourcedRegistry + PreservableRegistry implementations, if it fits one, it would also fit the other perfectly.
 =||= My point was that we can reuse most of the code, while keeping separation between client/server abstractions. Data source concept belongs to write server only. Client side registry is very thin, and we do not need the complexity coming with it.

> Let's take a step back and look at the channel-registry problem for both replication and interest.

We cannot reuse interest channel for replication, as we have additional handshake mechanism. But we can reuse the building blocks, which are eviction queue, PreservableRegistry  decorator, etc.
One problem with our channel abstraction is that we have a lot of code duplicated. If we would push it down to some common abstraction, it would be great.
 =||= [eureka-pull-requests #396](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/396/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #397](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/397/) ABORTED
 =||= [eureka-pull-requests #398](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/398/) SUCCESS
This pull request looks good
 =||= "Registry refactorDavid Liuqiangdavidliu12/31/14, 05:29:10 PM"```
- Moving InstanceInfo related classes to a new package (to help with moving registries into core)
- Moving Sourced Registry and Preservable Registry to eureka-core
- Using a persistent preservable registry in eureka-client. During interest channel
  failover, the registry content is sent to the eviction queue.
- Fixed a bug with the EvictionSubscriber that drops one item when going into self preservation
- Cleaned up close() and shutdown() behaviours for a bunch of classes
- Test updates and fixes
- Fix integTest shutdown
```"NaNDavid Liu12/31/14, 12:44:58 AMRename package name to better reflect it's nature1
3142.x refactoringDavid Liuqiangdavidliu12/30/14, 07:52:47 PMNaN"[eureka-pull-requests #395](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/395/) SUCCESS
This pull request looks good
 =||= "2.x refactoringDavid Liuqiangdavidliu12/30/14, 07:52:47 PMNaNNaNDavid Liu12/25/14, 11:25:39 PMFix integTest shutdown1
3152.x multiple updatestbak12/31/14, 05:55:44 PMNaN"[eureka-pull-requests #399](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/399/) SUCCESS
This pull request looks good
 =||= "2.x multiple updatestbak12/31/14, 05:55:44 PMNaNNaNTomasz Bak12/31/14, 05:49:50 PM"Merge remote-tracking branch 'remotes/netflix/2.x' into 2.x

Conflicts:
	eureka-integration/src/main/java/com/netflix/eureka2/integration/WriteClusterIntegrationTest.java"1
3162.x Add Eureka 2 images for Wiki documentation.tbak12/31/14, 06:14:00 PMNaN"[eureka-pull-requests #400](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/400/) SUCCESS
This pull request looks good
 =||= "2.x Add Eureka 2 images for Wiki documentation.tbak12/31/14, 06:14:00 PMNaNNaNTomasz Bak12/31/14, 06:09:56 PMAdd Eureka 2 images for Wiki documentation.1
317Code clean upDavid Liuqiangdavidliu12/31/14, 06:59:32 PMNaN"[eureka-pull-requests #401](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/401/) SUCCESS
This pull request looks good
 =||= "Code clean upDavid Liuqiangdavidliu12/31/14, 06:59:32 PMNaNNaNDavid Liu12/31/14, 06:42:08 PMCode clean up1
3182.x Put back shutdown module.tbak12/31/14, 10:11:34 PMNaN"[eureka-pull-requests #402](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/402/) SUCCESS
This pull request looks good
 =||= "2.x Put back shutdown module.tbak12/31/14, 10:11:34 PMNaNNaNTomasz Bak12/31/14, 09:58:29 PMPut back shutdown module.1
3192.x Fix Eureka shutdown process.tbak01/02/15, 07:19:37 PMNaN"[eureka-pull-requests #403](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/403/) SUCCESS
This pull request looks good
 =||= "2.x Fix Eureka shutdown process.tbak01/02/15, 07:19:37 PMNaNNaNTomasz Bak01/02/15, 06:49:30 PMFix Eureka shutdown process.1
3202.x Replacing SelfRegistrationService impls with new HealthServiceDavid Liuqiangdavidliu01/06/15, 08:44:17 PMNaN"[eureka-pull-requests #404](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/404/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #406](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/406/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #407](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/407/) SUCCESS
This pull request looks good
 =||= The healthCheck is now a component resolver
 =||= "2.x Replacing SelfRegistrationService impls with new HealthServiceDavid Liuqiangdavidliu01/06/15, 08:44:17 PMNaNNaNDavid Liu01/06/15, 08:21:55 AM"Reworked selfInfoResolver and selfRegistrationService to be composible from
different streams of updates."1
321java.lang.String cannot be cast to org.gradle.api.artifacts.Configurationpeter zhangddatsh02/10/15, 02:35:37 AM"---
## Gradle 2.2.1

Build time:   2014-11-24 09:45:35 UTC
Build number: none
Revision:     6fcb59c06f43a4e6b1bcb401f7686a8601a1fb4a

Groovy:       2.3.6
Ant:          Apache Ant(TM) version 1.9.3 compiled on December 23 2013
JVM:          1.8.0_25 (Oracle Corporation 25.25-b02)
OS:           Windows 7 6.1 amd64
# 

when run gradle,then 

FAILURE: Build failed with an exception.
- Where:
  Script 'E:\git\eureka\gradle\convention.gradle' line: 24
- What went wrong:
  A problem occurred evaluating script.
  
  > java.lang.String cannot be cast to org.gradle.api.artifacts.Configuration
- Try:
  Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED""Eureka was built previously with gradle 1.x. It has just been upgraded to gradle 2.x with a new nebula plugin. All scripts in gradle folder have been removed.
Please, try it again. Do not run your system installed gradle, but call ./gradlew which will execute configured gradle wrapper for Eureka.
 =||= @ddatsh Have you tried to build Eureka using the provided wrapper? If there were no other problems with that I would like to close this issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3222.x Add support for DataCenterInfo delta serialization.tbak01/04/15, 06:21:16 AMNaN"[eureka-pull-requests #405](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/405/) SUCCESS
This pull request looks good
 =||= "2.x Add support for DataCenterInfo delta serialization.tbak01/04/15, 06:21:16 AMNaNNaNTomasz Bak01/04/15, 05:54:44 AMAdd support for DataCenterInfo delta serialization.1
3232.x Extend interest subscription protocol to support snapshot subscriptions.tbak01/07/15, 07:59:44 PMNaN"[eureka-pull-requests #408](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/408/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #410](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/410/) SUCCESS
This pull request looks good
 =||= "2.x Extend interest subscription protocol to support snapshot subscriptions.tbak01/07/15, 07:59:44 PMNaNNaNTomasz Bak01/07/15, 07:41:58 PMUpdates to the previous commit according to the review comments.1
324Merging Register and Update operations into oneDavid Liuqiangdavidliu01/07/15, 09:05:48 PM"Merging Register and Update operations into one for registry, registrationChannel and replicationChannel. Calling this new operation Register for now.

Also removed 3 unused test-utils classes.""[eureka-pull-requests #409](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/409/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #411](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/411/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #412](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/412/) SUCCESS
This pull request looks good
 =||= "Merging Register and Update operations into oneDavid Liuqiangdavidliu01/07/15, 09:05:48 PM"Merging Register and Update operations into one for registry, registrationChannel and replicationChannel. Calling this new operation Register for now.

Also removed 3 unused test-utils classes."NaNDavid Liu01/07/15, 08:07:58 PMMinor updates per comments1
325Build changes to new nebula.netflixossRob Spieldennerrspieldenner01/09/15, 12:31:12 AMChanges for the master branch. 2.x coming shortly."[eureka-pull-requests #413](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/413/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #416](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/416/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #417](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/417/) SUCCESS
This pull request looks good
 =||= "Build changes to new nebula.netflixossRob Spieldennerrspieldenner01/09/15, 12:31:12 AMChanges for the master branch. 2.x coming shortly.NaNRob Spieldenner01/08/15, 11:20:44 PMNeeds a CHANGELOG.md for ease of bintray project creation1
326Build changes to gradle 2.2.1 and new netflixoss pluginRob Spieldennerrspieldenner01/08/15, 09:20:22 PMNaN"This will create jdk7 bytecode. We can add a sourceCompatibility line if you prefer jdk6.

I removed the ide lines because the nebula.netflixoss plugin auto applies those.
 =||= [eureka-pull-requests #414](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/414/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #415](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/415/) SUCCESS
This pull request looks good
 =||= "Build changes to gradle 2.2.1 and new netflixoss pluginRob Spieldennerrspieldenner01/08/15, 09:20:22 PMNaNNaNRob Spieldenner01/08/15, 08:18:07 PMBuild changes to gradle 2.2.1 and new netflixoss plugin1
327Needs a CHANGELOG.md for ease of bintray project creationRob Spieldennerrspieldenner01/08/15, 11:35:24 PMNaN"[eureka-pull-requests #418](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/418/) SUCCESS
This pull request looks good
 =||= "Needs a CHANGELOG.md for ease of bintray project creationRob Spieldennerrspieldenner01/08/15, 11:35:24 PMNaNNaNRob Spieldenner01/08/15, 11:24:18 PMNeeds a CHANGELOG.md for ease of bintray project creation1
3282.x multiple updatestbak01/09/15, 04:54:42 PMNaNNaN2.x multiple updatestbak01/09/15, 04:54:42 PMNaNNaNTomasz Bak01/08/15, 11:36:09 PMMerge remote-tracking branch 'netflix/2.x' into 2.x1
3291.x Enforce patch scope by default.tbak01/09/15, 04:54:21 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #1](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/1/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #419](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/419/) SUCCESS
This pull request looks good
 =||= "1.x Enforce patch scope by default.tbak01/09/15, 04:54:21 PMNaNNaNTomasz Bak01/09/15, 01:54:50 AMEnforce patch scope by default.1
3302.x merge register updateDavid Liuqiangdavidliu01/12/15, 06:18:56 PM"Mainly fixes in AbstractClientHandler and BaseMessageConnection to ensure proper ordering of events.
Refactered server side registrationChannel with more clear state handling.
Basic new version of versioning for registration that can handle async inbound requests and registry updates. This should go away once we implement the proper multi-local-source version.""[eureka-pull-requests #420](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/420/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #2](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/2/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #421](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/421/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #3](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/3/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #422](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/422/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #4](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/4/) SUCCESS
This pull request looks good
 =||= "2.x merge register updateDavid Liuqiangdavidliu01/12/15, 06:18:56 PM"Mainly fixes in AbstractClientHandler and BaseMessageConnection to ensure proper ordering of events.
Refactered server side registrationChannel with more clear state handling.
Basic new version of versioning for registration that can handle async inbound requests and registry updates. This should go away once we implement the proper multi-local-source version."NaNDavid Liu01/12/15, 06:36:36 AMAdding unit tests for registration channels1
3312.x index compaction, and fix concurrency issuestbak01/12/15, 07:45:12 PMNaN"[eureka-pull-requests #423](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/423/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #5](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/5/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #6](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/6/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #424](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/424/) SUCCESS
This pull request looks good
 =||= "2.x index compaction, and fix concurrency issuestbak01/12/15, 07:45:12 PMNaNNaNTomasz Bak01/12/15, 07:23:46 PM"Merge remote-tracking branch 'remotes/netflix/2.x' into 2.x

Conflicts:
	eureka-integration/src/main/java/com/netflix/eureka2/integration/ReadServerIntegrationTest.java
	eureka-integration/src/main/java/com/netflix/eureka2/integration/WriteServerIntegrationTest.java"1
332nested cluster ring amit-git01/13/15, 05:49:25 PM"1. write and read clusters nested rings visualization
2. interactively display eureka server instance info (vip, hostname, ip, status, ports)""[NetflixOSS » eureka » eureka-pull-requests #7](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/7/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #425](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/425/) SUCCESS
This pull request looks good
 =||= "nested cluster ring amit-git01/13/15, 05:49:25 PM"1. write and read clusters nested rings visualization
2. interactively display eureka server instance info (vip, hostname, ip, status, ports)"NaNAmit Joshi01/06/15, 01:57:06 AMnested cluster ring rendering1
3332.x No more versioningDavid Liuqiangdavidliu01/13/15, 05:48:44 PMNaN"[eureka-pull-requests #426](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/426/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #8](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/8/) SUCCESS
This pull request looks good
 =||= I propose to merge these changes in, and do the remaining updates in a separate pull request.
 =||= "2.x No more versioningDavid Liuqiangdavidliu01/13/15, 05:48:44 PMNaNNaNDavid Liu01/13/15, 07:17:19 AMRemove test cruft1
3342.x test tools update + add junit category support in gradle buildtbak01/13/15, 06:47:37 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #9](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/9/) SUCCESS
This pull request looks good
 =||= [eureka-pull-requests #427](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/427/) SUCCESS
This pull request looks good
 =||= "2.x test tools update + add junit category support in gradle buildtbak01/13/15, 06:47:37 PMNaNNaNTomasz Bak01/13/15, 06:27:42 PMMerge remote-tracking branch 'remotes/netflix/2.x' into 2.x1
3352.x Remove eureka-ocelli module reference from settings.gradle tbak01/14/15, 06:43:59 AMthe module itself was removed some time ago"[eureka-pull-requests #428](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/428/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #10](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/10/) FAILURE
Looks like there's a problem with this pull request
 =||= [eureka-pull-requests #429](https://netflixoss.ci.cloudbees.com/job/eureka-pull-requests/429/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #11](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/11/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #12](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/12/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #18](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/18/) SUCCESS
This pull request looks good
 =||= "2.x Remove eureka-ocelli module reference from settings.gradle tbak01/14/15, 06:43:59 AMthe module itself was removed some time agoNaNTomasz Bak01/14/15, 05:40:36 AMFix flaky integration test - third update.1
336Removing EurekaRegistry interfaceDavid Liuqiangdavidliu01/14/15, 08:45:23 AMAlso refactored Source and SourceMatcher to be more explicit in usage."[NetflixOSS » eureka » eureka-pull-requests #13](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/13/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #14](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/14/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #15](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/15/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #19](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/19/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #22](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/22/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #23](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/23/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #24](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/24/) SUCCESS
This pull request looks good
 =||= What was the motivation of removing this interface?
 =||= "Removing EurekaRegistry interfaceDavid Liuqiangdavidliu01/14/15, 08:45:23 AMAlso refactored Source and SourceMatcher to be more explicit in usage.NaNDavid Liu01/14/15, 08:28:38 AMReordering test steps so we can be more deterministic1
337Move to nebula.netflixoss 2.2.4 for bintray snapshot fixRob Spieldennerrspieldenner01/14/15, 12:08:13 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #16](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/16/) SUCCESS
This pull request looks good
 =||= "Move to nebula.netflixoss 2.2.4 for bintray snapshot fixRob Spieldennerrspieldenner01/14/15, 12:08:13 AMNaNNaNRob Spieldenner01/13/15, 11:41:07 PMMove to nebula.netflixoss 2.2.4 for bintray snapshot fix1
338Move to nebula.netflixoss 2.2.4 for bintray snapshot fixRob Spieldennerrspieldenner01/14/15, 12:08:21 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #17](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/17/) SUCCESS
This pull request looks good
 =||= "Move to nebula.netflixoss 2.2.4 for bintray snapshot fixRob Spieldennerrspieldenner01/14/15, 12:08:21 AMNaNNaNRob Spieldenner01/13/15, 11:35:01 PMMove to nebula.netflixoss 2.2.4 for bintray snapshot fix1
3392.x One more fix in flaky WriteClusterIntegrationTest.tbak01/14/15, 05:03:27 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #25](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/25/) SUCCESS
This pull request looks good
 =||= "2.x One more fix in flaky WriteClusterIntegrationTest.tbak01/14/15, 05:03:27 PMNaNNaNTomasz Bak01/14/15, 04:59:02 PMOne more fix in flaky WriteClusterIntegrationTest.1
3402.x Refactor DnsServerResolvertbak01/15/15, 04:30:21 PM- Add ExternalConnectionTest junit category to isolate tests making external calls (now only DNS)."[NetflixOSS » eureka » eureka-pull-requests #26](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/26/) SUCCESS
This pull request looks good
 =||= "2.x Refactor DnsServerResolvertbak01/15/15, 04:30:21 PM- Add ExternalConnectionTest junit category to isolate tests making external calls (now only DNS).NaNTomasz Bak01/15/15, 01:24:54 AM"Refactor DnsServerResolver.
Add ExternalConnectionTest junit category to isolate tests making external calls (now only DNS)."1
341Adding more bridge testsDavid Liuqiangdavidliu01/15/15, 08:08:33 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #27](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/27/) SUCCESS
This pull request looks good
 =||= "Adding more bridge testsDavid Liuqiangdavidliu01/15/15, 08:08:33 AMNaNNaNDavid Liu01/15/15, 07:34:05 AMAdding more bridge tests1
3422.x Align package name between Eureka 1.x and 2.xtbak01/15/15, 06:12:51 PM"Align package name between Eureka 1.x and 2.x for sake of the release process.
Rename module names from eureka-xxx to eureka2-xxx.""[NetflixOSS » eureka » eureka-pull-requests #28](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/28/) SUCCESS
This pull request looks good
 =||= "2.x Align package name between Eureka 1.x and 2.xtbak01/15/15, 06:12:51 PM"Align package name between Eureka 1.x and 2.x for sake of the release process.
Rename module names from eureka-xxx to eureka2-xxx."NaNTomasz Bak01/15/15, 05:49:03 PM"Align package name between Eureka 1.x and 2.x for sake of the release process.
Rename module names from eureka-xxx to eureka2-xxx."1
3432.x One more update for module renaming.tbak01/15/15, 06:39:34 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #29](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/29/) SUCCESS
This pull request looks good
 =||= "2.x One more update for module renaming.tbak01/15/15, 06:39:34 PMNaNNaNTomasz Bak01/15/15, 06:23:12 PMOne more update for module renaming.1
344Refactoring channel factory and client builderDavid Liuqiangdavidliu01/16/15, 06:41:45 AM"- bringing together client and server side channel factory interface into a common base
- individual channels now have individual factories for modularity
- redid EurekaClientBuilder""[NetflixOSS » eureka » eureka-pull-requests #30](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/30/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #31](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/31/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #32](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/32/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #33](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/33/) SUCCESS
This pull request looks good
 =||= "Refactoring channel factory and client builderDavid Liuqiangdavidliu01/16/15, 06:41:45 AM"- bringing together client and server side channel factory interface into a common base
- individual channels now have individual factories for modularity
- redid EurekaClientBuilder"NaNDavid Liu01/16/15, 06:37:01 AMtest fix1
345Adding random lifecycle test suiteDavid Liuqiangdavidliu01/16/15, 08:49:43 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #34](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/34/) SUCCESS
This pull request looks good
 =||= "Adding random lifecycle test suiteDavid Liuqiangdavidliu01/16/15, 08:49:43 AMNaNNaNDavid Liu01/16/15, 08:38:17 AMAdding random lifecycle test suite1
346Fixes for clean connection close in AmazonInfo when reading from the AWSDavid Liuqiangdavidliu01/16/15, 05:57:22 PMmetadata url."Looks good, thanks for fixing that! :boat:
 =||= [NetflixOSS » eureka » eureka-pull-requests #35](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/35/) SUCCESS
This pull request looks good
 =||= "Fixes for clean connection close in AmazonInfo when reading from the AWSDavid Liuqiangdavidliu01/16/15, 05:57:22 PMmetadata url.NaNDavid Liu01/15/15, 09:55:58 PM"Fixes for clean connection close in AmazonInfo when reading from the AWS
metadata url."1
3472.x various fixesDavid Liuqiangdavidliu01/16/15, 07:21:37 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #36](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/36/) SUCCESS
This pull request looks good
 =||= "2.x various fixesDavid Liuqiangdavidliu01/16/15, 07:21:37 PMNaNNaNDavid Liu01/16/15, 07:03:53 PMRefactored retry strategy as an util and applied it when useful1
3482.x Fix bug in DnsResolverBuilder, where the default scheduler is not created.tbak01/16/15, 08:22:20 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #37](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/37/) SUCCESS
This pull request looks good
 =||= "2.x Fix bug in DnsResolverBuilder, where the default scheduler is not created.tbak01/16/15, 08:22:20 PMNaNNaNTomasz Bak01/16/15, 08:16:10 PMFix bug in DnsResolverBuilder, where the default scheduler is not created.1
3492.x Eager cache within Retryable Interest and Registration channelsDavid Liuqiangdavidliu01/21/15, 01:34:44 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #38](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/38/) SUCCESS
This pull request looks good
 =||= More changes TBD. Close for now.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3502.x Self-unregister of Eureka server during shutdown process.tbak01/21/15, 04:22:20 PM"Self-unregister of Eureka server during shutdown process.
Additional unit/integration tests.""[NetflixOSS » eureka » eureka-pull-requests #39](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/39/) SUCCESS
This pull request looks good
 =||= Looks good!
 =||= "2.x Self-unregister of Eureka server during shutdown process.tbak01/21/15, 04:22:20 PM"Self-unregister of Eureka server during shutdown process.
Additional unit/integration tests."NaNTomasz Bak01/21/15, 12:43:18 AM"Self-unregister of Eureka server during shutdown process.
Additional unit/integration tests."1
3512.x Extract API for metrics. Move from servo to spectator. WIPtbak01/22/15, 11:53:21 PM"API is extracted and a project reorganized accordingly. A new no-op implementation is provided as a default.
Spectator binding is not complete yet and not verified.""[NetflixOSS » eureka » eureka-pull-requests #40](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/40/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #41](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/41/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #42](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/42/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #44](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/44/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #45](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/45/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #46](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/46/) SUCCESS
This pull request looks good
 =||= "2.x Extract API for metrics. Move from servo to spectator. WIPtbak01/22/15, 11:53:21 PM"API is extracted and a project reorganized accordingly. A new no-op implementation is provided as a default.
Spectator binding is not complete yet and not verified."NaNTomasz Bak01/22/15, 11:48:42 PMFix flaky WriteServerIntegrationTest integration test.1
352BreakerSwitchOperator now properly onComplete and unsubscribe + testsDavid Liuqiangdavidliu01/22/15, 11:12:30 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #43](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/43/) SUCCESS
This pull request looks good
 =||= Looks good.
 =||= "BreakerSwitchOperator now properly onComplete and unsubscribe + testsDavid Liuqiangdavidliu01/22/15, 11:12:30 PMNaNNaNDavid Liu01/22/15, 10:45:36 PMBreakerSwitchOperator now properly onComplete and unsubscribe + tests for this behaviour1
3532.x integ test cleanupDavid Liuqiangdavidliu01/23/15, 01:30:03 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #47](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/47/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #48](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/48/) SUCCESS
This pull request looks good
 =||= "2.x integ test cleanupDavid Liuqiangdavidliu01/23/15, 01:30:03 AMNaNNaNDavid Liu01/23/15, 01:25:32 AMUn-@Ignoring1
3542.x startup/shutdown integ test fixDavid Liuqiangdavidliu01/25/15, 06:42:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #49](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/49/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #50](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/50/) SUCCESS
This pull request looks good
 =||= "2.x startup/shutdown integ test fixDavid Liuqiangdavidliu01/25/15, 06:42:16 PMNaNNaNDavid Liu01/25/15, 02:52:02 AMminor fix1
3552.x Metrics update + metrics unit teststbak01/26/15, 07:04:51 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #51](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/51/) SUCCESS
This pull request looks good
 =||= Much kudos on all the metrics tests!
 =||= [NetflixOSS » eureka » eureka-pull-requests #53](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/53/) SUCCESS
This pull request looks good
 =||= "2.x Metrics update + metrics unit teststbak01/26/15, 07:04:51 AMNaNNaNTomasz Bak01/26/15, 06:54:03 AMBug fix + additional unit test.1
3562.x Eureka API update (Eureka class cleanup).tbak01/26/15, 06:24:15 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #52](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/52/) SUCCESS
This pull request looks good
 =||= Ship it. 

On an unrelated note, we use the terms interest and discovery for the same meaning interchangeably in our code. We should do a sweep through at the end and stick to one or the other.
 =||= I agree, we should stick to one term.

On Sun, Jan 25, 2015 at 11:06 AM, qiangdavidliu notifications@github.com
wrote:

> Ship it.
> 
> On an unrelated note, we use the terms interest and discovery for the same
> meaning interchangeably in our code. We should do a sweep through at the
> end and stick to one or the other.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/356#issuecomment-71386495.
 =||= "2.x Eureka API update (Eureka class cleanup).tbak01/26/15, 06:24:15 AMNaNNaNTomasz Bak01/25/15, 07:43:38 AMEureka API update (Eureka class cleanup).1
3732.x Depend on karyon snapshot releases.tbak01/28/15, 12:17:12 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #54](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/54/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #55](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/55/) SUCCESS
This pull request looks good
 =||= "2.x Depend on karyon snapshot releases.tbak01/28/15, 12:17:12 AMNaNNaNTomasz Bak01/27/15, 11:57:54 PMDepend on karyon snapshot releases.1
3742.x Use interface base names as metrics class tag value.tbak01/28/15, 06:12:31 PM- use bintray snapshot repo by default, till we do first eureka2 RC release."[NetflixOSS » eureka » eureka-pull-requests #57](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/57/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #58](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/58/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #59](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/59/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #60](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/60/) SUCCESS
This pull request looks good
 =||= "2.x Use interface base names as metrics class tag value.tbak01/28/15, 06:12:31 PM- use bintray snapshot repo by default, till we do first eureka2 RC release.NaNTomasz Bak01/28/15, 05:20:27 PM"Usage of junit categories defined in eureka2-test-utils, require
that the latter package is required as test dependency.
Otherwise gradle build fails."1
3752.x Fix connection metrics + update dependenciestbak01/28/15, 11:39:47 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #61](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/61/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #62](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/62/) SUCCESS
This pull request looks good
 =||= "2.x Fix connection metrics + update dependenciestbak01/28/15, 11:39:47 PMNaNNaNTomasz Bak01/28/15, 11:34:43 PMAdd timeouts to all unit/integration tests, to prevent build from halting.1
376Bump the level of Jersey for Eureka server to at least 1.13 due to loading static resources issue.Stephen Lowstephenlow07/31/15, 08:09:39 AM"Cannot load non-REST static resources such as CSS, images and JS on WebSphere Application Servers. 

Attempting to load these static resources (i.e. a redirect to http://localhost/eureka/jsp/status.jsp or http://localhost/eureka/css/main.css for example) gives back a 404. The issue is described in JIRA at the following:

https://java.net/jira/si/jira.issueviews:issue-html/JERSEY-880/JERSEY-880.html

This issue was identified in Jersey v1.11, which is what the Eureka server is currently being built on. The issues item identifies that this is fixed in Jersey v1.13. I've rebuilt and tested Eureka with Jersey v1.18 and it is able to successfully load these static resources. 

Requesting for the level of Jersey be bumped up to at least v1.13.""Jersey Version needs to be updated in build.gradle
 =||= Thanks for pointing this out. We have to make a few other changes to bump to higher version, as eureka-client is a direct or transitive dependency in other projects. We are working right now on this.
For the meantime, you have to overwrite the version in your gradle config.
 =||= Latest release (1.2.0) has bumped jersey version to 1.19. Apologies for how long this took!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3772.x Bug fixestbak01/30/15, 06:25:10 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #63](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/63/) SUCCESS
This pull request looks good
 =||= "2.x Bug fixestbak01/30/15, 06:25:10 AMNaNNaNTomasz Bak01/30/15, 05:47:21 AMBug fixes1
3782.x Further metrics cleanup.tbak01/30/15, 07:03:33 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #64](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/64/) SUCCESS
This pull request looks good
 =||= "2.x Further metrics cleanup.tbak01/30/15, 07:03:33 PMNaNNaNTomasz Bak01/30/15, 06:54:21 PMFurther metrics cleanup.1
3792.x Use TestScheduler in InterestChannelImplTest for better control over the testing process.tbak01/30/15, 08:45:50 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #65](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/65/) SUCCESS
This pull request looks good
 =||= Is this the fix for the intermittent interestChannel test failures?
 =||= I cannot replicate this error in my dev environment. With this change I want to narrow down the possible culprits.
 =||= "2.x Use TestScheduler in InterestChannelImplTest for better control over the testing process.tbak01/30/15, 08:45:50 PMNaNNaNTomasz Bak01/30/15, 08:40:48 PM"Use TestScheduler in InterestChannelImplTest for better control over
the testing process."1
380Eureka2 BasicDataCenterInfo typofuturely02/04/15, 05:52:00 PM"https://github.com/Netflix/eureka/blob/2.x/eureka2-core/src/main/java/com/netflix/eureka2/registry/datacenter/BasicDataCenterInfo.java

```
public NetworkAddress getDefaultAddress() {
        if (defaultAddress != null) {
            return defaultAddress;
        }
        if (addresses == null | addresses.isEmpty()) {
```

The last line should be `if (addresses == null || addresses.isEmpty()) {`.""Thanks for the catch.
 =||= fixed
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
381Eureka2 RetryStrategyFunc is not exponential backofffuturely02/04/15, 05:51:55 PM"https://github.com/Netflix/eureka/blob/2.x/eureka2-core/src/main/java/com/netflix/eureka2/utils/rx/RetryStrategyFunc.java

```
/**
     * @param retryIntervalMillis the initial wait between retries in milliseconds
     * @param totalRetries max number of retries to attempt
     * @param exponentialBackoff boolean to denote whether to use exponential backoff
     */
    public RetryStrategyFunc(long retryIntervalMillis, int totalRetries, boolean exponentialBackoff) {
        this.retryIntervalMillis = retryIntervalMillis;
        this.numRetries = totalRetries;
        this.backoffRetry = exponentialBackoff;
    }

    @Override
    public Observable<Long> call(Observable<? extends Throwable> observable) {
        return observable.zipWith(Observable.range(1, numRetries), new Func2<Throwable, Integer, Long>() {
            @Override
            public Long call(Throwable n, Integer i) {
                if (backoffRetry) {
                    return i * retryIntervalMillis;
                } else {
                    return retryIntervalMillis;
                }
            }
```

The exponential backoff should be `Math.pow(2, i) * retryIntervalMillis`.""Thanks for the catch.
 =||= fixed
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3822.x Client channel major refactorDavid Liuqiangdavidliu02/02/15, 09:35:36 PM"- more consistent channel lifecycles and onComplete/onError
- old Retryable channels are not RetryableConnections that can be .retry()-ed on the lifecycle.
  for each retry, new channels are created and the old channel shutdown
- registrationHandler now takes a stream of InstanceInfos
- registrationTracker that bridges between the old register/unregister API and the new
  stream based API. EurekaClient API change to the new form is not done as part of this pull
  to minimize the change list. It will change in a subsequent pull.""[NetflixOSS » eureka » eureka-pull-requests #66](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/66/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #67](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/67/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #68](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/68/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #69](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/69/) SUCCESS
This pull request looks good
 =||= "2.x Client channel major refactorDavid Liuqiangdavidliu02/02/15, 09:35:36 PM"- more consistent channel lifecycles and onComplete/onError
- old Retryable channels are not RetryableConnections that can be .retry()-ed on the lifecycle.
  for each retry, new channels are created and the old channel shutdown
- registrationHandler now takes a stream of InstanceInfos
- registrationTracker that bridges between the old register/unregister API and the new
  stream based API. EurekaClient API change to the new form is not done as part of this pull
  to minimize the change list. It will change in a subsequent pull."NaNDavid Liu02/02/15, 09:35:01 PMcomment update1
383Reusing TestChannel and TestChannelFactory in RetryableConnectionFactoryTestDavid Liuqiangdavidliu02/02/15, 11:29:11 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #70](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/70/) SUCCESS
This pull request looks good
 =||= "Reusing TestChannel and TestChannelFactory in RetryableConnectionFactoryTestDavid Liuqiangdavidliu02/02/15, 11:29:11 PMNaNNaNDavid Liu02/02/15, 11:23:53 PMReusing TestChannel and TestChannelFactory in RetryableConnectionFactoryTest1
3842.x State information propagation in the interest channel to the clienttbak02/13/15, 09:48:20 PM"This is a proposal for state information propagation in the interest channel to the client.
# Problem to solve

As interest stream subscription is reactive, there is no way for client to know how much relevant data is available when the subscription starts. If the client is a load balancer, it is critical to wait until available pool of servers is loaded before application requests are allowed, to avoid overloading single server that happens to be first in the list. It may be also advantages to know about bigger changes in the system topology (scale up), and do system reconfiguration when all/majority of the new servers are received via the change notification stream.
# Proposed solution

Generate buffering sentinels after each last know item in the change notification stream:

![Figure 1. Buffer sentinels in change notification stream](../wiki/images/buffering_sentinels_in_change_notification_stream.png)

As buffer sentinels are not optimal from the transport perspective, internal implementation is using batching markers, that are transmitted over the wire together with regular change notification data.This concept is depicted by the figure below:

![Figure 2. Batching markers in change notification stream](../wiki/images/batching_markers_in_change_notification_stream.png)

There are two possible sources of batching hints:
- Eureka client registry - it works as a cache of data, and when a client subscribes, the whole subscribed registry content should be delivered as a single batch
- Eureka server - whenever server knows about a batch of items to be delivered (that starts with current registry content), the items shall be delineated with the batching markers

The concept is depicted in this figure:

![Figure 3. Batching markers implementation](../wiki/images/batching_markers_implementation.png)

One more level of complexity is added by the way interests are handled in the transport channel, and the index registry. For efficiency purposes, to avoid sending/processing the same data if different subscribes ask for same or overlapping data, the interests are handled at an atomic level. For example:
- subscriber A asks for interest {vip=vipA}, and subscriber B asks for interest {vip=vipA or vip=vipB}
- internally all subscriptions are merged into list of atomic interests {vip=vipA, vip=vipB}
- the batching markers are generated per atomic interest, so must be merged before delivering to the client (just like data are merged)
- if subscriber B unsubscribes, all the state related to {vip=vipB} can be safely discarded
# Data model

Batch hints are implemented as a new kinds of ChangeNotification:

``` java
public class ChangeNotification<T> {
    public enum Kind {Add, Delete, Modify, Buffer, BufferingSentinel}
    ...
}
```

Internally a derived class `StreamStateNotification` is used to carry additional information. It is not however visible to the client.""For the proposed hint markers, it seems the Buffer hint is always sent for all cases described. From a behaviour point, what does the Buffer hint offer? It seems that consuming clients and/or operators only need to listen for the finishBuffer hint for an optimised buffering experience regardless of whether there are prior Buffer hints. E.g. the consumer should be able to apply a collection operator to the stream that emits a new List each time it sees a finishBuffer hint, and possibly timeout otherwise.

On the client side, it seem to make more sense that the source of the hints is only the registry, as it should be the source of truth for all data. On the server side, this is naturally the case, and on the client side the hints should be a merge of local registry hints plus server side hints if any are available. If we make sure the hints are only generated by the registry, we should then be able to merge the multiple hints emitted by atomic interests for composite forInterests so that clients only receive a single finishBatching marker (the logic would then be that a finishBuffer is emitted once all atomic FinishBuffers are received at the merge point).
 =||= I think it will be useful to provide code samples on how a client will consume this API. There are a lot of complex constructs as conditional batching and non-batching modes. I would like to see how this manifests on the consumer end. 

A few implementation related questions:
- How are these batching hints stored? It looks to me from your description of the various scenarios of multiple subscribers to the same interest, that the hints are generated at subscription time. I would have thought that the hints will be stored along with the data & hence will be delivered to multiple subscribers as is.
- Is there an attempt to be precise about the hints? I get a feeling of this when you talk about hint merging i.e. an intent not to send multiple hints and de-dup them. If it is so, then what value will it add being precise?
- What is the behavior in case of server failure between sending a ""Batch"" hint and ""Finished batching"" hint? What if there is no server available and we have already sent a ""Batch"" hint.

I am not really convinced about the need of ""Batch"" hint, however, I can see what you are trying to achieve i.e. the ability for the same client to switch between batching & non-batching mode. This is something will be cleared to see in a code example whether the complexity is worth. 

@qiangdavidliu 

> the consumer should be able to apply a collection operator to the stream that emits a new List each time it sees a finishBuffer hint, and possibly timeout otherwise.

I think there is value in having an API where batch or non-batch is not a choice that the client is to make. In this model, the client will always batch & non-batch interaction will be timeout based. 
 =||= Implemented by PR #403
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3852.x Interest channel with channel state propagation.tbak02/06/15, 04:37:49 PMThis is prototype implementation for feature #384."[NetflixOSS » eureka » eureka-pull-requests #71](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/71/) FAILURE
Looks like there's a problem with this pull request
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3862.x Fix dashboard server, and startup integration tests.tbak02/04/15, 12:57:41 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #72](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/72/) SUCCESS
This pull request looks good
 =||= "2.x Fix dashboard server, and startup integration tests.tbak02/04/15, 12:57:41 AMNaNNaNTomasz Bak02/04/15, 12:18:41 AMFix dashboard server, and startup integration tests.1
3872.x Minor cleanup.tbak02/04/15, 05:57:57 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #73](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/73/) SUCCESS
This pull request looks good
 =||= "2.x Minor cleanup.tbak02/04/15, 05:57:57 PMNaNNaNTomasz Bak02/04/15, 05:20:39 PMMinor cleanup.1
3882.x RetryableConnection for SenderReplicationDavid Liuqiangdavidliu02/05/15, 11:19:33 PM"Using RetryableConnection for sender replication.
Connecting connection lifecycle to channel lifecycle in AbstractClientChannel.""[NetflixOSS » eureka » eureka-pull-requests #74](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/74/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #75](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/75/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #76](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/76/) SUCCESS
This pull request looks good
 =||= "2.x RetryableConnection for SenderReplicationDavid Liuqiangdavidliu02/05/15, 11:19:33 PM"Using RetryableConnection for sender replication.
Connecting connection lifecycle to channel lifecycle in AbstractClientChannel."NaNDavid Liu02/05/15, 11:09:45 PMMethod renaming1
389Eureka 1.x - there is no mechanism provided to remove overridden statustbak02/10/15, 06:55:15 PM"Eureka 1 allows one to override an instance status via issuing the following REST call:
`PUT /eureka/v2/apps/appID/instanceID/status?value=OUT_OF_SERVICE`
This is useful if we want to take otherwise healthy instance out of service. The instance info data contain afterwards two status related fields:

```
<status>OUT_OF_SERVICE</status>
<overriddenstatus>OUT_OF_SERVICE</overriddenstatus>
```

To mark instance as up we can modify again the overriddenstatus field by calling:
`PUT /eureka/v2/apps/appID/instanceID/status?value=UP`
If however the instance real state change(s), that is hidden by the enforced value.

We can address this issue in two ways:
- support DELETE HTTP method to remove the overridden status
- merge the two states (see table below)

| Status | Overridden status | Merge |
| --- | --- | --- |
| DOWN | DOWN | DOWN |
| DOWN | * | DOWN |
| UP | OUT_OF_SERVICE | OUT_OF_SERVICE |
| UP | UP | UP |""I would prefer the support for DELETE overridden status for the following reason:

The merge algorithm addresses the ""most common"" usecase for today (for Netflix). I can think of corner cases when someone wants to override DOWN status from the instance with UP, may be in the case the healthcheck has an issue or it is flapping. 

There is value in being consistent with the definition of ""overridden status"" that it **always** overrides the status with no special cases. If the override does not apply anymore, then it should be deleted.
 =||= This issue is a duplicate of #89.
 =||= Fixed by #412.
Overridden status can be removed via DELETE REST call.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3902.x test cleanupDavid Liuqiangdavidliu02/06/15, 12:36:07 AMRemoving EurekaClientTest (as the client now just delegates to the Handlers) and adding the interest tests to the InterestHandlerTest class"[NetflixOSS » eureka » eureka-pull-requests #77](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/77/) SUCCESS
This pull request looks good
 =||= "2.x test cleanupDavid Liuqiangdavidliu02/06/15, 12:36:07 AMRemoving EurekaClientTest (as the client now just delegates to the Handlers) and adding the interest tests to the InterestHandlerTest classNaNDavid Liu02/05/15, 11:59:32 PM"Removing EurekaClientTest (as the client now just delegates to the Handlers)
and adding the interest tests to the InterestHandlerTest class"1
402Eureka 1.x - add additional guard in InstanceInfo.getHealthCheckUrlstbak02/10/15, 06:53:49 PMCurrently this method will return Set object with null values in it, if enabled port(s) has no health check URL provided."Fixed by PR #412
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4032.x Implementation of interest channel state propagation (enhancement #384)tbak02/13/15, 09:47:32 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #78](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/78/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #90](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/90/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #92](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/92/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #98](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/98/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #100](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/100/) SUCCESS
This pull request looks good
 =||= "2.x Implementation of interest channel state propagation (enhancement #384)tbak02/13/15, 09:47:32 PMNaNNaNTomasz Bak02/13/15, 09:43:58 PMMerge remote-tracking branch 'remotes/netflix/2.x' into features/interest_channel_with_state_propagation21
4042.x Adding ability to configure some transport propertiesDavid Liuqiangdavidliu02/09/15, 09:41:35 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #79](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/79/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #85](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/85/) SUCCESS
This pull request looks good
 =||= "2.x Adding ability to configure some transport propertiesDavid Liuqiangdavidliu02/09/15, 09:41:35 PMNaNNaNDavid Liu02/09/15, 09:28:34 PMUpdates to names + builder for basic configs1
405Fix InstanceInfo.Builder.setLeaseInstanceShai Ererashaie02/09/15, 12:24:35 AMInstanceInfo.Builder.setLeaseInstance broke the builder pattern by declaring to return void. This simple commit fixes it to return Builder."[NetflixOSS » eureka » eureka-pull-requests #80](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/80/) SUCCESS
This pull request looks good
 =||= Thanks for the fix.
 =||= "Fix InstanceInfo.Builder.setLeaseInstanceShai Ererashaie02/09/15, 12:24:35 AMInstanceInfo.Builder.setLeaseInstance broke the builder pattern by declaring to return void. This simple commit fixes it to return Builder.NaNShai Erera02/08/15, 12:41:43 PM"Fix InstanceInfo.Builder.setLeaseInfo

InstanceInfo.Builder.setLeaseInfo did not return the Builder instance,
therefore breaking the Builder pattern. This commit fixes it to return
'this'."1
406Don't use String.toUpperCase()Shai Ererashaie02/09/15, 12:40:42 AM"InstanceInfo uses String.toUpperCase() without passing a Locale. This
is very dangerous as it relies on the default locale which might not
match the server's Locale. It is one of the APIs that are discouraged
for use, and it is better if it always passes a Locale.ROOT.""[NetflixOSS » eureka » eureka-pull-requests #81](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/81/) SUCCESS
This pull request looks good
 =||= Make sense, thanks for the pull.
 =||= "Don't use String.toUpperCase()Shai Ererashaie02/09/15, 12:40:42 AM"InstanceInfo uses String.toUpperCase() without passing a Locale. This
is very dangerous as it relies on the default locale which might not
match the server's Locale. It is one of the APIs that are discouraged
for use, and it is better if it always passes a Locale.ROOT."NaNShai Erera02/08/15, 01:26:40 PM"Don't use String.toUpperCase()

InstanceInfo uses String.toUpperCase() without passing a Locale. This
is very dangerous as it relies on the default locale which might not
match the server's Locale. It is one of the APIs that are discouraged
for use, and it is better if it always passes a Locale.ROOT."1
407Check for right logging levelShai Ererashaie02/09/15, 12:44:16 AMThe code checked if isInfoEnabled() but then called logger.debug()."[NetflixOSS » eureka » eureka-pull-requests #82](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/82/) SUCCESS
This pull request looks good
 =||= thanks for the fix.
 =||= "Check for right logging levelShai Ererashaie02/09/15, 12:44:16 AMThe code checked if isInfoEnabled() but then called logger.debug().NaNShai Erera02/08/15, 03:23:46 PM"Check for right logging level

The code checked if isInfoEnabled() but then called logger.debug()."1
408More toUpperCase() fixesShai Ererashaie02/09/15, 12:44:53 AMMore String.toUpperCase() fixes."[NetflixOSS » eureka » eureka-pull-requests #83](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/83/) SUCCESS
This pull request looks good
 =||= Thanks for the fix.
 =||= "More toUpperCase() fixesShai Ererashaie02/09/15, 12:44:53 AMMore String.toUpperCase() fixes.NaNShai Erera02/08/15, 03:44:13 PMMore toUpperCase() fixes1
4092.x Client API Re-organisationDavid Liuqiangdavidliu03/09/15, 08:52:36 PM"# Problem to Address

The current eurekaClient public API exposes registrations and interest discovery in the following way:
- registration and updates are handled by sequential calls to register(info), and unregistration by a separate unregister(info) method. Both of these methods return an Observable<Void> that denotes the success/failure of the given operation. The problem with this API is that callers are more interested in the lifecycle of the instance's overall registration as opposed to the success/failure of individual calls.
- forInterest today returns a stream of ChangeNotifications that contain instance level data. In practical use, it is common for consumers to want to wait and buffer this data into lists of suitable size before consumption. As of today, we are missing both a mechanism to detect suitable buffer windows, as well as an API and/or suitable default operators to do the buffering.
# Proposal
## Registration API

``` java
    /**
     * Given an Observable of InstanceInfo that represent the register and subsequent updates of the instance to be
     * registered, registers and updates this instance.
     * 
     * @param instanceToRegister an Observable that emits an InstanceInfo whenever relevant information for this
     *                           instance has changed and need to be updated server side.
     * @return an Observable RegistrationResponse that starts the registration when subscribed to, and unregisters
     *         when unsubscribed to. The RegistrationResponse is an Observable<Void> that represent the registration
     *         lifecycle of the instance, and will onError if the instance registration is disconnected from the
     *         server due to client errors.
     *         The RegistrationResponse optionally contains an Observable<Void> that can be subscribed to for
     *         onCompleted (success) or onError (failure) of the initial registration.
     */
    public RegistrationResponse register(Observable<InstanceInfo> instanceToRegister) {

    }
```
## Interest API

The current API should remain unchanged, however hint markers should be emitted by the stream for batching hints (issue #384). Additionally, standard operators should be provided for the stream to achieve buffering (see below for operators to be provided.).
## Registration Helpers
- The [SelfRegistrationService and SelfInfoResolver](https://github.com/Netflix/eureka/tree/2.x/eureka2-server/src/main/java/com/netflix/eureka2/server/service) currently used by the servers should be generalised for client use, so that we can componentize the creation of different parts of an InstanceInfo (e.g. user provided fields, network auto-discovery, health monitoring) and then merge these together for registration.
## ForInterest Operators

(Some of these operators may be straightforward enough that we should just provide a best practice example using standard operators).
- A buffer(long time, TimeUnit unit) operator that return a stream of ChangeNotifications, such that nothing is emitted until a buffer marker is received, then all notifications buffered up to the marker is emitted. A timeout is provided for the length of time to wait between each marker.
- A CollectToSnapshot() operator that transforms the stream of ChangeNotifications into a stream of Lists, where the lists returned contain snapshots of interest data. When any member of the interest set changes, a new snapshot list emitted.
- A GroupBy(Key) operator should be provided that groups the single ChangeNotification stream to a set of streams based on the groupBy key (e.g. groupBy VipAddress).""@qiangdavidliu the changes look good to me. I do have a few questions:

> The SelfRegistrationService and SelfInfoResolver currently used by the servers should be generalised for client use, so that we can componentize the creation of different parts of an InstanceInfo

Does this mean that a client will have a to use a helper class for registration?
I am not convinced that we should go that route. If `InstanceInfo` is complex to create, we should provide ways in `InstanceInfo` to make it easier to use, as opposed to having a separate class that does so. The reason being intuitiveness of the API if a user has to look at a bunch of classes to do registration.

Since, we are on the topic of Client API changes, do you intend to create another issue for creating complex Interest sets. eg: How does one create a cumulative interest for a VIP + an app + secure VIP (of course this is hypothetical)?

I remember us briefly discussing the need of a DSL for that, somewhat like:

``` java
client.forInterest(Interests.forVip(""vip1""))
        .andApplication(""app1"").orInstance(""I1"")
```

The above DSL is capturing a modifiable interest set which can be subscribed at any branching point.
 =||= This issue is still pending a part 2 clean up of the client builder.
 =||= Issue resolve per pull requests #426 and #444 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4102.x Client InterestChannel Should Implement InstanceInfo CleanupDavid Liuqiangdavidliu06/02/16, 10:25:56 PMWhen the client InterestChannel receive a change(Interest) command, it should have the option to explicitly unregister from the registry instanceInfos that are no longer wanted by any consumer. This is useful for users with tighter memory requirements."archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4112.x Use Eureka 1.x mock server in bridge integration tests.tbak02/09/15, 04:29:50 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #84](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/84/) SUCCESS
This pull request looks good
 =||= "2.x Use Eureka 1.x mock server in bridge integration tests.tbak02/09/15, 04:29:50 PMNaNNaNTomasz Bak02/09/15, 03:40:26 AMUse Eureka 1.x mock server in bridge integration tests.1
412Fixes for #389, #402tbak02/10/15, 06:42:00 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #86](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/86/) SUCCESS
This pull request looks good
 =||= The code looks good, but a more consistent behaviour could be to fix the update code so that the (non-) overridden status is not updated when an override is specified, and hence at deletion time we'll only need to remove the overridden status. Then on the InstanceInfo getter side, we can return either the base status or the override status based on whether the override is present.
 =||= As currently setting status override modifies the status fields itself, this change would require bigger code refactoring. Instead, the status override DELETE will accept optional query parameter to set the desired status. If not set it will default to UNKNOWN.
 =||= [NetflixOSS » eureka » eureka-pull-requests #91](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/91/) SUCCESS
This pull request looks good
 =||= "Fixes for #389, #402tbak02/10/15, 06:42:00 PMNaNNaNTomasz Bak02/10/15, 06:31:48 PMMerge remote-tracking branch 'remotes/netflix/master'1
4132.x client fixesDavid Liuqiangdavidliu02/10/15, 06:17:22 PM"- client interestChannel now evict older entries once new channel is available
- AbstractClientChannel properly handle connection lifecycle""[NetflixOSS » eureka » eureka-pull-requests #87](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/87/) SUCCESS
This pull request looks good
 =||= "2.x client fixesDavid Liuqiangdavidliu02/10/15, 06:17:22 PM"- client interestChannel now evict older entries once new channel is available
- AbstractClientChannel properly handle connection lifecycle"NaNDavid Liu02/10/15, 02:42:43 AM"Fixes:
- client interestChannel now evict older entries once new channel is available
- AbstractClientChannel properly handle connection lifecycle"1
414getDispatcherType() is undefined for the type HttpServletRequestpeter zhangddatsh02/10/15, 06:52:22 PM"eureka-server-1.1.148-SNAPSHOT
tomcat 8

org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [jsp] in context with path [/eureka] threw exception [Unable to compile class for JSP: 

An error occurred at line: [53] in the generated java file: [D:\dev\java\server\tomcat\8\work\Catalina\localhost\eureka\org\apache\jsp\jsp\status_jsp.java]
The method getDispatcherType() is undefined for the type HttpServletRequest

Stacktrace:] with root cause
 org.apache.jasper.JasperException: Unable to compile class for JSP: 

An error occurred at line: [53] in the generated java file: [D:\dev\java\server\tomcat\8\work\Catalina\localhost\eureka\org\apache\jsp\jsp\status_jsp.java]
The method getDispatcherType() is undefined for the type HttpServletRequest""@ddatsh are you running this in an IDE or on the command line?
 =||= run it in tomcat 8 & jdk 1.8
 =||= We have transitive dependency that includes servlet-api 2.5 jar into eureka.war. The one eureka depends on directly (version 2.4) is marked as provided. I have just fixed that, and now I am able to run Eureka UI on tomcat 8.
 =||= I have just pushed a PR for this bug (#416).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4152.x multiple updatestbak02/10/15, 04:24:53 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #88](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/88/) SUCCESS
This pull request looks good
 =||= ship it!
 =||= "2.x multiple updatestbak02/10/15, 04:24:53 PMNaNNaNTomasz Bak02/10/15, 05:39:04 AMReplace hardcoded constants with configuration properties.1
4161.x Exclude servlet-api jar from eureka.wartbak02/10/15, 06:17:29 PM"Because of the transitive dependencies we had two servlet-api jar
versions in the dependency tree. Eureka depended directly on
version 2.4 that was properly marked as provided. This version was
however shadowed by the one from the transitive dependency (2.5),
and as it was not marked as provided nor excluded, it was added to
war file. That caused compatibility issue when running on tomcat 8.0.""[NetflixOSS » eureka » eureka-pull-requests #89](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/89/) SUCCESS
This pull request looks good
 =||= "1.x Exclude servlet-api jar from eureka.wartbak02/10/15, 06:17:29 PM"Because of the transitive dependencies we had two servlet-api jar
versions in the dependency tree. Eureka depended directly on
version 2.4 that was properly marked as provided. This version was
however shadowed by the one from the transitive dependency (2.5),
and as it was not marked as provided nor excluded, it was added to
war file. That caused compatibility issue when running on tomcat 8.0."NaNTomasz Bak02/10/15, 05:30:06 PM"Exclude servlet-api jar from eureka.war.

Because of the transitive dependencies we had two servlet-api jar
versions in the dependency tree. Eureka depended directly on
version 2.4 that was properly marked as provided. This version was
however shadowed by the one from the transitive dependency (2.5),
and as it was not marked as provided nor excluded, it was added to
war file. That caused compatibility issue when running on tomcat 8.0."1
4172.x SelfInfoResolver changesDavid Liuqiangdavidliu02/11/15, 09:03:13 AM"- Updated selfInfoResolver implementation
- Added resolver that periodically refresh datacenter info
- Added caching resolver that caches in a BehaviorSubject for multiple subscribers""[NetflixOSS » eureka » eureka-pull-requests #93](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/93/) SUCCESS
This pull request looks good
 =||= "2.x SelfInfoResolver changesDavid Liuqiangdavidliu02/11/15, 09:03:13 AM"- Updated selfInfoResolver implementation
- Added resolver that periodically refresh datacenter info
- Added caching resolver that caches in a BehaviorSubject for multiple subscribers"NaNDavid Liu02/11/15, 02:49:44 AM"- Updated selfInfoResolvers
- Added resolver that periodically refresh datacenter info
- Added caching resolver that caches in a BehaviourSubject for
  multiple subscribers"1
418Objects of different types compared with equals method.C0rWin02/15/15, 07:28:56 PMCompare data center name object with its name rather than instance of data center object itself."[NetflixOSS » eureka » eureka-pull-requests #94](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/94/) SUCCESS
This pull request looks good
 =||= Hi @C0rWin , thanks for the pull and the fix. We took another look at the logic around the fix, and it looks like the fixes will actually enable some code paths that have been dormant all this time (and eureka has been working in production for a long time). A better fix would be to remove both checks and any associated code paths that were never exercised instead, i.e. remove both conditional statements and their inner executions. Feel free to resubmit your pull with the change if you'd like, otherwise we can make the fix also. Thanks.
 =||= Ok, I'll take another look and will remove code as you suggested.
 =||= [NetflixOSS » eureka » eureka-pull-requests #103](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/103/) SUCCESS
This pull request looks good
 =||= Thanks for the contrib @C0rWin 
 =||= "Objects of different types compared with equals method.C0rWin02/15/15, 07:28:56 PMCompare data center name object with its name rather than instance of data center object itself.NaNArtem Barger02/14/15, 09:55:04 PMRemove code which has never been executed1
419Simple handling of dns as txt records (assuming it's a list of hostnames)David Liuqiangdavidliu02/11/15, 09:13:15 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #95](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/95/) SUCCESS
This pull request looks good
 =||= "Simple handling of dns as txt records (assuming it's a list of hostnames)David Liuqiangdavidliu02/11/15, 09:13:15 PMNaNNaNDavid Liu02/11/15, 09:08:17 PMSimple handling of dns as txt records (assuming it's a list of hostnames)1
4202.x BaseMessageConnection fixDavid Liuqiangdavidliu02/12/15, 02:21:41 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #96](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/96/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #97](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/97/) SUCCESS
This pull request looks good
 =||= "2.x BaseMessageConnection fixDavid Liuqiangdavidliu02/12/15, 02:21:41 AMNaNNaNDavid Liu02/12/15, 02:14:56 AMUpdating test to new behaviour1
4212.x various fixes to eviction and dnsDavid Liuqiangdavidliu02/12/15, 11:32:39 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #99](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/99/) SUCCESS
This pull request looks good
 =||= "2.x various fixes to eviction and dnsDavid Liuqiangdavidliu02/12/15, 11:32:39 PMNaNNaNDavid Liu02/12/15, 11:26:59 PMmore eviction updates1
4221.x error reporting for unsuccessful status update should be more meaningfulltbak02/23/15, 07:59:22 PM"Right now status update resulting in an error returns something like this:

```
< HTTP/1.1 406 Not Acceptable
< Date: Fri, 13 Feb 2015 18:52:32 GMT
* Server Apache-Coyote/1.1 is not blacklisted
< Server: Apache-Coyote/1.1
< Content-Type: text/html;charset=utf-8
< Content-Length: 1095
<
* Connection #0 to host <host> left intact
<html><head><title>Apache Tomcat/6.0.37 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 406 - Not Acceptable</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Status report</p><p><b>message</b> <u>Not Acceptable</u></p><p><b>description</b> <u>The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request ""accept"" headers.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/6.0.37</h3></body></html>l
```""Fixed by PR #433
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4232.x multiple updates related to new interest stream implementation with buffer hintstbak02/16/15, 06:58:04 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #101](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/101/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #104](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/104/) SUCCESS
This pull request looks good
 =||= "2.x multiple updates related to new interest stream implementation with buffer hintstbak02/16/15, 06:58:04 AMNaNNaNTomasz Bak02/16/15, 02:32:48 AMApply code review suggestions.1
4242.x server address fixesDavid Liuqiangdavidliu02/16/15, 07:40:13 AM"- Moving Server to core/utils for more generic use.
- Removing usage of InetSocketAddress.
- Replication peer resolve to dns name only (except for A records)""[NetflixOSS » eureka » eureka-pull-requests #102](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/102/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #105](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/105/) SUCCESS
This pull request looks good
 =||= "2.x server address fixesDavid Liuqiangdavidliu02/16/15, 07:40:13 AM"- Moving Server to core/utils for more generic use.
- Removing usage of InetSocketAddress.
- Replication peer resolve to dns name only (except for A records)"NaNDavid Liu02/16/15, 07:36:15 AM"Merge remote-tracking branch 'upstream/2.x' into 2.x

Conflicts:
	eureka2-client/src/main/java/com/netflix/eureka2/client/resolver/EurekaServerResolver.java
	eureka2-client/src/test/java/com/netflix/eureka2/client/resolver/EurekaServerResolverTest.java"1
425Gradle build fails for ZIP fileTeerat Pitakratteeratpitakrat09/23/15, 11:35:28 PM"The build fails when building the downloaded zip file:

```
$ unzip eureka-master.zip
$ cd eureka-master
$ ./gradlew clean build

FAILURE: Build failed with an exception.

* Where:
Build file '/tmp/eureka-master/build.gradle' line: 2

* What went wrong:
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '2.2.4']
> repository not found: /tmp/eureka-master

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED
```

The problem seems to be the missing .git folder. Building the clone with .git removed results in the same problem.
Tested on Ubuntu 12.04.5 LTS and Archlinux.""Hi @teeratpitakrat unfortunately our new build process requires git pull if you are building from source. Is this a blocking issue for you w.r.t. using eureka?
 =||= Hi @qiangdavidliu, I was trying to add eureka as a submodule inside another git project. Then, git modified .git folder of eureka and caused this problem.

My temporary solution is to clone eureka and put it inside that git project without committing (which is a little inconvenient).
It would be great if eureka can be built without the dependency to git.
 =||= @teeratpitakrat do you need to edit source code? If not, why not just depend on the published eureka artifacts?
 =||= @qiangdavidliu Unfortunately, I need to edit the source code.
 =||= @teeratpitakrat unfortunately it looks our new build process does not allow eureka to be used as a git submodule inside another project. If your changes to eureka are not domain specific for your case, feel free to send us pull requests. If you would like to make changes to the build files to enable submoduling, that would be appreciated also.
 =||= As there was no follow up on this issue for long time, I am closing it.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
426Eureka Client RefactorDavid Liuqiangdavidliu02/19/15, 01:12:24 AM"- changes to the client API per github issue #409
- changes to server side selfRegistrationServices due to client API changes
- fix for RetryableChannelFactory channels to be able to handle Observable.just() ops.
- changes to tests due to client API changes""Note new Client organisation:

| Interface | DefaultImpl |
| --- | --- |
| EurekaInterestClient | EurekaInterestClientImpl |
| EurekaRegistrationClient | EurekaRegistrationClientImpl |
| EurekaClient | EurekaClientImpl (this just wraps around an interestClientImpl and a  registrationClientImpl) |
 =||= [NetflixOSS » eureka » eureka-pull-requests #106](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/106/) SUCCESS
This pull request looks good
 =||= How to better structure construction of clients (and the proper separation of the registration and interest clients) will be in a subsequent pull.
 =||= [NetflixOSS » eureka » eureka-pull-requests #107](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/107/) SUCCESS
This pull request looks good
 =||= "Eureka Client RefactorDavid Liuqiangdavidliu02/19/15, 01:12:24 AM"- changes to the client API per github issue #409
- changes to server side selfRegistrationServices due to client API changes
- fix for RetryableChannelFactory channels to be able to handle Observable.just() ops.
- changes to tests due to client API changes"NaNDavid Liu02/19/15, 01:07:12 AMUpdates per comments.1
4272.x Get rid of blocking subscription in AuditServiceController.tbak02/19/15, 06:56:35 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #108](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/108/) SUCCESS
This pull request looks good
 =||= "2.x Get rid of blocking subscription in AuditServiceController.tbak02/19/15, 06:56:35 AMNaNNaNTomasz Bak02/19/15, 06:43:52 AMGet rid of blocking call in AuditServiceController.1
4282.x Fix Eureka2 UI tab.tbak02/19/15, 11:52:03 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #109](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/109/) SUCCESS
This pull request looks good
 =||= "2.x Fix Eureka2 UI tab.tbak02/19/15, 11:52:03 PMNaNNaNTomasz Bak02/19/15, 11:44:41 PMFix Eureka2 UI tab.1
4292.x Rename Eureka2 UI resources, so they do not overlap with 1.x classes.tbak02/20/15, 06:48:51 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #110](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/110/) SUCCESS
This pull request looks good
 =||= "2.x Rename Eureka2 UI resources, so they do not overlap with 1.x classes.tbak02/20/15, 06:48:51 AMNaNNaNTomasz Bak02/20/15, 06:41:00 AMRename Eureka2 UI resources, so they do not overlapp with 1.x classes.1
430Require re-registration when instance status is UNKNOWN, after override removal.tbak02/20/15, 09:16:45 PM"This is bug fix for PR #412.
Require re-registration when instance status is UNKNOWN, after override removal.
This does not change the current behavior when new status is set as part of the DELETE request.""[NetflixOSS » eureka » eureka-pull-requests #111](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/111/) SUCCESS
This pull request looks good
 =||= "Require re-registration when instance status is UNKNOWN, after override removal.tbak02/20/15, 09:16:45 PM"This is bug fix for PR #412.
Require re-registration when instance status is UNKNOWN, after override removal.
This does not change the current behavior when new status is set as part of the DELETE request."NaNTomasz Bak02/20/15, 08:16:53 PM"Require re-registration when instance status is UNKNOWN, after
override removal.

This does not change the current behavior when new status is set
as part of the DELETE request."1
431CloudBees embedded build status showing 'unknown'Charles Chancharleswhchan02/22/15, 03:44:30 AM"The embedded build status defined in README.md is currently showing 'unknown'.

Performs a configuration issue? According to the Embeddable Build Status Icon page:
https://netflixoss.ci.cloudbees.com/job/eureka-master/badge/

> If you want the status icons to be public readable/accessible, just grant the ViewStatus permission globally to anonymous.""Thank you for spotting this. We created recently a new Jenkins build job for Eureka at different location. I have pushed fix for this (#432).
 =||= Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4321.x Fix Jenkins build status link in README.md.tbak02/22/15, 03:41:11 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #112](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/112/) SUCCESS
This pull request looks good
 =||= "1.x Fix Jenkins build status link in README.md.tbak02/22/15, 03:41:11 AMNaNNaNTomasz Bak02/22/15, 03:40:07 AMFix Jenkins build status link in README.md.1
4331.x Fix error reporting for status update/delete REST resource (#422).tbak02/23/15, 07:58:51 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #113](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/113/) SUCCESS
This pull request looks good
 =||= "1.x Fix error reporting for status update/delete REST resource (#422).tbak02/23/15, 07:58:51 PMNaNNaNTomasz Bak02/23/15, 07:38:03 PMFix error reporting for status update/delete REST resource (#422).1
4341.x Cache string values to reduce memory footprint.tbak02/25/15, 07:45:31 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #114](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/114/) SUCCESS
This pull request looks good
 =||= Rather than implementing a StringCache independent of xstream, can't we just register a StringConverter with high priority when we register the specific converters for the JsonXStream and XmlXStream?

We may also want to look at implementing an alternative to the default StringConverter similar to http://javadoc.jenkins-ci.org/hudson/util/HeapSpaceStringConverter.html.
 =||= I tried to setup StringConverter, and my custom converter implementation, but it never got triggered. Our custom serializers do not delegate processing further once they got basic types. If you know how to enforce delegation to StringConverter it would be much nicer implementation.
 =||= [NetflixOSS » eureka » eureka-pull-requests #122](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/122/) SUCCESS
This pull request looks good
 =||= "1.x Cache string values to reduce memory footprint.tbak02/25/15, 07:45:31 PMNaNNaNTomasz Bak02/25/15, 07:31:37 PMRefine string cache implementation.1
4352.x Implement custom EurekaInterestClient for Eureka Read server.tbak02/25/15, 05:30:18 PMThe custom client uses single subscription (fullRegistryFetch), and propagates properly channel level buffer markers to interest subscribers."[NetflixOSS » eureka » eureka-pull-requests #115](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/115/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #116](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/116/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #119](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/119/) SUCCESS
This pull request looks good
 =||= "2.x Implement custom EurekaInterestClient for Eureka Read server.tbak02/25/15, 05:30:18 PMThe custom client uses single subscription (fullRegistryFetch), and propagates properly channel level buffer markers to interest subscribers.NaNTomasz Bak02/25/15, 05:07:01 PMCode review recommendations.1
4362.x Changes to MultiSourcedDataHolder implementationDavid Liuqiangdavidliu02/25/15, 06:54:49 PM"- updates for the same origin:name Sources replace each other regardless of source.id
- deletes only execute when origin:name:id equals for the sources""[NetflixOSS » eureka » eureka-pull-requests #118](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/118/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #120](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/120/) SUCCESS
This pull request looks good
 =||= "2.x Changes to MultiSourcedDataHolder implementationDavid Liuqiangdavidliu02/25/15, 06:54:49 PM"- updates for the same origin:name Sources replace each other regardless of source.id
- deletes only execute when origin:name:id equals for the sources"NaNDavid Liu02/25/15, 06:50:52 PM"Merge remote-tracking branch 'upstream/2.x' into 2.x

Conflicts:
	eureka2-client/src/main/java/com/netflix/eureka2/client/interest/EurekaInterestClientImpl.java"1
4372.x upgrading rxnetty and spectator versionsDavid Liuqiangdavidliu02/25/15, 07:28:23 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #121](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/121/) SUCCESS
This pull request looks good
 =||= "2.x upgrading rxnetty and spectator versionsDavid Liuqiangdavidliu02/25/15, 07:28:23 PMNaNNaNNaNNaNNaN1
4382.x PeriodicDataCenterInfoResolver ignores errors per resolve.David Liuqiangdavidliu02/26/15, 12:09:22 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #123](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/123/) SUCCESS
This pull request looks good
 =||= "2.x PeriodicDataCenterInfoResolver ignores errors per resolve.David Liuqiangdavidliu02/26/15, 12:09:22 AMNaNNaNDavid Liu02/25/15, 11:56:21 PMPeriodicDataCenterInfoResolver ignores errors per resolve.1
4392.x Eureka server health monitoringtbak03/20/15, 07:54:35 PM"Eureka 2.0 health monitoring
# Concept

Each Eureka component manages its own health information, which is aggregated in one place where overall system health status is derived.

A component that wishes to provide its health status must implement:

``` java
public interface HealthStatusProvider<SUBSYSTEM> {

   Observable<HealthStatusUpdate<SUBSYSTEM>> healthStatus();
}
```

`healthStatus` method returns an observable of health status changes. The returned observable shall never emit an error, and should complete when the subsystem is shut down. Status value represents internal state of the component.  The health status information is captured in `HealthStatusUpdate` object:

``` java
public class HealthStatusUpdate<SUBSYSTEM> {

    public HealthStatusUpdate(Status status,
                              SubsystemDescriptor<SUBSYSTEM> description) {
      ...
    }

    public STATUS getStatus() { }

    public SubsystemDescriptor<SUBSYSTEM> getDescriptor() { }
}
```

`SubsystemDescriptor` JavaBean provides static, supplementary information primary for UIs.

The aggregation logic is captured in `HealthStatusAggregator` class, which itself extends `HealthStatusProvider`. Apart for returning the aggregated state, it provides access to its underlying components:

``` java
public interface HealthStatusAggregator<SUBSYSTEM extends HealthStatusAggregator<SUBSYSTEM>>
        extends HealthStatusProvider<SUBSYSTEM> {
    List<HealthStatusProvider<?>> components();
}
```
# Eureka server self registration

Eureka self registration service subscribes to `HealthStatusAggregator`, and updates its own `InstanceInfo.status` accordingly, which gets immediately propagated to Eureka registry.
# External Health check API
## REST API

Current Eureka health status can be accessed via REST GET method call:

```
curl -X GET http://eureka.host/eureka/health

HTTP/1.1 200 OK
HEALTHY
```
## WebSockets API

Clients wishing to receive live updates about Eureka health status, can connect to WebSocket endpoint:

```
open ws://eureka.host/eureka/ws/health

text-message: {
    ""descriptor"":{
        ""title"":""Client interest channel"",
        ""description"":""..."",
        ""type"":""InterestChannel""
    },
    ""status"":""DOWN""
}
text-message: {
    ""descriptor"":{
        ""title"":""Aggregated health check status"",
        ""description"":""..."",
        ""type"":""EurekaHealthStatusAggregator""
    },
    ""status"":""DOWN"",
}
...
text-message: {
    ""descriptor"": {
        ""title"":""Client interest channel"",
        ""description"":""...""
    },
    ""status"":""UP"",
}
text-message: {
    ""descriptor"":{
        ""title"":""Aggregated health check status"",
        ""description"":""..."",
        ""type"":""EurekaHealthStatusAggregator""
    },
    ""status"":""UP"",
}

```
# Karyon Admin UI

Aggregated and component level health check status values are exposed via a new Karyon admin UI tab. The associated `SubsystemDescriptor` objects provide descriptive information about each component, and possible states.""> > For example channel might be in { Idle, Connected, Closed } states. These states must be mapped to Eureka InstanceInfo.State.

Is there a value in having these as two different Status? IOW, why not have the components return `InstanceInfo.State`?

> > SubsystemDescriptor JavaBean provides static, supplementary information primary for UIs

I think we are conflating the health status with this granular information. 

Bigger question: ""Can the subsystem status better be exposed via metrics and have the system health as _a_ status, potentially aggregated over multiple sources?""

> > Clients wishing to receive live updates about Eureka health status can connect to WebSocket endpoint

In absence of subsystem statuses, Is this just the `forInterest` endpoint otherwise available for any interest in eureka?
 =||= This proposal, taken from a more generic perspective, seems like something that would be an interface in Karyon and services built on top should provide specific implementations. It should then be Karyon's responsibility to feed the aggregated status back to eureka for eureka status.
 =||= > Is there a value in having these as two different Status? IOW, why not have the components return InstanceInfo.State?

I would like to expose internal system health, so having original status values is beneficial.

> I think we are conflating the health status with this granular information.

It is not health status in a sense we have it for external application monitoring. The point here is to have access to this granular information.

> Bigger question: ""Can the subsystem status better be exposed via metrics and have the system health > as a status, potentially aggregated over multiple sources?""

Metrics are a must, and they are orthogonal to current status monitoring. Metric values could be collected from local counters (not remote monitoring system), and exposed as an additional insight information.

> In absence of subsystem statuses, Is this just the forInterest endpoint otherwise available for any interest in eureka?

Using forInterest would incur additional delay, and if read node is disconnected from write server, it would  never provide up to date value. But the whole point of my proposal is to expose internal component status, as an additional insight information.
 =||= Following the discussion I am removing component specific STATE type parameter. Each component will emit InstanceInfo.Status values. This will simplify API and implementation. If we find it too restrictive (we are now limited practically to DOWN/UP status values with no way to express partial component failures), we may consider putting it back in the future.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4402.x Eureka server providing backwards compatible eureka 1.0 REST endpointsDavid Liuqiangdavidliu03/30/15, 09:50:46 PM"Migration of ecosystems that currently rely on Eureka 1.0 to eureka 2.0 can be greatly eased if Eureka 2.0 is able to provide equivalent REST endpoints used by eureka 1.0 client.

Specifically, the endpoints to be supported are:
**Read Endpoints**
- GET /apps
- GET /apps/delta
- GET /apps/{appName}
- GET /vips/{vipAddress}

(optionally the read endpoints should support query parameter region={REGION})

**Write Endpoints**
- POST /apps/{appName}   (content == 1.0 InstanceInfo in JSON)
- PUT /apps/{appName}/{instanceId}?status={STATUS}&lastDirtyTimestamp={LASTDIRTYTIMESTAMP}""Done in #454 #473 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4412.x Eureka server should provide Status overridesDavid Liuqiangdavidliu06/02/16, 10:25:53 PM"# Concept

It is possible to override Eureka InstanceInfo information but issuing REST API call to any of the Eureka write cluster nodes. The override data will be kept in separate registry, and override information will be applied on the client interest stream.

``` java
public interface EurekaOverrideRegistry {
    Observable<Void> registerOverride(InstanceInfoOverride override);
    Observable<Void> removeOverride(String instanceId);

    ChangeNotification<InstanceInfoOverride> forInterest(Interest interests);
}

public class InstanceInfoOverride {
    private Source source;
    private final String instanceId;
    private final Set<Delta> overrides;
    ...
}
```

It is possible to override any InstanceInfo attribute, however this feature is provided primarily for status override.

The override information is replicated within the cluster in the same way regular InstanceInfo data are replicated. As a client will usually resolve DNS entry when making a REST call it is very likely that each override update (create/remove) will end up on different write cluster node. This will make a lot of room for different race conditions to happen.
# Conflict resolution

Because there is no direct, permanent association between client and a server during override, the sourced/multi copy instance info holder approach cannot be applied here. Instead, single copy of override data is maintained in the registry with the following updates semantic:

Local EurekaOverrideRegistry.registerOverride:
- if there is no entry, add a new one and replicate it to another nodes in the write cluster
- if there is an entry, and it is different, swap it with the current one and replicate it
- if there is an entry identical to the new one, ignore it

Local EurekaOverrideRegistry.removeOverride:
- if there is no entry, replicate the delete operation to remote nodes
- if there is an entry, remove it, and replicate the delete operation to remote nodes

Replicated EurekaOverrideRegistry.registerOverride:
- if there is no entry, add a new one
- if there is an entry, and it is different, swap it
- if there is an entry identical to the new one, ignore it

Replicated EurekaOverrideRegistry.removeOverride:
- if there is no entry, ignore it
- if there is an entry, remove it, and if entry source is this server, replicate the delete operation to remote nodes

_Examples 1 Override register/remove on the same server_
- local registration is followed by data replication
- local removal, removes local entry and forwards delete operation to other nodes in the cluster
- remote endpoints remove their entries, and since the source is different from their own, no further replication is done

_Example 2 Override register/remove on two different nodes, with full replication between the two events_
- local registration is followed by data replication
- local removal, removes local entry and forwards delete operation to other nodes in the cluster
- remote endpoints remove their entries, the one that handled registration, delegates further remove operation
- all nodes get again the same remove request, but as there is no associated entry, it is ignored

_Example 3 Override register/remove on two different nodes, before replication happens between the two events_
- local registration is followed by data replication
- when another node receives removeOverride, there is no associated entry yet (it was not replicated yet). The remove operation is replicated further.
- following is registerOverride replication to remote nodes
- remote endpoints that received register before remove, will drop an entry
- remote endpoints that received register after remove,  will have an entry in the registry
- remote endpoint that received the original removeOverride, will remove its entry, and send another removeOverride to its peers
- remote endpoints that sill hold the copy of the data, will remove it

This approach solves simple cases of race conditions, but not all of them. For example if multiple override requests are issued one after another with different content data, each server may be left with different view than its peers. To solve this problem, we would have to introduce operation versioning, and require a client to generate unique and monotonically increasing version values for subsequent registerOverride operations, and use proper version during removeOverride. If no version is provided by client, we would fallback to previously described behavior.
# REST API

URI encoded form:

``` HTTP
PUT /eureka2/v1/overrides/{id}?${field_name}=${field_value}
```

`field_name` is a name of any of the `InstanceInfo` field.

Request with a body:

``` HTTP
PUT /eureka2/v1/overrides/{id}
{
    'status': 'OUT_OF_SERVICE'
}
```""> It is possible to override any InstanceInfo attribute, however this feature is provided primarily for status override.

Since, we know that it is useful only for status overrides, is there any value in making it generic for any override? Do we see this applying to any other attribute in the future?

> The override data will be kept in separate registry

Does this mean, we will always be merging multiple notifications from multiple `Observable` sources? Is the override an optional feature or it is always available with the server? 
If it is always available, why would we want to put it in a different registry and incur the merge overhead?

> If no version is provided by client, we would fallback to previously described behavior.

It looks like we know that the operation with no version is bound to have inconsistent data. So, should we disallow operations without versions?

It seems we are missing a case of disaster recovery, where all eureka nodes go down and all override statuses are wiped out. Contrary to the usual case, where the data is regenerated, this data will never be regenerated. Eureka 1.x handles this case by querying the AWS API to see if the owning ASG (or may be instance) is enabled or not. I think we should do that too, WDYT?

Having said the above, do you think the source of truth (AWS status) can be used for conflict resolution?
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4422.x Eureka health status monitoringtbak02/27/15, 08:26:36 PMSee issue #439"[NetflixOSS » eureka » eureka-pull-requests #124](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/124/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #125](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/125/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #126](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/126/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #127](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/127/) SUCCESS
This pull request looks good
 =||= "2.x Eureka health status monitoringtbak02/27/15, 08:26:36 PMSee issue #439NaNTomasz Bak02/27/15, 08:22:18 PMUpdates recommended in code review.1
4432.x Configuration update to work properly in local environment.tbak02/27/15, 10:03:52 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #128](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/128/) SUCCESS
This pull request looks good
 =||= "2.x Configuration update to work properly in local environment.tbak02/27/15, 10:03:52 PMNaNNaNTomasz Bak02/27/15, 09:49:04 PMConfiguration update to work properly in local environment.1
4442.x Client API refactor part 2 (creation of clients) for issue #409David Liuqiangdavidliu03/09/15, 08:50:56 PMRemoved the combo EurekaClient and the two independent clients for registration and interest now each have their own builders."[NetflixOSS » eureka » eureka-pull-requests #129](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/129/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #131](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/131/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #141](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/141/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #142](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/142/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #146](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/146/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #147](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/147/) SUCCESS
This pull request looks good
 =||= "2.x Client API refactor part 2 (creation of clients) for issue #409David Liuqiangdavidliu03/09/15, 08:50:56 PMRemoved the combo EurekaClient and the two independent clients for registration and interest now each have their own builders.NaNDavid Liu03/09/15, 08:45:22 PMfine tuning resolve access1
4452.x Eureka WEB server with HTTP and WebSocket endpoints.tbak03/02/15, 07:05:00 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #130](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/130/) SUCCESS
This pull request looks good
 =||= "2.x Eureka WEB server with HTTP and WebSocket endpoints.tbak03/02/15, 07:05:00 PMNaNNaNTomasz Bak02/28/15, 02:11:29 AMEureka WEB server with HTTP and WebSocket endpoints.1
4462.x Replication fixDavid Liuqiangdavidliu03/02/15, 09:51:06 PM"- handler should subscribe to lifecycle and operation with same subscriber for retries
- retryableChannelFactory merge internal channel op with lifecycle instead of independent subscribe""[NetflixOSS » eureka » eureka-pull-requests #132](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/132/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #133](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/133/) SUCCESS
This pull request looks good
 =||= "2.x Replication fixDavid Liuqiangdavidliu03/02/15, 09:51:06 PM"- handler should subscribe to lifecycle and operation with same subscriber for retries
- retryableChannelFactory merge internal channel op with lifecycle instead of independent subscribe"NaNDavid Liu03/02/15, 09:33:13 PMMerge remote-tracking branch 'upstream/2.x' into 2.x-replication-fix1
4471.x Upgrade to nebula 2.2.7tbak03/02/15, 10:40:17 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #134](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/134/) SUCCESS
This pull request looks good
 =||= "1.x Upgrade to nebula 2.2.7tbak03/02/15, 10:40:17 PMNaNNaNTomasz Bak03/02/15, 10:28:11 PMUpgrade to nebula 2.2.71
4482.x Eureka Read - Exception handling in DNS loadingDavid Liuqiangdavidliu03/09/15, 08:53:46 PM"ResourceLoaderException thrown in DnsChangeNotificationSource.java does not seem to be handled by callers, and have observed to be thrown on the read server:

<pre>
Exception in thread ""RxComputationThreadPool-4"" java.lang.IllegalStateException: Fatal Exception thrown on Scheduler.Worker thread.
    at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:54)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask.run(FutureTask.java:262)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:744)
Caused by: com.netflix.eureka2.utils.rx.ResourceObservable$ResourceLoaderException: DNS failure on subsequent access
    at com.netflix.eureka2.interests.host.DnsChangeNotificationSource$DnsResolverTask.reload(DnsChangeNotificationSource.java:100)
    at com.netflix.eureka2.utils.rx.ResourceObservable$ResourceLoaderExecutor.call(ResourceObservable.java:219)
    at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:47)
    ... 7 more
Caused by: javax.naming.CommunicationException: DNS error [Root exception is java.net.SocketTimeoutException: Receive timed out]; remaining name 'some.record.name'
    at com.sun.jndi.dns.DnsClient.query(DnsClient.java:300)
    at com.sun.jndi.dns.Resolver.query(Resolver.java:81)
    at com.sun.jndi.dns.DnsContext.c_getAttributes(DnsContext.java:430)
    at com.sun.jndi.toolkit.ctx.ComponentDirContext.p_getAttributes(ComponentDirContext.java:231)
    at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.getAttributes(PartialCompositeDirContext.java:139)
    at com.sun.jndi.toolkit.ctx.PartialCompositeDirContext.getAttributes(PartialCompositeDirContext.java:127)
    at javax.naming.directory.InitialDirContext.getAttributes(InitialDirContext.java:142)
    at com.netflix.eureka2.interests.host.DnsChangeNotificationSource$DnsResolverTask.resolveName(DnsChangeNotificationSource.java:135)
    at com.netflix.eureka2.interests.host.DnsChangeNotificationSource$DnsResolverTask.resolveServerDN(DnsChangeNotificationSource.java:123)
    at com.netflix.eureka2.interests.host.DnsChangeNotificationSource$DnsResolverTask.reload(DnsChangeNotificationSource.java:95)
    ... 9 more
Caused by: java.net.SocketTimeoutException: Receive timed out
    at java.net.PlainDatagramSocketImpl.peekData(Native Method)
    at java.net.DatagramSocket.receive(DatagramSocket.java:767)
    at com.sun.jndi.dns.DnsClient.doUdpQuery(DnsClient.java:411)
    at com.sun.jndi.dns.DnsClient.query(DnsClient.java:203)
    ... 18 more
</pre>""fixed
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4492.x Eureka Read - forInterest to read server composed with buffers and snapshots not batching as expectedDavid Liuqiangdavidliu03/09/15, 08:53:24 PM"When forInterest() client API is composed with .compose(buffers).compose(snapshots), the expected result are batches of full instanceInfo snapshots. However when the below single testApp is used to query the write and read servers, different behaviour is observed.

For the write server, the correct counts are observed (counts for each onNext are ~ equal with the expected delta differences).

For the read server, the initial observed counts are consecutive increasing integers from 1 to the final expected count (i.e. batch markers must be generated per notification item), after which the expected behaviour is observed.

``` java
public class TestApp {
    public static void main(String[] args) throws Exception {
        ServerResolver readResolver = ServerResolvers.just(""localhost"", 12203);

        EurekaClient interestClient = EurekaClientBuilder.discoveryBuilder()
                .withReadServerResolver(readResolver)
                .build();

        interestClient.forInterest(Interests.forFullRegistry())
                .compose(ChangeNotificationFunctions.<InstanceInfo>buffers())
                .compose(ChangeNotificationFunctions.<InstanceInfo>snapshots())
                .subscribe(new Subscriber<Set<InstanceInfo>>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(Set<InstanceInfo> instanceInfos) {
                        System.out.println(instanceInfos.size());
                    }
                });

        Thread.sleep(60000);
        System.out.println(""finished"");
    }
}
```""fixed
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
450Is it possible to use a generic data synchronization framework?futurely06/02/16, 10:25:49 PM"For example, ""AeroGear data synchronization project is an implementation of Google's Differential Synchonrization by Neil Fraser"".
https://github.com/aerogear/aerogear-sync-server
https://aerogear.org/sync/
https://aerogear.org/docs/specs/aerogear-data-sync/""@futurely we will take a look into this. Thanks for the links.
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4512.x Bug fix for issue #449 (missing/invalid batching delineation)tbak03/03/15, 10:06:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #137](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/137/) SUCCESS
This pull request looks good
 =||= "2.x Bug fix for issue #449 (missing/invalid batching delineation)tbak03/03/15, 10:06:44 PMNaNNaNTomasz Bak03/03/15, 09:15:04 PMUpdates recommended in code review.1
452Fix bug #448tbak03/03/15, 11:37:24 PMHandle properly recoverable and non-recoverable errors."[NetflixOSS » eureka » eureka-pull-requests #138](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/138/) SUCCESS
This pull request looks good
 =||= "Fix bug #448tbak03/03/15, 11:37:24 PMHandle properly recoverable and non-recoverable errors.NaNTomasz Bak03/03/15, 11:05:25 PM"Fix bug #448

Handle properly recoverable and non-recoverable errors."1
4542.x Eureka 1.x backwards compatible API (query operations)tbak03/06/15, 10:43:19 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #139](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/139/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #140](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/140/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #143](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/143/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #144](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/144/) SUCCESS
This pull request looks good
 =||= Rethinking this a little bit from a broader perspective, if we want to provide backwards compatibility with Eureka1, it might be easier to dependent on eureka 1.x server modules and reuse the same server side core components. The the work necessary will only be:
- add the necessary rxNetty REST resources to talk to the 1.x server components
- bridge interest from 2.x registry to 1.x registry
- bridge registrations to 1.x registry to the 2.x registry
 =||= I thought first about the same, but:
1. the proxy code is very simple, and more efficient than maintaining
parallel registry
2. we would have to replicate 1.x registry to 2.x because of registering
1.x clients
3. we do not want to reuse replication mechanism from 1.x
4. cross region replication should be bridged directly to Eureka 2 cross
region replication mechanism (whatever it will be)

I think we would get ultimately in a lot of accidental complexity by
bringing in all Eureka 1 server.
But data mode, codecs are reused in this implementation.

On Fri, Mar 6, 2015 at 1:47 PM, qiangdavidliu notifications@github.com
wrote:

> Rethinking this a little bit from a broader perspective, if we want to
> provide backwards compatibility with Eureka1, it might be easier to
> dependent on eureka 1.x server modules and reuse the same server side core
> components. The the work necessary will only be:
> - add the necessary rxNetty REST resources to talk to the 1.x server
>   components
> - bridge interest from 2.x registry to 1.x registry
> - bridge registrations to 1.x registry to the 2.x registry
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/454#issuecomment-77642107.
 =||= [NetflixOSS » eureka » eureka-pull-requests #145](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/145/) SUCCESS
This pull request looks good
 =||= "2.x Eureka 1.x backwards compatible API (query operations)tbak03/06/15, 10:43:19 PMNaNNaNTomasz Bak03/06/15, 09:30:54 PMCode review recommended changes.1
4551.x discovery client treats HTTP redirects as errorstbak04/09/15, 09:37:27 PMAlthough discovery client properly handles HTTP request redirects, every returned status code other than 200 is regarded as an error. NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
456update dependency versionsbrharrington03/11/15, 05:18:16 AM"The primary one that matters to me is ribbon. The older
version is still pulling in 'com.netflix.rxjava:rxjava-core'
which conflicts with classes in 'io.reactivex:rxjava'.

This change also changes the aws dependency to only pull
in the parts that are actually used by eureka client.""[NetflixOSS » eureka » eureka-pull-requests #148](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/148/) SUCCESS
This pull request looks good
 =||= Thanks @brharrington . We'll look at a release for this.
 =||= "update dependency versionsbrharrington03/11/15, 05:18:16 AM"The primary one that matters to me is ribbon. The older
version is still pulling in 'com.netflix.rxjava:rxjava-core'
which conflicts with classes in 'io.reactivex:rxjava'.

This change also changes the aws dependency to only pull
in the parts that are actually used by eureka client."NaNBrian Harrington03/11/15, 12:02:07 AM"update dependency versions

The primary one that matters to me is ribbon. The older
version is still pulling in 'com.netflix.rxjava:rxjava-core'
which conflicts with classes in 'io.reactivex:rxjava'.

This change also changes the aws dependency to only pull
in the parts that are actually used by eureka client."1
4572.x Adding basic randomisation to SelfClosingConnectionDavid Liuqiangdavidliu03/12/15, 11:16:17 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #149](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/149/) SUCCESS
This pull request looks good
 =||= "2.x Adding basic randomisation to SelfClosingConnectionDavid Liuqiangdavidliu03/12/15, 11:16:17 PMNaNNaNDavid Liu03/12/15, 01:16:37 AMAdding basic randomisation to SelfClosingConnection1
458Lookup based upon service metadata?Bill Bauernschmidtwbauern03/19/15, 08:15:35 PM"Is there any way in Eureka to do a service lookup based upon values in the service metadata?

Thanks!""No, it is not possible. You will have to download all registry and do filtering yourself. Eureka supports application GETs, so if your application set is limited, you can try that route.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4591.x Wrapping RemoteRegionFetch in TimedSupervisorTaskDavid Liuqiangdavidliu03/12/15, 10:13:04 PM"Wrap around the TimedSupervisorTask for better reliability.

The remoteRegionFetchExecutor can have a max of 2 concurrent threads executing a remote region fetch.""[NetflixOSS » eureka » eureka-pull-requests #150](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/150/) SUCCESS
This pull request looks good
 =||= Looks good.
 =||= [NetflixOSS » eureka » eureka-pull-requests #151](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/151/) SUCCESS
This pull request looks good
 =||= "1.x Wrapping RemoteRegionFetch in TimedSupervisorTaskDavid Liuqiangdavidliu03/12/15, 10:13:04 PM"Wrap around the TimedSupervisorTask for better reliability.

The remoteRegionFetchExecutor can have a max of 2 concurrent threads executing a remote region fetch."NaNDavid Liu03/12/15, 10:06:34 PMAdding generation guard for app and delta updates on RemoteRegistry1
4602.x Adding SecureVipInterest to Avro Schema + additional Schema testsDavid Liuqiangdavidliu03/13/15, 12:59:05 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #152](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/152/) SUCCESS
This pull request looks good
 =||= "2.x Adding SecureVipInterest to Avro Schema + additional Schema testsDavid Liuqiangdavidliu03/13/15, 12:59:05 AMNaNNaNDavid Liu03/13/15, 12:50:39 AMAdding SecureVipInterest to Avro Schema + additional Schema tests1
4612.x More Avro schema fixesDavid Liuqiangdavidliu03/13/15, 03:19:52 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #153](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/153/) SUCCESS
This pull request looks good
 =||= "2.x More Avro schema fixesDavid Liuqiangdavidliu03/13/15, 03:19:52 AMNaNNaNDavid Liu03/13/15, 03:12:42 AMMore Avro schema fixes1
462Eureka2 DP ReleaseBen Christensenbenjchristensen04/09/15, 09:37:00 PMThe last release DP4 was in December, are you in a position to provide another release? I'm interested in doing further testing with it in the ReactiveLab project. "We are pretty close to doing an RC1 release. We were hoping to do this this week but wanted to double check some server-side metrics so right now RC1 is looking to be next week. Would that be soon enough for you?
 =||= Next week is good. Thank you.
 =||= @benjchristensen rc.1 is now released and we have updated wiki documentation as well for configuration and use. Please take a look at: 
- https://github.com/Netflix/eureka/wiki/Eureka-2.0-Client-Configuration-And-Use
- https://github.com/Netflix/eureka/wiki/Eureka-2.0-Server-Configuration-And-Use
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4632.x Minor renaming + adding some randomisation in the Ocelli LB ResolverDavid Liuqiangdavidliu03/13/15, 11:45:22 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #154](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/154/) SUCCESS
This pull request looks good
 =||= "2.x Minor renaming + adding some randomisation in the Ocelli LB ResolverDavid Liuqiangdavidliu03/13/15, 11:45:22 PMNaNNaNDavid Liu03/13/15, 11:39:48 PMMinor fix1
4642.x Use concatMap instead of flatMap for sending interest and replication messagesDavid Liuqiangdavidliu03/16/15, 05:22:53 PM"- use concatMap instead of flatMap for sending interest and replication messages
- update channel retries to default at 1s instead of 500ms""[NetflixOSS » eureka » eureka-pull-requests #155](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/155/) SUCCESS
This pull request looks good
 =||= "2.x Use concatMap instead of flatMap for sending interest and replication messagesDavid Liuqiangdavidliu03/16/15, 05:22:53 PM"- use concatMap instead of flatMap for sending interest and replication messages
- update channel retries to default at 1s instead of 500ms"NaNDavid Liu03/16/15, 06:17:40 AMuse concatMap instead of flatMap for sending interest and replication messages.1
4652.x bug fix: notification source was getting lost in InitStateHolderDavid Liuqiangdavidliu03/16/15, 08:26:02 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #156](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/156/) SUCCESS
This pull request looks good
 =||= "2.x bug fix: notification source was getting lost in InitStateHolderDavid Liuqiangdavidliu03/16/15, 08:26:02 PMNaNNaNDavid Liu03/16/15, 08:20:22 PMbug fix: notification source was getting lost in InitStateHolder1
4662.x Rx-fy Index onSubscribe to be tolerant to backpressureDavid Liuqiangdavidliu03/17/15, 01:34:12 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #157](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/157/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #158](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/158/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #159](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/159/) SUCCESS
This pull request looks good
 =||= "2.x Rx-fy Index onSubscribe to be tolerant to backpressureDavid Liuqiangdavidliu03/17/15, 01:34:12 AMNaNNaNDavid Liu03/17/15, 01:14:38 AMupping a test wait time1
4672.x Rx backpressure support for server send of ChangingNotificationsDavid Liuqiangdavidliu06/02/16, 10:25:33 PM"Current eureka constructs for sending ChangeNotifications (NotificationsSubject/PauseableSubject etc) are implemented before rxJava backpressure support was available. The upcoming RxNetty 0.5 release will contain RxJava backpressure integration with channel read & write.

Once this release is available, server side send of ChangeNotifications should be reworked so that backpressure is supported all the way up to the interest indexes.""archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4682.x minor fixesDavid Liuqiangdavidliu03/18/15, 06:18:02 AMAlso reverting interestChannel and SenderReplicationChannel send to flatmap instead of concatMap. Added TODOs to re-address these once we rework the interest pipeline to properly address backpressure (github issue #467)"[NetflixOSS » eureka » eureka-pull-requests #161](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/161/) SUCCESS
This pull request looks good
 =||= "2.x minor fixesDavid Liuqiangdavidliu03/18/15, 06:18:02 AMAlso reverting interestChannel and SenderReplicationChannel send to flatmap instead of concatMap. Added TODOs to re-address these once we rework the interest pipeline to properly address backpressure (github issue #467)NaNDavid Liu03/18/15, 05:26:05 AM"Reverting interestChannel and SenderReplicationChannel send to flatmap instead
of concatMap. Added TODOs to re-address these once we rework the interest pipeline
to properly address backpressure (github issue #467)"1
4692.x NotifyingInstanceInfoHolder eagerly promote updates from local source to snapshot if current snapshot is not from local sourceDavid Liuqiangdavidliu03/18/15, 06:38:31 AM"This is done to fix the following race condition:
1. Write Servers A and B replicate to each other
2. Instance X registers with server A (A -> X local, B -> X replicated)
3. Instance X registration channel close and reconnect to server B
3a. A put X local into eviction queue
3b. B put X replicated into eviction queue
4. X register an unchanged instanceInfo to server B
4a. B's holder add X as a second copy as the original replicated copy is yet to be evicted
4b. Because the B holder's copies diff to empty delta, a CN with source local is never published
5. B's senderReplicationChannel disconnects and reconnects to A
5a. B's initState never sees the new X local as the CN is never published, resulting in X
not replicating to server A.""[NetflixOSS » eureka » eureka-pull-requests #162](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/162/) SUCCESS
This pull request looks good
 =||= Actually rethinking about this a similar issue can also occur on the removal side as well, which will lead to stale instances. This will need a deeper think.
 =||= "2.x NotifyingInstanceInfoHolder eagerly promote updates from local source to snapshot if current snapshot is not from local sourceDavid Liuqiangdavidliu03/18/15, 06:38:31 AM"This is done to fix the following race condition:
1. Write Servers A and B replicate to each other
2. Instance X registers with server A (A -> X local, B -> X replicated)
3. Instance X registration channel close and reconnect to server B
3a. A put X local into eviction queue
3b. B put X replicated into eviction queue
4. X register an unchanged instanceInfo to server B
4a. B's holder add X as a second copy as the original replicated copy is yet to be evicted
4b. Because the B holder's copies diff to empty delta, a CN with source local is never published
5. B's senderReplicationChannel disconnects and reconnects to A
5a. B's initState never sees the new X local as the CN is never published, resulting in X
not replicating to server A."NaNDavid Liu03/18/15, 06:20:27 AM"NotifyingInstanceInfoHolder eagerly promote updates from local source to snapshot
if current snapshot is not from local source. This is done to fix the following race
condition:
1. Write Servers A and B replicate to each other
2. Instance X registers with server A (A -> X local, B -> X replicated)
3. Instance X registration channel close and reconnect to server B
3a. A put X local into eviction queue
3b. B put X replicated into eviction queue
4. X register an unchanged instanceInfo to server B
4a. B's holder add X as a second copy as the original replicated copy is yet to be evicted
4b. Because the B holder's copies diff to empty delta, a CN with source local is never published
5. B's senderReplicationChannel disconnects and reconnects to A
5a. B's initState never sees the new X local as the CN is never published, resulting in X
not replicating to server A."1
4701.x Use Jackson JSON serializer instead of XStream to improve serialization performance/memory usage.tbak05/12/15, 08:43:21 PMXML serialization is still done by XStream."[NetflixOSS » eureka » eureka-pull-requests #220](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/220/) SUCCESS
This pull request looks good
 =||= The only further enhancements I can see:

Of the 543M that is allocate with the new code:

InstanceInfo$Builder.setVIPAddress  10M
- this is due to the regex matching that I think is intended for eureka registration
- this could benefit from a deser specific implementation

All of the other allocations are either for the String cache or HashMaps used by Jackson.  My only further questions if what the memory allocation would be if we used Jackson's native de-serialization.  I might ask the developers to see if they expect more or less allocation with their deserializers.  I think it might be likely as now all of our allocation is in HashMap allocation.  I can't see how they need to long term create HashMaps if we're directly creating POJO's.
 =||= Looks good!
 =||= > InstanceInfo$Builder.setVIPAddress 10M

I have added two more setters to `InstanceInfo` builder for vip/secure vip, that do not do macro expansion.
 =||= [NetflixOSS » eureka » eureka-pull-requests #221](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/221/) SUCCESS
This pull request looks good
 =||= "1.x Use Jackson JSON serializer instead of XStream to improve serialization performance/memory usage.tbak05/12/15, 08:43:21 PMXML serialization is still done by XStream.NaNTomasz Bak05/12/15, 04:30:13 PMAdd additional setters to InstanceInfo builder to avoid macro expansion during deserialization process.1
471Updating to new version of nebula.netflixossRob Spieldennerrspieldenner03/19/15, 08:52:14 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #163](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/163/) SUCCESS
This pull request looks good
 =||= "Updating to new version of nebula.netflixossRob Spieldennerrspieldenner03/19/15, 08:52:14 PMNaNNaNRob Spieldenner03/19/15, 08:45:20 PMUpdating to new version of nebula.netflixoss1
4722.x InstanceInfo encoding efficiency measurement tool.tbak03/19/15, 11:30:40 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #164](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/164/) SUCCESS
This pull request looks good
 =||= "2.x InstanceInfo encoding efficiency measurement tool.tbak03/19/15, 11:30:40 PMNaNNaNTomasz Bak03/19/15, 11:13:56 PMInstanceInfo encoding efficiency measurement tool.1
4732.x Eureka 1.x backwards compatible API with delta fetch support.tbak03/25/15, 03:02:47 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #165](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/165/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #169](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/169/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #170](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/170/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #174](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/174/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #177](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/177/) SUCCESS
This pull request looks good
 =||= "2.x Eureka 1.x backwards compatible API with delta fetch support.tbak03/25/15, 03:02:47 AMNaNNaNTomasz Bak03/25/15, 02:52:19 AMFurther updates after code review.1
4742.x Updating runCluster config in testkit build.gradleDavid Liuqiangdavidliu03/20/15, 06:46:13 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #166](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/166/) SUCCESS
This pull request looks good
 =||= "2.x Updating runCluster config in testkit build.gradleDavid Liuqiangdavidliu03/20/15, 06:46:13 PMNaNNaNDavid Liu03/20/15, 06:32:00 PMUpdating runCluster config in testkit build.gradle1
4752.x Use a lighter Interest Client implementation for EurekaServerResolverDavid Liuqiangdavidliu03/30/15, 09:38:37 PMCurrently the EurekaServerResolver creates a new (full) EurekaInterestClient to get a first batch of read server data from write severs, and shuts it down immediately afterwards. This is expensive for an operation that should be relatively light."fixed in #487
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4762.x Implement registry read with fallback to write server for interest clientDavid Liuqiangdavidliu06/02/16, 10:25:29 PM"Currently canonical  eureka interest clients call EurekaServerResolver (which reads the latest read server notifications each time resolve() is called) to connect to read servers. A better approach would be to supply a composite resolve when setting up the interest client that
1. reads read server information from the registry if available.
2. fallback to EurekaServerResolver otherwise.

This will also mean that on the first forInterest, the interest client should automatically subscribe to the readServer information.""archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4772.x Write Server Initial SyncDavid Liuqiangdavidliu04/30/15, 09:20:52 PMWhen a write server boots up, it should not be marked as UP until after it has synced up with all of it's peers. A corollary of this is that the replication protocol need to support metadata exchanges to indicate to receiver servers that it has received all the information the sender has for the initial sync."# Proposed implementation

Eureka server bootstrapping may happen from different sources, depending on Eureka cluster lifecycle:
- for initial startup, there is no prior data available, so servers should start with empty registries
- for existing cluster, when a new write server is brought up, it should ideally take full registry content from one of its peers
- when full cluster is restarted, or there is other reason why a new server cannot bootstrap itself from a peer, it should load last known registry content from an external source/backup storage. Multiple backup storages may be implemented here.

In the original design, we envisaged that peer bootstrapping would be implemented within replication protocol itself:
- a new node chooses one of its peers, and initiates full registry bootstrap
- the chosen peer sends all its registry content, including local and any other registrations
- one bootstrapping is done, a regular replication mode is enabled

This implementation has a few drawbacks:
- complicates replication protocol, with additional mode of operation
- has complex failover scenario - if bootstrapping from first node fails, we have to restart it from another peer, with which we may have already established replication channel.
- it does not cover bootstrapping from external sources, and how the two would interact

In general, we need an API and some pluggability mechanism where multiple bootstrap sources may be provided. They should be also prioritized, so for example peer bootstrap is always first choice. The proposed API consists of two interfaces:

``` java
public class RegistryBootstrapCoordinator {

    @Inject
    public RegistryBootstrapCoordinator(RegistryBootstrapService primaryRegistryBootstrapService,
                                        Set<RegistryBootstrapService> additionalRegistryBootstrapServices,
                                        SourcedEurekaRegistry registry) {
        // Setup bootstrap sources
    }

    @PostConstruct
    public void bootstrap() {
        // Initiate registry upload from the configured bootstrap source
    }
}

public interface RegistryBootstrapService {

     Observable<Void> loadIntoRegistry(SourcedEurekaRegistry<InstanceInfo> registry, Source source);
}
```

Each registry entry provided by bootstrap source is associated with `Source.BOOTSTRAP`, and is put immediately on eviction queue. If bootstrapping fails, the server is enabled anyway, as eventually the up to date state will be reconstructed from the registering clients. The bootstrap process is guarded by a timeout, which if crossed stops it and enables the normal operation mode of the server.

Peer bootstrapping instead of replication protocol, uses regular interest subscription with full registry fetch, with failover mechanism switching to another available service.

# Server availability status

Within Eureka write cluster we cannot depend on instance registered status, when deciding if a server is up or down. Instead this information has to be provided somehow when connecting to the server. A few options may be envisaged here:
- Embed server availability in a framing protocol itself, discarding all requests until server is up. A remote endpoint would receive a special frame asking it to disconnect.
- Implement application level hello message exchange, and embedded server availability status within it.
- Implement negative acknowledgment replies (NACK), carrying over detailed error status similarly to HTTP protocol. If `NACK.SERVER_UNAVAILABLE` reply is received, a connection to the given server should be dropped.
 =||= What will be the downside of only considering option 3:

> When full cluster is restarted, or there is other reason why a new server cannot bootstrap itself from a peer, it should load last known registry content from an external source/backup storage. Multiple backup storages may be implemented here.

as a ""bootstrap"" scenario and any other scenario as a usual replication scenario? In other words, what is the usecase of getting the entire registry contents from a source (peer or backup) when other peers are available in the cluster?

AFAIU, the entire registry would be required to assert if it is safe to serve registry contents to clients or not. That assertion will be based on the number of instances in a peer's registry. If this is the only reason for the bootstrap, I propose the following:
- Modify replication protocol to also send; 
  - total instances in the peer registry
  - Number of peers
- Modify replication change notification stream to include a marker when the local registry (owned by that node) is streamed completely.

For a node starting up, it should do the following:
1. Attempt to connect to all peers.
2. Get the number of peers and registry information from all peers.
3. If all other peers are reachable then connect to all of them and wait till all of them have streamed all their local registry content.
4. If any of the peer is unreachable or not ready to serve traffic, connect to the backup store to fetch the last known registry information.

A node would start serving registry information to clients, if it has received the registry contents. We may also choose to have some heuristics around how much of the registry information we should wait for in case nodes are not able to stream all their data before disconnect.

The positive of this approach is that you would not get into the hierarchy of bootstrap sources and would also eliminate the need of full registry fetch from a peer in spite of all peers being available.

> > Instead this information has to be provided somehow when connecting to the server. A few options may be envisaged here

I did not quiet understand the difference between the options here. All the options look like sending a message ""Not available for registry fetch"" and closing the connection. Since, the protocol is framed, so you would have to send the message as a different frame, isn't?
 =||= Some key points from our offline discussion:
- bootstrapping from replication channel as a first step is a good thing, but slightly complex to implement. We will not do this now, but possibly some time in the future
- doing full registry fetch from a peer or backup cluster should be fast enough, to not impact server bootstrapping time too much
- we will have single external bootstrap source, so the hierarchy proposed above is not needed

What we will provide now for write server bootstrap is a bootstrapping mechanism from either peer write cluster node or external backup cluster (configuration choice).
 =||= Implemented by PR #500 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4782.x code cleanupDavid Liuqiangdavidliu03/20/15, 09:38:39 PMPauseableSubject was created sometime ago as a replacement for NotificationsSubject (code equivalent), but some classes have not been migrated to use the new version. Removing NotificationsSubject and migrating all necessary classes."[NetflixOSS » eureka » eureka-pull-requests #167](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/167/) SUCCESS
This pull request looks good
 =||= "2.x code cleanupDavid Liuqiangdavidliu03/20/15, 09:38:39 PMPauseableSubject was created sometime ago as a replacement for NotificationsSubject (code equivalent), but some classes have not been migrated to use the new version. Removing NotificationsSubject and migrating all necessary classes.NaNDavid Liu03/20/15, 09:25:30 PM"PauseableSubject was created sometime ago as a replacement for NotificationsSubject
(functionally equivalent), but some classes have not been migrated to use the new
version. Removing NotificationsSubject and migrating all necessary classes."1
4792.x DnsResolver query dns on-demand per resolve()David Liuqiangdavidliu03/24/15, 12:23:36 AMDnsResolver query dns on-demand per resolve() call instead of maintaining a background task to constantly poll dns."[NetflixOSS » eureka » eureka-pull-requests #168](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/168/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #171](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/171/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #172](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/172/) SUCCESS
This pull request looks good
 =||= "2.x DnsResolver query dns on-demand per resolve()David Liuqiangdavidliu03/24/15, 12:23:36 AMDnsResolver query dns on-demand per resolve() call instead of maintaining a background task to constantly poll dns.NaNDavid Liu03/24/15, 12:14:10 AMMove stream switch to ioScheduler up so it does not affect tests1
4812.x Complementary change to pull #469 for the removal case.David Liuqiangdavidliu03/24/15, 01:54:02 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #173](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/173/) SUCCESS
This pull request looks good
 =||= "2.x Complementary change to pull #469 for the removal case.David Liuqiangdavidliu03/24/15, 01:54:02 AMNaNNaNDavid Liu03/24/15, 01:46:31 AMComplementary change to pull #469 for the removal case.1
4822.x Registry attach specific subjects on demand for each Source that has an interest registeredDavid Liuqiangdavidliu06/02/16, 10:25:26 PM"The sourced registry today uses a single subject for ChangeNotification publishes and use .filter() on this stream to generate source specific interest notifications. This leads to a case where notifications for certain sources can be lost (i.e. during a holder snapshot change over). This especially affects replication today.

Pull requests #469 and #481 attempts a quick fix for this problem, but going forward a more generic solution should be provided. For example, the registry may dynamically create and attach CN subjects for specific sources as interests are specified.""archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4831.x Make TimedSupervisorTask thread pool configurable for remote region replicationtbak03/24/15, 10:34:18 PMAdd thread pool level gauge for observing current thread usage level."[NetflixOSS » eureka » eureka-pull-requests #175](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/175/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #176](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/176/) SUCCESS
This pull request looks good
 =||= "1.x Make TimedSupervisorTask thread pool configurable for remote region replicationtbak03/24/15, 10:34:18 PMAdd thread pool level gauge for observing current thread usage level.NaNTomasz Bak03/24/15, 09:11:44 PM"Make TimedSupervisorTask thread pool configurable for remote region replication.
Add thread pool level gauge for observing current thread usage level."1
4842.x channel connection initial handshakesDavid Liuqiangdavidliu06/02/16, 10:25:12 PMEnhance current eureka channels to provide an initial handshake at connection time to establish identity, protocol, heartbeat rate etc."archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4852.x Replace replication channel with Interest channelDavid Liuqiangdavidliu06/02/16, 10:25:18 PMThe current replication channel connections are very similar to the interest channels, with the exception that interest channels are client initiated and replication channels are server initiated. This needs not be the case. Related to issue #484, if all channels provide an initial handshake, we can remove replication channels completely and just use the interest channels for write server replication needs."> > The current replication channel connections are very similar to the interest channels, with the exception that interest channels are client initiated and replication channels are server initiated.

Are you referring to the similarity as the data that flows on the channel or how the Channel is implemented on client and server? 
Semantics of storage, heartbeats and expiries are very different for a replication channel, isn't?
 =||= Correct, however the semantic differences can be either merge in the future (e.g. in the case of expiry with a better eviction mechanism) or are better applied at a higher level (such as in the case of storage).
 =||= May be it will be better to see the implementation to better understand your thoughts. So, let me hold on till then :)
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4861.x Pin client to the redirected address.tbak04/08/15, 06:19:21 PMInitial implementation for discussion. Unit tests missing."[NetflixOSS » eureka » eureka-pull-requests #178](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/178/) SUCCESS
This pull request looks good
 =||= This should also fix issue #455
 =||= [NetflixOSS » eureka » eureka-pull-requests #186](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/186/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #191](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/191/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #192](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/192/) SUCCESS
This pull request looks good
 =||= "1.x Pin client to the redirected address.tbak04/08/15, 06:19:21 PMInitial implementation for discussion. Unit tests missing.NaNTomasz Bak04/07/15, 05:30:05 AMIncrease client version number.1
4872.x lighter eureka client for server resolverDavid Liuqiangdavidliu03/27/15, 06:32:35 PM#475"[NetflixOSS » eureka » eureka-pull-requests #179](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/179/) SUCCESS
This pull request looks good
 =||= "2.x lighter eureka client for server resolverDavid Liuqiangdavidliu03/27/15, 06:32:35 PM#475NaNDavid Liu03/27/15, 01:18:45 AMFix: Eureka1RedirectHandler should not fail and block if redirect target vip is not available.1
488Consolidating client APIs with class Eureka as an entry point.David Liuqiangdavidliu03/30/15, 09:37:59 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #180](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/180/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #184](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/184/) SUCCESS
This pull request looks good
 =||= "Consolidating client APIs with class Eureka as an entry point.David Liuqiangdavidliu03/30/15, 09:37:59 PMNaNNaNDavid Liu03/30/15, 09:32:56 PMAdd simple backpressure handling in registry1
4892.x Update Karyon admin integration  in the embedded server.tbak03/30/15, 05:12:37 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #181](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/181/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #182](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/182/) SUCCESS
This pull request looks good
 =||= "2.x Update Karyon admin integration  in the embedded server.tbak03/30/15, 05:12:37 PMNaNNaNTomasz Bak03/30/15, 01:03:10 AMUpdate Karyon admin integration  in the embedded server.1
4902.x bridging fixesDavid Liuqiangdavidliu03/31/15, 06:12:46 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #185](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/185/) SUCCESS
This pull request looks good
 =||= "2.x bridging fixesDavid Liuqiangdavidliu03/31/15, 06:12:46 AMNaNNaNDavid Liu03/31/15, 06:06:55 AMAdding exception handling for throws when cancelling tasks from SerializedTaskInvoker1
4912.x Adding additional fields to AWSDataCenterInfoDavid Liuqiangdavidliu04/03/15, 09:01:45 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #187](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/187/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #188](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/188/) SUCCESS
This pull request looks good
 =||= "2.x Adding additional fields to AWSDataCenterInfoDavid Liuqiangdavidliu04/03/15, 09:01:45 PMNaNNaNDavid Liu04/03/15, 04:09:50 AMRevert change to move server names to upper case1
4922.x Upgrade rxjava and karyon versionsDavid Liuqiangdavidliu04/06/15, 09:15:46 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #189](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/189/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #190](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/190/) SUCCESS
This pull request looks good
 =||= "2.x Upgrade rxjava and karyon versionsDavid Liuqiangdavidliu04/06/15, 09:15:46 PMNaNNaNDavid Liu04/03/15, 09:44:43 PMUpgrade rxjava and karyon versions1
4932.x Dynamically add ChannelHandlers in ChannelPipelineDavid Liuqiangdavidliu06/02/16, 10:25:21 PM"Current eureka2 ChannelPipelines are statically defined and the list of handlers for a given pipeline cannot be modified. ChannelPipelines are threadsafe and supports dynamically adding and removing handlers which gives a lot of flexibility.

An example of where this may be useful is in the case of initial handshakes (issue #484) that can communicate protocol versions, based on which specific handlers can be added to the pipeline, such as in the case of schema upgrades/changes.

Depending on the handshake requirements, this would mean either a handler that reads the sender hello message and add the appropriate follow up handler(s), or changes to BaseMessageConnection to handle more sophisticated hello messages.""Pull #497 provides some of the functionality for this. With http2 support in rxNetty 0.5 coming soon there may be bigger changes to the transport layer (e.g. multiplexed registration/interest over the same http2 connection) so will reevaluate when that comes.
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
494Add eureka2-eureka1-support moduletbak04/09/15, 07:17:32 PM"Add eureka2-eureka1-support module to help bridge existing
Eureka1 clients to Eureka2 without adopting Eureka2 client API yet.""[NetflixOSS » eureka » eureka-pull-requests #193](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/193/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #194](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/194/) SUCCESS
This pull request looks good
 =||= "Add eureka2-eureka1-support moduletbak04/09/15, 07:17:32 PM"Add eureka2-eureka1-support module to help bridge existing
Eureka1 clients to Eureka2 without adopting Eureka2 client API yet."NaNTomasz Bak04/09/15, 07:11:07 PMeureka2-eureka1-support module minor update1
4952.x Shade/relocate avro to avoid conflicts when clients use a different version of it.tbak04/09/15, 07:50:18 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #195](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/195/) SUCCESS
This pull request looks good
 =||= "2.x Shade/relocate avro to avoid conflicts when clients use a different version of it.tbak04/09/15, 07:50:18 PMNaNNaNTomasz Bak04/09/15, 07:17:49 PMShade/rellocate avro to avoid conflicts when clients use a different version of it.1
4962.x update karyon versionDavid Liuqiangdavidliu04/09/15, 08:50:03 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #196](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/196/) SUCCESS
This pull request looks good
 =||= "2.x update karyon versionDavid Liuqiangdavidliu04/09/15, 08:50:03 PMNaNNaNDavid Liu04/09/15, 08:41:34 PMupdate karyon version1
497Adding transport protocol versioningDavid Liuqiangdavidliu04/10/15, 08:53:55 PM"- protocol version encoded as an additional byte
- server handlers encode replies dynamically based on protocol version
  of inbound request""[NetflixOSS » eureka » eureka-pull-requests #197](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/197/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #198](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/198/) SUCCESS
This pull request looks good
 =||= "Adding transport protocol versioningDavid Liuqiangdavidliu04/10/15, 08:53:55 PM"- protocol version encoded as an additional byte
- server handlers encode replies dynamically based on protocol version
  of inbound request"NaNDavid Liu04/10/15, 08:44:33 PMAdding documentation1
498Wrong enum in documentationdmelani04/20/15, 03:39:01 PM"There is an error with one of the examples on the wiki page where the REST operations are listed.

The page in question is https://github.com/Netflix/eureka/wiki/Eureka-REST-operations

The erroneous example is ""Take instance out of service"". The problem here is that this example uses the enum OUT_OF_SERVICE, which is not defined in the XSD.""XSD documentation was incomplete. I have added missing two states (OUT_OF_SERVICE and UNKNOWN).
Thank you for spotting this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4992.x minor updatestbak04/21/15, 09:34:05 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #199](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/199/) SUCCESS
This pull request looks good
 =||= "2.x minor updatestbak04/21/15, 09:34:05 PMNaNNaNTomasz Bak04/21/15, 09:06:51 PMAdditional constructors in ServerListReader.1
5002.x Implement feature #447 (Write Server Initial Sync).tbak04/30/15, 09:20:25 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #200](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/200/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #201](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/201/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #202](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/202/) SUCCESS
This pull request looks good
 =||= "2.x Implement feature #447 (Write Server Initial Sync).tbak04/30/15, 09:20:25 PMNaNNaNTomasz Bak04/30/15, 08:40:16 PMFurther cleanup.1
5012.x Subscription to SourcedEurekaRegistry in write server does not always emit execution statustbak04/30/15, 09:50:33 PMThis might be caused by a composition of `PreservableEurekaRegistry` and `SourcedEurekaRegistryImpl`. I have noticed this during testing bootstrapping feature were status result was used to track number of successfully added entries."I was not able to reproduce this error. I think it was misunderstanding on my side. During bootstrapping we do full registry fetch over interest channel, but also replication channel is started in parallel. Some entries got loaded via replication, so when added afterwards when received from bootstrap source, there was no registry size change. This is consistent with observation, that ultimately final registry size was correct. I believe we can close this as no-issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5022.x Named Eureka Server GroupsDavid Liuqiangdavidliu06/02/16, 10:25:46 PM"## Problem To Solve

Eureka2 write is designed so that a full network can be partitioned into several eureka2 sub-networks, where each sub-network contains an eureka2 write cluster taking registrations from all instances from their sub-network. One example of such a setup is deployment in AWS's regional model, where an eureka2 write cluster need to exist per region to service registrations from all instances in that region.

In normal cases an eureka2 read cluster that exist in sub-network A (e.g. us-east-1) only need to connect to it's local write cluster for interest information. However there are cases where read clusters may need to (in addition to the local write cluster) also connect to one or more remote write clusters for informations, and/or to one or more remote read clusters for information (since interest subscriptions can be served from write or read servers analogously).

Per the above, for interest subscription, read clusters should not really care about whether it is connecting to a write cluster or a read cluster, or whether it is connecting to a local cluster or a remote cluster. Rather it needs to have some way to specify a set of source ""clusters"" that are available to provide interest data to this read cluster.
## Named clusters and multiplexing read servers

A proposal to the above problem is to define global unique names for each cluster (write and read), which can then be shared at bootstrap time for a new read cluster as sources of data.

**(Read) Server Side**
When a read server boots up, it will load configuration that specifies all it's known data sources, and for each data source associate an EurekaRegistry and EurekaInterestClient. All the individual named registries will then be proxied by a registry that understands names and can route interest subscriptions to specific registries. The read server need at least one data source defined that is used as the default data source for this read server.

**Configuration example**

<pre>
eureka.interest.dataSource.names=[write-useast1, read-uswest2]  // first one defined in the list is the default

eureka.interest.dataSource.write-useast1.resolverType=dns
eureka.interest.dataSource.write-useast1.serverList=[dnsName:interestPort]
eureka.interest.dataSource.write-useast1.lazyLoad=false

eureka.interest.dataSource.read-uswest2.resolverType=eureka
eureka.interest.dataSource.read-uswest2.serverList=[dnsName:interestPort for west2 write cluster]
eureka.interest.dataSource.read-uswest2.lazyLoad=true
</pre>


**Client Side**
When an eureka2 client communicates with a read server for interest subscription, it can optionally specify a dataSource as well. When the interest subscription is received by the read server, it will attempt to route the interest subscription to the correct registry for the specified dataSource. If no dataSource is specified, the default dataSource is used.

**Client API Change**
Extend Interest to be able to optionally specify a source.

``` java
public abstract class Interest<T> {

    public enum Operator {Equals, Like}
    private final String sourceName;

    protected Interest() {
        this(null);
    }

    protected Interest(String sourceName) {
        this.sourceName = sourceName;
    }

    public abstract boolean matches(T data);
}
```

The Interests DSL will need to change to accomodate optionally specifying a dataSource, for example

``` java
public final class Interests {
    public static class InterestsWithSource {
        private final String sourceName;

        InterestsWithSource(String sourceName) {
            this.sourceName = sourceName;
        }

        // contain all static methods in Interests.java as instance methods, but obeys sourceName
    }

    private static final InterestsWithSource WITH_DEFAULT_SOURCE = new InterestsWithSource(null);

    // change all static methods to reference WITH_DEFAULT_SOURCE's equivalent methods.

    public InterestsWithSource fromDataSource(String sourceName) {
        return new InterestsWithSource(sourceName);
    }
}
```

Usage would be

``` java
Interest interest = Interests.forVip(""someVip"");  // use default source
Interest interestFromAnotherSource = Interests.fromDataSource(""someSource"").forVip(""someVip"");
```""Could an alternate be to initialize multiple interest client instances and merge the interest stream if/when required? I do not quiet understand the need of adding this to the client & interest DSL when it can easily be solved by having a client per server group.
 =||= I think it is more about transport optimization. If we access cross region data via read cluster, we minimize inter-region traffic + improve bootstrap latency.
 =||= @tbak I am just questioning the change in the client via introduction of data sources. 

Multiple server groups inside the _same_ client does not sound the correct abstraction to me. I see the following usecases:
- Read server configured to read from multiple regions: This is a server level configuration and the decision to use which client should be split at the time of query for an interest, choosing an appropriate client for the query. This does not require introducing the data source concept at the client level.
- Users querying for cross-region data. This should be an attribute of the interest and should not need any configuration on the client. I do not think ""datasource"" is the correct terminology for this. We should be explicit that it is a cross-region query, something like `Interests.forVip(""vip"").inRegion(""us-east-1"")`. In this case it will be an out-of-band understanding for the user that whether the application is running in an environment which supports cross-region queries. If not, the interest should error out.

I can see from where the proposal is coming i.e. to generalize the implementation in the server to be available for all clients but I think the usage is pretty different for an end user vis-a-vis a eureka server.
 =||= Per discussions, some confusion were around whether the configurations specified are for read servers only, or also for EurekaClient used by users. The configurations are only for the former and will not be for  clients exposed to end users.

There are also some discussions tbd on whether a more specific DSL should be used to specify the ""dataSource"" vs using strings.
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5032.x Use a provider to lazily init ConnectionHandler for the TcpServersDavid Liuqiangdavidliu04/30/15, 11:58:45 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #203](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/203/) SUCCESS
This pull request looks good
 =||= "2.x Use a provider to lazily init ConnectionHandler for the TcpServersDavid Liuqiangdavidliu04/30/15, 11:58:45 PMNaNNaNDavid Liu04/30/15, 11:48:45 PMUse a provider to lazily init ConnectionHandler for the TcpServers1
5042x shade ocelliDavid Liuqiangdavidliu05/01/15, 09:38:46 PMBranch name is mis-leading, as rxnetty was not actually easily shadeable. Users of eureka2-client will need to to do the shade."[NetflixOSS » eureka » eureka-pull-requests #204](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/204/) SUCCESS
This pull request looks good
 =||= "2x shade ocelliDavid Liuqiangdavidliu05/01/15, 09:38:46 PMBranch name is mis-leading, as rxnetty was not actually easily shadeable. Users of eureka2-client will need to to do the shade.NaNDavid Liu05/01/15, 09:05:17 PM"Adding shading to ocelli in eureka2-client.
Adding some defaults to configs for WriteServerConfig"1
505Rearrange sample programs so they can be run correctly from Gradle. Tobyqu1j0t305/14/15, 04:03:10 PMAlso change Eureka server port to 8080 to match Tomcat default."[NetflixOSS » eureka » eureka-pull-requests #205](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/205/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #206](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/206/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #207](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/207/) SUCCESS
This pull request looks good
 =||= Thank you for your PR. To align with other Netflix OSS projects (including eureka2), could you put both client and server into single gradle module `eureka-examples`? It will probably require some extra gradle scripting as application plugin does not support multiple apps by default, but it will be more concise.
 =||= Not sure I agree. This PR intentionally reflects that client and service are distinct programs, and the Gradle script is consequently minimal, and fits an expected pattern. Are you **certain** you want to go that way? (I already tried to do this within the `eureka-server` module in early attempts to get the demo to run properly, and as you intuited, the Gradle was less natural—and I could never get it to work.)
 =||= Give me some time to think about it, and try it out. I would like to
minimize number of gradle submodules.

On Wed, May 6, 2015 at 10:35 AM, Toby notifications@github.com wrote:

> Not sure I agree. This PR intentionally reflects that client and service
> are distinct programs, and the Gradle script is consequently minimal, fits
> the expected pattern. Are you _certain_ you want to go that way? (I
> already tried to do this within the eureka-server module in early
> attempts to get the demo to run properly, and as you intuited, the Gradle
> was obviously much less natural—and actually never worked.)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/505#issuecomment-99546064.
 =||= @qu1j0t3 we are working on some cleanup of eureka1 to ease migration for eureka2, and part of that will include some fixing of these examples. The changes should be done pretty soon, and hopefully with that the examples should be much more clear and runnable.
 =||= @qiangdavidliu Thanks. I couldn't come up with a simpler result than this proposal, so I hope you'll consider its structure.
 =||= @qu1j0t3 please take a look at #515 which also cleans up the examples. Specifically the new examples module readme with updated instructions https://github.com/qiangdavidliu/eureka/blob/master/eureka-examples/README.md and the updated config files.
 =||= OK. Abandoning this PR. :)
 =||= @qu1j0t3 pull #515 has been merged. Let us know if you are still having trouble with the new examples.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5062.x Removing dependency on Ocelli from the client (for now)David Liuqiangdavidliu05/04/15, 07:12:32 PMRemoving dependency on Ocelli (for now, until we are ready to integrate with it and use it's more advanced features). The renamed RoundRobinServerResolver functionally does the same thing as before with an internal round robin impl."[NetflixOSS » eureka » eureka-pull-requests #208](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/208/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #209](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/209/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #210](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/210/) SUCCESS
This pull request looks good
 =||= "2.x Removing dependency on Ocelli from the client (for now)David Liuqiangdavidliu05/04/15, 07:12:32 PMRemoving dependency on Ocelli (for now, until we are ready to integrate with it and use it's more advanced features). The renamed RoundRobinServerResolver functionally does the same thing as before with an internal round robin impl.NaNDavid Liu05/04/15, 07:06:07 PMUsing abs to take value of seed for round robin.1
5072.x Safer implementation of ack handling + pending ack queue size monitor.tbak05/04/15, 10:23:33 PMBug fix in EurekaHealthStatusModule module."[NetflixOSS » eureka » eureka-pull-requests #211](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/211/) SUCCESS
This pull request looks good
 =||= "2.x Safer implementation of ack handling + pending ack queue size monitor.tbak05/04/15, 10:23:33 PMBug fix in EurekaHealthStatusModule module.NaNTomasz Bak05/04/15, 10:02:34 PM"Safer implementation of ack handling + pending ack queue size monitor.
Bug fix in EurekaHealthStatusModule module."1
5082.x Provide a shaded eureka2-client(-shaded) that shades avro and rxnetty dependenciesDavid Liuqiangdavidliu05/07/15, 05:09:15 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #212](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/212/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #214](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/214/) SUCCESS
This pull request looks good
 =||= "2.x Provide a shaded eureka2-client(-shaded) that shades avro and rxnetty dependenciesDavid Liuqiangdavidliu05/07/15, 05:09:15 PMNaNNaNDavid Liu05/07/15, 01:01:01 AMFixes for shading eureka2-client.1
5092.x Improvements in transport + performance/verification tool.tbak05/08/15, 07:38:58 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #213](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/213/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #215](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/215/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #216](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/216/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #218](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/218/) SUCCESS
This pull request looks good
 =||= "2.x Improvements in transport + performance/verification tool.tbak05/08/15, 07:38:58 PMNaNNaNTomasz Bak05/08/15, 07:24:20 PMUpdates recommended in code review.1
5102.x Adding eureka2-eureka1-support to eureka2-client-shaded jarDavid Liuqiangdavidliu05/07/15, 10:32:47 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #217](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/217/) SUCCESS
This pull request looks good
 =||= "2.x Adding eureka2-eureka1-support to eureka2-client-shaded jarDavid Liuqiangdavidliu05/07/15, 10:32:47 PMNaNNaNDavid Liu05/07/15, 10:25:54 PMAdding eureka2-eureka1-support to eureka2-client-shaded jar1
511Fix typos in per-host config keys.Tobyqu1j0t305/12/15, 04:07:55 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #219](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/219/) SUCCESS
This pull request looks good
 =||= Thank you for spotting it. We cannot merge this however, as this change is not backwards compatible (all user would have to update their configuration files). It is safer to leave it as it is, even if the property name is a bit misleading.
 =||= Their configuration files are either setting the right parameter, in which case they do not need to change, or they intend to set the per host parameter but are actually setting the wrong one) in which case they are not having the desired effect with the existing code. Additionally, it seems very unlikely that any client is using the perHost parameters or they would have already noticed the bug.

So this seems safely mergeable.
 =||= You are right. I have missed that we have also `getPeerNodeTotalConnections`, and the property names overlap:

``` java
 @Override
    public int getPeerNodeTotalConnections() {
        return configInstance.getIntProperty(
                namespace + ""peerNodeTotalConnections"", 1000).get();
    }

    @Override
    public int getPeerNodeTotalConnectionsPerHost() {
        return configInstance.getIntProperty(
                namespace + ""peerNodeTotalConnectionsPerHost"", 500).get();
    }
```

 I definitely makes sense to merge this in. Thanks.
 =||= No worries.
 =||= "Fix typos in per-host config keys.Tobyqu1j0t305/12/15, 04:07:55 PMNaNNaNToby Thain05/11/15, 12:47:27 AMFix typos in per-host config keys.1
5122.x SerializedTaskInvoker is not needed for EurekaInterestClient (and derivatives)David Liuqiangdavidliu01/14/16, 06:09:47 PMThe SerializedTaskInvoker is current attached to the Eureka SourcedRegistry to guarantee synchronization of registrations and unregistrations from multiple sources into the registry. Synchronization is necessary for the write server as their input sources are from multiple channels, but for the EurekaInterestClient (including the read server) the input source is always from a single interest channel, so synchronization is not needed. Removing the SerializedTaskInvoker in these cases should lead to performance improvements."SerializedTaskInvoker is no longer used
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5132.x Simplify SerializedTaskInvoker implementation.tbak05/14/15, 03:18:46 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #222](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/222/) SUCCESS
This pull request looks good
 =||= LGTM
 =||= [NetflixOSS » eureka » eureka-pull-requests #224](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/224/) SUCCESS
This pull request looks good
 =||= "2.x Simplify SerializedTaskInvoker implementation.tbak05/14/15, 03:18:46 PMNaNNaNTomasz Bak05/13/15, 11:37:13 PMFurther SerializedTaskInvoker cleanup + performance tests for interest subsystem.1
5141.x Remove dependency to ribbon.tbak05/14/15, 10:31:51 PM"Dependency to ribbon existed due to two utility classes providing servo
metrics for apache httpclient connection.""[NetflixOSS » eureka » eureka-pull-requests #223](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/223/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #227](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/227/) SUCCESS
This pull request looks good
 =||= "1.x Remove dependency to ribbon.tbak05/14/15, 10:31:51 PM"Dependency to ribbon existed due to two utility classes providing servo
metrics for apache httpclient connection."NaNTomasz Bak05/14/15, 10:11:29 PM"Merge remote-tracking branch 'remotes/netflix/master'

Conflicts:
	eureka-client/src/main/java/com/netflix/discovery/converters/EurekaJacksonCodec.java"1
515Adding EurekaModule for DI support + Example cleanupDavid Liuqiangdavidliu05/14/15, 06:47:39 PM"- EurekaModule for DI support
- Added EurekaClient interface for DiscoveryClient
- cleaned up examples and moved examples to eureka-examples""[NetflixOSS » eureka » eureka-pull-requests #225](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/225/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #226](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/226/) SUCCESS
This pull request looks good
 =||= "Adding EurekaModule for DI support + Example cleanupDavid Liuqiangdavidliu05/14/15, 06:47:39 PM"- EurekaModule for DI support
- Added EurekaClient interface for DiscoveryClient
- cleaned up examples and moved examples to eureka-examples"NaNDavid Liu05/14/15, 06:08:05 AMRemoving singleton from providers + explicitly specifying the default bindings1
5162.x Initial interface commits of override service classesDavid Liuqiangdavidliu05/15/15, 09:41:00 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #228](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/228/) FAILURE
Looks like there's a problem with this pull request
 =||= "2.x Initial interface commits of override service classesDavid Liuqiangdavidliu05/15/15, 09:41:00 PMNaNNaNDavid Liu05/15/15, 09:36:01 PMInitial interface commits of override service classes1
5172.x refactoring the overrides interfaceDavid Liuqiangdavidliu05/15/15, 09:56:00 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #229](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/229/) SUCCESS
This pull request looks good
 =||= "2.x refactoring the overrides interfaceDavid Liuqiangdavidliu05/15/15, 09:56:00 PMNaNNaNNaNNaNNaN1
5182.x Fix memory leak in BatchAwareIndexRegistry and better SerializedTaskInvoker metrics.tbak05/15/15, 10:16:04 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #230](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/230/) SUCCESS
This pull request looks good
 =||= "2.x Fix memory leak in BatchAwareIndexRegistry and better SerializedTaskInvoker metrics.tbak05/15/15, 10:16:04 PMNaNNaNTomasz Bak05/15/15, 09:54:03 PMFix memory leak in BatchAwareIndexRegistry and better SerializedTaskInvoker metrics.1
5192.x Memory leak fix in Index.tbak05/18/15, 05:52:33 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #231](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/231/) SUCCESS
This pull request looks good
 =||= "2.x Memory leak fix in Index.tbak05/18/15, 05:52:33 PMNaNNaNTomasz Bak05/18/15, 05:41:20 PMMemory leak fix in Index.1
520singleton scoping EurekaConfigBasedInstanceInfoProviderDavid Liuqiangdavidliu05/19/15, 01:13:44 AMbug fix: Re-adding @LazySingleton to EurekaInstanceInfoProvider to ensure InstanceInfo singleton for injection into DiscoveryClient and ApplicationInfoManager."[NetflixOSS » eureka » eureka-pull-requests #232](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/232/) SUCCESS
This pull request looks good
 =||= "singleton scoping EurekaConfigBasedInstanceInfoProviderDavid Liuqiangdavidliu05/19/15, 01:13:44 AMbug fix: Re-adding @LazySingleton to EurekaInstanceInfoProvider to ensure InstanceInfo singleton for injection into DiscoveryClient and ApplicationInfoManager.NaNDavid Liu05/19/15, 01:00:31 AMAdding comments1
521Destroying jersey cleaner thread on DiscoveryClient shutdownJeremy D. Youngjeremydyoung05/19/15, 06:29:37 PM"When reloading or shutting down the context in Tomcat 8 we get a warning that there was a thread created but not cleaned up:

```
WARNING: The web application [example] appears to have started a thread named [Eureka-JerseyClient-Conn-Cleaner2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 sun.misc.Unsafe.park(Native Method)
 java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
 java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
 java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
 java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 java.lang.Thread.run(Thread.java:745)
```

Evidence for this being a problem can be found in the Spring Cloud project:
[EurekaDiscoveryClientConfiguration.java](https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/eureka/EurekaDiscoveryClientConfiguration.java)

My suggested solution is to check for a discoveryJerseyClient object, and clean it up during the DiscoveryClient shutdown method.

I have provided a test that demonstrates the thread living beyond the shutdown command in it's current state.""[NetflixOSS » eureka » eureka-pull-requests #233](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/233/) SUCCESS
This pull request looks good
 =||= @jeremydyoung thanks for the fix.
 =||= "Destroying jersey cleaner thread on DiscoveryClient shutdownJeremy D. Youngjeremydyoung05/19/15, 06:29:37 PM"When reloading or shutting down the context in Tomcat 8 we get a warning that there was a thread created but not cleaned up:

```
WARNING: The web application [example] appears to have started a thread named [Eureka-JerseyClient-Conn-Cleaner2] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 sun.misc.Unsafe.park(Native Method)
 java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
 java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
 java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
 java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
 java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
 java.lang.Thread.run(Thread.java:745)
```

Evidence for this being a problem can be found in the Spring Cloud project:
[EurekaDiscoveryClientConfiguration.java](https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/eureka/EurekaDiscoveryClientConfiguration.java)

My suggested solution is to check for a discoveryJerseyClient object, and clean it up during the DiscoveryClient shutdown method.

I have provided a test that demonstrates the thread living beyond the shutdown command in it's current state."NaNJeremy D. Young05/19/15, 03:54:52 AMDestroying jersey cleaner thread on DiscoveryClient shutdown1
522Example updateDavid Liuqiangdavidliu05/19/15, 07:07:07 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #234](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/234/) SUCCESS
This pull request looks good
 =||= @qiangdavidliu thanks! this really helped clear up the distinction between client initialization and service registration :rocket: 
 =||= "Example updateDavid Liuqiangdavidliu05/19/15, 07:07:07 PMNaNNaNDavid Liu05/19/15, 06:55:14 PMmove jersey client cleanup to after unregistration cleanup (which need the apache client)1
523make constructor public so other DI systems can create instancesSpencer Gibbspencergibb06/05/15, 08:42:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #235](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/235/) SUCCESS
This pull request looks good
 =||= Ping
 =||= @spencergibb apologies for the lag, there's been a flurry of activity on eureka recently. We are a bit reluctant to make this constructor public available as that can lead to potential multiple instantiations. Which DI system in particular did you have in mind for this?
 =||= No problem! Spring.  Specifically Spring Cloud Netflix.  In [this PR](https://github.com/spring-cloud/spring-cloud-netflix/pull/356) we [do](https://github.com/spring-cloud/spring-cloud-netflix/blob/eureka-di/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/eureka/EurekaDiscoveryClientConfiguration.java#L194-L198)

```
Constructor<ApplicationInfoManager> constructor = ApplicationInfoManager.class
                .getDeclaredConstructor(EurekaInstanceConfig.class, InstanceInfo.class);
ReflectionUtils.makeAccessible(constructor);
return constructor.newInstance(instanceConfig, instanceInfo);
```
 =||= @spencergibb merged. Thanks. There a few other small things and we should make a patch release soonish.
 =||= Thanks @qiangdavidliu!
 =||= "make constructor public so other DI systems can create instancesSpencer Gibbspencergibb06/05/15, 08:42:16 PMNaNNaNSpencer Gibb05/19/15, 07:34:36 PMmake constructor public so other DI systems can create instances1
524Add event control for initial instance info heartbeat and instanceinfo update (UP status typically)Andrew Spykeraspyker06/02/15, 08:24:42 PMThis is the patch that allows an event oriented approach to starting InstanceInfo scheduled tasks (general HeartBeat and InstanceInfo (HealthCheck/Status/etc)).  It should be backwardsly compatible with no change in behavior (by default the tasks are started the same delays as before from DiscoveryClient initialization).  If however, the app sets the useExplicitEventsForInitialDiscoveryCalls, then the client is expected to call the methods startInstanceInfoHeartBeatNow and startInstanceInfoRefreshNow, likely calling them far sooner than the default initial delay."[NetflixOSS » eureka » eureka-pull-requests #236](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/236/) SUCCESS
This pull request looks good
 =||= This is interesting! 
Would there be a reason why someone will need to register and not send heartbeats or not update instance info periodically?
IOW, should the change more be for controlling registrations (and possibly registry fetch) explicitly instead of getting registered in the constructor but deferring heartbeats & instance info refresh?
 =||= I would be interested in this.  There are cases where all of the information to register a service isn't available when the object is constructed.  We go through some gyrations in [spring-cloud-netflix](https://github.com/spring-cloud/spring-cloud-netflix) to approximate this.
 =||= @NiteshKant and @spencergibb A change to externalize the scheduling of any of the events (registry refresh, heartbeat, and instance info dirty check/update) isn't the intent of this patch.  Also, it isn't the intent to give any more configurability than already existed than the initial timing of heartbeat and instance info direct check/update.  This change was mainly to allow for us to register the instance in discovery as fast as possible on an external event (vs. some timing that doesn't align with the app container startup).

That said, @spencergibb could use this fix to be slower and when all data was available (as using the property will cause the initial registration to wait until the startInstanceInfoHeartBeatNow call).
 =||= @aspyker thanks for the pull, this would definitely help with some of the slow eureka startup issues we have. One point of interest is whether we should separate registration/update and heartbeat scheduler initializations from each other, as there are some inherent assumptions in eureka of a client's behaviour on the registration path concerning registrations/updates/heartbeats. From the changes it looks like the use cases would be either to initialize both tasks with the existing delays, or to initialize both tasks with 0 initial delay. If this is the case, we should be able to combine the inits for both heartbeat and update, so at least that will guarantee a super use won't init one and forget to init the other.
 =||= > >  A change to externalize the scheduling of any of the events (registry refresh, heartbeat, and instance info dirty check/update) isn't the intent of this patch.

My point here is, if we do externalize registration out of the constructor, we do not need these additional knobs and that also provides a intuitive API. This is the model eureka 2.x follows i.e. registration is not baked into the constructor and is driven by the users. 

> > One point of interest is whether we should separate registration/update and heartbeat scheduler initializations from each other

IMO, we shouldn't separate them (what I was saying in my earlier comment) as heartbeat & instance info updates are required for registration and without them, registrations do not work as expected. 
 =||= Going to close due to #530 being a better solution
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5252.x Fix dashboard/bridge health check. Add integration test to verify that.tbak05/25/15, 02:58:28 AM" Dashboard/bridge do not provide yet any health check provider, so observable
 stream of server status never emitted any value. In this change, if there are no
 providers bound, a default one is registered returning always Status.UP.""[NetflixOSS » eureka » eureka-pull-requests #237](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/237/) SUCCESS
This pull request looks good
 =||= "2.x Fix dashboard/bridge health check. Add integration test to verify that.tbak05/25/15, 02:58:28 AM" Dashboard/bridge do not provide yet any health check provider, so observable
 stream of server status never emitted any value. In this change, if there are no
 providers bound, a default one is registered returning always Status.UP."NaNTomasz Bak05/25/15, 02:41:33 AM"Fix dashboard/bridge health check. Add integration test to verify that.

 Dashboard/bridge do not provide yet any health check provider, so observable
 stream of server status never emitted any value. In this change, if there are no
 providers bound, a default one is registered returning always Status.UP."1
5261.x Reformat code.tbak05/26/15, 11:35:22 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #238](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/238/) SUCCESS
This pull request looks good
 =||= "1.x Reformat code.tbak05/26/15, 11:35:22 PMNaNNaNTomasz Bak05/26/15, 11:18:12 PMReformat code.1
527Cross account describe ASGsAlbert Manyàamanya06/05/15, 09:26:55 PM"The motivation of this patch is to make Eureka capable of knowing the state of auto scaling groups even if they are from microservices running in accounts other than the one where Eureka is running.

In that case, it will do a a cross-account assume role to get permission to describe the ASGs.

[Here](http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-walkthrough-crossacct.html) is a walkthrough from Amazon that explains how to setup the cross-account IAM role delegation: 

The role must be called `ListAutoScalingGroups` and the policy must be like this:

```
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Action"": [
                ""autoscaling:DescribeAutoScalingGroups""
            ],
            ""Effect"": ""Allow"",
            ""Resource"": ""*""
        }
    ]
} 
```""[NetflixOSS » eureka » eureka-pull-requests #239](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/239/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #241](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/241/) SUCCESS
This pull request looks good
 =||= @amanya thank you for the pull request, this would be a very useful feature for Eureka to have. I added a couple of minor comments that I hope you can take a quick look at. 

Additionally, have you been able to verify this code change? We have mockito as a dependency and it should be able to write a quick unit test for this mocking out the AWS SDK with mockito.
 =||= [NetflixOSS » eureka » eureka-pull-requests #260](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/260/) SUCCESS
This pull request looks good
 =||= @qiangdavidliu thanks for your comments :)

I think I've managed to solve the first two issues, but for making the tests, I'll need to use a tool like Powermockito due to the static dependencies of the AwsAsgUtil class, right?
 =||= Thanks @amanya . We can merge this in and I'll take a look at what kind of testing we can do for this.
 =||= "Cross account describe ASGsAlbert Manyàamanya06/05/15, 09:26:55 PM"The motivation of this patch is to make Eureka capable of knowing the state of auto scaling groups even if they are from microservices running in accounts other than the one where Eureka is running.

In that case, it will do a a cross-account assume role to get permission to describe the ASGs.

[Here](http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-walkthrough-crossacct.html) is a walkthrough from Amazon that explains how to setup the cross-account IAM role delegation: 

The role must be called `ListAutoScalingGroups` and the policy must be like this:

```
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Action"": [
                ""autoscaling:DescribeAutoScalingGroups""
            ],
            ""Effect"": ""Allow"",
            ""Resource"": ""*""
        }
    ]
} 
```"NaNAlbert Manya06/04/15, 07:37:43 AMGet cross account role name from property1
528Adding additional fields to deser for Jackson codecDavid Liuqiangdavidliu05/29/15, 06:13:59 PMThe serializer serializes all @ Auto annotated fields, but the Jackson deser ignores a couple on the deser."[NetflixOSS » eureka » eureka-pull-requests #240](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/240/) SUCCESS
This pull request looks good
 =||= "Adding additional fields to deser for Jackson codecDavid Liuqiangdavidliu05/29/15, 06:13:59 PMThe serializer serializes all @ Auto annotated fields, but the Jackson deser ignores a couple on the deser.NaNDavid Liu05/29/15, 02:02:58 AMAdding additional fields to deser for Jackson codec1
5291.x batched replication refactoringtbak06/09/15, 10:05:31 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #242](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/242/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #246](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/246/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #248](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/248/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #249](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/249/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #258](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/258/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #259](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/259/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #268](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/268/) FAILURE
Looks like there's a problem with this pull request
 =||= Due to merge issues I need to close this PR and make a new one.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
530Adding the ability to execute on-demand updates to the eureka serverDavid Liuqiangdavidliu06/02/15, 11:32:41 PMAdding the ability to execute on-demand updates to the eureka server. Current set up is triggered by changes to ApplicationInfoManager.setInstanceStatus(). This capability can be turned on/off via eureka.shouldOnDemandUpdateStatusChange."[NetflixOSS » eureka » eureka-pull-requests #243](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/243/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #244](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/244/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #247](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/247/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #250](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/250/) SUCCESS
This pull request looks good
 =||= On shutdown of tomcat, I am consistently getting:
SEVERE: The web application [] appears to have started a thread named [DiscoveryClient-InstanceInfoReplicator-0] but has failed to stop it. This is very likely to create a memory leak.
 =||= I tested this code and it does improve the startup time.  I am seeing ~30 seconds (instead of the previous 58).
 =||= @aspyker changed the close() on the replicator to call executors.shutdownNow() instead of shutdown().
 =||= [NetflixOSS » eureka » eureka-pull-requests #251](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/251/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #252](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/252/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #253](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/253/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #254](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/254/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #255](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/255/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #256](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/256/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #257](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/257/) SUCCESS
This pull request looks good
 =||= "Adding the ability to execute on-demand updates to the eureka serverDavid Liuqiangdavidliu06/02/15, 11:32:41 PMAdding the ability to execute on-demand updates to the eureka server. Current set up is triggered by changes to ApplicationInfoManager.setInstanceStatus(). This capability can be turned on/off via eureka.shouldOnDemandUpdateStatusChange.NaNDavid Liu06/02/15, 11:24:29 PMUse ephemeral port for MockRemoteEurekaServer in AbstractTester1
531Lease renewal: inconsistency between Lease.renew() and Lease.isExpired()Bertrand Renuartbrenuart06/08/15, 06:41:24 PM"There seems to be an inconsistency between the two following methods (from `com.netflix.eureka.lease.Lease`:

```
public void renew() {
    lastUpdateTimestamp = System.currentTimeMillis() + duration;
}

public boolean isExpired() {
    return (evictionTimestamp > 0 || System.currentTimeMillis() > (lastUpdateTimestamp + duration));
}
```

When the lease is renewed, the `lastUpdatedTimestamp` is set to `now()` + the expected client lease renewal period. It therefore represents _when the lease is about to expire_ and not when it was last renewed.

To check if the lease is expired, the `isExpired()` method adds again the duration to the `lastUpdateTimestamp` - hence the lease will expire only after two times the duration.

Finally, javadocs on the `getLastRenewalTimestamp()` clearly defines the actual meaning of the `lastUpdateTimestamp`:

```
/**
 * Gets the milliseconds since epoch when the lease was last renewed.
 *
 * @return the milliseconds since epoch when the lease was last renewed.
 */
public long getLastRenewalTimestamp() {
    return lastUpdateTimestamp;
}
```

Conclusion: the `renew()` method seems to be broken: _it shouldn't add the duration to the current time._""@brenuart thanks for point this out, this indeed looks to be the case. We'll take a look at the impact of this and get back to you on whether we fix or update the comments (as this code is very old and been working in our production for a while, this unintended behaviour may be something that clients now expect, and is therefore potentially harmful to change). Thanks again.
 =||= The self protection mode of our Eureka got activated for some reason so lease expiration was temporarily suspended. We then had a look at the registry lease data searching for instances that expired... and discovered that some had their `lastRenewalTimestamp` in the future... This is how we discovered the issue.
 =||= Comments updated in #537
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5322.x Refactorings/reactive registrytbak06/05/15, 05:33:13 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #261](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/261/) SUCCESS
This pull request looks good
 =||= "2.x Refactorings/reactive registrytbak06/05/15, 05:33:13 PMNaNNaNTomasz Bak06/04/15, 07:20:41 PM"Merge remote-tracking branch 'remotes/netflix/refactorings/reactive_registry' into refactorings/reactive_registry

Conflicts:
	eureka2-write-server/src/main/java/com/netflix/eureka2/server/service/overrides/OverridesServiceImpl.java"1
533BelowRenewThreshold: isBelowRenewThreshold() & isLeaseExpirationEnabled() do not agreeBertrand Renuartbrenuart06/08/15, 06:03:45 PM"Eureka activate its self protection mode when last minute's renewal rate is below the threshold.
The following two methods of `com.netflix.eureka.PeerAwareInstanceRegistry` do not agree on the condition:

```
 public int isBelowRenewThreshold() {
    if ((getNumOfRenewsInLastMin() < numberOfRenewsPerMinThreshold)
...
```

For that method, self protection should be activated when `renewsRate < threshold`. However, for the following method, the mode is activated if `renewsRate <= threshold`:

```
public boolean isLeaseExpirationEnabled() {
    boolean leaseExpirationEnabled = (numberOfRenewsPerMinThreshold > 0)
            && (getNumOfRenewsInLastMin() > numberOfRenewsPerMinThreshold);
...
```

So we get unexpected behaviour when `renewsRate == threshold`.

As far as I can tell, `isbelowRenewThreshold()` is only used by Servo to report metrics, while `isLeaseExpirationEnabled()` is used by the eviction thread to perform the actual eviction of expired leases.""fixed in #537
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5342.x Registry related unit tests/bug fixes.tbak06/05/15, 09:51:54 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #262](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/262/) SUCCESS
This pull request looks good
 =||= "2.x Registry related unit tests/bug fixes.tbak06/05/15, 09:51:54 PMNaNNaNTomasz Bak06/05/15, 09:49:33 PMRegistry related unit tests/bug fixes.1
5352.x Refactorings/reactive registryDavid Liuqiangdavidliu06/08/15, 05:43:07 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #263](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/263/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= "2.x Refactorings/reactive registryDavid Liuqiangdavidliu06/08/15, 05:43:07 PMNaNNaNDavid Liu06/08/15, 07:38:22 AMMinor batching fix + more test coverage1
536Improvement: optional read only ResponseCacheBertrand Renuartbrenuart06/11/15, 05:33:17 PM"It would be nice if the use of the read only response cache could be made optional. Although it seems be useful in some scenarios (see https://github.com/Netflix/eureka/issues/147), it also imposes an additional delay before changes are reflected in the Eureka REST API. This extra delay is very annoying in some deployments.

Is this something that could be foreseen?""@brenuart this is a feature that we needed internally to help eureka scale to our production usage. It would be useful to have this controllable via a server configuration however. Would you like to make a pull request for this?
 =||= I will submit a PR for this.

To be honest, I don't understand why this extra RO cache helps to make performance better. There is already a first cache... why isn't it sufficient? 
I understand the RO cache has the same effect of delaying the invalidations - just like if you applied them in batch of say 100. Is that the objective?
 =||= Hi @brenuart thanks for the pull request. The readonly cache exist as it's a non-expiry based cache compared to the readWriteCache. What we had observed previously was that the increased numbers of 503s (caused due to cache misses on gets as items are expiring) was causing more issues for us due to the scale of usage.
 =||= Feature in #544 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
537Various fixes (specifics in commit log)David Liuqiangdavidliu06/08/15, 06:03:13 PMAlso fixes for issues #531 and #533"[NetflixOSS » eureka » eureka-pull-requests #264](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/264/) SUCCESS
This pull request looks good
 =||= Looks good.
 =||= "Various fixes (specifics in commit log)David Liuqiangdavidliu06/08/15, 06:03:13 PMAlso fixes for issues #531 and #533NaNDavid Liu06/08/15, 08:26:57 AMExtra null check for paranoia.1
5382.x Refactorings/reactive registrytbak06/08/15, 07:03:21 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #265](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/265/) SUCCESS
This pull request looks good
 =||= "2.x Refactorings/reactive registrytbak06/08/15, 07:03:21 PMNaNNaNTomasz Bak06/08/15, 06:56:49 PMMerge remote-tracking branch 'remotes/netflix/refactorings/reactive_registry' into refactorings/reactive_registry1
539InstanceInfoReplicator causes the next Heartbeat to Register the instanceBertrand Renuartbrenuart06/08/15, 10:22:01 PM"The following piece of code is executed when the `InstanceInfoReplicator` is triggered:

```
 if (instanceInfo.isDirty()) {
   register();
   instanceInfo.setIsDirty(false);
 }
```

`instanceInfo.setIsDirty(false)` has the additional side-effect of setting the `lastDirtyTimestamp` to 'now', so the current value is different from the one transmitted to the Eureka server during the `register()` method.

The next time the `HeartbeatThreat` wakes up, it sends a heartbeat with a dirty timestamp different from what the server got with the last `register()`. Since the dirty timestamp doesn't match what it has in its records, the server replies with a 404 to force the client to re-register with up-to-date information. 

In summary, here is the sequence of operations that occurs every time the `InstanceInfo` is dirtied:
- InstanceInfoReplicator calls `register()`
- HeartbeatThread sends heartbeat and receives 404 from server
- HeartbeatThread sends `register()`

This extra communication could be avoided if `InstanceInfo.setDirty(false)` didn't update the `lastDirtyTimestamp` to current time.""@brenuart this is already fixed.
 =||= Fine. Was working with version 1.1.147 
Sorry about this ""false"" issue :(
Could you tell me in which version this fix has been made available?
 =||= Sorry should have been more clear. The fix was released in release 1.1.156
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5402.x Integrate server RegistrationChannel with new registry API.tbak06/15/15, 09:42:38 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #266](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/266/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #288](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/288/) SUCCESS
This pull request looks good
 =||= "2.x Integrate server RegistrationChannel with new registry API.tbak06/15/15, 09:42:38 PMNaNNaNTomasz Bak06/15/15, 08:39:57 PMMerge remote-tracking branch 'remotes/netflix/refactorings/reactive_registry' into refactorings/reactive_registry1
541Disable the read only cache if 'responseCacheUpdateIntervalMs' is set to 0Bertrand Renuartbrenuart06/11/15, 05:32:38 PM"'responseCacheUpdateIntervalMs' controls how often the read only cache is updated with changes collected in the read-write cache. The lesser the value, the faster the cache is updated. So a value of 0 can be interpreted as an immediate update. 
This seems a good and easy way to disable the read only cache.

See https://github.com/Netflix/eureka/issues/536""[NetflixOSS » eureka » eureka-pull-requests #267](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/267/) SUCCESS
This pull request looks good
 =||= Thanks for this @brenuart . Rather than conflating the same property for two different use cases (setting the refresh rate as well as enabling/disabling the readonly cache), what about defining a new configuration for disabling/enabling the cache? There is a top level get method (get(final Key key)) that then calls the internal get methods with ignoreReadonly as a param, but right now it always calls with false. This seems a nice hook point for bypassing the readonly cache.
 =||= The idea was that if I want to speed-up things, I had to use a lower value for the `responseCacheUpdateIntervalMs`, say I would have set it to `100ms`. If not fast enough, I would have use `50ms`, then `1ms`... So at the end, `0` means _immediate_, and I get the desired behaviour.
This had the added benefit of not introducing a new configuration property in the game while still keeping an easy to understand meaning for the existing one.

Now, if you prefer to add a new configuration property, I can update the PR with that. 
What property name would you suggest?
 =||= Thanks again for the pull @brenuart . The readonly cache and the readWrite caches are actually serving two different use cases that are not quite symmetric. The readonly cache is not a guava cache and does not actually have any expiry or clean up policy, so once it caches data the data stays in the cache without expiry (the update task helps with purging removed apps and leaves tombstones). The issue with using the readWrite cache directly, is that the auto expiry for that causes 503s for gets when a cache miss occur.

For convenience I created pull #544 for this, does this pull satisfy your needs?
 =||= This is ok for me. The new config property allows me to disable the read only cache and have changes propagated immediately. Thanks.
 =||= Thanks @brenuart . Closing. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5421.x batched replication refactoringtbak06/30/15, 06:12:36 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #269](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/269/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #271](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/271/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #274](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/274/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #296](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/296/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #310](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/310/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #325](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/325/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #327](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/327/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #333](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/333/) SUCCESS
This pull request looks good
 =||= "1.x batched replication refactoringtbak06/30/15, 06:12:36 PMNaNNaNTomasz Bak06/30/15, 06:04:50 PM"Merge remote-tracking branch 'remotes/netflix/master' into features/replication_batching

Conflicts:
	eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java"1
543AwsAsgUtil fixesDavid Liuqiangdavidliu06/10/15, 06:00:47 PM"- async load data from the asgCache for isASGEnabled queries.
- avoid using expensive getASGAccount(asgName) if possible.""[NetflixOSS » eureka » eureka-pull-requests #270](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/270/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= "AwsAsgUtil fixesDavid Liuqiangdavidliu06/10/15, 06:00:47 PM"- async load data from the asgCache for isASGEnabled queries.
- avoid using expensive getASGAccount(asgName) if possible."NaNDavid Liu06/09/15, 10:45:22 PMAwsAsgUtil fixes + avoid using expensive getASGAccount(asgName) if possible1
544Adding config for use (or not to use) the readonly cache in ResponseCacheDavid Liuqiangdavidliu06/11/15, 05:32:01 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #272](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/272/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #273](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/273/) SUCCESS
This pull request looks good
 =||= This ok for me. 
 =||= "Adding config for use (or not to use) the readonly cache in ResponseCacheDavid Liuqiangdavidliu06/11/15, 05:32:01 PMNaNNaNDavid Liu06/11/15, 07:00:30 AMForgot to flip booleans in unit test for boolean flip in method param.1
545"Improvement: ""CacheRefresh"" event"Bertrand Renuartbrenuart06/15/15, 10:03:06 PM"We are looking for a way to be notified when the Eureka client has refresh its local cache. This could help to quickly react on changes in the list of discovered instances, like adapt balancing/routing behaviour.

The `DiscoveryClient` doesn't expose any public/protected method that could be easily overridden to implement such behaviour. However, we were wondering if the `DiscoveryClient` could be enhanced to publish a `CacheRefresh` event on the `eventBus` every time it refreshes its cache?""@brenuart this would be a useful feature. A simple hook point for this would be to publish this event after every successful execution of the CacheRefreshThread, however this may return some false positives as not every refresh will actually have updates to the local cache. To publish this event only for real changes  may involved some careful hooks to a few different methods (starting point would be the CacheRefreshThread).

Would you be interested in making a pull for this feature?
 =||= Some remarks:

(1) First question is what kind of event do we need ?
A `CacheRefreshedEvent` would simply tell the world the cache is refreshed and up-to-date. It doesn't say something has changed. We could leave the change detection to a separate component that would perform the diff and eventually send another event with the change information.

A `CacheUpdateEvent` on the other hand would be sent only if there is a change. But I wonder is if it is useful at all if it doesn't hold information about _what_ has actually changed:
- new instance discovered (which one)?
- instance gone (which one)?
- instance status changed
- etc

It start getting complicated. So my advice would be to go for the simplest `CacheRefreshedEvent` and possibly build a separate listener that would track changes. People interested in the actual delta could use it.

(2) Event or listener?
The second question is whether we should plug into the `eventBus` or go for a simple listener. In the later case, interested parties would register with the `DiscoveryClient` to get the info.
Drawback of the listener pattern: requires component to unregister

(3) Starting hook
According to me, it is probably better to hook into the `fetchRegistry()` method instead of the `CacheRefreshThread`. The `fetchRegistry()` method is where the actual work is done and can/could be invoked from many different places. Currently only at startup and then at regular intervals by the `CacheRefreshThread`. 

Your opinion?
 =||= @qiangdavidliu ping?
 =||= @brenuart sorry was busy with other work.

I believe you and I essentially have the same agreement in both of our comments, that is there is two ways to go about this.

The simpler way is to emit events on the cacheRefresh, which gives false positives as not all cache refreshes actually updates data. This is pretty straight forward to add.

The more complex and better way to generate events for real refresh that actually did work is to hook into the various update methods themselves. As the update actions involves deltas and retries the instrumentation point may not be as straight forward.

W.r.t. to the message publishing, using the existing eventBus is nice as a different event (StatusChangeEvent) is already published there. However I have no strong dislikes of a listener, provided that it can be added nicely to the current interface and does not add too much clutter.

Since we don't have a requirement for this feature internally, I leave it to you to decide which route is best for your use case.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5462.x Reorganize integration tests structure.tbak06/12/15, 05:01:09 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #275](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/275/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #276](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/276/) SUCCESS
This pull request looks good
 =||= "2.x Reorganize integration tests structure.tbak06/12/15, 05:01:09 PMNaNNaNTomasz Bak06/12/15, 04:24:45 PMRemove duplicated tests.1
5472.x Refactorings/reactive registryDavid Liuqiangdavidliu06/13/15, 11:28:55 PM"- Clean up extra use of a subject in the initStateHolder
- Adding temporary fix for client side batching issue (too eagerly emit BufferMarker when local cache is empty but data is transmitted from server side).""[NetflixOSS » eureka » eureka-pull-requests #277](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/277/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #278](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/278/) SUCCESS
This pull request looks good
 =||= "2.x Refactorings/reactive registryDavid Liuqiangdavidliu06/13/15, 11:28:55 PM"- Clean up extra use of a subject in the initStateHolder
- Adding temporary fix for client side batching issue (too eagerly emit BufferMarker when local cache is empty but data is transmitted from server side)."NaNDavid Liu06/13/15, 12:25:26 AMAdding new file that was missed in the last commit1
5482.x Adding interest channel eviction mechanism + tests.David Liuqiangdavidliu06/15/15, 07:22:01 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #279](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/279/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #284](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/284/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #285](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/285/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #286](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/286/) SUCCESS
This pull request looks good
 =||= "2.x Adding interest channel eviction mechanism + tests.David Liuqiangdavidliu06/15/15, 07:22:01 PMNaNNaNDavid Liu06/15/15, 07:10:39 PM"Removing impl of getChangeNotifications on server side interestchannel as it
is not needed and necessitates unnecesary guards elsewhere."1
549"Capture ""CacheRefreshed"" event"Bertrand Renuartbrenuart06/15/15, 09:49:10 PM"The objective is to capture ""cache refreshed"" events. A few comments (following discussion in https://github.com/Netflix/eureka/issues/545):

1/ Added protected methods invoked when remote status is changed and cache is refreshed. They  are currently responsible to fire the appropriate event to the EventBus if one is available.
They are intentionally made protected so subclasses of the `DiscoveryClient` can override them if they need more advanced behaviour like:
- implement the Observer pattern and invoke registered listeners/observers
- compute actual changes when cache is refreshed
- etc

2/ I could create a `CacheRefreshedEvent` similar to the existing `StatusChangedEvent` and fire it every time the cache is refreshed. However, I'm not sure about the implications this additional event may have on components currently listening to the only StatusChangedEvent... What is your opinion?

3/ The `FETCH_REGISTRY_TIMER` includes the time taken by the following bloc of code:

```
 private boolean fetchRegistry(boolean forceFullRegistryFetch) {
     try {
        ....
        // Notify about cache refreshed before updating the instance remote status
        onCacheRefreshed();

        // Update remote status based on refreshed data held in the cache
        updateInstanceRemoteStatus();
   } catch(Throwable t) {
   ....
   } finally {
       tracer.stop();
```

The tracer includes the time it takes to notify listening parties. Should't we stop the timer before?

4/ I could have introduced the `Observer` pattern directly. But then I think it should have been done for both the `StatusChangedEvent` AND the newly introduced `CacheRefreshedEvent`...
They new protected methods are good starting point to build the Observer pattern if needed.""[NetflixOSS » eureka » eureka-pull-requests #280](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/280/) FAILURE
Looks like there's a problem with this pull request
 =||= Don't see why the test failed - cannot reproduce the failure locally.
Just wondering if it is not a timing issue?
 =||= [NetflixOSS » eureka » eureka-pull-requests #281](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/281/) SUCCESS
This pull request looks good
 =||= Thanks @brenuart . I restarted the test and it looks like it was a transient failure.

On your comments:

1/ Agree.

2/ Messages published on the event bus can be consumed with the following recipe:

``` java
// Here I am using an anonymous inner class to reduce verbosity of the example, in reality, although this works, you may want to have a named class.
eventBus.registerSubscriber(new Object() {
    // Any method annotated with @Subscribe will be a consumer of the event class (or any subclass thereof), which is the first (and only) argument in the method.
    @Subscribe
    /* Any access modifier & any method name works. You do not have to implement any interface */
    public void consume(MyEvent event) {
        // Consumption of the event code.
    }
});
```

So the consumers can listen for specific event types without interfering with the consumers of different event types.

Another example to look at for event bus consumption is [EurekaUpStatusResolver](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java)

3/ You are correct on this. I guess right now since EventBus publish and consumption is async it doesn't make a big difference.

4/ Agree.
 =||= Additional modifications after your comments:

(point 2) 
A new `CacheRefreshedEvent` has been created and is automatically published by the `DiscoveryClient` if an `EventBus` is provided.
I also made the `StatusChangeEvent` and `CacheRefreshEvent` inherit from the same parent `DiscoveryEvent`. Having a common parent for all events sent by the same source is quite convenient.

(point 3)
I moved the code not directly related to the refresh of the local cache outside of the scope of the timer.
 =||= [NetflixOSS » eureka » eureka-pull-requests #287](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/287/) SUCCESS
This pull request looks good
 =||= Thanks @brenuart 
 =||= ""Capture ""CacheRefreshed"" event"Bertrand Renuartbrenuart06/15/15, 09:49:10 PM"The objective is to capture ""cache refreshed"" events. A few comments (following discussion in https://github.com/Netflix/eureka/issues/545):

1/ Added protected methods invoked when remote status is changed and cache is refreshed. They  are currently responsible to fire the appropriate event to the EventBus if one is available.
They are intentionally made protected so subclasses of the `DiscoveryClient` can override them if they need more advanced behaviour like:
- implement the Observer pattern and invoke registered listeners/observers
- compute actual changes when cache is refreshed
- etc

2/ I could create a `CacheRefreshedEvent` similar to the existing `StatusChangedEvent` and fire it every time the cache is refreshed. However, I'm not sure about the implications this additional event may have on components currently listening to the only StatusChangedEvent... What is your opinion?

3/ The `FETCH_REGISTRY_TIMER` includes the time taken by the following bloc of code:

```
 private boolean fetchRegistry(boolean forceFullRegistryFetch) {
     try {
        ....
        // Notify about cache refreshed before updating the instance remote status
        onCacheRefreshed();

        // Update remote status based on refreshed data held in the cache
        updateInstanceRemoteStatus();
   } catch(Throwable t) {
   ....
   } finally {
       tracer.stop();
```

The tracer includes the time it takes to notify listening parties. Should't we stop the timer before?

4/ I could have introduced the `Observer` pattern directly. But then I think it should have been done for both the `StatusChangedEvent` AND the newly introduced `CacheRefreshedEvent`...
They new protected methods are good starting point to build the Observer pattern if needed."NaNBertrand Renuart06/15/15, 08:27:03 PM"Move code not directly related to the update of the local cache outside
of the scope of the timer."1
5502.x Minor update to batching integration test.tbak06/15/15, 06:39:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #283](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/283/) SUCCESS
This pull request looks good
 =||= "2.x Minor update to batching integration test.tbak06/15/15, 06:39:16 PMNaNNaNTomasz Bak06/15/15, 06:26:15 PMMinor update to batching integration test.1
551Clean up of static usage of ApplicationInfoManager in DiscoveryClientDavid Liuqiangdavidliu06/16/15, 06:06:05 PMAlso added tests for eventBus events"[NetflixOSS » eureka » eureka-pull-requests #289](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/289/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #290](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/290/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #291](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/291/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #292](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/292/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #293](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/293/) SUCCESS
This pull request looks good
 =||= "Clean up of static usage of ApplicationInfoManager in DiscoveryClientDavid Liuqiangdavidliu06/16/15, 06:06:05 PMAlso added tests for eventBus eventsNaNDavid Liu06/16/15, 07:08:47 AMcr comments1
5522.x Adding buffer hint based eviction for replicationDavid Liuqiangdavidliu06/18/15, 12:26:40 AM"Also done:
- renaming occurrences of ""discovery"" to ""interest"" in schema
- removed RegisterCopy and UnregisterCopy from replication protocol. Using equiv from interest protocol instead
- replication protocol also include StreamStateUpdate now
- Clean up ReplicationChannel interface
- Clean up misleading usages of ""discovery"" to be replaced with ""interest""
- Clean up naming confusion with ReplicationHandler (now ReplicationSender) and TcpReplicationHandler""[NetflixOSS » eureka » eureka-pull-requests #294](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/294/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #298](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/298/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #299](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/299/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #300](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/300/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #301](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/301/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #303](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/303/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #307](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/307/) FAILURE
Looks like there's a problem with this pull request
 =||= "2.x Adding buffer hint based eviction for replicationDavid Liuqiangdavidliu06/18/15, 12:26:40 AM"Also done:
- renaming occurrences of ""discovery"" to ""interest"" in schema
- removed RegisterCopy and UnregisterCopy from replication protocol. Using equiv from interest protocol instead
- replication protocol also include StreamStateUpdate now
- Clean up ReplicationChannel interface
- Clean up misleading usages of ""discovery"" to be replaced with ""interest""
- Clean up naming confusion with ReplicationHandler (now ReplicationSender) and TcpReplicationHandler"NaNDavid Liu06/18/15, 12:20:15 AMforcing a rebuild1
5532.x integration teststbak06/18/15, 02:43:11 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #295](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/295/) SUCCESS
This pull request looks good
 =||= "2.x integration teststbak06/18/15, 02:43:11 PMNaNNaNTomasz Bak06/17/15, 04:22:08 PMMore integration tests tesing failover scenarios.1
554DiscoveryClient maintains a STATIC reference to its EurekaClientConfigBertrand Renuartbrenuart07/01/16, 10:34:09 PM`DiscoveryClient` keeps reference to its `EurekaClientConfig` via a _STATIC_ variable. This may lead to unpredictable behaviour if multiple instances of the client are created."The `clientConfig` static field is still used by static methods that are now deprecated. Removal of the static is therefore impossible until these methods are actually removed.

In the meantime, it would be useful to add a safe guard in the constructor to check if an instance has already been created and throw an exception otherwise. This would prevent people from creating multiple instances until actually supported.

What do you think?
 =||= Since most of the static methods are deprecated (and the remaining ones are fixable), one way out of this bind is to keep two copies of clientConfig, one static and one instance level. The static clientConfig will be used by the deprecated static methods, and the setting of this will be by each client construction (so slightly undefined as to which version you will get when referenced statically).
 =||= Don't you think it might be a better idea to simply prevent multiple instances from being created? I mean, if the the static field is already set, then throw an exception.
The now deprecated static methods are used by clients who assume the singleton pattern anyway - so they are not likely to create multiple instances. And if they do, they are already facing unexpected behaviour.
 =||= If the aim of this is to support multiple instances of DiscoveryClient to be created (for some specific use cases), and the only blocking item is the static client config, then adding exceptions would not be a good user experience, especially since it looks like it's not difficult to make the client config an instance variable of the client itself without compromising the singleton usage of client in the more main stream use case.
 =||= are there any plans and timelines to fix the issue, thanks
 =||= @KishorGrandhe this is on our list of items to fix. If you are interested, a pull request would be very welcome as well. Thanks.
 =||= @qiangdavidliu I could try and make a pull request for this one
 =||= This is fixed and now DiscoveryClient instances now have their own config instances. (A static reference still exist for backwards compatibility of some of the existing deprecated static methods, but the static config will be pointing a non-deterministic version of one of the client's instance level config).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
555Refactor so other DI Systems can extend eureka.Spencer Gibbspencergibb07/16/15, 11:57:38 PM"Make EurekaJacksonCodec more inline with Converters with public static classes to extend.
Make EurekaJacksonCodec.INSTANCE mutable.
Add get/set to DiscoveryClientOptionalArgs.

I'd rather not have a static instance in EurekaJacksonCodec, suggestions welcome.""[NetflixOSS » eureka » eureka-pull-requests #297](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/297/) FAILURE
Looks like there's a problem with this pull request
 =||= Not sure of the build failure.  Didn't change any behavior.
 =||= @tbak I make the `DiscoveryClientOptionalArgs` have a constructor.  It seems to be the simplest thing to do what I'd like to accomplish.
 =||= [NetflixOSS » eureka » eureka-pull-requests #304](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/304/) SUCCESS
This pull request looks good
 =||= @tbak ping, I've rebased against master.
 =||= [NetflixOSS » eureka » eureka-pull-requests #364](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/364/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #365](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/365/) SUCCESS
This pull request looks good
 =||= Thanks @spencergibb . Changes looks clean.
 =||= @qiangdavidliu or @tbak any idea of when you might have a release?
 =||= @spencergibb we are looking at doing an rc release today. Since many of the dependencies has been updated, we will make the full release once the rc from today is confirmed to be stable.
 =||= @qiangdavidliu thanks for the update!  Our team really appreciates it.
 =||= "Refactor so other DI Systems can extend eureka.Spencer Gibbspencergibb07/16/15, 11:57:38 PM"Make EurekaJacksonCodec more inline with Converters with public static classes to extend.
Make EurekaJacksonCodec.INSTANCE mutable.
Add get/set to DiscoveryClientOptionalArgs.

I'd rather not have a static instance in EurekaJacksonCodec, suggestions welcome."NaNSpencer Gibb07/16/15, 04:29:37 PMadd author tag1
556Fixing a flaky unit testDavid Liuqiangdavidliu06/24/15, 08:00:07 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #302](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/302/) FAILURE
Looks like there's a problem with this pull request
 =||= looks like the build system is having hiccups
 =||= [NetflixOSS » eureka » eureka-pull-requests #305](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/305/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #306](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/306/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #324](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/324/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #326](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/326/) FAILURE
Looks like there's a problem with this pull request
 =||= "Fixing a flaky unit testDavid Liuqiangdavidliu06/24/15, 08:00:07 PMNaNNaNDavid Liu06/24/15, 07:59:03 PMAwsAsg refresh fixes (avoid extra calls to aws api + fix potential classCastException)1
557fixed package name of serializerkukgini06/25/15, 12:24:10 AM"StatusInfo's serializer should be 'com.netflix.discovery...' instead of
'com.netflix.eureka...'""[NetflixOSS » eureka » eureka-pull-requests #308](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/308/) SUCCESS
This pull request looks good
 =||= thanks @kukgini 
 =||= "fixed package name of serializerkukgini06/25/15, 12:24:10 AM"StatusInfo's serializer should be 'com.netflix.discovery...' instead of
'com.netflix.eureka...'"NaNkukgini06/18/15, 04:29:36 AM"fix package name of serializer

StatusInfo's serializer should be 'com.netflix.discovery...' instead of
'com.netflix.eureka...'"1
5582.x Merging multiple updates into reactive_registry refactoring branchtbak06/18/15, 07:57:53 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #309](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/309/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #311](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/311/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #312](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/312/) SUCCESS
This pull request looks good
 =||= "2.x Merging multiple updates into reactive_registry refactoring branchtbak06/18/15, 07:57:53 PMNaNNaNTomasz Bak06/18/15, 07:50:12 PMIntegration test update - eliminate possible race condition.1
5592.x reactive registry and service overridestbak06/18/15, 08:50:28 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #313](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/313/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #314](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/314/) SUCCESS
This pull request looks good
 =||= "2.x reactive registry and service overridestbak06/18/15, 08:50:28 PMNaNNaNTomasz Bak06/18/15, 08:43:08 PMAnother race condition fix in the integration test1
5602.x Updating to Governator 1.7 and archaius2.David Liuqiangdavidliu06/23/15, 09:50:10 PM"- dependency updates
- server refactoring to be inline with governator 1.7""[NetflixOSS » eureka » eureka-pull-requests #315](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/315/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #316](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/316/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #317](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/317/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #318](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/318/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #319](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/319/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #322](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/322/) SUCCESS
This pull request looks good
 =||= "2.x Updating to Governator 1.7 and archaius2.David Liuqiangdavidliu06/23/15, 09:50:10 PM"- dependency updates
- server refactoring to be inline with governator 1.7"NaNDavid Liu06/23/15, 09:01:50 PMAdding bridging support for archaius1 (requirement for adminConsole)1
5611.x Add VPC supporttbak09/30/15, 04:26:19 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #320](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/320/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #321](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/321/) SUCCESS
This pull request looks good
 =||= This was prototype work. With coming changes, we will have to visit VPC support.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5622.x netrouter update to better deal with asynchronous events.tbak06/23/15, 09:26:34 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #323](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/323/) SUCCESS
This pull request looks good
 =||= "2.x netrouter update to better deal with asynchronous events.tbak06/23/15, 09:26:34 PMNaNNaNTomasz Bak06/23/15, 09:15:51 PMnetrouter update to better deal with asynchronous events.1
563Adding configurable awsAsg cache expiry timeDavid Liuqiangdavidliu06/25/15, 06:50:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #328](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/328/) SUCCESS
This pull request looks good
 =||= "Adding configurable awsAsg cache expiry timeDavid Liuqiangdavidliu06/25/15, 06:50:44 PMNaNNaNDavid Liu06/25/15, 06:37:28 PMAdding configurable awsAsg cache expiry time1
5642.x ASG status overrides + DI refactoringstbak06/29/15, 09:44:39 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #329](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/329/) SUCCESS
This pull request looks good
 =||= "2.x ASG status overrides + DI refactoringstbak06/29/15, 09:44:39 PMNaNNaNTomasz Bak06/28/15, 03:14:03 AMMore DI friendly system composition - next iteration1
5652.x (WIP) s3 override registry for OOS statusDavid Liuqiangdavidliu07/01/15, 08:32:48 PMStill WIP, need to integrate with #564 before merging."[NetflixOSS » eureka » eureka-pull-requests #330](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/330/) SUCCESS
This pull request looks good
 =||= Still todo: adding integ tests
 =||= [NetflixOSS » eureka » eureka-pull-requests #331](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/331/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #335](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/335/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #336](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/336/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #337](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/337/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #338](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/338/) SUCCESS
This pull request looks good
 =||= "2.x (WIP) s3 override registry for OOS statusDavid Liuqiangdavidliu07/01/15, 08:32:48 PMStill WIP, need to integrate with #564 before merging.NaNDavid Liu07/01/15, 07:47:26 PMEven more guice fixes1
5662.x Migrate to archaius2 configuration proxies.tbak06/30/15, 08:45:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #332](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/332/) SUCCESS
This pull request looks good
 =||= Much cleaner:)
 =||= [NetflixOSS » eureka » eureka-pull-requests #334](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/334/) SUCCESS
This pull request looks good
 =||= "2.x Migrate to archaius2 configuration proxies.tbak06/30/15, 08:45:16 PMNaNNaNTomasz Bak06/30/15, 08:35:58 PMAdd missing prefixes to properties in configuration files.1
5671.x New Jackson JSON/XML serializer.tbak09/02/15, 04:23:19 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #339](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/339/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #348](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/348/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #356](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/356/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #410](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/410/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #411](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/411/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #418](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/418/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #419](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/419/) SUCCESS
This pull request looks good
 =||= "1.x New Jackson JSON/XML serializer.tbak09/02/15, 04:23:19 PMNaNNaNTomasz Bak09/02/15, 12:17:18 AMAdd support for compact XML replies.1
5682.x Moving selfInfoResolvers to their own package.David Liuqiangdavidliu07/02/15, 02:00:20 AM"Fix duplicate write server self registration.
Fix ServerIdentity in ChangeNotifications.""[NetflixOSS » eureka » eureka-pull-requests #340](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/340/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #341](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/341/) SUCCESS
This pull request looks good
 =||= "2.x Moving selfInfoResolvers to their own package.David Liuqiangdavidliu07/02/15, 02:00:20 AM"Fix duplicate write server self registration.
Fix ServerIdentity in ChangeNotifications."NaNDavid Liu07/02/15, 01:54:13 AM"2.x fixes:
- add retry for replicationservice peer resolve
- fix embeddedTcpServer start() and close()"1
5692.x More deterministic integ testsDavid Liuqiangdavidliu07/02/15, 06:45:12 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #342](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/342/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #343](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/343/) SUCCESS
This pull request looks good
 =||= "2.x More deterministic integ testsDavid Liuqiangdavidliu07/02/15, 06:45:12 AMNaNNaNNaNNaNNaN1
5702.x unit/integration test updatestbak07/02/15, 04:38:03 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #344](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/344/) SUCCESS
This pull request looks good
 =||= "2.x unit/integration test updatestbak07/02/15, 04:38:03 PMNaNNaNTomasz Bak07/02/15, 04:27:58 PMFix flaky test - use test scheduler for more deterministic behavior.1
5712.x merge admin UI tabs + connect health SelfInfoResolver in write clustertbak07/02/15, 06:31:21 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #345](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/345/) SUCCESS
This pull request looks good
 =||= "2.x merge admin UI tabs + connect health SelfInfoResolver in write clustertbak07/02/15, 06:31:21 PMNaNNaNTomasz Bak07/02/15, 06:18:03 PMConnect health SelfInfoResolver in write cluster.1
5722.x Minor fixesDavid Liuqiangdavidliu07/02/15, 10:05:27 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #346](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/346/) SUCCESS
This pull request looks good
 =||= "2.x Minor fixesDavid Liuqiangdavidliu07/02/15, 10:05:27 PMNaNNaNDavid Liu07/02/15, 09:58:09 PMMinor fixes1
5732.x Removing extraneous eureka1 config file in bridge serverDavid Liuqiangdavidliu07/03/15, 07:29:17 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #347](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/347/) SUCCESS
This pull request looks good
 =||= "2.x Removing extraneous eureka1 config file in bridge serverDavid Liuqiangdavidliu07/03/15, 07:29:17 AMNaNNaNDavid Liu07/03/15, 07:28:26 AMRemoving extraneous eureka1 config file in bridge server1
5742.x Fix connection leak in RxHttpReverseProxytbak07/05/15, 05:11:29 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #349](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/349/) SUCCESS
This pull request looks good
 =||= "2.x Fix connection leak in RxHttpReverseProxytbak07/05/15, 05:11:29 AMNaNNaNTomasz Bak07/05/15, 05:04:58 AMFix connection leak in RxHttpReverseProxy1
5752.x Eureka2 home pagetbak06/02/16, 10:25:03 PM"Currently Eureka2 hasn't any home page, but instead provides two Karyon webadmin UI pages (registry insight and server status). These pages are strictly Eureka2 specific, as unlike in Eureka1 where there was always local full registry copy, in Eureka2 there might be multitude of different client subscriptions, dynamically changing over time. The latter may be tracked but only within a framework, which is out of scope of Eureka2 project itself (it is a good fit for Karyon).

I propose to convert the two Karyon webadmin UI pages into Eureka2 WEB app, and leave to Karyon admin the standard UI tabs that are there.""archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5762.x In AbstractPatternInterest the compiled pattern should not be part of equalsDavid Liuqiangdavidliu07/08/15, 12:42:20 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #350](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/350/) SUCCESS
This pull request looks good
 =||= "2.x In AbstractPatternInterest the compiled pattern should not be part of equalsDavid Liuqiangdavidliu07/08/15, 12:42:20 AMNaNNaNDavid Liu07/08/15, 12:34:24 AMIn AbstractPatternInterest the compiled pattern should not be part of equals.1
5772.x Adding additional debuggingDavid Liuqiangdavidliu07/08/15, 07:16:58 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #351](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/351/) SUCCESS
This pull request looks good
 =||= "2.x Adding additional debuggingDavid Liuqiangdavidliu07/08/15, 07:16:58 AMNaNNaNDavid Liu07/08/15, 05:24:28 AMAdding additional debugging1
5782.x Eureka CLI refactoringtbak07/08/15, 07:59:55 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #352](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/352/) SUCCESS
This pull request looks good
 =||= "2.x Eureka CLI refactoringtbak07/08/15, 07:59:55 PMNaNNaNTomasz Bak07/08/15, 04:21:36 PMMerge remote-tracking branch 'remotes/netflix/2.x' into 2.x1
5792.x Replace Eureka2 ext loader with governator profile loader mechanism.tbak07/09/15, 10:38:23 PM"Additionally:
- further configuration cleanup
- more flexibility in building EurekaDeployment with extension modules
- supporting configuration override in EurekaDeployment builder""[NetflixOSS » eureka » eureka-pull-requests #353](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/353/) SUCCESS
This pull request looks good
 =||= "2.x Replace Eureka2 ext loader with governator profile loader mechanism.tbak07/09/15, 10:38:23 PM"Additionally:
- further configuration cleanup
- more flexibility in building EurekaDeployment with extension modules
- supporting configuration override in EurekaDeployment builder"NaNTomasz Bak07/09/15, 07:08:46 PM"Replace Eureka2 ext loader with governator profile loader mechanism.

Additionally:
* further configuration cleanup
* more flexibility in building EurekaDeployment with extension modules
* supporting configuration override in EurekaDeployment builder"1
5802.x Test/TODOs cleanuptbak07/09/15, 11:52:50 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #354](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/354/) SUCCESS
This pull request looks good
 =||= "2.x Test/TODOs cleanuptbak07/09/15, 11:52:50 PMNaNNaNTomasz Bak07/09/15, 11:23:43 PMTest/TODOs cleanup1
5812.x Remove legacy eviction code.tbak07/10/15, 12:02:09 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #355](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/355/) SUCCESS
This pull request looks good
 =||= "2.x Remove legacy eviction code.tbak07/10/15, 12:02:09 AMNaNNaNTomasz Bak07/09/15, 11:52:32 PMRemove legacy eviction code.1
5822.x Server module cleanupDavid Liuqiangdavidliu07/10/15, 11:43:12 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #357](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/357/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #358](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/358/) SUCCESS
This pull request looks good
 =||= "2.x Server module cleanupDavid Liuqiangdavidliu07/10/15, 11:43:12 PMNaNNaNDavid Liu07/10/15, 11:09:03 PMbridge does not need to bind bootstrap1
5832.x Making the module list in the runners more modifiableDavid Liuqiangdavidliu07/12/15, 09:20:52 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #359](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/359/) SUCCESS
This pull request looks good
 =||= "2.x Making the module list in the runners more modifiableDavid Liuqiangdavidliu07/12/15, 09:20:52 PMNaNNaNDavid Liu07/12/15, 09:12:24 PMMaking the module list in the runners more modifiable1
5842.x Adding health status to bridge server self info resolver	David Liuqiangdavidliu07/12/15, 09:50:42 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #360](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/360/) SUCCESS
This pull request looks good
 =||= "2.x Adding health status to bridge server self info resolver	David Liuqiangdavidliu07/12/15, 09:50:42 PMNaNNaNNaNNaNNaN1
5852.x fix typo that used write module in bridge server runnerDavid Liuqiangdavidliu07/13/15, 12:05:05 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #361](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/361/) SUCCESS
This pull request looks good
 =||= "2.x fix typo that used write module in bridge server runnerDavid Liuqiangdavidliu07/13/15, 12:05:05 AMNaNNaNDavid Liu07/12/15, 10:14:34 PMfix typo that used write module in bridge server runner1
5862.x Apply refactor work to dashboard server + binding some components as eagerSingletonsDavid Liuqiangdavidliu07/13/15, 06:37:58 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #362](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/362/) SUCCESS
This pull request looks good
 =||= "2.x Apply refactor work to dashboard server + binding some components as eagerSingletonsDavid Liuqiangdavidliu07/13/15, 06:37:58 AMNaNNaNNaNNaNNaN1
5872.x various fixesDavid Liuqiangdavidliu07/16/15, 01:40:16 AM"- use karyon3 for consolidated config loading across modules and extModules
- switch kafka dep to kafka-clients and other dependency clean ups
- update eureka2-kafka to use latest archaius for config loading
- update gradle runners
- change admin eureka2 view to read directly from registry""[NetflixOSS » eureka » eureka-pull-requests #363](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/363/) SUCCESS
This pull request looks good
 =||= "2.x various fixesDavid Liuqiangdavidliu07/16/15, 01:40:16 AM"- use karyon3 for consolidated config loading across modules and extModules
- switch kafka dep to kafka-clients and other dependency clean ups
- update eureka2-kafka to use latest archaius for config loading
- update gradle runners
- change admin eureka2 view to read directly from registry"NaNDavid Liu07/16/15, 01:34:22 AMRemove (revert) write server dep on ext eureka2 admin module.1
588Add the ability to use additional Jersey ClientFilters in the DiscoveryClientWill Tranwilliam-tran07/20/15, 08:38:39 PMSo we can do things like add Authorization headers and authenticate those on the Eureka Server"[NetflixOSS » eureka » eureka-pull-requests #366](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/366/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #367](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/367/) SUCCESS
This pull request looks good
 =||= Hi @willtran- can you please do a rebase? Thanks.
 =||= done

On Thu, Jul 16, 2015 at 8:03 PM, David Liu notifications@github.com wrote:

> Hi @willtran- https://github.com/willtran- can you please do a rebase?
> Thanks.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/588#issuecomment-122133875.
 =||= [NetflixOSS » eureka » eureka-pull-requests #369](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/369/) SUCCESS
This pull request looks good
 =||= Hey @qiangdavidliu what do you think of this PR?
 =||= @willtran- looks good, thanks for the contribution.
 =||= "Add the ability to use additional Jersey ClientFilters in the DiscoveryClientWill Tranwilliam-tran07/20/15, 08:38:39 PMSo we can do things like add Authorization headers and authenticate those on the Eureka ServerNaNWill Tran07/16/15, 07:05:01 PM"Add the ability to use additional Jersey ClientFilters in the
DiscoveryClient"1
5892.x AbstractServer should not expose method to access sourced registryDavid Liuqiangdavidliu07/16/15, 11:44:55 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #368](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/368/) SUCCESS
This pull request looks good
 =||= "2.x AbstractServer should not expose method to access sourced registryDavid Liuqiangdavidliu07/16/15, 11:44:55 PMNaNNaNNaNNaNNaN1
590Doc: AWS credentials obtained through InstanceProfileCredentialsJeff Myersjeffreymyers07/22/15, 05:39:27 PM"Minor issue with the wiki documentation here: https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud#eureka-aws-specific-properties

This section indicates that setting the AWS IAM keys via the configuration is required, but looking at the code, it falls back to using the AWS SDK's InstanceProfileCredentialsProvider to pick up the credentials dynamically from the EC2 Instance Metadata Service. We're much happier with leveraging this option rather than specifying the keys in the config, so I'd suggest amending the documentation to indicate that this is the fallback behavior if the keys are not specified in the config.

Here are the relevant lines in the code where this fallback behavior is used:
https://github.com/Netflix/eureka/blob/9711533554c62b472a7248b71764c56266ce0c8e/eureka-core/src/main/java/com/netflix/eureka/util/EIPManager.java#L353
https://github.com/Netflix/eureka/blob/329d104ceab914d186a54f3a8e61c23246cc5f2a/eureka-core/src/main/java/com/netflix/eureka/util/AwsAsgUtil.java#L472""Fixed, thanks @jeffreymyers 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
591Features/jackson codec ng integration with the clientDavid Liuqiangdavidliu07/23/15, 02:04:40 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #370](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/370/) SUCCESS
This pull request looks good
 =||= "Features/jackson codec ng integration with the clientDavid Liuqiangdavidliu07/23/15, 02:04:40 AMNaNNaNDavid Liu07/23/15, 01:51:10 AM"Integrating JacksonNG with existing codecs.
Fix an incompatibility with the existing (now called Legacy) JacksonJson codec."1
592Binding exception due EurekaInstanceConfig was already configured in …Milan Baranxbaran07/23/15, 10:27:10 PM"ExampleEurekaGovernatedService does not work because a wrong guice binding. 

The EurekaInstanceConfig is already configured in EurekaModule and also in anonymous AbstractModule. So, it causes guice to throw already configured exception. I just override EurekaModule with AbstractModule via Modules.override() method. ""[NetflixOSS » eureka » eureka-pull-requests #371](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/371/) SUCCESS
This pull request looks good
 =||= @xbaran thanks for the fix.
 =||= "Binding exception due EurekaInstanceConfig was already configured in …Milan Baranxbaran07/23/15, 10:27:10 PM"ExampleEurekaGovernatedService does not work because a wrong guice binding. 

The EurekaInstanceConfig is already configured in EurekaModule and also in anonymous AbstractModule. So, it causes guice to throw already configured exception. I just override EurekaModule with AbstractModule via Modules.override() method. "NaNMilan Baran07/23/15, 01:01:44 PMBinding exception due EurekaInstanceConfig was already configured in EurekaModule1
593Better error handlingDavid Liuqiangdavidliu07/23/15, 05:43:54 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #372](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/372/) SUCCESS
This pull request looks good
 =||= "Better error handlingDavid Liuqiangdavidliu07/23/15, 05:43:54 PMNaNNaNDavid Liu07/23/15, 05:35:37 PMBetter error handling1
594Updating dependencies to jersey 1.19 and governator 1.7.5.David Liuqiangdavidliu07/23/15, 11:31:32 PMAlso changing eureka-client dependencies to just guice 4 and governator-annotations."[NetflixOSS » eureka » eureka-pull-requests #373](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/373/) SUCCESS
This pull request looks good
 =||= "Updating dependencies to jersey 1.19 and governator 1.7.5.David Liuqiangdavidliu07/23/15, 11:31:32 PMAlso changing eureka-client dependencies to just guice 4 and governator-annotations.NaNDavid Liu07/23/15, 11:23:35 PM"Updating dependencies to jersey 1.19 and governator 1.7.5.
Changing eureka-client dependencies to just guice 4 and governator-annotations."1
5951.x fix an expensive method call on the critical pathDavid Liuqiangdavidliu07/27/15, 04:12:28 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #374](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/374/) SUCCESS
This pull request looks good
 =||= "1.x fix an expensive method call on the critical pathDavid Liuqiangdavidliu07/27/15, 04:12:28 PMNaNNaNDavid Liu07/24/15, 10:53:30 PMstoreOverrides should not check for remote region1
596Standardizing DiscoveryClient's optional configsDavid Liuqiangdavidliu07/27/15, 06:15:13 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #375](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/375/) SUCCESS
This pull request looks good
 =||= "Standardizing DiscoveryClient's optional configsDavid Liuqiangdavidliu07/27/15, 06:15:13 PMNaNNaNDavid Liu07/27/15, 06:06:46 PMStandardizing DiscoveryClient's optional configs1
597add application version fieldFabian Wallwitzcforce07/01/16, 10:30:49 PM"The feature allows to register the same application in different versions at the same time. The lookup is able to filter the application instance list returened on the wished version (range) on query, not only on client side. We can also retrieve the latest (version) application instances only.
This could also be done by a naming schema for application names, like applicationname>_<version>. However this logic would need more than the ""Like"" operator for interests and additional client side filtering""@cforce thanks for the suggestion. Are you interested in making a pull request for this feature?
 =||= I have to somehow find a solution. Because of this feature missing i would do it in the client by missung the vip field - however this solution is a workaround. I hoped you maybe have an better idea or already had same thoughts in this direction.
 =||= @cforce just re-read your initial post, are you raising this issue for eureka 1.x or eureka 2.x? Using the vip field for versioning is not a misuse, a vipAddress can be a composite of multiple variables that define the application, one of which can be the version itself.
 =||= Eureka v1 is the one released, isn't it?

But how can i search for ""in between "" or above ""v2.0""?
 =||= Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
598add application alias namesFabian Wallwitzcforce07/01/16, 10:30:19 PMSimilar to cnames this feature allows to register and lookup the same app under more than one name,"@cforce thanks for the suggestion. Are you interested in making a pull request for this feature?
 =||= How would you implement that?
 =||= @cforce it's up to you:). We'd love a discussion/design beforehand but feel free to make a pull request and we can discuss over that also.
 =||= How is this different than vip? You can already specify a list to `eureka.vipAddress` and then do the lookup for a given vip.
 =||= > You can already specify a list to `eureka.vipAddress` and then do the lookup for a given vip.

Where in the Eureka code base does something interpret that property's value as a list?
 =||= Ah, there is [`com.netflix.discovery.shared.Applications#addInstanceToMap()`](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/Applications.java#L515), which contains this statement:

``` java
String[] vipAddressArray = vipAddresses.split("","");
```
 =||= Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5992.x various minor fixes and improvementsDavid Liuqiangdavidliu07/29/15, 11:00:25 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #376](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/376/) SUCCESS
This pull request looks good
 =||= "2.x various minor fixes and improvementsDavid Liuqiangdavidliu07/29/15, 11:00:25 PMNaNNaNDavid Liu07/29/15, 10:53:18 PMAdding some additional logging for flaky test1
600Eureka Client dependency update to Jersey 2.xFabian Wallwitzcforce07/31/15, 08:09:57 AMWe have to add the spring-boot-starter-jersey to put Jersyey 2.14 on the classpath. The mix of both versions lead to strange NoSuchMethodErrors during application startup! The only solution seems to be to use JAX-RX 1.x (Jersey 1) . This is maybe related to https://github.com/Netflix/eureka/issues/376"@cforce eureka-client depends on jersey 1.x only and we have not tested (or guarantee) compatibility with jersey 2.x. We also do not have any plans on upgrading to jersey 2.x in the short term.
 =||= @qiangdavidliu can we shade the dependency on Jersey 1.x? Causing issues since most other frameworks have moved on to JAX-RS 2.0.
 =||= We implement a new transport that will allow one to plug-in different HTTP client implementations. It is still on branch, but we will merge this to master probably next week. Once it is done, you can exclude jersey 1.x, and provide equivalent jersey 2.x implementation
Check: https://github.com/Netflix/eureka/tree/refactorings/transport/eureka-client/src/main/java/com/netflix/discovery/shared/transport

If we have time, we might provide a new module (eureka-client-jersey2), that would do exactly this.
 =||= Would that make it possible to use something other than Jersey? It is just required to be a JAX-RS implementation?
 =||= For eureka-client, yes this could be anything that implements EurekaHttpClient API. But on the server side we depend heavily on JAX-RS.
 =||= How its solved now? Do i still need to pimp like this?

``` xml
 <plugins>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- defined in spring-cloud-starter-parent pom (as documentation hint), but needs to be repeated here -->
                <configuration>
                    <requiresUnpack>
                        <dependency>
                            <groupId>com.netflix.eureka</groupId>
                            <artifactId>eureka-core</artifactId>
                        </dependency>
                        <dependency>
                            <groupId>com.netflix.eureka</groupId>
                            <artifactId>eureka-client</artifactId>
                        </dependency>
                    </requiresUnpack>
                </configuration>
            </plugin>
        </plugins>
```

or 

``` xml
<dependency>
        <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-eureka</artifactId>
    <exclusions>                
        <exclusion>
            <artifactId>jsr311-api</artifactId>
            <groupId>javax.ws.rs</groupId>
        </exclusion>
    </exclusions>
</dependency>
```
 =||= We are working towards enabling multiple transports in Eureka client. There
is already jersey2 implementation, however DiscoveryClient is still tightly
coupled with jersey1.x. We plan to re-write this code next month, after
holiday season.

On Tue, Dec 1, 2015 at 6:17 AM, Fabi notifications@github.com wrote:

> How its solved now? Do i still need to pimp like this?
> 
> com.spotify
> docker-maven-plugin
> 
> org.springframework.boot
> spring-boot-maven-plugin
> 
> <!-- defined in spring-cloud-starter-parent pom (as documentation hint),
> but needs to be repeated here -->
> 
> com.netflix.eureka
> eureka-core
> 
> com.netflix.eureka
> eureka-client
> 
> or
> 
> org.springframework.cloud
> spring-cloud-starter-eureka
> 
> jsr311-api
> javax.ws.rs
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/600#issuecomment-160981111.
 =||= Any updates on Jersey2 version? Thanks!
 =||= @singerdmx we are doing some work that will help with this this quarter, but we can't commit to any timelines right now unfortunately. I will update once we have anything more concrete.
 =||= Could someone give rough estimate on how long it takes to decouple code from jersey v1? 
Thanks!
 =||= Hi guys. Uncopling of jersey1 is essential for us in order to use Eureka. Any update on the progress would be much appreciated.
 =||= It's not a priority for them, but I'm sure they would look at a pull request.
 =||= Eagerly awaiting this as well
 =||= @jasollien @saneItchyHog we are taking a more drastic direction w.r.t. the client side of eureka (thinner clients with no jersey dependencies at all), and is working more towards this goal at the moment. We believe that this is a more flexible solution at the end of the day as it addresses other dependency problems as well as the jersey issue.

Us providing a jersey 2.x implementation of the current client is technically feasible, however part of the value of eureka (client and server) is that is it battle tested in very large and varied deployment scenarios at Netflix, and even if we provide a jersey 2.x variant, it will not be used internally and will lack similar levels of production readiness.

Having said the above, the aforementioned (earlier in this thread) new transport is now active, and there is a jersey 2.x skeleton in the eureka-client-jersey2 submodule, so we are definitely more than willing to look at any pull requests to build on top of these.
 =||= @qiangdavidliu I think most of the folks following this would agree that removing the Jersey dependency from your side of things would be the 'best' solution for folks who are using this library. Personally, I don't care what you use for your underlying communications as long it's been well tested and vetted (which is what you are going for), AND doesn't get in the way of our own application development (which Jersey dependencies of any kind have the chance of doing).

tl;dr: 👍 

Look forward to the changes!
 =||= @qiangdavidliu 

> we are taking a more drastic direction w.r.t. the client side of eureka (thinner clients with no jersey dependencies at all), and is working more towards this goal at the moment.

I am starting to look into eureka-client-jersey2 and picking up where you guys left off, but I wanted to put a feeler out to see what progress had been made on the jersey-agnostic client and if there was the possibility of a release candidate being available.
 =||= @mattnelson as part of the new work we are doing a bit more than just a different client, but are also taking advantage of this to rework the data model to update it to the 2016 requirements we have as a company, compared to when eureka was first published (better VPC support for example). Part of the work will include introducing a proxy tier to handle the compatibility with the existing eureka server so I suspect it would not fit with your immediate use case. 

If you are keen to follow up on the existing -jersey2 work that would be greatly appreciated, as I don't think the newer work will completely deprecate all use of the existing client(s). I think it will bring a lot of value to this project.

Thanks.
 =||= @mattnelson we have users (large institutions) that would love have a jersey2 client working.
 =||= Got the PR out for this on #821 
 =||= @spencergibb now jersey 2 compatibility released in eureka 1.6.0 but you planning to upgrade to eureka 1.5.6 in 1.3.0.M1. 
is there possibility to push upgrades to 1.6.0 ?
 =||= Considering it has been over a year since the issue was closed and nowadays spring-boot applications with jersey 2 clients are widely-used, what is the recommended approach to use Eureka client in web services which also already use jersey 2 clients? 

For instance, I have struggled to find a recommendation or example on using eureka clients with any spring boot app that utilizes spring-boot-starter-jersey or the likes (jersey 2 dependencies) which are included in most spring examples.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
601Remove unused reference to DynamicPropertyFactoryelandau08/04/15, 05:45:18 PMThis triggers Archaius static initialization, which is not necessary here."[NetflixOSS » eureka » eureka-pull-requests #377](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/377/) SUCCESS
This pull request looks good
 =||= Thanks
 =||= "Remove unused reference to DynamicPropertyFactoryelandau08/04/15, 05:45:18 PMThis triggers Archaius static initialization, which is not necessary here.NaNelandau08/03/15, 06:29:09 PMRemove unused reference to DynamicPropertyFactory1
602InstanceInfo data loaded during server bootstrap should be evicted after some timetbak06/02/16, 10:26:11 PMEureka write server can load initial registry content from an external source, prior to setting yourself into UP status. This data must have a well defined lifecycle, and ideally its corresponding instance info holders should be removed, as soon as regular registration updates are received. Stale data must be dropped after configurable amount of time."archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6032.x Minor fixes.tbak08/03/15, 08:13:35 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #378](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/378/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #379](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/379/) SUCCESS
This pull request looks good
 =||= "2.x Minor fixes.tbak08/03/15, 08:13:35 PMNaNNaNTomasz Bak08/03/15, 08:04:49 PMRemove unused code.1
6042.x Eureka1 bridge refactoringtbak08/04/15, 06:13:48 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #380](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/380/) SUCCESS
This pull request looks good
 =||= "2.x Eureka1 bridge refactoringtbak08/04/15, 06:13:48 PMNaNNaNTomasz Bak08/04/15, 04:38:41 PMRemove legacy bridge server.1
6052.x Fix bug in kafka audit service.tbak08/04/15, 10:03:31 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #381](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/381/) SUCCESS
This pull request looks good
 =||= "2.x Fix bug in kafka audit service.tbak08/04/15, 10:03:31 PMNaNNaNTomasz Bak08/04/15, 09:57:31 PMFix bug in kafka audit service.1
606Adding mini jackson deserialization to the codec setsDavid Liuqiangdavidliu08/05/15, 12:49:27 AM"- Adding mini jackson deserialization to the codec sets
- sync with master""[NetflixOSS » eureka » eureka-pull-requests #382](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/382/) SUCCESS
This pull request looks good
 =||= "Adding mini jackson deserialization to the codec setsDavid Liuqiangdavidliu08/05/15, 12:49:27 AM"- Adding mini jackson deserialization to the codec sets
- sync with master"NaNDavid Liu08/05/15, 12:28:18 AMAdding mini jackson deserialization to the codec sets1
6072.x Fix kafka value serializer.tbak08/05/15, 03:38:39 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #383](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/383/) SUCCESS
This pull request looks good
 =||= "2.x Fix kafka value serializer.tbak08/05/15, 03:38:39 PMNaNNaNTomasz Bak08/05/15, 03:31:49 PMFix kafka value serializer.1
6082.x Fix resource leak in kafka service.tbak08/05/15, 04:12:31 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #384](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/384/) SUCCESS
This pull request looks good
 =||= "2.x Fix resource leak in kafka service.tbak08/05/15, 04:12:31 PMNaNNaNTomasz Bak08/05/15, 04:04:44 PMFix resource leak in kafka service.1
609Adds a hook to allow sub-classes to customize eureka jackson module.Spencer Gibbspencergibb10/07/15, 09:18:43 PMWould allow me to replace [this reflection hack](https://github.com/spring-cloud/spring-cloud-netflix/blob/eureka-1-1-157/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/eureka/DataCenterAwareJacksonCodec.java#L56-L86) with just a couple of lines in `customizeModule`."[NetflixOSS » eureka » eureka-pull-requests #385](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/385/) SUCCESS
This pull request looks good
 =||= @spencergibb we are working on a more native jackson codec on the features/jackson_codec_ng branch. The code is pretty close to being merged back in to master. Do you want to take a look at the changes there w.r.t. your pull request?
 =||= @qiangdavidliu I saw that a few days ago. I'll take a look.
 =||= @qiangdavidliu basically what we are doing is adding some functionality to serialization/deserialization of InstanceInfo.  We have sub-classed the existing serializer/deserializer and plugged in our code back into the right places.  Will we be able to do that in `jackson_codec_ng`? (still looking over it, it's big).
 =||= @spencergibb most of the code for the new codec are in this package https://github.com/Netflix/eureka/tree/features/jackson_codec_ng/eureka-client/src/main/java/com/netflix/discovery/converters/jackson, see EurekaJacksonCodecNG.java as the main entry point.

Multiple codec types (such as the older EurekaJacksonCodec and the newer NG version) will be supported for a while and configuration is available to switch between them, but at some point the non-NG codecs will be deprecated and removed. If you would like to add hooks to provide custom behaviour, I would try to add them to both EurekaJacksonCodec and EurekaJacksonCodecNG. Hopefully it'll be pretty straight forward.
 =||= @qiangdavidliu that's what I was looking for, thanks.  What do you think would be best, for me to wait until `jackson_codec_ng` gets merged into master?
 =||= If you can wait a few days, it should make it back to master. Also feel free to make pulls to that branch directly. The code in that branch is pretty much complete and sync-ed with master, so we are just waiting for some performance experiments to be done before we call it good and merge it back.
 =||= @qiangdavidliu will do.  If I get time, I'll make a pull to the branch, otherwise I'll wait.
 =||= @spencergibb is this pull still needed now that (hopefully) you no longer need to customize the serializer?
 =||= No it is not.
 =||= Thanks. Closing.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6102.x bug fix + storing extended ServicePort information in Eureka1 metadatatbak08/05/15, 11:24:30 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #386](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/386/) SUCCESS
This pull request looks good
 =||= "2.x bug fix + storing extended ServicePort information in Eureka1 metadatatbak08/05/15, 11:24:30 PMNaNNaNTomasz Bak08/05/15, 11:16:26 PMStore extended ServicePort information in Eureka1 metadata1
6112.x BootstrapClusterAddresses property should be optional.tbak08/05/15, 11:38:23 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #387](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/387/) SUCCESS
This pull request looks good
 =||= "2.x BootstrapClusterAddresses property should be optional.tbak08/05/15, 11:38:23 PMNaNNaNTomasz Bak08/05/15, 11:33:17 PMBootstrapClusterAddresses property should be optional.1
612Adding server side capability to return compact json dataDavid Liuqiangdavidliu08/06/15, 08:24:20 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #388](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/388/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #389](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/389/) SUCCESS
This pull request looks good
 =||= "Adding server side capability to return compact json dataDavid Liuqiangdavidliu08/06/15, 08:24:20 PMNaNNaNDavid Liu08/06/15, 06:53:41 PMMore codec compatibility (for xml this time)1
6132.x Add more features to EurekaCLI + fix log level in InterestChannelImpltbak08/06/15, 08:51:53 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #390](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/390/) SUCCESS
This pull request looks good
 =||= "2.x Add more features to EurekaCLI + fix log level in InterestChannelImpltbak08/06/15, 08:51:53 PMNaNNaNTomasz Bak08/06/15, 08:43:59 PMAdd more features to EurekaCLI + fix log level in InterestChannelImpl1
614New sub-project to configure eureka using archaius2elandau08/10/15, 06:17:02 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #391](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/391/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #392](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/392/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #393](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/393/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #394](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/394/) SUCCESS
This pull request looks good
 =||= Can the legacy archaius bindings be pulled out to a separate lib so that if using archaius2 we don't have to pull in the legacy version?
 =||= Removing the legacy libs would require a bit more work.  @qiangdavidliu may take a stab at it.
 =||= [NetflixOSS » eureka » eureka-pull-requests #396](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/396/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #397](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/397/) SUCCESS
This pull request looks good
 =||= "New sub-project to configure eureka using archaius2elandau08/10/15, 06:17:02 PMNaNNaNelandau08/10/15, 05:55:57 PMRevert DefaultEurekaClientConfigProvider singleton changes1
615Adding eureka accept to the vip resourcesDavid Liuqiangdavidliu08/07/15, 09:15:30 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #395](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/395/) SUCCESS
This pull request looks good
 =||= "Adding eureka accept to the vip resourcesDavid Liuqiangdavidliu08/07/15, 09:15:30 PMNaNNaNNaNNaNNaN1
6162.x Diagnostic REST API - initial versiontbak08/14/15, 11:27:06 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #398](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/398/) SUCCESS
This pull request looks good
 =||= "2.x Diagnostic REST API - initial versiontbak08/14/15, 11:27:06 PMNaNNaNTomasz Bak08/14/15, 11:20:57 PMDiagnostic REST API - initial version1
617CatchupJonathan Bondbondj10/07/15, 09:20:33 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #399](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/399/) FAILURE
Looks like there's a problem with this pull request
 =||= Thanks @bondj. This is indirectly fixed in the refactorings/transport branch. Closing.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
618Features/jackson codec ngJonathan Bondbondj08/21/15, 06:12:59 PMAdd some interns to save memory."[NetflixOSS » eureka » eureka-pull-requests #400](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/400/) SUCCESS
This pull request looks good
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6192.x REST API extensiontbak08/19/15, 06:08:35 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #401](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/401/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #402](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/402/) ABORTED
 =||= [NetflixOSS » eureka » eureka-pull-requests #405](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/405/) SUCCESS
This pull request looks good
 =||= "2.x REST API extensiontbak08/19/15, 06:08:35 PMNaNNaNTomasz Bak08/19/15, 06:01:42 PMAdd copyright headers1
6201.x Adjust severity levels of log entries in DiscoveryClienttbak07/01/16, 10:29:55 PM`DiscoveryClient` generates a lot of noise at warn level."Closing due to inactivity.
 =||= I actually really agree with this one. We see lots of users asking about what look like errors in the logs that are warnings.
 =||= @spencergibb we've actually removed some of the warn level logging recently, especially the reconcile hash code mismatch warn log msg that had no value, and is the most ""annoying"" of the warn logs.
 =||= @qiangdavidliu thanks for the note!
 =||= My mistake for the wrong comment when I closed this issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6212.x Integrate eureka-ui WEB UI with write servertbak08/20/15, 07:40:31 PMeureka-ui is SNAPSHOT dependency until first RC is available."[NetflixOSS » eureka » eureka-pull-requests #406](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/406/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #407](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/407/) SUCCESS
This pull request looks good
 =||= "2.x Integrate eureka-ui WEB UI with write servertbak08/20/15, 07:40:31 PMeureka-ui is SNAPSHOT dependency until first RC is available.NaNTomasz Bak08/20/15, 07:34:13 PMAdd snapshot repo by default until eureka-ui is released.1
6222.x Registry update that protects merge subject from being terminatedtbak08/20/15, 10:11:36 PMby onError emitted by a registration observable."[NetflixOSS » eureka » eureka-pull-requests #408](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/408/) SUCCESS
This pull request looks good
 =||= "2.x Registry update that protects merge subject from being terminatedtbak08/20/15, 10:11:36 PMby onError emitted by a registration observable.NaNTomasz Bak08/20/15, 10:01:51 PM"Registry update that protects merge subject from being terminated
by onError emitted by a registration observable."1
6231.x multiple updatestbak08/25/15, 03:30:34 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #409](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/409/) SUCCESS
This pull request looks good
 =||= "1.x multiple updatestbak08/25/15, 03:30:34 PMNaNNaNTomasz Bak08/24/15, 11:32:37 PMRefactor EurekaJerseyClient. Add more metrics.1
624Updating Instance status for an Instance that doesn't exist returns 406Will Vanderhoefthepoofy09/21/15, 03:49:06 PMThis is an incorrect usage of http response codes.  `406` should indicate the wrong accept header was used.  This should respond with a `404` should be thrown indicating the resource is not found."According to RFC2616:
""
 406 Not Acceptable
The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.
""
This description fits the usage pattern.
 =||= The ""resource identified"" criteria hasn't been met.  In the event there is no resource identifiable by the correct response code is 404.  Going back to the RFC:

```
10.4.5 404 Not Found

   The server has not found anything matching the Request-URI. No
   indication is given of whether the condition is temporary or
   permanent.
```

So when an Instance has been removed from Eureka due to a timeout the URI doesn't match any values known to Eureka and should be spitting out a 404.

I was extra irked by this because using a `Accept: */*` still returned a 406.
 =||= You are right, status code 404 should be returned, and after checking the code it is implemented like that. In the latest release we added a filter that enforces GZIP replies for all GET requests. If you run GET with something like ""Accept-Encoding: identity"" you will get 406 in reply. If this is the case, your options would be:
- remove the filter from the reference web.xml (gzipEncodingEnforcingFilter)
- support gzip encoding in your client (either do not set Accept-Encoding header, which assumes gzip is supported, or add it explicitly)
 =||= Putting aside the gzip which is not relevant here; we're using version 1.1.141 and that is not the behavior we see.
 =||= Can you upgrade to latest version? 1.1.141 is quite old, and we have done quite a few updates.
 =||= As we have not received any more information about this issue, I am closing it.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
625Change status when the lease has expired.Swierkowski09/18/15, 05:46:29 PM"When my service has crashed or killed -9 I would like to see that it is in DOWN status.

Currently when the lease has expired, the service can be evicted from the service registry. It happens when you configure enableSelfPreservation=false.

I would like to not evict the service from the registry, but instead change the status to DOWN.

This feature could be configured by new config parameter like goDownWhenLeaseExpired.""Eureka has pretty complex configuration already, and we prefer not adding more properties to it. What you are requesting here, could be implemented in a more generic way as:
- disabling heartbeats (not supported)
- overriding current status (supported)

Heartbeats/lease are essential concept in Eureka. Self preservation was provided to protect from loosing registry content during network failures or peer node crashes. You could try to set self preservation to 100%, which ideally would prohibit any node to be evicted. You can than override instance status with REST API call `PUT /eureka/v2/apps/appID/instanceID/status?value=DOWN`.
 =||= In my case, my service has already crashed. Therefore, the service is not able to change the status using REST API.

My service is written in Java. I have already registered a JVM shutdown hook which changes the status of my service to DOWN. The problem is that when the service was not stopped gracefully the shutdown hook is not executed. It is e.g. kill -9 or OutOfMemoryError.

In my case the only thing that Eureka server knows is that it has stopped receiving heartbeats. I would like this to be interpreted as the service is DOWN.
 =||= This behavior would require bigger changes in the code, and is not directly in line with Eureka architectural principles.

What you want to achieve here is better handled by the health check poller mechanism. This is an external monitoring service that periodically calls each server of your fleet at a well know endpoint (Eureka provides healtcheck URL field for that in InstanceInfo), and if there is no successful reply marks an instance as down.
If you look at karyon3 (https://github.com/Netflix/karyon/tree/3.x), it provides a framework for application health evaluation + REST endpoint.
 =||= > > > I would like this to be interpreted as the service is DOWN.

Leaving aside Eureka internals, how would you use this DOWN status differently than the instance not being available in Eureka registry?
 =||= I have already implemented my own poller mechanism which is setting the status to down when there are no heartbeats. As I start Eureka server using spring boot, I have direct access to eureka registry.
 =||= > > > I have already implemented my own poller mechanism which is setting the status to down when there are no heartbeats.

So, all servers that do not send an explicit remove, will stay in eureka registry forever?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
626[WIP] Major refactor of the registryDavid Liuqiangdavidliu09/02/15, 06:35:35 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #412](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/412/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #413](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/413/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #414](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/414/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #416](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/416/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #420](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/420/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #422](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/422/) SUCCESS
This pull request looks good
 =||= "[WIP] Major refactor of the registryDavid Liuqiangdavidliu09/02/15, 06:35:35 PMNaNNaNDavid Liu09/02/15, 06:22:19 PMAdding additional logging1
6271.x Additional metrics for client side heartbeat/registry staleness monitoringtbak09/01/15, 05:50:34 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #415](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/415/) SUCCESS
This pull request looks good
 =||= "1.x Additional metrics for client side heartbeat/registry staleness monitoringtbak09/01/15, 05:50:34 PMNaNNaNTomasz Bak09/01/15, 05:06:48 PMAdditional metrics for client side heartbeat/registry staleness monitoring.1
6281.x Registration failover when server overloadedtbak07/01/16, 10:29:51 PMCurrently if servers returns 503, the request will be retried on the very same instance some time later. It is behavior we would like to have for registry fetches, but registrations/heartbeats are more critical, and at the same much lighter to handle, so retrying on another server might be a better choice."Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6291.x Create new category for registration related metrics.tbak09/01/15, 09:53:19 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #417](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/417/) SUCCESS
This pull request looks good
 =||= "1.x Create new category for registration related metrics.tbak09/01/15, 09:53:19 PMNaNNaNTomasz Bak09/01/15, 09:24:56 PMCreate new category for registration related metrics.1
630EurekaNameSpace not used in eureka.regionJaume Pinyol Vilardelljaume-pinyol09/15/15, 10:39:51 PM"Hello,

I've seen that the eureka.region property in DefaultEurekaClientConfig.class it's not tied to the namespace, and when using a different namespace there is the need to hardcode this property.

Regards,
Jaume""[NetflixOSS » eureka » eureka-pull-requests #421](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/421/) SUCCESS
This pull request looks good
 =||= Thank you for your PR. To be backward compatible, can you add a fallback logic, so if a property with a namespace does not exist, it should read ""eureka.region"" as previously.
 =||= Done! Do you want to join commits?
 =||= [NetflixOSS » eureka » eureka-pull-requests #429](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/429/) SUCCESS
This pull request looks good
 =||= Thanks!
 =||= "EurekaNameSpace not used in eureka.regionJaume Pinyol Vilardelljaume-pinyol09/15/15, 10:39:51 PM"Hello,

I've seen that the eureka.region property in DefaultEurekaClientConfig.class it's not tied to the namespace, and when using a different namespace there is the need to hardcode this property.

Regards,
Jaume"NaNJaume Pinyol09/12/15, 05:20:36 PMEurekaNameSpace not used in eureka.region1
6311.x Update lease duration dynamically if changedtbak09/02/15, 09:27:39 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #423](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/423/) SUCCESS
This pull request looks good
 =||= "1.x Update lease duration dynamically if changedtbak09/02/15, 09:27:39 PMNaNNaNTomasz Bak09/02/15, 09:15:35 PMUpdate lease duration dynamically if changed1
6322.x readModule should bind fullFetchInterestClientDavid Liuqiangdavidliu09/03/15, 01:15:29 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #424](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/424/) SUCCESS
This pull request looks good
 =||= "2.x readModule should bind fullFetchInterestClientDavid Liuqiangdavidliu09/03/15, 01:15:29 AMNaNNaNDavid Liu09/03/15, 01:09:34 AMFix: readModule should bind fullFetchInterestClient.1
6332.x Moving classes around to more appropriate packages.David Liuqiangdavidliu09/03/15, 11:08:26 PMno code changes other than import changes and changes in .avdl schemas"[NetflixOSS » eureka » eureka-pull-requests #425](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/425/) SUCCESS
This pull request looks good
 =||= "2.x Moving classes around to more appropriate packages.David Liuqiangdavidliu09/03/15, 11:08:26 PMno code changes other than import changes and changes in .avdl schemasNaNDavid Liu09/03/15, 10:59:45 PMMoving classes around to more appropriate packages.1
634Make XML dependencies optional in the clienttbak09/08/15, 11:00:05 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #426](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/426/) SUCCESS
This pull request looks good
 =||= "Make XML dependencies optional in the clienttbak09/08/15, 11:00:05 PMNaNNaNTomasz Bak09/08/15, 10:30:47 PM"Separate JSON and XML codec implementations
to make dependencies on jackson/xml artifacts optional in the client."1
635Adding some extensibility to codecs for client and serverDavid Liuqiangdavidliu09/11/15, 11:47:38 PMAlso adding content-type for gziped responses"[NetflixOSS » eureka » eureka-pull-requests #427](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/427/) SUCCESS
This pull request looks good
 =||= "Adding some extensibility to codecs for client and serverDavid Liuqiangdavidliu09/11/15, 11:47:38 PMAlso adding content-type for gziped responsesNaNDavid Liu09/11/15, 11:36:56 PMremove accidental check-in1
636Making serverCodecs public and using a builder insteadDavid Liuqiangdavidliu09/12/15, 01:06:22 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #428](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/428/) SUCCESS
This pull request looks good
 =||= "Making serverCodecs public and using a builder insteadDavid Liuqiangdavidliu09/12/15, 01:06:22 AMNaNNaNDavid Liu09/12/15, 12:58:36 AMMaking serverCodecs public and using a builder instead1
637fix a flaky testDavid Liuqiangdavidliu09/14/15, 10:19:49 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #430](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/430/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #431](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/431/) SUCCESS
This pull request looks good
 =||= "fix a flaky testDavid Liuqiangdavidliu09/14/15, 10:19:49 PMNaNNaNDavid Liu09/14/15, 10:12:07 PMAdding replication client shutdown in PeerEurekaNode1
638EurekaMonitors fails to unregister servo monitors from JmxMonitorRegistryBertrand Renuartbrenuart09/14/15, 11:13:06 PM"`EurekaMonitors.shutdown()` fails to properly unregister servo monitors from `JmxMonitorRegistry`. The following exception is thrown:

```
2015-09-14 20:28:59,904  WARN 44684 [       Thread-2]  --- com.netflix.servo.jmx.JmxMonitorRegistry           : Unable to un-register Monitor:MonitorConfig{name=RATE_LIMITED_FULL_FETCH_CANDIDATES, tags=class=EurekaMonitors, policy=DefaultPublishingPolicy}

javax.management.InstanceNotFoundException: com.netflix.servo:name=count,class=EurekaMonitors,id=RATE_LIMITED_FULL_FETCH_CANDIDATES,level=INFO,type=COUNTER
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1095)
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.exclusiveUnregisterMBean(DefaultMBeanServerInterceptor.java:427)
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.unregisterMBean(DefaultMBeanServerInterceptor.java:415)
    at com.sun.jmx.mbeanserver.JmxMBeanServer.unregisterMBean(JmxMBeanServer.java:546)
    at com.netflix.servo.jmx.JmxMonitorRegistry.unregister(JmxMonitorRegistry.java:125)
    at com.netflix.servo.DefaultMonitorRegistry.unregister(DefaultMonitorRegistry.java:143)
    at com.netflix.eureka.util.EurekaMonitors.shutdown(EurekaMonitors.java:184)
```

The `EurekaMonitors` class holds an enum for every monitor used by the Eureka sub-system. Problem is:
- registration is done with `enum.getName()` as name
- unregister is done with `enum.name()` as name (_not the same_)""@brenuart thanks for the issue. Will fix.
 =||= want a PR?
 =||= I am doing some clean up work on the server side right now, so can just add the fix as part of that. Feel free to provide a PR as well.
 =||= Resolved per #639
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
639Properly unregister Servo monitors on shutdownBertrand Renuartbrenuart09/14/15, 11:11:25 PMFix for https://github.com/Netflix/eureka/issues/638"[NetflixOSS » eureka » eureka-pull-requests #432](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/432/) SUCCESS
This pull request looks good
 =||= thanks @brenuart 
 =||= "Properly unregister Servo monitors on shutdownBertrand Renuartbrenuart09/14/15, 11:11:25 PMFix for https://github.com/Netflix/eureka/issues/638NaNBertrand Renuart09/14/15, 10:42:59 PMFix for gh638: use monitor.getName() instead of monitor.name() when unregister monitor1
6401.x Bug fixes and minor cleanupstbak09/15/15, 11:04:58 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #433](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/433/) SUCCESS
This pull request looks good
 =||= "1.x Bug fixes and minor cleanupstbak09/15/15, 11:04:58 PMNaNNaNTomasz Bak09/15/15, 10:40:16 PMMerge remote-tracking branch 'remotes/netflix/master'1
641Eureka 2.0 information propagation delay questionAdrian Ivanaivans09/17/15, 05:34:35 PM"Hi,

Will  the Eureka 2.0 push model improve the delay for broadcasting topology changes?
Right  now the Clients pull regularly hence the updates can take some time to the Client. I was wondering whether with the push model we will get closer to realtime.

Thanks""Yes, with the push model we are getting delays as low as ~5ms, depending of
course on the system load and network bandwidth.

On Wed, Sep 16, 2015 at 3:35 PM, Adrian Ivan notifications@github.com
wrote:

> Hi,
> 
> Will the Eureka 2.0 push model improve the delay for broadcasting topology
> changes?
> Right now the Clients pull regularly hence the updates can take some time
> to the Client. I was wondering whether with the push model we will get
> closer to realtime.
> 
> Thanks
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/641.
 =||= Sounds great.

I know there is an RC available, is there a timeline for a Production ready release?

Thanks
 =||= Hi @aivans there are some known bugs with rc.2 that we are fixing for a rc.3 release. As for 1.0, we don't have any timelines for this at the moment.
 =||= Thank you.

Looking forward!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6421.x JSON encoding fix: do not unwrap single element arraystbak09/16/15, 10:59:54 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #434](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/434/) SUCCESS
This pull request looks good
 =||= "1.x JSON encoding fix: do not unwrap single element arraystbak09/16/15, 10:59:54 PMNaNNaNTomasz Bak09/16/15, 10:49:56 PMJSON encoding fix: do not unwrap single element arrays1
6431.x Better separation of new JSON and XML serializerstbak09/16/15, 11:30:51 PM"so jackson XML specific annotations are never loaded when using JSON codecs.
This is required, as all jackson XML dependencies are marked as provided in
gradle build, and are not included by default.""[NetflixOSS » eureka » eureka-pull-requests #435](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/435/) SUCCESS
This pull request looks good
 =||= "1.x Better separation of new JSON and XML serializerstbak09/16/15, 11:30:51 PM"so jackson XML specific annotations are never loaded when using JSON codecs.
This is required, as all jackson XML dependencies are marked as provided in
gradle build, and are not included by default."NaNTomasz Bak09/16/15, 11:21:42 PM"Better separation of new JSON and XML serializers,
so jackson XML specific annotations are never loaded when using JSON codecs.
This is required, as all jackson XML dependencies are marked as provided in
gradle build, and are not included by default."1
644Feature/DI friendly serverDavid Liuqiangdavidliu09/24/15, 05:46:36 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #436](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/436/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #439](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/439/) SUCCESS
This pull request looks good
 =||= Closed in favour of #652 which merges into a branch first.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
645Allow custom DataCenterInfo implementationsSpencer Gibbspencergibb09/23/15, 07:54:18 PM"Currently there is no way to have a custom implementation that implements `UniqueIdentifier`.

/cc @jkschneider ""I understand that you have already custom serializer for your DataCenterInfo implementation. Can you tell us more about what is preventing you from implementing this interface?
 =||= @tbak @spencergibb this pull request solves the issue we have in Spring Cloud: https://github.com/Netflix/eureka/pull/646
 =||= Closing w.r.t. #649
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
646Enable custom metadata-aware DataCenterInfo implementationsJonathan Schneiderjkschneider09/23/15, 07:42:08 PM"Currently, `DataCenterInfo` metadata is only serialized/deserialized if it is an instance of `AmazonInfo`.  It is sometimes useful to be able to hang metadata on non-AmazonInfo `DataCenterInfo` instances (e.g. MyDataCenterInfo) as well.

This PR introduces a new `MetadataAware` interface, and both `AmazonInfo` and `MyDataCenterInfo` are made to extend it.  Any `DataCenterInfo` implementation that is also `MetadataAware` will have its metadata serialized/deserialized.

Since `MyDataCenterInfo` did not previously support metadata, its metadata map is initialized to an empty map (effectively preserving its state prior to the PR).

This PR blocks progress in Spring Cloud Netflix on adoption of eureka-client 1.2.2 and later.  After merge, we can effectively get rid of the [custom codec](https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/eureka/DataCenterAwareJacksonCodec.java) in Spring Cloud Netflix.""[NetflixOSS » eureka » eureka-pull-requests #437](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/437/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #438](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/438/) SUCCESS
This pull request looks good
 =||= @jkschneider thanks for the pull. Regarding your question on compatibility of adding a new Name enum, it would break older clients who while fail at Name.valueOf(""ANewCustomName"") unfortunately. 
 =||= Eureka1 default serialization engine is limited in practice to DataCenterInfo and AmazonInfo types. If a custom implementation is required, it should come with its serialization engine, possibly extending the default one.

We are in the process of migration from legacy encoding mechanism, that was both slow and memory hungry. We will remove the old code, as soon as we have enough confidence that all corner cases are covered in the new implementation. For the purpose of the migration we introduced an internal CodecWrapper API, but I would not  recommend to use it may be changed or removed in the near future.

In Eureka2 we provide BasicDataCenterInfo, in parallel with AWS implementation, which is aimed at DC deployments. I believe it makes sense to have it in Eureka1 as well. If this would solve your problem, lets go that route.
 =||= @tbak If BasicDataCenterInfo contains a customizable ID, then that is sufficient.  Custom metadata is icing on the cake, but there is no immediate need for it in Spring Cloud.
 =||= @jkschneider @spencergibb #649 should provide a way to specify custom ids for InstanceInfo without having to go through DataCenterInfo.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
647Eureka gives 500 when app registered without Datacenter infoJorge Diasdiasjorge09/24/15, 03:14:57 PM"Hi,

I was testing Eureka and found that if I do a push to register and app to:

SERVER/v2/apps/APP_NAME and in the json data I only have something like:

```
{
    ""instance"": {
        ""hostName"":""eureka-testing.example.com"",
        ""app"":""eureka-testing"",
        ""ipAddr"": ""127.0.0.1"",
        ""vipAddress"":""eureka-testing"",
        ""status"":""UP"",
        ""port"":""8080""
    }
}
```

The status page then gives a 500.

I think the submitted data should be validated against the DTD shown in the wiki or at least the page should not fail.""We do not do any schema based validation (it is JSON), but the request should not fail with 500 in such case. As each instance record must have associated data center info, an HTTP response with status code 400 would be more meaningful here.
Thank you for reporting this.
 =||= Fixed in PR https://github.com/Netflix/eureka/pull/651
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
648"unresolvable documentation link inside XSD on ""Eureka REST operations"" page"Kevin Hakansonhakanson09/23/15, 07:59:38 PM"When reading the XSD provided on https://github.com/Netflix/eureka/wiki/Eureka-REST-operations there is a comment with ""instructions"" that refers to what looks like an internal Netflix wiki (http://wiki.netflix.com/clearspace/docs/DOC-20965).

```
            <xsd:element name=""hostName"" type=""xsd:string"" />
            <!-- app name
                 Instructions for adding a new app name - <a _jive_internal=""true"" href=""/clearspace/docs/DOC-20965"" target=""_blank"">http://wiki.netflix.com/clearspace/docs/DOC-20965</a> -->
            <xsd:element name=""app"" type=""xsd:string"" />
```

Can either the XSD example be updated or the linked documentation be made accessible?""Thanks @hakanson. The internal document no longer exist and was likely for linkage with other internal tooling and not relevant for this xsd. Updated the wiki.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
649Decoupling the id of InstanceInfo from the id of the DataCenterInfo.David Liuqiangdavidliu09/23/15, 07:08:37 PM"For compatibility ease, reusing the deprecated ""sid"" (serviceId) field.
Also some minor reformatting.""[NetflixOSS » eureka » eureka-pull-requests #440](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/440/) FAILURE
Looks like there's a problem with this pull request
 =||= :+1: 
@dsyer this will eliminate the need for us to do any custom codec stuff.
 =||= [NetflixOSS » eureka » eureka-pull-requests #441](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/441/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= Turns out there are some lingering internal compatibility issues with reusing sid. Going to rework this pull and add a new field (client usage should be similar).
 =||= "Decoupling the id of InstanceInfo from the id of the DataCenterInfo.David Liuqiangdavidliu09/23/15, 07:08:37 PM"For compatibility ease, reusing the deprecated ""sid"" (serviceId) field.
Also some minor reformatting."NaNDavid Liu09/23/15, 03:56:01 AMfix incorrect default in test1
6501.x Encode @class entry in InstanceInfo.metadata for backward compatibilitytbak09/23/15, 09:12:21 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #442](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/442/) SUCCESS
This pull request looks good
 =||= ship it.
 =||= "1.x Encode @class entry in InstanceInfo.metadata for backward compatibilitytbak09/23/15, 09:12:21 PMNaNNaNTomasz Bak09/23/15, 08:12:12 PMMerge remote-tracking branch 'remotes/netflix/master'1
6511.x Better error handling for invalid content in requesttbak09/24/15, 03:14:36 PMissue: https://github.com/Netflix/eureka/issues/647"[NetflixOSS » eureka » eureka-pull-requests #443](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/443/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #444](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/444/) SUCCESS
This pull request looks good
 =||= "1.x Better error handling for invalid content in requesttbak09/24/15, 03:14:36 PMissue: https://github.com/Netflix/eureka/issues/647NaNTomasz Bak09/24/15, 12:18:07 AMVerify media type in DiscoveryJerseyProvider1
652Feature/di friendly serverDavid Liuqiangdavidliu09/24/15, 05:45:55 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #445](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/445/) SUCCESS
This pull request looks good
 =||= "Feature/di friendly serverDavid Liuqiangdavidliu09/24/15, 05:45:55 PMNaNNaNDavid Liu09/21/15, 11:47:47 PMAdd local server module1
653"Reverting use of sid in #649 and introduce a new ""instanceId"" field instead"David Liuqiangdavidliu09/24/15, 08:24:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #446](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/446/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #447](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/447/) SUCCESS
This pull request looks good
 =||= :+1: 
 =||= Looks good
 =||= ""Reverting use of sid in #649 and introduce a new ""instanceId"" field instead"David Liuqiangdavidliu09/24/15, 08:24:44 PMNaNNaNDavid Liu09/24/15, 08:14:07 PMAdding instanceId field to xstream codecs as well1
654Feature/di friendly serverDavid Liuqiangdavidliu09/25/15, 04:08:10 AMsync with master"[NetflixOSS » eureka » eureka-pull-requests #448](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/448/) SUCCESS
This pull request looks good
 =||= "Feature/di friendly serverDavid Liuqiangdavidliu09/25/15, 04:08:10 AMsync with masterNaNDavid Liu09/25/15, 03:57:34 AMUpping timing a bit in a test1
6552.x InstanceInfo metaData modifications ignored when metaData previously set.LaurentCrystark09/29/15, 08:16:35 AM"Hi,

I'm trying to keep some custom states in the  `InstanceInfo` metaData but it seems that changes are ignored in some particular cases.

``` java
private final AtomicReference<InstanceInfo> instanceInfo    = new AtomicReference<InstanceInfo>();

public EurekaRegistration(String namespace) {
    config = new ArchaiusEurekaConfig(namespace);

    String app = namespace;
    String appGroup = config.appGroup.getValue();

    instanceInfo.set(
        new InstanceInfo.Builder()
            .withId(app + ""-"" + PID)
            .withApp(app)
            .withAppGroup(appGroup)
            .withStatus(Status.UP)
            .withDataCenterInfo(BasicDataCenterInfo.fromSystemData())
            .build()
        );
}

public void startRegistrationClient() {
    EurekaRegistrationClient registrationClient = Eurekas.newRegistrationClientBuilder()
        .withServerResolver(ServerResolvers
            .fromHostname(config.registrationServerHost.getValue())
            .withPort(config.registrationServerPort.getValue())
        )
        .build();

    BehaviorSubject<InstanceInfo> infoSubject = BehaviorSubject.create();
    registrationClient.register(infoSubject).subscribe();

    Observable
        .interval(0, config.registrationUpdateInterval.getValue(), TimeUnit.SECONDS)
        .share()
        .subscribe(n -> {
            InstanceInfo ii = updateAndGet(iib -> iib
                .withMetaData(""updated_at"", String.valueOf(System.currentTimeMillis()))
            );
            infoSubject.onNext(ii);
            LOGGER.info(""onNext "" + ii);
        });
}

public InstanceInfo updateAndGet(Consumer<InstanceInfo.Builder> updater) {
    return instanceInfo
        .updateAndGet(ii -> {
            InstanceInfo.Builder iib = new InstanceInfo.Builder().withInstanceInfo(ii);
            updater.accept(iib);
            return iib.build();
        });
}
```

This sends a first event that appears in the `eureka2-write-server`'s log as well as in my app's logs but all next events aren't shown by the  `eureka2-write-server` although i can see those in my logs.

So i tried moving stuff about cause i had it working earlier and I got this working:

``` java
private static final InstanceInfo   II  = new InstanceInfo.Builder()
    .withId(""myapp-"" + PID)
    .withApp(""myapp"")
    .withAppGroup(""myapp-group"")
    .withStatus(Status.UP)
    .withDataCenterInfo(BasicDataCenterInfo.fromSystemData())
    .build();

public void startRegistrationClient() {
    EurekaRegistrationClient registrationClient = Eurekas.newRegistrationClientBuilder()
        .withServerResolver(ServerResolvers
            .fromHostname(config.registrationServerHost.getValue())
            .withPort(config.registrationServerPort.getValue())
        )
        .build();

    BehaviorSubject<InstanceInfo> infoSubject = BehaviorSubject.create();
    registrationClient.register(infoSubject).subscribe();

    Observable
        .interval(0, config.registrationUpdateInterval.getValue(), TimeUnit.SECONDS)
        .share()
        .subscribe(n -> {
            InstanceInfo ii = new InstanceInfo.Builder().withInstanceInfo(II).withMetaData(""updated_at"", String.valueOf(System.currentTimeMillis())).build()
            infoSubject.onNext(ii);
            LOGGER.info(""onNext "" + ii);
        });
}
```

So I've done more testing and here's what i concluded: any new `metaData` will be ignored if the hashmap was already initialized in the previous `InstanceInfo`. Meaning: the `metaData` field needs to be `null` in the `InstanceInfo` from which you are building for it to work.

I noticed something else: If you use a referenced `metas` hashmap it won't work either.

``` java
InstanceInfo ii = new InstanceInfo.Builder()
    .withInstanceInfo(instanceInfo)
    .withMetaData(metas)
    .build();
infoSubject.onNext(ii);
```

But if you create a new hashmap each time it will work

``` java
InstanceInfo ii = new InstanceInfo.Builder()
    .withInstanceInfo(instanceInfo)
    .withMetaData(new HashMap<String, String>(metas))
    .build();
infoSubject.onNext(ii);
```

Then I noticed `withBuilder` actually copies the HashMap so I ended up using the following solution which works:

``` java
    private final AtomicReference<InstanceInfo.Builder> instanceInfoBuilder = new AtomicReference<InstanceInfo.Builder>();

    public EurekaRegistration(String namespace) {
        config = new ArchaiusEurekaConfig(namespace);

        String app = namespace;
        String appGroup = config.appGroup.getValue();

        instanceInfoBuilder.set(
            new InstanceInfo.Builder()
                .withId(app + ""-"" + PID)
                .withApp(app)
                .withAppGroup(appGroup)
                .withStatus(Status.UP)
                .withDataCenterInfo(BasicDataCenterInfo.fromSystemData())
            );
    }

    public void startRegistrationClient() {
        EurekaRegistrationClient registrationClient = Eurekas.newRegistrationClientBuilder()
            .withServerResolver(ServerResolvers
                .fromHostname(config.registrationServerHost.getValue())
                .withPort(config.registrationServerPort.getValue())
            )
            .build();

        BehaviorSubject<InstanceInfo> infoSubject = BehaviorSubject.create();
        registrationClient.register(infoSubject).subscribe();

        Observable
            .interval(0, config.registrationUpdateInterval.getValue(), TimeUnit.SECONDS)
            .share()
            .subscribe(n -> {
                InstanceInfo.Builder ii = updateAndGet(iib -> iib.withMetaData(""updated_at"", String.valueOf(System.currentTimeMillis())));
                infoSubject.onNext(ii.build());
                LOGGER.info(""emited: "" + ii);
            });
    }

    public InstanceInfo.Builder updateAndGet(Consumer<InstanceInfo.Builder> updater) {
        return instanceInfoBuilder
            .updateAndGet(iib -> {
                InstanceInfo.Builder iib2 = new InstanceInfo.Builder()
                    .withBuilder(iib);
                updater.accept(iib2);
                return iib2;
            });
    }
```""@Crystark you are right, thanks for raising the issue. The problem appears to be in the withInstanceInfo() method inside the builder, where instead of copying the metadata map, it assigns to the older instance's metadata map. 
 =||= Fixed in #658
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6561.x merge Refactorings/transport to features/di-friendly-servertbak10/01/15, 08:46:10 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #449](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/449/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #451](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/451/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #452](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/452/) SUCCESS
This pull request looks good
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6571.x Refactorings/replication batchertbak10/01/15, 08:45:32 PMA replacement for blitz4j batcher. A noticeable improvement over the latter one is request collapsing (removing old pending task, when a new one is submitted)."[NetflixOSS » eureka » eureka-pull-requests #450](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/450/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #460](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/460/) SUCCESS
This pull request looks good
 =||= "1.x Refactorings/replication batchertbak10/01/15, 08:45:32 PMA replacement for blitz4j batcher. A noticeable improvement over the latter one is request collapsing (removing old pending task, when a new one is submitted).NaNTomasz Bak10/01/15, 08:30:52 PMAfter code review updates1
6582.x fix metadata map copy in InstanceInfo.BuilderDavid Liuqiangdavidliu09/29/15, 08:16:18 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #454](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/454/) SUCCESS
This pull request looks good
 =||= "2.x fix metadata map copy in InstanceInfo.BuilderDavid Liuqiangdavidliu09/29/15, 08:16:18 AMNaNNaNDavid Liu09/29/15, 08:10:26 AMfix metadata map copy in InstanceInfo.Builder1
659add route53 binding alternative to eipArnaud Rogeraroger-r709/30/15, 03:28:51 PMwith the eureka.bindingStrategy allow to switch between a eip binding or route53."[NetflixOSS » eureka » eureka-pull-requests #455](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/455/) SUCCESS
This pull request looks good
 =||= @aroger-r7 thanks for the pull, this looks quite useful indeed. I apologies for this but we are close to checking in some large server side refactoring (see the feature/di-friendly-server branch) that affects this pull. Would you mind considering rebasing this change w.r.t. to that branch instead? 

The overall pull request should not need to change much, and in particular in the refactoring branch some similar was work done (EIP binding was moved out of the bootstrap class for example). The main class you may want to look at is [EIPManager.java](https://github.com/Netflix/eureka/blob/feature/di-friendly-server/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java). You may want to just provide a route53 parallel to this and at bootstrap/setup time, we can pick between the right ones to use.
 =||= no problem. will try do that asap
 =||= closed in favor of one on  di-friendly-server
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6601.x Eviction mechanism updatetbak09/29/15, 09:28:27 PM"Experimental feature with no cancellation replication for evicted items.
Imposing additional eviction constraints, based on registry size not
received heartbeats.""[NetflixOSS » eureka » eureka-pull-requests #456](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/456/) SUCCESS
This pull request looks good
 =||= Looks good.
 =||= "1.x Eviction mechanism updatetbak09/29/15, 09:28:27 PM"Experimental feature with no cancellation replication for evicted items.
Imposing additional eviction constraints, based on registry size not
received heartbeats."NaNTomasz Bak09/29/15, 09:12:43 PM"Eviction mechanism update

Experimental feature with no cancellation replication for evicted items.
Imposing additional eviction constraints, based on registry size not
received heartbeats."1
661Adding time based compensation to eviction processing if the eviction task  was delayedDavid Liuqiangdavidliu09/30/15, 05:20:18 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #457](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/457/) SUCCESS
This pull request looks good
 =||= Looks good.
 =||= "Adding time based compensation to eviction processing if the eviction task  was delayedDavid Liuqiangdavidliu09/30/15, 05:20:18 PMNaNNaNDavid Liu09/30/15, 07:46:10 AMupdate comments1
662add route53 binding alternative to eipArnaud Rogeraroger-r710/01/15, 01:12:11 AM"rebase route53 change https://github.com/Netflix/eureka/pull/659
to di-friendly-server""[NetflixOSS » eureka » eureka-pull-requests #458](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/458/) SUCCESS
This pull request looks good
 =||= @aroger-r7 thanks for the contribution.
 =||= "add route53 binding alternative to eipArnaud Rogeraroger-r710/01/15, 01:12:11 AM"rebase route53 change https://github.com/Netflix/eureka/pull/659
to di-friendly-server"NaNArnaud Roger09/30/15, 12:33:02 PMadd route53 binding alternative to eip1
6631.x Better handling order of batched replication requestsDavid Liuqiangdavidliu07/01/16, 10:29:43 PM"This relates #657 but is also present in older behaviour.

Currently for server replication to a given remote peer, multiple threads are used. This can cause race conditions where the remote peer can see messages out of order (e.g. heartbeat -> cancel was received as cancel -> heartbeat).

The effect of this is to trigger temporal inconsistencies that will eventually converge due to evictions, so is not critical to the overall system function.

However it would be useful to prevent this race condition in the future. As replication requests are now batched, the need for multiple threads is less and we can tune a good threshold of batch size vs size so that a single (supervised) thread can be used to send the replication data.""Closing due to inactivity.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
664Minor edit to remove some references to statics.David Liuqiangdavidliu10/01/15, 01:38:04 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #459](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/459/) SUCCESS
This pull request looks good
 =||= @aroger-r7 fyi some minor edits.
 =||= "Minor edit to remove some references to statics.David Liuqiangdavidliu10/01/15, 01:38:04 AMNaNNaNDavid Liu10/01/15, 01:22:59 AMMinor edit to remove some references to statics.1
6651.x Refactorings/transporttbak10/05/15, 05:17:53 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #461](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/461/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #462](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/462/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #466](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/466/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #467](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/467/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #476](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/476/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #477](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/477/) SUCCESS
This pull request looks good
 =||= "1.x Refactorings/transporttbak10/05/15, 05:17:53 AMNaNNaNTomasz Bak10/05/15, 04:54:33 AM"Add missing EurekaHttpClient methods + tests refactoring.

Vip query methods, and related support in DiscoveryClient were not
implemented.
The single, very long running test was refactored to shorten its
execution time."1
666Sync di-friendly-server branch with masterDavid Liuqiangdavidliu10/02/15, 07:19:28 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #464](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/464/) SUCCESS
This pull request looks good
 =||= "Sync di-friendly-server branch with masterDavid Liuqiangdavidliu10/02/15, 07:19:28 AMNaNNaNDavid Liu10/02/15, 02:22:34 AMbumping versions of dependencies1
667Feature/di friendly serverDavid Liuqiangdavidliu10/02/15, 09:34:29 PM"Server side refactoring to be more DI friendly:
- Adding some (rudimentary) interfaces as needed
- Adding DI annotations as needed
- Code refactoring and clean up

Initial eureka-server-karyon3 sub project for karyon3 integration

[from @aroger-r7] add route53 binding alternative to eip""[NetflixOSS » eureka » eureka-pull-requests #465](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/465/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #472](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/472/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #475](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/475/) SUCCESS
This pull request looks good
 =||= "Feature/di friendly serverDavid Liuqiangdavidliu10/02/15, 09:34:29 PM"Server side refactoring to be more DI friendly:
- Adding some (rudimentary) interfaces as needed
- Adding DI annotations as needed
- Code refactoring and clean up

Initial eureka-server-karyon3 sub project for karyon3 integration

[from @aroger-r7] add route53 binding alternative to eip"NaNDavid Liu10/02/15, 09:09:47 PM"Merge pull request #671 from qiangdavidliu/feature/di-friendly-server

Feature/di friendly server"1
6681.x Fix bug in PeerEurekaNode, that did not check for missing LeaseInfotbak10/02/15, 05:08:41 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #468](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/468/) SUCCESS
This pull request looks good
 =||= "1.x Fix bug in PeerEurekaNode, that did not check for missing LeaseInfotbak10/02/15, 05:08:41 PMNaNNaNTomasz Bak10/01/15, 11:31:26 PMFix bug in PeerEurekaNode, that did not check for missing LeaseInfo1
669Fix NPE in StatusResource.isReplicaAvailableSpencer Gibbspencergibb10/02/15, 06:11:10 PM"We see this when we're running single nodes, more of a support issue than a problem. We keep getting people asking about it.

```
2015-10-02 11:35:16.760 ERROR 3755 --- [nio-8761-exec-4] c.n.eureka.resources.StatusResource      : Could not determine if the replica is available
java.lang.NullPointerException: null
    at com.netflix.eureka.resources.StatusResource.isReplicaAvailable(StatusResource.java:87) [5da40e7f691eb25c4b46f56115ec929776e850fc-eureka-core-1.2.5.jar:1.2.5]
    at com.netflix.eureka.resources.StatusResource.getStatusInfo(StatusResource.java:67) [5da40e7f691eb25c4b46f56115ec929776e850fc-eureka-core-1.2.5.jar:1.2.5]
    at org.springframework.cloud.netflix.eureka.server.EurekaController.status(EurekaController.java:68) [spring-cloud-netflix-eureka-server-1.1.0.BUILD-SNAPSHOT.jar!/:1.1.0.BUILD-SNAPSHOT]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05]
    at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05]
    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:111) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:806) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:249) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:93) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1526) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1482) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05]
```""[NetflixOSS » eureka » eureka-pull-requests #469](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/469/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #470](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/470/) SUCCESS
This pull request looks good
 =||= Thanks @spencergibb 
 =||= @qiangdavidliu thanks for the quick turnaround!
 =||= "Fix NPE in StatusResource.isReplicaAvailableSpencer Gibbspencergibb10/02/15, 06:11:10 PM"We see this when we're running single nodes, more of a support issue than a problem. We keep getting people asking about it.

```
2015-10-02 11:35:16.760 ERROR 3755 --- [nio-8761-exec-4] c.n.eureka.resources.StatusResource      : Could not determine if the replica is available
java.lang.NullPointerException: null
    at com.netflix.eureka.resources.StatusResource.isReplicaAvailable(StatusResource.java:87) [5da40e7f691eb25c4b46f56115ec929776e850fc-eureka-core-1.2.5.jar:1.2.5]
    at com.netflix.eureka.resources.StatusResource.getStatusInfo(StatusResource.java:67) [5da40e7f691eb25c4b46f56115ec929776e850fc-eureka-core-1.2.5.jar:1.2.5]
    at org.springframework.cloud.netflix.eureka.server.EurekaController.status(EurekaController.java:68) [spring-cloud-netflix-eureka-server-1.1.0.BUILD-SNAPSHOT.jar!/:1.1.0.BUILD-SNAPSHOT]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05]
    at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05]
    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:111) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:806) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:249) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:102) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:93) [spring-boot-actuator-1.3.0.BUILD-SNAPSHOT.jar!/:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.1.RELEASE.jar!/:4.2.1.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1526) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1482) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_05]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_05]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.26.jar!/:8.0.26]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05]
```"NaNSpencer Gibb10/02/15, 05:46:40 PMFix NPE in StatusResource.isReplicaAvailable1
670Back-porting fix #669 to new class in feature branchDavid Liuqiangdavidliu10/02/15, 06:25:50 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #471](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/471/) SUCCESS
This pull request looks good
 =||= "Back-porting fix #669 to new class in feature branchDavid Liuqiangdavidliu10/02/15, 06:25:50 PMNaNNaNNaNNaNNaN1
671Feature/di friendly serverDavid Liuqiangdavidliu10/02/15, 09:09:47 PM"Sync with master.
Updating to governator 1.10.4""[NetflixOSS » eureka » eureka-pull-requests #473](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/473/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #474](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/474/) SUCCESS
This pull request looks good
 =||= "Feature/di friendly serverDavid Liuqiangdavidliu10/02/15, 09:09:47 PM"Sync with master.
Updating to governator 1.10.4"NaNDavid Liu10/02/15, 09:00:16 PMAdd timeouts to unit test verify1
6721.x remote registry content not initialized properly during first full registry fetchtbak07/14/16, 05:35:36 PMCertain data structures (like DiscoveryClient.remoteRegionVsApps) are handled only by delta update logic."Not a bug, this is also handled by the full fetch code path in 

```
    private Applications filterAndShuffle(Applications apps);
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6731.x Set jdk=1.8 in .netflixoss to get proper JDK in cloudbees jenkins job.tbak10/05/15, 06:07:01 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #478](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/478/) SUCCESS
This pull request looks good
 =||= "1.x Set jdk=1.8 in .netflixoss to get proper JDK in cloudbees jenkins job.tbak10/05/15, 06:07:01 PMNaNNaNTomasz Bak10/05/15, 06:05:43 PMSet jdk=1.8 in .netflixoss to get proper JDK in cloudbees jenkins job.1
6741.x Fix batch request/response encoding for the new Jackson codec.tbak10/06/15, 10:29:21 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #479](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/479/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #480](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/480/) SUCCESS
This pull request looks good
 =||= Ship it.
 =||= "1.x Fix batch request/response encoding for the new Jackson codec.tbak10/06/15, 10:29:21 PMNaNNaNTomasz Bak10/06/15, 09:54:03 PMFix log output in compatibility test1
675Refactorings/transport sync with masterDavid Liuqiangdavidliu10/07/15, 12:41:52 AMsync with master"[NetflixOSS » eureka » eureka-pull-requests #481](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/481/) SUCCESS
This pull request looks good
 =||= "Refactorings/transport sync with masterDavid Liuqiangdavidliu10/07/15, 12:41:52 AMsync with masterNaNDavid Liu10/07/15, 12:34:33 AMmove junit to 4.111
676Provide a more robust way to get local host infoDavid Liuqiangdavidliu06/02/16, 10:28:37 PMRef #617 (unfortunately the pull is not re-openable). There is a similar fix in the transport refactoring branch work but it need to be also ported to the older code base."New transport is now the default, closing.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6771.x Add few more utility methods.tbak10/08/15, 03:34:09 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #482](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/482/) SUCCESS
This pull request looks good
 =||= "1.x Add few more utility methods.tbak10/08/15, 03:34:09 PMNaNNaNTomasz Bak10/08/15, 12:12:48 AMAdd few more utility methods.1
678Intelligent resolvers for read operationsDavid Liuqiangdavidliu10/11/15, 11:10:59 PM"(WIP) initial commit of intelligent resolvers for read operations
Some interface refactoring""[NetflixOSS » eureka » eureka-pull-requests #483](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/483/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #485](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/485/) SUCCESS
This pull request looks good
 =||= "Intelligent resolvers for read operationsDavid Liuqiangdavidliu10/11/15, 11:10:59 PM"(WIP) initial commit of intelligent resolvers for read operations
Some interface refactoring"NaNDavid Liu10/10/15, 12:43:15 AMUnit tests and fixes1
6792.x AwsDataCenterInfo::getName is misleadingLaurentCrystark06/02/16, 10:24:54 PM"Hi,

I'm currently testing eureka2. I have 2 apps registering and sending ""alive"" events to eureka2. One of the app is supposed to listen for the other and react to the other being down. The thing is, i was hoping to filter the change notifications based on the datacenter as the app must not care about other apps from other datacenters not being alive. Using `DataCenterInfo` I thought `getName` would give me the datacenter name. It turns out that `AwsDataCenterInfo` provides the instanceId when I call that method so two apps in the same datacenter but on two different instances end up returning different values for getName().

So then I thought I must have understood this wrong and DataCenterInfo may actually mean ""Information from the Datacenter"" but that's not what the JavaDoc says:

```
DataCenterInfo encapsulates information about the data center where a given server is running, plus server specific information, like IP addresses, host names, etc.
```

I'll end up not using DataCenterInfo for now to do what I want and use MetaDatas instead but I thought you may want to clarify that.

Thanks ! :)""Thank you for your comment. The DataCenterInfo API is really misleading. Probably we would need to have both getName and getInstanceId methods, with the former returning the data center name. This is actually the behavior in Eureka1.
 =||= archiving as eureka2 work is going through some larger internal changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6801.x More test refactoringtbak10/09/15, 11:40:17 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #484](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/484/) SUCCESS
This pull request looks good
 =||= "1.x More test refactoringtbak10/09/15, 11:40:17 PMNaNNaNTomasz Bak10/05/15, 05:51:50 AMMore test refactoring1
6811.x Tests refectoringtbak10/11/15, 10:46:27 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #486](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/486/) SUCCESS
This pull request looks good
 =||= "1.x Tests refectoringtbak10/11/15, 10:46:27 PMNaNNaNTomasz Bak10/11/15, 10:38:32 PMTests refectoring1
682Splitting query and registration clients for experimental transportDavid Liuqiangdavidliu10/14/15, 01:02:35 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #487](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/487/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #488](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/488/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #489](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/489/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #490](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/490/) SUCCESS
This pull request looks good
 =||= "Splitting query and registration clients for experimental transportDavid Liuqiangdavidliu10/14/15, 01:02:35 AMNaNNaNDavid Liu10/13/15, 09:39:12 PMmaking the asyncResolver lazy again.1
683Various updates for refactorings/transportDavid Liuqiangdavidliu10/16/15, 09:20:08 PM"- update staleness monitor levels if registry fetch never worked
- Provide a mechanism to use new transport with bootstrap servers for query
- Tune down some logging""[NetflixOSS » eureka » eureka-pull-requests #491](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/491/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #492](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/492/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #493](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/493/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #494](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/494/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #495](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/495/) SUCCESS
This pull request looks good
 =||= "Various updates for refactorings/transportDavid Liuqiangdavidliu10/16/15, 09:20:08 PM"- update staleness monitor levels if registry fetch never worked
- Provide a mechanism to use new transport with bootstrap servers for query
- Tune down some logging"NaNDavid Liu10/16/15, 08:15:03 PM"Merging dns and config resolve to ConfigClusterResolver so that
resolution can be dynamically changed."1
684Refactorings/transportDavid Liuqiangdavidliu10/16/15, 10:13:14 PM"This pull provides an abstraction over the transport layer of eureka-client. It also provides ways of resolving query targets that can handle intelligent pre-discovery query targets. For example this can be used for cases were readonly replicas of discovery servers can be deployed and queries are handled by the readonly replica, via an initial bootstrap resolve from the master replicas.

As of this current implementation, both the old and new code paths are preserved and the old code path is enabled by default. To use the new transport code, set the properties:

```
eureka.experimental.transport.registration.enabled=true
eureka.experimental.transport.query.enabled=true
```

To use the intelligent query resolver, set the properties

```
eureka.transport.readClusterVip=[insert the vip address of the query targets here]
eureka.transport.useBootstrapResolverForQuery=false
```""[NetflixOSS » eureka » eureka-pull-requests #496](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/496/) SUCCESS
This pull request looks good
 =||= "Refactorings/transportDavid Liuqiangdavidliu10/16/15, 10:13:14 PM"This pull provides an abstraction over the transport layer of eureka-client. It also provides ways of resolving query targets that can handle intelligent pre-discovery query targets. For example this can be used for cases were readonly replicas of discovery servers can be deployed and queries are handled by the readonly replica, via an initial bootstrap resolve from the master replicas.

As of this current implementation, both the old and new code paths are preserved and the old code path is enabled by default. To use the new transport code, set the properties:

```
eureka.experimental.transport.registration.enabled=true
eureka.experimental.transport.query.enabled=true
```

To use the intelligent query resolver, set the properties

```
eureka.transport.readClusterVip=[insert the vip address of the query targets here]
eureka.transport.useBootstrapResolverForQuery=false
```"NaNDavid Liu10/16/15, 09:20:08 PM"Merge pull request #683 from qiangdavidliu/refactorings/transport

Various updates for refactorings/transport"1
685Adding logging for retryClient succeed on retryDavid Liuqiangdavidliu10/20/15, 12:49:13 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #497](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/497/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #498](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/498/) SUCCESS
This pull request looks good
 =||= "Adding logging for retryClient succeed on retryDavid Liuqiangdavidliu10/20/15, 12:49:13 AMNaNNaNDavid Liu10/19/15, 11:48:00 PMAdding registry size to metrics1
6861.x Support remote region fetch in the new transporttbak10/20/15, 10:20:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #499](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/499/) SUCCESS
This pull request looks good
 =||= "1.x Support remote region fetch in the new transporttbak10/20/15, 10:20:44 PMNaNNaNTomasz Bak10/20/15, 09:30:54 PMExperimental EurekaClientFactoryBuilder1
6871.x new transport enhancementsDavid Liuqiangdavidliu10/22/15, 07:40:26 PM"- add config to define quarantine clear condition
- better metrics and logging
- adding jitter to sessionedClient's session duration""[NetflixOSS » eureka » eureka-pull-requests #500](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/500/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #501](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/501/) SUCCESS
This pull request looks good
 =||= @qiangdavidliu 

hello, why add ""adding jitter to sessionedClient's session duration"" .

thank you! =||= "1.x new transport enhancementsDavid Liuqiangdavidliu10/22/15, 07:40:26 PM"- add config to define quarantine clear condition
- better metrics and logging
- adding jitter to sessionedClient's session duration"NaNDavid Liu10/22/15, 06:54:05 PMSome config tuning1
688Adding validation for required fields for instance registrationDavid Liuqiangdavidliu10/22/15, 11:47:41 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #502](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/502/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #503](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/503/) SUCCESS
This pull request looks good
 =||= "Adding validation for required fields for instance registrationDavid Liuqiangdavidliu10/22/15, 11:47:41 PMNaNNaNDavid Liu10/22/15, 11:39:36 PMvalidating appName match1
689update to EIPManager to check for eip binding at a different (faster) rate when none is bound.David Liuqiangdavidliu10/23/15, 07:12:41 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #504](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/504/) SUCCESS
This pull request looks good
 =||= "update to EIPManager to check for eip binding at a different (faster) rate when none is bound.David Liuqiangdavidliu10/23/15, 07:12:41 PMNaNNaNNaNNaNNaN1
690Setting OUT_OF_SERVICE for one app causes all apps on same host to register as suchoctonary01/21/16, 09:32:33 PM"If I send an OUT_OF_SERVICE request to a particular app on a given host that runs multiple apps, all Eureka enabled apps on that same host start registering an OUT_OF_SERVICE state.

For example... in my test environment I have a Eureka-server instance and 3 Eureka enabled apps running across 3 nodes. If I issue an OUT_OF_SERVICE to appA running on node1(curl -X PUT http://node1:9090/eureka/v2/apps/appA/node1/status?value=OUT_OF_SERVICE), all apps (including Eureka-server) on node1 start showing an OUT_OF_SERVICE state. ""@octonary thanks for raising the issue. The current implementation of OUT_OF_SERVICE does not work well with multi-tenant environments and uses the id as the key for OOS (which defaults to the hostname/aws instanceId). We will take a look at fixing this in a future release.
 =||= @octonary you can set `eureka.instanceId` for each instance to handle that case. It's what we do in [spring-cloud-netflix](https://github.com/spring-cloud/spring-cloud-netflix).
 =||= Thanks! I will start setting the instanceId.
 =||= I couldn't get eureka.instanceId to work but setting eureka.instance.metadataMap.instanceId with the spring-cloud-netflix version seems to do the trick. Thanks again.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
691fix sessionClient's randomized sessions to be dynamicDavid Liuqiangdavidliu10/26/15, 05:11:03 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #505](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/505/) SUCCESS
This pull request looks good
 =||= "fix sessionClient's randomized sessions to be dynamicDavid Liuqiangdavidliu10/26/15, 05:11:03 AMNaNNaNDavid Liu10/26/15, 04:56:59 AMfix sessionClient's randomized sessions to be dynamic1
692log StatusChangeEvent at warn level if DOWN was involvedDavid Liuqiangdavidliu10/26/15, 05:41:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #506](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/506/) SUCCESS
This pull request looks good
 =||= "log StatusChangeEvent at warn level if DOWN was involvedDavid Liuqiangdavidliu10/26/15, 05:41:44 PMNaNNaNDavid Liu10/26/15, 05:11:56 AMlog StatusChangeEvent at warn level is DOWN was involved1
6931.x Fix CLOSE_WAIT issue in new transport (use existing connection cleaner).tbak10/27/15, 11:10:01 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #507](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/507/) SUCCESS
This pull request looks good
 =||= ship it!
 =||= "1.x Fix CLOSE_WAIT issue in new transport (use existing connection cleaner).tbak10/27/15, 11:10:01 PMNaNNaNTomasz Bak10/26/15, 11:10:19 PMFix CLOSE_WAIT issue in new transport (use existing connection cleaner).1
694Wiki - Configuring-Eureka - wrong link to default configurationAurélien Leboulangerherau10/29/15, 03:33:03 PM"In the configuration part of the wiki page, the link to the example of default configuration isn't correct (404) : `You can take a look at the examples here for default configurations`

maybe the link should point to [https://github.com/Netflix/eureka/blob/master/eureka-server/src/main/resources/]() or [https://github.com/Netflix/eureka/tree/master/eureka-examples/conf]()""Thank you for spotting this. I have just fixed that.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6951.x Remote data not fetched on the reconciliation pathtbak11/02/15, 07:26:35 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #508](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/508/) SUCCESS
This pull request looks good
 =||= "1.x Remote data not fetched on the reconciliation pathtbak11/02/15, 07:26:35 PMNaNNaNTomasz Bak11/02/15, 07:11:11 PMRemote data not fetched on the reconciliation path1
6961.x NullPointException thrown if application name is not defined (set to …tbak11/04/15, 06:18:10 PM…UNKNOWN)"[NetflixOSS » eureka » eureka-pull-requests #509](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/509/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #510](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/510/) SUCCESS
This pull request looks good
 =||= "1.x NullPointException thrown if application name is not defined (set to …tbak11/04/15, 06:18:10 PM…UNKNOWN)NaNTomasz Bak11/04/15, 06:17:23 PMFix codec type in the example1
697Add documentation of config propertiesLibor Ryšavýliry11/05/15, 08:49:14 PM"It's really pita when you run example, add some metadata and when you getMetadata() in the client it returns empty map even if you see those metada when you query API directly. Then you search through documentation and other sources and there's no information anywhere, so one has to debug it to find out that there's some magic undocumented `eureka.decoderName` config property and when one has to set it to `JacksonJson` to make it work.

Please, improve your doc! It will make our lives easier! Thank you ;)""The example was setup with JacksonJsonMini codec, which omits all metadata
in InstanceInfo object. I have changed it to the standard codec.
Thank you for spotting this.
/Tomasz

On Wed, Nov 4, 2015 at 8:57 AM, Libor Rysavy notifications@github.com
wrote:

> It's really pita when you run example, add some metadata and when you
> getMetadata() in the client it returns empty map even if you see those
> metada when you query API directly. Then you search through documentation
> and other sources and there's no information anywhere, so one has to debug
> it to find out that there's some magic undocumented eureka.decoderName
> config property and when one has to set it to JacksonJson to make it work.
> 
> Please, improve your doc! It will make our lives easier! Thank you ;)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/697.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6981.x Backup registry configured via property is overridden with void implementationtbak11/06/15, 12:53:29 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #511](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/511/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #512](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/512/) SUCCESS
This pull request looks good
 =||= "1.x Backup registry configured via property is overridden with void implementationtbak11/06/15, 12:53:29 AMNaNNaNTomasz Bak11/04/15, 11:37:41 PMBackup registry configured via property is overridden with void implementation1
6991.x some entities are gzip-ed on the fly, instead of using ResponseCachetbak05/30/19, 11:06:02 PM"Only full fetch and delta fetch responses, when requested in compressed format are extracted as such from ResponseCache.
Other entities are taken in an uncompressed format, and the compression is done by Jersey gzip filter."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
700Program does not shutdown after using EurekaClientJustin Linjylin11/06/15, 01:14:46 AMI have a program that uses EurekaClient to find services, but it seems that if it runs for longer than say 30 seconds, then exiting the main thread (either gracefully or because of an exception) leaves the Java program hanging. I suspect Eureka might be spawning some user threads. Could they be changed to be daemon threads instead?"Thank you for spotting this. I have fixed this issue in this PR: https://github.com/Netflix/eureka/pull/701.
You should always call `EurekaClient.shutdown()`, which terminates all the allocated resources, including the thread pools.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7011.x Thread pools in eureka-client create non-daemon threadstbak11/06/15, 04:16:24 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #513](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/513/) SUCCESS
This pull request looks good
 =||= ship it!
 =||= "1.x Thread pools in eureka-client create non-daemon threadstbak11/06/15, 04:16:24 PMNaNNaNTomasz Bak11/06/15, 01:01:57 AMThread pools in eureka-client create non-daemon threads1
702DiscoveryJerseyProvider: Error creating a serializer.  ClassNotFoundException: jacksonSpencer Gibbspencergibb02/24/16, 09:54:17 PM"```
2015-11-06 12:50:15.910 ERROR 81323 --- [et_localhost-13] c.n.d.provider.DiscoveryJerseyProvider   : Error creating a serializer.

java.lang.ClassNotFoundException: jackson
    at java.net.URLClassLoader$1.run(URLClassLoader.java:372) ~[na:1.8.0_05]
    at java.net.URLClassLoader$1.run(URLClassLoader.java:361) ~[na:1.8.0_05]
    at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_05]
    at java.net.URLClassLoader.findClass(URLClassLoader.java:360) ~[na:1.8.0_05]
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_05]
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) ~[na:1.8.0_05]
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_05]
    at java.lang.Class.forName0(Native Method) ~[na:1.8.0_05]
    at java.lang.Class.forName(Class.java:259) ~[na:1.8.0_05]
    at com.netflix.discovery.provider.DiscoveryJerseyProvider.getSerializer(DiscoveryJerseyProvider.java:207) [eureka-client-1.3.4.jar:1.3.4]
    at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:118) [eureka-client-1.3.4.jar:1.3.4]
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) [jersey-client-1.19.jar:1.19]
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) [jersey-client-1.19.jar:1.19]
    at com.netflix.eureka.transport.JerseyReplicationClient.submitBatchUpdates(JerseyReplicationClient.java:120) [eureka-core-1.3.4.jar:1.3.4]
    at com.netflix.eureka.cluster.ReplicationTaskProcessor.process(ReplicationTaskProcessor.java:71) [eureka-core-1.3.4.jar:1.3.4]
    at com.netflix.eureka.util.batcher.TaskExecutors$BatchWorkerRunnable.run(TaskExecutors.java:187) [eureka-core-1.3.4.jar:1.3.4]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_05]
```

It fails with this class

```
@Serializer(""jackson"") // For backwards compatibility with DiscoveryJerseyProvider
public class ReplicationListResponse {
```

I'm using eureka 1.3.4""```
2015-11-06 12:00:15.733  INFO 81323 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using encoding codec LegacyJacksonJson
2015-11-06 12:00:15.734  INFO 81323 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using decoding codec LegacyJacksonJson
```
 =||= Looking into the source code, this code path is executed only when the
injected decoder is not capable of handling the media type. It happens in
the replication path which should always use JSON encoding. There is a bug
in the annotation value in ReplicationList/ReplicationResponse, which
contains ""jackson"", not the class name.

Can you check what encoding format is used on the wire?

/Tomasz

On Fri, Nov 6, 2015 at 11:54 AM, Spencer Gibb notifications@github.com
wrote:

> 2015-11-06 12:00:15.733  INFO 81323 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using encoding codec LegacyJacksonJson
> 2015-11-06 12:00:15.734  INFO 81323 --- [ost-startStop-1] c.n.d.provider.DiscoveryJerseyProvider   : Using decoding codec LegacyJacksonJson
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/702#issuecomment-154515411.
 =||= in `JerseyReplicationClient.submitBatchUpdates(JerseyReplicationClient.java:120` it sets 

```
.accept(MediaType.APPLICATION_JSON_TYPE)
.type(MediaType.APPLICATION_JSON_TYPE)
```
 =||= Which is strange the injected decoder does not handle this. We have this
code version running in the cloud with no such issue.
Can you check with the debugger why the ISerializer is being used
in DiscoveryJerseyProvider?

decoder.support(mediaType) returns false, so either Content-Type is not
defined in response, or it is not application/json.

On Fri, Nov 6, 2015 at 1:00 PM, Spencer Gibb notifications@github.com
wrote:

> in
> JerseyReplicationClient.submitBatchUpdates(JerseyReplicationClient.java:120
> it sets
> 
> ```
>                 .accept(MediaType.APPLICATION_JSON_TYPE)
>                 .type(MediaType.APPLICATION_JSON_TYPE)
> ```
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/702#issuecomment-154535654.
 =||= The problem happens when the mediaType is `application/json; charset=UTF-8`. Then it drops to the `ISerializer`.
 =||= I will fix this, and make a new release, but probably not earlier than on
Monday.

On Fri, Nov 6, 2015 at 1:34 PM, Spencer Gibb notifications@github.com
wrote:

> The problem happens when the mediaType is application/json; charset=UTF-8.
> Then it drops to the ISerializer.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/702#issuecomment-154548393.
 =||= I think I found in our code where the charset get's forcefully appended.
 =||= Lets keep it open, as this problem may occur again and the root cause is not obviously visible.
A simple fix would be to prevent any parameters in Content-Type header, and return a meaningful error reply.
 =||= Released in version 1.4.2
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7031.x DiscoveryClient.reconcileAndLogDifference should handle remote data properly when loggingtbak05/30/19, 11:05:24 PMRight now all remote data entities are logged as missing, as they are in the fetched Applications object, but missing in the one compared with.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
704DiscoveryClient fails to unregister servo monitors from JmxMonitorRegistrySpencer Gibbspencergibb02/26/16, 01:50:08 AM"Similar to #638 which was for EurekaServer. Using eureka 1.3.4.

```
javax.management.InstanceNotFoundException: com.netflix.servo:name=eurekaClient.resolver.lastLoadTimestamp,class=AsyncResolver,id=bootstrap,level=INFO,type=GAUGE
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1095) ~[na:1.8.0_05]
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.exclusiveUnregisterMBean(DefaultMBeanServerInterceptor.java:427) ~[na:1.8.0_05]
    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.unregisterMBean(DefaultMBeanServerInterceptor.java:415) ~[na:1.8.0_05]
    at com.sun.jmx.mbeanserver.JmxMBeanServer.unregisterMBean(JmxMBeanServer.java:546) ~[na:1.8.0_05]
    at com.netflix.servo.jmx.JmxMonitorRegistry.unregister(JmxMonitorRegistry.java:125) ~[servo-core-0.10.0.jar:0.10.0]
    at com.netflix.servo.DefaultMonitorRegistry.unregister(DefaultMonitorRegistry.java:143) [servo-core-0.10.0.jar:0.10.0]
    at com.netflix.servo.monitor.Monitors.unregisterObject(Monitors.java:197) [servo-core-0.10.0.jar:0.10.0]
    at com.netflix.discovery.shared.resolver.AsyncResolver.shutdown(AsyncResolver.java:136) [eureka-client-1.3.4.jar:1.3.4]
    at com.netflix.discovery.DiscoveryClient$EurekaTransport.shutdown(DiscoveryClient.java:259) [eureka-client-1.3.4.jar:1.3.4]
    at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:962) [eureka-client-1.3.4.jar:1.3.4]
    at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration.onApplicationEvent(EurekaDiscoveryClientConfiguration.java:189) [classes/:na]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_05]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_05]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_05]
    at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0_05]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:227) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:144) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:106) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:380) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:961) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:928) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.boot.builder.ParentContextCloserApplicationListener$ContextCloserListener.onApplicationEvent(ParentContextCloserApplicationListener.java:102) [spring-boot-1.3.0.BUILD-20151110.135218-784.jar:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.boot.builder.ParentContextCloserApplicationListener$ContextCloserListener.onApplicationEvent(ParentContextCloserApplicationListener.java:86) [spring-boot-1.3.0.BUILD-20151110.135218-784.jar:1.3.0.BUILD-SNAPSHOT]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:380) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:961) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
    at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:895) [spring-context-4.2.3.BUILD-20151109.174732-45.jar:4.2.3.BUILD-SNAPSHOT]
```""@spencergibb I have tried to reproduce this error with no success. I have seen servo ignores these kinds of errors internally (https://github.com/Netflix/servo/commit/0636b23a60889341a5c1d0dc8a1adc5b0c830180). Can you confirm?
 =||= @tbak I can confirm this issue. I will try to provide a short example in the next days.
 =||= @tbak We're still on servo 0.10.0
 =||= Same issue here with Brixton. M4
 =||= Eureka has been updated to servo 0.10.x
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
705FAILURE: Build failed with an exceptionDeleted userghost11/11/15, 07:15:35 PM"```
.../eureka/eureka-client/src/main/java/com/netflix/discovery/util/ExceptionsMetric.java:54: error: cannot find symbol
            if (exceptionCounters.putIfAbsent(exceptionName, counter) == null) {
                                 ^
  symbol:   method putIfAbsent(String,Counter)
  location: variable exceptionCounters of type Map<String,Counter>
```""@alexandre-gauge that is a java8 method. Can you try to update to java8 and try again? Thanks.
 =||= @qiangdavidliu it might be a good idea to set the compatibility level explicitly on the build:

```
sourceCompatibility = 1.8
targetCompatibility = 1.8
```

That should make the error message a bit easier to follow than cannot find symbol. For example on one of mine when trying to build on java 7 it gives:

```
* What went wrong:
Execution failed for task ':spectator-api:compileJava'.
> invalid source release: 1.8
```
 =||= Thanks @brharrington. That's a good suggestion.
 =||= Updated as @brharrington suggested
 =||= Thanks @qiangdavidliu and @brharrington 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
706set source compatibility in build.gradle as java8 apis have bleed into codeDavid Liuqiangdavidliu11/11/15, 10:20:50 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #514](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/514/) SUCCESS
This pull request looks good
 =||= "set source compatibility in build.gradle as java8 apis have bleed into codeDavid Liuqiangdavidliu11/11/15, 10:20:50 PMNaNNaNDavid Liu11/11/15, 10:10:34 PMset source compatibility in build.gradle as java8 apis have bleed into code.1
707PeerEurekaNode: a lot of log messagesDeleted userghost12/03/15, 04:33:34 PM"If i shutdown peers, the up peer produces a lot of log messages like the following one:

```
com.sun.jersey.api.client.ClientHandlerException: java.net.SocketTimeoutException: Read timed out
    at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:184)
    at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:28)
    at com.sun.jersey.api.client.Client.handle(Client.java:648)
    at com.sun.jersey.api.client.WebResource.handle(WebResource.java:680)
    at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
    at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:527)
    at com.netflix.eureka.cluster.PeerEurekaNode.sendHeartBeat(PeerEurekaNode.java:510)
    at com.netflix.eureka.cluster.PeerEurekaNode.access$400(PeerEurekaNode.java:72)
    at com.netflix.eureka.cluster.PeerEurekaNode$3.execute(PeerEurekaNode.java:275)
    at com.netflix.eureka.cluster.PeerEurekaNode$6.executeSingle(PeerEurekaNode.java:992)
    at com.netflix.eureka.cluster.PeerEurekaNode$6.process(PeerEurekaNode.java:844)
    at com.netflix.logging.messaging.MessageBatcher$ProcessMessages.run(MessageBatcher.java:410)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.SocketTimeoutException: Read timed out
    at java.net.SocketInputStream.socketRead0(Native Method)
    at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
    at java.net.SocketInputStream.read(SocketInputStream.java:170)
    at java.net.SocketInputStream.read(SocketInputStream.java:141)
    at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:160)
    at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:84)
    at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:273)
    at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:140)
    at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)
    at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:260)
    at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:283)
    at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:251)
    at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:223)
    at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:271)
    at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:123)
    at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:685)
    at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:487)
    at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
    at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
    at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:170)
    ... 14 common frames omitted
```""When you shutdown a peer, other peers will continue sending replication data to this address, and for the time it is missing you will see transport related exceptions in the log file. We limit amount of errors logged in the replication channel, but we want to keep it at some level for diagnostic purposes.
 =||= Closing this issue for now. Please, reopen it if you want to further discuss this topic.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7082.x Extract eureka-api moduletbak11/13/15, 01:22:25 AMRemove avro, and reimplement JSON encoding with the latest Jackson."[NetflixOSS » eureka » eureka-pull-requests #515](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/515/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #516](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/516/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #517](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/517/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #518](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/518/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #519](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/519/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #520](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/520/) SUCCESS
This pull request looks good
 =||= "2.x Extract eureka-api moduletbak11/13/15, 01:22:25 AMRemove avro, and reimplement JSON encoding with the latest Jackson.NaNTomasz Bak11/13/15, 01:17:25 AMRemove file renamed in the previous commit1
709Incorrect URLs of Eureka Client and Server JavaDoc on Eureka WikiKartikdearjadu11/16/15, 08:43:54 PM"The URLs to Eureka Client and Server JavaDoc lead to a 404 page on GitHub. These links have been broken for few weeks now. Can the owners please fix them?

http://netflix.github.com/eureka/javadoc/eureka-client/index.html
http://netflix.github.com/eureka/javadoc/eureka-client/index.html

These URLs are on the right-side navigation panel on the Eureka Wiki (https://github.com/Netflix/eureka/wiki)""Thank you for spotting this. We no longer keep javadoc documentation in github. I have removed these links.
 =||= Thanks. Could you point me to the valid location of the JavaDoc?
 =||= Javadoc documentation is uploaded to maven central. You IDE should be able
to download it for you.

On Mon, Nov 16, 2015 at 4:24 PM, Kartik notifications@github.com wrote:

> Thanks. Could you point me to the valid location of the JavaDoc?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/709#issuecomment-157218697.
 =||= Got it. Merci
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
710update to latest karyon3 and better integration for eureka-server-karyon3David Liuqiangdavidliu11/20/15, 06:16:17 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #521](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/521/) SUCCESS
This pull request looks good
 =||= "update to latest karyon3 and better integration for eureka-server-karyon3David Liuqiangdavidliu11/20/15, 06:16:17 PMNaNNaNDavid Liu11/17/15, 07:43:39 AMmove eureka-server-karyon3 to use eureka-client-archaius21
711License violation suspicion - CDDL/GPLv2+CE reused codeVladimír Návratvlna11/19/15, 08:00:34 PM"File `eureka-core/src/main/java/com/netflix/eureka/cluster/DynamicGZIPContentEncodingFilter.java` contains substantial part of http://grepcode.com/file/repo1.maven.org/maven2/com.sun.jersey/jersey-bundle/1.17.1/com/sun/jersey/api/client/filter/GZIPContentEncodingFilter.java

Original file is CDDL/GPLv2+CE dual-licensed and CDDL/GPLv2+CE is not possible to relicense to Apache 2.0.

I was not able to find this code under Apache 2.0 license and it looks like license violation.

Suspicious code was commited by @tbak in commit Netflix/eureka@1475b3b6b9cb6a9a31f01b287a58c1c699fc91d4

https://www.apache.org/legal/resolved.html#category-b describes proper handling of CDDL licensed code to be reused in Apache 2.0 licensed product.""Thank you for spotting this. I will provide fresh implementation for this class, without basing it on the existing jersey code.
 =||= Fixed in #713
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7121.x Add ETag supporttbak06/14/16, 04:59:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #522](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/522/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #523](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/523/) SUCCESS
This pull request looks good
 =||= Closing this for now, will reopen when needed
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7131.x Fix for issue https://github.com/Netflix/eureka/issues/711tbak11/19/15, 07:59:58 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #524](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/524/) SUCCESS
This pull request looks good
 =||= "1.x Fix for issue https://github.com/Netflix/eureka/issues/711tbak11/19/15, 07:59:58 PMNaNNaNTomasz Bak11/19/15, 06:34:23 PMFix for issue https://github.com/Netflix/eureka/issues/7111
7141.x Remove dependency on blitz4jtbak12/03/15, 06:15:29 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #525](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/525/) SUCCESS
This pull request looks good
 =||= :+1: 
 =||= :+1:
 =||= "1.x Remove dependency on blitz4jtbak12/03/15, 06:15:29 PMNaNNaNTomasz Bak12/03/15, 04:25:48 PMRemove dependency on blitz4j1
715Use AWS metadata IP in CloudInstanceConfig Stefan Fusseneggersfussenegger01/13/16, 06:05:34 PM"I'm trying to get Eureka running in AWS EC2 Container Service (ECS).

Unfortunately, `CloudInstanceConfig` relies on `InetAddress.getLocalHost().getHostAddress()` to get the IP address. In case of Docker, this is the IP inside the Docker network (typically something like `172.17.0.2`) which isn't very helpful.

Using `MetaDataKey.localIpv4` should fix this problem without changing current behavior:

``` java
@Override
public String getIpAddress() {
    return ((AmazonInfo) info).get(MetaDataKey.localIpv4);
}
```

here's the current implementation of `getHostName(..)`:

``` java
@Override
public String getHostName(boolean refresh) {
    if (refresh) {
        refreshAmazonInfo();
    }
    return ((AmazonInfo) info).get(MetaDataKey.publicHostname);
}
```

Alternatively, there could be a new property to enable this behavior.""CloudInstanceConfig depends on Amazon metadata. If access to metadata
fails, and flag 'eureka.validateInstanceId' is set to false, as a fallback
a local host address is read. Possibly this is happening in your case.
You can always override the default CloudInstanceConfig implementation, and
provide your custom version that better handles docker environment.
/Tomasz

On Fri, Dec 4, 2015 at 7:16 AM, Stefan Fussenegger <notifications@github.com

> wrote:
> 
> I'm trying to get Eureka running in AWS EC2 Container Service (ECS).
> 
> Unfortunately, CloudInstanceConfig relies on
> InetAddress.getLocalHost().getHostAddress() to get the IP address. In
> case of Docker, this is the IP inside the Docker network (typically
> something like 172.17.0.2) which isn't very helpful.
> 
> Using MetaDataKey.localIpv4 should fix this problem without changing
> current behavior:
> 
> @Overridepublic String getIpAddress() {
>     return ((AmazonInfo) info).get(MetaDataKey.localIpv4);
> }
> 
> here's the current implementation of getHostName(..):
> 
> @Overridepublic String getHostName(boolean refresh) {
>     if (refresh) {
>         refreshAmazonInfo();
>     }
>     return ((AmazonInfo) info).get(MetaDataKey.publicHostname);
> }
> 
> Alternatively, there could be a new property to enable this behavior.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/715.
 =||= There is actually some work in progress that will address this exact issue
(for a different use case). The changes should make it into the next
release.
On Dec 4, 2015 9:13 AM, ""tbak"" notifications@github.com wrote:

> CloudInstanceConfig depends on Amazon metadata. If access to metadata
> fails, and flag 'eureka.validateInstanceId' is set to false, as a fallback
> a local host address is read. Possibly this is happening in your case.
> You can always override the default CloudInstanceConfig implementation, and
> provide your custom version that better handles docker environment.
> /Tomasz
> 
> On Fri, Dec 4, 2015 at 7:16 AM, Stefan Fussenegger <
> notifications@github.com
> 
> > wrote:
> > 
> > I'm trying to get Eureka running in AWS EC2 Container Service (ECS).
> > 
> > Unfortunately, CloudInstanceConfig relies on
> > InetAddress.getLocalHost().getHostAddress() to get the IP address. In
> > case of Docker, this is the IP inside the Docker network (typically
> > something like 172.17.0.2) which isn't very helpful.
> > 
> > Using MetaDataKey.localIpv4 should fix this problem without changing
> > current behavior:
> > 
> > @Overridepublic String getIpAddress() {
> > return ((AmazonInfo) info).get(MetaDataKey.localIpv4);
> > }
> > 
> > here's the current implementation of getHostName(..):
> > 
> > @Overridepublic String getHostName(boolean refresh) {
> > if (refresh) {
> > refreshAmazonInfo();
> > }
> > return ((AmazonInfo) info).get(MetaDataKey.publicHostname);
> > }
> > 
> > Alternatively, there could be a new property to enable this behavior.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/Netflix/eureka/issues/715.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/715#issuecomment-162024552.
 =||= Any sort of ETA on the release? I am interested in running clients in ECS as well.
 =||= Sorry for not updating. This is actually already fixed and released in release 1.3.7. Will update the release notes also.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7161.x Client InstanceInfo default address resolutionDavid Liuqiangdavidliu12/08/15, 09:38:14 PM"Adding ability to define resolution order of the local InstanceInfo's ""default"" network address based on data available in AmazonInfo.""[NetflixOSS » eureka » eureka-pull-requests #526](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/526/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #527](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/527/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #528](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/528/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= "1.x Client InstanceInfo default address resolutionDavid Liuqiangdavidliu12/08/15, 09:38:14 PM"Adding ability to define resolution order of the local InstanceInfo's ""default"" network address based on data available in AmazonInfo."NaNDavid Liu12/08/15, 08:15:09 PMon second thought reusing hostname instead of introducing a new defaultAddress1
717Status REST operation completely disables instance HealthCheckHandler?Andreas Fundellabaculus12/09/15, 05:17:39 PM"Hi

I've noticed that when I call the REST API for status (e.g. PUT /eureka/v2/apps/appID/instanceID/status?value=UP) it makes Eureka to ignore the status updates from the instance HealthCheckHandler. Seems like the 'overriddenstatus' cannot be undone.

The only way to get Eureka to respect the HealthCheckHandler status updates from the instance HealthCheckHandler is to de-register and register again (i.e. by REST API calls or re-starting the instance).

I have a use case where we want to change the status for a specific instance to e.g. DOWN/OUT_OF_SERVICE and then put it back to UP but with Eureka respecting the instance HealthCheckHandler.

Is this possible somehow?

Kind regards,
Andreas""You should be able to do a delete request to clear the override:

```
DELETE /eureka/v2/apps/appID/instanceID/status
```
 =||= The only allowed methods for endpoint is OPTIONS and PUT.

Using Eureka version 1.1.147
 =||= It looks like that was added in 1.1.148: https://github.com/Netflix/eureka/releases/tag/1.1.148
 =||= Aah, that explain things...

Thank you for your very helpful support! 

Kudos
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
718Why InstanceInfo.InstanceStatus can not be a interface?Andrea Posadinoandreaposadino12/10/15, 05:16:34 PM"Hi,

I'm working in a microservice in java using your code.
I wanted to add a custom InstanceStatus for monitoring through Eureka when my ms is working on a specific job. Something like a ""RUNNING JOB A"" status.
But InstanceStatus is a enum class, so I can't extend it.

I want to set my instanceStatus with this method:
ApplicationInfoManager.getInstance().setInstanceStatus(InstanceInfo.InstanceStatus)

But I can't for a custom InstanceStatus.

I think that there is a reason about this choice of a defined set of InstanceStatus but I don't get it.
Is there another way for what I want to do? 

Thanks in advance""InstanceStatus's purpose is to report an overall service state. You can still propagate this information using metadata field.
 =||= Thank for your answer,

I just tried with ApplicationInfoManager.getInstance().registerAppMetadata(Map<String,String> appMetadata) method and worked. 

Thank you again.
 =||= glad to help
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
719Unable to run eureka server on Weblogic 12cOmiomkar999901/14/16, 06:05:46 PM"i'm unable to run eureka server on Weblogic 12c.
war file is deployed successfully on Weblogic 12c but I'm receiving following error in server logs:

[2015-12-10T13:36:46.135+05:30] [AdminServer] [ERROR] [] [com.netflix.eureka.PeerAwareInstanceRegistry] [tid: Eureka-EvictionTimer] [userId: <anonymous>] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:8] [APP: eureka-server-1.1.37] The lease expiration has been disabled since the number of renewals per minute   is lower than the minimum threshold. Number of Renewals Last Minute : 0. The Threshold is 0.85 of total instances : 0
[2015-12-10T13:37:08.337+05:30] [AdminServer] [ERROR] [] [com.netflix.discovery.DiscoveryClient] [tid: DiscoveryClient_ServiceURLUpdater] [userId: <anonymous>] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:9] [APP: eureka-server-1.1.37] DISCOVERY: invalid zone - defaultZone defaulting to defaultZone
[2015-12-10T13:37:11.702+05:30] [AdminServer] [WARNING] [] [com.netflix.discovery.DiscoveryClient] [tid: DiscoveryClient_CacheRefresher] [userId: <anonymous>] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP: eureka-server-1.1.37] Action: Refresh  => returned status of 404 from http://localhost/eureka/v2/apps/
[2015-12-10T13:37:11.704+05:30] [AdminServer] [ERROR] [] [com.netflix.discovery.DiscoveryClient] [tid: DiscoveryClient_CacheRefresher] [userId: <anonymous>] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP: eureka-server-1.1.37] Can't get a response from http://localhost/eureka/v2/apps/[[
Can't contact any eureka nodes - possibly a security group issue? java.lang.RuntimeException: Bad status: 404
    at com.netflix.discovery.DiscoveryClient.makeRemoteCall(DiscoveryClient.java:833)
    at com.netflix.discovery.DiscoveryClient.makeRemoteCall(DiscoveryClient.java:753)
    at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:615)
    at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:562)
    at com.netflix.discovery.DiscoveryClient.access$1200(DiscoveryClient.java:87)
    at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1316)
    at java.util.TimerThread.mainLoop(Timer.java:555)
    at java.util.TimerThread.run(Timer.java:505)

]]
[2015-12-10T13:37:11.704+05:30] [AdminServer] [ERROR] [] [com.netflix.discovery.DiscoveryClient] [tid: DiscoveryClient_CacheRefresher] [userId: <anonymous>] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP: eureka-server-1.1.37] DiscoveryClient_EUREKA/MACHINE_NAME - was unable to refresh it's cache! status = Bad status: 404[[
java.lang.RuntimeException: Bad status: 404
    at com.netflix.discovery.DiscoveryClient.makeRemoteCall(DiscoveryClient.java:833)
    at com.netflix.discovery.DiscoveryClient.makeRemoteCall(DiscoveryClient.java:753)
    at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:615)
    at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:562)
    at com.netflix.discovery.DiscoveryClient.access$1200(DiscoveryClient.java:87)
    at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1316)
    at java.util.TimerThread.mainLoop(Timer.java:555)
    at java.util.TimerThread.run(Timer.java:505)

]]

NOTE: MACHINE_NAME is a name of my windows machine which cannot be disclosed""You Eureka client/server configuration assumes that you run server on port
80, and that the context path is 'eureka' (http://localhost/eureka/v2/apps).
You are using probably default configuration hence localhost address is
used, not routable address of the host. Please consult
https://github.com/Netflix/eureka/tree/master/eureka-examples/conf for
example configuration. You need to change 'eureka.serviceUrl.default' to
your eureka deployment URL.
/Tomasz

On Mon, Dec 14, 2015 at 4:22 AM, omkar9999 notifications@github.com wrote:

> i'm unable to run eureka server on Weblogic 12c
> war file is deployed successfully on Weblogic 12c but I'm receiving
> following error in server logs:
> 
> [2015-12-10T13:36:46135+05:30] [AdminServer] [ERROR] []
> [comnetflixeurekaPeerAwareInstanceRegistry] [tid: Eureka-EvictionTimer]
> [userId: ] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:8] [APP:
> eureka-server-1137] The lease expiration has been disabled since the number
> of renewals per minute is lower than the minimum threshold Number of
> Renewals Last Minute : 0 The Threshold is 085 of total instances : 0
> [2015-12-10T13:37:08337+05:30] [AdminServer] [ERROR] []
> [comnetflixdiscoveryDiscoveryClient] [tid:
> DiscoveryClient_ServiceURLUpdater] [userId: ] [ecid:
> 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:9] [APP:
> eureka-server-1137] DISCOVERY: invalid zone - defaultZone defaulting to
> defaultZone
> [2015-12-10T13:37:11702+05:30] [AdminServer] [WARNING] []
> [comnetflixdiscoveryDiscoveryClient] [tid: DiscoveryClient_CacheRefresher]
> [userId: ] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP:
> eureka-server-1137] Action: Refresh => returned status of 404 from
> http://localhost/eureka/v2/apps/
> [2015-12-10T13:37:11704+05:30] [AdminServer] [ERROR] []
> [comnetflixdiscoveryDiscoveryClient] [tid: DiscoveryClient_CacheRefresher]
> [userId: ] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP:
> eureka-server-1137] Can't get a response from
> http://localhost/eureka/v2/apps/[[
> Can't contact any eureka nodes - possibly a security group issue?
> javalangRuntimeException: Bad status: 404
> at
> comnetflixdiscoveryDiscoveryClientmakeRemoteCall(DiscoveryClientjava:833)
> at
> comnetflixdiscoveryDiscoveryClientmakeRemoteCall(DiscoveryClientjava:753)
> at
> comnetflixdiscoveryDiscoveryClientgetAndStoreFullRegistry(DiscoveryClientjava:615)
> at comnetflixdiscoveryDiscoveryClientfetchRegistry(DiscoveryClientjava:562)
> at comnetflixdiscoveryDiscoveryClientaccess$1200(DiscoveryClientjava:87)
> at
> comnetflixdiscoveryDiscoveryClient$CacheRefreshThreadrun(DiscoveryClientjava:1316)
> at javautilTimerThreadmainLoop(Timerjava:555)
> at javautilTimerThreadrun(Timerjava:505)
> 
> ]]
> [2015-12-10T13:37:11704+05:30] [AdminServer] [ERROR] []
> [comnetflixdiscoveryDiscoveryClient] [tid: DiscoveryClient_CacheRefresher]
> [userId: ] [ecid: 4c164384-726a-4c35-a306-2cb86fb2103a-00000003,0:6] [APP:
> eureka-server-1137] DiscoveryClient_EUREKA/MACHINE_NAME - was unable to
> refresh it's cache! status = Bad status: 404[[
> javalangRuntimeException: Bad status: 404
> at
> comnetflixdiscoveryDiscoveryClientmakeRemoteCall(DiscoveryClientjava:833)
> at
> comnetflixdiscoveryDiscoveryClientmakeRemoteCall(DiscoveryClientjava:753)
> at
> comnetflixdiscoveryDiscoveryClientgetAndStoreFullRegistry(DiscoveryClientjava:615)
> at comnetflixdiscoveryDiscoveryClientfetchRegistry(DiscoveryClientjava:562)
> at comnetflixdiscoveryDiscoveryClientaccess$1200(DiscoveryClientjava:87)
> at
> comnetflixdiscoveryDiscoveryClient$CacheRefreshThreadrun(DiscoveryClientjava:1316)
> at javautilTimerThreadmainLoop(Timerjava:555)
> at javautilTimerThreadrun(Timerjava:505)
> 
> ]]
> 
> NOTE: MACHINE_NAME is a name of my windows machine which cannot be
> disclosed
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/719.
 =||= I am closing this issue. Please, reopen it if you wish to continue this discussion.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
720Upgrade netflix-eventbus to purge the transitive dependency on findbugsJonathan Schneiderjkschneider12/22/15, 08:07:58 PMThis effectively removes eureka-client's only transitive dependency on LGPL code."[NetflixOSS » eureka » eureka-pull-requests #529](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/529/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #530](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/530/) SUCCESS
This pull request looks good
 =||= "Upgrade netflix-eventbus to purge the transitive dependency on findbugsJonathan Schneiderjkschneider12/22/15, 08:07:58 PMThis effectively removes eureka-client's only transitive dependency on LGPL code.NaNJon Schneider12/14/15, 06:52:20 PMUpgrade netflix-eventbus to purge the transitive dependency on findbugs1
7211.x Improve backwards compatibility with legacy eureka-client,tbak12/22/15, 07:41:09 PMthat ignore the new InstanceInfo.instanceId field."[NetflixOSS » eureka » eureka-pull-requests #532](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/532/) SUCCESS
This pull request looks good
 =||= "1.x Improve backwards compatibility with legacy eureka-client,tbak12/22/15, 07:41:09 PMthat ignore the new InstanceInfo.instanceId field.NaNTomasz Bak12/22/15, 07:15:59 PM"Improve backwards compatibility with legacy eureka-client,
that ignore the new InstanceInfo.instanceId field."1
722Question : Eureka never unregisters a servicepradeepkusingh01/14/16, 06:05:21 PMI am running few test with Eureka and seeing the issue though I shut down the micoservices , it still shows services are up and running, ribbon got the server list and call failed with 404. I went through the eureka docs 85% rule, still this one is tricky. If I disabled the self preservation mode it works, but I don't want to do that as per recommendations in prod. so what is the best configuration to not face this issue?"If you shutdown single server, and it makes eureka enter self preservation mode, it means you have very few servers in the registry, and there is nothing else to do about it as to disable it. As you say it is in test, this should be probably ok with you. In prod, with more registry entries, self preservation should kick in only when there is  a serious issue causing massive registration expiries, like network failure.
 =||= I am closing this issue. Please, reopen it if you wish to continue this discussion.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7231.x Fix AWS meta data refreshtbak12/29/15, 03:53:14 PMAWS meta data updates were ignored, which for Discovery servers themselves resulted in an infinite loop of EIP binding, and registry clear/upload sequences. This in turn caused massive expiries, and large network traffic."[NetflixOSS » eureka » eureka-pull-requests #533](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/533/) SUCCESS
This pull request looks good
 =||= "1.x Fix AWS meta data refreshtbak12/29/15, 03:53:14 PMAWS meta data updates were ignored, which for Discovery servers themselves resulted in an infinite loop of EIP binding, and registry clear/upload sequences. This in turn caused massive expiries, and large network traffic.NaNTomasz Bak12/29/15, 06:13:01 AMFix AWS meta data refresh1
7241.x In DiscoveryJerseyProvider change default codec to the latest one.tbak12/29/15, 09:35:58 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #534](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/534/) SUCCESS
This pull request looks good
 =||= "1.x In DiscoveryJerseyProvider change default codec to the latest one.tbak12/29/15, 09:35:58 PMNaNNaNTomasz Bak12/29/15, 09:22:37 PMIn DiscoveryJerseyProvider change default codec to the latest one.1
725can't run 2 instances using the same discovery managerYair Ogenyairogen01/14/16, 06:04:15 PM"I am using eureka -client 1.1.147

I am both a server (using spring-cloud) and ribbon client (using rxnetty based client).

for the client to work I had to write this code:

 if (DiscoveryManager.getInstance().getDiscoveryClient() == null) {
            EurekaInstanceConfig eurekaInstanceConfig = new MyDataCenterInstanceConfig(getApiName());
            EurekaClientConfig eurekaClientConfig = new DefaultEurekaClientConfig(getApiName() + ""."");
            DiscoveryManager.getInstance().initComponent(eurekaInstanceConfig, eurekaClientConfig);
        }

problem is that if this code runs before spring cloud initializes the server side discovery, my server doesn't register at all with eureka.
1. As DiscoveryManager is a singleton I can only register one instance.
2. For the client I don't want to register an instance just be able to lookup using 'com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList' class.

Is there another way to make my LB to lookup with eureka? Maybe initialize the eureka client on the client side differently?""You are using very old version with eureka. In later releases we improved DI support, so this should be no more an issue.

> For the client I don't want to register an instance just be able to lookup using 

I do not understand this question. The reason to register with discovery is to be able to load server list for load balancing purposes. If you do not want to use Eureka registry, you can always use another ServerList implementation (for example ConfigurationBasedServerList).
 =||= @tbak Thanks for your reply.
The old version we use is coming from spring-cloud-netflix lib. I have no idea why but even thier latest version still uses eureka 1.1.147: https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-netflix/1.0.4.RELEASE/spring-cloud-netflix-1.0.4.RELEASE.pom.
Any idea why?

Regatding the second part: I thought the A eureka client can be used for 2 puposes:
- register a server
- as a client, lookup other servers.

So - I was asking is it possible to be a eureka client just for lookup purposes and not register the client itself with its own instance properties as the client may not be a server in it self?
 =||= In our Brixton milestones we use later versions of eureka. It was a major refactoring to use it.
 =||= so - you recommend we try out this?

http://repo.spring.io/libs-milestone-local/org/springframework/cloud/spring-cloud-netflix/1.1.0.M4/
 =||= @yairogen Regarding your question:

> So - I was asking is it possible to be a eureka client just for lookup purposes and not register the client itself with its own instance properties as the client may not be a server in it self?

It is possible to configure eureka to only register (no registry fetch), or only do registry fetch (no registration). This is controlled via two properties:
- eureka.registration.enabled
- eureka.shouldFetchRegistry
 =||= I am closing this issue. Please, reopen it if you wish to continue this discussion.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7262.x major refactoring with new transport and channel abstractionstbak01/04/16, 05:02:27 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #535](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/535/) SUCCESS
This pull request looks good
 =||= "2.x major refactoring with new transport and channel abstractionstbak01/04/16, 05:02:27 PMNaNNaNTomasz Bak01/04/16, 04:40:47 PMRemove code dealing with registration/interest/replication ports after they were merged into one.1
727Handle registration with bad data in DataCenterInfoDavid Liuqiangdavidliu01/04/16, 10:03:18 PM"- Moving data backfill of AmazonInfo from InstanceInfo ctor to Resource that handles registration
- Adding an option to return 400 to such registration requests instead of backfill data""[NetflixOSS » eureka » eureka-pull-requests #536](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/536/) SUCCESS
This pull request looks good
 =||= "Handle registration with bad data in DataCenterInfoDavid Liuqiangdavidliu01/04/16, 10:03:18 PM"- Moving data backfill of AmazonInfo from InstanceInfo ctor to Resource that handles registration
- Adding an option to return 400 to such registration requests instead of backfill data"NaNDavid Liu01/04/16, 09:46:12 PMHandle registration with bad data in DataCenterInfo1
728add additional sanity check in shouldRefresh AmazonInfoDavid Liuqiangdavidliu01/05/16, 04:49:36 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #537](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/537/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #538](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/538/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= "add additional sanity check in shouldRefresh AmazonInfoDavid Liuqiangdavidliu01/05/16, 04:49:36 AMNaNNaNDavid Liu01/05/16, 03:25:57 AMlogic fix + adding test case1
729Revert https://github.com/Netflix/eureka/pull/724 due to compatibility issues with Jackson 2.6.xtbak01/06/16, 08:45:21 PMNaN"Looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #539](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/539/) SUCCESS
This pull request looks good
 =||= "Revert https://github.com/Netflix/eureka/pull/724 due to compatibility issues with Jackson 2.6.xtbak01/06/16, 08:45:21 PMNaNNaNTomasz Bak01/06/16, 08:29:50 PMRevert https://github.com/Netflix/eureka/pull/724 due to compatibility issues with Jackson 2.6.x1
7301.x Refactor Jackson serializer, so it does not depend on internal Jackson code.tbak01/14/16, 11:40:55 PMThis was source of incompatibility with Jackson versions higher than 2.5."[NetflixOSS » eureka » eureka-pull-requests #540](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/540/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #542](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/542/) SUCCESS
This pull request looks good
 =||= "1.x Refactor Jackson serializer, so it does not depend on internal Jackson code.tbak01/14/16, 11:40:55 PMThis was source of incompatibility with Jackson versions higher than 2.5.NaNTomasz Bak01/14/16, 11:24:30 PMBetter error handling in ApplicationsJacksonBuilder1
7312.x Clean protocol model, and add support for protobuf with RxNettytbak01/11/16, 11:26:16 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #541](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/541/) SUCCESS
This pull request looks good
 =||= "2.x Clean protocol model, and add support for protobuf with RxNettytbak01/11/16, 11:26:16 PMNaNNaNTomasz Bak01/11/16, 11:15:44 PMClean protocol model, and add support for protobuf with RxNetty1
732DiscoveryClient throws Exception if no service is foundFabian WilmsFabianWilms01/19/16, 06:39:50 PMThe DiscoveryClient throws an Exception when no service for the given ID is found. In my opinion thats not exceptional but infact totally possible. The method getNextServerFromEureka should return an java.util.Optional."Can you point which methods have this behavior? Query by id is supported by this method:

``` java
public List<InstanceInfo> getInstancesById(String id);
```

And it should return empty list if no instance with the given id is found.
 =||= ``` java
public InstanceInfo getNextServerFromEureka(String virtualHostname, boolean secure) {
    List<InstanceInfo> instanceInfoList = this.getInstancesByVipAddress(
            virtualHostname, secure);
    if (instanceInfoList == null || instanceInfoList.isEmpty()) {
        throw new RuntimeException(""No matches for the virtual host name :""
                + virtualHostname);
    }
    Applications apps = this.localRegionApps.get();
    int index = (int) (apps.getNextIndex(virtualHostname.toUpperCase(),
            secure).incrementAndGet() % instanceInfoList.size());
    return instanceInfoList.get(index);
}
```

This is the method I'm talking about. `getInstancesById` is of course a good replacement.
 =||= @FabianHoltkoetter what you propose makes sense. I have a suspicion that had Optional been available prior to java8, this API would likely have been done that way. Unfortunately the getNextServerFromEureka() method is now a public API and for compatibility, it would be a breaking change to change it from returning an InstanceInfo to return an Optional<InstanceInfo>.
 =||= @FabianHoltkoetter Thanks for raising this issue. Although it is valid, I'm going to close this for now as there are work around methods (e.g. get the full list of the vip and do a simple round robin on the list), and updating the method in question would leave to requiring an incompatible version bump.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
733Fix build errorJustin Linjylin01/15/16, 02:35:47 AMThe putIfAbsent method is used on this variable which is not part of the Map interface."[NetflixOSS » eureka » eureka-pull-requests #543](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/543/) SUCCESS
This pull request looks good
 =||= @jylin putIfAbsent is part of the map API since java8.
 =||= This is the only thing that prevents building with Java 7 though.
 =||= In that case, sure. However please do note that we are developing on java8 and may introduce other java8 only functionality in the future.
 =||= [NetflixOSS » eureka » eureka-pull-requests #544](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/544/) SUCCESS
This pull request looks good
 =||= "Fix build errorJustin Linjylin01/15/16, 02:35:47 AMThe putIfAbsent method is used on this variable which is not part of the Map interface.NaNJustin Lin01/15/16, 02:02:09 AM"Fix build error

The putIfAbsent method is used on this variable which is not part of the Map interface."1
734blitz4j is no longer included in eureka server as part of 1.3.5...Daniel Caballerodcaba01/19/16, 05:11:11 PM ... #714 . Default log4j properties still points to a class that is part of blitz4j, generating an exception at boot time."[NetflixOSS » eureka » eureka-pull-requests #545](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/545/) SUCCESS
This pull request looks good
 =||= Thank you for spotting this.
 =||= you're welcome!
 =||= "blitz4j is no longer included in eureka server as part of 1.3.5...Daniel Caballerodcaba01/19/16, 05:11:11 PM ... #714 . Default log4j properties still points to a class that is part of blitz4j, generating an exception at boot time.NaNdaniel-caballero01/19/16, 10:09:23 AMblitz4j is no longer included in eureka server as part of 1.3.5 - #714. Default log4j properties still points to a class, generating an exception at boot time1
735Document version compatibilityStefan Fusseneggersfussenegger06/02/16, 10:27:25 PM"I believe this one should be document as I wasn't able to find anything in the wiki.

There are three main questions that come to mind:

1) what do different version increments represent?
2) is it supported to run clients with earlier versions than the server? patch level or minor too?
3) is it supported to run servers with different versions (e.g. while upgrading a cluster)? patch level or minor?""@sfussenegger thanks, we will update the wiki. To address your 3 specific questions:

1) client/server protocol compatibility should be ensured for minor version updates. Minor version bumps may indicate client side java API changes or dependency changes but should not impact client/server protocol.
2) server should be compatible with earlier clients at minor version differences.
3) servers are designed to be upgraded one at a time (but preferably not between versions that are too far apart) so there is server-side compatibility between minor version differences.
 =||= @qiangdavidliu thanks for pointing this out. Just to clarify things a little further: we are talking `[major].[minor].[patch]` (as in [semver](http://semver.org/)), right? So client-server protocol has been backward-compatible for the whole `1.x` releases? Therefore `1.1.147` clients (currently the latest used by spring-cloud-netflix) should be compatible with the currently latest server (that is `1.3.7`), correct?
 =||= @sfussenegger yes, we use semantic versioning for eureka. Id like to say we've been trying out best to keep complete protocol compatibility for the 1.x series of releases, though to be honest I haven't really validated some of the truly early versions (say from 3+ years ago). I can however confirm that 1.1.147 is compatible with server version 1.3.7 (we have instances of 1.1.147 running with our current server deployments of 1.3.7).

One caveat is that we don't package internally using spring-cloud-netflix, so I can't verify any compatibility requirements w.r.t. the spring wrappings.
 =||= In Brixton snapshots spring-cloud-netflix has upgraded to 1.3.7.
 =||= Thanks for the update @spencergibb .
@sfussenegger I'm going to close this issue for now. Please feel free to re-open if you have further questions.
 =||= So spring-cloud-netflix Brixton RC1 is now using Eureka 1.4.4 and I am seeing some issues with connecting to the 1.1.x-based Eureka server (from a previous spring-cloud-netflix version)  we currently use. Is this supposed to be compatible?
 =||= What issues? It may be a spring Cloud issue, not eureka.
 =||= Well. That was why I started asking in https://github.com/spring-cloud/spring-cloud-netflix/issues/953 . Since I am getting issues very similar to that.

Basically the service registers fine. But updates fail with exceptions like this:

```
2016-04-13 15:06:13.289 ERROR 46782 --- [tbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error

javax.ws.rs.WebApplicationException: null
    at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.4.4.jar:1.4.4]
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
    at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) ~[eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:823) [eureka-client-1.4.4.jar:1.4.4]
    at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379) [eureka-client-1.4.4.jar:1.4.4]
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_73]
    at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_73]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_73]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_73]
    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_73]
```
 =||= @kristofferpeterhansel it's possible you are running into an eureka incompatibility also. We keep a much closer eye on (earlier) client, (later) server compatibility than the reverse (looks like you are trying to run a later client client 1.4.4 with an earlier server 1.1.x?), and typically upgrade the server much more aggressively than the client versions.

What exact server version are you running with?
 =||= @qiangdavidliu You are correct. It is exactly the scenario you describe. We run a spring-cloud-netflix 1.0.1-based Eureka server. Making it 1.1.147.

I suppose there is technically no reason why we couldn't upgrade it - since it is only a Eureka server and have no other dependencies. But it is a bit of a problem if we have to kill all our Eureka instances at the same time to do it. And I suspect they would have the same problem and can't replicate data between an old and a new instance?
 =||= @kristofferpeterhansel how big of a cluster do you run? You _should_ be able to upgrade the nodes one by one ... but given that the version 1.1.147 is now over a year old, it's ""possible"" an incompatibility exist. What happens if you just upgrade one of the nodes to the latest server build? Does it work for you?
 =||= @qiangdavidliu Currently we run just two instances in each of our environments. There is no reason why I couldn't try it out in our test environment and see what happens. So I suppose I'll try that out when I

I realise it is an old version. But since we are using the version that comes with Spring Cloud Netflix. That is sort of imposed on us by that. But I guess that is mainly a problem with that project not getting all that frequent updates. And a good reason to reconsider why we are using the Eureka server wrapped in Spring Boot.
 =||= @kristofferpeterhansel we ended up using ""plain"" eureka server for the same reason. the spring-cloud version really doesn't add anything other than a nice launcher inside IDEs. Eureka documentation is scarce already and the spring-cloud version really doesn't help. 

It's pretty much what Samsung does to Android. Changes are mostly a matter of taste, come with their own issues and you wait forever for updates ;)
 =||= Closing this issue as the discussion seem to have to come to some conclusion.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
736Update to archaius2 2.0.0-rc.36elandau01/20/16, 12:56:01 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #546](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/546/) SUCCESS
This pull request looks good
 =||= "Update to archaius2 2.0.0-rc.36elandau01/20/16, 12:56:01 AMNaNNaNelandau01/20/16, 12:46:13 AMUpdate to archaius2 2.0.0-rc.361
737Add a feature to tell the client which IP address to register in case of multiple IPsMichael Rumpfmrumpf04/13/16, 12:26:42 AM"My office notebook uses a VPN/PPP connection into the corporate LAN for any kind of internet access.
My home LAN is using the network 192.168.0.1/255.255.255.0. The VPN client cuts any route into the 192.168... network and allows only connections into the PPP network (10.177.196.145/255.255.255.255), created by the VPN client.
The Eureka client, when I set the eureka.instance.preferIpAddress to true, registers with for example 192.168.0.125. This IP cannot be reached due to the restrictive VPN client, cutting all routes, except for the corporate PPP network.

There is a discussion on stackoverflow covering the topic:
http://stackoverflow.com/questions/9481865/getting-the-ip-address-of-the-current-machine-using-java

Making this work is an important developer feature. With the current implementation Eureka cannot be used for development in a corporate environment via a VPN (home office).""I just saw that there is an algorithm to prefer IPs from NICs whose name ends with a ""0"".
https://github.com/Netflix/eureka/blob/de24b9349fe579dba687f069f2bf495c8fe97c3f/eureka-client/src/main/java/com/netflix/discovery/util/SystemUtil.java

When I run the code with some System.out.println() statements I get the following output on my Windows 7 machine:

```
nicName=lo
   ip: 127.0.0.1
   ip: 0:0:0:0:0:0:0:1
nicName=net0
nicName=net1
nicName=net2
nicName=ppp0
nicName=eth0
nicName=eth1
nicName=eth2
nicName=ppp1
nicName=net3
nicName=eth3
   ip: 192.168.0.125
   ip: fe80:0:0:0:f427:8c69:7f63:a33c%eth3
nicName=net4
nicName=eth4
nicName=net5
nicName=wlan0
   ip: fe80:0:0:0:5181:a1a4:46f2:3fbc%wlan0
nicName=eth5
   ip: fe80:0:0:0:ed7c:5cca:a408:9f9e%eth5
nicName=net6
nicName=wlan1
nicName=net7
   ip: fe80:0:0:0:0:5efe:a9fe:5f96%net7
nicName=eth6
nicName=net8
nicName=net9
nicName=eth7
   ip: 169.254.95.150
   ip: fe80:0:0:0:d999:4068:11a7:5f96%eth7
nicName=net10
   ip: fe80:0:0:0:0:5efe:ab1:c491%net10
nicName=net11
nicName=net12
nicName=eth8
nicName=eth9
nicName=eth10
nicName=eth11
nicName=eth12
nicName=wlan2
nicName=wlan3
nicName=eth13
nicName=eth14
nicName=eth15
nicName=eth16
nicName=wlan4
nicName=eth17
nicName=eth18
nicName=eth19
nicName=eth20
nicName=eth21
nicName=eth22
nicName=eth23
nicName=wlan5
nicName=eth24
nicName=wlan6
nicName=wlan7
nicName=ppp2
Found IP=fe80:0:0:0:0:5efe:ab1:c491%net10
   ip: 10.177.196.145
```

The code could be adapted to set the preferred NIC name instead of the default ""eth0"":

```
eureka.instance.preferredNic=net10 or ppp2
```

My ipconfig output (truncated) looks like this:

```
Windows IP Configuration

PPP adapter Global Remote:

   Connection-specific DNS Suffix  . :
   IPv4 Address. . . . . . . . . . . : 10.177.196.145
   Subnet Mask . . . . . . . . . . . : 255.255.255.255
   Default Gateway . . . . . . . . . : 0.0.0.0

Ethernet adapter Local Area Connection:

   Connection-specific DNS Suffix  . : lan
   Link-local IPv6 Address . . . . . : fe80::f427:8c69:7f63:a33c%11
   IPv4 Address. . . . . . . . . . . : 192.168.0.125
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : 192.168.0.5
```

Forcing the host address to ""localhost/127.0.0.1"" would also be a good option for local development:

```
eureka.instance.forceHostAddress=127.0.0.1
```
 =||= Thanks @mrumpf . We'll take a look at this.
 =||= The Spring Cloud Team claims to have this already fixed: https://github.com/spring-cloud/spring-cloud-netflix/issues/788
 =||= There is such function, see http://projects.spring.io/spring-cloud/spring-cloud.html#ignore-network-interfaces 
 =||= You need a recent brixton version for it BTW.

Then you can ignore all unwanded interfaces by:

```
spring:
  cloud:
    inetutils:
      ignoredInterfaces:
        - tun.*

```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
738How can i use Feign connect eureka?DreampieDreampie02/03/16, 04:53:49 PMHow can i use Feign connect eureka and load balance？"Please, check this with feign project maintainers (https://github.com/Netflix/feign).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
739Fix for issue #702 (handle charset provided in Content-Type header)tbak02/05/16, 11:51:43 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #547](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/547/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #548](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/548/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #550](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/550/) SUCCESS
This pull request looks good
 =||= ship it
 =||= "Fix for issue #702 (handle charset provided in Content-Type header)tbak02/05/16, 11:51:43 PMNaNNaNTomasz Bak02/05/16, 09:48:53 PM"Use XStream instead of Jackson for XML encoding to avoid CLASSPATH issues
as jackson-dataformat-xml is a provided dependency
We will get rid of XStream when doing bigger rewrite of eureka-client."1
740Disable EIP binding calls based on configSalman Malikmaliksalman05/27/16, 08:32:23 PM"For our needs, we would like to run a eureka cluster in an AWS VPC. We would rely on DNS TXT records for the eureka servers and clients to discover each other. Furthermore, we would be running the eureka servers and all their client instances in VPC private subnets. Assigning EIPs to the eureka servers in this scenario makes no sense. 

Currently, there is no way of letting `com.netflix.eureka.EurekaBootStrap` know not to worry about EIPs. We tried playing with properties exposed by `com.netflix.eureka.EurekaServerConfig` - but they are not enough. Specifically, we tried to set the `eIPBindRebindRetries` to 0 and `eIPBindingRetryIntervalMs` to really large value (like Interger.MAX_VALUE). With these settings the `com.netflix.eureka.util.EIPManager` can be held at bay for about 24 days - it will then try to do its thing again. 

If we introduce a new property (like `disableEIPBinds`) in `com.netflix.eureka.EurekaServerConfig` and change the rest of code accordingly, we can easily circumvent the EIP binding altogether. We can make the properties default value to be `false` so it is backwards compatible. I am willing to submit a PR if this approach is appropriate.""Hi @maliksalman thanks for the issue. For different deployment environments, we are aiming for a more custom strategy based on the AwsBinder (https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/AwsBinder.java) interface and better DI support for the server (there are some work-in-progress code in the eureka-server-karyon3 package). The idea would be to be able to custom bind different components of eureka servers as needs arise. So in your case, you can bind your own (NoOp or specialised) AwsBinder to suit your use cases, whereas the default that works for us is the EIPBinder.

We are hoping to have this complete in the short term.
 =||= That must be new. I was working with spring-cloud-netflix-core 1.0.1 which includes eureka-client 1.1.147. I will look into this.

@qiangdavidliu, thanks for the pointer.
 =||= The next version of spring-cloud-netfix uses the latest version of eureka.
 =||= Latest spring-cloud-netflix is on eureka 1.4.x, closing.
 =||= @spencergibb has this feature been introduced =||= @maliksalman is it possible for you to share repo link? I also need to implement same feature set into our eureka which runs in same zone on aws vpc without ASG/DNS based peerawareness. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7411.x Removing old client transport in favour of the (no longer) experimental transportDavid Liuqiangdavidliu02/06/16, 03:19:49 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #549](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/549/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #551](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/551/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #552](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/552/) SUCCESS
This pull request looks good
 =||= "1.x Removing old client transport in favour of the (no longer) experimental transportDavid Liuqiangdavidliu02/06/16, 03:19:49 AMNaNNaNDavid Liu02/06/16, 12:27:51 AMmove transport factory into jersey specific package1
7421.x Fix async resolver to use daemon threadsDavid Liuqiangdavidliu02/07/16, 12:03:10 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #553](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/553/) SUCCESS
This pull request looks good
 =||= "1.x Fix async resolver to use daemon threadsDavid Liuqiangdavidliu02/07/16, 12:03:10 AMNaNNaNDavid Liu02/06/16, 11:33:10 PMFix async resolver to use daemon threads1
743Revert fix for issue #702 due to external dependencies on DiscoveryJerseyProvidertbak02/08/16, 06:27:49 PM"Some clients used this provider for non-eureka data structures, and this change
is breaking them. We need to better understand those use cases.""[NetflixOSS » eureka » eureka-pull-requests #554](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/554/) FAILURE
Looks like there's a problem with this pull request
 =||= "Revert fix for issue #702 due to external dependencies on DiscoveryJerseyProvidertbak02/08/16, 06:27:49 PM"Some clients used this provider for non-eureka data structures, and this change
is breaking them. We need to better understand those use cases."NaNTomasz Bak02/08/16, 06:20:20 PM"Revert fix for issue #702 due to external dependencies on DiscoveryJerseyProvider

Some clients used this provider for non-eureka data structures, and this change
is breaking them. We need to better understand those use cases."1
744Fix for issue #702 (handle charset provided in Content-Type header)tbak02/17/16, 10:36:58 PM"This PR (compared to the previouse, undone one #739) checks for entity
types and is applied only to eureka specific data structures.""[NetflixOSS » eureka » eureka-pull-requests #555](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/555/) SUCCESS
This pull request looks good
 =||= "Fix for issue #702 (handle charset provided in Content-Type header)tbak02/17/16, 10:36:58 PM"This PR (compared to the previouse, undone one #739) checks for entity
types and is applied only to eureka specific data structures."NaNTomasz Bak02/08/16, 07:27:46 PM"Fix for issue #702 (handle charset provided in Content-Type header)
This PR (compared to the previouse, undone one #739) checks for entity
types and is applied only to eureka specific data structures."1
7451.x Add composite strategy bootstrap resolver David Liuqiangdavidliu02/15/16, 08:48:14 PM"Two features for multi-account, multi vpc type support:
- an option for (all) resolvers to use hostnames or ipAddresses for resolution
- an option to bootstrap with a composite strategy, where the bootstrap resolver prefers to load data from local registry, else attempts to make a remote get vips call for write servers. The remote call will make a dns/config look up for target hosts.""[NetflixOSS » eureka » eureka-pull-requests #556](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/556/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #557](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/557/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #558](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/558/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #559](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/559/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #561](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/561/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #563](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/563/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #564](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/564/) SUCCESS
This pull request looks good
 =||= Looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #565](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/565/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #566](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/566/) SUCCESS
This pull request looks good
 =||= "1.x Add composite strategy bootstrap resolver David Liuqiangdavidliu02/15/16, 08:48:14 PM"Two features for multi-account, multi vpc type support:
- an option for (all) resolvers to use hostnames or ipAddresses for resolution
- an option to bootstrap with a composite strategy, where the bootstrap resolver prefers to load data from local registry, else attempts to make a remote get vips call for write servers. The remote call will make a dns/config look up for target hosts."NaNDavid Liu02/15/16, 08:40:59 PMtuning test timing1
746Move back to java7 compatibility.Spencer Gibbspencergibb02/15/16, 07:00:58 PM"Spring Cloud Netflix is still java7 compatible.

When using java7 to build, the following error occurs because servo is java8 only.

java.lang.UnsupportedClassVersionError: com/netflix/servo/monitor/Monitors
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:126)
    at com.netflix.discovery.BackUpRegistryTest.setUp(BackUpRegistryTest.java:71)

Spring Cloud Netflix still uses the java7 servo.

Building with java8 and targeting java7 still works and maintains the required compatibility.

@twicksell ""Is there anything I need to do to make sure it's built with java8?
 =||= [NetflixOSS » eureka » eureka-pull-requests #562](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/562/) SUCCESS
This pull request looks good
 =||= This was set in 78677c43800e715a3e861536ba84e5ff82510090 by @qiangdavidliu 
 =||= @spencergibb looks good, I'll merge this in. Will spring cloud netflix be moving to java8 servo soon?
 =||= @qiangdavidliu spring Cloud will start moving to java 8 with spring 5 and boot 2. Spring 5 is due next year, milestones starting this year. We would be OK staying on an the 1.3.x line if you move to java 8 in 1.4.x
 =||= Great, thanks for letting me know. There is no great need to enforce java8 for now, so we can try to make sure we can build against java7 unless anything comes up.
 =||= "Move back to java7 compatibility.Spencer Gibbspencergibb02/15/16, 07:00:58 PM"Spring Cloud Netflix is still java7 compatible.

When using java7 to build, the following error occurs because servo is java8 only.

java.lang.UnsupportedClassVersionError: com/netflix/servo/monitor/Monitors
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:126)
    at com.netflix.discovery.BackUpRegistryTest.setUp(BackUpRegistryTest.java:71)

Spring Cloud Netflix still uses the java7 servo.

Building with java8 and targeting java7 still works and maintains the required compatibility.

@twicksell "NaNSpencer Gibb02/12/16, 05:01:41 PM"Move back to java7 compatibility.

Spring Cloud Netflix is still java7 compatible.

When using java7 to build, the following error occurs because servo is java8 only.

java.lang.UnsupportedClassVersionError: com/netflix/servo/monitor/Monitors
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:126)
	at com.netflix.discovery.BackUpRegistryTest.setUp(BackUpRegistryTest.java:71)

Spring Cloud Netflix still uses the java7 servo.

Building with java8 and targeting java7 still works and maintains the required compatibility."1
7471.x updating AmazonInfo's refresh policy to be more lenientDavid Liuqiangdavidliu02/16/16, 12:12:20 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #567](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/567/) SUCCESS
This pull request looks good
 =||= "1.x updating AmazonInfo's refresh policy to be more lenientDavid Liuqiangdavidliu02/16/16, 12:12:20 AMNaNNaNDavid Liu02/15/16, 11:43:34 PMchange log level1
748Could not determine if the replica is available exceptiondrax6803/23/16, 05:24:11 PM"Hi, I've noticed no active replicas on status page for eureka cluster consisting of 2 eureka servers. We use route53-based txt dns setup, both servers in different az.
All running replicas in _unavailable-replicas_ list, though logs contains replication activity.
- What effect does it have for eureka cluster?
- Can it cause situations when cluster losts overriden registry data when new servers added?
  Any help in finding reasons of such behaviour appreciated.
  Currently we use eureka 1.1.151
  Exceptions when new server added to eureka cluster:

```
Could not determine if the replica is available 
! java.lang.NullPointerException: null
! at com.netflix.eureka.resources.StatusResource.isReplicaAvailable(StatusResource.java:89)
! at com.netflix.eureka.resources.StatusResource.getStatusInfo(StatusResource.java:69)
! at sun.reflect.GeneratedMethodAccessor136.invoke(Unknown Source)
! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
! at java.lang.reflect.Method.invoke(Method.java:497)
! at freemarker.ext.beans.BeansWrapper.invokeMethod(BeansWrapper.java:912)
! at freemarker.ext.beans.SimpleMethodModel.exec(SimpleMethodModel.java:107)
! at freemarker.core.MethodCall._eval(MethodCall.java:98)
! at freemarker.core.Expression.eval(Expression.java:111)
! at freemarker.core.Assignment.accept(Assignment.java:106)
! at freemarker.core.Environment.visit(Environment.java:265)
! at freemarker.core.MixedContent.accept(MixedContent.java:93)
! at freemarker.core.Environment.visit(Environment.java:265)
! at freemarker.core.Environment.process(Environment.java:243)
! at freemarker.template.Template.process(Template.java:277)
! at com.yammer.dropwizard.views.freemarker.FreemarkerViewRenderer.render(FreemarkerViewRenderer.java:56)
! at com.yammer.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:74)
! at com.yammer.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:22)
! at com.sun.jersey.spi.container.ContainerResponse.write(ContainerResponse.java:306)
! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1479)
! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1391)
! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1381)
! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:538)
! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:716)
! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
! at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
! at com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:66)
! at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:118)
! at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:113)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)
! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)
! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200)
! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
! at org.eclipse.jetty.server.Server.handle(Server.java:368)
! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)
! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)
! at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)
! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)
! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)
! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)
! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:298)
! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
! at java.lang.Thread.run(Thread.java:745)
```""Hi @drax68 eureka 1.1.51 is over 3 years old, and significant changes have gone into eureka since. I'm not sure if it will be easy to figure out what issue you might be running into given the age of the version. Are you able to upgrade to a more recent release?
 =||= @qiangdavidliu Correction, we currently use 1.1.151 version
 =||= Please advise, which version (1.2, 1.3) should we use to fix mentioned issue.
 =||= Minor versions of servers should still be compatible. We are running with 1.3.8 servers as of this moment.
 =||= So, @qiangdavidliu is this actually a bug or something? Can you explain please more about the issue and its impact to Eureka availability, reliability etc.?

Also, this issue seems that it is server-related only. Can we update only the server version and keep 1.1.151 for the clients?
 =||= @pparth from looking at your error log and comparing against source code, it looks like the status result you are seeing is due to an NPE in your StatusResource itself, not necessarily due to any actual system issues. Given that you are seeing replication logs, it's likely your servers are still connected. One way to check is to try to make a /v2/apps/<your discovery server app name> call to see what the registry data looks like.

As an aside regarding the NPE, are you using the provided war to deploy your server or customizing it? Using the provided artifacts there shouldn't be any NPEs.
 =||= Indeed, this has to do with the StatusResource and we do have a customised Eureka Service and do not use the original war. We were just wandering whether this error is not only about status and has a deeper root cause as we  have a replication issue. @drax68  please provide more info about this.
 =||= @qiangdavidliu we have reproducible test case, where changes in eureka cluster contents (addition/removal of eureka servers to/from txt dns records) causes loss of overriden data in registry on all eureka servers (overriden statuses, custom metadata). Is this something known, or will require separate issue to investigate?
 =||= @drax68 that is a known issue. status overrides for eureka at an instance level are scoped for the lifetime of a registration. So for example when you remove a server, a previously registering client to that server (which was overridden) will switch registration to a different server, and reset the override. We have explored a few different ways of dealing with internally but it has not come up as a priority. Typically internally we set overrides at an (EC2) ASG level, and that is guarded by AwsAsgUtil.java.
 =||= @qiangdavidliu 
- Unfortunately, we think this issue raises its ugly head not only in a manual/administrative cluster upgrade but also in a standard failure pattern where a client cannot communicate with a server instance due to a network issue (e.g. for us, the ELB in front of the instance, croaked). This led all clients registered to this instance to switch to another server instance, which is what expected from the highly available Eureka setup we have in place. However, everything went south, as all our clients register themselves as STARTING and then we switch them to UP through the REST API, as part of a deployment workflow process we have in place. So, we ended up with ALL these clients switching back to STARTING and then all traffic stopped! There goes the highly available cluster! 
- At any case, we thought that the STARTING status was in place exactly to support this kind of workflow process. What are we doing wrong then? That we override/change the status externally through the REST API? If we allowed the instance to change its status on its own, from STARTING to UP, is everything going to work ok? We can do that if this solves the issue, however, this does not feel right as we pretend that the instance knows when it is ok to receive traffic when this is definitely an external, deployment-driven decision.
- Please provide then, what is the usefulness of having an override status in addition to the standard status. Why the REST API does not change the original status field? Where is the override concept used? 
- Can you explain more what is ""we set overrides at an (EC2) ASG level, and that is guarded by AwsAsgUtil.java""?
 =||= Hi @pparth 

Can I clarify that your (client) applications register with STARTING only, and only transition to UP status via an external trigger (the REST call from the deployment workflow process mentioned)?

We use discovery's statuses slightly differently internally. Internally, we tie discovery statuses (STARTING, UP, DOWN) with our application healthchecks, and the state transitions between these statuses are automatically governed by the applications. For example, an application will register with STARTING, and at some point in time (e.g. Guice container initialized, or some known async warm-up process has completed), the application will automatically transition it's own status to UP. The healthcheck is also tied in to this (eurekaClient.registerHealthCheckHandler()) and is used to move between UP and DOWN programmatically. All this can be achieved via usage of EurekaClient and ApplicationInfoManager.

The OUT_OF_SERVICE status is used as a special case override. Our deployment workflow has the ability to make PUT and DELETE rest calls to the eureka servers to set and remove OUT_OF_SERVICE override statuses (see https://github.com/Netflix/eureka/wiki/Eureka-REST-operations, I have updated the doc to reflect the DELETE option of removing overrides).

A slight clarification to my point earlier regarding instance-level overrides are scoped only for a registration lifecycle, if a client re-registration happens to a different eureka server (as is the case when the original target eureka server disappears, such as for re-deployment), this is not considered as a new registration lifecycle (as an explicit unregistration never happens), and as such overrides are preserved.

Regarding my comment on AwsAsgUtil, internally our most common form of overrides are applied at the (EC2) AutoScalingGroup level. We synchronized our ASG disables with eureka's OUT_OF_SERVICE status, and the logic for that is contained within AwsAsgUtil.
 =||= Got it.

Unfortunately, in our case, we maintain multiple Service types per machine in an ASG, so, we cannot link the ASG disables to a specific Service type Eureka status.

Regarding the status overrides, it seems that we are back to zero. According to you, the overrides should be preserved in our case. So, @drax68  please check again about our case and dig up more information about what exactly happened in our system.
 =||= Re-tested that case, it's reproducible:
Eureka server configuration

```
eureka.appinfo.replicate.interval = 15
eureka.client.refresh.interval = 15
eureka.client.registerWithEureka = true
eureka.datacenter = cloud
eureka.environment = env
eureka.eurekaServer.context = eureka/v2
eureka.eurekaServer.domainName = eureka.env.example.com
eureka.eurekaServer.port = 8010
eureka.lease.duration = 45
eureka.lease.renewalInterval = 15
eureka.name = eureka
eureka.peerEurekaStatusRefreshTimeIntervalMs = 15000
eureka.port = 8010
eureka.preferSameZone = false
eureka.region = us-west-1
eureka.remoteRegion.registryFetchIntervalInSeconds = 15
eureka.serviceEnabled = true
eureka.serviceUrl.us-west-1a = {{us-west-1a-eureka-instance}}/eureka/v2/
eureka.serviceUrl.us-west-1c = {{us-west-1c-eureka-instance}}/eureka/v2/
eureka.shouldUseDns = true
eureka.statusPageUrlPath = /eureka/status
eureka.us-west-1.availabilityZones = us-west-1a,us-west-1c
eureka.vipAddress = eureka.example.com
```

Eureka dns name txt.us-west-1.eureka.env.example.com resolves to TXT record
`""txt.us-west-1a.eureka.env.example.com"" ""txt.us-west-1c.eureka.env.example.com""`

txt.us-west-1a.eureka.env.example.com resolves to
`""elb1""`

txt.us-west-1c.eureka.env.example.com resolves to
`""elb2""`

Test case is:
1. Deploy new pair of eureka instances behind individual elb
2. Wait for initial sync (let's say existing eureka instances has <apps__hashcode>STARTING_17_UP_122_</apps__hashcode> and newly-created <apps__hashcode>UP_118_</apps__hashcode>)
3. Append new instances to az-specific txt records:
txt.us-west-1a.eureka.env.example.com resolves to
`""elb1"" ""elb3""`
txt.us-west-1c.eureka.env.example.com resolves to
`""elb2"" ""elb4""`
4. Logs contains:

```
Updating the serviceUrls as they seem to have changed from [elb1, elb2] to [elb1, elb2, elb3, elb4] 
Updating the replica nodes as they seem to have changed from [elb1, elb2] to [elb1, elb2, elb3, elb4] 
```

And after that many service entries expiring with:
`DS: Registry: expired lease for SERVICENAME - i-foobar`

Not all services expiring at that moment, only about 30% of registered services.
Other services registry data remain unchanged, and all overrides migrated to a new nodes.
As I understand, service completely de-registered on expiration.
What can be the source of this massive expiration on cluster contents changes?
 =||= @qiangdavidliu Can you take a look at our latest information regarding the issue please?
 =||= @pparth looking at your description, this could potentially be an issue due to the order of operation between bringing up the new servers, and adding their records to the txt record. When a new server comes up, it will do a one time sync with a recognized peer (in this case an existing server). However this is one time only, so by the time this peer becomes a live server (due to the addition of it to the master txt records), the data it contain may now exceed the expiration deadline, especially when clients switch to registering with it.

Can you try the following to see if it helps with your case:
1. Add one elb to the txt record first before bringing up the new server
2. Wait a little to make sure dns propagates
3. Bring up the new eureka server

Eureka clients and servers are able to handle ""missing"" servers in the cluster.
 =||= Thank you, @qiangdavidliu 
That sequence helped with unexpected registry data expiration.
 =||= @drax68 glad to hear that this resolves your issue.
 =||= i don't know english =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
749New EurekaEventListener APIelandau02/17/16, 02:16:08 AM"Introduce a new EurekaEventListener API for getting EurekaClient state change notification.  

This API is cleaner than forcing the Netflix EventBus on users of EurekaClient.""[NetflixOSS » eureka » eureka-pull-requests #568](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/568/) SUCCESS
This pull request looks good
 =||= This will be very nice! /cc @dsyer 
 =||= [NetflixOSS » eureka » eureka-pull-requests #569](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/569/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #570](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/570/) SUCCESS
This pull request looks good
 =||= "New EurekaEventListener APIelandau02/17/16, 02:16:08 AM"Introduce a new EurekaEventListener API for getting EurekaClient state change notification.  

This API is cleaner than forcing the Netflix EventBus on users of EurekaClient."NaNelandau02/17/16, 12:07:13 AMmore cleanup based on PR comments1
750HTTPS serviceUrls end up being HTTP in 1.4.1Will Tranwilliam-tran02/22/16, 08:16:53 PM"https://github.com/Netflix/eureka/blob/v1.4.1/eureka-client/src/main/java/com/netflix/discovery/shared/resolver/aws/ConfigClusterResolver.java#L79 Should probably be 

```
""https"".equalsIgnoreCase(serviceURI.getScheme()),
```""Fixed by PR #751. Thank you for spotting this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
751Use getScheme() to compare against https.Spencer Gibbspencergibb02/22/16, 08:47:01 PMfixes gh-750"[NetflixOSS » eureka » eureka-pull-requests #571](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/571/) SUCCESS
This pull request looks good
 =||= @spencergibb Thank you for the fix.
 =||= @tbak closed but not merged?
 =||= thanks!
 =||= Sorry, my mistake. It is merged now.

On Mon, Feb 22, 2016 at 12:25 PM, Spencer Gibb notifications@github.com
wrote:

> @tbak https://github.com/tbak closed but not merged?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/pull/751#issuecomment-187368775.
 =||= [NetflixOSS » eureka » eureka-pull-requests #572](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/572/) SUCCESS
This pull request looks good
 =||= NP @tbak, we appreciate the work and super fast turn around!
 =||= "Use getScheme() to compare against https.Spencer Gibbspencergibb02/22/16, 08:47:01 PMfixes gh-750NaNSpencer Gibb02/22/16, 07:27:17 PM"Use getScheme() to compare against https.

fixes gh-750"1
752Only append port to serviceUrl if port >= 0Spencer Gibbspencergibb02/23/16, 11:27:45 PM"Fixes a problem communicating with an eureka server that is running on port 80 or 443 (such as the case in cloud foundry). serviceUrl looked like this http://eurekahost:-1

I can confirm this works on a local build.

See https://github.com/spring-cloud/spring-cloud-netflix/issues/840 for the original issue.""FYI @tbak
 =||= [NetflixOSS » eureka » eureka-pull-requests #573](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/573/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #574](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/574/) SUCCESS
This pull request looks good
 =||= Thanks!
 =||= @tbak thanks for the quick merge! Any idea on a release date?
 =||= @spencergibb It is done.
 =||= Sweet! @tbak you've been super helpful.
 =||= "Only append port to serviceUrl if port >= 0Spencer Gibbspencergibb02/23/16, 11:27:45 PM"Fixes a problem communicating with an eureka server that is running on port 80 or 443 (such as the case in cloud foundry). serviceUrl looked like this http://eurekahost:-1

I can confirm this works on a local build.

See https://github.com/spring-cloud/spring-cloud-netflix/issues/840 for the original issue."NaNSpencer Gibb02/23/16, 08:18:59 PM"Only append port to serviceUrl if port >= 0

Fixes a problem communicating with an eureka server that is running on port 80 or 443 (such as the case in cloud foundry). serviceUrl looked like this http://eurekahost:-1

I can confirm this works on a local build."1
753PeerAwareInstanceRegistryImpl.syncUp blocks unecessarilyWill Tranwilliam-tran02/24/16, 11:42:01 PM"https://github.com/Netflix/eureka/blob/f2d9dbd886c2644d07ed5de6451c142a995af225/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L206

If its the last (or only) iteration of the loop, there's no need to sleep, because you won't be retrying again. To highlight the issue, if I wanted to implement a server that tries to fetch registry from peers once (with eureka.servier.registrySyncRetries=1), but in case their are no other peers alive, continue startup, we'd block for an additional 30 seconds before startup can complete. "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
754Sleep during syncUp only if necessaryWill Tranwilliam-tran02/24/16, 11:42:01 PMFixes #753"[NetflixOSS » eureka » eureka-pull-requests #575](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/575/) SUCCESS
This pull request looks good
 =||= Looks good. Thanks
 =||= "Sleep during syncUp only if necessaryWill Tranwilliam-tran02/24/16, 11:42:01 PMFixes #753NaNWill Tran02/24/16, 11:11:18 PM"Sleep during syncUp only if necessary

Fixes #753"1
755Eureka server securityKennedy Oliveirakennedyoliveira02/26/16, 07:00:59 PM"Hello everyone!

I used eureka in a private network and it's very fine, similar to AWS, but now i need to use it exposed to the internet and was thinking if there is some security like https and at least a basic auth to protect so other people if they found the server can't register to it.

Is there something? Because i can't use a firewall since the microservices will have dynamic ips.""Eureka does not provide any authentication mechanism, but it supports SSL.
To secure your deployment you might create private key/certificates for
both endpoints, and enable client side authentication. To do that you must
inject properly configured instance of EurekaJerseyClient (or build it
with EurekaJerseyClientBuilder). You can find those classes in
eureka-client package. There is unfortunately no documentation how to do
that.
If basic authentication is enough you can always configure it via servlet
container, and on the client side provide authentication credentials in
Eureka URLs (I have never tried that, so I am not 100% sure if this will
work).
/Tomasz

On Thu, Feb 25, 2016 at 5:54 PM, Kennedy Oliveira notifications@github.com
wrote:

> Hello everyone!
> 
> I used eureka in a private network and it's very fine, similar to AWS, but
> now i need to use it exposed to the internet and was thinking if there is
> some security like https and at least a basic auth to protect so other
> people if they found the server can't register to it.
> 
> Is there something? Because i can't use a firewall since the microservices
> will have dynamic ips.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/755.
 =||= @tbak basic auto used to work (version < 1.3.xish). Something changed with the use of `*Endpoint` classes. https://github.com/spring-cloud/spring-cloud-netflix/commit/ca81f5671a029fe81d3fe88991d2abf782648310 is how we solved it.
 =||= @spencergibb Good to know. We will fix it. I have created a separate issue to track it (https://github.com/Netflix/eureka/issues/756).
 =||= @tbak thanks man!
 =||= Thank you everyone for the feedback, i'll wait a solution for #756, and while it doesn't ready i'm gonna try spring cloud netflix.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
756Restore HTTP authentication support in eureka clienttbak03/17/16, 07:00:15 PMCheck https://github.com/Netflix/eureka/issues/755 for the context."Hello! Any news on this topic?
 =||= Sorry, we have been busy recently. Would you like to make a PR for this?
 =||= I would love to, but don't know how can i make it, if you give me some hints, i don't understand the eureka server, well didn't looked at the source through.

Anyway, i'll try, but would be very helpful if you could give me some advices.

Thank you!
 =||= i use jks credential, i create it on jvm (build 1.8.0_151-b12),  in the server i use server.keystore,  in the client i use server.cer.
but error message:
Caused by: java.io.IOException: Invalid keystore format
	at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:658) ~[na:1.8.0_111]
	at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56) ~[na:1.8.0_111]
	at sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224) ~[na:1.8.0_111]
	at sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70) ~[na:1.8.0_111]

server.keystore:
keytool -validity 365 -genkey -v -alias server -keyalg RSA -keystore server.keystore -dname ""CN=127.0.0.1,OU=icesoft,O=icesoft,L=Haidian,ST=Beijing,c=cn"" -storepass 123456 -keypass 123456 
server.cer:
keytool -export -v -alias server -keystore server.keystore -storepass 123456 -rfc -file server.cer

```java
@Configuration
public class EurekaJerseyClientAdapter
{
    @Bean
    public EurekaJerseyClient eurekaJerseyClient()
    {
        EurekaJerseyClientImpl.EurekaJerseyClientBuilder builder = new
                EurekaJerseyClientImpl.EurekaJerseyClientBuilder()
                .withTrustStoreFile(""server.cer"",""123456"");
        return builder.build();
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
757set instance status using applicationInfoManager instead of directlyDavid Liuqiangdavidliu02/27/16, 12:13:17 AMNaN"Looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #576](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/576/) SUCCESS
This pull request looks good
 =||= "set instance status using applicationInfoManager instead of directlyDavid Liuqiangdavidliu02/27/16, 12:13:17 AMNaNNaNDavid Liu02/26/16, 11:53:08 PMset instance status using applicationInfoManager instead of directly1
758Self-preservation mode logged and announced by JMXDaniel Caballerodcaba03/28/16, 03:34:34 PMA new schedule is generated to announce if the instance is in self-preservation using servo"[NetflixOSS » eureka » eureka-pull-requests #577](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/577/) SUCCESS
This pull request looks good
 =||= Servo can do probing automatically. Please, check how it is implemented in DiscoveryClient:

``` java
    @com.netflix.servo.annotations.Monitor(name = METRIC_REGISTRATION_PREFIX + ""lastSuccessfulHeartbeatTimePeriod"",
            description = ""How much time has passed from last successful heartbeat"", type = DataSourceType.GAUGE)
    private long getLastSuccessfulHeartbeatTimePeriodInternal() {
        long delay = getLastSuccessfulHeartbeatTimePeriod();
        heartbeatStalenessMonitor.update(computeStalenessMonitorDelay(delay));
        return delay;
    }
```

Can you reimplement it using this approach?
 =||= Hi!

  I will assess this in the next days! The dedicated scheduler (plus polling) just for monitoring purposes looked a bit overkilling, but I thought may be the cleanest one until you presented this servo feature to me ;) . I will keep you posted,

```
 Daniel
```
 =||= [NetflixOSS » eureka » eureka-pull-requests #582](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/582/) FAILURE
Looks like there's a problem with this pull request
 =||= Hi,

  I've been taking a look, and I guess we have two options:
- discard this PR. I've been browsing the current metrics you are exporing, and bearing in mind the method ""isBelowRenewThreshold"" is also there, the additional metric this PR incorporates adds small value.
- keep the suggested approach. Thanks to the additional schedule/thread, eureka will be logging if the instance is in self-preservation mode, or not. This could be interesting staff for admins. If we let servo to prove this, I understand the schedule (and the log generation) will be driven by external JMX polls, that does not look ideal. One point that can be interesting, though, is to log only transitions, instead of every renewalSelfPreservationStatusUpdateIntervalMs.
  
  Thanks!
 =||= [NetflixOSS » eureka » eureka-pull-requests #583](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/583/) SUCCESS
This pull request looks good
 =||= @dcaba I propose to close this PR. As you have stated we have roughly equivalent metric already, and if we would like to implement this anyway, we should use servo annotations.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
759Adding an ondemand instanceInfo update trigger when new HealthCheckHa…David Liuqiangdavidliu03/01/16, 01:14:27 AM"…ndlers

are registered with EurekaClient""[NetflixOSS » eureka » eureka-pull-requests #578](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/578/) SUCCESS
This pull request looks good
 =||= [NetflixOSS » eureka » eureka-pull-requests #579](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/579/) SUCCESS
This pull request looks good
 =||= "Adding an ondemand instanceInfo update trigger when new HealthCheckHa…David Liuqiangdavidliu03/01/16, 01:14:27 AM"…ndlers

are registered with EurekaClient"NaNDavid Liu03/01/16, 12:54:31 AMAdd null check1
760Adding equals and hashcode to EurekaModuleDavid Liuqiangdavidliu03/02/16, 07:28:26 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #580](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/580/) SUCCESS
This pull request looks good
 =||= "Adding equals and hashcode to EurekaModuleDavid Liuqiangdavidliu03/02/16, 07:28:26 PMNaNNaNDavid Liu03/02/16, 07:18:44 PMAdding equals and hashcode to EurekaModule1
761Add additional logging for client transport resolution of eureka server infoDavid Liuqiangdavidliu03/03/16, 12:42:17 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #581](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/581/) SUCCESS
This pull request looks good
 =||= "Add additional logging for client transport resolution of eureka server infoDavid Liuqiangdavidliu03/03/16, 12:42:17 AMNaNNaNDavid Liu03/02/16, 11:25:09 PMAdd additional logging for client transport resolution of eureka server info.1
762java.lang.ClassNotFoundException: com.netflix.eureka.converters.EntityBodyConverterDeleted userghost03/30/16, 07:46:02 PM"I found ""@Serializer(""com.netflix.eureka.converters.EntityBodyConverter"")"" in ""com.netflix.eureka.util.StatusInfo"".

But  the ""EntityBodyConverter"" is in ""com.netflix.discovery.converters"",miss ""discovery""

I use eureka-core and eureka-client  version is 1.1.147""@neo-tian thanks for that. This was fixed in release 1.1.158.
 =||= Thank you,that is great

2016-03-31 3:46 GMT+08:00 David Liu notifications@github.com:

> Closed #762 https://github.com/Netflix/eureka/issues/762.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly or view it on GitHub
> https://github.com/Netflix/eureka/issues/762#event-608808695
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
763change deprecated governator-annotations to replacement (governator-api)David Liuqiangdavidliu03/11/16, 08:26:13 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #584](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/584/) SUCCESS
This pull request looks good
 =||= "change deprecated governator-annotations to replacement (governator-api)David Liuqiangdavidliu03/11/16, 08:26:13 PMNaNNaNDavid Liu03/11/16, 08:15:59 PMchange deprecated governator-annotations to replacement (governator-api)1
764How to dynamic set eureka client information [InstanceID, port]Kennedy Oliveirakennedyoliveira03/14/16, 06:59:47 PM"Hello!

I'm developing an app and i wanna register with eureka after starting the server, and the port will be a random one, that the server will first try to bind and if it success that port will be used, so since eureka-client uses file based configuration, there is someway to set the port and instanceID info without using a file?

Thank you""Eureka provides EurekaClientConfig configuration class, so you can always write your own implementation to set Eureka service urls with dynamic ports. If you need this for unit testing, please have a look at our DiscoveryClientResource junit resource that we use internally for testing (eureka-test-utils package). We are using ephemeral ports there.
 =||= Hey @tbak, thank you, i'll sure check your implementation and maybe try to create my own.

Quick question, i noticed when i start the injector the eureka-client begins the initialisation, there is a way to delay it till i call something to start it?
 =||= @kennedyoliveira Eureka is starting the initialization immediately in the constructor. To delay it, you would have to implement a wrapper.
 =||= @tbak, got it, thank you for clarifying my doubts!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
765Fix issue #756 (restore HTTP authentication support)tbak03/17/16, 06:59:51 PMNaN"@kennedyoliveira Here is the fix restoring basic authentication. Most of the code there is the test code, to make sure we do not miss this feature in the future. We do not use HTTP basic authentication as it is inherently insecure.
 =||= Thanks @tbak, we have folks that use it in conjunction with SSL.  Looks good!
 =||= [NetflixOSS » eureka » eureka-pull-requests #585](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/585/) SUCCESS
This pull request looks good
 =||= @tbak, thank you very much! I know it's not safe, but i was planing to use with SSL as @spencergibb, there is any alternative to this method for eureka?
 =||= There's some SSL certificate security, but other than that...
 =||= @kennedyoliveira We are using client side certificates, to authenticate both sides of the connection.
 =||= :+1: 
 =||= @tbak, sounds interesting, how is that?
 =||= @kennedyoliveira Sorry, I have to take it back about the client side certificate validation. There are however some ways to do that (via SSL system properties or creating custom EurekaJerseyClient).
 =||= @tbak, hmm i will search about that, i don't know much about SSL, just the basic, anyway, thank you for fixing it! If you have any source of documentation/books/ anything about this case and could tell me, i appreciate :D
 =||= "Fix issue #756 (restore HTTP authentication support)tbak03/17/16, 06:59:51 PMNaNNaNTomasz Bak03/15/16, 11:06:54 PMFix issue #756 (restore HTTP authentication support)1
766Eureka sample service periodically fails when client connectsLenalenadroid05/27/16, 08:40:52 PM"I am following the example from this repo.
Eureka server is running on localhost:8080.

As a next step I attempt to run the sample service, like this:

`./gradlew :eureka-examples:runExampleService`

Here is the output that I get:

```
$ ./gradlew :eureka-examples:runExampleService --stacktrace
    Inferred project: eureka, version: 1.4.6-SNAPSHOT
    Publication mavenNebula not found in project :.
    [buildinfo] Properties file path was not found! (Relevant only for builds running on a CI Server)
    Publication named 'mavenNebula' does not exist for project ':' in task ':artifactoryPublish'.
    None of the specified publications matched for project ':' - nothing to publish.
    :eureka-client:compileJava UP-TO-DATE
    :eureka-client:processResources UP-TO-DATE
    :eureka-client:classes UP-TO-DATE
    :eureka-client:writeManifestProperties UP-TO-DATE
    :eureka-client:jar
    :eureka-examples:compileJava
    warning: [options] bootstrap class path not set in conjunction with -source 1.7
    Note: Some input files use or override a deprecated API.
    Note: Recompile with -Xlint:deprecation for details.
    1 warning
    :eureka-examples:processResources UP-TO-DATE
    :eureka-examples:classes
    :eureka-examples:runExampleService
    [main] WARN com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
    [main] INFO com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
    [main] INFO com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@46ee7fe8
    [main] INFO com.netflix.config.util.ConfigurationUtils - Loaded properties file file:/Users/lenok/Documents/Programming/Github/eureka/eureka-examples/conf/sample-eureka-service.properties
    [main] WARN com.netflix.config.util.ConfigurationUtils - file:/Users/lenok/Documents/Programming/Github/eureka/eureka-examples/conf/sample-eureka-service.properties is already loaded
    [main] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
    [main] INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
    [main] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
    [main] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
    [main] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
    [main] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
    [main] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
    [main] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
    [main] INFO com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
    Registering service to eureka with STARTING status
    Simulating service initialization by sleeping for 2 seconds...
    Done sleeping, now changing status to UP
    [main] INFO com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1458260744041, current=UP, previous=STARTING]
    Waiting ... verifying service registration with eureka ...
    [DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_SAMPLEREGISTERINGSERVICE/Alenas-MacBook-Pro.local: registering service...
    [DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_SAMPLEREGISTERINGSERVICE/Alenas-MacBook-Pro.local - registration status: 204
    Waiting ... verifying service registration with eureka ...
    Waiting ... verifying service registration with eureka ...
    Service started and ready to process requests..
    > Building 88% > :eureka-examples:runExampleService
```

After I start the client, like this:

```
$ ./gradlew :eureka-examples:runExampleClient
    Inferred project: eureka, version: 1.4.6-SNAPSHOT
    Publication mavenNebula not found in project :.
    [buildinfo] Properties file path was not found! (Relevant only for builds running on a CI Server)
    Publication named 'mavenNebula' does not exist for project ':' in task ':artifactoryPublish'.
    None of the specified publications matched for project ':' - nothing to publish.
    :eureka-client:compileJava UP-TO-DATE
    :eureka-client:processResources UP-TO-DATE
    :eureka-client:classes UP-TO-DATE
    :eureka-client:writeManifestProperties UP-TO-DATE
    :eureka-client:jar
    :eureka-examples:compileJava
    warning: [options] bootstrap class path not set in conjunction with -source 1.7
    Note: Some input files use or override a deprecated API.
    Note: Recompile with -Xlint:deprecation for details.
    1 warning
    :eureka-examples:processResources UP-TO-DATE
    :eureka-examples:classes
    :eureka-examples:runExampleClient
    [main] WARN com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
    [main] INFO com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
    [main] INFO com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@46ee7fe8
    [main] INFO com.netflix.config.util.ConfigurationUtils - Loaded properties file file:/Users/lenok/Documents/Programming/Github/eureka/eureka-examples/conf/sample-eureka-client.properties
    [main] WARN com.netflix.config.util.ConfigurationUtils - file:/Users/lenok/Documents/Programming/Github/eureka/eureka-examples/conf/sample-eureka-client.properties is already loaded
    [main] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec JacksonJson
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
    [main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
    [main] INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
    [main] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
    [main] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
    [main] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
    [main] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
    [main] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
    [main] INFO com.netflix.discovery.DiscoveryClient - The response status is 200
    [main] INFO com.netflix.discovery.DiscoveryClient - Not registering with Eureka server per configuration
    Found an instance of example service to talk to from eureka: sampleservice.mydomain.net:8001
    healthCheckUrl: http://Alenas-MacBook-Pro.local:8001/healthcheck
    override: UNKNOWN
    Connected to server. Sending a sample request: FOO Thu Mar 17 17:11:33 PDT 2016
    Waiting for server response..
    Received response from server: BAR Thu Mar 17 17:11:33 PDT 2016
    Exiting the client. Demo over..

    BUILD SUCCESSFUL

    Total time: 9.497 secs
```

It basically connects to the server and waits for response, etc.

At the same time on the service terminal I see the following happening. Sometimes when I do these actions I see the successful response on the eureka service:

```
  Client got connected... processing request from the client
    Received a request from the example client: FOO Thu Mar 17 17:30:16 PDT 2016
    Sending the response to the client: BAR Thu Mar 17 17:30:16 PDT 2016
    Simulating service doing work by sleeping for 10 seconds...
    Removing registration from eureka
    [main] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_SAMPLEREGISTERINGSERVICE/Alenas-MacBook-Pro.local - deregister  status: 200
    Shutting down server. Demo over.

    BUILD SUCCESSFUL

    Total time: 4 mins 53.331 secs

```

And sometimes it gives errors, like here:

```
 Client got connected... processing request from the client
    Received a request from the example client: FOO Thu Mar 17 17:33:30 PDT 2016
    Sending the response to the client: BAR Thu Mar 17 17:33:30 PDT 2016
    Simulating service doing work by sleeping for 10 seconds...
    Removing registration from eureka
    Exception in thread ""main"" java.lang.NoClassDefFoundError: com/netflix/discovery/shared/transport/decorator/EurekaHttpClientDecorator$2
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71)
        at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:886)
        at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:869)
        at com.netflix.eureka.ExampleServiceBase.stop(ExampleServiceBase.java:89)
        at com.netflix.eureka.ExampleServiceBase.start(ExampleServiceBase.java:80)
        at com.netflix.eureka.ExampleEurekaService.main(ExampleEurekaService.java:45)
    Caused by: java.lang.ClassNotFoundException: com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 6 more
    :eureka-examples:runExampleService FAILED

    FAILURE: Build failed with an exception.

    * What went wrong:
    Execution failed for task ':eureka-examples:runExampleService'.
    > Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1

    * Try:
    Run with --info or --debug option to get more log output.

    * Exception is:
    org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':eureka-examples:runExampleService'.
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)
        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)
        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)
        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:42)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)
        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
        at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:305)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.executeTask(AbstractTaskPlanExecutor.java:79)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:63)
        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:51)
        at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:23)
        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:88)
        at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:29)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)
        at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)
        at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:68)
        at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)
        at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:55)
        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:149)
        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)
        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:80)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:33)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:24)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:36)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)
        at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:51)
        at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:171)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)
        at org.gradle.launcher.Main.doAction(Main.java:33)
        at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)
        at org.gradle.launcher.GradleMain.main(GradleMain.java:23)
        at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:30)
        at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:127)
        at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:56)
    Caused by: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1
        at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:365)
        at org.gradle.process.internal.DefaultJavaExecAction.execute(DefaultJavaExecAction.java:31)
        at org.gradle.api.tasks.JavaExec.exec(JavaExec.java:60)
        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:63)
        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:218)
        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:211)
        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:200)
        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:579)
        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:562)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)
        ... 47 more


    BUILD FAILED

    Total time: 1 mins 1.267 secs
```

What might be the problem?""@lenadroid are you running the client and server from the same git repo? Wondering if there may be a version mismatch somewhere as the server has a dependency on the client also.
 =||= @qiangdavidliu yeah, from the same. 
 =||= @lenadroid this is a pretty weird one. The class that's failing with ClassNotFound is there, and your successful executions also prove that. Are you able to see the same sort of problems with a more complicated set up than the simple examples provided?
 =||= eureka is pretty unstable and avoid to use it in serious applications.
 =||= @SphereUser I'm curious to the instability that you are seeing. We internally run eureka at very large scale and it has been stable for many years. One thing we are trying to update is documentation on configuration and operation of the servers, which currently on github is lacking some advanced info.
 =||= Closing this issue as the problem is specific (after more investigation) for the example when ran with gradle using the gradle applications plugin. Using the dist option and also in real operation the ClassNotFoundExceptions are not seen.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7671.x Add test showing issue with OUT_OF_SERVICE status registration.tbak04/07/16, 09:21:44 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #586](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/586/) SUCCESS
This pull request looks good
 =||= During internal discussion we decided to handle this at REST layer, by not allowing registrations with OUT_OF_SERVICE status set.
 =||= [NetflixOSS » eureka » eureka-pull-requests #590](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/590/) SUCCESS
This pull request looks good
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
768Source code build failureXuZhi Lusearover05/30/19, 11:09:53 PM"When I clone and build the source code, it appears an error that say nothing but a test case failed in 
EurekaClientServerRestIntegrationTest.java:244 , I have no idea what to do until I look into the source code and find the file, locate 244 line , i see it try to bind port 8080, and then i konw the port 8080 must be already in use, so i solved this problem.

Maybe in the unit test code, we should add some try catch code, let user know what it happens...""We should use ephemeral ports in tests. We do this now in most of the tests that create server sockets, but not everywhere. Thank you for spotting this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
769back rev servo to 0.10.1 to be java7 compatibleDavid Liuqiangdavidliu03/28/16, 09:48:11 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #587](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/587/) SUCCESS
This pull request looks good
 =||= nice :smiley: 
 =||= "back rev servo to 0.10.1 to be java7 compatibleDavid Liuqiangdavidliu03/28/16, 09:48:11 PMNaNNaNDavid Liu03/28/16, 09:31:45 PMback rev servo to 0.10.1 to be java7 compatible1
770Configuration links in wiki page is invalid.XuZhi Lusearover03/30/16, 07:51:58 PM"https://github.com/Netflix/eureka/wiki/Configuring-Eureka
In the Configuration section, the advance configuration links are invalid, could you update this information, thank you.""@searover we no longer host javadoc, but the interfaces themselves are documented. Have updated the links on the wikipage. Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
771Fix up DI server to use governatorDavid Liuqiangdavidliu03/29/16, 06:09:32 PMSince Karyon3 is no longer under deployment."[NetflixOSS » eureka » eureka-pull-requests #588](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/588/) SUCCESS
This pull request looks good
 =||= "Fix up DI server to use governatorDavid Liuqiangdavidliu03/29/16, 06:09:32 PMSince Karyon3 is no longer under deployment.NaNDavid Liu03/29/16, 05:57:27 PMadd readme1
772Limiting the number of instances of an applicationAndre Mirandaandreldm04/13/16, 05:29:42 PMI'd like to know if it's possible to limit the number of instances registered at a given time."@andreldm there are no limits (either on total number of instances, or number of instances per application) currently. Is this some new functionality you are looking at?
 =||= I was trying to limit the number of instance to only one at a time. Now I'm convinced this defeats the whole point of service discovery, so Eureka should not be ideal to my case.
 =||= @andreldm one of the tenants of eureka is that instances are abstracted away and application talk to each other over some fungible set of physical instances. If your use case require limiting it to just 1 instance, then yes eureka doesn't make too much sense.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7731.x EIPManager: if instance is not associated with one EIP, do not try to unbindLUONG Trong-Hieuhieurl04/11/16, 10:17:34 PM"Instead, throw exception
Reason: DescribeAddressRequest with null public ip returns list of all public address
If instance is not associated with one eip, Eureka will dissociate first ip on list which does not belong to the instance""Quick check using python awscli

> aws ec2 describe-addresses --public-ips | jq '.Addresses[0]'
> {
>   ""InstanceId"": ""i-xxxxx"",
>   ""PublicIp"": ""xxx.xxx.xxx.xxx"",
>   ""Domain"": ""standard""
> }
 =||= [NetflixOSS » eureka » eureka-pull-requests #589](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/589/) SUCCESS
This pull request looks good
 =||= @hieurl thanks for the pull. Looking at the change, unbindEIP() is currently really used at shutdown time, so a more optimized behaviour when unbindEIP() is called when no EIP is bound, is to perhaps log.info() and then just return from the function, instead of throwing an RuntimeException. What do you think?
 =||= @qiangdavidliu seem reasonable to me. I'm going to push a commit.
 =||= [NetflixOSS » eureka » eureka-pull-requests #592](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/592/) SUCCESS
This pull request looks good
 =||= @hieurl thanks for the contribution.
 =||= "1.x EIPManager: if instance is not associated with one EIP, do not try to unbindLUONG Trong-Hieuhieurl04/11/16, 10:17:34 PM"Instead, throw exception
Reason: DescribeAddressRequest with null public ip returns list of all public address
If instance is not associated with one eip, Eureka will dissociate first ip on list which does not belong to the instance"NaNhieurl04/09/16, 12:18:52 AM- log info instead of throwing exception when unbind eip for instance without eip bound1
774Check if transport is null in DiscoveryClient#unregistertbak04/07/16, 09:50:57 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #591](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/591/) SUCCESS
This pull request looks good
 =||= :+1: 
 =||= "Check if transport is null in DiscoveryClient#unregistertbak04/07/16, 09:50:57 PMNaNNaNTomasz Bak04/07/16, 09:19:21 PMCheck if transport is null in DiscoveryClient#unregister1
775404 in WikiSteve Wallstevewallcgi04/18/16, 06:17:35 AMA 404 is returned when trying to access http://netflix.github.io/eureka/javadoc/eureka-core/com/netflix/eureka/EurekaServerConfig.html from https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication"Hi @stevewallecs we are working on some updated documentation. Hold on.
 =||= Fixed the broken link, closing this issue for now. Will be adding some higher level docs for configuration both the client and server later.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
776Adding util classDavid Liuqiangdavidliu04/13/16, 05:27:10 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #593](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/593/) SUCCESS
This pull request looks good
 =||= "Adding util classDavid Liuqiangdavidliu04/13/16, 05:27:10 PMNaNNaNDavid Liu04/13/16, 12:14:43 AMMerge remote-tracking branch 'upstream/master'1
777"""Cannot execute request on any known server"" when i set up a Eureka cluster by skyDns"bspline04/18/16, 06:13:25 AM"I also post this question on ""https://groups.google.com/forum/#!topic/eureka_netflix/WV1Tfp1I5Mc""

Eureka version: 1.4.4

When i refer to ""https://github.com/Netflix/eureka/wiki/Configuring-Eureka-in-AWS-Cloud"", i want to set up a Eureka cluster by skyDns.

this is all the configuration of my eureka-client :

eureka.region=us-east-1

eureka.name=eureka

eureka.vipAddress=eureka.mydomain.net

eureka.port=8080

eureka.shouldUseDns=true

eureka.serviceUrl.default=http://localhost:8080/eureka/v2/

eureka.shouldOnDemandUpdateStatusChange=false
eureka.eurekaServer.domainName=bar.skydns.paas
eureka.eurekaServer.context=eureka/v2
eureka.eurekaServer.port=8080

In my skydns, i set TXT records,
the result are follows:

command:     dig txt.us-east-1.bar.skydns.paas txt
result:
                    ;; QUESTION SECTION:
                    ;txt.us-east-1.bar.skydns.paas. IN  TXT

```
                ;; ANSWER SECTION:
                txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1c.bar.skydns.paas""
                txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1d.bar.skydns.paas""
```

command:     dig txt.us-east-1c.bar.skydns.paas txt
result:  
                   ;; QUESTION SECTION:
                   ;t.us-east-1c.bar.skydns.paas.   IN  TXT

```
               ;; ANSWER SECTION:
               txt.us-east-1c.bar.skydns.paas.  3600 IN TXT ""http://10.120.180.235:8080/discovery/v2/""
```

i can get the response  of  ""dig txt.us-east-1d.bar.skydns.paas txt"" too.  the answer is :  txt.us-east-1d.bar.skydns.paas. 3600 IN TXT ""http://10.120.180.117:8080/discovery/v2/""

At last,when i startup the tomcat, there are some problems :

2016-04-16 11:43:36,565 ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient:83 [localhost-startStop-1] [execute] Request execution error
com.sun.jersey.api.client.ClientHandlerException: java.net.UnknownHostException: http: unknown error
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
        at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:194)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:441)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.UnknownHostException: http: unknown error
        at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
        at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)
        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)
        at java.net.InetAddress.getAllByName0(InetAddress.java:1276)
        at java.net.InetAddress.getAllByName(InetAddress.java:1192)
        at java.net.InetAddress.getAllByName(InetAddress.java:1126)
        at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
        at org.apache.http.impl.conn.DefaultClientConnectionOperator.resolveHostname(DefaultClientConnectionOperator.java:259)
        at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:159)
        at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
        at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:131)
        at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446)
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
        ... 41 more

2016-04-16 11:43:36,578 WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient:129 [localhost-startStop-1] [execute] Request execution failure
2016-04-16 11:43:36,580 ERROR com.netflix.discovery.DiscoveryClient:934 [localhost-startStop-1] [fetchRegistry] DiscoveryClient_EUREKA/SZV1000048497 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:441)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
2016-04-16 11:45:46,609 WARN  com.netflix.discovery.InstanceInfoReplicator:107 [DiscoveryClient-InstanceInfoReplicator-0] [run] There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
    at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
    at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
    at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:806)
    at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:103)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)

When i make a request to http://10.120.180.235:8080/eureka/ and  http://10.120.180.117:8080/eureka/
These are the responses:
Instances currently registered with Eureka
Application

AMIs

Availability Zones

Status

Application AMIs    Availability Zones  Status
No data available in table
General Info
Name    Value
environment test
num-of-cpus 4
total-avail-memory  553mb
current-memory-usage    234mb (42%)
server-uptime   00:03
registered-replicas http://http://10.120.180.235:8080/discovery/v2/:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://http://10.120.180.235:8080/discovery/v2/:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.235
status  UP

Instances currently registered with Eureka
Application

AMIs

Availability Zones

Status

Application AMIs    Availability Zones  Status
No data available in table
General Info
Name    Value
environment test
num-of-cpus 4
total-avail-memory  562mb
current-memory-usage    251mb (44%)
server-uptime   00:27
registered-replicas http://http://10.120.180.235:8080/discovery/v2/:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://http://10.120.180.235:8080/discovery/v2/:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.117
status  UP

The application of eureka is missing and when i register to 10.120.180.117 with a application named Hello ,i cant't find the Hello  in the both eureka servers.

Do i make some mistakes in the  configuration of eureka-client  or some others ?""Hi @bspline looking at the records, it looks like your configuration is expecting ""eureka/v2/..."", whereas the txt records are expecting it of the form ""discovery/v2/..."". There is a mistake in https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2 between the words eureka vs discovery that would have caused this. The page has been updated. Thanks.
 =||= I hava done what you said ,but it does not work.
The Error log almost is the same.It can only find one txtRecord.

2016-04-18 20:33:20,733 INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver:40 [localhost-startStop-1] [getClusterEndpoints] Resolving eureka endpoints via DNS
The txtRecord is : us-east-1d.bar.skydns.paas
The cnamesString is : [us-east-1d.bar.skydns.paas]
The rootClusterDNS is : txt.us-east-1.bar.skydns.paas
The zoneDomain is : us-east-1d.bar.skydns.paas
The txtRecord is : http://10.120.180.117:8080/eureka/v2/
The cnamesString is : [http://10.120.180.117:8080/eureka/v2/]
The txtRecord is : http://10.120.180.117:8080/eureka/v2/
The cnamesString is : [http://10.120.180.117:8080/eureka/v2/]
The zoneAddresses is : http://10.120.180.117:8080/eureka/v2/
2016-04-18 20:33:20,807 INFO  com.netflix.discovery.DiscoveryClient:920 [localhost-startStop-1] [fetchRegistry] Disable delta property : false
2016-04-18 20:33:20,807 INFO  com.netflix.discovery.DiscoveryClient:921 [localhost-startStop-1] [fetchRegistry] Single vip registry refresh property : null
2016-04-18 20:33:20,807 INFO  com.netflix.discovery.DiscoveryClient:922 [localhost-startStop-1] [fetchRegistry] Force full registry fetch : false
2016-04-18 20:33:20,807 INFO  com.netflix.discovery.DiscoveryClient:923 [localhost-startStop-1] [fetchRegistry] Application is null : false
2016-04-18 20:33:20,807 INFO  com.netflix.discovery.DiscoveryClient:924 [localhost-startStop-1] [fetchRegistry] Registered Applications size is zero : true
2016-04-18 20:33:20,808 INFO  com.netflix.discovery.DiscoveryClient:926 [localhost-startStop-1] [fetchRegistry] Application version is -1: true
2016-04-18 20:33:20,808 INFO  com.netflix.discovery.DiscoveryClient:1009 [localhost-startStop-1] [getAndStoreFullRegistry] Getting all instance registry info from the eureka server
2016-04-18 20:33:20,899 ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient:83 [localhost-startStop-1] [execute] Request execution error
com.sun.jersey.api.client.ClientHandlerException: java.net.UnknownHostException: http: unknown error
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
        at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:194)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:441)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.UnknownHostException: http: unknown error
        at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
        at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)
        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)
        at java.net.InetAddress.getAllByName0(InetAddress.java:1276)
        at java.net.InetAddress.getAllByName(InetAddress.java:1192)
        at java.net.InetAddress.getAllByName(InetAddress.java:1126)
        at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
 at org.apache.http.impl.conn.DefaultClientConnectionOperator.resolveHostname(DefaultClientConnectionOperator.java:259)
        at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:159)
        at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
        at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:131)
        at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446)
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
        ... 41 more
2016-04-18 20:33:20,902 WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient:129 [localhost-startStop-1] [execute] Request execution failure
2016-04-18 20:33:20,903 ERROR com.netflix.discovery.DiscoveryClient:934 [localhost-startStop-1] [fetchRegistry] DiscoveryClient_EUREKA/SZV1000048538 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:441)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
        at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
        at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
        at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
 =||= @fangzhining sorry about that, looks like when I fixed the documentation mistake on that page, I did not do it fully (update yet again). For the dns option, you only need the hostname in the records, and should not include ""http://"", the port, nor the ""eureka/v2"".
 =||= service-hi_1     | 2017-07-18 12:33:41.357 ERROR 1 --- [           main] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SERVICE-HI/18b4cd4a712a:service-hi:8763 - was unable to refresh its cache! status = Cannot execute request on any known server
service-hi_1     | 
service-hi_1     | com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
service-hi_1     | 	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013) [eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927) [eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:408) [eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:266) [eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:262) [eureka-client-1.6.1.jar!/:1.6.1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:60) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:225) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$6eaebe88.CGLIB$eurekaClient$0(<generated>) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$6eaebe88$$FastClassBySpringCGLIB$$fe359a98.invoke(<generated>) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$6eaebe88.eurekaClient(<generated>) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
service-hi_1     | 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
service-hi_1     | 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
service-hi_1     | 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
service-hi_1     | 	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:345) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:359) [spring-cloud-context-1.2.0.RC1.jar!/:1.2.0.RC1]
service-hi_1     | 	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:176) [spring-cloud-context-1.2.0.RC1.jar!/:1.2.0.RC1]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:340) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:133) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:122) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:56) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:37) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:73) [spring-cloud-netflix-eureka-client-1.3.0.RC1.jar!/:1.3.0.RC1]
service-hi_1     | 	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:175) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:348) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:151) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:114) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]
service-hi_1     | 	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]
service-hi_1     | 	at com.forezp.ServiceHiApplication.main(ServiceHiApplication.java:17) [classes!/:0.0.1-SNAPSHOT]
service-hi_1     | 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
service-hi_1     | 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
service-hi_1     | 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
service-hi_1     | 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
service-hi_1     | 	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [app.jar:0.0.1-SNAPSHOT]
service-hi_1     | 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [app.jar:0.0.1-SNAPSHOT]
service-hi_1     | 	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [app.jar:0.0.1-SNAPSHOT]
service-hi_1     | 	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [app.jar:0.0.1-SNAPSHOT]
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
778Unavailable-replicas when configuring Eureka cluster in private subnets Ervan Setiawanervansetiawan05/03/16, 03:41:08 PM"We are trying to configure a Eureka cluster in private subnets within a VPC. Our setup consists of two Eureka servers that span two availability zones.

Each Eureka server is assigned an Elastic Network Interface with a static private IP. 

Everything starts up, except that the Eureka servers don't seem to be aware of their peers.

Logs : 
2016-04-16 14:49:02,642 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:222 [Eureka-EIPBinder] [openForTraffic] Got 0 instances from neighboring DS node
2016-04-16 14:49:02,642 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:222 [Eureka-EIPBinder] [openForTraffic] Got 0 instances from neighboring DS node
2016-04-16 14:49:02,642 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:223 [Eureka-EIPBinder] [openForTraffic] Renew threshold is: 0

Eureka dashboard :

```
Name    Value
environment test
num-of-cpus 1
total-avail-memory  74mb
current-memory-usage    45mb (60%)
server-uptime   00:22
registered-replicas http://ec2-10-0-2-5.eu-central-1.compute.amazonaws.com:8080/eureka/v2/, http://ec2-10-0-1-5.eu-central-1.compute.amazonaws.com:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://ec2-10-0-2-5.eu-central-1.compute.amazonaws.com:8080/eureka/v2/,http://ec2-10-0-1-5.eu-central-1.compute.amazonaws.com:8080/eureka/v2/,
```""Hi @ervansetiawan , the eureka servers are themselves clients as well, and use eureka-client to register with the server cluster (non-deterministic which server to register with, though governed by the zonal preferences). Its possible to see no peers if these clients on the servers fail with their registration. Can you see if there are client registration failure logs on your servers? 
 =||= I don't see any client registration failures in the logs. The two Eureka instances are registered with UP status. 

```
2016-04-22 19:50:14,298 INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:266 [http-nio-8080-exec-10] [register] Registered instance EUREKA/i-b0019a0c with status UP (replication=true)
2016-04-22 19:50:16,852 WARN  com.netflix.eureka.registry.AbstractInstanceRegistry:353 [http-nio-8080-exec-1] [renew] DS: Registry: lease doesn't exist, registering resource: EUREKA - i-8371d13e
2016-04-22 19:50:16,852 WARN  com.netflix.eureka.resources.InstanceResource:116 [http-nio-8080-exec-1] [renewLease] Not Found (Renew): EUREKA - i-8371d13e
2016-04-22 19:50:17,366 INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:266 [http-nio-8080-exec-2] [register] Registered instance EUREKA/i-8371d13e with status UP (replication=true)
2016-04-22 19:50:23,787 WARN  com.netflix.appinfo.CloudInstanceConfig:183 [DiscoveryClient-InstanceInfoReplicator-0] [shouldUpdate] Newly resolved AmazonInfo contains less data than previous old:10 -> new:9, skipping an update cycle
2016-04-22 19:50:53,798 WARN  com.netflix.appinfo.CloudInstanceConfig:183 [DiscoveryClient-InstanceInfoReplicator-0] [shouldUpdate] Newly resolved AmazonInfo contains less data than previous old:10 -> new:9, skipping an update cycle
2016-04-22 19:51:13,796 INFO  com.netflix.discovery.DiscoveryClient:921 [DiscoveryClient-HeartbeatExecutor-0] [renew] DiscoveryClient_EUREKA/i-b0019a0c - Re-registering apps/EUREKA
2016-04-22 19:51:13,796 INFO  com.netflix.discovery.DiscoveryClient:862 [DiscoveryClient-HeartbeatExecutor-0] [register] DiscoveryClient_EUREKA/i-b0019a0c: registering service...
2016-04-22 19:51:13,802 WARN  com.netflix.discovery.DiscoveryClient:1250 [DiscoveryClient-CacheRefreshExecutor-0] [reconcileAndLogDifference] The Reconcile hashcodes do not match, client : UP_2_, server : UP_1_. Getting the full registry
2016-04-22 19:51:13,807 INFO  com.netflix.discovery.DiscoveryClient:881 [DiscoveryClient-HeartbeatExecutor-0] [register] DiscoveryClient_EUREKA/i-b0019a0c - registration status: 204
2016-04-22 19:51:13,810 WARN  com.netflix.discovery.DiscoveryClient:1288 [DiscoveryClient-CacheRefreshExecutor-0] [reconcileAndLogDifference] The reconcile string is
2016-04-22 19:51:13,811 WARN  com.netflix.discovery.DiscoveryClient:1296 [DiscoveryClient-CacheRefreshExecutor-0] [reconcileAndLogDifference] The Reconcile hashcodes after complete sync up, client : UP_1_, server : UP_1_.
2016-04-22 19:51:14,036 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:222 [Eureka-EIPBinder] [openForTraffic] Got 0 instances from neighboring DS node
2016-04-22 19:51:14,036 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:223 [Eureka-EIPBinder] [openForTraffic] Renew threshold is: 0
2016-04-22 19:51:14,036 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:231 [Eureka-EIPBinder] [openForTraffic] Priming AWS connections for all replicas..
2016-04-22 19:51:14,036 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:264 [Eureka-EIPBinder] [primeAwsReplicas] No peers needed to prime.
2016-04-22 19:51:14,037 INFO  com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl:234 [Eureka-EIPBinder] [openForTraffic] Changing status to UP
```

This is the registration information from one of the Eureka nodes.

```
  <instance>
      <instanceId>i-8371d13e</instanceId>
      <hostName>10.0.1.5</hostName>
      <app>EUREKA</app>
      <ipAddr>10.0.1.5</ipAddr>
      <status>UP</status>
      <overriddenstatus>UNKNOWN</overriddenstatus>
      <port enabled=""true"">8080</port>
      <securePort enabled=""false"">443</securePort>
      <countryId>1</countryId>
      <dataCenterInfo class=""com.netflix.appinfo.AmazonInfo"">
        <name>Amazon</name>
        <metadata>
          <accountId>xxxxxxxxxxxxx</accountId>
          <local-hostname>ip-10-0-1-5.eu-central-1.compute.internal</local-hostname>
          <public-hostname>10.0.1.5</public-hostname>
          <instance-id>i-8371d13e</instance-id>
          <local-ipv4>10.0.1.5</local-ipv4>
          <instance-type>t2.micro</instance-type>
          <vpc-id>vpc-7a035213</vpc-id>
          <ami-id>ami-bc5b48d0</ami-id>
          <mac>02:4a:4e:75:bf:f9</mac>
          <availability-zone>eu-central-1a</availability-zone>
        </metadata>
      </dataCenterInfo>
      <leaseInfo>
        <renewalIntervalInSecs>30</renewalIntervalInSecs>
        <durationInSecs>90</durationInSecs>
        <registrationTimestamp>1461354527294</registrationTimestamp>
        <lastRenewalTimestamp>1461354646800</lastRenewalTimestamp>
        <evictionTimestamp>0</evictionTimestamp>
        <serviceUpTimestamp>1461354527294</serviceUpTimestamp>
      </leaseInfo>
      <metadata class=""java.util.Collections$EmptyMap""/>
      <appGroupName>UNKNOWN</appGroupName>
      <homePageUrl>http://10.0.1.5:8080/</homePageUrl>
      <statusPageUrl>http://10.0.1.5:8080/Status</statusPageUrl>
      <healthCheckUrl>http://10.0.1.5:8080/healthcheck</healthCheckUrl>
      <vipAddress>eureka.mydomain.net</vipAddress>
      <isCoordinatingDiscoveryServer>true</isCoordinatingDiscoveryServer>
      <lastUpdatedTimestamp>1461354527294</lastUpdatedTimestamp>
      <lastDirtyTimestamp>1461353686823</lastDirtyTimestamp>
      <actionType>ADDED</actionType>
    </instance>
```

This is the Eureka dashboard 

```

DS Replicas: ip-10-0-1-5.eu-central-1.compute.internalip-10-0-2-5.eu-central-1.compute.internal
Instances currently registered with Eureka
Application AMIs    Availability Zones  Status
Application AMIs    Availability Zones  Status
EUREKA  ami-bc5b48d0 (2),   eu-central-1a (1), eu-central-1b (1),   UP (2) - i-b0019a0c, i-8371d13e,
General Info
Name    Value
environment test
num-of-cpus 1
total-avail-memory  80mb
current-memory-usage    46mb (57%)
server-uptime   00:19
registered-replicas http://ip-10-0-1-5.eu-central-1.compute.internal:8080/eureka/v2/, http://ip-10-0-2-5.eu-central-1.compute.internal:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://ip-10-0-1-5.eu-central-1.compute.internal:8080/eureka/v2/,http://ip-10-0-2-5.eu-central-1.compute.internal:8080/eureka/v2/,
Instance Info
Name    Value
public-ipv4 null
public-hostname 10.0.1.5
instance-id i-8371d13e
instance-type   t2.micro
ami-id  ami-bc5b48d0
ipAddr  10.0.1.5
status  UP
availability-zone   eu-central-1a
```

One thing that I also noticed is that I have two Eureka servers so I am expecting to only see one registered replica. As you can see in that dashboard, there are two registered replicas. Somehow the Eureka server considers itself as it's own replica. I did not see that behavior when I use EIPs in public subnets.
 =||= I am curious about setting up eureka in VPC with private IPs - could you share how you set it up?
 =||= @jelez eureka servers are not really designed to operate with floating IPs, the servers themselves need to have fixed IPs (e.g. EIPs in aws) to work well.
 =||= I finally got this to work internally. It appears that the root cause is the fact that com.netflix.eureka.util.StatusUtil.isReplicaAvailable is comparing the values of serviceUrl param with the hostName in the registry. 

Since I am running Eureka cluster in a private subnet, the hostName in the registry is the private IP address (i.e. 10.0.0.5). In my original configuration, I had set up the Eureka nodes to use private DNS name (ip-1-0-0-5.region.compute.internal) as the serviceUrl. They don't match up, thus, the unavailable replicas.

My fix is to simply use the private IP addresses as the serviceUrls of the Eureka nodes.
 =||= @jelez We are using Elastic Network Interface to provide static private IP addresses. 
 =||= @ervansetiawan  I am facing the same problem. I am not seeing any available replicas. This is my eureka client properties file. 


registered-replicas | 172.X.X.X, 172.X.X.X, 172.X.X.X
-- | --
available-replicas |  
unavailable-replicas | 172.X.X.X,172.X.X.X,172.X.X.X

I am not seeing the replicas and i found this error in the log file.

2017-08-17 02:59:32,503 ERROR com.netflix.discovery.DiscoveryClient:943 [DiscoveryClient-CacheRefreshExecutor-0] [fetchRegistry] DiscoveryClient_EUREKALATEST/i-08a03bc3538034239 - was unable to refresh its cache! status = There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty

Here are my eureka client properties and server properties file.
** cat eureka-client.properties
##Eureka Client configuration for Eureka Service

#Properties based configuration for eureka client. The properties specified here is mostly what the users
#need to change. All of these can be specified as a java system property with -D option (eg)-Deureka.region=us-east-1

#Region where eureka is deployed -For AWS specify one of the AWS regions, for other datacenters specify a arbitrary string
#indicating the region.This is normally specified as a -D option (eg) -Deureka.region=us-east-1
#eureka.region=us-east-1
eureka.region=${archaius.deployment.region}
eureka.us-east-1.availabilityZones=us-east-1b,us-east-1c,us-east-1d

#Name of the application to be identified by other services

eureka.name=eurekalatest
eureka.serviceUrl.us-east-1b=172...*
eureka.serviceUrl.us-east-1c=172....
eureka.serviceUrl.us-east-1d=172....

#Virtual host name by which the clients identifies this service
eureka.vipAddress=eureka.${aesd.archaius.deployment.domain}

#The port where the service will be identified and will be serving requests
eureka.port=8080

#For eureka clients running in eureka server, it needs to connect to servers in other zones
eureka.preferSameZone=false

#Change this if you want to use a DNS based lookup for determining other eureka servers. For example
#of specifying the DNS entries, check the eureka-client-test.properties, eureka-client-prod.properties
#eureka.shouldUseDns=true

#eureka.eurekaServer.domainName=${aesd.archaius.deployment.domain}

eureka.eurekaServer.context=eureka/v2

eureka.healthCheckUrl=http://${archaius.deployment.serverPrivIP}:8080/eureka/healthcheck

eureka.registration.enabled=false
**
 =||= @qiangdavidliu eureka supports DNS querying mode, so i think floating IPs are valid option: https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2#configuring-eips-using-dns =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
779update server build default props.David Liuqiangdavidliu04/18/16, 06:03:52 AMNaN"[NetflixOSS » eureka » eureka-pull-requests #594](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/594/) FAILURE
Looks like there's a problem with this pull request
 =||= [NetflixOSS » eureka » eureka-pull-requests #595](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/595/) SUCCESS
This pull request looks good
 =||= "update server build default props.David Liuqiangdavidliu04/18/16, 06:03:52 AMNaNNaNDavid Liu04/18/16, 06:03:08 AMupdate server build default props.1
780"""Cannot execute request on any known server"" when i set up a Eureka cluster by skyDns(2)"fangzhining04/22/16, 06:45:49 AM"After reading the solution of 
 ""Cannot execute request on any known server"" when i set up a Eureka cluster by skyDns #777, i have  changed ""http://10.120.180.117:8080/discovery/v2/"" into ""http://10.120.180.117:8080/eureka/v2/"",but it does not work,i can't setup the cluster of eureka.

The Error log almost is the same.It can only find one txtRecord.

2016-04-18 20:33:20,733 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver:40 [localhost-startStop-1] [getClusterEndpoints] Resolving eureka endpoints via DNS
The txtRecord is : us-east-1d.bar.skydns.paas
The cnamesString is : [us-east-1d.bar.skydns.paas]
The rootClusterDNS is : txt.us-east-1.bar.skydns.paas
The zoneDomain is : us-east-1d.bar.skydns.paas
The txtRecord is : http://10.120.180.117:8080/eureka/v2/
The cnamesString is : [http://10.120.180.117:8080/eureka/v2/]
The txtRecord is : http://10.120.180.117:8080/eureka/v2/
The cnamesString is : [http://10.120.180.117:8080/eureka/v2/]
The zoneAddresses is : http://10.120.180.117:8080/eureka/v2/
2016-04-18 20:33:20,807 INFO com.netflix.discovery.DiscoveryClient:920 [localhost-startStop-1] [fetchRegistry] Disable delta property : false
2016-04-18 20:33:20,807 INFO com.netflix.discovery.DiscoveryClient:921 [localhost-startStop-1] [fetchRegistry] Single vip registry refresh property : null
2016-04-18 20:33:20,807 INFO com.netflix.discovery.DiscoveryClient:922 [localhost-startStop-1] [fetchRegistry] Force full registry fetch : false
2016-04-18 20:33:20,807 INFO com.netflix.discovery.DiscoveryClient:923 [localhost-startStop-1] [fetchRegistry] Application is null : false
2016-04-18 20:33:20,807 INFO com.netflix.discovery.DiscoveryClient:924 [localhost-startStop-1] [fetchRegistry] Registered Applications size is zero : true
2016-04-18 20:33:20,808 INFO com.netflix.discovery.DiscoveryClient:926 [localhost-startStop-1] [fetchRegistry] Application version is -1: true
2016-04-18 20:33:20,808 INFO com.netflix.discovery.DiscoveryClient:1009 [localhost-startStop-1] [getAndStoreFullRegistry] Getting all instance registry info from the eureka server
2016-04-18 20:33:20,899 ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient:83 [localhost-startStop-1] [execute] Request execution error
com.sun.jersey.api.client.ClientHandlerException: java.net.UnknownHostException: http: unknown error
at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
at com.sun.jersey.api.client.Client.handle(Client.java:652)
at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:194)
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:441)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:304)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:300)
at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.UnknownHostException: http: unknown error
at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)
at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)
at java.net.InetAddress.getAllByName0(InetAddress.java:1276)
at java.net.InetAddress.getAllByName(InetAddress.java:1192)
at java.net.InetAddress.getAllByName(InetAddress.java:1126)
at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:44)
at org.apache.http.impl.conn.DefaultClientConnectionOperator.resolveHostname(DefaultClientConnectionOperator.java:259)
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:159)
at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144)
at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:131)
at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611)
at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446)
at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
... 41 more
2016-04-18 20:33:20,902 WARN com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient:129 [localhost-startStop-1] [execute] Request execution failure
2016-04-18 20:33:20,903 ERROR com.netflix.discovery.DiscoveryClient:934 [localhost-startStop-1] [fetchRegistry] DiscoveryClient_EUREKA/SZV1000048538 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1013)
at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:927)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:441)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:304)
at com.netflix.discovery.DiscoveryClient.(DiscoveryClient.java:300)
at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4812)
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5255)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:147)
at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:725)
at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:701)
at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)
at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:939)
at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1812)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)""@fangzhining sorry about that, looks like when I fixed the documentation mistake on that page, I did not do it fully (update yet again). For the dns option, you only need the hostname in the records, and should not include ""http://"", the port, nor the ""eureka/v2"".
 =||= @qiangdavidliu ,thank you for you solution,but i hava done this too,the following are my attempts;
**The first trying:**
The metadata in DNS:
dig txt.us-east-1.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1.bar.skydns.paas. IN  TXT
;; ANSWER SECTION:
txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1d.bar.skydns.paas""
txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1c.bar.skydns.paas""

dig txt.us-east-1c.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1c.bar.skydns.paas.    IN  TXT
;; ANSWER SECTION:
txt.us-east-1c.bar.skydns.paas. 3600 IN TXT ""10.120.180.235""

dig txt.us-east-1d.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1d.bar.skydns.paas.    IN  TXT
;; ANSWER SECTION:
txt.us-east-1d.bar.skydns.paas. 3600 IN TXT ""10.120.180.117""

**The result:
It can only get  one eureka endpoints via DNS, and at last**
2016-04-19 09:44:17,986 WARN  com.netflix.config.util.ConfigurationUtils:177 [localhost-startStop-1] [getConfigFromPropertiesFile] file:/usr/local/apache-tomcat-8.0.32/webapps/eureka/WEB-INF/classes/eureka-client.properties is already loaded
2016-04-19 09:44:18,334 INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider:70 [localhost-startStop-1] [<init>] Using JSON encoding codec LegacyJacksonJson
2016-04-19 09:44:18,335 INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider:71 [localhost-startStop-1] [<init>] Using JSON decoding codec LegacyJacksonJson
2016-04-19 09:44:18,335 INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider:80 [localhost-startStop-1] [<init>] Using XML encoding codec XStreamXml
2016-04-19 09:44:18,335 INFO  com.netflix.discovery.provider.DiscoveryJerseyProvider:81 [localhost-startStop-1] [<init>] Using XML decoding codec XStreamXml
2016-04-19 09:44:18,600 INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver:40 [localhost-startStop-1] [getClusterEndpoints] Resolving eureka endpoints via DNS
The txtRecord is : us-east-1c.bar.skydns.paas
The cnamesString is : [us-east-1c.bar.skydns.paas]
The rootClusterDNS is : txt.us-east-1.bar.skydns.paas
The zoneDomain is : us-east-1c.bar.skydns.paas
The txtRecord is : 10.120.180.235
The cnamesString is : [10.120.180.235]
The txtRecord is : 10.120.180.235
The cnamesString is : [10.120.180.235]
The zoneAddresses is : 10.120.180.235
2016-04-19 09:44:18,646 INFO  com.netflix.discovery.DiscoveryClient:920 [localhost-startStop-1] [fetchRegistry] Disable delta property : false
2016-04-19 09:44:18,646 INFO  com.netflix.discovery.DiscoveryClient:921 [localhost-startStop-1] [fetchRegistry] Single vip registry refresh property : null
2016-04-19 09:44:18,646 INFO  com.netflix.discovery.DiscoveryClient:922 [localhost-startStop-1] [fetchRegistry] Force full registry fetch : false
2016-04-19 09:44:18,646 INFO  com.netflix.discovery.DiscoveryClient:923 [localhost-startStop-1] [fetchRegistry] Application is null : false
2016-04-19 09:44:18,647 INFO  com.netflix.discovery.DiscoveryClient:924 [localhost-startStop-1] [fetchRegistry] Registered Applications size is zero : true
2016-04-19 09:44:18,647 INFO  com.netflix.discovery.DiscoveryClient:926 [localhost-startStop-1] [fetchRegistry] Application version is -1: true
2016-04-19 09:44:18,647 INFO  com.netflix.discovery.DiscoveryClient:1009 [localhost-startStop-1] [getAndStoreFullRegistry] Getting all instance registry info from the eureka server

the response of ""http://10.120.180.117:8080/eureka/""
DS Replicas: 10.120.180.235
Instances currently registered with Eureka
Application

Search Application
AMIs

Search AMIs
Availability Zones

Search Availability Zones
Status

Search Status
Application AMIs    Availability Zones  Status
No data available in table
General Info
Name    Value
environment prod
num-of-cpus 4
total-avail-memory  567mb
current-memory-usage    237mb (41%)
server-uptime   00:02
registered-replicas http://10.120.180.235:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://10.120.180.235:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.117
status  UP

**The Second trying:**
The metadata in DNS:
dig txt.us-east-1.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1.bar.skydns.paas. IN  TXT
;; ANSWER SECTION:
txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1c.bar.skydns.paas""

dig txt.us-east-1c.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1c.bar.skydns.paas.    IN  TXT
;; ANSWER SECTION:
txt.us-east-1c.bar.skydns.paas. 3600 IN TXT ""10.120.180.235 10.120.180.117""

**But the Domain Name Resolution is wrong, there will be get a extra "",like 
the response of ""http://10.120.180.235:8080/eureka/""**

DS Replicas:
Instances currently registered with Eureka
Application

Search Application
AMIs

Search AMIs
Availability Zones

Search Availability Zones
Status

Search Status
Application AMIs    Availability Zones  Status
No data available in table
General Info
Name    Value
environment prod
num-of-cpus 4
total-avail-memory  562mb
current-memory-usage    317mb (56%)
server-uptime   00:01
registered-replicas http://""10.120.180.235:8080/eureka/v2/, http://10.120.180.117"":8080/eureka/v2/
available-replicas  
unavailable-replicas    http://""10.120.180.235:8080/eureka/v2/,http://10.120.180.117"":8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.235
status  UP

2016-04-19 10:02:48,307 ERROR com.netflix.eureka.util.StatusUtil:72 [http-nio-8080-exec-6] [isReplicaAvailable] Could not determine if the replica is available
java.net.URISyntaxException: Illegal character in authority at index 7: http://10.120.180.117"":8080/eureka/v2/

if i set this in DNS ,the eureka can only find the IP ""10.120.180.235""  like the first trying：
dig txt.us-east-1c.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1c.bar.skydns.paas.    IN  TXT
;; ANSWER SECTION:
txt.us-east-1c.bar.skydns.paas. 3600 IN TXT ""10.120.180.235""
txt.us-east-1c.bar.skydns.paas. 3600 IN TXT ""10.120.180.117 ""

**The Third trying:**
The metadata in DNS:
dig txt.us-east-1.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1.bar.skydns.paas. IN  TXT
;; ANSWER SECTION:
txt.us-east-1.bar.skydns.paas. 3600 IN  TXT ""us-east-1c.bar.skydns.paas""

dig txt.us-east-1c.bar.skydns.paas txt
;; QUESTION SECTION:
;txt.us-east-1c.bar.skydns.paas.    IN  TXT
;; ANSWER SECTION:
txt.us-east-1c.bar.skydns.paas. 3600 IN TXT "" 10.120.180.235 10.120.180.117 ""

**But the Domain Name Resolution is wrong, there will be get a extra “http://"":8080/eureka/v2/ ”,like 
the response of ""http://10.120.180.235:8080/eureka/""**

DS Replicas: 10.120.180.23510.120.180.117
Instances currently registered with Eureka
Application

Search Application
AMIs

Search AMIs
Availability Zones

Search Availability Zones
Status

Search Status
Application AMIs    Availability Zones  Status
EUREKA  n/a (2),    (2),    UP (2) - SZV1000048497, SZV1000048537,
General Info
Name    Value
environment prod
num-of-cpus 4
total-avail-memory  374mb
current-memory-usage    299mb (79%)
server-uptime   00:00
registered-replicas http://10.120.180.235:8080/eureka/v2/, http://"":8080/eureka/v2/, http://10.120.180.117:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://10.120.180.235:8080/eureka/v2/,http://"":8080/eureka/v2/,http://10.120.180.117:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.235
status  UP

Is this the cluster of eureka?    if yes,how could i rm the http://"":8080/eureka/v2/ ?  
when i use the  cluster of eureka ,are there will be any problems?
 =||= @fangzhining can you tell me which AwsBinder you are using? Are you using Route53 or EIP? Thanks.
 =||= @qiangdavidliu , i may have found what is wrong.i use skydns as my DNS,when i set the domain,it is not the format such as :
**txt.us-east-1.mydomaintest.netflix.net=""us-east-1c.mydomaintest.netflix.net"" 
""us-east-1d.mydomaintest.netflix.net"" ""us-east-1e.mydomaintest.netflix.net""**
but like this:
curl -XPUT http://127.0.0.1:4001/v2/keys/skydns/paas/skydns/bar/us-east-1/txt/x1 -d value='{""text"":""us-east-1c.bar.skydns.paas"",""targetstrip"":1}'
curl -XPUT http://127.0.0.1:4001/v2/keys/skydns/paas/skydns/bar/us-east-1/txt/x2 -d value='{""text"":""us-east-1d.bar.skydns.paas"",""targetstrip"":1}'

and the function of  *_getCNamesFromTxtRecord in DnsResolver.java *_,always only find the first one.

then in order to adapt to the format, i set domain in skydns like this ：
curl -XPUT http://127.0.0.1:4001/v2/keys/skydns/paas/skydns/bar/us-east-1/txt/x1 -d value='{""text"":""us-east-1c.bar.skydns.paas us-east-1d.bar.skydns.paas"",""targetstrip"":1}'

there will be another problem,when the function of  **getCNamesFromTxtRecord in DnsResolver.java *\*  run the code:**String[] cnames = txtRecord.split("" "");**.
the cnames  is ：[""us-east-1d.bar.skydns.paas,us-east-1c.bar.skydns.paas""]. it is not right.

so, at last ,i change the function **getCNamesFromTxtRecord**,rm the "" in the element of cnames  ,it seems to be all right the result is as the following:

the response of http://10.120.180.235:8080/eureka/

DS Replicas: 10.120.180.23510.120.180.11710.120.175.175
Instances currently registered with Eureka
Application

Search Application
AMIs

Search AMIs
Availability Zones

Search Availability Zones
Status

Search Status
Application AMIs    Availability Zones  Status
EUREKA  n/a (3),    (3),    UP (3) - SZV1000048497, SZV1000048537, SZV1000048538,
SAMPLEREGISTERINGSERVICE    n/a (1),    (1),    UP (1) - SZV1000048389,
General Info
Name    Value
environment prod
num-of-cpus 4
total-avail-memory  638mb
current-memory-usage    278mb (43%)
server-uptime   00:15
registered-replicas http://10.120.180.235:8080/eureka/v2/, http://10.120.180.117:8080/eureka/v2/, http://10.120.175.175:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://10.120.180.235:8080/eureka/v2/,http://10.120.180.117:8080/eureka/v2/,http://10.120.175.175:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.235
status  UP

the response of http://10.120.180.117:8080/eureka/
DS Replicas: 10.120.180.23510.120.180.11710.120.175.175
Instances currently registered with Eureka
Application

Search Application
AMIs

Search AMIs
Availability Zones

Search Availability Zones
Status

Search Status
Application AMIs    Availability Zones  Status
EUREKA  n/a (3),    (3),    UP (3) - SZV1000048497, SZV1000048537, SZV1000048538,
SAMPLEREGISTERINGSERVICE    n/a (1),    (1),    UP (1) - SZV1000048389,
General Info
Name    Value
environment prod
num-of-cpus 4
total-avail-memory  632mb
current-memory-usage    277mb (43%)
server-uptime   00:15
registered-replicas http://10.120.180.235:8080/eureka/v2/, http://10.120.180.117:8080/eureka/v2/, http://10.120.175.175:8080/eureka/v2/
available-replicas  
unavailable-replicas    http://10.120.180.235:8080/eureka/v2/,http://10.120.180.117:8080/eureka/v2/,http://10.120.175.175:8080/eureka/v2/,
Instance Info
Name    Value
ipAddr  10.120.180.117
status  UP
 =||= I'm having this same issue while using ActiveDirectory as my DNS server:

```
2017-12-21 17:43:45.457  WARN 3136 --- [nfoReplicator-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: Illegal character in authority at index 7: http://eureka02.mydomain.com"":8761
2017-12-21 17:43:45.458  WARN 3136 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_UNKNOWN/eureka02.mydomain.com:8761 - registration failed Cannot execute request on any known server
```

Notice the quote appended to URL
Is this just something which works in Route53 and not on other DNS servers?

```
[eureka02 eureka]# dig txt.office-1a.eureka.mydomain.com TXT
; <<>> DiG 9.9.4-RedHat-9.9.4-51.el7 <<>> txt.office-1a.eureka.mydomain.com TXT
;; QUESTION SECTION:
;txt.office-1a.eureka.mydomain.com. IN TXT

;; ANSWER SECTION:
txt.office-1a.eureka.mydomain.com. 38400 IN TXT ""eureka01.mydomain.com eureka02.mydomain.com""
```
 =||= I’m having this same issue, when fix it?
The problem is in DnsResolver.getCNamesFromTxtRecord(), 
` 
  

        if (attr != null) {
            txtRecord = attr.get().toString();
        }
        Set<String> cnamesSet = new TreeSet<String>();
        if (txtRecord == null || txtRecord.trim().isEmpty()) {
            return cnamesSet;
        }
        String[] cnames = txtRecord.split("" "");
`

` txtRecord = attr.get().toString(); ` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7812.xLenny BeltránLennyZtyle04/21/16, 07:43:25 PMNaN"[NetflixOSS » eureka » eureka-pull-requests #596](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/596/) FAILURE
Looks like there's a problem with this pull request
 =||= @LennyZtyle eureka 2.x is not work that can be merged into 1.x (on master branch).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
782No war file created for eureka 2 serverChristian Schneidercschneider05/02/16, 07:46:48 AM"The wiki says that I should have a eureka server war after the build.

The directory eureka/eureka2-server/build/libs only contains this though:
eureka2-server-2.0.0-SNAPSHOT.jar  eureka2-server-2.0.0-SNAPSHOT-javadoc.jar  eureka2-server-2.0.0-SNAPSHOT-sources.jar

I build using  
./gradlew build

Is this a bug or is the documentation just not up to date?""Hi @cschneider eureka2 is not a tomcat base application, so there is no war file generated. Having said this, the current stable eureka is the build on the master branch, which is the 1.x system. The 2.x system is currently not complete. Thanks.
 =||= I know 2.x is not yet released. We are currently evaluating registries and eureka 2 sounds quite good from the API perspective. 
Does it make sense to already look into eureka2? Our product is going to go into production end of this year. Do you think eureka2 will be out until then?
If yes how do I start the server? I do not have the requirement for it to be a war.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
783Unversioned user agent when shading eureka-clientMatt Nelsonmattnelson05/30/19, 11:09:53 PM"When shading eureka-client the manifest is lost in favor of the parent. DiscoveryBuildInfo[1] assumes that the version can be obtained from the manifest. Which propagates itself as an unknown version on the client user agents[2].

```
Java-EurekaClient/v<version_unknown>
Java-EurekaClient-Replication/v<version_unknown>
```

Since eureka is using the `nebula.netflixoss` plugin a `eureka-client.properties` file is dropped in `META-INF`, I tried to use that file as a drop in replacement of the manifest and found some issues[3]. Do you have a preference for the resolution?
- Wait for gradle-info-plugin to be fixed, then use file as a `Manifest`
- Use the `eureka-client.properties` as is and parse out `Implementation-Version`

[1] https://github.com/Netflix/eureka/blob/v1.4.6/eureka-client/src/main/java/com/netflix/discovery/util/DiscoveryBuildInfo.java#L55
[2] https://github.com/Netflix/eureka/blob/v1.4.6/eureka-client/src/main/java/com/netflix/discovery/shared/transport/jersey/EurekaJerseyClientImpl.java#L198
[3] https://github.com/nebula-plugins/gradle-info-plugin/issues/28""@mattnelson we are open to either resolution step, though I can foresee potential confusion w.r.t. option 2 as the (archaius based) configuration file for eureka is also called eureka-client.properties.
 =||= The `eureka-client.properties` file will be in the `META-INF` resource folder and while it is the same file name, it would take some work for a user to incidentally put this file on the archaius path. I'll get started on the plugin updates as that seems to be to most correct way to resolve this. I'll have a follow up PR to change eureka to fall back to `eureka-client.properties` once the plugin updates are available.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
784Support healthy status on server StatusInfoMatt Nelsonmattnelson09/23/16, 05:09:07 PMWhen one of the replicas is down the eureka server status should reflect that in the healthy flag on `StatusInfo` and `/eureka/v2/status` endpoint."[NetflixOSS » eureka » eureka-pull-requests #597](https://netflixoss.ci.cloudbees.com/job/NetflixOSS/job/eureka/job/eureka-pull-requests/597/) SUCCESS
This pull request looks good
 =||= @mattnelson sorry about missing this PR, not sure how I missed this.

The changes in general looks fine, though taking a look at the information exposed by StatusInfo (which is code that has been moved around a bunch of times now and is pretty old), the contract for isHealthy seems poorly defined. The isHealthy field should really only be applied to the local server itself, as at a cluster level, eureka is can still be considered ""healthy"" even with some down replicas.
 =||= The cluster health would depend on the deployment configuration? Using the EIP/DNS options would provide multiple levels of resiliency. Using the `eureka.serviceUrl` property could have huge impacts with a down replica.

I think the `isHealthy` contract could be defined with the introduction of a new property which is the threshold of down replicas in which is it unhealthy due to the inability to replicate confidently.
 =||= If you are accessing eureka (server) through the provided eureka-client, then the theoretical threshold for DOWN replicas is pretty much n-1. There is a some load balancing built into the provided client such that they can handle parts of the server cluster being unavailable.

The replication protocol within eureka is a broadcast model, and hence as long as you have a single server standing, the cluster is ""ok"" (provided that this single server can handle the incoming requests of the world of course).
 =||= Hi @mattnelson , eureka is designed to be able to operate fully even when replicas are missing (as long as not all replicas are missing, and of course there are enough replicas to satisfy the data output bandwidth requirements). Replication is not tied to the number of replicas available so having downed replicas does not affect replication at a local level between the healthy replicas.

I do agree fully with you that it would be very useful to have, from the status endpoint, a view of the cluster's health. However the current PR results in an ""unhealthy"" status for a given server, if peers of this server are unhealthy. This would be incorrect information per our discussions in this thread.

How would you like to proceed? You are more than welcome to update this PR to expand on the health status to expose cluster level health if you would like to define a cluster level down threshold. Alternatively we can close this PR for now, and start a new PR for that.

Thanks.
 =||= For the sake of not losing the context of this discussion. I will make the changes and update the PR. I will try to get the proposed changes done in the next couple of days.
 =||= Finally got around to making these changes in bf6aa56945abbb3c067f6c4ae492fbe5f95bf489
- Went with an integer for the number of required up replicas since I think the common uses cases would be a relatively low number of replicas.
- Couldn't come up with a good name for the property so looking for suggestions there.
- Handles the default property value of 0 to remain passive with the current functionality of an unset healthy flag.
 =||= @mattnelson sorry didn't see this PR getting updated, some minor quibbles but LGTM.
 =||= @qiangdavidliu Addressed PR comments on bc336a27b5cb6ef45b4499c89f4e25d28ee07b9f
 =||= Not sure what caused the failure. I don't seem to be able to see the output of the travis build. I built the project locally several times to see if I could reproduce, but all the builds passed.
 =||= @mattnelson thanks, the failures are not your fault. Ever since we migrated to travisCI we've had these intermittent failures. Current theory is that the limited CPU that the travis containers are configured for are not enough for some of the multi-treading tests. I'll trigger some reruns for you.
 =||= @mattnelson the failures are actually due to one of the tests added:

```
com.netflix.eureka.util.StatusUtilTest > testGetStatusInfoHealthy FAILED
    java.lang.AssertionError at StatusUtilTest.java:28
```
 =||= Figured out the failure reason. This branch wasn't rebased with the changes I introduced on #831.

I cherry picked that commit over and fixed the tests.
 =||= Looks good, merged. Thanks.
 =||= "Support healthy status on server StatusInfoMatt Nelsonmattnelson09/23/16, 05:09:07 PMWhen one of the replicas is down the eureka server status should reflect that in the healthy flag on `StatusInfo` and `/eureka/v2/status` endpoint.NaNMatt Nelson09/23/16, 03:58:18 PMfix test failures1
785Improve documentation for the server configuration in the yml file.Andres Gomezagomezcafeto05/27/16, 08:41:39 PMI can not find any documentation about how to configure the eureka server, specifically, documentation related with the yml file."@agomezcafeto eureka does not use a yml based configuration. Currently, the configs are self documented in javadoc in EurekaServerConfig.java, and you can get some highlevel set up information from https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
786Adding some utilitiesDavid Liuqiangdavidliu05/10/16, 08:04:45 PMNaNNaNAdding some utilitiesDavid Liuqiangdavidliu05/10/16, 08:04:45 PMNaNNaNDavid Liu05/10/16, 03:30:20 AM"""touch"" for a new commit to get a PR build under travis"1
787Added ENI aws binderjc8905/18/16, 06:39:06 PM"Added binder for aws elastic network interfaces.
This is done creating an AWSBinder and modifying the delegate to properly choose using the new binder strategy""@jc89 thanks for the PR. Could you please also add some comments to specify what the expected DNS records would look like, and what tags the ENIs will need to be tagged with? Thanks.
 =||= @qiangdavidliu a few dns record examples:

txt.us-east-1.eureka=""us-east-1a.eureka"" ""us-east-1b.eureka""
txt.us-east-1a.eureka=""ip-172-31-y-y.ec2.internal""
txt.us-east-1b.eureka=""ip-172-31-x-x.ec2.internal""

where ""ip-172-31-x-x.ec2.internal"" is the ENI private dns

No tags are requiered for the enis, just like with elastic ips, are deduced from service urls or dns records.

I will add more later
 =||= If you'd like to configure it via service urls, the service urls should look like this

```
eureka.awsBindingStrategy=ENI
eureka.serviceUrl.us-east-1a=http://ip-172-31-35-108.ec2.internal:7001/eureka/v2/
```
 =||= Thanks again @jc89. Would you mind adding what you just described as javadoc comments to the Top of the ENIBinder class? That way the documentation will live with the code.

Otherwise everything looks fine, and I'll merge this in as soon as you add the documentation.
 =||= @qiangdavidliu Done
 =||= @jc89 thanks for the contrib.
 =||= "Added ENI aws binderjc8905/18/16, 06:39:06 PM"Added binder for aws elastic network interfaces.
This is done creating an AWSBinder and modifying the delegate to properly choose using the new binder strategy"NaNjc8905/18/16, 01:15:10 AMAdded documentation to file header for ElasticNetworkInterfaceBinder.java1
788Eureka Ribbon not working in Weblogic 12c serverremesh2205/10/16, 02:27:27 PM"I am not able to call a microservice from another service using RestTempale backed by ribbon.
Everything works fine if i use Tomcat instead of weblogic. Is Ribbon supposed to work on weblogic?
 restTemplate.exchange() is giving me the following error:

java.lang.IllegalStateException: Error processing condition on org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration.ribbonPing
    at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.context.annotation.ConditionEvaluator.shouldSkip(ConditionEvaluator.java:102) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForBeanMethod(ConfigurationClassBeanDefinitionReader.java:178) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:140) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:116) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:333) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:243) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:273) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:98) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:678) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:520) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.jrLockAndRefresh(AbstractApplicationContext.java) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java) ~[spring-context-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.cloud.netflix.ribbon.SpringClientFactory.createContext(SpringClientFactory.java:148) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.SpringClientFactory.getContext(SpringClientFactory.java:113) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.SpringClientFactory.getInstance(SpringClientFactory.java:181) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.SpringClientFactory.getLoadBalancer(SpringClientFactory.java:90) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.getLoadBalancer(RibbonLoadBalancerClient.java:108) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.getServer(RibbonLoadBalancerClient.java:97) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.choose(RibbonLoadBalancerClient.java:58) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.cloud.netflix.ribbon.RibbonClientHttpRequestFactory.createRequest(RibbonClientHttpRequestFactory.java:62) ~[spring-cloud-netflix-core-1.0.7.RELEASE.jar:1.0.7.RELEASE]
    at org.springframework.http.client.support.HttpAccessor.createRequest(HttpAccessor.java:77) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:592) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:557) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:475) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at com.vzw.prepay.client.RestTemplateClient.exchange(RestTemplateClient.java:28) ~[myv-prepay-common-1.0.0.jar:na]
    at com.vzw.prepay.client.impl.PaymentServiceClientImpl.getPaymentHistory(PaymentServiceClientImpl.java:31) ~[_wl_cls_gen.jar:na]
    at com.vzw.prepay.controller.PaymentController.getPaymentHistory(PaymentController.java:29) ~[_wl_cls_gen.jar:na]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_60]
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_60]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]
    at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]
    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:222) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:969) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:860) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) ~[javax.servlet.javax.servlet-api.jar:3.1.0]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:845) ~[spring-webmvc-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet.javax.servlet-api.jar:3.1.0]
    at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:286) ~[com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:260) ~[com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:137) ~[com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:350) ~[com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.TailFilter.doFilter(TailFilter.java:25) ~[com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:237) ~[spring-boot-actuator-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) ~[spring-boot-actuator-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at com.vzw.prepay.filter.AuthorizationFilter.doFilter(AuthorizationFilter.java:83) ~[myv-prepay-common-1.0.0.jar:1.0.0]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:207) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) ~[spring-boot-actuator-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:120) [spring-boot-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:61) [spring-boot-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:95) [spring-boot-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:113) [spring-boot-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at weblogic.servlet.internal.FilterChainImpl.doFilter(FilterChainImpl.java:78) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.wrapRun(WebAppServletContext.java:3654) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.__run(WebAppServletContext.java:3620) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:326) [com.oracle.weblogic.security.subject.jar:12.2.1.0]
    at weblogic.security.service.SecurityManager.runAsForUserCode(SecurityManager.java:196) [com.oracle.weblogic.security.subject.jar:12.2.1.0]
    at weblogic.servlet.provider.WlsSecurityProvider.runAsForUserCode(WlsSecurityProvider.java:203) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:71) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext.doSecuredExecute(WebAppServletContext.java:2423) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2280) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2258) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.ServletRequestImpl.runInternal(ServletRequestImpl.java:1626) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1586) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.servlet.provider.ContainerSupportProviderImpl$WlsRequestExecutor.run(ContainerSupportProviderImpl.java:270) [com.oracle.weblogic.servlet.jar:12.2.1.0]
    at weblogic.invocation.ComponentInvocationContextManager._runAs(ComponentInvocationContextManager.java:348) [com.bea.core.utils.full.jar:12.2.1.0]
    at weblogic.invocation.ComponentInvocationContextManager.runAs(ComponentInvocationContextManager.java:333) [com.bea.core.utils.full.jar:12.2.1.0]
    at weblogic.work.LivePartitionUtility.doRunWorkUnderContext(LivePartitionUtility.java:54) [com.oracle.weblogic.work.jar:12.2.1.0]
    at weblogic.work.PartitionUtility.runWorkUnderContext(PartitionUtility.java:41) [com.bea.core.weblogic.workmanager.jar:12.2.1.0]
    at weblogic.work.SelfTuningWorkManagerImpl.runWorkUnderContext(SelfTuningWorkManagerImpl.java:617) [com.bea.core.weblogic.workmanager.jar:12.2.1.0]
    at weblogic.work.ExecuteThread.execute(ExecuteThread.java:397) [com.bea.core.weblogic.workmanager.jar:12.2.1.0]
    at weblogic.work.ExecuteThread.run(ExecuteThread.java:346) [com.bea.core.weblogic.workmanager.jar:12.2.1.0]
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'org.springframework.integration.config.ConsumerEndpointFactoryBean#0' is defined
    at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:698) ~[spring-beans-4.2.4.RELEASE.jar:4.2.4.RELEASE]
    at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$DefaultBeanTypeRegistry.collectBeanNamesForTypeFromFactoryBeans(BeanTypeRegistry.java:214) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.BeanTypeRegistry$DefaultBeanTypeRegistry.getNamesForType(BeanTypeRegistry.java:202) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:182) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.OnBeanCondition.collectBeanNamesForType(OnBeanCondition.java:187) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getBeanNamesForType(OnBeanCondition.java:171) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchingBeans(OnBeanCondition.java:139) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.OnBeanCondition.getMatchOutcome(OnBeanCondition.java:113) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:47) ~[spring-boot-autoconfigure-1.3.2.RELEASE.jar:1.3.2.RELEASE]
    ... 104 common frames omitted""Netflix doesn't maintain Spring Projects. You should probably report this here ttps://github.com/spring-cloud/spring-cloud-netflix/issues
 =||= Thanks.Reporting as an issue in htps://github.com/spring-cloud/spring-cloud-netflix/issues.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
789Travis conversionRob Spieldennerrspieldenner05/09/16, 09:54:56 PMNaNNaNTravis conversionRob Spieldennerrspieldenner05/09/16, 09:54:56 PMNaNNaNRob Spieldenner05/09/16, 08:55:22 PMTravis conversion1
790Fixing an edge case if dataCenterInfo is null or DataCenterInfo.Name is nullDavid Liuqiangdavidliu05/11/16, 12:50:53 AMNaN"lgtm 
 =||= "Fixing an edge case if dataCenterInfo is null or DataCenterInfo.Name is nullDavid Liuqiangdavidliu05/11/16, 12:50:53 AMNaNNaNDavid Liu05/11/16, 12:37:24 AMtweak some test timeouts as travis seems much slower than cloudbees1
791Supplement to #790 to check for null for DataCenterInfo.getName()David Liuqiangdavidliu05/11/16, 01:21:56 AMNaNNaNSupplement to #790 to check for null for DataCenterInfo.getName()David Liuqiangdavidliu05/11/16, 01:21:56 AMNaNNaNDavid Liu05/11/16, 01:00:35 AMSupplement to #790 to check for null for DataCenterInfo.getName()1
792update gradle version and netflixoss version to be compatible with travisCIDavid Liuqiangdavidliu05/11/16, 05:23:21 AMNaNNaNupdate gradle version and netflixoss version to be compatible with travisCIDavid Liuqiangdavidliu05/11/16, 05:23:21 AMNaNNaNDavid Liu05/11/16, 04:40:03 AMupdate gradle version and netflixoss version to be compatible with travisCI1
793ignore javadoc errors (for now)David Liuqiangdavidliu05/11/16, 05:37:03 AMNaNNaNignore javadoc errors (for now)David Liuqiangdavidliu05/11/16, 05:37:03 AMNaNNaNNaNNaNNaN1
794minor test fixDavid Liuqiangdavidliu05/11/16, 05:58:29 AMNaNNaNminor test fixDavid Liuqiangdavidliu05/11/16, 05:58:29 AMNaNNaNDavid Liu05/11/16, 05:49:40 AMminor test fix1
795Using beta Travis trusty vm for builds (more cpu -> better for tests)David Liuqiangdavidliu05/18/16, 07:45:02 PMNaNNaNUsing beta Travis trusty vm for builds (more cpu -> better for tests)David Liuqiangdavidliu05/18/16, 07:45:02 PMNaNNaNDavid Liu05/18/16, 06:40:13 PMUsing beta Travis trusty vm for builds (more cpu -> better for tests)1
796API for delete applicationBeatrice Pengbebepeng06/03/16, 08:47:22 PM"So we have found ourselves in the situation where somehow the instanceID registered has ""http://"" in it. We are unable to use the regular delete endpoint to get rid of it.  It would be nice to expose an endpoint that would delete the app or clear all instanceIDs.""+1
 =||= @bebepeng @zgagnon  sorry for not taking a look at this issue earlier. Can you describe the issue you are seeing in a bit more detail? From what you describe, can I assume the ""http://"" of the id is what's preventing the DELETE request due to url parsing?

If that is the case, eureka have an internal eviction mechanism where if a heartbeat from a client source is missed for 3 consecutive times (using default config, this would be ~90s), then that entry will be evicted from the registry on the client side. Are you able to shutdown the client with bad instancesIds for that amount of time? If so, that will allow you to evict these client with bad ids.

As for defining instanceIds, as of release 1.2.5 there is a configuration option available to define a custom instanceid for the client instead of sourcing it automatically (see #553), and if you are using the default configuration options, the config setting is eureka.instanceId=some-id
 =||= Have resolved the issue.

Our Eureka instance was in self-preservation mode due to a large number of instances being turned off at once. After manually deleting all extraneous instances that we could, the invalid id instance (http://127.0.0.1) failed its heartbeats and was removed. In this case, a different app had 50+ instances registered at one point (which were all disabled), and after removing them one-by-one, the problem resolved.

With either case, being able to delete the app would have made this a bit easier.
 =||= Glad to hear that issue is resolve on your end. Closing this issue.

W.r.t. an API for application level deletion, agree that it would be useful in some cases. If there is some urgency to the desire of this feature, please feel free to make a PR to add it. Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
797Add fail fast option to AmazonInfo initDavid Liuqiangdavidliu05/19/16, 07:00:44 PMAdd fail fast option to AmazonInfo init (esp at bootstrap time) so that running with VPN will not unncecessarily cause long hang times waiting on each key's ReadTimeout.NaNAdd fail fast option to AmazonInfo initDavid Liuqiangdavidliu05/19/16, 07:00:44 PMAdd fail fast option to AmazonInfo init (esp at bootstrap time) so that running with VPN will not unncecessarily cause long hang times waiting on each key's ReadTimeout.NaNDavid Liu05/19/16, 06:48:24 PMclean up1
798Update client initialization examplefcjreed05/27/16, 10:25:57 PMPlease update the example eureka client code to reflect the deprecated changes."Thanks, fix in #801
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
799The default jersey configuration makes the API logic unavailable唐盛军tsjsdbd05/27/16, 08:48:56 PM"Eureka server code [here](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationsResource.java#L150): if http client don't want gzip response, then the server will return result uncompressed.

but when you try this feature, it always return compressed result with Gzip。

after some investgation, i find the default jersey configuration let jersey always compress the response content.
1. [configuration1](https://github.com/Netflix/eureka/blob/bee851e469d0b0d7964743eb24d4ae52d23f0984/eureka-server-governator/src/main/java/com/netflix/eureka/EurekaInjectorCreator.java#L45)
2. [configuration2](https://github.com/Netflix/eureka/blob/master/eureka-server/src/main/webapp/WEB-INF/web.xml#L48)
@qizha""@tsjsdbd thanks for noting this. What you say is correct. From the server side logic, gzip or not is an option governed by accept encoding. However the default server build contains, as a default filter, the Gzip encoding filter that gzips all responses regardless of accept encoding.

Internally, our usage levels are so high that is not realistic to produce unzip responses for any request, hence the default this way as a server side guard against all incoming requests.

If you do need the ability to return zipped or unzipped data depending on accept encoding, please edit your server build to remove the default usage of the gzip filter.
 =||= thanks for kindly reply, I agree that no need to return unzipped data for most scenario.
but on another hand, if the low level implementation finished the job about the feature, the appliacation level should no do it again, just focus on application logic maybe is more concise :-) 
(it have a little code deal with the HTTP header, and judge whether compress the response, and some code for compress algorithm)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
800Handle on demand update within InstanceInfoReplicator initial delayMatt Nelsonmattnelson05/27/16, 08:24:53 PMWhen performing an on demand status update within the InstanceInfoReplicator start's initial delay the originally scheduled task is not cancelled which results in two scheduled tasks being executed for the life of the process."@mattnelson thanks for the fix!
 =||= "Handle on demand update within InstanceInfoReplicator initial delayMatt Nelsonmattnelson05/27/16, 08:24:53 PMWhen performing an on demand status update within the InstanceInfoReplicator start's initial delay the originally scheduled task is not cancelled which results in two scheduled tasks being executed for the life of the process.NaNMatt Nelson05/27/16, 06:29:08 PMHandle on demand update within InstanceInfoReplicator initial delay1
801remove deprecated code form examplesDavid Liuqiangdavidliu05/27/16, 10:25:53 PMNaN"lgtm
 =||= "remove deprecated code form examplesDavid Liuqiangdavidliu05/27/16, 10:25:53 PMNaNNaNDavid Liu05/27/16, 09:03:06 PM"Move client side reconcile and log difference to debug loglevel.
The information is already surfaced by a metric for real time monitoring."1
802race condition when registering instance ?De Simone Alessandroalessnet08/22/16, 10:27:49 PM"Hello,

I'm using the REST api to register my service in Eureka.
There is a case when one of my Eureka server doesn't see the latest status of my registered service.

Let's say I have two Eureka instances MACHINE1 and MACHINE2.
When my service starts, it takes the first available server (MACHINE1) and does a register (POST /v2/apps/myservice) with the status ""STARTING"".

The service does start and then register again with the status ""UP"".
If for any reason (let's say a connection issue) the second call to register is done on MACHINE2 right after the first call, then the service is seen as ""STARTING"" on MACHINE2 and ""Up"" on MACHINE1, no matter how long we wait (heartbeats are sent).

In the logs of MACHINE2, I have the following warning:

> 2016-05-31 09:04:38,614 INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:266 [http-nio-8080-exec-44] [register] Registered instance myservice/inst1 with status UP (replication=false)
> 
> 2016-05-31 09:04:39,098 WARN  com.netflix.eureka.registry.AbstractInstanceRegistry:209 [http-nio-8080-exec-3] [register] **There is an existing lease and the existing lease's dirty timestamp 1464710678627 is greater than the one that is being registered 1464710678020**
> 
> 2016-05-31 09:04:39,098 INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:266 [http-nio-8080-exec-3] [register] Registered instance myservice/inst1 with status STARTING (replication=true)
> 
> 2016-05-31 09:06:37,723 INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:330 [http-nio-8080-exec-32] [internalCancel] Cancelled instance myservice/inst1 (replication=false)

If I wait 5 seconds between ""Starting"" and ""Up"", the issue disappears.

So I suppose that the second register call is processed BEFORE the replication takes place. When the registration takes place, the ""expired"" registration is kept anyway (ignoring dirty timestamp). I'm using Eureka 1.4.8.

```
if (existingLease != null && (existingLease.getHolder() != null)) {
                Long existingLastDirtyTimestamp = existingLease.getHolder().getLastDirtyTimestamp();
                Long registrationLastDirtyTimestamp = r.getLastDirtyTimestamp();
                logger.debug(""Existing lease found (existing={}, provided={}"", existingLastDirtyTimestamp, registrationLastDirtyTimestamp);
                if (existingLastDirtyTimestamp > registrationLastDirtyTimestamp) {
                    logger.warn(""There is an existing lease and the existing lease's dirty timestamp {} is "" +
                                    ""greater than the one that is being registered {}"",
                            existingLastDirtyTimestamp,
                            registrationLastDirtyTimestamp);
                    r.setLastDirtyTimestamp(existingLastDirtyTimestamp);
                }
```

Can you please explain if I made something wrong or if indeed Eureka doesn't handle this well ?

Thank you,

Alessandro De Simone""@alessnet are you using eureka via direct REST requests, and not through the provided eureka-client? There are a few subtleties in the way registrations are handled by eureka, that is usually abstracted away by using the client. Primarily, these are:
- the client contains a eureka specific loadbalancer for talking to the server cluster, such that it minimises target switches for a given client:server pair.
- the client abstract away the usage of the InstanceInfo.lastDirtyTimestamp field in the registration protocol, which is used to provide linearization for registration events even if they end up going to different eureka servers.
 =||= @qiangdavidliu

I'm using the REST API in C#. Using the java client (event in a separate process) not an option unfortunately.

I'm specifying the dirtytimestamp myself during registration at client side (in case the timers on the two eureka servers are slightly off). But the issue persists if I don't specify it. What should I put in this field ?

I agree that a correct load balancer will minimize switches and will try to stick to MACHINE1 for the second register. But in my understanding you can still have this issue in real live production. If MACHINE1 doesn't answer to the second register, the load balancer will redirect the call to MACHINE2. If the replication between MACHINE1 and MACHINE2 is slow for some reason, you will end up with the exact same situation where the second register is discarded on MACHINE2 after the replication.

Can you please explain me how the java client handles this situation ? (or lead me more precisely to the source file). 

Thank you ! :)
 =||= @alessnet the lastDirtyTimestamp is intended to be supplied at the client side (and is what the java client does, see [InstanceInfoReplicator.java](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/InstanceInfoReplicator.java) for code and also comments on client registration logic).

Since this intended to be client generated (and guaranteed at the client side to be serialized), it is possible to use this value as the mechanism to serialize write operations (register, update and cancel). The server side replication logic also utilize the dirtyTimestamp to deal with conflict as you described.
 =||= @qiangdavidliu

First of all, thank you for taking the time to answer my questions :)

I'm sending a dirty timestamp and commands are correctly serialized at clientside (so the second register is correctly sent after the first one correctly finished). This is similar to your java code, so I can assure you that I don't make two write operations in parallel.

The only difference I see is that every command is delayed by x seconds while my implementation does not. And that was my original question : if you say that the race condition I had could be avoided only by delaying each command, how is that possible? There always could be a lag/partition in the network that could last longer that the chosen delay. Waiting at client side to hope for a correct sync between replicas seems wrong.

> The server side replication logic also utilize the dirtyTimestamp to deal with conflict as you described.

In the log I have attached, you see that one of the server (which will end up showing the wrong state) print a warning about a old dirtytimestamp (replication=true). If I understand this correctly, in  [AbstractInstanceRegistry](https://github.com/Netflix/eureka/blob/da2f9e5bcf2503487a52d839093f039bea065af2/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L208) the server takes the expired entry (""STARTING"") anyway but keep the more recent dirtystimestamp (the one of the ""UP""). It seems that If the server had ignored this expired command, the server would have kept the ""UP"" as expected.

When this occurs, no matter how much time I wait, the two servers doesn't see the same status. Why is this related to the client and why the servers cannot agree of the final status?
 =||= @alessnet sorry about only getting back to you now, I was away for a bit.

I did some more digging into the code, and I think you are correct in saying that (if using the REST api directly), there is a potential registration race condition where if two successive registration requests landed on different machines and happen fast enough such that replication has not yet occurred between the two machines, it may lead to the inconsistency you observed. I believe the provided java client's error handling (inadvertently) guards against this which is why we have not seen it in our production systems.

I'm going to see if I can repro this and work on a fix if it is confirmed. Thanks again for point this out!
 =||= Hi @qiangdavidliu, did you manage to reproduce this?
 =||= Hi @alessnet we have not had time to work on this unfortunately. Will see if we can try to repro this this week.
 =||= @alessnet I've semi-verified it via the above PR, and will be doing some tests in our test and prod environments before confirming.
 =||= Fixed in release 1.4.9
 =||= Actually 1.4.9 provided a mechanism to ""fix"" this, but has not defaulted it yet. Will keep this open until we switch the defaults over.
 =||= Released in 1.4.11
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
803Eureka Peer Server throwing java.lang.NullPointerException: null at com.netflix.eureka.registry.AbstractInstanceRegistry.renewJose A. Iñigocodependent06/22/16, 05:54:59 AM"I am using Spring Cloud Netflix to run two Eureka (1.4.6) servers with peer awareness and found this issue after their last API upgrade:

```
java.lang.NullPointerException: null
    at com.netflix.eureka.registry.AbstractInstanceRegistry.renew(AbstractInstanceRegistry.java:379) ~[eureka-core-1.4.6.jar:1.4.6]
    at com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl.renew(PeerAwareInstanceRegistryImpl.java:401) ~[eureka-core-1.4.6.jar:1.4.6]
    at org.springframework.cloud.netflix.eureka.server.InstanceRegistry.renew(InstanceRegistry.java:127) ~[spring-cloud-netflix-eureka-server-1.1.0.RELEASE.jar:1.1.0.RELEASE]
    at com.netflix.eureka.resources.InstanceResource.renewLease(InstanceResource.java:112) ~[eureka-core-1.4.6.jar:1.4.6]
    at com.netflix.eureka.resources.PeerReplicationResource.handleHeartbeat(PeerReplicationResource.java:148) ~[eureka-core-1.4.6.jar:1.4.6]
    at com.netflix.eureka.resources.PeerReplicationResource.dispatch(PeerReplicationResource.java:113) ~[eureka-core-1.4.6.jar:1.4.6]
    at com.netflix.eureka.resources.PeerReplicationResource.batchReplication(PeerReplicationResource.java:85) ~[eureka-core-1.4.6.jar:1.4.6]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_74]
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_74]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_74]
    at java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.8.0_74]
```

[Here are the details](https://github.com/spring-cloud/spring-cloud-netflix/issues/1065) to reproduce the problem.""I sent him here as the NPE is in pure eureka code 
 =||= Thanks @spencergibb. Looking at the the issue on the spring cloud netflix issue and the code, I see that the NPE is due to an out of order creation of a metrics counter. This is a harmless NPE that should only happen at init time. We will take a look at a simple PR to address this regardless.

The details: this is caused due to the second server not completing initialization (specifically, the openForTraffic() method on the local registry that creates the metrics counter in question) before having the first server heartbeat to the second server, and trying to log the renew metrics on an as yet non-existent metrics counter.
 =||= Fix will be available in the next release.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
804How long is the registration information retained on the client side after eureka server closedmagicDong8806/22/16, 05:55:05 AM"Application(A) as a service was registered in the eureka server, so another application(B) was able to call the service (A) by eureka client. Then I shutdown the eureka server, What I'm confused about is that the app(B) still was able to call the service(A) during about 30 seconds. 
Could you please explain how long is the registration information retained on the client side after eureka server closed and which property affect the duration.
Thank you,""Hi, if you are using the provided java eureka-client, then the registry cache on the client side will be forever and does not expire. The data will update if (at least one) eureka server exist and is reachable, and if no eureka servers exist, then the cache will essentially be frozen in time. Note that the default DiscoveryClient.java implementation offers the method getLastSuccessfulRegistryFetchTimePeriod() for users to monitor for staleness of the local registry cache.

If by closing the server, you mean the shutdown of the server for Application(A), then the entries for Application(A) will be purged from the local cache of the client on Application(B). The time delays are:

A shutdown gracefully -> eureka server removes entries for A (0s delay)
A has a dirty shutdown -> eureka server evicts entries for A (90s delay)
        +
B cache update -> B see cache update for removal of A (0-30s cache refresh cycle)

Also please note that if you run with a small number if instances, you may be subject to self-preservation as described here (https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication), and may want to tune the self-preservation thresholds as necessary.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
805! Fix erroneous connectionIdleTimeout valueVincent Seguinvseguin06/14/16, 10:03:45 PM"This commit is related to issue [https://github.com/spring-cloud/spring-cloud-netflix/issues/729](https://github.com/spring-cloud/spring-cloud-netflix/issues/729).

When overriding the connectionIdleTimeout value, it was erroneously using a seconds value, although default value is in milliseconds.""@vseguin thank you for the fix!
 =||= "! Fix erroneous connectionIdleTimeout valueVincent Seguinvseguin06/14/16, 10:03:45 PM"This commit is related to issue [https://github.com/spring-cloud/spring-cloud-netflix/issues/729](https://github.com/spring-cloud/spring-cloud-netflix/issues/729).

When overriding the connectionIdleTimeout value, it was erroneously using a seconds value, although default value is in milliseconds."NaNvseguin06/13/16, 08:37:37 PM! Fix erroneous connectionIdleTimeout value1
806Fix (harmless) NPE at server startup due to init order on a metrics counterDavid Liuqiangdavidliu06/16/16, 08:22:14 PM#803"hey David, I can see that this change will fix the NPE problem, but wanted to suggest that an underlying problem is still present.  It looks like the root issue is that MeasuredRate doesn't manage its resources (Timer, TimerTask) in a way that's compatible with AbstractInstanceRegistry.  Since MeasuredRate starts its internal timer in construction, AbstractInstanceRegistry can't instantiate it until 'postInit' and that led to the NPE you fixed.  
If MeasuredRate had lifecycle methods (start, stop) to handle timer activity, then it could be constructed immediately by AbstractInstanceRegistry and avoid NPEs altogether.  Additionally the 'stop' method would enable AbstractInstanceRegistry to free up its resources on shutdown().
 =||= looks good.  I had one comment on use of 'volatile' but not a blocker.
 =||= "Fix (harmless) NPE at server startup due to init order on a metrics counterDavid Liuqiangdavidliu06/16/16, 08:22:14 PM#803NaNDavid Liu06/16/16, 07:34:23 PMAdding start and stop for MeasuredRate1
807Prefer javax.inject provider over guiceMatt Nelsonmattnelson06/17/16, 10:15:51 PM"The guice provider[1] has been updated to extend the javax.inject provider. When supplying a custom provider such as the health check handler provider the contract can be relaxed to the base type.

[1] http://static.javadoc.io/com.google.inject/guice/4.0/com/google/inject/Provider.html
[2] https://github.com/Netflix/eureka/blob/v1.4.8/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L255-260""We have to do some odd workarounds for eureka's guice dependency sometimes https://github.com/spring-cloud/spring-cloud-netflix/commit/89e893fc9bfcbbd4fb531453430638d25ea8ee41
 =||= Addressed with #808 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
808Prefer javax.inject Provider over guice Provider for #807Matt Nelsonmattnelson06/16/16, 09:51:41 PMMade the changes to prefer the javax.inject Provider over the guice Provider where possible. The remaining usages of the guice provider are blocked by https://github.com/google/guice/pull/926."Thanks @mattnelson 
 =||= "Prefer javax.inject Provider over guice Provider for #807Matt Nelsonmattnelson06/16/16, 09:51:41 PMMade the changes to prefer the javax.inject Provider over the guice Provider where possible. The remaining usages of the guice provider are blocked by https://github.com/google/guice/pull/926.NaNMatt Nelson06/15/16, 10:14:28 PMPrefer javax.inject Provider over guice Provider for #8071
809Deploy on WildflyKennedy Oliveirakennedyoliveira07/12/16, 08:05:08 PM"Hi everyone,

i tried to deploy the eureka-server on Wildfly, but it's not working, i think there's something with Jersey, i don't have knowledge about Jersey, so my doubt is, it's possible to deploy it on Wildfly? 

There's something special about using Jersey instead of another JAX-RS implementation?

By the way, the problem deploying on Wildfly is: 

```
2016-06-17 00:56:00,823 INFO  com.sun.jersey.server.impl.application.WebApplicationImpl:815 [default task-2] [_initiate] Initiating Jersey application, version 'Jersey: 1.19 02/11/2015 03:25 AM'
2016-06-17 00:56:01,054 ERROR com.sun.jersey.server.impl.application.RootResourceUriRules:98 [default task-2] [<init>] The ResourceConfig instance does not contain any root resource classes.
00:56:01,056 ERROR [io.undertow.request] (default task-2) UT005023: Exception handling request to /eureka/v2/apps/: com.sun.jersey.api.container.ContainerException: The ResourceConfig instance does not contain any root resource classes.
    at com.sun.jersey.server.impl.application.RootResourceUriRules.<init>(RootResourceUriRules.java:99)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._initiate(WebApplicationImpl.java:1359)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.access$700(WebApplicationImpl.java:180)
    at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:799)
    at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:795)
    at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:193)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790)
    at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:509)
    at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:339)
    at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605)
    at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207)
    at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:394)
    at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:744)
    at io.undertow.servlet.core.LifecyleInterceptorInvocation.proceed(LifecyleInterceptorInvocation.java:111)
    at org.wildfly.extension.undertow.security.RunAsLifecycleInterceptor.init(RunAsLifecycleInterceptor.java:84)
    at io.undertow.servlet.core.LifecyleInterceptorInvocation.proceed(LifecyleInterceptorInvocation.java:97)
    at io.undertow.servlet.core.ManagedFilter.createFilter(ManagedFilter.java:79)
    at io.undertow.servlet.core.ManagedFilter.getFilter(ManagedFilter.java:65)
    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)
    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
    at com.netflix.eureka.GzipEncodingEnforcingFilter.doFilter(GzipEncodingEnforcingFilter.java:48)
    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)
    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
    at com.netflix.eureka.ServerRequestAuthFilter.doFilter(ServerRequestAuthFilter.java:52)
    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)
    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
    at com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)
    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
    at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
    at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
    at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
    at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)
    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)
    at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
    at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
    at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
    at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
    at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)
    at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
    at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:284)
    at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263)
    at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
    at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174)
    at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202)
    at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:793)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)

2016-06-17 00:56:01,092 WARN  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient:127 [ServerService Thread Pool -- 5] [execute] Request execution failure with status code 500; retrying on another server if available
2016-06-17 00:56:01,092 ERROR com.netflix.discovery.DiscoveryClient:951 [ServerService Thread Pool -- 5] [fetchRegistry] DiscoveryClient_EUREKA/MacBook.local - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
    at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
    at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1030)
    at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:944)
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:444)
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
    at com.netflix.eureka.EurekaBootStrap.initEurekaServerContext(EurekaBootStrap.java:147)
    at com.netflix.eureka.EurekaBootStrap.contextInitialized(EurekaBootStrap.java:96)
    at io.undertow.servlet.core.ApplicationListeners.contextInitialized(ApplicationListeners.java:187)
    at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:198)
    at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:100)
    at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:82)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
    at org.jboss.threads.JBossThread.run(JBossThread.java:320)
2016-06-17 00:56:01,093 WARN  com.netflix.discovery.DiscoveryClient$1:325 [ServerService Thread Pool -- 5] [get] Using default backup registry implementation which does not do anything.
```""@kennedyoliveira unfortunately we have not tried out any deployments on Wildfly, and I am not sure if any one in the community have tried this either. It might be worth while asking this question in the Eureka Google Group to see if anyone from the community respond.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
810Old 'javax.ws.rs' libraryWaldemar RittscherWrittscher06/28/16, 09:36:34 PM"I've come across some nasty dependency clashes by using eureka-client jar and some newer libraries. Eureka-Client jar does depend on **jsr311** which is the old specification. Some of my dependecies do require **javax.ws.rs-api** which is the new one. For example **javax.ws.core.Response** is different in the new version and this causes some troubles for me. I've exluded the old one but this is just a ticking bomb.

Are there plans to migrate to the new api specification?""@Writtscher we have decided to take a different direction and will be making the client side of eureka independent of jaxrs completely. Work is being done internally, however we don't have any timelines that can be shared as of yet.
 =||= Well thanks for the quick answer. I'm fine for now pulling the new library and exclude the _jsr311_ dependecy as there is no failure at the moment. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
811Fixing a potential registration race condition as described in issue #802David Liuqiangdavidliu06/28/16, 09:36:15 PM"issue #802

Enable new behaviour via:
eureka.experimental.registry.registration.ignoreIfDirtyTimestampIsOlder=true"NaNFixing a potential registration race condition as described in issue #802David Liuqiangdavidliu06/28/16, 09:36:15 PM"issue #802

Enable new behaviour via:
eureka.experimental.registry.registration.ignoreIfDirtyTimestampIsOlder=true"NaNDavid Liu06/28/16, 09:10:27 PMupdate comments1
812com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory not workingbitsofinfobitsofinfo07/14/16, 05:20:10 PM"on 1.4.8

When this `DiscoveryClient` constructor is invoked

`public DiscoveryClient(ApplicationInfoManager applicationInfoManager, final EurekaClientConfig config, DiscoveryClientOptionalArgs args) {`

The system property `com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory=true` does not seem to be obeyed.

Trying to solve this kind of exception:

```
2016-07-05 18:53:58.676  INFO 655 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_MYAPP/hosa222:myapp-config:8888: registering service...
2016-07-05 18:53:58.683 ERROR 655 --- [nfoReplicator-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error

com.sun.jersey.api.client.ClientHandlerException: javax.net.ssl.SSLException: Certificate for <localhost> doesn't match common name of the certificate subject: my-ssl-test
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.4.8.jar:1.4.8]
        at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:56) ~[eureka-client-1.4.8.jar:1.4.8]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.4.8.jar:1.4.8]
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.4.8.jar:
```

This is set on `EurekaClientFactoryBuilder` the via the deprecated setter `withSystemSSLConfiguration`... but the executing code making the http call is consuming from `EurekaJerseyClientImpl.EurekaJerseyClientBuilder.MyDefaultApacheHttpClient4Config` where the value is false.

Seems like the bug is in the `buildLegacy` method of `JerseyEurekaHttpClientFactoryBuilder`""@bitsofinfo thanks. PR #813 should be a fix.
 =||= Thank you, such a quick response. Thanks man
 =||= @bitsofinfo give 1.4.10-rc.1 a try and see if it fixes your issue?
 =||= thanks, Yes I ran the 1.4.10-rc.1 in a debugger in my app and now it properly invokes `createSystemSslCM()`  when `buildLegacy` is invoked. 

@qiangdavidliu Quick question, what would be the best strategy to have this use a custom HostnameVerifier? I don't see a way to configure that. Should I open a separate ticket?
 =||= @Jumpy-Squirrel does this solve your issue at: https://github.com/spring-cloud/spring-cloud-netflix/issues/1077
 =||= Closing this issue as the specific issue to address is resolved. Custom hostname verifier is tracked in #816.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
813Propagate systemSSL config for client all the way throughDavid Liuqiangdavidliu07/06/16, 09:48:42 PMFix for #812NaNPropagate systemSSL config for client all the way throughDavid Liuqiangdavidliu07/06/16, 09:48:42 PMFix for #812NaNNaNNaNNaN1
814Eureka Server Basic HTTP Auth configurationMoiz Khanmoizkhan271208/24/16, 12:45:28 PM"Hi,

I've managed to get multiple Eureka servers up, running and synchronized without issue. Looking at the docs,class definitions and other forum posts, there doesn't seem to be a clear way to implement HTTP authentication server-side. Is this possible at all or not? It looks to be possible in the spring-cloud-netflix eureka repo from this [post](http://stackoverflow.com/questions/28974752/securing-eureka-in-spring-cloud).

Thanks & Regards,
Moiz Khan""@moizkhan2712 our internal set-up do SSL via fronting the eureka tomcat servers with an apache layer.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
815client for elasticsearchKrishna Gangarajugangakrishh07/12/16, 07:58:37 PMDo we've any plugin or client for elasticsearch to be register with Eureka?"https://github.com/Netflix/Raigad is one possible solution.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
816Add support for custom HostnameVerifierbitsofinfobitsofinfo05/30/19, 11:09:53 PM"There seems to be no way to specify a custom HostnameVerifier for the DiscoveryClient.

Can this support be easily added?

See #812 ""Hi @bitsofinfo that sounds like a useful addition for eureka. We are a bit swamped with other work at this moment, would you like to try a PR for this feature? Thanks.
 =||= This has been released with 1.8.5

https://github.com/Netflix/eureka/releases/tag/v1.8.5 =||= should this be closed? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
817Rewrite status override logic in registry using a rule frameworkNikos Michalakisdrtechniko07/22/16, 06:14:15 PMNaN"@qiangdavidliu Here you go. Let's chat so I can fill you in if you have any questions.
 =||= There is more room for making this more DI friendly (AwsInstanceRegistry for example) but I didn't want to stir the waters too much in this PR.
 =||= Minor quibbles, but LGTM. Thanks for the PR.
 =||= "Rewrite status override logic in registry using a rule frameworkNikos Michalakisdrtechniko07/22/16, 06:14:15 PMNaNNaNNikos Michalakis07/22/16, 05:46:51 PMAddress review feedback.1
818"IndexOutOfBounds Exception thrown repeatedly when Eureka has no EIPs containing ""ec2-"""robertnosburn05/30/19, 11:09:53 PM"The EIPManager has a running task that looks to bind Eureka to EIPs.  In our case we are writing an application which is hosted in AWS but will not be publicly available and will be accessible ONLY from our corporate network.

We have an AWS Direct Connect to our corporate environment.  My EC2 container running my docker images, including Eureka, does not have a public nor elastic IP address.  In this case the only ""ec2Urls"" value is ""http://localhost:8761"".

EIPManager.getEIPsFromServiceUrls(List<String> ec2Urls) (line:346-349) does not handle this case and line 347 will throw:
java.lang.StringIndexOutOfBoundsException: String index out of range: -4
        at java.lang.String.substring(String.java:1967) ~[na:1.8.0_91]
        at com.netflix.eureka.aws.EIPManager.getEIPsFromServiceUrls(EIPManager.java:342) ~[eureka-core-1.4.6.jar!/:1.4.6]
        at com.netflix.eureka.aws.EIPManager.getEIPsForZoneFromConfig(EIPManager.java:322) ~[eureka-core-1.4.6.jar!/:1.4.6]
        at com.netflix.eureka.aws.EIPManager.getCandidateEIPs(EIPManager.java:304) ~[eureka-core-1.4.6.jar!/:1.4.6]
        at com.netflix.eureka.aws.EIPManager.isEIPBound(EIPManager.java:157) ~[eureka-core-1.4.6.jar!/:1.4.6]
        at com.netflix.eureka.aws.EIPManager$EIPBindingTask.run(EIPManager.java:412) ~[eureka-core-1.4.6.jar!/:1.4.6]
        at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_91]
        at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_91]

I propose a check to ensure that the index is greater than -1 before parsing the substrings.

See #819  as a potential fix.

Thanks,

Robert""Hi @robertnosburn thank you for the PR. Looking at your usecase, it seems like what you would prefer is that the EIPBinder not run at all?

Eureka servers need to have fixed IPs, and EIP is one mechanism that we use to guarantee that in a cloud environment. However if you are able to guarantee that via some other mechanism, then possibly a better way to disable the errors from the EIPBinder is to not initialize the EIPBinder at all.

Eureka server currently support a configuration AwsBinder strategy (see https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/AwsBinderDelegate.java) where configuration (eureka. awsBindingStrategy=<EIP, ROUTE53, ENI>) can be used to define the binder type. What about a proposal that we add a fourth option (NOOP for a no-op binder) to that set of binders, which you can then configure via properties in your setup?
 =||= Hi David,

I think that you are correct, I do not have any EIPs and so the EIPBinder would be unnecessary.  My Eureka runs in a docker container in an ec2 instance with a loadbalancer and a route-53 entry pointing to it.  This is how it's getting a fixed IP.  My microservices with Eureka clients know the location of the Eureka server by it's route-53 cname.  It does not need an internet routable.

Looking through the code I also saw ""e-ipbind-rebind-retries"", which I tried setting to 0 in my application.yml both as 
`eureka:`
`e-ipbind-rebind-retries: 0`
`e-ipbinding-retry-interval-ms-when-unbound: 86400000`

and 
`eureka:`
`server:`
`e-ipbind-rebind-retries: 0`
`e-ipbinding-retry-interval-ms-when-unbound: 86400000`

It looked as though this would allow the Binder to run once per day and not actually try to do the bind, but for some reason these values weren't getting picked up.

So yes, if I could persuade the EIPBinder to not run, that would be ideal.

As a side note, I think that my PR should still stand, it's probably not a bad idea to validate an index before using it in a substring, don't you think?

Thanks and Regards
 =||= David,

I found the ""eureka.server.binding-strategy"" and set it to route53.  This causes a NPE on the EurekaController:

2016-07-20 23:44:54.878 ERROR 5 --- [nio-8761-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
        at org.springframework.cloud.netflix.eureka.server.EurekaController.getServerContext(EurekaController.java:143) ~[spring-cloud-netflix-eureka-server-1.1.4.RELEASE.jar!/:1.1.4.RELEASE]
        at org.springframework.cloud.netflix.eureka.server.EurekaController.getRegistry(EurekaController.java:139) ~[spring-cloud-netflix-eureka-server-1.1.4.RELEASE.jar!/:1.1.4.RELEASE]

Thoughts?
Thanks,
 =||= @robertnosburn I buy your point, thanks. Have merged your PR in. As for the route53binder, let me take a look at that. We don't actually use that binder optional at Netflix and it was contributed to us by an external user, so it may have quirks that's specific for their use case. 
 =||= David,

Digging a little further, the actual exception is:
java.lang.RuntimeException: Cannot bootstrap eureka server :
        at org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap.contextInitialized(EurekaServerBootstrap.java:87) ~[spring-cloud-netflix-eureka-server-1.1.4.RELEASE.jar!/:1.1.4.RELEASE]
        at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$1.run(EurekaServerInitializerConfiguration.java:70) ~[spring-cloud-netflix-eureka-server-1.1.4.RELEASE.jar!/:1.1.4.RELEASE]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.lang.NoSuchMethodError: com.amazonaws.AmazonWebServiceRequest.copyPrivateRequestParameters()Ljava/util/Map;
        at com.amazonaws.services.route53.AmazonRoute53Client.invoke(AmazonRoute53Client.java:1544) ~[aws-java-sdk-route53-1.9.3.jar!/:na]
        at com.amazonaws.services.route53.AmazonRoute53Client.listHostedZones(AmazonRoute53Client.java:382) ~[aws-java-sdk-route53-1.9.3.jar!/:na]
        at com.netflix.eureka.aws.Route53Binder.getHostedZone(Route53Binder.java:238) ~[eureka-core-1.4.9.jar!/:1.4.9]
        at com.netflix.eureka.aws.Route53Binder.getResourceRecordSetWithHostedZone(Route53Binder.java:212) ~[eureka-core-1.4.9.jar!/:1.4.9]
        at com.netflix.eureka.aws.Route53Binder.doBind(Route53Binder.java:109) ~[eureka-core-1.4.9.jar!/:1.4.9]
        at com.netflix.eureka.aws.Route53Binder.start(Route53Binder.java:89) ~[eureka-core-1.4.9.jar!/:1.4.9]

However that method exists in the 1.9.3 version of the aws-sdk-core jar.

BUT..

A dependency:tree on my project reveals:
[INFO] |  |  +- com.netflix.eureka:eureka-core:jar:1.4.9:compile
[INFO] |  |  |  +- com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime
[INFO] |  |  |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.10.30:runtime
[INFO] |  |  |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.9.3:runtime
[INFO] |  |  |  +- com.amazonaws:aws-java-sdk-sts:jar:1.9.3:runtime
[INFO] |  |  |  +- com.amazonaws:aws-java-sdk-route53:jar:1.9.3:runtime

I have performed a thorough search and I cannot see any reason why v1.10.30 of ec2 and core should be included, instead of the 1.9.3, as specified in the gradle files in tag v1.4.9

Thanks,
 =||= @robertnosburn, @qiangdavidliu   I have a problem with aws-java-sdk-core:jar:1.10.30:runtime and aws-java-sdk-ec2:jar:1.10.30:runtime dependencies as well.
Notice:
I am using aws-java-sdk-sqs:1.10.72 which depends on aws-java-sdk-core:jar:1.10.72
I am using eureka-core:jar:1.4.10 which depends on aws-java-sdk-core:jar:1.9.3 and aws-java-sdk-ec2:jar:1.9.3
Dependency tree for -Dincludes=com.amazonaws:
[INFO] |  - com.amazonaws:aws-java-sdk-sqs:jar:1.10.72:compile
[INFO] |     - (com.amazonaws:aws-java-sdk-core:jar:1.10.30:compile - version managed from 1.10.72; omitted for duplicate)
[INFO] +- org.springframework.cloud:spring-cloud-starter-eureka:jar:1.1.5.RELEASE:compile
[INFO] |  - com.netflix.eureka:eureka-core:jar:1.4.10:compile
[INFO] |     +- (com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-ec2:jar:1.10.30:runtime (version managed from 1.9.3)
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.9.3:runtime
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-sts:jar:1.9.3:runtime
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     - com.amazonaws:aws-java-sdk-route53:jar:1.9.3:runtime
[INFO] |        - (com.amazonaws:aws-java-sdk-core:jar:1.10.30:runtime - version managed from 1.9.3; omitted for duplicate)

Which causes java.lang.ClassNotFoundException: com.amazonaws.ClientConfigurationFactory

When I explicitly declare the dependency aws-java-sdk-core:1.10.72 it fixes my problem with the aws-java-sdk-core dependency and I can run my application, but the dependency tree still shows that something is forcing the version aws-java-sdk-ec2:jar:1.10.30

[INFO] |  - com.amazonaws:aws-java-sdk-sqs:jar:1.10.72:compile
[INFO] |     - (com.amazonaws:aws-java-sdk-core:jar:1.10.72:compile - omitted for duplicate)
[INFO] +- org.springframework.cloud:spring-cloud-starter-eureka:jar:1.1.5.RELEASE:compile
[INFO] |  - com.netflix.eureka:eureka-core:jar:1.4.10:compile
[INFO] |     +- (com.amazonaws:aws-java-sdk-core:jar:1.10.72:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-ec2:jar:1.10.30:runtime (version managed from 1.9.3)
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.72:runtime - version managed from 1.10.30; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.9.3:runtime
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.72:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     +- com.amazonaws:aws-java-sdk-sts:jar:1.9.3:runtime
[INFO] |     |  - (com.amazonaws:aws-java-sdk-core:jar:1.10.72:runtime - version managed from 1.9.3; omitted for duplicate)
[INFO] |     - com.amazonaws:aws-java-sdk-route53:jar:1.9.3:runtime
[INFO] |        - (com.amazonaws:aws-java-sdk-core:jar:1.10.72:runtime - version managed from 1.9.3; omitted for duplicate)

I took a look at the gradle and pom files of eureka-core:1.4.10 and both declare dependencies to aws-java-sdk-core:1.9.3 and aws-java-sdk-ec2:1.9.3 so I don't know what is forcing the version 1.10.30
 =||= @ibaiul can you double check to see that all of your aws-java-sdk-* dependencies are at the exact same patch version? Misalignment between the aws java sdk jar can cause these kind of errors. =||= @qiangdavidliu @robertnosburn I have similar requirement where I dont want any EIP binder is there a way to stop EIPManager  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
819Check the sub-string index value before trying to sub-string on it.robertnosburn07/21/16, 01:31:29 AM"See issue #818 -

In a private application with no elastic IPs exceptions will be thrown when there are no URLs containing ""ec2-"".  With this modification, the exception will not be thrown and the rest of the process will simply not bind to any EIPs.""@robertnosburn thanks for the PR.
 =||= "Check the sub-string index value before trying to sub-string on it.robertnosburn07/21/16, 01:31:29 AM"See issue #818 -

In a private application with no elastic IPs exceptions will be thrown when there are no URLs containing ""ec2-"".  With this modification, the exception will not be thrown and the rest of the process will simply not bind to any EIPs."NaNroberto07/19/16, 06:26:27 PMCheck the sub-string value before trying to sub-string on it.1
820How can i listen client register event in eureka server?ryan xufengbaicanhe07/29/16, 08:10:56 AMIs there any mechanism in **eureka server** ,that i can listen all eureka client register/deregister event, when i    catch the event,so i can send a notification to someone"Hi @fengbaicanhe the current eureka server implementation have some level of caching, and does not support real time notifications.
 =||= @qiangdavidliu  Is there any plan for this feature?
 =||= @fengbaicanhe there's nothing on that that we can commit to at the moment unfortunately.
 =||= ok, thanks @qiangdavidliu 
 =||= Hi @qiangdavidliu is there any detail explanation about cache level implementation? thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
821Support jersey2 for client/serverMatt Nelsonmattnelson08/23/16, 11:32:06 PM"Initial support for jersey2 for #600 

Deployed these changes to our local snapshot repository. I've been running our builds with the snapshot for the last week. I believe the only non-passive change for existing jersey1 consumers is the relocation of `DiscoveryClientOptionalArgs` from an inner class of `DiscoveryClient` this was because the optional args has a method to supply additional filters which the interface was changed with jaxrs2.
### client

Changed `DiscoveryClient` to accept a `TransportClientFactories` on the optional args class to support supplying the jersey2 transport client factory.

``` java
Jersey2DiscoveryClientOptionalArgs args = new Jersey2DiscoveryClientOptionalArgs();
args.setTransportClientFactories(Jersey2TransportClientFactories.getInstance());
DiscoveryManager.getInstance().initComponent(new MyDataCenterInstanceConfig(), new DefaultEurekaClientConfig(), args);
```
### server

Added `EurekaServerContextBinder` to use the hk2 injectors for `EurekaServerContext`. The `GuiceFilter` is no longer required to be on the filter chain. I did not create a `eureka-server-jersey2` module since I am not deploying eureka-server as a war. Added `Jersey2EurekaBootStrap` which uses the client/server jersey2 classes for peer replication.

``` java
// Expects that you have already initialized the discovery client
new Jersey2EurekaBootStrap(DiscoveryManager.getInstance().getDiscoveryClient()
```""@mattnelson thank you for the PR! Much appreciated. I'll take a look at this as soon as I can.
 =||= @mattnelson are you running both jersey2 client and server in your set up, or just the client?
 =||= @spencergibb you'll be interested in this PR too.
 =||= @qiangdavidliu 

> are you running both jersey2 client and server in your set up, or just the client?

I am running both client and server. The environment I'm using has 4 clients and 1 server (I'll work on getting another server integrated to verify cluster replication) that are able to register and use ribbon with `DiscoveryEnabledNIWSServerList`.
 =||= @mattnelson much appreciated. It would be good to have some confirmation that replication is also unaffected once you have >1 server running.
 =||= Addressed comments on 7dbea2d1e1b5d3d2e816593f8542a27107cdc10d
 =||= @qiangdavidliu Finally had a chance to validate replication.

Had 36 clients register with a cluster of 3 eureka servers. Then had an additional 2 eureka servers that were only configured with the other 3 eureka servers to ensure that the apps they got were only through replication. Took a while because I had to trace down a bug in `PeerEurekaNodes. isThisMyUrl`[1] and `EurekaTransportConfig.applicationsResolverUseIp`[2]. The virtualization environment I was using only supports IP resolution. I'll get a PR out for those changes as it will be a blocker for me to validate a release candidate of these changes.

[1] https://github.com/Netflix/eureka/blob/v1.4.10/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNodes.java#L230-L234
[2] https://github.com/Netflix/eureka/blob/v1.4.10/eureka-client/src/main/java/com/netflix/discovery/shared/transport/EurekaTransportConfig.java#L31
 =||= @mattnelson great to hear, thanks!
 =||= @qiangdavidliu Is there anything else you need in order to get this PR merged?
 =||= @mattnelson nothing major, I just thought (per your last message) that you were making some additional changes to the PR for replication?
 =||= I can include them with this PR if you want, but they are not related to the jersey2 uplift. They are isolated to running eureka in IP address resolver transport mode.
 =||= Ah. In that case then all good. A separate PR would be better if they are unrelated. Let me make a release of eureka without this going in first to have an artifact for the current head before merging this in.
 =||= Created #831 for the IP address transport issue.
 =||= @qiangdavidliu Now that https://github.com/Netflix/eureka/releases/tag/v1.4.11 is released, are there any other blockers? 
 =||= @mattnelson I'm looking at merging this in and doing a release. There is one last issue where due to the move of ""DiscoveryClientOptionalArgs"" it creates a minor api incompatibility. I am assessing the blast radius of this at the moment.
 =||= @mattnelson there are a few small changes that I would like to make to this PR, but in the interest of not blocking you further, what do you say to moving this PR to against the (newly created) ""contrib/jersey2"" branch, where we can merge it in, and then I will make some PRs for the minor changes before we moving it back into master?

edit: I'm actually able to change the base branch, so have done the above.
 =||= @mattnelson Can you please share any documentation available to use Eureka with Jersey2. I am looking to run Eureka Server as a packaged web app in a servlet container which isn't compatible with Jersey 1. =||= "Support jersey2 for client/serverMatt Nelsonmattnelson08/23/16, 11:32:06 PM"Initial support for jersey2 for #600 

Deployed these changes to our local snapshot repository. I've been running our builds with the snapshot for the last week. I believe the only non-passive change for existing jersey1 consumers is the relocation of `DiscoveryClientOptionalArgs` from an inner class of `DiscoveryClient` this was because the optional args has a method to supply additional filters which the interface was changed with jaxrs2.
### client

Changed `DiscoveryClient` to accept a `TransportClientFactories` on the optional args class to support supplying the jersey2 transport client factory.

``` java
Jersey2DiscoveryClientOptionalArgs args = new Jersey2DiscoveryClientOptionalArgs();
args.setTransportClientFactories(Jersey2TransportClientFactories.getInstance());
DiscoveryManager.getInstance().initComponent(new MyDataCenterInstanceConfig(), new DefaultEurekaClientConfig(), args);
```
### server

Added `EurekaServerContextBinder` to use the hk2 injectors for `EurekaServerContext`. The `GuiceFilter` is no longer required to be on the filter chain. I did not create a `eureka-server-jersey2` module since I am not deploying eureka-server as a war. Added `Jersey2EurekaBootStrap` which uses the client/server jersey2 classes for peer replication.

``` java
// Expects that you have already initialized the discovery client
new Jersey2EurekaBootStrap(DiscoveryManager.getInstance().getDiscoveryClient()
```"NaNMatt Nelson07/26/16, 07:47:57 PMAddress PR comments1
822Moving experimental replication fix to defaultDavid Liuqiangdavidliu07/21/16, 09:25:16 PM"Ref PR #811 
Fix for issue #802 
Making the fix default now that is has been tested in production."NaNMoving experimental replication fix to defaultDavid Liuqiangdavidliu07/21/16, 09:25:16 PM"Ref PR #811 
Fix for issue #802 
Making the fix default now that is has been tested in production."NaNDavid Liu07/21/16, 09:11:00 PMMoving experimental replication fix to default1
823VPC DeploymentsRommel TinocoShadySQL07/27/16, 03:06:14 PMNot sure where to ask this - marked also a question on the google group. I essentially want to know if Eureka only supports deployments of EIP. I dont want to advertise all our services to the world. "Hi @ShadySQL eureka support other forms of fixed addresses. such as ENI and Route53 DNS (which in EC2 vpc can be private). In all cases (EIP or otherwise) you can secure your service with Security Groups.

See https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java#L664 where you can supply the binding strategy via eureka.awsBindingStrategy=...
 =||= @qiangdavidliu what value to provide for `eureka.serviceUrl.us-east-1a=` ??
As private IP's are assigned automatically so we can not hardcode in the code ?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
824Fix typo in EurekaInstanceConfigRichard BenkovskyBenky08/11/16, 07:43:43 PMNaN"Thanks for the contribution @Benky 
 =||= "Fix typo in EurekaInstanceConfigRichard BenkovskyBenky08/11/16, 07:43:43 PMNaNNaNRichard Benkovsky08/02/16, 04:18:07 AMFix typo in EurekaInstanceConfig1
825Where does eureka store the registration data?silentAllay08/09/16, 03:38:42 AMWhere does eureka store the registration data? in Memory? or both memory and file?"I'm memory
 =||= if all the eureka servers crash, how to recover registration data?
 =||= @killjason if it all crashes the data will be rebuilt by the service registration heartbeat. As the first startup happens.
 =||= @marcosbarbero , OK, got it, thx~
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
826Problems getting maven project configured with eureka-clientJesse Shafferdajester201308/03/16, 02:30:58 PM"I imported the eureka-client dependency into my maven project, in an attempt to build an app based on http://sparkjava.com (instead of spring) that would register as a client.  I've used https://github.com/Netflix/eureka/tree/master/eureka-examples/src/main/java/com/netflix/eureka as a guide to some degree of success:

The project compiles and runs fine within Eclipse, but trying to compile with maven from the command line fails with something to the effect of ""package not found com.netflix.config"".  Looking at the client's pom, all of its dependencies are marked runtime.  Apparently, Eclipse is cool with that and uses those dependencies when compiling anyways, however the command-line fails.

What is the best way to get around this?  Actually, what I really want to know is if anyone have a non-spring, maven example project that uses eureka-client to register RESTful services?""For some background on the runtime dependencies issue with nebula, see: https://github.com/nebula-plugins/nebula-publishing-plugin/issues/31

The simplest short term work around I know of would be to just add the dependency directly to your project rather than relying on it being transitive. For `com.netflix.config` specifically, the dependency below provides that package:

https://mvnrepository.com/artifact/com.netflix.archaius/archaius-core/0.7.4
 =||= thanks for the info - i posted a comment there with a suggested fix from the gradle forums.  it's really unfortunate that i either have to use gradle or spend so much time inspecting eureka's (or any other netflix-developed component's) dependency tree and manually configuring my maven dependencies.  that is a complete waste of my time, and speaks very poorly of gradle to me.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
827register only one rest/method/class to Eureka serversilentAllay08/03/16, 04:21:23 PM"In the Eureka client application, we defined 'spring.application.name'  in the file 'application.properties'.
so this application will register to Eureka server, If I just want to register one rest/method/class of this Eureka client application, How should I do?""This is the wrong repo to ask. Use spring cloud Netflix please.
 =||= @spencergibb , OK, I create a issue in spring cloud netflix:
https://github.com/spring-cloud/spring-cloud-netflix/issues/1222
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
828Eureka-server.properties has content of MANIFEST.MF on distributionsMiguelmiggy900103/16/17, 06:12:38 PMFor Eureka-client since version 1.4.6 the Eureka-server.properties file has the exact same content as the MANIFEST.MF inside of the META-INF folder. So when deployed the default file reflects that of MANIFEST.MF. (Issue in version 1.4.7-rc.3 to current version 1.4.11-rc.1)"Hi @miggy8234 do you mean the configuration based eureka-server.properties? The one that is sourced by the configuration system (archaius) should be under the path WEB-INF/classes/eureka-server.properties .
 =||= Hello @qiangdavidliu , No I mean if I download the latest jar from the maven central repository and deploy it to a server. The eureka.property files will have the same content as the MANIFEST.MF.

Downloaded from here: http://search.maven.org/#search%7Cga%7C1%7Ceureka-client
 =||= Hi @miggy8234 your link is for the client (eureka-client), do you mean the client or the server? For the eureka server themselves, you'll need to build them as a war which packages in the eureka-server.properties prop file.
 =||= It's the war file itself:
https://repo1.maven.org/maven2/com/netflix/eureka/eureka-server/1.5.3/eureka-server-1.5.3.war

Take a look at **META-INF/eureka-server.properties**
 =||= Hi @rs017991 the correct property file is in the war at **/WEB-INF/classes/eureka-server.properties**. The file in META-INF may have the same name, but that is purely an artifact of the war name and is auto generated by the build. It does not affect actual property loading of the property file.

Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
829my eureka server cluster have a exceptionLeelijunyong09/02/16, 08:50:02 PM"2016-08-08 17:18:08.999 DEBUG 12076 --- [nio-7001-exec-7] o.a.coyote.http11.Http11NioProcessor     : Error parsing HTTP request header

java.io.EOFException: Unexpected EOF read on the socket
    at org.apache.coyote.http11.InternalNioInputBuffer.fill(InternalNioInputBuffer.java:152) ~[tomcat-embed-core-8.0.33.jar:8.0.33]
    at org.apache.coyote.http11.AbstractNioInputBuffer.parseRequestLine(AbstractNioInputBuffer.java:190) ~[tomcat-embed-core-8.0.33.jar:8.0.33]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) ~[tomcat-embed-core-8.0.33.jar:8.0.33]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672) [tomcat-embed-core-8.0.33.jar:8.0.33]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502) [tomcat-embed-core-8.0.33.jar:8.0.33]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458) [tomcat-embed-core-8.0.33.jar:8.0.33]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_40]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_40]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.33.jar:8.0.33]

is it normal?""Hi @lijunyong what environment (tomcat version etc) are you trying to run the server under? Thanks.
 =||= @qiangdavidliu tomcat 8.0.33
 =||= Hi @lijunyong we do have tomcat8 servers running as well, but I have not been able to repro this issue. Are you still seeing the problem? It might also be worthwhile asking this in the google group to see if the community has any idea. Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
830Does eureka server support server-side load balance strategy?silentAllay09/02/16, 08:47:19 PMAs I know, Ribbon supports client-side load balance strategy,Does eureka server support server-side load balance strategy?"Hi @killjason there is some very basic ""client side LB"" available via the default java client, see EurekaClient.getNextServerFromEureka(). However there are currently no LB rest endpoints exposed from the server.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
831Support eureka servers configured with IP addressesMatt Nelsonmattnelson08/23/16, 11:28:52 PM"When configuring the `eureka.serviceUrl.default` with IP addresses the comparisons performed in `PeerEurekaNodes` and `StatusUtil` prevent the instances from recognizing themselves and therefore never report themselves as available.

As discussed on #821 (https://github.com/Netflix/eureka/pull/821#issuecomment-237416131) follow PR.""Thanks for the fix!
 =||= "Support eureka servers configured with IP addressesMatt Nelsonmattnelson08/23/16, 11:28:52 PM"When configuring the `eureka.serviceUrl.default` with IP addresses the comparisons performed in `PeerEurekaNodes` and `StatusUtil` prevent the instances from recognizing themselves and therefore never report themselves as available.

As discussed on #821 (https://github.com/Netflix/eureka/pull/821#issuecomment-237416131) follow PR."NaNMatt Nelson08/17/16, 09:44:35 PMSupport eureka servers configured with IP addresses1
832jersey2 compatibility updatesDavid Liuqiangdavidliu08/26/16, 10:49:16 PM"- add missing client side filters
- changed some jersey2 interfaces to standardise on javax.wx.rs
- changed some eureka-jersey2 interfaces to be more inline with interfaces in eureka-jersey1
- added back DiscoveryClient.DiscoveryClientOptionalArgs which was part of the public API
- added README""@mattnelson this is an update to your PR #821
 =||= Changes look good so far. I'll pull this branch down early next week and verify in my test environment.
 =||= Cool, thanks. Merging it in then. Once you've verified that it is fine in your env, I'll move it into master and cut a release.
 =||= Finally had a chance to validate these changes. Verified client registration with 30+ clients, replication, client status changes, ribbon load balancing.
 =||= Great, thanks @mattnelson. I'll merge the jersey2 branch into master and have it released in the 1.6.0 release.
 =||= @qiangdavidliu till now you still working on 1.5.x release train
Kindly any dates when release 1.6.0 containing this PR will be released ?
 =||= Hi @adoura we had some internal needs that triggered the flurry of 1.5.x releases recently. It looking like that should be stabalizing, so we are tentatively looking at merging in the jersey2 support and cutting 1.6.x sometime this week.
 =||= "jersey2 compatibility updatesDavid Liuqiangdavidliu08/26/16, 10:49:16 PM"- add missing client side filters
- changed some jersey2 interfaces to standardise on javax.wx.rs
- changed some eureka-jersey2 interfaces to be more inline with interfaces in eureka-jersey1
- added back DiscoveryClient.DiscoveryClientOptionalArgs which was part of the public API
- added README"NaNDavid Liu08/26/16, 10:02:22 PMminor fix1
833Archaius2 client compatibilityDavid Liuqiangdavidliu09/06/16, 10:35:15 PMNaNNaNArchaius2 client compatibilityDavid Liuqiangdavidliu09/06/16, 10:35:15 PMNaNNaNDavid Liu09/06/16, 10:00:41 PMfix typos1
834How many service instances can one instance of eureka support?Zhou Taoiamzhout05/31/17, 07:42:50 AM"I have checked eureka wiki, and not found this kind of information.

Could you please share the performance matrix about Eureka? such as:
1.  How many service instances can one instance of Eureka support?
2.  How many CPU / memory should one eureka use under such condition?
3.  What's the original refresh interval for eureka client in such circumstances, and how many concurrent requests can eureka support, such as xx thousand tps?

Thanks,""Hi @iamzhout we don't have any exact numbers on the edge limits for eureka, and of course this also is highly dependent on the instance type that the servers are deployed on. To give you a rough idea:
1. eureka servers do not shard their registry, so from a memory footprint p.o.v. all servers will share the same restrictions. Having said that, we have typically found that network I/O being the bounding factor (by far) rather than cpu or memory, especially considering that the network out for queries will increase with the number of instances registered with eureka. 

We run a pretty limited number of servers internally (~10), which serves many 10s of thousands of clients. Having said that, these servers are running on the larger EC2 instance types. If the number of clients reduce, the number of servers can also be reduced.
1. See above regarding network I/O being the bigger bounding factor for eureka servers. Eureka servers does need some baseline amounts of CPU and memory to operate, probably something similar to an EC2 .2xl would be fine.
2. The original (if not overridden) refresh rate is 30seconds.
 =||= Thanks @qiangdavidliu for your reply.

Currently, we are doing some performance test purely on eureka to check its capability and performance in large scale, and found some problems during the process, mainly are:
1.  after registered 100,000 service instances to eureka, and then call delete API (~200 threads concurrently), eureka will be extremely slow of response
2.   after registered 10,000 service instances to eureka, and refresh server list with ""/eureka/v2/apps/delta"" API every 30 seconds (~200 threads), eureka will slow of response; and the response size is quite large, about 1MB for single request.

What's your suggestion on above performance issue, is it because we didn't call the correct API, use eureka in the right way, or it do have reached the uplimit of eureka itself?  What's the recommended/suitable refresh/hearbeat interval under 100s of thousands service instances?

Thanks,
Tao
 =||= Thanks for the update. I have some questions regarding your set up:
- are you testing with just a single eureka server, or with a cluster set up (and if so, how many instances?)
- with your 200 concurrent calls, are they (relating to the above) hitting the same server or distributed? what is the rate of these calls?

Address your questions without understanding of the two questions above, 
1. We typically run with a cluster set up (~10) as mentioned, so the requests would be shared between these servers. Additionally, we have independent deployments in different regions so the environment itself is effectively sharded.
2. We did encounter this issue as well, and resolve it by adding an autoscalable readonly proxy fleet internally. There is logic (disabled via configuration) inside eureka-client that handles logic regarding a redirect to only do reads from servers in the readonly fleet. The readonly fleet code has not been open sourced yet, but it is quite straight forward:

```
eureka-server's REST resource -> cache -> eureka-client connecting to write servers
```

see [EurekaTransportConfig.java](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/transport/EurekaTransportConfig.java) for the configs as well as javadoc.

Lastly, there are some server side optimizations that we have not enabled by default in OSS configs yet (mainly due to complexity of upgrading an existing deployment with these). 
- See [this setting](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java#L586) which enables batching for the server to server replication.
- Are you using the gzipEncodingEnforcingFilter? This is enabled by default in the provided example web.xml but your set up may be different.
 =||= Closing old issue. Please re-open if necessary. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
835Remove use of deprecated static accessor.Spencer Gibbspencergibb08/31/16, 06:48:13 PM"Add a builder method and check that instanceInfo is not null in build().

Found this in a test where the static singleton was null :-(""Thanks @spencergibb 
 =||= "Remove use of deprecated static accessor.Spencer Gibbspencergibb08/31/16, 06:48:13 PM"Add a builder method and check that instanceInfo is not null in build().

Found this in a test where the static singleton was null :-("NaNSpencer Gibb08/31/16, 04:36:45 PM"Remove use of deprecated static accessor.

Add a builder method and check that instanceInfo is not null in build()."1
836How to set hostname for eureka-client?silentAllay02/15/17, 09:43:27 AMHow to set hostname for eureka-client which is registered in eureka-server?"Hi @killjason the hostname should be automatically discovered by eureka-client.
 =||= @qiangdavidliu, what about the IP address? 
 =||= @killjason same for ip address as well. The client auto detects your hostname and IP via standard system calls, and then (optionally, if in EC2) overlays these with data retrieved from calling the ec2 instance metadata url.
 =||= @qiangdavidliu,what if the server have multi network interfaces?
 =||= @killjason we don't yet support multiple interfaces.
 =||= How does eureka-client decide which ip should use if have two interfaces?
 =||= @killjason if the server is running on Amazon, it defaults to eth0. Otherwise, the default interface is whatever will be picked up by InetAddress.getLocalHost().
 =||= @killjason You can pass your own implementation of PropertiesInstanceConfig to the ApplicationManager. This implementation can override getHostName() and getIpAddress() in a way you want.
 =||= @rfoltyns , I extends com.netflix.appinfo.MyDataCenterInstanceConfig to override getHostName() and getIpAddress(), is that OK?
 =||= @killjason yeah, MyDataCenterInstanceConfig also extends this class
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
837Improve TimedSupervisorTask concurrency handlingDavor Sauerd-sauer09/02/16, 01:26:29 PM"Don't schedule TimeSupervisorTask if scheduler is shutting down
Additional logging in case that executor and scheduler are shutting down.

I notice this when shutting down Tomcat server:

```
ERROR c.n.discovery.TimedSupervisorTask - task supervisor rejected the task
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@29004f06 rejected from java.util.concurrent.ThreadPoolExecutor@2d3fcefe[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 17]
        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)
        at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)
        at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)
        at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:62)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
```

this fix should show those error more gracefully"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
838Don't schedule TimeSupervisorTask if scheduler is shutting down.Davor Sauerd-sauer09/02/16, 05:25:42 PM"Don't schedule TimeSupervisorTask if scheduler is shutting down
Additional logging in case that executor and scheduler are shutting down.

I notice this when shutting down Tomcat server:

```
ERROR c.n.discovery.TimedSupervisorTask - task supervisor rejected the task
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@29004f06 rejected from java.util.concurrent.ThreadPoolExecutor@2d3fcefe[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 17]
              at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)
              at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)
              at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)
              at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)
              at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:62)
              at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
              at java.util.concurrent.FutureTask.run(FutureTask.java:266)
              at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
              at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
              at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
              at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
              at java.lang.Thread.run(Thread.java:745)
```

this fix should show those error more gracefully""@d-sauer thanks for the contribution!
 =||= How to avoid this waing? =||= "Don't schedule TimeSupervisorTask if scheduler is shutting down.Davor Sauerd-sauer09/02/16, 05:25:42 PM"Don't schedule TimeSupervisorTask if scheduler is shutting down
Additional logging in case that executor and scheduler are shutting down.

I notice this when shutting down Tomcat server:

```
ERROR c.n.discovery.TimedSupervisorTask - task supervisor rejected the task
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@29004f06 rejected from java.util.concurrent.ThreadPoolExecutor@2d3fcefe[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 17]
              at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)
              at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)
              at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)
              at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)
              at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:62)
              at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
              at java.util.concurrent.FutureTask.run(FutureTask.java:266)
              at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
              at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
              at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
              at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
              at java.lang.Thread.run(Thread.java:745)
```

this fix should show those error more gracefully"NaNDavor Sauer09/02/16, 10:04:03 AM"Don't schedule TimeSupervisorTask if scheduler is shutting down.
Additional logging in case that executor and scheduler are shutting down."1
839How to init TWO eureka-clients using plain java code WITHOUT properties files?silentAllay09/06/16, 04:57:54 PMHow to init TWO eureka-clients using plain java code WITHOUT properties files?"@killjason you can just create them using the constructor. See some examples here:
https://github.com/Netflix/eureka/blob/master/eureka-examples/src/main/java/com/netflix/eureka/ExampleEurekaClient.java
 =||= @qiangdavidliu, the example still use the property file:sample-eureka-client.properties.
How to set properties value in java code dynamicly?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
840EIP publicip association not correctly updated on fresh instancenick-pww09/09/16, 08:43:03 PM"Seem to have found an problem with public EIP address association not being correctly updated when a new AWS server starts and has a new Eureka server starting with it. When the server starts up, it correctly registers itself:

```
2016-09-06 15:55:29.040  WARN 3399 --- [Thread-10] com.netflix.eureka.aws.EIPManager        : The selected EIP 54.67.102.122 is associated with another instance i-0666b391 according to AWS, hence skipping this
2016-09-06 15:55:29.628  INFO 3399 --- [Thread-10] com.netflix.eureka.aws.EIPManager        :


Associated i-25f11391 running in zone: us-west-1c to elastic IP: X.X.X.X
```

But, every minute after that we get the following log entry:

```
2016-09-06 16:24:55.568  INFO 3399 --- [Eureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node
2016-09-06 16:24:55.568  INFO 3399 --- [Eureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1
2016-09-06 16:24:55.568  INFO 3399 --- [Eureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Priming AWS connections for all replicas..
2016-09-06 16:24:55.568  INFO 3399 --- [Eureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : No peers needed to prime.
2016-09-06 16:24:55.568  INFO 3399 --- [Eureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP
2016-09-06 16:24:55.713  WARN 3399 --- [Eureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : The selected EIP X.X.X.X is associated with another instance i-0666b391 according to AWS, hence skipping this
2016-09-06 16:24:55.804  INFO 3399 --- [Eureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-25f11391 seems to be already associated with the EIP X.X.X.X
```

Debugging this, the call to `isEIPBound()` is always failing, and this is because the following is always `null`:

```
String myPublicIP = ((AmazonInfo) myInfo.getDataCenterInfo()).get(MetaDataKey.publicIpv4);
```

It looks like there is stale datacenterinfo and it never gets refreshed (from what I can tell) and there there are no settings available to have it refreshed automatically.

The odd side affect of this, and we noticed, is that the registry continually gets wiped, and reset causing obvious potential issues down stream for our clients.

I'm trying to poke around the code to see if I can find a solution for this, but right now the only 'fix' is to restart the service after the EIP has been initially bound.""This is on 1.4.9. Also, I couldn't find anything that said it would matter but we are using spring-boots starter projects as the basis for the app, and the app is started with the following main class:

```
@SpringBootApplication
@EnableEurekaServer
@EnableAutoConfiguration
public class EurekaServer {

    @Value(""${server.port}"")
    private Integer nonSecurePort;
    @Autowired
    private InetUtils utils;

    public static void main(String[] args) {
        new SpringApplicationBuilder(EurekaServer.class).web(true).run(args);
    }

    @Bean
    @Profile(""aws"")
    public EurekaInstanceConfigBean awsEurekaConfig() {
        EurekaInstanceConfigBean b = new EurekaInstanceConfigBean(utils);
        b.setNonSecurePort(nonSecurePort);
        b.setSecurePortEnabled(false);
        AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild(""eureka"");
        b.setDataCenterInfo(info);
        return b;
    }

}
```
 =||= @nick-pww this seems spring cloud specific, you might be able to get better help at https://github.com/spring-cloud/spring-cloud-netflix. 

Internally, our deployment of eureka does depend on this, and we have not observed the EIP issue you described. We do not run with spring cloud however.
 =||= @qiangdavidliu Can you point to where the dataCenterInfo is refreshed in the regular Eureka code? I could find where it got initialized, but nowhere where it might get refreshed. The only call I found was `ApplicationManager.refreshDataCenterInfoIfRequired()`, but can't find any thing that actually calls this method.

I'll keep digging and guess open an issue with spring-cloud folks too...
 =||= @nick-pww the default DiscoveryClient should start up a thread to run the [InstanceInfoReplicator](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/InstanceInfoReplicator.java), which when it runs will refresh the datacenter info.

Note that the Amazon based datacenter info refreshes in ApplicationInfoManager only occurs if the config is of CloudInstanceInstanceConfig.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
841remove governator dep for eureka-clientDavid Liuqiangdavidliu09/06/16, 11:44:25 PMNaNNaNremove governator dep for eureka-clientDavid Liuqiangdavidliu09/06/16, 11:44:25 PMNaNNaNDavid Liu09/06/16, 10:56:08 PMremove governator dep for eureka-client1
842update archaius2 versionDavid Liuqiangdavidliu09/07/16, 12:36:47 AMNaNNaNupdate archaius2 versionDavid Liuqiangdavidliu09/07/16, 12:36:47 AMNaNNaNDavid Liu09/07/16, 12:21:47 AMupdate archaius2 version1
843Refactoring AmazonInfo refresh into common classDavid Liuqiangdavidliu09/08/16, 06:26:31 AM- other minor clean ups"name AmazonInfo is overly broad; they (amazon guys) call it InstanceMetadata in the documentation and I think that's on-target.
 =||= yeah that's stuck forever unfortunately.
 =||= @qiangdavidliu thanks for jumping on this so quickly!
 =||= "Refactoring AmazonInfo refresh into common classDavid Liuqiangdavidliu09/08/16, 06:26:31 AM- other minor clean upsNaNDavid Liu09/08/16, 12:23:19 AMPR feedback1
844Instance config should only add metadata if value is validDavid Liuqiangdavidliu09/08/16, 08:58:43 PMNaN":thumbsup:
 =||= "Instance config should only add metadata if value is validDavid Liuqiangdavidliu09/08/16, 08:58:43 PMNaNNaNDavid Liu09/08/16, 08:47:31 PMInstance config should only add metadata if value is valid1
845sync jersey2 branch with masterDavid Liuqiangdavidliu09/15/16, 01:54:46 AMNaNNaNsync jersey2 branch with masterDavid Liuqiangdavidliu09/15/16, 01:54:46 AMNaNNaNDavid Liu09/14/16, 11:42:27 PMMerge remote-tracking branch 'origin/master' into contrib/jersey21
846Remove uses of archaius2 config.getPrefixedView()David Liuqiangdavidliu09/15/16, 01:22:32 AMIt currently has issues when combined with config interpolation":thumbsup:
 =||= Can you elaborate on what the issues are? Why not fix the prefixed views in archaius2?
 =||= The issue is to do with config interpolation when using prefixedView, where if prefixedView is used, then the interpolator automatically expect the same prefix to be attached to the interpolated config.

e.g. if my.prefix.config=${ENV_VAR}, then using prefixed view with prefix=my.prefix, ENV_VAR will not be loaded as the interpolator will expect my.prefix.ENV_VAR instead.

We will fix archaius2, however as the fix is less clear right now we are doing this to be unblocked.
 =||= "Remove uses of archaius2 config.getPrefixedView()David Liuqiangdavidliu09/15/16, 01:22:32 AMIt currently has issues when combined with config interpolationNaNDavid Liu09/15/16, 12:48:34 AMrenaming internal class1
847update to archaius2 2.1.6David Liuqiangdavidliu09/15/16, 07:25:01 PMNaNNaNupdate to archaius2 2.1.6David Liuqiangdavidliu09/15/16, 07:25:01 PMNaNNaNDavid Liu09/15/16, 06:47:27 PMupdate to archaius2 2.1.61
848update archaius2 to 2.1.7David Liuqiangdavidliu09/15/16, 08:56:00 PMNaNNaNupdate archaius2 to 2.1.7David Liuqiangdavidliu09/15/16, 08:56:00 PMNaNNaNDavid Liu09/15/16, 08:36:10 PMarchaius2-guice is only needed as a testCompile1
849Add optional args to ApplicationInfoManagerDavid Liuqiangdavidliu09/20/16, 05:53:38 AMNaNNaNAdd optional args to ApplicationInfoManagerDavid Liuqiangdavidliu09/20/16, 05:53:38 AMNaNNaNDavid Liu09/20/16, 05:52:02 AMremove unused imports1
850Build of Sample Project fails [Test Fail]Ayush Choubeyayusun09/21/16, 08:19:00 AM"So I tried to follow the instruction given in https://github.com/Netflix/eureka/wiki/Building-Eureka-Client-and-Server

So while building using gradle, there were some tests that were being performed and one of the test failed.

`DicscoverClientHealthTest.java : 72`

I think probably it should be `assertNotEquals` instead of `assertEquals`

I changed it and my tests are passing. Can you guys look into it. Even the identifying message says
`Instance info status not as expected.`, so probably you guys wanted to test for negation but tested assertedEquals, (not sure though)""If it turns out to be valid, I can probably send a pull request, if required
Though I am not sure, how the build is passing over here
 =||= Closing it, for some reason it passed in my another machine.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
851how to copy eureka.war under _$TOMCAT_HOME/webapps/elyorm09/22/16, 04:25:08 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
852synchronize a few use cases of CloudInstanceConfig to be available to eureka-client-archaius2David Liuqiangdavidliu09/23/16, 04:07:21 AMNaNNaNsynchronize a few use cases of CloudInstanceConfig to be available to eureka-client-archaius2David Liuqiangdavidliu09/23/16, 04:07:21 AMNaNNaNDavid Liu09/23/16, 03:55:24 AMsynchronize a few usecases of CloudInstanceConfig to be available to eureka-client-archaius21
853update XStream to 1.4.9 to patch XXE vulnerabilityTaylor Wickselltwicksell09/26/16, 01:14:14 AMNaN"👍 
 =||= "update XStream to 1.4.9 to patch XXE vulnerabilityTaylor Wickselltwicksell09/26/16, 01:14:14 AMNaNNaNTaylor Wicksell09/25/16, 12:56:20 AMupdate XStream to 1.4.9 to patch XXE vulnerability1
854multiple copies of NodeJS service registering from same machine. Eureka Server cannot registerDeeksha Sharmadeekshasharma02/03/17, 06:48:22 AM"I am running NodeJS service say **MyService** on 3 different ports(8080,8081,8082) on single AWS EC2 machine. Now when my services register with Eureka Server. I see that Eureka server only registers the last instance of service that started on  port 8082. So basically it registers and keeps the data of single service(host:port) if the Amazon instance-id and Service name are same for all instances of MyService.
Is this a bug with Eureka or it is designed to have the service of same type to be deployed on different machines.

Another thing I noticed: With the same setup when I register Service1 , Service2 and Service3 with different names, they are registered with Eureka Server. But becaue its the same service running on 3 ports I need the information about all instances (host1:port1, host2:port2, host3:port3) under the same application name. ""@deekshasharma the default id for eureka registration is the instanceId of the EC2 instance, however there is configuration available to customize the id so they are unique across your services. Are you registering by direct http POST? If you, you'll want to supply a custom instance_id field at the InstanceInfo level.

Similarly, the port field in the InstanceInfo is available to be customized with the port of your services.
 =||= Thanks for the reply!
Yes I am using http POST to send the registration payload via a Node JS eurekaClient.
I got it what you are saying. We are anyways customizing the appName and port when sending the registration info. We can also do the same for instance-id. 

So to resolve this issue we are currently providing a suffix to our service name like 
(myservice-port1, myservice-port2) and doing that resolves our issue even though the instance-id is same for all.
 =||= 👍  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
855Contrib/jersey2 compatibilityDavid Liuqiangdavidliu09/30/16, 09:56:41 PMNaN"@mattnelson going into master
 =||= We don't have any example on how to use it? Can you share some, or guide us to some documents, so that it will be easier for us.
Thanks.
 =||= @ayusun 

There are some notes on the initial jersey2 PR #821. The readmes for eureka-client-jersey2/eureka-core-jersey2 could be updated before 1.6.0 is released.
 =||= "Contrib/jersey2 compatibilityDavid Liuqiangdavidliu09/30/16, 09:56:41 PMNaNNaNDavid Liu09/30/16, 08:03:58 PMMerge remote-tracking branch 'origin/master' into contrib/jersey2-compatibility1
856Exception is thrown when instance metadata contains non-ascii stringYang Lintodoubaba05/30/19, 11:09:54 PM"service config:

```
eureka:
    instance:
        metadataMap:
            test: 中文
```

```
javax.ws.rs.WebApplicationException: null
    at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
    at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
    at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:198)
    at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
    at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
    at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
    at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
    at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
    at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
    at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
    at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1030)
    at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:944)
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:444)
    at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
    at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:51)
    at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:190)
    at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e01b9f1f.CGLIB$eurekaClient$1(<generated>)
    at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e01b9f1f$$FastClassBySpringCGLIB$$cabd0ea0.invoke(<generated>)
    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356)
    at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e01b9f1f.eurekaClient(<generated>)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.springsource.loaded.ri.ReflectiveInterceptor.jlrMethodInvoke(ReflectiveInterceptor.java:1426)
    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
    at org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:345)
    at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:359)
    at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:176)
    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:340)
    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
    at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:192)
    at com.sun.proxy.$Proxy123.getApplications(Unknown Source)
    at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration.maybeInitializeClient(EurekaDiscoveryClientConfiguration.java:120)
    at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration.start(EurekaDiscoveryClientConfiguration.java:97)
    at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173)
    at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:51)
    at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346)
    at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149)
    at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112)
    at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:874)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144)
    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544)
    at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
    at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
    at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:369)
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:313)
```""Hi @todoubaba we've never really tested eureka with non-ascii values in the metadata map. If you want to make a contribution to enable this, that would be much appreciated.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
857Make registration error message more meaningful when using JSONDavid Rosedrse05/30/19, 11:09:54 PM"Currently, when using `POST` to register an app with `JSON`, omitting the `port`, `securePort`, and `dataCenterInfo` structures (`$`, `@enabled`, `@class`) produces a generic message:

``` json
{
  ""error"": ""cannot parse request body""
}
```

It's not directly evident how the XML XSD maps to JSON, would be nice if there was more detailed feedback, or a silent fail that can assume defaults for those values.""I have the same error now,how did you solve? Can you give me a example of json? Thanks! @drse 
There is no problem when use xml ,when I use json ,it give me this error message.

I have found the problem,json should like this:
`{
	""instance"" :{
    ""hostName"": ""myHost"",
    ""app"": ""myApp"",
    ""ipAddr"": ""127.0.0.1"",
    ""port"": {""$"": 8080,""@enabled"": ""true""},
    ""securePort"": {""$"": 433,""@enabled"": ""false""},
    ""dataCenterInfo"": { ""name"": ""MyOwn"",""@class"":""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"" }
	}
}` =||= account same questions, hope get reply! =||= Hope the error message can be more readable! that would be very helpful =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
858XSD doc is incomplete and has errorsVitovitosamson05/30/19, 11:09:54 PM"It looks like the XSD spec does not match what Eureka actually expects for the `port` and `securePort` fields, which is:

``` json
""port"": {
  ""$"": <positiveInt>,
  ""@enabled"": <bool>
},
""securePort"": {
  ""$"": <positiveInt>,
  ""@enabled"": <bool>
}
```

The XSD spec lists `port` and `securePort` as just `positiveInteger` types. The XSD should be updated to reflect the required structure for those fields.

In addition there seems to be a required `""@class""` parameter on the `dataCenterInfo`. I couldn't find anything about that parameter in the XSD spec.""HI @vitosamson thanks for the issue, we'll take a look at the documentation.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
859eureka & swagger-uiAlfredyihukurama10/24/16, 05:43:16 PM"- Brixton.SR5 eureka  and swagger ui 2.6.0

I just use swagger ui and eureka for my project. However there is no reproducing about the issue, swagger-ui work well but eureka cannot found the application name. I use two day for this bug, at last I common all about swagger ui and eureka found the service.Could you help me to solve this issue.""Hi @yihukurama you may want to ask this question at https://github.com/spring-cloud/spring-cloud-netflix
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
860Is there a use case for different values of virtualHostname and secureVirtualHostname?Will Tranwilliam-tran10/19/16, 11:49:46 PMWhen is it useful to have a secureVirtualHostname that's different from virtualHostname? We have other flags to signify whether we want to use the secure port (eg ribbon.IsSecure and isSecure flags on EurekaClient methods) and whether that securePort is enabled (InstanceInfo.isSecurePortEnabled). I can see a use for having a null secureVirtualHostname if isSecurePortEnabled is false, then the instance won't come up in a query when the isSecure flag is true, and vice versa for virtualHostname. But I can't come up with a reason to have different non-null values of those two properties. "Hi @william-tran some of the usage of the metadata such as these are driven by convention, so it depends somewhat on how you want to interpret this. In one scenario it might be used as a way to have a permissive server (I support both) and restrictive clients.
 =||= Thank you for the response @qiangdavidliu. We are having difficulty thinking of use cases where virtual hostname and secure virtual hostname should have different non-null property values. Would you be able to point towards customer use cases where this is used?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
861- fix minor typo in PropertyBasedClientConfigConstants.javaLUONG Trong-Hieuhieurl10/20/16, 07:17:03 PM"Nothing much, just a typo fix

INITIAL_REGISTRATION_REPLCIATION_DELAY_KEY -> INITIAL_REGISTRATION_REPLICATION_DELAY_KEY""Thanks @hieurl 
 =||= "- fix minor typo in PropertyBasedClientConfigConstants.javaLUONG Trong-Hieuhieurl10/20/16, 07:17:03 PM"Nothing much, just a typo fix

INITIAL_REGISTRATION_REPLCIATION_DELAY_KEY -> INITIAL_REGISTRATION_REPLICATION_DELAY_KEY"NaNhieurl10/20/16, 01:07:22 PM- fix typo in eureka-client/src/main/java/com/netflix/discovery/PropertyBasedClientConfigConstants.java1
862Convert all remaining guice provider references to javaxMatt Nelsonmattnelson10/20/16, 07:19:49 PMFollow up to #808 now that guice has been released and pulled in."thanks @mattnelson 
 =||= "Convert all remaining guice provider references to javaxMatt Nelsonmattnelson10/20/16, 07:19:49 PMFollow up to #808 now that guice has been released and pulled in.NaNMatt Nelson10/20/16, 06:10:43 PMConvert all remaining guice provider references to javax1
863Can't upsert Route53 Record SetElnur Abdurrakhimovelnur11/08/16, 01:34:31 AM"I'm trying to use the Route53 binder. It works for the first time when a record set doesn't exist. But after instances in an ASG get replaced, the binder can't upsert the same record set it created earlier.

I'm seeing this in the logs:

```
com.netflix.eureka.aws.Route53Binder     : Unable to find free domain in [1c.eureka.example.internal.]
```

Any ideas what's wrong? Any workarounds?""I gave full EC2 profile permissions for Route53, EC2, and ASG just in case it could be a permission problem. But it didn't help.
 =||= Okay, it looks like it's intentional. The binder only looks for free domains. That doesn't make much sense though. Thanks to autoscaling, instances come and go but it'd be nice to have a fixed number of domains to have stable locations of Eureka instances. So if an instance a domain points to is long gone, this Route53 binder can't update the domain to point to a new Eureka instance.
 =||= @elnur we do not use the Route53Binder at Netflix, and it was a component that contributed to us externally. The implementation as it is today may be specific to the contributor's internal needs. You can try to contact @aroger-r7 to discuss.
 =||= Later, I've figured out that the Route53 binder unbinds itself from domain name on shutdown. But it was too late since I got it all working with EIP. 🙂 

The EIP approach is more predictable here because an EIP gets released when an EC2 instance dies without a clean shutdown, and hence Eureka will assign an EIP to itself in any case. While the Route53 binder relies on proper shutdown to unbind itself.
 =||= @elnur glad to hear that you have resolved your issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
864How to get CPUs info from discoveryClient?flamhaze594610/24/16, 05:47:50 PM"In this ClassMeta's code I have not found any method to get clients' runtime infomation.
by the way, every time I start my application, about 30s - 60s eureka server can register my application's information up, is it a heartbeat problem? Can I set the heartbeat quickly?(I want to update Clients' information quickly, too)
Thank you !""Now I try to registerAppMetadata to achieve it, thanks
 =||= 👍 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
865Eureka propagates registry info to its peer node only(peer's peer cannot get this replication)王鸿飞wanghongfei10/24/16, 05:40:10 PM"I have three Eureka instances A, B and C. A's peer is pointed to B, B is pointed to C, C is pointed to A:

![yvmm2](https://cloud.githubusercontent.com/assets/4201347/19636216/8c1f7580-99fa-11e6-8509-bfedd048aef4.jpg)

When I registered my service to Eureka A, Eureka B got this registry info as expected. But C got nothing at all, which means B didn't propagate info to C.  

Is this the correct behavior as Eureka being designed or there's something wrong with my configuration?
## UPDATE

I found the answer from `PeerAwareInstanceRegistry#replicateToPeers()`, it contains following code:

```
// If it is a replication already, do not replicate again as this will create a poison replication
            if (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) {
                return;
            }
```

Why don't we add some description for this to wiki?""@wanghongfei eureka server set up actually requires that you configure as peers all other available servers. So in your example, you would configure both B and C to be peers of A. I have updated the wiki page https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2. Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
866Query on release date for Eureka 2.0Kalyankalyanvgopal-zz10/24/16, 05:41:57 PM"Hi,

Eureka 2.0 proposed features are very interesting But I could not find any information on release date. 
Can any one help me with a release date for 2.0?

Regards
Kalyan""@kalyanvgopal we've had some internal changes w.r.t. to eureka2, and do not have any time lines for open sourcing.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
867Delay call to DiscoveryClient.fetchRegistry at bootGreg Arakelianarakelian07/18/18, 01:08:59 PM"I'm writing a simple application which combines Eureka server, Discovery client, and Zuul Proxy into a single project.  Instead of static routes, I want my Zuul proxy to use Discovery client.

eureka.client.registerWithEureka is set to false.  This is the recommended setting for standalone Eureka servers.

If I set eureka.client.fetchRegistry to false, Eureka server boot and operates normally, but Zuul Proxy will not work because Discovery Client is basically limited to the static routes.  It's unaware of the application registered with Eureka server.

If I set eureka.client.fetchRegistry to true (and eureka.client.serviceUrl.defaultZone pointing back at itself), the Eureka server boots, and Zuul Proxy works.  However, I see a spurious error in the logs at boot time, because DiscoveryClient attempts to immediately load the list of applications due code at line 408.

 if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {
       fetchRegistryFromBackup();
}

It'd be great if we could have another flag, ""shouldFetchRegistryImmediately"" so that we could change these lines to read:

 if (clientConfig.shouldFetchRegistry() && clientConfig.shouldFetchRegistryImmediately() && !fetchRegistry(false)) {
            fetchRegistryFromBackup();
        }

In my use case, I would set eureka.client.shouldFetchRegistryImmediately to false, and DiscoveryClient would then reload after 30 seconds (the default refresh interval), when the single standalone application has booted and is ready to respond.""Hi @garakelian thank you for the issue. At Netflix, we try to guard against cases where a local eureka-client starts up without any registry information, as that can adversely affect the server performance. As such, we deliberately did not put in a lazy loading option within eureka-client.
 =||= @qiangdavidliu, Respectfully, you could still guard against cases likes like this, by making it the default setting, but still allow someone to configure it so that it doesn't load immediately. I'd be happy to submit a PR for this change if I thought that it would be merged. =||= @garakelian we welcome any PR that improves eureka from the community. =||= Closing this as I'm currently not using Eureka. Thank you. =||= I tried to implement this, but I was not able to add any configuration parameter by changing EurekaClientConfig, This interface is implemented by org.springframework.cloud.netflix.eureka.EurekaClientConfigBean also. Only option for me is to remove the whole block:

```
        if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false)) {
            fetchRegistryFromBackup();
        }
```

Any suggestions? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
868Eureka client can't read the server's registry.jianminli11/05/16, 03:43:42 PM"I have set up an Eureka server and a client, both of which are written in spring boot. I am using these two application for my Spring MVC testing. The server and client are running well.

Server's configuration application.properties is as below.

> server.port=8761
> spring.application.name=service-itself
> eureka.client.service-url.default-zone=http://localhost:8761/eureka/
> eureka.client.register-with-eureka=true
> eureka.client.fetch-registry=false
> logging.level.com.netflix.eureka=OFF
> logging.level.com.netflix.discovery=OFF

client's is as below: application.yml

> spring:
>   application:
>     name: say-hello
> 
> server:
>   port: 8090
> 
> eureka:
>   client:
>     service-url:
>       defaultZone: http://${eureka.host:localhost}:${eureka.port:8761}/eureka/

When accessing the Eureka dashboard localhost:8761, I can see that client has been registered.

For my Spring MVC gateway, as it is not a Spring boot project, so I copied the [example](https://github.com/Netflix/eureka/blob/master/eureka-examples/src/main/java/com/netflix/eureka/ExampleEurekaClient.java) to my project simply for testing whether it can connect to the Eureka server and retrieve the registered the instance of ""say-hello"" client. Unfortunately, it cannot do so with saying ""Cannot get an instance of example service to talk to from eureka"" which is printed at line 76 in the example class.

Here is the eureka-client.properties placed in gateway's classpath. I can confirmed that the Client class is reading the config file.

> eureka.name=gatewayEurekaClient
> eureka.vipAddress=say-hello
> eureka.port=8761
> eureka.preferSameZone=true
> eureka.preferSameZone=true
> eureka.shouldUseDns=false
> eureka.serviceUrl.default=http://localhost:8761/eureka
> eureka.serviceUrl.defaultZone=http://localhost:8761/eureka


Some debug information here:

> instanceInfo    InstanceInfo  (id=234)  
>     actionType  null    
>     appGroupName    ""UNKNOWN"" (id=246)  
>     appName ""GATEWAYEUREKACLIENT"" (id=247)  
>     asgName null    
>     countryId   1   
>     dataCenterInfo  PropertiesInstanceConfig$1  (id=248)    
>     healthCheckExplicitUrl  null    
>     healthCheckRelativeUrl  ""/healthcheck"" (id=253) 
>     healthCheckSecureExplicitUrl    null    
>     healthCheckUrl  ""http://A156N7AB89AXNZQ:8761/healthcheck"" (id=254)  
>     homePageUrl ""http://A156N7AB89AXNZQ:8761/"" (id=255) 
>     hostName    ""A156N7AB89AXNZQ"" (id=256)  
>     instanceId  ""A156N7AB89AXNZQ"" (id=256)  
>     ipAddr  ""10.209.66.64"" (id=257) 
>     isCoordinatingDiscoveryServer   Boolean  (id=258)   
>     isInstanceInfoDirty false   
>     isSecurePortEnabled false   
>     isUnsecurePortEnabled   true    
>     lastDirtyTimestamp  Long  (id=260)  
>     lastUpdatedTimestamp    Long  (id=263)  
>     leaseInfo   LeaseInfo  (id=264) 
>     metadata    ConcurrentHashMap<K,V>  (id=266)    
>     overriddenstatus    InstanceInfo$InstanceStatus  (id=267)   
>     port    8761    
>     secureHealthCheckUrl    null    
>     securePort  443 
>     secureVipAddress    null    
>     secureVipAddressUnresolved  null    
>     sid ""na"" (id=270)   
>     status  InstanceInfo$InstanceStatus  (id=271)   
>     statusPageExplicitUrl   null    
>     statusPageRelativeUrl   ""/Status"" (id=272)  
>     statusPageUrl   ""http://A156N7AB89AXNZQ:8761/Status"" (id=273)   
>     version ""unknown"" (id=274)  
>     vipAddress  ""say-hello"" (id=275)    
>     vipAddressUnresolved    ""say-hello"" (id=275) ""Could you tell me how you solved the problem? =||= 
I had the same difficulty of registering services with spring mvc 4 with eureka but using the SIDECAR of spring I could solve it and be able to add the other components such as Ribbon, so you must create a spring-boot project to add the dependency of sidecar, then to the spring mvc project when deploying modify the port so that it leaves like this (example: localhost: 9090 / service1) also you must have a service that is ""health"" with this name that returns ""status: UP"" (localhost: 9090 / health), I found all this configuration in this project of which I was guided (https://github.com/BarathArivazhagan/spring-cloud-sidecar-sample)
Also the sidecar is independent of the language of the service only needs the service ""Health"" to be able to register it in eureka.Therefore you have a sidecar which listens to the project with spring mvc, the eureka escuha to the sidecar.In the repository of which I There is a complete description of how the components interact. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
869Remove assignment of instanceInfo from static instance.Spencer Gibbspencergibb11/08/16, 01:38:50 AMf40f54a03d135379845aeb8c060b4f768fe7e7b5 made instanceInfo a required field to be set, but an assignment was still happening from `ApplicationInfoManager.getInstance().getInfo()` overwriting assigned field."thanks @spencergibb 
 =||= "Remove assignment of instanceInfo from static instance.Spencer Gibbspencergibb11/08/16, 01:38:50 AMf40f54a03d135379845aeb8c060b4f768fe7e7b5 made instanceInfo a required field to be set, but an assignment was still happening from `ApplicationInfoManager.getInstance().getInfo()` overwriting assigned field.NaNSpencer Gibb11/07/16, 08:16:16 PM"Remove assignment of instanceInfo from static instance.

f40f54a03d135379845aeb8c060b4f768fe7e7b5 made instanceInfo a required field to be set, but an assignment was still happening from `ApplicationInfoManager.getInstance().getInfo()` overwriting assigned field."1
870Update README.mdDavid Liuqiangdavidliu11/08/16, 01:46:17 AMNaNNaNUpdate README.mdDavid Liuqiangdavidliu11/08/16, 01:46:17 AMNaNNaNDavid Liu11/08/16, 01:45:52 AMUpdate README.md1
871Eureka Client deployment issue in Weblogic 12.2.1muraliguttha11/17/16, 11:31:00 AM"Hi,
I am trying to deploy eureka client (war file) in weblogic 12.2.1. I am getting below issue.
But same war is working fine in Tomcat 9 version without any changes.

Please suggest / guide for any changes are required for weblogic

contextInitialized()***
Nov 15, 2016 12:47:34 PM com.netflix.config.sources.URLConfigurationSource <init>
WARNING: No URLs will be polled as dynamic configuration sources.
<Nov 15, 2016 12:47:34 PM IST> <Warning> <com.netflix.config.sources.URLConfigurationSource> <BEA-000000> <No URLs will be polled as dynamic configuration sources.>
Nov 15, 2016 12:47:34 PM com.netflix.config.sources.URLConfigurationSource <init>
INFO: To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
Nov 15, 2016 12:47:34 PM com.netflix.config.DynamicPropertyFactory getInstance
INFO: DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@60fdb4eb
Nov 15, 2016 12:47:34 PM com.netflix.config.util.ConfigurationUtils getConfigFromPropertiesFile
INFO: Loaded properties file zip:/scratch/programs/Oracle/MiddlewareINFRA/Oracle_Home/user_projects/domains/RDdomain/servers/AdminServer/tmp/_WL_user/FCLiteCustomerService/9tqc86/war/WEB-INF/lib/_wl_cls_gen.jar!/customer-service.properties
Nov 15, 2016 12:47:34 PM com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider get
INFO: Setting initial instance status as: STARTING
Nov 15, 2016 12:47:34 PM com.netflix.config.util.ConfigurationUtils getConfigFromPropertiesFile
WARNING: zip:/scratch/programs/Oracle/MiddlewareINFRA/Oracle_Home/user_projects/domains/RDdomain/servers/AdminServer/tmp/_WL_user/FCLiteCustomerService/9tqc86/war/WEB-INF/lib/_wl_cls_gen.jar!/customer-service.properties is already loaded
<Nov 15, 2016 12:47:34 PM IST> <Warning> <com.netflix.config.util.ConfigurationUtils> <BEA-000000> <zip:/scratch/programs/Oracle/MiddlewareINFRA/Oracle_Home/user_projects/domains/RDdomain/servers/AdminServer/tmp/_WL_user/FCLiteCustomerService/9tqc86/war/WEB-INF/lib/_wl_cls_gen.jar!/customer-service.properties is already loaded>
Nov 15, 2016 12:47:34 PM com.netflix.discovery.provider.DiscoveryJerseyProvider <init>
INFO: Using JSON encoding codec LegacyJacksonJson
Nov 15, 2016 12:47:34 PM com.netflix.discovery.provider.DiscoveryJerseyProvider <init>
INFO: Using JSON decoding codec LegacyJacksonJson
Nov 15, 2016 12:47:35 PM com.netflix.discovery.provider.DiscoveryJerseyProvider <init>
INFO: Using XML encoding codec XStreamXml
Nov 15, 2016 12:47:35 PM com.netflix.discovery.provider.DiscoveryJerseyProvider <init>
INFO: Using XML decoding codec XStreamXml
Nov 15, 2016 12:47:35 PM com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver getClusterEndpoints
INFO: Resolving eureka endpoints via configuration
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Disable delta property : false
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Single vip registry refresh property : null
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Force full registry fetch : false
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Application is null : false
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Registered Applications size is zero : true
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
INFO: Application version is -1: true
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient getAndStoreFullRegistry
INFO: Getting all instance registry info from the eureka server
Nov 15, 2016 12:47:35 PM com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient execute
SEVERE: Request execution error
javax.ws.rs.WebApplicationException: HTTP 400 Bad Request
        at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:198)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1030)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:944)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:444)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.oracle.fclitecustomerservice.CustomerServiceContextListener.initializeEurekaClient(CustomerServiceContextListener.java:100)
        at com.oracle.fclitecustomerservice.CustomerServiceContextListener.contextInitialized(CustomerServiceContextListener.java:30)
        at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:725)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:326)
        at weblogic.security.service.SecurityManager.runAsForUserCode(SecurityManager.java:196)
        at weblogic.servlet.provider.WlsSecurityProvider.runAsForUserCode(WlsSecurityProvider.java:203)
        at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:71)
        at weblogic.servlet.internal.EventsManager.executeContextListener(EventsManager.java:251)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:204)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:189)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1910)
        at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:3063)
        at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1830)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:875)
        at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360)
        at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138)
        at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:237)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:232)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:82)
        at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:52)
        at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:753)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:263)
        at weblogic.application.internal.SingleModuleDeployment.activate(SingleModuleDeployment.java:53)
        at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165)
        at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:601)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:171)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:121)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:343)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:895)
        at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1422)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:454)
        at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:181)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68)
        at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:643)
        at weblogic.invocation.ComponentInvocationContextManager._runAs(ComponentInvocationContextManager.java:348)
        at weblogic.invocation.ComponentInvocationContextManager.runAs(ComponentInvocationContextManager.java:333)
        at weblogic.work.LivePartitionUtility.doRunWorkUnderContext(LivePartitionUtility.java:54)
        at weblogic.work.PartitionUtility.runWorkUnderContext(PartitionUtility.java:41)
        at weblogic.work.SelfTuningWorkManagerImpl.runWorkUnderContext(SelfTuningWorkManagerImpl.java:617)
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:397)
        at weblogic.work.ExecuteThread.run(ExecuteThread.java:346)

<Nov 15, 2016 12:47:35 PM IST> <Error> <com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient> <BEA-000000> <Request execution error
javax.ws.rs.WebApplicationException: HTTP 400 Bad Request
        at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:198)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
        Truncated. see log file for complete stacktrace
>
Nov 15, 2016 12:47:35 PM com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient execute
WARNING: Request execution failure
<Nov 15, 2016 12:47:35 PM IST> <Warning> <com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient> <BEA-000000> <Request execution failure>
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient fetchRegistry
SEVERE: DiscoveryClient_CUSTOMERSERVICE/ofss222433 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1030)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:944)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:444)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:300)
        at com.oracle.fclitecustomerservice.CustomerServiceContextListener.initializeEurekaClient(CustomerServiceContextListener.java:100)
        at com.oracle.fclitecustomerservice.CustomerServiceContextListener.contextInitialized(CustomerServiceContextListener.java:30)
        at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:725)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:326)
        at weblogic.security.service.SecurityManager.runAsForUserCode(SecurityManager.java:196)
        at weblogic.servlet.provider.WlsSecurityProvider.runAsForUserCode(WlsSecurityProvider.java:203)
        at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:71)
        at weblogic.servlet.internal.EventsManager.executeContextListener(EventsManager.java:251)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:204)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:189)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1910)
        at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:3063)
        at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1830)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:875)
        at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360)
        at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138)
        at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:237)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:232)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:82)
        at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:52)
        at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:753)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:45)
        at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:263)
        at weblogic.application.internal.SingleModuleDeployment.activate(SingleModuleDeployment.java:53)
        at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165)
        at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:601)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:171)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:121)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:343)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:895)
        at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1422)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:454)
        at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:181)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68)
        at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:643)
        at weblogic.invocation.ComponentInvocationContextManager._runAs(ComponentInvocationContextManager.java:348)
        at weblogic.invocation.ComponentInvocationContextManager.runAs(ComponentInvocationContextManager.java:333)
        at weblogic.work.LivePartitionUtility.doRunWorkUnderContext(LivePartitionUtility.java:54)
        at weblogic.work.PartitionUtility.runWorkUnderContext(PartitionUtility.java:41)
        at weblogic.work.SelfTuningWorkManagerImpl.runWorkUnderContext(SelfTuningWorkManagerImpl.java:617)
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:397)
        at weblogic.work.ExecuteThread.run(ExecuteThread.java:346)

<Nov 15, 2016 12:47:35 PM IST> <Error> <com.netflix.discovery.DiscoveryClient> <BEA-000000> <DiscoveryClient_CUSTOMERSERVICE/ofss222433 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        Truncated. see log file for complete stacktrace
>
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient$1 get
WARNING: Using default backup registry implementation which does not do anything.
<Nov 15, 2016 12:47:35 PM IST> <Warning> <com.netflix.discovery.DiscoveryClient> <BEA-000000> <Using default backup registry implementation which does not do anything.>
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient initScheduledTasks
INFO: Starting heartbeat executor: renew interval is: 30
Nov 15, 2016 12:47:35 PM com.netflix.discovery.InstanceInfoReplicator <init>
INFO: InstanceInfoReplicator onDemand update allowed rate per min is 4
Nov 15, 2016 12:47:35 PM com.netflix.discovery.DiscoveryClient <init>
INFO: Discovery Client initialized at timestamp 1479194255836 with initial instances count: 0
Registering service to API Discovery Server with STARTING status ***
Simulating service initialization by sleeping for 2 seconds ***
Done sleeping, now changing status to UP ***
Nov 15, 2016 12:47:37 PM com.netflix.discovery.DiscoveryClient$3 notify
INFO: Saw local status change event StatusChangeEvent [timestamp=1479194257840, current=UP, previous=STARTING]
Waiting ... verifying service registration with API Discovery Server ...
Nov 15, 2016 12:47:37 PM com.netflix.discovery.DiscoveryClient register
INFO: DiscoveryClient_CUSTOMERSERVICE/ofss222433: registering service...
2016-11-15 12:47:37,866 INFO  org.apache.http.impl.client.DefaultRequestDirector:696 [DiscoveryClient-InstanceInfoReplicator-0] [tryExecute] I/O exception (com.fasterxml.jackson.databind.JsonMappingException) caught when processing request to {}->http://10.184.152.253:8080: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
2016-11-15 12:47:37,871 INFO  org.apache.http.impl.client.DefaultRequestDirector:706 [DiscoveryClient-InstanceInfoReplicator-0] [tryExecute] Retrying request to {}->http://10.184.152.253:8080
Nov 15, 2016 12:47:37 PM com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient execute
SEVERE: Request execution error
com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
        at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:56)

        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:815)
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:104)
        at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:88)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.http.client.ClientProtocolException
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:867)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
        ... 30 more
Caused by: org.apache.http.client.NonRepeatableRequestException: Cannot retry request with a non-repeatable request entity.  The cause lists the reason the original request failed.
        at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:659)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:487)
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
        ... 33 more
Caused by: com.fasterxml.jackson.databind.JsonMappingException: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
        at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:248)
        at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:811)
        at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:650)
        at com.netflix.discovery.converters.EurekaJacksonCodec.writeTo(EurekaJacksonCodec.java:194)
        at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.encode(CodecWrappers.java:304)
        at com.netflix.discovery.provider.DiscoveryJerseyProvider.writeTo(DiscoveryJerseyProvider.java:135)
        at com.sun.jersey.api.client.RequestWriter$RequestEntityWriterImpl.writeRequestEntity(RequestWriter.java:231)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler$2.writeTo(ApacheHttpClient4Handler.java:289)
        at org.apache.http.entity.HttpEntityWrapper.writeTo(HttpEntityWrapper.java:89)
        at org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper.writeTo(EntityEnclosingRequestWrapper.java:108)
        at org.apache.http.impl.entity.EntitySerializer.serialize(EntitySerializer.java:117)
        at org.apache.http.impl.AbstractHttpClientConnection.sendRequestEntity(AbstractHttpClientConnection.java:265)
        at org.apache.http.impl.conn.AbstractClientConnAdapter.sendRequestEntity(AbstractClientConnAdapter.java:231)
        at org.apache.http.protocol.HttpRequestExecutor.doSendRequest(HttpRequestExecutor.java:236)
        at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:121)
        at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:685)
        ... 35 more
Caused by: java.lang.IllegalStateException: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
        at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findRenamed(POJOPropertyBuilder.java:694)
        at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findNewName(POJOPropertyBuilder.java:673)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameProperties(POJOPropertiesCollector.java:682)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collect(POJOPropertiesCollector.java:242)
        at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectProperties(BasicClassIntrospector.java:142)
        at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(BasicClassIntrospector.java:68)
        at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(BasicClassIntrospector.java:11)
        at com.fasterxml.jackson.databind.SerializationConfig.introspect(SerializationConfig.java:530)
        at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:133)
        at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1077)
        at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1037)
        at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:445)
        at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:599)
        at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:93)
        at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1837)
        at com.fasterxml.jackson.core.base.GeneratorBase.writeObject(GeneratorBase.java:261)
        at com.fasterxml.jackson.core.JsonGenerator.writeObjectField(JsonGenerator.java:1312)
        at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer.serialize(EurekaJacksonCodec.java:358)
        at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer.serialize(EurekaJacksonCodec.java:316)
        at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:237)
        ... 50 more

<Nov 15, 2016 12:47:37 PM IST> <Error> <com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient> <BEA-000000> <Request execution error
com.sun.jersey.api.client.ClientHandlerException: org.apache.http.client.ClientProtocolException
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        Truncated. see log file for complete stacktrace
Caused By: org.apache.http.client.ClientProtocolException
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:867)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        Truncated. see log file for complete stacktrace
Caused By: org.apache.http.client.NonRepeatableRequestException: Cannot retry request with a non-repeatable request entity.  The cause lists the reason the original request failed.
        at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:659)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:487)
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:115)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
        Truncated. see log file for complete stacktrace
Caused By: com.fasterxml.jackson.databind.JsonMappingException: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
        at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:248)
        at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:811)
        at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:650)
        at com.netflix.discovery.converters.EurekaJacksonCodec.writeTo(EurekaJacksonCodec.java:194)
        at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.encode(CodecWrappers.java:304)
        Truncated. see log file for complete stacktrace
Caused By: java.lang.IllegalStateException: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
        at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findRenamed(POJOPropertyBuilder.java:694)
        at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findNewName(POJOPropertyBuilder.java:673)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameProperties(POJOPropertiesCollector.java:682)
        at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collect(POJOPropertiesCollector.java:242)
        at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectProperties(BasicClassIntrospector.java:142)
        Truncated. see log file for complete stacktrace
>
Nov 15, 2016 12:47:37 PM com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient execute
WARNING: Request execution failure
<Nov 15, 2016 12:47:37 PM IST> <Warning> <com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient> <BEA-000000> <Request execution failure>
Nov 15, 2016 12:47:37 PM com.netflix.discovery.DiscoveryClient register
WARNING: DiscoveryClient_CUSTOMERSERVICE/ofss222433 - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:815)
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:104)
        at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:88)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
<Nov 15, 2016 12:47:37 PM IST> <Warning> <com.netflix.discovery.DiscoveryClient> <BEA-000000> <DiscoveryClient_CUSTOMERSERVICE/ofss222433 - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        Truncated. see log file for complete stacktrace
>
Nov 15, 2016 12:47:37 PM com.netflix.discovery.InstanceInfoReplicator run
WARNING: There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:815)
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:104)
        at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:88)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)

<Nov 15, 2016 12:47:37 PM IST> <Warning> <com.netflix.discovery.InstanceInfoReplicator> <BEA-000000> <There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        Truncated. see log file for complete stacktrace
>
""Able to solve this problem. There are conflicts with libraries in WLS.
Able to proceed after providing libraries details.
 =||= @muraliguttha care to share some details? =) =||= > Able to solve this problem. There are conflicts with libraries in WLS.
> Able to proceed after providing libraries details.

@muraliguttha could you please share what libraries did you fix to resolve the issue? =||= @muraliguttha can you provide more details ? as far i tried to deploy it on weblogic 12.2.1.3 and getting Jersey related issues because weblogic 12.2.1.3 supports latest JAX RS Jersey implementation and Eureka uses old versions of Jersey  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
872DiscoveryClient.shutdown() does not shutdown all Threads - MemoryLeakBenjamin Klausklues02/03/17, 06:40:33 AM"Hi,

I'm using Eureka-Client 1.4.11.
We are running applications containing an eureka-client on Tomcat 7.0.42 and on undeploy although I call EurekaClient#shutdown(), I get the following warning:
SEVERE: The web application appears to have started a thread named [AsyncResolver-bootstrap-1] but has failed to stop it. This is very likely to create a memory leak.

After some time of debugging I found out that the reason is to be found in AsyncResolver#shutdown():
At AsyncResolver.java:144 if I call
executorService.shutdownNow(); 
instead of
executorService.shutdown();

then I do not get the Tomcat-Message anymore. I think the reason is that ExecutorService#shutdown() >>...Initiates an orderly shutdown in which previously submitted tasks are executed...<< (see https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html#shutdown() ), while shutdownNow() >>Attempts to stop all actively executing tasks<<, and therefore the ""backgroundTask"" is started once more, which itself schedules a new Task (see TimedSupervisorTask.java:61) and therefore some Thread does not termiate...

I do not fully understand these Threads, but if I call executorService.shutdownNow() as mentioned above, I get one FutureTask as result, that was terminated:
http://prntscr.com/d7l5zf
...and Tomcat does not report a memory-leak issue anymore.
Therefore I would recommend to replace AsyncResolver.java:144-145 by:
executorService.shutdownNow();
threadPoolExecutor.shutdownNow();""created pull request for this issue
 =||= Thanks @klues fixed in #876 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
873Eureka Client cannot make HTTPS requests to servers that use multiple certificates via SNIWill Tranwilliam-tran11/21/16, 08:23:21 PM"EurekaJerseyClientImpl uses deprecated, pre HTTPClient 4.3 APIs to create the SSLSocketFactory used in MonitoredConnectionManager [[1]](https://github.com/Netflix/eureka/blob/v1.6.0/eureka-client/src/main/java/com/netflix/discovery/shared/transport/jersey/EurekaJerseyClientImpl.java#L222). Support for https://en.wikipedia.org/wiki/Server_Name_Indication was introduced in Apache HttpClient 4.3.2 [[2]](https://hc.apache.org/news.html). When using the deprecated APIs, requests to servers that are protected with multiple certificates, which is typical of environments with many applications behind a single load balancer, will fail.

This can be demonstrated by setting the serviceUrl to `https://api.google.com/`. If the SSL handshake doesn't do SNI properly, the client will get the certificate for `www.google.com`, and hostname verification will fail with this exception. If SNI succeeds we won't see this exception (but we'll see another Eureka specific exception obviously).

```
2016-11-15 17:12:33.841 ERROR 65408 --- [nfoReplicator-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error

com.sun.jersey.api.client.ClientHandlerException: javax.net.ssl.SSLException: Certificate for <api.google.com> doesn't match any of the subject alternative names: [www.google.com]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.4.11.jar:1.4.11]

...

Caused by: javax.net.ssl.SSLException: Certificate for <api.google.com> doesn't match any of the subject alternative names: [www.google.com]
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:165) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.BrowserCompatHostnameVerifier.verify(BrowserCompatHostnameVerifier.java:61) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:141) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:114) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLSocketFactory.verifyHostname(SSLSocketFactory.java:580) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:554) ~[httpclient-4.5.2.jar:4.5.2]
	at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:412) ~[httpclient-4.5.2.jar:4.5.2]
	at 
...
``` 

[1] https://github.com/Netflix/eureka/blob/v1.6.0/eureka-client/src/main/java/com/netflix/discovery/shared/transport/jersey/EurekaJerseyClientImpl.java#L222
[2] https://hc.apache.org/news.html"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
874Support HTTPS requests to servers that use multiple certificatesWill Tranwilliam-tran11/21/16, 08:23:21 PM"Use Apache HttpClient 4.3+ SSL handling which supports SNI, and
adapt it to the deprecated pre 4.3 API.

Fixes #873""It would be great if we could get this backported to 1.4.x like in my fork, and release a v1.4.12 so we can include this fix in a Spring Cloud Camden SR.
 =||= "Support HTTPS requests to servers that use multiple certificatesWill Tranwilliam-tran11/21/16, 08:23:21 PM"Use Apache HttpClient 4.3+ SSL handling which supports SNI, and
adapt it to the deprecated pre 4.3 API.

Fixes #873"NaNWill Tran11/15/16, 10:40:52 PM"Support HTTPS requests to servers that use multiple certificates

Use Apache HttpClient 4.3+ SSL handling which supports SNI, and
adapt it to the deprecated pre 4.3 API.

Fixes #873"1
875Questions: What is the road map for Eureka 2 and is there a timeframe for when Spring Cloud will adopt it russBDigitalGlobe02/03/17, 06:39:55 AM"Hi,
I'm wondering what the road map is for Eureka 2 and when Spring Cloud will adopt it as part of their release?

Thanks in advance,

Russ Baker""This is not the forum for spring cloud. And, someone correct me if I'm wrong, but eureka 2 is on hold.
 =||= @spencergibb that is correct. We've done some major change to our approach, and the code that is currently in the 2.x branch can be considered archived. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
876use shutdownNow() instead of shutdown()Benjamin Klausklues02/03/17, 06:01:09 AMshutdown() does not prevent execution of previously submitted tasks, which can cause that AsyncResolver.shutdown() does not really shutdown all tasks -> memory leak"see https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdown() for effects of shutdown() and shutdownNow()
 =||= This solved the same issue in our shared tomcat environment is there any chance of it being merged? =||= I built my own release containing this fix and we are using it in our project. I don't know why it is not being merged. If you need the release containing the fix and you don't want to build it on your own just contact me. =||= Hi @klues . If it possible give me please credentials for your eureka realise fix. Thanks. =||= see https://github.com/klues/eureka/tree/jar-containing-memory-leak-fix/bin for my built release containing this fix. Its based on version 1.4.11 =||= @klues thanks. =||= @klues thanks for the contrib. =||= "use shutdownNow() instead of shutdown()Benjamin Klausklues02/03/17, 06:01:09 AMshutdown() does not prevent execution of previously submitted tasks, which can cause that AsyncResolver.shutdown() does not really shutdown all tasks -> memory leakNaNBenjamin Klaus02/02/17, 07:43:34 AM"Revert ""added eureka-client-1.4.11.1 containing fix to prevent memory leak (commit fbd2f5a3ea33c95563e624131be4c0737447865f )""

This reverts commit 19ed911812fd56685b3472be0c150c6ae249e0e2."1
877Register instance API‘s TPS is too lowShawntianxiaoliang02/03/17, 06:39:09 AMI use ab to test register instance API， the performance is 2k TPS, and the CPU usage is only about 200%，but The baremental has 72 cpu cores，Is there any limit to cpu usage in source code"Also the heartbeat perf is 5w tps, it became 16w TPS after I open keep alive in tomcat,but register instance API perf is still 2k,and in response header there is no connection:keep-alive header.
So in server side,the register instance handler disabled keep alive? Why? =||= I found there is a lock in register method, that makes perf low and low cpu usage，why eureka lock before register a instance？
private final Lock read = readWriteLock.readLock(); =||= 2K TPS is enough for most conditions.
Even in alibaba, the registry center is far from 2K TPS.
100 can be considered as a huge load.

2K 的TPS大多数情况下已经够了。
即便是阿里，注册中心每秒也不会注册2K个应用。上百个就已经很多了。 =||= Thanks @qiukeren . @tianxiaoliang agree that the registration code path for eureka can probably be improved for higher TPS, however we have not had the need at Netflix to work on this. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
878It takes minutes to discover instance in eurekaShawntianxiaoliang02/03/17, 06:37:02 AM"after register a instance,eureka returned 204,but sometimes it takes a long time to query the instance by API, why?

also ,if the instance dead and doesn't  deregister in eureka.it may takes minutes to disappear in eureka.why?

How can I change this to discover at once after register""The latency is likely being caused by the response cache.

https://github.com/Netflix/eureka/blob/v1.6.1/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCache.java =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
879App not getting re-register once Eureka server restart...FunTechLearner02/03/17, 06:36:25 AMI register my app on  Eureka  Server  through PCF market Service...The problem is that when Eureka Server gets restarted all apps or client  which was alerady register  gets unbinded and never gets register again automatically even though all apps are already binded to Eureka Server. I have to again restart all my apps to gets themselves register on Eureka Server.....Any help is highly appreciated@aserg it looks like your question is more pertinent to the spring-cloud-netflix usage of eureka. I would recommend that you ask your question at https://github.com/spring-cloud/spring-cloud-netflix  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
880"Eureka server shows status of Zuul gateway as ""STARTING"""truelocalpreetham12/12/16, 05:13:44 AM"We are running Zuul gateway on AWS ECS docker and eureka on EC2. Eureka server instances status shows as ""UP"". But the Zuul gateway status has not changed to ""UP"" and stayed in ""STARTING"" state from past 2 days. Can you please let me know what may be the issue of not changing the status or can you please direct me what can be done.

Please find the eureka logs below

```
19:01:30.456 [http-nio-8761-exec-10] WARN  InstanceResource: Not Found (Renew): ZUUL-GATEWAY - 1d0c677de0f1:zuul-gateway:8080
19:01:30.456 [http-nio-8761-exec-10] WARN  AbstractInstanceRegistry: DS: Registry: lease doesn't exist, registering resource: ZUUL-GATEWAY - c26c46362ec4:zuul-gateway:8080
19:01:30.456 [http-nio-8761-exec-10] WARN  InstanceResource: Not Found (Renew): ZUUL-GATEWAY - c26c46362ec4:zuul-gateway:8080
19:01:30.970 [http-nio-8761-exec-2] INFO  AbstractInstanceRegistry: Registered instance ZUUL-GATEWAY/1d0c677de0f1:zuul-gateway:8080 with status STARTING (replication=true)
19:01:30.971 [http-nio-8761-exec-2] INFO  AbstractInstanceRegistry: **Registered instance ZUUL-GATEWAY/c26c46362ec4:zuul-gateway:8080 with status STARTING (replication=true)**
19:01:33.037 [http-nio-8761-exec-3] WARN  AbstractInstanceRegistry: DS: Registry: lease doesn't exist, registering resource: ZUUL-GATEWAY - 1bfbb3bd79a5:zuul-gateway:8080
19:01:33.037 [http-nio-8761-exec-3] WARN  InstanceResource: Not Found (Renew): ZUUL-GATEWAY - 1bfbb3bd79a5:zuul-gateway:8080
19:01:33.551 [http-nio-8761-exec-4] INFO  AbstractInstanceRegistry: **Registered instance ZUUL-GATEWAY/1bfbb3bd79a5:zuul-gateway:8080 with status STARTING** (replication=true)
19:01:35.028 [http-nio-8761-exec-8] WARN  AbstractInstanceRegistry: DS: Registry: lease doesn't exist, registering resource: ZUUL-GATEWAY - e8a291e686f7:zuul-gateway:8080
19:01:35.028 [http-nio-8761-exec-8] WARN  InstanceResource: Not Found (Renew): ZUUL-GATEWAY - e8a291e686f7:zuul-gateway:8080
19:01:35.542 [http-nio-8761-exec-9] INFO  AbstractInstanceRegistry: **Registered instance ZUUL-GATEWAY/e8a291e686f7:zuul-gateway:8080 with status STARTING** (replication=true)

```

_Note:
When I run locally, the application status will be ""UP"". It gets registered with ""UP"" status directly. But on AWS EC2, if I restart the eureka, the zuul application registers with ""STARTING"" status._"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
881What's the relationship about region, zone and a eureka cluster?周立eacdy02/03/17, 06:34:24 AM"Since I havn't used AWS, I wonder what's the relationship about region, zone and a eureka cluster. I've  drew a picture below, am I right?
![4-2](https://cloud.githubusercontent.com/assets/9031050/21100232/e7157014-c0ad-11e6-8b36-93bf0bd9b6fe.png)""Each region is a geographical location in AWS, every region has multiple availability zone which are completely isolated from each other(Think of it as a separate datacenter)
For example U.S. East(Virginia) is one region with: us-east-1b, us-east-1c, us-east-1d availability zones. More info [here](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)  =||= @samdvr Got it.
Seems that eureka can be deployed in different zones, so I wonder whether the picture I drew is right. =||= @eacdy your picture is correct. At Netflix our set up is to deploy several servers per zone, and all the servers in the region (across the zones) are peered together for redundancy. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
882409 Conflict in replication taskfredboutin02/03/17, 03:06:59 PM"We got a bunch of 

> The replication of task xxx failed with response code 409

in production after putting an instance out of service and then restarting an application on it. We had to reboot eureka because it never recovered from it. From that comment in the JerseyReplicationClient : `
// In the case of replication, send the current instance info in the registry for the
replicating node to sync itself with this one.` I tried to track down what happens when a 409 is returned and it seems like it is not handled on the server making the request. The server should use the entity instance info it receives with the 409, but it doesn't seem to happen anywhere I checked. I couldn't reproduce the bug, but that's what I've seen from navigating in the code. Does this rings a bell? Any help or clue would be appreciated.

Thanks!"I'd like some input as well, we had the same problem =||= Eureka uses a client side field within InstanceInfo `lastDirtyTimestamp` for conflict resolution. If you are using the java eureka-client, this should be taken care of already. However if you are using direct http calls, then for any client side updates that changes some InstanceInfo value (e.g. a POST or a PUT), it is recommended that an extra queryParam `lastDirtyTimestamp=System.currentTimeMillis()` be added. =||= Thanks for your answer, I guess this is our problem! When we put it out of service, we use this call manually (in a custom UI) : PUT /eureka/apps/{applicationId}/{instanceId}/status?value=UP and we are not specifying any lastDirtyTimestamp. =||= and how to specifying the lastDirtyTimestamp param or where add it into eureka client =||= @995270418L It's added automatically by the eureka client. We were using a custom UI that made ajax requests without the `lastDirtyTimestamp` parameter (it's optional). =||= @fredboutin @jebeaudet  Which version has corrected this Issue? thanks! =||= We corrected the way we call eureka by adding the lastDirtyTimestamp parameter, no version update was necessary. =||= @sangyuruo you _might_ need https://github.com/Netflix/eureka/issues/933 as well for a complete fix for this issue. =||= @fredboutin @jebeaudet Thanks for your answer! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
883Eureka - Unable to send heartbeat (Spring Cloud Brixton.Sr1 / Eureka 1.4.8)Milesy01/30/17, 11:39:34 AM"When I startup my Eureka server node I get exceptions at startup. (Cross posted to Spring Cloud, but it seems more specific to the actual Eureka code itself).

I have turned on Jersey logging to give an idea of the data in transit.

[error.txt](https://github.com/Netflix/eureka/files/651625/error.txt)

The JSON returned seems to be a server error rather than the expected instance JSON.

{""timestamp"":1481713238850,""status"":500,""error"":""Internal Server Error"",""exception"":""java.lang.NullPointerException"",""message"":""No message available"",""path"":""/eureka/apps/FOO.COM.SERVICE.EUREKA/foo.com:com.foo.service.eureka:8761""}

After this error happens, It doesnt happen again and I can access the URL fine:

http://foo.com:8761/eureka/apps/FOO.COM.SERVICE.EUREKA/foo.com:com.foo.service.eureka:8761?status=UP&lastDirtyTimestamp=1481713210390

and I can see a valid JSON response.

So it looks like the heart beat is possibly attempting to happen before the server has fully initialised? (Just my thought) 

My POM looks like - [pom.txt](https://github.com/Netflix/eureka/files/651624/pom.txt)
* Note I have had to force spring-cloud-starter-eureka-server to 1.1.4.RELEASE as we don't have 1.1.2.RELEASE in our internal repo yet (but it was working last week fine)

My configuration looks like:

```java
@Configuration
@EnableProperties
@EnableAutoConfiguration
@EnableEurekaServer
public class ApplicationConfig {
    @Bean
    public DiscoveryClient.DiscoveryClientOptionalArgs discoveryClientOptionalArgs() {
        DiscoveryClient.DiscoveryClientOptionalArgs args = new DiscoveryClient.DiscoveryClientOptionalArgs();
        List<ClientFilter> filters = new ArrayList<>();
        filters.add(new HTTPBasicAuthFilter(""eureka"", ""default""));
        filters.add(new LoggingFilter());
        args.setAdditionalFilters(filters);

        return args;
    }    
}
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
884Register a service under several namesMarcP0405/31/17, 07:43:13 AM"I'm looking to register a service under several names to handle service versionning issues, but maybe my approach is totally wrong, you tell me.

Here's what I want to do:
I have a service ""Service"". The first version of has a ""ServiceV1"" REST controller, it registers as ""ServiceV1"" in Eureka registry. I have a feign client for ""FeignClientV1"" corresponding to that ""ServiceV1"".
Later, new functionnalities are added to my service. I register them in a ""ServiceV2"" REST controller, and create a ""FeignClientV2"" which contains only the new functionnalities. My problem is that today I can only register my service as ""ServiceV2"" in Eureka registry, while I would like to register it as ""ServiceV1"" and ""ServiceV2"" because I want the clients only having the FeignClientV1 to be able to work with either my service v2 or my service v1.

I didn't find anyway to do that, here are related subjects I found:
http://stackoverflow.com/questions/25859782/how-to-locate-services-by-version-with-netflix-eureka-and-ribbon
http://stackoverflow.com/questions/36712303/registering-one-application-multiple-times-aliases-in-netflix-eureka
https://github.com/Netflix/eureka/issues/598 (but I don't see how ""eureka.vipAddress"" fills the need)""@MarcP04 you can register multiple vipAddresses for a service, as long as they are comma delimited (e.g. vipAddress=vip1,vip2). In this way, you can use a strategy where your ServiceV1 register with vip `vip1`, and a newer deployment that also support the v2 api register with a vip of `vip1,vip2`.

From a client side, clients that ask for vip1 will get servers for both older and newer deployments, whereas clients that want vip2 will only get the newer servers. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
885cannot access javax.inject.provideryllionsyllions01/09/17, 03:02:11 AM"when i try the eureka client examples in a maven project, it said ""cannot access javax.inject.provider"".""how did  you  resolve ,i hava same quesition =||= You need to add following dependency:
```xml
<dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
 </dependency>
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
886Could i pass configuration items to eureka client programmatically?yllionsyllions02/03/17, 06:30:03 AMCould i pass configuration items to eureka client programmatically instead of configuration file on the classpath?@xiaoerlyl you can, if you create your own implementation of EurekaClientConfig. You can then either use it directly, or create an override Guice binding to your own impl. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
887Images are not available in wiki documentVikram PurohitVikramBPurohit02/03/17, 06:29:23 AMhttps://github.com/Netflix/eureka/wiki/Eureka-2.0-Architecture-Overview"@VikramBPurohit I would advice not looking too deeply into eureka2. Per our wiki:
```
The 2.x branch is currently frozen as we have had some internal changes w.r.t. to eureka2, and do not have any time lines for open sourcing of the new changes.
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
888help！help！when eureka client  OOM happened，but eureka server’s app status not downzhudan02/03/17, 06:28:21 AM"when eureka client  OOM happened，but eureka server’s app status not down，not down。。。。。；

Caused by: java.lang.OutOfMemoryError: unable to create new native thread。


<spring-cloud.version>Brixton.M5</spring-cloud.version>




`2017-01-14 16:25:44.855 ERROR http-nio-10.161.175.42-9512-ClientPoller-0  org.apache.tomcat.util.net.NioEndpoint[log:182] -
java.lang.OutOfMemoryError: unable to create new native thread
        at java.lang.Thread.start0(Native Method) [na:1.8.0_65]
        at java.lang.Thread.start(Thread.java:714) [na:1.8.0_65]
        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:950) ~[na:1.8.0_65]
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368) ~[na:1.8.0_65]
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]
        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]
        at org.apache.tomcat.util.net.NioEndpoint.processSocket(NioEndpoint.java:621) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]
        at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:1113) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]
        at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:1071) ~[tomcat-embed-core-8.0.30.jar!/:8.0.30]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_65]`"This is not the repo for Spring Cloud issues =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
889Update gradle version from 2.10 to 3.3Bruno Bottazzinibrunobottazzini02/03/17, 06:10:14 AM"The version 3.3 brings a lot of performance improvements and bug fixes
As can be seen in the following link:
https://docs.gradle.org/current/release-notes

Signed-off-by: Bruno Bottazzini <bruno.bottazzini@targatelematics.com>"Hi @brunobottazzini a [Nebula](https://nebula-plugins.github.io/) update may also be required to get gradle 3.x to work for this project. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
890Eureka peer-peer communication doc is ambiguousAbhijit Sarkarasarkar05/30/19, 11:09:54 PM"> If any time, the renewals falls below the percent configured for that value (below 85% within 15 mins), the server stops expiring instances to protect the current instance registry information.

What does this mean? The service that stopped renewing is shut down (pretty hard to believe Eureka can do that)? Or Eureka just takes that instance out of registry?

> In the case of network outages between peers, following things may happen
The heartbeat replications between peers may fail and the server detects this situation and enters into a self-preservation mode protecting the current state.

Does not receving a heartbeat from an Eureka peer treated the same as not receiving a heartbeat from other services?""@asarkar thanks for the question. I looked at the related issues on spring-cloud and it looks like you have found the answers you need.

Out of curiosity, what versions of eureka are you running with? I read your blog (nice summary) and a few things with eureka/ribbon latencies have been improved recently. =||= @qiangdavidliu Thanks for your response. Not all my questions have been answered. If you read my blog, you'd have seen references to 2 tickets opened on Spring Cloud that're still open. For the sake of completion, if you could take the time to answer those, I think the blog will become more useful.

[spring-cloud-netflix#373](https://github.com/spring-cloud/spring-cloud-netflix/issues/373)

[spring-cloud-netflix#203](https://github.com/spring-cloud/spring-cloud-netflix/issues/203)

Also, I'm interested in knowing what are the improvements in Eureka you mentioned. We've moved to using Kubernetes service discovery from Eureka so I don't have a ready answer of what version we were previously using. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
8912.xBenjenStark02/03/17, 06:04:32 AMNaN@BenjenStark these branches are not meant to be merged. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
892Multiple eureka servers to lookuperikgollot02/03/17, 08:48:22 PM"Is there a way to lookup multiple Eureka servers with Feign ?
I do not talk about multiple servers into multiple zones but really 2 or more Eureka servers not linked ?
My need is that we've one information system with its own Eureka server and a Group level information system with also its own Eureka server. The two Eureka servers cannot know each other.
Thanks""And some services are provided by the local information system and orher by the Group level information system =||= @erikgollot it is possible to create multiple eureka-clients within the same JVM (if you avoid using DI), and potentially you may then be able to configure these separate clients to connect to the two separate server groups. =||= Oh yes thanks
It could be nice to add this capability into the annotation. I wiil see if I can investigate this =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
893Problem peering with HTTP Authentication.Milesy05/30/19, 11:09:54 PM"During troubleshooting at the following issue - https://github.com/spring-cloud/spring-cloud-netflix/issues/1647 I have came to see that the Jersey Client which is responsible for peering does not respect any HTTP authentication across the cluster.

This is within eureka-core-1.4.12

We use a shared Eureka defaultZone and all our of Eureka peers and the services which are discoverable must be locked down both with SSL and also with some authentication.

If we use a defaultZone like : 

`eureka.defaultZone=https://eureka:password@host1.business.net:8761/eureka/,https://eureka:password@host2.business.net:8761/eureka/`

everything works as expected, but it is not the ideal solution because those URLs are logged out into unsecured log files with the username and password within them.

The discovery client we configure in such a way:

```
    @Bean
    public DiscoveryClient.DiscoveryClientOptionalArgs discoveryClientOptionalArgs() {
        DiscoveryClient.DiscoveryClientOptionalArgs args = new DiscoveryClient.DiscoveryClientOptionalArgs();
        List<ClientFilter> filters = new ArrayList<>();
        filters.add(new HTTPBasicAuthFilter(eurekaUsername, eurekaPassword));

        if (""true"".equals(eurekaLogging)) {
            filters.add(new LoggingFilter());
        }

        args.setAdditionalFilters(filters);

        return args;
    }
```

We would like the Jersey Client within the JerseyReplicationClient class to also be configurable so we can inject an authentication filter into it, for example where it is used here:

```
    @Override
    public EurekaHttpResponse<ReplicationListResponse> submitBatchUpdates(ReplicationList replicationList) {
        ClientResponse response = null;
        try {
            response = jerseyApacheClient.resource(serviceUrl)
                    .path(PeerEurekaNode.BATCH_URL_PATH)
                    .accept(MediaType.APPLICATION_JSON_TYPE)
                    .type(MediaType.APPLICATION_JSON_TYPE)
                    .post(ClientResponse.class, replicationList);
            if (!isSuccess(response.getStatus())) {
                return anEurekaHttpResponse(response.getStatus(), ReplicationListResponse.class).build();
            }
            ReplicationListResponse batchResponse = response.getEntity(ReplicationListResponse.class);
            return anEurekaHttpResponse(response.getStatus(), batchResponse).type(MediaType.APPLICATION_JSON_TYPE).build();
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }
```

This is one of the fails we see within the logs:

```
26-01-2017 15:04:39 [TaskBatchingWorker-target_host1-18] ERROR c.n.e.c.ReplicationTaskProcessor - Batch update failure with HTTP status code 401; discarding 1 replication tasks
26-01-2017 15:04:39 [TaskBatchingWorker-target_host1-18] WARN  c.n.e.u.b.TaskExecutors - Discarding 1 tasks of TaskBatchingWorker-target_host1-18 due to permanent error
26-01-2017 15:04:50 [AsyncResolver-bootstrap-executor-0] INFO  c.n.d.s.r.a.ConfigClusterResolver - Resolving eureka endpoints via configuration
26-01-2017 15:04:50 [Eureka-EvictionTimer] INFO  c.n.e.r.AbstractInstanceRegistry - Running the evict task with compensationTime 0ms
26-01-2017 15:04:50 [Eureka-EvictionTimer] INFO  c.n.e.r.AbstractInstanceRegistry - Evicting 1 items (expired=1, evictionLimit=1)
26-01-2017 15:04:50 [Eureka-EvictionTimer] WARN  c.n.e.r.AbstractInstanceRegistry - DS: Registry: expired lease for EUREKA/host2:eureka:8761
26-01-2017 15:04:50 [Eureka-EvictionTimer] INFO  c.n.e.r.AbstractInstanceRegistry - Cancelled instance EUREKA/host2:eureka:8761 (replication=false)
```

I am looking for the appropriate approval within our business to contribute myself, if that will help get things moving quicker.

Regards,

Chris
"@Milesy thank you for the issue. We can take a look at this, but definitely if you are able to get the appropriate approval for a contribution, that'll likely lead to a quicker turn around. =||= Is there a work around ? =||= Any solutions here. Surely one can exclude logging the defaultZone URL's at least? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
894Why properties eureka.securePort and eureka.securePort.enabled do not affect HomepageUrl and StatusUrl?Benjamin Klausklues02/03/17, 06:13:30 AM"Hi,

I'm using eureka-client version 1.4.11 and trying I'm getting the infos of registered clients from my eureka-server using the method DiscoveryClient#getInstancesByVipAddress().

Now we want to use a secure connection between our application-clients and the services managed by eureka and therefore getting secure URLs from the InstanceInfos returned by DiscoveryClient#getInstancesByVipAddress().

**For me the expected behavior would be:**
setting the properties:
_eureka.securePort=443_
_eureka.securePort.enabled=true_
in my configuration should result in getting https-URLs from the instanceInfos retrieved by DiscoveryClient#getInstancesByVipAddress(), therefore I expect these values:
instanceInfo..getHomePageUrl() == **https**://< hostname >:**443**/home
instanceInfo.getStatusPageUrl() == **https**://< hostname >:**443**/status
instanceInfo.getHealthCheckUrl() == **https**://< hostname >:**443**/health

**But the actual behaviour is:**
with securePort.enabled=true
I get the following URLs:
instanceInfo..getHomePageUrl() == **http**://< hostname >:**80**/home
instanceInfo.getStatusPageUrl() == **http**://< hostname >:**80**/status
instanceInfo.getHealthCheckUrl() == **http**://< hostname >:**80**/health
and there is the additional property:
instanceInfo.getSecureHealthCheckUrl() == **https**://< hostname >:**443**/health

So i can use instanceInfo.getSecureHealthCheckUrl() for my purpose, but it seems strange for me that the other properties remain unsecure http-URLs if I set securePort.enabled=true."@klues thanks for raising this issue. What you describe make sense, however the reason it is this way today is primarily due to legacy reasons and unfortunately making large scale changes here would be difficult without breaking some level of backwards compatibility. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
895Fixed missing url in log outputRichard MüllerRichiMueller02/03/17, 06:01:42 AMWe get a lot of these log messages in our logfiles. We can't see which URL is causing the log message, as the placeholder {} is missing in the text. This pull request fixes this.Thanks @RichiMueller  =||= Fixed missing url in log outputRichard MüllerRichiMueller02/03/17, 06:01:42 AMWe get a lot of these log messages in our logfiles. We can't see which URL is causing the log message, as the placeholder {} is missing in the text. This pull request fixes this.NaNRichard Müller01/31/17, 10:01:01 PMFixed missing url in log output1
896inter services communication not working via zuul routesajayaks02/03/17, 06:08:14 AM"
I am trying to call service A from service B via application name and below is the setup.

1. Setup Eureka server and register other services and conductor server.
 conductor server is registered in eureka services list.
2. Setup zuul gateway and defining routing for conductor like below:- Zuul is running on 1113 port.
users:
      path: /apis/users/**
      serviceId: users-service
      stripPrefix: false

tasks:
      path: /apis/tasks/**
      serviceId: tasks-service
      stripPrefix: false

Both the services are working fine if i call them via zuul gateway in browser, meaning routing is fine.
http://localhost:1113/apis/users
http://localhost:1113/apis/tasks

Problem i am having is its not working user service is calling task service as below:-

Not working
restTemplate.getForObject(String.format(""http://tasks-service/apis/tasks/"") [Not working]

Below is working if i use server and port 
restTemplate.getForObject(String.format(""http://localhost:8380/apis/tasks/"") [working]


Its showing the correct name in services listed in eureka and working if i call that routes directly in browser but communication b/w the services is not working.

Please suggest."This is not the proper forum for spring cloud Netflix =||= Would you please suggest or redirect me for the correct forum. =||= See https://github.com/spring-cloud/spring-cloud-netflix/issues/1666 =||= Thanks @spencergibb  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
897Scope governator dependencies to reflect actual usageMatt Nelsonmattnelson02/03/17, 06:01:56 AMGovernator was scoped as a compile dependency of eureka-core incorrectly. A few other modules needed it for testing. This fixes consumers from pulling in this dependency transitively when it is not used.Thanks @mattnelson  =||= Scope governator dependencies to reflect actual usageMatt Nelsonmattnelson02/03/17, 06:01:56 AMGovernator was scoped as a compile dependency of eureka-core incorrectly. A few other modules needed it for testing. This fixes consumers from pulling in this dependency transitively when it is not used.NaNMatt Nelson02/03/17, 12:30:45 AMScope governator dependencies to reflect actual usage1
898Create OSSMETADATADavid Liuqiangdavidliu02/03/17, 06:03:31 AMNaNNaNCreate OSSMETADATADavid Liuqiangdavidliu02/03/17, 06:03:31 AMNaNNaNDavid Liu02/03/17, 06:03:12 AMCreate OSSMETADATA1
899fix concurrency bug found in getInstancesAsIsFromEureka()Tom Celluccitcellucci02/03/17, 11:04:40 PMNaNNaNfix concurrency bug found in getInstancesAsIsFromEureka()Tom Celluccitcellucci02/03/17, 11:04:40 PMNaNNaNThomas A Cellucci02/03/17, 10:01:23 PMfix concurrency bug found in getInstancesAsIsFromEureka()1
900Fix potential race conditions tracking features in InstanceInfoReplicatorelandau03/16/17, 05:15:54 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
901How can i do with the security tomcat enviroment?zyanbingchn05/31/17, 07:46:48 AM"security tomcat enviroment, that is, the tomcat configured as https.
now, how can i configure to load certification?

if tomcat is https, eureka application service will failed to register service, the error is:
``2017-02-09 15:04:19,957 ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient:83 [DiscoveryClient-CacheRefreshExecutor-0] [execute] Request execution error
**com.sun.jersey.api.client.ClientHandlerException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path** to requested target
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
	at com.sun.jersey.api.client.Client.handle(Client.java:652)
``""Are you using a self-signed certificate? 
Since you are using Tomcat, ensure that you have assigned the keystore in the conf/server.xml file. 
(https://hutter.io/2016/02/09/java-create-self-signed-ssl-certificates-for-tomcat/)

Next for the service which is registering to Eureka, it has to add the self-signed certificate to its truststore. If it is a java application, you can run it with -Djavax.net.ssl.trustStore parameter. 

You can read (https://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html) to view the basic keytool commands required to create keystore & import certificates to a truststore.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
902Multiple eureka clients as docker instances in a single hostsankarbalu05/31/17, 07:43:35 AM"I am trying to setup multiple eureka clients as docker containers in a single VM. 

By default, with network mode as bridge, eureka exports the container id as host name. To override the same, i added -h $(hostname) to docker run command. This resolved the hostname that is sent by eureka clients on the heartbeat message to eureka server and now the clients are registered with exact host names (say Host1:Port1). 

But when I try to run a second instance of the same eureka client by triggering another docker container with a different port, the docker instance is up and running without any issues. But instead of registering a new instance on eureka server like Host1:P2, the old instance was overridden and now eureka dashboard only shows Host1:P2. 

Is there a better option to run multiple instances of the same eureka client in a single host and register them in eureka correctly?""@sankarbalu eureka uniquely identifies a registering client via two keys, the instanceId and the appName. For your clients to be unique, you need to have at least one of these two be different between your clients.

It is possible to custom configure the instanceId of a client via config `eureka.instanceId=<some id>` (see https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/PropertyBasedInstanceConfigConstants.java#L11). =||= Closing old issue. Please re-open if necessary. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
903Discover Services in Starting statusAmit Pandeyamit210305/31/17, 07:47:01 AM"Hey,

We are trying to discover nodes from Eureka for a service.  I see that I can only see services which are in UP status after I try to get the nodes like :-  List<InstanceInfo> instances = application.getInstances();.

Is this by design or I need to do something extra to get all nodes, including one which are in Starting status (besides the ones in already UP Status).

Thanks"Hi @amit2103 by default, this is the behaviour. This can be changed via configuration `eureka. shouldFilterOnlyUpInstances=false`. (See https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DefaultEurekaClientConfig.java#L392) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
904"Red\Green Pattern and OUT_OF_SERVICE"mehmetsalgar05/30/19, 11:09:55 PM"Hi,

actually what I write here would be a feature request or may be there is a way to implements this already and you can tell me.

I wrote a blog about Microservices and I try to implement there Red\Green Pattern.

https://mehmetsalgar.wordpress.com/2016/11/05/micro-services-fan-out-transaction-problems-and-solutions-with-spring-bootjboss-and-netflix-eureka/

My problem is when I try to install the new version of my Microservices, I try to start in 'OUT_OF_SERVICE' status with the following configuration.

`eureka:
  instance:
    initialStatus: OUT_OF_SERVICE
    instanceEnabledOnit: false`

which works and my Microservices starts in 'OUT_OF_SERVICE' status then I plan to switch them to 'UP' status with JSon API but I also implemented Health Check to my Microservices (a class implementing 'HealthCheck' interface reporting to Eureka Status of my service), before I can interact with the JSon API, new version of my services are taking to 'UP' status. 

Unfortunately I don't get any information from the 'HealthCheck' interface about the current status of my Microservice in Eureka so I could prevent it that it will go to 'UP' status.

Is there a way to do us or can I propose to introduce a new status like 'RED_GREEN_DOWN' (as an example, it can be anything) so Health Check mechanism can change and only JSon API can do that?

I hope this is the correct place to write this, thx for the answers."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
905Instances Renew Problem.Jaredjin05/31/17, 07:47:29 AM"When I POST /refresh service node, The log show me service status is UP, but eureka server not receive UP log, the service is not exist and not available.
service log:
`com.netflix.discovery.DiscoveryClient    : Shutting down DiscoveryClient ...
o.s.c.n.eureka.InstanceInfoFactory       : Setting initial instance status as: STARTING
com.netflix.discovery.DiscoveryClient    : Unregistering ...
com.netflix.discovery.DiscoveryClient    : DiscoveryClient_SERVICE.SMS/10.128.17.115:service.sms:7002 - deregister  status: 200
com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient
o.s.c.n.e.s.EurekaServiceRegistry        : Unregistering application service.sms with eureka with status DOWN
o.s.c.n.e.s.EurekaServiceRegistry        : Registering application service.sms with eureka with status UP`

eureka server log:
`[c.n.e.registry.AbstractInstanceRegistry  : Cancelled instance SERVICE.SMS/10.128.17.115:service.sms:7002 (replication=false)
`""@Jaredjin your logs looks a bit strange, there are both registration and also unregistration logs mixed together. Are you in a shutdown sequence?

Additionally, looks like you are using spring cloud netflix, so you might also be able to get help here:
https://github.com/spring-cloud/spring-cloud-netflix . =||= Closing old issue. Please re-open if necessary. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
906disable load balancing?Miguel Gonzálezmagg05/31/17, 07:47:54 AM"Hello

Is there a way to disable load balancing?

I have a setup where I have an Eureka server, one grpc client microservice (1 AMI) and two grpc servers microservices ( so 2 AMIs). The case in general would having one client and N servers and having eureka provide service discovery. 

I want to hit both servers with the client. But Eureka load balances the request, if I do one request it hits one then the other.

thanks!
- Miguel"@magg how are you using loadbalancing? Most native uses of eureka uses the getInstances() -> List api which is not opinionated on loadbalancing. =||= Closing old issue. Please re-open if necessary. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
907eureka-client-1.4.12 TimedSupervisorTask  : task supervisor rejected the taskrenqiweirqw05/30/19, 11:09:55 PM"Source TimedSupervisorTask.java line 62
Need to determine whether the executor is shutdown.
Specific is when using spring cloud eurekaClient.

exception stack:
`
2017-03-04 11:47:34.485 ERROR 21604 --- [ver-bootstrap-0] c.netflix.discovery.TimedSupervisorTask  : task supervisor rejected the task

java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@300f48c6 rejected from java.util.concurrent.ThreadPoolExecutor@3ec8a0b7[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047) ~[na:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823) [na:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369) [na:1.8.0_92]
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112) ~[na:1.8.0_92]
	at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:62) ~[eureka-client-1.4.12.jar:1.4.12]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_92]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_92]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_92]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_92]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_92]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_92]
`

""Do I need to set the parameters when I use?
 =||= Hi @rqw I believe some fixes for this has gone into the later eureka releases. I see that spring cloud netflix currently has an 1.3.* RC release out that has upgraded to the latest eureka client. =||= Hi @qiangdavidliu ,Thank you for your answer.
I try last version. =||= Same issue here and using the latest from Spring Cloud. I have one Eureka server and two microservices, with one upstream from the other. When I use RestTemplate to call the other microservice, I get the same error referenced by spring-cloud/spring-cloud-netflix#1060 =||= Hi @ericis @rqw this PR (#838) was released around eureka version 1.5.x and changes the log levels from error to warn in the cases of an executor shutdown. Are you still seeing the messages logged at an error level? =||= Same problem as @ericis and no news about the solution, thanks. Only change the log level? =||= @troshko111 pls let us know why this ticket was **closed**. I still see a similar issue in **euraka-client-1.6.2**
**ERROR** - com.netflix.discovery.TimedSupervisorTask- task supervisor rejected the task
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@6ec2a9db rejected from java.util.concurrent.ThreadPoolExecutor@dd4a055[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 6101

Waiting for response. Thanks! =||= @AmarRocks the issue was closed as stale (2yo), if you experience this on the latest version please reopen with a minimal repro, (note that `1.6.2` is a very old version). Hope this makes sense. =||= Occurs from eureka client `1.19.3` of `Greenwish.SR3`, thus eureka client cannot registry any more.
```
2019-10-21 11:31:57.268  WARN [gateway,,,] 1 --- [scoveryClient-0] c.netflix.discovery.TimedSupervisorTask  : task supervisor rejected the task

java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@68f9703a rejected from java.util.concurrent.ThreadPoolExecutor@23437745[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 6263]
        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) [na:1.8.0_192]
        at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112) ~[na:1.8.0_192]
        at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:64) ~[eureka-client-1.9.13.jar!/:1.9.13]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_192]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_192]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_192]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_192]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_192]

2019-10-21 11:32:42.068  WARN [gateway,,,] 1 --- [scoveryClient-1] c.netflix.discovery.TimedSupervisorTask  : task supervisor rejected the task

java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@12418266 rejected from java.util.concurrent.ThreadPoolExecutor@4fd7df26[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 6256]
        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) [na:1.8.0_192]
        at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112) ~[na:1.8.0_192]
        at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:64) ~[eureka-client-1.9.13.jar!/:1.9.13]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_192]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_192]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_192]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_192]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_192]

2019-10-21 11:32:57.269  WARN [gateway,,,] 1 --- [scoveryClient-0] c.netflix.discovery.TimedSupervisorTask  : task supervisor rejected the task

java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@76de42ee rejected from java.util.concurrent.ThreadPoolExecutor@23437745[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 6263]
        at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) [na:1.8.0_192]
        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) [na:1.8.0_192]
        at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112) ~[na:1.8.0_192]
        at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:64) ~[eureka-client-1.9.13.jar!/:1.9.13]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_192]
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
908Overriding status does not replicate to other Eureka serversmherlund03/16/17, 05:44:27 PM"When running multiple Eureka servers and setting them up as replicas, overridden status messages made to one of the servers does not get replicated to the other servers.

For instance, when setting `PUT /eureka/v2/apps/appID/instanceID/status?value=OUT_OF_SERVICE` on one server, the other Eureka server still shows a status of **UP**.

Should the overriddenstatus value be replicated to all Eureka servers, or would the override need to be sent to all instances?

eureka version 1.4.12"@mherlund eureka server replication protocol by default does replicate status overrides to all peers. Is this something you saw regularly, or a one off? Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
909GraceTime property for Eureka client?Tobias SchneiderderTobsch05/31/17, 07:54:10 AM"I did not found anything about a grace time property when a client should wait until it calls for the first time a eureka server. 

Is there such a property?""@derTobsch do you mean for registration or data fetch?
For registration, rather than grace time, we prefer to control the registration state via eureka status.
For data fetch, we actually want to ensure that data is loaded in to the client at constructor time.

Thanks. =||= Closing old issue. Please reopen is necessary. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
910the 90sJon Chiangbingge103/22/17, 07:35:21 AM"i hava four services a b c d, register to eureka x , and  consumer y call  x ,to call a b c d .

this moment ,i shutdown the service a, the eureka Need 90s to feel the fail.
this 90s my application is Partially unavailable;


英文太差，我写段中文，我有四台机器  a b c d ,注册到注册中心 eureka “x”,有个消费者 y ,通过 x 拿到4个服务的地址，然后我关一台机器a，eureka 需要90s才能感知到 a 已经down了，这90秒我的服务不可用，请问怎么破。""为什么注册一个服务这么慢? (Why is it so Slow to Register a Service?)
Being an instance also involves a periodic heartbeat to the registry (via the client’s serviceUrl) with default duration 30 seconds. A service is not available for discovery by clients until the instance, the server and the client all have the same metadata in their local cache (so it could take 3 heartbeats). You can change the period using eureka.instance.leaseRenewalIntervalInSeconds and this will speed up the process of getting clients connected to other services. In production it’s probably better to stick with the default because there are some computations internally in the server that make assumptions about the lease renewal period.

作为一个实例向注册中心还包括一个默认持续30秒的周期心跳(通过客户的serviceUrl)。一个服务对于客户端的discovery不可用的，直到实例、服务端和客户端全都拥有相同的元数据在它们的缓存里面（这可能还需要3次心跳）。你可以改变使用eureka.instance.leaseRenewalIntervalInSeconds并且这将加快这一进程的客户端连接到其他服务。在实际生产中坚持默认可能是更好的，因为有一些在服务器内部计算对租赁复兴时期做出假设。 =||= @imsandy are you calling the shutdown method in the client when you shutdown your service? The eureka servers have two ways of removing registered clients:
1. eagerly if a shutdown is received.
2. if a client does not heartbeat for 3 consecutive heartbeats, it is evicted. This case can happen if your service shutdown without calling shutdown on EurekaClient, and leave to a 90s delay. =||= Thanks for Everybody , i add the retry to the application ,is ok =||= @zenger380  @qiangdavidliu 

意思是说服务提供方、服务调用方、eureka服务三方缓存中都有了相同的元数据（应该就是服务提供方地址、端口号、及接口列表信息），才认为服务被注册了吗？但好像还是没有解释为什么是3次心跳，还有哪个需要3次心跳（服务提供方？还是服务调用方？还是eureka注册中心服务） =||= @bingge1 How do you understand this problem?Can you describe it  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
911Does eureka has a function to unregister a service which is not available(in java application)WangChongLXChild05/31/17, 07:55:07 AMas the title@LXChild the java client contains a shutdown method that unregisters. This internally translates to an unregister REST call (https://github.com/Netflix/eureka/wiki/Eureka-REST-operations). =||= Closing old issue. Please reopen is necessary. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
912RAM ressources limitationSimon Bilodeauapplelight03/16/17, 07:24:57 PM"Hi, 

I would like to limit the amount of RAM used by Catalina in Eureka container. I would like to know if there is any limitation (on the ""aggressive"") side I should consider as a minimum amount of RAM so the container would start without any issues.

I was not able to find any ressources utilisation guideline.

Regards,

P.S: Sorry for my poor english writing.

I would like to change:
CATALINA_OPTS=""$CATALINA_OPTS -Xmx1024m""

to

CATALINA_OPTS=""$CATALINA_OPTS -Xmx512m""

Same for CPU time... Is there any limit (on the low side) I shouldn't cross ?""@applelight eureka server's resource requirements do ramp up as the number of connected clients in your environment increases, so it is hard to give you a good low limit. In practice, we've used EC2 m3.xlarge in smaller testing environments. These are 4cpu instances. For memory, I would recommend try to have a couple of GB. =||= Thank you for the answer, on my side, I was able (in a small testing env.) to set RAM and CPU to 1GB ans 1 CPU utilisation without any problem. Just under that seem`s to be problematic. 

Thank you again. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
913Confirmation on Eureka behaviour about the API level detaildattamayaharipalpatil05/30/19, 11:09:55 PM"Hello
We have a situation where we wanted to use Eureka service registry and discovery. We are able to use the service discovery and we can able to get the service instance host name detail with following code taken from Spring.io

This will return us host detail for the given service but we would like to know what different REST API expose by that service and how we can call that REST API using service registry reference dynamically. Please let us know if any mechanism to find individual REST API from service registry and call those REST API.


@Component
class DiscoveryClientExample implements CommandLineRunner {

    @Autowired
    private DiscoveryClient discoveryClient;

    @Override
    public void run(String... strings) throws Exception {
        discoveryClient.getInstances(""photo-service"").forEach((ServiceInstance s) -> {
            System.out.println(ToStringBuilder.reflectionToString(s));
        });
        discoveryClient.getInstances(""bookmark-service"").forEach((ServiceInstance s) -> {
            System.out.println(ToStringBuilder.reflectionToString(s));
        });
    }
}""If you are using spring-cloud-netflix, that is the right place to ask questions. Eureka has metadata you could use, but generally, if you ask for ""photo-service"", your client should know how to use it. =||= Thanks,
We are trying to use  Netflix Eureka as a service registry to register our services on Pivotal Cloud Foundry. Not sure which is correct place to ask this question.

Yes agree Eureka has metadata information but it does not expose the REST API level detail for individual service in metadata. 
It contain detail such as ""registrar_uri"", ""instanceId"", ""zone"" etc those are mostly the service registry detail and not the service level detail.

The 'photo-service' is just an example. Yes client should be aware of the service but just looking for option to dynamically identify the service API from registry and call the API, if possible. =||= >  to dynamically identify the service API from registry and call the API, if possible.
I don't think eureka is the right thing for that. =||= Thanks Spencer for confirmation !!

Hi All - Request to please update here, if anyone is aware of any other way/tool to dynamically call API other than eureka on PCF, or else will close this issue in few days. Thanks all in advance. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
914How to re register back to eureka server if heartbeat fail to send from spring-boot app.kosurusekhar05/30/19, 11:09:55 PM"We are seeing an issue with one of our spring-boot cloud application, one of our instance failing to send heartbeat some how and eureka server removing this instance from registry. When the instance is trying to update the status with PUT /eureka/v2/apps/appname/instanceid?status=UP&lastDirtyTimestamp=1489548084184 we are seeing 404 http response because we don't have instance with eureka. And this instance is never trying register again. Is there any configuration I need to enable so that it will try to register again with eureka after some retries or errors with heartbeats?

Here is stack-trace we are seeing when we are getting 404 response.

com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html; charset=utf-8 was not found
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:630) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:832) [eureka-client-1.4.9.jar!/:1.4.9]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1396) [eureka-client-1.4.9.jar!/:1.4.9]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_121]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]

Please let me some pointers.

Thanks in advance.""Hi @kosurusekhar an you please verify the version numbers of your eureka-client and your deployed eureka servers? Thanks. =||= I am facing the same issue, with same stack trace and error message. Apparently the services keep being registered with Eureka even after the connection failure, but we were not yet able to exclude any data loss because of this error. =||= @qiangdavidliu Thanks for the reply,  is there any compatible issues? We are using Eureka Client 1.4.9 and 1.6.x in some services.  Please let me know what is compatible version of server. 

If we have compatible issues then it should not register at all right? we are seeing that our services are registering and working for 20-30 days, then we are seeing these kind of heartbeat errors and disconnect with eureka. Once we got into this then we have to reboot the instance to get back normal. Is there any config or something to reconnect automatically after some retries of failure heart beats?
Thanks.

 =||= I also see this issue with newer spring clients and old eureka servers.  Seems to be due to 404's returning Content-Type: text/html (not handled) vs Content-Type: application/xml (this is OK).

eg:  from a 1.1.147 & 1.1.159  (note: currently upgrading these - but trying to find a suitable version to step up to without causing impact) - we get responses:

> GET /eureka/v2/apps/TEST/i-ababababa HTTP/1.1
> Host: ................
> User-Agent: curl/7.51.0
> Accept:application/json
>
< HTTP/1.1 404 Not Found
< Server: Apache-Coyote/1.1
< Content-Type: text/html;charset=utf-8
< Content-Language: en
< Content-Length: 985

Which result in the OP's exceptions (and hence - the service will never re-register.  We have to restart the client).

Where-as on a 1.6.2 server - we get:

> GET /eureka/v2/apps/TEST/i-abababababa HTTP/1.1
> Host: ..................
> User-Agent: curl/7.51.0
> Accept: */*
>
< HTTP/1.1 404 Not Found
< Server: Apache-Coyote/1.1
< Vary: Accept-Encoding
< Content-Type: application/xml
< Content-Length: 0
 =||= Hmm, let me take a look... =||= Facing the same problem, any news on this issue? =||= What about the issue? =||= we're also facing this issue - any update? =||= Any updates ? =||= eureka client 1.4.6, server 1.1.1 do not have this problem. =||= we're also facing this issue - Edgware.SR2 =||= I think it's a compatibility issue between client and server. Based on their documentation it's always safer to have the servers be on a newer version than clients.

Reference:
https://github.com/Netflix/eureka/wiki/Configuring-Eureka#clientserver-version-compatibility =||= We facing the same error. We use Edgware.SR2 as well. Has anyone new Infos?

I can reproduce the error with our new Release (Update from Dalston.SR5 to Edgware.SR3.) in the Cloud and also Local. 

------
Test One:
- Eureka Server (Edgeware.SR3) 
- ServiceA (Edgeware.SR3) 

Test-Steps:
--> Step One: First Start (order is not important): Everything works well. ServiceA register itself at eureka. heartbeat is send.
--> Step Two: Re-Start Eureka. ServiceA can't register again and always gets a 404. 

------
Second Test (Went back to our last Release). 
- Eureka Server (Still Edgeware.SR3 for testing). 
- ServiceA back to Dalston.SR5. (spring-cloud-starter-netflix-eureka-client in Version 1.4.0.RELEASE)
- ServiceB (Still with Edgeware.SR3 for negativ Test)

Test-Steps:
--> Reproduce Step One. Everything works.
-->Reproduce Step Two. After the Restart: ServiceA with Dalston.SR5 can successful register 
 again. ServiceB with Edgware still faces the problem.

------

So i came to the conclusion that it's a bug or I'm missing a new configuration detail in Edgware? 

It's super strange, but it looks like we need to downgrade to our last release. 

@ryanjbaxter Maybe you have a hpt tip for us?  =||= This doesnt seem to be a Spring issue, it appears from the comments above that it is a compatibility issue between the Eureka client and server.

@qiangdavidliu did you ever look into this? =||= Really can't see a difference. I will take a deeper look.  =||= Hi. Apologies for not updating, this issue somehow dropped off our radar. We did take a look at this originally, but was not able to find anything unfortunately. We have not seem these kind of cases internally (though we are not using eureka via spring). 

In general, the eureka-client logic is such that once a heartbeat request receives an 404, the client will attempt to re-register with the remote server, and this should happen every time a heartbeat fails. The heartbeat themselves will continue to happen at a 30s interval regardless of this success or fail. 

Looking at the eureka dependencies between Dalston.SR5 (eureka-client:1.6.2) and Edgeware.SR3 (eureka-client:1.7.2), these are clients that we still have internally and we have not seen issues with them so it seems unlikely this is a compatibility.

To verify, I can try to run a similar test as done by @cptstffn with our internal set up with the above two eureka-client versions and a custom server version at 1.7.2 to match Edgeware. I'll post back with results once I get some time to try that.

@ryanjbaxter can you verify for me that the versions I have quoted are the correct versions as used by Edgeware.SR5 and Dalston.SR3? Thanks.
 =||= I found the problem. It's a fault in our pom configuration. There was a exclusion for jersey-client and apache client4. I really don't know why it's there. I will do some research to understand why they excluded it. Sorry that I didn't saw that earlier. My apologize.  =||= @qiangdavidliu yes those versions are correct. =||= @cptstffn thank you for reporting back your findings, I'm glad to hear that your issue is resolved. To summarize:
1. Per the original issue reported by @kosurusekhar, the answer posted by @goatherder provided an answer. It is possible that eureka server builds from many years ago may have incompatibilities with more modern clients, but we don't believe there are any incompatibilities between servers and clients released in the last 2 years at the least. 
2. Per the issue posted by @cptstffn that indicated a potential issue with eureka version between two differing spring cloud releases, this issue is now root caused as due to dependency exclusions on lower level artifacts.

Given the above, I am going to resolve this issue unless there are any additional questions remaining? Thanks.
 =||= I also met this issue. I did not find anything wrong config with jersey in pom.xml.  Would you help me to fix it please?

My issue is randomly happened.

When I stop the eureka server and then  restart the server, the server A can not re-registered success.
The error follow below here:(It will retry send heart beat intervaly 30 secs by default)

2018-10-11 10:45:57,198 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.n.d.s.t.d.RedirectingEurekaHttpClient - Request execution error
com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html was not found
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:630)
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:824)
        at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1393)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
2018-10-11 10:45:57,199 [DiscoveryClient-HeartbeatExecutor-0] WARN  c.n.d.s.t.d.RetryableEurekaHttpClient - Request execution failed with message: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html was not found
2018-10-11 10:45:57,199 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.n.d.DiscoveryClient - DiscoveryClient_OSM-ADMIN/10.132.81.36:osm-admin:8082 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
        at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:824)
        at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1393)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
 =||= we are also facing similar kind of issue where heartbeat fails continuously and not able to re-register itself. We are on dalston sr1 version. @ryanjbaxter 
```
2018-10-22 10:50:38,335 [] DEBUG [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.provider.DiscoveryJerseyProvider  - Cannot parse request body
com.fasterxml.jackson.databind.JsonMappingException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@67ad1f4d; line: 1, column: 2]
	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1584)
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1508)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1102)
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:178)
	at org.springframework.cloud.netflix.eureka.server.CloudJacksonJson.decode(CloudJacksonJson.java:67)
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2018-10-22 10:50:38,340 [] DEBUG [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient  - Jersey HTTP PUT http://eureka0-P2AG-214210.aws.athenahealth.com/eureka//apps/GATEWAY/Gateway:0b238b0461358c296d6dc20096e44810; statusCode=404
2018-10-22 10:50:38,340 [] ERROR [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient  - Request execution error
javax.ws.rs.WebApplicationException
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2018-10-22 10:50:38,341 [] WARN  [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient  - Request execution failed with message: null
2018-10-22 10:50:38,341 [] ERROR [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.DiscoveryClient  - DiscoveryClient_GATEWAY/Gateway:0b238b0461358c296d6dc20096e44810 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Retry limit reached; giving up on completing the request
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:138)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
``` =||= @bsushant-athena this repo is for Netflix Eureka not for Spring Cloud Eureka.  If you believe there is a problem with Spring Cloud, please open an issue here https://github.com/spring-cloud/spring-cloud-netflix =||= @bsushant-athena  Not sure your issue whether as same as me.

My issue had been fixed. The issue is caused by wrong nginx configuration of eureka url.
Our nginx configuration will encapsulate 500,502 error as 404.
It works after removing this ngx config for eureka server url.
 =||= @youtianhong can you please share your eureka config?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
915Enable/Disable instance API questionkirillsablin04/27/17, 11:21:46 PM"Hello,
Could you please explain next situation:

Consider sequence of api calls 

PUT /eureka/v2/apps/appname/instanceid/status?value=OUT_OF_SERVICE - to temporary remove service out of service

DELETE /eureka/v2/apps/appname/instanceid/status?value=OUT_OF_SERVICE - to remove previous override

Will next heartbeat put instance into UP status? Or delete request should contain value=UP to make it happen?  
PUT /eureka/v2/apps/appname/instanceid?status=UP&lastDirtyTimestamp=... - heartbeat 

Thank you for your time!

"Hi @kirillsablin , the next heartbeat will put the instance into either UP or DOWN, depending on what the registered healthcheck to the eureka-client is (if none, it should be UP). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
916HTTP is harcoded in serviceUrl Creation with DNSerdog05/30/19, 11:09:55 PM"Hi,

I'm setting up Eureka replication with HTTPS. I currently have it working by setting the defaultZone equal to  all of the eureka instances (https://peer1.local:8761/eureka,https://peer2.local:8761/eureka). However, this is not what I want. I want to use the DNS TXT record discovery of other Eureka instances, so i don't have to hard code the machine hostnames. Configured like this, Eureka finds the IP addresses from DNS, but it creates service urls with plain http, not https. This is causing the discovery not to work.

Looking at the code, I see that http is hardcoded in the service url creation. I believe this means that you can only use https, if you hardcode other eureka instances in the defaultZone property.

https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils.java#L148

Is there a way to override this, or does this need to be implemented?

Thanks! "HI @erdog looks like a code level fix is necessary here to enable https. We welcome any PRs for updates. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
917Many configure item did not description in eureka-server's spring-configuration-metadata.json?Deleted userghost04/27/17, 11:23:37 PM"# jar info
spring-cloud-netflix-eureka-server-1.2.6.RELEASE.jar
spring-configuration-metadata.json

# description 
```
{
      ""name"": ""eureka.instance.registry.default-open-for-traffic-count"",
      ""type"": ""java.lang.Integer"",
      ""description"": ""Value used in determining when leases are cancelled, default to 1 for standalone.\n Should be set to 0 for peer replicated eurekas"",
      ""sourceType"": ""org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties"",
      ""defaultValue"": 1
    },
    {
      ""name"": ""eureka.instance.registry.expected-number-of-renews-per-min"",
      ""type"": ""java.lang.Integer"", 
      ""sourceType"": ""org.springframework.cloud.netflix.eureka.server.InstanceRegistryProperties"",
      ""defaultValue"": 1
    }
    .....
```"This is not the place for spring cloud Netflix =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
918Using Eureka service as Service discovery in Pivotal cloud foundry web servicesPradeep Kumar Tippapktippa04/27/17, 11:24:34 PM"I have a free account on Pivotal cloud foundry web services(PWS). I am trying to use Eureka service discovery provided in marketplace. I am able to start the service and able to bind the apps to the service and get the service details in VCAP_SERVICES env variable of apps.

VCAP_SERVICES: '{""p-service-registry"":[{\n  ""credentials"": {\n    ""uri"": ""https://eureka-cdb95aee-5332-4a30-b92c-b18a81141719.cfapps.io"",\n    ""client_secret"": ""STHux3jxcItf"",\n    ""client_id"": ""p-service-registry-403161c8-5ca7-492f-ba0c-b6a3e4ec7bf7"",\n    ""access_token_uri"": ""https://p-spring-cloud-services.uaa.run.pivotal.io/oauth/token""\n  },\n  ""syslog_drain_url"": null,\n  ""volume_mounts"": [\n\n  ],\n  ""label"": ""p-service-registry"",\n  ""provider"": null,\n  ""plan"": ""standard"",\n  ""name"": ""service-registry"",\n  ""tags"": [\n    ""eureka"",\n    ""discovery"",\n    ""registry"",\n    ""spring-cloud""\n  ]\n}]}'


Able to get the authentication token by running the below command as given in https://docs.cloudfoundry.org/api/uaa/#client-credentials-grant

curl -k -X POST -H ""application/json"" -H 'Content-Type: application/x-www-form-urlencoded' --data ""grant_type=client_credentials&client_secret=STHu3jxOcItf&client_id=p-service-registry-403161c8-5ca7-492f-ba0c-b6a3e4ec7bf7&response_type=token"" https://p-spring-cloud-services.uaa.run.pivotal.io/oauth/token

After getting the access token when I request the Service discovery api’s given in https://github.com/Netflix/eureka/wiki/Eureka-REST-operations

It is giving me 404 for all the API’s. "@pktippa for spring cloud packaging of eureka, please ask questions at https://github.com/spring-cloud/spring-cloud-netflix =||= @pktippa Where you able to get any solution to this ?  =||= I am stuck at the same point. Eureka Server is registered on Pivotal Cloud Foundry and services are registered there but I am not able to find services in the client using @DiscoveryClient from Cloud services. If you were able to solve this issue ,please mention a version of your solution?? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
919Is there a way to implement the eureka-client in Java EE?real_rudirealrudi05/30/19, 11:09:55 PM"Hello there

After including the eureka-client dependency in my maven/javaEE project I'm not able to deploy it anymore because of several CDI Exceptions.

Does anyone have any experience in writing a JavaEE-Eureka-Client without Spring usage (deployment is on payara 4.1)?

Best regards
Erik""Hi Erik, 

yes we did this several times. Using Google to produce the client like this: 

 @Produces
  public EurekaClient getEurekaClient() {
    if (client == null) {
      synchronized (lock) {
        if (client == null) {
          Injector injector =
              Guice.createInjector(Modules.override(new EurekaModule()).with(new AbstractModule() {

                /*
                 * Overriding the default inject because using the lokal Config instead of AWS
                 * Config
                 */

                @Override
                protected void configure() {

                  bind(EurekaInstanceConfig.class)
                      .toProvider(MyDataCenterInstanceConfigProvider.class).in(Scopes.SINGLETON);

                  bind(EurekaClientConfig.class).toProvider(DefaultEurekaClientConfigProvider.class)
                      .in(Scopes.SINGLETON);

                  // this is the self instanceInfo used for registration purposes
                  bind(InstanceInfo.class).toProvider(EurekaConfigBasedInstanceInfoProvider.class)
                      .in(Scopes.SINGLETON);

                  bind(EurekaClient.class).to(DiscoveryClient.class).in(Scopes.SINGLETON);

                }
              }));

          client = injector.getInstance(EurekaClient.class);
          ApplicationInfoManager.getInstance().setInstanceStatus(InstanceStatus.UP);
        }
      }
    }

    return client;

  } =||= you need this dependencies: 

<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>4.1.0</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>21.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>

		<dependency>
			<groupId>com.netflix.eureka</groupId>
			<artifactId>eureka-client</artifactId>
			<version>1.6.2</version>
		</dependency> =||= Hi,

I have the same case. I need to implement a EurekaClient for our JAX-RS rest endpoints. I'm assuming that this is how i would be able to do it as well, is that right?
May I know why Guice is needed? is it the one that would handle the maintenance/lifecyle of the EurekaClient singleton? What about netflix.governator?
Is there a need to handle the shutting down of EurekaClient singleton anywhere in the jersey?

By the way, i tried this and i got a warning that ApplicationInfoManager.getInstance() is already deprecated and the javadocs suggests to use DI.

Many thanks,
Toni
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
920made NonEc2EurekaClientModuleTest pass at an ec2 instance tooErhan Keskenekesken04/03/17, 07:09:56 PMNaNthanks @ekesken  =||= made NonEc2EurekaClientModuleTest pass at an ec2 instance tooErhan Keskenekesken04/03/17, 07:09:56 PMNaNNaNErhan Kesken03/27/17, 01:52:21 PMmade NonEc2EurekaClientModuleTest pass at an ec2 instance too1
921DiscoveryClientHealthTest is failing in a host with single CPUErhan Keskenekesken05/30/19, 11:09:56 PM"Because of a race condition. This assert:

https://github.com/netflix/eureka/tree/64e5e2ee97c6036d9a2f447bada79d643c985fb6/eureka-client/src/test/java/com/netflix/discovery/DiscoveryClientHealthTest.java#L72

fails, because this thread:

https://github.com/netflix/eureka/tree/64e5e2ee97c6036d9a2f447bada79d643c985fb6/eureka-client/src/main/java/com/netflix/discovery/InstanceInfoReplicator.java#L47

triggers this change:

https://github.com/netflix/eureka/tree/64e5e2ee97c6036d9a2f447bada79d643c985fb6/eureka-client/src/main/java/com/netflix/appinfo/ApplicationInfoManager.java#L213

which causes overriding of the mock value for hostname which is set here:

https://github.com/netflix/eureka/tree/64e5e2ee97c6036d9a2f447bada79d643c985fb6/eureka-test-utils/src/main/java/com/netflix/discovery/junit/resource/DiscoveryClientResource.java#L272

this change triggers a status update which changes status from STARTING to UP, which causes test to fail.

If there is a single CPU, ""DiscoveryClient-InstanceInfoReplicator-0"" thread always (at least in all my trys) running before ""main"" thread executing the failing assert."Thanks for the report @ekesken . We'll take a look into this ... =||= Should be fixed in #946 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
922Improving conditional statement for maptaekyungbistros05/31/17, 06:33:17 AM"remoteRegionUrlsWithName can never null, so change null check condition

According to EurekaServerConfig.java's remoteRegionUrlsWithName comment
  Empty map if no remote region url is defined.

Now, Always running
https://github.com/Netflix/eureka/blob/4f24d9dcf90713b421f6c092fa63e707cbf74df3/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L138-L151"Thanks for the PR @bistros  =||= Improving conditional statement for maptaekyungbistros05/31/17, 06:33:17 AM"remoteRegionUrlsWithName can never null, so change null check condition

According to EurekaServerConfig.java's remoteRegionUrlsWithName comment
  Empty map if no remote region url is defined.

Now, Always running
https://github.com/Netflix/eureka/blob/4f24d9dcf90713b421f6c092fa63e707cbf74df3/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L138-L151"NaNdev.bistros04/04/17, 05:03:02 AM"Improving conditional statement for map

remoteRegionUrlsWithName can never null, so change null check condition

According to EurekaServerConfig.java's remoteRegionUrlsWithName comment
  Empty map if no remote region url is defined.

Now, Always running
https://github.com/Netflix/eureka/blob/4f24d9dcf90713b421f6c092fa63e707cbf74df3/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L138-L151"1
923does not aws have private dns now?Karthik Ramlistaction04/27/17, 11:25:47 PMNaNHi @listaction for AWS features, please refer to AWS documentation. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
924eureka-client : Incorrect jackson-annotations version in POM/Build.gradlesmkb8005/08/17, 12:22:27 PM"Hi Team,

The master branch **eureka-client** is dependent on **jackson-annotations** 2,5.4. But during runtime following **NoClassDefFoundError** is thrown. Changing the version of  jackson-annotations to **2.8.3** in my POM fixed the issue. Pls fix it your codebase.

`
Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/annotation/JsonInclude$Value
	at com.fasterxml.jackson.databind.cfg.MapperConfig.<clinit>(MapperConfig.java:45)
	at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:543)
	at com.fasterxml.jackson.databind.ObjectMapper.<init>(ObjectMapper.java:460)
	at com.netflix.discovery.converters.EurekaJacksonCodec.<init>(EurekaJacksonCodec.java:111)
	at com.netflix.discovery.converters.EurekaJacksonCodec.<clinit>(EurekaJacksonCodec.java:92)
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.<init>(CodecWrappers.java:285)
	at com.netflix.discovery.converters.wrappers.CodecWrappers.create(CodecWrappers.java:125)
	at com.netflix.discovery.converters.wrappers.CodecWrappers.getEncoder(CodecWrappers.java:75)
	at com.netflix.discovery.converters.wrappers.CodecWrappers.getEncoder(CodecWrappers.java:66)
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>(DiscoveryJerseyProvider.java:68)
	at com.netflix.discovery.shared.transport.jersey.EurekaJerseyClientImpl$EurekaJerseyClientBuilder$MyDefaultApacheHttpClient4Config.<init>(EurekaJerseyClientImpl.java:194)
	at com.netflix.discovery.shared.transport.jersey.EurekaJerseyClientImpl$EurekaJerseyClientBuilder.build(EurekaJerseyClientImpl.java:170)
	at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory$JerseyEurekaHttpClientFactoryBuilder.buildLegacy(JerseyEurekaHttpClientFactory.java:197)
	at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory$JerseyEurekaHttpClientFactoryBuilder.build(JerseyEurekaHttpClientFactory.java:178)
	at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory.create(JerseyEurekaHttpClientFactory.java:135)
	at com.netflix.discovery.shared.transport.jersey.Jersey1TransportClientFactories.newTransportClientFactory(Jersey1TransportClientFactories.java:48)
	at com.netflix.discovery.DiscoveryClient.scheduleServerEndpointTask(DiscoveryClient.java:454)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:392)
	... 6 more
`

Regards,
Sameek""Hi @sameekb do you have other dependencies in you application that bumped jackson version 2.8.3? Jackson have a family of jars that need to be in sync with versions.  =||= Hi @qiangdavidliu,
There is no other transitive dependency on jackson version 2.8.3. =||= Hi @qiangdavidliu ,

**eureka-client 1.6.2** got built using  **jackson-annotations 2.5.4** =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
925Maybe support thrift？DreampieDreampie04/27/17, 11:27:47 PMNaNHi @Dreampie at this point, we are going some other directions and is unlikely to support thrift unfortunately. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
926Need Help: Using ServiceCall EIP and camel-ribbon component to discover service from Netflix Eureka Serversmkb8004/27/17, 11:30:09 PM"Dear All, 

I am trying to discover a service (localhost:9999) registered in a Eureka Server running at localhost:8080 using ServiceCall EIP and camel-ribbon component checked out from Github master branch i.e. 2.19.0-SNAPSHOT version. 

Following is my eureka-service properties used while registering the service: 

`eureka.name=vertxHttp
eureka.vipAddress=http.vertx.net
eureka.port=9999 `

Now, my route to lookup the registered service is: 

`
        StaticServiceDiscovery servers = new StaticServiceDiscovery(); 
        servers.addServer(""localhost"", 8080); 

        RibbonConfiguration configuration = new RibbonConfiguration(); 
        RibbonLoadBalancer loadBalancer = new RibbonLoadBalancer(configuration); 

        // configure camel service call 
        ServiceCallConfigurationDefinition config = new ServiceCallConfigurationDefinition(); 
        config.setLoadBalancer(loadBalancer); 
        config.setServiceDiscovery(servers); 

        // register configuration 
        getContext().setServiceCallConfiguration(config); 
        
        from(""direct:start"") 
        .serviceCall(""vertxHttp"",""http:vertxHttp.host:vertxHttp.port"") 
        .process(new Processor() { 
                        
                        @Override 
                        public void process(Exchange exchange) throws Exception { 
                                // TODO Auto-generated method stub 
                                System.out.println(""From Route->""+exchange); 
                        } 
                }) 
        .to(""mock:result""); 
`

While running the above route in debug mode, the control is not going into Processor.process, so I am unable to check the contents of exchange to see whether ServiceCall is working as expected. 

Couple of questions: 
1) Can I use ServiceCall EIP and camel-ribbon component to discover a service registered in Netflix Eureka Server? 

2) If yes, pls help me in getting it working. 

Thanks in advance. 

Regards, 
Sameek Bhaumik"Hi @sameekb this question is better answered by the maintainers of https://github.com/apache/camel =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
927Enable customize discovery client scheduler thread poolMaxim Kirilovmaximkir05/31/17, 06:40:51 AM"Today's implementation has a hard coded value of 3. While other 2 executors (heartbeat & cache Refresh) can be customized with properties (client.heartbeat.threadPoolSize & client.cacheRefresh.threadPoolSize). 
I suggest to add another property: client.scheduler.threadPoolSize for client scheduler core size.""@maximkir looks like the size of 3 for the top level schedule is a legacy of old client needs, and there really only need to be 2 threads (1 for cache refresh, 1 for heartbeat). The InstanceInfoReplicator function used to share the same pool (hence the size of 3) but that now has its own scheduler.

As the actual execution tasks are protected, there should be no need to make the pool size configurable and it should instead be set to 2. Was there some reason you found in your environment that prompted the need to make this pool size configurable? Thanks. =||= No, I just inspected the tread pools that created by the discovery client and their roles. The fixed value catch my eye with comparison to other pools. 
A comment that explains the fixed value can be nice for future readers. =||= Thanks, done. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
928Configure discovery client executor thread pool sizeMaxim Kirilovmaximkir05/31/17, 06:40:41 AMrelated to issue #927Hi @maximkir thanks for the PR, please see the comments/questions in the corresponding issue. =||= @maximkir thanks for the PR. Have fixed the client and added comments. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
929Best practices for Eureka server upgradesJacques-Etienne Beaudetjebeaudet04/27/17, 11:53:10 PM"Hi Netflix,

I'm looking at the best practices to gracefully upgrade Eureka servers without downtime and I have yet to find any information about that. I've ran into issues lately (more on that later) and I want to make sure I'm doing this properly. From my experience, there seems to be 3 ways to update servers (we're using the TXT DNS service urls endpoint resolution and have 2 eureka servers in different zones) : 

### TXT DNS upgrade
I haven't tested this one but I'm guessing it should work. You start by adding a new EIP in the relevant zone's DNS where you're spawning a new Eureka server. You spawn the new server, it grabs the new EIP and eventually, clients will start to send heartbeats to the new server and it will get replication from the old one. 

Once everything is up and running, remove the old EIP from the zone's DNS, wait for propagation and client service urls refreshes and shutdown the old server. This in theory should be without any error logs but a much longer process since you need to wait DNS propagation and service urls refreshes. It is also hard to assert that every client are aware of the new EIP other than checking the logs. You could also potentially have DNS cache problems.

### Side by side upgrade
This is the method we currently use, it involves spawning a new instance with the new version of the server side by side with the old. No modification to the TXT DNS are made. Once the server is up and running and the registry is replicated, the old server is terminated. Its EIP then gets released and grabbed by the new server.

From the moment the EIP is associated to the new instance, you need to wait 10 minutes so that the peer eureka node updater job is executed (method `getPeerEurekaNodesUpdateIntervalMs` in `EurekaServerConfig`, the default is 10 minutes).

This works but it creates a lot of noise in the logs since for a while (when the old server is shutting down, you get connect timeouts error logs).

### In place upgrade
You shutdown the old server, replace the jar and boot it up again on the same instance. 

This also generates a lot of error logs.

### Conclusion
What is the prefered way to upgrade Eureka servers without downtime and with assurance that no registry sync occur? I'm fine with some error logs if they're necessary from my end.""Hi @jebeaudet we internally deploy in a way that is a combination of your last two methods. We terminate the older instance without editing the TXT records (running sub-par) and bring up a new instance that assumes the vacated EIP once it is up.

This does generate some connection logs on the other eureka servers (clients have additional logic to mitigate even this) but eureka is designed to be resilient to running sub-par.

Please do note that we run a lot more than 2 servers internally. I would recommend at least 3 so when you are deploying, you are never down to just a single live server. =||= Thanks for the quick feedback @qiangdavidliu, this is valuable information to me and many others that will end up here with a google search, I could not find any information about upgrades anywhere. Thanks again! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
930Issue while upgrading Eureka serverJacques-Etienne Beaudetjebeaudet04/27/17, 11:55:22 PM"Related to https://github.com/Netflix/eureka/issues/929, I created 2 issues so they're clearly divided, hopefully it's fine with you. 

Last upgrade, we had a small downtime with clients complaining there were no instance of an application in their registry (`Load balancer does not have available server for client: foo`). We're using the ""Side by side upgrade"" mentioned in https://github.com/Netflix/eureka/issues/929. It is the first time we encountered this and I'm trying to trace the issue to understand what happened. There was a misunderstanding in the procedure and the following timeline happened : 

1. Spawn new eureka server
2. When it's up and running, old server is stoped
3. While it's stopping (Still up and receiving heartbeats), the EIP was manually dissasociated in the AWS dashboard
4. New eureka server grabs the released EIP within 1 minute (11:52:35)
5. New eureka server started expiring leases of multiple servers (11:54:36)
6. Old eureka server shutdown completely (11:55:16) 
5. Clients encountered exceptions (11:55:45)

My hypothesis is that once the new server grabbed the EIP, the old continued to receive heartbeats since clients had the connection opened in their pool and did not receive any exception so they continued to use that live connection. Heartbeats/replication did not occured and this eventually lead to the canceling of leases due to the missing heartbeats (we have the self preservation mode off). Is it plausible from your perpective?

Thanks!""Hi @jebeaudet there are a few potential minor races that can occur when an eureka server has synced but has not assumed an EIP, and what you describe is plausible. There might also be stale registry data in the synced server as while it has not assumed the EIP, it is not receiving up to date replications.

Re the other issue opened, we do our deployments by going sub-par first to avoid any races. We also run with more servers so when sub-par, we still have plenty of redundancy. The system is designed so that going sub-par temporarily is not an issue (as running in AWS, you can lose an instance at any time). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
931Fix link rendering in README.mdMax Johansenmacsj20004/27/17, 11:50:22 PMThere's a space in between the brackets and parentheses in the readme, which causes the links to not render properly. I've removed the space so the links look like links now.Thank you @macsj200  =||= Fix link rendering in README.mdMax Johansenmacsj20004/27/17, 11:50:22 PMThere's a space in between the brackets and parentheses in the readme, which causes the links to not render properly. I've removed the space so the links look like links now.NaNMax Johansen04/21/17, 01:32:49 PMFix link rendering in README.md1
932Veracode Testing identifies Insufficient Entropy issue in eureka client jarjbaurchn04/27/17, 11:48:24 PM"Veracode has identified 2 issues in the following classes  in eureka-client-1.4.12.jar

ResolverUtils.java 96
SessionedEurekaHttpClient.java 92

The issue details are as below.

**Insufficient Entropy (CWE ID 331)
**Description**
Standard random number generators do not provide a sufficient amount of entropy when used for security purposes.
Attackers can brute force the output of pseudorandom number generators such as rand().



**Recommendations**
If this random number is used where security is a concern, such as generating a session identifier or cryptographic
key, use a trusted cryptographic random number generator instead.

Can you please help  confirm if this indeed an issue which needs to be fixed in code or a false positive from Veracode. If to be fixed, can you also let us know if there is any timeline for fixing it.
"Hi @jbaurchn thank you for the analysis. The usage here is not for security purposes.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
933409 Conflict Response does not send the InstanceInfo back to the clientJacques-Etienne Beaudetjebeaudet05/31/17, 11:27:12 PM"In `InstanceResource`, when renewing a lease and `lastDirtyTimestamp` is not null, the code will return a 409 Conflict to the client in a certain situation. However, `PeerReplicationResource` will not return the `InstanceInfo` in the body of the response unless the status code is 200.

On the client side of things, `PeerEurekaNode` needs this `InstanceInfo` to execute the method `syncInstancesIfTimestampDiffers`. Since it's never sent back from the server, this code never gets executed and you get `The replication of task XXX/i-XXX@XXX failed with response code 409` logs until you fix it manually.

PR submitted."Sorry for the amended commits noise :) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
934Add the InstanceInfo to the response in case of 409 status codeJacques-Etienne Beaudetjebeaudet05/31/17, 11:27:12 PM"Fixes #933.

Thanks!"Thanks @jebeaudet, taking a look ... =||= @qiangdavidliu Have you had the chance to give it a look? We're releasing this patch in our production environment soon and I'd sleep better if I had your green thumbs on it :wink:  =||= Hi @jebeaudet apologies for the delayed response. This PR looks sound and makes logical sense, but I want to set up a quick test in our test env to test this out just to verify any potential unintended side effects. I'll let you know soon. =||= @jebeaudet prelim trial seems ok, though there were some weirdness. Will merge this and I'll also set up a config guard for a quick 'undo'. Thanks for the contrib! =||= @qiangdavidliu Did you get a chance to test it enough to remove the failguard of https://github.com/Netflix/eureka/commit/6f3f997d640c32b2d391f6555a5cdaa7cd66e7c0? =||= @qiangdavidliu Any info about that safeguard? Thanks! =||= Add the InstanceInfo to the response in case of 409 status codeJacques-Etienne Beaudetjebeaudet05/31/17, 11:27:12 PM"Fixes #933.

Thanks!"NaNJacques-Etienne Beaudet04/21/17, 09:05:15 PM"Add the InstanceInfo to the response in case of 409 status code

When the server receive a heartbeat from a peer with a lastDirtyTimestamp lower
than the timestamp it has, it will return a 409 Conflict response code. On the
client side, it will use this status code to trigger a resync on this particular
instance.

The PeerReplicationResource was however stripping the required InstanceInfo
from the response unless the status code was a 200 which is not the case here.
This simple fix adds the InstanceInfo to the response in case of 409.

Fixes gh-933"1
935update versionJackleelqjack05/31/17, 06:44:01 AMNaNThanks for the PR @lqjack . I am going to close this and update to the latest nebula version. Appreciate the PR though. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
936The home page of eureka-server is shown as XML format Kentkenttanl05/12/17, 09:05:50 AM"Hello eldest brother,

I met a strange question,  when I visit home page(http://127.0.0.1:1111/), it's not like HTML page, but this:
```XML
This XML file does not appear to have any style information associated with it. The document tree is shown below.
<com.netflix.eureka.util.StatusInfo>
<generalStats>
<current-memory-usage>440mb (86%)</current-memory-usage>
<num-of-cpus>4</num-of-cpus>
<total-avail-memory>507mb</total-avail-memory>
<environment>test</environment>
<server-uptime>00:04</server-uptime>
</generalStats>
<applicationStats>
<unavailable-replicas>http://localhost:8761/eureka/,</unavailable-replicas>
<available-replicas/>
<registered-replicas>http://localhost:8761/eureka/</registered-replicas>
</applicationStats>
<instanceInfo>
<instanceId>WCMIS208:SmartDataStack-Robot:1111</instanceId>
<hostName>WCMIS208</hostName>
<app>SMARTDATASTACK-ROBOT</app>
<ipAddr>10.16.72.21</ipAddr>
<status>UP</status>
<overriddenstatus>UNKNOWN</overriddenstatus>
<port enabled=""true"">1111</port>
<securePort enabled=""false"">443</securePort>
<countryId>1</countryId>
<dataCenterInfo class=""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"">
<name>MyOwn</name>
</dataCenterInfo>
<leaseInfo>
<renewalIntervalInSecs>30</renewalIntervalInSecs>
<durationInSecs>90</durationInSecs>
<registrationTimestamp>0</registrationTimestamp>
<lastRenewalTimestamp>0</lastRenewalTimestamp>
<evictionTimestamp>0</evictionTimestamp>
<serviceUpTimestamp>0</serviceUpTimestamp>
</leaseInfo>
<metadata class=""java.util.Collections$EmptyMap""/>
<homePageUrl>http://WCMIS208:1111/</homePageUrl>
<statusPageUrl>http://WCMIS208:1111/info</statusPageUrl>
<healthCheckUrl>http://WCMIS208:1111/health</healthCheckUrl>
<vipAddress>SmartDataStack-Robot</vipAddress>
<secureVipAddress>SmartDataStack-Robot</secureVipAddress>
<isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
<lastUpdatedTimestamp>1493688759999</lastUpdatedTimestamp>
<lastDirtyTimestamp>1493688760705</lastDirtyTimestamp>
</instanceInfo>
</com.netflix.eureka.util.StatusInfo>
```

This is a xml page? and my pom.xml is this:
```xml
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.newegg.dba</groupId>
  <artifactId>smartDataStack-robot</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.2.RELEASE</version>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-eureka-server</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>commons-dbutils</groupId>
      <artifactId>commons-dbutils</artifactId>
      <version>1.6</version>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>Dalston.RELEASE</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
```

And application.properties is this:

```
spring.application.name=SmartDataStack-Robot

server.port=1111

eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.client.waitTimeInMsWhenSyncEmpty=0
```

And Application is this:
```JAVA
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;


@EnableEurekaServer
@SpringBootApplication
public class MainBootApplication {
	
    public static void main(String[] args) { 
        new SpringApplicationBuilder(MainBootApplication.class).web(true).run(args);
    }
	
}
```

Can you help me? I very very want to an HTML page,  Thank you very very much"this should go in the spring-cloud-netflix issue tracker, not here. =||= o....  sorry.... embarrassed....  :laughing: =||= Has been solved, see [https://github.com/spring-cloud/spring-cloud-netflix/issues/1905](https://github.com/spring-cloud/spring-cloud-netflix/issues/1905) =||= the above url showing error page kenttanl =||= SEE THIS [https://github.com/spring-cloud/spring-cloud-netflix/issues/1905](https://github.com/spring-cloud/spring-cloud-netflix/issues/1905) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
937Eureka with ECSafilichkin05/03/17, 02:48:42 PM"Hi,
We are using Eureka with AWS ECS service that can scale docker containers.
In ECS if you leave out the host port, or specify it as being '0', in your task definition, then the port will be chosen automatically and reported back to the service. After the task is running, describing it should show what port(s) it bound to.

How does Eureka can resolve what port to use if we have several EC2 instance. For example Service A from EC2-A try to call Service B from EC2-B. So Eureka can resolve hostname , but cannot identify exposed port""Let me summarize this stuff.
So, Eureka works fine with AWS ESC if we have static Docker port. We just need expose this port then Eureka can resolve AWS host using AmazonInfo (http://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html#_using_eureka_on_aws)

But Eureka doesn’t help you if you want to use ECS autoscalling feature.

Actually, we can use Eureka with ECS(autoscalling) and Docker only with Docker network host (docker run --net=host). But this approach is not good. For Kubernetes it’s OK, because each Docker image is isolated in Pod(some Kubernetes expert mentioned that they are going to remove Eureka, because Kubernetes itself can do all this stuff).

Currently, it’s not possible to run Eureka with ECS if you need dynamic Docker port. Amazon ECS agent doesn’t support it yet( https://github.com/aws/amazon-ecs-agent/issues/151)

 =||= We have solved that by enabling the docker rest api on the ecs host. You can then create an introspector that asks the docker daemon on the host for the port mapping and use that info in a custom  Eureka instance config bean. =||= please read article at https://medium.com/@bhanu.pratap/service-discovery-in-spring-cloud-using-netflix-eureka-in-aws-fargate-2c5c294fee5c

 =||= > We have solved that by enabling the docker rest api on the ecs host. You can then create an introspector that asks the docker daemon on the host for the port mapping and use that info in a custom Eureka instance config bean.

@DirkLachowski can you give an example of this configuration, please?

 =||= @gustoliv Sure, unfortunately it's an internal project on our gitlab so i'm unable to make it public. Will try to sketch the idea.

### Enabler annotation

```java
@Retention(value=java.lang.annotation.RetentionPolicy.RUNTIME)
@Target(value={java.lang.annotation.ElementType.TYPE})
@Documented
@Import(EurekaConfig.class)
@Configuration
public @interface EnableDockerRegistration {

}
```

### Eureka Config

```java
@Configuration
public class EurekaConfig {
	
	private final static Log LOG = LogFactory.getLog(EurekaConfig.class);
	
	@Bean
	@Autowired
	// Bean name is important, see https://github.com/spring-cloud/spring-cloud-config/issues/329
	public EurekaInstanceConfigBean eurekaInstanceConfigBean(InetUtils inetUtils) throws UnknownHostException {
		AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild(""eureka"");
		DockerEurekaInstanceConfigBean config = new DockerEurekaInstanceConfigBean(inetUtils);
		config.setDataCenterInfo(info);
		info.getMetadata().put(AmazonInfo.MetaDataKey.publicHostname.getName(), info.get(AmazonInfo.MetaDataKey.localIpv4));
		config.setHostname(info.get(AmazonInfo.MetaDataKey.localHostname));
		config.setIpAddress(info.get(AmazonInfo.MetaDataKey.localIpv4));
		
		ContainerIntrospector introspector = new ContainerIntrospector(info.get(AmazonInfo.MetaDataKey.localIpv4));
		InspectContainerResponse container = introspector.inspect(InetAddress.getLocalHost().getHostName());
		Ports ports = container.getNetworkSettings().getPorts();
		Map<ExposedPort, Binding[]> bindings = ports.getBindings();
		Binding[] binding = bindings.get(new ExposedPort(8080));
		if (binding != null && binding.length > 0) {
			Integer hostPort = binding[0].getHostPort();
			LOG.info(""Registering host port: "" + hostPort);
			config.setNonSecurePortForced(hostPort);
			config.setInstanceId(info.get(AmazonInfo.MetaDataKey.instanceId) + "":"" + hostPort);
		} else {
			throw new IllegalStateException(""Unable to get mapped port, exiting..."");
		}
		
		return config;
	}
}
````

### Docker config bean

```java

public class DockerEurekaInstanceConfigBean extends EurekaInstanceConfigBean {

	private final static Log LOG = LogFactory.getLog(DockerEurekaInstanceConfigBean.class); 
	
	public DockerEurekaInstanceConfigBean(InetUtils inetUtils) {
		super(inetUtils);
	}

	@Override
	public void setNonSecurePort(int nonSecurePort) {
		LOG.info(""Trying to set nonSecurePort to: "" + nonSecurePort);
		if (super.getNonSecurePort() == 0) {
			super.setNonSecurePort(nonSecurePort);
		} else {
			LOG.info(""Skiped setting nonSecurePort to: "" + nonSecurePort + "" because it's allready set to: "" + super.getNonSecurePort());
		}
	}
	
	
	public void setNonSecurePortForced(int nonSecurePort) {
		super.setNonSecurePort(nonSecurePort);
	}
}
```

## Introspector
```java
public  class ContainerIntrospector {
	private final RestTemplate restTemplate = new RestTemplate();
	private final Log LOG = LogFactory.getLog(getClass());
	private final String instanceAddress;
	
	public ContainerIntrospector(String instanceAddress) {
		LOG.info(""Creating container introspector for host: "" + instanceAddress);
		this.instanceAddress = instanceAddress;
	}
	
	private String asEndpoint(String entityUri) {
		return ""http://"" + instanceAddress + "":2375/"" + entityUri;
	}
	
	public InspectContainerResponse inspect(String containerId) {
		LOG.info(""inspecting container: "" + containerId);
		return restTemplate.getForObject(asEndpoint(""containers/{id}/json""), InspectContainerResponse.class, containerId);
	}
	
}
```


On top of that you need a bunch of Pojos with json mappings for the docker api responses. We've extracted the relevant part from https://github.com/docker-java/docker-java - we couldn't use it directly because of its jersey dependency but you should get the idea. Pojos are in https://github.com/docker-java/docker-java/tree/master/src/main/java/com/github/dockerjava/api/model

If you have assembled all that parts using it in a boot-app is  as simple as:

```java

@SpringBootApplication
@ImportResource(""classpath:/aws.xml"")
@EnableEurekaClient
@EnableDockerRegistration
public class ApplicationBootstrapper {
	
	public static void main(String[] args) {
            SpringApplication.run(ApplicationBootstrapper.class, args);
        }
}

```

One thing you maybe want to change is the id the apps register with. We are creating an `<instanceId>:<docker-port>` id. You can change that quite at the end of the `EurekaConfig` bean.

<img width=""1326"" alt=""Bildschirmfoto 2019-07-17 um 17 07 51"" src=""https://user-images.githubusercontent.com/226266/61387155-dfdf2180-a8b5-11e9-83d1-6144d2997a35.png"">


Feel free to reach out to me by mail if you need further infos.
	 =||= @DirkLachowski Thanks a lot man! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
938set hostname in eureka-client.propertiesreal_rudirealrudi05/30/19, 11:09:56 PM"Hello

How to set the hostname in the eureka-client.properties file?

This is my current configuration:

`...
<application>
<name>ACR-SERVICE</name>
<instance>
<instanceId>pleven2</instanceId>
<hostName>pleven2</hostName>
<app>ACR-SERVICE</app>
<ipAddr>127.0.1.1</ipAddr>
<status>UP</status>
...`

instanceId and hostname are set tp pleven2, which is the hostname of the server hosting my eureka service.

Here is my 

eureka-client.properties file

`eureka.name=acr-service

eureka.vipAddress=acr

eureka.port=8080
eureka.securePort=8181
eureka.securePort.enabled=true

eureka.hostname=api-v2

eureka.preferSameZone=true
eureka.shouldUseDns=false
eureka.serviceUrl.default=http://api-v2:8080/eureka/v2/
eureka.homePageUrl=https://${eureka.hostname}:${eureka.securePort}/acr-service/v1.0`

So, which setting i have to use to set the hostname and the instancId?

Best Regards
Erik"@erudisch would you mind clarifying your question? When you say 'hostname', are you referring to the hostname of your registering application (including the eureka client), or the remote eureka server(s)? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
939Unknown Service Getting Registeredsmkb8005/08/17, 12:27:29 PM"Hi Team,

I've a service that calls 3 other services which are registered with Eureka Server. Lets call this one a Composite Service and the ones it calls a set of core services.

Additionally the composite service also registers itself with Eureka while coming up using Eureka-Client APIs.But while registering itself a 'UNKNOWN' service is also getting registered. There is multiple log statements from com.netflix.discovery.DiscoveryClient:

`
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806 - registration status: 204
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806 - registration status: 204
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806 - registration status: 204
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/LT052806 - registration status: 204
`

The Eureka Admin console reports the status of the Unknown service as 'Starting'.

The following are eureka properties:

`
############################################
# Eureka Properties For Service Registration
############################################
eureka.region=default
eureka.preferSameZone=true
eureka.shouldUseDns=false
eureka.serviceUrl.default=http://localhost:8080/eureka/v2/

#################################################
# Additional Eureka Properties For Service Lookup
#################################################
eureka.decoderName=JacksonJson

`

All the above properties are in the same properties file.

Can anyone please help in getting rid of the Unknown service? 
Also, please revert back in case additional details are required.

Thanks in advance.

Regards,
Sameek"Setting **eureka.registration.enabled=false** for the composite service stopped an unknown service getting registered. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
940if one client connect two eureka,how can i set defferent eureka-client.propertiesmultiplyzero05/30/19, 11:09:56 PMNaNHi @multiplyzero a client can/should only connect to a single eureka server cluster. Can you clarify your question? Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
941how can eureka server cancel  a service when enable enableSelfPreservationniuhaipengniuhp05/31/17, 07:34:59 AMwhen set eureka.server.enableSelfPreservation=true to eureka server,and a service is really not available(maybe the network is not available or the service process is killed by someone with [kill -9] or [docker stop]),when the service will be unregistered?????@niuhp self preservation mode is only activated when a large percentage of services are potentially expiring at the same time (i.e. in a network partitioned scenario). By default, the configured percentage is 15%. It should not activate for single server expirations. The config to set the percentage is dynamically configurable at run time, so if you do run in to self preservation mode and need to end it for a legitimate reason, you can alway temporarily lower the percentage threshold as required. See https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerConfig.java#L221 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
942Why would eureka server return isAws false?Rob Whitewimnat05/31/17, 07:30:34 AM"I am seeking help in running Eureka server in AWS.

My config is currently very simple...

A springboot application annotated with \@EnableEurekaServer running on an EC2 instance and configured with `binding-strategy: eip`.  Unfortunately EIP binding is never attempted.

When I run the app I get a message in the log file on start up saying isAws: false but there is no detail as to why it thinks this.  The app then continues to start successfully but without my EIP attachment as expected.

I have successfully run Eureka in AWS at a previous role I had and I didn't have to configure anything AWS specific.

There is a SO question that relates to this here http://stackoverflow.com/questions/43084285/eureka-server-cant-detect-aws but no replies.  I really don't know where to go from here as the log provides no extra detail and I can query the ec2 metadata fine.""Hi @wimnat this looks related to spring cloud Netflix. I would advise to ask questions at https://github.com/spring-cloud/spring-cloud-netflix =||= Hi @wimnat, did you follow up on this and got an answer?
Hope I'm not contaminating this forum =||= @shmulika - i posted an answer on the SO post =||= Hi @wimnat and @qiangdavidliu , I think something is missing in the solution and I think it might still be related to Netflix/eureka original code/compatibility.

In order for Spring Netflix Eureka to return isAws true and bind to an EIP it seems to require this bean configured (as seen on several posts e.g. https://github.com/spring-cloud/spring-cloud-netflix/issues/102):

```  
   @Bean
    public EurekaInstanceConfigBean eurekaInstanceConfigBean(InetUtils inetUtils) {
        EurekaInstanceConfigBean b = new EurekaInstanceConfigBean(inetUtils);
        AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild(""eureka"");
        b.setDataCenterInfo(info);
        return b;
    }
```

This seemingly works nicely, isAws=true and the instance binds to the EIP. However, it does not take into consideration that the publicIpv4 address changes and enters a buggy state.
The instance still remembers the previous publicIpv4 address when checking if EIP is bound:
The function isEIPBound() at https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java returns false (because it checks against the previous ipv4 address prior to the eip binding) and causes the registry to be cleared. This happens periodically at whatever interval EIP binding is checked.
If I restart the instance everythings starts working OK (because the instance has no state of the previous ipv4 adress).

If I understand correctly this is the result of the EurekaInstanceConfigBean and the DataCenterInfo being static.

@wimnat  - did you encounter this also?
@qiangdavidliu - I assume Eureka can be made to detect AWS and learn the IPv4 including changes without this configuration? Or is this not part of the open source project?

Thanks! =||= I did not encounter this issue because I'm using an EIP. EIPs do not change. This is what the documentation states to do. Is there a particular reason you're not using an EIP? =||= Sorry for not being clear enough - I AM using EIPs. But the very first time the instance comes up, the EC2 is still not bound to the EIP (it has some random IPv4 address until Eureka performs the binding to the EIP). 
However, it is the first time that counts... =||= Of course. A starting instance will not start with a bound EIP. Don't worry
though. The EIP will bound before Eureka starts.

On 18 Jun. 2017 6:38 pm, ""shmulika"" <notifications@github.com> wrote:

> Sorry for not being clear enough - I AM using EIPs. But the very first
> time the instance comes up, the EC2 is still not bound to the EIP (it has
> some random IPv4 address until Eureka performs the binding to the EIP).
> However, it is the first time that counts...
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/Netflix/eureka/issues/942#issuecomment-309264459>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AHFORm-JRxK87hUF0lpfEERFzE2En9Lnks5sFOH-gaJpZM4NbD63>
> .
>
 =||= Please have a look at how it behaves on the first run (after once initially binding the EIP):

```
2017-06-15 14:05:46.528  INFO 1443 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-07a576cc81e58c0d3 seems to be already associated with the EIP 34.209.218.21
2017-06-15 14:06:46.312  INFO 1443 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-15 14:06:46.529  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node
2017-06-15 14:06:46.529  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1
2017-06-15 14:06:46.529  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP
2017-06-15 14:06:46.672  INFO 1443 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-07a576cc81e58c0d3 seems to be already associated with the EIP 34.209.218.21
2017-06-15 14:07:46.529  INFO 1443 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-15 14:07:46.673  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node
2017-06-15 14:07:46.673  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1
2017-06-15 14:07:46.673  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP
2017-06-15 14:07:46.738  INFO 1443 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-07a576cc81e58c0d3 seems to be already associated with the EIP 34.209.218.21
2017-06-15 14:08:46.674  INFO 1443 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-15 14:08:46.739  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Got 1 instances from neighboring DS node
2017-06-15 14:08:46.739  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Renew threshold is: 1
2017-06-15 14:08:46.739  INFO 1443 --- [ureka-EIPBinder] c.n.e.r.PeerAwareInstanceRegistryImpl    : Changing status to UP
```

This might look OK, but actually everytime this repeats the registry is completely cleared.

If I manually restart the Eureka instance (where EIP is already bounded by previous run), the log looks like this:

```
2017-06-14 11:47:10.019  INFO 4639 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-0fa10ad77743e213a seems to be already associated with the public ip 34.209.218.21
2017-06-14 11:47:10.025  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:48:10.025  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:49:10.025  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:50:10.025  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:51:10.026  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:52:10.020  INFO 4639 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-0fa10ad77743e213a seems to be already associated with the public ip 34.209.218.21
2017-06-14 11:52:10.026  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:53:10.026  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:54:10.027  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:55:10.027  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:56:10.027  INFO 4639 --- [a-EvictionTimer] c.n.e.registry.AbstractInstanceRegistry  : Running the evict task with compensationTime 0ms
2017-06-14 11:57:10.020  INFO 4639 --- [ureka-EIPBinder] com.netflix.eureka.aws.EIPManager        : My instance i-0fa10ad77743e213a seems to be already associated with the public ip 34.209.218.21
```

(Please don't put any order meaning to the dates, June 14th vs 15th, I've tested it many times over these are just the copy-pastes I've made)

The message from EIPBinder looks very similar, by indeed the first one reveals that the instance fails to verify that it's public ip is the same as the desired EIP; but then when trying to re-bind the EIP discovers that it is already bound... =||= Hi,
After many Googling I've found a thread dealing with this exact issue:
https://github.com/spring-cloud/spring-cloud-netflix/issues/1321
Thanks for the assist this far

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
943Allow for independent SSL context for EurekaJerseyClientWesweswalker12505/31/17, 07:11:37 AM"The builder only allows SSL configuration through system settings, though it can be useful to operate the discovery client on a separate SSL context from the server/system level.  This exposes a method to supply an SSLContext object and use it in the ""createCustomSslCM"" method."👍  =||= Thanks for the contrib @weswalker125  =||= Allow for independent SSL context for EurekaJerseyClientWesweswalker12505/31/17, 07:11:37 AM"The builder only allows SSL configuration through system settings, though it can be useful to operate the discovery client on a separate SSL context from the server/system level.  This exposes a method to supply an SSLContext object and use it in the ""createCustomSslCM"" method."NaNWes Walker05/19/17, 09:59:47 PMallow independent SSL context for Jersey client (alternative to system SSL context).1
944Unable to register client to eureka serverdivyanagrath05/31/17, 07:29:43 AM"My Eureka server is running, but when I try to run client application I get following error:


DiscoveryClient_PRODUCT/172.16.2.67:Product:9090 - was unable to refresh its cache! status = Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1017) [eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:931) [eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:441) [eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304) [eureka-client-1.4.6.jar:1.4.6]
        at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:51) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:179) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9785688c.CGLIB$eurekaClient$1(<generated>) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9785688c$$FastClassBySpringCGLIB$$6bcab8ca.invoke(<generated>) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9785688c.eurekaClient(<generated>) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1173) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1067) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:345) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:359) [spring-cloud-context-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:176) [spring-cloud-context-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:340) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:192) [spring-aop-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at com.sun.proxy.$Proxy68.getApplications(Unknown Source) [na:na]
        at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration.maybeInitializeClient(EurekaDiscoveryClientConfiguration.java:120) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration.start(EurekaDiscoveryClientConfiguration.java:97) [spring-cloud-netflix-eureka-client-1.1.0.RELEASE.jar:1.1.0.RELEASE]
        at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:175) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:348) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:151) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:114) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:879) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.8.RELEASE.jar:4.3.8.RELEASE]
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:370) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]
        at com.example.config.Product.ProductApplication.main(ProductApplication.java:19) [classes/:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]
        at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.4.BUILD-SNAPSHOT.jar:1.5.4.BUILD-SNAPSHOT]

2017-05-22 12:59:25.108  WARN 9652 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Using default backup registry implementation which does not do anything.
2017-05-22 12:59:25.116  INFO 9652 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Starting heartbeat executor: renew interval is: 30
2017-05-22 12:59:25.118  INFO 9652 --- [  restartedMain] c.n.discovery.InstanceInfoReplicator     : InstanceInfoReplicator onDemand update allowed rate per min is 4
2017-05-22 12:59:25.159  INFO 9652 --- [  restartedMain] c.n.e.EurekaDiscoveryClientConfiguration : Registering application Product with eureka with status UP
2017-05-22 12:59:25.161  INFO 9652 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1495438165160, current=UP, previous=STARTING]
2017-05-22 12:59:25.164  INFO 9652 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PRODUCT/172.16.2.67:Product:9090: registering service...
2017-05-22 12:59:25.315  WARN 9652 --- [nfoReplicator-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failure with status code 500; retrying on another server if available
2017-05-22 12:59:25.319  WARN 9652 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_PRODUCT/172.16.2.67:Product:9090 - registration failed Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:810) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:103) [eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:87) [eureka-client-1.4.6.jar:1.4.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_121]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_121]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_121]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_121]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]

2017-05-22 12:59:25.321  WARN 9652 --- [nfoReplicator-0] c.n.discovery.InstanceInfoReplicator     : There was a problem with the instance info replicator

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:810) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:103) ~[eureka-client-1.4.6.jar:1.4.6]
        at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:87) [eureka-client-1.4.6.jar:1.4.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_121]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_121]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_121]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_121]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_121]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_121]
        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]"Hi @divyanagrath this looks related to Spring Cloud Netflix. I would try to ask about it at https://github.com/spring-cloud/spring-cloud-netflix =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
945Eureka REST operations 404 issuelorgine05/30/19, 11:09:56 PM"hi man,when i use Eureka REST operations, it reports 404 error,and after trying some times,i remove v2 it is ok, so can you update wiki?
https://github.com/Netflix/eureka/wiki/Eureka-REST-operations""Hi @lorgine I'm sure if I understand your issue? The documentation for the REST APIs are still accurate. =||= @qiangdavidliu 
For example:
`Request URL:http://localhost:8761/eureka/apps
Request Method:GET
Status Code:200 
Remote Address:[::1]:8761`

`Request URL:http://localhost:8761/eureka/v2/apps
Request Method:GET
Status Code:404 
Remote Address:[::1]:8761` =||= If you are using Spring Cloud, it works without v2 =||= mark =||= mark =||= mark =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
946Update dependenciesDavid Liuqiangdavidliu05/31/17, 11:27:50 PMAlso contain some test fixesNaNUpdate dependenciesDavid Liuqiangdavidliu05/31/17, 11:27:50 PMAlso contain some test fixesNaNDavid Liu05/31/17, 09:43:36 PMMerge remote-tracking branch 'upstream/master'1
947Add a guard to PR #934David Liuqiangdavidliu06/01/17, 08:13:49 PM"#934
@jebeaudet "Thanks for heads up, let me know if you find anything related to it.  =||= @qiangdavidliu Did you encounter any problem with it in the end? Thanks for the feedback =||= Add a guard to PR #934David Liuqiangdavidliu06/01/17, 08:13:49 PM"#934
@jebeaudet "NaNDavid Liu06/01/17, 12:13:43 AMfix another race in a test1
948after 90s ,eureka-server dose not kick off clienthao011109/15/17, 10:47:34 PMhi,i use spring-cloud with C.version , i  shutdown one of eureka-client service, after 90 seconds,but the eureka-sever console  show the service that has already shutdown!!! whatever i restart eureka-server ,it has the problem same to before,how can i do? please help me,thanks This is not the tracker for spring-cloud. https://github.com/spring-cloud/spring-cloud-netflix =||= sorry,i got it!thank you =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
949add pre registration handlerDavid Liuqiangdavidliu06/01/17, 11:34:47 PMNaNNaNadd pre registration handlerDavid Liuqiangdavidliu06/01/17, 11:34:47 PMNaNNaNDavid Liu06/01/17, 11:20:29 PMclean up1
950update a flaky testDavid Liuqiangdavidliu06/02/17, 04:52:43 AMNaNNaNupdate a flaky testDavid Liuqiangdavidliu06/02/17, 04:52:43 AMNaNNaNDavid Liu06/02/17, 04:20:55 AMupdate a flaky test1
951Starting eureka failed in China AWS because of hard code dns addressWang Gangwanggang198705/30/19, 11:09:56 PM"Meeting exception when using eureka in China AWS region :
```
2017-06-02 05:53:44.030 ERROR 24729 --- [      Thread-11] com.netflix.eureka.aws.EIPManager        : Failed to bind elastic IP: 54.222.171.123 to i-030064f46d2e3edfd

com.amazonaws.AmazonClientException: Unable to execute HTTP request: ec2.cn-north-1.amazonaws.com
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:714) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:454) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:416) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:365) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.services.ec2.AmazonEC2Client.doInvoke(AmazonEC2Client.java:12003) ~[aws-java-sdk-ec2-1.11.18.jar!/:na]
	at com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:11973) ~[aws-java-sdk-ec2-1.11.18.jar!/:na]
	at com.amazonaws.services.ec2.AmazonEC2Client.describeAddresses(AmazonEC2Client.java:4716) ~[aws-java-sdk-ec2-1.11.18.jar!/:na]
	at com.netflix.eureka.aws.EIPManager.bindEIP(EIPManager.java:202) [eureka-core-1.4.12.jar!/:1.4.12]
	at com.netflix.eureka.aws.EIPManager.handleEIPBinding(EIPManager.java:136) [eureka-core-1.4.12.jar!/:1.4.12]
	at com.netflix.eureka.aws.EIPManager.start(EIPManager.java:105) [eureka-core-1.4.12.jar!/:1.4.12]
	at com.netflix.eureka.aws.AwsBinderDelegate.start(AwsBinderDelegate.java:42) [eureka-core-1.4.12.jar!/:1.4.12]
	at org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap.initEurekaServerContext(EurekaServerBootstrap.java:145) [spring-cloud-netflix-eureka-server-1.2.4.RELEASE.jar!/:1.2.4.RELEASE]
	at org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap.contextInitialized(EurekaServerBootstrap.java:81) [spring-cloud-netflix-eureka-server-1.2.4.RELEASE.jar!/:1.2.4.RELEASE]
	at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$1.run(EurekaServerInitializerConfiguration.java:70) [spring-cloud-netflix-eureka-server-1.2.4.RELEASE.jar!/:1.2.4.RELEASE]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_131]
Caused by: java.net.UnknownHostException: ec2.cn-north-1.amazonaws.com
	at java.net.InetAddress.getAllByName0(InetAddress.java:1280) ~[na:1.8.0_131]
	at java.net.InetAddress.getAllByName(InetAddress.java:1192) ~[na:1.8.0_131]
	at java.net.InetAddress.getAllByName(InetAddress.java:1126) ~[na:1.8.0_131]
	at com.amazonaws.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:27) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.DelegatingDnsResolver.resolve(DelegatingDnsResolver.java:38) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:111) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:353) ~[httpclient-4.5.2.jar!/:4.5.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_131]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_131]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_131]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_131]
	at com.amazonaws.http.conn.ClientConnectionManagerFactory$Handler.invoke(ClientConnectionManagerFactory.java:76) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.conn.$Proxy171.connect(Unknown Source) ~[na:na]
	at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:380) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82) ~[httpclient-4.5.2.jar!/:4.5.2]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:55) ~[httpclient-4.5.2.jar!/:4.5.2]
	at com.amazonaws.http.apache.client.impl.SdkHttpClient.execute(SdkHttpClient.java:72) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:859) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:702) ~[aws-java-sdk-core-1.11.18.jar!/:na]
	... 14 common frames omitted
```

And i have configuration 
```
eureka.client.serviceUrl.defaultZone=http://ec2-54-222-171-123.cn-north-1.compute.amazonaws.com.cn:8761/eureka/
eureka.client.region=cn-north-1
```

See the code in `eureka/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java`
line 408: `ec2Service.setEndpoint(""ec2."" + region + "".amazonaws.com"");` . The correct address should be `.amazonaws.com.cn` in China AWS."Thanks @wanggang1987 , this would be a bug. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
952The dependencies cannot be found in ./eureka-server/testlibs/uttam ananduttamanand05/30/19, 11:09:57 PM"The dependencies cannot be found in ./eureka-server/testlibs/

Don't see any testlibs folder generated after executing ./gradle clean build"@uttamanand I'm not sure I understand your question. What do you expect as an output from ./gradlew clean build? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
953how to deal with the war name when deploy eureka client in tomcatmiaoliqiusi05/30/19, 11:09:57 PM"when we deploy a eureka client web server in tomcat,it's path may be ```hostname:port/project_name/**```

but when route by zuul with eureka ```service-id``` , zuul always ignore the ```project_name```

and how can I config this this ```project_name``` in eureka client or zuul?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
954Unnecessary checking of isThisMyUrlFahim Farookfahimfarookme09/15/17, 11:15:05 PM"I was debugging some failover scenarios and found that the `if` condition below never becomes true, hence unnecessary.

```
for (final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) {
       // If the url represents this host, do not replicate to yourself.
       if (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) {
            continue;
        }
       replicateInstanceActionsToPeers(action, appName, id, info, newStatus, node);
 }
```

[https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L633](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L633)

This is because eureka server never adds itself to peer-node collection. i.e.
[https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNodes.java#L140](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNodes.java#L140)"#953 Hello @zkwentz  =||= @fahimfarookme that looks to be the case, thanks. This is likely a legacy of some optimisations elsewhere. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
955Unable to return status to UP after overridden status was set to OUT_OF_SERVICERyan Kinggoatherder04/25/18, 05:25:57 PM"Hi,

We're having some trouble understanding the expected behaviour with Eureka and the instance overridden status'.  We'd expect to be able to override a status (ie: set it to OUT_OF_SERVICE - eg: via spinnaker) - and then remove this to return the service to it's original status.

However, this doesn't seem to be what happens from a couple of observations (running eureka server 1.6.2 - and various eureka clients...  mostly spring):

Setting the status to OUT_OF_SERVICE manually:  curl -XPUT http://eureka_server:8080/eureka/v2/apps/APP/<id>/status?value=OUT_OF_SERVICE

results in:

status = OUT_OF_SERVICE
overriddenstatus = OUT_OF_SERVICE

(lastDirtyTimestamp is also updated)

Then, removing this status override (as per netflix rest api doc) - curl -v -XDELETE http://eureka_server:8080/eureka/v2/apps/APP/<id>/status

results in:

status = UNKNOWN
overriddenstatus = UNKNOWN

heartbeats continue to come through from the client... which result in a 404 from the server:

INFO  com.netflix.eureka.registry.AbstractInstanceRegistry:363 [http-apr-8080-exec-14] [renew] Instance status UNKNOWN possibly due to deleted override for instance <id>; re-register required

And the instance DOES try to re-register... BUT - it fails due to the lastDirtyTimestamp in the heartbeat being old:

WARN  com.netflix.eureka.registry.AbstractInstanceRegistry:211 [http-apr-8080-exec-23] [register] There is an existing lease and the existing lease's dirty timestamp 1496744179917 is greater than the one that is being registered 1496740143467

So - the service sits forever trying to heartbeat -> re-register (and it gets a 204 response on the re-register by the way).


Is this expected behaviour?  Or is this possibly a configuration issue/client incompatability?

The only way to bring the service back up is to issue a:

curl -v -XDELETE http://eureka_server:8080/eureka/v2/apps/APP/<id>/status?value=OUT_OF_SERVICE

(this is what spinnaker does... I guess it looks at the status vs overridden status?) - but this takes a while - I assume the asg rule eventually brings this up.

Or, to bring the service up immediately, we could also run:

curl -v -XDELETE http://eureka_server:8080/eureka/v2/apps/APP/<id>/status?value=UP

But this all seems to defeat the purpose of an overridden status.  Unless I'm missing something?

Thanks.

"Hi @goatherder this is a bug that was fixed in #984  and released in 1.8.1. It will also be back-ported shortly to the 1.6.x branch. =||= In the meantime, using a suggested status value when deleting an override is one way to alleviate the issue. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
956Documentation Issue: Operations hyperlink 404 mike-mcelreath09/15/17, 10:59:29 PM"The ""operations"" symlink on this page: 
https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication

Directs you to a 404 error."Hi, can I make correction to this documentation? Please let me know =||= Thanks, fixed. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
957Documentation: Optimised replicationAlexLovett199105/30/19, 11:09:57 PM"Is it possible to have the replication events sent as a pool periodically (or delayed on event)? So that a node will not have to receive the same amount of traffic as the primary.

The reason I ask is it would be nice to deploy instances of eureka on very small vm's, I've had a tinker with the eureka client so that it round robins between nodes to split load, but if each node is going to forward the heartbeat immediately then our traffic on the primary node will be the same anyway.""After looking through source, I have found that eureka does effectively have a delayed event so updates are grouped before being replicated.

Is it possible to have this documented, as well as what the effects of reducing the number of workers for replication will have? =||= @Lovett1991 thanks for the issue, will look to add documentation on batched replication. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
958Eureka- Server and Client Communication.Harish Kadamudiharishkadamudi05/30/19, 11:09:57 PM"
This is not an Issue, but a question/clarification rather on server-client communication.

I am running 3 services
	1. customer service
	2. order service
	3. customer-order service, which is an aggregator, pulls result from Customer & Order service

Have configured Eureka cluster with 3 servers running
Assume, Eureka-1,Eureka-2 & Eureka-3

All three of My Eureka servers are up.

During testing, I registered all my services(Customer, Order and Order Services) to only 1 Eureka Server which is Eureka-1.

Observations:
	1. All 3 Eureka servers will have Customer, Order and Customer-Order services information in the respective their Dashboards.
	2. Intentionally, stop Eureka-1(Note: All 3 services are registered with this only).
	3. When I hit customer-order service, somehow Eureka supplied customer & order instances/registry and I am able to hit customer and order url's.

Question:
Even my services are registered to only one Eureka Instance, how I am able to fetch information from Eureka Cluster.
i was thinking since I am registered with only one Eureka Server, I shouldn't be getting customer & order information from Eureka Server.

I waited for close to 30 minutes thinking, Eureka will not supply customer & order instances.""When setup in cluster, somehow Eureka will share registered services information with each other,
even if services are registered with only one Eureka Instance. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
959Status returns invalid JSONAlexLovett199105/30/19, 11:09:57 PM"When calling the Status endpoint the JSON returned is invalid, I believe it is missing the last '}'

Was called with the header: Accept Application/JSON

When called without the header a valid xml is returned.""https://eureka-url/eureka/status
Still returns (with  Accept Application/JSON) HTTP Status: 200 but as body: 
Expected ',' instead of ''

https://eureka-url/eureka/apps
instead is able to return the content as a valid json. 

Is number one a misconfiguration from us or a common problem? 


 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
960Upgrade XStream to 1.4.10, added tests around CVE-2017-7957borlafu07/17/17, 09:34:28 PM"Applied http://x-stream.github.io/CVE-2017-7957.html#workarounds and added some tests around it.

After upgrading to 'com.thoughtworks.xstream:xstream:1.4.9' the workaround can be removed.""Why not upgrade to 1.4.10 instead of putting a workaround in? =||= +1: Makes sense. Had to modify the tests as the exception thrown is different to the one from the workaround.
 =||= Thanks @borlafu for the PR. =||= "Upgrade XStream to 1.4.10, added tests around CVE-2017-7957borlafu07/17/17, 09:34:28 PM"Applied http://x-stream.github.io/CVE-2017-7957.html#workarounds and added some tests around it.

After upgrading to 'com.thoughtworks.xstream:xstream:1.4.9' the workaround can be removed."NaNBorja Lafuente Romero06/29/17, 06:17:46 PMUpdated XStream to 1.4.10 in eureka-core too1
961Spring Boot - Registration not recognized by load balancerJean-Pierre Levacbrokenjpl01/31/18, 10:51:38 PM"I have a Spring Boot app trying to fetch an instance of a service through Erueka/Ribbon:

```	@LoadBalanced
        @Autowired
	RestTemplate restTemplate;

	@RequestMapping(""/hi"")
	public String hi(@RequestParam(value=""name"", defaultValue=""superuser"") String name) {
		AccountRest account = this.restTemplate.getForObject(""http://AUTHENTICATION-SERVICE/authservice/v1/accounts/userId/""+name,
				AccountRest.class);
		return ""hi, "" + account.getId(); 
	}
```
I am manually registering the ""AUTHENTICATION-SERVICE"", note that this service only needs to register itself, it does not need to query eureka:
```
public class ServiceDiscoveryManager {

	private ApplicationInfoManager applicationInfoManager;
	private EurekaClient eurekaClient;

	public void start() {
		MyDataCenterInstanceConfig instanceConfig = new MyDataCenterInstanceConfig();
		DefaultEurekaClientConfig clientConfig = new DefaultEurekaClientConfig();

		InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();
		applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);
		eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);
		
		applicationInfoManager.getInfo();
		eurekaClient.getApplications();
		
		instanceInfo.setStatus(InstanceStatus.UP);
	}

	public void stop() {
		eurekaClient.shutdown();
	}

}
```
the authentication-service eureka-client.properties file:

```
eureka.name=AUTHENTICATION-SERVICE
eureka.appGroup=AUTHENTICATION-SERVICE
eureka.vipAddress=http://localhost:9080
eureka.port.enabled=true
eureka.port=9080
eureka.traffic.enabled=true
eureka.preferSameZone=true
eureka.serviceUrl.default=http://localhost:8000/eureka/
eureka.decoderName=JacksonJson
eureka.healthCheckUrl=http://localhost:9080/authservice/health
eureka.healthCheckPath=/authservice/health
```

The Eureka Dashboard show my authentication service as registered:

![capture](https://user-images.githubusercontent.com/17048935/27750574-61302f7a-5da6-11e7-94ad-22e57d0cf97b.PNG)

When I try to get an instance of the authentication-service with the load balancer I receive the following exception:
```
java.lang.IllegalStateException: No instances available for AUTHENTICATION-SERVICE
	at org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient.execute(RibbonLoadBalancerClient.java:90) ~[spring-cloud-netflix-core-1.2.5.RELEASE.jar:1.2.5.RELEASE]
```

I've confirmed that the load balancer is aware of the authentication-service, but the DynamicServerListLoadBalancer has the allServerList property as empty.  

I've been playing with this for a few hours, wondering if some configuration is invalid. Thanks for any help.
"@brokenjpl this is not the issue tracker for spring-cloud-netflix =||= @spencergibb Thanks for replying. I believe that my issue is with programmatically registering my service to Eureka, specifically with the ServiceDiscoveryManager. If you believe the issue lies with spring-cloud-netflix, then I can close this issue and re-open there. =||= They don't support spring-boot/spring-cloud here =||= If you're still facing this issue, the above comment is correct.  spring-cloud-netflix is the best place to get support.  I'll close this issue, and if you are unable to resolve with spring-cloud-netflix, please feel free to re-open. =||= Hi, I have the same problem , is this a bug? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
962Dynamic ReplicationAlexLovett199105/30/19, 11:12:10 PM"#https://github.com/spring-cloud/spring-cloud-netflix/issues/2071

As mentioned in the issue above, would there be any issue in modifying code so that eureka nodes can pick up new nodes that are not in the config?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
963Eureka REST operation issueswangzanmaoge05/30/19, 11:12:10 PMif i want to register new application instance, how to write the json file/xml file?"I wrote it like this：

{
    ""instance"": {
    	""instanceId"":""192.168.0.102:qrcode-service:8990"",
        ""hostName"": ""192.168.0.102"",
        ""app"": ""QRCODE-SERVICE"",
        ""vipAddress"": ""qrcode-service"",
        ""secureVipAddress"": ""qrcode-service"",
        ""ipAddr"": ""192.168.0.102"",
        ""status"": ""UP"",
        ""port"": {""$"": ""8990"", ""@enabled"": ""true""},
        ""securePort"": {""$"": ""443"", ""@enabled"": ""true""},
        ""healthCheckUrl"": ""http://192.168.0.102:8990/health"",
        ""statusPageUrl"": ""http://192.168.0.102:8990/info"",
        ""homePageUrl"": ""http://192.168.0.102:8990"",
        ""dataCenterInfo"": {
            ""@class"": ""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"", 
            ""name"": ""MyOwn""
        }
    }
} =||= @flyhero its error:

{
    ""error"": ""cannot parse request body""
} =||= you need to change here :  `""securePort"": {""$"": ""443"", ""@enabled"": ""false""}` =||= `""dataCenterInfo"": {
      ""@class"": ""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"",
      ""name"": ""MyOwn""
    }`


and how to add metadata with json. @flyhero  =||= anyone has solved yet? thanks =||= this works for me
```
{
    ""instance"": {
        ""instanceId"": ""192.168.0.1:plugin-test-aaa-service:80"",
        ""hostName"": ""192.168.0.1"",
        ""app"": ""plugin-test-aaa-service"",
        ""ipAddr"": ""192.168.0.1"",
        ""vipAddress"": ""plugin-test-aaa-service"",
        ""status"": ""UP"",
        ""port"": {
            ""$"": 80,
            ""@enabled"": True,
             
        },
        ""securePort"": {
            ""$"": 443,
            ""@enabled"": False,
             
        },
        ""homePageUrl"": None,
        ""statusPageUrl"": ""http://192.168.0.1:80/plugin-test/aaa-service/hello"",
        ""healthCheckUrl"": None,
        ""dataCenterInfo"": {
            ""@class"": ""com.netflix.appinfo.MyDataCenterInfo"",
            ""name"": ""MyOwn""
        },
        'leaseInfo': {
            'renewalIntervalInSecs': 15,
            'durationInSecs': 60
        }
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
965initial commitTom Celluccitcellucci07/19/17, 06:38:44 PM"1. memory tuning for deserialization
2. java 8"had some more changes, going to close this PR and resubmit =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
966How to registe many EurekaServer and  discovery many EurekaServerdengbinfashionfz05/30/19, 11:12:10 PMHow to registe many EurekaServer and  discovery many EurekaServer.  I want to implement classified registration.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
967Where is the allowRedirect used?Luke(Jangho Bae)jhbae05/30/19, 11:12:11 PM"Unlike what is written in its documentation, it seems that there are no usages of `HTTP_X_DISCOVERY_ALLOW_REDIRECT` except for adding headers in `JerseyEurekaHttpClientFactory` class.

If I miss something then please let me know.
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
968EIPManager cannot bind EIP Deleted userghost07/20/17, 07:31:22 PM"Bug Report:  I am attempting to run Eureka on AWS Linux (source: ami-a4c7edb2) and the EIP manager is throwing an exception stating that there is insufficient permission to access the specified resource.  This used to work on an older Amazon Linux AMI but when I upgraded to the new source AMI the EIP manager stopped working. I have tried giving the box an admin role but that did not help.  The role I am using is:
{
  ""Version"": ""2012-10-17"",
  ""Statement"": [
    {
      ""Sid"": """",
      ""Effect"": ""Allow"",
      ""Action"": [
        ""ec2:DisassociateAddress"",
        ""ec2:DescribeAddresses"",
        ""ec2:AssociateAddress""
      ],
      ""Resource"": ""*""
    },
    {
      ""Sid"": """",
      ""Effect"": ""Allow"",
      ""Action"": ""autoscaling:DescribeAutoScalingGroups"",
      ""Resource"": ""*""
    }
  ]
}

The exception is:
2017-07-19 12:41:42 ERROR EIPManager:436 - Could not bind to EIP
com.amazonaws.services.ec2.model.AmazonEC2Exception: You do not have permission to access the specified resource. (Service: AmazonEC2; Status Code: 400; Error Code: AuthFailure; Request ID: a37b071b-7b8a-4bf5-acf4-d1cf9a4bff88)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleErrorResponse(AmazonHttpClient.java:1579)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeOneRequest(AmazonHttpClient.java:1249)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1030)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:742)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:716)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:699)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:667)
        at com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:649)
        at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:513)
        at com.amazonaws.services.ec2.AmazonEC2Client.doInvoke(AmazonEC2Client.java:12175)
        at com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:12151)
        at com.amazonaws.services.ec2.AmazonEC2Client.associateAddress(AmazonEC2Client.java:609)
        at com.netflix.eureka.aws.EIPManager.bindEIP(EIPManager.java:243)
        at com.netflix.eureka.aws.EIPManager$EIPBindingTask.run(EIPManager.java:434)
        at java.util.TimerThread.mainLoop(Timer.java:555)
        at java.util.TimerThread.run(Timer.java:505)

Also I have had problems using a different version of Amazon Linux (source: ami-c58c1dd3) where the EIP manager would work but the Eureka server would not start.  But using the same exact setup with the new source AMI has caused the EIP manager to stop working but the server will start."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
969Misc. fixesDeleted userghost11/14/17, 09:48:38 PMIn testing my [SLF4J Helper](http://plugins.netbeans.org/plugin/72557/) plugin for NetBeans IDE, I found a few minor improvements that can be made."Rebased to fix the two conflicts. =||= @dtrebbien thanks for the PR, we will take a look at this. =||= Hello David,

Thank you for reviewing this pull request.

I am currently traveling.  It might take me several days to make these
changes, but I will do so the soonest that I am able.

Daniel

On Wed, Nov 1, 2017 at 2:34 PM, David Liu <notifications@github.com> wrote:

> *@qiangdavidliu* commented on this pull request.
>
> Again thanks for the PR. Some minor nits.
> ------------------------------
>
> In eureka-client/src/main/java/com/netflix/discovery/shared/
> transport/decorator/RetryableEurekaHttpClient.java
> <https://github.com/Netflix/eureka/pull/969#discussion_r148342330>:
>
> > @@ -126,7 +126,7 @@ public void shutdown() {
>                  }
>                  logger.warn(""Request execution failure with status code {}; retrying on another server if available"", response.getStatusCode());
>              } catch (Exception e) {
> -                logger.warn(""Request execution failed with message: {}"", e.getMessage());  // just log message as the underlying client should log the stacktrace
> +                logger.warn(""Request execution failed with message: {}"", e.getMessage(), e);  // just log message as the underlying client should log the stacktrace
>
> The full stacktrace is explicitly not logged here (see comment).
> ------------------------------
>
> In eureka-resources/src/main/resources/css/main.css
> <https://github.com/Netflix/eureka/pull/969#discussion_r148345599>:
>
> > @@ -146,7 +146,7 @@ tr.odd {
>  span.hlist {
>    padding-right: 10px;
>    margin-right: 10px;
> -  #background-color: #ffffcc;
> +  background-color: #ffffcc;
>
> Let's keep the existing background-color please. Can just delete this line.
> ------------------------------
>
> In eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java
> <https://github.com/Netflix/eureka/pull/969#discussion_r148345811>:
>
> > @@ -822,7 +820,7 @@ boolean renew() {
>          EurekaHttpResponse<InstanceInfo> httpResponse;
>          try {
>              httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, null);
> -            logger.debug(""{} - Heartbeat status: {}"", PREFIX + appPathIdentifier, httpResponse.getStatusCode());
> +            logger.debug(PREFIX + ""{} - Heartbeat status: {}"", appPathIdentifier, httpResponse.getStatusCode());
>
> All the PREFIX + in this class can also be moved to PREFIX +
> appPathIdentifier
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/Netflix/eureka/pull/969#pullrequestreview-73569824>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAQ6rgOpx6rol3dtGi34nzqjZrPwdaB1ks5syLmqgaJpZM4OgXyf>
> .
>
 =||= Also, the latest 5 commits are new to the PR. =||= I have now restored the is*Enabled() checks that guard against wasted computation. =||= Looks good, thanks @dtrebbien . =||= "Misc. fixesDeleted userghost11/14/17, 09:48:38 PMIn testing my [SLF4J Helper](http://plugins.netbeans.org/plugin/72557/) plugin for NetBeans IDE, I found a few minor improvements that can be made.NaNDaniel Trebbien11/12/17, 09:28:11 PMRestore is*Enabled() checks that guard against any computation being performed unnecessarily1
970 memory tuningTom Celluccitcellucci07/25/17, 05:38:08 PM"moved to Java 8
extensive changes to jackson deserialization to reduce heap usage"merging to create a candidate release, v1.8.0-rc.1 =||=  memory tuningTom Celluccitcellucci07/25/17, 05:38:08 PM"moved to Java 8
extensive changes to jackson deserialization to reduce heap usage"NaNThomas A Cellucci07/13/17, 08:54:13 PMmemory tuning1
971Eureka REST operations not availableJean Abrahamjeanabraham02/17/18, 12:54:58 AM"Hi,

I have the Eureka server running locally. But, none of the eureka URIs are accessible. Trying the HTTP actions on [this page](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations). 

Example:
`GET http://localhost:8761/eureka/v2/apps`

Is there any additional configuration I need to enable? Thanks!

Jean"Try removing the `v2` =||= GET http://localhost:8761/eureka/apps =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
972Is it possible to let eureka keep metadatahsj160608/04/17, 01:59:22 AMIf eureka server is down or restart, all the client metadata will lose. And there is no way to get metadata again unless the client update it via REST api. Is it possible to let eureka store the metadata or let client bring metadata in heartbeat request?NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
973InstanceInfoReplicator register service after unregistered when shutting downBill Zhangjingege12/13/17, 12:41:25 AM"```
20:36:28.856 [Thread-8] INFO   c.netflix.discovery.DiscoveryClient.shutdown 852 - Shutting down DiscoveryClient ...
20:36:28.857 [Thread-8] INFO   c.netflix.discovery.DiscoveryClient.unregister 884 - Unregistering ...
20:36:28.861 [Thread-8] INFO   c.netflix.discovery.DiscoveryClient.unregister 886 - DiscoveryClient_SHOWOFF/10.242.36.20:showoff:19001:0.1.0 - deregister  status: 200
20:36:28.862 [DiscoveryClient-InstanceInfoReplicator-0] INFO   c.netflix.discovery.DiscoveryClient.register 795 - DiscoveryClient_SHOWOFF/10.242.36.20:showoff:19001:0.1.0: registering service...
20:36:28.865 [DiscoveryClient-InstanceInfoReplicator-0] INFO   c.netflix.discovery.DiscoveryClient.register 804 - DiscoveryClient_SHOWOFF/10.242.36.20:showoff:19001:0.1.0 - registration status: 204
20:36:28.867 [Thread-8] INFO   c.netflix.discovery.DiscoveryClient.shutdown 873 - Completed shut down of DiscoveryClient
```

Thread ""Thread-8"" is shutting down discovery client, but thread ""DiscoveryClient-InstanceInfoReplicator-0"" is still scheduling.

See the code in com.netflix.discovery.InstanceInfoReplicator.java

```
    public void stop() {
        scheduler.shutdownNow();
        started.set(false);
    }
```

in JDK 8, shutdownNow says ""This method does not wait for actively executing tasks to
     * terminate.  Use {@link #awaitTermination awaitTermination} to
     * do that.""

Should we change shutdownNow to awaitTermination to avoid this situation?"PR #974  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
974Avoid scheduling when DiscoveryClient.shutdown calledBill Zhangjingege12/13/17, 12:41:27 AM#973 "@jingege thanks for the PR, that makes sense. I believe you still need to call scheduler.shutdown() before blocking on an awaitTermination however. See the last example at the [ExecutorService javadoc](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html). The phased shutdown example in the javadoc seems to be the right way to execute the shutdown, would you mind updating your PR to reflect that?

Appreciate the PR, thanks.

Copy pasting the javadoc here for relevance:
```
The following method shuts down an ExecutorService in two phases, first by calling shutdown to reject incoming tasks, and then calling shutdownNow, if necessary, to cancel any lingering tasks:
 
 void shutdownAndAwaitTermination(ExecutorService pool) {
   pool.shutdown(); // Disable new tasks from being submitted
   try {
     // Wait a while for existing tasks to terminate
     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
       pool.shutdownNow(); // Cancel currently executing tasks
       // Wait a while for tasks to respond to being cancelled
       if (!pool.awaitTermination(60, TimeUnit.SECONDS))
           System.err.println(""Pool did not terminate"");
     }
   } catch (InterruptedException ie) {
     // (Re-)Cancel if current thread also interrupted
     pool.shutdownNow();
     // Preserve interrupt status
     Thread.currentThread().interrupt();
   }
 }
``` =||= @qiangdavidliu Thx for your advice. I updated the PR. =||= @jingege apologies for the late review, I have been away. Some minor comments. =||= @qiangdavidliu - This user has not been active since this pull request.  I created a second pull request based on their work #1023 - Can you review that? =||= @qiangdavidliu Very sorry for not responding this issue so long. I was so busy these days and missed the notification. @abracadv8 Thank you very much for finishing this PR. =||= "Avoid scheduling when DiscoveryClient.shutdown calledBill Zhangjingege12/13/17, 12:41:27 AM#973 NaNBill Zhang08/08/17, 08:56:33 AMTwo phase shutdown1
975Remove checked exceptions from @PostConstruct methodsMert Caliskanmulderbaba04/25/18, 12:29:05 AM"classes listed as below should remove the checked exceptions from their `@PostConstruct` methods and `@PreDestroy` methods since it fails from deploying eureka-server onto Payara.
```
eureka-core/src/main/java/com/netflix/eureka/DefaultEurekaServerContext.java
eureka-core/src/main/java/com/netflix/eureka/aws/AwsBinderDelegate.java
eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java
eureka-core/src/main/java/com/netflix/eureka/aws/ElasticNetworkInterfaceBinder.java
eureka-core/src/main/java/com/netflix/eureka/aws/Route53Binder.java
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
976975-Remove-checked-exceptions-from-@PostConstruct-methodsMert Caliskanmulderbaba04/25/18, 12:29:05 AMfixes #975 Hi @mulderbaba thanks for the PR, and apologies for the late review. Some minor comments. =||= going to merge this and address the comments in a separate PR. =||= 975-Remove-checked-exceptions-from-@PostConstruct-methodsMert Caliskanmulderbaba04/25/18, 12:29:05 AMfixes #975 NaNMert ÇALIŞKAN08/07/17, 08:55:33 PM975-Remove-checked-exceptions-from-@PostConstruct-methods1
977add travis config option to publish candidate releases to netflix can…Taylor Wickselltwicksell09/12/17, 10:20:40 PM…didate repolooks good =||= LGTM =||= add travis config option to publish candidate releases to netflix can…Taylor Wickselltwicksell09/12/17, 10:20:40 PM…didate repoNaNTaylor Wicksell08/08/17, 05:32:51 PMadd travis config option to publish candidate releases to netflix candidate repo1
978EurekaClient getApplication returns nullRaphael Nascimentoraphaelln02/17/18, 12:54:13 AM"I have 2 eureka servers running at different ports. My service successfully registered on the second eureka. 

As far I know, this is correct, only register and after receives the requests will register in another server instances.

>  ""Once the server starts receiving traffic, all of the operations that is performed on the server is replicated to all of the peer nodes that the server knows about. If an operation fails for some reason, the information is reconciled on the next heartbeat that also gets replicated between servers.""

And following my application config:
```eureka:
  client: 
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/, http://localhost:8762/eureka/
```

And my external client code returns null.

```
@Autowired
private EurekaClient eurekaClient;
   ....
 final Application application = eurekaClient.getApplication(""SERVICE-NAME"");
 final InstanceInfo instanceInfo = application.getInstances().get(0);
```

If I change the application config to (replace the order of the eureka servers):

```eureka:
  client: 
    serviceUrl:
      defaultZone: http://localhost:8762/eureka/, http://localhost:8761/eureka/
```
The client code above works, because the eurekaClient only search for applications of the first configured eureka server.

I've been playing with this for a few hours, wondering if some configuration is invalid. 

Thanks for any help."This isn't the issue tracker for spring cloud netflix. =||= Closing as this is a spring cloud related issue. As an aside, the scenario described shouldn't occur, unless there is some async replication happening. One possibility for this to occur is mismatched server peer configuration where one server is configured to know about the peer, but the other server is not. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
979Run eureka examples get SocketException: Permission denied on Windows 10Zhi Mengjackychee08/25/17, 04:18:42 PM"I run the eureka examples on windows 10,  both eureka server and the registered service are ok.
this is the log of the registered service as follows:
[main] INFO com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1503675055638, current=UP, previous=STARTING]
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_SAMPLEREGISTERINGSERVICE/zhimeng-bd: registering service...
Service started and ready to process requests..

when i run the client demo, i got the error as follows:
Found an instance of example service to talk to from eureka: sampleservice.mydomain.net:8001
healthCheckUrl: http://zhimeng-bd:8001/healthcheck
override: UNKNOWN
Could not connect to the server :zhimeng-bd at port 8001
Connected to server. Sending a sample request: FOO Fri Aug 25 23:25:16 CST 2017
java.net.SocketException: Socket is not connected

and i find exception occurred when i use host name as zhimeng-bd, when i use localhost is ok. this makes me confused."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
980Question: The properties are not grabbed.melisoner200602/17/18, 12:51:45 AM"Hello, I'm going through the examples under eureka-examples folder and it seems like no matter what I do the eureka-client properties are not being set. My framework is Spark-Java. I already posted my question here:  @https://stackoverflow.com/questions/45921685/how-to-configure-eureka-client-and-service-properties.

Can someone help?
Thanks"Looks like the question has been address on stackoverflow. Closing this issue. Please reopen if this continues to be an issue. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
981Eurek tag 1.8.1 build failed with gradle on windows 7NicholasLiuWillieMatthewLiu02/17/18, 12:50:50 AM"Environment: Winodws7 + JDK8 + Gradle 3.2.1

On my computer, run 'gradle build -x test' on Eureka master sucessfully,but when run with same cmd on eureka tag 1.8.1 failed. 

ERROR MESSAGE:
D:\98-Test\01-Java\eureka>gradle build -x test
Git repository not found at D:\98-Test\01-Java\eureka -- nebula-release tasks wi
ll not be available. Use the git.root Gradle property to specify a different dir
ectory.

FAILURE: Build failed with an exception.

* Where:
Build file 'D:\98-Test\01-Java\eureka\build.gradle' line: 13

* What went wrong:
An exception occurred applying plugin request [id: 'nebula.netflixoss', version:
 '3.6.0']
> Failed to apply plugin [id 'nebula.netflixoss']
   > Cannot set property 'defaultVersionStrategy' on null object

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug
option to get more log output.

BUILD FAILED

Total time: 7.143 secs""@WillieMatthewLiu This seem specific to nebula, you may be best served to ask the question at https://nebula-plugins.github.io/ =||= i have same error log:

```log
org.gradle.api.ProjectConfigurationException: A problem occurred configuring root project 'eureka'.
	at org.gradle.configuration.project.LifecycleProjectEvaluator.addConfigurationFailure(LifecycleProjectEvaluator.java:79)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:57)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:510)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:90)
	at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:42)
	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:35)
	at org.gradle.initialization.DefaultGradleLauncher$2.run(DefaultGradleLauncher.java:125)
	at org.gradle.internal.Factories$1.create(Factories.java:22)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:52)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:122)
	at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:99)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:93)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:62)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:93)
	at org.gradle.initialization.DefaultGradleLauncher.getBuildAnalysis(DefaultGradleLauncher.java:87)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.configure(InProcessBuildActionExecuter.java:102)
	at org.gradle.tooling.internal.provider.runner.ClientProvidedBuildActionRunner.run(ClientProvidedBuildActionRunner.java:45)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.tooling.internal.provider.runner.SubscribableBuildActionRunner.run(SubscribableBuildActionRunner.java:58)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:43)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:48)
	at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)
	at org.gradle.util.Swapper.swap(Swapper.java:38)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:66)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)
	at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:246)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.gradle.internal.exceptions.LocationAwareException: Build file '/Users/zhuang/Desktop/git-company/eureka/build.gradle' line: 15
Error resolving plugin [id: 'nebula.netflixoss', version: '3.6.0']
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:190)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.access$000(DefaultPluginRequestApplicator.java:44)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator$1.transform(DefaultPluginRequestApplicator.java:67)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator$1.transform(DefaultPluginRequestApplicator.java:65)
	at org.gradle.util.CollectionUtils.collect(CollectionUtils.java:160)
	at org.gradle.util.CollectionUtils.collect(CollectionUtils.java:155)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:65)
	at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:126)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:38)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:25)
	at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:55)
	... 56 more
Caused by: org.gradle.api.GradleException: Error resolving plugin [id: 'nebula.netflixoss', version: '3.6.0']
	... 68 more
Caused by: org.gradle.api.GradleException: Plugin cannot be resolved from https://plugins.gradle.org/api/gradle because Gradle is running in offline mode
	at org.gradle.plugin.use.resolve.service.internal.OfflinePluginResolutionServiceClient.queryPluginMetadata(OfflinePluginResolutionServiceClient.java:26)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient$1.create(PersistentCachingPluginResolutionServiceClient.java:60)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient$1.create(PersistentCachingPluginResolutionServiceClient.java:58)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient.fetch(PersistentCachingPluginResolutionServiceClient.java:110)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient.maybeFetch(PersistentCachingPluginResolutionServiceClient.java:103)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient.maybeFetch(PersistentCachingPluginResolutionServiceClient.java:91)
	at org.gradle.plugin.use.resolve.service.internal.PersistentCachingPluginResolutionServiceClient.queryPluginMetadata(PersistentCachingPluginResolutionServiceClient.java:67)
	at org.gradle.plugin.use.resolve.service.internal.InMemoryCachingPluginResolutionServiceClient$1.create(InMemoryCachingPluginResolutionServiceClient.java:47)
	at org.gradle.plugin.use.resolve.service.internal.InMemoryCachingPluginResolutionServiceClient$1.create(InMemoryCachingPluginResolutionServiceClient.java:45)
	at org.gradle.plugin.use.resolve.service.internal.InMemoryCachingPluginResolutionServiceClient.getResponse(InMemoryCachingPluginResolutionServiceClient.java:76)
	at org.gradle.plugin.use.resolve.service.internal.InMemoryCachingPluginResolutionServiceClient.queryPluginMetadata(InMemoryCachingPluginResolutionServiceClient.java:42)
	at org.gradle.plugin.use.resolve.service.internal.DeprecationListeningPluginResolutionServiceClient.queryPluginMetadata(DeprecationListeningPluginResolutionServiceClient.java:48)
	at org.gradle.plugin.use.resolve.service.internal.PluginResolutionServiceResolver.resolve(PluginResolutionServiceResolver.java:84)
	at org.gradle.plugin.use.resolve.internal.CompositePluginResolver.resolve(CompositePluginResolver.java:33)
	at org.gradle.plugin.use.resolve.internal.NotNonCorePluginOnClasspathCheckPluginResolver.resolve(NotNonCorePluginOnClasspathCheckPluginResolver.java:42)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.resolveToFoundResult(DefaultPluginRequestApplicator.java:188)
	... 67 more


``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
982server in denial of service caused by flooding replication requests from peersxiazuojie02/17/18, 12:49:05 AM"https://github.com/Netflix/eureka/blob/3677ac7d9114e95b051659b7a6d32cc0b8def36e/eureka-core/src/main/java/com/netflix/eureka/cluster/ReplicationTaskProcessor.java#L56

We have an eureka cluster of 8 peers. Under heavy load, peer replication tasks may cause high CPU usage and put peers in denial of service state.

Let's say we have a certain peer named A.
When server A is in high CPU usage and it may fail to respond to replication requests. The other peers will get org.apache.http.conn.ConnectTimeoutException(extends IOException).
isNetworkConnectExceptionserver: the method decides whether it's a network-related issue by checking if it's an IOException. When it's an IOException(TransientError), other peers will retry sending replication request to server A. These retrial tasks will timeout too and be retried indefinitely.
All these retrial tasks leave server A no time to recover and end in denial of service state."here's a relative pull request #1031 =||= Linked PR have been merged and should be released soon. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
983instanceInfoReplicator start after status change, then RejectedExecutionExceptionwangwenyao02/17/18, 12:48:42 AM"spring cloud config server

when send /bus/refresh, I found status changed happen before instanceInfoReplicator start
pom:
```<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-eureka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-kafka</artifactId>
        </dependency>
```

code in com.netflix.discovery.DiscoveryClient:

 ```
 // InstanceInfo replicator
            instanceInfoReplicator = new InstanceInfoReplicator(
                    this,
                    instanceInfo,
                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),
                    2); // burstSize
            statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {
                @Override
                public String getId() {
                    return ""statusChangeListener"";
                }

                @Override
                public void notify(StatusChangeEvent statusChangeEvent) {
                    if (InstanceStatus.DOWN == statusChangeEvent.getStatus() ||
                            InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) {
                        // log at warn level if DOWN was involved
                        logger.warn(""Saw local status change event {}"", statusChangeEvent);
                    } else {
                        logger.info(""Saw local status change event {}"", statusChangeEvent);
                    }
                    instanceInfoReplicator.onDemandUpdate();
                }
            };

            if (clientConfig.shouldOnDemandUpdateStatusChange()) {
                applicationInfoManager.registerStatusChangeListener(statusChangeListener);
            }

            instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());
```""```
http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.839 c.n.d.DiscoveryClient[852] - Shutting down DiscoveryClient ...
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.840 o.s.c.n.e.InstanceInfoFactory[70] - Setting initial instance status as: STARTING
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.841 c.n.d.DiscoveryClient[884] - Unregistering ...
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.846 c.n.d.DiscoveryClient[886] - DiscoveryClient_CONFIG-CENTER/xxx.xxx.xxx.xxx:8102 - deregister  status: 200
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.848 c.n.d.DiscoveryClient[873] - Completed shut down of DiscoveryClient
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.850 c.n.d.DiscoveryClient[344] - Initializing Eureka in region us-east-1
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.852 c.n.d.p.DiscoveryJerseyProvider[70] - Using JSON encoding codec LegacyJacksonJson
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.852 c.n.d.p.DiscoveryJerseyProvider[71] - Using JSON decoding codec LegacyJacksonJson
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.852 c.n.d.p.DiscoveryJerseyProvider[80] - Using XML encoding codec XStreamXml
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.852 c.n.d.p.DiscoveryJerseyProvider[81] - Using XML decoding codec XStreamXml
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.939 c.n.d.s.r.a.ConfigClusterResolver[43] - Resolving eureka endpoints via configuration
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.940 c.n.d.DiscoveryClient[1244] - Starting heartbeat executor: renew interval is: 10
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.940 c.n.d.InstanceInfoReplicator[59] - InstanceInfoReplicator onDemand update allowed rate per min is 4
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.941 c.n.d.DiscoveryClient[425] - Discovery Client initialized at timestamp 1505187917941 with initial instances count: 0
[DiscoveryClient-InstanceInfoReplicator-0] INFO  2017-09-12 11:45:17.941 c.n.d.DiscoveryClient[795] - DiscoveryClient_CONFIG-CENTER/xxx.xxx.xxx.xxx:8102: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO  2017-09-12 11:45:17.947 c.n.d.DiscoveryClient[804] - DiscoveryClient_CONFIG-CENTER/xxx.xxx.xxx.xxx:8102 - registration status: 204
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.949 o.s.c.n.e.s.EurekaServiceRegistry[64] - Unregistering application config-center with eureka with status DOWN
[http-nio-8102-exec-2] INFO  2017-09-12 11:45:17.950 o.s.c.n.e.s.EurekaServiceRegistry[40] - Registering application config-center with eureka with status UP
[http-nio-8102-exec-2] WARN  2017-09-12 11:45:17.950 c.n.d.DiscoveryClient[1277] - Saw local status change event StatusChangeEvent [timestamp=1505187917950, current=UP, previous=DOWN]
[DiscoveryClient-InstanceInfoReplicator-0] INFO  2017-09-12 11:45:17.950 c.n.d.DiscoveryClient[795] - DiscoveryClient_CONFIG-CENTER/xxx.xxx.xxx.xxx:8102: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] INFO  2017-09-12 11:45:17.953 c.n.d.DiscoveryClient[804] - DiscoveryClient_CONFIG-CENTER/xxx.xxx.xxx.xxx:8102 - registration status: 204
[http-nio-8102-exec-2] ERROR 2017-09-12 11:45:18.010 o.a.c.c.C.[.[.[.[dispatcherServlet][181] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@975b946 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@2b6f6092[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 6]] with root cause
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@975b946 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@2b6f6092[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 6]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:326)
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:533)
	at java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:632)
	at com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:77)
	at com.netflix.discovery.DiscoveryClient.registerHealthCheck(DiscoveryClient.java:618)
	at com.netflix.discovery.DiscoveryClient$$FastClassBySpringCGLIB$$a84c8cb4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.cloud.context.config.StandardBeanLifecycleDecorator$2.invoke(StandardBeanLifecycleDecorator.java:85)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient$$EnhancerBySpringCGLIB$$af46ce7b.registerHealthCheck(<generated>)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:49)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:73)
	at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher.onApplicationEvent(EurekaDiscoveryClientConfiguration.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:256)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:177)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:140)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)
	at org.springframework.cloud.context.scope.refresh.RefreshScope.refreshAll(RefreshScope.java:146)
	at org.springframework.cloud.context.refresh.ContextRefresher.refresh(ContextRefresher.java:58)
	at org.springframework.cloud.bus.event.RefreshListener.onApplicationEvent(RefreshListener.java:43)
	at org.springframework.cloud.bus.event.RefreshListener.onApplicationEvent(RefreshListener.java:30)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)
	at org.springframework.cloud.bus.endpoint.AbstractBusEndpoint.publish(AbstractBusEndpoint.java:48)
	at org.springframework.cloud.bus.endpoint.RefreshBusEndpoint.refresh(RefreshBusEndpoint.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:80)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:799)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1455)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
``` =||= 我理解这个异常是由于statusChangeListener 已经注册并生效，但instanceInfoReplicator还未启动造成的。 =||= Not the issue tracker for spring cloud =||= Closing as this is specific to spring cloud. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
984Fix Override Status RegressionDavid Liuqiangdavidliu09/13/17, 06:17:37 PMSetting and deleting the override status on an eureka server has a regression due to the `lastDirtyTimestamp` being updated by the server in response to the set and delete, which can in turn lead to client update/registers potentially being ignored due to the timestamp being ahead on the server compared to client local."What version does this affect (where was the regression)? =||= Unfortunately it was a while ago at release 1.4.11 (triggered due to PR #822, but not because of this PR). This issue mainly affects server side status override removals that does not specify a suggested status. The behaviour then will be:
1. server side status is updated to UNKNOWN (with an updated dirty timestamp) and will force a re-registration from the client
2. the client re-registers with an InstanceInfo that potentially has an older dirty timestamp.
3. the server will disregard the re-registration and keep on using its local copy (the effect of PR #822), leading to an unchanged status of UNKNOWN (until the client refreshes at some point with an even later timestamp) =||= OK. Wondering if you could patch the Java 7 version as well as master. =||= Sure thing. Once we've validated this fix, I'll cut a patch based on release 1.7.0 (last pre java8 release) =||= @spencergibb here's the diff (https://github.com/Netflix/eureka/compare/v1.7.0...v1.7.x). I'll cut 1.7.1 release this afternoon. =||= v1.7.1 is released with this fix on the 1.7.x branch. =||= "Fix Override Status RegressionDavid Liuqiangdavidliu09/13/17, 06:17:37 PMSetting and deleting the override status on an eureka server has a regression due to the `lastDirtyTimestamp` being updated by the server in response to the set and delete, which can in turn lead to client update/registers potentially being ignored due to the timestamp being ahead on the server compared to client local.NaNDavid Liu09/12/17, 10:32:37 PMMerge remote-tracking branch 'upstream/master'1
985check call success/failure before unsetting isDirtyDavid Liuqiangdavidliu09/18/17, 05:43:07 PMNaNNaNcheck call success/failure before unsetting isDirtyDavid Liuqiangdavidliu09/18/17, 05:43:07 PMNaNNaNDavid Liu09/18/17, 05:33:17 PMcheck call success/failure before unsetting isDirty1
986Add catch for potential exceptionsDavid Liuqiangdavidliu09/18/17, 09:32:05 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
987Eureka can store just API information?Inki Hwangfisache09/19/17, 09:38:56 AM"Hi.
I'm using eureka with Netflix OSS such as zuul, ribbon etc in spring cloud.
I will use zuul for API Gateway.
So, need to store API info such as url, header, payload..
I understood that eureka can store service info or endpoint in sidecar if non-jvm.
Could I use eureka or sidecar like API info storage?
Thx :)""I think it is my mistake..
I will refernce to https://dzone.com/articles/spring-cloud-sidecar
haha.. :) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
988Services deployed on kubernetes and registered with Eureka are not discoverable  Arunesh Kumar Dubeyfocode02/16/18, 06:18:21 PM"Services deployed on kubernetes are getting registered with Eureka. However the home page URL (Service Endpoint) of the service points to the service POD name which is not an actual host, this results in Unknown host exception when forwarding request via Zuul.""It is a typical problem. My solution is: you can use NodePort in kubernetes service yaml. And in Dockerfile you can pass ""--eureka.instance.nonSecurePort"" and ""--eureka.instance.ip-address"" to your service   =||= @wangpenghit2155 I don't understand what you mean... =||= Eureka client allows for customization of several parameters that may be able to help address this issue. I believe the solution outlined by @wangpenghit2155 executes an override of the (auto-discovered) system ip and port that is used for registration. Another potential way to address this is to set the override for the absolute url of the homepage: https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/appinfo/EurekaInstanceConfig.java#L293

Closing this issue for now. Please reopen if neither of the above solutions work. =||= It is not woking for me =||= Its not working for me too.

As described in the kubernetes manual it should be possible to setup deployments/pods such way, that the (by k8 generated) pod name is registered at the kubernetes DNS (coredns)  so we are able to nslookup by podname additionally to lookup by service name (using the cluster ip)
https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pods

We tried to setup the deployment.yaml in different way, but never succeeded so far in the results that is described in the docs, that shall allow a nslookup to be resolved from pod  A for Pod B real IP using
pod-ip-address.my-namespace.pod.cluster.local 

or (what is even more wished)

pod-name.my-namespace.pod.cluster.local 


Like the doc says,  clusterIP: None and we tried with hostname set (or even not set and being generated by kubernetes itself

We verified the test runs using nslookup while ssh on console of Pod A.

With no approach there was ever a DNS resolution possible in Pod A   using B.dev.pod.cluster.local (or just B ) where the podname of B was a generated one which what listed in in k8 pod description and on POD B /etc/hosts  file.

 =||= We got it working by adding the System Property -Deureka.instance.preferIpAddress=true in our startup =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
989Add a config to control whether explicit unregister should happen on client shutdownDavid Liuqiangdavidliu09/21/17, 08:51:01 PMNaNNaNAdd a config to control whether explicit unregister should happen on client shutdownDavid Liuqiangdavidliu09/21/17, 08:51:01 PMNaNNaNDavid Liu09/21/17, 08:16:29 PMAdd tests1
990Eureka-client always returns overridden: UNKNOWN, even though the value is set to something elseJon Anders Sollienjasollien02/16/18, 06:14:14 PM"I regularly output this line in my java code from the instance (java eureka-client v1.8.1)

logger.info(""overridden: "" + ApplicationInfoManager.getInstance().getInfo().getOverriddenStatus().name());

This always prints UNKNOWN.

ApplicationInfoManager.getInstance().getInfo().getStatus().name() however, seems to work as expected

By looking at the JSON data however, this looks fine:

![image](https://user-images.githubusercontent.com/3275463/30854408-cce28dee-a2b1-11e7-811a-3c5987c7a916.png)

I tried attaching your source code, and set a breakpoint in setOverriddenStatus. And here it is always the correct status, except from first time, when it is UNKNWON.

public Builder setOverriddenStatus(InstanceStatus status) {
            result.overriddenstatus = status;
            return this;
        }""I somehow got it working by using: 
DiscoveryManager.getInstance().getLookupService().getInstancesById(instanceInfo.getInstanceId()).get(0).getOverriddenStatus(), but it does not look nice

Update: DiscoveryManager.getInstance().getLookupService().getApplication(info.getAppName()).getByInstanceId(info.getInstanceId()).getOverriddenStatus() also works =||= @jasollien looks like you have resolved your issue. Closing this issue. Please re open if you need. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
991eurekajamenjavanan02/16/18, 06:10:53 PM"org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'eurekaAutoServiceRegistration': Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:216)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1081)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.getTargetBean(ApplicationListenerMethodAdapter.java:280)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:250)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:174)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:137)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:389)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:994)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:961)
	at org.springframework.cloud.context.named.NamedContextFactory.destroy(NamedContextFactory.java:76)
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:272)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:578)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:554)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:961)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:523)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:968)
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1033)
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1009)
	at org.springframework.context.support.AbstractApplicationContext$2.run(AbstractApplicationContext.java:928)"Hi @javanan this look specific to the spring cloud integration with eureka (this original project does not make use of spring). I would advice that you redirect your queries there (https://github.com/spring-cloud/spring-cloud-netflix). Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
992The project started very slowlyjamenjavanan02/16/18, 06:09:56 PM"2017-09-27 15:00:22.677  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService  'taskScheduler'
2017-09-27 15:01:29.578  WARN [taichi-sys-personnel-service,,,] 11500 --- [           main] c.n.c.sources.URLConfigurationSource     : No URLs will be polled as dynamic configuration sources.
2017-09-27 15:01:29.578  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] c.n.c.sources.URLConfigurationSource     : To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2017-09-27 15:01:30.734  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.s.c.ThreadPoolTaskScheduler          : Initializing ExecutorService 
2017-09-27 15:01:32.439  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.i.codec.kryo.CompositeKryoRegistrar  : configured Kryo registration [40, java.io.File] with serializer org.springframework.integration.codec.kryo.FileSerializer
2017-09-27 15:01:33.337  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : jolokia: No access restrictor found, access to any MBean is allowed
2017-09-27 15:01:33.342  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : jolokia: jolokia:type=Config is already registered. Adding it with jolokia:type=Config,uuid=6beed861-53e2-4a73-8482-9ecf2869c71e, but you should revise your setup in order to either use a qualifier or ensure, that only a single agent gets registered (otherwise history functionality might not work)
2017-09-27 15:01:33.342  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : jolokia: Cannot register (legacy) MBean handler for config store with name jmx4perl:type=Config since it already exists. This is the case if another agent has been already started within the same JVM. The registration is skipped.
2017-09-27 15:01:33.342  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : jolokia: Jolokia Discovery MBean registration is skipped because there is already one registered.
2017-09-27 15:01:33.472  INFO [taichi-sys-personnel-service,,,] 11500 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase -2147482648
2017-09-27 15:01:33.764  INFO [taichi-sys-personnel-service,,,] 11500 --- [           "Hi @javanan your stack trace look related to the spring cloud integration with eureka. I would suggest that you redirect this question there. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
993Closing connections idle longer than 30000 SECONDSangheladrianclaudiu02/16/18, 06:08:55 PM"Hi,

This cleaning is causing problems while microservices are interacting with each other.

How can it be fixed?

I am using eureka-client 1.6.2, spring cloud Dalston.SR3 and Spring Boot 1.5.7.

```2017-09-28 14:05:00.136 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.MonitoredConnectionManager : Closing connections idle longer than 30000 SECONDS
2017-09-28 14:05:00.136 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Closing connections idle longer than 30000 SECONDS
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.MonitoredConnectionManager : Closing connections idle longer than -1 SECONDS
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Closing connections idle longer than 0 SECONDS
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Closing connection last used @ Thu Sep 28 14:04:30 GMT 2017
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Deleting connection [{}->http://eureka-server:<port>][null]
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Closing connection last used @ Thu Sep 28 14:04:30 GMT 2017
2017-09-28 14:05:00.142 DEBUG 5 — [t-Conn-Cleaner2] c.n.d.shared.NamedConnectionPool : Deleting connection [{}->http://eureka-server:<port>][null]
```

One of the issues that is causing: https://github.com/spring-projects/spring-security-oauth/issues/1176

Thanks,
Adrian"@angheladrianclaudiu the configuration `eureka.eurekaserver.connectionIdleTimeoutInSeconds` should allow you to configure a longer timeout if desired. This configuration is the native eureka config key and may be mapped to a slightly different name in spring cloud. It should be easily findable in the spring cloud documentation. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
994Fix a race condition in the server remoteRegionRegistryDavid Liuqiangdavidliu10/03/17, 07:32:25 PMAlso updated some default server configs to do with connect and read timeouts to be more reasonable.NaNFix a race condition in the server remoteRegionRegistryDavid Liuqiangdavidliu10/03/17, 07:32:25 PMAlso updated some default server configs to do with connect and read timeouts to be more reasonable.NaNDavid Liu10/03/17, 06:26:03 PMtune down the slightly aggressive update to default apache http timeouts1
995API changes report for Eureka ClientAndrey P.lvc02/16/18, 12:50:21 AM"Hi,

I'd like to share my results on API changes analysis of the library: https://abi-laboratory.pro/java/tracker/timeline/eureka-client/

The report is generated by the https://github.com/lvc/japi-compliance-checker tool for jars found at http://central.maven.org/maven2/com/netflix/eureka/eureka-client/ according to https://wiki.eclipse.org/Evolving_Java-based_APIs_2.

Thank you.

![eureka-client-2](https://user-images.githubusercontent.com/1517837/31162706-a551c4b6-a8e7-11e7-8298-e6340547aed1.png)
![eureka-client-1](https://user-images.githubusercontent.com/1517837/31162707-a5539f2a-a8e7-11e7-9474-7243bf250be5.png)"Hi @lvc Thank you for the information, this look quite interesting. Appreciate the report. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
996Move TimedSupervisorTask logs to debug level as they are already measured by metrics.David Liuqiangdavidliu10/04/17, 09:00:27 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
997 Add ability to fail fast in DiscoveryClient construction if an initial registration attempt failsDavid Liuqiangdavidliu10/09/17, 09:12:04 PMNaNNaN Add ability to fail fast in DiscoveryClient construction if an initial registration attempt failsDavid Liuqiangdavidliu10/09/17, 09:12:04 PMNaNNaNDavid Liu10/09/17, 08:21:21 PMupdate TimedSupervisorTask log levels.1
998Why is the retry 3 times?sagaholy1234512/27/17, 10:15:19 AM"In this class RetryableEurekaHttpClient, why this variable DEFAULT_NUMBER_OF_RETRIES is 3?
In my application.properties like this : 
eureka.client.service.url.defaultZone=http://localhost:8761/eureka,http://localhost:8763/eureka,http://localhost:8764/eureka,http://localhost:8762/eureka.
if http://localhost:8761/eureka、http://localhost:8763/eureka、http://localhost:8764/eureka is down，but http://localhost:8762/eureka is up, the client can not fetch information from up eureka server(http://localhost:8762/eureka)."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
999JerseyEurekaHttpClientFactory cleaner's connectionIdleTimeout芋道源码YunaiV02/16/18, 12:49:05 AM"I found `JerseyEurekaHttpClientFactoryBuilder#buildLegacy(...)` source code like this:

```Java
private JerseyEurekaHttpClientFactory buildLegacy(Map<String, String> additionalHeaders, boolean systemSSL) {
    // .... 
    return new JerseyEurekaHttpClientFactory(jerseyClient, additionalHeaders);
}
```

And `JerseyEurekaHttpClientFactory` source code like this:

```Java
@Deprecated
public JerseyEurekaHttpClientFactory(EurekaJerseyClient jerseyClient, Map<String, String> additionalHeaders) {
      this(jerseyClient, null, -1, additionalHeaders);
 }

private JerseyEurekaHttpClientFactory(EurekaJerseyClient jerseyClient,
                                          ApacheHttpClient4 apacheClient,
                                          long connectionIdleTimeout,
                                          Map<String, String> additionalHeaders) {
        this.jerseyClient = jerseyClient;
        this.apacheClient = jerseyClient != null ? jerseyClient.getClient() : apacheClient;
        this.additionalHeaders = additionalHeaders;
        this.cleaner = new ApacheHttpClientConnectionCleaner(this.apacheClient, connectionIdleTimeout);
 }
```

* so `connectionIdleTimeout = -1` ，Is There a problem with that ？？？

"@qiangdavidliu thx =||= Hi @YunaiV yes, this is handled by the underlying apache http client. Thanks for the issue. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1000FreeMarker template error (DEBUG mode; use RETHROW in production!)Igor Bljahhinigorbljahhin02/16/18, 12:46:37 AM"Suddenly our instance of Eureka gives this error message:

![image](https://user-images.githubusercontent.com/1252230/31772585-db180512-b4e8-11e7-842c-ac99034b3305.png)

Nothing was changed on our side. What should I do to fix this issue?""I discovered the source of the issue. It happened when I connected to same Eureka two instances of my app: one was deployed in Amazon and second was started locally on my computer. =||= Hi @igorbljahhin it looks like you have resolved your own issue? Please reopen if you have any more questions. Thanks. =||= > I discovered the source of the issue. It happened when I connected to same Eureka two instances of my app: one was deployed in Amazon and second was started locally on my computer.

can You help me find a way to fix this issue? tks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1001Support configuration of custom SSLContext/HostnameVerifierMatt Nelsonmattnelson10/27/17, 08:59:19 PM"Implementation of #816 

Supports configuration of custom SSLContext/HostnameVerifier for jersey1/jersey2 implementations."@qiangdavidliu @twicksell Could I get a review on this? =||= @mattnelson we'll take a look. Thanks for the PR. =||= Support configuration of custom SSLContext/HostnameVerifierMatt Nelsonmattnelson10/27/17, 08:59:19 PM"Implementation of #816 

Supports configuration of custom SSLContext/HostnameVerifier for jersey1/jersey2 implementations."NaNMatt Nelson10/27/17, 08:39:51 PMRestore passive method signatures. Add missing log parameter binding.1
1002registred service within Eureka with UNKNOWN nameSofiane Mekhabamekhaba02/16/18, 12:45:57 AM"Hi to all, 
really I have problem with registering services within eureka. I have application web tha tregistred well in eureka and this service can consume other services but, the others can't do it.
In the console I have this message : 

`**DiscoveryClient_UNKNOWN/activegps-web-app: registering service..**.`
So, the configuration file in application.properties is like that : 

```
spring.application.name=activegps-web-app

eureka.client.serviceUrl.defaultZone=http://eureka-master:8761/eureka/, http://eureka-slave:8761/eureka/
eureka.client.healthcheck.enabled=true
eureka.client.register-with-eureka=true 
eureka.client.fetch-registry= true

eureka.instance.prefer-ip-address=false
eureka.instance.instance-id=activegps-web-app
eureka.instance.nonSecurePort=8080
eureka.instance.statusPageUrlPath=/webclient
eureka.instance.hostname=activegps-web-app

```
the pom file is 

```
<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>

		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-feign</artifactId>			
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>
```
the BOM management used is  


```
<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Brixton.SR7</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
```
Can you please give some way to fixe this problem.""Hi @mekhaba unfortunately your issue look very specific to spring cloud, and I am not able to provide you much help here. I believe the spring cloud public documentation is quite detailed, and they are also active and helpful at https://github.com/spring-cloud/spring-cloud-netflix.

Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1003"Prevent ""null"" url server url prefix"Geunwoo Shinencyphered04/25/18, 12:30:38 AM"When set `shouldUseDns` as true with null `eurekaServer.context`, `EndpointUtils#getServiceUrlsFromDNS` appends ""null"" string to service url postfix.

e.g. http://ec2-10-0-0-1.ap-northeast-2.compute.amazonaws.com/null/

Fixed this."Merging this and addressing the PR comment in a separate PR. =||= "Prevent ""null"" url server url prefix"Geunwoo Shinencyphered04/25/18, 12:30:38 AM"When set `shouldUseDns` as true with null `eurekaServer.context`, `EndpointUtils#getServiceUrlsFromDNS` appends ""null"" string to service url postfix.

e.g. http://ec2-10-0-0-1.ap-northeast-2.compute.amazonaws.com/null/

Fixed this."NaNGeunwoo Shin11/03/17, 01:48:08 AMAppend slash when eureka server context is null1
1004do these kind of fallbacks make sense? - eurekaServer.port and portOdín del Ríoodin-delrio05/30/19, 11:12:11 PM"Hi,
I've been recently playing with eureka configs and I encountered myself searching for a strange error with the ports configuration... at the end of the day, it was my fault, I was using `eureka.port` instead of `eureka.eurekaServer.port` for telling my service where eureka server was listening.
The thing is that eureka has defined fallbacks for both ports to use the other one if one is missing...
does this makes sense? why if no eureka server port is defined the fallback is the service port?

https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/PropertyBasedClientConfigConstants.java#-L45-L46

![image](https://user-images.githubusercontent.com/9112748/31937115-cf623f5c-b8b3-11e7-9379-de73e3e7b1a5.png)

![image](https://user-images.githubusercontent.com/9112748/31937163-ec4be7bc-b8b3-11e7-9e93-7d6c413ae2a7.png)


I think that a proper error message will be more helpful...
Current behaviour allows projects with wrong config to luckily work if eureka and the service are listening on the same port... dealing in wrong assumptions to the developers.

what do you think?"Hi @odin-delrio thank you for raising the issue. I believe these exists for backward compatibility reasons only. If you think a more clear message should be present, we'd love a PR. Thanks again. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1005Update REST docs for UP'ing an instancePedro Barbosajpedro02/16/18, 12:38:51 AM"The REST docs (https://github.com/Netflix/eureka/wiki/Eureka-REST-operations) are wrong regarding UP'ing an instance.

They say use a `DELETE` method but should be a `PUT` instead:

```
Put instance back into service (remove override) | DELETE/eureka/v2/apps/appID/instanceID/status?value=UP (The value=UP is optional, it is used as a suggestion for the fallback status due to removal of the override)
```""@jpedro the documentation is correct, however the wording is misleading. I have updated the documentation to ""`Move` instance back into service"". Thanks for the issue. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1006Eureka Java client heartbeat is failing intermittently Sushant Borsebsushant-athena01/31/18, 10:42:56 PM"**Getting this error :**
```
DiscoveryJerseyProvider   : Cannot parse request body

com.fasterxml.jackson.databind.JsonMappingException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
```

**and after that** 
```
RedirectingEurekaHttpClient  : Request execution error

javax.ws.rs.WebApplicationException: HTTP 400 Bad Request
```

Spring Boot: 1.4.1
Spring Cloud Netflix: 1.2.4.RELEAS
Please help me resolve this error.""```
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] org.apache.http.wire                     :  << ""{""timestamp"":1509434562261,""status"":404,""error"":""Not Found"",""message"":""Not Found"",""path"":""//eureka/apps/SIMPLE-JAVA-CLIENT/simple-java-client:8761:0efbd711f98af82c198a1a6156cc1fce""}""
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] c.n.d.shared.MonitoredConnectionManager  : Released connection is reusable.
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] c.n.d.shared.NamedConnectionPool         : Releasing connection [{}->http://localhost:18888][null]
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] c.n.d.shared.NamedConnectionPool         : Pooling connection [{}->http://localhost:18888][null]; keep alive indefinitely
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] c.n.d.shared.NamedConnectionPool         : Notifying no-one, there are no waiting threads
2017-10-31 07:22:42.264 DEBUG 1 --- [tbeatExecutor-0] c.n.d.provider.DiscoveryJerseyProvider   : Cannot parse request body
```

```
com.fasterxml.jackson.databind.JsonMappingException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@561b2cdd; line: 1, column: 2]
	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:261) ~[jackson-databind-2.8.3.jar!/:2.8.3]
	at com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(DeserializationContext.java:1234) ~[jackson-databind-2.8.3.jar!/:2.8.3]
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1690) ~[jackson-databind-2.8.3.jar!/:2.8.3]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1620) ~[jackson-databind-2.8.3.jar!/:2.8.3]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1183) ~[jackson-databind-2.8.3.jar!/:2.8.3]
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:178) ~[eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.6.2.jar!/:1.6.2]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) [jersey-client-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) [jersey-client-1.19.1.jar!/:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815) [eureka-client-1.6.2.jar!/:1.6.2]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379) [eureka-client-1.6.2.jar!/:1.6.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_141]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_141]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_141]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_141]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_141]
```

`2017-10-31 07:22:42.265 DEBUG 1 --- [tbeatExecutor-0] n.d.s.t.j.AbstractJerseyEurekaHttpClient : Jersey HTTP PUT http://localhost:18888/public/eureka//apps/SIMPLE-JAVA-CLIENT/simple-java-client:8761:0efbd711f98af82c198a1a6156cc1fce; statusCode=404` =||= We aren’t ready very keen in supporting older versions. And chance you can update to Dalston and Boot 1.5? =||= Also there’s a double // in your eureka url. Could be a normalization problem. =||= @dsyer are you talking about the client or the server side version ? 
 =||= Both. But the error is from the client isn't it? =||= on server side it is not possible to update.
currently server side sprint boot :1.4.3 and cloud is Camden.SR4.

Yes the error is from client =||= Well how about updating the client? And fixing the double //? =||= @dsyer I updated the client i.e. spring boot: 1.5.1 and spring cloud: 1.3.5 , but still after 4-5 hours the clients disconnects and in the logs I see same error. 
Also with that double // it worked for 4-5 hours.  =||= Don't know then. Seems like it must be an environment issue. What kind of connection does the client have to eureka? Is there a proxy? More than one? =||= yes, we have a proxy which is the marathon lb. =||= I would be looking there for clues then. Something started messing with your traffic. Also look at the logs and /trace from the eureka server. =||= Thanks @dsyer  
So the same error occurs on server side as well(which is occurring on client side). But later we changed the eureka server instances from 3 to 1 and now the client is not failing. 
Do you know what can be the possible reasons for this ? Also one more thing we have noticed is that even though now the instances are only 1 , when we see the /eureka/apps/ the eureka server instance gets deregistered immediately . 
e.g. after restarting the server I could see the eureka server registered as ""Gateway"" on /eureka/apps endpoint but after sometime it disappears. 
can you please provide your thoughts on this as well? Is this something with the instance replicator? =||= As soon as I start my server I see some connection refused error and then this below one:
```
2017-11-13 23:37:56.763  WARN 85576 --- [nfoReplicator-0] c.n.discovery.InstanceInfoReplicator     : There was a problem with the instance info replicator

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:815) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:104) ~[eureka-client-1.4.12.jar!/:1.4.12]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_111]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_111]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_111]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_111]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_111]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_111]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_111]
``` =||= Ok so we moved to peer awareness mode to solve this problem and also updated to dalston sr1 
:cheers =||= Thanks for letting us know you've resolved your issue! =||= After restarting an eureka instance, it fails to re-register and we are again getting similar kind of error. Can somebody look into this?

```
dev_gateway_zuul | com.fasterxml.jackson.databind.JsonMappingException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
dev_gateway_zuul |  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@7c628fbd; line: 1, column: 2]
dev_gateway_zuul | 	at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:148)
dev_gateway_zuul | 	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1584)
dev_gateway_zuul | 	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1508)
dev_gateway_zuul | 	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1102)
dev_gateway_zuul | 	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:178)
dev_gateway_zuul | 	at org.springframework.cloud.netflix.eureka.server.CloudJacksonJson.decode(CloudJacksonJson.java:67)
dev_gateway_zuul | 	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103)
dev_gateway_zuul | 	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
dev_gateway_zuul | 	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
dev_gateway_zuul | 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
dev_gateway_zuul | 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
dev_gateway_zuul | 	at java.lang.Thread.run(Thread.java:748)
dev_gateway_zuul | 2018-10-24 01:26:20,196 [] DEBUG [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient  - Jersey HTTP PUT http://zuulgateway:80/eureka//apps/GATEWAY/Gateway:c9c4a1bccab0e51d7d4f7a78e440e0b1; statusCode=404
dev_gateway_zuul | 2018-10-24 01:26:20,197 [] ERROR [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient  - Request execution error
dev_gateway_zuul | javax.ws.rs.WebApplicationException
dev_gateway_zuul | 	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
dev_gateway_zuul | 	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
dev_gateway_zuul | 	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
dev_gateway_zuul | 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
dev_gateway_zuul | 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
dev_gateway_zuul | 	at java.lang.Thread.run(Thread.java:748)
dev_gateway_zuul | 2018-10-24 01:26:20,197 [] WARN  [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient  - Request execution failed with message: null
dev_gateway_zuul | 2018-10-24 01:26:20,197 [] ERROR [DiscoveryClient-HeartbeatExecutor-0]  com.netflix.discovery.DiscoveryClient  - DiscoveryClient_GATEWAY/Gateway:c9c4a1bccab0e51d7d4f7a78e440e0b1 - was unable to send heartbeat!
dev_gateway_zuul | com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
dev_gateway_zuul | 	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815)
dev_gateway_zuul | 	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379)
dev_gateway_zuul | 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
dev_gateway_zuul | 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
dev_gateway_zuul | 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
dev_gateway_zuul | 	at java.lang.Thread.run(Thread.java:748)
dev_gateway_zuul | 2018-10-24 01:26:20,393 [] DEBUG [PollingServerListUpdater-0]  com.netflix.loadbalancer.DynamicServerListLoadBalancer  - List of Servers for gatewaysupport obtained from Discovery client: [nodegateway:nodegateway:GATEWAYSUPPORT:3000]
dev_gateway_zuul | 2018-10-24 01:26:20,393 [] DEBUG [PollingServerListUpdater-0]  com.netflix.loadbalancer.ZoneAffinityServerListFilter  - Determining if zone affinity should be enabled with given server list: [nodegateway:nodegateway:GATEWAYSUPPORT:3000]
dev_gateway_zuul | 2018-10-24 01:26:20,393 [] DEBUG [PollingServerListUpdater-0]  com.netflix.loadbalancer.ZoneAffinityServerListFilter  - zoneAffinity is overriden. blackOutServerPercentage: 0.0, activeReqeustsPerServer: 0.0, availableServers: 1
```
@dsyer 
I tried to write a filter where I'll pass empty body response but the filter is not triggering . =||= This issue was closed 9 months ago. If you are running the latest versions your symptoms may look similar, but it seems unlikely to be the same cause. Can you show how to reproduce the issue? It looks like the eureka server is down/broken/refusing connections. =||= We are using spring-cloud dalston sr1 version. I've a jar file but not sure how to share. 
In my local testing I run the java jar file , once the self registration is done I disconnect the internet for 5 min then brings back the internet but then the renew calls fails.
Below is my mvn dependency:tree:::
```
[INFO] --- maven-dependency-plugin:2.10:tree (default-cli) @ gateway-run ---
[INFO] com.abb.platform:gateway-run:jar:0.0.1-SNAPSHOT
[INFO] +- com.abb.platform:gateway-endpoint:jar:0.0.1-SNAPSHOT:compile
[INFO] |  +- com.abb.platform:platform-configuration:jar:1.2.0-SNAPSHOT:compile
[INFO] |  |  +- org.cfg4j:cfg4j-consul:jar:4.4.0:compile
[INFO] |  |  |  +- com.orbitz.consul:consul-client:jar:0.10.1:compile
[INFO] |  |  |  |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile
[INFO] |  |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile
[INFO] |  |  |  |  +- org.immutables:value:jar:2.1.12:compile
[INFO] |  |  |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.6.3:compile
[INFO] |  |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.6.3:compile
[INFO] |  |  |  |  \- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.6.3:compile
[INFO] |  |  |  +- org.apache.cxf:cxf-rt-transports-http-hc:jar:3.1.6:compile
[INFO] |  |  |  |  +- org.apache.cxf:cxf-core:jar:3.1.6:compile
[INFO] |  |  |  |  |  \- org.apache.ws.xmlschema:xmlschema-core:jar:2.2.1:compile
[INFO] |  |  |  |  +- org.apache.cxf:cxf-rt-transports-http:jar:3.1.6:compile
[INFO] |  |  |  |  +- org.apache.httpcomponents:httpcore-nio:jar:4.4.4:compile
[INFO] |  |  |  |  \- org.apache.httpcomponents:httpasyncclient:jar:4.1.1:compile
[INFO] |  |  |  \- org.apache.cxf:cxf-rt-rs-client:jar:3.1.6:compile
[INFO] |  |  |     \- org.apache.cxf:cxf-rt-frontend-jaxrs:jar:3.1.6:compile
[INFO] |  |  \- org.cfg4j:cfg4j-git:jar:4.4.0:compile
[INFO] |  |     \- org.eclipse.jgit:org.eclipse.jgit:jar:4.3.0.201604071810-r:compile
[INFO] |  |        +- com.jcraft:jsch:jar:0.1.53:compile
[INFO] |  |        \- com.googlecode.javaewah:JavaEWAH:jar:0.7.9:compile
[INFO] |  +- com.abb.platform:foundation-services-core:jar:1.0.0-SNAPSHOT:compile
[INFO] |  |  +- org.bitbucket.b_c:jose4j:jar:0.5.2:compile
[INFO] |  |  +- com.google.guava:guava:jar:18.0:compile
[INFO] |  |  +- commons-codec:commons-codec:jar:1.9:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.6.6:compile
[INFO] |  |  \- com.fasterxml.jackson.core:jackson-annotations:jar:2.6.6:compile
[INFO] |  +- com.netflix.netflix-commons:netflix-commons-util:jar:0.1.1:compile
[INFO] |  +- org.springframework.cloud:spring-cloud-starter-eureka-server:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-starter:jar:1.2.2.RELEASE:compile
[INFO] |  |  |  +- org.springframework.boot:spring-boot-starter:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  +- org.springframework.cloud:spring-cloud-context:jar:1.2.2.RELEASE:compile
[INFO] |  |  |  |  \- org.springframework.security:spring-security-crypto:jar:4.2.2.RELEASE:compile
[INFO] |  |  |  +- org.springframework.cloud:spring-cloud-commons:jar:1.2.2.RELEASE:compile
[INFO] |  |  |  \- org.springframework.security:spring-security-rsa:jar:1.0.3.RELEASE:compile
[INFO] |  |  |     \- org.bouncycastle:bcpkix-jdk15on:jar:1.55:compile
[INFO] |  |  |        \- org.bouncycastle:bcprov-jdk15on:jar:1.55:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-netflix-eureka-server:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- org.springframework.boot:spring-boot-starter-freemarker:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  |  +- org.freemarker:freemarker:jar:2.3.26-incubating:compile
[INFO] |  |  |  |  \- org.springframework:spring-context-support:jar:4.3.8.RELEASE:compile
[INFO] |  |  |  +- org.springframework.cloud:spring-cloud-netflix-eureka-client:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- com.netflix.eureka:eureka-client:jar:1.6.2:compile
[INFO] |  |  |  |  +- org.codehaus.jettison:jettison:jar:1.3.7:runtime
[INFO] |  |  |  |  |  \- stax:stax-api:jar:1.0.1:runtime
[INFO] |  |  |  |  +- com.netflix.netflix-commons:netflix-eventbus:jar:0.3.0:runtime
[INFO] |  |  |  |  |  +- com.netflix.netflix-commons:netflix-infix:jar:0.3.0:runtime
[INFO] |  |  |  |  |  |  +- commons-jxpath:commons-jxpath:jar:1.3:runtime
[INFO] |  |  |  |  |  |  \- org.antlr:antlr-runtime:jar:3.4:runtime
[INFO] |  |  |  |  |  |     +- org.antlr:stringtemplate:jar:3.2.1:runtime
[INFO] |  |  |  |  |  |     \- antlr:antlr:jar:2.7.7:runtime
[INFO] |  |  |  |  |  \- org.apache.commons:commons-math:jar:2.2:runtime
[INFO] |  |  |  |  +- com.sun.jersey:jersey-client:jar:1.19.1:runtime
[INFO] |  |  |  |  +- com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime
[INFO] |  |  |  |  \- com.google.inject:guice:jar:4.1.0:runtime
[INFO] |  |  |  |     \- aopalliance:aopalliance:jar:1.0:runtime
[INFO] |  |  |  +- com.netflix.eureka:eureka-core:jar:1.6.2:compile
[INFO] |  |  |  |  \- org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1:compile
[INFO] |  |  |  |     \- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] |  |  |  +- com.netflix.archaius:archaius-core:jar:0.7.4:compile
[INFO] |  |  |  |  \- com.google.code.findbugs:jsr305:jar:3.0.1:runtime
[INFO] |  |  |  +- javax.inject:javax.inject:jar:1:compile
[INFO] |  |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.8.8:compile
[INFO] |  |  |  |  +- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.8.8:compile
[INFO] |  |  |  |  +- org.codehaus.woodstox:stax2-api:jar:3.1.4:compile
[INFO] |  |  |  |  \- com.fasterxml.woodstox:woodstox-core:jar:5.0.3:compile
[INFO] |  |  |  \- com.thoughtworks.xstream:xstream:jar:1.4.9:compile
[INFO] |  |  |     +- xmlpull:xmlpull:jar:1.1.3.1:compile
[INFO] |  |  |     \- xpp3:xpp3_min:jar:1.1.4c:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-starter-archaius:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  \- commons-configuration:commons-configuration:jar:1.8:compile
[INFO] |  |  |     \- commons-lang:commons-lang:jar:2.6:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-starter-ribbon:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- com.netflix.ribbon:ribbon:jar:2.2.2:compile
[INFO] |  |  |  |  +- com.netflix.ribbon:ribbon-transport:jar:2.2.2:runtime
[INFO] |  |  |  |  |  +- io.reactivex:rxnetty-contexts:jar:0.4.9:runtime
[INFO] |  |  |  |  |  \- io.reactivex:rxnetty-servo:jar:0.4.9:runtime
[INFO] |  |  |  |  \- io.reactivex:rxnetty:jar:0.4.9:runtime
[INFO] |  |  |  |     +- io.netty:netty-codec-http:jar:4.0.27.Final:runtime
[INFO] |  |  |  |     |  +- io.netty:netty-codec:jar:4.0.27.Final:runtime
[INFO] |  |  |  |     |  \- io.netty:netty-handler:jar:4.0.27.Final:runtime
[INFO] |  |  |  |     \- io.netty:netty-transport-native-epoll:jar:4.0.27.Final:runtime
[INFO] |  |  |  |        +- io.netty:netty-common:jar:4.0.27.Final:runtime
[INFO] |  |  |  |        +- io.netty:netty-buffer:jar:4.0.27.Final:runtime
[INFO] |  |  |  |        \- io.netty:netty-transport:jar:4.0.27.Final:runtime
[INFO] |  |  |  +- com.netflix.ribbon:ribbon-core:jar:2.2.2:compile
[INFO] |  |  |  +- com.netflix.ribbon:ribbon-httpclient:jar:2.2.2:compile
[INFO] |  |  |  |  \- commons-collections:commons-collections:jar:3.2.1:runtime
[INFO] |  |  |  +- com.netflix.ribbon:ribbon-loadbalancer:jar:2.2.2:compile
[INFO] |  |  |  |  \- com.netflix.netflix-commons:netflix-statistics:jar:0.1.1:runtime
[INFO] |  |  |  \- io.reactivex:rxjava:jar:1.1.10:compile
[INFO] |  |  \- com.netflix.ribbon:ribbon-eureka:jar:2.2.2:compile
[INFO] |  +- org.springframework.cloud:spring-cloud-starter-zuul:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-web:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.5.14:compile
[INFO] |  |  |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.5.14:compile
[INFO] |  |  |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.5.14:compile
[INFO] |  |  |  +- org.hibernate:hibernate-validator:jar:5.3.5.Final:compile
[INFO] |  |  |  |  +- javax.validation:validation-api:jar:1.1.0.Final:compile
[INFO] |  |  |  |  \- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile
[INFO] |  |  |  \- org.springframework:spring-webmvc:jar:4.3.8.RELEASE:compile
[INFO] |  |  +- org.springframework.boot:spring-boot-starter-actuator:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  \- org.springframework.boot:spring-boot-actuator:jar:1.5.3.RELEASE:compile
[INFO] |  |  \- com.netflix.zuul:zuul-core:jar:1.3.0:compile
[INFO] |  |     \- com.netflix.servo:servo-core:jar:0.7.2:compile
[INFO] |  +- org.springframework.boot:spring-boot-starter-log4j2:jar:1.5.9.RELEASE:compile
[INFO] |  |  +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.7:compile
[INFO] |  |  +- org.apache.logging.log4j:log4j-api:jar:2.7:compile
[INFO] |  |  \- org.apache.logging.log4j:log4j-core:jar:2.7:compile
[INFO] |  +- org.springframework.cloud:spring-cloud-starter-hystrix-dashboard:jar:1.3.1.RELEASE:compile
[INFO] |  |  \- org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard:jar:1.3.1.RELEASE:compile
[INFO] |  |     +- org.webjars:jquery:jar:2.1.1:compile
[INFO] |  |     \- org.webjars:d3js:jar:3.4.11:compile
[INFO] |  +- org.springframework.cloud:spring-cloud-starter-hystrix:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-netflix-core:jar:1.3.1.RELEASE:compile
[INFO] |  |  |  +- org.springframework.boot:spring-boot:jar:1.5.3.RELEASE:compile
[INFO] |  |  |  \- org.springframework.boot:spring-boot-autoconfigure:jar:1.5.3.RELEASE:compile
[INFO] |  |  +- com.netflix.hystrix:hystrix-core:jar:1.5.12:compile
[INFO] |  |  |  \- org.hdrhistogram:HdrHistogram:jar:2.1.9:compile
[INFO] |  |  +- com.netflix.hystrix:hystrix-metrics-event-stream:jar:1.5.12:compile
[INFO] |  |  |  \- com.netflix.hystrix:hystrix-serialization:jar:1.5.12:runtime
[INFO] |  |  |     \- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.7.5:runtime
[INFO] |  |  \- com.netflix.hystrix:hystrix-javanica:jar:1.5.12:compile
[INFO] |  |     \- org.ow2.asm:asm:jar:5.0.4:runtime
[INFO] |  +- org.springframework.cloud:spring-cloud-starter-turbine:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-starter-eureka:jar:1.3.1.RELEASE:compile
[INFO] |  |  +- org.springframework.cloud:spring-cloud-netflix-turbine:jar:1.3.1.RELEASE:compile
[INFO] |  |  \- com.netflix.turbine:turbine-core:jar:1.0.0:compile
[INFO] |  |     +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.2:compile
[INFO] |  |     \- org.codehaus.jackson:jackson-core-asl:jar:1.9.2:compile
[INFO] |  +- de.ahus1.prometheus.hystrix:prometheus-hystrix:jar:3.4.0:compile
[INFO] |  +- io.springfox:springfox-swagger2:jar:2.5.0:compile
[INFO] |  |  +- io.swagger:swagger-annotations:jar:1.5.9:compile
[INFO] |  |  +- io.swagger:swagger-models:jar:1.5.9:compile
[INFO] |  |  +- io.springfox:springfox-spi:jar:2.5.0:compile
[INFO] |  |  |  \- io.springfox:springfox-core:jar:2.5.0:compile
[INFO] |  |  +- io.springfox:springfox-schema:jar:2.5.0:compile
[INFO] |  |  +- io.springfox:springfox-spring-web:jar:2.5.0:compile
[INFO] |  |  +- com.fasterxml:classmate:jar:1.3.1:compile
[INFO] |  |  +- org.springframework.plugin:spring-plugin-core:jar:1.2.0.RELEASE:compile
[INFO] |  |  +- org.springframework.plugin:spring-plugin-metadata:jar:1.2.0.RELEASE:compile
[INFO] |  |  \- org.mapstruct:mapstruct:jar:1.0.0.Final:compile
[INFO] |  \- io.springfox:springfox-swagger-ui:jar:2.5.0:compile
[INFO] +- com.abb.platform:messaging-runtime-swagger:jar:1.0.0-SNAPSHOT:compile
[INFO] |  +- org.cfg4j:cfg4j-core:jar:4.4.0:compile
[INFO] |  |  +- org.json:json:jar:20160212:compile
[INFO] |  |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile
[INFO] |  |  +- com.github.drapostolos:type-parser:jar:0.5.0:compile
[INFO] |  |  \- org.yaml:snakeyaml:jar:1.17:compile
[INFO] |  +- org.springframework:spring-web:jar:4.3.8.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-aop:jar:4.3.8.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-beans:jar:4.3.8.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-context:jar:4.3.8.RELEASE:compile
[INFO] |  |     \- org.springframework:spring-expression:jar:4.3.8.RELEASE:compile
[INFO] |  \- commons-io:commons-io:jar:2.2:compile
[INFO] +- com.sun.jersey:jersey-servlet:jar:1.11:compile
[INFO] +- com.sun.jersey:jersey-server:jar:1.11:compile
[INFO] |  +- asm:asm:jar:3.1:compile
[INFO] |  \- com.sun.jersey:jersey-core:jar:1.11:compile
[INFO] +- org.mockito:mockito-core:jar:1.10.19:test
[INFO] |  \- org.objenesis:objenesis:jar:2.1:test
[INFO] +- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] +- org.hamcrest:hamcrest-library:jar:1.3:test
[INFO] +- org.springframework:spring-test:jar:4.3.8.RELEASE:test
[INFO] |  \- org.springframework:spring-core:jar:4.3.8.RELEASE:compile
[INFO] |     \- commons-logging:commons-logging:jar:1.2:compile
[INFO] +- org.powermock:powermock-module-junit4:jar:1.6.5:test
[INFO] |  \- org.powermock:powermock-module-junit4-common:jar:1.6.5:test
[INFO] |     +- org.powermock:powermock-core:jar:1.6.5:test
[INFO] |     |  \- org.javassist:javassist:jar:3.20.0-GA:test
[INFO] |     \- org.powermock:powermock-reflect:jar:1.6.5:test
[INFO] +- org.powermock:powermock-api-mockito:jar:1.6.5:test
[INFO] |  \- org.powermock:powermock-api-mockito-common:jar:1.6.5:test
[INFO] |     \- org.powermock:powermock-api-support:jar:1.6.5:test
[INFO] +- junit:junit:jar:4.12:test
[INFO] +- io.prometheus:simpleclient_spring_boot:jar:0.2.0:compile
[INFO] |  +- io.prometheus:simpleclient:jar:0.2.0:compile
[INFO] |  +- io.prometheus:simpleclient_common:jar:0.2.0:compile
[INFO] |  +- io.prometheus:simpleclient_spring_web:jar:0.2.0:compile
[INFO] |  |  \- org.aspectj:aspectjweaver:jar:1.8.6:compile
[INFO] |  \- org.apache.commons:commons-lang3:jar:3.4:compile
[INFO] +- io.prometheus:simpleclient_hotspot:jar:0.2.0:compile
[INFO] +- io.prometheus:simpleclient_servlet:jar:0.2.0:compile
[INFO] +- org.slf4j:slf4j-jdk14:jar:1.7.5:compile
[INFO] +- org.springframework.boot:spring-boot-starter-log4j:jar:1.3.8.RELEASE:compile
[INFO] |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile
[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.5:compile
[INFO] |  \- log4j:log4j:jar:1.2.17:compile
[INFO] +- com.google.code.gson:gson:jar:2.8.5:compile
[INFO] +- com.amazonaws:aws-java-sdk-s3:jar:1.11.370:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.370:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.370:compile
[INFO] |  |  +- org.apache.httpcomponents:httpclient:jar:4.5.5:compile
[INFO] |  |  |  \- org.apache.httpcomponents:httpcore:jar:4.4.9:compile
[INFO] |  |  +- software.amazon.ion:ion-java:jar:1.0.2:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.6.6:compile
[INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.6.7:compile
[INFO] |  |  \- joda-time:joda-time:jar:2.8.1:compile
[INFO] |  \- com.amazonaws:jmespath-java:jar:1.11.370:compile
[INFO] +- com.amazonaws:aws-java-sdk-sts:jar:1.11.370:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.7.5:compile
[INFO] +- org.slf4j:jcl-over-slf4j:jar:1.7.5:compile
[INFO] +- log4j:apache-log4j-extras:jar:1.2.17:compile
[INFO] +- javax.ws.rs:jsr311-api:jar:1.1.1:provided
[INFO] \- org.projectlombok:lombok:jar:1.16.10:compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.168 s
[INFO] Finished at: 2018-10-26T06:36:01+05:30
[INFO] Final Memory: 33M/345M
[INFO]
```   =||= Dalston.SR1 is not the latest release. We have Finchley.SR2 now. =||= after adding static zuul routes, this issue is fixed. :cheers  =||= > after adding static zuul routes, this issue is fixed. :cheers

how did you fixed the issue? I have the same issue with Spring Cloud Greenwich SR1  now =||= The issue was happening if the eureka server url is incorrect - Pls reverify if you have ""/eureka"" at the end - 
http://127.0.0.1:8761/${servletcontextpath}/eureka =||= i am getting  below error when i start my server can someone have look  on  it ?
2019-05-30 16:48:08.123  INFO 20020 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EMPLOYEESERVICE/PW7AM2XDH403587.r1-core.r1.aig.net:EmployeeService:8085: registering service...
2019-05-30 16:48:10.129 ERROR 20020 --- [nfoReplicator-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}

com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:56) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:829) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121) [eureka-client-1.9.8.jar:1.9.8]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_211]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_211]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_211]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_211]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_211]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[na:1.8.0_211]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[na:1.8.0_211]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[na:1.8.0_211]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[na:1.8.0_211]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[na:1.8.0_211]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[na:1.8.0_211]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.8.0_211]
	at java.net.Socket.connect(Socket.java:589) ~[na:1.8.0_211]
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.6.jar:4.5.6]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.6.jar:4.5.6]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	... 29 common frames omitted

2019-05-30 16:48:10.129  WARN 20020 --- [nfoReplicator-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: java.net.ConnectException: Connection refused: connect
2019-05-30 16:48:10.129  WARN 20020 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EMPLOYEESERVICE/PW7AM2XDH403587.r1-core.r1.aig.net:EmployeeService:8085 - registration failed Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1007Can I register new Eureka Server in defaultzones at RunTime?Lucas Henrique Marques CruzLucasHCruz02/16/18, 12:35:18 AM"I already have Eureka Servers UP.

So.. 

Can I start a new Eureka Server and the server self register as an aditional default zone?

```
eureka:
  client:
    serviceUrl:
      defaultZone: serverA, serverB <== Add ServerC in runtime
```"@LucasHCruz eureka *should* be able to handle that change dynamically, however since the configuration is proxied via springboot, I would double check with springboot that these are dynamically updatable. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1008Unavailable-replicasjwarder02/16/18, 12:35:53 AM"I was wondering if someone could shed some light on why my Eureka cluster is showing unavailable-replicas even though it does appear to be replicating. The environment I am running is on a single Windows host using Spring Boot.

**Spring Cloud Version**: Dalston.SR4
**Spring Boot Version**: 1.5.6.RELEASE

application.yml:

```
spring:
  profiles: peer1
server:
  port: 8761
eureka:
  instance:
    hostname: peer1
    appname: peer1
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://peer2:8762/eureka/

---
spring:
  profiles: peer2
server:
  port: 8762
eureka:
  instance:
    hostname: peer2  
    appname: peer2 
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://peer1:8761/eureka/
```
![image](https://user-images.githubusercontent.com/4456200/32230764-c8bc94ca-be4b-11e7-824e-12fa98fda39a.png)

As you can see from this image the registered-replica with peer2 is http://peer1:8761/eureka however this replica is showing as unavailable.

I have also added the following entries into the hosts file:

`	127.0.0.1		peer1 peer2
`

Following another post I debugged com.netflix.eureka.util.StatusUtil.isReplicaAvailable method which returns false as the replica hostname is not the same as the instance hostname. I can't for the life of me work out why this is required? Debug below

![image](https://user-images.githubusercontent.com/4456200/32230978-47268ec4-be4c-11e7-9f3a-7c396cf3cb52.png)

I have spent quite some time going though other peoples suggestions but I'm pretty stuck with it now.""I also encounter this issue, do you have new discovery now? =||= +1 =||= +1 =||= Hi @jwarder this is specific to springboot. Can you see if this documentation offers more clarity: http://cloud.spring.io/spring-cloud-static/spring-cloud.html#_peer_awareness.

Thanks. =||= Hi, I know this issue is already closed but I noticed that the problem you had was actually related to the property `eureka.instance.appname`, and not really related to spring boot. If you want to make the cluster work, you need to use **the same application name in both profiles**. 

I went through a lot of tricky issues as well, so I decided to write [a blog post and a sample project](https://thepracticaldeveloper.com/2018/03/18/spring-boot-service-discovery-eureka) to try to clarify the configuration to others. I hope it helps! =||= Thanks for your reply @mechero. But even with `eureka.instance.appname` set, the problem is still visible in the UI. The replicas do synchronize with eachother but they are not recognized as `available-replicas`. =||= @GhaTMA, I got it working with [a similar scenario](https://github.com/mechero/spring-boot-eureka), and with the replica listed as `available-replicas`, so there might be something else that is wrong in the configuration (or the setup). 

My conclusions about how the logic behind Available/Unavailable replica works:
* The`StatusUtil` class (check [this line](https://github.com/Netflix/eureka/blob/v1.8.6/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil.java#L75)) retrieves all instances that are registered in Eureka **with the same name** as the running instance (which are the running instance and the peer).
* It then picks the one which is located at the specified `serviceUrl`. Since you need to register each instance on the peer, it picks the peer instance. 

You can debug those specific lines and check if you really got two instances or just one, and then check if URLs match or not. 

I also included Docker configuration [in the example](https://github.com/mechero/spring-boot-eureka), so feel free to give it a try since it should work out of the box with the sample code (no need to change hostnames).  =||= @mechero: Thanks for the extensive explanation! 
I will look deeper into this. =||= Had the same issue as reported by OP while running 3 Eureka's in a cluster via docker-compose. Issue was resolved through setting `eureka.instance.preferIpAddress: false.`

Perhaps this relates to the `eureka.client.serviceUrl.defaultZone ` containing an explicit host name (no ip address, but explictly eureka-a, eureka-b) in my docker-compose configuration: for example `eureka.client.serviceUrl.defaultZone: http://eureka-a:18671/eureka,http://eureka-b:18672/eureka` passed on as environment vars to the Eureka instance ('eureka-c' in this case). =||= ```yaml
eureka.instance.hostname=${spring.cloud.client.hostname} #using hostname
eureka.instance.prefer-ip-address=false
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1009Add default impl to two interface methods introduced recentlyDavid Liuqiangdavidliu11/01/17, 06:27:02 PMNaNNaNAdd default impl to two interface methods introduced recentlyDavid Liuqiangdavidliu11/01/17, 06:27:02 PMNaNNaNDavid Liu11/01/17, 06:14:42 PMAdd default impl to two interface methods introduced recently.1
1010catch potential exceptions around EurekaEventListener notifyDavid Liuqiangdavidliu11/08/17, 01:00:39 AMNaNNaNcatch potential exceptions around EurekaEventListener notifyDavid Liuqiangdavidliu11/08/17, 01:00:39 AMNaNNaNDavid Liu11/07/17, 11:40:41 PMbetter log msg1
1011Conflicting property name definitions: 'lastRenewalTimestamp'karlwanghn02/16/18, 12:22:09 AM"when i deploy a war eureka app to weblogic,problems happend.

Caused by: java.lang.IllegalStateException: Conflicting property name definitions: 'lastRenewalTimestamp' (for [method com.netflix.appinfo.LeaseInfo#getRenewalTimestamp(0 params)]) vs 'renewalTimestamp' (for [parameter #4, annotations: {interface com.fasterxml.jackson.annotation.JsonProperty=@com.fasterxml.jackson.annotation.JsonProperty(value=renewalTimestamp, required=false)}])
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findRenamed(POJOPropertyBuilder.java:694) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findNewName(POJOPropertyBuilder.java:673) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameProperties(POJOPropertiesCollector.java:682) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collect(POJOPropertiesCollector.java:242) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectProperties(BasicClassIntrospector.java:142) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(BasicClassIntrospector.java:68) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(BasicClassIntrospector.java:11) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.SerializationConfig.introspect(SerializationConfig.java:530) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:133) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1077) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1037) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(SerializerProvider.java:445) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(SerializerProvider.java:599) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:93) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:1837) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	at com.fasterxml.jackson.core.base.GeneratorBase.writeObject(GeneratorBase.java:261) ~[com.fasterxml.jackson.core.jackson-core.jar:2.3.2]
	at com.fasterxml.jackson.core.JsonGenerator.writeObjectField(JsonGenerator.java:1312) ~[com.fasterxml.jackson.core.jackson-core.jar:2.3.2]
	at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer.serialize(EurekaJacksonCodec.java:358) ~[eureka-client-1.6.2.jar:1.6.2]
	at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoSerializer.serialize(EurekaJacksonCodec.java:316) ~[eureka-client-1.6.2.jar:1.6.2]
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:237) ~[com.fasterxml.jackson.core.jackson-databind.jar:2.3.2]
	... 48 common frames omitted"Hi @karlwanghn you might need to update to a version of jackson that is greater than 2.3.2. Eureka currently comes with a jackson dependency of 2.8.7. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1012retryableClientQuarantineRefreshPercentage parameter should increase the verificationsagaholy1234512/12/17, 05:04:51 AM"I was studying eureka client registered to eureka server, that there is a place in the source code can be improved。
An eureka client looks for an eureka server by setting the eureka.client.service-url.defaultZone band,In my case, my properties file reads as follows:

```groovy
server.port=8081
eureka.client.service-url.defaultZone=http://localhost:8082,http://localhost:8083,http://localhost:8084,http://localhost:8085
eureka.client.transport.retryableClientQuarantineRefreshPercentage=10
```

I know by learning the source, when eureka client starts, it will register its own information to eureka server,Specific source code is as follows RetryableEurekaHttpClient.java
```java
@Override
protected <R> EurekaHttpResponse<R> execute(RequestExecutor<R> requestExecutor) {
    List<EurekaEndpoint> candidateHosts = null;
    int endpointIdx = 0;
    for (int retry = 0; retry < numberOfRetries; retry++) {
        EurekaHttpClient currentHttpClient = delegate.get();
        EurekaEndpoint currentEndpoint = null;
        if (currentHttpClient == null) {
            if (candidateHosts == null) {
                candidateHosts = getHostCandidates();
                if (candidateHosts.isEmpty()) {
                    throw new TransportException(""There is no known eureka server; cluster server list is empty"");
                }
            }
            if (endpointIdx >= candidateHosts.size()) {
                throw new TransportException(""Cannot execute request on any known server"");
            }

            currentEndpoint = candidateHosts.get(endpointIdx++);
            currentHttpClient = clientFactory.newClient(currentEndpoint);
        }

        try {
            EurekaHttpResponse<R> response = requestExecutor.execute(currentHttpClient);
            if (serverStatusEvaluator.accept(response.getStatusCode(), requestExecutor.getRequestType())) {
                delegate.set(currentHttpClient);
                if (retry > 0) {
                    logger.info(""Request execution succeeded on retry #{}"", retry);
                }
                return response;
            }
            logger.warn(""Request execution failure with status code {}; retrying on another server if available"", response.getStatusCode());
        } catch (Exception e) {
            logger.warn(""Request execution failed with message: {}"", e.getMessage());  // just log message as the underlying client should log the stacktrace
        }

        // Connection error or 5xx from the server that must be retried on another server
        delegate.compareAndSet(currentHttpClient, null);
        if (currentEndpoint != null) {
            quarantineSet.add(currentEndpoint);
        }
    }
    throw new TransportException(""Retry limit reached; giving up on completing the request"");
}
```
The `getHostCandidates ()` method in `RetryableEurekaHttpClient.java` is getting the eureka server address to connect to this time
`transportConfig.getRetryableClientQuarantineRefreshPercentage()`This parameter is configurable, as I did with the properties above (configured in the example above is 10)

Then the problem is coming：

The first candidateHosts size is 3, the content is

//localhost:8082,http://localhost:8083,http://localhost:8084

Assuming all three eureka server services are not available.

The second time through the background tasks to re-enter the methodquarantineSet size is 3 and candidateHosts size is 1, the content is//localhost:8085.

Assuming // localhost: 8085 is not available at this time.

Then the third time according to the original logic should be (quarantineSet.size ()> = threshold) logic, but as eureka.client.transport.retryableClientQuarantineRefreshPercentage = 10 this parameter is set to a large, so this logic is not executed, this time candidateHosts The value of 0, since then eureka server is good, the eureka client will not be registered.

My solution is to modify the`getHostCandidates()` method：
```java
private List<EurekaEndpoint> getHostCandidates() {
    List<EurekaEndpoint> candidateHosts = clusterResolver.getClusterEndpoints();
    quarantineSet.retainAll(candidateHosts);

    // If enough hosts are bad, we have no choice but start over again
    int threshold = (int) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());
    
    
    /*********Where I improve start************/
    if (threshold > candidateHosts.size()) {
  	threshold = candidateHosts.size();
    }
    /**********Where I improve end**********/

    if (quarantineSet.isEmpty()) {
        // no-op
    } else if (quarantineSet.size() >= threshold) {
        logger.debug(""Clearing quarantined list of size {}"", quarantineSet.size());
        quarantineSet.clear();
    } else {
        List<EurekaEndpoint> remainingHosts = new ArrayList<>(candidateHosts.size());
        for (EurekaEndpoint endpoint : candidateHosts) {
            if (!quarantineSet.contains(endpoint)) {
                remainingHosts.add(endpoint);
            }
        }
        candidateHosts = remainingHosts;
    }

    return candidateHosts;
}
```
The above is my confusion and given the solution, do you think so. If you also agree, I would like to submit a pr for improvement, finally thank you for your answer : ) "NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1013The getHostCandidates method improvessagaholy1234511/28/17, 10:09:49 PM"Prevent retryableClientQuarantineRefreshPercentage from being greater than 1, causing Eureka Client to not register with Eureka Server。

Corresponding issues for https://github.com/Netflix/eureka/issues/1012""Thanks @holy12345 . =||= @qiangdavidliu Thank you, may I ask which version of eureka can see this fix. Best wishes！ =||= Hi @holy12345 we are probably going to look at some of the other outstanding PRs before a new release. This PR only adds a guard against misconfiguration (i.e. when the config value is specified incorrectly as > 1), and can be addressed for now by appropriately setting the config. Is there an urgent need for a release? Thanks. =||= @qiangdavidliu Thank you very much for your reply : )
Not very urgent, but I'm worried that the user does not know the meaning of this parameter (the official document did not say.) If the value is greater than 1 may lead to some problems with the production.
In addition, I submitted two PRs(#1021 #1020), please check, if there is no problem, hope to merge it. 
Finally, I would like to ask you, can you give me your email address？
best wishes:) =||= "The getHostCandidates method improvessagaholy1234511/28/17, 10:09:49 PM"Prevent retryableClientQuarantineRefreshPercentage from being greater than 1, causing Eureka Client to not register with Eureka Server。

Corresponding issues for https://github.com/Netflix/eureka/issues/1012"NaNsaga11/15/17, 02:35:57 AM"The getHostCandidates method improves

Prevent retryableClientQuarantineRefreshPercentage from being greater than 1, causing Eureka Client to not register with Eureka Server。

Corresponding issues for https://github.com/Netflix/eureka/issues/1012"1
1014NullPointerException Discovery WorkerThread Error 100% CPUHarmoney-RogerParkinson02/16/18, 12:22:36 AM"Running eureka 1.4.6 on an AWS m3.xlarge. It is packaged into a docker image and run with ECS, possibly not relevant though. Every few hours is throws this error:

>  java.lang.NullPointerException: null
> at com.netflix.eureka.util.batcher.TaskExecutors$TaskExecutorMetrics.registerExpiryTimes(TaskExecutors.java:135)
> at com.netflix.eureka.util.batcher.TaskExecutors$BatchWorkerRunnable.run(TaskExecutors.java:184)
> at java.lang.Thread.run(Thread.java:748)
> WARN  c.n.e.util.batcher.TaskExecutors Discovery WorkerThread error

At which point the CPU usage of that machine takes a step up from about 2.5% to 10% or 25%. A few hours later (the interval seems to be random) it does it again and eventually is running at 100%. At that point we start seeing timeouts in our logs, heartbeat requests timing out.

We run two Eureka instances, and they each have a dedicated server, so no other services are running on those servers. The other services (on other servers) are reasonably happy, they get the odd timeout on their heartbeats but they continue to handle requests and route them etc, which is pretty cool, but the errors and CPU saturation on the Eureka servers is a worry.

It looks like there's a loop in Eureka that, once it hits the NPE keeps looping in a thread, hence the incremental jumps in CPU. Has anyone seen this before? I searched, seems to be not a known problem. Thanks for any help.""@Harmoney-RogerParkinson apologies for taking so long to take a look at this, I have submitted a PR for the fix: #1033 .

From the stack trace I suspect is is some race condition to do with checking the isShutdown flag that results in a null `holder` which then NPEs when metrics are computed from it. =||= Merged and will be released in the next release (should be soon) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1015Updating jersey-apache-client4 ameniammy199906/11/19, 10:20:48 PM"Hello, 
I have a vulnerability  jersey-apache-client4-1.19.1.jar , CVE-2006-0550 , Severity: High( using dependency check ) 

> `+- org.springframework.cloud:spring-cloud-starter-eureka:jar:1.3.0.RELEASE:compile
[INFO] |  +- org.springframework.cloud:spring-cloud-netflix-eureka-client:jar:1.3.0.RELEASE:compile
[INFO] |  +- com.netflix.eureka:eureka-client:jar:1.6.2:compile
[INFO] |  |  +- org.codehaus.jettison:jettison:jar:1.3.7:runtime
[INFO] |  |  |  \- stax:stax-api:jar:1.0.1:runtime
[INFO] |  |  +- com.netflix.netflix-commons:netflix-eventbus:jar:0.3.0:runtime
[INFO] |  |  |  +- com.netflix.netflix-commons:netflix-infix:jar:0.3.0:runtime
[INFO] |  |  |  |  +- commons-jxpath:commons-jxpath:jar:1.3:runtime
[INFO] |  |  |  |  \- org.antlr:antlr-runtime:jar:3.4:runtime
[INFO] |  |  |  |     +- org.antlr:stringtemplate:jar:3.2.1:runtime
[INFO] |  |  |  |     \- antlr:antlr:jar:2.7.7:runtime
[INFO] |  |  |  \- org.apache.commons:commons-math:jar:2.2:runtime
[INFO] |  |  +- javax.ws.rs:jsr311-api:jar:1.1.1:runtime
[INFO] |  |  +- com.sun.jersey:jersey-core:jar:1.19.1:runtime
[INFO] |  |  +- com.sun.jersey:jersey-client:jar:1.19.1:runtime
[INFO] |  |  +- com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime
[INFO] |  |  +- org.apache.httpcomponents:httpclient:jar:4.5.3:runtime
[INFO] |  |  |  \- org.apache.httpcomponents:httpcore:jar:4.4.6:runtime
[INFO] |  |  \- com.google.inject:guice:jar:4.1.0:runtime


jersey-apache-client4 is a dependency of com.netflix.eureka:eureka-client. Any upgrades to that library??""Hi I am not able to see any relation to jersey-apache-client4 from reading the CVE documentation:
https://nvd.nist.gov/vuln/detail/CVE-2006-0550. Can you please elaborate? Thanks. =||= Hi David, I think the person above is referring to the fact Eureka uses jersey-apache-client4 v1.19.1 which is a high severity vulnerability according to NVD (see usages https://mvnrepository.com/artifact/com.sun.jersey.contribs/jersey-apache-client4/1.19.1/usages). Are there any plans to update the jersey-apache-client4 version in a later release of Eureka? If not, is it compatible with later versions of jersey?

 =||= This is a 2006 (!) report and it's not even clear if it's applicable (Oracle allegedly patched it), `v1.x` tops at `1.19.4 ` which is no different in this regard, all things considered I don't believe there's anything to do. Having said that, we would not be opposed to accepting a PR upgrading to a different major version of the client, but please open a separate issue to discuss the strategy should you decide to contribute.

Hope this makes sense. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1016euraka-server dashboard not workingxuzhijingjimxu198204/23/18, 11:30:58 PM"
<com.netflix.eureka.util.StatusInfo>
  <generalStats>
    <environment>test</environment>
    <num-of-cpus>4</num-of-cpus>
    <total-avail-memory>368mb</total-avail-memory>
    <current-memory-usage>203mb (55%)</current-memory-usage>
    <server-uptime>00:04</server-uptime>
  </generalStats>
  <applicationStats>
    <registered-replicas></registered-replicas>
    <available-replicas></available-replicas>
    <unavailable-replicas></unavailable-replicas>
  </applicationStats>
  <instanceInfo>
    <instanceId>XUZHIJING:eureka-server:8761</instanceId>
    <hostName>localhost</hostName>
    <app>EUREKA-SERVER</app>
    <ipAddr>10.118.86.189</ipAddr>
    <status>UP</status>
    <overriddenstatus>UNKNOWN</overriddenstatus>
    <port enabled=""true"">8761</port>
    <securePort enabled=""false"">443</securePort>
    <countryId>1</countryId>
    <dataCenterInfo class=""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"">
      <name>MyOwn</name>
    </dataCenterInfo>
    <leaseInfo>
      <renewalIntervalInSecs>30</renewalIntervalInSecs>
      <durationInSecs>90</durationInSecs>
      <registrationTimestamp>0</registrationTimestamp>
      <lastRenewalTimestamp>0</lastRenewalTimestamp>
      <evictionTimestamp>0</evictionTimestamp>
      <serviceUpTimestamp>0</serviceUpTimestamp>
    </leaseInfo>
    <metadata class=""java.util.Collections$EmptyMap""/>
    <homePageUrl>http://localhost:8761/</homePageUrl>
    <statusPageUrl>http://localhost:8761/info</statusPageUrl>
    <healthCheckUrl>http://localhost:8761/health</healthCheckUrl>
    <vipAddress>eureka-server</vipAddress>
    <secureVipAddress>eureka-server</secureVipAddress>
    <isCoordinatingDiscoveryServer>false</isCoordinatingDiscoveryServer>
    <lastUpdatedTimestamp>1511512774606</lastUpdatedTimestamp>
    <lastDirtyTimestamp>1511512775037</lastDirtyTimestamp>
  </instanceInfo>
</com.netflix.eureka.util.StatusInfo>"Hi, can you please add some additional details to describe your issue? Thanks =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1017Increase the catch exception codesagaholy1234511/28/17, 10:12:52 PMIncrease the catch exception code to ensure that when the exception occurs can be friendly to return to the client side@qiangdavidliu Hello, hope to pass this pr, the best wishes =||= Thanks @holy12345  =||= Increase the catch exception codesagaholy1234511/28/17, 10:12:52 PMIncrease the catch exception code to ensure that when the exception occurs can be friendly to return to the client sideNaNsaga11/25/17, 03:25:27 AM"Increase the catch exception code

Increase the catch exception code to ensure that when the exception occurs can be friendly to return to the client side"1
1019Confused about the ReadWriteLock within AbstractInstanceRegistry干货满满张哈希HashZhang11/28/17, 04:23:45 AM"Why Read lock is used in update operations (such as register, renew and etc.) while the write lock is used in read operations(such as getDelta, getApps)

So confused about it and the write lock may cause the efficiency problem"I got it.TKS~ =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1020Modify updateRenewalThreshold methodsagaholy1234504/26/18, 07:14:06 AM"Hello, According to my understanding eureka deletes the client that did not send the heartbeat  by `AbstractInstanceRegistry#evict () `method.However, `numberOfRenewsPerMinThreshold` and `expectedNumberOfRenewsPerMin` are not updated immediately. Update these two parameters is carried out in a regular task. The specific code of this task is as follows：
` PeerAwareInstanceRegistryImpl#updateRenewalThreshold()` 

```
    private void updateRenewalThreshold() {
        try {
            Applications apps = eurekaClient.getApplications();
            int count = 0;
            for (Application app : apps.getRegisteredApplications()) {
                for (InstanceInfo instance : app.getInstances()) {
                    if (this.isRegisterable(instance)) {
                        ++count;
                    }
                }
            }
            synchronized (lock) {
                // Update threshold only if the threshold is greater than the
                // current expected threshold of if the self preservation is disabled.
                if ((count * 2) > (serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold)
                        || (!this.isSelfPreservationModeEnabled())) {
                    this.expectedNumberOfRenewsPerMin = count * 2;
                    this.numberOfRenewsPerMinThreshold = (int) ((count * 2) * serverConfig.getRenewalPercentThreshold());
                }
            }
            logger.info(""Current renewal threshold is : {}"", numberOfRenewsPerMinThreshold);
        } catch (Throwable e) {
            logger.error(""Cannot update renewal threshold"", e);
        }
    }
```

According to my understanding, the logic of this method is this:
First, get the number of instances registered in Eureka Server. 
Then make a decision to decide whether to update `numberOfRenewsPerMinThreshold` and `expectedNumberOfRenewsPerMin`.
Then the problem is coming:
The first if expression` (count * 2)> (serverConfig.getRenewalPercentThreshold () * numberOfRenewsPerMinThreshold)` I think it is not accurate。
Because I understand every 15 minutes will recalculate the threshold, if at this time the number of registered instances did not reduce to 85% of the last time registered instance, it will recalculate。because `numberOfRenewsPerMinThreshold = expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold ()` so the above judgment is equivalent to ` (count * 2)> (serverConfig.getRenewalPercentThreshold () * serverConfig.getRenewalPercentThreshold () * expectedNumberOfRenewsPerMin)`this is not right。
should be `serverConfig.getRenewalPercentThreshold () * expectedNumberOfRenewsPerMin`，so I submitted a PR, hoping to solve this problem. Maybe my understanding is wrong, I hope you can answer me. Thank you very much, best wishes""@qiangdavidliu Hello, look forward to your reply, thank you very much, best wishes！ =||= @qiangdavidliu Hello, can you review this PR? Thank you, best wishes ：) =||= @qiangdavidliu  ping... =||= @holy12345 thanks for the PR, you logic seems sound and there does seem to be an error in the code. Before I merge in your fix however, I'd appreciate it if you added a unit test that assert and validate the expected behaviour? Thanks. =||= Hello @qiangdavidliu 
Thank you for your answer, probably because my English is not very good and did not express clearly. Please forgive me if you have caused any confusion.
Now I re-answer the following(Reference eureka official document sentence):
`If any time, the renewals falls below the percent configured for that value (below 85% within 15 mins), the server stops expiring instances to protect the current instance registry information.`
This sentence has two main points:

- Whether to open the self-preservation mechanism (If not then in any case be updated)

- Currently, the number of Eureka Clients with normal heartbeat accounts for more than 85% of Eureka Server's total storage

The code to accomplish the above two key points is as follows:
```
         if ((count * 2) > (serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold)
                    || (!this.isSelfPreservationModeEnabled())) {
                this.expectedNumberOfRenewsPerMin = count * 2;
                this.numberOfRenewsPerMinThreshold = (int) ((count * 2) * serverConfig.getRenewalPercentThreshold());
        }
```
My understanding is as follows:
If you turn off self-preservation, these two parameters are updated under any circumstances.
If we open the self-preservation, then only if  the number of Eureka Clients with normal heartbeat accounts for more than 85% of Eureka Server's total storage will be updated.
What I think is the problem is the formula in the code `(count * 2) > (serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold)`
In my opinion it should be  `(count * 2) > (serverConfig.getRenewalPercentThreshold() * expectedNumberOfRenewsPerMin)`

Maybe my understanding is not correct, I hope you can help me. Any one of your answers are a great encouragement to me, thanks again
 =||= Hi @holy12345 I do think your logic sounds correct. I would however appreciate if you added some unit tests in your PR to explicitly check for and verify the appropriate behaviour with the change. Thanks. =||= Hi @qiangdavidliu 
Thank you for your reply, thank you very much.
I will try to validate my logic by adding test code because the update is done in a thread and I currently have no idea how to test it(These days I have been looking for ways  but unfortunately did not find) .but do not worry I'm trying to figure out how to solve this problem =||= Hi @qiangdavidliu 
First of all, I'm sorry. I've been very busy before and I haven't updated this question.I think I'll close it f and when I think of a solution, I'll reopen it.
Thanks again : ) =||= @holy12345 no worries, thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1021Use a more elegant way to judgesagaholy1234512/18/17, 06:32:46 PMUse `list.isEmpty ()` instead of `list.size>0` to make it more elegant.Hi, we'd like to move away from using author tags as these can get confusing w.r.t. maintenance down the track. Otherwise, the PR looks good. Thanks. =||= @qiangdavidliu Okay, I removed it as you suggested. I apologize for the troubles caused to you. Thank you =||= No problem, thanks for the PR. =||= Use a more elegant way to judgesagaholy1234512/18/17, 06:32:46 PMUse `list.isEmpty ()` instead of `list.size>0` to make it more elegant.NaNsaga12/13/17, 07:07:42 AM"Judge more elegant

Remove the author's label"1
1022Set up xstream security frameworkDavid Liuqiangdavidliu12/12/17, 09:52:55 PMNaNNaNSet up xstream security frameworkDavid Liuqiangdavidliu12/12/17, 09:52:55 PMNaNNaNDavid Liu12/07/17, 10:21:51 PMSet up stream security framework1
1023Avoid scheduling when DiscoveryClient.shutdown called (fix for #973)Chase Diemabracadv812/13/17, 12:41:25 AM"Based off code cleanup comments for pull #974, this should fix #973.

`awaitTermination` should block until the  DOWN replication thread is completed before finishing shutdown/registration.  This should prevent race conditions between registration:DOWN and de-register."@abracadv8 thanks. Looks good. =||= Avoid scheduling when DiscoveryClient.shutdown called (fix for #973)Chase Diemabracadv812/13/17, 12:41:25 AM"Based off code cleanup comments for pull #974, this should fix #973.

`awaitTermination` should block until the  DOWN replication thread is completed before finishing shutdown/registration.  This should prevent race conditions between registration:DOWN and de-register."NaNcdiem4558k12/12/17, 11:37:09 PMcode cleanup from PR #9741
1024Eureka : Connection Refused when we set eureka.client.register-with-eureka=truebasiths02/15/18, 09:11:53 PM"Hi, 

I need to setup the Eureka with high availability (2 nodes). Can you please have a look at the below configuration and let me know if this enables the replication and high availability for eureka.

eureka-application.properties from node1:

spring.profiles=hostname01.corp.com
server.address=hostname01.corp.com

eureka.environment=test
eureka.datacenter=dc
eureka.name=eureka
server.contextPath=/eureka
spring.application.name=eureka-service

eureka.server.registry-sync-retry-wait-ms=500
eureka.server.registry-sync-retries=3
eureka.server.a-sgcache-expiry-timeout-ms=60000
eureka.server.eviction-interval-timer-in-ms=30000
eureka.server.peer-eureka-nodes-update-interval-ms=15000
eureka.server.renewal-threshold-update-interval-ms=300000
eureka.server.enableSelfPreservation=true

eureka.client.healthcheck.enabled=true
eureka.client.prefer-same-zone-eureka=true
eureka.client.serviceUrl.defaultZone=http://hostname01.corp.com/eureka/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

endpoints.shutdown.sensitive=false
endpoints.shutdown.enabled=true

eureka.instance.appname=${spring.application.name}
eureka.instance.preferIpAddress=false
endpoints.health.sensitive=false
spring.cloud.config.discovery.enabled=true

eureka-application.properties from node2:

spring.profiles=hostname02.corp.com
server.address=hostname02.corp.com

eureka.environment=test
eureka.datacenter=dc
eureka.name=eureka
server.contextPath=/eureka
spring.application.name=eureka-service

eureka.server.registry-sync-retry-wait-ms=500
eureka.server.registry-sync-retries=3
eureka.server.a-sgcache-expiry-timeout-ms=60000
eureka.server.eviction-interval-timer-in-ms=30000
eureka.server.peer-eureka-nodes-update-interval-ms=15000
eureka.server.renewal-threshold-update-interval-ms=300000
eureka.server.enableSelfPreservation=true

eureka.client.healthcheck.enabled=true
eureka.client.prefer-same-zone-eureka=true
eureka.client.serviceUrl.defaultZone=http://hostname02.corp.com/eureka/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

endpoints.shutdown.sensitive=false
endpoints.shutdown.enabled=true

eureka.instance.appname=${spring.application.name}
eureka.instance.preferIpAddress=false
endpoints.health.sensitive=false
spring.cloud.config.discovery.enabled=true


Questions : 
i) If I use eureka.client.serviceUrl.defaultZone=http://hostname02.corp.com/eureka/eureka/ in node1, while starting the instance, its giving connection refused then connecting it after some time. Can we fix this behavior.

ii) If I use eureka.instance.hostName=hostname01.corp.com parameter in node1, the DS replication is not working.

iii) The eureka portal is not displaying the available-replicas. Because Instances currently registered with Eureka"" is registering the client as ""hostname02"" instead of ""hostname02.corp.com"". Is there a option to fix this.

iv) If I set eureka.client.fetch-registry=true, during the startup its throwing the connection refused exception.

2017-12-15 22:52:12.254  WARN 27995 --- [           main] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failure
2017-12-15 22:52:12.256 ERROR 27995 --- [           main] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EUREKA-SERVICE/hostname01:eureka-service:10080 - was unable to refresh its cache! status = Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1030) [eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:944) [eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:444) [eureka-client-1.4.12.jar!/:1.4.12]
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:304) [eureka-client-1.4.12.jar!/:1.4.12]


Can you please help me to fix this issues.""Hi @basiths please check to see if this document help to address your questions:
http://cloud.spring.io/spring-cloud-static/spring-cloud.html#_peer_awareness

Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1025com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate() thow RejectedExecutionExceptionriyueshiwang01/30/18, 06:50:20 PM"hi, i am using `com.netflix.eureka:eureka-client:1.6.2.jar` within spring cloud.  when the method `org.springframework.cloud.context.scope.refresh.RefreshScope.refreshAll()` was invoked, the following exception occurred.
 i guessed that the method `com.netflix.discovery.InstanceInfoReplicator.start(int initialDelayMs)` had not been invoked before the method `com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate()` did.
was it all right？

`2017-12-19 16:08:42.090 ERROR [lego-config,,,] 16808 --- [Apollo-Config-1] c.c.f.apollo.internals.AbstractConfig    : Failed to invoke config change listener com.iqiyi.solar.config.client.CloudConfig$1

java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@2bc7b30e rejected from java.util.concurrent.ScheduledThreadPoolExecutor@31c8bd8b[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 4]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:326)
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:533)
	at java.util.concurrent.ScheduledThreadPoolExecutor.submit(ScheduledThreadPoolExecutor.java:632)
	at com.netflix.discovery.InstanceInfoReplicator.onDemandUpdate(InstanceInfoReplicator.java:77)
	at com.netflix.discovery.DiscoveryClient.registerHealthCheck(DiscoveryClient.java:618)
	at com.netflix.discovery.DiscoveryClient$$FastClassBySpringCGLIB$$a84c8cb4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.cloud.context.config.StandardBeanLifecycleDecorator$2.invoke(StandardBeanLifecycleDecorator.java:85)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:673)
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient$$EnhancerBySpringCGLIB$$903db4cd.registerHealthCheck(<generated>)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:49)
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:73)
	at org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher.onApplicationEvent(EurekaDiscoveryClientConfiguration.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:256)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:177)
	at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:140)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)
	at org.springframework.cloud.context.scope.refresh.RefreshScope.refreshAll(RefreshScope.java:146)
	at com.iqiyi.lego.config.IqiyiConfigConfiguration.onApplicationConfigChange(IqiyiConfigConfiguration.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216)
	at com.iqiyi.solar.config.client.spring.annotation.CloudConfigAnnotationProcessor$1.onChange(CloudConfigAnnotationProcessor.java:70)
	at com.iqiyi.solar.config.client.CloudConfig$1.onChange(CloudConfig.java:202)
	at com.ctrip.framework.apollo.internals.AbstractConfig$2.run(AbstractConfig.java:404)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)`"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1026Get dataCenterInfo when need it && fix typoPanmaxPanmax01/30/18, 06:51:43 PMNaNThanks for the contribution @Panmax  =||= Get dataCenterInfo when need it && fix typoPanmaxPanmax01/30/18, 06:51:43 PMNaNNaNPanmax01/12/18, 09:39:55 AMget dataCenterInfo when need it1
1027Clent Event listener from eureka server.Anton Mushinex0002/16/18, 12:55:00 PM"Hi.
I have issue: 
On eureka client site I have logic is related with some services. This logic have same actions for different services - get url to service from eureka and call rest endpoint a service.

And I would want to know about other new connected service to eureka server via events is coming from server. Is it possible?""Hi @ex00 the java eureka client provides an event interface `eurekaClient.registerEventListener` that allows you to listen to eureka update events. Under the hood, the client/server communication is still poll based however. =||= Hi @qiangdavidliu 
Thanks for you reply! Do you talk about EurekaEvent?
I woluld like register listener for events about register new application in server. Wich implementation of EurekaEvent I could use for it?

 =||= Hi, you might want to take a look at [CacheRefreshedEvent](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/CacheRefreshedEvent.java), which is generated each time the client receives an update. If you want to look into specifics however, you'll have to implement that logic when the event is triggered. =||= I changed logic of my application and this issue is not actual already. Thaks for help! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1029Verify if scheduler is active before submit new taskTomasz Juchniewicztjuchniewicz01/30/18, 06:50:20 PMFixes gh-1025.Looks good, thanks for the contribution @tjuchniewicz  =||= Verify if scheduler is active before submit new taskTomasz Juchniewicztjuchniewicz01/30/18, 06:50:20 PMFixes gh-1025.NaNtojuchni01/22/18, 11:39:29 AM"Verify is scheduler is active before submit

Fixes gh-1025."1
1030Add an EurekaInstanceInfoFactory abstraction to the creation of the initial internal InstanceInfoDavid Liuqiangdavidliu02/08/18, 08:43:05 PMNaN"Would you be willing to add support for the non-DI `initComponent` flows as well?

https://github.com/Netflix/eureka/blob/v1.8.6/eureka-client/src/main/java/com/netflix/discovery/DiscoveryManager.java#L77 =||= @mattnelson good catch, let me do that. =||= @mattnelson this work was for some internal refactoring that we needed. However after doing some testing the PR as it stands does not quite work for us and I will probably close this. Is this something you are interested in, or something you need? =||= @qiangdavidliu I don't need it, only wanted to make sure that the other init flows were covered. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1031prevent replication flood caused by socket read time out leads to some node CPU 100%skyesx02/12/18, 08:53:18 PM"when the instance become more then 3k,the batch replicated operation become easier to timeout.
because the replication request sender will retry the replication soon,it leads to a flood.
When it's happend,it appears to some eureka node ocupied 100% CPU and stucked.
This commit will help reduce the sympton,and write a clear log message to help debug.

By the way , i suggest to allow user to config the Congestion and TransientError retry delay time"@skyesx thanks for the PR, this looks quite reasonable. Out of curiosity is this something that you have ran into in a deployed setup? =||= It didn't happen in our product environment.But it had  happen in our stress and develop environment.It's going to happen when 2K or more instances are registed in stress environment.In our develop environment , it happened once,  with nearly 1k instances, it last for a period of time, and then it recovered automatically . =||= Thanks @skyesx  =||= prevent replication flood caused by socket read time out leads to some node CPU 100%skyesx02/12/18, 08:53:18 PM"when the instance become more then 3k,the batch replicated operation become easier to timeout.
because the replication request sender will retry the replication soon,it leads to a flood.
When it's happend,it appears to some eureka node ocupied 100% CPU and stucked.
This commit will help reduce the sympton,and write a clear log message to help debug.

By the way , i suggest to allow user to config the Congestion and TransientError retry delay time"NaNskyesx02/10/18, 02:48:06 AMcorrect counter for read time out1
1032Broken link to 'EurekaServerConfig' section from 'Configuring Eureka' Wiki sectionVictor M.Victoremepunto02/15/18, 09:04:36 PM"The link to EurekaServerConfig javadoc is broken, drops 404 => http://netflix.github.io/eureka/javadoc/eureka-core/com/netflix/eureka/EurekaServerConfig.html

The source link is in the main page of the section 'Configuring Eureka' of the Wiki.
 
I think is the same issue described in the already closed #775 "Hi @Victoremepunto we don't maintain the javadoc html for eureka at that url any more unfortunately. The javadocs are still present on the interface and I have updated the link from the wiki page to point to that. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1033fix potential NPE for issue #1014David Liuqiangdavidliu02/15/18, 11:34:33 PMfix for #1014 NaNfix potential NPE for issue #1014David Liuqiangdavidliu02/15/18, 11:34:33 PMfix for #1014 NaNDavid Liu02/15/18, 09:57:59 PMfix potential NPE for issue #10141
1034probation list or vetting time for registering instancesSyCode704/23/18, 11:30:02 PM"Hi, I searched without success for a feature that permits Eureka server to add an instance to temporary network until the end of some dort of check e.g verification test. The idea is not to reject the request, assign the instance temporary metadata e.g. port, host that allows for inspection/verification while not yet registered. Instance may be registered if it passes those test and assigned to correct/productive metadata. 

I am experimenting with the setting the instance status as `STARTING `. for example 
`info.setStatus(com.netflix.appinfo.InstanceInfo.InstanceStatus.STARTING);`
Will there be a better solution ?"@SyCode7 I'm not sure I 100% understand your request, but I don't think we have anything in mind to support your exact request. What we do with our server framework internally, is that all applications start up in the STARTING state, and once ready, their UP/DOWN status is tied to the application's healthcheck state. This should offer similar functionality to what you request I think? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1035gradle build error ,nebula.netflixoss errorlovelivestyle110205/30/19, 11:12:11 PM"I use Gradle to build the Eureka but failed, when I download the source.
org.gradle.api.ProjectConfigurationException: A problem occurred configuring root project 'eureka'.
	at org.gradle.configuration.project.LifecycleProjectEvaluator.addConfigurationFailure(LifecycleProjectEvaluator.java:79)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:57)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:540)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:93)
	at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:42)
	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:35)
	at org.gradle.initialization.DefaultGradleLauncher$2.run(DefaultGradleLauncher.java:124)
	at org.gradle.internal.Factories$1.create(Factories.java:22)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:53)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:121)
	at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:98)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:92)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:91)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:63)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:92)
	at org.gradle.initialization.DefaultGradleLauncher.getBuildAnalysis(DefaultGradleLauncher.java:88)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.configure(InProcessBuildActionExecuter.java:107)
	at org.gradle.tooling.internal.provider.runner.ClientProvidedBuildActionRunner.run(ClientProvidedBuildActionRunner.java:45)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.tooling.internal.provider.runner.SubscribableBuildActionRunner.run(SubscribableBuildActionRunner.java:58)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:48)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:30)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:81)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:46)
	at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)
	at org.gradle.util.Swapper.swap(Swapper.java:38)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)
	at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:237)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.gradle.internal.exceptions.LocationAwareException: Build file 'E:\eclipse-space\git_space\eureka-master\build.gradle' line: 10
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:219)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:168)
	at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:157)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:38)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:25)
	at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:55)
	... 56 more
Caused by: org.gradle.api.plugins.InvalidPluginException: An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:216)
	... 62 more
Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin [id 'nebula.netflixoss']
	at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:153)
	at org.gradle.api.internal.plugins.DefaultPluginManager.apply(DefaultPluginManager.java:112)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator$5.run(DefaultPluginRequestApplicator.java:170)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:204)
	... 62 more
Caused by: java.lang.NullPointerException: Cannot set property 'defaultVersionStrategy' on null object
	at org.codehaus.groovy.runtime.NullObject.setProperty(NullObject.java:80)
	at org.codehaus.groovy.runtime.InvokerHelper.setProperty(InvokerHelper.java:195)
	at groovy.lang.Closure.setPropertyTryThese(Closure.java:396)
	at groovy.lang.Closure.setPropertyOwnerFirst(Closure.java:385)
	at groovy.lang.Closure.setPropertyDelegateFirst(Closure.java:380)
	at groovy.lang.Closure.setProperty(Closure.java:362)
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.setGroovyObjectProperty(ScriptBytecodeAdapter.java:532)
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin$_apply_closure1.doCall(NetflixOssProjectPlugin.groovy:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)
	at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1019)
	at groovy.lang.Closure.call(Closure.java:426)
	at groovy.lang.Closure.call(Closure.java:442)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.with(DefaultGroovyMethods.java:241)
	at org.codehaus.groovy.runtime.NullObject.with(NullObject.java:70)
	at org.codehaus.groovy.runtime.NullObject$with.call(Unknown Source)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.callsite.NullCallSite.call(NullCallSite.java:35)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
	at org.codehaus.groovy.runtime.NullObject$with.call(Unknown Source)
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin.apply(NetflixOssProjectPlugin.groovy:54)
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin.apply(NetflixOssProjectPlugin.groovy)
	at org.gradle.api.internal.plugins.ImperativeOnlyPluginApplicator.applyImperative(ImperativeOnlyPluginApplicator.java:35)
	at org.gradle.api.internal.plugins.RuleBasedPluginApplicator.applyImperative(RuleBasedPluginApplicator.java:43)
	at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:137)
	... 65 more""Hi @lovelivestyle1102 are you still running into this error? Thanks. =||= Try the latest version of nebula.netflixoss.
https://plugins.gradle.org/plugin/nebula.netflixoss =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1036Jersey2ReplicationClient is not ready for error responses with bodyMikhail Gromovmgtriffid05/30/19, 11:12:11 PM"**Preconditions:**
Cluster of custom Eureka servers using eureka-core 1.1.131 (dropwizard-based). And resource `/peerreplication/batch` is not registered on those servers, so fallback to one-by-one task is required for replication to work.
**What I do:**
Add updated Eureka server to the cluster. New server has version 1.8.6 of Eureka libraries and uses Jersey 2 client. And `/peerreplication/batch` resource is registered this time.
**What I expect:**
Replication from old Eureka to new Eureka works because there is replication resource
Replication from new Eureka to old Eureka works because though there is no replication resource on old Eureka, new Eureka performs fallback to one-by-one replication
**What I get instead:**
Replication from old Eureka to new Eureka works because there is replication resource
Replication from new Eureka to old Eureka doesn't work and I see an exception:
```
javax.ws.rs.ProcessingException: Error closing message content input stream.
at org.glassfish.jersey.message.internal.EntityInputStream.close(EntityInputStream.java:161)
at org.glassfish.jersey.message.internal.InboundMessageContext$EntityContent.close(InboundMessageContext.java:156)
at org.glassfish.jersey.message.internal.InboundMessageContext.close(InboundMessageContext.java:939)
at org.glassfish.jersey.client.InboundJaxrsResponse.close(InboundJaxrsResponse.java:167)
at com.netflix.eureka.transport.Jersey2ReplicationClient.submitBatchUpdates(Jersey2ReplicationClient.java:124)
at com.netflix.eureka.cluster.ReplicationTaskProcessor.process(ReplicationTaskProcessor.java:72)
at com.netflix.eureka.util.batcher.TaskExecutors$BatchWorkerRunnable.run(TaskExecutors.java:187)
at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.http.ConnectionClosedException: Premature end of Content-Length delimited message body (expected: 196; received: 0
at org.apache.http.impl.io.ContentLengthInputStream.read(ContentLengthInputStream.java:180)
at org.apache.http.impl.io.ContentLengthInputStream.read(ContentLengthInputStream.java:200)
at org.apache.http.impl.io.ContentLengthInputStream.close(ContentLengthInputStream.java:103)
at org.apache.http.impl.execchain.ResponseEntityProxy.streamClosed(ResponseEntityProxy.java:140)
at org.apache.http.conn.EofSensorInputStream.checkClose(EofSensorInputStream.java:228)
at org.apache.http.conn.EofSensorInputStream.close(EofSensorInputStream.java:174)
at java.io.BufferedInputStream.close(BufferedInputStream.java:483)
at java.io.FilterInputStream.close(FilterInputStream.java:181)
at org.glassfish.jersey.apache.connector.ApacheConnector$3.close(ApacheConnector.java:644)
at java.io.FilterInputStream.close(FilterInputStream.java:181)
at org.glassfish.jersey.apache.connector.ApacheConnector$HttpClientResponseInputStream.close(ApacheConnector.java:621)
at org.glassfish.jersey.message.internal.EntityInputStream.close(EntityInputStream.java:158)
... 7 common frames omitted
```

First, a quick question: could you please tell, is there actually a fallback from batched to one-by-one replication in Eureka 1.8.6? I couldn't find it in code, though definitely saw it in older versions, like 1.1.126.

Second, looks like Jersey2ReplicationClient is not ready to 404 with body. In that case when we call `response.close()` in line 124 https://github.com/Netflix/eureka/blob/master/eureka-core-jersey2/src/main/java/com/netflix/eureka/transport/Jersey2ReplicationClient.java#L124 , Jersey issue https://github.com/jersey/jersey/issues/3486 arises, and exception is being rethrown from `finally` block. Because `if (!isSuccess(response))`, we don't consume body. I understand that having peer Eureka which returns error with body is quite an unusual case, but maybe it is worth caring. But not sure yet how.
And even if there is a fallback to one-by-one replication, it will unlikely work, because when exception is thrown from `finally`, code is usually not ready to handle it.

// cc @NZvereff"Anything about this? =||= Hi is this the same problem as the (more general) issue described at #1039? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1037Too many threads created for DiscoveryClientFahim Farookfahimfarookme05/30/19, 11:12:11 PM"We observed that too many threads created with the name `DiscoveryClient`. PFB the thread counts created for running around 27 microservice instances (eureka clients) in a managed server.

|Thread Name|Count|
|---|---|
|DiscoveryClient-%d | 84|
|DiscoveryClient-CacheRefreshExecutor-%d | 28|
|DiscoveryClient-HeartbeatExecutor-%d | 27|
|DiscoveryClient-InstanceInfoReplicator-%d | 27|

I have defined the `maximumPoolSize` for `HeartbeatExecutor` and `CacheRefreshExecutor` as 2, however they were created only 1 per microservice instance.

1. Even though the [pool size of DiscoveryClient scheduler is 2](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L373), it was always resulted in 3  DiscoveryClient threads per discovery client. I couldn't find any other reference to DiscoveryClient  executor as well.

2. From an initial analysis looks like it's possible to get rid of `DiscoveryClient` threads if `DiscoveryClient-CacheRefreshExecutor` and `DiscoveryClient-HeartbeatExecutor` are defined as `ScheduledThreadPoolExecutor` (rather than `ThreadPoolExecutor`). i.e. similar to the approach followed for `InstanceInfoReplicator`. "+1 =||= @fahimfarookme thanks for the data, we will take a look at this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1038i cont inject EurekaJerseyClient bean into  DiscoveryClient.java#L270yangxinzhaoYangGuang00104/23/18, 11:24:57 PM"https://github.com/Netflix/eureka/blob/3a744ee88274e70324958bc996b33c29f16a872d/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L270

```java
@Configuration
public class EurekaJerseyClientAdapter
{
    @Bean
    @ConditionalOnMissingBean
    public EurekaJerseyClient eurekaJerseyClient()
    {
        EurekaJerseyClientImpl.EurekaJerseyClientBuilder builder = new
        EurekaJerseyClientImpl.EurekaJerseyClientBuilder()
                .withClientName(""server"")
                .withMaxConnectionsPerHost(256)
                .withTrustStoreFile(""client.truststore"",""123456"");
        return builder.build();
    }
}
```
in my springboot project:
com.itmuch.cloud.study
com.itmuch.cloud.study.ConsumerMovieApplication
com.itmuch.cloud.study.EurekaJerseyClientAdapter

i cont inject EurekaJerseyClient bean into  DiscoveryClient.java#L270
so it used to init com.netflix.discovery.shared.transport.jersey.EurekaJerseyClientImpl.EurekaJerseyClientBuilder.MyDefaultApacheHttpClient4Config#createDefaultSslCM, but i dont want it."@YangGuang001 this seem more related to spring boot integration with eureka. Please try at https://github.com/spring-cloud/spring-cloud-netflix. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1039Was replication protocol changed in 2015?Mikhail Gromovmgtriffid05/30/19, 11:12:11 PM"Hi guys,
I'm trying to migrate from Eureka 1.1.131 to 1.8.6. And unfortunately I can't afford downtime, so I must be able to upgrade environment gradually.
Recently I noticed strange thing in logs of Eureka 1.1.131. I see stacktrace:
```
Error handling a request: 48e5d4dd0150af4d
! com.thoughtworks.xstream.mapper.CannotResolveClassException: replicationList
! at com.thoughtworks.xstream.mapper.DefaultMapper.realClass(DefaultMapper.java:56)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass(DynamicProxyMapper.java:55)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.PackageAliasingMapper.realClass(PackageAliasingMapper.java:88)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass(ClassAliasingMapper.java:79)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.ArrayMapper.realClass(ArrayMapper.java:74)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.MapperWrapper.realClass(MapperWrapper.java:30)
! at com.thoughtworks.xstream.mapper.CachingMapper.realClass(CachingMapper.java:45)
! at com.thoughtworks.xstream.core.util.HierarchicalStreams.readClassType(HierarchicalStreams.java:29)
! at com.thoughtworks.xstream.core.TreeUnmarshaller.start(TreeUnmarshaller.java:133)
! at com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy.unmarshal(AbstractTreeMarshallingStrategy.java:32)
! at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:1052)
! at com.thoughtworks.xstream.XStream.unmarshal(XStream.java:1036)
! at com.thoughtworks.xstream.XStream.fromXML(XStream.java:921)
! at com.netflix.discovery.converters.EntityBodyConverter.read(EntityBodyConverter.java:57)
! at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:94)
! at com.sun.jersey.spi.container.ContainerRequest.getEntity(ContainerRequest.java:488)
! at com.sun.jersey.server.impl.model.method.dispatch.EntityParamDispatchProvider$EntityInjectable.getValue(EntityParamDispatchProvider.java:123)
! at com.sun.jersey.server.impl.inject.InjectableValuesProvider.getInjectableValues(InjectableValuesProvider.java:46)
! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$EntityParamInInvoker.getParams(AbstractResourceMethodDispatchProvider.java:153)
! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:203)
! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
! at com.yammer.dropwizard.jersey.OptionalResourceMethodDispatchAdapter$OptionalRequestDispatcher.dispatch(OptionalResourceMethodDispatchAdapter.java:37)
! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:302)
! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
! at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1511)
! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1442)
! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1391)
! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1381)
! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:538)
! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:716)
! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848)
! at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1448)
! at com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:66)
! at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:118)
! at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:113)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29)
! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)
! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)
! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)
! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)
! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)
! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200)
! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
! at org.eclipse.jetty.server.Server.handle(Server.java:368)
! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)
! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)
! at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:953)
! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1014)
! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:953)
! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)
! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)
! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:298)
! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
! at java.lang.Thread.run(Thread.java:748)
```
Looking at code of 1.1.131, I see the following:
```java
    @Serializer(""com.netflix.discovery.converters.EntityBodyConverter"")
    @XStreamAlias(""repllist"")
    public static class ReplicationList {
        private List<PeerEurekaNode.ReplicationInstance> replicationList = new ArrayList<PeerEurekaNode.ReplicationInstance>();
      
        public void addReplicationInstance(PeerEurekaNode.ReplicationInstance instance) {
            replicationList.add(instance);
        }
        
        public List<PeerEurekaNode.ReplicationInstance> getList() {
            return this.replicationList;
        }
    }
```
And searching code of Eureka 1.8.6 for ""repllist"" gives me nothing.
Could you please tell, does it mean that replication protocol was changed and new Eureka cannot push batch replication to old one? Maybe there is some known workaround? I tried to search for ""XStream"" among Github issues, but couldn't find anything related.
I see replication was refactored significanlty in commits 1fcd932bfb3f1dfab7abe6396150e1bbaaeb1d68 and b2766563f4b103f2f3f134a65a846d8caa7dbfae, and ""repllist"" disappeared from code after first of them. But refactoring was quite large, and I couldn't track down if there is some way to migrate gradually.

Desperately hope on your kind help.

Best wishes,
Mikhail.
//cc @NZvereff, @pparth""@mgtriffid there were some changes a long time ago, if I remember, at least some of the changes involve moving to Jackson for json ser/deser and was probably around version 1.1.159. 

In general, for server updates, we try not to introduce breaking changes between immediate minor versions. One thing you can try to upgrade your server, is to upgrade one minor version at a time (e.g. 1.1.x -> 1.2.x -> 1.3.x etc). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1040Request execution error com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java classLionsWang05/30/19, 11:12:12 PM"[ERROR] [DiscoveryClient-HeartbeatExecutor-0] [com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient(91)] - Request execution error
com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html was not found
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:630) ~[jersey-client-1.19.1.jar!/:1.19.1]
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar!/:1.19.1]
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:824) ~[eureka-client-1.7.0.jar!/:1.7.0]
at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1388) ~[eureka-client-1.7.0.jar!/:1.7.0]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_144]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_144]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]""spring cloud version:Edgware.SR2 =||= @wangzhenhua-bijie what version of the server are you running with? =||= Any news? =||= I also met this issue. Why did you close it? Do you have anything updates? Thanks a lot. =||= I'm facing the same issue. Any updates? thanks =||= > I'm facing the same issue. Any updates? thanks

My issue had been fixed. The issue is caused by wrong nginx configuration of eureka url.
Our nginx configuration will encapsulate 500,502 error as 404.
It works fine after removing this ngx config for eureka server url.

You can refer to  my question https://github.com/Netflix/eureka/issues/1130 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1041duplicated create Eureka-JerseyClient-Con-Cleaner task and remove all JerseyClient-Connectionchendurex04/25/18, 12:06:02 AM"version：eureka-client is 1.8.6

**duplicated Eureka-JerseyClient-Con-Cleaner task bug description**:when create Eureka-JerseyClient-Con-Cleaner task at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory class and buildLegacy method. (the code like bellow)the method created two cleaner task ,one at EurekaJerseyClient jerseyClient = clientBuilder.build(), and other at new JerseyEurekaHttpClientFactory(jerseyClient, additionalHeaders);

```
private JerseyEurekaHttpClientFactory buildLegacy(Map<String, String> additionalHeaders, boolean systemSSL) {
            EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                    .withClientName(clientName)
                    .withUserAgent(""Java-EurekaClient"")
                    .withConnectionTimeout(connectionTimeout)
                    .withReadTimeout(readTimeout)
                    .withMaxConnectionsPerHost(maxConnectionsPerHost)
                    .withMaxTotalConnections(maxTotalConnections)
                    .withConnectionIdleTimeout((int) connectionIdleTimeout)
                    .withEncoderWrapper(encoderWrapper)
                    .withDecoderWrapper(decoderWrapper);

            if (systemSSL) {
                clientBuilder.withSystemSSLConfiguration();
            } else if (sslContext != null) {
                clientBuilder.withCustomSSL(sslContext);
            }
            
            if (hostnameVerifier != null) {
                clientBuilder.withHostnameVerifier(hostnameVerifier);
            }

            EurekaJerseyClient jerseyClient = clientBuilder.build();
            ApacheHttpClient4 discoveryApacheClient = jerseyClient.getClient();
            addFilters(discoveryApacheClient);

            return new JerseyEurekaHttpClientFactory(jerseyClient, additionalHeaders);
        }
```

**remove all JerseyClient-Connection bug description**:like above bug description,the new JerseyEurekaHttpClientFactory(jerseyClient, additionalHeaders); should add connectionIdleTimeout param,but actually not,and then remove all JerseyClient-Connection when Eureka-JerseyClient-Con-Cleaner task begin running,the cleaner log like bellow:
```
2018-03-09 10:00:12.095,[thread]:[Eureka-JerseyClient-Conn-Cleaner2],[level]:DEBUG,[class]:com.netflix.discovery.shared.MonitoredConnectionManager.closeIdleConnections 332 - Closing connections idle longer than -1 SECONDS
```"@chendurex thank you for the report, this does look to be the case. We will take a look at this.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1042spring cloud eureka change default status-page-url-path to /actuator/info?dragontree101dragontree10103/14/18, 01:27:56 AM"in spring boot 2, actuator endpoint is `/actuator/info`, but default eureka default is
```
eureka:
  instance:
    status-page-url-path: /info
```

i think in spring cloud release in `Finchley` version, eureka should change default to `/actuator/info`, yestoday i have question to `spring-cloud` gitter."Not the spring cloud Netflix repository =||= ok, i issue to spring cloud netfilx, close this issue =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1043[Question] What happens when Eureka instance skips a heartbeat against a Eureka server with self preservation turned off?Narendra Choudhary Leghanarenchoudhary04/23/18, 11:04:39 PM"I asked this question on [stackoverflow](https://stackoverflow.com/questions/49128990/what-happens-when-eureka-instance-skips-a-heartbeat-against-a-eureka-server-with). Didn't get much attention (even earned tumbleweed badge). Even added bounty. Still no response. Now posting here.

--- 

Consider this set-up:
* Eureka server with self preservation mode disabled i.e. enableSelfPreservation: false
* 2 Eureka instances each for 2 services (say service#1 and service#2). Total 4 instances.
And one of the instances (say srv#1inst#1, an instance of service#1) sent a heartbeat, but it did not reach the Eureka server.

AFAIK, following actions take place in sequence on Server side:

* ServerStep1: Server observes that a particular instance has missed a heartbeat.
* ServerStep2: Server marks the instance for eviction.
* ServerStep3: Server's eviction scheduler (which runs periodically) evicts the instance from registry.

Now on instance (srv#1inst#1) side:

* InstanceStep1: It skips a heartbeat.
* InstanceStep2: It realizes heartbeat did not reach Eureka Server. It retries with exponential back-off.  

AFAIK, the eviction and registration do not happen immediately. Eureka server runs separate scheduler for both tasks periodically.

I have some questions related to this process:

* Are the sequences correct? If not, what did I miss?
* Is the assumption about eviction and registration scheduler correct?
*  An instance of service#2 requests fresh registry copy from server right after ServerStep2.
    * Will srv#1inst#1 be in the fresh registry copy, because it has not been evicted yet?
        * If yes, will srv#1inst#1 be marked UP or DOWN?
* The retry request from InstanceStep2 of srv#1inst#1 reaches server right after ServerStep2.
    * Will there be an immediate change in registry?
    * How that will affect the response to instance of service#2's request for fresh registry? How will it affect the eviction scheduler?""Hi @narenchoudhary before I answer the questions specifically, here's some high level information regarding heartbeats and evictions (based on default configs):
1. instances are only evicted if they miss 3 consecutive heartbeats
2. (most) heartbeats do not retry, they are best effort every 30s. The only time a heartbeat will retry is that if there is a threadlevel error on the heartbeating thread (i.e. Timeout or RejectedExecution), but this should be very rare.

 let me try to answer your questions:
- Are the sequences correct? If not, what did I miss?
```
 A: The sequences are correct, with the above clarifications
```
- Is the assumption about eviction and registration scheduler correct?
 ```
A: The eviction is handled by an internal scheduler. 
    The registration is processed by the handler thread for the registration request.
```
- An instance of service#2 requests fresh registry copy from server right after ServerStep2.
  - Will srv#1inst#1 be in the fresh registry copy, because it has not been evicted yet?
    - If yes, will srv#1inst#1 be marked UP or DOWN?
```
A: There are a few things here:
  1. until the instance is actually evicted, it will be part of the result
  2. eviction does not involve changing the instance's status, it merely removes the instance
     from the registry
  3. the server holds 30s caches of the state of the world, and it is this cache that's returned. 
     So the exact result as seem by the client, in an eviction scenario, still depends on when it
     falls within the cache's update cycle.
```
- The retry request from InstanceStep2 of srv#1inst#1 reaches server right after ServerStep2.
  - Will there be an immediate change in registry?
  - How that will affect the response to instance of service#2's request for fresh registry? How will it affect the eviction scheduler?
```
A: again a few things:
  1. When the actual eviction happen, we check each evictee's time to see if it is eligible to be evicted. 
     If an instance is able to renew its heartbeats before this event, then it is no longer a target for eviction.
  2. The 3 events in question (evaluation of eviction eligibility at eviction time, updating the
     heartbeat status of an instance, generation of the result to be returned to the read operations)
     all happen asynchronously and their result will depend on the evaluation of the above
     described criteria at execution time.
```
Please let me know if you still have more questions. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1044Verify is scheduler is active before submitDavid Liuqiangdavidliu03/21/18, 06:20:49 PM"Fixes gh-1025.

(cherry-picked from master branch as the fork branch has been deleted)"@ryanjbaxter =||= Verify is scheduler is active before submitDavid Liuqiangdavidliu03/21/18, 06:20:49 PM"Fixes gh-1025.

(cherry-picked from master branch as the fork branch has been deleted)"NaNtojuchni01/22/18, 11:39:29 AM"Verify is scheduler is active before submit

Fixes gh-1025."1
1045Eureka in high-available mode throws couple of exceptions when they come upDeleted userghost04/23/18, 10:38:40 PM"I make it a spring-boot app and enable it as a service-discovery server with Spring-Cloud-Eureka-Server. My purpose is to make it be high-available in 2 instances on 2 different servers. I do it with configuration things and they work well regarding see and sync data. My issue is they always have exceptions in the log in starting phase of apps that said me:

> ReplicationTaskProcessor - Network level connection to peer 10.1.69.110; retrying after delay com.sun.jersey.api.client.ClientHandlerException: org.apache.http.conn.ConnectTimeoutException: Connect to 10.2.69.72:12050 timed out

My configuration is:

> eureka.instance.hostname=10.1.50.114
> eureka.client.register-with-eureka=true
> eureka.client.fetch-registry=true
> eureka.client.eureka-connection-idle-timeout-seconds=60
> eureka.client.serviceUrl.defaultZone=10.1.69.110:8761/eureka/

After 2 instances come up and see each other, I don't have them (exceptions). I think it should have some configurable items that mention to Eureka please wait for another instance based on millisecond in the startup phase."Hi @thinksky-sourcecode thank you for raising the issue. As you correctly state, the errors are transient at start up when multiple servers are being bootstrapped. Since the servers know a priori the hostnames of all of its peers (via config), and there is no guarantee on the order of server start up, it is somewhat difficult to know whether a server should avoid the exceptions at start up. If you have any good suggests, we welcome any PRs. Thanks. =||= Hi @qiangdavidliu ,I also encountered this exception. After the eureka cluster has been running for a while, this error is reported from time to time. It is estimated that it will be reported once in three hours. I pinged the server ip, ttl is about 64ms. Do you know what is going on here? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1046Spectator instead of Servo (deprecated) ?Ravi Kancherlaravikancherla05/30/19, 11:12:12 PM"As Servo is deprecated and no longer maintained, any plan on using spectator instead of servo library ? I still see there are references to Servo in ThresholdLevelsMetric.java

I am not using Servo anyway. If there is a way to disable Servo instead, that works for me too. I am currently having a blocker due to the usage of Servo

https://github.com/Netflix/servo/issues/443""@ravikancherla thanks for raising this issue. I followed your links and it looks like you have made a PR against servo that resolves this issue. Are you able to pin forward your servo version and achieve your goals?

We will look at updating the eureka dependency versions on servo to the latest soon.

(On the matter of moving to spectator, that is something we wanted to look at but unfortunately is not at the top of our priorities at the moment). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1047[Question] How does eureka client failover?MJmengjiann04/05/18, 01:40:00 AM"Referring to the ""Eureka Failover"" section in the page: https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2, it mentions that ""eureka clients automatically failover to other nodes in the cluster.""

And also in the ""Assigning EIPs using Service Urls"" section, it mentions ""The Eureka clients similarly try to find a Eureka server co-located in the same zone and if they do not find any, they fail over to the Eureka servers in the other zones.""

Just curious on how the eureka client is able to identify Eureka server located in the same zone? Is there another configuration for it? or it is done automatically internally?""https://cloud.spring.io/spring-cloud-netflix/multi/multi__service_discovery_eureka_clients.html#_zones =||= @mengjiann the eureka client implementation have an internal resolver concept where it reads data about the eureka servers (via the standard eureka api) which is then used for failovers. You can take a look at this class for the actual implementation:
https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/transport/decorator/RetryableEurekaHttpClient.java =||= Thanks. I will read on the references. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1048Eureka and Zuul outdatedrashad-farajullayev04/23/18, 10:15:10 PM" Spring Cloud uses Netflix API for Microservices architecture. Some people claim the Netflix tools are outdated and Netflix doesn't work on it any more. 

1. Rumors say Netflix is currently working on quite another alternative to replace at least Eureka and Zuul. Is that true? 
2. Should we currently switch to something else while it is not too late?
3. When will the new version be released approximately? 
4. Will new version be included in Spring Cloud? 
5. If we today go with these API staff do we have to worry about their deprecation in the coming years?

Thanks for attention""I don't work on either and so may not have full context. At first glance these questions seem to pertain more to Zuul than Eureka.

> Rumors say Netflix is currently working on quite another alternative to replace at least Eureka and Zuul. Is that true?

I'm guessing this was in reference to the new version of Zuul. A 2.x version that was released a few months ago. There are some blog posts and presentations linked off the readme:

https://github.com/Netflix/zuul/blob/2.1/README.md

> Will new version be included in Spring Cloud?

For Zuul 2 specifically, see: Netflix/zuul#298. =||= As @brharrington mentioned Zuul 2 has recently been released, see the link to the github issue above. More info on getting started here: https://github.com/Netflix/zuul/wiki/Getting-Started-2.0

AFAIK, Spring Cloud is not going to use Zuul 2 but you'll have to confirm with them.

I'm not sure what rumors you're referring to but both Zuul (specifically version 2) and Eureka are core products for Netflix and almost all traffic that comes in touches both. =||= To comment on this specifically for eureka, we are not moving away or deprecating eureka any time soon. Internally, we do have some extensions (e.g. a readonly replica tier) that we use, but these are extensions and not replacements for the existing system.

The open source future for our internal extensions are as yet uncertain, however if there are any active movement on that front, we will involve Spring Cloud in the discussion. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1049the Domain Name Resolution is wrong, there will be get a extra “wangwenyao04/23/18, 10:11:03 PM"when i user useDnsForFetchingServiceUrls，i found the problem, the Domain Name Resolution is wrong, there will be get a extra “.  i think the problem of code is here.
`   
     String txtRecord = null;
        if (attr != null) {
            txtRecord = attr.get().toString();
        }

        Set<String> cnamesSet = new TreeSet<String>();
        if (txtRecord == null || txtRecord.trim().isEmpty()) {
            return cnamesSet;
        }
        String[] cnames = txtRecord.split("" "");
`""![image](https://user-images.githubusercontent.com/19568152/38462848-c68b7f08-3b1f-11e8-9792-fd0b615425df.png)
 =||= @wangwenyao I think your issue is similar to #1053. This has been resolved in merged PR #1054. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1050Eureka client registration fails when registering to a secure serverBangicBangic04/10/18, 01:43:35 AM"I am using Spring Boot 2.0 and I have an Eureka server and and Eureka client. It is working fine. Here are the property files:

Server:

server.port=8082
eureka.instance.hostname=localhost
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

Client:

server.port=8083
eureka.client.region = default
eureka.client.registryFetchIntervalSeconds = 5
eureka.client.serviceUrl.defaultZone=http://localhost:8082/eureka/

Now, I try to secure my Eureka server, I add the spring-boot-starter-security dependency and I change the property files:

Server:

server.port=8082

spring.security.basic.enabled=true
spring.security.user.name=eureka-user
spring.security.user.password=eureka-pass

eureka.instance.hostname=localhost

eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
Client:

server.port=8083
eureka.client.region = default
eureka.client.registryFetchIntervalSeconds = 5
eureka.client.serviceUrl.defaultZone=http://eureka-user:eureka-pass@localhost:8082/eureka/
After these changes when I start the server and client the client throws this error:

com.netflix.discovery.DiscoveryClient    : DiscoveryClient_UNKNOWN/localhost:8083 - registration failed Cannot execute request on any known server""Hey there,

Have you check this - https://github.com/spring-cloud/spring-cloud-netflix/issues/2754 ? =||= This is not the spring cloud Netflix issue tracker =||= @beastovest thanks! it's works =||= @spencergibb  thanks!  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1051overriddenstatus changed to overriddenStatus breaks json parsingRyan Baxterryanjbaxter05/30/19, 11:12:12 PMIn Spring Cloud we give the option for Eureka clients to not use Jersey and instead use a Spring `RestTemplate` as their HTTP client.  We noticed that when this change is made and we use Eureka Server 1.8.7 that the client can no longer parse the JSON response into an `InstanceInfo` class.  The reason seems to be a change in the case of the `overriddenstatus` property to `overriddenStatus`.  The variable in `InstanceInfo` is still `overriddenstatus`.  Looks like the change was made in this commit https://github.com/Netflix/eureka/commit/939957124a8f055c7d343d67d0842ae06cf59530#diff-1e0de94c9faa44a518abe30d94744178L63The same problem does not show up when you look at the XML response =||= @ryanjbaxter that you for reporting this, this indeed looks to be an issue. I will take a look at making a fix for this. =||= @ryanjbaxter version 1.8.8 released with the fix. =||= Awesome thanks, I will bump the version in Spring Cloud Netflix. =||= @ryanjbaxter Is this added in `Finchley.RC1`, because I am still facing issue with mentioned release. =||= Nevermind, `Finchley.RC1` still uses 1.8.8 =||= @qiangdavidliu We are using Eureka 1.9 but I can still reproduce this =||= Our non-jersey implementation doesn't use the Jackson codec do we still see the error =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1052fix for issue #1051David Liuqiangdavidliu04/09/18, 09:45:23 PMNaNI guess I didn't pay enough attention to this since this doesn't actually fix our issue since the case we have is when we don't use jersey and therefore the Eureka codec. =||= https://github.com/spring-cloud/spring-cloud-netflix/issues/2756 =||= fix for issue #1051David Liuqiangdavidliu04/09/18, 09:45:23 PMNaNNaNDavid Liu04/09/18, 09:31:24 PMfix for issue #10511
1053"Dns resolver not compatible txt format ""host1 host2 host3"""Jacey Newmoxnet04/23/18, 09:49:55 PM"https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2
if more than one hostname per zone, space delimit, for example txt value:

> ""host1"" ""host2""

**but some dns provider only support:**
> ""host1 host2""

and split the value by space to:
> [""\\""host1"", ""host2\\""""]

then, make request to 
> http://""host1

so, got a exception:
> java.lang.IllegalArgumentException: Illegal character in authority at index 7: http://""eureka-2.eureka.springcloud.svc.cluster.local:8761/eureka"Thanks @moxnet have merged in your PR. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1054"update: compatible txt value format: ""host1 host2 host3"""Jacey Newmoxnet04/23/18, 09:49:55 PM"fix #1053 

Remove the opening and closing quotes when the TXT dns record as format:
> ""host1 host2 host3""

to compatible with aws route53 format:
>""host1"" ""host2"" ""host3""

(this format will remove quotes before the return of call dirContext.getAttributes(...))"Thanks @moxnet  =||= "update: compatible txt value format: ""host1 host2 host3"""Jacey Newmoxnet04/23/18, 09:49:55 PM"fix #1053 

Remove the opening and closing quotes when the TXT dns record as format:
> ""host1 host2 host3""

to compatible with aws route53 format:
>""host1"" ""host2"" ""host3""

(this format will remove quotes before the return of call dirContext.getAttributes(...))"NaNmoxnet04/12/18, 05:44:30 AM"update: compatible txt value format: ""host1 host2 host3"""1
1055 Virtual host like rabbitmqPhilZhangzjh-coder05/30/19, 11:12:12 PM"I have some experience on using rabbitmq and I'm a newer on eureka. I think one of its most interesting feature on rabbitmq is virtual host. With this feature, our team can share one mq server when developing on personal pc.
I think service discovery service like eureka is also a kind of middleware or infrastructure just like rabbitmq, so is it reasonable and possible to add this feature on eureka?"@zjh-coder do you mean to add support for advertising rabbitmq brokers via eureka?  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1056Eureka proxy setting is not workingLuan LouisLuanLouis04/23/18, 09:42:52 PM"I want to intercept http messages between eureka clients and eureka servers,  and I add corresponding proxy settings in application.properties file like this:
```
eureka.client.proxy-host=127.0.0.1
eureka.client.proxy-port=8001
```
BUT the proxy settings value have't  be set to EurekaJerseyClientBuilder instance. I failed to intercept the http messges between eureka instance.
so I dive into source code , found that proxy settings is missing  in JerseyEurekaHttpClientFactory.buildLegacy() method:

```
@Override
        public JerseyEurekaHttpClientFactory build() {
            Map<String, String> additionalHeaders = new HashMap<>();
            if (allowRedirect) {
                additionalHeaders.put(HTTP_X_DISCOVERY_ALLOW_REDIRECT, ""true"");
            }
            if (EurekaAccept.compact == eurekaAccept) {
                additionalHeaders.put(EurekaAccept.HTTP_X_EUREKA_ACCEPT, eurekaAccept.name());
            }

            if (experimental) {
                return buildExperimental(additionalHeaders);
            }
            return buildLegacy(additionalHeaders, systemSSL);
        }

        private JerseyEurekaHttpClientFactory buildLegacy(Map<String, String> additionalHeaders, boolean systemSSL) {
            EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                    .withClientName(clientName)
                    .withUserAgent(""Java-EurekaClient"")
                    .withConnectionTimeout(connectionTimeout)
                    .withReadTimeout(readTimeout)
                    .withMaxConnectionsPerHost(maxConnectionsPerHost)
                    .withMaxTotalConnections(maxTotalConnections)
                    .withConnectionIdleTimeout((int) connectionIdleTimeout)
                    .withEncoderWrapper(encoderWrapper)
                    .withDecoderWrapper(decoderWrapper);
                    **_// proxy settings is lost here_**

            if (systemSSL) {
                clientBuilder.withSystemSSLConfiguration();
            } else if (sslContext != null) {
                clientBuilder.withCustomSSL(sslContext);
            }
            
            if (hostnameVerifier != null) {
                clientBuilder.withHostnameVerifier(hostnameVerifier);
            }

            EurekaJerseyClient jerseyClient = clientBuilder.build();
            ApacheHttpClient4 discoveryApacheClient = jerseyClient.getClient();
            addFilters(discoveryApacheClient);

            return new JerseyEurekaHttpClientFactory(jerseyClient, additionalHeaders);
        }

        private JerseyEurekaHttpClientFactory buildExperimental(Map<String, String> additionalHeaders) {
            ThreadSafeClientConnManager cm = createConnectionManager();
            ClientConfig clientConfig = new DefaultApacheHttpClient4Config();

            if (proxyHost != null) {
                addProxyConfiguration(clientConfig);
            }

            DiscoveryJerseyProvider discoveryJerseyProvider = new DiscoveryJerseyProvider(encoderWrapper, decoderWrapper);
            clientConfig.getSingletons().add(discoveryJerseyProvider);

            // Common properties to all clients
            cm.setDefaultMaxPerRoute(maxConnectionsPerHost);
            cm.setMaxTotal(maxTotalConnections);
            clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER, cm);

            String fullUserAgentName = (userAgent == null ? clientName : userAgent) + ""/v"" + buildVersion();
            clientConfig.getProperties().put(CoreProtocolPNames.USER_AGENT, fullUserAgentName);

            // To pin a client to specific server in case redirect happens, we handle redirects directly
            // (see DiscoveryClient.makeRemoteCall methods).
            clientConfig.getProperties().put(ClientConfig.PROPERTY_FOLLOW_REDIRECTS, Boolean.FALSE);
            clientConfig.getProperties().put(ClientPNames.HANDLE_REDIRECTS, Boolean.FALSE);

            ApacheHttpClient4 apacheClient = ApacheHttpClient4.create(clientConfig);
            addFilters(apacheClient);

            return new JerseyEurekaHttpClientFactory(apacheClient, connectionIdleTimeout, additionalHeaders);
        }

```
Pls check"Thanks @LuanLouis . Your PR is merged. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1057bugfixing: Eureka Proxy Setting is not workingLuan LouisLuanLouis04/23/18, 09:42:27 PM"   Eureka proxy settings is not working because of EurekaJerseyClientBuilder instance have no chance to set proxy settings during it's lifecycle.

related issue: #1056 "@LuanLouis thanks for the fix. =||= bugfixing: Eureka Proxy Setting is not workingLuan LouisLuanLouis04/23/18, 09:42:27 PM"   Eureka proxy settings is not working because of EurekaJerseyClientBuilder instance have no chance to set proxy settings during it's lifecycle.

related issue: #1056 "NaN娄娈04/21/18, 04:56:17 PM"bugfixing: Eureka Proxy Setting is not working
   Eureka proxy settings is not working because of EurekaJerseyClientBuilder instance have no chance to set proxy settings during it's lifecycle."1
1058Fix issue #1041David Liuqiangdavidliu04/24/18, 11:57:00 PMNaNNaNFix issue #1041David Liuqiangdavidliu04/24/18, 11:57:00 PMNaNNaNDavid Liu04/24/18, 11:41:16 PMFix issue #10411
1059update dependenciesDavid Liuqiangdavidliu04/25/18, 12:27:59 AMNaNNaNupdate dependenciesDavid Liuqiangdavidliu04/25/18, 12:27:59 AMNaNNaNDavid Liu04/25/18, 12:19:40 AMupdate dependencies1
1060address dangling PR comments for PRs #976 and #1003David Liuqiangdavidliu04/25/18, 05:14:50 PMaddress dangling PR comments for PRs #976 and #1003NaNaddress dangling PR comments for PRs #976 and #1003David Liuqiangdavidliu04/25/18, 05:14:50 PMaddress dangling PR comments for PRs #976 and #1003NaNDavid Liu04/25/18, 12:39:37 AMaddress dangling PR comments for PRs #976 and #10031
1061Clients not able to register with eureka serverarpanagr04/28/18, 05:00:21 PM"
This is the error I am getting:

```
2018-04-28 22:05:08.372 ERROR 2664 --- [tbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error

com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html; charset=utf-8 was not found
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:630) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:815) [eureka-client-1.6.2.jar:1.6.2]
        at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1379) [eureka-client-1.6.2.jar:1.6.2]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_171]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_171]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_171]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_171]
        at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]
```

I searched for this error on internet and one reason mentioned was mismatch in eureka-client and server version. Mine is 1.6.2 for both client and server."It got resolved somehow after doing a restart. Not sure what was wrong though. But closing it for the moment. =||= @arpanagr Is there any other solution ? If there are many services registered in eureka server, we can not demand all services of client to restart,this is a very bad way. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1062FTBFScoretemp05/30/19, 11:12:12 PM"I expected the documented command to work, but it doesn't. 

```
./gradlew clean build --stacktrace                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                             
FAILURE: Build failed with an exception.                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                             
* What went wrong:                                                                                                                                                                                                                                           
Failed to load native library 'libnative-platform.so' for Linux amd64.                                                                                                                                                                                       
                                                                                                                                                                                                                                                             
* Try:                                                                                                                                                                                                                                                       
Run with --info or --debug option to get more log output.                                                                                                                                                                                                    
                                                                                                                                                                                                                                                             
* Exception is:                                                                                                                                                                                                                                              
net.rubygrapefruit.platform.NativeException: Failed to load native library 'libnative-platform.so' for Linux amd64.                                                                                                                                          
        at net.rubygrapefruit.platform.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:49)                                                                                                                                                        
        at net.rubygrapefruit.platform.Native.init(Native.java:55)                                                                                                                                                                                           
        at org.gradle.internal.nativeintegration.services.NativeServices.initialize(NativeServices.java:74)                                                                                                                                                  
        at org.gradle.internal.nativeintegration.services.NativeServices.initialize(NativeServices.java:60)                                                                                                                                                  
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:203)                                                                                                                                           
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)                                                                           
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)                                                                                        
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)                                                                                        
        at org.gradle.launcher.Main.doAction(Main.java:33)                                                                                                                                                                                                   
        at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)                                                                                                                                                                                  
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)                                                                                                                                                                                       
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)                                                                                                                                                                     
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                                                                                                                             
        at java.lang.reflect.Method.invoke(Method.java:498)                                                                                                                                                                                                  
        at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)                                                                                                                                                                
        at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)                                                                                                                                                                      
        at org.gradle.launcher.GradleMain.main(GradleMain.java:23)                                                                                                                                                                                           
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)                                                                                                                                                                                       
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)                                                                                                                                                                     
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                                                                                                                             
        at java.lang.reflect.Method.invoke(Method.java:498)                                                                                                                                                                                                  
        at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:30)                                                                                                                                                                       
        at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:129)                                                                                                                                                                              
        at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:61)                                                                                                                                                                              
Caused by: java.lang.UnsatisfiedLinkError: /home/coretemp/.gradle/native/19/linux-amd64/libnative-platform.so: libstdc++.so.6: cannot open shared object file: No such file or directory                                                                          
        at java.lang.ClassLoader$NativeLibrary.load(Native Method)
        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941)
        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1824)
        at java.lang.Runtime.load0(Runtime.java:809)
        at java.lang.System.load(System.java:1086)
        at net.rubygrapefruit.platform.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:45)
        ... 23 more
```

Details:
Operating System: NixOS 18.03."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1063How do you forcefully refresh Eureka client cache?Vidura Nanayakkaravidurananayakkara05/30/19, 11:12:12 PM"I have the requirement of refreshing the Eureka client cache forcefully. The reason for this is that,
Assuming I have a service registered to Eureka with name ""A"" and the ""A""s information is outdated, I do not want to stay until Eureka automatically refreshes its cache.

How do I refresh the Eureka client cache forcefully? ""Hi @vidurananayakkara 
AFAIK Eureka have two cache, so which one you want refresh? In default eureka use two cache, one is `guava` cache the other is `Map`
In normal like this

```
Client --- > mapCache ---> guave cache
```

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1064getting java.lang.NoClassDefFoundError: javax/ws/rs/ext/FactoryFinder during heartbeat checkvikrantch-hk05/30/19, 11:12:13 PM"I have used exureka-samples code to create a eureka-client, getting below exception during heartbeat check 

```
[ERROR] [] (03 May 2018 17:58:43) (DiscoveryClient.java:972) - DiscoveryClient_UNKNOWN/HK-107-APP - was unable to refresh its cache! status = javax/ws/rs/ext/FactoryFinder
[ INFO] [] (03 May 2018 17:58:52) (DiscoveryClient.java:826) - DiscoveryClient_UNKNOWN/HK-107-APP: registering service...
[ WARN] [] (03 May 2018 17:58:52) (InstanceInfoReplicator.java:125) - There was a problem with the instance info replicator
java.lang.NoClassDefFoundError: javax/ws/rs/ext/FactoryFinder
        at javax.ws.rs.ext.RuntimeDelegate.findDelegate(RuntimeDelegate.java:135)
        at javax.ws.rs.ext.RuntimeDelegate.getInstance(RuntimeDelegate.java:120)
        at javax.ws.rs.core.UriBuilder.newInstance(UriBuilder.java:95)
        at javax.ws.rs.core.UriBuilder.fromUri(UriBuilder.java:106)
        at com.sun.jersey.api.client.WebResource.getUriBuilder(WebResource.java:118)
        at com.sun.jersey.api.client.WebResource.path(WebResource.java:396)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:50)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
```

I have included below dependencies in pom

```
<dependency>
			<groupId>com.netflix.eureka</groupId>
			<artifactId>eureka-client</artifactId>
			<version>1.9.0</version>
			</dependency>
		<!-- https://mvnrepository.com/artifact/com.netflix.governator/governator -->
		<dependency>
			<groupId>com.netflix.governator</groupId>
			<artifactId>governator</artifactId>
			<version>1.17.5</version>
		</dependency>
		<dependency>
      <groupId>com.netflix.archaius</groupId>
      <artifactId>archaius-core</artifactId>
      <version>0.7.6</version>
    </dependency>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>jsr311-api</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>com.netflix.servo</groupId>
      <artifactId>servo-core</artifactId>
      <version>0.12.21</version>
    </dependency>
			
```

Please let me know if I am missing some thing.""Do you have the following dependency?

```xml
<dependency>
    <groupId>javax.ws.rs</groupId>
    <artifactId>javax.ws.rs-api</artifactId>
    <version>2.1</version>
</dependency>
``` =||= @marcosbarbero I have added this dependency as well but still getting same error =||= @marcosbarbero I was debugging the code and found that exception is being thrown from AbstractJerseyEurekaHttpClient at WebResource webResource = jerseyClient.resource(serviceUrl).path(urlPath); in below method
```
 private EurekaHttpResponse<Applications> getApplicationsInternal(String urlPath, String[] regions) {
        ClientResponse response = null;
        String regionsParamValue = null;
        try {
            WebResource webResource = jerseyClient.resource(serviceUrl).path(urlPath);
            if (regions != null && regions.length > 0) {
                regionsParamValue = StringUtil.join(regions);
                webResource = webResource.queryParam(""regions"", regionsParamValue);
            }
``` =||= can you share some code/sample project? I would like to see it. =||= 




```
package com.hk.web.listener;

import com.netflix.appinfo.InstanceInfo;
import com.netflix.appinfo.MyDataCenterInstanceConfig;
import com.netflix.discovery.DefaultEurekaClientConfig;
import com.netflix.discovery.DiscoveryManager;


public class EurekaClient {

    public void registerClient() {

        String vipAddress = ""NLPService"";

        InstanceInfo nextServerInfo = null;
        try {
            DiscoveryManager.getInstance().initComponent(new MyDataCenterInstanceConfig(), new DefaultEurekaClientConfig());
            nextServerInfo = EurekaConfiguration.getEurekaClient().getNextServerFromEureka(vipAddress, false);
        } catch (Exception e) {
            System.err.println(""Cannot get an instance of example service to talk to from eureka"");
            //System.exit(-1);
        }

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            // Nothing
        }

        // Now we change our status to UP
        System.out.println(""Done sleeping, now changing status to UP"");
        DiscoveryManager.getInstance().getEurekaClient().getApplicationInfoManager().setInstanceStatus(InstanceInfo.InstanceStatus.UP);

        System.out.println(""Found an instance of example service to talk to from eureka: ""
                + nextServerInfo.getVIPAddress() + "":"" + nextServerInfo.getPort());

        String serviceBaseURL = ""http://""+ nextServerInfo.getHostName()
                +"":""+nextServerInfo.getPort();


        String nlpServiceURL = serviceBaseURL +""/nlp"";

       /* RestTemplate restTemplate = new RestTemplate();

        NLPInputToBeTransformed input = new NLPInputToBeTransformed();
        input.setInputText("" Test Input "");


        NLPResponse nlpResponse = restTemplate.postForObject
                (nlpServiceURL, input, NLPResponse.class, new HashMap<>());*/

        //System.out.println( "" Service Response  "" + nlpResponse.getTags());

    }
}


```



```
package com.hk.web.listener;

import com.netflix.appinfo.ApplicationInfoManager;
import com.netflix.appinfo.EurekaInstanceConfig;
import com.netflix.appinfo.InstanceInfo;
import com.netflix.appinfo.MyDataCenterInstanceConfig;
import com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider;
import com.netflix.discovery.DefaultEurekaClientConfig;
import com.netflix.discovery.DiscoveryClient;
import com.netflix.discovery.EurekaClientConfig;

/**
 * Created by dhruv on 30/4/18.
 */
public class EurekaConfiguration {


        public static ApplicationInfoManager applicationInfoManager;
    public static com.netflix.discovery.EurekaClient eurekaClient;

        private static synchronized ApplicationInfoManager initializeApplicationInfoManager(
                EurekaInstanceConfig instanceConfig) {
            if (applicationInfoManager == null) {
                InstanceInfo instanceInfo = new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get();
                applicationInfoManager = new ApplicationInfoManager(instanceConfig, instanceInfo);
            }

            return applicationInfoManager;
        }

        private static synchronized com.netflix.discovery.EurekaClient initializeEurekaClient(ApplicationInfoManager applicationInfoManager,
                                                                                              EurekaClientConfig clientConfig) {
            if (eurekaClient == null) {
                eurekaClient = new DiscoveryClient(applicationInfoManager, clientConfig);
            }

            return eurekaClient;
        }

        public static com.netflix.discovery.EurekaClient getEurekaClient()
        {
            ApplicationInfoManager applicationInfoManager = initializeApplicationInfoManager(new MyDataCenterInstanceConfig());
            com.netflix.discovery.EurekaClient client = initializeEurekaClient(applicationInfoManager, new DefaultEurekaClientConfig());
            return eurekaClient;
        }
}


```

```
public class HKStartupListener implements ServletContextListener {

  Logger logger = LoggerFactory.getLogger(HKStartupListener.class);

  private AppCacheService appCacheService;
//  private LoadPropertyService loadPropertyService;

  public HKStartupListener() {
  }

  public void contextInitialized(ServletContextEvent event) {
    System.out.println(""================  STARTING EDGE  =================="");

    logger.info("".........  START CACHING  ........."");
    AppConstants.contextPath = event.getServletContext().getContextPath();
    AppConstants.appBasePath = event.getServletContext().getRealPath(""/"");

    logger.info("".........  Reloading Memory Cache  ........."");
    getAppCacheService().reloadAll();

    String runCronJobs = System.getProperty(EnvConstants.RUN_CRON_JOBS);
    logger.info("".........  RUN CRON: "" + runCronJobs + ""  ........."");

    if (StringUtils.isNotBlank(runCronJobs) && Boolean.parseBoolean(runCronJobs)) {
      new EdgeScheduleManager().startup();
    }

    new EdgeScheduleManager().startupAll();
    new EurekaClient().registerClient();
  }
```

complete pom dependencies

```
<dependencies>
	<!-- netflix starts -->
	<dependency>
		<groupId>com.sun.jersey</groupId>
		<artifactId>jersey-client</artifactId>
		<version>1.12</version>
	</dependency>
	<dependency>
		<groupId>com.netflix.eureka</groupId>
		<artifactId>eureka-client</artifactId>
		<version>1.6.2</version>
		<exclusions>
			<exclusion>
				<groupId>javax.ws.rs</groupId>
				<artifactId>jsr311-api</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.netflix.governator/governator -->
	<dependency>
		<groupId>com.netflix.governator</groupId>
		<artifactId>governator</artifactId>
		<version>1.17.5</version>
	</dependency>
	<dependency>
		<groupId>com.netflix.archaius</groupId>
		<artifactId>archaius-core</artifactId>
		<version>0.7.6</version>
	</dependency>
	<!-- <dependency> <groupId>javax.ws.rs</groupId> <artifactId>jsr311-api</artifactId> 
		<version>1.1.1</version> </dependency> -->
	<dependency>
		<groupId>com.netflix.servo</groupId>
		<artifactId>servo-core</artifactId>
		<version>0.12.21</version>
	</dependency>


	<!-- netflix ends -->

	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.9.4</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-annotations</artifactId>
		<version>2.9.4</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.9.4</version>
	</dependency>



	<dependency>
		<groupId>com.hk</groupId>
		<artifactId>HKBridgeClient</artifactId>
		<version>1.2</version>
	</dependency>

	<dependency>
		<groupId>com.hk</groupId>
		<artifactId>HKJms</artifactId>
		<version>2.0</version>
	</dependency>

	<dependency>
		<groupId>com.hk</groupId>
		<artifactId>securePay</artifactId>
		<version>1.48-SNAPSHOT</version>
	</dependency>

	<!--<dependency> <groupId>com.hk</groupId> <artifactId>producer</artifactId> 
		<version>5.0-SNAPSHOT</version> </dependency> -->

	<!-- https://mvnrepository.com/artifact/org.json/json -->
	<dependency>
		<groupId>org.json</groupId>
		<artifactId>json</artifactId>
		<version>20070829</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-core -->
	<dependency>
		<groupId>org.apache.activemq</groupId>
		<artifactId>activemq-core</artifactId>
		<version>5.7.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-pool -->
	<dependency>
		<groupId>org.apache.activemq</groupId>
		<artifactId>activemq-pool</artifactId>
		<version>5.7.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/javax.enterprise.concurrent/javax.enterprise.concurrent-api -->
	<dependency>
		<groupId>javax.enterprise.concurrent</groupId>
		<artifactId>javax.enterprise.concurrent-api</artifactId>
		<version>1.0</version>
		<scope>provided</scope>
	</dependency>

	<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
		<version>3.1.0</version>
		<scope>provided</scope>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.hazelcast/hazelcast -->
	<dependency>
		<groupId>com.hazelcast</groupId>
		<artifactId>hazelcast</artifactId>
		<version>3.8.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.hazelcast/hazelcast-client -->
	<dependency>
		<groupId>com.hazelcast</groupId>
		<artifactId>hazelcast-client</artifactId>
		<version>3.8.3</version>
	</dependency>

	<dependency>
		<groupId>io.connecto</groupId>
		<artifactId>connecto-java</artifactId>
		<version>0.9.4</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.contentful.java/java-sdk -->
	<dependency>
		<groupId>com.contentful.java</groupId>
		<artifactId>java-sdk</artifactId>
		<version>2.0.0</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.amazon`/aws-java-sdk -->
	<dependency>
		<groupId>com.amazonaws</groupId>
		<artifactId>aws-java-sdk</artifactId>
		<version>1.11.73</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/backport-util-concurrent/backport-util-concurrent -->
	<dependency>
		<groupId>backport-util-concurrent</groupId>
		<artifactId>backport-util-concurrent</artifactId>
		<version>3.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.google.api-client/google-api-client -->
	<dependency>
		<groupId>com.google.api-client</groupId>
		<artifactId>google-api-client</artifactId>
		<version>1.20.0</version>
		<exclusions>
			<exclusion>
				<groupId>com.google.guava</groupId>
				<artifactId>guava-jdk5</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.google.api-client/google-api-client-gson -->
	<dependency>
		<groupId>com.google.api-client</groupId>
		<artifactId>google-api-client-gson</artifactId>
		<version>1.23.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.google.http-client/google-http-client -->
	<dependency>
		<groupId>com.google.http-client</groupId>
		<artifactId>google-http-client</artifactId>
		<version>1.20.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
		<groupId>com.google.code.gson</groupId>
		<artifactId>gson</artifactId>
		<version>2.2.4</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api -->
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.2</version>
		<scope>provided</scope>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjrt</artifactId>
		<version>1.8.10</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjweaver</artifactId>
		<version>1.8.10</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
	<dependency>
		<groupId>commons-codec</groupId>
		<artifactId>commons-codec</artifactId>
		<version>1.10</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
	<dependency>
		<groupId>commons-logging</groupId>
		<artifactId>commons-logging</artifactId>
		<version>1.2</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
	<dependency>
		<groupId>org.apache.httpcomponents</groupId>
		<artifactId>httpclient</artifactId>
		<version>4.5.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/software.amazon.ion/ion-java -->
	<dependency>
		<groupId>software.amazon.ion</groupId>
		<artifactId>ion-java</artifactId>
		<version>1.0.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor -->
	<dependency>
		<groupId>com.fasterxml.jackson.dataformat</groupId>
		<artifactId>jackson-dataformat-cbor</artifactId>
		<version>2.6.6</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/com.amazonaws/jmespath-java -->
	<dependency>
		<groupId>com.amazonaws</groupId>
		<artifactId>jmespath-java</artifactId>
		<version>1.11.203</version>
		<exclusions>
			<exclusion>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
	<dependency>
		<groupId>joda-time</groupId>
		<artifactId>joda-time</artifactId>
		<version>2.9.9</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-beans -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-beans</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>${spring.version}</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.springframework/spring-aop -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aop</artifactId>
		<version>${spring.version}</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jms -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jms</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<!-- ************* ********* *************** -->


	<!-- ************* barcode *************** -->
	<!-- https://mvnrepository.com/artifact/net.sf.barcode4j/barcode4j -->
	<dependency>
		<groupId>net.sf.barcode4j</groupId>
		<artifactId>barcode4j</artifactId>
		<version>2.1</version>
	</dependency>

	<!-- ************* ********* *************** -->


	<!-- ************* citrus *************** -->

	<!-- https://mvnrepository.com/artifact/cryptix/cryptix -->
	<dependency>
		<groupId>cryptix</groupId>
		<artifactId>cryptix</artifactId>
		<version>3.2.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/jboss/jnet -->
	<dependency>
		<groupId>jboss</groupId>
		<artifactId>jnet</artifactId>
		<version>3.2.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jglobus/jsse -->
	<dependency>
		<groupId>org.jglobus</groupId>
		<artifactId>jsse</artifactId>
		<version>2.1.0</version>
	</dependency>

	<!-- ************* ********* *************** -->



	<!-- ************* commons *************** -->

	<!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
	<dependency>
		<groupId>commons-beanutils</groupId>
		<artifactId>commons-beanutils</artifactId>
		<version>1.9.3</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/commons-collections/commons-collections -->
	<dependency>
		<groupId>commons-collections</groupId>
		<artifactId>commons-collections</artifactId>
		<version>3.2.2</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 -->
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-dbcp2</artifactId>
		<version>2.0.1</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email -->
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-email</artifactId>
		<version>1.5</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
	<dependency>
		<groupId>commons-fileupload</groupId>
		<artifactId>commons-fileupload</artifactId>
		<version>1.3.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-httpclient/commons-httpclient -->
	<dependency>
		<groupId>commons-httpclient</groupId>
		<artifactId>commons-httpclient</artifactId>
		<version>3.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
	<dependency>
		<groupId>commons-io</groupId>
		<artifactId>commons-io</artifactId>
		<version>2.5</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-lang/commons-lang -->
	<dependency>
		<groupId>commons-lang</groupId>
		<artifactId>commons-lang</artifactId>
		<version>2.6</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-pool/commons-pool -->
	<dependency>
		<groupId>commons-pool</groupId>
		<artifactId>commons-pool</artifactId>
		<version>1.6</version>
	</dependency>



	<!-- https://mvnrepository.com/artifact/com.restfb/restfb -->
	<dependency>
		<groupId>com.restfb</groupId>
		<artifactId>restfb</artifactId>
		<version>1.45.0</version>
	</dependency>


	<!-- ************* ********* *************** -->



	<!-- ************* freemarker *************** -->

	<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->
	<dependency>
		<groupId>org.freemarker</groupId>
		<artifactId>freemarker</artifactId>
		<version>2.3.23</version>
	</dependency>

	<!-- ************* ********* *************** -->



	<!-- ************* http *************** -->

	<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
	<dependency>
		<groupId>com.google.guava</groupId>
		<artifactId>guava</artifactId>
		<version>15.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.ning/async-http-client -->
	<dependency>
		<groupId>com.ning</groupId>
		<artifactId>async-http-client</artifactId>
		<version>1.9.40</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore-nio -->
	<dependency>
		<groupId>org.apache.httpcomponents</groupId>
		<artifactId>httpcore-nio</artifactId>
		<version>4.4.7</version>
	</dependency>


	<!-- ************* ********* *************** -->



	<!-- ************* infispan *************** -->

	<!-- local -->
	<dependency>
		<groupId>org.infinispan</groupId>
		<artifactId>infinispan-core</artifactId>
		<version>5</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.logging/jboss-logging -->
	<dependency>
		<groupId>org.jboss.logging</groupId>
		<artifactId>jboss-logging</artifactId>
		<version>3.3.1.Final</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling -->
	<dependency>
		<groupId>org.jboss.marshalling</groupId>
		<artifactId>jboss-marshalling</artifactId>
		<version>1.3.11.GA</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling-river -->
	<dependency>
		<groupId>org.jboss.marshalling</groupId>
		<artifactId>jboss-marshalling-river</artifactId>
		<version>1.3.11.GA</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.spec.javax.transaction/jboss-transaction-api_1.1_spec -->
	<dependency>
		<groupId>org.jboss.spec.javax.transaction</groupId>
		<artifactId>jboss-transaction-api_1.1_spec</artifactId>
		<version>1.0.1.Final</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/net.jcip/jcip-annotations -->
	<dependency>
		<groupId>net.jcip</groupId>
		<artifactId>jcip-annotations</artifactId>
		<version>1.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jgroups/jgroups -->
	<dependency>
		<groupId>org.jgroups</groupId>
		<artifactId>jgroups</artifactId>
		<version>3.0.11.Final</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/log4j/log4j -->
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.13</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.osgi/org.osgi.core -->
	<dependency>
		<groupId>org.osgi</groupId>
		<artifactId>org.osgi.core</artifactId>
		<version>6.0.0</version>
		<scope>provided</scope>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.rhq.helpers/rhq-pluginAnnotations -->
	<dependency>
		<groupId>org.rhq.helpers</groupId>
		<artifactId>rhq-pluginAnnotations</artifactId>
		<version>3.0.4</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.codehaus.woodstox/stax2-api -->
	<dependency>
		<groupId>org.codehaus.woodstox</groupId>
		<artifactId>stax2-api</artifactId>
		<version>3.1.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.codehaus.woodstox/woodstox-core-asl -->
	<dependency>
		<groupId>org.codehaus.woodstox</groupId>
		<artifactId>woodstox-core-asl</artifactId>
		<version>4.4.1</version>
	</dependency>


	<!-- ************* ********* *************** -->



	<!-- ************* intellij *************** -->

	<!-- https://mvnrepository.com/artifact/com.intellij/annotations -->
	<dependency>
		<groupId>com.intellij</groupId>
		<artifactId>annotations</artifactId>
		<version>12.0</version>
	</dependency>


	<!-- ************* ********* *************** -->



	<!-- ************* itext *************** -->

	<!-- https://mvnrepository.com/artifact/com.lowagie/itext -->
	<dependency>
		<groupId>com.lowagie</groupId>
		<artifactId>itext</artifactId>
		<version>4.2.2</version>
		<type>pom</type>
	</dependency>


	<!-- ************* ********* *************** -->


	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers -->
	<!-- <dependency> <groupId>org.apache.lucene</groupId> <artifactId>lucene-analyzers</artifactId> 
		<version>3.6.2</version> </dependency> -->
	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->
	<dependency>
		<groupId>org.apache.lucene</groupId>
		<artifactId>lucene-core</artifactId>
		<version>${lucene.version}</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-highlighter -->
	<dependency>
		<groupId>org.apache.lucene</groupId>
		<artifactId>lucene-highlighter</artifactId>
		<version>${lucene.version}</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-memory -->
	<dependency>
		<groupId>org.apache.lucene</groupId>
		<artifactId>lucene-memory</artifactId>
		<version>4.10.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queries -->
	<dependency>
		<groupId>org.apache.lucene</groupId>
		<artifactId>lucene-queries</artifactId>
		<version>${lucene.version}</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.xerial.snappy/snappy-java -->
	<dependency>
		<groupId>org.xerial.snappy</groupId>
		<artifactId>snappy-java</artifactId>
		<version>1.1.4</version>
	</dependency>

	<!-- ************* ********* *************** -->



	<!-- ************* json *************** -->

	<!-- https://mvnrepository.com/artifact/net.sf.ezmorph/ezmorph -->
	<dependency>
		<groupId>net.sf.ezmorph</groupId>
		<artifactId>ezmorph</artifactId>
		<version>1.0.6</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib -->
	<dependency>
		<groupId>net.sf.json-lib</groupId>
		<artifactId>json-lib</artifactId>
		<version>2.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
	<dependency>
		<groupId>com.googlecode.json-simple</groupId>
		<artifactId>json-simple</artifactId>
		<version>1.1.1</version>
	</dependency>


	<!-- ************* ********* *************** -->



	<!-- ************* logger *************** -->



	<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-api</artifactId>
		<version>1.5.10</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 -->
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.5.10</version>
	</dependency>

	<!-- ************* ********* *************** -->



	<!-- ************* mysql *************** -->

	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>6.0.6</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jdbc -->
	<dependency>
		<groupId>org.apache.tomcat</groupId>
		<artifactId>tomcat-jdbc</artifactId>
		<version>8.5.21</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-jaxrs -->
	<dependency>
		<groupId>org.codehaus.jackson</groupId>
		<artifactId>jackson-jaxrs</artifactId>
		<version>1.9.12</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/jaxrs-api -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>jaxrs-api</artifactId>
		<version>3.0.12.Final</version>
	</dependency>
	<dependency>
		<groupId>javax.ws.rs</groupId>
		<artifactId>javax.ws.rs-api</artifactId>
		<version>2.1</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-guice -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>resteasy-guice</artifactId>
		<version>3.0.9.Final</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jackson-provider -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>resteasy-jackson-provider</artifactId>
		<version>3.0.9.Final</version>
		<exclusions>
			<exclusion>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-xc</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jaxrs -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>resteasy-jaxrs</artifactId>
		<version>3.0.9.Final</version>
		<!-- <exclusions> <exclusion> <groupId>org.jboss.resteasy</groupId> <artifactId>jaxrs-api</artifactId> 
			</exclusion> </exclusions> -->
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-multipart-provider -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>resteasy-multipart-provider</artifactId>
		<version>3.0.9.Final</version>
		<exclusions>
			<exclusion>
				<groupId>org.jboss.resteasy</groupId>
				<artifactId>resteasy-client</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-spring -->
	<dependency>
		<groupId>org.jboss.resteasy</groupId>
		<artifactId>resteasy-spring</artifactId>
		<version>3.0.9.Final</version>
		<exclusions>
			<exclusion>
				<groupId>org.jboss.resteasy</groupId>
				<artifactId>resteasy-jettison-provider</artifactId>
			</exclusion>
			<exclusion>
				<groupId>org.jboss.resteasy</groupId>
				<artifactId>jaxrs-api</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!-- ************* ********* *************** -->

	<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>



	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-lang3</artifactId>
		<version>3.6</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/dom4j/dom4j -->
	<dependency>
		<groupId>dom4j</groupId>
		<artifactId>dom4j</artifactId>
		<version>1.6.1</version>
	</dependency>

	<!-- &lt;!&ndash; https://mvnrepository.com/artifact/org.hibernate/hibernate-annotations 
		&ndash;&gt; <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-annotations</artifactId> 
		<version>3.5.6-Final</version> </dependency> -->

	<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
	<dependency>
		<groupId>org.hibernate</groupId>
		<artifactId>hibernate-core</artifactId>
		<version>4.3.11.Final</version>
	</dependency>



	<!-- ************* ********* *************** -->



	<!-- ************* hibernate *************** -->

	<!-- https://mvnrepository.com/artifact/net.sourceforge.stripes/stripes -->
	<dependency>
		<groupId>net.sourceforge.stripes</groupId>
		<artifactId>stripes</artifactId>
		<version>1.5.7</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.openjpa/openjpa -->
	<dependency>
		<groupId>org.apache.openjpa</groupId>
		<artifactId>openjpa</artifactId>
		<version>2.4.2</version>
		<exclusions>
			<exclusion>
				<groupId>org.apache.geronimo.specs</groupId>
				<artifactId>geronimo-jpa_2.0_spec</artifactId>
			</exclusion>
		</exclusions>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.springframework/spring-dao -->
	<!-- <dependency> <groupId>org.springframework</groupId> <artifactId>spring-dao</artifactId> 
		<version>2.0.8</version> </dependency> -->

	<!-- https://mvnrepository.com/artifact/org.springframework/spring-orm -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-orm</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-all -->
	<dependency>
		<groupId>shiro</groupId>
		<artifactId>shiro-all</artifactId>
		<version>1.0-incubating-SNAPSHOT</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-web</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.sanselan/sanselan -->
	<dependency>
		<groupId>org.apache.sanselan</groupId>
		<artifactId>sanselan</artifactId>
		<version>0.97-incubator</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.sun.media/jai-codec -->
	<dependency>
		<groupId>com.sun.media</groupId>
		<artifactId>jai-codec</artifactId>
		<version>1.1.3</version>
	</dependency>

	<!-- Local -->
	<dependency>
		<groupId>com.sun.media</groupId>
		<artifactId>jai_imageio</artifactId>
		<version>1.1</version>
	</dependency>

	<!-- local -->
	<dependency>
		<groupId>javax.media</groupId>
		<artifactId>jai_core</artifactId>
		<version>1.1.3</version>
	</dependency>

	<!-- local -->
	<dependency>
		<groupId>thirdparty</groupId>
		<artifactId>mediautil</artifactId>
		<version>1.0</version>
	</dependency>

	<!-- &lt;!&ndash; https://mvnrepository.com/artifact/org.apache.shiro/shiro-web 
		&ndash;&gt; <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-web</artifactId> 
		<version>1.4.0</version> </dependency> -->

	<!-- https://mvnrepository.com/artifact/concurrent/concurrent -->
	<dependency>
		<groupId>concurrent</groupId>
		<artifactId>concurrent</artifactId>
		<version>1.3.4</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.mindrot/jbcrypt -->
	<dependency>
		<groupId>org.mindrot</groupId>
		<artifactId>jbcrypt</artifactId>
		<version>0.4</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactId>
		<version>3.17</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/net.spy/spymemcached -->
	<dependency>
		<groupId>net.spy</groupId>
		<artifactId>spymemcached</artifactId>
		<version>2.12.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/javax.interceptor/javax.interceptor-api -->
	<dependency>
		<groupId>javax.interceptor</groupId>
		<artifactId>javax.interceptor-api</artifactId>
		<version>1.2.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.tinify/tinify -->
	<dependency>
		<groupId>com.tinify</groupId>
		<artifactId>tinify</artifactId>
		<version>1.5.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/net.java.dev.jets3t/jets3t -->
	<dependency>
		<groupId>net.java.dev.jets3t</groupId>
		<artifactId>jets3t</artifactId>
		<version>0.9.4</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
	<dependency>
		<groupId>org.jsoup</groupId>
		<artifactId>jsoup</artifactId>
		<version>1.7.2</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch -->
	<dependency>
		<groupId>org.elasticsearch</groupId>
		<artifactId>elasticsearch</artifactId>
		<version>6.1.1</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport -->
	<dependency>
		<groupId>org.elasticsearch.client</groupId>
		<artifactId>transport</artifactId>
		<version>6.1.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->
	<dependency>
		<groupId>com.itextpdf</groupId>
		<artifactId>itextpdf</artifactId>
		<version>5.2.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.lowagie/itext -->
	<dependency>
		<groupId>com.lowagie</groupId>
		<artifactId>itext</artifactId>
		<version>1.4.8</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/core-renderer -->
	<dependency>
		<groupId>org.xhtmlrenderer</groupId>
		<artifactId>core-renderer</artifactId>
		<version>R8pre2</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/de.congrace/exp4j -->
	<dependency>
		<groupId>de.congrace</groupId>
		<artifactId>exp4j</artifactId>
		<version>0.3.11</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
	<dependency>
		<groupId>com.mchange</groupId>
		<artifactId>c3p0</artifactId>
		<version>0.9.5.2</version>
	</dependency>

	<!-- Local -->
	<dependency>
		<groupId>thirdparty</groupId>
		<artifactId>lzstring4j</artifactId>
		<version>unknown</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all -->
	<dependency>
		<groupId>org.codehaus.groovy</groupId>
		<artifactId>groovy-all</artifactId>
		<version>2.4.12</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api -->
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.2</version>
		<scope>provided</scope>
	</dependency>

	<!-- https://mvnrepository.com/artifact/jfree/jcommon -->
	<dependency>
		<groupId>jfree</groupId>
		<artifactId>jcommon</artifactId>
		<version>1.0.16</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/bsh/bsh -->
	<dependency>
		<groupId>bsh</groupId>
		<artifactId>bsh</artifactId>
		<version>1.3.0</version>
	</dependency>

	<!-- local -->
	<dependency>
		<groupId>org.stripesstuff</groupId>
		<artifactId>stripesstuff</artifactId>
		<version>0.1</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
	<dependency>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-resources-plugin</artifactId>
		<version>3.0.2</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin -->
	<dependency>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-war-plugin</artifactId>
		<version>3.2.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver -->
	<dependency>
		<groupId>org.mongodb</groupId>
		<artifactId>mongo-java-driver</artifactId>
		<version>3.3.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.springframework.data/spring-data-mongodb -->
	<dependency>
		<groupId>org.springframework.data</groupId>
		<artifactId>spring-data-mongodb</artifactId>
		<version>1.9.2.RELEASE</version>
		<exclusions>
			<exclusion>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
			</exclusion>
		</exclusions>
	</dependency>



</dependencies>
```

Is some dependency version mismatch possible here =||= maybe a `mvn dependency:tree`? =||= ```
[INFO]
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ HKEdge ---
[WARNING] The artifact com.lowagie:itext:pom:4.2.2 has been relocated to com.itextpdf:itextpdf:pom:5.5.6
[INFO] HKEdge:HKEdge:war:0.0.1-SNAPSHOT
[INFO] +- com.netflix.eureka:eureka-client:jar:1.6.2:compile
[INFO] |  +- org.codehaus.jettison:jettison:jar:1.3.7:runtime
[INFO] |  |  \- stax:stax-api:jar:1.0.1:runtime
[INFO] |  +- com.netflix.netflix-commons:netflix-eventbus:jar:0.3.0:runtime
[INFO] |  |  +- com.netflix.netflix-commons:netflix-infix:jar:0.3.0:runtime
[INFO] |  |  |  +- commons-jxpath:commons-jxpath:jar:1.3:runtime
[INFO] |  |  |  +- javax.servlet:servlet-api:jar:2.5:runtime
[INFO] |  |  |  \- org.antlr:antlr-runtime:jar:3.4:runtime
[INFO] |  |  |     \- org.antlr:stringtemplate:jar:3.2.1:runtime
[INFO] |  |  \- org.apache.commons:commons-math:jar:2.2:runtime
[INFO] |  +- com.thoughtworks.xstream:xstream:jar:1.4.9:compile
[INFO] |  |  +- xmlpull:xmlpull:jar:1.1.3.1:compile
[INFO] |  |  \- xpp3:xpp3_min:jar:1.1.4c:compile
[INFO] |  +- com.sun.jersey:jersey-core:jar:1.19.1:runtime
[INFO] |  +- com.sun.jersey:jersey-client:jar:1.19.1:runtime
[INFO] |  +- com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime
[INFO] |  \- com.google.inject:guice:jar:4.1.0:compile
[INFO] |     +- javax.inject:javax.inject:jar:1:compile
[INFO] |     \- aopalliance:aopalliance:jar:1.0:compile
[INFO] +- com.netflix.governator:governator:jar:1.17.5:compile
[INFO] |  +- com.netflix.governator:governator-api:jar:1.17.5:compile
[INFO] |  +- com.netflix.governator:governator-core:jar:1.17.5:compile
[INFO] |  |  +- com.google.inject.extensions:guice-multibindings:jar:4.1.0:compile
[INFO] |  |  \- com.google.inject.extensions:guice-grapher:jar:4.1.0:compile
[INFO] |  |     \- com.google.inject.extensions:guice-assistedinject:jar:4.1.0:compile
[INFO] |  \- org.ow2.asm:asm:jar:5.0.4:compile
[INFO] +- com.netflix.archaius:archaius-core:jar:0.7.6:compile
[INFO] |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile
[INFO] |  \- commons-configuration:commons-configuration:jar:1.8:runtime
[INFO] +- com.netflix.servo:servo-core:jar:0.12.21:compile
[INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile
[INFO] +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.4:compile
[INFO] +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile
[INFO] +- com.hk:HKBridgeClient:jar:1.2:compile
[INFO] +- com.hk:HKJms:jar:2.0:compile
[INFO] +- com.hk:securePay:jar:1.48-SNAPSHOT:compile
[INFO] +- org.json:json:jar:20070829:compile
[INFO] +- org.apache.activemq:activemq-core:jar:5.7.0:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
[INFO] |  +- org.apache.activemq:kahadb:jar:5.7.0:compile
[INFO] |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile
[INFO] |  +- org.fusesource.mqtt-client:mqtt-client:jar:1.3:compile
[INFO] |  |  +- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.11:compile
[INFO] |  |  |  \- org.fusesource.hawtdispatch:hawtdispatch:jar:1.11:compile
[INFO] |  |  \- org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile
[INFO] |  +- commons-net:commons-net:jar:3.1:compile
[INFO] |  \- org.jasypt:jasypt:jar:1.9.0:compile
[INFO] +- org.apache.activemq:activemq-pool:jar:5.7.0:compile
[INFO] |  \- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
[INFO] +- javax.enterprise.concurrent:javax.enterprise.concurrent-api:jar:1.0:provided
[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided
[INFO] +- com.hazelcast:hazelcast:jar:3.8.3:compile
[INFO] +- com.hazelcast:hazelcast-client:jar:3.8.3:compile
[INFO] +- io.connecto:connecto-java:jar:0.9.4:compile
[INFO] +- com.contentful.java:java-sdk:jar:2.0.0:compile
[INFO] |  +- com.squareup.retrofit:retrofit:jar:1.8.0:compile
[INFO] |  \- io.reactivex:rxjava:jar:1.0.0:compile
[INFO] +- com.amazonaws:aws-java-sdk:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-pinpoint:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-xray:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-opsworkscm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-support:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-simpledb:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-servicecatalog:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-servermigration:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-simpleworkflow:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-storagegateway:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-route53:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-s3:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-importexport:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sts:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sqs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-rds:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-redshift:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticbeanstalk:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-glacier:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-iam:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-datapipeline:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticloadbalancing:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticloadbalancingv2:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-emr:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticache:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elastictranscoder:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-dynamodb:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sns:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-budgets:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudtrail:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudwatch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-logs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-events:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitoidentity:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitosync:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-directconnect:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudformation:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudfront:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-kinesis:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-opsworks:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ses:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudsearch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudwatchmetrics:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codedeploy:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codepipeline:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-config:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-lambda:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ecs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ecr:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudhsm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ssm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-workspaces:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-machinelearning:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-directory:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-efs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codecommit:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-devicefarm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticsearch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-waf:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-marketplacecommerceanalytics:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-inspector:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-iot:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-api-gateway:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-acm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-gamelift:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-dms:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-marketplacemeteringservice:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitoidp:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-discovery:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-applicationautoscaling:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-snowball:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-rekognition:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-polly:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-lightsail:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-stepfunctions:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-health:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codebuild:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-appstream:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-shield:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-batch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-models:jar:1.11.73:compile
[INFO] |  \- com.amazonaws:aws-java-sdk-swf-libraries:jar:1.11.22:compile
[INFO] +- backport-util-concurrent:backport-util-concurrent:jar:3.0:compile
[INFO] +- com.google.api-client:google-api-client:jar:1.20.0:compile
[INFO] |  +- com.google.oauth-client:google-oauth-client:jar:1.20.0:compile
[INFO] |  \- com.google.http-client:google-http-client-jackson2:jar:1.20.0:compile
[INFO] +- com.google.api-client:google-api-client-gson:jar:1.23.0:compile
[INFO] |  \- com.google.http-client:google-http-client-gson:jar:1.23.0:compile
[INFO] +- com.google.http-client:google-http-client:jar:1.20.0:compile
[INFO] +- com.google.code.gson:gson:jar:2.2.4:compile
[INFO] +- javax.servlet.jsp:jsp-api:jar:2.2:provided
[INFO] +- org.aspectj:aspectjrt:jar:1.8.10:compile
[INFO] +- org.aspectj:aspectjweaver:jar:1.8.10:compile
[INFO] +- commons-codec:commons-codec:jar:1.10:compile
[INFO] +- commons-logging:commons-logging:jar:1.2:compile
[INFO] +- org.apache.httpcomponents:httpclient:jar:4.5.3:compile
[INFO] |  \- org.apache.httpcomponents:httpcore:jar:4.4.6:compile
[INFO] +- software.amazon.ion:ion-java:jar:1.0.1:compile
[INFO] +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.6.6:compile
[INFO] +- com.amazonaws:jmespath-java:jar:1.11.203:compile
[INFO] +- joda-time:joda-time:jar:2.9.9:compile
[INFO] +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-core:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-jms:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-messaging:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.3.11.RELEASE:compile
[INFO] +- net.sf.barcode4j:barcode4j:jar:2.1:compile
[INFO] |  +- avalon-framework:avalon-framework-impl:jar:4.2.0:compile
[INFO] |  +- commons-cli:commons-cli:jar:1.0:compile
[INFO] |  \- org.apache.ant:ant:jar:1.7.1:compile
[INFO] |     \- org.apache.ant:ant-launcher:jar:1.7.1:compile
[INFO] +- cryptix:cryptix:jar:3.2.0:compile
[INFO] +- jboss:jnet:jar:3.2.1:compile
[INFO] +- org.jglobus:jsse:jar:2.1.0:compile
[INFO] |  \- org.jglobus:ssl-proxies:jar:2.1.0:compile
[INFO] +- commons-beanutils:commons-beanutils:jar:1.9.3:compile
[INFO] +- commons-collections:commons-collections:jar:3.2.2:compile
[INFO] +- org.apache.commons:commons-dbcp2:jar:2.0.1:compile
[INFO] |  \- org.apache.commons:commons-pool2:jar:2.2:compile
[INFO] +- org.apache.commons:commons-email:jar:1.5:compile
[INFO] |  \- com.sun.mail:javax.mail:jar:1.5.6:compile
[INFO] +- commons-fileupload:commons-fileupload:jar:1.3.3:compile
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] +- commons-io:commons-io:jar:2.5:compile
[INFO] +- commons-lang:commons-lang:jar:2.6:compile
[INFO] +- commons-pool:commons-pool:jar:1.6:compile
[INFO] +- com.restfb:restfb:jar:1.45.0:compile
[INFO] +- org.freemarker:freemarker:jar:2.3.23:compile
[INFO] +- com.google.guava:guava:jar:15.0:compile
[INFO] +- com.ning:async-http-client:jar:1.9.40:compile
[INFO] |  \- io.netty:netty:jar:3.10.6.Final:compile
[INFO] +- org.apache.httpcomponents:httpcore-nio:jar:4.4.7:compile
[INFO] +- org.infinispan:infinispan-core:jar:5:compile
[INFO] +- org.jboss.logging:jboss-logging:jar:3.3.1.Final:compile
[INFO] +- org.jboss.marshalling:jboss-marshalling:jar:1.3.11.GA:compile
[INFO] +- org.jboss.marshalling:jboss-marshalling-river:jar:1.3.11.GA:compile
[INFO] +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar:1.0.1.Final:compile
[INFO] +- net.jcip:jcip-annotations:jar:1.0:compile
[INFO] +- org.jgroups:jgroups:jar:3.0.11.Final:compile
[INFO] +- log4j:log4j:jar:1.2.13:compile
[INFO] +- org.osgi:org.osgi.core:jar:6.0.0:provided
[INFO] +- org.rhq.helpers:rhq-pluginAnnotations:jar:3.0.4:compile
[INFO] +- org.codehaus.woodstox:stax2-api:jar:3.1.1:compile
[INFO] |  \- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] +- org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1:compile
[INFO] +- com.intellij:annotations:jar:12.0:compile
[INFO] +- com.itextpdf:itextpdf:pom:5.5.6:compile
[INFO] +- org.apache.lucene:lucene-core:jar:7.1.0:compile
[INFO] +- org.apache.lucene:lucene-highlighter:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-analyzers-common:jar:7.1.0:compile
[INFO] |  \- org.apache.lucene:lucene-join:jar:7.1.0:compile
[INFO] +- org.apache.lucene:lucene-memory:jar:4.10.3:compile
[INFO] +- org.apache.lucene:lucene-queries:jar:7.1.0:compile
[INFO] +- org.xerial.snappy:snappy-java:jar:1.1.4:compile
[INFO] +- net.sf.ezmorph:ezmorph:jar:1.0.6:compile
[INFO] +- net.sf.json-lib:json-lib:jar:2.3:compile
[INFO] +- com.googlecode.json-simple:json-simple:jar:1.1.1:compile
[INFO] |  \- junit:junit:jar:4.10:compile
[INFO] |     \- org.hamcrest:hamcrest-core:jar:1.1:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.5.10:compile
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.5.10:compile
[INFO] +- mysql:mysql-connector-java:jar:6.0.6:compile
[INFO] +- org.apache.tomcat:tomcat-jdbc:jar:8.5.21:compile
[INFO] |  \- org.apache.tomcat:tomcat-juli:jar:8.5.21:compile
[INFO] +- org.codehaus.jackson:jackson-jaxrs:jar:1.9.12:compile
[INFO] |  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.12:compile
[INFO] |  \- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.12:compile
[INFO] +- org.jboss.resteasy:resteasy-guice:jar:3.0.9.Final:compile
[INFO] |  \- javax.annotation:jsr250-api:jar:1.0:compile
[INFO] +- org.jboss.resteasy:resteasy-jackson-provider:jar:3.0.9.Final:compile
[INFO] +- org.jboss.resteasy:resteasy-jaxrs:jar:3.0.9.Final:compile
[INFO] |  +- org.jboss.resteasy:jaxrs-api:jar:3.0.9.Final:compile
[INFO] |  +- org.jboss.spec.javax.annotation:jboss-annotations-api_1.1_spec:jar:1.0.1.Final:compile
[INFO] |  \- javax.activation:activation:jar:1.1:compile
[INFO] +- org.jboss.resteasy:resteasy-multipart-provider:jar:3.0.9.Final:compile
[INFO] |  +- org.jboss.resteasy:resteasy-jaxb-provider:jar:3.0.9.Final:compile
[INFO] |  |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.7:compile
[INFO] |  |     +- com.sun.xml.bind:jaxb-core:jar:2.2.7:compile
[INFO] |  |     |  +- javax.xml.bind:jaxb-api:jar:2.2.7:compile
[INFO] |  |     |  \- com.sun.istack:istack-commons-runtime:jar:2.16:compile
[INFO] |  |     \- com.sun.xml.fastinfoset:FastInfoset:jar:1.2.12:compile
[INFO] |  |        \- javax.xml.bind:jsr173_api:jar:1.0:compile
[INFO] |  +- javax.mail:mail:jar:1.5.0-b01:compile
[INFO] |  \- org.apache.james:apache-mime4j:jar:0.6:compile
[INFO] +- org.jboss.resteasy:resteasy-spring:jar:3.0.9.Final:compile
[INFO] +- javax.servlet:jstl:jar:1.2:compile
[INFO] +- org.apache.commons:commons-lang3:jar:3.6:compile
[INFO] +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  \- xml-apis:xml-apis:jar:1.0.b2:compile
[INFO] +- org.hibernate:hibernate-core:jar:4.3.11.Final:compile
[INFO] |  +- org.jboss.logging:jboss-logging-annotations:jar:1.2.0.Beta1:compile
[INFO] |  +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.0.0.Final:compile
[INFO] |  +- org.hibernate.common:hibernate-commons-annotations:jar:4.0.5.Final:compile
[INFO] |  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile
[INFO] |  +- org.javassist:javassist:jar:3.18.1-GA:compile
[INFO] |  +- antlr:antlr:jar:2.7.7:compile
[INFO] |  \- org.jboss:jandex:jar:1.1.0.Final:compile
[INFO] +- net.sourceforge.stripes:stripes:jar:1.5.7:compile
[INFO] +- org.apache.openjpa:openjpa:jar:2.4.2:compile
[INFO] |  +- net.sourceforge.serp:serp:jar:1.15.1:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile
[INFO] |  \- org.apache.xbean:xbean-asm5-shaded:jar:3.17:compile
[INFO] +- org.springframework:spring-orm:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-jdbc:jar:4.3.11.RELEASE:compile
[INFO] +- shiro:shiro-all:jar:1.0-incubating-SNAPSHOT:compile
[INFO] +- org.springframework:spring-web:jar:4.3.11.RELEASE:compile
[INFO] +- org.apache.sanselan:sanselan:jar:0.97-incubator:compile
[INFO] +- com.sun.media:jai-codec:jar:1.1.3:compile
[INFO] |  \- javax.media:jai-core:jar:1.1.3:compile
[INFO] +- com.sun.media:jai_imageio:jar:1.1:compile
[INFO] +- javax.media:jai_core:jar:1.1.3:compile
[INFO] +- thirdparty:mediautil:jar:1.0:compile
[INFO] +- concurrent:concurrent:jar:1.3.4:compile
[INFO] +- org.mindrot:jbcrypt:jar:0.4:compile
[INFO] +- org.apache.poi:poi:jar:3.17:compile
[INFO] |  \- org.apache.commons:commons-collections4:jar:4.1:compile
[INFO] +- net.spy:spymemcached:jar:2.12.3:compile
[INFO] +- javax.interceptor:javax.interceptor-api:jar:1.2.1:compile
[INFO] +- com.tinify:tinify:jar:1.5.1:compile
[INFO] |  \- com.squareup.okhttp3:okhttp:jar:3.8.1:compile
[INFO] |     \- com.squareup.okio:okio:jar:1.13.0:compile
[INFO] +- net.java.dev.jets3t:jets3t:jar:0.9.4:compile
[INFO] |  +- org.bouncycastle:bcprov-jdk15on:jar:1.52:compile
[INFO] |  \- com.jamesmurty.utils:java-xmlbuilder:jar:1.1:compile
[INFO] |     \- net.iharder:base64:jar:2.3.8:compile
[INFO] +- org.jsoup:jsoup:jar:1.7.2:compile
[INFO] +- org.elasticsearch:elasticsearch:jar:6.1.1:compile
[INFO] |  +- org.apache.lucene:lucene-backward-codecs:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-grouping:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-misc:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-queryparser:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-sandbox:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial-extras:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial3d:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-suggest:jar:7.1.0:compile
[INFO] |  +- org.elasticsearch:securesm:jar:1.2:compile
[INFO] |  +- org.elasticsearch:elasticsearch-cli:jar:6.1.1:compile
[INFO] |  |  \- net.sf.jopt-simple:jopt-simple:jar:5.0.2:compile
[INFO] |  +- com.carrotsearch:hppc:jar:0.7.1:compile
[INFO] |  +- org.yaml:snakeyaml:jar:1.17:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.10:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.8.10:compile
[INFO] |  +- com.tdunning:t-digest:jar:3.0:compile
[INFO] |  +- org.hdrhistogram:HdrHistogram:jar:2.1.9:compile
[INFO] |  +- org.apache.logging.log4j:log4j-api:jar:2.9.1:compile
[INFO] |  \- org.elasticsearch:jna:jar:4.4.0-1:compile
[INFO] +- org.elasticsearch.client:transport:jar:6.1.1:compile
[INFO] |  +- org.elasticsearch.plugin:transport-netty4-client:jar:6.1.1:compile
[INFO] |  |  +- io.netty:netty-buffer:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-codec:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-codec-http:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-common:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-handler:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-resolver:jar:4.1.13.Final:compile
[INFO] |  |  \- io.netty:netty-transport:jar:4.1.13.Final:compile
[INFO] |  +- org.elasticsearch.plugin:reindex-client:jar:6.1.1:compile
[INFO] |  |  \- org.elasticsearch.client:elasticsearch-rest-client:jar:6.1.1:compile
[INFO] |  |     \- org.apache.httpcomponents:httpasyncclient:jar:4.1.2:compile
[INFO] |  +- org.elasticsearch.plugin:lang-mustache-client:jar:6.1.1:compile
[INFO] |  |  \- com.github.spullara.mustache.java:compiler:jar:0.9.3:compile
[INFO] |  +- org.elasticsearch.plugin:percolator-client:jar:6.1.1:compile
[INFO] |  \- org.elasticsearch.plugin:parent-join-client:jar:6.1.1:compile
[INFO] +- com.itextpdf:itextpdf:jar:5.2.1:compile
[INFO] +- com.lowagie:itext:jar:1.4.8:compile
[INFO] +- org.xhtmlrenderer:core-renderer:jar:R8pre2:compile
[INFO] +- de.congrace:exp4j:jar:0.3.11:compile
[INFO] +- com.mchange:c3p0:jar:0.9.5.2:compile
[INFO] |  \- com.mchange:mchange-commons-java:jar:0.2.11:compile
[INFO] +- thirdparty:lzstring4j:jar:unknown:compile
[INFO] +- org.codehaus.groovy:groovy-all:jar:2.4.12:compile
[INFO] +- jfree:jcommon:jar:1.0.16:compile
[INFO] +- bsh:bsh:jar:1.3.0:compile
[INFO] +- org.stripesstuff:stripesstuff:jar:0.1:compile
[INFO] +- org.apache.maven.plugins:maven-resources-plugin:jar:3.0.2:compile
[INFO] |  +- org.apache.maven:maven-plugin-api:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-artifact:jar:3.0:compile
[INFO] |  |  \- org.sonatype.sisu:sisu-inject-plexus:jar:1.4.2:compile
[INFO] |  |     \- org.sonatype.sisu:sisu-inject-bean:jar:1.4.2:compile
[INFO] |  |        \- org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7:compile
[INFO] |  +- org.apache.maven:maven-core:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-settings:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-settings-builder:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-repository-metadata:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-model-builder:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-aether-provider:jar:3.0:runtime
[INFO] |  |  +- org.sonatype.aether:aether-impl:jar:1.7:compile
[INFO] |  |  |  \- org.sonatype.aether:aether-spi:jar:1.7:compile
[INFO] |  |  +- org.sonatype.aether:aether-api:jar:1.7:compile
[INFO] |  |  +- org.sonatype.aether:aether-util:jar:1.7:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-classworlds:jar:2.2.3:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile
[INFO] |  |  \- org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile
[INFO] |  |     \- org.sonatype.plexus:plexus-cipher:jar:1.4:compile
[INFO] |  +- org.apache.maven:maven-model:jar:3.0:compile
[INFO] |  +- org.codehaus.plexus:plexus-utils:jar:3.0.24:compile
[INFO] |  +- org.apache.maven.shared:maven-filtering:jar:3.1.1:compile
[INFO] |  |  +- org.apache.maven.shared:maven-shared-utils:jar:3.0.0:compile
[INFO] |  |  \- org.sonatype.plexus:plexus-build-api:jar:0.0.7:compile
[INFO] |  \- org.codehaus.plexus:plexus-interpolation:jar:1.24:compile
[INFO] +- org.apache.maven.plugins:maven-war-plugin:jar:3.2.0:compile
[INFO] |  +- org.apache.maven:maven-archiver:jar:3.2.0:compile
[INFO] |  +- org.codehaus.plexus:plexus-archiver:jar:3.5:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-io:jar:3.0.0:compile
[INFO] |  |  +- org.apache.commons:commons-compress:jar:1.14:compile
[INFO] |  |  +- org.iq80.snappy:snappy:jar:0.4:compile
[INFO] |  |  \- org.tukaani:xz:jar:1.6:runtime
[INFO] |  \- org.apache.maven.shared:maven-mapping:jar:3.0.0:compile
[INFO] +- org.mongodb:mongo-java-driver:jar:3.3.0:compile
[INFO] +- org.springframework.data:spring-data-mongodb:jar:1.9.2.RELEASE:compile
[INFO] |  \- org.springframework.data:spring-data-commons:jar:1.12.2.RELEASE:compile
[INFO] \- hk.kinesis.producer:kinesis-config:jar:0.0.1-SNAPSHOT:compile
[INFO]    +- com.amazonaws:amazon-kinesis-client:jar:1.9.0:compile
[INFO]    |  \- com.google.protobuf:protobuf-java:jar:2.6.1:compile
[INFO]    \- com.amazonaws:amazon-kinesis-producer:jar:0.12.8:compile
[INFO] ------------------------------------------------------------------------

``` =||= based on this output your project doesn't seem to have `javax.ws.rs-api` at all. =||= sorry my mistake I added javax.ws.rs-api dependency today after your suggestion and took dependency tree output from yesterday. Below is dependency tree output now 

```
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ HKEdge ---
[WARNING] The artifact com.lowagie:itext:pom:4.2.2 has been relocated to com.itextpdf:itextpdf:pom:5.5.6
[INFO] HKEdge:HKEdge:war:0.0.1-SNAPSHOT
[INFO] +- com.sun.jersey:jersey-client:jar:1.12:compile
[INFO] |  \- com.sun.jersey:jersey-core:jar:1.12:compile
[INFO] +- com.netflix.eureka:eureka-client:jar:1.6.2:compile
[INFO] |  +- org.codehaus.jettison:jettison:jar:1.3.7:runtime
[INFO] |  |  \- stax:stax-api:jar:1.0.1:runtime
[INFO] |  +- com.netflix.netflix-commons:netflix-eventbus:jar:0.3.0:runtime
[INFO] |  |  +- com.netflix.netflix-commons:netflix-infix:jar:0.3.0:runtime
[INFO] |  |  |  +- commons-jxpath:commons-jxpath:jar:1.3:runtime
[INFO] |  |  |  +- javax.servlet:servlet-api:jar:2.5:runtime
[INFO] |  |  |  \- org.antlr:antlr-runtime:jar:3.4:runtime
[INFO] |  |  |     \- org.antlr:stringtemplate:jar:3.2.1:runtime
[INFO] |  |  \- org.apache.commons:commons-math:jar:2.2:runtime
[INFO] |  +- com.thoughtworks.xstream:xstream:jar:1.4.9:compile
[INFO] |  |  +- xmlpull:xmlpull:jar:1.1.3.1:compile
[INFO] |  |  \- xpp3:xpp3_min:jar:1.1.4c:compile
[INFO] |  +- com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime
[INFO] |  \- com.google.inject:guice:jar:4.1.0:compile
[INFO] |     +- javax.inject:javax.inject:jar:1:compile
[INFO] |     \- aopalliance:aopalliance:jar:1.0:compile
[INFO] +- com.netflix.governator:governator:jar:1.17.5:compile
[INFO] |  +- com.netflix.governator:governator-api:jar:1.17.5:compile
[INFO] |  +- com.netflix.governator:governator-core:jar:1.17.5:compile
[INFO] |  |  +- com.google.inject.extensions:guice-multibindings:jar:4.1.0:compile
[INFO] |  |  \- com.google.inject.extensions:guice-grapher:jar:4.1.0:compile
[INFO] |  |     \- com.google.inject.extensions:guice-assistedinject:jar:4.1.0:compile
[INFO] |  \- org.ow2.asm:asm:jar:5.0.4:compile
[INFO] +- com.netflix.archaius:archaius-core:jar:0.7.6:compile
[INFO] |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile
[INFO] |  \- commons-configuration:commons-configuration:jar:1.8:runtime
[INFO] +- com.netflix.servo:servo-core:jar:0.12.21:compile
[INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile
[INFO] +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.4:compile
[INFO] +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile
[INFO] +- com.hk:HKBridgeClient:jar:1.2:compile
[INFO] +- com.hk:HKJms:jar:2.0:compile
[INFO] +- com.hk:securePay:jar:1.48-SNAPSHOT:compile
[INFO] +- org.json:json:jar:20070829:compile
[INFO] +- org.apache.activemq:activemq-core:jar:5.7.0:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
[INFO] |  +- org.apache.activemq:kahadb:jar:5.7.0:compile
[INFO] |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.1:compile
[INFO] |  +- org.fusesource.mqtt-client:mqtt-client:jar:1.3:compile
[INFO] |  |  +- org.fusesource.hawtdispatch:hawtdispatch-transport:jar:1.11:compile
[INFO] |  |  |  \- org.fusesource.hawtdispatch:hawtdispatch:jar:1.11:compile
[INFO] |  |  \- org.fusesource.hawtbuf:hawtbuf:jar:1.9:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:compile
[INFO] |  +- commons-net:commons-net:jar:3.1:compile
[INFO] |  \- org.jasypt:jasypt:jar:1.9.0:compile
[INFO] +- org.apache.activemq:activemq-pool:jar:5.7.0:compile
[INFO] |  \- org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec:jar:1.0.1:compile
[INFO] +- javax.enterprise.concurrent:javax.enterprise.concurrent-api:jar:1.0:provided
[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided
[INFO] +- com.hazelcast:hazelcast:jar:3.8.3:compile
[INFO] +- com.hazelcast:hazelcast-client:jar:3.8.3:compile
[INFO] +- io.connecto:connecto-java:jar:0.9.4:compile
[INFO] +- com.contentful.java:java-sdk:jar:2.0.0:compile
[INFO] |  +- com.squareup.retrofit:retrofit:jar:1.8.0:compile
[INFO] |  \- io.reactivex:rxjava:jar:1.0.0:compile
[INFO] +- com.amazonaws:aws-java-sdk:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-pinpoint:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-xray:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-opsworkscm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-support:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-simpledb:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-servicecatalog:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-servermigration:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-simpleworkflow:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-storagegateway:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-route53:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-s3:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-importexport:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sts:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sqs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-rds:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-redshift:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticbeanstalk:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-glacier:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-iam:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-datapipeline:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticloadbalancing:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticloadbalancingv2:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-emr:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticache:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elastictranscoder:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-dynamodb:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-sns:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-budgets:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudtrail:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudwatch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-logs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-events:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitoidentity:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitosync:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-directconnect:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudformation:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudfront:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-kinesis:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-opsworks:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ses:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudsearch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudwatchmetrics:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codedeploy:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codepipeline:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-config:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-lambda:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ecs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ecr:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cloudhsm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-ssm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-workspaces:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-machinelearning:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-directory:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-efs:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codecommit:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-devicefarm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-elasticsearch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-waf:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-marketplacecommerceanalytics:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-inspector:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-iot:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-api-gateway:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-acm:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-gamelift:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-dms:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-marketplacemeteringservice:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-cognitoidp:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-discovery:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-applicationautoscaling:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-snowball:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-rekognition:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-polly:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-lightsail:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-stepfunctions:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-health:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-codebuild:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-appstream:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-shield:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-batch:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.73:compile
[INFO] |  +- com.amazonaws:aws-java-sdk-models:jar:1.11.73:compile
[INFO] |  \- com.amazonaws:aws-java-sdk-swf-libraries:jar:1.11.22:compile
[INFO] +- backport-util-concurrent:backport-util-concurrent:jar:3.0:compile
[INFO] +- com.google.api-client:google-api-client:jar:1.20.0:compile
[INFO] |  +- com.google.oauth-client:google-oauth-client:jar:1.20.0:compile
[INFO] |  \- com.google.http-client:google-http-client-jackson2:jar:1.20.0:compile
[INFO] +- com.google.api-client:google-api-client-gson:jar:1.23.0:compile
[INFO] |  \- com.google.http-client:google-http-client-gson:jar:1.23.0:compile
[INFO] +- com.google.http-client:google-http-client:jar:1.20.0:compile
[INFO] +- com.google.code.gson:gson:jar:2.2.4:compile
[INFO] +- javax.servlet.jsp:jsp-api:jar:2.2:provided
[INFO] +- org.aspectj:aspectjrt:jar:1.8.10:compile
[INFO] +- org.aspectj:aspectjweaver:jar:1.8.10:compile
[INFO] +- commons-codec:commons-codec:jar:1.10:compile
[INFO] +- commons-logging:commons-logging:jar:1.2:compile
[INFO] +- org.apache.httpcomponents:httpclient:jar:4.5.3:compile
[INFO] |  \- org.apache.httpcomponents:httpcore:jar:4.4.6:compile
[INFO] +- software.amazon.ion:ion-java:jar:1.0.1:compile
[INFO] +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.6.6:compile
[INFO] +- com.amazonaws:jmespath-java:jar:1.11.203:compile
[INFO] +- joda-time:joda-time:jar:2.9.9:compile
[INFO] +- org.springframework:spring-beans:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-context:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-expression:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-core:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-aop:jar:4.3.11.RELEASE:compile
[INFO] +- org.springframework:spring-jms:jar:4.3.11.RELEASE:compile
[INFO] |  +- org.springframework:spring-messaging:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-tx:jar:4.3.11.RELEASE:compile
[INFO] +- net.sf.barcode4j:barcode4j:jar:2.1:compile
[INFO] |  +- avalon-framework:avalon-framework-impl:jar:4.2.0:compile
[INFO] |  +- commons-cli:commons-cli:jar:1.0:compile
[INFO] |  \- org.apache.ant:ant:jar:1.7.1:compile
[INFO] |     \- org.apache.ant:ant-launcher:jar:1.7.1:compile
[INFO] +- cryptix:cryptix:jar:3.2.0:compile
[INFO] +- jboss:jnet:jar:3.2.1:compile
[INFO] +- org.jglobus:jsse:jar:2.1.0:compile
[INFO] |  \- org.jglobus:ssl-proxies:jar:2.1.0:compile
[INFO] +- commons-beanutils:commons-beanutils:jar:1.9.3:compile
[INFO] +- commons-collections:commons-collections:jar:3.2.2:compile
[INFO] +- org.apache.commons:commons-dbcp2:jar:2.0.1:compile
[INFO] |  \- org.apache.commons:commons-pool2:jar:2.2:compile
[INFO] +- org.apache.commons:commons-email:jar:1.5:compile
[INFO] |  \- com.sun.mail:javax.mail:jar:1.5.6:compile
[INFO] +- commons-fileupload:commons-fileupload:jar:1.3.3:compile
[INFO] +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] +- commons-io:commons-io:jar:2.5:compile
[INFO] +- commons-lang:commons-lang:jar:2.6:compile
[INFO] +- commons-pool:commons-pool:jar:1.6:compile
[INFO] +- com.restfb:restfb:jar:1.45.0:compile
[INFO] +- org.freemarker:freemarker:jar:2.3.23:compile
[INFO] +- com.google.guava:guava:jar:15.0:compile
[INFO] +- com.ning:async-http-client:jar:1.9.40:compile
[INFO] |  \- io.netty:netty:jar:3.10.6.Final:compile
[INFO] +- org.apache.httpcomponents:httpcore-nio:jar:4.4.7:compile
[INFO] +- org.infinispan:infinispan-core:jar:5:compile
[INFO] +- org.jboss.logging:jboss-logging:jar:3.3.1.Final:compile
[INFO] +- org.jboss.marshalling:jboss-marshalling:jar:1.3.11.GA:compile
[INFO] +- org.jboss.marshalling:jboss-marshalling-river:jar:1.3.11.GA:compile
[INFO] +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.1_spec:jar:1.0.1.Final:compile
[INFO] +- net.jcip:jcip-annotations:jar:1.0:compile
[INFO] +- org.jgroups:jgroups:jar:3.0.11.Final:compile
[INFO] +- log4j:log4j:jar:1.2.13:compile
[INFO] +- org.osgi:org.osgi.core:jar:6.0.0:provided
[INFO] +- org.rhq.helpers:rhq-pluginAnnotations:jar:3.0.4:compile
[INFO] +- org.codehaus.woodstox:stax2-api:jar:3.1.1:compile
[INFO] |  \- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] +- org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1:compile
[INFO] +- com.intellij:annotations:jar:12.0:compile
[INFO] +- com.itextpdf:itextpdf:pom:5.5.6:compile
[INFO] +- org.apache.lucene:lucene-core:jar:7.1.0:compile
[INFO] +- org.apache.lucene:lucene-highlighter:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-analyzers-common:jar:7.1.0:compile
[INFO] |  \- org.apache.lucene:lucene-join:jar:7.1.0:compile
[INFO] +- org.apache.lucene:lucene-memory:jar:4.10.3:compile
[INFO] +- org.apache.lucene:lucene-queries:jar:7.1.0:compile
[INFO] +- org.xerial.snappy:snappy-java:jar:1.1.4:compile
[INFO] +- net.sf.ezmorph:ezmorph:jar:1.0.6:compile
[INFO] +- net.sf.json-lib:json-lib:jar:2.3:compile
[INFO] +- com.googlecode.json-simple:json-simple:jar:1.1.1:compile
[INFO] |  \- junit:junit:jar:4.10:compile
[INFO] |     \- org.hamcrest:hamcrest-core:jar:1.1:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.5.10:compile
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.5.10:compile
[INFO] +- mysql:mysql-connector-java:jar:6.0.6:compile
[INFO] +- org.apache.tomcat:tomcat-jdbc:jar:8.5.21:compile
[INFO] |  \- org.apache.tomcat:tomcat-juli:jar:8.5.21:compile
[INFO] +- org.codehaus.jackson:jackson-jaxrs:jar:1.9.12:compile
[INFO] |  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.12:compile
[INFO] |  \- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.12:compile
[INFO] +- org.jboss.resteasy:jaxrs-api:jar:3.0.12.Final:compile
[INFO] +- javax.ws.rs:javax.ws.rs-api:jar:2.1:compile
[INFO] +- org.jboss.resteasy:resteasy-guice:jar:3.0.9.Final:compile
[INFO] |  \- javax.annotation:jsr250-api:jar:1.0:compile
[INFO] +- org.jboss.resteasy:resteasy-jackson-provider:jar:3.0.9.Final:compile
[INFO] +- org.jboss.resteasy:resteasy-jaxrs:jar:3.0.9.Final:compile
[INFO] |  +- org.jboss.spec.javax.annotation:jboss-annotations-api_1.1_spec:jar:1.0.1.Final:compile
[INFO] |  \- javax.activation:activation:jar:1.1:compile
[INFO] +- org.jboss.resteasy:resteasy-multipart-provider:jar:3.0.9.Final:compile
[INFO] |  +- org.jboss.resteasy:resteasy-jaxb-provider:jar:3.0.9.Final:compile
[INFO] |  |  \- com.sun.xml.bind:jaxb-impl:jar:2.2.7:compile
[INFO] |  |     +- com.sun.xml.bind:jaxb-core:jar:2.2.7:compile
[INFO] |  |     |  +- javax.xml.bind:jaxb-api:jar:2.2.7:compile
[INFO] |  |     |  \- com.sun.istack:istack-commons-runtime:jar:2.16:compile
[INFO] |  |     \- com.sun.xml.fastinfoset:FastInfoset:jar:1.2.12:compile
[INFO] |  |        \- javax.xml.bind:jsr173_api:jar:1.0:compile
[INFO] |  +- javax.mail:mail:jar:1.5.0-b01:compile
[INFO] |  \- org.apache.james:apache-mime4j:jar:0.6:compile
[INFO] +- org.jboss.resteasy:resteasy-spring:jar:3.0.9.Final:compile
[INFO] +- javax.servlet:jstl:jar:1.2:compile
[INFO] +- org.apache.commons:commons-lang3:jar:3.6:compile
[INFO] +- dom4j:dom4j:jar:1.6.1:compile
[INFO] |  \- xml-apis:xml-apis:jar:1.0.b2:compile
[INFO] +- org.hibernate:hibernate-core:jar:4.3.11.Final:compile
[INFO] |  +- org.jboss.logging:jboss-logging-annotations:jar:1.2.0.Beta1:compile
[INFO] |  +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.0.0.Final:compile
[INFO] |  +- org.hibernate.common:hibernate-commons-annotations:jar:4.0.5.Final:compile
[INFO] |  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile
[INFO] |  +- org.javassist:javassist:jar:3.18.1-GA:compile
[INFO] |  +- antlr:antlr:jar:2.7.7:compile
[INFO] |  \- org.jboss:jandex:jar:1.1.0.Final:compile
[INFO] +- net.sourceforge.stripes:stripes:jar:1.5.7:compile
[INFO] +- org.apache.openjpa:openjpa:jar:2.4.2:compile
[INFO] |  +- net.sourceforge.serp:serp:jar:1.15.1:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile
[INFO] |  \- org.apache.xbean:xbean-asm5-shaded:jar:3.17:compile
[INFO] +- org.springframework:spring-orm:jar:4.3.11.RELEASE:compile
[INFO] |  \- org.springframework:spring-jdbc:jar:4.3.11.RELEASE:compile
[INFO] +- shiro:shiro-all:jar:1.0-incubating-SNAPSHOT:compile
[INFO] +- org.springframework:spring-web:jar:4.3.11.RELEASE:compile
[INFO] +- org.apache.sanselan:sanselan:jar:0.97-incubator:compile
[INFO] +- com.sun.media:jai-codec:jar:1.1.3:compile
[INFO] |  \- javax.media:jai-core:jar:1.1.3:compile
[INFO] +- com.sun.media:jai_imageio:jar:1.1:compile
[INFO] +- javax.media:jai_core:jar:1.1.3:compile
[INFO] +- thirdparty:mediautil:jar:1.0:compile
[INFO] +- concurrent:concurrent:jar:1.3.4:compile
[INFO] +- org.mindrot:jbcrypt:jar:0.4:compile
[INFO] +- org.apache.poi:poi:jar:3.17:compile
[INFO] |  \- org.apache.commons:commons-collections4:jar:4.1:compile
[INFO] +- net.spy:spymemcached:jar:2.12.3:compile
[INFO] +- javax.interceptor:javax.interceptor-api:jar:1.2.1:compile
[INFO] +- com.tinify:tinify:jar:1.5.1:compile
[INFO] |  \- com.squareup.okhttp3:okhttp:jar:3.8.1:compile
[INFO] |     \- com.squareup.okio:okio:jar:1.13.0:compile
[INFO] +- net.java.dev.jets3t:jets3t:jar:0.9.4:compile
[INFO] |  +- org.bouncycastle:bcprov-jdk15on:jar:1.52:compile
[INFO] |  \- com.jamesmurty.utils:java-xmlbuilder:jar:1.1:compile
[INFO] |     \- net.iharder:base64:jar:2.3.8:compile
[INFO] +- org.jsoup:jsoup:jar:1.7.2:compile
[INFO] +- org.elasticsearch:elasticsearch:jar:6.1.1:compile
[INFO] |  +- org.apache.lucene:lucene-backward-codecs:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-grouping:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-misc:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-queryparser:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-sandbox:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial-extras:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-spatial3d:jar:7.1.0:compile
[INFO] |  +- org.apache.lucene:lucene-suggest:jar:7.1.0:compile
[INFO] |  +- org.elasticsearch:securesm:jar:1.2:compile
[INFO] |  +- org.elasticsearch:elasticsearch-cli:jar:6.1.1:compile
[INFO] |  |  \- net.sf.jopt-simple:jopt-simple:jar:5.0.2:compile
[INFO] |  +- com.carrotsearch:hppc:jar:0.7.1:compile
[INFO] |  +- org.yaml:snakeyaml:jar:1.17:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.10:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.8.10:compile
[INFO] |  +- com.tdunning:t-digest:jar:3.0:compile
[INFO] |  +- org.hdrhistogram:HdrHistogram:jar:2.1.9:compile
[INFO] |  +- org.apache.logging.log4j:log4j-api:jar:2.9.1:compile
[INFO] |  \- org.elasticsearch:jna:jar:4.4.0-1:compile
[INFO] +- org.elasticsearch.client:transport:jar:6.1.1:compile
[INFO] |  +- org.elasticsearch.plugin:transport-netty4-client:jar:6.1.1:compile
[INFO] |  |  +- io.netty:netty-buffer:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-codec:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-codec-http:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-common:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-handler:jar:4.1.13.Final:compile
[INFO] |  |  +- io.netty:netty-resolver:jar:4.1.13.Final:compile
[INFO] |  |  \- io.netty:netty-transport:jar:4.1.13.Final:compile
[INFO] |  +- org.elasticsearch.plugin:reindex-client:jar:6.1.1:compile
[INFO] |  |  \- org.elasticsearch.client:elasticsearch-rest-client:jar:6.1.1:compile
[INFO] |  |     \- org.apache.httpcomponents:httpasyncclient:jar:4.1.2:compile
[INFO] |  +- org.elasticsearch.plugin:lang-mustache-client:jar:6.1.1:compile
[INFO] |  |  \- com.github.spullara.mustache.java:compiler:jar:0.9.3:compile
[INFO] |  +- org.elasticsearch.plugin:percolator-client:jar:6.1.1:compile
[INFO] |  \- org.elasticsearch.plugin:parent-join-client:jar:6.1.1:compile
[INFO] +- com.itextpdf:itextpdf:jar:5.2.1:compile
[INFO] +- com.lowagie:itext:jar:1.4.8:compile
[INFO] +- org.xhtmlrenderer:core-renderer:jar:R8pre2:compile
[INFO] +- de.congrace:exp4j:jar:0.3.11:compile
[INFO] +- com.mchange:c3p0:jar:0.9.5.2:compile
[INFO] |  \- com.mchange:mchange-commons-java:jar:0.2.11:compile
[INFO] +- thirdparty:lzstring4j:jar:unknown:compile
[INFO] +- org.codehaus.groovy:groovy-all:jar:2.4.12:compile
[INFO] +- jfree:jcommon:jar:1.0.16:compile
[INFO] +- bsh:bsh:jar:1.3.0:compile
[INFO] +- org.stripesstuff:stripesstuff:jar:0.1:compile
[INFO] +- org.apache.maven.plugins:maven-resources-plugin:jar:3.0.2:compile
[INFO] |  +- org.apache.maven:maven-plugin-api:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-artifact:jar:3.0:compile
[INFO] |  |  \- org.sonatype.sisu:sisu-inject-plexus:jar:1.4.2:compile
[INFO] |  |     \- org.sonatype.sisu:sisu-inject-bean:jar:1.4.2:compile
[INFO] |  |        \- org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7:compile
[INFO] |  +- org.apache.maven:maven-core:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-settings:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-settings-builder:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-repository-metadata:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-model-builder:jar:3.0:compile
[INFO] |  |  +- org.apache.maven:maven-aether-provider:jar:3.0:runtime
[INFO] |  |  +- org.sonatype.aether:aether-impl:jar:1.7:compile
[INFO] |  |  |  \- org.sonatype.aether:aether-spi:jar:1.7:compile
[INFO] |  |  +- org.sonatype.aether:aether-api:jar:1.7:compile
[INFO] |  |  +- org.sonatype.aether:aether-util:jar:1.7:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-classworlds:jar:2.2.3:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile
[INFO] |  |  \- org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile
[INFO] |  |     \- org.sonatype.plexus:plexus-cipher:jar:1.4:compile
[INFO] |  +- org.apache.maven:maven-model:jar:3.0:compile
[INFO] |  +- org.codehaus.plexus:plexus-utils:jar:3.0.24:compile
[INFO] |  +- org.apache.maven.shared:maven-filtering:jar:3.1.1:compile
[INFO] |  |  +- org.apache.maven.shared:maven-shared-utils:jar:3.0.0:compile
[INFO] |  |  \- org.sonatype.plexus:plexus-build-api:jar:0.0.7:compile
[INFO] |  \- org.codehaus.plexus:plexus-interpolation:jar:1.24:compile
[INFO] +- org.apache.maven.plugins:maven-war-plugin:jar:3.2.0:compile
[INFO] |  +- org.apache.maven:maven-archiver:jar:3.2.0:compile
[INFO] |  +- org.codehaus.plexus:plexus-archiver:jar:3.5:compile
[INFO] |  |  +- org.codehaus.plexus:plexus-io:jar:3.0.0:compile
[INFO] |  |  +- org.apache.commons:commons-compress:jar:1.14:compile
[INFO] |  |  +- org.iq80.snappy:snappy:jar:0.4:compile
[INFO] |  |  \- org.tukaani:xz:jar:1.6:runtime
[INFO] |  \- org.apache.maven.shared:maven-mapping:jar:3.0.0:compile
[INFO] +- org.mongodb:mongo-java-driver:jar:3.3.0:compile
[INFO] +- org.springframework.data:spring-data-mongodb:jar:1.9.2.RELEASE:compile
[INFO] |  \- org.springframework.data:spring-data-commons:jar:1.12.2.RELEASE:compile
[INFO] \- hk.kinesis.producer:kinesis-config:jar:0.0.1-SNAPSHOT:compile
[INFO]    +- com.amazonaws:amazon-kinesis-client:jar:1.9.0:compile
[INFO]    |  \- com.google.protobuf:protobuf-java:jar:2.6.1:compile
[INFO]    \- com.amazonaws:amazon-kinesis-producer:jar:0.12.8:compile

``` =||= Do you have any shareable project with this issue? it will be easier. =||= not right now it's a legacy project which we are trying to integrate with zuul, should I look at some jersey dependencies as it also has RuntimeDelegate class =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1065Not able to access the service through gatewaysimion7605/30/19, 11:12:13 PM"I have employee-service which is registered to Eureka Service (I can see that in Eureka page), I wnat to add load balancer using Zuul, but its not working, following are my application .yml files.

employee-service
*******************

spring:
  application:
    name: employee-service

server:
  port: 8301

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8300/eureka}
  instance:
    preferIpAddress: true
    

eureka-server
**************

spring:
  application:
    name: eureka-server

    
server:
  port: 8300
  
eureka:
  client:
    registerWithEureka: false
    fetchRegistry: false
  server:
      waitTimeInMsWhenSyncEmpty: 0
      maxThreadsForPeerReplication: 0 

gateway-server(Zuul Proxy)
*****************************
server:
  port: 8080

spring:
  application:
    name: zuul-server
    
eureka:
  client:
   serviceUrl:
    defaultZone: http://localhost:8300/eureka

zuul:
  prefix: /api
  routes:
    employee-service:
      path: /employee/**
      serviceId: employee-service

(In Zull proxy application.yml, STS shows ""unknown property 'eureka')

Please let me know , whats wrong with this configuration"this is not the spring cloud netflix issue tracker =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1066How to set the value of total-avail-memory?Ericjsntghf05/30/19, 11:12:13 PMMy server's total memory is 8G, but eureka general info shows me that the total-avail-memory only 246m, I want to set total-avail-memory to 6G, how can we do that?"I believe that is the current allocated heap[1,2], not the max memory[3].

[1] https://github.com/Netflix/eureka/blob/v1.9.0/eureka-core/src/main/java/com/netflix/eureka/util/StatusInfo.java#L75
[2] https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#totalMemory()
[3] https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#maxMemory() =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1067Instances currently registered with EurekaEricjsntghf07/06/18, 12:32:32 AMThe list of Instances currently registered with Eureka cant be refreshed, I started 3 instances, and showed me UP(3), and then stopped 1 instance, but always showed me UP(3), I hope it showed me UP(2), on developer environment, it is ok, on production environment, it is wrong, why?"When the number of instances are less, `eureka.server.renewalPercentThreshold` can cause this behavior. You have not provided your Eureka server and client configurations. 

Please provide configuration and check out [this ](https://github.com/spring-cloud/spring-cloud-netflix/issues/202)similar issue. =||= Hi @jsntghf please see if this updated wiki document answers your question. Thanks.
https://github.com/Netflix/eureka/wiki/Server-Self-Preservation-Mode =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1068not able to register eureka client with ip address vikrantch-hk07/05/18, 10:59:37 PMplease let me know if there is any configuration for registering eureka client with IP instead of hostname. Like in case of spring boot we can use preferIpAddress: true and give ipAddress. "`eureka.instance.preferIpAddress=true` will make instance register to Eureka server with IP address. You do not need  to provide IP address in any configuration as that will be automatically picked up from system by the application. 
 =||= @narenchoudhary it works with Spring boot, is there any similar property for eureka-client in non spring boot applications =||= This configuration is not related to spring boot. Netflix OSS libraries (at least netflix-eureka) do not have any dependency on spring-boot.

[examples folder](https://github.com/Netflix/eureka/tree/master/eureka-examples) has an example project which does not use spring-boot.
[This SO question](https://stackoverflow.com/questions/35409492/eureka-service-discovery-without-spring-boot) is also very similar to your query.  =||= you can do this by declear your own customization config by extend the MyDataCenterInstanceConfig.
`DynamicPropertyFactory configInstance = com.netflix.config.DynamicPropertyFactory.getInstance();
        ApplicationInfoManager applicationInfoManager = initializeApplicationInfoManager(new CustomInstanceConfig ());
        EurekaClient eurekaClient = initializeEurekaClient(applicationInfoManager, new DefaultEurekaClientConfig());`
`public class CustomInstanceConfig extends MyDataCenterInstanceConfig{
	/**
     * prefer ip instant of hostname
     * @param refresh
     * @return
     */
    @Override
    public String getHostName(boolean refresh) {
        try {
            return InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            return super.getHostName(refresh);
        }
    }
}` =||= Thanks @narenchoudhary and @Sanisy for answering the question. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1069Configure hostName in eureka clientdhruvpanwar9505/30/19, 11:11:56 PM"I am not able to configure host name of my micrsoservcie through property given below

eureka.instance.preferIpAddress=true
eureka.preferSameZone=true
eureka.instance.hostname=192.168.70.107
eureka.shouldUseDns=false
eureka.name=api
eureka.vipAddress=192.168.70.107:7070
eureka.appGroup=api

eureka.decoderName=JacksonJson
eureka.port=7070
eureka.port.enabled=true
eureka.traffic.enabled=true"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1070Wrong error handling in DiscoveryJerseyProvider.readFrommayras07/25/18, 12:04:55 AM"This problem already exists long time and makes debugging as mess:

        try {
            return decoder.decode(inputStream, serializableClass);
        } catch (Throwable e) {
            if (e instanceof Error) { // See issue: https://github.com/Netflix/eureka/issues/72 on why we catch Error here.
                closeInputOnError(inputStream);
                throw new WebApplicationException(createErrorReply(500, e, mediaType));
            }
            LOGGER.debug(""Cannot parse request body"", e);
            throw new WebApplicationException(createErrorReply(400, ""cannot parse request body"", mediaType));
        }

This row ""if (e instanceof Error) "" makes a lot of problem, may be better handling? "@mayras the reason this is done is documented at https://github.com/Netflix/eureka/issues/72 . That may no longer be a valid case, but would you mind commenting on what the issues you have seen with catching the Error here? Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1071Fix the inconsistency logic in method updateRenewalThreshold(). neoReMinDneoremind06/25/18, 11:29:34 PM"Fix the inconsistency logic in method `updateRenewalThreshold()`. Because it does not reflect the expected intention based on the comment. 
`updateRenewalThreshold` will be qualified to run if renewal count * 2 is bigger than 
```
serverConfig.getRenewalPercentThreshold() * expectedNumberOfRenewsPerMin
```
NOT
```
serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold
```
""@neoremind 
Hi First of all I think you logic is right : )
In fact this Issues i have already submit a PR, but the author think  i should add some test code. But I not find a best way to test this code , so I close the PR(#1020) If you find the best way to test the code, please tell me.

thanks
 =||= @holy12345 thanks for your reply. I am working on adding test case for the scenario, but before that I got one important question to confirm https://github.com/Netflix/eureka/issues/1073. Feel free to add comments. =||= @holy12345 @qiangdavidliu 
I have added test case for this scenario, please review my code. Many thanks.

I will clarify briefly about what I have done. I create a new testcase named `TimeConsumingInstanceRegistryTest.java` which will run a bunch of sequential events in 2 minutes. I have added detailed comments about the steps that will be executed. 
Here I will paste them out for you to take a look.
```
Verify the following behaviors, the test case will run for 2 minutes.
1. Registration of new instances.
2. Lease expiration.
3. NumOfRenewsPerMinThreshold will be updated. Since this threshold will be updated according to EurekaServerConfig.getRenewalThresholdUpdateIntervalMs(), and discovery client will try to get applications count from peer or remote Eureka servers, the count number will be used to update threshold.
Below shows the time line of a bunch of events in 120 seconds. Here the following setting are configured during registry startup: eureka.renewalThresholdUpdateIntervalMs=5000, eureka.evictionIntervalTimerInMs=10000
       TimeInSecs 0          15         30    40   45         60        75   80      90         105       120
                  |----------|----------|------|----|----------|---------|----|-------|----------|---------|
       Events    (1)        (2)               (3)  (4)        (5)       (6)  (7)                (8)       (9)
       
(1). Remote server started on random port, local registry started as well. 50 instances will be registered to local registry with application name of LOCAL_REGION_APP_NAME and lease duration set to 30 seconds. At this time isLeaseExpirationEnabled=false, getNumOfRenewsPerMinThreshold= (50*2 + 1(initial value))*85%=86
(2). 45 out of the 50 instances send heartbeats to local registry.
(3). Check registry status, isLeaseExpirationEnabled=false, getNumOfRenewsInLastMin=0, getNumOfRenewsPerMinThreshold=86, registeredInstancesNumberOfMYLOCALAPP=50
(4). 45 out of the 50 instances send heartbeats to local registry.
(5). Accumulate one minutes data, and from now on, isLeaseExpirationEnabled=true, getNumOfRenewsInLastMin=90. Because lease expiration is enabled, and lease for 5 instance are expired, so evict 5 instances.
(6). 45 out of the 50 instances send heartbeats to local registry.
(7). Check registry status, isLeaseExpirationEnabled=true, getNumOfRenewsInLastMin=90, getNumOfRenewsPerMinThreshold=86, registeredInstancesNumberOfMYLOCALAPP=45
Remote region add another 150 instances to application of LOCAL_REGION_APP_NAME. This will make PeerAwareInstanceRegistryImpl.updateRenewalThreshold() to refresh AbstractInstanceRegistry.numberOfRenewsPerMinThreshold.
(8). 45 out of the 50 instances send heartbeats to local registry.
(9). Check registry status, isLeaseExpirationEnabled=false, getNumOfRenewsInLastMin=90, getNumOfRenewsPerMinThreshold=256, registeredInstancesNumberOfMYLOCALAPP=45
Note that there is a thread retrieving and printing out registry status for debugging purpose.
```

After reviewing the history of method `updateRenewalThreshold()`. I assume the logic is for the following scenario.
Assuming there are 2 servers, server-A and server-B, each has total 100 heartbeats expected, and expiration threshold is 85. After sometime, server-A becomes an isolated island, losting connection with all clients and peer server-B. Then server-A enables preservation mode to avoid evict many instances. After a while when connection comes back to normal, it finds there are total 200 heartbeats expected from server-B which satisfy the condition of `updateRenewalThreshold()`, if the count is bigger than `85% * numberOfRenewsPerMinThreshold`, then server-A will update its renewal threshold to 170 as what server-B does. And after a while with new heartbeats to server-B and replicating to server-A, server-A will catch up and eventually the two servers are consistent.
@qiangdavidliu could you help me review the case? or if you have more insights. Thanks! =||= @qiangdavidliu would you please review this PR? I suppose you are busy working, but still really appreciate if you could take a look. many thanks. :-)  =||= Thanks @neoremind . I'm a little busy right now, but I'll try to take a look at this when I can. =||= @qiangdavidliu Thanks very much! Take your time. =||= I want to more talk about this issue. In my mind, if client has not send heartbeat,eureka server will remove it. but during remove it , Eureka server why not update those number .(Eureka server use a background task do update two numbers).

I understand this is Eureka architect, but can you explain more why design like this.

I will appreciate you answer.

Thanks  =||= @holy12345 As far as I know, Eureka will update `numberOfRenewsPerMinThreshold` in 4 cases:
* Register new instance.
* Cancel one instance proactively.
* Eureka server opening for traffic and this value is the number of instances replicated from peer.
* In `updateRenewalThreshold()` method where it will be updated in 15mins in background.

But in expired cases, the value will not be updated since self-preservation relies on the value to determine if heartbeats drop below 85% of the expected number, so Eureka should not update this value when removing expired instances. =||= Thanks for you answer, but in my mind `evict` method just remove client information, but not update those two numbers Immediately. Update is on the background task.
Why not update immediately when `evict` method remove client information. =||= OK I get it.
> But in expired cases, the value will not be updated since self-preservation relies on the value to determine if heartbeats drop below 85% of the expected number, so Eureka should not update this value when removing expired instances.

is the reason. =||= @holy12345 you got it :) =||= Oh good. Thank you!
Three days ago i find this logic, but i cann't understand it. I think it is a bug, because it seems all situdation will trigger this update, but i have no confidence.
Then i use one day to read the relative logic and one day to search in baidu.
At the third day, i found you pull request, it's a big help for me to understand the logic, thank you!  =||= @qiangdavidliu Sorry to bring you back, would you please review this PR and test case? I think this could help a lot on the core logic verification. Many thanks!  =||= All guys
I want to know more about this, there is issues also in Netflix production? I agree with @neoremind (its a core logic). so cloud you please tell more things about Netflix how to use eureka in production

Great thanks @qiangdavidliu  =||= @neoremind @holy12345 apologies on not being able to take a look at this, we have been swamped and have not had the bandwidth to work on this.

To answer your question about how we are using this, we are using the existing core logic as is, and have not had any issues with it as far as we can remember. =||= I've seen a situation similar to this in which we had the renewal threshold at 85%. We took down an AZ which resulted in roughly 33% of the registrations disappearing, since this was higher than the threshold, the servers entered self preservation mode and were not able to exit this mode since the update threshold would not update as the services were rescheduled on the remaining AZs. =||= @mattnelson In normal case, `updateRenewalThreshold` will only be updated when adding or dropping instances, if self perseveration is enabled, then if the heartbeats from instances drop below 85% of the expected value, eureka server stops to expire instance and will not quit unless the lost instances are back online to register/renew with eureka server. 
Eureka will also try to get applications from peers, if the count is bigger than the threshold, it will update the `updateRenewalThreshold` of itself, this is what this PR works on to adjust and clarify.
In my opinion, if Eureka enters self preservation mode, and you deliberately offline some servers, Eureka will not quit.  =||= @qiangdavidliu Understand the situation that you are overwhelmed, Netflix grows so fast 👍 If this logic seems unnecessary, how about only adding the test case to eureka?  =||= @neoremind have looked over your changes over the weekend, these look good, and I very much appreciate the test cases attached.

I'll merge this and cut a new release. =||= @qiangdavidliu many thanks! Appreciate your help! :) =||= "Fix the inconsistency logic in method updateRenewalThreshold(). neoReMinDneoremind06/25/18, 11:29:34 PM"Fix the inconsistency logic in method `updateRenewalThreshold()`. Because it does not reflect the expected intention based on the comment. 
`updateRenewalThreshold` will be qualified to run if renewal count * 2 is bigger than 
```
serverConfig.getRenewalPercentThreshold() * expectedNumberOfRenewsPerMin
```
NOT
```
serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold
```
"NaNneoremind05/17/18, 09:25:32 AMUpdate comments.1
1072why InstanceInfo need a overriddenstatus state Xiangjuan JiaXiangjuanJia05/15/18, 01:47:02 PMI've been watching **AbstractInstanceRegistry** class all the time，but i don't understand why instanceinfo need a overriddenstatus state. Please help me, thank you.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1073Eureka will disable expiration forever in some cases?neoReMinDneoremind05/30/19, 11:11:56 PM"If any time, the heartbeat from all clients, a.k.a renewals falls below a percentage which by default configured to 85% in 15min, the server stops expiring instances.  This will happen usually by either `kill -9` on client or network unreachable. 
For example, there are 50 endpoints, and eureka expects 100 heartbeats per min. 
If due to some reason, the heartbeats drops to 80 which is below 85, and eureka will disable expiration, so there are 10 endpoints (should be 20 heartbeats) unavailable. 
But what if this is a permanent state? People just `kill -9` on the 10 endpoints to make them offline? Eureka server will hold these unavailable endpoints for as long as possible because expiration is disabled. Is this case make sense? 
 ""Hi @neoremind 
As far as i know , When the eureka client Down it will sent a message to Eureka Server, so Eureka Server can know its down, also Eureka server can recalculate numbers. If you use `kill -9` The Client will not send message to Eureka Server. So at this time The Eureka Server not recalculate numbers. 

But Eureka server have a  task in background, it will evict client which not sent heartbeat.

If you have any question, Maybe can we use Chinese to communication : )

I hope i can help you!

thanks again 

 =||= @holy12345 The background task is to evict those ones do not send heartbeats as regular basis, but if expiration is disabled, the background task is not able to perform, so those unavailable endpoints will stay if eureka does not enable expiration. =||= Hi. Thanks for the questions, let me try to address these.
1. How does eureka clients 'end' their registration lifecycle?
 - the eureka protocol requires clients to execute an explicit unregister action when they are permanently going away. For example, in the provided java client, this is done in the [shutdown()](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L901) method.
 - any clients that fails 3 consecutive heartbeats is considered to have an unclean termination, and will be evicted by the background eviction process.
2. What happens when too many unclean terminations happen and trigger self preservations?
 - this is typically a rare case and we expect that this happen because of some failure mode. The expectation here is that once recovery has happened, the number of heartbeating clients will go back to be above the expected threshold and the servers will automatically recover from self preservation state. 
 - if however this is expected (or after recovery the number of heartbeating clients does not go back to be above the threshold), you can force the servers to be out of self preservation mode by [temporarily disabling self preservation](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/EurekaServerConfig.java#L112). We would expect that in these cases, a human operation is available to evaluate the situation and take the appropriate action. =||= @qiangdavidliu Thanks for your answer. What you explained makes sense. Abnormal offline instances should be considered as failure endpoints and expected to be back, normal offline is what Eureka expects clients to do. 

In our system, we make self preservation to be dynamic configurable, so that we can change the behavior in runtime.   =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1075only vip display on eureka web uiYangJunjunneyang05/30/19, 11:11:56 PM"client1-demo: 2 instances running on docker swarm/k8s, each ip addr is 10.0.0.11, 10.0.0.12

but the eureka ui display only one instance, with the client1-demo's vip(10.0.0.10):

![qq 20180524202813](https://user-images.githubusercontent.com/6802322/40485415-07980904-5f91-11e8-8100-e1c6b15eee39.png)


how to display all instances?
thanks!
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1076Add some feature about dashboardsagaholy1234505/30/19, 11:11:56 PM"This topic is not issue, I want to know can we add some button on the eureka dashboard. such as add a cancel button, if custome want removie from eureka server  Immediately。""I have the same need...

add a remove button for micro service out of service.  =||= Hi @holy12345 this is not a feature we would need internally at Netflix (we use spinnaker for our needs), but we would be more than happy to support any PRs that add these features to the existing eureka dashboard. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1077Fix the missing logic in method isRegisterable光闪HikariShine05/27/18, 04:53:15 AM"In the isRegisterable method, the logic seems allways return true.
But based on the comment in the method of isRegisterable(), it will return false otherwise.
I think there are missing a return false at the end of Amazon logic.
But it has not a big affect of applications, is need to repair it?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1078Eureka server won't fetch info from peers if client.fetchRegistry is set to falseneoReMinDneoremind05/30/19, 11:11:56 PM"I notice that if client.fetchRegistry is set to false at server side, the server won't replicate from peers because when calling `client.getApplications()`, there is nothing returned since there is no background task fetching remote peers. 
But if we set client.fetchRegistry is set to true, besides the initial replication from peers, the usage of this client only lies to update renewal threshold, so fetching info from peers periodically is useless.
So my question is what is the best practice for setting client.fetchRegistry?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1079change overriddenstatus field name in pojo to allow for better serialization compatibilityDavid Liuqiangdavidliu05/31/18, 10:06:44 PMfurther relax deser behaviour on overriddenstatus field to allow for both lower and camel case"@spencergibb I think this will fix https://github.com/spring-cloud/spring-cloud-netflix/issues/2941, do you agree? =||= Yup =||= This didn't fix things for us, since ` @JsonProperty(""overriddenstatus"")` is still the lowercase version :-( =||= I was wondering about that :(. Let me give it one last shot. =||= Changing that to camel case breaks tests in `EurekaCodecCompatibilityTest` =||= `Unrecognized field ""overriddenstatus""`. The opposite of what we have. When you have something in a branch/fork somewhere, let me know, I'll build and try so we don't end up releasing it broken again. =||= "change overriddenstatus field name in pojo to allow for better serialization compatibilityDavid Liuqiangdavidliu05/31/18, 10:06:44 PMfurther relax deser behaviour on overriddenstatus field to allow for both lower and camel caseNaNDavid Liu05/31/18, 08:03:21 PM"- change overriddenstatus field name in pojo to allow for better serialization compatibility
- futher relax deser behaviour on overriddenstatus field to allow for both lower and camel case"1
1080one more change to relax parsing compatibility due to overiddenstatus casing changeDavid Liuqiangdavidliu06/01/18, 06:25:47 PMNaNapplying your changes locally and testing =||= Looks good on my side. =||= @ryanjbaxter =||= Looks good 👍  =||= one more change to relax parsing compatibility due to overiddenstatus casing changeDavid Liuqiangdavidliu06/01/18, 06:25:47 PMNaNNaNDavid Liu06/01/18, 05:25:49 PMone more change to relax parsing compatibility due to overiddenstatus casing change1
1081eureka peer awareness using dnsSushant Borsebsushant-athena05/30/19, 11:11:57 PM"Hi, I've following config and now I want to get rid of specifying server list and make it dynamic(mybe DNS). Can somebody please suggest my what changes are needed in the below configuration?

```
eureka:
  server:
    port: 8093
    enable-self-preservation: false
  instance:
    hostname: localhost
    ipAddress: 127.0.0.1
    preferIpAddress: true
    instanceId: ${spring.application.name}-${HOST}-${PORT0}
    metadataMap:
      instanceId: ${spring.application.name}-${HOST}-${PORT0}
      dockerImage: ""gateway""
      enableRegisterFilter: ""false""
  client:
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

zuul:
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  server:
    port: 8093
  eureka:
    datacenter: MyOwn
    hostname: localhost
    instance:
      preferIpAddress: true
      metadataMap:
        instanceId: ${spring.application.name}-${HOST}-${PORT0}
    client:
      serviceUrl:
        defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  sensitiveHeaders:
  routes:
    iam:
      path: /iam/**
      url: http://iams_auth:20020
server:
  port: 8093
```

Thanks,
Sushant""Apart from the below mentioned way is there any other way to achive the same?
https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2#configuring-eips-using-dns =||= currently using below config it works but not flexible enough!!
```
eureka:
  datacenter: cloud
  name: eureka
  server:
    port: 8093
    preferSameZone: false
    enable-self-preservation: false
  instance:
    preferIpAddress: true
    instanceId: ${spring.application.name}-${HOST}-${PORT0}
    metadataMap:
      instanceId: ${spring.application.name}-${HOST}-${PORT0}
      dockerImage: ""gateway""
      enableRegisterFilter: ""false""
  client:
    registerWithEureka: true
    region: us-east-1
    fetchRegistry: true
    availabilityZones:
      us-east-1: us-east-1a
    serviceUrl:
      defaultZone: http://ec2-18-200-134-44.compute-1.amazonaws.com/eureka/
      us-east-1a: http://ec2-18-200-134-44.compute-1.amazonaws.com/eureka/

zuul:
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  server:
    port: 8093
  eureka:
    datacenter: cloud
    #hostname: localhost
    instance:
      preferIpAddress: true
      metadataMap:
        instanceId: ${spring.application.name}-${HOST}-${PORT0}
    client:
      registerWithEureka: true
      region: us-east-1
      availabilityZones:
        us-east-1: us-east-1a
      serviceUrl:
        defaultZone: http://ec2-18-200-134-44.compute-1.amazonaws.com/eureka/
        us-east-1a: http://ec2-18-200-134-44.compute-1.amazonaws.com/eureka/
  sensitiveHeaders:
  routes:
    iam:
      path: /iam/**
      url: http://iams_auth:20020
server:
  port: 8093
``` =||= ```
eureka:
  datacenter: cloud
  name: eureka
  #https://github.com/spring-cloud/spring-cloud-netflix/issues/1816
  #asgName: EurekaEIPASG
  server:
    port: 8093
    preferSameZone: false
    enable-self-preservation: false
  instance:
    hostname: localhost
    preferIpAddress: true
    instanceId: ${spring.application.name}-${HOST}-${PORT0}
    metadataMap:
      instanceId: ${spring.application.name}-${HOST}-${PORT0}
      dockerImage: ""gateway""
      enableRegisterFilter: ""false""
  client:
    registerWithEureka: true
    #This must be true for DNS based configuration
    useDnsForFetchingServiceUrls: true
    #This is the suffix added to the DNS requests, so must match the records you create
    eurekaServerDNSName: eurekagw.aws.abc.com
    #This is the url added to the servers returned from DNS. e.g. eurekagw.aws.abc.com will become  http://eurekagw.aws.athenahealth.com/eureka
    eurekaServerURLContext: eureka
    region: us-east-1
    fetchRegistry: true

zuul:
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  server:
    port: 8093
  eureka:
    datacenter: cloud
    hostname: localhost
    instance:
      preferIpAddress: true
      metadataMap:
        instanceId: ${spring.application.name}-${HOST}-${PORT0}
    client:
      registerWithEureka: true
      #For DNS based matching
      useDnsForFetchingServiceUrls: true
      eurekaServerDNSName: eurekagw.aws.abc.com
      eurekaServerURLContext: eureka
      region: us-east-1
  sensitiveHeaders:
  routes:
    iam:
      path: /iam/**
      url: http://iams_auth:20020
server:
  port: 8093
```

With this config I get following error
```
2018-08-19 15:30:29,826 [] DEBUG [main]  org.springframework.beans.factory.support.DefaultListableBeanFactory  - Eagerly caching bean 'zuul-org.springframework.cloud.netflix.zuul.filters.ZuulProperties' to allow for resolving potential circular references
2018-08-19 15:30:29,830 [] ERROR [main]  org.springframework.boot.SpringApplication  - Error handling failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.cloud.netflix.zuul.ZuulProxyConfiguration': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'zuul-org.springframework.cloud.netflix.zuul.filters.ZuulProperties': Initialization of bean failed; nested exception is java.lang.IllegalStateException: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@229d10bd has not been refreshed yet
```

I'm creating txt records in aws route53 for `txt.us-east-1a.eurekagw.aws.abc.com` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1082Eureka in AWSSushant Borsebsushant-athena06/11/18, 03:54:31 PM"Hi,

To get the eureka working in aws using EIP, are following things are enough?
```
1. I have allocated a new EIP from AWS
2. Configured Eureka client based on the Wiki post. Basically modified the region, zone and service URL to reflect the newly allocated EIP.
3. Updated  -Deureka.datacenter=cloud java commandline to reflect use of AWS env.
4. Updated Eureka server properties for 'Test' env to include AWS credentials (this step is required ??)
```
can somebody please review this and let me know that I'm on right track?"the  approach of hardcoding the EIP works fine now, so closing it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1083defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka can't run normallonecloudlonecloud05/30/19, 11:11:57 PM"I using Eureka version is Edgware.SR3,if  i set application.yml using this properties:
```
server:
  port: 8761
eureka:
   instance:
    hostname: localhost
   client:
    register-with-eureka: false
    fetch-registry: false
    service-url:
     defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka
```
It can run normal ,but in http://127.0.0.1:8761/  registered-replicas  is empty  like this:
```

Name | Value
-- | --
total-avail-memory | 400mb
environment | test
num-of-cpus | 4
current-memory-usage | 33mb (8%)
server-uptime | 00:00
registered-replicas |  
unavailable-replicas |  
available-replicas


```
can you help me? 
thanks !"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1084Error in EurekaClientAutoConfiguration while running Eureka ServerRagavanRagavanRevature07/05/18, 10:12:33 PM"Error creating bean with name 'org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.core.env.ConfigurableEnvironment' available: expected at least 1 bean which qualifies as autowire candidate. 
Spring Boot - 2.0.2
Cloud - Finchley.RC2"This is not the spring cloud Netflix issue tracker =||= Thanks @spencergibb . Closing this issue. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1085使用Junit运行springboot工程的时候，为什么注册到Eureka会失败？confusemncat05/30/19, 11:11:57 PM"使用Junit运行springboot工程的时候，为什么注册到Eureka会失败？查看启动日志使用GET方法去请求，但是直接运行工程就会注册成功，并且是使用POST方法去注册的？
If I run the springboot project with junit ，it register on the Eureka failed，the log shows that is use get method to send register infomation to the Eureka ，but register failed.  While I derectly run the project ，it can register on the Eureka successfully ， the log shows that it send  register infomation with post method. This two picture show the log,the first is boot wtih junit  and the second is run directly. 
![image](https://user-images.githubusercontent.com/29520116/41351312-8e1b6efa-6f48-11e8-9922-79a9eb86dfe5.png)
![image](https://user-images.githubusercontent.com/29520116/41351322-960db870-6f48-11e8-80dc-d38be5c5d417.png)"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1086New feature: get connected applicationsJérôme Van Der Lindenjeromevdl05/30/19, 11:11:57 PM"It would be a great feature to know who is connected to who. 

When a service retrieve information about another one (discovery, GET /apps/appid), it could be interesting to register this in order to know that the service is connected to the other. 

Thus, we could build the complete graph of service dependencies. Eureka have all the information, It would be a great pity not to take advantage of it.

I know this is not based on real connections (logs) but it would provide pretty good information for nothing.

What do you think ?"It would be nice to have :). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1087Method isThisMyUrl returns false in setup configured with DNS, is there a workaround?Mikhail Gromovmgtriffid08/21/18, 08:01:49 AM"In our setup Eureka replication is configured following [this guide](https://github.com/Netflix/eureka/wiki/Deploying-Eureka-Servers-in-EC2#configuring-eips-using-dns). DNS records are resolved into AWS ELBs. And looks like this method returns `false` for ELB which actually belongs to stack where this instance is running. Because of that, heartbeats which were sent by clients to particular Eureka instance are replicated to this instance again. And because of that self-preservation can't trigger properly: there are more heartbeats than expected.

Has anybody face this issue? As possible workaround, maybe there is a way to configure instanceInfo.hostName somehow to make it match ELB?

Thanks in advance for advice!""Any news here? =||= In our custom build we ended up with following solution.
Each Eureka node generates random UUID, and exposes an endpoint which just returns this UUID.
Custom implementation of `PeerEurekaNodes` overrides method `isThisMyUrl`, and in this method it first calls mentioned endpoint of passed host. And if this call returns the same UUID this node has generated, it means ""this is my url"", and Eureka remembers that host and always thinks it is it's own host. But I'm not sure how to implement similar functionality in original Eureka, as can't foresee all possible cases. Just sharing an idea here. =||= Thanks @mgtriffid for the proposed solution, that would work. In effect what's required is for eureka servers to have an identity that it can match on. When using hostnames directly, this works, but not when servers are fronted by an ELB. The custom changes by @mgtriffid may be something that can be generalised into something that can work with both hostnames and custom UUIDs, and we would welcome such a PR for this project. =||= Submitted a [PR](https://github.com/Netflix/eureka/pull/1101), @qiangdavidliu .

With this PR Eureka still first tries to perform regular check, and only if it fails, we try to fetch peer id.

Also, I've added check only for replications and not for initial resolving peers, because in common scenario (when several instances are starting at the same time) we can't contact peers, as they are not open for traffic yet. Also wanted to perform calls to peers through common mechanism of `EurekaHttpClient`, hence, had to add method to `PeerEurekaNode`, and we don't have instances of `PeerEurekaNode` during initial URLs resolution. =||= Hi @mgtriffid 
I face the issue which maybe the same to you.
When I start a `eureka server` in local, and start a `eureka client`,  I see the server log has two register log. By the debug the source code , I found `isThisMyUrl` is check not total right

In my mind I think when a `eureka client` start It will register to `eureka server` and `eureka server` will replicate to peer node(In replicate logic, it should skip itself).

But I found it not skip itself : (
 =||= @holy12345 , PR https://github.com/Netflix/eureka/pull/1107 is merged and included in 1.9.4, please see if new config parameter fits your needs.
I guess we can close this now. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1088Concurrent register of custom healthcheck handler in DiscoveryClientTaras Danylchuktdanylchuk06/25/18, 11:40:14 PM"Some clients try to register their health checks and fail since there is possibility to rewrite healthcheck handler by default one.

Root cause:
after not thread safe null check DiscoveryClient will register default healthcheck handler even if during creation of that, custom one will be provided.
Resolution summary:
wrap healthcheck handler in AtomicReference and set default implementation only if reference still contain null.

Example is spring-cloud-netflix project and https://github.com/spring-cloud/spring-cloud-netflix/issues/2490 issue."@tdanylchuk looks good, thanks for the contribution. =||= My pleasure, thank you for supporting the project. =||= Concurrent register of custom healthcheck handler in DiscoveryClientTaras Danylchuktdanylchuk06/25/18, 11:40:14 PM"Some clients try to register their health checks and fail since there is possibility to rewrite healthcheck handler by default one.

Root cause:
after not thread safe null check DiscoveryClient will register default healthcheck handler even if during creation of that, custom one will be provided.
Resolution summary:
wrap healthcheck handler in AtomicReference and set default implementation only if reference still contain null.

Example is spring-cloud-netflix project and https://github.com/spring-cloud/spring-cloud-netflix/issues/2490 issue."NaNTaras Danylchuk06/21/18, 01:02:24 PM"Some clients try to register their health checks and fail since there is possibility to rewrite healthcheck handler by default one.

Root cause:
after not thread safe null check DiscoveryClient will register default healthcheck handler even if during creation of that, custom one will be provided.
Resolution summary:
wrap healthcheck handler in AtomicReference and set default implementation only if reference still contain null"1
1089eureka server demo jersey problem on wildfly 10.1KenHankenImas05/30/19, 11:11:57 PM"Hi all,

Following the instructions ""Running the demo application"" I built the eureka project and deployed the resulting war (renamed it to eureka.war before deploying) on my wildfly server. After the application starts up, the following error is thrown when the client sends a heartbeat:

12:43:25,819 ERROR [io.undertow.request] (default task-3) UT005023: Exception handling request to /eureka/v2/apps/: com.sun.jersey.api.container.ContainerException: The ResourceConfig instance does not contain any root resource classes.
	at com.sun.jersey.server.impl.application.RootResourceUriRules.<init>(RootResourceUriRules.java:99)
	at com.sun.jersey.server.impl.application.WebApplicationImpl._initiate(WebApplicationImpl.java:1359)
	at com.sun.jersey.server.impl.application.WebApplicationImpl.access$700(WebApplicationImpl.java:180)
	at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:799)
	at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:795)
	at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:193)
	at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795)
	at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790)
	at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:509)
	at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:339)
	at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605)
	at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207)
	at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:394)
	at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:744)
	at io.undertow.servlet.core.LifecyleInterceptorInvocation.proceed(LifecyleInterceptorInvocation.java:111)
	at org.wildfly.extension.undertow.security.RunAsLifecycleInterceptor.init(RunAsLifecycleInterceptor.java:84)
	at io.undertow.servlet.core.LifecyleInterceptorInvocation.proceed(LifecyleInterceptorInvocation.java:97)
	at io.undertow.servlet.core.ManagedFilter.createFilter(ManagedFilter.java:80)
	at io.undertow.servlet.core.ManagedFilter.getFilter(ManagedFilter.java:66)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at com.netflix.eureka.GzipEncodingEnforcingFilter.doFilter(GzipEncodingEnforcingFilter.java:48)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at com.netflix.eureka.ServerRequestAuthFilter.doFilter(ServerRequestAuthFilter.java:52)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at com.netflix.eureka.StatusFilter.doFilter(StatusFilter.java:68)
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
	at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
	at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
	at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44)
	at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44)
	at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44)
	at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44)
	at io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1.call(LegacyThreadSetupActionWrapper.java:44)
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202)
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:805)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)


By the looks of it, it seems that jersey can't find any resource classes. Anyone have a clue as to what causes this and how it can be fixed?

Note: When deploying on tomcat I don't get this problem, by looking at the logs I can see that jersey can find the resources:

22-Jun-2018 11:25:35.078 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] com.sun.jersey.api.core.ScanningResourceConfig.logClasses Root resource classes found:
  class com.netflix.appinfo.HealthCheckResource
  class com.netflix.eureka.resources.PeerReplicationResource
  class com.netflix.eureka.resources.VIPResource
  class com.netflix.eureka.resources.StatusResource
  class com.netflix.eureka.resources.InstancesResource
  class com.netflix.eureka.resources.ApplicationsResource
  class com.netflix.eureka.resources.SecureVIPResource
  class com.netflix.eureka.resources.ASGResource
  class com.netflix.eureka.resources.ServerInfoResource
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
10901.X 持续更新么？weirweir201007/05/18, 09:55:03 PM1.X 持续更新么？1.X is pretty stable and in production-level, spring-cloud relies on 1.X. If there is demand I think community would play a big role in maintaining this. For your question, I think @qiangdavidliu might be the right person to answer. =||= Hi. The 1.x branch of eureka still form the core of the service discovery ecosystem at Netflix and will continue to be maintained. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
10911.x Continue to update?ThinOfSnowDanceThinOfSnowDance07/05/18, 09:54:41 PM"### 1.x Continue to update?""same concern. https://github.com/Netflix/eureka/issues/1090 =||= Though I'm not part of netflix, I'm fairly confident eureka will live on for quite a while. =||= @spencergibb thumb up!  =||= the 2.x work (on the 2.x branch) have been abandoned, but the 1.x branch of eureka still form the core of the service discovery ecosystem at Netflix and will continue to be maintained. =||= But now I'm confused about ""extension work on eureka 1.x has moved internally within Netflix."".
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
10922.xgaoyining07/05/18, 09:29:21 PMNaNcomment =||= Hi, please note that `The open source work on eureka 2.0 has been discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.` =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1093Add possibility to configure expected interval between clients' renew…Mikhail Gromovmgtriffid07/17/18, 04:19:36 AM"…s and not break self-preservation

Currently, if one sets renewal interval different from 30 seconds on clients, self-preservation doesn't work correctly. For example, see https://github.com/spring-cloud/spring-cloud-netflix/issues/373 . This PR adds possibility to configure expected renewal interval on Eureka server, so that if clients send renews every, say, 20 seconds, then SP threshold is `0.85 * 3 * count`, not `0.85 * 2 * count`.""@mgtriffid Thanks your PR : )
Tiny things.
Could you please add some validate about `serverConfig.getExpectedClientRenewalIntervalSeconds()` is not zero. =||= I think there might be a more aggressive solution to make heartbeats interval configurable. Because there are too many hard code by `/ 2` in class `AbstractInstanceRegistry` and `PeerAwareInstanceRegistryImpl`, if we set so then there is no need to add this parameter.  =||= > I think you may need to make a change here too:
https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L294

Sorry, I don't get it what do these two minutes mean. This seems to be an expiration check, but it uses lease duration and last lease renewal, and I can't understand why do we need to add 2 minutes. Could you kindly explain, @qiangdavidliu ?

Addressed other comments. =||= @mgtriffid no worries, that was a minor issue. Thank you for the PR. =||= "Add possibility to configure expected interval between clients' renew…Mikhail Gromovmgtriffid07/17/18, 04:19:36 AM"…s and not break self-preservation

Currently, if one sets renewal interval different from 30 seconds on clients, self-preservation doesn't work correctly. For example, see https://github.com/spring-cloud/spring-cloud-netflix/issues/373 . This PR adds possibility to configure expected renewal interval on Eureka server, so that if clients send renews every, say, 20 seconds, then SP threshold is `0.85 * 3 * count`, not `0.85 * 2 * count`."NaNMikhail Gromov07/11/18, 09:22:32 AMCheck that expectedClientRenewalIntervalSeconds is > 01
1094com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known serverjayzc123405/30/19, 11:11:57 PM"i do as ""https://github.com/Netflix/eureka/wiki/Building-Eureka-Client-and-Server"" told to do,but when i start tomct server and get a exception ""Cannot execute request on any known server"".but that demo guide page tells not to edit eureka-server.properties.so why is that?""because your server is registering to other eureka server. you may config as below：
registerWithEureka: false =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1095can i put some global metadata in eureka?dragontree101dragontree10107/10/18, 07:25:10 AM"i found metadata must in one instance, i want to config some global metadata in eureka, how can i put some metadata detach from instance instead of global

i found only restful api

```
PUT /eureka/v2/apps/appID/instanceID/metadata?key=value
```


thanks""You cannot. Eureka is an instance-level registry. There is no place for service-level metadata in the registry hierarchy. Unfortunately, you will have to add any metadata at the instance level. 

Consul has support for service-level information.  =||= thanks, change eureka to consul is hard ...      :( 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1096Cache capacity configurablesagaholy1234507/10/18, 08:50:45 PM"Hi @qiangdavidliu 

When `ResponseCacheImpl#readWriteCacheMap` init, it use hardcode to make initial capacity, so I add a parameter which can let customer decide the initial capacity.

Please check it.

Thanks : )"Looks good, thanks @holy12345 . =||= Cache capacity configurablesagaholy1234507/10/18, 08:50:45 PM"Hi @qiangdavidliu 

When `ResponseCacheImpl#readWriteCacheMap` init, it use hardcode to make initial capacity, so I add a parameter which can let customer decide the initial capacity.

Please check it.

Thanks : )"NaNholy1234507/10/18, 02:12:51 AMCache capacity configurable1
1097Tiny improvesagaholy1234507/10/18, 08:49:17 PMRemove magic number and replaced by `Status`Looks good, thanks @holy12345 . =||= Tiny improvesagaholy1234507/10/18, 08:49:17 PMRemove magic number and replaced by `Status`NaNholy1234507/10/18, 08:21:41 AMUse Status replace magic number1
1098DiscoveryClient.localRegionApps not clear application without any instancesAddo.Zhangaddozhang08/02/18, 09:54:17 PM"Eureka client still holds those applications who has no any instances in `DiscoveryClient.localRegionApps`. The only way to delete them I found is setting `eureka.client.log-delta-diff` as true. But this approach will add one more full fetch request after delta request. 

In method `updateDelta()`, the logic of handling instance deleted is confused. Even not apps exists, it still adds app back, and does removing op again. 

```java
if (ActionType.DELETED.equals(instance.getActionType())) {
    Application existingApp = applications.getRegisteredApplications(instance.getAppName());
    if (existingApp == null) {
        applications.addApplication(app);
    }
    logger.debug(""Deleted instance {} to the existing apps "", instance.getId());
    applications.getRegisteredApplications(instance.getAppName()).removeInstance(instance);
}
```

I think the correct logic is if no app exists, do nothing. If exists, remove instance from it and **check if it has any instance up. If no, remove app.**""Hi @addozhang

I submit a PR about this issues, welcome you check it.

Thanks  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1099x'xBruce LiSilongLi07/11/18, 03:21:24 AMxx NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1100Fix 1098sagaholy1234508/02/18, 09:54:17 PM"Hi @qiangdavidliu 

This PR fix #1098 please check it.

Thanks : )""@holy12345 thanks for the PR. This looks good in theory, though I would like to get some additional verification on whether this is safe to do as removal of apps is not something that expected in current client behaviour. Can you please add some testing to verify? `DiscoveryClientRegistryTest` would be a good starting point for this. Thanks. =||= @qiangdavidliu Great thanks : )

I will add some test for this PR.
One more things could you please give me your personal email? If you think it inconvenient to disclose it in public, I can give you my email address(Because I want more discuss with you about eureka).

My email address is spring_holy@163.com

Thanks again =||= Hi @qiangdavidliu  First of all thank you!

I add some test case for this PR, please you check it .

You say 
> removal of apps is not something that expected in current client behaviour

So I think in some case there have many application has no instanceInfo when merge the delta information(the action type is DELETE)

According to your thoughts which is best ?

- When application has no instanceInfo, we remove application(this PR logic)

- Optimize the original logic, the code like this

```
if (ActionType.DELETED.equals(instance.getActionType())) {
    Application existingApp = applications.getRegisteredApplications(instance.getAppName());
    if (existingApp != null) {
        logger.debug(""Deleted instance {} to the existing apps "", instance.getId());
        applications.getRegisteredApplications(instance.getAppName()).removeInstance(instance);
    }
}
```

Thanks again : ) =||= Looks good, thanks @holy12345 . =||= "Fix 1098sagaholy1234508/02/18, 09:54:17 PM"Hi @qiangdavidliu 

This PR fix #1098 please check it.

Thanks : )"NaNholy1234507/27/18, 02:19:14 AMAdd test case1
1101"EUREKA-1087 Add one more check for ""is this my url"", so that even whe…"Mikhail Gromovmgtriffid08/02/18, 07:42:38 AM…n each node is behind ELB, heartbeats are not replicated to the node they originally were sent to"@mgtriffid thanks for the PR. We will take a look at this. =||= Can the existing instance id be used for self identification? It is already a unique identifier.

Introducing a new endpoint complicates deployment considerations with rollout of this feature and adds more complexity. Additionally, eureka is already pretty chatty between the peers and with heartbeats. I would like to explore other options that don't add more requests. =||= @mattnelson , probably, yes, existing instance id should work.
Speaking of not introducing new requests. When Eureka resolves addresses of peers through DNS, hosts in txt records are the only information it has. Sorry, I don't understand, how can Eureka find corresponding instance ids if not trying these hosts?
Maybe there already exists some request from which we could understand if caller == callee? If so, could you please suggest, where should I look?

Speaking of peers being chatty - please note that these requests are executed only for some short time after deployment, until Eureka finally calls itself and understands ""yeah, this peer is actually me"". After that, these requests don't happen.

Speaking of complicated deployment - yes, adding new resource to web server is required. But gradual rollout shouldn't be a problem: at some point Eureka will finally call itself (and if Eureka has this check - it means it has endpoint too), will figure out that called peer is actually the same node, and will stop doing these requests.

Overall, I certainly understand that this looks like a kludge, would be happy to find better solution. =||= @mgtriffid I think @mattnelson raise some good points here about additional complexity that would be involved with this change. Does your deployment model support node specific configs? If so, the below strategy may be an easier way of achieving the same goal:
1. introduce a config variable that can be set to override the isThisMe url that is checked at https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNodes.java#L246. Doing this eureka nodes can be configured to match on custom names that does not have to be the local hostname.
2. in your deployment, set this config to be the ELB hostname that correspond to each node. =||= @qiangdavidliu , @mattnelson , thanks for ideas! Yes, this option with new configuration parameter is certainly much easier. Submitted new PR https://github.com/Netflix/eureka/pull/1107, declining this one. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1102Question: I see that client instance is deleted from Eureka node, but can't find how exactlyMikhail Gromovmgtriffid05/30/19, 11:11:58 PM"Hi guys, I'm performing some destruction testing against Eureka cluster, and it behaves good, but I don't fully understand why :)

#### Environment:
3 Eureka servers in replication. Self-preservation enabled. Logging level is DEBUG. 16 clients are talking to them.

#### What I do:
1. On one of Eureka nodes (let's call it **Failure Peer**) I execute
`sudo iptables -A INPUT -p tcp --dport 8010 -j DROP`
, ruining all incoming requests.
2. Wait some time, around 3 minutes.
3. Kill (literally, `sudo kill -9`) one of clients and send DELETE request to one of healthy peers.
4. Wait 5 minutes.
5. Fix artificial networking issue by executing
`sudo iptables -D INPUT -p tcp --dport 8010 -j DROP`
on **Failure Peer**

#### What I see:
Killed and deleted client is deleted from both healthy nodes instantly, and I see log entries about that:
`Cancelled instance myService/myInstanceId (replication=true)` <- from where cancellation was replicated
`Cancelled instance myService/myInstanceId (replication=false)` <- from where DELETE request was sent
And when I fix network by removing iptables rule, I see that this client is removed from **Failure Peer** too.

#### What makes me scratch my head:
I don't see anything related to deletion in logs of **Failure Peer**. If this deletion happens because replication events are finally delivered, then I'd expect to see a message similar to ones above, as during replication method cancel() of instance registry is called. If it was expiration, I'd expect to see logged message saying that instance is expired, but there is no such message. I only see that `EurekaClient` was able to fetch delta from peers and delete instance from client-side registry:
`Deleted instance myInstanceId to the existing apps`
(that iptables rule breaks incoming connections, but outgoing requests work fine).
This puzzles me. Is there any connection between `EurekaClient` and `PeerAwareInstanceRegistryImpl` except method syncUp(), which, seemingly, is called only at startup (we don't use EIP binding)?
Can you please give me a direction to dig? I just want to understand Eureka as deeply as possible and want to foresee as many issues as possible. And neither logs nor debugging helped me to figure out how does Eureka behave in this scenario.

Thank you guys for this software!"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1103Race condition in one application server between Eureka/CloudConfig server and clientThoralf Rickert-Wendttrickert7605/30/19, 11:11:58 PM"I've a very strange setup - some of our customers need a ""supported application server"" as a runtime environment and they don't want two or more servers runing (only one). So, our Spring boot application need to run in one application server but without code changes also on two, three or more for other customers or as JARs. Because all of that, I cannot use EARs.

The infrastructure for the problem is very simple. A Eureka server, a Cloud Config Server and a simple Eureka/CloudConfig client in one Application server. When the WARs of the servers are up and running, I can put the client WAR into deployments, then the client service connects to the Eureka server, find the instance of the cloud config server, reads the configuration and everything is okay.

But when I shutdown/restart the application server (Wildfly, JBoss, WLS), I run into a race condition. The client service cannot reach the servers. This is the bootstrap.yml
```

spring:
    application:
        name: myclient
    jmx:
        default-domain: myclient
    cloud:
        config:
            username: user
            password: pass
            discovery:
                enabled: true
                serviceId: CONFIGURATION
            retry:
                maxAttempts: 10
                initialInterval: 15000

eureka:
    instance:
        hostname: localhost
        securePortEnabled: true
        nonSecurePortEnabled: false
        nonSecurePort: 80
        metadataMap:
            configPath: ${server.servletPath}
        homePageUrlPath: ${server.servletPath}
        statusPageUrlPath: ${server.servletPath}/actuator/info
        healthCheckUrlPath: ${server.servletPath}/actuator/health
    client:
        serviceUrl:
            defaultZone: https://user:pass@localhost:8443/my-ds/eureka
``` 
The initialInterval reduces the number of retries during bootstrap. But after everything is up, the client and the configuration service is registered in Eureka, but I get every 30sec or so an exception from the client, that it cannot find a CONFIGURATION instance. 

The problem is, that the autowired configurations that values are stored in the config server are null. I tried to make a Thread.sleep() in the  SpringBootServletInitializer.configure(SpringApplicationBuilder application), but that doesn't help too.

The following exception is the first, that comes during startup, saying, it cannot connect (which is okay for me, everything is starting parallel). This is of course from the Eureka client.

```
11:25:26,726 ERROR [com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient] (ServerService Thread Pool -- 93) Request execution error: com.sun.jersey.api.client.ClientHandlerException: java.net.SocketTimeoutException: Read timed out
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
        at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:194)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1051)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:965)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:414)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:269)
        at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:63)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:269)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8b0bd015.CGLIB$eurekaClient$0(<generated>)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8b0bd015$$FastClassBySpringCGLIB$$db7da68e.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8b0bd015.eurekaClient(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:579)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1254)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1103)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:353)
        at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:390)
        at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:184)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:350)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:167)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:156)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:39)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:80)
        at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:181)
        at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:52)
        at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:356)
        at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:157)
        at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:121)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:885)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87)
        at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:204)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:186)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:251)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:96)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:78)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)
Caused by: java.net.SocketTimeoutException: Read timed out
        at java.net.SocketInputStream.socketRead0(Native Method)
        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
        at java.net.SocketInputStream.read(SocketInputStream.java:171)
        at java.net.SocketInputStream.read(SocketInputStream.java:141)
        at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)
        at sun.security.ssl.InputRecord.read(InputRecord.java:503)
        at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:983)
        at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:940)
        at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)
        at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:161)
        at org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:82)
        at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:278)
        at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)
        at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)
        at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)
        at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:286)
        at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257)
        at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:230)
        at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)
        at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
        at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:684)
        at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:486)
        at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118)
        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173)
        ... 89 more
```
A second exception comes a little bit later:
```
11:25:51,095 ERROR [com.netflix.discovery.DiscoveryClient] (ServerService Thread Pool -- 88) DiscoveryClient_MACH-MARK2/thoralfs-mbp-2.fritz.box:mach-mark2:9998 - was unable to refresh its cache! status = Cannot execute request on any known server: com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
        at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1051)
        at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:965)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:414)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:269)
        at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:63)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:240)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaClientConfiguration$$EnhancerBySpringCGLIB$$e2e6f298.CGLIB$eurekaClient$0(<generated>)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaClientConfiguration$$EnhancerBySpringCGLIB$$e2e6f298$$FastClassBySpringCGLIB$$493c2eea.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:361)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaClientConfiguration$$EnhancerBySpringCGLIB$$e2e6f298.eurekaClient(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:579)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1254)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1103)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:470)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1254)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1103)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
        at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:815)
        at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:721)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:470)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1254)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1103)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:541)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1348)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:578)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:501)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:317)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:315)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:760)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
        at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:137)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:197)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
        at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74)
        at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54)
        at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:358)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87)
        at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:204)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:186)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:251)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:96)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:78)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)

```

And then - the end - the Cloud config cannot be loaded and every 30sec the following exception comes up. All AutoWired fields are null. The application is up, but it cannot be used

```
11:25:51,262 WARN  [org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration] (ServerService Thread Pool -- 88) Could not locate configserver via discovery: java.lang.IllegalStateException: No instances found of configserver (CONFIGURATION)
        at org.springframework.cloud.config.client.ConfigServerInstanceProvider.getConfigServerInstances(ConfigServerInstanceProvider.java:25)
        at org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration.refresh(DiscoveryClientConfigServiceBootstrapConfiguration.java:84)
        at org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration.startup(DiscoveryClientConfigServiceBootstrapConfiguration.java:69)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:261)
        at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:180)
        at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:142)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:400)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:354)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:888)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:395)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:327)
        at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:137)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.bootstrapServiceContext(BootstrapApplicationListener.java:197)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:104)
        at org.springframework.cloud.bootstrap.BootstrapApplicationListener.onApplicationEvent(BootstrapApplicationListener.java:70)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)
        at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:74)
        at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54)
        at org.springframework.boot.SpringApplication.prepareEnvironment(SpringApplication.java:358)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:317)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:155)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:135)
        at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87)
        at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:172)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:204)
        at io.undertow.servlet.core.DeploymentManagerImpl$1.call(DeploymentManagerImpl.java:186)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:42)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1514)
        at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:251)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.startContext(UndertowDeploymentService.java:96)
        at org.wildfly.extension.undertow.deployment.UndertowDeploymentService$1.run(UndertowDeploymentService.java:78)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)

```

First - I'm not sure, if this is a Cloud Config or a Eureka Client problem, but, because the Eureka client is registered after the Eureka server is up, I don't see a point, why the 30sec exception should come up. There is a CONFIGURATION instance available and a MYCLIENT instance, but the Cloud Config client doesn't check again. I've got a notion that DiscoveryClient.getInstances(serviceId) doesn't make a new request.

I drilled down the Client code and ended on the Netflix Eureka client. So, I hope I'm right, this should be rechecked by the Eureka client.""Ah, I forgot - in this situation - when I use a Feign client, this client doesn't work too, becaus it uses the same mechanism from the Eureka client. =||= Sorry - but that is still an issue to me. To run a Eureka service and a Eureka client in one Application Server is (maybe) not the preferred way of using them - but there are situation and options - and in that case I miss here some kind of ideas or other solutions. I'm sure, that this is a bug. 

The CloudConfig client should always try to reach the discovery/config service, if it isn't successfull at the first pitch. There should be some kind of ""fault tolerance"". =||= The issue was closed only because it was stale, it you experience this on the latest version consider opening a new one with a minimal repro, based on the stack traces it looks more like a set up issue but hard to say. Also would be best to exclude Spring Cloud or any external frameworks from the minimal repro. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1104Use Webflux with embedded Eureka serverLAcrazyBerMuc05/30/19, 11:11:58 PM"We like the idea of using Eureka server for our product but the current implementation restricts us from using `Spring boot 2.x` with `webflux`, as per the conversation here:
https://github.com/spring-cloud/spring-cloud-netflix/issues/3108

Is there any timeline on adding support for `webflux`, in specific `RouterFunction`, to Eureka server?

Thanks in advance!"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1105How to discover services deployed on kubernetes from eureka outside the kubernetes?Green Leileiguorui05/30/19, 11:11:58 PM"The UserService is deployed on kubernetes.

The OrderService is not deployed on kubernetes, and registered with Eureka.

How can OrderService loolup and access UserService through the Eureka??"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1106"""gradle idea""   command failed"Jiang Rongbojiangrongbo08/03/18, 03:20:14 AM"An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
> Failed to apply plugin [id 'nebula.netflixoss']
   > Cannot set property 'defaultVersionStrategy' on null object

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

BUILD FAILED in 1m 4s""resolved by modify eureka/build.gradle file:

_```
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven{
            url ""https://plugins.gradle.org/m2/""
        }
    }

    dependencies {
        classpath ""com.netflix.nebula:gradle-extra-configurations-plugin:3.3.0""
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:5.1.1'
    }
}

plugins {
    id 'nebula.netflixoss' version '5.1.1'
    id ""nebula.provided-base"" version ""3.3.0""
}
......
```_ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1107EUREKA-1087 Add config parameter eureka.myUrlMikhail Gromovmgtriffid08/02/18, 10:18:52 PM...to specify URL Eureka should treat as its own (for cases when each Eureka node is behind LB and does not simply check replica URLs against own IP/host)"Hm, on my local machine all tests pass well, is there any way to re-run Travis build? =||= Thanks @mgtriffid , I retriggered the travis build. =||= build passes. Thanks @mgtriffid  =||= Thanks for approval and merge @qiangdavidliu !
May I ask, when should we expect next release to happen? =||= @mgtriffid we should have a release out some time this week. =||= "EUREKA-1087 Add config parameter eureka.myUrlMikhail Gromovmgtriffid08/02/18, 10:18:52 PM...to specify URL Eureka should treat as its own (for cases when each Eureka node is behind LB and does not simply check replica URLs against own IP/host)NaNMikhail Gromov08/02/18, 07:39:25 AMEUREKA-1087 Add config parameter eureka.myUrl to specify URL Eureka should treat as its own (for cases when each Eureka node is behind LB and does not simply check replica URLs against own IP/host)1
1108Add an interface for AwsAsgUtiltroshko11108/06/18, 08:24:06 PM"- Provide a replaceable abstraction over AWS ASG polling logic
- Add a setting to disable AWS ASG polling"NaNAdd an interface for AwsAsgUtiltroshko11108/06/18, 08:24:06 PM"- Provide a replaceable abstraction over AWS ASG polling logic
- Add a setting to disable AWS ASG polling"NaNTaras Roshko08/06/18, 07:53:30 PM"Address review feedback

- Disable querying AWS ASGs when using the public API to lookup
an expired/never cached instance"1
1109Stopping TimedSupervisorTasksAlberto C. RíosAlbertoimpl05/30/19, 11:11:58 PM"Hi! We have a scenario where our Eureka server can be shut-down after some conditions. 
We still would like to leave the applications talking to the server up and running but it's causing on each client application several:
```
   2018-07-20T11:38:22.35-0700 [APP/PROC/WEB/0] OUT 2018-07-20 18:38:22.349 ERROR 15 --- [tbeatExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_GREETER-MESSAGES/greeter-messages-cs.apps.mydomain.com:[GUID] - was unable to send heartbeat!
   2018-07-20T11:38:22.35-0700 [APP/PROC/WEB/0] OUT com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
   2018-07-20T11:38:22.35-0700 [APP/PROC/WEB/0] OUT     at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.2.jar!/:1.9.2
```
We were wondering if there is a way to disable the three `TimedSupervisorTask` or if is there any better way to stop retrying on the client side if the server is down.

If not, is there any recommendation you could give us to handle this situation?

Thanks!""HI @AlbertoImpl 
Have you configured several eureka servers on your client side? I assume that your client configuration is as follows
```
defaultZone = eurekaServer1, eurekaServer2, eurekaServer3
```
In my mind if your shut-down `eurekaServer1` then client will sent heartbeat will failed, but client will auto choose next one(`eurekaServer2`)

Hope can help you 

Thanks =||= Hi @holy12345 thanks for commenting.
However, we are not running it with multiple servers. 
We want to go from 1 working instance to 0 working instances avoiding the client apps to keep sending requests indefinitely when there are no working instances.

Thanks! =||= Hi @AlbertoImpl 

In my mind there is no such mechanism, because the eureka client does not know whether the eureka server is down or the heartbeat fails due to network problems.

Your thoughts?

Thanks =||= Hi @holy12345  thanks again.

For context:
We have a scenario where we have multiple client apps that intentionally can be connected to one eureka server that can be shut down.
Once that server is intentionally shut down, client apps keep sending the requests every couple of seconds and failing with the exception posted before.

What about having a max-retry that defaults to 0 been keeping the same default retry-forever functionality and be able to configure that number for having a more fine-grained retry policy?

Wondering if that makes sense, and if it does, if it's the `DiscoveryClient` responsibility or if it should be a different handling in the `RetryableEurekaHttpClient`

Thanks
 =||= Hi @qiangdavidliu  : )

Could you please give some suggestion? =||= Hi @AlbertoImpl @holy12345 from an architectural pov, eureka is designed so that eureka servers being down is considered a disaster scenario. Having clients that can potentially stop trying to re-register is not an expected part of eureka client/server interaction.

@AlbertoImpl is your use case here purely driven by the logs generated? If so, they can be turned of via the necessary log4j log level configuration. =||= @qiangdavidliu  Thanks : ) =||= Hi @qiangdavidliu thanks for responding!
It isn't because of the logs.
Imagine the eureka-server is secured and it goes down. Now our client app has to go and authenticate once a while trying to reach nothing.

However, if eureka is doing it so by design. I completely understand.

Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1110De-register application instance problemyangpancode05/30/19, 11:11:59 PM"i use the Eureka REST operations to De-register application instance, De-register successfully ！ but in a few seconds, the Eureka client instance re-register soon. how to prent the client instance re-register. because some times we want to find the client instance problem, do not want restart the  client instance soon.
use DELETE /eureka/v2/apps/appID/instanceID REST operations."@yangpancode , even if you DELETE instance from Eureka via REST API, your instance still continues to send heartbeats, and when server receives heartbeat for instance it does not know about, server registers it. I'd suggest to set status OUT_OF_SERVICE instead DELETE, if you just want to stop routing traffic to problematic instance. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1111How do I handle exceptions in case of connection error  for the eureka client ?JangCool05/30/19, 11:11:59 PM"I 'm using the eureka-client in the spring boot2.
However, the eureka server is off and a connection error is output.
I want to catch the error and do something else.
How do I handle exceptions in case of connection error  for the eureka client ?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1112Stats are not enabled for ASG cachebrharrington05/30/19, 11:11:59 PMThe ASG cache is not calling [recordStats](https://google.github.io/guava/releases/19.0/api/docs/com/google/common/cache/CacheBuilder.html#recordStats()) on the builder, so the stats metrics [getNumberofASGQueries](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil.java#L356) and [getNumberofASGQueryFailures](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil.java#L368) will always report 0.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1113ASG cache reloading is serialbrharrington05/30/19, 11:11:59 PMThe ThreadPoolExecutor for reloading the ASG cache is configured with a core size of 1 and max of 10, but since it uses an unbounded queue the executor will never grow beyond the core size. This appears to be unintentional ([pool definition](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/AwsAsgUtil.java#L93)).NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1114Add possibility to register Eureka Server metrics to Spectator registryMikhail Gromovmgtriffid08/17/18, 05:03:02 PM"Hi, this adds possibility to register `EurekaMonitors` to some Spectator registry. Helps if Eureka is deployed not as Tomcat web app. Users may provide own registry and get metrics reported to Atlas, for example.

However, if you think this is not enough and would be nice to add some Atlas configuration, so that even Tomcat web app could post metrics to Atlas, please let me know. However, I don't know how to pick proper `commonTags`, and we would need to provide own implementation of `AtlasConfig`, etc, etc. I bet if people are using Eureka and considering necessity of Atlas metrics, they already have some company-specific solutions for this, which can easily be applied with my PR.""Thanks for the PR @mgtriffid ! @brharrington do you have any thoughts to this? =||= > Helps if Eureka is deployed not as Tomcat web app. Users may provide own registry and get metrics reported to Atlas, for example.

A user can provide their own registry even if running as a Tomcat webapp, but they would probably need to pull it in as a library and build their own war file with additional config settings.

As a side note, you can also make Servo report into Atlas, either directly with:

https://github.com/Netflix/servo/tree/master/servo-atlas

Recent versions of Servo also have a SpectatorContext which can be used to have all servo monitors report in via a Spectator registry. This is what we are using internally now as we have to keep backwards compatibility for Servo instrumented apps for quite a while. =||= > Recent versions of Servo also have a SpectatorContext which can be used to have all servo monitors report in via a Spectator registry. This is what we are using internally now as we have to keep backwards compatibility for Servo instrumented apps for quite a while.

Wow, that's actually great, I think for our needs we may just increase version of Servo dependency to 0.12.25 and simply use `SpectatorContext`. Thanks for sharing this!

Given that you guys already have some solution for reporting this to Atlas (@brharrington mentioned duplication), and newer Servo provides a solution for this case, I think we can simply decline this PR - with `SpectatorContext` anybody can add Spectator and Atlas without any difficulties. =||= Thanks for that @mgtriffid . Closing the PR per the comment updates. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1115Eureka can not customize hostnameVerifier aqier05/30/19, 11:11:59 PM"See class **com.netflix.eureka.transport.JerseyReplicationClient** code

EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder()
                    .withClientName(jerseyClientName)
                    .withUserAgent(""Java-EurekaClient-Replication"")
                    .withEncoderWrapper(serverCodecs.getFullJsonCodec())
                    .withDecoderWrapper(serverCodecs.getFullJsonCodec())
                    .withConnectionTimeout(config.getPeerNodeConnectTimeoutMs())
                    .withReadTimeout(config.getPeerNodeReadTimeoutMs())
                    .withMaxConnectionsPerHost(config.getPeerNodeTotalConnectionsPerHost())
                    .withMaxTotalConnections(config.getPeerNodeTotalConnections())
                    .withConnectionIdleTimeout(config.getPeerNodeConnectionIdleTimeoutSeconds());

            if (serviceUrl.startsWith(""https://"") &&
                    ""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) {
                clientBuilder.withSystemSSLConfiguration();
            }
            jerseyClient = clientBuilder.build();"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1116[Question] Proper management of statuses - how to do it?Mikhail Gromovmgtriffid05/30/19, 11:11:59 PM"Hi guys,
In our infrastructure we have a dedicated service which plays role of orchestrator. Currently, all our services register themselves as STARTING, and then orchestrator sets their status to UP using Eureka REST API at some point (when human asks to).

The problem is, when 3 heartbeats are missed for whatever reason, service is evicted from Eureka, then it is re-registered, but with status STARTING again. But we need them to be UP.
My question is, how statuses are supposed to be managed by design? I mean, it seems reasonable to have dedicated orchestrator which should keep knowledge about service statuses and allow to start or stop routing traffic to particular instance when needed. But clients lose their statuses if they are re-registered.

My assumption now that in such case we should make orchestrator talk to clients, and clients should set status of local in-memory `InstanceInfo` according to orchestrator's call. Same for metadata values. Am I right? If no, could you please suggest how can we organize status management in dedicated orchestrator?

Thanks!"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1117[Question] Reading metadata from recently closed instancehashstax05/30/19, 11:12:00 PMI need to read metadata from recently closed instance (e.g. I'd like evictTask to trigger propagation of the metadata before instance is cancelled). Is there a good way to do so? @hashstax, I'm not sure if this fit your needs, but as you probably know, clients fetch apps/delta to renew local registry, and in particular they return removed instances with `<actionType>DELETED</actionType>`. Try to experiment with this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1118Get InstanceInfo with StatusChangeEventMichael Prattmichael-pratt05/30/19, 11:12:00 PM"Using Eureka Client, is it possible to get full instance information when a change occurs? Right now the `StatusChangeEvent` only sends current and previous instance status, but as far as I can tell there is no way to correlate that back to the actual instance that changed. I have to query the client again for my application and manually sort what has changed.

Would it be possible to create a new listener interface that passes the old and new `InstanceInfo` objects whenever a status change occurs?"@michael-pratt you are correct that the current implementation does not offer what you ask out of the box. We welcome community contributions if you would like to provide a PR for your functionality. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1119defaultZone separator support container spaceKerwin Bryantkerwin61209/02/18, 07:22:32 PMNaN@ileler thank you for the PR. This looks fine, but would you mind adding some unit tests to verify both the existing and the future behaviour? Thanks. =||= @ileler thanks for the contrib! =||= It's my pleasure. =||= defaultZone separator support container spaceKerwin Bryantkerwin61209/02/18, 07:22:32 PMNaNNaNileler08/31/18, 02:02:16 AMadd test case1
1120Some responses for /apps and /apps/delta contain inconsistent dataMikhail Gromovmgtriffid10/20/18, 10:33:56 PM"**Environment:**
Eureka 1.9.4
16 clients are talking to cluster of two Eureka nodes. 8 talk to one node, 8 to another.
Network is stable and fast.
**What I do:**
Using separate program, in endless loop I do the following:
1) For each service set status to UP via REST API
2) For each service set status to STARTING via REST API
3) For each service set status to OUT_OF_SERVICE via REST API

**What I expect:**
Clients fetch delta periodically, and every time they do, hash string they calculate after updateDelta matches actual body of response for delta request
**What I see instead:**
From time to time (quite rarely) all clients talking to one of nodes show in logs lines like this:
`The Reconcile hashcodes do not match, client : STARTING_7_UP_11_, server : STARTING_5_UP_13_. Getting the full registry`
I was able to intercept the response for apps/delta (not for the log line above, at different moment), and noticed that numbers in hash string in that response were actually wrong. Hash string said there were only 9 instances in OUT_OF_SERVICE, but rest of the response clearly returned 10 instances in OUT_OF_SERVICE.

Have you guys ever noticed such weird behavior?

**Thoughts:**
We noticed that AbstractInstanceRegistry uses RRWL to make apps/delta response as accurate as possible. But looks like write lock is [released](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L912) only when we return object of type Applications to ResponseCacheImpl, and that object holds references to mutable instances of InstanceInfo. Is it possible that mutation occurs after we return Applications to [method which actually calculates payload](https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/registry/ResponseCacheImpl.java#L429)?""We consider invalid responses for apps/delta to be a bug, so would very appreciate some feedback :) =||= Hi @mgtriffid thanks for the issue and the experiment! The algorithm to compute the full/delta hash code is pretty ancient and I would not be surprised if it has some false signals. In out internal set up (i.e. in the Java EurekaClient) the client just falls back to a full fetch (refresh global state) when it sees a hash mismatch, and this is acceptable to us as we don't look at each individual fetch request, but rather whether the data is consistent over (a relatively short period of) time.

Related, we also run a side app internally that continuously calculates the eventual data consistency between the servers. =||= Hi @qiangdavidliu , thank you for your response!
We are also using Eureka's Java client, and we see that fallback to full fetch works just fine. However, the problem is, when Eureka's response contradicts itself (hash string doesn't match delta), then, because of Eureka response caching, many clients receive such response, and many clients fallback to full fetch, and that puts significant load on Eureka server. So I think we'll try to move serialization of /apps and /apps/delta under the write lock and see if it helps, and provide the PR.

Could you kindly tell more about that side app, if that doesn't violate your NDA? :) =||= PRs are definitely welcome. Internally, we have partitioned our eureka usage to a read/write set that allows the read cluster to autoscale.

As for the side server that does data diffing, it is just a simple app that periodically gets data from each eureka write server and publish some metrics after comparing the data. We use it to alert on data inconsistencies. Nothing fancy. =||= @qiangdavidliu We have found out that when Eureka system gets into a ""registry inconsistency mode"" and many clients start executing full registry fetches, all these service instances exhibit high GC pauses for the specific time period, probably due to the downloading of full registries. This behaviour is definitely scary and we would like to know whether we operate at the limit of a Eureka system (at least one that is based on the open-sourced version) or not. We have around 1500 service instances registered in eureka now and the full registry fetch (along with the metadata we attach) is maybe 100MB of size. Do you feel that this may be a problematic setup? Do you have any information about scaling you can provide? =||= Hi @pparth we run eureka at much larger scales than 1500 instances (order of magnitude). There are a few things we do differently than the defaults in open source:
1. we use G1GC which has given us much better GC characteristics compared to CMS
2. we actually run an autoscalable readonly tier in front of our fixed host write cluster that take all the read traffic. =||= > 2\. we actually run an autoscalable readonly tier in front of our fixed host write cluster that take all the read traffic.

@qiangdavidliu  Can you provide more details on this? Is this using Eureka2? Which is introducing separate read/write clusters which has never progressed past a [release candidate](https://github.com/Netflix/eureka/tree/v2.0.0-rc.2) 3+ years ago.  =||= Hi @mattnelson the readonly server is not related to the Eureka2 work on the 2.x branch. That effort is abandon for various reasons, one being dependencies on projects that were never fully realised.

We do something pretty simple internally by basically taking the same eureka REST resources, put it in front of a guava cache, which in turn fronts a regular eureka client. This app then just registers with eureka as a regular app. (this app source code is not open source, but it is pretty straight forward).

The [eureka transport client config](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/shared/transport/EurekaTransportConfig.java#L83) contains some configuration to support such a model.

For example, set the following configs:
```
# false == talk to readonly for query
eureka.transport.useBootstrapResolverForQuery=false

# the vipAddress for the readonly cluster
eureka.transport.readClusterVip={some vip you've defined for the read only servers}

# the vipAddress for the write cluster
eureka.transport.writeClusterVip={the vip address the write cluster register with}
``` =||= @qiangdavidliu  Are you using Eureka to store service instance metadata? Do you think that this is a bad practise?
If the size of your registry is orders of magnitude larger, how do you handle full registry fetches? When such fetches happen, they must download tons of data, no?  =||= Submitted PR #1126 for this. Was able to easily reproduce inconsistent responses without this fix, totally cannot reproduce them with this fix. Please review. =||= Thanks @mgtriffid . We will take a look. =||= Closing this issue as the fix has been merged in. @mgtriffid will cut a release as soon as the current round of PRs are resolved. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1121Eureka status refresh problemrickywu10/20/18, 10:30:29 PM"I enabled pause, restart, shutdown for endpoints 

When I post to pause for resume for service, the status refresh immediately in Eureka home page 
But the status keep for seconds in /eureka/apps/app-id, 

status changed in home page:
![image](https://user-images.githubusercontent.com/442398/45369887-882eb480-b619-11e8-8159-2e836f1edc0c.png)

but rest api result not changed and will be refreshed in about 5 seconds automatically
![image](https://user-images.githubusercontent.com/442398/45369873-7a792f00-b619-11e8-84e3-af45a59113ad.png)

How can I keep them always as the same, I use SprintBoot 1.5.9"@rickywu , Eureka keeps responses for /apps, /apps/delta and /apps/<app-id> cached for some time. In eventually consistent system like Eureka we can afford small delay of status change. Anyway, clients poll Eureka server periodically, so delivery of information about status changes is already not instant. =||= @mgtriffid  OK, so I have to wait for seconds till cache refreshed? =||= @rickywu @mgtriffid is correct. Information propagation through eureka is eventual consistent (up to 30s max latency by default). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1122Add User-Agent when requesting information from AWS Metadata serviceWill Bengtsonwillbengtson09/17/18, 10:50:15 PMAdd User-Agent when requesting information from AWS Metadata serviceNaNAdd User-Agent when requesting information from AWS Metadata serviceWill Bengtsonwillbengtson09/17/18, 10:50:15 PMAdd User-Agent when requesting information from AWS Metadata serviceNaNWill Bengtson09/17/18, 07:18:25 PMAdd User-Agent when requesting information from AWS Metadata service1
1123on my platform,service run in docker and can register in Eureka but cant found it cause docker ip.iver3oniver3on05/30/19, 11:45:11 PM"every service has its own domain name ,how can I register my service in Eureka by domain name 

or other solutions?
Help?""eureka:
  client:
    serviceUrl:
      defaultZone: http://xxxxxx.xxxxx.com/eureka/
  instance:
    hostname: http://xxxx.xxx..com
    instance-id: http://xxxx.xxx.com

not working =||= using prefer-ip-address: false, then try again. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1124Jersey2: Additional Client Filters are not registeredSergey Krutskokrutsko09/24/18, 06:03:11 PM"Additional Client filters registered at `clientBuilder` at https://github.com/Netflix/eureka/blob/master/eureka-client-jersey2/src/main/java/com/netflix/discovery/shared/transport/jersey2/Jersey2ApplicationClientFactory.java#L144 wiped out later by `clientConfig` at https://github.com/Netflix/eureka/blob/master/eureka-client-jersey2/src/main/java/com/netflix/discovery/shared/transport/jersey2/Jersey2ApplicationClientFactory.java#L171 

I guess, we should register `additionalFilters` into `clientConfig`."PR https://github.com/Netflix/eureka/pull/1125 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1125ISSUE-1124 register additionalFilters into clientConfigSergey Krutskokrutsko09/24/18, 03:18:28 PMNaNThanks @krutsko for the PR. =||= ISSUE-1124 register additionalFilters into clientConfigSergey Krutskokrutsko09/24/18, 03:18:28 PMNaNNaNskrutsko09/24/18, 08:28:52 AMISSUE-1124 register additionalFilters into clientConfig1
1126EUREKA-1120 Move write.lock higher in stack...Mikhail Gromovmgtriffid10/14/18, 09:45:20 PM so that payload serialization is performed while locked"Fixes #1120  =||= Maybe I'm interpreting this wrong, but are the locks inverted? Could that be the root cause of this issue?

Mutative(write) actions are acquiring a read lock

https://github.com/Netflix/eureka/blob/ec2649e3a0a7eae5d3daabd2dfff7f8c2a91cc49/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L191-L193

https://github.com/Netflix/eureka/blob/ec2649e3a0a7eae5d3daabd2dfff7f8c2a91cc49/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L455-L459

Read operations are acquiring a write lock

https://github.com/Netflix/eureka/blob/ec2649e3a0a7eae5d3daabd2dfff7f8c2a91cc49/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L865-L871 =||= I don't think so, @mattnelson . RRWL's read lock can be entered by multiple threads, but if write lock is not locked, then other threads cannot enter even read lock. I think the intention here was to allow many threads modify different registered instances (statuses, metadata), but if response cache needs to be loaded - we take a pause and prepare response. But let's better wait for @qiangdavidliu  to respond to your concern. =||= @mgtriffid thanks for the PR. I checked some statistics and the data serialization (in extreme p99.9+ cases) can be pretty heavy, beyond even a second. With a write lock around this, this means instance registration and updates will be unable to proceed for that duration, which can be problematic.

Seems like the root issue here is the mutable InstanceInfo objects to be serialized. It might be worth doing a quick experiment to see which is cheaper: locking around the serialization or ensuring copies of the data is returned by the `getApplicationDelta*` methods. =||= Thanks for pointing this out, I actually was concerned about performance too, for some reason thought serialization is quick. Good that you have some stats from production of your scale.
[Naive benchmark](https://gist.github.com/mgtriffid/831b0154adaad305642c0881c4cd0639) shows that on average calling copying constructors is 11 times faster:
```
Encoding: 84819
Copying constructors: 6561
Now actual test:
Encoding: 81785
Copying constructors: 6803
Now without metadata
Encoding: 82318
Copying constructors: 7140
```
Will update PR. =||= Moved locks to original place, added copying constructors. =||= Looks good, thanks @mgtriffid . Just want to verify with you that doing this is also able to solve your original issue? =||= @qiangdavidliu , well, at least with this fix I cannot reproduce that issue, while without this fix I can do that easily. =||= @qiangdavidliu Well, in our case, we consider frequent full registry fetches to be an issue. Especially in times when multiple clients execute full registry fetches at the same time, we have seen that we end up with resource starvation problems. What is your opinion on that? =||= @pparth we run with a readonly tier internally (same REST API -> cache -> EurekaClient ---> write servers), which due to its nature mitigated the original issue referenced in this PR.
 =||= The PR looks good, thank you @mgtriffid for the fix. =||= "EUREKA-1120 Move write.lock higher in stack...Mikhail Gromovmgtriffid10/14/18, 09:45:20 PM so that payload serialization is performed while lockedNaNMikhail Gromov10/11/18, 06:39:48 AMEUREKA-1120 Call copying constructor for InstanceInfo to be returned to apps/delta request1
1127SP threshold is not updated correctly if >15% of client instances are not in UP statusMikhail Gromovmgtriffid05/30/19, 11:21:06 PM"**Environment:**
Cluster of 2 Eureka nodes of freshest version
```
eureka.enableSelfPreservation=true
eureka.expectedClientRenewalIntervalSeconds=15
eureka.renewalThresholdUpdateIntervalMs=240000 //default is 15 minutes, we just want to speed up testing
```
16 client instances talking to this cluster
```
eureka.client.refresh.interval=15
```
**Experiment 1: confirming issue**
15:00: 16 client instances in UP plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine.
15:02: 4 client instances were put into OUT_OF_SERVICE state via Eureka’s REST API.
15:03: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
15:04: We `kill -9` one of clients and wait for eviction to happen.
15:06: Logs show that eviction happened.
15:06: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
15:07: Logs indicate that this method updating threshold was called, and they say threshold is still 61. Now this is becoming problematic. Common sense says: “Only 1 instance was evicted, 1 < 0.15 * 18, evictions happen from time to time, we should adjust self-preservation threshold now”. But tricky condition of method `updateRenewalThreshold` comes into play:
https://github.com/Netflix/eureka/blob/b2c5ea680099280f5c456c0e0d10970261dce67c/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L533-L537
This code now thinks that `count` == 13, not 17 (11 instances in UP plus two Eurekas). And previous value of `expectedNumberOfClientsSendingRenews` was 18, as in the beginning we had everything in `UP`. Condition evaluates to
`((13) > (0.85 * 18)) == ((13) > 15.3) == false`
, and threshold is not updated, and `expectedNumberOfClientsSendingRenews` is still 18.
15:11: Started previously killed client again. Client registers, and on new registration Eureka increments `expectedNumberOfClientsSendingRenews`, it is now 19. It also recalculates threshold: `(int) (19 * 0.85 * 60 / 15) == 64`.
So, we returned the system to previous state, but threshold changed from 61 to 64. This is wrong, and it actually can lead to unwanted self-preservation if there is a significant number of instances in status different than `UP`.
**Experiment 2: looking for fix**
This time we configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka nodes.
15:33: 16 client instances in `UP` plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine
15:34: 4 client instances were put into `OUT_OF_SERVICE` state via Eureka’s REST API.
15:37: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
15:43: We `kill -9` one of clients and wait for eviction to happen.
15:44: Logs show that eviction happened.
15:45: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
15:45: Threshold updated, and it is 57, and this is what makes the difference! Now that check thought count was 17.
`((17) > (0.85 * 18)) == ((17) > 15.3) == true`
`expectedNumberOfClientsSendingRenews` becomes 17, threshold is updated to (int) (17 * 0.85 * 60 / 15) == 57.
**Conclusion:**
Probably, we should instruct users to configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka server and add this configuration as default for eureka-server module which assembles .war file
**Question:**
But why do we actually calculate registry size using Eureka client and not, well, registry size? It looks like I am missing something not obvious, but critical. Could you kindly clarify?

Thanks!""HI @mgtriffid  

Thanks this question, I think this is question interesting. I notice this case you have two `eureka server`. one of `eureka server` means `eureka client` for other. we know `eureka client` can fetch instancesInfo from `eureka server` so this server fetch all instanceInfo from other and filter which status are not`UP` and cause the issue which you mention  (I think this is key point)

thanks : )



 =||= @qiangdavidliu Any help here? =||= Sorry for the delayed response, and thanks for the detailed write up. I am also unsure to the reason why the calculation was done on the client rather than the registry, and found this PR from 2013 (!) that showed registry based calculations was possible at one point (https://github.com/Netflix/eureka/commit/4cd9c6e49c0151785bc0133c5e4b995d14191e96). I suspect that the registry is eventually not used due to the concurrent nature of accessing the server internal registry at scale.

As for your suggestion that we apply `eureka.shouldFilterOnlyUpInstances=false` as a default on the server side (and internally, we do run with that set to false too), that makes a lot of sense. =||= > **Environment:**
> Cluster of 2 Eureka nodes of freshest version
> 
> ```
> eureka.enableSelfPreservation=true
> eureka.expectedClientRenewalIntervalSeconds=15
> eureka.renewalThresholdUpdateIntervalMs=240000 //default is 15 minutes, we just want to speed up testing
> ```
> 16 client instances talking to this cluster
> 
> ```
> eureka.client.refresh.interval=15
> ```
> **Experiment 1: confirming issue**
> 15:00: 16 client instances in UP plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine.
> 15:02: 4 client instances were put into OUT_OF_SERVICE state via Eureka’s REST API.
> 15:03: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
> 15:04: We `kill -9` one of clients and wait for eviction to happen.
> 15:06: Logs show that eviction happened.
> 15:06: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
> 15:07: Logs indicate that this method updating threshold was called, and they say threshold is still 61. Now this is becoming problematic. Common sense says: “Only 1 instance was evicted, 1 < 0.15 * 18, evictions happen from time to time, we should adjust self-preservation threshold now”. But tricky condition of method `updateRenewalThreshold` comes into play:
> [eureka/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java](https://github.com/Netflix/eureka/blob/b2c5ea680099280f5c456c0e0d10970261dce67c/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L533-L537)
> 
> Lines 533 to 537 in [b2c5ea6](/Netflix/eureka/commit/b2c5ea680099280f5c456c0e0d10970261dce67c)
> 
>  if ((count) > (serverConfig.getRenewalPercentThreshold() * expectedNumberOfClientsSendingRenews) 
>          || (!this.isSelfPreservationModeEnabled())) { 
>      this.expectedNumberOfClientsSendingRenews = count; 
>      updateRenewsPerMinThreshold(); 
>  } 
> 
> This code now thinks that `count` == 13, not 17 (11 instances in UP plus two Eurekas). And previous value of `expectedNumberOfClientsSendingRenews` was 18, as in the beginning we had everything in `UP`. Condition evaluates to
> `((13) > (0.85 * 18)) == ((13) > 15.3) == false`
> , and threshold is not updated, and `expectedNumberOfClientsSendingRenews` is still 18.
> 15:11: Started previously killed client again. Client registers, and on new registration Eureka increments `expectedNumberOfClientsSendingRenews`, it is now 19. It also recalculates threshold: `(int) (19 * 0.85 * 60 / 15) == 64`.
> So, we returned the system to previous state, but threshold changed from 61 to 64. This is wrong, and it actually can lead to unwanted self-preservation if there is a significant number of instances in status different than `UP`.
> **Experiment 2: looking for fix**
> This time we configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka nodes.
> 15:33: 16 client instances in `UP` plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine
> 15:34: 4 client instances were put into `OUT_OF_SERVICE` state via Eureka’s REST API.
> 15:37: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
> 15:43: We `kill -9` one of clients and wait for eviction to happen.
> 15:44: Logs show that eviction happened.
> 15:45: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
> 15:45: Threshold updated, and it is 57, and this is what makes the difference! Now that check thought count was 17.
> `((17) > (0.85 * 18)) == ((17) > 15.3) == true`
> `expectedNumberOfClientsSendingRenews` becomes 17, threshold is updated to (int) (17 * 0.85 * 60 / 15) == 57.
> **Conclusion:**
> Probably, we should instruct users to configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka server and add this configuration as default for eureka-server module which assembles .war file
> **Question:**
> But why do we actually calculate registry size using Eureka client and not, well, registry size? It looks like I am missing something not obvious, but critical. Could you kindly clarify?
> Thanks!

Why is count 13 after killing a service in the Experiment 1? Should it be 17? Thank you =||= > > **Environment:**
> > Cluster of 2 Eureka nodes of freshest version
> > ```
> > eureka.enableSelfPreservation=true
> > eureka.expectedClientRenewalIntervalSeconds=15
> > eureka.renewalThresholdUpdateIntervalMs=240000 //default is 15 minutes, we just want to speed up testing
> > ```
> > 16 client instances talking to this cluster
> > ```
> > eureka.client.refresh.interval=15
> > ```
> > **Experiment 1: confirming issue**
> > 15:00: 16 client instances in UP plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine.
> > 15:02: 4 client instances were put into OUT_OF_SERVICE state via Eureka’s REST API.
> > 15:03: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
> > 15:04: We `kill -9` one of clients and wait for eviction to happen.
> > 15:06: Logs show that eviction happened.
> > 15:06: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
> > 15:07: Logs indicate that this method updating threshold was called, and they say threshold is still 61. Now this is becoming problematic. Common sense says: “Only 1 instance was evicted, 1 < 0.15 * 18, evictions happen from time to time, we should adjust self-preservation threshold now”. But tricky condition of method `updateRenewalThreshold` comes into play:
> > [eureka/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java](https://github.com/Netflix/eureka/blob/b2c5ea680099280f5c456c0e0d10970261dce67c/eureka-core/src/main/java/com/netflix/eureka/registry/PeerAwareInstanceRegistryImpl.java#L533-L537)
> > Lines 533 to 537 in [b2c5ea6](/Netflix/eureka/commit/b2c5ea680099280f5c456c0e0d10970261dce67c)
> > if ((count) > (serverConfig.getRenewalPercentThreshold() * expectedNumberOfClientsSendingRenews)
> > || (!this.isSelfPreservationModeEnabled())) {
> > this.expectedNumberOfClientsSendingRenews = count;
> > updateRenewsPerMinThreshold();
> > }
> > This code now thinks that `count` == 13, not 17 (11 instances in UP plus two Eurekas). And previous value of `expectedNumberOfClientsSendingRenews` was 18, as in the beginning we had everything in `UP`. Condition evaluates to
> > `((13) > (0.85 * 18)) == ((13) > 15.3) == false`
> > , and threshold is not updated, and `expectedNumberOfClientsSendingRenews` is still 18.
> > 15:11: Started previously killed client again. Client registers, and on new registration Eureka increments `expectedNumberOfClientsSendingRenews`, it is now 19. It also recalculates threshold: `(int) (19 * 0.85 * 60 / 15) == 64`.
> > So, we returned the system to previous state, but threshold changed from 61 to 64. This is wrong, and it actually can lead to unwanted self-preservation if there is a significant number of instances in status different than `UP`.
> > **Experiment 2: looking for fix**
> > This time we configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka nodes.
> > 15:33: 16 client instances in `UP` plus 2 Eurekas. Threshold is 61 = 18 * 4 * 0.85, 68 renews comes minutely, renews are above threshold, all is fine
> > 15:34: 4 client instances were put into `OUT_OF_SERVICE` state via Eureka’s REST API.
> > 15:37: Logs indicate that this method updating threshold was called, and they say threshold is still 61. This is expected, we did not delete anything, so threshold should be the same.
> > 15:43: We `kill -9` one of clients and wait for eviction to happen.
> > 15:44: Logs show that eviction happened.
> > 15:45: `/eureka/status` endpoint says that only 64 renews came last minute. Reasonable: we had 68 per minute, killed one service, now we have 64.
> > 15:45: Threshold updated, and it is 57, and this is what makes the difference! Now that check thought count was 17.
> > `((17) > (0.85 * 18)) == ((17) > 15.3) == true`
> > `expectedNumberOfClientsSendingRenews` becomes 17, threshold is updated to (int) (17 * 0.85 * 60 / 15) == 57.
> > **Conclusion:**
> > Probably, we should instruct users to configure `eureka.shouldFilterOnlyUpInstances=false` on Eureka server and add this configuration as default for eureka-server module which assembles .war file
> > **Question:**
> > But why do we actually calculate registry size using Eureka client and not, well, registry size? It looks like I am missing something not obvious, but critical. Could you kindly clarify?
> > Thanks!
> 
> Why is count 13 after killing a service in the Experiment 1? Should it be 17? Thank you

Sorry, it should be four OUT_OF_SERVICE services plus one KILL service, right? =||= I assume #1140 should do it for now, please re-open if you disagree. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1128[DiscoveryClient-0] c.netflix.discovery.TimedSupervisorTask  : task supervisor timed out  java.util.concurrent.TimeoutException: nullrajgoothy10/20/18, 10:32:37 PM"-- spring boot version is 1.5.10 and cloud version is edgware-SR2

2018-10-08 16:44:00.039  INFO [gpbs-api-gateway,,,] 11908 --- [AsyncResolver-bootstrap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration
2018-10-08 16:47:42.782 ERROR [gpbs-api-gateway,,,] 11908 --- [DiscoveryClient-0] c.netflix.discovery.TimedSupervisorTask  : task supervisor timed out

java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:205) [na:1.8.0]
	at com.netflix.discovery.TimedSupervisorTask.run(TimedSupervisorTask.java:63) ~[eureka-client-1.7.0.jar:1.7.0]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0]
	at java.lang.Thread.run(Thread.java:744) [na:1.8.0]""can any body help us..
 =||= @rajgoothy , not enough information here. Could you provide all your eureka-related configuration parameters? =||= Ok.. will provide here ... =||= 
-- api gate way of application.yml
spring:
  application:
    name: gpbs-api-gateway

logging:
  level:
    root: INFO
    org:
      springframework:
       web: INFO
      hibernate: INFO
      apache: ERROR
  path:  C:/gpbs_logs/
  file: C:/gpbs_logs/gpbs-api-gateway.log    
  
#spring.cloud.config.fail-fast=true
server:
  port: 8760
  tomcat:
    max-threads: 20

    
eureka: 
  client: 
    register-with-eureka: true
    fetch-registry: true
    service-url: 
      defaultZone: http://127.0.0.1:9000/eureka
      healthcheck: 
        enabled: true
  instance:
    leaseExpirationDurationInSeconds: 30000000
    leaseRenewalIntervalInSeconds: 300000
    preferIpAddress: true
  #fetchRegistry: true

==================

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;

import com.scb.gpbs.filter.GpbsLoggingFilter;

@SpringBootApplication
@EnableZuulProxy
@EnableEurekaClient
public class ApiGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(GpbsApiGatewayApplication.class, args);
	}
	
	@Bean
	public GpbsLoggingFilter simpleFilter() {
	    return new GpbsLoggingFilter();
	  }

}

=======

My Proxy interface: 

import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.cloud.netflix.ribbon.RibbonClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.scb.gpbs.json.vo.ProductMapVO;

@FeignClient(name=""gpbs-api-gateway"")
@RibbonClient(name=""gpbs-rules-service"")
public interface GpbsRulesServiceProxy {
	
	@PostMapping(value = ""/gpbs-rules-service/gpbs/v1/product"",produces=""application/json"",consumes=""application/json"")
	public String  getProduct(@RequestBody ProductMapVO productMapVO);
		
	@PostMapping(value = ""/gpbs-rules-service/gpbs/v1/product2"",produces=""application/json"",consumes=""application/json"")
	public String  getProduct2(@RequestBody ProductMapVO productMapVO);
	
	@GetMapping(value = ""/gpbs-rules-service/test"")
	public String test();
	
	
		

}
zull MS pom.xml:
==============

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.10.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Edgware.SR2</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	<!-- 	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-zuul</artifactId>
		</dependency>
		<!-- <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-oauth2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-security</artifactId>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>
		<!-- <dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-jdbc</artifactId>
		</dependency> -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.22</version>
		</dependency>
	</dependencies>
	

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
 =||= @mgtriffid,

I have provided all the details . Please verify and suggest.

I have provided a pre, post filter as component. =||= @rajgoothy , all I can suggest is to assure that your Eureka server is actually running on 127.0.0.1:9000. Please consider asking Spring Cloud developers, they may know more about your setup. =||= @mgtriffid , Thanks for the update and suggestion.. 

is any body able to verify this? =||= @rajgoothy , really, try to ask here https://github.com/spring-cloud/spring-cloud-netflix , people there will more likely be able to help you. This project is Eureka itself, and integration with Spring brings too many new variables, unknown to people here, to the equation. =||= Thanks @mgtriffid . @rajgoothy Spring Cloud Netflix would be the best place to ask Spring Cloud integration specific questions. As a general comment, issues to do with the TimedSupervisorTask tasks are typically caused by initialization issues (e.g. bad start up config etc) and not typically related to the actual TimedSupervisorTask itself (which are just periodic background tasks that the eureka-client executes). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1129Why was Eureka 2.0 discontinued?Alexey Surikovksurent10/12/18, 11:20:29 AM"Hi,

this is not a bug a report but a question. Having read [motivations for Eureka 2.0](https://github.com/Netflix/eureka/wiki/Eureka-2.0-Motivations) and [Eureka 2.0 architecture overview](https://github.com/Netflix/eureka/wiki/Eureka-2.0-Architecture-Overview), I started wondering why the work was discontinued. The ideas in the motivations document seem all reasonable and the architecture overview also makes sense.

I'm wondering if someone from Netflix or someone who is familiar with the situation can shed some light on this? Did you find any flaws in the design or difficulties in implementing it? Your insight would be much appreciated.""Hi @ksurent. The open source work on eureka 2.0 (as embodied by the 2.x branch) is discontinued. The rationale for this is variously due to dependencies on some parallel open source projects that never came to full fruition, and also the big bang nature of the project.

The majority of the motivations for eureka 2.0 is something that we (Netflix) still believe in, and have since realized internally. This is done in a much more evolutionary and incremental way, via variously:
- a simple, auto-scalable REST readonly cluster with the same APIs to help with scale.
- a simple, auto-scalable gRPC readonly cluster leveraging gRPC to provide streaming capabilities and better multi-language client support. =||= > and have since realized internally

Is this via non open sourced updates? or is this via configuration mentioned to in https://github.com/Netflix/eureka/issues/1120#issuecomment-424957756 and introduced in #678 ?

 =||= Thanks @qiangdavidliu and @mattnelson! Your insight is appreciated.

Closing the ticket because my curiosity has been satisfied. =||= @mattnelson the changes you referenced were indeed client side updates to help with client auto-discovery of the REST readonly cluster. The server side code for the read only servers (both REST and gRPC) are both internal at the moment unfortunately.  =||= @ksurent thank you for the information.
Just curious if there exists any roadmap for near future regarding the Eureka 1.x.
I notice that the project (Eureka 1.x) is roughly inactive recently. Is that the sign for a full stop of Eureka 1.x development, given that there is no plan on the realization of 2.0 version?  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1130Client not able to re-register with eureka server when eureka server restartedyoutianhong10/23/18, 06:23:02 AM"The issue always happen on our test environment, but can not reproduce on my local except one time.

The error below here:

2018-10-11 10:45:57,198 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.n.d.s.t.d.RedirectingEurekaHttpClient - Request execution error
com.sun.jersey.api.client.ClientHandlerException: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html was not found
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:630)
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:119)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:824)
at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1393)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)
2018-10-11 10:45:57,199 [DiscoveryClient-HeartbeatExecutor-0] WARN c.n.d.s.t.d.RetryableEurekaHttpClient - Request execution failed with message: A message body reader for Java class com.netflix.appinfo.InstanceInfo, and Java type class com.netflix.appinfo.InstanceInfo, and MIME media type text/html was not found
2018-10-11 10:45:57,199 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.n.d.DiscoveryClient - DiscoveryClient_OSM-ADMIN/10.132.81.36:osm-admin:8082 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:824)
at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1393)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:745)

I also saw this answer for https://github.com/Netflix/eureka/issues/914 
but it's not work for me.""My issue had been fixed. The issue is caused by wrong nginx configuration of eureka url.
Our nginx configuration will encapsulate 500,502 error as 404.
It works fine after removing this ngx config for eureka server url. =||= please show your wrong nginx configuration,  I met the same problem like you =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1131React on Spot Instance interruption notificationsSergey Krutskokrutsko10/20/18, 10:28:49 PM"If Spot Instance is marked for termination , then this termination info will be available in ec2 instance metadata.
More info at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#spot-instance-termination-notices

Eureka Client should be able to check EC2 instance metadata and publish termination info to Eureka Client metadata. So, the interested parties could react accordinantly.
"PR #1132  =||= Closing in favour or PR. =||= @qiangdavidliu It will be great to have this released sooner than later. Thanks! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1132eureka-1131: handle spot instance terminationSergey Krutskokrutsko10/20/18, 10:09:07 PMNaN@qiangdavidliu thanks for looking into this. I have fixed all comments. =||= Thanks @krutsko  =||= eureka-1131: handle spot instance terminationSergey Krutskokrutsko10/20/18, 10:09:07 PMNaNNaNskrutsko10/15/18, 02:02:21 PMrename spotTerminationTime1
1133Can I add extra fields to eureka dashboard?jishamenon220711/08/19, 08:59:36 PM"I understand I can add extra parameters as part of the metadataMap of instance for any eureka client. Is it possible for me to modify/ tweak the eureka dashboard so that it displays these extra parameters also on the dashboard.

Basically is there any way I can edit the existing eureka dashboard to show some user defined variables for each of the eureka client I onboard?""Hi @jishamenon2207 

I think is issues has same request #1076 
So far there is no way can edit the eureka dashboard : ( but if you will you can submit a PR : )

thanks


 =||= Thanks @holy12345. @jishamenon2207 we are happy to look at any PRs that can improve on the usability of eureka. =||= @qiangdavidliu @holy12345 : Would love to try it out. Do you have any guidance for me? 😄
could u please give me the github link for eureka-dashboard code? Thanks a zillion =||= @jishamenon2207 The eureka dashboard code is super old, you can find them here:
https://github.com/Netflix/eureka/tree/master/eureka-resources/src/main/resources/jsp =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1134Unavailable Replicas When Running in AWS Using DNS ReplicationJoseph WitthuhnJosephWitthuhnTR11/13/19, 06:10:47 PM"We are running Eureka and having issues where all replicas are showing up in Eureka as unavailable replicas. Each server shows all three servers, so it successfully finds the others, but the replicas are showing as unavailable. Also, each server also shows itself as a replica (I'm not sure if that is normal).

Configuration:

- Three EC2 instances. Each with an extra network interface attached.
- The extra network interface is then referenced from our DNS records.
- This allows us to take down an instance and replace it, and just attach the network interface to the new instance to allow our Eureka instances to maintain the same IP address.
- For the sake of my examples below, let's say the EC2 instances are:

| **AZ**         | **EC2 Instance** | **Extra Network Adapter** |
|------------|--------------|-----------------------|
| eu-west-1a | 10.1.1.1     | 10.1.1.2              |
| eu-west-1b | 10.1.2.1     | 10.1.2.2              |
| eu-west-1c | 10.1.3.1     | 10.1.3.2              |

I believe the DNS record is working fine, since it is able to read the IP addresses of the other Eureka instances without issue.

The replics show up in ""unavailable-replicas"" on the Eureka page in this format:
`http://10.1.1.2:8080/eureka/v2/,http://10.1.2.2:8080/eureka/v2/,http://10.1.3.2:8080/eureka/v2/,`
(where those IP addresses are the correct IP addresses for the extra network interfaces that are referred do by our DNS records)

If I sign into one of the boxes, I am able to curl to these URLs, so I do not believe there is a network issue here. Also, application instances are successfully registering with Eureka,including all three instances of Eureka (as I'd expect, it shows them with the EC2 instance IPs of 10.1.1.1, 10.1.2.1, and 10.1.3.1).

We are running on 1.9.5, but also experienced the issue with a much older version, 1.3.1.

Looking in the logs, we are seeing this output every sixty seconds:
```
2018-10-15 16:02:20,812 ERROR com.netflix.eureka.aws.EIPManager$EIPBindingTask:444 [Eureka-EIPBinder] [run] Could not bind to EIP
java.lang.StringIndexOutOfBoundsException: String index out of range: -4
        at java.lang.String.substring(String.java:1967)
        at com.netflix.eureka.aws.EIPManager.getEIPsFromServiceUrls(EIPManager.java:360)
        at com.netflix.eureka.aws.EIPManager.getEIPsForZoneFromDNS(EIPManager.java:394)
        at com.netflix.eureka.aws.EIPManager.getCandidateEIPs(EIPManager.java:316)
        at com.netflix.eureka.aws.EIPManager.isEIPBound(EIPManager.java:165)
        at com.netflix.eureka.aws.EIPManager$EIPBindingTask.run(EIPManager.java:431)
        at java.util.TimerThread.mainLoop(Timer.java:555)
        at java.util.TimerThread.run(Timer.java:505)
```
(this is interesting because I don't believe we are even using EIP based configuration, right?)

We also see this every five minutes (with the correct DNS name):
`2018-10-15 16:01:35,083 INFO  com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver:39 [AsyncResolver-bootstrap-executor-0] [getClusterEndpoints] Resolving eureka endpoints via DNS: txt.eu-west-1.eureka-qa.cloud.ourcompany.com`

When we start our Eureka server, we are passing in system properties like this:
`-Deureka.environment=qa -Deureka.datacenter=cloud -Deureka.shouldUseDns=true -Deureka.eurekaServer.domainName=eureka-qa.cloud.ourcompany.com -Deureka.eurekaServer.context=eureka/v2 -Deureka.enableSelfPreservation=false -Deureka.datacenter=cloud -Deureka.region=eu-west-1`

Are we doing something wrong with our configuration? The StringIndexOutOfBoundsException issue almost looks like a bug with Eureka. We've spent a few days trying to solve this ourselves, but haven't made much progress.

I'd appreciate any help anyone can give!

Thanks,
Joseph Witthuhn""Is the issue with lines 353-358 of EIPManager (https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/aws/EIPManager.java#L353)?

The comment indicates that the if check on line 358 is designed to prevent us from hitting that code if ""ec2-"" isn't in the hostname. But that isn't the effect of the code. If ""ec2-"" isn't in the hostname, then beginIndex will be set to ""3"" and we'll still go into the if check. As written, I think that if check is impossible not to hit. =||= Well, I see replica is displayed as ""unavailable"" if Eureka cannot find InstanceInfo for Eureka which has hostname same as configured. See https://github.com/Netflix/eureka/blob/master/eureka-core/src/main/java/com/netflix/eureka/util/StatusUtil.java#L68 . So in your situation each Eureka instance has ""EC2"" IP in registry, but DNS resolves into different IP, I think this explains such behavior.  =||= Is there a property that I could set that would fix that, and tell the Eureka client to register under the IP address of the network interface that I attached? Is that the behavior something that  `eureka.vipAddress` might set?

Also, I submit a pull request for the exception I was seeing. I'm not 100% sure if that resolves my particular issue, but I think it is a bug fix that is needed anyhow, right? This was #1135  =||= Can you supply the desired IP through `eureka-client/src/main/java/com/netflix/appinfo/providers/EurekaConfigBasedInstanceInfoProvider.java`? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1135eureka-1134: fix for StringIndexOutOfBoundsExceptionJoseph WitthuhnJosephWitthuhnTR12/18/18, 05:14:17 AM"It looks like a -1 was used when it should be comparing against 3. Based on line 353, beginIndex will always be larger than -1, but it will be 3 if there is no ""ec2-"" in the URL.

This is for issue #1134 which I reported earlier this morning.""@jawitthuhn thanks for the PR, this does look like a bug. Given what the logic is trying express, it would make this code block much easier to read if we apply the below changes (and also add a test case):
```
for (String cname : ec2Urls) {
            int beginIndex = cname.indexOf(""ec2-"");
            if (-1 < beginIndex) {  // contains ""ec2-""
                int endIndex = cname.indexOf(regionPhrase + "".compute"");
                String eipStr = cname.substring(beginIndex + 4, endIndex);
                String eip = eipStr.replaceAll(""\\-"", ""."");
                returnedUrls.add(eip);
            } else {  // do nothing
              // Handle case where there are no cnames containing ""ec2-""
              // Reasons include:
              //  Systems without public addresses - purely attached to corp lan via AWS Direct Connect             
              //  Use of EC2 network adapters that are attached to an instance after startup
            }
}
```
Would you mind updating the PR? Thanks! =||= @qiangdavidliu - I believe I've made the requested changes. Could you check? =||= "eureka-1134: fix for StringIndexOutOfBoundsExceptionJoseph WitthuhnJosephWitthuhnTR12/18/18, 05:14:17 AM"It looks like a -1 was used when it should be comparing against 3. Based on line 353, beginIndex will always be larger than -1, but it will be 3 if there is no ""ec2-"" in the URL.

This is for issue #1134 which I reported earlier this morning."NaNJoseph Witthuhn10/26/18, 03:08:54 PMadding test case, fixing a missed line1
1136replicas still unavailable  bug,  server.content-path  is deprecated!!拖鞋莫止步leonayx12305/30/19, 11:34:00 PM"When I configured spring boot, I found it always failed.

Control interface prompt ""unavailable-replicas "".

When I read the source code, I found a bug here.

The org.springframework.cloud.net flix. Eureka. EurekaClientAutoConfiguration 125 lines.

`
String serverContextPath = this.env.getproperty ("" server.content-path "", ""/"");`


**""Server.content-path""** is outdated code


The latest spring-boot context configuration is **""server.servlet.content-path""**



This configuration item affects the default address such as healthCheckUrl.

HealthCheckUrl address will use context-path but is '/'  , 

so even if I configured 'server.servlet.content-path'.

eureka will still not be able to get client heartbeats.

please fix it ~ ""This should probably be posted in spring-cloud project. Though I'm not sure.
Could you please clarify, what exactly do you mean saying ""latest spring-boot context configuration""? What is the origin of this parameter? Spring framework, Jetty, or servlet container spec? =||= > This should probably be posted in spring-cloud project. Though I'm not sure.
> Could you please clarify, what exactly do you mean saying ""latest spring-boot context configuration""? What is the origin of this parameter? Spring framework, Jetty, or servlet container spec?


Thank you for your reply.
Sorry, my English is not very good...

Let me clarify it again。

I use the tomcat plug-in as the container of  eruka(dependence spring boot2)，run with IntelliJIDEA。

 ""Server.content-path"" is no longer recommended~~

```
org.springframework.cloud.net flix. Eureka. EurekaClientAutoConfiguration 125 lines.

String serverContextPath = this.env.getproperty ("" server.content-path "", ""/"");
```

this line  is still used    outdated  “server.content-path”   on this line of the class.

He will lead to the healthCheckUrl is not my actual address

That's what I mean~~~
 =||= Anyway, please try to ask in [Spring Cloud](https://github.com/spring-cloud/spring-cloud-netflix) project. Spring brings many new variables to the equation. This Github project is specifically for Eureka, and what you are using is some integration made by Spring Cloud developers. So, they very likely know more about your question. =||= > Anyway, please try to ask in [Spring Cloud](https://github.com/spring-cloud/spring-cloud-netflix) project. Spring brings many new variables to the equation. This Github project is specifically for Eureka, and what you are using is some integration made by Spring Cloud developers. So, they very likely know more about your question.

Ok, thanks for your patient reply =||= Thanks @mgtriffid  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1137Congestion errors during replication are not monitored by metricsMikhail Gromovmgtriffid10/20/18, 10:24:42 PM"**What I do:**
Introduce some networking or other issues which lead to massive congestion errors (HTTP 503 or timeouts).
**What I expect to see:**
There is a counter for such errors
**What I see instead:**
There is no such counter, only `numberOfSuccessfulExecutions`, `numberOfTransientError` and `numberOfPermanentError` are in place."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1138EUREKA-1137 Add counter for congestion issuesMikhail Gromovmgtriffid10/20/18, 10:24:42 PMFixes #1137 LGTM, thanks @mgtriffid . =||= EUREKA-1137 Add counter for congestion issuesMikhail Gromovmgtriffid10/20/18, 10:24:42 PMFixes #1137 NaNMikhail Gromov10/18/18, 08:35:44 AMEUREKA-1137 Add counter for congestion issues1
1139Eureka is down still able to discover client service from zuulsmartvishu10/20/18, 10:25:45 PM"Facing issue with eureka, I am having 4 services zuul service, eureka server, client and producer service. Simulation steps:
1) I up all services and find all are working fine
2) Now I shutdown eureka and still found I am able to access all services through zuul host and port.
3) Not able to understand how zuul is able to discover services without eureka got-down.

Regards,
Vishnu ""Hi Vishnu,
The thing is that Eureka Client keeps information about services in memory. And periodically it contacts Eureka Server to refresh that information. If your Eureka is unavailable, it simply fails to refresh info, and just uses previous. =||= Thanks @mgtriffid for providing the answer, that is exactly right. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1140update default server's eureka-client propertyDavid Liuqiangdavidliu10/26/18, 12:53:13 AMThe eureka server internal eureka-client need to be configured to get instances for all statuses, not just UP. This is necessary to properly calculate the correct self preservation threshold. See issue https://github.com/Netflix/eureka/issues/1127 for a discussion."Hi @qiangdavidliu 
This issues maybe make eureka server self preservation invalid, could you please include this PR in next release and do you have any plans for next release? thanks : ) =||= @holy12345 releasing one now. =||= "update default server's eureka-client propertyDavid Liuqiangdavidliu10/26/18, 12:53:13 AMThe eureka server internal eureka-client need to be configured to get instances for all statuses, not just UP. This is necessary to properly calculate the correct self preservation threshold. See issue https://github.com/Netflix/eureka/issues/1127 for a discussion.NaNDavid Liu10/20/18, 11:01:55 PM"update default server's eureka-client property

The eureka server internal eureka-client need to be configured to get instances for all statuses, not just UP. This is necessary to properly calculate the correct self preservation threshold. See issue https://github.com/Netflix/eureka/issues/1127 for a discussion."1
1141How many Euraka-Server instances deployed in a cluster?What's the best number,2 or 3 or ....?andyzhaozhaoandyzhaozhao10/23/18, 04:16:30 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1142How many Euraka-Server instances deployed in a cluster?What's the best number,2 or 3 or ....?andyzhaozhaoandyzhaozhao10/26/18, 12:55:22 AMlike this: https://github.com/spring-cloud/spring-cloud-netflix/issues/3222"HI @andyzhaozhao 

You say you have 21 clients so in my experience you can start 3 eureka server(One Eureka server obviously not reasonable)

For you question whats the BEST number I think maybe no accurate answer.

@qiangdavidliu  Any thoughts?  
 =||= Eureka does not do paxos style consensus, so there is no need to deploy at odd numbers. Having said that, I would recommend 3 or more servers as a general rule of thumb. The reason being eureka server deployments will often bring you under par (i.e. to 2 available when running 3). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1143How many Euraka-Server instances deployed in a cluster?What's the best number,2 or 3 or ....? help wantedandyzhaozhaoandyzhaozhao10/23/18, 04:15:34 AM `help wanted`NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1144How many Euraka-Server instances deployed in a cluster?What's the best number,2 or 3 or ....?andyzhaozhaoandyzhaozhao10/23/18, 04:15:22 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1145Shared heartbeat for proxied servicesDave Kingkingo99905/30/19, 11:42:04 PM"Hello,
I have a scenario where I have eureka registered micro-services running behind a proxy.
The proxy is a true microservice , it is UP or DOWN.
The sub-services are virtual and created and registered when the proxy is started.
They should use/share the heartbeat of the proxy microservice. All UP or All DOWN.

Is there a way (without custom code) for this scenario to be possible using the supplied Netflix classes/config options (sub-services share heartbeat of proxy) ?
Is there a way to disable a heartbeat for a service permanently other than setting expiry periods so that a service is always up unless told otherwise ?""If I understand your design correctly, you want something like:

1) Have the Proxy heartbeat to Eureka only, do not register the sub-services with Eureka at all as they are not supposed to be independently addressable.

2) In the proxy heartbeat logic, logically `AND` or logically `OR` the sub-service statuses depending on the desired behavior, determine the sub-service statuses by hitting their healthcheck endpoint periodically.

If you wish to just always report `UP` (this is even weaker than doing a logical `OR` of all sub-service healthcheck statuses), you can set up a no-op callback always saying it's `UP` (on the proxy) when registering with Eureka. You must heartbeat anyway even if you're always heartbeating as `UP` unconditionally otherwise your registration will be evicted.

Hope this makes sense. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1146[Enhancement] Add metrics to track number of instances per statusMikhail Gromovmgtriffid11/08/19, 09:00:02 PM"**Problem:**
While comparing values of metric localRegistrySize across different Eureka nodes in cluster allows to alert on registries inconsistency, there are problems this comparison cannot catch: when total registry size is the same, but counts of instances in each status are different across Eureka cluster.
**Solution:**
Expose count of instances for each status as metric to allow some alerting system to alert on inconsistencies."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1147EUREKA-1146 Expose metrics for counts of instances per statusMikhail Gromovmgtriffid09/10/19, 12:02:40 AMNaNFixes #1146  =||= Hm, strange, on my machine all tests passed. Could somebody please restart? =||= good job =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1148The question of eurekaShanchuanl05/30/19, 11:43:53 PM"I have a problem when I import the source code of eureka ? Why? How to solve this problem？
org.gradle.tooling.BuildException: Could not fetch model of type 'GradleBuild' using Gradle distribution 'https://services.gradle.org/distributions/gradle-2.10-bin.zip'.
	at org.gradle.tooling.internal.consumer.ExceptionTransformer.transform(ExceptionTransformer.java:51)
	at org.gradle.tooling.internal.consumer.ExceptionTransformer.transform(ExceptionTransformer.java:29)
	at org.gradle.tooling.internal.consumer.ResultHandlerAdapter.onFailure(ResultHandlerAdapter.java:41)
	at org.gradle.tooling.internal.consumer.async.DefaultAsyncConsumerActionExecutor$1$1.run(DefaultAsyncConsumerActionExecutor.java:57)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:745)
	at org.gradle.tooling.internal.consumer.BlockingResultHandler.getResult(BlockingResultHandler.java:46)
	at org.gradle.tooling.internal.consumer.DefaultModelBuilder.get(DefaultModelBuilder.java:50)
	at sun.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.buildship.core.workspace.internal.ConnectionAwareLauncherProxy.invokeRun(ConnectionAwareLauncherProxy.java:170)
	at org.eclipse.buildship.core.workspace.internal.ConnectionAwareLauncherProxy.invoke(ConnectionAwareLauncherProxy.java:160)
	at com.sun.proxy.$Proxy46.get(Unknown Source)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider$2.get(DefaultModelProvider.java:122)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider$3.call(DefaultModelProvider.java:142)
	at com.google.common.cache.LocalCache$LocalManualCache$1.load(LocalCache.java:4724)
	at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3522)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2315)
	at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2278)
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2193)
	at com.google.common.cache.LocalCache.get(LocalCache.java:3932)
	at com.google.common.cache.LocalCache$LocalManualCache.get(LocalCache.java:4721)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider.getFromCache(DefaultModelProvider.java:153)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider.executeOperation(DefaultModelProvider.java:138)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider.executeModelBuilder(DefaultModelProvider.java:118)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider.fetchModel(DefaultModelProvider.java:69)
	at org.eclipse.buildship.core.workspace.internal.DefaultModelProvider.fetchGradleBuild(DefaultModelProvider.java:93)
	at org.eclipse.buildship.core.projectimport.ProjectPreviewJob.fetchGradleBuildStructure(ProjectPreviewJob.java:86)
	at org.eclipse.buildship.core.projectimport.ProjectPreviewJob.runToolingApiJobInWorkspace(ProjectPreviewJob.java:75)
	at org.eclipse.buildship.core.util.progress.ToolingApiWorkspaceJob$1.run(ToolingApiWorkspaceJob.java:79)
	at org.eclipse.buildship.core.util.progress.ToolingApiInvoker.invoke(ToolingApiInvoker.java:62)
	at org.eclipse.buildship.core.util.progress.ToolingApiWorkspaceJob.runInWorkspace(ToolingApiWorkspaceJob.java:76)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:39)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
Caused by: org.gradle.internal.exceptions.LocationAwareException: Build file '/Users/shan/Desktop/code/gupao/code/eureka-master/build.gradle' line: 10
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:181)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugins(DefaultPluginRequestApplicator.java:130)
	at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:126)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:38)
	at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:25)
	at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
	at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:55)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:510)
	at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:90)
	at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:42)
	at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:35)
	at org.gradle.initialization.DefaultGradleLauncher$2.run(DefaultGradleLauncher.java:125)
	at org.gradle.internal.Factories$1.create(Factories.java:22)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:52)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:122)
	at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:99)
	at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:93)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:62)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:93)
	at org.gradle.initialization.DefaultGradleLauncher.getBuildAnalysis(DefaultGradleLauncher.java:87)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.configure(InProcessBuildActionExecuter.java:102)
	at org.gradle.tooling.internal.provider.runner.BuildModelActionRunner.run(BuildModelActionRunner.java:48)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.tooling.internal.provider.runner.SubscribableBuildActionRunner.run(SubscribableBuildActionRunner.java:58)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:43)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)
	at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:48)
	at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)
	at org.gradle.util.Swapper.swap(Swapper.java:38)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:66)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)
	at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:246)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
Caused by: org.gradle.api.plugins.InvalidPluginException: An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:178)
	... 59 more
Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin [id 'nebula.netflixoss']
	at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:160)
	at org.gradle.api.internal.plugins.DefaultPluginManager.apply(DefaultPluginManager.java:112)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator$5.run(DefaultPluginRequestApplicator.java:132)
	at org.gradle.plugin.use.internal.DefaultPluginRequestApplicator.applyPlugin(DefaultPluginRequestApplicator.java:166)
	... 59 more
Caused by: java.lang.NullPointerException: Cannot set property 'defaultVersionStrategy' on null object
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin$_apply_closure1.doCall(NetflixOssProjectPlugin.groovy:55)
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin.apply(NetflixOssProjectPlugin.groovy:54)
	at nebula.plugin.netflixossproject.NetflixOssProjectPlugin.apply(NetflixOssProjectPlugin.groovy)
	at org.gradle.api.internal.plugins.ImperativeOnlyPluginApplicator.applyImperative(ImperativeOnlyPluginApplicator.java:35)
	at org.gradle.api.internal.plugins.RuleBasedPluginApplicator.applyImperative(RuleBasedPluginApplicator.java:44)
	at org.gradle.api.internal.plugins.DefaultPluginManager.doApply(DefaultPluginManager.java:144)
	... 62 more
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1149ServiceUrlRandomizer based on hostname may lead to uneven distribution of clientsMikhail Gromovmgtriffid05/31/19, 08:27:10 PM"Back in 2013 (here 3767d56efbabc8cf5e26fc442c7b008c841bbf19) randomizer for list of available Eureka nodes was introduced. And in this implementation reordering service URLs in fact depends on host name.
This implementation is still the only one present in Eureka client. However, if number of services per host is big, but number of hosts is not, it leads to uneven distribution of load on Eureka. For example, if there are some big hosts running numerous Docker containers.

Hence, 3 questions:
1) Why does this implementation depends on host name, why not just use random seed calculated once?
2) If reason is hard to find since the implementation is 5yo, would you mind if we support random seed?
3) And if you don't mind that we support random seed, do you want us to leave hostname-dependent implementation as default one and add config parameter to enable random-based, or we may just replace hostname-dependent one with random-based?

Thanks!""Any comment here guys? =||= @mgtriffid From your description it sounds like you need a different randomization mechanisms for clients to find, fetch or register with eureka nodes.  Or do you need different randomization for eureka nodes to find each other?  Or both?  The PR you submitted only modified the behavior for inter node communication of the eureka cluster and has no effect on client side randomization.  That change would need to be wired into ZoneAffinityClusterResolver.   =||= @elandau , we need different randomization for clients to choose Eureka nodes. And actually with my changes if I do
```java
        ResolverUtils.setRandomizer(new Randomizer() {
            private final int seed = new Random().nextInt();
            @Override
            public void randomize(List randomList) {
                if (randomList.size() < 2) {
                    return;
                }
                Random random = new Random(seed);
                int last = randomList.size() - 1;
                for (int i = 0; i < last; i++) {
                    int pos = random.nextInt(randomList.size() - i);
                    if (pos != i) {
                        Collections.swap(randomList, i, pos);
                    }
                }
            }
        });
```
somewhere before Eureka Guice module is configured, this does the trick for me: seed is different every time, but order of preference remains the same. This implementation of `Randomizer` just uses random number instead of local IP hashcode.

> That change would need to be wired into ZoneAffinityClusterResolver.

As you can see, `ZoneAffinityClusterResovler` just calls `ResolverUtils.randomize`, so logic is actually wired into there.

Am I missing something else? =||= Sorry, you are correct.  Not sure why I wasn't making that connection. =||= Anything new about this guys? Are we ok to proceed with the PRs we submitted?  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1150how long is the eureka registration time lag?yugjyugj11/02/18, 02:53:55 PM"
Hi，**i want to  reduce eureka  registration state synchronization time**,i knew eureka client/server ribbon has local cache for eureka registration info,i try to config some related configuration, like this

**Eureka Server**

```yaml
spring:
  application:
    name: eureka
server:
  port: 9000
eureka:
  environment: yugj-test
  client:
    register-with-eureka: false
    fetch-registry: false
    serviceUrl:
      defaultZone: http://localhost:9000/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
  server:
    enable-self-preservation: false #default true
    eviction-interval-timer-in-ms: 10000 #default 60000
    response-cache-update-interval-ms: 3000 #default 30000
    use-read-only-response-cache: false
endpoints:
  shutdown:
    enabled: true
    sensitive: false
```

**Eureka Client A( ribbon and feign as http client)**

```yaml
server:
  port: 9010

spring:
  application:
    name: sv-ribbon
ribbon:
  MaxConnectionsPerHost: 1000
  MaxTotalConnections: 3000
  ReadTimeout: 10000
  ConnectTimeout: 2000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 0
  ServerListRefreshInterval: 1000
  eureka:
    enabled: true
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:9000/eureka/
  healthcheck:
     enabled: true
  instance:
    lease-renewal-interval-in-seconds: 5 
    lease-expiration-duration-in-seconds: 20 
    registry-fetch-interval-seconds: 5 
    metadata-map:
      cluster: main
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
```

**Eureka client B(privide some rest api) **

```yaml
server:
  port: 9006

spring:
  profiles:
    active: @profile.id@
  application:
    name: rest-server

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:9000/eureka/
  healthcheck:
     enabled: true
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15
    registry-fetch-interval-seconds: 5
    metadata-map:
      cluster: main
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
management:
  security:
    enabled: false
log:
  home: /data/logs/${spring.profiles.active}
```



**question:**

i turn off eureka server read only cache: **eureka.server.use-read-only-response-cache: false**

i lowering eureka client registry fetch interval:**eureka.instance.registry-fetch-interval-seconds: 5**

i lowering ribbon server list refresh time:**ribbon.ServerListRefreshInterval: 5000**



i think it should be less 10 seconds that client a can get the latest registration info;

but when i execute: curl -i -X PUT http://localhost:9000/eureka/apps/rest-server/192.168.1.138:9006/status?value=OUT_OF_SERVICE

ps：rest-server is client B

client A not alway synchronize client B registration info within 10 seconds；sometimes up to 30 seconds

(i continued send request to client A ,client send request to client B via ribbon and feigin

when i set client B OUT_OF_SERVICE, count how long client A failed to get response)



is these some configuration i missed?  

thank you !""Wow, quite a lot of libraries involved here :) It may be Eureka who behaves not like you expect, it may be Ribbon.
First, could you please isolate the problem?
You can use Eureka REST API to get registry directly from Eureka and check how soon does your instance in fact change status. If Eureka consistently returns you fresh information within 10 seconds, then it's wrong place to dig. In such case I'd suggest you to post your question in Ribbon project, or maybe even Spring Cloud. =||= > Wow, quite a lot of libraries involved here :) It may be Eureka who behaves not like you expect, it may be Ribbon.
> First, could you please isolate the problem?
> You can use Eureka REST API to get registry directly from Eureka and check how soon does your instance in fact change status. If Eureka consistently returns you fresh information within 10 seconds, then it's wrong place to dig. In such case I'd suggest you to post your question in Ribbon project, or maybe even Spring Cloud.

thx, eureka rest api get registry immediately, i dig wrong place =||= although this issue is closed, below parameter is missed:

```
ribbon.NFLoadBalancerPingInterval: 5  # default 30s
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1151EUREKA-1149 Allow custom randomizerMikhail Gromovmgtriffid04/17/19, 11:51:45 AM so that services on same host could talk to different Eureka peersOne of possible fixes for #1149 . =||= Declining in favor of #1194. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1152Improved loggingelandau11/12/18, 05:52:41 PM"- Improve logging by linking cause to WebApplicationException
- Add attempt counter to TimeSupervisorTask to help identify situations where the supervisor has stalled"ship it! =||= Improved loggingelandau11/12/18, 05:52:41 PM"- Improve logging by linking cause to WebApplicationException
- Add attempt counter to TimeSupervisorTask to help identify situations where the supervisor has stalled"NaNelandau11/11/18, 01:37:13 AMAdd success counter to TimeSupervisorTask to help identify situations where the supervisor has stalled1
1153Tweak Staleness metricselandau11/14/18, 08:46:59 PMTweak the staleness guages to return 0 for when the client is shut down or when refreshes are not enabled.  Otherwise the metric can be misleading by incorrectly making it appear that refreshes are not working.NaNTweak Staleness metricselandau11/14/18, 08:46:59 PMTweak the staleness guages to return 0 for when the client is shut down or when refreshes are not enabled.  Otherwise the metric can be misleading by incorrectly making it appear that refreshes are not working.NaNelandau11/14/18, 06:30:35 PMSimplify code1
1154[Bug] If instance is not found when trying to update metadata via REST API, server error is thrownMikhail Gromovmgtriffid12/17/18, 07:35:52 AMIt seems that Eureka server should return 404 in such case. Just like it does if instance is not found when trying to update status or DELETE instance from registry.Related PR is merged, so closing this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1155EUREKA-1154 Return 404 if instance is not found when updating metadataMikhail Gromovmgtriffid11/14/18, 09:54:58 PMNaNFixes #1154. =||= EUREKA-1154 Return 404 if instance is not found when updating metadataMikhail Gromovmgtriffid11/14/18, 09:54:58 PMNaNNaNMikhail Gromov11/13/18, 09:15:23 AMEUREKA-1154 Return 404 if instance is not found when trying to update metadata via REST API1
1156Fix-1154sagaholy1234511/14/18, 07:17:19 PM"Change response code when instance not found we return 404 not 500

Please see https://github.com/Netflix/eureka/issues/1154

Thanks"Duplicates #1155. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1157Eureka Client doesn't respect DNS server change at runtimeSergey Krutskokrutsko12/18/18, 03:31:24 PM"Eureka Client doesn't respect DNS server change at runtime.

E.g. try to adjust DNS server at `/etc/resolv.conf` file , but Eureka Client keep communicate with _old_ address.

The reason is that Eureka Client initializes [InitialDirContext](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver.java#L50) once and keep it in static variable , so it never re-read resolv.conf.

I didn't spent much time to write a proper unit test for this (let me know if it needed), but here the code which could help to check this with DnsResolver.

```
ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);

        executorService.scheduleAtFixedRate(
                () -> {
                    logger.info(""running dns checker"");

                    Hashtable env = new Hashtable();
                    env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.dns.DnsContextFactory"");
                    DirContext ictx = null;
                    try {
                        ictx = new InitialDirContext(env);
                        String dnsServers = (String) ictx.getEnvironment().get(""java.naming.provider.url"");

                        logger.info(""DNS Servers: "" + dnsServers );
                    } catch (NamingException e) {

                    }

                    try {
                        String dnsServers = (String) dirContext.getEnvironment().get(""java.naming.provider.url"");

                        logger.info(""DNS Servers static : "" + dnsServers );
                    } catch (NamingException e) {

                    }
                },
                10,
                10,
                TimeUnit.SECONDS
        );
```
"Shouldn't we open an issue first, linked to this PR? =||= @pparth  I guess it doesn't matter, but here it's https://github.com/Netflix/eureka/issues/1158 =||= Can someone check this PR please? =||= Can someone take a look at the PR, and re-run the tests (they all pass on my local machine) ? =||= Eureka Client doesn't respect DNS server change at runtimeSergey Krutskokrutsko12/18/18, 03:31:24 PM"Eureka Client doesn't respect DNS server change at runtime.

E.g. try to adjust DNS server at `/etc/resolv.conf` file , but Eureka Client keep communicate with _old_ address.

The reason is that Eureka Client initializes [InitialDirContext](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/endpoint/DnsResolver.java#L50) once and keep it in static variable , so it never re-read resolv.conf.

I didn't spent much time to write a proper unit test for this (let me know if it needed), but here the code which could help to check this with DnsResolver.

```
ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);

        executorService.scheduleAtFixedRate(
                () -> {
                    logger.info(""running dns checker"");

                    Hashtable env = new Hashtable();
                    env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.dns.DnsContextFactory"");
                    DirContext ictx = null;
                    try {
                        ictx = new InitialDirContext(env);
                        String dnsServers = (String) ictx.getEnvironment().get(""java.naming.provider.url"");

                        logger.info(""DNS Servers: "" + dnsServers );
                    } catch (NamingException e) {

                    }

                    try {
                        String dnsServers = (String) dirContext.getEnvironment().get(""java.naming.provider.url"");

                        logger.info(""DNS Servers static : "" + dnsServers );
                    } catch (NamingException e) {

                    }
                },
                10,
                10,
                TimeUnit.SECONDS
        );
```
"NaNskrutsko12/18/18, 09:25:43 AMrevert to static DNSResolver1
1158Eureka Client doesn't respect DNS server change at runtimeSergey Krutskokrutsko05/30/19, 11:46:53 PMMore details and PR is here https://github.com/Netflix/eureka/pull/1157"who could take a look at the PR?
Thanks =||= Can someone take a look and merge this PR please? It is rather straight forward.  =||= Thanks for the report and the PR! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1159Eureka REST operation CORS(Cross-origin resource sharing)xcbeyondxcbeyond11/30/18, 04:55:23 PMWhen other systems call the Eureka Rest api，it will Cross-domain access problem。Is there any good way，except the modified Eureka Rest api interface." @xcbeyond i met, too. but I thought it was not necessary that in a production environment, you don't have to call the rest api directly. you can introduced zuul  or nginx , seems Eureka is not supposed to be exposed to the outside =||= Most servlet containers have CORS filters you can use (see for example [Tomcat](https://tomcat.apache.org/tomcat-9.0-doc/config/filter.html#CORS_Filter) and [Jetty](https://www.eclipse.org/jetty/documentation/9.4.x/cross-origin-filter.html) filters). So if you need that functionality you should be able to enable it. =||= @halower @brharrington thank you.I rewrite rest api to call the rest api directly.([springCloudEureka-rest](https://github.com/xcbeyond/springCloudLearning/tree/master/springCloudEureka-rest)) =||= Insert this in your main class:
-------------------------------

	public @Bean FilterRegistrationBean<?> corsFilter() {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		CorsConfiguration config = new CorsConfiguration();
		config.setAllowCredentials(true);
		config.addAllowedOrigin(""http://localhost:4200"");
		config.addAllowedMethod(""*"");
		config.addAllowedHeader(""Accept"");
		source.registerCorsConfiguration(""/**"", config);
		FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<Filter>(new CorsFilter(source));
		bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
		return bean;
	}

Full example: https://github.com/EffNox/spring_eureka-rest-operations-angular =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1160eureka master v1.9.8 build failed error on linux Centos 6Yuyangyuynagforhacker12/20/18, 08:31:05 AM"Hello, I have a question.
My environment is Linux centos 6, the following problem occurs when executing ./gradlew build after clone source code

com.netflix.discovery.DiscoveryClientRegistryTest > testEurekaClientPeriodicHeartbeat FAILED
    org.mockito.exceptions.verification.TooLittleActualInvocations at DiscoveryClientRegistryTest.java:156

com.netflix.discovery.EurekaEventListenerTest > testCacheRefreshEvent FAILED
    java.lang.NullPointerException at EurekaEventListenerTest.java:81

com.netflix.discovery.DiscoveryClientEventBusTest > testStatusChangeEvent FAILED
    java.lang.NullPointerException at DiscoveryClientEventBusTest.java:90

200 tests completed, 3 failed, 4 skipped
:eureka-client:test FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':eureka-client:test'.
> There were failing tests. See the report at: file:///opt/eureka/eureka-client/build/reports/tests/index.html

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Request for help above"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1161Manual instance registration with EurekaHttpClientStephan Windmüllerwindmueller11/08/19, 09:00:46 PM"I am trying to register application instances manually using the Eureka Client (version 1.9.3):

```
EurekaHttpClient registrationClient = new RestTemplateEurekaHttpClient(new RestTemplate(), ""http://localhost:8080/eureka"");
InstanceInfo instanceInfo = InstanceInfo.Builder.newBuilder()
[...]
.build();
registrationClient.register(instanceInfo);
```

The result is an HTTP error (400) because of a `MismatchedInputException`: `Root name 'instanceId' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]`

It seems that the generated JSON does not contain a root ""instance"" field. Am I using the API correctly or is there another way for manual instance registration? The Eureka server is running in version 2.0.2.""You can try the following:

```java
final String serviceUrl = ""http://localhost:8762/eureka/"";

TransportClientFactory factory = new RestTemplateTransportClientFactory();
EurekaEndpoint defaultEndpoint = new DefaultEndpoint(serviceUrl);
EurekaHttpClient eurekaHttpClient = factory.newClient(defaultEndpoint);

InstanceInfo info = InstanceInfo.Builder.newBuilder()
        [...]
        .build();

eurekaHttpClient.register(info);
``` =||= Hello, have you solved the problem? =||= Sorry for the late response. The suggested code works perfectly, thank you. =||= I still have HTTP Error 400 using the given solution =||= > @softreaver I still have HTTP Error 400 using the given solution

It's likely something different, please open a separate issue in this case and provide the relevant details (minimal repro).

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1162Question: region distinct server, but multi-region service lookupjferron031006/21/19, 05:27:06 PM"This is more of a research question that anything as I've tried to scour the internet.  But I'm wondering the following setup and if is possible.  I have:

- region a-aws and region b-aws.  Either region could have 1 to N eureka servers that sync between themselves, but not cross region (this is key).
- App registering to region b-aws as a server, but wants to look up services as the discovery client in either a-aws or b-aws.  Is this possible and how do I set up the discovery client to do so and not having the application switch it's current eureka registration server.

I'm trying to debug a new env we are setting up and noticing the server registration flip when we don't want it to as we have functionality for the eureka client to be able to lookup services in either region.  The reason being for this env, we want the regions isolated and not able to cross-sync eureka registrations.

What i'm seeing in our logs: 

2018-11-28T20:34:11.97+0000 [APP/PROC/WEB/0]OUT 2018-11-28T20:34:11.975Z WARN  0 [DiscoveryClient-3] com.netflix.discovery.DiscoveryClient: DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - defaultZone, preferSameZone- true. Defaulting to a-aws
2018-11-28T20:34:11.97+0000 [APP/PROC/WEB/0]OUT 2018-11-28T20:34:11.975Z INFO  0 [DiscoveryClient-3] com.netflix.discovery.DiscoveryClient: Updating the serviceUrls as they seem to have changed from [https://b-aws/eureka/] to [https://a-aws/eureka/] 

John"this is not a well supported use case but should be achievable by creating another Discovery client for lookups only and feeding it a totally independent config disabling heartbeating/registration and using different region. =||= Hi, @jferron0310 did you ever try this out? looking for an example for this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1163  Add @Override toString() in InstanceInfoSangMinphantasmicmeans12/18/18, 04:30:19 AM"Application(class) can get simple information by @Override the toString().

-> toString() in Application.java

    @Override
    public String toString() {
        return ""Application [name="" + name + "", isDirty="" + isDirty
                + "", instances="" + instances + "", shuffledInstances=""
                + shuffledInstances + "", instancesMap="" + instancesMap + ""]"";
    }

It is simple to use some information immediately.

But What is more necessary is the information in InstanceInfo(class)?
InstanceInfo provides a detailed information about the eureka client.
InstanceInfo provides a getter, but it has about 30 member variables.

So it seems necessary to provide the overriden toString() of InstanceInfo"NaN  Add @Override toString() in InstanceInfoSangMinphantasmicmeans12/18/18, 04:30:19 AM"Application(class) can get simple information by @Override the toString().

-> toString() in Application.java

    @Override
    public String toString() {
        return ""Application [name="" + name + "", isDirty="" + isDirty
                + "", instances="" + instances + "", shuffledInstances=""
                + shuffledInstances + "", instancesMap="" + instancesMap + ""]"";
    }

It is simple to use some information immediately.

But What is more necessary is the information in InstanceInfo(class)?
InstanceInfo provides a detailed information about the eureka client.
InstanceInfo provides a getter, but it has about 30 member variables.

So it seems necessary to provide the overriden toString() of InstanceInfo"NaNphantasmicmeans12/14/18, 08:26:30 PM"add @Override toString() in InstanceInfo

Application(Class) can get simple information by @Override the toString().

-> toString() in Application.java

    @Override
    public String toString() {
        return ""Application [name="" + name + "", isDirty="" + isDirty
                + "", instances="" + instances + "", shuffledInstances=""
                + shuffledInstances + "", instancesMap="" + instancesMap + ""]"";
    }

It is simple to use some information immediately.

But What is more necessary is the information in InstanceInfo(Class)?
InstanceInfo provides a getter, but it has about 30 member variables.

So it seems necessary to provide the overriden toString() of InstanceInfo"1
1164eureka 1.9.8 Incrementally acquired registration instance cannot get the latest contract renewal timeyikangfengyikangfeng05/31/19, 12:00:59 AMIncrementally acquired registration instance cannot get the latest contract renewal time"Hi @yikangfeng 
Could you please speak more in detail? Thanks

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1165Mem raised after I call api everytime.zhaodageng05/31/19, 12:01:30 AM"current-memory-usage | 74mb (7%)
will increase every time after you call the api http://ip:port/eureka/apps

"Well, I can't say this is surprising - Eureka allocates objects when you call this API, but most are supposed to be collected by GC. Does memory utilization continue to grow steadily even after garbage collection? In other words, do you experience a memory leak? Also please let us know what's the version you are using. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1166Configuration of Eureka Server in Eureka Client on AWS ECSSteve Behrendtdersteve11/08/19, 09:01:54 PM"How do you address the Eureka Server on AWS ECS?

My requirements/current setup:
- Eureka Server Deployed as ECS Service with Launch Type EC2
-- Service Discovery (from ECS) enabled, which creates a Route53 DNS entry for the Eureka Server (e.g. eureka.local)
- Eureka Server is only for mid-tier Services, hence no external address of Eureka Server needed/wanted
- Eureka Server deployed in multiple AZs in one region
- Eureka Client needs to configure (address) the Eureka Server somehow

**Addressing via DNS from Route53:** 
When I set the `eurekaServerDNSName: service-registry.local` like this, then I get the following exception, because it can't find the txt record for the DNS entry. Is there a way to create the TXT record also and if yes, how shall I set this for ECS Service Discovery?

Exception:
`
Caused by: java.lang.RuntimeException: Failed to initialize DiscoveryClient!
`

`
ationConfigEmbeddedWebApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'eurekaAutoServiceRegistration'; nested exception is java.lang.NullPointerException
`

`
c.n.d.s.r.aws.ConfigClusterResolver : Resolving eureka endpoints via DNS: txt.eu-west-1.service-registry.local
`

In addition when I want to create the txt record in Route53 for my services, I get the error message that I can't actually change this record, like ""The resource hostedzone/yyy can only be managed through servicediscovery.amazonaws.com"". So I wonder how I could use DNS configuration with AWS ECS for Eureka configuration.

**Elastic IPs as an alternative**
Since Elastic IPs (EIP) expose a public IP this is no possible solution for us.""@dersteve did you manage to find a solution to this?

I tried without ECS Service Discovery since it creates only SRV or A records. Instead I associated a private hosted zone with the VPC and had a subset of private IP addresses dedicated for the instances Eureka is being launched on (bridge mode being used in ECS), then I have a separate process which keeps the txt records up to date with these private IPs. was running into issues with hostname mismatches in the containers =||= @HieronymusLex No, I actually didn't manage to do it. We were thinking about a solution along your lines, but were a bit afraid of all the necessary stuff. We are now close to finish a version where we don't use Eureka on ECS. 

Instead we use a private hosted zone and a A-Record for each service so we can address a service in a resttemplate with its name, e.g. ""customer"" (as we did with Eureka/Ribbon/LoadBalanced Resttemplate before) and have the A-Record in the private zone pointed to a ALB that distributes the load between the service instances.  =||= @HieronymusLex and @troshko111 I have the same problem. Is there a way to properly setup the dns discovery? =||= I'm trying to register a service with eureka which is using ecs service discovery(instead of using ribbon). Is SRV record supported by eureka? =||= No, the SRV records aren't implemented. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1167EIPManager cannot bind EIP  when ec2 instance has 2 privateIp'sSushant Borsebsushant-athena11/08/19, 09:01:37 PM"Hi,

We are using ECS service discovery which assignes a new privateIp to the eureka instance. So EIPManager is not able to allocate eip to that eureka instance as there are two privateIp's for that instance. 

**Error Stacktrace** : 
```
com.amazonaws.AmazonServiceException: There are multiple interfaces attached to instance 'i-0304df75ac562f573'. Please specify an interface ID for the operation instead. (Service: AmazonEC2; Status Code: 400; Error Code: InvalidInstanceID; Request ID: f2e3ad9b-64ab-4802-ab84-a01130a9521d)
at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1071)
at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:719)
at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:454)
at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:294)
at com.amazonaws.services.ec2.AmazonEC2Client.invoke(AmazonEC2Client.java:9393)
at com.amazonaws.services.ec2.AmazonEC2Client.associateAddress(AmazonEC2Client.java:2806)
at com.netflix.eureka.aws.EIPManager.bindEIP(EIPManager.java:243)
at com.netflix.eureka.aws.EIPManager.handleEIPBinding(EIPManager.java:136)
at com.netflix.eureka.aws.EIPManager.start(EIPManager.java:105)
at com.netflix.eureka.aws.AwsBinderDelegate.start(AwsBinderDelegate.java:42)
at org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap.initEurekaServerContext(EurekaServerBootstrap.java:145)
at org.springframework.cloud.netflix.eureka.server.EurekaServerBootstrap.contextInitialized(EurekaServerBootstrap.java:81)
at org.springframework.cloud.netflix.eureka.server.EurekaServerInitializerConfiguration$1.run(EurekaServerInitializerConfiguration.java:70)
at java.lang.Thread.run(Thread.java:748)
```

Please suggest workaround!

Thanks,
Sushant"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1168How do I More instance to App ？庄文达pkwenda05/31/19, 12:08:37 AM"We company some features want use Eureka instead of zookeeper , I check out this WIKI:[Eureka REST operations](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations), I do packaging Eureka-client , but only has register instanceId REST , And I get an error when I keep AppId and replace InstanceId. how to add instances into App's REST ? It should be exit ！
because：

![image](https://user-images.githubusercontent.com/14212375/50760492-f4a58180-12a2-11e9-9583-82cdd9fbf7e9.png)

It is Array like zookeeper ！ How do I register multiple instances？Now, i only can register one instance into one App。

![image](https://user-images.githubusercontent.com/14212375/50761610-cbd2bb80-12a5-11e9-934c-67e327e8d368.png)

I register like this."Have each instance of the app register with Eureka and it will be merged server-side and all will be addressable. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1170sanitize metadata map for empty valuesDavid Liuqiangdavidliu01/11/19, 12:26:25 AMNaNNaNsanitize metadata map for empty valuesDavid Liuqiangdavidliu01/11/19, 12:26:25 AMNaNNaNDavid Liu01/11/19, 12:14:01 AMUpdate EurekaConfigBasedInstanceInfoProvider.java1
1171Endpoint ID 'service-registry' contains invalid charactersWray Zhengwrayzheng05/31/19, 12:09:46 AM"```
 :: Spring Boot ::        (v2.1.1.RELEASE)

2019-01-12 00:37:56.311  INFO 14204 --- [           main] c.c.eurekasvr.EurekasvrApplication       : No active profile set, falling back to default profiles: default
2019-01-12 00:37:58.191  WARN 14204 --- [           main] o.s.boot.actuate.endpoint.EndpointId     : Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
```"This is actuator's warning.  and  hystrix.stream is the same =||= Does not seem to be a Eureka bug per se. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1172update the commentiZDTizdt05/30/19, 10:36:47 PMupdate the comment of  getRegisteredApplications(String appName)Thanks! =||= update the commentiZDTizdt05/30/19, 10:36:47 PMupdate the comment of  getRegisteredApplications(String appName)NaNiZDT01/13/19, 03:42:20 PM"update the comment

update the comment of  getRegisteredApplications(String appName)"1
1173Rest endpoint /eureka/apps/delta is not returning delta correctly Piyush Kumarpiyushkumar1307/28/19, 06:08:46 AM" I am updating the eureka metadata with key `weight` and `some value` using endpoint `/eureka/apps/${app-name}/${app-id}/metadata?weight=40`. I am calling this update metadata api **once** for each of my registered service instances(eureka client registered with eureka) in a **loop**(registered instances are two and it can be more). Simultaneously, I am hitting the endpoint `/eureka/apps/delta` but this endpoint sometimes returning the response with the updates I have done using update metadata api and sometimes its not.  <br/>
Just to re-verify my above result, I have deployed zuul application, registered it with eureka and customized the Ribbon configuration- getting the **servers from loadbalancers** and **from returned server fetching InstanceInfo** object and printing **InstanceInfo.getMetadata** . This also sometimes giving the correct updated metadata and sometimes not.

**Note** : I am using Spring cloud version `Edgware.SR4`. 

Have a look at this snapshot Response of /eureka/apps/delta after update metadata call

<img width=""1332"" alt=""screen shot 2019-01-15 at 10 06 08 pm"" src=""https://user-images.githubusercontent.com/13505531/51197849-9e76b500-1918-11e9-896e-759d6b5b5e46.png"">""@qiangdavidliu @tbak could you please provide some help on this. =||= cc-ing the current primary maintainers @elandau @troshko111  =||= Thanks @qiangdavidliu  =||= Thanks for the report, it'd be helpful if you could come up with a minimal repro, not sure what the problem you're facing may be. =||= I was able to resolve the issue by using diabling delta : `disableDelta: true` .  Thought, it might be helpful for someone else.
**A word of caution** : disabling delta will increase the traffic b/w eureka clients and eureka server. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1175move gain of lastDirtyTimestamp before gain of status to avoid race conditionAddo.Zhangaddozhang04/23/19, 02:39:57 AMrefer to solution of #1174delete forked repo by mistake. New one #1198 created. Close this =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1176Allow 'immediate' registerRuntimeMetadata instead of waiting for the next heartbeatAntónio Pedro Marquesentonio05/31/19, 12:18:06 AM"My understanding is that changes made by a client to its InstanceInfo (namely, the metadata) are only sent to the server in the next heartbeat. With a default heartbeat of 30s, that will be, on average, 15s after they are made.

This is fine for most of my metadata, but for some of it - that changes very rarely - I'd really want the changes to be as immediate as possible. They wouldn't have to be immediate, but preferably within an interval of 5 seconds or less, which is much sooner than the average heartbeat.

Reducing the heartbeat interval is not only against the advice, as it's also overkill for what I want, since the changes that do need immediate updates are very rare. So I thought of 2 possibilities:

1. Having a high-frequency thread to check if updates have to be sent, and send them f the next heartbeat is still far away. That would require callers to *not* request updates if they aren't high priority (I currently have a thread periodically requesting those 'lesser priority' updates).
2. Add a `boolean immediately` to `registerRuntimeMetadata` according to which the update is really performed at call time.

Option 2 seems pretty unobtrusive to me, but I'm unsure if this feature fits your philosophy at all, or if it doesn't do the same breakage that is said to be an issue with small interval heartbeats. I'd add that all I'd need would be a 'best effort' thing to provide some functionality, rather than some flawless, edgecaseless, wonder.""Thanks for describing the use case. The proposed solutions do not seem like a perfect design fit into a naturally eventually consistent model of Eureka as there's no ""immediate"" anywhere anyway and the underlying replication may be delayed even if you heartbeat more often. Based on the info provided it'd say we're unlikely to implement this / merge a PR.

The use case seems to be trying to utilize Eureka as a config store which it isn't, if that's the case I suggest trying ZooKeeper, etcd or similar.

Hope this makes sense. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1177Remove unused javax.mail dependencyMatt Nelsonmattnelson05/30/19, 10:29:38 PMRemove unused javax.mail dependencyThanks for the PR! =||= Remove unused javax.mail dependencyMatt Nelsonmattnelson05/30/19, 10:29:38 PMRemove unused javax.mail dependencyNaNMatt Nelson01/23/19, 08:46:25 PMRemove unused javax.mail dependency1
1178Ereka 1.9.8 Renews threshold is correct for the first time, and then this value will automatically grow, resulting in automatic opening of protection mode. What is the reason?yikangfengyikangfeng05/31/19, 12:18:28 AMEreka 1.9.8 Renews threshold is correct for the first time, and then this value will automatically grow, resulting in automatic opening of protection mode. What is the reason?"Hi @yikangfeng , please check if your Eureka server has property `eureka.shouldFilterOnlyUpInstances` configured as `false`. See #1127 for details. Please read the first post there and see if it describes your situation. =||= > Hi @yikangfeng , please check if your Eureka server has property `eureka.shouldFilterOnlyUpInstances` configured as `false`. See #1127 for details. Please read the first post there and see if it describes your situation.

Well, thank you very much. =||= Thanks @mgtriffid.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1179Is it necessary for service consumers to register in the registry?dear_nerodearnero05/31/19, 12:19:26 AM"If my application is a consumer, do I need to set register-with-eureka=false?
If my application is a provider, do I need to set fetch-registry=false?"It's not necessary to register to be able to query and not necessary to query if you just want to register. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1180Implementing client in another languagearvyy05/31/19, 12:20:21 AM"(Sorry if it's not the right place to ask)

How should I go about implementing the eureka-client in a different language? Does a specification / interface for the client exist? Or is following java implementation the only real path for such task?"Following the Java client is likely the best option at this point, sorry. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1181client start failed : Ignoring onDemand update due to rate limiterEdenEdenStack05/31/19, 12:23:29 AM"I use **spring boot 2.1.2.RELEASE** and **spring cloud Greenwich.RELEASE**

Other services use most of the same libs works fine except 2 services use **spring-boot-starter-amqp** cannot be registered to eureka .

Warn log is : **Ignoring onDemand update due to rate limiter**
"Trying Spring support may be a better option in this use case, seems unrelated to Eureka. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1182Excuse me, Eureka version 1.9.8 configures preferSameZone when configuring to get zones from DNS and service urls, so as to register under the same zone? Look at the source code or need to configure availability Zones. Is there any problem? Thank you.yikangfengyikangfeng05/31/19, 12:22:35 AM"Excuse me, Eureka version 1.9.8 configures preferSameZone when configuring to get zones from DNS and service urls, so as to register under the same zone? Look at the source code or need to configure availability Zones. Is there any problem? Thank you.

![image](https://user-images.githubusercontent.com/6268253/52897418-1e8d8480-320f-11e9-9972-45a66abd1e9f.png)"This is related to preferring the local availability zone, I suggest to check out say AWS docs on availability zones to better understand what this is and why it may be useful. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1183http://localhost:8761/ opens but http://localhost:8761/eureka doesn'tRajneeshDubeyRajneeshDubey05/31/19, 12:25:21 AM"While setting up discovery server on local -

eureka server dashboard opens at ""http://localhost:8761/"" but ""http://localhost:8761/eureka"" doesn't. And i need it to register my services on to that.  
![image](https://user-images.githubusercontent.com/15822150/53089384-73443e80-3532-11e9-8932-3771db4023dd.png)

![image](https://user-images.githubusercontent.com/15822150/53089424-8f47e000-3532-11e9-91e8-f5e3ea9e1ae8.png)"Sorry this is likely unrelated to Eureka, if you feel otherwise please provide more details and a minimal repro, then feel free to reopen. =||= http://localhost:8761/eureka/eureka put url in client property file like this.It worked for me =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1184build fail-what are the right versions?Abhishek Anandninjabhishek02/24/19, 10:44:06 AM"I just cloned and tried build. I am getting following error. My java version is ""1.8.0_191"" and gradle version ""5.2.1"". Are these the right versions to build and use? Or there is another workaround I need to follow?

![image](https://user-images.githubusercontent.com/20058829/53261199-6de52080-36f9-11e9-8e9e-e493aa49e760.png)"You should use the gradle wrapper (`./gradlew`) rather than a gradle install. =||= yup..got it..thanks =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1185JerseyReplicationClient doesn't honor custom SSL ContextMOS652211/08/19, 09:04:03 PM"In an earlier ticket, there was an error in the Replication Client for Eureka where it wasn't checking to see if there was a system setting for ""shouldSSLConnectionUseSystemSocketFactory"", but that was fixed.

However, the fix is fairly limited in scope. The current fix is to look to see if HTTPS is used for the replication protocol, if it is, look for a system property (shouldSSLConnectionUseSystemSocketFactory).

A problem occurs in the ""somewhat documented"" way to create a discovery client that uses a custom SSL context is to create a ""DiscoveryClient.DiscoveryClientOptionalArgs"" bean and have it in the Spring Context. This bean is not used during the creation of the replication client. 

The question is:

Shouldn't the ""DiscoveryClient.DiscoveryClientOptionalArgs"" be used in creating the replication client? This way, people who setup a custom SSL Context can just do it once and forget it. 

There are a lot of apps out there that use the system wide SSL for inter process communication outside of their application's domain (i.e. SystemA is a gateway to SystemB which needs SSL Client Certs. They shoudln't have to be rewritten to make it so that Eureka takes control of the default context and the existing code has to be refactored to use custom context. Eureka should be the drop in.
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1186"Client reports ""HTTP 400 Bad Request/unable to send heartbeart!"" even though heartbeat succeeds"jbrew805/31/19, 12:29:44 AM"I have setup a eureka server and a handful of web services as eureka clients, all deployed as aws elastic beanstalk apps. Everything appears to be working correctly- the apps register with eureka and are visible on the system status page, and I can hit them via a zuul server that gets routing info from eureka.

However, the clients are reporting that they are not able to send heartbeats, despite the fact that the server is receiving them just fine. The server lists the services as UP and the access log for the server shows that it is receiving the heartbeats and replying with a 200 status code. 

But the clients are are throwing 400/Bad Request exceptions:

```
2019-03-08 15:38:11,884 [DiscoveryClient-HeartbeatExecutor-0] DEBUG c.n.d.s.t.j.AbstractJerseyEurekaHttpClient - Jersey HTTP PUT <eureka server host>/eureka/apps/HOOPLA-RECOMMENDATIONS/<hostname>:80:3aaeab0f-8899-4890-9323-584cf416aec2; statusCode=200
2019-03-08 15:38:11,884 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.n.d.s.t.d.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='<eureka server host>/eureka}
javax.ws.rs.WebApplicationException: HTTP 400 Bad Request
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634)
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586)
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89)
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:846)
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1405)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.thoughtworks.xstream.io.StreamException: 
	at com.thoughtworks.xstream.io.xml.DomDriver.createReader(DomDriver.java:115)
	at com.thoughtworks.xstream.io.xml.DomDriver.createReader(DomDriver.java:84)
	at com.thoughtworks.xstream.XStream.fromXML(XStream.java:1445)
	at com.netflix.discovery.converters.wrappers.CodecWrappers$XStreamXml.decode(CodecWrappers.java:387)
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103)
	... 23 common frames omitted
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:257)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:339)
	at com.thoughtworks.xstream.io.xml.DomDriver.createReader(DomDriver.java:108)
	... 27 common frames omitted
2019-03-08 15:38:11,884 [DiscoveryClient-HeartbeatExecutor-0] WARN  c.n.d.s.t.d.RetryableEurekaHttpClient - Request execution failed with message: HTTP 400 Bad Request
2019-03-08 15:38:11,884 [DiscoveryClient-HeartbeatExecutor-0] ERROR c.netflix.discovery.DiscoveryClient - DiscoveryClient_HOOPLA-RECOMMENDATIONS/<hostname>:80:3aaeab0f-8899-4890-9323-584cf416aec2 - was unable to send heartbeat!
```

The client acknowledges the 200 response from the server, but then throws an error when trying to parse the response body. Stepping through the client code, it looks like the client is expecting an InstanceInfo object in the body of the response it gets from the server. But the heartbeat endpoint's response body is empty. 

The server and client are the same eureka version (1.9.3).

Is this the expected behavior? Is this a bug, or could there be a problem with my configuration?""In my original post I said everything appeared to be working fine despite the exceptions, but this was wrong: clients were not automatically re-registering with the server when the server was restarted.

But- this might not be a bug after all. I had eureka running as an aws elastic beanstalk app using tomcat and httpd. The httpd config had mod_deflate enabled, which appears to have caused all of the empty response bodies to be compressed into an empty gzip file. The discovery client through exceptions when trying to parse this empty response body. Disabling gzip compression on the eureka server solved this issue.
 =||= We are also seeing same issue and we want the compression as well. Isn't there any other workaround for this ? =||= eureka:
  instance:
    hostname: localhost
  client:
    gZipContent: false
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://localhost:80/eureka/
  server:
    enableSelfPreservation: false  
    gZipContentFromRemoteRegion: false

We are also seeing same issue ,and accept you  tips, my config is show above. the error is always. please tell me where my error? thank you!
 =||= @jbrew8  =||= netflix-eureka 2.1.2.RELEASE
in k8s environment with same issue 
know the problem but don't know how to fix it.
cause all of the empty response bodies to be compressed into an empty gzip file =||= I have fixed this.
if your eureka server run by war deploy to tomcat,do not compression xml and json,setting in tomcat config server.xml
if your eureka server run by jar,do not compression  xml and json,setting in application.yml or application.properties or bootstrap.properties =||= Can you show what you mean by that, please? What is your configuration? =||= > Can you show what you mean by that, please? What is your configuration?


![QQ截图20200923193738](https://user-images.githubusercontent.com/10512112/94007728-78373700-fdd4-11ea-9800-3b5b38dbd96b.png)

remove these compression config from your web server  or application.yml.
this fixed my issue =||= My application.yml for the Eureka-Client, or for the Eureka-Server project?

For my eureka-server project I have this configuration:

server.port=8761
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


And for my eureka-client project I have:

eureka.instance.hostname=wallet-test.host
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=false
eureka.client.serviceUrl.defaultZone=http://wallet-forwarder.host/eureka =||= > My application.yml for the Eureka-Client, or for the Eureka-Server project?

Eureka-Server =||= > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> 
> Eureka-Server

Like below?
eureka.client.g-zip-content=false
eureka.server.g-zip-content-from-remote-region=false
eureka.server.xml-codec-name=false =||= > > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> > 
> > 
> > Eureka-Server
> 
> Like below?
> eureka.client.g-zip-content=false
> eureka.server.g-zip-content-from-remote-region=false
> eureka.server.xml-codec-name=false

yes,if you run by jar. =||= > > > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> > > 
> > > 
> > > Eureka-Server
> > 
> > 
> > Like below?
> > eureka.client.g-zip-content=false
> > eureka.server.g-zip-content-from-remote-region=false
> > eureka.server.xml-codec-name=false
> 
> yes,if you run by jar.

I package a war and deploy that in the cloud.
My configuration is only a application.properties file
and a pom.xml =||= > > > > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> > > > 
> > > > 
> > > > Eureka-Server
> > > 
> > > 
> > > Like below?
> > > eureka.client.g-zip-content=false
> > > eureka.server.g-zip-content-from-remote-region=false
> > > eureka.server.xml-codec-name=false
> > 
> > 
> > yes,if you run by jar.
> 
> I package a war and deploy that in the cloud.
> My configuration is only a application.properties file
> and a pom.xml. Isnt application.properties ok for war?

 =||= > > > > > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> > > > > 
> > > > > 
> > > > > Eureka-Server
> > > > 
> > > > 
> > > > Like below?
> > > > eureka.client.g-zip-content=false
> > > > eureka.server.g-zip-content-from-remote-region=false
> > > > eureka.server.xml-codec-name=false
> > > 
> > > 
> > > yes,if you run by jar.
> > 
> > 
> > I package a war and deploy that in the cloud.
> > My configuration is only a application.properties file
> > and a pom.xml. Isnt application.properties ok for war?

if you run by war,careful your web server,such as tomcat,in server.xml maybe have gzip compression config,remove it. =||= > server.xml

I dont have a server.xml file at all in my project =||= > > > > > > > My application.yml for the Eureka-Client, or for the Eureka-Server project?
> > > > > > 
> > > > > > 
> > > > > > Eureka-Server
> > > > > 
> > > > > 
> > > > > Like below?
> > > > > eureka.client.g-zip-content=false
> > > > > eureka.server.g-zip-content-from-remote-region=false
> > > > > eureka.server.xml-codec-name=false
> > > > 
> > > > 
> > > > yes,if you run by jar.
> > > 
> > > 
> > > I package a war and deploy that in the cloud.
> > > My configuration is only a application.properties file
> > > and a pom.xml. Isnt application.properties ok for war?
> 
> if you run by war,careful your web server,such as tomcat,in server.xml maybe have gzip compression config,remove it.

I dont have a server.xml file at all in my project

 =||= > > server.xml
> 
> I dont have a server.xml file at all in my project

no,not in your project,that in your web server config.
does your war run in tomcat that provided by cloud =||= Changed to that:
Is this correct?

    <Connector port=""80"" protocol=""HTTP/1.1""
               connectionTimeout=""20000""
	       compression=""on""
               compressionMinSize=""512""
	       useSendfile=""false""
               compressableMimeType=""text/html,text/xml,text/plain,text/css,application/xml,application/xhtml+xml,application/rss+xml,application/javascript,application/x-javascript,image/svg+xml""
               redirectPort=""443"" />
               
    <Connector port=""8080"" protocol=""HTTP/1.1""
               connectionTimeout=""20000""
	       compression=""on""
               compressionMinSize=""512""
	       useSendfile=""false""
               compressableMimeType=""text/html,text/xml,text/plain,text/javascript,text/plain,application/json,application/xml,text/css,application/xml,application/xhtml+xml,application/rss+xml,application/javascript,application/x-javascript,image/svg+xml""
               redirectPort=""443"" /> =||= yeah,same situation with me,
remove these configs 

compression=""on""
compressionMinSize=""512""
compressableMimeType=""text/html,text/xml,text/plain,text/javascript,text/plain,application/json,application/xml,text/css,application/xml,application/xhtml+xml,application/rss+xml,application/javascript,application/x-javascript,image/svg+xml""

in your Connector  =||= > yeah,same situation with me,
> remove these configs
> 
> compression=""on""
> compressionMinSize=""512""
> compressableMimeType=""text/html,text/xml,text/plain,text/javascript,text/plain,application/json,application/xml,text/css,application/xml,application/xhtml+xml,application/rss+xml,application/javascript,application/x-javascript,image/svg+xml""
> 
> in your Connector

Like that?

<Connector port=""80"" protocol=""HTTP/1.1""
         connectionTimeout=""20000""
         useSendfile=""false""
           redirectPort=""443"" />
           
<Connector port=""8080"" protocol=""HTTP/1.1""
        connectionTimeout=""20000""
       useSendfile=""false""
         redirectPort=""443"" /> =||= > Like that?

leave this in your Connector config

`<Connector port=""8080"" protocol=""HTTP/1.1""
           connectionTimeout=""20000""
       useSendfile=""false""
           redirectPort=""443"" />` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1187Unable to register client with eureka server deployed on weblogic 12c.Lalithalalitha706/21/19, 05:25:00 PM"I've deployed eureka server on weblogic 12c. Spring boot version is 1.5.13.RELEASE and spring cloud version is Edgware.RELEASE.
I'm getting the following error when client tries to connect to eureka server deployed on weblogic.
When eureka server is deployed on tomcat , client is able to connect to eureka server.
```
2019-03-11 18:31:35.109  INFO 18856 --- [ (self-tuning)'] com.netflix.discovery.DiscoveryClient    : Getting all instance registry info from the eureka server
2019-03-11 18:31:35.568  WARN 18856 --- [ (self-tuning)'] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failure with status code 404; retrying on another server if available
2019-03-11 18:31:35.582 ERROR 18856 --- [ (self-tuning)'] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_localhost:10000 unable to refresh its cache! status = Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:111) ~[eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1022) [eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:936) [eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:412) [eureka-client-1.7.0.jar:1.7.0]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:267) [eureka-client-1.7.0.jar:1.7.0]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:61) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:261) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$46a33e66.CGLIB$eurekaClient$1(<generated>) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$46a33e66$$FastClassBySpringCGLIB$$75586b08.invoke(<generated>) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:358) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$46a33e66.eurekaClient(<generated>) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1181) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1075) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$2.getObject(AbstractBeanFactory.java:351) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:379) [spring-cloud-context-1.3.0.RELEASE.jar:1.3.0.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:181) [spring-cloud-context-1.3.0.RELEASE.jar:1.3.0.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:346) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:166) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:155) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:56) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:37) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:80) [spring-cloud-netflix-eureka-client-1.4.0.RELEASE.jar:1.4.0.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:173) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:50) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:346) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:149) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:112) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:880) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) [spring-context-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.web.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:154) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.web.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:134) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.boot.web.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:87) [spring-boot-1.5.13.RELEASE.jar:1.5.13.RELEASE]
	at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:169) [spring-web-4.3.17.RELEASE.jar:4.3.17.RELEASE]
	at weblogic.servlet.internal.WebAppServletContext.initContainerInitializer(WebAppServletContext.java:1394) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppServletContext.initContainerInitializers(WebAppServletContext.java:1331) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppServletContext.initContainerInitializers(WebAppServletContext.java:1317) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1834) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:2876) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1661) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:823) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:216) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:211) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:73) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:24) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:729) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:258) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.SingleModuleDeployment.activate(SingleModuleDeployment.java:48) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:587) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:150) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:116) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:339) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:846) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1275) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:442) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:176) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:548) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:311) [weblogic.server.merged.jar:12.1.3.0.0]
	at weblogic.work.ExecuteThread.run(ExecuteThread.java:263) [weblogic.server.merged.jar:12.1.3.0.0]
```
""Hi, 
I am also having some issues since my eureka serve looks like it's up, however it's not reachable, are you also facing this issue?


Regards! =||= Hello,

We are able to use spring eureka discovery with weblogic 12c .
Did you get the eureka server console from your weblogic server before trying anything on client side ? =||= Hi @fabienleconte , I didn't, I was facing issues, let me try again then I'll back with you to post the error.


Regards! =||= Is the server actually reachable? try telnetting to check. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1188Eureka Server Ignoring Client Hostname while registrationmsalmanST11/08/19, 09:04:44 PM"Hey guys,

I am facing an same issue when running eureka server and eureka client on two different domains (both hosted on AWS), in this case eureka server always use its own domain name for the registered instance and not using the client hostname. I also try to set the client domain name by setting inside bootstrap.properties i.e eureka.instance.hostname=my.domain.com but it is not reflecting inside ""/eureka/apps""

Any help is much appreciated.

Updated:
Both my eureka server and the client service running inside docker container in two different servers with two different domains."I am facing the same issue. did you find any solution for this? =||= Do check what is the hostname set for your machine using command `hostname`, eureka used the returned value as the hostname of the machine. Do update the hostname with your machine hostname and it will work fine. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1189Eureka client registration failed in openshift platformCodeRaju03/15/19, 10:38:11 AM"I have a eureka server running in openshift platform. when i try to register client it's throwing below error

2019-03-15 09:02:45.850  WARN 1 --- [tbeatExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: java.net.UnknownHostException:
2019-03-15 09:02:45.850 ERROR 1 --- [freshExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='https://xxx.com:8761/eureka
com.sun.jersey.api.client.ClientHandlerException: java.net.UnknownHostException: Name or service not known

**Server config**
application.yml
server:
  port: 8761
  servlet:
    context-path: /

spring:
  application:
    name: eureka-service

eureka:
       instance:
         hostname: xxxx.com
       client:
         registerWithEureka: false
         fetchRegistry: false
         serviceUrl:
           defaultZone: https://${eureka.instance.hostname}:${server.port}/eureka/
**Server pom**
         <parent>
                     <groupId>org.springframework.boot</groupId>
                     <artifactId>spring-boot-starter-parent</artifactId>
                     <version>2.1.3.RELEASE</version>
             </parent>
              <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>
               <dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Greenwich.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>

**Client**
pom.xml
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
    </parent>
     <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
	</dependency> 
<dependencies>
     			<dependency>
     				<groupId>org.springframework.cloud</groupId>
     				<artifactId>spring-cloud-dependencies</artifactId>
     				<version>Greenwich.RELEASE</version>
     				<type>pom</type>
				<scope>import</scope>
     			</dependency>
     		</dependencies>
**application.yml**
server:
  port: 8081
  servlet:
    context-path: /
eureka:
    client:
      registerWithEureka: true
      fetchRegistry: true
      serviceUrl:
       defaultZone: https://XXX.com:8761/eureka "internal issue. resolved now =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1190Spring microservice instance is not registering with Eureka running in port other than 8761karthikrajas06/21/19, 05:24:03 PM"I am new to microservices and springboot, learning it. Got the following issue. Please check.

application.yml of my microservice (client to Eureka)

```
spring:
  application:
    name: queue1

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true  
    serviceUrl:
      defaultZone: http://localhost:8762/

server:
  port: 7777

app:
  id: ${random.uuid}
```

application.yml of Eureka

```
eureka:
  instance:
    hostname: peer1
  client:
    register-with-eureka: false
    fetch-registry: false
server:
  port: 8762
```

I am starting Eureka in port 8762 and referring to that in my microservices. Microservice is failing to register itself with Eureka. Following is the exception from microservice logs.


```
2019-03-21 17:02:16.248 ERROR 1804 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_ZUUL_RIBBON/ICB8061.ibsplc.com:zuul_ribbon:8080 - was unable to refresh its cache! status = Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1051) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:965) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1479) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1446) [eureka-client-1.9.8.jar:1.9.8]
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.FutureTask.run(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [na:1.8.0_202]
	at java.lang.Thread.run(Unknown Source) [na:1.8.0_202]
```


```
2019-03-21 17:02:16.278 ERROR 1804 --- [tbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8762/}

javax.ws.rs.WebApplicationException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:846) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1405) [eureka-client-1.9.8.jar:1.9.8]
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.FutureTask.run(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [na:1.8.0_202]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [na:1.8.0_202]
	at java.lang.Thread.run(Unknown Source) [na:1.8.0_202]
```


Now the most important thing is, everything is perfectly fine if I change the Eureka server port and the microservice's Eureka registration port to 8761 !!!! Registration of microservice is succeding in this case.

Did this multiple times before posting the question and it is behaving like this.

Any inputs here would be very much helpful.""The springboot version that I am using is 2.1.3.RELEASE.
And the cloud version is Greenwich.RELEASE =||= @karthikrajas  hello,  did you resolve this problem? can you share? thanks! =||= Both of your configuration files are named after the hump
register-with-eureka
registerWithEureka
Try to unify them
My English is poor =||= Use this in client:
defaultZone: http://localhost:8762/eureka and you will be good =||= eureka:
  server:
    port: 8762
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:${eureka.server.port}}/eureka/ =||= I got the same issue.  My version is 2.2.7.RELEASE.
cloud version is Hoxton.SR4. Nothing above is solved the problem. =||= It's probably best to ask in the corresponding Spring repo, this is not really specific to Eureka. =||= Annotate Bootstrap class with @EnableEurekaServer =||= > Use this in client:
> defaultZone: http://localhost:8762/eureka and you will be good

Would u share the reason, pls ？ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1191Fix: DiscoveryClient NullPointExceptionmarkGbug05/30/19, 10:18:31 PMthere possible null pointer dereference of applications in com.netflix.discovery.DiscoveryClient.fetchRegistry . when applications is null, the log param will cause null point."The contract seems to be the `getApplications()` is never `null` and is not allowed to be, the code throughout the `DiscoveryClient` assumes it's not and never sets it to `null`. It's accessed without a null check in many places including the `ctor`, in fact even with this added check it makes no functional difference as it's immediately accessed without any check later in the `ctor`.

i.e.

```
    @Override
    public Applications getApplications() {
        return localRegionApps.get();
    }
```

and all `localRegionApps.set` calls check for `null` and never set it to `null`.

If you have a clear repro how this can happen without blowing up in all other places, feel free to reopen.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1192eureka clienthuangry99904/05/19, 10:09:20 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1193How to inject com.netflix.discovery.DiscoveryClienthuangry99905/31/19, 12:34:40 AM"With org.springframework.cloud.client.discovery.EnableDiscoveryClient annotation I could only inject org.springframework.cloud.client.discovery.DiscoveryClient. Anyway I want to register EurekaEventListener to eureka client, so I neet the com.netflix.discovery.DiscoveryClient.
How could I do? please."Seems more of a Spring question than Eureka, can you try searching through Spring issues to see if this has been asked? (and the docs) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1194EUREKA-1149 Add injectable customizable EndpointRandomizerMikhail Gromovmgtriffid05/31/19, 08:27:10 PM"This is another attempt to fix #1149. This time tried to take comments from #1151 into account.

Difficult thing here is that there are actually two randomizers across Eureka codebase. And the one that is used by DiscoveryClient ends up being just a call to static method. So I decided to not touch existing randomizer that is a field of DiscoveryClient (because I have no idea where can it be used) and introduced new field. This EndpointRandomizer is passed to ZoneAffinityClusterResolver through some chain of calls. I have left behavior unchanged, just made it customizeable."Anyone taking a look at this PR ? =||= Thanks for the PR @mgtriffid! =||= EUREKA-1149 Add injectable customizable EndpointRandomizerMikhail Gromovmgtriffid05/31/19, 08:27:10 PM"This is another attempt to fix #1149. This time tried to take comments from #1151 into account.

Difficult thing here is that there are actually two randomizers across Eureka codebase. And the one that is used by DiscoveryClient ends up being just a call to static method. So I decided to not touch existing randomizer that is a field of DiscoveryClient (because I have no idea where can it be used) and introduced new field. This EndpointRandomizer is passed to ZoneAffinityClusterResolver through some chain of calls. I have left behavior unchanged, just made it customizeable."NaNMikhail Gromov04/17/19, 11:36:20 AMEUREKA-1149 Add injectable customizable EndpointRandomizer1
1195.travis.yml: The 'sudo' tag is now deprecated in Travis CIChristian Clausscclauss06/10/20, 06:57:21 PM"[Travis are now recommending removing the __sudo__ tag](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration).

""_If you currently specify __sudo: false__ in your __.travis.yml__, we recommend removing that configuration_"" "Fixed by #1295. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1196initial-instance-info-replication-interval-seconds  didn't work.zhenzhenailzlx05/31/19, 12:36:51 AMI set  initial-instance-info-replication-interval-seconds parameter，but it didn't work.Please provide a minimal repro if you believe there's a bug with the setting. =||= Closing as non-actionable for the time being. Feel free to reopen or open a new issue. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1197Persistence Backed RegistrySandeep Adinarayanasandy-adi06/11/19, 08:12:47 PM"I'm trying to setup a eureka registry backed by a persistence store. I don't see any documentation around this topic. 
Would it be possible to configure a persistence to store all the registered applications? ""Definitely not impossible but not something immediately pluggable into the current design. Look into ""registries"". The value of the data stored decreases exponentially over time so this has very low value in the first place. What's your use case? =||= > Definitely not impossible but not something immediately pluggable into the current design. Look into ""registries"". The value of the data stored decreases exponentially over time so this has very low value in the first place. What's your use case?

The use case is that we are using eureka in a stand alone mode, the eureka cluster might die at any time and then come back up. At this point we want the eureka cluster to hydrate itself with the previously registered services. =||= I'm not sure of the value of such feature as I mentioned the data is essentially worthless as it gets stale, focus on making the cluster available so it does not die all at once and rely on heartbeats to restore the data vs preloading some stale cache. =||= The heartbeats are applicable only when your services have a eureka client right? our services are not all on Java and we will have to end up writing a eureka client for every stacke which IMO is not the best way to go about it. 

 Also it's not a stale cache, we actually have an abstraction API over eureka that updates the persistent store in addition to eureka. We were exploring use of archaius to keep eureka in sync with the persistent store but havent made  progress with that approach yet.

Isnt it risky to assume that your whole cluster will never go down?  =||= > The heartbeats are applicable only when your services have a eureka client right? our services are not all on Java and we will have to end up writing a eureka client for every stacke which IMO is not the best way to go about it.

I agree this is not the best way to do it, I would personally recommend to implement a sidecar which registers services in discovery instead, i.e. have a small process on localhost which hits your service healthcheck endpoint and if that returns success, heartbeats to discovery on your behalf. This way you don't have to implement Eureka clients in every stack, it has other benefits like proper startup sequence order, network connectivity check (loopback but still), etc.

> Also it's not a stale cache, we actually have an abstraction API over eureka that updates the persistent store in addition to eureka. We were exploring use of archaius to keep eureka in sync with the persistent store but havent made progress with that approach yet.
> 
> Isnt it risky to assume that your whole cluster will never go down?

I look at this differently, say everything crashes, the entire Eureka cluster:

- The clients still have the Eureka data, it's going stale but there's no outage (yet).
- Make sure when Eureka nodes crash new ones start up in their place fast, ideally under a minute.
- New node(s) came up.
- Your services started to heartbeat to the new Eureka nodes, Eureka data is fresh again and the service is fully restored.

In this absolutely disastrous scenario (all nodes went down) you did not even have an outage and had slightly stale Eureka data for couple minutes while the new nodes were coming up.

Is it worth it to add a bunch of complexity to replicate the data somewhere just to mitigate couple minutes of stale data once a couple months (this is pessimistic)? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1198move gain of lastDirtyTimestamp before gain of status to avoid race conditionAddo.Zhangaddozhang06/21/19, 05:41:37 PMrefer to solution of #1174PR #1198  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1199Spring Boot Actuator strange behaviorTobias Tschechtschechniker05/31/19, 12:39:43 AM"Hi,

we discovered a strange behavior with the spring boot actuator and the eureka check.

Whenever a Services gets deleted in the Eureka server the eureka status in the actuator turns from up to down.


Up output of actuator:
```json
""discoveryComposite"": {
      ""status"": ""UP"",
      ""details"": {
        ""discoveryClient"": {
          ""status"": ""UP"",
          ""details"": {
            ""services"": [
              ""SERVICE-1"",
              ""SERVICE-2"",
            ]
          }
        },
        ""eureka"": {
          ""description"": ""Remote status from Eureka server"",
          ""status"": ""UP"",
          ""details"": {
            ""applications"": {
              ""SERVICE-1"": 1,
              ""SERVICCE-2"": 1,
            }
          }
        }
      }
    }
```

Down output:

```json
   ""discoveryComposite"": {
      ""description"": ""Remote status from Eureka server"",
      ""status"": ""DOWN"",
      ""details"": {
        ""discoveryClient"": {
          ""status"": ""UP"",
          ""details"": {
            ""services"": [
              ""SERVICE-1"",
            ]
          }
        },
        ""eureka"": {
          ""description"": ""Remote status from Eureka server"",
          ""status"": ""DOWN"",
          ""details"": {
            ""applications"": {
              ""SERVICE-1"": 1,
            }
          }
        }
      }
    }
```

I did not find any documentation about the actuator indicators of eureka. Why does one shows up and the other down? "That's because spring boot support isn't here but in spring-cloud-netflix. =||= Thanks for the replay. I will ask in the spring-cloud-netflix project ;) =||= Thanks @spencergibb! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1200java.net.URISyntaxException: Illegal character in authority - Eureka with AWS ECS Jitesh Prajapatijitesh-prajapati12305/31/19, 12:40:53 AM"I have successfully registered AWS ECS containers with Eureka. When I run service discovery, it errors that there is an illegal character in URL.

java.net.URISyntaxException: Illegal character in authority at index 7: http://10.0.4.75 :32922/volvo-survey/tags [Check space/hidden special char after IP address].

Check the attached screenshot.

![error](https://user-images.githubusercontent.com/19203741/56721800-45ae8800-6763-11e9-9d77-852cf1f3a167.png)"Please provide a minimal repro if possible and reopen. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1201"""eureka"" does not support ""ipv6""?"ZHUOzhuozl11/08/19, 09:05:20 PMNaN"Please elaborate. What is the specific issue you're experiencing? =||= > Please elaborate. What is the specific issue you're experiencing?

registry spring-config-server and spring-config-client in ipv6 environment, spring-config-client get error spring-config-server uri ,the rui lack of ""[]"". I follow spring-config-client code , find this maby config-client bug . =||= You may want to include the setup and the specific error you're getting together with the full stack trace, otherwise hard to even localize the issue to any component. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1202Failed to register to eureka server with spring securityTorres Lei403Unauthorized05/31/19, 12:41:48 AM"I have tried many times, but it failed every time.
Spring Boot Version: 2.1.3.RELEASE
Spring Cloud Version: Greenwich.RELEASE

There is eureka server's configuration:
```
spring:
  application:
    name: registration-center
  security:
    user:
      name: eureka
      password: 123456
server:
  port: 8761
eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: false
    register-with-eureka: false
    service-url:
      default-zone: http://eureka:123456@${eureka.instance.hostname}:${server.port}/eureka/
  server:
    enable-self-preservation: false
```
And this is eureka client's configuration:
```
spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
      - id: route_service_user
        uri: lb://SERVICE-USER
        predicates:
        - Path=/user/**
  application:
    name: gateway-client
server:
  port: 8901
eureka:
  client:
    servers-url:
      default-zone: http://eureka:123456@localhost:8761/eureka
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: localhost
```
I also tried to disable csrf:
```
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable()
                .authorizeRequests()
                .antMatchers(""/actuator/**"").permitAll()
                .anyRequest()
                .authenticated()
                .and().httpBasic();
    }
}
```
It bothers me a lot, could you please help me out?"Try Spring Cloud support, this is not really directly related to Eureka based on my understanding. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1203Change woodstox-core-asl to woodstox-coresvenhaag06/12/19, 12:19:36 AMCurrently eureka-core uses woodstox-core-asl 4.4.1 which is no longer maintained. Please change to the current woodstox-core dependency (https://github.com/FasterXML/woodstox).NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1204Can I dynamically change the zone to which the client belongs after the client starts?devzwdzwdgit05/31/19, 12:42:56 AMNaNProbably better not to, heartbeats won't transmit this so you'd need to detect it yourself and re-register. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1205Euraka server warning in java 11筱进GGzhaokejin05/31/19, 12:43:52 AM"`WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.thoughtworks.xstream.core.util.Fields (file:/D:/Java/m2/repository/com/thoughtworks/xstream/xstream/1.4.10/xstream-1.4.10.jar) to field java.util.TreeMap.comparator
WARNING: Please consider reporting this to the maintainers of com.thoughtworks.xstream.core.util.Fields
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release`"The project is largely Java 8 at this point but we're open to PRs for better Java 11 compatibility. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1206can not build eureka with gradle in Java 11Sinuxshinux05/31/19, 12:44:58 AM"with gradle-2.10-bin.zip or version below `4`:

```
* What went wrong:
Could not determine java version from '11.0.1'.
```

with gradle-5.4.1-bin.zip:

```
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
> Failed to apply plugin [class 'nebula.plugin.info.dependencies.DependenciesInfoPlugin']
   > Could not create plugin of type 'DependenciesInfoPlugin'.
      > No signature of method: org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.DefaultVersionComparator.asStringComparator() is applicable for argument types: () values: []
        Possible solutions: asVersionComparator()
```
""downgrade java to 8 solves the problem.

But if java 11 is not compatible with building eureka by gradle or required some customization, documentation is supposed to point it out. =||= The project is largely a Java 8 one, we'd be open to PRs improving the Java 11 support though.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1207Redeploying an Eureka server does not stop all threads and timersStephan Windmüllerwindmueller11/13/19, 06:08:59 PM"Our web application uses spring-cloud-netflix-eureka-server in version 2.1.1.RELEASE. When it is redeployed without restarting the application server, we get messages like

````
org.apache.catalina.loader.WebappClassLoaderBase.checkThreadLocalMapForLeaks The web
application [MyWebApp] created a ThreadLocal with key of type [java.lang.ThreadLocal]
(value [java.lang.ThreadLocal@f049ac9]) and a value of type [com.netflix.eureka.Version]
(value [V2]) but failed to remove it when the web application was stopped. Threads are going
to be renewed over time to try and avoid a probable memory leak.
````

and

````
org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web
application [MyWebApp] appears to have started a thread named [Eureka-CacheFillTimer]
but has failed to stop it. This is very likely to create a memory leak.
````

The latter is shown for

- `ReplicaAwareInstanceRegistry - RenewalThresholdUpdater`
- `Eureka-JerseyClient-Conn-Cleaner`
- `Eureka-CacheFillTimer`

For example, the CacheFillTimer is started in `ResponseCacheImpl` as a daemon but never stopped. This results in errors like

````
org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading
Illegal access: this web application instance has been stopped already. Could not load [ch.qos.logback.classic.spi.ThrowableProxy].
The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [ch.qos.logback.classic.spi.ThrowableProxy].
````

These issues can cause resource problems on the application server. It would be great if Eureka stops all timers and threads on shutting the application for redeployment.""Thanks for the report @stovocor, this sounds reasonable and if anyone's interested in addressing this we can discuss the fix here.

Considering that we never redeploy in place and the workaround is simple (server restart), we will not be fixing this ourselves. =||= Which version to use for this fix?
is `2020.0.0-M1` ok? Or `Hoxton.RC2` works too? =||= Releases -> Search for the commit msg / hash you're interested in.
In this case you want https://github.com/Netflix/eureka/releases/tag/v1.9.14 and above.

> is 2020.0.0-M1 ok? Or Hoxton.RC2 works too?

No idea what these strings are, they are not Eureka versions. =||= Those are spring cloud release trains. Hoxton.SR5 is the latest that you shsould be using in production. https://search.maven.org/artifact/org.springframework.cloud/spring-cloud-netflix-dependencies/2.2.3.RELEASE/pom =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1208RetryableEurekaHttpClient candidateHosts size may improve to avoid quarantineSet not be clearediZDTizdt11/08/19, 09:08:14 PM"Assume we have a same url in two zone(some reasons, although it's not reasonable), simply the configuration file as flows:

```
eureka.client.region=region1
eureka.client.availability-zones.region1 = zone1,zone2
eureka.client.serviceUrl.zone1=http://localhost:8080/eureka
eureka.client.serviceUrl.zone2=http://localhost:8080/eureka
eureka.client.transport.retryableClientQuarantineRefreshPercentage=1
```
If eureka server is not available, then the url will be added to quarantineSet. Client will not be able to re-register to eureka server when eureka server restarted (Always throw throw exception ""There is no known eureka server; cluster server list is empty"").

I analyse the code of RetryableEurekaHttpClient in the eureka-client:
```
  private final Set<EurekaEndpoint> quarantineSet = new ConcurrentSkipListSet<>();

  ...

	 if (currentEndpoint != null) {
                quarantineSet.add(currentEndpoint);
         }
  ...

  private List<EurekaEndpoint> getHostCandidates() {
        List<EurekaEndpoint> candidateHosts = clusterResolver.getClusterEndpoints();
        quarantineSet.retainAll(candidateHosts);

        // If enough hosts are bad, we have no choice but start over again
        int threshold = (int) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());
        //Prevent threshold is too large
        if (threshold > candidateHosts.size()) {
            threshold = candidateHosts.size();
        }
        if (quarantineSet.isEmpty()) {
            // no-op
        } else if (quarantineSet.size() >= threshold) {
            logger.debug(""Clearing quarantined list of size {}"", quarantineSet.size());
            quarantineSet.clear();
        } else {
            List<EurekaEndpoint> remainingHosts = new ArrayList<>(candidateHosts.size());
            for (EurekaEndpoint endpoint : candidateHosts) {
                if (!quarantineSet.contains(endpoint)) {
                    remainingHosts.add(endpoint);
                }
            }
            candidateHosts = remainingHosts;
        }

        return candidateHosts;
  }
```

The problem is: threshold use ```candidateHosts.size()``` (Use ```List```), but only ```quarantineSet.size() >= threshold``` the quarantineSet can be cleared.
Although two zones is diferent ```AwsEndpoint```, they are the same ```EurekaEndpoint```. At this time quarantineSet size is 1, but threshold is 2, quarantineSet.size() will always smaller than threshold. QuarantineSet will never be cleared, so client will not be able to re-register to eureka server when eureka server restarted.


My solution is translate candidateHosts list to set, and then use the candidateHostsSetSize:
```
    private List<EurekaEndpoint> getHostCandidates() {
        List<EurekaEndpoint> candidateHosts = clusterResolver.getClusterEndpoints();
        quarantineSet.retainAll(candidateHosts);

	 // Use Set to remove the same EurekaEndpoint in the List to prevent threshold always larger than quarantineSet size
        int candidateHostsSetSize = (new ConcurrentSkipListSet<>(candidateHosts)).size();
        // If enough hosts are bad, we have no choice but start over again
        int threshold = (int) (candidateHostsSetSize * transportConfig.getRetryableClientQuarantineRefreshPercentage());
        //Prevent threshold is too large
        if (threshold > candidateHostsSetSize) {
            threshold = candidateHostsSetSize;
        }
	if (quarantineSet.isEmpty()) {
            // no-op
        } else if (quarantineSet.size() >= threshold) {
            logger.debug(""Clearing quarantined list of size {}"", quarantineSet.size());
            quarantineSet.clear();
        } 
   ...
  }
```

""> Assume we have a same url in two zone

I think this is not reasonable and does not make sense to ""support"" in this way or any other way except for maybe better validation. =||= 
> I think this is not reasonable and does not make sense to ""support"" in this way or any other way except for maybe better validation.

Yes, putting a same url in two zone is meaningless. However, in actual use, in order to be highly available, there may be an additional edge address in two zone (after all, there is no document to point out it is forbidden), but once we do this, it will be dangerous. Because if eureka server network is shortbale unavailable, it will not be able to recover since the quarantineSet cannot be cleared.
Therefore, I personally not agree it's an additional validation, after all, it is not reasonable to compare the size of Set with the size of List. Of course, I have considered other solutions, but the smallest and easiest way to change is to compare size with the same structure. So I hope to solve this issuse to avoid the risk, maybe there is a better way?
 =||= > Yes, putting a same url in two zone is meaningless.

My point exactly. The url cannot be the same by definition, otherwise that's just the same zone, two urls which are the same point to the same thing.

> in actual use, in order to be highly available, there may be an additional edge address in two zone (after all, there is no document to point out it is forbidden), but once we do this, it will be dangerous

Can you elaborate? Could you give an example maybe?

As for the document, there's no strict requirements doc for everything so some things are assumed where reasonable (like here).

I understand the bug you observed and understand the potential fix you proposed, the thing is that the system should not work around bad config and hide potential issues, this can manifest in other places and the system should fail early not continue pretending ""it's fine"" if two servers point to the same address. In this case I'd rather reject the configuration as fundamentally invalid. =||= > Can you elaborate? Could you give an example maybe?
> 
> As for the document, there's no strict requirements doc for everything so some things are assumed where reasonable (like here).
> 
> I understand the bug you observed and understand the potential fix you proposed, the thing is that the system should not work around bad config and hide potential issues, this can manifest in other places and the system should fail early not continue pretending ""it's fine"" if two servers point to the same address. In this case I'd rather reject the configuration as fundamentally invalid.


Thanks for your reply and explain. It's much reasonable to check the config first and prevent the potential issues.
I gave a bad example, actually, we never config like this. This is a simple example to explain this issue. 
I found this issue at a high-available exercise, and I spent few hours to find out why eureka servers alaways not available.
We use eureka with a large-scale nodes, to make the server more high available, we use multi-zone config, and we want use a smart DNS to resolve serviceUrls:
```
eureka:
 client:
   region: abc
   useDnsForFetchingServiceUrls: true
   eurekaServerPort: 10101
   eurekaServerDNSName: demo.com
   eurekaServerURLContext: eureka
```
and the DNS txt is:
```
txt.abc.demo.com -> aregion.abc.demo.com bregion.abc.demo.com
txt.aregion.abc.demo.com to 10.0.0.1 10.0.0.2
txt.bregion.abc.demo.com to 10.0.1.3 10.0.1.4
```
It works fine, but when bregion is down, the DNS will dynamic to resolve bregion address to aregion address.The problem comes... then I thought could we fix this.  Now I think we shouldn't let the Smart DNS to resolve urls dynamically, just let eureka client do by itself.
Thanks for your time to discuss this issue with me.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1209"Eureka client sends a heartbeat with a chance to fail. ""om.sun.jersey.api.client.ClientHandlerException: org.apache.http.NoHttpResponseException: 172.28.7.245:9000 failed to respond"""Michael GeMichael-Ge07/08/19, 05:53:09 PMSpringCloud Ver: Greenwich.SR1"SpringCloud Ver: Greenwich.SR1
The Eureka client and the Eureka server are on the same server, but the heartbeat fails to be sent. The error message is as follows:
20:50:32.271 [DiscoveryClient-HeartbeatExecutor-0] ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://172.28.7.245:9000/eureka/}
com.sun.jersey.api.client.ClientHandlerException: org.apache.http.NoHttpResponseException: 172.28.7.245:9000 failed to respond
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:529) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:102) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:846) [eureka-client-1.9.8.jar:1.9.8]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1405) [eureka-client-1.9.8.jar:1.9.8]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: org.apache.http.NoHttpResponseException: 172.28.7.245:9000 failed to respond
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:141) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259) ~[httpcore-4.4.11.jar:4.4.11]
	at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:294) ~[httpcore-4.4.11.jar:4.4.11]
	at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:230) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273) ~[httpcore-4.4.11.jar:4.4.11]
	at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125) ~[httpcore-4.4.11.jar:4.4.11]
	at org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:679) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:481) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.8.jar:4.5.8]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.8.jar:4.5.8]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	... 26 more

When I excluded the jersey from the Eureka Client, the problem was solved. Why?

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                <version>2.1.1.RELEASE</version>
                <exclusions>
                    <exclusion>
                        <groupId>com.sun.jersey</groupId>
                        <artifactId>jersey-client</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>com.sun.jersey</groupId>
                        <artifactId>jersey-core</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>com.sun.jersey.contribs</groupId>
                        <artifactId>jersey-apache-client4</artifactId>
                    </exclusion>
                </exclusions>
            </dependency> =||= Was the server actually reachable? Could you say curl it or telnet? =||= The Eureka Server and Client are on the same server and are connected via the local IP address. =||= This does not actually mean there was connectivity and/or the server was actually up and listening. =||= Try localizing the issue to either the server or the client by checking connectivity to the server using the tools I suggested or really anything else. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1210Enhance getHostCandidates method to avoid quarantineSet never be clearediZDTizdt06/21/19, 05:49:52 PM"Fix #1208 
Use ```ConcurrentSkipListSet```  to remove  duplicates  in the ```List<EurekaEndpoint>``` candidateHosts to avoid threshold always larger than quarantineSet size."See the comment in the linked issue, this does not make sense from the configuration standpoint, better validation is a maybe but actual support is not an option (and I doubt it would not go hay wire in other places) anyway. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1211No way to add additional HttpHeader to all peer replication callsYuxin BaiLittleBaiBai06/07/19, 05:52:13 PM"Currently, all `PeerEurekaNode` are created by a protected method on singleton `PeerEurekaNodes.createPeerEurekaNode()`, which calls a static method on `JerseyReplicationClient.createReplicationClient()` to create a `HttpReplicationClient`. I don't see an easy way to add additional ClientFilter to the client.

I see two ways to solve this issue based:
1. Add an `addReplicationClientFilter` method to the `HttpReplicationClient` interface. This way I can just override the `createPeerEurekaNode` with my additional filter when creating my new `PeerEurekaNodes`. It's not the cleanest solution, but will be a very small PR.
2. Similar to how singleton `DiscoveryClient` takes in `DiscoveryClientOptionalArgs`, singleton `PeerEurekaNodes` can take in `ReplicationClientOptionalArgs`, and pass it down to create `HttpReplicationClient`. This is definitely a cleaner and more extensive solution than the first one, but requires more testing.

Any inputs here would be very much helpful."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1212add ClientFilter to HttpReplicationClientYuxin BaiLittleBaiBai06/07/19, 04:11:14 PMConnects to #1211"@elandau Based on your comment of ""only allow adding filters at creation time"", I did this quick spike on how that could look like: https://github.com/Netflix/eureka/compare/master...LittleBaiBai:add-additional-filters-on-creation.

I haven't tested this yet. Do you think this is on the right (or better) direction? =||= @LittleBaiBai I think the current implementation (this PR) is fine.  I actually view the existing pattern of passing in an object of optional dependencies as poor api design.  That pattern came about as a hack around Guice's poor support for optional injection.  If we ever decide to refactor this code I'd prefer to deprecate all constructors and switch to the builder pattern.   =||= "add ClientFilter to HttpReplicationClientYuxin BaiLittleBaiBai06/07/19, 04:11:14 PMConnects to #1211NaNYuxin Bai06/06/19, 07:54:31 PMremove addReplicationClientFilter method from the interface1
1213eureka 2.0.4  automatically stop after a few hoursbrookliu12307/08/19, 05:52:47 PM"my eureka server automatically stop after a few hours 
log print：

2019-06-06 20:30:55.792  INFO 32377 --- [      Thread-15] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@56ef9176: startup date [Thu Jun 06 11:36:59 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@3834d63f
2019-06-06 20:30:55.793  INFO 32377 --- [      Thread-15] o.s.c.n.e.s.EurekaServiceRegistry        : Unregistering application unknown with eureka with status DOWN
2019-06-06 20:30:55.795  INFO 32377 --- [      Thread-15] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 0
2019-06-06 20:30:55.796  INFO 32377 --- [      Thread-15] c.n.eureka.DefaultEurekaServerContext    : Shutting down ...
2019-06-06 20:30:55.800  INFO 32377 --- [      Thread-15] c.n.eureka.DefaultEurekaServerContext    : Shut down
2019-06-06 20:30:55.803  INFO 32377 --- [      Thread-15] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown
2019-06-06 20:30:55.803  INFO 32377 --- [      Thread-15] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans
2019-06-06 20:30:55.806  INFO 32377 --- [      Thread-15] com.netflix.discovery.DiscoveryClient    : Shutting down DiscoveryClient ...
2019-06-06 20:30:55.806  INFO 32377 --- [      Thread-15] com.netflix.discovery.DiscoveryClient    : Completed shut down of DiscoveryClient"Looks like a graceful shutdown to me, if you believe there's a bug leading to this, please include a minimal repro. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1214Add unit tests for com.netflix.discovery.util.EurekaEntityFunctionsBraavosEricHetti07/08/19, 09:53:32 PM"I've analysed your codebase and noticed that `com.netflix.discovery.util.EurekaEntityFunctions` is not fully tested.
I've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).

Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important.""Thanks for the PR! =||= btw, if you're looking for test-related tasks, fixing the flakiness would be the top one probably. =||= > btw, if you're looking for test-related tasks, fixing the flakiness would be the top one probably.

Do you have any specific class in mind which you would like me to have a look at? :) =||= > Do you have any specific class in mind which you would like me to have a look at? :)

no not really, just run the tests multiple times and see if you get any intermittent failures, the ones failing would be flaky and something we'd appreciate to have fixed. =||= Hi @troshko111 just following up and wondering if you would like me to make any changes to the PR? =||= Sorry did not realize this got updated, for the future can you please not rebase PR iterations? It makes the review very hard (every iteration has to be reviewed again as a completely new change without any intermediate diffs). =||= "Add unit tests for com.netflix.discovery.util.EurekaEntityFunctionsBraavosEricHetti07/08/19, 09:53:32 PM"I've analysed your codebase and noticed that `com.netflix.discovery.util.EurekaEntityFunctions` is not fully tested.
I've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).

Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important."NaNEric Hettiaratchi07/08/19, 05:38:35 PM"Add unit tests for com.netflix.discovery.util.EurekaEntityFunctions

These tests were written using Diffblue Cover."1
1215"RestTemplate call ""I/O error on GET request for"" - PCFDEV - Eureka"Praveen MKmkpraveen06/11/19, 10:44:34 PM"I'm getting below error when I make resttemplate call as below.
To me it looks like random generated hostname is not accessible.

I use pcfdev-v0.30.2+PCF1.11.0-windows ,  pcfdev-v1.2.0-windows. spring-boot.2.1.3.

// Get movie details
MovieDetails movieDetails = 
restTemplate.getForObject(""http://movie-details-service/jpamovies/"" + movieId, MovieDetails.class);

""message"": ""I/O error on GET request for \""http://movie-details-service/jpamovies/2\"": 7c6b7bdc-36ca-4b0f-77d9-f2f2; nested exception is java.net.UnknownHostException: 7c6b7bdc-36ca-4b0f-77d9-f2f2"",


I'm having Eureka server registration as below.


Application | AMIs | Availability Zones | Status
-- | -- | -- | --
MOVIE-CATALOG-SERVICE | n/a (1) | (1) | UP (1) - bdd136c3-c3e6-4333-4840-fcd0
MOVIE-DETAILS-SERVICE | n/a (1) | (1) | UP (1) - 7c6b7bdc-36ca-4b0f-77d9-f2f2

Please help to resolve the issue."This does not seem to be related to Eureka (as shown above the registration data seems fine), consider checking the docs for the client used (Spring). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1216Update woodstox to 5.xtroshko11106/12/19, 12:14:53 AMAddresses #1203.NaNUpdate woodstox to 5.xtroshko11106/12/19, 12:14:53 AMAddresses #1203.NaNTaras Roshko06/11/19, 10:28:24 PMUpdate woodstox to 5.x1
1217SSL for Eureka Peer server communicationvenkatesh-00706/13/19, 04:53:25 PM"Hi Team,

I've been trying to have Service Registration and discovery using Eureka over SSL for java application(Spring boot based)

My Eureka Clients are able to register with Eureka Server Service over ssl (by using DiscoveryClient.DiscoveryClientOptionalArgs bean modification) illustrated below:

```
@Bean
	public DiscoveryClient.DiscoveryClientOptionalArgs getTrustStoredEurekaClient(SSLContext sslContext) {
		DiscoveryClient.DiscoveryClientOptionalArgs args = new DiscoveryClient.DiscoveryClientOptionalArgs();
		args.setSSLContext(sslContext);
		return args;
	}
	@Bean
	public SSLContext sslContext() throws Exception {
		return new SSLContextBuilder()
				.loadTrustMaterial(trustStore, trustStorePassword.toCharArray())
				.loadKeyMaterial(keyStore, keyStorePassword.toCharArray(), keyPassword.toCharArray())
				.build();
	}
```  
The code above uses keystore, truststore to configure DiscoveryClientOptionalArgs
That kind of works well for a single eureka server 

Now when i'm trying to have multiple eureka servers(an eureka cluster with each 2 servers which are peer of each other) 

My two eureka servers are not able to sync up with each other
Does Eureka uses some other HttpClient implementation for syncing the peer registries that needs to custom configured(Similar to EurekaJerseyClient and DiscoveryClientArgs used for Eureka Client to Eureka Server Heartbeats)?

Need Suggestions and help to find out approach for having peer eureka service syncing over ssl

"Refer to https://github.com/spring-cloud/spring-cloud-netflix/issues/3563  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1218Put back deprecated constructorelandau06/13/19, 06:29:30 PMNaNNaNPut back deprecated constructorelandau06/13/19, 06:29:30 PMNaNNaNelandau06/13/19, 05:58:15 PMPut back deprecated constructor1
1219Trouble connecting to eureka server on AWS serveritziklavon06/21/19, 05:16:28 PM"Hi, getting the following error when trying to register server to eureka -
`
2019-06-20 10:16:30.642 [ERROR] [main] [org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration:120] error getting CloudEurekaClient
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.eurekaClient' defined in class path resource [org/springframework/cloud/netflix/eureka/EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.discovery.EurekaClient]: Factory method 'eurekaClient' threw exception; nested exception is java.lang.RuntimeException: Failed to initialize DiscoveryClient!
        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:356)
        at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389)
        at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:353)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
        at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
        at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$b156ec7e.getEurekaClient(<generated>)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83)
        at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
        at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
        at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
        at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
        at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:893)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
        at com.bo.operators.OperatorsWebApplication.main(OperatorsWebApplication.java:25)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.discovery.EurekaClient]: Factory method 'eurekaClient' threw exception; nested exception is java.lang.RuntimeException: Failed to initialize DiscoveryClient!
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
        ... 46 common frames omitted
Caused by: java.lang.RuntimeException: Failed to initialize DiscoveryClient!
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:411)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:269)
        at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:330)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$5c47663.CGLIB$eurekaClient$0(<generated>)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$5c47663$$FastClassBySpringCGLIB$$f69df780.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
        at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$5c47663.eurekaClient(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
        ... 47 common frames omitted
Caused by: java.lang.ExceptionInInitializerError: null
        at com.netflix.discovery.converters.wrappers.CodecWrappers$XStreamXml.<init>(CodecWrappers.java:358)
        at com.netflix.discovery.converters.wrappers.CodecWrappers.create(CodecWrappers.java:133)
        at com.netflix.discovery.converters.wrappers.CodecWrappers.getEncoder(CodecWrappers.java:75)
        at com.netflix.discovery.converters.wrappers.CodecWrappers.getEncoder(CodecWrappers.java:66)
        at com.netflix.discovery.provider.DiscoveryJerseyProvider.<init>(DiscoveryJerseyProvider.java:77)
        at com.netflix.discovery.shared.transport.jersey.EurekaJerseyClientImpl$EurekaJerseyClientBuilder$MyDefaultApacheHttpClient4Config.<init>(EurekaJerseyClientImpl.java:202)
        at com.netflix.discovery.shared.transport.jersey.EurekaJerseyClientImpl$EurekaJerseyClientBuilder.build(EurekaJerseyClientImpl.java:178)
        at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory$JerseyEurekaHttpClientFactoryBuilder.buildLegacy(JerseyEurekaHttpClientFactory.java:230)
        at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory$JerseyEurekaHttpClientFactoryBuilder.build(JerseyEurekaHttpClientFactory.java:204)
        at com.netflix.discovery.shared.transport.jersey.JerseyEurekaHttpClientFactory.create(JerseyEurekaHttpClientFactory.java:161)
        at com.netflix.discovery.shared.transport.jersey.Jersey1TransportClientFactories.newTransportClientFactory(Jersey1TransportClientFactories.java:59)
        at com.netflix.discovery.DiscoveryClient.scheduleServerEndpointTask(DiscoveryClient.java:485)
        at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:398)
        ... 60 common frames omitted
Caused by: java.lang.NullPointerException: null
        at com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias(ClassAliasingMapper.java:37)
        at com.thoughtworks.xstream.XStream.alias(XStream.java:1510)
        at com.thoughtworks.xstream.XStream.setupAliases(XStream.java:920)
        at com.thoughtworks.xstream.XStream.<init>(XStream.java:590)
        at com.thoughtworks.xstream.XStream.<init>(XStream.java:514)
        at com.thoughtworks.xstream.XStream.<init>(XStream.java:483)
        at com.thoughtworks.xstream.XStream.<init>(XStream.java:429)
        at com.thoughtworks.xstream.XStream.<init>(XStream.java:396)
        at com.netflix.discovery.converters.XmlXStream.<init>(XmlXStream.java:51)
        at com.netflix.discovery.converters.XmlXStream.<clinit>(XmlXStream.java:42)
        ... 73 common frames omitted
2019-06-20 10:16:30.746 [ERROR] [main] [org.springframework.boot.SpringApplication:821] Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'eurekaAutoServiceRegistration'; nested exception is java.lang.NullPointerException
        at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
        at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
        at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
        at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
        at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:893)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:161)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
        at com.bo.operators.OperatorsWebApplication.main(OperatorsWebApplication.java:25)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:47)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:86)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50)
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)
Caused by: java.lang.NullPointerException: null
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38)
        at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83)
        at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182)
        ... 20 common frames omitted
`

after few minutes(10-15 minutes, it is able to connect)"Looks like an instantiation issue related to Spring, try double checking their docs and debug this, otherwise probably a good idea to ask in the corresponding support channel. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1220Spring boot project @EnableEurekaServer causes unable to start tomcatxiapeixincielswift06/22/19, 09:13:26 AM"Added @EnableEurekaServer, which caused tomcat to fail to start; remove @EnableEurekaServer and start normally

![1](https://user-images.githubusercontent.com/42295829/59960292-1dd86800-94f9-11e9-8ad0-f061dcfb1efd.PNG)

JDK VERSION 12.0.1 SPRING BOOT VERSION 2.1.6.RELEASE"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1222Upgrade to Xstream 1.4.11.1 due to reopening of vulnerability CVE-2013-7285Ankurankurbhakta07/01/19, 10:10:38 PM"Looks like the old vulnerability in CVE-2013-7284 was not fully addressed by Xstream version 1.4.10.  This old version is showing up in our vulnerability scans. Can we upgrade to the newer  xstream version 1.4.11.1

Links to release notes/vulnerability fixes:
https://x-stream.github.io/changes.html"Another option is to completely remove xstream as proposed in #1074 =||= I agree with @mattnelson #1074 would be the long term fix, this one being a quick easy fix. =||= Thanks for the report @ankurbhakta and the PR @spencergibb, appreciate it. No emotional attachment to Xstream but we do not want to break anyone so any solution will need to be compatible. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1223Upgrades xstream to 1.4.11.1Spencer Gibbspencergibb07/01/19, 10:10:38 PMfixes #1222NaNUpgrades xstream to 1.4.11.1Spencer Gibbspencergibb07/01/19, 10:10:38 PMfixes #1222NaNSpencer Gibb06/27/19, 11:29:48 PMUpgrades xstream to 1.4.11.11
1224make AmazonInfo deserializer more robustbrharrington07/16/19, 08:12:55 PM"Prior to this change, it was easy to trigger an endless loop in
`StringInterningAmazonInfoBuilder` if the `dataCenterInfo` payload
wasn't exactly right. For example, it could be done with:

```
""dataCenterInfo"": {
  ""@class"": ""com.netflix.appinfo.AmazonInfo"",
  ""metadata"": {
    ""instance-id"": ""i-12345""
  }
}
```

If there wasn't a field before `metadata` it would skip over the
`metadata` field and then end up in an endless loop because it
didn't check for the end of input."Thanks @brharrington! =||= make AmazonInfo deserializer more robustbrharrington07/16/19, 08:12:55 PM"Prior to this change, it was easy to trigger an endless loop in
`StringInterningAmazonInfoBuilder` if the `dataCenterInfo` payload
wasn't exactly right. For example, it could be done with:

```
""dataCenterInfo"": {
  ""@class"": ""com.netflix.appinfo.AmazonInfo"",
  ""metadata"": {
    ""instance-id"": ""i-12345""
  }
}
```

If there wasn't a field before `metadata` it would skip over the
`metadata` field and then end up in an endless loop because it
didn't check for the end of input."NaNBrian Harrington07/14/19, 03:44:33 AM"make AmazonInfo deserializer more robust

Prior to this change, it was easy to trigger an endless loop in
`StringInterningAmazonInfoBuilder` if the `dataCenterInfo` payload
wasn't exactly right. For example, it could be done with:

```
""dataCenterInfo"": {
  ""@class"": ""com.netflix.appinfo.AmazonInfo"",
  ""metadata"": {
    ""instance-id"": ""i-12345""
  }
}
```

If there wasn't a field before `metadata` it would skip over the
`metadata` field and then end up in an endless loop because it
didn't check for the end of input."1
1225Rigisting hava some wrongAronlele11/08/19, 09:08:47 PM"Now i deploy client service app and config serviceurl  http://xx.xx.xx.102:8761/eureka/,http://xx.xx.xx.103:8761/eureka/
ps, defaultZone 
but register-center have not register each other, so is not syc
issue:
service app only registered in one center,hope have a resolution"Please provide detailed setup and detailed analysis (logs at least). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1226Fetch docker container name of microservices registered with the Eureka serverSyCode711/08/19, 09:09:01 PMI am in a situation where I need to fetch the name of docker containers within which applications register to Eureka server. Is this possible at the moment for Java applications to offer such information while registering to Eureka or during subsequent health checks? I am using Spring-cloud microservices.You can send custom data with your Eureka registration, include the running container image name into the tags? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1227application  can only register to one eureka  when the security is onChinazhouwyChinazhouwy08/02/19, 05:33:15 PM"the version : Greenwich.SR2

when not use spring-boot-starter-security
the application can register to the eureka cluster
but when I use spring-boot-starter-security,
the application only register to one server"I believe you're better off asking this on Spring related support channels. This is likely unrelated to Eureka. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1228Eureka microservices on load testing giving, com.sun.jersey.api.client.clienthandlerexception:java.net.connectexception:connection refusedamir-ansari11/08/19, 09:09:14 PM"We are load testing our application. we have eureka naming server in cluster(replica).All services registers with eureka without any issue. But when we start hitting the api's in for loop, after some time (2,3 minutes) it gives com.sun.jersey.api.client.clienthandlerexception:java.net.connectexception:connection refused.

Here are my yml for naming server 1

eureka:
  instance:
    hostname: 10.0.60.49
  server:
    enableSelfPreservation: false
   
  client:
    serviceUrl:
      defaultZone: http://10.0.60.50:8762/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: 8761

Here are my yml for naming server 2

eureka:
  instance:
    hostname: 10.0.60.50
  server:
    enableSelfPreservation: false
  client:
    serviceUrl:
      defaultZone: http://10.0.60.49:8761/eureka
    register-with-eureka: true
    fetch-registry: true
server:
  port: 8762

Any help will be appriciated, thanks."Need more info, set up, test script, metrics during test, etc. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1229move gain of lastDirtyTimestamp before gain of status to avoid race conditionAddo.Zhangaddozhang09/10/19, 12:01:58 AMsolution for #1174 "Not so deep in the code but how serialization order may change anything? =||= OK. Now I get your explanation in #1174.
Make sense for me. I vote for this PR. =||= "move gain of lastDirtyTimestamp before gain of status to avoid race conditionAddo.Zhangaddozhang09/10/19, 12:01:58 AMsolution for #1174 NaNAddo.Zhang08/08/19, 10:02:53 AMmove status recording after lastDirtyTimestamp recording to avoid race condition1
1230shutdown of application instance deregisters entire applicationxf5721211/08/19, 10:05:12 PM"Spring Boot version: 2.0.4.RELEASE
Spring Cloud version: Finchley.RELEASE
eureka-client version: 1.9.2

We have 60+ instances of a microservice running in a docker swarm. We scale these microservices dynamically based on need, so the number of instances are constantly in a state of flux, going up and down.

Our problem is when a single instance is shut down due to lack of need, it deregisters the entire application from the registry instead of just the instance. This causes us to drop data because the registry thinks the service no longer exists until another instance somehow figures out it needs to reregister a few seconds later.

I have tried setting the config option `shouldUnregisterOnShutdown: false`, which does indeed prevent the service from deregistering. But now if a single instance is shut down, it registers the service in a ""DOWN"" state. Even though there are still at least 59 instances running.

While in a down state, the registry prevents anything from talking to the service.

How can I deregister a single instance of the application, NOT put the application in a down state, and continue processing seemlessly with the remaining instances that are still running?""This should not be happening in any case (graceful instance deregister or abrupt heartbeat stop), the other instances will stay as UP. If you share some logs I can give you pointers wrt what to look at. =||= Sorry, this should have been closed out a while ago as we found the issue.

There was a conflict between Netflix Eureka and Docker Swarm both trying to load balance our services. Docker swarm seemed to have taken priority causing all instances to be registered as a single instance within Netflix Eureka. At the time of this ticket we were not aware Docker Swarm had any load balancing. We have since fixed the conflict and everything is working as intended now. =||= Thanks for the update! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1231Error:(12, 30) java: cannot access org.springframework.context.ConfigurableApplicationContext   class file for org.springframework.context.ConfigurableApplicationContext not foundMelody W.melodybabee08/09/19, 12:02:12 AM"When I initialized my first eureka project, I spent much time to config the development environment. I got stuck when I run this demo. It shows that there are no errors in the build process, but could not run successfully.

The error log is:
```
Error:(12, 30) java: cannot access org.springframework.context.ConfigurableApplicationContext
  class file for org.springframework.context.ConfigurableApplicationContext not found
```

my parent pom.xml is:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.melodywang</groupId>
    <artifactId>springclass01</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modules>
        <module>serviceregistry</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Finchley.SR2</spring-cloud.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

The service pom.xml is:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <parent>
        <artifactId>springclass01</artifactId>
        <groupId>com.melodywang</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>serviceregistry</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

    </dependencies>

</project>
```

The application.yml is:
```
spring:
  application:
    name: service-registry

server:
  port: 8761 

eureka:
  instance:
    hostname: localhost 
  client:
    register-with-eureka: false
    fetch-registry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
```

I have tried `mvn package`and `mvn dependency:purge-local-repository`and it shows that this project has been built successfully. ""I recreated this project, and it works successfully.
Here is the code part for reference, and I guess the problem is the Maven cache.

parent pom.xml
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.melodywang</groupId>
    <artifactId>spring-microservice</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>service-registry</module>
    </modules>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Finchley.SR2</spring-cloud.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>2.1.6.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>


</project>
```
service pom.xml
```<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <parent>
        <artifactId>spring-microservice</artifactId>
        <groupId>com.melodywang</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>service-registry</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>2.1.6.RELEASE</version>
        </dependency>

    </dependencies>


</project>
```
main class
```
package com.melodywang.serviceregistry;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

@SpringBootApplication
@EnableEurekaServer
public class EurekaServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(EurekaServiceApplication.class, args);
    }
}

```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1232一个通用的信息泄露安全问题XL66508/29/19, 12:02:51 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1233Example application errorhuqingfengjzdayz09/09/19, 05:43:38 AM"When i run eureka-server in tomcat ，i visit http://localhost:8080/eureka ,i got this error


```java
2019-08-22 16:25:12,812 INFO  com.netflix.discovery.DiscoveryClient:844 [DiscoveryClient-InstanceInfoReplicator-0] [register] DiscoveryClient_EUREKA/huqingfengs-MacBook-Pro.local: registering service...
2019-08-22 16:25:20,914 ERROR com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient:83 [DiscoveryClient-InstanceInfoReplicator-0] [execute] Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8080/eureka/v2/}
com.sun.jersey.api.client.ClientHandlerException: java.net.SocketTimeoutException: Read timed out
        at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187)
        at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123)
        at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27)
        at com.sun.jersey.api.client.Client.handle(Client.java:652)
        at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682)
        at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74)
        at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570)
        at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118)
        at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
        at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847)
        at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.SocketTimeoutException: Read timed out
        at java.net.SocketInputStream.socketRead0(Native Method)
        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
        at java.net.SocketInputStream.read(SocketInputStream.java:171)
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1234Examples with rest servicesDareUrDream11/08/19, 09:13:26 PM"I have trying to use Eureka to deploy rest services, but then the current examples are standard main method [eureka-examples](https://github.com/Netflix/eureka/tree/master/eureka-examples) ones. Are they are neat tricks so that deploying rest services are easy. Would appreciate if an example is shared for the benefit of all users.

Cheers !!
DareUrDream

P.S - I know spring integration can do it but am trying to achieve this without using the integration projects."We don't have guidelines for that, use whatever you're most comfortable with. We internally leverage Spring for Java services, see https://www.youtube.com/watch?v=mln3_o6qlBo =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1235Uses HashMap if CompactHashMap is not available on classpath.Spencer Gibbspencergibb09/04/19, 04:56:03 PMThis allows eureka users to exclude compactmap library if they so choose."Should the dependency be scoped as optional?

https://github.com/Netflix/eureka/blob/fb355976fe989b41d126d1801a0cc159951b3b38/eureka-client/build.gradle#L21 =||= @mattnelson I don't think so. I'm shooting for the defaults to stay the same. If it gets excluded, it still works. =||= "Uses HashMap if CompactHashMap is not available on classpath.Spencer Gibbspencergibb09/04/19, 04:56:03 PMThis allows eureka users to exclude compactmap library if they so choose.NaNSpencer Gibb08/29/19, 07:55:35 PM"Uses HashMap if CompactHashMap is not available on classpath.

This allows eureka users to exclude compactmap library if they so choose."1
1236AbstractInstanceRegistry$CircularQueue is inneficientArthur Gavlyukovskiygavlyukovskiy09/30/19, 04:51:17 PMI have noticed that `AbstractInstanceRegistry$CircularQueue` implementation is quite inefficient due to `ConcurrentLinkedQueue#size`, which is linear time complexity of storage size, effectively making add element O(n).NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1237Optimized CircularQueue by using ArrayBlockingQueue with constant time size implementationArthur Gavlyukovskiygavlyukovskiy09/30/19, 04:51:17 PM"Since `AbstractInstanceRegistry` already have synchronization on `recentRegisteredQueue` and `recentCanceledQueue` it's safe to change `CircularQueue` implementation to extend `LinkedList` with constant time `size()`.

Benchmark:
```
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

import java.util.concurrent.TimeUnit;

@BenchmarkMode(Mode.Throughput)
@OutputTimeUnit(TimeUnit.SECONDS)
@State(Scope.Benchmark)
@Fork(value = 2)
@Warmup(iterations = 3, batchSize = 10000)
@Measurement(iterations = 3, batchSize = 10000)
public class CircularQueueBenchmark {

    private final EurekaCircularQueue<String> eureka = new EurekaCircularQueue<>(10000);
    private final EurekaCircularQueueLinkedList<String> eurekaLinkedList = new EurekaCircularQueueLinkedList<>(10000);

    @Setup(Level.Iteration)
    public void setup(){
        eureka.clear();
        eurekaLinkedList.clear();
    }

    @Benchmark
    public EurekaCircularQueue<String> eureka() {
        synchronized (eureka) {
            eureka.add(""something"");
        }
        return eureka;
    }

    @Benchmark
    public EurekaCircularQueueLinkedList<String> eurekaLinkedList() {
        synchronized (eurekaLinkedList) {
            eurekaLinkedList.add(""something"");
        }
        return eurekaLinkedList;
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(CircularQueueBenchmark.class.getSimpleName())
                .build();

        new Runner(opt).run();
    }
}
```
Results:
```
Benchmark                                 Mode  Cnt     Score     Error  Units
CircularQueueBenchmark.eureka            thrpt    6     3.297 ±   0.005  ops/s
CircularQueueBenchmark.eurekaLinkedList  thrpt    6  3893.782 ± 110.320  ops/s
```

fixes #1236""> Also ideally this should be an array-based circular buffer as both the old and the new implementations are not cache-friendly and are slow to iterate which is one of their primary uses, but it does not matter in this context much (if at all), I'm ok with this change as it makes perfect sense to me as long as you address the issues.

I was also thinking about it, and I even have working implementation, but I thought it would be too risky for you to accept it considering low performance difference (I measured only `add`) between array and linked list backed queues :)

I added commit with additional synchronization and array backed implementation. I also noticed that iteration just moves elements to array list, which is much faster when using collection as a source, especially with efficient `toArray` implementation. I made some measurements and it looks pretty impressive:
```
CircularQueueIterateBenchmark.arrayCircularQueue                             thrpt    3   14177.309 ±  291.964  ops/s
CircularQueueIterateBenchmark.arrayCircularQueueConstructor                  thrpt    3   45361.993 ± 2427.956  ops/s
CircularQueueIterateBenchmark.arrayCircularQueueConstructorOptimizedToArray  thrpt    3  264552.864 ± 5394.090  ops/s
CircularQueueIterateBenchmark.eurekaLinkedList                               thrpt    3   11591.028 ±  819.217  ops/s
```
I don't know how to create a benchmark that has proper memory layout to show higher cache hit rate for array backed implementation, but even difference between loop copy - `arrayCircularQueue` and constructor with efficient `toArray` - `arrayCircularQueueConstructorOptimizedToArray` is impressive! =||= Sorry for the delay on this one, I'm giving this full attention now. =||= @brharrington I agree with you, I checked the code and implementation is the same as mine, except locking. And I more believe Doug Lea than myself to implement and test data structures :)

Also it looks like with this approach we can remove locking on insertion as this code will be sufficient even under race:
```  
@Override
  public boolean offer(T item) {
    while (!underlying.offer(item)) {
      underlying.poll();
    }
    return true;
  }
```

@troshko111 what do you think on this approach? =||= This collection is thread-safe and based on the usage in the instance registry, all of the sync code can be removed, i.e. clear, element addition, toArray. =||= @troshko111 I updated the PR with suggestions from @brharrington. Please review =||= "Optimized CircularQueue by using ArrayBlockingQueue with constant time size implementationArthur Gavlyukovskiygavlyukovskiy09/30/19, 04:51:17 PM"Since `AbstractInstanceRegistry` already have synchronization on `recentRegisteredQueue` and `recentCanceledQueue` it's safe to change `CircularQueue` implementation to extend `LinkedList` with constant time `size()`.

Benchmark:
```
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;

import java.util.concurrent.TimeUnit;

@BenchmarkMode(Mode.Throughput)
@OutputTimeUnit(TimeUnit.SECONDS)
@State(Scope.Benchmark)
@Fork(value = 2)
@Warmup(iterations = 3, batchSize = 10000)
@Measurement(iterations = 3, batchSize = 10000)
public class CircularQueueBenchmark {

    private final EurekaCircularQueue<String> eureka = new EurekaCircularQueue<>(10000);
    private final EurekaCircularQueueLinkedList<String> eurekaLinkedList = new EurekaCircularQueueLinkedList<>(10000);

    @Setup(Level.Iteration)
    public void setup(){
        eureka.clear();
        eurekaLinkedList.clear();
    }

    @Benchmark
    public EurekaCircularQueue<String> eureka() {
        synchronized (eureka) {
            eureka.add(""something"");
        }
        return eureka;
    }

    @Benchmark
    public EurekaCircularQueueLinkedList<String> eurekaLinkedList() {
        synchronized (eurekaLinkedList) {
            eurekaLinkedList.add(""something"");
        }
        return eurekaLinkedList;
    }

    public static void main(String[] args) throws RunnerException {
        Options opt = new OptionsBuilder()
                .include(CircularQueueBenchmark.class.getSimpleName())
                .build();

        new Runner(opt).run();
    }
}
```
Results:
```
Benchmark                                 Mode  Cnt     Score     Error  Units
CircularQueueBenchmark.eureka            thrpt    6     3.297 ±   0.005  ops/s
CircularQueueBenchmark.eurekaLinkedList  thrpt    6  3893.782 ± 110.320  ops/s
```

fixes #1236"NaNArthur Gavlyukovskiy09/30/19, 11:22:48 AMChanged CircularQueue implementation to use ArrayBlockingQueue1
1238Unable to run the eureka-examples project as guided in https://github.com/Netflix/eureka/wiki/Running-the-Demo-Applicationshaezard03/23/20, 11:56:55 PM"I just cloned the repo in my local machine and was trying to follow the instructions provided at https://github.com/Netflix/eureka/wiki/Running-the-Demo-Application. However,

1. when i have launched the server using the war and tomcat it shows the replica as unavailable.

2. when i run the example service application it throws, the following error:-

5:40:10 PM: Executing task 'ExampleEurekaService.main()'...

Inferred project: eureka, version: 1.9.13-SNAPSHOT
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
Publication nebula not found in project :.
[buildinfo] Not using buildInfo properties file for this build.
Publication named 'nebula' does not exist for project ':' in task ':artifactoryPublish'.
:eureka-client:compileJava UP-TO-DATE
:eureka-client:processResources UP-TO-DATE
:eureka-client:classes UP-TO-DATE
:eureka-client:writeManifestProperties UP-TO-DATE
:eureka-client:jar
Note: /home/abdur/IdeaProjects/eureka/eureka-examples/src/main/java/com/netflix/eureka/ExampleEurekaGovernatedService.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
:eureka-examples:compileJava
:eureka-examples:processResources UP-TO-DATE
:eureka-examples:classes
[main] WARN com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[main] INFO com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[main] INFO com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@621be5d1
[main] WARN com.netflix.discovery.internal.util.Archaius1Utils - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
[main] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
[main] WARN com.netflix.discovery.internal.util.Archaius1Utils - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
[main] INFO com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[main] INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[main] ERROR com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Cannot resolve to any endpoints from provided configuration: {defaultZone=[]}
[main] ERROR com.netflix.discovery.shared.transport.EurekaHttpClients - Initial resolution of Eureka server endpoints failed. Check ConfigClusterResolver logs for more info
[main] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
[main] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[main] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[main] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
[main] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[main] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
[main] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[main] ERROR com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti - was unable to refresh its cache! status = There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:268)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:260)
	at com.netflix.eureka.ExampleEurekaService.initializeEurekaClient(ExampleEurekaService.java:52)
	at com.netflix.eureka.ExampleEurekaService.main(ExampleEurekaService.java:63)
[main] WARN com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[main] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[main] INFO com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[main] INFO com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1567858216224 with initial instances count: 0
:eureka-examples:ExampleEurekaService.main()
Registering service to eureka with STARTING status
Simulating service initialization by sleeping for 2 seconds...
Done sleeping, now changing status to UP
[main] INFO com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1567858218229, current=UP, previous=STARTING]
Waiting ... verifying service registration with eureka ...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] WARN com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti - registration failed There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)""This is the snip of eureka dashboard.

![image](https://user-images.githubusercontent.com/47674815/64474978-eee99e00-d199-11e9-8d42-5409564e6d04.png)
 =||= Seems like it can't reach the Eureka server, make sure it's up and taking traffic. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1239Application service not able to register to the Eureka servershaezard11/08/19, 08:58:45 PM"Hi

I launched a eureka-server using spring-boot. I have a non spring-boot application service. Can a non spring-boot application register to a spring-boot eureka-server. If yes, how to do that?"Absolutely yes, if that app is in Java, you can use the `EurekaClient`, if not, check its heartbeat protocol (wiki, source code) and mimic the behavior. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1240getting unkownHostException with spring-bootS7range09/14/19, 01:32:51 PM"I am creating a microservice-based application and I have multiple microservices I need to use. but I cannot seem to do it properly. 

this is an application that uses spring boot and eureka as service discovery and I am using restTemplate to connect to other services. I have searched for a solution a lot. I found a few but none have worked. a lot of posts suggested using a loadBalanced restTemplate, but it still does not work.

 here is my restTemplate Bean:
```
    @Bean
	@Qualifier(""loadBalancedRestTemplate"")
    public RestTemplate loadBalancedRestTemplate(RestTemplateCustomizer customizer) {
        RestTemplate restTemplate = new RestTemplate();
        customizer.customize(restTemplate);
        return restTemplate;
    }
```
This is my eureka config in application.yml file:
```
eureka:
  client:
    enabled: true
    healthcheck:
      enabled: true
    fetch-registry: true
    register-with-eureka: true
    instance-info-replication-interval-seconds: 10
    registry-fetch-interval-seconds: 10
  instance:
    appname: gateway
    instanceId: gateway:${spring.application.instance-id:${random.value}}
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
    status-page-url-path: ${management.endpoints.web.base-path}/info
    health-check-url-path: ${management.endpoints.web.base-path}/health
    metadata-map:
      zone: primary # This is needed for the load balancer
      profile: ${spring.profiles.active}
      version: #project.version#
      git-version: ${git.commit.id.describe:}
      git-commit: ${git.commit.id.abbrev:}
      git-branch: ${git.branch:}
ribbon:
  eureka:
    enabled: true
```
Whenever I want to login to my application a POST request is sent from the gateway to the UAA server to authenticate the credentials. The first time everything is ok and it's working properly, but when I try to do the same thing I get this error: 
```org.springframework.web.client.ResourceAccessException: I/O error on POST request for ""http://usermicro/oauth/token"": usermicro; nested exception is java.net.UnknownHostException: usermicro```
And this is the full stacktrace:
```
2019-09-13 19:07:46.188 ERROR 13215 --- [ XNIO-1 task-18] o.z.problem.spring.common.AdviceTrait    : Internal Server Error

org.springframework.web.client.ResourceAccessException: I/O error on POST request for ""http://usermicro/oauth/token"": usermicro; nested exception is java.net.UnknownHostException: usermicro
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:744)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:670)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:445)
	at com.gateway.app.security.oauth2.OAuth2TokenEndpointClientAdapter.sendPasswordGrant(OAuth2TokenEndpointClientAdapter.java:64)

```
I am sure that both gateway and usermicro are registered in eureka service discovery. I cannot figure out the problem. 

thank you for your help."Please don't cross post =||= @spencergibb I am sorry! I was not sure where to post it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1241Eureka Client not workingNemogpugems09/25/19, 09:51:18 PM"import { logger } from '../common/logging';
import { ExpressConfig } from './Express';
import { Eureka } from 'eureka-js-client';

export class Application {

  server: any;
  express: ExpressConfig;

  constructor() {
    this.express = new ExpressConfig();
    
    const port = 3001;
    this.server = this.express.app.listen(port, () => {
      logger.info(`Server Started! Express: http://localhost:${port}`);
});
  
  let client=new Eureka({
    instance: {
      app: 'hello-world-chapter-6',
      hostName: 'localhost',
      ipAddr: '127.0.0.1',
      statusPageUrl: `http://localhost:${port}`,
      healthCheckUrl: `http://localhost:${port}/health`,
      port: {
        '$': port,
        '@enabled': true,
      },
      vipAddress: 'myvip',
      dataCenterInfo: {
        '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',
        'name': 'MyOwn',
      },
    },
    eureka: {
      host: 'localhost',
      port: 8761,
      servicePath: '/eureka/apps/',
    }
  });
  client.start();

  process.on('SIGINT', ()=>{
    this.server.close();
    client.stop();
  });
  
}

}








Error starting the Eureka Client { Error: connect ECONNREFUSED 127.0.0.1:8761
    at Object._errnoException (util.js:1031:13)
    at _exceptionWithHostPort (util.js:1052:20)
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1195:14)
  errno: 'ECONNREFUSED',
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 8761 }"I don't know what client this is, but even ignoring the fact it's not part of the repository and is likely a wrong place to report, looks to me nothing's wrong with it per se, clearly nothing's listening on the port you're trying to connect to: see https://linux.die.net/man/2/connect. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1242Regression in Eureka server 1.8.0 (and above)Georg FriedrichGFriedrich09/30/19, 04:58:25 PM"I've just updated from Eureka 1.7.2 to the latest Eureka version and ended up with a regression due to the PR #970 
More specifcally the InstanceInfo now contains a lowercase app name even though it shouldn't.
Reason: One of my apps registering at Eureka uses a lowercase app name. But normally Eureka itself should do an ""uppercase"" call to have this fixed.
This is expected to happen for the deserialization at https://github.com/Netflix/eureka/blob/9d07ac4aaba90876d89a691521c128c9c59bcce8/eureka-client/src/main/java/com/netflix/discovery/converters/EurekaJacksonCodec.java#L516-L526
But the thing is: The cache already contains the string in the lowercase variant and the value transformer is not even called, resulting in the lowercase variant to be used.
My idea would be to overwrite the source of the underlying ArrayCharBuffer at https://github.com/Netflix/eureka/blob/9d07ac4aaba90876d89a691521c128c9c59bcce8/eureka-client/src/main/java/com/netflix/discovery/util/DeserializerStringCache.java#L320
by calling the value transformer to make sure that the source already has the right value (offset and length need to be set accordingly). No need to keep the value transformer anymore.
@troshko111 what do you think?"Fixed by #1245  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1243Fix DeserializerStringCache if value transformer is used (#1242)Georg FriedrichGFriedrich09/30/19, 04:57:46 PMResolves #1242 "@tcellucci I'm aware of the issues that you've mentioned, but I think this is better than a broken cache implementation.

I've already tried to explain the bug in detail in #1242 and it's not the one that you've described but I can try again to make it more clear:
If you have a cache that looks like this:
Charbuffer{""value""} -> String{""value""}
and you get to the point where the application name is deserialized from a response that is written in lowercase and contains also the name ""value"", you will lookup the cache by using a Charbuffer{""value""}. The cache in turn will return the String{""value""} even though your value transformer would have created a String{""VALUE""} instead. Due to that Eureka will create a weird exception underneath complaining about the lowercase application name that was returned from the cache.

Of course you could change the value transformer to work with some input from the cache and do the transformation after the lookup, but this in turn would create a new String on each and every lookup. And as I'm not aware were this String is used later on (maybe it is kept at some different place too), I've decided against it, to not have several instances of String{""VALUE""} in the heap.

Instead I've decided to do the transformation upfront, so that the cache is able to hold a value for ""value"" and ""VALUE"". By that the String{""VALUE""} is always reused and the just created string to lookup the cache is thrown away directly, resulting in only one element more in the cache and the rest can be GC'ed right afterwards.

If you've a better solution, feel free to change the PR, but I think it's far better to have a correct and working implementation than a buggy cache that pays more focus on possible GC workload than on correctness. =||= I think a unit test demonstrating the problem is in order, rather than more exposition. =||= reading through your comments, it sounds as if your code is accessing the cache in different ways for the same key (this implied by the presence of a lower-case cache value in the cache, despite an uppercasing cache value transform).  More plainly, for the same key, I am inferring that sometimes a value transformer is used and sometimes it is not.  The observed behavior is that the cache always returns the initially cached value, rather than transformed value you're expecting.

 =||= @tcellucci there you go - I've created a test for this case. It fails with the old implementation but works with the new one.
This case is happening if the cache was used already by e.g. some other field of the InstanceInfo containing the value as lowercase and then trying to deserialize the app name which should be converted to uppercase but isn't. =||= @GFriedrich thanks for bringing this up! I've merged the linked PR, closing this one. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1244Eureka Register service with RESR APINemogpugems09/25/19, 09:55:39 PM"Hi,

I am trying to register a microservice in eureka with the following input. 

curl -X POST -i http://localhost:8761/eureka/apps --data '{
    instance: {
        hostName: ""WKS-SOF-L011"",
        app: ""com.automationrhapsody.eureka.app"",
        vipAddress: ""com.automationrhapsody.eureka.app"",
        secureVipAddress: ""com.automationrhapsody.eureka.app"",
        ipAddr: ""10.0.0.10"",
        status: ""STARTING"",
        port: {$: 8080, @enabled: true},
        securePort: {$: 8443, @enabled: true},
        healthCheckUrl: ""http://WKS-SOF-L011:8080/healthcheck"",
        statusPageUrl: ""http://WKS-SOF-L011:8080/status"",
        homePageUrl: ""http://WKS-SOF-L011:8080"",
        dataCenterInfo: {
            @class: ""com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo"", 
            name: ""MyOwn""
        },
    
}'

And got the following error message : 

{""timestamp"":1568974209215,""status"":405,""error"":""Method Not Allowed"",""message"":""Method Not Allowed"",""path"":""/eureka/apps/""}"https://github.com/Netflix/eureka/wiki/Eureka-REST-operations =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1245address cache bug with value supplierTom Celluccitcellucci09/30/19, 04:57:04 PM"this PR is a different fix to issue #1242, ""Fix DeserializerStringCache if value transformer is used"". See issue 1242 for details on the situation, but the summary is that the DeserializerStringCache may not properly handle caching for strings when a 'value transformer' is present.

The fix in this PR updates the CharacterBuffer classes to include a new 'variant' field that disambiguates identical cache entries with the same key but different values.  The value of 'variant' is unique to the type of the valueTransformer, which is appropriate for implementations that provide consistent output for a given cached 'string' (as seen in Eureka's InstanceInfoDeserializer).

Thanks to GFriedrich, who identified this issue and submitted alternate PR https://github.com/Netflix/eureka/pull/1243 as well as a unit test to isolate the issue.  His test is also incorporated with this PR."NaNaddress cache bug with value supplierTom Celluccitcellucci09/30/19, 04:57:04 PM"this PR is a different fix to issue #1242, ""Fix DeserializerStringCache if value transformer is used"". See issue 1242 for details on the situation, but the summary is that the DeserializerStringCache may not properly handle caching for strings when a 'value transformer' is present.

The fix in this PR updates the CharacterBuffer classes to include a new 'variant' field that disambiguates identical cache entries with the same key but different values.  The value of 'variant' is unique to the type of the valueTransformer, which is appropriate for implementations that provide consistent output for a given cached 'string' (as seen in Eureka's InstanceInfoDeserializer).

Thanks to GFriedrich, who identified this issue and submitted alternate PR https://github.com/Netflix/eureka/pull/1243 as well as a unit test to isolate the issue.  His test is also incorporated with this PR."NaNTom Cellucci09/27/19, 12:28:17 AMaddres cache bug with value supplier1
1246Client cannot update instance statusGrégory Sohngsohn10/03/19, 08:33:32 AM"Wa are using 2.1.3.RELEASE spring release of eureka client.

We can't update instance status. We have following errors :

`RetryableEurekaHttpClient    : Request execution failed with message: java.lang.NoClassDefFoundError: vlsi/utils/CompactHashMap`

`DiscoveryClient    : DiscoveryClient_XXX-SERVICE/worker-1:XXX-service:9600 - was unable to refresh its cache! status = Cannot execute request on any known server`

`com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server`

Any idea ? :)


""This is not the spring issue tracker. https://github.com/spring-cloud/spring-cloud-netflix =||= Ok but seems more like a com.netflix.discovery package issue for me, no ?


```
javax.ws.rs.WebApplicationException: java.lang.NoClassDefFoundError: vlsi/utils/CompactHashMap
at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:107) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar!/:1.19.1]
at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar!/:1.19.1]
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:198) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1051) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:965) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1479) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1446) ~[eureka-client-1.9.8.jar!/:1.9.8]
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]

Caused by: java.lang.NoClassDefFoundError: vlsi/utils/CompactHashMap
at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoDeserializer.deserialize(EurekaJacksonCodec.java:625) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.converters.EurekaJacksonCodec$InstanceInfoDeserializer.deserialize(EurekaJacksonCodec.java:408) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1574) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:965) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationDeserializer.deserialize(EurekaJacksonCodec.java:738) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationDeserializer.deserialize(EurekaJacksonCodec.java:698) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1574) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:965) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:808) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.converters.EurekaJacksonCodec$ApplicationsDeserializer.deserialize(EurekaJacksonCodec.java:775) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1703) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1608) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1188) ~[jackson-databind-2.9.9.3.jar!/:2.9.9.3]
at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:197) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.8.jar!/:1.9.8]
... 26 common frames omitted

2019-10-02 14:33:41.089  WARN [core-service,,,] 1 --- [freshExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: java.lang.NoClassDefFoundError: vlsi/utils/CompactHashMap
2019-10-02 14:33:41.090 ERROR [core-service,,,] 1 --- [freshExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_CORE-SERVICE/worker-1:core-service:9500 - was unable to refresh its cache! status = Cannot execute request on any known server

com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1051) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:965) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1479) ~[eureka-client-1.9.8.jar!/:1.9.8]
at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1446) ~[eureka-client-1.9.8.jar!/:1.9.8]
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
``` =||= I updated my dependencies to use 1.9.13 eureka-client library version instead of 1.9.3. Seems ok now. Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1247why expectedNumberOfRenewsPerMin not reduce after Eureka client shutting down unexpectedly ?githubyong11/08/19, 08:56:23 PM"I have a standalone eureka server(not self register) and a eureka client.
1.set  enable-self-preservation =true
2. kill eureka client process.
3. start eureka client.
Repeat step 2-3, the ekreua server ""Renews threshold"" will increment very fast, and eureka server enter self preservation after a while. I had to restart the eureka server to recover it.
it seems that it won't call server method 'com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#cancel' when Eureka client shutting down unexpectedly . is it proper ?"By design to protect against mass information loss in case of a wide range is potential issues. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1248Whitelist/BlackListFrancisco M. Palosfranciscopalos03/23/20, 11:57:16 PM"Hi all,

Is there any way to stablish a whitelist or blacklist in order to enable registry only microservices deployed in several hosts? 
I know that we could use AWS zones, but currently we have deployed all microservices in our internal intranet.

Thanks & Regards""You mean like create a whitelist of services allowed to talk to Eureka? =||= > You mean like create a whitelist of services allowed to talk to Eureka?

@troshko111 Yes, that's exactly what we are looking for but it seems there is no way to perform it. Isn't it?

Thanks! =||= There are two properties that control if the instance should register with eureka and if the instance should fetch the registry. These can be flexed on those hosts you do not want to participate with eureka.

https://github.com/Netflix/eureka/blob/743af8be0fa37118a3a9ee0d39f3ba8a89621119/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig.java#L273-L284
https://github.com/Netflix/eureka/blob/743af8be0fa37118a3a9ee0d39f3ba8a89621119/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig.java#L451-L456 =||= > @troshko111 Yes, that's exactly what we are looking for but it seems there is no way to perform it. Isn't it?
> 
> Thanks!

In addition to what @mattnelson has mentioned, depending on your requirements and reliability of the solution I'd suggest to explore:

- If deployed to a cloud provider infra, look into network control like security groups on AWS and equivalent on Azure/GCP.
- Put on a reverse proxy in front of Eureka instances and require mTLS (terminating it at the reverse proxy), make the proxy verify the client identities against the whitelist or just use special certs.
- Use a firewall of some sort, iptables should do.

This is really outside of the service concerns. =||= Hi both,

Thanks for your help. We will check it now. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1249fix eureka client not register it self ofter a long time network conn…skyguard101/27/20, 06:28:53 PMIn this issue (https://github.com/Netflix/eureka/issues/1221), eureka client try to re - register but throw TransportException, so the re - register logic not executed, in my opinion, throw ThranportException show that server-side processing logic errors, Therefore, I personally think that DiscoveryClient should re-register when receiving TransportException. Please review the pull request and make Suggestions. I will track this problem, thank you"General:

- We can only re-register if we received a 404, no other error as this explicitly indicates the instance has been evicted, see the linked issue for an example. You can't just re-register on any error.

- Needs tests to demonstrate the issue and the fix.

- Exception handling looks incorrect as both renew and doRegister swallow exceptions. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1251Cleanup resources on web-app shutdown (#1207)Stephan Windmüllerwindmueller11/11/19, 05:55:19 PM"In order to allow a clean shutdown, I canceled various timers and unregistered a number of Servo monitors. The `CurrentRequestVersion` got a `remove` method so that the `ThreadLocal` can be cleared after use.

The (in my opinion) only ugly solution is `ServoControl` which stops the executor of Servo since the library seems to be no longer maintained.""> The (in my opinion) only ugly solution is `ServoControl` which stops the executor of Servo since the library seems to be no longer maintained.

Servo is in maintenance mode and we aren't investing much new effort into it, however, PRs that have minimal risk will be considered.  =||= Thanks @stovocor! =||= "Cleanup resources on web-app shutdown (#1207)Stephan Windmüllerwindmueller11/11/19, 05:55:19 PM"In order to allow a clean shutdown, I canceled various timers and unregistered a number of Servo monitors. The `CurrentRequestVersion` got a `remove` method so that the `ThreadLocal` can be cleared after use.

The (in my opinion) only ugly solution is `ServoControl` which stops the executor of Servo since the library seems to be no longer maintained."NaNStephan Windmüller11/11/19, 02:15:38 PMReview fix (#1207)1
1252TimedSupervisorTask if cancel the future when it Timeout, the executor whill never execute success again.BankRen11/08/19, 10:24:49 PM"[eureka-client/src/main/java/com/netflix/discovery/TimedSupervisorTask.java](url)

 ```
       try {
            future = executor.submit(task);
            threadPoolLevelGauge.set((long) executor.getActiveCount());
            future.get(timeoutMillis, TimeUnit.MILLISECONDS);  // block until done or timeout
            delay.set(timeoutMillis);
            threadPoolLevelGauge.set((long) executor.getActiveCount());
            successCounter.increment();
        } catch (TimeoutException e) {
            .....         
        } finally {
            if (future != null) {
                future.cancel(true);
            }
       }
```
if the future cancelled when it throw TimeoutException, it whill interrupt the thread from executor. So that, the executor will handle a interrupted thread, it never execute success again."sound's like the issue I had: https://github.com/Netflix/eureka/issues/1250 =||= Looks like a dup of #1250. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1253Why Eureka Servers do not exchange instances each other?yuanxu zhangyuanxuzhang03/23/20, 11:56:32 PMHi,There is two Eureka Servers named ServerA and ServerB, a part of services with Eureka Client named ClientA,ClientB were setted eureka.client.serviceUrl.defaultZone value to ServerA, the rest of services with Eureka Client named ClientC,ClientD were setted eureka.client.serviceUrl.defaultZone value to ServerB. ServerA and ServerB defaultZone were setted each other. I expected ServerA and ServerB could replicate client instances,ServerA has all clients, the same as ServerB, but ServerA only has ClientA,ClientB(ServerB only has ClientC,ClientD). Even ServerA and ServerB were started with fetchRegistry=true setting had all clents, ServerA would lost clientC and clientD later(no heate beat). Why Eureka Servers do not exchange instances each other? Need the Client must set eureka.client.serviceUrl.defaultZone value to all eureka servers(ServerA and ServerB)?Hard to tell much without a minimal repro with config samples, looks like a misconfiguration to me. Make sure you correctly set up the Eureka cluster first. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1254Ask a conceptual question, different regions can not access each other, right?startjava11/08/19, 09:20:29 PM"Ask a conceptual question, different regions can not access each other, right?
different zone can access each other？
zone inner servers can access each other？

3 ask ...

hope answer:
（1）？
（2）？
（3）？

thank you very much!""Yes to all 3.

Regions do not communicate among themselves due to regional isolation model, i.e. to support fail out and cookie cutter region expansion. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1255Stack for i-xxx does not exist (Service: AmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request ID: xxxLucaslucasobsidiam11/08/19, 10:22:18 PM"We are trying to move our local micro-service architecture to Amazon Web Services with my little experience.

I have added the ConfigBean line, Maven Dependency and am trying to compile in an EC2 instance which then is sent to ECR and deployed on Fargate. I have attached an IAM role so that when I load Eureka with AWS Autoconfigure it doesn't throw an access key error as adding it to the config did not work. Now I am having the following error appear, which I can't figure out what it's trying to do in CloudFormation:

> Stack for i-0d6112770e8cb97b2 does not exist (Service: AmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request ID: e1ac5b22-8b1c-43a5-b93c-e469a541fe46)

`org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.cloud.aws.core.env.ResourceIdResolver.BEAN_NAME': Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'stackResourceRegistryFactoryBean' defined in class path resource [org/springframework/cloud/aws/autoconfigure/context/ContextStackAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.aws.core.env.stack.config.StackResourceRegistryFactoryBean]: Factory method 'stackResourceRegistryFactoryBean' threw exception; nested exception is com.amazonaws.services.cloudformation.model.AmazonCloudFormationException: Stack for i-0d6112770e8cb97b2 does not exist (Service: AmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request ID: e1ac5b22-8b1c-43a5-b93c-e469a541fe46)`

Where should I be looking at?"Try to ask at Spring, this is unrelated to Eureka, looks to me like you're missing the value for stack property. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1256How to delay eureka client registration eureka server?kinsey-jian11/08/19, 09:22:09 PM"In K8S, I have a Spring Boot application which is also a Eureka client. The normal behavior of the application is to register with Eureka server on start up as UP. I have a requirement that the application shouldn't register with the Eureka server until k8s readiness finished"This is more of a Spring question, in short you should not call the `.register()` until ready to do so. You may also look into supplying a healthcheck preventing it from going to UP unless your conditions are met. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1257How to register a go microservice in spring eureka serverKushan KS Edirisooriyakushankavinda11/15/19, 06:28:05 PMI tried many ways to register go microservice in eureka can you please let me know what is the end point that  i neet to call to register a microservice"Follow the logic in `DiscoveryClient`, you need to heartbeat to
`/discovery/v2/apps/$APP/$INSTANCE_ID?status=$STATUS&lastDirtyTimestamp=$LAST_REGISTRATION` with the appropriate content. =||= We do not ship non-Java clients but it should be pretty trivial to implement a sidecar registering with Eureka and use it in all non-Java services. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1258pullxjfeng30660209711/20/19, 11:10:52 PMpull requestPlease open an issue first so we can discuss what you'd like to do. We can then update the PR and reopen it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1259maybe this is a bug in eureka-client in class com.netflix.discovery.shared.transport.jersey.ApacheHttpClientConnectionCleanerchaichunyang12/04/19, 03:55:48 AM"in class com.netflix.discovery.shared.transport.jersey.ApacheHttpClientConnectionCleaner
the method cleanIdle is for clean idle connections from the pool
the parameter is in MILLISECONDS, but use connectionManager. closeIdleConnections in SECONDS


    public void cleanIdle(long delayMs) {
        Stopwatch start = executionTimeStats.start();
        try {
            apacheHttpClient.getClientHandler().getHttpClient()
                    .getConnectionManager()
                    .closeIdleConnections(delayMs, TimeUnit.SECONDS);
        } catch (Throwable e) {
            logger.error(""Cannot clean connections"", e);
            cleanupFailed.increment();
        } finally {
            if (null != start) {
                start.stop();
            }
        }
    }""no one reply this？ =||= This appears to be a typo, this is constructed via `EurekaJerseyClientBuilder` all usages of which read a config property explicitly suffixed with `seconds`, i.e. there's no bug but the parameter name should be `delayS` instead of the current `delayMs`. =||= > This appears to be a typo, this is constructed via `EurekaJerseyClientBuilder` all usages of which read a config property explicitly suffixed with `seconds`, i.e. there's no bug but the parameter name should be `delayS` instead of the current `delayMs`.

thank you for response, But I debug the code, the configuration property `eureka.client.service-url.eureka-connection-idle-timeout-seconds`  sure is `seconds` by default 30, But in `com.netflix.discovery.shared.transport.EurekaClientFactoryBuilder` it has been multiplied 1000, so when call the build method, the connectionIdleTimeout param actually is `30 * 1000`.

```
EurekaClientFactoryBuilder:
    public B withClientConfig(EurekaClientConfig clientConfig) {
        withClientAccept(EurekaAccept.fromString(clientConfig.getClientDataAccept()));
        withAllowRedirect(clientConfig.allowRedirects());
        withConnectionTimeout(clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000);
        withReadTimeout(clientConfig.getEurekaServerReadTimeoutSeconds() * 1000);
        withMaxConnectionsPerHost(clientConfig.getEurekaServerTotalConnectionsPerHost());
        withMaxTotalConnections(clientConfig.getEurekaServerTotalConnections());
        

> withConnectionIdleTimeout(clientConfig.getEurekaConnectionIdleTimeoutSeconds() * 1000);

        withEncoder(clientConfig.getEncoderName());
        return withDecoder(clientConfig.getDecoderName(), clientConfig.getClientDataAccept());
    }
```
when writting this comment I found the newest version 1.9.14 has fix this bug already.
but the newest spring cloud still depend on 1.9.13. so finally i need update my depends. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1260Instance is OUT_OF_SERVICE in service registry, still traffic flowing to this instance ganeshcbhanage03/23/20, 11:58:13 PM"I was trying out eureka endpoints as mentioned [here](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations)

After doing PUT /eureka/v2/apps/appID/instanceID/status?value=OUT_OF_SERVICE for 1 instance, it is going out of service in service registry, but still I see traffic flowing through this instance.

Any help here is appreciated."The state is eventually consistent, if you're sure all the servers` registries have it as OOS but the traffic is still going there, it must be an issue on the client side, do the clients see the changes? If no, why? Are there any connectivity issues? What's the impact duration (1m, 30m, hours, persistent?) Anything over 1-2m would indicate an issue with propagation and needs to be localized to the server/client first. =||= I got to know, it is because of PCF. The way PCF handles routes registry using GO router =||= Can you elaborate? Was there an actual issue or a misconfiguration? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1261Eureka FreeMarker template error in AMI's column when running in Fargate with Private IPLucaslucasobsidiam12/04/19, 03:28:34 PM"I've successfully connected one of our microservices to Eureka from Fargate. Eureka is currently on a separate EC2 instance and microservices will be running from Fargate (hopefully Eureka too). I have managed to get this running properly (or it seems) but I am getting a FreeMarker template error on the Eureka status page under the AMIs columns in ""Instances currently registered with Eureka"".

What I have done to achieve this Fargate to EC2 Eureka connection with Private IP is the following:

Dockerfile:
```
#############
### build ###
#############

# base image
FROM maven:3.6.2-ibmjava-8-alpine as build

# set working directory
WORKDIR /app


# install and cache app dependencies
COPY . /app
RUN mvn clean package


############
### prod ###
############

# base image
FROM openjdk:8-alpine

RUN apk add jq

# set working directory
WORKDIR /app

# copy entrypoint from the 'build environment'
COPY --from=build /app/entrypoint.sh /app/entrypoint.sh

# copy artifact build from the 'build environment'
COPY --from=build /app/target/user-service-0.0.1-SNAPSHOT.jar /app/user-service-0.0.1-SNAPSHOT.jar

# expose port 8081
EXPOSE 8081

# run entrypoint
ENTRYPOINT [""/bin/sh"", ""./entrypoint.sh""]
```

entrypoint.sh:
```
#!/bin/sh
export FARGATE_IP=$(wget -q -O - http://169.254.170.2/v2/metadata | jq -r .Containers[0].Networks[0].IPv4Addresses[0])
echo $FARGATE_IP
java -jar user-service-0.0.1-SNAPSHOT.jar
```

application-aws.properties
```
eureka.client.region=us-east-1
eureka.client.use-dns-for-fetching-service-urls=true
eureka.client.eureka-server-u-r-l-context=eureka
eureka.client.eureka-server-d-n-s-name=eureka.domain.com
eureka.client.eureka-server-port=8761
eureka.instance.prefer-ip-address=true
eureka.instance.ip-address=${FARGATE_IP}
eureka.instance.non-secure-port=8081
```

This gives me the following error under the AMIs column in the Eureka page but the service still works.

> FreeMarker template error (DEBUG mode; use RETHROW in production!): The following has evaluated to null or missing: ==> amiCount.key [in template ""eureka/status.ftl"" at line 35, column 26] ---- Tip: It's the step after the last dot that caused this error, not those before it. ---- Tip: If the failing expression is known to legally refer to something that's sometimes null or missing, either specify a default value like myOptionalVar!myDefault, or use <#if myOptionalVar??>when-present<#else>when-missing. (These only cover the last step of the expression; to cover the whole expression, use parenthesis: (myOptionalVar.foo)!myDefault, (myOptionalVar.foo)?? ---- ---- FTL stack trace (""~"" means nesting-related): - Failed at: ${amiCount.key} [in template ""eureka/status.ftl"" at line 35, column 24] ---- Java stack trace (for programmers): ---- freemarker.core.InvalidReferenceException: [... Exception message was already printed; see it above ...] at freemarker.core.InvalidReferenceException.getInstance(InvalidReferenceException.java:134) at freemarker.core.EvalUtil.coerceModelToTextualCommon(EvalUtil.java:467) at freemarker.core.EvalUtil.coerceModelToStringOrMarkup(EvalUtil.java:389) at freemarker.core.EvalUtil.coerceModelToStringOrMarkup(EvalUtil.java:358) at freemarker.core.DollarVariable.calculateInterpolatedStringOrMarkup(DollarVariable.java:100) at freemarker.core.DollarVariable.accept(DollarVariable.java:63) at freemarker.core.Environment.visit(Environment.java:366) at freemarker.core.IteratorBlock$IterationContext.executedNestedContentForCollOrSeqListing(IteratorBlock.java:317) at freemarker.core.IteratorBlock$IterationContext.executeNestedContent(IteratorBlock.java:271) at freemarker.core.IteratorBlock$IterationContext.accept(IteratorBlock.java:242) at freemarker.core.Environment.visitIteratorBlock(Environment.java:642) at freemarker.core.IteratorBlock.acceptWithResult(IteratorBlock.java:107) at freemarker.core.IteratorBlock.accept(IteratorBlock.java:93) at freemarker.core.Environment.visit(Environment.java:366) at freemarker.core.IteratorBlock$IterationContext.executedNestedContentForCollOrSeqListing(IteratorBlock.java:317) at freemarker.core.IteratorBlock$IterationContext.executeNestedContent(IteratorBlock.java:271) at freemarker.core.IteratorBlock$IterationContext.accept(IteratorBlock.java:242) at freemarker.core.Environment.visitIteratorBlock(Environment.java:642) at freemarker.core.IteratorBlock.acceptWithResult(IteratorBlock.java:107) at freemarker.core.IteratorBlock.accept(IteratorBlock.java:93) at freemarker.core.Environment.visit(Environment.java:330) at freemarker.core.Environment.visit(Environment.java:336) at freemarker.core.Environment.visit(Environment.java:336) at freemarker.core.Environment.process(Environment.java:309) at freemarker.template.Template.process(Template.java:384) at org.springframework.web.servlet.view.freemarker.FreeMarkerView.processTemplate(FreeMarkerView.java:389) at org.springframework.web.servlet.view.freemarker.FreeMarkerView.doRender(FreeMarkerView.java:302) at org.springframework.web.servlet.view.freemarker.FreeMarkerView.renderMergedTemplateModel(FreeMarkerView.java:253) at org.springframework.web.servlet.view.AbstractTemplateView.renderMergedOutputModel(AbstractTemplateView.java:178) at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316) at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1371) at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1117) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114) at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)
"Freemarker is used in spring cloud Netflix =||= Asking at spring cloud Netflix. Thanks @spencergibb  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1262Disable jersey2 jsonp/moxy auto discoveryMatt Nelsonmattnelson12/20/19, 05:41:42 PM"Disable moxy/jsonp autodiscovery as the eureka client usage leverages an explicitly registered message body reader/writer.

When moxy or another json processor(jsonp) are on the classpath, they will be autodiscovered and registered into the transport/application clients which causes errors as those other providers take precedence over the DiscoveryJerseyProvider.

Example stack trace of moxy attempting to handle the request
```
	at org.eclipse.persistence.jaxb.rs.MOXyJsonProvider.readFrom(MOXyJsonProvider.java:695)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)
	at org.glassfish.jersey.spi.ContentEncoder.aroundReadFrom(ContentEncoder.java:127)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:808)
	at org.glassfish.jersey.client.ClientResponse.readEntity(ClientResponse.java:326)
	at org.glassfish.jersey.client.InboundJaxrsResponse$1.call(InboundJaxrsResponse.java:115)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:228)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:419)
	at org.glassfish.jersey.client.InboundJaxrsResponse.runInScopeIfPossible(InboundJaxrsResponse.java:267)
	at org.glassfish.jersey.client.InboundJaxrsResponse.readEntity(InboundJaxrsResponse.java:112)
	at com.netflix.discovery.shared.transport.jersey2.AbstractJersey2EurekaHttpClient.getApplicationsInternal(AbstractJersey2EurekaHttpClient.java:266)
```""@troshko111 Could I get review on this? =||= Thanks @mattnelson! =||= @troshko111 Do know when this will be released? =||= I have no problem releasing right now, it seems pretty safe to me. In general, feel free to mention if it's important to release close to the PR merge, more than happy to accomodate.

EDIT 1: kicked off one.
EDIT 2: released. =||= "Disable jersey2 jsonp/moxy auto discoveryMatt Nelsonmattnelson12/20/19, 05:41:42 PM"Disable moxy/jsonp autodiscovery as the eureka client usage leverages an explicitly registered message body reader/writer.

When moxy or another json processor(jsonp) are on the classpath, they will be autodiscovered and registered into the transport/application clients which causes errors as those other providers take precedence over the DiscoveryJerseyProvider.

Example stack trace of moxy attempting to handle the request
```
	at org.eclipse.persistence.jaxb.rs.MOXyJsonProvider.readFrom(MOXyJsonProvider.java:695)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.invokeReadFrom(ReaderInterceptorExecutor.java:256)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$TerminalReaderInterceptor.aroundReadFrom(ReaderInterceptorExecutor.java:235)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)
	at org.glassfish.jersey.spi.ContentEncoder.aroundReadFrom(ContentEncoder.java:127)
	at org.glassfish.jersey.message.internal.ReaderInterceptorExecutor.proceed(ReaderInterceptorExecutor.java:155)
	at org.glassfish.jersey.message.internal.MessageBodyFactory.readFrom(MessageBodyFactory.java:1085)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:874)
	at org.glassfish.jersey.message.internal.InboundMessageContext.readEntity(InboundMessageContext.java:808)
	at org.glassfish.jersey.client.ClientResponse.readEntity(ClientResponse.java:326)
	at org.glassfish.jersey.client.InboundJaxrsResponse$1.call(InboundJaxrsResponse.java:115)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:315)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:297)
	at org.glassfish.jersey.internal.Errors.process(Errors.java:228)
	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:419)
	at org.glassfish.jersey.client.InboundJaxrsResponse.runInScopeIfPossible(InboundJaxrsResponse.java:267)
	at org.glassfish.jersey.client.InboundJaxrsResponse.readEntity(InboundJaxrsResponse.java:112)
	at com.netflix.discovery.shared.transport.jersey2.AbstractJersey2EurekaHttpClient.getApplicationsInternal(AbstractJersey2EurekaHttpClient.java:266)
```"NaNMatt Nelson12/09/19, 09:40:39 PMDisable jersey2 json auto discovery1
1263Release 1.9.14 Fails to BuildMatthew Johnsoncopperlight11/02/20, 01:12:47 AM"Steps to reproduce:

1. Download the `tar.gz` file from the [1.9.14 Releases page](https://github.com/Netflix/eureka/releases/tag/v1.9.14).
1. Extract the tarball.
1. `./gradlew build`

Error:

```
./gradlew build

...

FAILURE: Build failed with an exception.

* Where:
Build file '/Users/matthewj/Downloads/eureka-1.9.14/build.gradle' line: 10

* What went wrong:
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
> Failed to apply plugin [id 'nebula.netflixoss']
   > Cannot set property 'defaultVersionStrategy' on null object

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 24.677 secs
```

The issue is that the Nebula plugin depends on the existence of tags within a Git repo.

If you clone the repo, checkout the v1.9.14 tag and build from there, then it succeeds.
""I run into the same error. Any updates on this? =||= No changes, PRs are welcome, otherwise you can use the workaround:

> checkout the v1.9.14 tag and build from there, then it succeeds. =||= After thinking about it, I am fine with the build process as it is.

It may be worth a doc update mentioning that tags should be checked out to perform a build.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1264How to delay eureka-client registration without set leaseRenewalIntervalInSeconds?mengnanpanghu12/26/19, 01:40:35 PM"Hi, I have already set ```eureka.client.initialInstanceInfoReplicationIntervalSeconds``` ,but it's not work for me because the ***heartbeat*** task still run the ```register()```  

So I have to set the ```eureka.instance.leaseRenewalIntervalInSeconds``` which also have an impact on the heartbeat interval, and it finally works.  

Is there a way to delay eureka-client registration without set leaseRenewalIntervalInSeconds?""Have you considered utilizing the status for this? i.e. do not report yourself as ""UP"" until you're ready, would that do it? =||=  My bad, I should have found this solution earlier, It works
Thanks for your help =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1265Gracefully handle HTML errors from Eureka serverHelmsdown12/19/19, 09:46:54 PM"It possible to get HTML responses from the server (e.g. Apache fails to
talk to backend API). These would result in a failure to deserialize
and a random exception logged."NaNGracefully handle HTML errors from Eureka serverHelmsdown12/19/19, 09:46:54 PM"It possible to get HTML responses from the server (e.g. Apache fails to
talk to backend API). These would result in a failure to deserialize
and a random exception logged."NaNRussell Bolles12/19/19, 09:22:15 PM"Gracefully handle HTML errors from Eureka server

It possible to get HTML responses from the server (e.g. Apache fails to
talk to backend API). These would result in a failure to deserialize
and a random exception logged."1
1266"Where to update the ""expectedNumberOfClientsSendingRenews"" when we evict a instance?"wangmengbarrywangmeng01/27/20, 06:28:33 PM"When I look at eureka has been a source of confusion in ""selfPreservationMode"", I saw the sorce code with mater branch,
when we see register or cancel method, there will be update ""expectedNumberOfClientsSendingRenews"", just like the code:

```java
// The lease does not exist and hence it is a new registration
synchronized (lock) {
    if (this.expectedNumberOfClientsSendingRenews > 0) {
        // Since the client wants to register it, increase the number of clients sending renews
        this.expectedNumberOfClientsSendingRenews = this.expectedNumberOfClientsSendingRenews + 1;
        updateRenewsPerMinThreshold();
    }
}
```

i have read the code with ""evict"" method in ""AbstractInstanceRegistry"" class, but i didn't find where to update the ""expectedNumberOfClientsSendingRenews"" when we evict a instance according to a timed task. 

can you tell me where to update the ""expectedNumberOfClientsSendingRenews"" when we evict a instance ? "" I saw the same question, but it seems that the problem has not been solved。
see detail：https://github.com/spring-cloud/spring-cloud-netflix/issues/2407 =||= Trying to understand whether this was intentional (and why) but so far it looks like a bug to me. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1267How to recover from self preservation mode under auto scalingZHEN, XUlarryxuzhen01/15/20, 06:14:52 AM"I have a k8s cluster with several auto scaling deployments. When the number of instance decrease sharply, Eureka may enter the self preservation mode and can not recover automatically. Cuz the those instances actually disappeared and would not reappear, and the renew threshold keeps high for nonexistent instances... 
Is there any recommended way to deal with it other than decreasing the renewalPercentThreshold?"Hi, in this case you may try to change configuration parameter `eureka.enableSelfPreservation` to `false` temporarily, wait until Eureka picks up new value, then wait for it to evict the instances, then set this property back to `true`. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1269Spring Zuul + Eureka Different IP address LoadBalancer issueamin22401/20/20, 10:36:27 AM"Hi,

I have a eureka+zuul application running on my server in order to have service discovery and API gateway for my microservices. When i make a request to any microservice on the same machine localhost it is working fine, but when i try with another instance and from another machine i am getting this error:

```
{
    ""timestamp"": ""2020-01-17T12:56:06.677+0000"",
    ""status"": 500,
    ""error"": ""Internal Server Error"",
    ""message"": ""Connect to {server ip address}:{8003} [/{server ip address}] failed: Connection refused (Connection refused)""
}
```

My Eureka+Zuul Config:

```
server.port=8761
spring.application.name=servicediscovery
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.instance.preferIpAddress=true
eureka.server.waitTimeInMsWhenSyncEmpty=5
eureka.instance.nonSecurePort=80
spring.cloud.inetutils.preferredNetworks=192.
eureka.server.expectedClientRenewalIntervalSeconds=30
eureka.instance.leaseExpirationDurationInSeconds=40
eureka.instance.registry.expected-number-of-clients-sending-renews=5
eureka.server.evictionIntervalTimerInMs=60000
eureka.server.renewalPercentThreshold=0.85
eureka.server.renewalThresholdUpdateIntervalMs=20000
eureka.server.enableSelfPreservation=true
zuul.routes.microservice.url=http://{the ip address of my server machine}:8003/
zuul.routes.microservice.sensitiveHeaders=
```
My Microservice Config:

```
eureka.client.serviceUrl.defaultZone=http://{ip address of my server machine}:8761/eureka
eureka.client.fetchRegistry=true
eureka.client.registryFetchIntervalSeconds=30
eureka.instance.preferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.healthcheck.enabled=true
eureka.instance.healthCheckUrlPath=/actuator/health
eureka.instance.statusPageUrlPath=/actuator/info
eureka.instance.leaseRenewalIntervalInSeconds=30
eureka.instance.leaseExpirationDurationInSeconds=40
eureka.client.eurekaServiceUrlPollIntervalSeconds=60
eureka.client.instanceInfoReplicationIntervalSeconds=30
eureka.client.initialInstanceInfoReplicationIntervalSeconds=40
```

Please let me know what i am missing, should i add more URLs to `zuul.routes.microservice.url=http://{the ip address of my server machine}:8003/` so i mention all ip addresses of my machines and how is it possible?""Turns out i left an important note that proved i was not load balancing by using the above property `zuul.routes.microservice.url=http://{1 of the machine IP address}/8100/`

https://cloud.spring.io/spring-cloud-netflix/reference/html/#router-and-filter-zuul

Below properties worked for me

```
zuul.routes.microservice.path=/microservice/**
zuul.routes.microservice.serviceID=microservice1
microservice1.ribbon.listOfServers=http://{machine 1 ip address}:8100/,http://{machine 2 ip address}:8100/,http://localhost:8100/
microservice1.ribbon.eureka.enabled=true
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1270Spring netflix Zuul Connection Refusedamin22408/12/20, 06:25:53 AM"Hi,

I have eureka server discovery for my microservice connected to eureka as client, in addition i added an api gateway netflix zuul in order to load balance multiple instances run on different machines ( different IP addresses). My question is how can i enable Zuul to load balance between the instances. I am aware of these properties for Zuul that will do the job but i don't know how to add additional IP addresses to be connected to Zuul as i am getting connection refused for different machines.

Zuul server application.properties
```
zuul.routes.microservice.url=http://{1 of the machine IP address}/8100/
zuul.routes.microservice.path=/microservice/**
zuul.routes.microservice.serviceID=microservice1
zuul.routes.microservice.sensitiveHeaders=
eureka.instance.preferIpAddress=true
eureka.client.serviceUrl.defaultZone=http://{eureka IP address machine}:8761/eureka
```
Thank you""Turns out i left an important note that proved i was not load balancing by using the above property `zuul.routes.microservice.url=http://{1 of the machine IP address}/8100/`

https://cloud.spring.io/spring-cloud-netflix/reference/html/#router-and-filter-zuul

Below properties worked for me

    zuul.routes.microservice.path=/microservice/**
    zuul.routes.microservice.serviceID=microservice1
    microservice1.ribbon.listOfServers=http://{machine 1 ip address}:8100/,http://{machine 2 ip address}:8100/,http://localhost:8100/
    microservice1.ribbon.eureka.enabled=true =||= Can someone please forward me a link where they discuss about these properties in details or try to explain as i could not find detailed explanation. Thank you

```
zuul.host.time-to-live=
zuul.host.connect-timeout-millis=
zuul.host.socket-timeout-millis=
zuul.semaphore.max-semaphores=
ribbon.ServerListRefreshInterval=
ribbon.ConnectTimeout=
ribbon.ReadTimeout=
ribbon.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServ
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=
``` =||= Have you checked out https://github.com/Netflix/ribbon and https://github.com/Netflix/zuul yet? =||= Thank you for the links that you have sent me, I will look them up and much appreciated. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1271decrement expectedNumberOfClientsSendingRenews for expired leasesSnow Pettersensnowp01/27/20, 06:28:33 PM"Moves the logic that decrements the expected number of clients into
`internalCancel` - this should ensure that we're calling it both for
explicit cancels as well as well as when the instance lease expires.

Fixes #1266"I couldn't find any existing test coverage for this, happy to add some if ya'll have any pointers to where to start =||= decrement expectedNumberOfClientsSendingRenews for expired leasesSnow Pettersensnowp01/27/20, 06:28:33 PM"Moves the logic that decrements the expected number of clients into
`internalCancel` - this should ensure that we're calling it both for
explicit cancels as well as well as when the instance lease expires.

Fixes #1266"NaNSnow Pettersen01/20/20, 08:49:26 PM"decrement expectedNumberOfClientsSendingRenews for expired leases

Moves the logic that decrements the expected number of clients into
cancelInternal - this should ensure that we're calling it both for
explict cancels as well as well as when the instance lease expires.

Fixes #1266"1
1273Scaling Eureka HorizontallySean Humbargercowboy-cod3r02/24/20, 09:27:01 PM"Hi,

We recently had some issues with our 3 node Eureka Server cluster.  We had some major scaling events which brought the number of registered instances with Eureka to about 2400.  Upon reaching this number, file handles and CPU spiked.  Eureka was unable to recover from this and our only recourse was to scale back our services and kill off the 2 Eureka Servers that were in distress (the 3rd was not in distress).  We were running an older version of Eureka (1.6.2) via spring cloud.  We have since upgraded Eureka to version 1.9.13.  After our upgrade to 1.9.13 we noticed we could now register about 3500 instances before we would start seeing a significant number of socket timeouts and CPU would jitter quite a bit.  We then found the following issue and supporting pull request:

- https://github.com/Netflix/eureka/issues/982
- https://github.com/Netflix/eureka/pull/1031

In short, the guidance was to increase the peer node read timeout using the `eureka.server.peer-node-read-timeout-ms` property.  We did this and doing so got rid of timeouts completely and settled CPU.  Our target was to register 10,000 instances which we've now hit.

Our next test was to figure out what impact scaling the Eureka server horizontally from 3 instances to 9 instances would have.  When we scaled out with 10,000 registered instances, each eureka server seemed to be giving a different picture of the world and we'd never see the same number of instances registered between our eureka server.  Most of the time each server was off by the thousands.  I tried scaling back down to 6 instances but that did not work either.  It wasn't until I scaled back to three did things start to settle out.  So here are my questions:

1. Is there any real benefit to scaling Eureka horizontally other than providing redundancy?
2. Are there specific tuning parameters that may be helpful for replication when scaling out the number of Eureka servers?
3. Regarding the `eureka.server.max-elements-in-status-replication-pool` property, what exactly defines an element?  Does this relate to the number of registered instances?
4. Would you be able to share any numbers on the netflix side in terms of performance testing for Eureka?

To possibly help with any of my questions above, here is what our configurations look like on our Eureka servers (we use DNS resolution to find the eureka servers and I've omitted those properties from the config below).  I realize some of these properties are the default but we define them anyways in our `application.properties` file.

```
# Server Specific Settings
server.port=8761
server.tomcat.max-threads=500

# Client Settings
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=false
eureka.client.enabled=true
eureka.client.prefer-same-zone-eureka=false
eureka.client.on-demand-update-status-change=true

# Instance Settings
eureka.instance.app-group-name=SERVICE-DISCOVERY
eureka.instance.appname=eureka
eureka.instance.non-secure-port=${server.port}
eureka.instance.virtual-host-name=eureka

# Upon startup, the time to wait before eureka will serve its cache.  You want to wait long enough, where you
# think the cache will be populated enough to provide to backends.  You don't want to serve an empty cache.
eureka.server.wait-time-in-ms-when-sync-empty=180000

# Turn on self preservation mode and sent renewal threshold to 30%. If 30% are lost at once, stop ejecting instances.
eureka.server.enable-self-preservation=true
eureka.server.renewal-percent-threshold=0.30

# How often eureka will requery DNS for a new peer listing.
eureka.server.peer-eureka-status-refresh-time-interval-ms=60000

# Indicates whether the replication between cluster nodes should be batched for network efficiency. Default is false.
eureka.server.batch-replication=true

# The replicated data sent in the request will be always compressed. Default is false.
eureka.server.enable-replicated-request-compression=false

# Max number of replication events that can be allowed to back up in the status replication pool.  Default is 10000.
eureka.server.max-elements-in-status-replication-pool=10000

# Max number of replication events that can be allowed to back up in the replication pool.  This replication pool
# is responsible for all events except status updates.  Default is 10000.
eureka.server.max-elements-in-peer-replication-pool=10000

# The min number of threads to be used for replication. Default is 5.
eureka.server.min-threads-for-peer-replication=5

# The max number of threads to be used for replication. Default is 20.
eureka.server.max-threads-for-peer-replication=20

# Total number of HTTP connections allowed to peer eureka nodes for replication. Default is 1000.
eureka.server.peer-node-total-connections=1000

# Total number of HTTP connections allowed to a particular peer eureka node for replication. Default is 500.
eureka.server.peer-node-total-connections-per-host=500

# Replication timeout.  Default is 200
eureka.server.peer-node-read-timeout-ms=10000

# Others to consider
eureka.server.max-idle-thread-age-in-minutes-for-peer-replication=15
eureka.server.max-threads-for-status-replication=10
eureka.server.peer-node-connect-timeout-ms=1000
eureka.server.peer-node-connection-idle-timeout-seconds=30
```""Another thing we've noticed, is that anytime we attempt to scale beyond 3 nodes, at least one of the nodes always reports that there are unavailable replicas.  Over time, the node that reports the unavailable replicas changes.

Also, we randomly get this error:
`ERROR c.n.e.c.ReplicationTaskProcessor - Batch update failure with HTTP status code 500; discarding 250 replication tasks`

We'll see this several times in a row and all of a sudden a significant number of registered instances will be evicted from the Eureka server. =||= Sean, thanks for the detailed write up. I don't see anything out of ordinary in your config, it should be ok, you might want to fix `renewal-percent-threshold`, it's the other way around (70% threshold means under 30% of nodes can drop dead at once).

> Is there any real benefit to scaling Eureka horizontally other than providing redundancy?

I can offer a personal opinion only, I don't think there's a whole lot of benefit scaling horizontally beyond 2-3 nodes for redundancy alone, heck running 1 would not be crazy. Services should be designed in a way a temporary Name Service (Eureka) unavailability is not an issue, worst case if none of the servers are up, new deployments will be slowed down and the existing instances will have a potentially stale state (unless this is naturally very volatile, couple minutes of delay is not a problem); and this is only until you restart / redeploy the name service nodes after which it all goes back to normal. This is not a service you need many nines of availability for, there's a little reason to go above 99.9% for a name service but opinions vary.

An actual benefit of scaling horizontally may be amplifying the NIC throughput in case you have a lot of readers and are close to saturating the NICs on your Eureka nodes. The number of horizontal nodes here is proportional of the total throughput you want to handle, but I would not go crazy (maybe 5 tops), as this is a full mesh replication.

> Are there specific tuning parameters that may be helpful for replication when scaling out the number of Eureka servers?

Batching is probably the only important one. Try playing with these settings.

> Regarding the eureka.server.max-elements-in-status-replication-pool property, what exactly defines an element? Does this relate to the number of registered instances?

`eureka-core/src/main/java/com/netflix/eureka/cluster/PeerEurekaNode.java:245`, this is used for ASG status replication only.

> Would you be able to share any numbers on the netflix side in terms of performance testing for Eureka?

I'm unable to share the exact numbers but can say that we have significantly more instances than a couple thousands, but trying to keep the NIC saturation under 25% on the Eureka nodes. We do not run a massive number of Eureka nodes, just a couple (horizontally), most of the traffic is reads, the replication is negligible in comparison, so that's the main optimization opportunity.

Based on your write up, it seems like you may be having either networking issues or sub-optimal tomcat configuration, I suggest start with checking that, this is a bunch of blocking IO so one thing to check is whether the pools are getting full and hence requests are getting dropped due to that. =||= @troshko111 
Thank you for taking the time to respond above.  I'll have to dive into our tomcat settings.  We currently deploy eureka through spring-cloud and the only thing we tune WRT to tomcat is `server.tomcat.max-threads`.  

For now, we have decided to stick with three eureka servers.  Regarding the consistency issue, I did notice that consistency seemed to get better when I changed `eureka.client.fetch-registry` from `false` to `true`.  We ended up changing it to `true` based on another issue we were seeing where the renewal threshold would go down to 0 (although it wouldn't start out that way).  Here is the link that gave me the answer to that:
https://github.com/spring-cloud/spring-cloud-netflix/issues/380#issuecomment-180394690

Thank you again.  I think we can close this one out. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1274Microservices not registering on all Eureka InstancesPriyam Srivastavawambling04/13/21, 05:58:05 PM"Hi,

I am trying to achieve HA of Eureka Instances by doing clustering with Apache2 and mod_jk. Clustering is working fine but microservices are not registering on both instances.

I have added a post at Stack Overflow  over a month ago but have not received any suggestion so far, hence this post here. Instead of duplicating the entire problem statement here, please refer to my Stack Overflow post for full issue description.

If needed I can re-post everything here again. 

[Microservices not registering on all Eureka Instances](https://stackoverflow.com/questions/59489749/microservices-not-registering-on-all-eureka-instances)

My objective is that in each microservice I should only give the clustered URL of Eureka server and not a list of URLs. So that tomorrow when I add a new instance of Eureka behind the load balancer, I don't have to update the properties/bootstrap files of each microservices.

Regards,
Priyam""You only need to setup Eureka nodes properly, they must know of each other to replicate, I don't see how any set up of the peer nodes in your config, they are not replicating. =||= @troshko111
> You only need to setup Eureka nodes properly, they must know of each other to replicate, I don't see how any set up of the peer nodes in your config, they are not replicating.

As per the instructions here (for two peer awareness), I have already set the properties like below:

Eureka-1 props:

```
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server-2:8081/eureka-naming-server/eureka
```
Eureka-2 props

```
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server-1:8080/eureka-naming-server/eureka
```
Please let me know what according to you is missing. May be I didn't understand your comment properly.
Kindly do note that my objective is to use load-balancer URL in the microservices something like below:
Microservice props:

```
eureka:
  client:
    service-url:
      defaultZone: http://localhost:80/eureka-naming-server/eureka
``` =||= This looks good to me, the only suggestion I have is to use sticky-ish routing when going through the LB so that you don't heartbeat to different nodes each time potentially running into replication races. =||= > This looks good to me, the only suggestion I have is to use sticky-ish routing when going through the LB so that you don't heartbeat to different nodes each time potentially running into replication races.

Ok let me try that way and see how it goes. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1275Broadcast public ipv4 addresses on overrideArgha Cargha-c02/03/20, 09:50:54 PM"This is a quick and dirty PR to get Eureka to return public ipv4 addresses when overriden by a new config flag `broadcastPublicIpv4`.

However, it doesn't fundamentally alter the behavior of `resolveDefaultAddress` as part of this change. 

/cc @drobertduke "NaNBroadcast public ipv4 addresses on overrideArgha Cargha-c02/03/20, 09:50:54 PM"This is a quick and dirty PR to get Eureka to return public ipv4 addresses when overriden by a new config flag `broadcastPublicIpv4`.

However, it doesn't fundamentally alter the behavior of `resolveDefaultAddress` as part of this change. 

/cc @drobertduke "NaNArgha C02/03/20, 09:35:51 PMRemove dead code and update var name1
1276Upgrade gradleSpencer Gibbspencergibb04/30/20, 10:17:32 PM"Running recent intellij with java 11 runtime
```
Cannot determine classpath for resource 'java/sql/SQLException.class' from location 'jrt:/java.sql/java/sql/SQLException.class'.

The project uses Gradle 2.10 which is incompatible with IDEA running on Java 10 or newer.
See details at https://github.com/gradle/gradle/issues/8431
Possible solution:
 - Upgrade Gradle wrapper to 4.8.1 version and re-import the project
```"ping :-) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1277The renew method of class Lease in eureka-core why add durationzxm81204/13/21, 05:58:14 PM"when the Lease renew, lastUpdateTimestamp = System.currentTimeMillis() + duration;
but method of isExpired add the duration another:
public boolean isExpired(long additionalLeaseMs) {
        return (evictionTimestamp > 0 || System.currentTimeMillis() > (lastUpdateTimestamp + duration + additionalLeaseMs));
}""This may be an officially known bug，you can see the code comments in `Lease.isExpired()`，just like this：
```java
/**
 * Checks if the lease of a given {@link com.netflix.appinfo.InstanceInfo} has expired or not.
 *
 * Note that due to renew() doing the 'wrong"" thing and setting lastUpdateTimestamp to +duration more than
 * what it should be, the expiry will actually be 2 * duration. This is a minor bug and should only affect
 * instances that ungracefully shutdown. Due to possible wide ranging impact to existing usage, this will
 * not be fixed.
 *
 * @param additionalLeaseMs any additional lease time to add to the lease evaluation in ms.
 */
public boolean isExpired(long additionalLeaseMs) {
    return (evictionTimestamp > 0 || System.currentTimeMillis() > (lastUpdateTimestamp + duration + additionalLeaseMs));
}
```

In the end, they said ""Due to possible wide ranging impact to existing usage, this will not be fixed."" =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1280Can a newer version of Eureka client(e.g. 1.9.2) be used with an older version of the server(e.g. 1.6.2)?yuzaikaoyahuigui201804/07/20, 05:29:10 PM"We are planning to upgrade springboot1.5.6 to 2.x, which contains
springcloud-eureka will also be upgraded from 1.3.1 (eureka 1.6.2) to 1.4.x (eureka 1.9.2),
But now there are many different projects (non-springboot projects) registered on the eureka server, so we don't want to upgrade the eureka server and only upgrade the client. Is there any problem in this?"Should be no problem, the API is compatible. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1281"Cannot execute request on any known server"" when i set up a Eureka cluster by Kubernate cluster"nityanandaNityananda77706/10/20, 06:59:36 PM"**In Eureka Server**
server:
  port: 8761 # Indicate the default PORT where this service will be started

eureka:
  client:
    registerWithEureka: false   #telling the server not to register himself in the service registry
    fetchRegistry: false
  server:
    waitTimeInMsWhenSyncEmpty: 0    #wait time for subsequent sync
  instance:
    hostname: localhost

**In Eureka Client**
spring:
  application:
    name: api-gateway

server:
  port: 8088

eureka:         #tells about the Eureka server details and its refresh time
  instance:
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 2
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    region: default
    registryFetchIntervalSeconds: 5
    healthcheck:
      enabled: true
    lease:
      duration: 5
endpoints:
  restart:
    enabled: true


**Spring Boot Dependency version-2.1.2.RELEASE** 
**Cloud version-Greenwich.SR1**
 

**Getting Error**
at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.6.jar!/:4.5.6]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.6.jar!/:4.5.6]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar!/:1.19.1]
	... 27 common frames omitted
2020-03-21 16:16:45.428  WARN 1 --- [tbeatExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: java.net.ConnectException: Connection refused (Connection refused)
2020-03-21 16:16:45.428 ERROR 1 --- [tbeatExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_API-GATEWAY/gateway-service-758bf48b69-tp4qz:api-gateway:8088 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:846) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1405) [eureka-client-1.9.8.jar!/:1.9.8]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_201]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]
2020-03-21 16:16:46.430 ERROR 1 --- [tbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://localhost:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused (Connection refused)
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.9.8.jar!/:1.9.8]
	at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:529) ~[jersey-client-1.19.1.jar!/:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:102) ~[eureka-client-1.9.8.jar!/:1.9.8]



""Based on the error seems like nothing was running on that port at that time, once you set up the server try to curl it or telnet there to ensure there's connectivity. =||= You're also using localhost for both the client and the server but depending on how you actually run this it may not be the same ""localhost"". =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1282Add stats for DiscoveryClientBennettyobennett04/07/20, 05:27:28 PM"We introduce a nested class for `DiscoveryClient` to make it easier for users to read helpful attributes that can assist in log analysis and debugging. Most of these attributes are captured by existing metrics:

* `initTimestampMs`: timestamp when the client was initialized
* `localRegistrySize`: number of instances for all applications
* `lastSuccessfulRegistryFetchTimestampMs`: timestamp for last successful fetch
* `lastSuccessfulHeartbeatTimestampMs`: timestamp for last successful heartbeat

We add a new attribute called `initLocalRegistrySize`, which is the number of instances for all applications read when the client was initialized. We include a helper method that uses this attribute so that users can determine whether the client's initial fetch of registry information succeeded or failed. Note that other accessors are suffixed with `Ms` (for milliseconds) to denote the time unit.

Additionally, we update the existing `registrySize` with the value from `initLocalRegistrySize` during initialization instead of waiting until the first local registry refresh."NaNAdd stats for DiscoveryClientBennettyobennett04/07/20, 05:27:28 PM"We introduce a nested class for `DiscoveryClient` to make it easier for users to read helpful attributes that can assist in log analysis and debugging. Most of these attributes are captured by existing metrics:

* `initTimestampMs`: timestamp when the client was initialized
* `localRegistrySize`: number of instances for all applications
* `lastSuccessfulRegistryFetchTimestampMs`: timestamp for last successful fetch
* `lastSuccessfulHeartbeatTimestampMs`: timestamp for last successful heartbeat

We add a new attribute called `initLocalRegistrySize`, which is the number of instances for all applications read when the client was initialized. We include a helper method that uses this attribute so that users can determine whether the client's initial fetch of registry information succeeded or failed. Note that other accessors are suffixed with `Ms` (for milliseconds) to denote the time unit.

Additionally, we update the existing `registrySize` with the value from `initLocalRegistrySize` during initialization instead of waiting until the first local registry refresh."NaNJohn Bennett03/28/20, 03:55:19 AM"Add stats for DiscoveryClient

We introduce a nested class for `DiscoveryClient` to make it easier for
users to read helpful attributes that can assist in log analysis and
debugging. Most of these attributes are captured by existing metrics:

* `initTimestampMs`: timestamp when the client was initialized
* `localRegistrySize`: number of instances for all applications
* `lastSuccessfulRegistryFetchTimestampMs`: timestamp for last successful fetch
* `lastSuccessfulHeartbeatTimestampMs`: timestamp for last successful heartbeat

We add a new attribute called `initLocalRegistrySize`, which is the
number of instances for all applications read when the client was
initialized. We include a helper method that uses this attribute so
that users can determine whether the client's initial fetch of registry
information succeeded or failed. Note that other accessors are suffixed
with `Ms` (for milliseconds) to denote the time unit.

Additionally, we update the existing `registrySize` with the value from
`initLocalRegistrySize` during initialization instead of waiting until
the first local registry refresh."1
1283Update unit testsKazemelochin04/06/20, 06:22:19 PM"update ``InstanceInfoReplicatorTest`` and ``RateLimiterTest``
1. remove staled mock code in ``InstanceInfoReplicatorTest.setup()``
2. change the loop condition in ``RateLimiterTest.testEvenLoad()``. Otherwise, the loop body will not be executed.
"Thanks! =||= Update unit testsKazemelochin04/06/20, 06:22:19 PM"update ``InstanceInfoReplicatorTest`` and ``RateLimiterTest``
1. remove staled mock code in ``InstanceInfoReplicatorTest.setup()``
2. change the loop condition in ``RateLimiterTest.testEvenLoad()``. Otherwise, the loop body will not be executed.
"NaNmelochin04/04/20, 09:07:48 AMUpdate unit tests1
1284upgrade jackson to - 2.9.10RakefetEP04/07/20, 10:45:15 PM(for some security fixes)"I see that jackson-databind has 2.9.10.3 but jackson-core does not have it and there is only one variable for Jackson libraries.

I will change to 2.9.10 for now. =||= Thanks, @troshko111 !

Have a lovely day :) =||= Thanks for the PR! I'll release this now. =||= Great! Thanks a lot! =||= Hi @troshko111 :) Regarding the upgrade to latest Jackson 2.10.3, are there any special steps I should do before creating the PR?

Thanks again! =||= Hey, I went over the changelog and don't really see anything there which could break compatibility. I think it'd be a good idea to compare the `JSON` representation of various resources (instance info, app list, etc.) pre- and post-change to ensure there are no serialization differences. =||= "upgrade jackson to - 2.9.10RakefetEP04/07/20, 10:45:15 PM(for some security fixes)NaNRakefetEP04/07/20, 09:39:55 PM"upgrade global Jackson version to  2.9.10

(Security fixes)"1
1285How to prevent unwanted clients register to the eureka server?KomaKomaBeyond06/05/20, 11:04:39 PMAs the title description, is there any way that i can do in the eureka server side to prevent client registration?"This really depends on your situation (how exposed the server is, what guarantees you're looking for), I suggest you explore these options (order desc by reliability/guarantees):

1) `mTLS`, reject not whitelisted clients
2) `iptables`, reject not whitelisted subnets
2) If deployed to a public cloud, look into the cloud offerings for network security (e.g. security groups on AWS) and create a VPC for trusted clients and only allow traffic from there

Best to do 1 + 2, require mTLS and limit the traffic to an internal VPC. =||= @troshko111 

Thanks for ur reply and u given a very good ideas. But because some of reasons, we expected to do this work just only in the eureka server application inside.

So is there any extension way that i can use to?

I saw there is a class named PeerAwareInstanceRegistryImpl and it has a register method responsibility to the client registration.

So if i can extension this class and override the register method then i can prevent client registration in this method though the instance metaDataMap attribute. =||= Yeah as I said it depends on what kind of guarantees you're looking for, if you don't care about doing it securely then you absolutely can override some registry methods and just reject registrations of instances you don't like.

Just note that this is trivial to game, as the traffic is plaintext and the registration info is self-reported, anyone can report any nonsense until you accept it. If you're in some sort of trusted environment that may be ok, but probably worth mentioning. =||= Yeah, thanks for your reply, and finally we are using the spring-security to do this work.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1287resolve endpoint zone from metadata虫二MI-cool05/27/20, 04:43:08 PMendpoint zone can be get from metadata"The change LGTM, but can you elaborate on the bug and add some tests showing how it fixes it? =||= Sorry.
My project was build with spring-cloud-starter-netflix-eureka-client.
I use the following configuration to make the client dynamically aware of the server nodes. 

eureka.client.transport.bootstrapResolverStrategy=composite
eureka.client.transport.readClusterVip=eureka-read-server
eureka.client.transport.writeClusterVip=eureka-write-server

During the test, it was found that the client lost the server zone information. Finally found that the more reasonable way to modify is to add a few lines of code submitted. =||= I will try to add some tests. =||= Test was done. =||= Sorry for the delay, this fell off my attention, I promise to have a short turnaround now.
I looked around the code and seems like this is Aws-specific path (see the return type) so it's expected to not to have the zone info on `MyDatacenterInfo`, there's no contract saying there should be any zone there in the meta. What issues it this causing?
 =||= My eureka server was build with spring-cloud-starter-netflix-eureka-server. On server side, the framework build instances use [dataCenterInfo](https://github.com/spring-cloud/spring-cloud-netflix/blob/188b9c112c2bcad9a4474e3e4a49191bb1087195/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java#L159) type of `MyDataCenterInfo` as default.
My eureka client was build with spring-cloud-starter-netflix-eureka-client. I use `eureka.client.transport.bootstrapResolverStrategy=composite` to make the client dynamically aware of the server nodes. Here comes the problem, since [newBootstrapResolver](https://github.com/Netflix/eureka/blob/2596a054e348def518799b98a32db61c4f3eab48/eureka-client/src/main/java/com/netflix/discovery/shared/transport/EurekaHttpClients.java#L106) lost `zone` of server instances, eureka clients can't be zone affinity to server instances. =||= Yeah I think this is reasonable, the current AWS/non-AWS separation is weak so I don't see a better place to do this tbh. Thanks and sorry for the delay. =||= No worries. =||= "resolve endpoint zone from metadata虫二MI-cool05/27/20, 04:43:08 PMendpoint zone can be get from metadataNaNwanglinlin02305/11/20, 07:59:09 AMadd testInstanceInfoToEndpoint1
1288Checks for existence of ConfigurationManager.Spencer Gibbspencergibb04/30/20, 10:19:06 PMThis is useful if a project has excluded Archaius 1 such as spring-cloud-netflix. This is a simple workaround.My current workaround https://github.com/spring-cloud/spring-cloud-netflix/pull/3746 =||= Checks for existence of ConfigurationManager.Spencer Gibbspencergibb04/30/20, 10:19:06 PMThis is useful if a project has excluded Archaius 1 such as spring-cloud-netflix. This is a simple workaround.NaNSpencer Gibb04/30/20, 05:03:08 PM"Checks for existence of ConfigurationManager.

This is useful if a project has excluded Archaius 1 such as spring-cloud-netflix. This is a simple workaround."1
1289update to latest gradle wrapperSnow Pettersensnowp04/30/20, 10:17:32 PM"Updates the gradle wrapper to 6.3, the neubla plugin to latest version
and replaces the jetty module with org.gretty as the jetty module has
been removed.

Move to org.gretty is motivated by https://stackoverflow.com/questions/50119925/error-while-replacing-jetty-plugin-to-gretty-plugin-gradle

Fixes #1276"LGTM =||= update to latest gradle wrapperSnow Pettersensnowp04/30/20, 10:17:32 PM"Updates the gradle wrapper to 6.3, the neubla plugin to latest version
and replaces the jetty module with org.gretty as the jetty module has
been removed.

Move to org.gretty is motivated by https://stackoverflow.com/questions/50119925/error-while-replacing-jetty-plugin-to-gretty-plugin-gradle

Fixes #1276"NaNSnow Pettersen04/30/20, 05:41:24 PMadd missing dependencies1
1290Eureka Service Registry Replicasubbareddyrepo-gsr05/21/20, 10:05:00 PM"am new to this service Registry i did one sample spring boot application with peer to peer mode.

Here am not understanding.

Do i need to Start the All peers at the same time why because one peer registry is Registering to another because of Replica which am doing.

but i started One time with one profile then it is giving following error message.

```
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:941) [eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:919) [eureka-client-1.9.13.jar:1.9.13]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_211]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_211]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_211]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_211]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:347) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:177) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:242) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:235) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:403) [spring-cloud-context-2.2.1.RELEASE.jar:2.2.1.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:142) [spring-cloud-context-2.2.1.RELEASE.jar:2.2.1.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
```

am new to this service Registry i did one sample spring boot application with peer to peer mode.

Here am not understanding.

Do i need to Start the All peers at the same time why because one peer registry is Registering to another because of Replica which am doing.

but i started One time with one profile then it is giving following error message.


com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
        at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$2.execute(EurekaHttpClientDecorator.java:74) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.cancel(EurekaHttpClientDecorator.java:71) ~[eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.DiscoveryClient.unregister(DiscoveryClient.java:941) [eureka-client-1.9.13.jar:1.9.13]
        at com.netflix.discovery.DiscoveryClient.shutdown(DiscoveryClient.java:919) [eureka-client-1.9.13.jar:1.9.13]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_211]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_211]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_211]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_211]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:389) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeDestroyMethods(InitDestroyAnnotationBeanPostProcessor.java:347) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeDestruction(InitDestroyAnnotationBeanPostProcessor.java:177) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:242) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.run(DisposableBeanAdapter.java:235) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.destroy(GenericScope.java:403) [spring-cloud-context-2.2.1.RELEASE.jar:2.2.1.RELEASE]
        at org.springframework.cloud.context.scope.GenericScope.destroy(GenericScope.java:142) [spring-cloud-context-2.2.1.RELEASE.jar:2.2.1.RELEASE]
        at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:258) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:571) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:543) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1072) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:504) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1065) [spring-beans-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1060) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1029) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext$1.run(AbstractApplicationContext.java:948) [spring-context-5.2.3.RELEASE.jar:5.2.3.RELEASE]

```



"You don't have to coordinate the start, they will discover the peers eventually, you may get transient errors initially when there's 0 peers for a moment. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1291Eureka Discovery + Zuul Gateway as one appJakob MaležičBlarc05/08/20, 07:01:13 PM"I am wondering if it is possible to run both eureka discovery and zuul gateway on the same microservice? Thanks.

(This is my first time making an issue on open source project, so I hope this is not the wrong place and I am sorry if it is.)""Hey, they do different things, Zuul is an edge proxy and Eureka is a service registry, you totally can use both together, if by ""together"" you mean a single logical ""platform"" you deploy your microservices to. Are you trying to figure out if you can run both on the same host? =||= Yes, I was wondering if you can run them both on the same host and I managed to do it by now. It's probably not the proper way to do it, but I needed to do this, because of the 5 apps restriction on Heroku. Thanks anyway :) =||= Sure, no worries. You may want to look into containers (may be easy to tap into `systemd` features for namespacing/cgroups) to get some level of isolation. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1292fix enableSelfPreservation bug张天译ztyandjw05/10/20, 06:20:34 PM"~~### 1、**the enableSelfPreservation  bug**~~

~~the property eureka.server.enableSelfPreservation default is true~~

~~AbstractInstanceRegistry#evict(long additionalLeaseMs)~~
```java
if (!isLeaseExpirationEnabled()) {
   logger.debug(""DS: lease expiration is currently disabled."");
   return;
}
```
~~when the property we set  false, then the function isLeaseExpirationEnabled() return boolean is true~~

~~then !isLeaseExpirationEnabled() is false, the code will not go into this if code~~


~~**so  i  changed the function isLeaseExpirationEnabled()   set the true -> false**~~

~~PeerAwareInstanceRegistryImpl#isLeaseExpirationEnabled()~~
```java
@Override
    public boolean isLeaseExpirationEnabled() {
        if (!isSelfPreservationModeEnabled()) {
            // The self preservation mode is disabled, hence allowing the instances to expire.
           //change here true to false
           - return true;
           + return false;
        }
        return numberOfRenewsPerMinThreshold > 0 && getNumOfRenewsInLastMin() > numberOfRenewsPerMinThreshold;
    }
````


---------------------------



~~### **2、 function call isLeaseExpirationEnabled（）,   below  logic is wrong**~~

~~AbstractInstanceRegistry#getInstanceByAppAndId(String appName, String id, boolean includeRemoteRegions)~~
```java
if (lease != null
                && (!isLeaseExpirationEnabled() || !lease.isExpired())) {
            return decorateInstanceInfo(lease);
        }
```
~~**when isLeaseExpirationEnabled return true means  we want to eureka evict the leases,  so i think here  should be ( isLeaseExpirationEnabled()  || lease not expired   ) && lease != null**~~

~~so i changed it~~

```java
if (lease != null
                && (isLeaseExpirationEnabled() || !lease.isExpired())) {
            return decorateInstanceInfo(lease);
        }
```


---------------------------


~~### 3、 the last one function call this isLeaseExpirationEnabled function~~

~~ AbstractInstanceRegistry#getInstancesById(String id, boolean includeRemoteRegions)~~

~~### **here isLeaseExpirationEnabled is ok,  no need to  edit **~~
```java
if (leaseMap != null) {
                Lease<InstanceInfo> lease = leaseMap.get(id);

                if (lease == null || (isLeaseExpirationEnabled() && lease.isExpired())) {
                    continue;
                }

                if (list == Collections.EMPTY_LIST) {
                    list = new ArrayList<InstanceInfo>();
                }
                list.add(decorateInstanceInfo(lease));
            }
```""sorry i make a mistake, ignore it =||= No worries, do you want me to close it? =||= > No worries, do you want me to close it?

yes, pls close it =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1293Remove uses of 'provided' in the eureka clientDavid Robert Dukedrobertduke05/11/20, 10:09:55 PM"After updating gradle, we can stop using the deprecated 'provided' configuration.
This fixes an issue where the jackson-dataformat-xml and woodstox-core dependencies are affecting projects consuming eureka-client.""What about the `providedCompile` (2 hits), should those go to? =||= Nitpick, but maybe the wording of this comment should be updated as well: https://github.com/Netflix/eureka/blob/18e9f4a43f7156a5635edecc4cedba6f81346fa5/eureka-core/build.gradle#L13 =||= > What about the `providedCompile` (2 hits), should those go to?

providedCompile seems to be still used to exclude dependencies from War files https://github.com/gradle/gradle/issues/1171 =||= "Remove uses of 'provided' in the eureka clientDavid Robert Dukedrobertduke05/11/20, 10:09:55 PM"After updating gradle, we can stop using the deprecated 'provided' configuration.
This fixes an issue where the jackson-dataformat-xml and woodstox-core dependencies are affecting projects consuming eureka-client."NaNDavid Vroom Duke05/08/20, 11:09:47 PMUpdate comment1
1294Client service registering with Eureka in openshiftvijitha09vijitha0908/18/20, 07:36:00 PM"I have a eureka registry server deployed and client in openshift
but the client takes the pod name and is not being accessible"This is a network connectivity problem not a Eureka problem by the looks of it. If you add more info I can help you pinpoint it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1295Remove sudo configurationdengliming05/11/20, 10:10:19 PMA PR for [https://github.com/Netflix/eureka/issues/1195](https://github.com/Netflix/eureka/issues/1195)Thanks, merged. =||= Remove sudo configurationdengliming05/11/20, 10:10:19 PMA PR for [https://github.com/Netflix/eureka/issues/1195](https://github.com/Netflix/eureka/issues/1195)NaNdengliming05/11/20, 01:44:21 PMRemove sudo configuration1
1296Update Compactmap library to 2.0Jaromir Hamalajerrinot05/26/20, 08:35:20 PM"Compactmap 2.0 has been relicensed under the Apache 2.0 license.
See: https://github.com/vlsi/compactmap/issues/6

Previous versions use LGPL.
This caught multiple projects by surprise. See for example
https://github.com/spring-cloud/spring-cloud-netflix/issues/3636
or https://github.com/hazelcast/hazelcast-eureka/issues/52"Thanks @jerrinot! =||= Update Compactmap library to 2.0Jaromir Hamalajerrinot05/26/20, 08:35:20 PM"Compactmap 2.0 has been relicensed under the Apache 2.0 license.
See: https://github.com/vlsi/compactmap/issues/6

Previous versions use LGPL.
This caught multiple projects by surprise. See for example
https://github.com/spring-cloud/spring-cloud-netflix/issues/3636
or https://github.com/hazelcast/hazelcast-eureka/issues/52"NaNjerrinot05/26/20, 08:55:06 AM"Update Compactmap library to 2.0

Compactmap 2.0 has been relicensed under the Apache 2.0 license.
See: https://github.com/vlsi/compactmap/issues/6

Previous versions use LGPL.
This caught multiple projects by surprise see for example
https://github.com/spring-cloud/spring-cloud-netflix/issues/3636
or https://github.com/hazelcast/hazelcast-eureka/issues/52"1
1297Add ability to gate InstanceStatus updatesBennettyobennett06/16/20, 10:41:45 PM"We add a way for users to define gates when updating their InstanceStatus that is irrespective of the healthcheck handler response. For example, if the healthcheck handler returns an InstanceStatus of `UP` but a gate disallows that status then the healthcheck status will be overridden and the new status will be set to `DOWN`.

If there are no gates defined, the default behavior of the discovery client is unchanged."I think instead of doing this in the client, you may just want to implement a custom InstanceStatusMapper. Ref: https://github.com/Netflix/eureka/blob/master/eureka-client/src/test/java/com/netflix/appinfo/ApplicationInfoManagerTest.java#L82 =||= @qiangdavidliu Thanks. I hadn't considered using an `InstanceStatusMapper` to address these use cases. Functionally this seems to be comparable to the proposed gates. I'm going to review the differences to weigh the benefits of each approach. =||= Closing in favor of #1307  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1298Modify iteration Map functionzhangzhiqiangqq103691643906/02/20, 12:15:01 PMA small change。changed iteration map function。Can bring some performance improvements。NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1299Modify iteration Map Modezhangzhiqiangqq103691643906/02/20, 04:30:56 PMModify iteration Map Mode。I think the performance through entrySet Iterate Map is better."@troshko111 This is my first time participating in an open source project. It is a pity that I did not use the email bound to github when I submitted, but used the email of the company by mistake. I don't know if there is a remedy. I want to see my name in the Contributions.
 =||= @troshko111 https://help.github.com/en/github/using-git/changing-author-info#platform-windows
 =||= I have reverted it, please re-submit using the correct git user info. =||= "Modify iteration Map Modezhangzhiqiangqq103691643906/02/20, 04:30:56 PMModify iteration Map Mode。I think the performance through entrySet Iterate Map is better.NaNzhangzhiqiang206/02/20, 11:38:47 AMModify iteration Map Mode1
1300"Revert ""Improve map iteration in JerseyApplicationClient"""troshko11106/02/20, 05:59:01 PMReverts Netflix/eureka#1299NaN"Revert ""Improve map iteration in JerseyApplicationClient"""troshko11106/02/20, 05:59:01 PMReverts Netflix/eureka#1299NaNtroshko11106/02/20, 05:58:08 PM"Revert ""Improve map iteration in JerseyApplicationClient (#1299)""

This reverts commit dad077108c54041a41add075c0e373783a173e2a."1
1301Modify iteration Map functionzhangzhiqiangqq103691643906/02/20, 08:01:54 PM"Modify iteration Map Mode.I think the performance through entrySet Iterate Map is better.
Thank you!"I re-submit.please re-merge.thanks. =||= Modify iteration Map functionzhangzhiqiangqq103691643906/02/20, 08:01:54 PM"Modify iteration Map Mode.I think the performance through entrySet Iterate Map is better.
Thank you!"NaNqq103691643906/02/20, 06:11:43 PMModify iteration Map function1
1302DiscoveryManager failed to lookup latest application instances.alexchoi-git08/18/20, 07:36:15 PM"Environment:
Module eureka-client
Version: 1.0.3.RELEASE (inherent from spring-cloud-starter-parent, version Angel.SR3)

Issue:
DiscoveryManager not returns the latest application instances even if new comers are registered to the service. No error found, looks like the cache never refresh. 

Invoked method:
DisoveryManager.getInstance().getLookupService.getApplication(""applicationName"").getInstances();"That's a very old client, have you tried updating? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1303Resolve spinlock issue in AcceptorExecutor threadKevin Laroselarosek06/10/20, 06:55:30 PM"I ran into an issue where an AcceptorExecutor thread would not shutdown and was using 100% cpu. This thread shutdown will happen when a PeerEurekaNode is removed from the list of nodes.

Here is a snippet of the thread dump: 
```
""TaskAcceptor-target_ec2-xx-xx-xx-xxx.compute-1.amazonaws.com"" - Thread t@47
   java.lang.Thread.State: RUNNABLE
	at com.netflix.eureka.util.batcher.AcceptorExecutor$AcceptorRunner.drainInputQueues(AcceptorExecutor.java:234)
	at com.netflix.eureka.util.batcher.AcceptorExecutor$AcceptorRunner.run(AcceptorExecutor.java:189)
	at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)
   Locked ownable synchronizers:
	- None
```

You can see in the heap dump screenshot below that shutdown was properly called and received by the thread. Also, you will notice that all 3 queues (reprocessQueue, acceptorQueue and  pendingTasks) are empty, causing the drainInputQueues while loop to get stuck.

![heapdump](https://user-images.githubusercontent.com/2784286/84155158-04943880-aa36-11ea-8287-c928caee3664.jpg)

If you were to be unlucky, when shutdown was called, you could fall into a condition where nothing was added to the pendingTasks queue and both reprocess and acceptor queue would stay empty since the executor was shutdown.

I did a quick and dirty unit test locally to reproduce the issue, but since this is a timing issue, the test would sometime pass without the fix in position. Of course, when the fix was there I was not able to make the test fail. Because of that, I decided not to add the unit test since it was not very robust. Let me know if you have an idea on how to elegantly test this! Thanks!"Yeah the way it is today is a `while(true)` loop which does not have an exit condition when the shutdown is set but pending is empty, so the outer loop never gets a chance to check and exit. Thanks for the PR! =||= Resolve spinlock issue in AcceptorExecutor threadKevin Laroselarosek06/10/20, 06:55:30 PM"I ran into an issue where an AcceptorExecutor thread would not shutdown and was using 100% cpu. This thread shutdown will happen when a PeerEurekaNode is removed from the list of nodes.

Here is a snippet of the thread dump: 
```
""TaskAcceptor-target_ec2-xx-xx-xx-xxx.compute-1.amazonaws.com"" - Thread t@47
   java.lang.Thread.State: RUNNABLE
	at com.netflix.eureka.util.batcher.AcceptorExecutor$AcceptorRunner.drainInputQueues(AcceptorExecutor.java:234)
	at com.netflix.eureka.util.batcher.AcceptorExecutor$AcceptorRunner.run(AcceptorExecutor.java:189)
	at java.base@11.0.7/java.lang.Thread.run(Thread.java:834)
   Locked ownable synchronizers:
	- None
```

You can see in the heap dump screenshot below that shutdown was properly called and received by the thread. Also, you will notice that all 3 queues (reprocessQueue, acceptorQueue and  pendingTasks) are empty, causing the drainInputQueues while loop to get stuck.

![heapdump](https://user-images.githubusercontent.com/2784286/84155158-04943880-aa36-11ea-8287-c928caee3664.jpg)

If you were to be unlucky, when shutdown was called, you could fall into a condition where nothing was added to the pendingTasks queue and both reprocess and acceptor queue would stay empty since the executor was shutdown.

I did a quick and dirty unit test locally to reproduce the issue, but since this is a timing issue, the test would sometime pass without the fix in position. Of course, when the fix was there I was not able to make the test fail. Because of that, I decided not to add the unit test since it was not very robust. Let me know if you have an idea on how to elegantly test this! Thanks!"NaNKevin Larose06/09/20, 01:16:07 PMResolve spinlock issue in AcceptorExecutor thread1
1304Travis CI: Trusty is EOLChristian Clausscclauss07/07/20, 07:05:01 PMNaNSeems to be failing, also unsure why use JDK9? =||= Used JDK9 because JDK8 is no longer available. =||= You should be able to switch to `openjdk8`, it is just the Oracle distribution that is no longer available. =||= Thanks! =||= Travis CI: Trusty is EOLChristian Clausscclauss07/07/20, 07:05:01 PMNaNNaNChristian Clauss06/30/20, 05:42:21 PMdist: xenial1
1305Why eureka client register so quickly ?lvyunpenglvyunpeng08/18/20, 07:36:51 PMwhen eureka client starting, I do not want it register right now, because some other work should to do, such as run test,  and i do not want it accept traffic once it start. So the InitialInstanceInfoReplicationIntervalSeconds is 40s default ,but it not works. For  statusChangeListener found that client transfer status starting to UP, and it register soon. what should i do"why not ignore first status changes ? it make config  InitialInstanceInfoReplicationIntervalSeconds  meaningless. And i think once it start, it is not best state to handler external request, it need time to connect to downstream service =||= Setup your healthcheck handler in the way it won't report healthy until you're all ready, see https://github.com/Netflix/eureka/blob/cac06f4b431ef3c099719dd3ee9af7d8bb2d3bae/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1426-L1427 =||= > Setup your healthcheck handler in the way it won't report healthy until you're all ready, see
> 
> https://github.com/Netflix/eureka/blob/cac06f4b431ef3c099719dd3ee9af7d8bb2d3bae/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1426-L1427



> Setup your healthcheck handler in the way it won't report healthy until you're all ready, see
> 
> https://github.com/Netflix/eureka/blob/cac06f4b431ef3c099719dd3ee9af7d8bb2d3bae/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java#L1426-L1427

thanks  ! 
   you means that set eureka.client.healthcheck.enabled: true ?
   I  do it. But It also confuse me , when eureka client starting , the Starting status transfer to UP status in several seconds. then it register to eureka service.  A large number of requests flooded into the eureka client， because it need to connect to downservice, create mysql connnection and so on.... so it fuse soon. So i need enough time to trigger some test to  connect to downservice before  it register =||= > you means that set eureka.client.healthcheck.enabled: true ?

Not that, the code I pointed to allows to supply custom logic to determine whether your instance should be hearbeating as `UP`, what I suggested was you *do not* report `UP` until you're ready to take traffic. Basically this functionality is already supported and used. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1306InstanceInfoReplicator.onDemandUpdate() violate java semanticsYufengYufeng091804/13/21, 05:58:23 PM"Hi 

I try to understand the eureka client service registration process and go through InstaneInfoReplicator class.  [InstanceInfoReplicator.](https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/InstanceInfoReplicator.java)onDemandUpdate method contains code ""**InstanceInfoReplicator.this.run()**""

```java
public void run() {
       logger.debug(""Executing on-demand update of local InstanceInfo"");
       Future latestPeriodic = scheduledPeriodicRef.get();
       if (latestPeriodic != null && !latestPeriodic.isDone()) {
                            logger.debug(""Canceling the latest scheduled update, it will be rescheduled at the end of on demand update"");
                            latestPeriodic.cancel(false);
       }
    
       InstanceInfoReplicator.this.run();
}
```


I think this violate java semantics. run method should run in this way. Runnable should be either run in a new thread which is created on fly or submit Runnable as task into created ThreadPool. Basically, run method should be call asynchronous way.

Please review this session and advice accordingly, thanks."I think it is already running in a thread. `scheduler.submit(new Runnable() {}).` =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1307Add shouldEnforceFetchRegistryAtInit configBennettyobennett06/18/20, 05:27:30 PMWe add a `shouldEnforceFetchRegistryAtInit` configuration to support users that want the Eureka client to fail fast during initialization. If `shouldEnforceFetchRegistryAtInit` is set to `true` then the client will throw an `IllegalStateException` during instance construction if its initial attempt to fetch of information from the remote Eureka servers is unsuccessful. This setting does not have an effect if `shouldFetchRegistry` is set to `false`.NaNAdd shouldEnforceFetchRegistryAtInit configBennettyobennett06/18/20, 05:27:30 PMWe add a `shouldEnforceFetchRegistryAtInit` configuration to support users that want the Eureka client to fail fast during initialization. If `shouldEnforceFetchRegistryAtInit` is set to `true` then the client will throw an `IllegalStateException` during instance construction if its initial attempt to fetch of information from the remote Eureka servers is unsuccessful. This setting does not have an effect if `shouldFetchRegistry` is set to `false`.NaNJohn Bennett06/16/20, 08:45:25 PM"Add shouldEnforceFetchRegistryAtInit config

We add a `shouldEnforceFetchRegistryAtInit` configuration to support
users that want the Eureka client to fail fast during initialization.
If `shouldEnforceFetchRegistryAtInit` is set to `true` then the client
will throw an `IllegalStateException` during instance construction if
its initial attempt to fetch of information from the remote Eureka
servers (both primary and backup) is unsuccessful. This setting does
not have an effect if `shouldFetchRegistry` is set to `false`.

We also update `fetchRegistryFromBackup` to return `true` if successful."1
1308fix typohujiehujiecs06/22/20, 08:09:52 PMNaNNaNfix typohujiehujiecs06/22/20, 08:09:52 PMNaNNaNhujie06/20/20, 03:52:56 PMfix typo1
1309Does the framework stop maintenancepengzhengfapengzhengfa06/22/20, 12:22:17 PMDoes the framework stop maintenanceNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1310Eureka registration relies on serialization order of fields inside dataCenterInfoJoseph Lynchjolynch02/22/21, 03:59:53 PM"While attempting to register into Eureka with a sidecar agent written in Python I came across a curious behavior where Eureka will fail to register if the JSON serialization places the `name` field of `dataCenterInfo` object after the `metadata` field but it will succeed if placed before. Concretely the following is considered valid:
```json
""dataCenterInfo"": {
  ""@class"": ""com.netflix.appinfo.AmazonInfo"",
  ""name"": ""Amazon"",
  ""metadata"": {
    ""instance-type"": ""m5.xlarge""
  }
}
```
and the following is rejected as invalid JSON 
```
""dataCenterInfo"": {
  ""@class"": ""com.netflix.appinfo.AmazonInfo"",
  ""metadata"": {
    ""instance-type"": ""m5.xlarge""
  },
  ""name"": ""Amazon""
}
```
In response to a payload containing the second `dataCenterInfo` object the client receives a 400 code with `{""error"": ""cannot parse request body""}` even though both are valid json payloads.

I have a minimal [reproducible test case](https://gist.github.com/jolynch/f862b2d673acaa484da1bf63910da1fd) as well as a unit test [on my fork](https://github.com/jolynch/eureka/commit/f99930d51f782de977cd47828431b8ad6326ecac) that demonstrates the issue.

I imagine that the jackson parsers are somewhat ossified at this point, but I figured documenting the bug may be useful for future users to avoid the sharp edge.""FWIW, there is an existing [test case](https://github.com/Netflix/eureka/blob/master/eureka-client/src/test/java/com/netflix/discovery/converters/jackson/builder/StringInterningAmazonInfoBuilderTest.java#L108) for having name after the metadata. See also #1224. =||= @brharrington are you saying this is already fixed? Also I'm totally cool with ""close won't fix"" I just figured it was good to get this into the tracker in case we do want to fix it ... (or so it can help someone else googling the problem).  =||= It should be fixed if you are using [1.9.13](https://github.com/Netflix/eureka/releases/tag/v1.9.13) or newer. =||= Ah nice, closing then, thanks @brharrington! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1311Update Jackson to 2.9.10.4troshko11106/26/20, 08:07:10 PMNaNNaNUpdate Jackson to 2.9.10.4troshko11106/26/20, 08:07:10 PMNaNNaNTaras Roshko06/26/20, 06:59:33 PMMissing file1
1312remove null check codeHeemangHanHanope06/30/20, 04:31:10 PM"I think it is unnecessary to check the null of `instanceStatus`.
Because it doesn't matter if `instanceStatus` is null when calling `overrideStatus.equals`""You're correct from the logical perspective and the change will be equivalent, but it looks to me the intent of the check was readability(?), it reads ""if no override or unequal override"", without the null check it makes you think harder what the intent is. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1313Replace valueOf to parseLongHeemangHanHanope06/30/20, 05:13:06 PM"Because the declared variable is primitive type, it is better to use `parseLong`.
I think creating a Long instance using `valueOf` and unwrapping again it is an unnecessary process."NaNReplace valueOf to parseLongHeemangHanHanope06/30/20, 05:13:06 PM"Because the declared variable is primitive type, it is better to use `parseLong`.
I think creating a Long instance using `valueOf` and unwrapping again it is an unnecessary process."NaNHanope06/27/20, 08:12:03 AMReplace valueOf to parseLong1
1314fix typosHeemangHanHanope06/30/20, 04:20:35 PMNaN"Maybe a new method that defaults to calling the misspelling? =||= > Maybe a new method that defaults to calling the misspelling?

I normally see these corrected in the doc string / comment only, but either way works. =||= > LGTM, but please revert the public interface method rename.

Okay, I revert files. =||= "fix typosHeemangHanHanope06/30/20, 04:20:35 PMNaNNaNHanope06/30/20, 09:42:40 AMrevert files1
1315In the logic of registration, the timeliness of data is not very good. I feel that the time is a little long. Later versions can be optimizedpengzhengfapengzhengfa08/18/20, 07:39:36 PMIn the logic of registration, the timeliness of data is not very good. I feel that the time is a little long. Later versions can be optimizedCan you please elaborate (with some examples ideally)? =||= @troshko111 You can use the ideas of CopyOnWrite =||= The action required / problem statement is not clear to me, feel free to reopen if you could please clarify what the issue is, and what is the suggestions. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1316RetryableEurekaHttpClient - Request execution failed with message: java.net.UnknownHostException:杜蒙CoderDuMeng06/30/20, 05:14:10 PM"RetryableEurekaHttpClient - Request execution failed with message: java.net.UnknownHostException: "Please include a concise but complete description and a minimal repro to reopen. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1317Unbreak EurekaClientConfig interface compattroshko11106/29/20, 11:28:28 PMEurekaClientConfig is treated as stable backward-compat API as of couple of years ago, update it to preserve backward-compat.This un-does breaking contract change introduced by https://github.com/Netflix/eureka/commit/6438fba6a42a6d2a1dd2e4cb48eab66c34bd0a21 =||= LGTM =||= thanks for the quick fix! =||= Unbreak EurekaClientConfig interface compattroshko11106/29/20, 11:28:28 PMEurekaClientConfig is treated as stable backward-compat API as of couple of years ago, update it to preserve backward-compat.NaNTaras Roshko06/29/20, 11:15:50 PMUnbreak EurekaClientConfig interface compat1
1318The JDK version of eureka 1.X supportedjunjie-tang9906/30/20, 06:03:18 AMOur core system's JDK version is 1.6. Recently we supposed to import the eureka to solve the service governance problem. And I want to know whether the eureka 1.X can support the JDK1.6? Current versions require Java 8 =||= @spencergibb THX. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1319async anonymous class change to implements Runnable interface class.zhangzhiqiangqq103691643907/12/20, 02:50:46 PMbetter read"This looks like a readability and API regression to me:

- Introduces a public type which is not a contract for no apparent reason
- Requires to jump to a different file to read the logic =||= Can I use lambda or private inner classes? =||= Yes, don't see why not, it's a negligible change though, but legit. =||=  I think that inner class should not call outer class in this way.
    `InstanceInfoReplicator.this.run(); `
 I have never seen such a way before.
I am looking at the code of Eureka and hope to provide some help for Eureka. Although only trivial.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1320Missing useage of instance status in InstanceResource.renewLease()Kazemelochin04/13/21, 05:59:43 PM"I'm confused about parameter ``status`` because i can not find any usage about ``status`` in this method.
https://github.com/Netflix/eureka/blob/f84299eada39b422061399d6de5ea98bd9c1e503/eureka-core/src/main/java/com/netflix/eureka/resources/InstanceResource.java#L105-L110

``renewLease`` calls the method ``AbstractInstanceRegistry.renew``. Then, in the method ``renew``, the ``instanceInfo`` is from the eureka server, of course the instance status is also from the eureka server. But i think the ``instanceInfo`` passed into ``getOverriddenInstanceStatus`` should take the ``status`` (the parameter in the renewLease) from the eureka client. 
https://github.com/Netflix/eureka/blob/f84299eada39b422061399d6de5ea98bd9c1e503/eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java#L363-L367



""Status is not modified during a lease renewal, it's simply a heartbeat, for any instance info changes, including the status, the client would call
`eureka-core/src/main/java/com/netflix/eureka/resources/ApplicationResource.java:145` -> `eureka-core/src/main/java/com/netflix/eureka/registry/AbstractInstanceRegistry.java:193` which would update the info retaining the existing lease if present.

I believe it could have been used to change the status in the past, but seems to be a super old thing. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1321Cleanup Issues Found by MuseNes Cohennescohen08/17/20, 05:54:21 PM"This PR cleans up some issues found by a new static analysis platform we just released called Muse. We’ve been using Eureka as a test case after being pointed to it by someone at Netflix and wanted to contribute fixes for some of the issues it found.

This PR addresses these bug types among others:

-  https://errorprone.info/bugpattern/LockNotBeforeTry

-  https://errorprone.info/bugpattern/ModifyCollectionInEnhancedForLoop

-  https://fbinfer.com/docs/next/all-issue-types/#null_dereference""You can see the rest of the findings [here](https://console.muse.dev/result/ayorra/eureka/01EEGMSZG13XNSZ09WKJG9TP1D?search=&tab=results). When Muse is enabled on a repo, it runs on every pull request and adds comments that flag any new issues introduced by the proposed code change. So it’s a way to bring attention to issues like these “in the moment” when it’s easier to fix them. It looks like [this](https://github.com/nescohen/eureka/pull/2). If you’d like to enable it, you can install the GitHub App from [here](https://github.com/marketplace/muse-dev). It’s free for open source. =||= > LGTM except the line removal in `eureka-client/src/main/java/com/netflix/discovery/endpoint/EndpointUtils.java`

Never mind, I did not notice at first. =||= Thanks for sending this over! =||= @troshko111, No problem dude. Happy to help! =||= "Cleanup Issues Found by MuseNes Cohennescohen08/17/20, 05:54:21 PM"This PR cleans up some issues found by a new static analysis platform we just released called Muse. We’ve been using Eureka as a test case after being pointed to it by someone at Netflix and wanted to contribute fixes for some of the issues it found.

This PR addresses these bug types among others:

-  https://errorprone.info/bugpattern/LockNotBeforeTry

-  https://errorprone.info/bugpattern/ModifyCollectionInEnhancedForLoop

-  https://fbinfer.com/docs/next/all-issue-types/#null_dereference"NaNnescohen08/05/20, 12:58:36 AM"Merge pull request #2 from nescohen/feature/ep-cleanup

Cleanup Issues found by Muse"1
1322v1.7.x  --  this escape from constructor@刘飞lfzy08/18/20, 03:29:42 AM"for example, this class AcceptorExecutor
```java
AcceptorExecutor(String id,
                     int maxBufferSize,
                     int maxBatchingSize,
                     long maxBatchingDelay,
                     long congestionRetryDelayMs,
                     long networkFailureRetryMs) {
        this.maxBufferSize = maxBufferSize;
        this.maxBatchingSize = maxBatchingSize;
        this.maxBatchingDelay = maxBatchingDelay;
        this.trafficShaper = new TrafficShaper(congestionRetryDelayMs, networkFailureRetryMs);

        ThreadGroup threadGroup = new ThreadGroup(""eurekaTaskExecutors"");
        this.acceptorThread = new Thread(threadGroup, new AcceptorRunner(), ""TaskAcceptor-"" + id);
        this.acceptorThread.setDaemon(true);
        this.acceptorThread.start();
....
```
is it not thread safe?""thread.start (happen-before)? =||= I can definitely see how the memory operations can get reordered (writes), the Java Memory Model sure does allow this. At the same time, code like this is so common in Java that I'd be surprised if this was actually happening in practice.

But yeah, unsafe and incorrect in general. =||= @troshko111  thanks! 
you're right.
is it better to use init method to start thread? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1323Eureka Client not registering with Eureka Server when deployed in tomcat 9.0.37Raghavanbn10/05/20, 02:58:04 PM"I'd deployed both Eureka Server and Eureka Client in external tomcat 9.0.37. After running 2 multiple instances of tomcat servers, I can see Eureka Server and Eureka Client application is running properly. but, Eureka client not registered with Eureka Server
    
    Console Error :
    com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
    	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1081) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:995) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1517) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1484) ~[eureka-client-1.9.21.jar:1.9.21]
    	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
    	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
    	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
    	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
    	at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
    
    2020-08-11 11:20:16.036 ERROR 18732 --- [tbeatExecutor-0] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://admin:admin@localhost:8761/EurekaServer-0.0.1-SNAPSHOT/}
    
    javax.ws.rs.WebApplicationException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
     at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo[""timestamp""])
    	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
    	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
    	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:107) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:874) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1443) ~[eureka-client-1.9.21.jar:1.9.21]
    	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
    	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
    	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
    	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
    	at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
    Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
     at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo[""timestamp""])
    	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1503) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1519) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:2188) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2054) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1431) ~[jackson-databind-2.11.1.jar:2.11.1]
    	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:213) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.21.jar:1.9.21]
    	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.21.jar:1.9.21]
    	... 23 common frames omitted
    
    2020-08-11 11:20:16.036  WARN 18732 --- [tbeatExecutor-0] c.n.d.s.t.d.RetryableEurekaHttpClient    : Request execution failed with message: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
     at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo[""timestamp""])
    2020-08-11 11:20:16.036 ERROR 18732 --- [tbeatExecutor-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EUREKACLIENT/DESKTOP:EurekaClient:8081 - was unable to send heartbeat!
    
    Any help would be much appreciated. 
    
    Eureka Client:

    application.properties

     spring.application.name=EurekaClient
     server.port=8081
     eureka.client.serviceUrl.defaultZone=http://localhost:8761/EurekaServer-0.0.1-SNAPSHOT/

    pom.xml

    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
    	<modelVersion>4.0.0</modelVersion>
    	<parent>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-parent</artifactId>
    		<version>2.3.2.RELEASE</version>
    		<relativePath/> <!-- lookup parent from repository -->
    	</parent>
    	<groupId>com.example</groupId>
    	<artifactId>EurekaClient</artifactId>
    	<version>0.0.1-SNAPSHOT</version>
    	<packaging>war</packaging>
    	<name>EurekaClient</name>
    	<description>Demo project for Spring Boot</description>
    
    	<properties>
    		<java.version>11</java.version>
    		<spring-cloud.version>Hoxton.SR6</spring-cloud.version>
    	</properties>
    
    	<dependencies>
    		<dependency>
    	        <groupId>org.springframework.boot</groupId>
    	        <artifactId>spring-boot-starter-actuator</artifactId>
    		</dependency>
    		<dependency>
    			<groupId>org.springframework.boot</groupId>
    			<artifactId>spring-boot-starter-web</artifactId>
    		</dependency>
    		<dependency>
    			<groupId>org.springframework.cloud</groupId>
    			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    		</dependency>
    	</dependencies>
    	<dependencyManagement>
    		<dependencies>
    			<dependency>
    				<groupId>org.springframework.cloud</groupId>
    				<artifactId>spring-cloud-dependencies</artifactId>
    				<version>${spring-cloud.version}</version>
    				<type>pom</type>
    				<scope>import</scope>
    			</dependency>
    		</dependencies>
    	</dependencyManagement>
    </project>
    
    Main Class:
    
    @SpringBootApplication
    @EnableDiscoveryClient
    @RefreshScope
    public class EurekaClientApplication extends SpringBootServletInitializer {
    
    	@Override
    	 protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
    	  return application.sources(EurekaClientApplication.class);
    	 }
    	
    	public static void main(String[] args) {
    		SpringApplication.run(EurekaClientApplication.class, args);
    	}
    	
    	
    }
    @RestController
    class GreetingController {
        
        @RequestMapping(""/hello"")
        public String customerInformation() {
    	      return ""Hey, I am from external tomcat"";
    	 }
    }
    
    Eureka Server

    application.properties

     spring.application.name=EurekaServer
     server.port = 8761
     eureka.client.registerWithEureka = false
     eureka.client.fetchRegistry = false
     eureka.client.serviceUrl.defaultZone=http://localhost:8761/EurekaServer-0.0.1-SNAPSHOT/

    pom.xml

    <?xml version=""1.0"" encoding=""UTF-8""?>
    <project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
    	<modelVersion>4.0.0</modelVersion>
    	<parent>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-parent</artifactId>
    		<version>2.3.2.RELEASE</version>
    		<relativePath/> <!-- lookup parent from repository -->
    	</parent>
    	<groupId>com.example</groupId>
    	<artifactId>EurekaServer</artifactId>
    	<version>0.0.1-SNAPSHOT</version>
    	<packaging>war</packaging>
    	<name>EurekaServer</name>
    	<description>Demo project for Spring Boot</description>
    
    	<properties>
    		<java.version>11</java.version>
    		<spring-cloud.version>Hoxton.SR6</spring-cloud.version>
    	</properties>
    
    	<dependencies>		
    		<dependency>
    			<groupId>org.springframework.cloud</groupId>
    			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    		</dependency>
    	</dependencies>
    
    	<dependencyManagement>
    		<dependencies>
    			<dependency>
    				<groupId>org.springframework.cloud</groupId>
    				<artifactId>spring-cloud-dependencies</artifactId>
    				<version>${spring-cloud.version}</version>
    				<type>pom</type>
    				<scope>import</scope>
    			</dependency>
    		</dependencies>
    	</dependencyManagement>
    </project>

    Main Class :

    @SpringBootApplication
    @EnableEurekaServer
    public class EurekaServerApplication {
    	
    	public static void main(String[] args) {
    		SpringApplication.run(EurekaServerApplication.class, args);
    	}
    
    }""Hard to say based on the log, looks like the client is sending something invalid? Can you attach a debugger and step through? Or at least drop the logging to `debug`? =||= issue resolved =||= @Raghavanbn let us know the solution =||= I had the same issue. Looking more carefully to the discovery service logs I saw authorization errors. Problem was that client had to connect properly with user/passsword, e.g.
`eureka.client.serviceUrl.defaultZone=http://test:test@localhost:8010/eureka`

Hope it will be helpful for someone. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1325Add Muse configuration fileNes Cohennescohen09/28/20, 05:06:08 PM"This PR adds a configuration file for the Muse platform to run on Eureka. I was able to fix a few issues Muse found and my changes were recently accepted. I thought that the Eureka project would benefit from Muse analysis.

In addition to this configuration, a maintainer should install this app (free forever for open source): https://github.com/marketplace/muse-dev

This will enable Muse to scan incoming pull requests and report potentially introduced bugs into the diff. Please feel free to reach out if there is anything else I can help with 😄 "Talked offline, we won't be enabling Muse at this very point, but looking forward to experimenting with it more in the future. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1326High Severity Vulnerabilities due to use of jackson-databind-2.9.10.4.jartalvoish09/14/20, 05:26:23 PM"The jar jackson-databind-2.9.10.4.jar is used by eureka_server. It's reported to have Vulnerabilities: CVE-2020-14060, CVE-2020-14061, CVE-2020-14062 and CVE-2020-14195.

The proposed solution is to upgrade jackson-databind to version 2.10.0 or higher."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1327Downgrade log level of noisy log messagesJames Mulcahyjamesmulcahy08/25/20, 05:25:28 PMNaN"Care to explain why you think they should be info and not error? They're almost all in a catch block. =||= I'll go ahead and hide my comment in shame :grimacing:  =||= @spencergibb in the app refresh case the error is handled and hence is not an error any more by definition, it's simply noise. There's nothing the users can do or should do, it's non-actionable and frankly unimportant if this happens infrequently. If it's permanent, it will manifest in actual issues (stale/empty registry) which must be detected in other ways anyway.

The redirecting client is similar, I struggle to see what a developer may do when seeing this?

What are your thoughts? =||= Sounds good to me. =||= @spencergibb curious if you have received / seen feedback on this from users as well, we can open a separate issue / PR if we need to. The logging game in this client can use some love imo. =||= @troshko111 Updated to address all comments, PTAL when convenient. =||= @troshko111 Ack - I wrapped the lines and re-pushed =||= "Downgrade log level of noisy log messagesJames Mulcahyjamesmulcahy08/25/20, 05:25:28 PMNaNNaNjmulcahy08/24/20, 08:49:46 PMDowngrade log level of noisy log messages1
1328Log status transitions to DOWN at error level, instead of warnJames Mulcahyjamesmulcahy08/28/20, 05:24:39 PM"I also dropped the transitions out of down to info, rather than warn, since
there isn't really anything to be concerned about on such a transition"NaNLog status transitions to DOWN at error level, instead of warnJames Mulcahyjamesmulcahy08/28/20, 05:24:39 PM"I also dropped the transitions out of down to info, rather than warn, since
there isn't really anything to be concerned about on such a transition"NaNjmulcahy08/25/20, 08:38:53 PM"Log status transitions to DOWN at error level, instead of warn

I also dropped the transitions out of down to info, rather than warn, since
there isn't really anything to be concerned about on such a transition"1
1330Remove null condition checkHeemangHanHanope09/02/20, 02:46:22 AM"Unnecessary null inspection conditions were deleted because performing ""equals"" without the condition of checking null would produce the same result."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1332begin forkxjfeng30660209709/07/20, 09:42:53 AMbegin forkNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1333bump jackson-databind do 2.9.10.6Ivan Porto Carrerocasualjim09/14/20, 05:26:24 PMFixes #1326NaNbump jackson-databind do 2.9.10.6Ivan Porto Carrerocasualjim09/14/20, 05:26:24 PMFixes #1326NaNIvan Porto Carrero09/14/20, 05:05:08 PMrevert to 2.9.10 series1
1334rename runtime scopes to runtimeOnlyIvan Porto Carrerocasualjim09/11/20, 05:19:19 PMfixes 1329NaNrename runtime scopes to runtimeOnlyIvan Porto Carrerocasualjim09/11/20, 05:19:19 PMfixes 1329NaNIvan Porto Carrero09/11/20, 03:39:04 PMrename runtime scopes to runtimeOnly1
1335Fix some incorrect logging in AbstractInstanceRegistryMike Smithkerumai09/11/20, 05:21:14 PMThe status being logged in `AbstractInstanceRegistry.renew()`  is not the correct one. This is resulting in confusing log statements saying that the overridden status was `UNKNOWN`.NaNFix some incorrect logging in AbstractInstanceRegistryMike Smithkerumai09/11/20, 05:21:14 PMThe status being logged in `AbstractInstanceRegistry.renew()`  is not the correct one. This is resulting in confusing log statements saying that the overridden status was `UNKNOWN`.NaNMike Smith09/11/20, 03:56:43 PM"Update AbstractInstanceRegistry.java

The status being logged in `AbstractInstanceRegistry.renew()`  is not the correct one. This is resulting in confusing log statements saying that the overridden status was `UNKNOWN`."1
1336Unreleased Resource: Streams奇安信CodeSafeQiAnXinCodeSafe10/09/20, 10:42:01 PM"https://github.com/Netflix/eureka/blob/21b4529acf4a4f18db3b2fada3a40e15be9792cf/eureka-client-jersey2/src/main/java/com/netflix/discovery/shared/transport/jersey2/Jersey2ApplicationClientFactory.java#L200

The program can potentially fail to release a system resource.""I can submit a quick pr - is there a corporate CLA?

I'll just wrap it in a `finally` similar to how it's done in other sections of the code like here: https://github.com/Netflix/eureka/blob/master/eureka-client-jersey2/src/main/java/com/netflix/discovery/shared/transport/jersey2/EurekaJersey2ClientImpl.java#L313 =||= Nope, no CLA, PRs welcomed! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1337Upgrade xstream to fix illegal reflection access reported by tomcatJames Mulcahyjamesmulcahy09/23/20, 11:21:01 PMNaNWhile running locally, I noticed tomcat complain about an illegal reflective access.  Upgrading xstream led to that error going away. =||= Upgrade xstream to fix illegal reflection access reported by tomcatJames Mulcahyjamesmulcahy09/23/20, 11:21:01 PMNaNNaNjmulcahy09/18/20, 08:48:42 PMUpgrade xstream to fix illegal reflection access reported by tomcat1
1338Fix log line which was generating a compiler warningJames Mulcahyjamesmulcahy09/23/20, 11:20:49 PMNaNNaNFix log line which was generating a compiler warningJames Mulcahyjamesmulcahy09/23/20, 11:20:49 PMNaNNaNjmulcahy09/18/20, 08:49:07 PMFix log line which was generating a compiler warning1
1339Add metrics for instances, tagged with VIP, Status and ExpiryJames Mulcahyjamesmulcahy09/24/20, 06:33:30 PMNaNSharing for visibility. I haven't tested this thoroughly yet, but I think it should work (TM) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1340Log a version warning if not being run under Java 1.8James Mulcahyjamesmulcahy09/22/20, 09:04:16 PMNaN"Shouldn't it be at **least** Java 8? =||= Is anyone running with Java > 8 today? All the docs mention 1.8, which is why I chose to be specific about 1.8 here.

I wasted a bunch of time in the last couple of days tracking down what turned out to be an issue running Java >= 11, so I know that doesn't work.   =||= Spring Cloud supports Java 8+ with integration tests for 11 and 14. We have users running on 11+. What was the specific issue? =||= Interesting context, thanks @spencergibb.  Does Spring Cloud run the eureka-server under 11+14, or just the client?

The error Tomcat throws is:

```
21-Sep-2020 12:35:12.654 SEVERE [localhost-startStop-1] org.apache.catalina.core.StandardContext.filterStart Exception starting filter [jersey]
	java.lang.TypeNotPresentException: Type javax.xml.bind.JAXBContext not present
		at java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117)
		at java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125)
		at java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)
		at java.base/sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68)
		at java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138)
		at java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)
		at java.base/sun.reflect.generics.repository.ClassRepository.computeSuperInterfaces(ClassRepository.java:117)
		at java.base/sun.reflect.generics.repository.ClassRepository.getSuperInterfaces(ClassRepository.java:95)
		at java.base/java.lang.Class.getGenericInterfaces(Class.java:1156)
		at com.sun.jersey.core.reflection.ReflectionHelper.getClass(ReflectionHelper.java:629)
		at com.sun.jersey.core.reflection.ReflectionHelper.getClass(ReflectionHelper.java:625)
		at com.sun.jersey.core.spi.factory.ContextResolverFactory.getParameterizedType(ContextResolverFactory.java:202)
		at com.sun.jersey.core.spi.factory.ContextResolverFactory.init(ContextResolverFactory.java:89)
		at com.sun.jersey.server.impl.application.WebApplicationImpl._initiate(WebApplicationImpl.java:1332)
		at com.sun.jersey.server.impl.application.WebApplicationImpl.access$700(WebApplicationImpl.java:180)
		at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:799)
		at com.sun.jersey.server.impl.application.WebApplicationImpl$13.f(WebApplicationImpl.java:795)
		at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:193)
		at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:795)
		at com.sun.jersey.server.impl.application.WebApplicationImpl.initiate(WebApplicationImpl.java:790)
		at com.sun.jersey.spi.container.servlet.ServletContainer.initiate(ServletContainer.java:509)
		at com.sun.jersey.spi.container.servlet.ServletContainer$InternalWebComponent.initiate(ServletContainer.java:339)
		at com.sun.jersey.spi.container.servlet.WebComponent.load(WebComponent.java:605)
		at com.sun.jersey.spi.container.servlet.WebComponent.init(WebComponent.java:207)
		at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:394)
		at com.sun.jersey.spi.container.servlet.ServletContainer.init(ServletContainer.java:744)
		at org.apache.catalina.core.ApplicationFilterConfig.initFilter(ApplicationFilterConfig.java:281)
		at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:262)
		at org.apache.catalina.core.ApplicationFilterConfig.<init>(ApplicationFilterConfig.java:106)
		at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4538)
		at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5181)
		at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
		at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)
		at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)
		at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:705)
		at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:970)
		at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1840)
		at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
		at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
		at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
		at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
		at java.base/java.lang.Thread.run(Thread.java:832)
	Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBContext
		at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1358)
		at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1180)
		at java.base/java.lang.Class.forName0(Native Method)
		at java.base/java.lang.Class.forName(Class.java:427)
		at java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114)
		... 41 more
21-Sep-2020 12:35:12.910 INFO [localhost-startStop-1] org.apache.catalina.core.ApplicationContext.log ContextListener: contextInitialized()
21-Sep-2020 12:35:12.910 INFO [localhost-startStop-1] org.apache.catalina.core.ApplicationContext.log SessionListener: contextInitialized()
21-Sep-2020 12:35:12.911 INFO [localhost-startStop-1] org.apache.catalina.core.ApplicationContext.log ContextListener: attributeAdded('StockTicker', 'async.Stockticker@7d23879e')
21-Sep-2020 12:35:16.989 INFO [localhost-startStop-1] org.apache.catalina.core.ApplicationContext.log SessionListener: contextDestroyed()
21-Sep-2020 12:35:16.989 INFO [localhost-startStop-1] org.apache.catalina.core.ApplicationContext.log ContextListener: contextDestroyed()

```

This works fine without the eureka-server loaded; so while the stack trace doesn't mention eureka, it certainly triggers the issue. =||= We run the server. See https://github.com/spring-cloud/spring-cloud-netflix/blob/0665640c9787a42a32624245bb0f2e23b411f358/spring-cloud-starter-netflix-eureka-server/pom.xml#L29-L33

We add the appropriate dependency that doesn't hurt in java 8 =||= I've replicated that in the build.gradle within eureka-server, in #1342, closing this in preference to that.  Doesn't seem like any other changes are required (and I'd previously been weary of going down this path for fear of finding a big list of issues).  Thanks for the input @spencergibb  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1341Will Eureka fix instance expired judgement code in 2.XkyangcmXF04/13/21, 06:16:36 PM"Hi,
I found eureka comment about expired judgement code in lease.java. The judgement uses double duration to judge whether it is expired. I'd like to know whether eureka will fix it in newest milestone version such as 2.0 ? "Hi, the `2.x` has been abandoned and will not be getting any investment in its current form. This does not mean the development can't continue by the community. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1342Add jaxb-runtime, which is required for Java >=11James Mulcahyjamesmulcahy09/23/20, 11:20:32 PMNaNNaNAdd jaxb-runtime, which is required for Java >=11James Mulcahyjamesmulcahy09/23/20, 11:20:32 PMNaNNaNjmulcahy09/22/20, 09:02:25 PMAdd jaxb-runtime, which is required for Java >=111
1343Remote fetch metricsJames Mulcahyjamesmulcahy09/28/20, 10:38:59 PMNaNNaNRemote fetch metricsJames Mulcahyjamesmulcahy09/28/20, 10:38:59 PMNaNNaNjmulcahy09/28/20, 09:29:37 PMAdd secondsSinceLastSuccessfulRemoteFetch metric1
1344Record fetch mismatches and success countsJames Mulcahyjamesmulcahy09/29/20, 12:19:30 AMNaNGood suggestion, thanks.  =||= Record fetch mismatches and success countsJames Mulcahyjamesmulcahy09/29/20, 12:19:30 AMNaNNaNjmulcahy09/28/20, 11:41:38 PMRecord fetch mismatches and success counts1
1345Register RemoteRegionRegistry with the servo monitorsJames Mulcahyjamesmulcahy09/29/20, 05:53:41 PMWithout this, it won't collect the metrics.  The annotation alone isn't enoughNaNRegister RemoteRegionRegistry with the servo monitorsJames Mulcahyjamesmulcahy09/29/20, 05:53:41 PMWithout this, it won't collect the metrics.  The annotation alone isn't enoughNaNjmulcahy09/29/20, 05:06:08 PM"Register RemoteRegionRegistry with the servo monitors

Without this, it won't collect the metrics.  The annotation alone isn't enough"1
1348Integrating Angular 8 with Paystack payment gatewayRaghavanbn10/05/20, 04:36:35 PMI am new to payment gateway integration with Angular. In my project, I need to integrate angular 8 with Paystack API. I could not see any Paystack module available in angular8, but it is in Angular4. Could anyone suggest whether this has been deprecated or I can use the Angular4 module in Angular8?Wrong repo? =||= I didn't get you sorry! =||= Why are you asking about angular and paystack in eureka? They seem unrelated =||= it is not related to eureka, wrongly posted in this repo. that's my bad =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1349it is not related to eureka, wrongly posted in this repo. that's my badRaghavanbn10/05/20, 04:39:53 PM"it is not related to eureka, wrongly posted in this repo. that's my bad

_Originally posted by @Raghavanbn in https://github.com/Netflix/eureka/issues/1348#issuecomment-703718273_"No worries. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1350fix #1336 resource needs to be closedChase Diemabracadv810/09/20, 10:42:01 PM"Fix #1336 FileInputStream requires a call to close() to release resources.

Contribution on behalf of Comcast."Thanks! =||= fix #1336 resource needs to be closedChase Diemabracadv810/09/20, 10:42:01 PM"Fix #1336 FileInputStream requires a call to close() to release resources.

Contribution on behalf of Comcast."NaNcdiem4558k10/06/20, 06:39:09 PMfix #1336 resource needs to be closed1
1351There is a vulnerability in xerces 2.4.0 ,upgrade recommended奇安信CodeSafeQiAnXinCodeSafe10/29/20, 01:59:22 AM"https://github.com/Netflix/eureka/blob/821beb4b2e0204544c70017e1e883fcf4aa02c9e/eureka-server/build.gradle#L11

CVE-2012-0881
CVE-2013-4002
CVE-2009-2625

Recommended upgrade version：2.12.0.SP02"Thanks, this has been bumped. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1352Add IPv6 address to the datacenter metadata keysPhil Rudphilrud10/15/20, 06:34:39 PM"* introduce a new datacenter metadata key for the primary IPv6 address
* update existing tests to make sure the new key can be used while specifying default address resolution order"NaNAdd IPv6 address to the datacenter metadata keysPhil Rudphilrud10/15/20, 06:34:39 PM"* introduce a new datacenter metadata key for the primary IPv6 address
* update existing tests to make sure the new key can be used while specifying default address resolution order"NaNPhil Rud10/14/20, 07:38:48 AMAdd IPv6 address to the datacenter metadata keys1
1353Add a metric to report selfPreservationModeJames Mulcahyjamesmulcahy10/14/20, 09:52:05 PMNaNNaNAdd a metric to report selfPreservationModeJames Mulcahyjamesmulcahy10/14/20, 09:52:05 PMNaNNaNjmulcahy10/14/20, 09:30:43 PMAdd a metric to report selfPreservationMode1
1355Bump default polling intervalLing Yuanfiibbb10/16/20, 12:14:27 AMBump default polling interval from 30 seconds to 45 seconds.This is a non passive change. Can you change it via config instead of changing the default? =||= Meant to do https://github.com/Netflix/eureka/pull/1356 instead. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1356Bump default connection idle timeoutLing Yuanfiibbb10/16/20, 07:52:05 PMBump default connection idle timeout to 45 seconds."Again, why change the default when you can change it via configuration? =||= @spencergibb 
> Again, why change the default when you can change it via configuration?

I think it makes sense to change the default in this particular case as the default was improperly chosen. The default polling interval is `30s` and the client configures to close its socket on `30s` of inactivity which basically creates a race and may cause it unnecessary bounce among Eureka servers making keep alive useless. WDYT? =||= Sounds good =||= > The default polling interval is `30s` and the client configures to close its socket on `30s` of inactivity which basically creates a race and may cause it unnecessary bounce among Eureka servers making keep alive useless. WDYT?

Should eureka log a message if this configuration is detected? =||= "Bump default connection idle timeoutLing Yuanfiibbb10/16/20, 07:52:05 PMBump default connection idle timeout to 45 seconds.NaNLing Yuan10/15/20, 11:42:30 PMBump default connection idle timeout1
1357High Severity Vulnerabilities due to use of upgrade jettison-1.3.7.jaraviramle10/29/20, 02:00:06 AM"The jar jettison-1.3.7.jar is used by eureka-client. It's reported to have Vulnerabilities: CVE-2020-10663 and CVE-2020-7712.

The proposed solution is to upgrade jettison to version 1.4.x.

"Thanks, this has been bumped. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1358Update vulnerable deps #1357 #1351troshko11110/29/20, 01:58:15 AMNaNNaNUpdate vulnerable deps #1357 #1351troshko11110/29/20, 01:58:15 AMNaNNaNTaras Roshko10/28/20, 08:08:31 PMUpdate vulnerable deps #1357 #13511
1359Update Build Status LocationSteve Hillsghill10/29/20, 08:29:45 PMThis build has been migrated to travis-ci.com as per their [recommendation](https://mailchi.mp/3d439eeb1098/travis-ciorg-is-moving-to-travis-cicom).NaNUpdate Build Status LocationSteve Hillsghill10/29/20, 08:29:45 PMThis build has been migrated to travis-ci.com as per their [recommendation](https://mailchi.mp/3d439eeb1098/travis-ciorg-is-moving-to-travis-cicom).NaNSteve Hill10/29/20, 08:17:04 PMUpdate Build Status Location1
1360High Severity Vulnerabilities due to use of upgrade xercesimpl-2.4.0.jarMochaiHalevi11/05/20, 05:27:46 PM"The jar xercesImpl-2.4.0.jar is used by eureka-server and packed into the war file. It's reported to have Vulnerabilities: [CVE-2012-0881](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0881) and [CVE-2013-4002](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4002).

Location: ../eureka-server-1.10.7.war/WEB-INF/lib/xercesImpl-2.4.0.jar

The proposed solution is to upgrade xercesImpl to version 2.12.0"This has already been reported and fixed https://github.com/Netflix/eureka/blob/f92ee228f9a7b2e1a76f8d75de0a4708353a79f8/eureka-server/build.gradle#L11 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1361Make instance config factory support custom amazon info providerLing Yuanfiibbb11/06/20, 06:01:36 PM"This diff adds `CustomAmazonInfoProviderInstanceConfigFactory`. This allow us to inject custom implementation of `<Provider>AmazonInfo`. The intention is to bind this new factory implementation to the `EurekaInstanceConfigFactory` interface, as documented [here](https://github.com/Netflix/eureka/blob/master/eureka-client-archaius2/src/main/java/com/netflix/discovery/guice/EurekaClientModule.java#L22), so that users can control how `AmazonInfo` is provided."NaNMake instance config factory support custom amazon info providerLing Yuanfiibbb11/06/20, 06:01:36 PMThis diff adds `CustomAmazonInfoProviderInstanceConfigFactory`. This allow us to inject custom implementation of `<Provider>AmazonInfo`. The intention is to bind this new factory implementation to the `EurekaInstanceConfigFactory` interface, as documented [here](https://github.com/Netflix/eureka/blob/master/eureka-client-archaius2/src/main/java/com/netflix/discovery/guice/EurekaClientModule.java#L22), so that users can control how `AmazonInfo` is provided.NaNLing Yuan11/05/20, 05:22:20 PMMake instance config factory support custom amazon info provider1
1362Eureka Server Downshijiyu11/09/20, 05:35:25 PMWhen Eureka Server Down,EurekaClient can't change locat cache.So when I call DiscoveryClient getInstace(),It still get application instance."Need more info. What's the behavior you're seeing, expected behavior, steps to reproduce? =||= The EurekaClient  gets Applications from Server,when it register to Server.But when Eureka Server is down,or  Network problems,The EurekaClient can't connect to The Eureka Server,The cache of the client can't be refeshed.So when I  use it method getInstance, It still get some instance which status still is up. =||= I also encountered a similar situation.
There are two machines A and B, with EurekaServer deployed on them.The EruekaClient on both machines are registered to these two EurekaServer.
When I unplug the network cable of machine A, EurekaServer B can normally offline all EurekaClient on machine A, and EurekaClient on machine B can pull the correct registry information.After plugging the network cable of machine A back, all services returned to normal.
However, when I unplugged the network cable of machine B, I found that although the EurekaServer on machine A can offline EurekaClient correctly, all the registration information obtained by EurekaClient on machine A has not been updated. =||= @shijiyu when Eureka client can't connect to Eureka servers, it will not invalidate / purge its local cache _by design_, it is done so that you don't lose critical discovery information in case of Eureka downtime. The information (may) get stale over time, but it's much better to have partially stale information than to have a 100% outage whenever Eureka is down.

@Iyxh897 your issue seems different, I suggest opening a new issue. =||= @troshko111 OK,I know,Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1363Fix GzipEncodingEnforcingFilter getHeaders always with a const valueKebekebe7jun12/01/20, 07:07:53 PM"HttpHeaders.ACCEPT_ENCODING only need add to header names, not values."Thanks, this looks good to me, but can you please add a test demonstrating the issue and the fix? =||= hello @troshko111 , I have added tests for this case. =||= Thanks! =||= Fix GzipEncodingEnforcingFilter getHeaders always with a const valueKebekebe7jun12/01/20, 07:07:53 PMHttpHeaders.ACCEPT_ENCODING only need add to header names, not values.NaNKebe12/01/20, 07:24:37 AM+ add normal header test1
1364non-java server register to eurekaDEVINccp11/11/20, 05:54:37 AM"Can a non-java server register to eureka?
My server is  a go server, I want to register to eureka? Can I do this?""Yes, it is possible.  =||= > Yes, it is possible.

Ok, I will hava a try. thank you. =||= You can implement a lightweight client / sidecar, only these APIs are necessary for registration:

Register, update (including state): `POST $ADDR/discovery/v2/apps/$APP`
Heartbeat: `PUT ""$ADDR/discovery/v2/apps/$APP/$INSTANCE_ID?status=${current_status}&lastDirtyTimestamp=$last_reg""`
Gracefully de-register (optional): `DELETE $ADDR/discovery/v2/apps/$APP/$INSTANCE_ID`

Status transitions are:
`STARTING` -> `UP` (should not do `STARTING` -> `DOWN`, keep in `STARTING` until becomes healthy)
`UP` <-> `DOWN`

Hope this helps. =||= ok, I completed the work through your hint, Thx =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1365Fix DiscoveryManagerLing Yuanfiibbb11/11/20, 09:38:37 PMThe legacy `DiscoveryManager` relies on explicitly setting its inner `EurekaInstanceConfig` to function properly. NaNFix DiscoveryManagerLing Yuanfiibbb11/11/20, 09:38:37 PMThe legacy `DiscoveryManager` relies on explicitly setting its inner `EurekaInstanceConfig` to function properly. NaNLing Yuan11/11/20, 06:21:53 PMFix DiscoveryManager for DI tests1
1366Revert log level of 'Saw local status' errorJames Mulcahyjamesmulcahy11/12/20, 06:42:17 PMNaNIt has been surprising to a number of people that this changed, and we've decided to go back to the original behavior. =||= Revert log level of 'Saw local status' errorJames Mulcahyjamesmulcahy11/12/20, 06:42:17 PMNaNNaNJames Mulcahy11/12/20, 05:41:37 PMRevert log level of 'Saw local status' error1
1367High Severity Vulnerability in xstream-1.4.13Hasan Çelikhasancelik12/01/20, 07:26:03 PM"https://github.com/Netflix/eureka/blob/master/eureka-client/build.gradle#L10

[CVE-2020-26217](https://github.com/advisories/GHSA-mw36-7c6c-q4q2)

The proposed solution is to upgrade xstream to version **1.4.14**"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1368what is the param app-group-name in Eureka use for?qushihaoji04/13/21, 05:57:12 PM"now in same zone， we have same business but with different profile. like test and prod environment, and I want to use same eureka, how can I do that ?  
I know I can give a different name for test and prod enviromnet, but besides this ,is any other ways to do that ?I see the source code, found param app-group-name ,what the param use for?

[another disscuss can be saw here](https://github.com/spring-cloud/spring-cloud-netflix/issues/3512)
[here](https://github.com/spring-cloud/spring-cloud-netflix/issues/3141)""`appGroupName` does not seem to serve any specific purpose any more and looks to be largely unused. Looks like an artifact from the past to me.

I did not fully get the first question though, can you elaborate? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1369deploy eureka cluster in kubernetes always cause unavailable-replicas xxx。 Does this matter？ louisoldthreefeng11/26/20, 10:54:11 AM"step to porduce:

## 1. first to change eureka yml file to this.

```
spring:
  application:
    name: registry-center
  profiles:
    active: qa3
eureka:
  environment: ${spring.profiles}
  instance:
    preferIpAddress: false
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    enable-lease-expiration-duration: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 20
  server:
    enable-self-preservation: false
    eviction-interval-timer-in-ms: 5000
    renewal-threshold-update-interval-ms: 7000
    renewal-percent-threshold: 0.9
  client:
    serviceUrl:
      defaultZone: http://registry-center-new-0.registry-center-new:8101/eureka/,http://registry-center-new-1.registry-center-new:8101/eureka/,http://registry-center-new-2.registry-center-new:8101/eureka/
```

## 2. to deploy in kubernetes

```
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: registry-center-new
  namespace: qa3
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: registry-center-new
  serviceName: registry-center-new
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: registry-center-new
    spec:
      containers:
      - env:
        - name: PROFILE
          value: qa3
        image: myself-eureka:latest
        imagePullPolicy: Always
        name: be-registry-center-new-service-container
        ports:
        - containerPort: 8101
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/local/bin/docker-entrypoint.sh
          name: volume-registry-center-docker-entrypoint
          subPath: docker-entrypoint.sh
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: aliyunregistry
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      nodeSelector:
        env: non_prod
      tolerations:
      - effect: NoSchedule
        key: group
        operator: Equal
        value: non_prod
      volumes:
      - configMap:
          defaultMode: 420
          name: be-registry-center-docker-entrypoint.sh
        name: volume-registry-center-docker-entrypoint
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
```

## 3.  the registry wiil be show unavailable-replicas

![image](https://user-images.githubusercontent.com/38313565/100313236-220e8c00-2fef-11eb-8cb4-de0722ca1eca.png)

for in the source file , i find this.

```
public boolean isInstanceURL(String url, InstanceInfo instance) {

    String hostName = hostFromUrl(url);

    String myInfoComparator = instance.getHostName();

    if (clientConfig.getTransportConfig().applicationsResolverUseIp()) {
        myInfoComparator = instance.getIPAddr();
   }

    return hostName != null && hostName.equals(myInfoComparator);
}
```

so. In kubernetes sts  . the pod hostname will be  never same as the serviceUrl. like my example : `registry-center-new-0` not be `registry-center-new-0.registry-center-new`. 

Does this really matter to the cluster of eureka ? ""fix by use full FQDN
```
serviceUrl:
      defaultZone: http://registry-center-new-0.registry-center-new.qa3.svc.cluster.local:8101/eureka/,http://registry-center-new-1.registry-center-new.qa3.svc.cluster.local:8101/eureka/,http://registry-center-new-2.registry-center-new.qa3.svc.cluster.local:8101/eureka/
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1370Fix #1367 (update xstream)troshko11112/01/20, 07:26:01 PMNaNNaNFix #1367 (update xstream)troshko11112/01/20, 07:26:01 PMNaNNaNTaras Roshko12/01/20, 07:10:36 PMFix #1367 (update xstream)1
1371eureka.instance.prefer-ip-address javadoc has spelling errorhrksingh12/06/20, 06:38:38 PM"Flag to say that, when guessing a hostname, the IP address of the server should be used in prference to the hostname reported by the OS.

here  prference  should be preference""this should be fixed by spring-cloud-netflix
  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1372优化建议Aliu(阿六)cherishsince12/18/20, 03:00:32 AM"

```java

  // AbstractInstanceRegistry#evict(long additionalLeaseMs)

        if (toEvict > 0) {
            logger.info(""Evicting {} items (expired={}, evictionLimit={})"", toEvict, expiredLeases.size(), evictionLimit);

            Random random = new Random(System.currentTimeMillis());
            for (int i = 0; i < toEvict; i++) {
                // Pick a random item (Knuth shuffle algorithm)

                // 这个地方，如果 expiredLeases.size() 为 1 的时候，random.nextInt 和 Collections.swap 可以不调用，一个小小的优化
                int next = i + random.nextInt(expiredLeases.size() - i);
                Collections.swap(expiredLeases, i, next);
                Lease<InstanceInfo> lease = expiredLeases.get(i);

                String appName = lease.getHolder().getAppName();
                String id = lease.getHolder().getId();
                EXPIRED.increment();
                logger.warn(""DS: Registry: expired lease for {}/{}"", appName, id);
                internalCancel(appName, id, false);
            }
        }
```

说明：
这是一个小小的优化，在 `AbstractInstanceRegistry#evict(long additionalLeaseMs)` ，如果 expiredLeases.size() 为 1 的时候，random.nextInt 和 Collections.swap 可以不调用，一个小小的优化"Sorry, we can only review issues and submissions in English. I'll keep it open for a bit in case you decide to provide a description. =||= This is a small optimization. In AbstractInstanceRegistry#evict(long additionalLeaseMs), if expiredLeases.size() is 1, random.nextInt and Collections.swap can be omitted. A small optimization =||= Thanks for explaining, this is true, but it'd add a special case to the code and the optimization is probably too small to justify it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1373Help me to see a problem，Multiple Eureka deployed on one servereighthw04/13/21, 06:28:37 PM"I deployed multiple Eureka on a server, one 8761 and one 7001. I started a microservice and configured to register with 7001, but 8761 will also be registered by default. How can I make it not register port 8761 by default.

server.port: 7002      #Change the built-in server port#
spring:
  application:
    name: configserver
  profiles:
    active: native     

eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:7001/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${eureka.instance.ip-address:${spring.cloud.client.ip-address}}:${spring.application.instance_id:${server.port}}:${spring.application.name}"Set the port/secure port on the client explicitly to the one you're registering. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1374Eureka connectionIdleTimeout assignment error!!!HaleyUFO-Coder04/13/21, 06:17:05 PMIn eureka-client version 1.9.3 or old version,I'm not sure if this problem still exists in the new version. com.net flix. Discovery. Shared. Transport. EurekaClientFactoryBuilder# connectionIdleTimeout field assignment to transform the default 30 s to ms.But in com.net flix. Discovery. Shared. Transport. Jersey# cleanIdle in use, it is to use as the seconds, cause connectionIdleTimeout values be enlarged 1000 times, long connection cannot receive timely detection of destruction."![image](https://user-images.githubusercontent.com/53501500/103216863-0d0c7c00-4952-11eb-9d01-ab5fd3e0091f.png)
![image](https://user-images.githubusercontent.com/53501500/103216886-1bf32e80-4952-11eb-92ee-f60eb9a7855d.png)
 =||= Hi
I checked the source code of version `1.9.25` . In the `Eurekaclientfactorybuilder` class, the code has been fixed, and the above problem does not appear. 
```
    public B withClientConfig(EurekaClientConfig clientConfig) {
        withClientAccept(EurekaAccept.fromString(clientConfig.getClientDataAccept()));
        withAllowRedirect(clientConfig.allowRedirects());
        withConnectionTimeout(clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000);
        withReadTimeout(clientConfig.getEurekaServerReadTimeoutSeconds() * 1000);
        withMaxConnectionsPerHost(clientConfig.getEurekaServerTotalConnectionsPerHost());
        withMaxTotalConnections(clientConfig.getEurekaServerTotalConnections());
        withConnectionIdleTimeout(clientConfig.getEurekaConnectionIdleTimeoutSeconds());
        withEncoder(clientConfig.getEncoderName());
        return withDecoder(clientConfig.getDecoderName(), clientConfig.getClientDataAccept());
    }
```

Any thoughts?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1375Unable to run demo application due to javadoc error${sleep,5}mrthankyou01/18/21, 01:57:08 AM"Hi,

I'm attempting to run a demo application on my local machine. I am currently following your instructions [here](https://github.com/Netflix/eureka/wiki/Running-the-Demo-Application). When I run the following command `./gradlew clean build` to build the project, I receive the following output in my terminal:

```shell
> Configure project :
Inferred project: eureka, version: 1.10.12-SNAPSHOT

> Configure project :eureka-client
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.

> Configure project :eureka-client-archaius2
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.

> Configure project :eureka-client-jersey2
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.

> Task :eureka-client:compileJava
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

> Task :eureka-client:javadoc
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java:3: error: cannot find symbol
import javax.annotation.PostConstruct;
                       ^
  symbol:   class PostConstruct
  location: package javax.annotation
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java:4: error: cannot find symbol
import javax.annotation.PreDestroy;
                       ^
  symbol:   class PreDestroy
  location: package javax.annotation
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java:46: error: cannot find symbol
import javax.annotation.PreDestroy;
                       ^
  symbol:   class PreDestroy
  location: package javax.annotation
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java:49: error: cannot find symbol
    @PostConstruct
     ^
  symbol:   class PostConstruct
  location: class EurekaUpStatusResolver
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/EurekaUpStatusResolver.java:62: error: cannot find symbol
    @PreDestroy
     ^
  symbol:   class PreDestroy
  location: class EurekaUpStatusResolver
/Users/thank_you/research/netflix/eureka/eureka-client/src/main/java/com/netflix/discovery/DiscoveryClient.java:931: error: cannot find symbol
    @PreDestroy
     ^
  symbol:   class PreDestroy
  location: class DiscoveryClient
6 errors

> Task :eureka-client:javadoc FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':eureka-client:javadoc'.
> Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/Users/thank_you/research/netflix/eureka/eureka-client/build/tmp/javadoc/javadoc.options'

* Try:
Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':eureka-client:javadoc'.
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.lambda$executeIfValid$1(ExecuteActionsTaskExecuter.java:205)
        at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:263)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:203)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:184)
        at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:114)
        at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:62)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
        at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:41)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:372)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:359)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:352)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:338)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)
        at org.gradle.execution.plan.DefaultPlanExecutor.process(DefaultPlanExecutor.java:72)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph.executeWithServices(DefaultTaskExecutionGraph.java:189)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph.execute(DefaultTaskExecutionGraph.java:166)
        at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:41)
        at org.gradle.execution.DefaultBuildWorkExecutor.execute(DefaultBuildWorkExecutor.java:40)
        at org.gradle.execution.DefaultBuildWorkExecutor.access$000(DefaultBuildWorkExecutor.java:24)
        at org.gradle.execution.DefaultBuildWorkExecutor$1.proceed(DefaultBuildWorkExecutor.java:48)
        at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:49)
        at org.gradle.execution.DefaultBuildWorkExecutor.execute(DefaultBuildWorkExecutor.java:40)
        at org.gradle.execution.DefaultBuildWorkExecutor.execute(DefaultBuildWorkExecutor.java:33)
        at org.gradle.execution.IncludedBuildLifecycleBuildWorkExecutor.execute(IncludedBuildLifecycleBuildWorkExecutor.java:36)
        at org.gradle.execution.DeprecateUndefinedBuildWorkExecutor.execute(DeprecateUndefinedBuildWorkExecutor.java:42)
        at org.gradle.execution.BuildOperationFiringBuildWorkerExecutor$ExecuteTasks.run(BuildOperationFiringBuildWorkerExecutor.java:57)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
        at org.gradle.execution.BuildOperationFiringBuildWorkerExecutor.execute(BuildOperationFiringBuildWorkerExecutor.java:42)
        at org.gradle.initialization.DefaultGradleLauncher.runWork(DefaultGradleLauncher.java:255)
        at org.gradle.initialization.DefaultGradleLauncher.doClassicBuildStages(DefaultGradleLauncher.java:164)
        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:140)
        at org.gradle.initialization.DefaultGradleLauncher.executeTasks(DefaultGradleLauncher.java:120)
        at org.gradle.internal.invocation.GradleBuildController$1.create(GradleBuildController.java:74)
        at org.gradle.internal.invocation.GradleBuildController$1.create(GradleBuildController.java:67)
        at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:189)
        at org.gradle.internal.work.StopShieldingWorkerLeaseService.withLocks(StopShieldingWorkerLeaseService.java:40)
        at org.gradle.internal.invocation.GradleBuildController.doBuild(GradleBuildController.java:67)
        at org.gradle.internal.invocation.GradleBuildController.run(GradleBuildController.java:56)
        at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:31)
        at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
        at org.gradle.launcher.exec.BuildOutcomeReportingBuildActionRunner.run(BuildOutcomeReportingBuildActionRunner.java:63)
        at org.gradle.tooling.internal.provider.ValidatingBuildActionRunner.run(ValidatingBuildActionRunner.java:32)
        at org.gradle.launcher.exec.BuildCompletionNotifyingBuildActionRunner.run(BuildCompletionNotifyingBuildActionRunner.java:39)
        at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:51)
        at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner$3.call(RunAsBuildOperationBuildActionRunner.java:45)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
        at org.gradle.launcher.exec.RunAsBuildOperationBuildActionRunner.run(RunAsBuildOperationBuildActionRunner.java:45)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:50)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter$1.transform(InProcessBuildActionExecuter.java:47)
        at org.gradle.composite.internal.DefaultRootBuildState.run(DefaultRootBuildState.java:80)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:47)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:31)
        at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:42)
        at org.gradle.launcher.exec.BuildTreeScopeBuildActionExecuter.execute(BuildTreeScopeBuildActionExecuter.java:28)
        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)
        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:52)
        at org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:60)
        at org.gradle.tooling.internal.provider.SubscribableBuildActionExecuter.execute(SubscribableBuildActionExecuter.java:38)
        at org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:68)
        at org.gradle.tooling.internal.provider.SessionScopeBuildActionExecuter.execute(SessionScopeBuildActionExecuter.java:38)
        at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:37)
        at org.gradle.tooling.internal.provider.GradleThreadBuildActionExecuter.execute(GradleThreadBuildActionExecuter.java:26)
        at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:43)
        at org.gradle.tooling.internal.provider.ParallelismConfigurationBuildActionExecuter.execute(ParallelismConfigurationBuildActionExecuter.java:29)
        at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:60)
        at org.gradle.tooling.internal.provider.StartParamsValidatingActionExecuter.execute(StartParamsValidatingActionExecuter.java:32)
        at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:55)
        at org.gradle.tooling.internal.provider.SessionFailureReportingActionExecuter.execute(SessionFailureReportingActionExecuter.java:41)
        at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:48)
        at org.gradle.tooling.internal.provider.SetupLoggingActionExecuter.execute(SetupLoggingActionExecuter.java:32)
        at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:68)
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:39)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:29)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:35)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:78)
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.create(ForwardClientInput.java:75)
        at org.gradle.util.Swapper.swap(Swapper.java:38)
        at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:75)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:63)
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:82)
        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:37)
        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:104)
        at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:52)
        at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
Caused by: org.gradle.api.GradleException: Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/Users/thank_you/research/netflix/eureka/eureka-client/build/tmp/javadoc/javadoc.options'
        at org.gradle.api.tasks.javadoc.internal.JavadocGenerator.execute(JavadocGenerator.java:58)
        at org.gradle.api.tasks.javadoc.internal.JavadocGenerator.execute(JavadocGenerator.java:31)
        at org.gradle.api.tasks.javadoc.Javadoc.executeExternalJavadoc(Javadoc.java:164)
        at org.gradle.api.tasks.javadoc.Javadoc.generate(Javadoc.java:152)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:104)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:49)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:42)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:28)
        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:727)
        at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:694)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.run(ExecuteActionsTaskExecuter.java:568)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:402)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:394)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:92)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:553)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:536)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:109)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActionsTaskExecuter.java:276)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:265)
        at org.gradle.internal.execution.steps.ExecuteStep.lambda$execute$1(ExecuteStep.java:33)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:33)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:26)
        at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:67)
        at org.gradle.internal.execution.steps.CleanupOutputsStep.execute(CleanupOutputsStep.java:36)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:49)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:34)
        at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:43)
        at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:73)
        at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:54)
        at org.gradle.internal.execution.steps.CatchExceptionStep.execute(CatchExceptionStep.java:34)
        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:44)
        at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:54)
        at org.gradle.internal.execution.steps.SnapshotOutputsStep.execute(SnapshotOutputsStep.java:38)
        at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:49)
        at org.gradle.internal.execution.steps.CacheStep.executeWithoutCache(CacheStep.java:159)
        at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:72)
        at org.gradle.internal.execution.steps.CacheStep.execute(CacheStep.java:43)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:44)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:33)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:38)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:24)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:92)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:85)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:39)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:76)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:37)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:36)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:26)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:94)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:49)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:79)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:53)
        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:74)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:78)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:78)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:34)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:39)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:40)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:28)
        at org.gradle.internal.execution.impl.DefaultWorkExecutor.execute(DefaultWorkExecutor.java:33)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:192)
        ... 123 more
Caused by: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/bin/javadoc'' finished with non-zero exit value 1
        at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:417)
        at org.gradle.process.internal.DefaultExecAction.execute(DefaultExecAction.java:38)
        at org.gradle.api.tasks.javadoc.internal.JavadocGenerator.execute(JavadocGenerator.java:53)
        ... 191 more


* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/6.3/userguide/command_line_interface.html#sec:command_line_warnings

BUILD FAILED in 12s
17 actionable tasks: 16 executed, 1 up-to-date
```

Any help on how to fix this issue would be great. If you need any more info from me please let me know. I'm rather new to working with Java applications so I'm not sure what debugging info would be useful to you. Thanks!

Sincerely,
thank_you""Seems to be this https://stackoverflow.com/questions/52701459/i-cant-use-postconstruct-and-postdestroy-with-java-11. May require an explicit dep for the annotations post Java 11 (I see you're on 13). =||= @troshko111,

I'll take a look further and see if I can come up with anything. Thanks for the help! =||= I am able to successfully pass this particular test after following the instructions in the Stackoverflow answer. However, I'm running into other issues such as flaky tests. For now I'm going to close this issue and if need be introduce a new issue. Thanks for the help. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1376Make eureka instance config namespace configurableLing Yuanfiibbb01/14/21, 12:34:29 AM"Make eureka instance config namespace configurable. This allow us to use `CustomAmazonInfoProviderInstanceConfigFactory` the same way as `CompositeInstanceConfigFactory`.

Specifically, when we use `CompositeInstanceConfigFactory`, we can override the config namespace for which `InstaceConfig` reads its data from, using DI. Within Netflix this is overridden from `eureka` to `netflix.appinfo`. In `CustomAmazonInfoProviderInstanceConfigFactory`, however, this config namespace was previously hardcoded, causing test failures."NaNMake eureka instance config namespace configurableLing Yuanfiibbb01/14/21, 12:34:29 AM"Make eureka instance config namespace configurable. This allow us to use `CustomAmazonInfoProviderInstanceConfigFactory` the same way as `CompositeInstanceConfigFactory`.

Specifically, when we use `CompositeInstanceConfigFactory`, we can override the config namespace for which `InstaceConfig` reads its data from, using DI. Within Netflix this is overridden from `eureka` to `netflix.appinfo`. In `CustomAmazonInfoProviderInstanceConfigFactory`, however, this config namespace was previously hardcoded, causing test failures."NaNLing01/13/21, 08:00:05 PMMake eureka instance config namespace configurable1
1377Updates xstream to 1.4.15Spencer Gibbspencergibb01/20/21, 05:27:39 PMNaNNaNUpdates xstream to 1.4.15Spencer Gibbspencergibb01/20/21, 05:27:39 PMNaNNaNspencergibb01/20/21, 03:41:10 PMUpdates xstream to 1.4.151
1378Time for next generation Eureka?sagaholy1234504/13/21, 06:15:55 PM"This is an open discuss. I am curious whether there are plans for the next generation of eureka recently. Or we can contribute to the next generation of eureka with the help of the community and during the process of contribution, we can get some help from Netflix experts.

thanks for any reply : )"We can have a conversation in #1272. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1379Registration status 204Jasper Jijasper200711102/08/21, 06:58:47 AM"![image](https://user-images.githubusercontent.com/3945486/107169769-a4f19100-69f9-11eb-8aa3-ae219d1690c5.png)
run windows server 2012, ip address add underscore，so eureka client Registration status 204. run CentOS ok. why？""eureka:
  instance:
    preferIpAddress: true =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1380Upgrade nebula.netflixoss to replace bintray publication and update TravisCI SecretsRoberto Perez Alcolearpalcolea03/03/21, 11:51:11 PM"Hi folks,

As you might be aware, JFrog is sunsetting Bintray and JCenter: https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/

This upgrades to Nebula NetflixOSS which will publish to Nebula's OSS repos and Maven Central.

Repositories based on status:

* https://netflixoss.jfrog.io/artifactory/maven-oss-snapshots
* https://netflixoss.jfrog.io/artifactory/maven-oss-candidates
* https://netflixoss.jfrog.io/artifactory/maven-oss-releases
""I can do a release (there are unreleased changes) to try this out, would appreciate if you could help verify. =||= yeah that makes sense, I can verify that everything goes as expected =||= @rpalcolea kicked off https://github.com/Netflix/eureka/releases/tag/v1.10.13 =||= Alright I see https://repo1.maven.org/maven2/com/netflix/eureka/eureka-core/1.10.13/  in maven central

and also in our repo: https://repo1.maven.org/maven2/com/netflix/eureka/eureka-core/1.10.13/ 

Same for other modules such as:

https://repo1.maven.org/maven2/com/netflix/eureka/eureka-server/1.10.13/
https://repo1.maven.org/maven2/com/netflix/eureka/eureka-client/1.10.13/ =||= "Upgrade nebula.netflixoss to replace bintray publication and update TravisCI SecretsRoberto Perez Alcolearpalcolea03/03/21, 11:51:11 PM"Hi folks,

As you might be aware, JFrog is sunsetting Bintray and JCenter: https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/

This upgrades to Nebula NetflixOSS which will publish to Nebula's OSS repos and Maven Central.

Repositories based on status:

* https://netflixoss.jfrog.io/artifactory/maven-oss-snapshots
* https://netflixoss.jfrog.io/artifactory/maven-oss-candidates
* https://netflixoss.jfrog.io/artifactory/maven-oss-releases
"NaNRoberto Perez Alcolea03/03/21, 10:18:42 PMUpgrade nebula.netflixoss to replace bintray publication and update TravisCI secrets1
1381Replace jcenter with maven centralRoberto Perez Alcolearpalcolea03/18/21, 10:04:58 PM"This replaces jcenter with maven central to avoid broken builds in the future
"NaNReplace jcenter with maven centralRoberto Perez Alcolearpalcolea03/18/21, 10:04:58 PM"This replaces jcenter with maven central to avoid broken builds in the future
"NaNNaNNaNNaN1
1382Ignore interfaces in eureka serviceRicardo LegorretaRex-Legor06/09/21, 06:13:40 PM"**Is this a bug: No, just a question, possibly a new feature suggestion**

**Problem:**
is there a way to ignore or exclude clients in my eureka server based on their ip address? or something like this?

currently we have 100+ services up and running connecting to different eureka servers,
and we would like to avoid registering client services if they are running locally,
since we have a lot of services with a lot of people working with them removing their `@EnableEurekaClient` annotation every time we run it locally can be annoying, or any similar workaround.

**So I'm looking for a way to prevent services from getting registered in the eureka server by modifying my eureka server, not my clients,**

Thanks."If the config can be flexed locally, the `eureka.registration.enabled` property can be used to skip client registration. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1383Update ResolverUtils::randomizeJacques-Etienne Beaudetjebeaudet04/13/21, 05:53:49 PM"The method will now properly randomize a list with a different result on each invocation. Using a constant seed made the same list of `[""a"",""b"",""c""]` always ""randomized"" to the same result on each invocation.

Since `SessionedEurekaHttpClient` is supposed to round robin through the different eureka endpoints at a configurable interval, having a randomize method that always returns the same value render this class useless.

Thanks"Thanks! =||= Update ResolverUtils::randomizeJacques-Etienne Beaudetjebeaudet04/13/21, 05:53:49 PM"The method will now properly randomize a list with a different result on each invocation. Using a constant seed made the same list of `[""a"",""b"",""c""]` always ""randomized"" to the same result on each invocation.

Since `SessionedEurekaHttpClient` is supposed to round robin through the different eureka endpoints at a configurable interval, having a randomize method that always returns the same value render this class useless.

Thanks"NaNJacques-Etienne Beaudet03/23/21, 08:11:04 PM"Update ResolverUtils::randomize

The method will now properly randomize a list with a different result on each invocation."1
1384eureka-client: JsonParseException while getAndStoreFullRegistry() triggered by contextRefresherjianbo-chen04/14/21, 02:21:37 AM"env and dependence desc

- eureka-client version: 1.4.5.RELEASE

- JDK version: 1.8.202

- spring-cloud-netflix-eureka-client version: 2.1.0.RELEASE

On eureka-server side  we have 2 servers and they belong to a same zone ;

it happened about 5 times exception in this month, 
we found some errors from logs ,  DiscoveryClient tried both 2 eureka-server but it both tuned out to print this error log.

this is the one of  exception messages :
![image](https://user-images.githubusercontent.com/23950694/112313094-72b69d00-8ce2-11eb-8f78-36f962832f79.png)

according to this error log, it happens on this line of code :
eureka/eureka-client/com.netflix.discovery/DiscoveryClient.java
Line 1050 

this error doesn't always get thrown , so we are unable to debug locally. 

according to the error logs on prod envirement,
we found out that the error hadn't happened, however, while we push the apollo(https://github.com/ctripcorp/apollo) configs which we have written a refreshListener to refresh config bean, the error may happen. The codes of the Listener are shown below:
![image](https://user-images.githubusercontent.com/23950694/112314097-94fcea80-8ce3-11eb-9c65-2d71e0f2f826.png)

this refresh event would refresh the DiscoveryClient bean and sometimes
would throw the JsonParseException while request the fullRegistry.

Can you please advice me, are we doing something wrong or could this be a bug?






""It gets aborted if loading the full Discovery state and parsing it takes over 30s (the default value I believe), so you need to hunt down whatever is causing this to be so slow (local CPU thrashing, slow network, etc.) =||= > It gets aborted if loading the full Discovery state and parsing it takes over 30s (the default value I believe), so you need to hunt down whatever is causing this to be so slow (local CPU thrashing, slow network, etc.)

Thanks for your answer,  we added an monitor to eureka server  and  upgraded my eureka server version to 2.1.0.RELEASE  which is the same as client eureka version, then this error has never showed again for now. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1385High Severity Vulnerability in xstream-1.4.15.jar张逸扬gdut-yy03/31/21, 05:52:58 PM"https://github.com/Netflix/eureka/blob/master/eureka-client/build.gradle#L10

- CVE-2021-21341: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject a manipulated ByteArrayInputStream (or derived class), that can cause an endless loop resulting in a denial of service.
- CVE-2021-21342: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in a server-side forgery request.
- CVE-2021-21343: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in the deletion of a file on the local host.
- CVE-2021-21344: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of arbitrary code loaded from a remote server.
- CVE-2021-21345: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of a local command on the server.
- CVE-2021-21346: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of arbitrary code loaded from a remote server.
- CVE-2021-21347: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of arbitrary code loaded from a remote server.
- CVE-2021-21348: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in executed evaluation of a malicious regular expression causing a denial of service.
- CVE-2021-21349: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in a server-side forgery request.
- CVE-2021-21350: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in an arbitrary code execution.
- CVE-2021-21351: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of arbitrary code loaded from a remote server.

The proposed solution is to upgrade xstream to version **1.4.16**"http://x-stream.github.io/changes.html =||= CVSS ranges: 0-3.9 minor, 4.0-6.9 major and 7.0-10.0 critical =||= Thanks for doing this, merged, closing this now. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1386Upgrade xstream-1.4.15 to 1.4.16 for CVE-2021-213{41-51}.张逸扬gdut-yy03/31/21, 05:52:07 PM"Upgrade xstream-1.4.15 to 1.4.16 for CVE-2021-213{41-51}.

issue https://github.com/Netflix/eureka/issues/1385"NaNUpgrade xstream-1.4.15 to 1.4.16 for CVE-2021-213{41-51}.张逸扬gdut-yy03/31/21, 05:52:07 PM"Upgrade xstream-1.4.15 to 1.4.16 for CVE-2021-213{41-51}.

issue https://github.com/Netflix/eureka/issues/1385"NaN张逸扬03/31/21, 01:42:56 AM"Upgrade xstream-1.4.15 to xstream-1.4.16

Upgrade xstream-1.4.15 to xstream-1.4.16"1
1388Upgrade Jackson to the next open branch 2.10AmitAmar05/18/21, 09:04:33 PMNaN"That's 3 branches up, which includes quite a few changes, it'd need to have some wider validation. Is staying on `2.9.x` viable for you? =||= Hi,

Thanks for your reply.

Unfortunately,  I didn't understand your question.

I had upgrade the jackson version from: 2.9.10 --> 2.12.3 because some
vulnerability (according to WhiteSource)

[image: image.png]

Can you please explain yourself?

Thanks and have a nice day,

Amit.

‫בתאריך יום ב׳, 17 במאי 2021 ב-19:59 מאת ‪troshko111‬‏ <‪
***@***.***‬‏>:‬

> That's 3 branches up, which includes quite a few changes, it'd need to
> have some wider validation. Is staying on 2.9.x viable for you?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/Netflix/eureka/pull/1388#issuecomment-842483883>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AJVF7DE6W6JX7VPZZ62HOY3TOFDOVANCNFSM425CHOIQ>
> .
>
 =||= Sure, so Jackson has a number of ""branches"" in development, which differ in behavior (mostly minor but noticeable), see https://github.com/FasterXML/jackson/wiki/Jackson-Releases

We're on `2.9` branch which is closed so won't get new vulnerability patches, meaning we need to move on, agreed. But in your PR you're skipping through https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.10#changes-compatibility and https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.11 completely - note the list of changes and incompatibilities.

What I'm saying, the users or even Eureka may not work as expected and we need to double check those changes / compatibilities don't break anything.

It may be easier to do one step at a time, and move to `2.10` branch instead (it should have the patches for the current CVEs), and only verify that branch changes don't break anything, then in the future we can move to `2.11` and so on (until we're current).

Does it make sense? =||= Hi there,

Thank you for your explanation. Yes it makes sense to upgrade to 2.10
instead of 2.13. you're right.

Can you please change it or I'll send a new PR?

Thank you and have a nice day,

Amit.

‫בתאריך יום ג׳, 18 במאי 2021 ב-0:45 מאת ‪troshko111‬‏ <‪
***@***.***‬‏>:‬

> Sure, so Jackson has a number of ""branches"" in development, which differ
> in behavior (mostly minor but noticeable), see
> https://github.com/FasterXML/jackson/wiki/Jackson-Releases
>
> We're on 2.9 branch which is closed so won't get new vulnerability
> patches, meaning we need to move on, agreed. But in your PR you're skipping
> through
> https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.10#changes-compatibility
> and https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.11
> completely - note the list of changes and incompatibilities.
>
> What I'm saying, the users or even Eureka may not work as expected and we
> need to double check those changes / compatibilities don't break anything.
>
> It may be easier to do one step at a time, and move to 2.10 branch
> instead (it should have the patches for the current CVEs), and only verify
> that branch changes don't break anything, then in the future we can move to
> 2.11 and so on (until we're current).
>
> Does it make sense?
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/Netflix/eureka/pull/1388#issuecomment-842662882>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AJVF7DHI6RO67T3UN7LGOLLTOGE7ZANCNFSM425CHOIQ>
> .
>
 =||= Keep the PR, feel free to push a new commit. =||= Superseded by #1393. =||= Done :)

https://github.com/Netflix/eureka/pull/1395

BR,

Amit.

‫בתאריך יום ג׳, 18 במאי 2021 ב-22:06 מאת ‪troshko111‬‏ <‪
***@***.***‬‏>:‬

> Keep the PR, feel free to push a new commit.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/Netflix/eureka/pull/1388#issuecomment-843458151>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AJVF7DDNTJ6YR4I6OLENM5TTOK3EBANCNFSM425CHOIQ>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1390 remove  Response's Status magic varYangdaidai06/30/21, 04:20:56 PM remove  Response's Status magic varSeems reasonable, but can you please split into 2 PRs? The changes seems unrelated right now. =||= The `getReponse` refactoring is still in, can you submit a separate PR for the constants, and the refactoring please? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1393Update Jackson to 2.10 branchtroshko11105/18/21, 09:24:40 PMNaNAddresses Jackson part of #1387. =||= Update Jackson to 2.10 branchtroshko11105/18/21, 09:24:40 PMNaNNaNTaras Roshko05/18/21, 09:03:05 PMUpdate Jackson to 2.10 branch1
1394Upgrade jackson version to:2.11.4 . (Previous was: 2.10.5)AmitAmar05/19/21, 11:03:59 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1395Upgrade jackson version to: 2.10.5. (Previous was: 2.9.10)AmitAmar05/20/21, 08:45:02 PMNaN"I already merged this yesterday, see https://github.com/Netflix/eureka/commit/4d1cc8077922bdeb9ef0762681be36ac22316028

You need to fetch origin and rebase, you have a stale tree. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1396High Severity Vulnerability in xstream-1.4.16.jar张逸扬gdut-yy05/21/21, 11:46:18 PM"https://github.com/Netflix/eureka/blob/4d1cc8077922bdeb9ef0762681be36ac22316028/eureka-client/build.gradle#L10

CVE-2021-29505: The processed stream at unmarshalling time contains type information to recreate the formerly written objects. XStream creates therefore new instances based on these type information. An attacker can manipulate the processed input stream and replace or inject objects, that result in execution of a local command on the server.

The proposed solution is to upgrade xstream to version 1.4.17""CVE-2021-29505 POC: http://x-stream.github.io/CVE-2021-29505.html

Credits: V3geB1rd, white hat hacker from Tencent Security Response Center found and reported the issue to XStream and provided the required information to reproduce it. =||= Thanks for the report and for the fix, appreciate it. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1397Upgrade xstream-1.4.16 to 1.4.17 for CVE-2021-29505.张逸扬gdut-yy05/21/21, 11:39:47 PM"Upgrade xstream-1.4.16 to 1.4.17 for CVE-2021-29505.

https://github.com/Netflix/eureka/issues/1396""Please use ""Squash Merge"", I can only commit one file at a time to the GitHub Web page.  =||= "Upgrade xstream-1.4.16 to 1.4.17 for CVE-2021-29505.张逸扬gdut-yy05/21/21, 11:39:47 PM"Upgrade xstream-1.4.16 to 1.4.17 for CVE-2021-29505.

https://github.com/Netflix/eureka/issues/1396"NaN张逸扬05/21/21, 06:42:43 AM"Upgrade xstream-1.4.16 to 1.4.17

Upgrade xstream-1.4.16 to 1.4.17 for CVE-2021-29505."1
1398After instance is registered with OUT_OF_SERVICE, following UP hartbeats are ignoredOlga Maciaszek-SharmaOlgaMaciaszek05/25/21, 10:31:17 PMWe've had [this issue](https://github.com/spring-cloud/spring-cloud-netflix/issues/3941) created in Spring Cloud Netflix. The root cause seems to be that after the service registers with `OUT_OF_SERVICE` any following `UP` heartbeats are being ignored (see [comment](https://github.com/spring-cloud/spring-cloud-netflix/issues/3941#issuecomment-747322635)). This is not a bug, but an invalid transition performed by the Eureka client, the client may not report this status itself, it's a reserved server status, have the client report `STARTING -> UP` to signal readiness, see more detailed description in the linked issue. Closing. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1401Update AbstractJerseyEurekaHttpClient log infoiZDTizdt06/09/21, 05:45:32 PM"serviceUrl has been add ""/"" at the end by org.springframework.cloud.netflix.eureka.EurekaClientConfigBean#getEurekaServerServiceUrls.

```
if (!endsWithSlash(eurekaServiceUrl)) {
	eurekaServiceUrl += ""/"";
}
```

fix the log of  ""eureka//apps""..."Thanks. =||= Update AbstractJerseyEurekaHttpClient log infoiZDTizdt06/09/21, 05:45:32 PM"serviceUrl has been add ""/"" at the end by org.springframework.cloud.netflix.eureka.EurekaClientConfigBean#getEurekaServerServiceUrls.

```
if (!endsWithSlash(eurekaServiceUrl)) {
	eurekaServiceUrl += ""/"";
}
```

fix the log of  ""eureka//apps""..."NaNiZDT06/06/21, 01:29:45 AM"Update AbstractJerseyEurekaHttpClient log info

serviceUrl has been add ""/"" at the end by org.springframework.cloud.netflix.eureka.EurekaClientConfigBean#getEurekaServerServiceUrls.

```
if (!endsWithSlash(eurekaServiceUrl)) {
	eurekaServiceUrl += ""/"";
}
```

fix the log of  ""eureka//apps""..."1
1402allow null values for healthcheckSergey Krutskokrutsko06/11/21, 04:46:58 PM"This change is needed to allow override `getHealthCheckUrl()` in InstanceConfig class, so `healthCheckUrl` won't be added to instance info of eureka registry.

i.e. 
```
    @Override
    public String getHealthCheckUrl() {
        return null;
    }
```"NaNallow null values for healthcheckSergey Krutskokrutsko06/11/21, 04:46:58 PM"This change is needed to allow override `getHealthCheckUrl()` in InstanceConfig class, so `healthCheckUrl` won't be added to instance info of eureka registry.

i.e. 
```
    @Override
    public String getHealthCheckUrl() {
        return null;
    }
```"NaNSergey Krutsko06/11/21, 08:17:27 AMallow null values for healthcheck1
1403Upgrade xstream version from: 1.4.16 to 1.4.17 and jacksonAmitAmar06/15/21, 06:52:37 AMNaN"We already had this discussion here https://github.com/Netflix/eureka/pull/1388
unsure what you're trying to merge? We agreed to not to move multiple dev branches up? Please provide more context. =||= Hi @troshko111 ,

I remember our conversation. I thought you don't want to move multiple dev branches up just one time before your last release. 
I'm sorry. I'll create a new merge request.

BR,

Amit. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1404Upgrade jacksonVersion and xstream.AmitAmar06/17/21, 08:55:41 AMNaNThis is now a no-op after the rebase on top of the origin/master, do you want to close it now? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1405refactor: use diamond operatorGregor Rieglergregorriegler06/16/21, 11:07:13 PMCo-authored-by: Moderne <team@moderne.io>Ok, I went through the changes and reverted the ones where no type-info was left. =||= refactor: use diamond operatorGregor Rieglergregorriegler06/16/21, 11:07:13 PMCo-authored-by: Moderne <team@moderne.io>NaNGregor Riegler06/16/21, 09:39:05 PMrefactor: use diamond operator1
1406Upgrade xstreamAmitAmar06/17/21, 04:45:33 PMNaN"This is already at `1.4.17`, see https://github.com/Netflix/eureka/blob/master/eureka-client/build.gradle#L10

Please make sure to rebase on top of origin/master before submitting a PR. =||= Sorry for that. problems with git.
Thanks and have a nice day,
BR,
Amit. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1409fix jackson version - WS.AmitAmar06/23/21, 08:20:16 AMNaN"Jackson is a big transitive dependency, I'm inclined to move slower here than 2 branches up. This also needs some validation to make sure nothing breaks. What's your motivation to move to this version? =||= Hi @troshko111 .

I'm inclined to move faster in Jackson versions because there are a lot of vulnerabilities in Jackson.

We are using WhiteSource and it seems we need to upgrade to the latest version of Jackson.

In our system we already done this upgrade, we want to upgrade Jackson in Eureka as well.

Let me know if you see any problem with that. you want to wait some time for testing?

BR,

Amit. =||= I'd expect a change like this to land in a new minor (1.11.x) =||= This is your decision of course,
I think we should fix it soon as possible but if it risky from your side I'll close the PR.

Thanks,

Amit. =||= > I'm inclined to move faster in Jackson versions because there are a lot of vulnerabilities in Jackson.

Jackson backports vuln fixes, is there anything in particular?

> In our system we already done this upgrade, we want to upgrade Jackson in Eureka as well.

You can always force a different Jackson version in your built, irrespecutful of what Eureka version is, right?

> I think we should fix it soon as possible but if it risky from your side I'll close the PR.

Again I agree we want vulns patches, but based on my understanding 2.10 is still being security patched:

```
2.10: nominally open branch but unlikely to get new full patches beyond 2.10.5
Micro-patches possible for critical fixes like security patches
```

from https://github.com/FasterXML/jackson/wiki/Jackson-Releases

We can move up to `2.11` once security patches stop coming to `2.10`, that's what we did before, makes sure we're both patched and minimally depending.  =||= Hi,

After checking it again you are right and it seems that 2.10 is safe to use.
I'll upgrade it again in the future if it will be necessary.

Thanks again and have a nice day,
Amit.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1411Refactor: use diamond operatorAravindh Rajagopalanschrosolver06/26/21, 12:40:33 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1412Refactor: use diamond operatorAravindh Rajagopalanschrosolver06/30/21, 06:17:58 AMNaN"Just FYI that these sort of changes are best to do in one go, I'd like to avoid a large number of PRs with the same logical change as it negatively affects the history. Thanks! =||= > Just FYI that these sort of changes are best to do in one go, I'd like to avoid a large number of PRs with the same logical change as it negatively affects the history. Thanks!

Thanks! Will keep this in mind. Checked the last merged PR and saw there were few misses, so thought will add them too.  =||= "Refactor: use diamond operatorAravindh Rajagopalanschrosolver06/30/21, 06:17:58 AMNaNNaNschrosolver06/26/21, 12:43:12 PMRefactor: use diamond operator1
1413Refactor: Replaced redundant String BlankorNull checksAravindh Rajagopalanschrosolver06/26/21, 01:23:02 PMReplaced redundant null or blank checks by adding a method for check in StringUtils and calling it.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1415refactor: JUnit Jupiter migration from JUnit 4.xJonathan Schneiderjkschneider08/12/21, 06:12:29 PM"👋 This PR will get you most of the way there to JUnit 5 from JUnit 4. We'd just need to migrate `DiscoveryClientResource` and `SimpleEurekaHttpServerResource` which don't have direct analogs in JUnit 5. Shouldn't be very difficult to complete from here, but hopefully this takes away most of the grueling work.

Co-authored-by: Moderne <team@moderne.io>""This looks pretty harmless / low risk, but at the same time I wonder what the benefits are? =||= Hi @troshko111. Just trying to help so Eureka isn't built on a stale unsupported core testing framework? Feel free to close if you wish. =||= I went over the PR and it looks good to me, I don't really see any issue with using `JUnit 4` regardless of its support status as it's not part of the running service, so there's no risk of CVEs and such, basically it does not matter how (un)supported it is, it works just fine. 

Given the number of new tests written, and potential benefit of using the new `JUnit` version there, such effort is unlikely to ever pay off, but it's already done so why not. Re-running and merging if all passes.  =||= Oh I see what you meant in the original PR message, this _does require changes before it can land_ (it does not compile as-is due to those two types not being migrated). In this case I can keep it open in case you / anyone else wants to drive it past the finish line, but I don't remember anyone expressing interest before, so if you won't be getting it into a mergeable state, I will probably close. =||= Feel free to close. It's a disappointing attitude toward the codebase, to be honest, and adds to the feeling that Eureka may be barely maintained. I thought having done most of the heavy lifting, it would be an easy win. =||= It's unfortunate you feel this way, but in general we prefer _compiling PRs_ (all checks must pass), if this was a high value change I could see us taking it from here, but per my earlier response the value is debatable plus this does not compile, so closing. In the future, one easy way to avoid this situation is to open an issue first, have a discussion and alignment, and only then proceed with heavy lifting, once it's clear the change/scope is agreed upon. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1416访问eureka主页出现Whitelabel Error PageRadioactive82108/03/21, 05:43:06 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1417Enable setting a EurekaClient instance in DiscoveryManagerAsi Brossasibross08/05/21, 09:17:27 PMNaNNaNEnable setting a EurekaClient instance in DiscoveryManagerAsi Brossasibross08/05/21, 09:17:27 PMNaNNaNAsi Bross08/05/21, 09:14:23 PMUpdate method naming to better show intent1
1418Remove TravisCI and use Github ActionsRoberto Perez Alcolearpalcolea08/17/21, 06:47:55 PMNaNNaNRemove TravisCI and use Github ActionsRoberto Perez Alcolearpalcolea08/17/21, 06:47:55 PMNaNNaNRoberto Perez Alcolea08/17/21, 06:35:53 PMRemove TravisCI and use Github Actions1
1420Fix xstream security issue CVE-2021-39139chi-chi wengwcc52608/23/21, 04:51:19 PM"Fix xstream security issue CVE-2021-39139

https://x-stream.github.io/security.html"Thanks, merged. =||= Fix xstream security issue CVE-2021-39139chi-chi wengwcc52608/23/21, 04:51:19 PM"Fix xstream security issue CVE-2021-39139

https://x-stream.github.io/security.html"NaNchi-chi weng08/23/21, 09:33:00 AM"Fix xstream security issue CVE-2021-39139

Fix xstream security issue CVE-2021-39139

https://x-stream.github.io/security.html"1
1421Xstream deserialization vulnerability existsLvK808/23/21, 04:51:45 PM"XStream all versions until and including version 1.4.17 are affected, if using the version out of the box. The latest version of Eureka-client uses XStream 1.4.17. This version has CVE-2021-39141 vulnerability. Please fix it immediately!
https://x-stream.github.io/CVE-2021-39141.html
https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/converters/EntityBodyConverter.java
https://github.com/Netflix/eureka/blob/master/eureka-client/build.gradle""Can I submit this vulnerability to Bugcrowd and apply for CVE? =||= Do you mean apply for a CVE in Eureka due to its dependency on a library which is known to have the actual CVE itself? I have not seen this commonly done tbh, otherwise pretty much all software will transitively be vulnerable at some version via some direct/indirect dependency.  =||= Thank you very much for your advice, but eureka does have this security vulnerability, can I submit this vulnerability on Bugcrowd? =||= There are two things here, one is Bugcrowd usage in general:

1. Typically we do accept issues for our OSS projects in Bugcrowd. Specifically for this issue it was reported prior to you sending it to us here, and we only reward the first reporter. In the future, we encourage you to send issues directly to Bugcrowd and we'll evaluate them against our program's criteria.

Second is regarding CVEs for outdated libs being used:

2. As for CVEs we don't typically create them for out of date libraries we use like this, but depending on the vulnerability, we do create them for issues in our own code.

Thanks again and we hope to see your future submissions on Bugcrowd. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1423Action execution failed Parameters:usman naeemusmanbinnaeem08/30/21, 03:31:34 PM"Hey!  I created a pipeline for my cdk-backend in which i am using APIGateway, lambda functions and dynamodb.
I am getting this error in my deploying stage:

Action execution failed
Parameters: [AssetParameters74e1c940fa063c9ea88baaaa5bc6287dd4ee1ff6bb7cd9c66f2afb92067be00dS3Bucket3DC33554, AssetParameters74e1c940fa063c9ea88baaaa5bc6287dd4ee1ff6bb7cd9c66f2afb92067be00dS3VersionKey27AA43A8, AssetParameters74e1c940fa063c9ea88baaaa5bc6287dd4ee1ff6bb7cd9c66f2afb92067be00dArtifactHash4EED51D1] must have values (Service: AmazonCloudFormation; Status Code: 400; Error Code: ValidationError; Request ID: 8733cfcc-6c3f-4260-a968-9ecb546c972a; Proxy: null)


![Screenshot from 2021-08-30 14-27-42](https://user-images.githubusercontent.com/61014982/131318253-5b06a01d-5cc8-40a1-924a-5eb8d2c03efd.png)
![Screenshot from 2021-08-30 14-28-03](https://user-images.githubusercontent.com/61014982/131318261-1ae5f5ee-cc6d-4626-9673-04fcabc28c4a.png)
"I don't see how this is related to Eureka, and even if this were, given 0 details it won't be possible to help. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
