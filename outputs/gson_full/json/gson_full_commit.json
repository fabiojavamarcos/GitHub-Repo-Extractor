[["Jake Wharton", "Correct 'user guide' and 'design document' Markdown links.", "04/13/15, 04:22:11 PM", "Jake Wharton", "35bf3a9e03d16c043e3924a156243561e6694de3", ["README.md"], "@@ -16,9 +16,9 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n *Gson Documentation*\n   * Gson [API](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html): Javadocs for the current Gson release\n-  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide user guide): This guide contains examples on how to use Gson in your code.\n+  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://sites.google.com/site/gson/gson-roadmap): Details on upcoming releases \n-  * Gson [design document](https://sites.google.com/site/gson/gson-design-document design document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [design document](https://sites.google.com/site/gson/gson-design-document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n , ", 2, 2, "\"modified, \"", 4], ["Sebastian Chlan", "FieldNamingPolicy: Use Locale.ENGLISH to be locale insensitive", "06/09/15, 02:17:08 PM", "Sebastian Chlan", "6e57df7e9648f4a48b500ac9a181a058829bcee1", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java"], "@@ -17,6 +17,7 @@\n package com.google.gson;\n \n import java.lang.reflect.Field;\n+import java.util.Locale;\n \n /**\n  * An enumeration that defines a few standard naming conventions for JSON field names.\n@@ -88,7 +89,7 @@ public String translateName(Field f) {\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"_\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"_\").toLowerCase(Locale.ENGLISH);\n     }\n   },\n \n@@ -111,7 +112,7 @@ public String translateName(Field f) {\n    */\n   LOWER_CASE_WITH_DASHES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"-\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n   };\n , ", 3, 2, "\"modified, \"", 5], ["Jake Wharton", "There is no I/O writing to a StringWriter.", "06/18/15, 02:00:03 AM", "Jake Wharton", "032847976c0cba7c131e95aa6608882987f1eca8", ["gson/src/main/java/com/google/gson/TypeAdapter.java"], "@@ -211,9 +211,13 @@ public final void toJson(Writer out, T value) throws IOException {\n    * @param value the Java object to convert. May be null.\n    * @since 2.2\n    */\n-  public final String toJson(T value) throws IOException {\n+  public final String toJson(T value) {\n     StringWriter stringWriter = new StringWriter();\n-    toJson(stringWriter, value);\n+    try {\n+      toJson(stringWriter, value);\n+    } catch (IOException e) {\n+      throw new AssertionError(e); // No I/O writing to a StringWriter.\n+    }\n     return stringWriter.toString();\n   }\n , ", 6, 2, "\"modified, \"", 8], ["Jake Wharton", "Add Travis CI build.", "06/18/15, 02:10:06 AM", "Jake Wharton", "cd38056e1f18c0e06a5a58ee01eed39bb7c125e1", [".travis.yml"], "@@ -0,0 +1,21 @@\n+language: java\n+\n+jdk:\n+  - oraclejdk7\n+  - oraclejdk8\n+\n+install: mvn -f gson install -DskipTests=true\n+script: mvn -f gson test\n+\n+branches:\n+  except:\n+    - gh-pages\n+\n+notifications:\n+  email: false\n+\n+sudo: false\n+\n+cache:\n+  directories:\n+    - $HOME/.m2, ", 21, 0, "\"added, \"", 21], ["Jake Wharton", "Add gitignore for Maven, Eclipse, IDEA, and OSX files.", "06/18/15, 02:32:15 PM", "Jake Wharton", "e914de082ba3305879d71864e1b69fe9c2f9c61d", [".gitignore"], "@@ -0,0 +1,16 @@\n+.classpath\n+.project\n+.settings\n+eclipsebin\n+\n+target\n+pom.xml.*\n+release.properties\n+\n+.idea\n+*.iml\n+*.ipr\n+*.iws\n+classes\n+\n+.DS_Store, ", 16, 0, "\"added, \"", 16], ["Stefan Ferstl", "Add a JSR-305 @ThreadSafe annotation to the Gson class\n\n- Add an optional dependency to com.google.code.findbugs:jsr305.\n  The optional scope is used in order to avoid introducing a new\n  transitive dependency to the jsr305 library. This is fine because the \n  @ThreadSafe annotation has only a documentary purpose and it is not\n  retained at runtime.\n- Annotate the Gson class as @ThreadSafe\n\nFixes Issue #613", "07/13/15, 04:34:38 PM", "Stefan Ferstl", "82edd57205fe48015f81b2986f27856cb9f7fb29", ["gson/pom.xml", "gson/src/main/java/com/google/gson/Gson.java"], "@@ -49,6 +49,12 @@\n     <url>http://www.google.com</url>\n   </organization>\n   <dependencies>\n+    <dependency>\n+      <groupId>com.google.code.findbugs</groupId>\n+      <artifactId>jsr305</artifactId>\n+      <version>3.0.0</version>\n+      <optional>true</optional>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>, @@ -31,6 +31,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.annotation.concurrent.ThreadSafe;\n+\n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n import com.google.gson.internal.Primitives;\n@@ -96,6 +98,7 @@\n  * @author Joel Leitch\n  * @author Jesse Wilson\n  */\n+@ThreadSafe\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n , ", 9, 0, "\"modified, modified, \"", 9], ["Adam Tanner", "JsonWriter#jsonValue writes raw JSON values.\n\nAdd a jsonValue(String value) method that takes a raw JSON string that\ncan be used to write the string directly to the underlying writer\nwithout modification.\n\nThe intended use case for this is when building JSON that contains a\npre-serialized JSON string as a value in an object or array.", "07/19/15, 07:46:26 PM", "Adam Tanner", "f7abd59a3b349d5c926507705f439afff54ed301", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -420,6 +420,23 @@ public JsonWriter value(String value) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * Writes {@code value} directly to the writer without quoting or\n+   * escaping.\n+   *\n+   * @param value the literal string value, or null to encode a null literal.\n+   * @return this writer.\n+   */\n+  public JsonWriter jsonValue(String value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue(false);\n+    out.append(value);\n+    return this;\n+  }\n+\n   /**\n    * Encodes {@code null}.\n    *, @@ -126,6 +126,18 @@ public void testNullStringValue() throws IOException {\n     assertEquals(\"{\\\"a\\\":null}\", stringWriter.toString());\n   }\n \n+  public void testJsonValue() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginObject();\n+    jsonWriter.name(\"a\");\n+    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\n+    jsonWriter.name(\"c\");\n+    jsonWriter.value(1);\n+    jsonWriter.endObject();\n+    assertEquals(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\", stringWriter.toString());\n+  }\n+\n   public void testNonFiniteDoubles() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);, ", 29, 0, "\"modified, modified, \"", 29], ["Adam Tanner", "Replace localhost lookup with static IP to fix test.\n\nCalling InetAddress.getLocalHost() will cause a lookup to occur that may\nfail with a java.net.UnknownHostException if the system the test is\nrunning on is not configured correctly.\n\nThis is often fixed by echoing \"127.0.0.1 $HOSTNAME\" to /etc/hosts, but\nin this case it seems easier to pick a static IP string to avoid the\nlookup entirely and prevent false negatives in the test.", "07/20/15, 09:01:45 PM", "Adam Tanner", "457541611c0f95979ab6b9227fc688730439f2d6", ["gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java"], "@@ -35,11 +35,11 @@ protected void setUp() throws Exception {\n   }\n   \n   public void testInetAddressSerializationAndDeserialization() throws Exception {\n-    InetAddress localhost = InetAddress.getLocalHost();\n-    String localInetAddress = gson.toJson(localhost);\n-    assertEquals(\"\\\"\" + localhost.getHostAddress() + \"\\\"\", localInetAddress);\n+    InetAddress address = InetAddress.getByName(\"8.8.8.8\");\n+    String jsonAddress = gson.toJson(address);\n+    assertEquals(\"\\\"8.8.8.8\\\"\", jsonAddress);\n     \n-    InetAddress value = gson.fromJson(localInetAddress, InetAddress.class);\n-    assertEquals(localhost, value);\n+    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);\n+    assertEquals(value, address);\n   } \n }, ", 5, 5, "\"modified, \"", 10], ["Adam Tanner", "Change references to Google Code to Github.", "07/20/15, 09:01:05 PM", "Adam Tanner", "2b67815808defd74e84195cb70e9ac2afac45664", ["gson/pom.xml"], "@@ -11,7 +11,7 @@\n     <artifactId>oss-parent</artifactId>\n     <version>9</version>\n   </parent>\n-  <url>http://code.google.com/p/google-gson/</url>\n+  <url>https://github.com/google/gson</url>\n   <description>Google Gson library</description>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n@@ -24,13 +24,14 @@\n     </license>\n   </licenses>\n   <scm>\n-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/gson</connection>\n-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/gson</developerConnection>\n-    <url>http://google-gson.googlecode.com/svn/trunk/gson</url>\n+    <connection>scm:git:https://github.com/google/gson.git</connection>\n+    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n+    <url>https://github.com/google/gson</url>\n+    <tag>gson-${project.version}</tag>\n   </scm>\n   <issueManagement>\n-    <system>Google Code Issue Tracking</system>\n-    <url>http://code.google.com/p/google-gson/issues/list</url>\n+    <system>Github Issue Tracking</system>\n+    <url>https://github.com/google/gson/issues</url>\n   </issueManagement>\n   <distributionManagement>\n     <snapshotRepository>\n@@ -140,7 +141,7 @@\n               <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n               <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n               <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>http://code.google.com/p/google-gson/</Bundle-ContactAddress>\n+              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n               <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n               <Bundle-Name>${project.name}</Bundle-Name>\n               <Bundle-Description>${project.description}</Bundle-Description>\n@@ -220,7 +221,6 @@\n         <!-- version>2.5</version -->\n         <configuration>\n           <arguments>-DenableCiProfile=true</arguments>\n-          <tagBase>https://google-gson.googlecode.com/svn/tags</tagBase>\n         </configuration>\n       </plugin>\n       <plugin>\n@@ -249,4 +249,3 @@\n     </developer>\n   </developers>\n </project>\n-, ", 8, 9, "\"modified, \"", 17], ["Dillon Dixon", "Added test for nulls", "07/24/15, 06:02:46 AM", "Dillon Dixon", "5cf82a573f78e587f44c58ccd9b84679d531bfd6", ["gson/src/test/java/com/google/gson/functional/JsonArrayTest.java"], "@@ -127,6 +127,22 @@ public void testMixedPrimitiveAddition() {\n     assertEquals(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\", jsonArray.toString());\n   }\n \n+  public void testNullPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add((Character) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Integer) null);\n+    jsonArray.add((Double) null);\n+    jsonArray.add((Float) null);\n+    jsonArray.add((BigInteger) null);\n+    jsonArray.add((String) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Number) null);\n+\n+    assertEquals(\"[null,null,null,null,null,null,null,null,null]\", jsonArray.toString());\n+  }\n+\n   public void testSameAddition() {\n     JsonArray jsonArray = new JsonArray();\n , ", 16, 0, "\"modified, \"", 16], ["Lars Vogel", "Readme points to the new homepage at Github", "07/29/15, 04:45:24 PM", "Lars Vogel", "37d00c268d97b08c2e28cb0c4670733177729751", ["gson/README"], "@@ -4,4 +4,4 @@ equivalent Java object. Gson can work with arbitrary Java objects including\n pre-existing objects that you do not have source-code of.\n \n Complete Gson documentation is available at its project page \n-http://code.google.com/p/google-gson\n+https://github.com/google/gson, ", 1, 1, "\"modified, \"", 2], ["Lachlan Coote", "fix #680 - make RuntimeTypeAdapterFactory null-safe", "08/05/15, 11:27:18 PM", "Lachlan Coote", "1867457030d3c149566e95a019033cce4ff3cf90", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java", "extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java"], "@@ -235,6 +235,6 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n         }\n         Streams.write(clone, out);\n       }\n-    };\n+    }.nullSafe();\n   }\n }, @@ -167,6 +167,25 @@ public void testSerializeCollidingTypeFieldName() {\n     }\n   }\n \n+  public void testSerializeWrappedNullValue() {\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+        .registerSubtype(CreditCard.class)\n+        .registerSubtype(BankTransfer.class);    \n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapterFactory(billingAdapter)\n+        .create();    \n+    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\n+    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\n+    assertNull(deserialized.instrument);\n+  }\n+\n+  static class BillingInstrumentWrapper {\n+    BillingInstrument instrument;\n+    BillingInstrumentWrapper(BillingInstrument instrument) {\n+      this.instrument = instrument;\n+    }\n+  }\n+\n   static class BillingInstrument {\n     private final String ownerName;\n     BillingInstrument(String ownerName) {, ", 20, 1, "\"modified, modified, \"", 21], ["inder123", "Revert \"Add a JSR-305 @ThreadSafe annotation to the Gson class\"", "08/10/15, 02:01:18 PM", "inder123", "2ee680a64529ac6f31306e06d43eae8cf53f7c55", ["gson/pom.xml", "gson/src/main/java/com/google/gson/Gson.java"], "@@ -50,12 +50,6 @@\n     <url>http://www.google.com</url>\n   </organization>\n   <dependencies>\n-    <dependency>\n-      <groupId>com.google.code.findbugs</groupId>\n-      <artifactId>jsr305</artifactId>\n-      <version>3.0.0</version>\n-      <optional>true</optional>\n-    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>, @@ -31,8 +31,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.annotation.concurrent.ThreadSafe;\n-\n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n import com.google.gson.internal.Primitives;\n@@ -98,7 +96,6 @@\n  * @author Joel Leitch\n  * @author Jesse Wilson\n  */\n-@ThreadSafe\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n , ", 0, 9, "\"modified, modified, \"", 9], ["Inderjeet Singh", "Updated Gson Javadoc to indicate thread-safety.", "08/10/15, 02:04:07 PM", "Inderjeet Singh", "0c4ae018361d4756123c82c2f67ad04385caec5b", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -56,7 +56,8 @@\n /**\n  * This is the main class for using Gson. Gson is typically used by first constructing a\n  * Gson instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)}\n- * methods on it.\n+ * methods on it. Gson instances are Thread-safe so you can reuse them freely across multiple\n+ * threads.\n  *\n  * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration\n  * is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various, ", 2, 1, "\"modified, \"", 3], ["Michael Evans", "Add METHOD target for use with AutoValue's abstract property methods", "08/14/15, 06:08:56 PM", "Michael Evans", "64d74db8ae69f3dc37feb09df54e53ba0458edb7", ["gson/src/main/java/com/google/gson/annotations/SerializedName.java"], "@@ -64,7 +64,7 @@\n  * @author Joel Leitch\n  */\n @Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.FIELD)\n+@Target({ElementType.FIELD, ElementType.METHOD})\n public @interface SerializedName {\n \n   /**, ", 1, 1, "\"modified, \"", 2], ["Vladislav Bauer", "Add unit tests for constructors from util classes", "08/14/15, 09:05:42 PM", "Vladislav Bauer", "eb79ec73f01d31853e411843f64172ee1c5703d0", ["gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/Primitives.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/common/MoreAsserts.java"], "@@ -30,6 +30,10 @@\n  * @author Joel Leitch\r\n  */\r\n public final class $Gson$Preconditions {\r\n+  private $Gson$Preconditions() {\r\n+    throw new UnsupportedOperationException();\r\n+  }\r\n+\r\n   public static <T> T checkNotNull(T obj) {\r\n     if (obj == null) {\r\n       throw new NullPointerException();\r, @@ -43,7 +43,9 @@\n public final class $Gson$Types {\n   static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};\n \n-  private $Gson$Types() {}\n+  private $Gson$Types() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   /**\n    * Returns a new parameterized type, applying {@code typeArguments} to, @@ -29,7 +29,9 @@\n  * @author Kevin Bourrillion\n  */\n public final class Primitives {\n-  private Primitives() {}\n+  private Primitives() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   /** A map from primitive types to their corresponding wrapper types. */\n   private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPE;, @@ -33,6 +33,10 @@\n  * Reads and writes GSON parse trees over streams.\n  */\n public final class Streams {\n+  private Streams() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n   /**\n    * Takes a reader in any state and returns the next value as a JsonElement.\n    */, @@ -55,7 +55,9 @@\n  * Type adapters for basic types.\n  */\n public final class TypeAdapters {\n-  private TypeAdapters() {}\n+  private TypeAdapters() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   @SuppressWarnings(\"rawtypes\")\n   public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {, @@ -69,4 +69,5 @@ public static void assertEqualsAndHashCode(Object a, Object b) {\n     Assert.assertFalse(a.equals(null));\n     Assert.assertFalse(a.equals(new Object()));\n   }\n+\n }, ", 18, 3, "\"modified, modified, modified, modified, modified, modified, \"", 21], ["Inderjeet Singh", "Added tests for deserialization of double array", "09/02/15, 12:49:34 AM", "Inderjeet Singh", "fbb8696e83065cba8c2eb223371db5f650b9fbca", ["gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"], "@@ -198,6 +198,19 @@ public void testDoubleNoFractAsStringRepresentationDeserialization() {\n     assertEquals(expected.doubleValue(), actual1);\n   }\n \n+  public void testDoubleArrayDeserialization() {\n+      String json = \"[0.0, 0.004761904761904762, 3.4013606962703525E-4, 7.936508173034305E-4,\"\n+              + \"0.0011904761904761906, 0.0]\";\n+      double[] values = gson.fromJson(json, double[].class);\n+      assertEquals(6, values.length);\n+      assertEquals(0.0, values[0]);\n+      assertEquals(0.004761904761904762, values[1]);\n+      assertEquals(3.4013606962703525E-4, values[2]);\n+      assertEquals(7.936508173034305E-4, values[3]);\n+      assertEquals(0.0011904761904761906, values[4]);\n+      assertEquals(0.0, values[5]);\n+  }\n+\n   public void testLargeDoubleDeserialization() {\n     String doubleValue = \"1.234567899E8\";\n     Double expected = Double.valueOf(doubleValue);, ", 13, 0, "\"modified, \"", 13], ["Dorvaryn", "Clarify the fact that the behaviour of getDelegateAdapter depends on registration order.", "09/03/15, 01:43:34 PM", "Dorvaryn", "618343fd1bae998ac9ebfde37a56eb4f498a59d7", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -410,6 +410,10 @@ private void checkValidFloatingPoint(double value) {\n    *  System.out.println(\"Num JSON reads\" + stats.numReads);\n    *  System.out.println(\"Num JSON writes\" + stats.numWrites);\n    *  }</pre>\n+   *  Note that this call will skip all factories registered before {@code skipPast}. In case of\n+   *  multiple TypeAdapterFactories registered it is up to the caller of this function to insure\n+   *  that the order of registration does not prevent this method from reaching a factory they \n+   *  would expect to reply from this call.\n    *  Note that since you can not override type adapter factories for String and Java primitive\n    *  types, our stats factory will not count the number of String or primitives that will be\n    *  read or written., ", 4, 0, "\"modified, \"", 4], ["Inderjeet Singh", "updated maven plugin versions to latest", "09/07/15, 07:02:45 PM", "Inderjeet Singh", "1bf62f02148216714e25ba72f8c1f431b43ac539", ["gson/pom.xml"], "@@ -110,7 +110,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.2</version>\n+        <version>3.3</version>\n         <configuration>\n           <source>1.5</source>\n           <target>1.5</target>\n@@ -119,7 +119,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.5</version>\n+        <version>2.6</version>\n         <executions>\n           <execution>\n             <phase>package</phase>\n@@ -175,7 +175,7 @@\n          <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.1</version>\n+         <version>2.10.3</version>\n          <executions>\n            <execution>\n              <id>attach-javadocs</id>\n@@ -197,7 +197,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.9</version>\n+         <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>\n@@ -219,7 +219,7 @@\n       </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.1</version>\n+        <version>2.5.5</version>\n         <configuration>\n           <descriptor>assembly-descriptor.xml</descriptor>\n           <finalName>google-gson-${project.version}</finalName>, ", 5, 5, "\"modified, \"", 10], ["Inderjeet Singh", "Implemented support for multiple values for SerializedName annotation.", "10/03/15, 09:01:16 AM", "Inderjeet Singh", "109915d93a2b36c26b49c0fabb1947a5a892cb25", ["gson/pom.xml", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java"], "@@ -3,7 +3,7 @@\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n   <packaging>jar</packaging>\n-  <version>2.3.2-SNAPSHOT</version>\n+  <version>2.4-SNAPSHOT</version>\n   <inceptionYear>2008</inceptionYear>\n   <name>Gson</name>\n   <parent>, @@ -33,30 +33,43 @@\n  *\n  * <p>Here is an example of how this annotation is meant to be used:</p>\n  * <pre>\n- * public class SomeClassWithFields {\n- *   &#64SerializedName(\"name\") private final String someField;\n- *   private final String someOtherField;\n+ * public class MyClass {\n+ *   &#64SerializedName(\"name\") String a;\n+ *   &#64SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+ *   String c;\n  *\n- *   public SomeClassWithFields(String a, String b) {\n- *     this.someField = a;\n- *     this.someOtherField = b;\n+ *   public MyClass(String a, String b, String c) {\n+ *     this.a = a;\n+ *     this.b = b;\n+ *     this.c = c;\n  *   }\n  * }\n  * </pre>\n  *\n  * <p>The following shows the output that is generated when serializing an instance of the\n  * above example class:</p>\n  * <pre>\n- * SomeClassWithFields objectToSerialize = new SomeClassWithFields(\"a\", \"b\");\n+ * MyClass target = new MyClass(\"v1\", \"v2\", \"v3\");\n  * Gson gson = new Gson();\n- * String jsonRepresentation = gson.toJson(objectToSerialize);\n- * System.out.println(jsonRepresentation);\n+ * String json = gson.toJson(target);\n+ * System.out.println(json);\n  *\n  * ===== OUTPUT =====\n- * {\"name\":\"a\",\"someOtherField\":\"b\"}\n+ * {\"name\":\"v1\",\"name1\":\"v2\",\"c\":\"v3\"}\n  * </pre>\n  *\n  * <p>NOTE: The value you specify in this annotation must be a valid JSON field name.</p>\n+ * While deserializing, all values specified in the annotation will be deserialized into the field.\n+ * For example:\n+ * <pre>\n+ *   MyClass target = gson.fromJson(\"{'name1':'v1'}\", MyClass.class);\n+ *   assertEquals(\"v1\", target.b);\n+ *   target = gson.fromJson(\"{'name2':'v2'}\", MyClass.class);\n+ *   assertEquals(\"v2\", target.b);\n+ *   target = gson.fromJson(\"{'name3':'v3'}\", MyClass.class);\n+ *   assertEquals(\"v3\", target.b);\n+ * </pre>\n+ * Note that MyClass.b is now deserialized from either name1, name2 or name3.\n  *\n  * @see com.google.gson.FieldNamingPolicy\n  *\n@@ -68,7 +81,9 @@\n public @interface SerializedName {\n \n   /**\n-   * @return the desired name of the field when it is serialized\n+   * @return the desired names of the field when it is deserialized or serialized. All of the specified names will be deserialized from.\n+   *   The specified first name is what is used for serialization.\n    */\n   String value();\n+  String[] alternate() default {};\n }, @@ -16,6 +16,16 @@\n \n package com.google.gson.internal.bind;\n \n+import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n import com.google.gson.FieldNamingStrategy;\n import com.google.gson.Gson;\n import com.google.gson.JsonSyntaxException;\n@@ -32,13 +42,6 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n \n /**\n  * Type adapter that reflects over the fields and methods of a class.\n@@ -63,13 +66,24 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n   }\n \n-  private String getFieldName(Field f) {\n+  /** first element holds the default name */\n+  private List<String> getFieldNames(Field f) {\n     return getFieldName(fieldNamingPolicy, f);\n   }\n \n-  static String getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n+  /** first element holds the default name */\n+  static List<String> getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n     SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n+    List<String> fieldNames = new LinkedList<String>();\n+    if (serializedName == null) {\n+      fieldNames.add(fieldNamingPolicy.translateName(f));\n+    } else {\n+      fieldNames.add(serializedName.value());\n+      for (String alternate : serializedName.alternate()) {\n+        fieldNames.add(alternate);\n+      }\n+    }\n+    return fieldNames;\n   }\n \n   public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n@@ -139,9 +153,16 @@ public boolean writeField(Object value) throws IOException, IllegalAccessExcepti\n         }\n         field.setAccessible(true);\n         Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n-        BoundField boundField = createBoundField(context, field, getFieldName(field),\n-            TypeToken.get(fieldType), serialize, deserialize);\n-        BoundField previous = result.put(boundField.name, boundField);\n+        List<String> fieldNames = getFieldNames(field);\n+        BoundField previous = null;\n+        for (int i = 0; i < fieldNames.size(); ++i) {\n+          String name = fieldNames.get(i);\n+          if (i != 0) serialize = false; // only serialize the default name\n+          BoundField boundField = createBoundField(context, field, name,\n+              TypeToken.get(fieldType), serialize, deserialize);\n+          BoundField replaced = result.put(name, boundField);\n+          if (previous == null) previous = replaced;\n+        }\n         if (previous != null) {\n           throw new IllegalArgumentException(declaredType\n               + \" declares multiple JSON fields named \" + previous.name);, @@ -727,6 +727,9 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n           if (annotation != null) {\n             name = annotation.value();\n+            for (String alternate : annotation.alternate()) {\n+              nameToConstant.put(alternate, constant);\n+            }\n           }\n           nameToConstant.put(name, constant);\n           constantToName.put(constant, name);, @@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2015 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import junit.framework.TestCase;\n+\n+public final class SerializedNameTest extends TestCase {\n+  private final Gson gson = new Gson();\n+\n+  public void testFirstNameIsChosenForSerialization() {\n+    MyClass target = new MyClass(\"v1\", \"v2\");\n+    // Ensure name1 occurs exactly once, and name2 and name3 dont appear\n+    assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n+  }\n+\n+  public void testMultipleNamesDeserializedCorrectly() {\n+    assertEquals(\"v1\", gson.fromJson(\"{'name':'v1'}\", MyClass.class).a);\n+\n+    // Both name1 and name2 gets deserialized to b\n+    assertEquals(\"v11\", gson.fromJson(\"{'name1':'v11'}\", MyClass.class).b);\n+    assertEquals(\"v2\", gson.fromJson(\"{'name2':'v2'}\", MyClass.class).b);\n+    assertEquals(\"v3\", gson.fromJson(\"{'name3':'v3'}\", MyClass.class).b);\n+  }\n+\n+  public void testMultipleNamesInTheSameString() {\n+    // The last value takes precedence\n+    assertEquals(\"v3\", gson.fromJson(\"{'name1':'v1','name2':'v2','name3':'v3'}\", MyClass.class).b);\n+  }\n+\n+  private static final class MyClass {\n+    @SerializedName(\"name\") String a;\n+    @SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+    MyClass(String a, String b) {\n+      this.a = a;\n+      this.b = b;\n+    }\n+  }\n+}, ", 118, 25, "\"modified, modified, modified, modified, added, \"", 143], ["jwilson", "Expose serializeNulls with an accessor.\n\nUseful for frameworks that build on Gson.", "09/08/15, 02:31:43 AM", "jwilson", "ff2c8f8e8b118278947755898cb6c75dfc7e90ff", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -246,6 +246,11 @@ public Gson() {\n     this.factories = Collections.unmodifiableList(factories);\n   }\n \n+  /** Returns true if this Gson instance writes fields with null values. */\n+  public boolean serializeNulls() {\n+    return serializeNulls;\n+  }\n+\n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n     if (serializeSpecialFloatingPointValues) {\n       return TypeAdapters.DOUBLE;, ", 5, 0, "\"modified, \"", 5], ["Jake Wharton", "Expose newJsonWriter wrapper instead of just options.\n\nThis is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly.", "09/26/15, 11:19:38 PM", "Jake Wharton", "e81f3eba2731bac5b7b5a50e7218f9847a170d83", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -247,11 +247,6 @@ public Gson() {\n     this.factories = Collections.unmodifiableList(factories);\n   }\n \n-  /** Returns true if this Gson instance writes fields with null values. */\n-  public boolean serializeNulls() {\n-    return serializeNulls;\n-  }\n-\n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n     if (serializeSpecialFloatingPointValues) {\n       return TypeAdapters.DOUBLE;\n@@ -648,10 +643,9 @@ public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOExce\n   }\n \n   /**\n-   * Returns a new JSON writer configured for this GSON and with the non-execute\n-   * prefix if that is configured.\n+   * Returns a new JSON writer configured for the settings on this Gson instance.\n    */\n-  private JsonWriter newJsonWriter(Writer writer) throws IOException {\n+  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n     if (generateNonExecutableJson) {\n       writer.write(JSON_NON_EXECUTABLE_PREFIX);\n     }, ", 2, 8, "\"modified, \"", 10], ["Inderjeet Singh", "incorporated code review feedback: optimized LazilyParsedNumber.equals/hashcode() by utilizing the fact that value is never passed as null.", "09/27/15, 08:58:01 PM", "Inderjeet Singh", "96b2ada79aeaa44e4c572b345563d0ee90dde5b1", ["gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java"], "@@ -26,6 +26,7 @@\n public final class LazilyParsedNumber extends Number {\n   private final String value;\n \n+  /** @param value must not be null */\n   public LazilyParsedNumber(String value) {\n     this.value = value;\n   }\n@@ -78,23 +79,18 @@ private Object writeReplace() throws ObjectStreamException {\n \n   @Override\n   public int hashCode() {\n-    return value == null ? 0 : value.hashCode();\n+    return value.hashCode();\n   }\n \n   @Override\n   public boolean equals(Object obj) {\n     if (this == obj) {\n       return true;\n     }\n-    if (obj == null || !(obj instanceof LazilyParsedNumber)) {\n-      return false;\n+    if (obj instanceof LazilyParsedNumber) {\n+      LazilyParsedNumber other = (LazilyParsedNumber) obj;\n+      return value == other.value || value.equals(other.value);\n     }\n-    LazilyParsedNumber other = (LazilyParsedNumber) obj;\n-    return equals(value, other.value);\n-  }\n-\n-  private static boolean equals(Object obj1, Object obj2) {\n-    if (obj1 == null) return obj2 == null;\n-    return obj1 == obj2 || obj1.equals(obj2);\n+    return false;\n   }\n }, ", 6, 10, "\"modified, \"", 16], ["Inderjeet Singh", "Fixed javadoc for JsonWriter as reported in\nhttps://github.com/google/gson/issues/623", "09/27/15, 01:10:00 AM", "Inderjeet Singh", "1e9004403c619729ad1c49f070ab61427bd462c5", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -77,7 +77,7 @@\n  * This code encodes the above structure: <pre>   {@code\n  *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n  *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n- *     writer.setIndentSpaces(4);\n+ *     writer.setIndent(\"    \");\n  *     writeMessagesArray(writer, messages);\n  *     writer.close();\n  *   }, ", 1, 1, "\"modified, \"", 2], ["dushyant", "typo", "09/27/15, 10:31:27 AM", "dushyant", "2ecce944948e63f703e10cd34f4e2f410a7f3921", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -122,7 +122,7 @@ public T construct() {\n \n   /**\n    * Constructors for common interface types like Map and List and their\n-   * subytpes.\n+   * subtypes.\n    */\n   @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n   private <T> ObjectConstructor<T> newDefaultImplementationConstructor(, ", 1, 1, "\"modified, \"", 2], ["Roman Mazur", "Fix javadoc of SerializedName\n\nIn #699 the approach was changed but docs were left for the first implementation.", "10/04/15, 04:53:02 PM", "Roman Mazur", "3b1671dde97a6d564b3f4c3210fbe777dc3aa3d4", ["gson/src/main/java/com/google/gson/annotations/SerializedName.java"], "@@ -81,9 +81,11 @@\n public @interface SerializedName {\n \n   /**\n-   * @return the desired names of the field when it is deserialized or serialized. All of the specified names will be deserialized from.\n-   *   The specified first name is what is used for serialization.\n+   * @return the desired name of the field when it is serialized or deserialized\n    */\n   String value();\n+  /**\n+   * @return the alternative names of the field when it is deserialized\n+   */\n   String[] alternate() default {};\n }, ", 4, 2, "\"modified, \"", 6], ["Emmanuel Cron", "Updating Gson version to 2.4", "10/07/15, 05:52:01 AM", "Emmanuel Cron", "503a9e536aabdfbfddc0833244274a1f814e5edb", ["proto/pom.xml"], "@@ -55,7 +55,7 @@\n     <dependency>\r\n       <groupId>com.google.code.gson</groupId>\r\n       <artifactId>gson</artifactId>\r\n-      <version>2.3.1</version>\r\n+      <version>2.4</version>\r\n       <scope>compile</scope>\r\n     </dependency>\r\n \r, ", 1, 1, "\"modified, \"", 2], ["Emmanuel Cron", "Merge https://github.com/google/gson", "10/20/15, 07:09:17 PM", "Emmanuel Cron", "83aa8ca55548381c79f886d57fd8f4db863a84d3", ["examples/android-proguard-example/proguard.cfg"], "@@ -1,77 +1,3 @@\n-##---------------Begin: proguard configuration common for all Android apps ----------\n--optimizationpasses 5\n--dontusemixedcaseclassnames\n--dontskipnonpubliclibraryclasses\n--dontskipnonpubliclibraryclassmembers\n--dontpreverify\n--verbose\n--dump class_files.txt\n--printseeds seeds.txt\n--printusage unused.txt\n--printmapping mapping.txt\n--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*\n-\n--allowaccessmodification\n--keepattributes *Annotation*\n--renamesourcefileattribute SourceFile\n--keepattributes SourceFile,LineNumberTable\n--repackageclasses ''\n-\n--keep public class * extends android.app.Activity\n--keep public class * extends android.app.Application\n--keep public class * extends android.app.Service\n--keep public class * extends android.content.BroadcastReceiver\n--keep public class * extends android.content.ContentProvider\n--keep public class * extends android.app.backup.BackupAgentHelper\n--keep public class * extends android.preference.Preference\n--keep public class com.android.vending.licensing.ILicensingService\n--dontnote com.android.vending.licensing.ILicensingService\n-\n-# Explicitly preserve all serialization members. The Serializable interface\n-# is only a marker interface, so it wouldn't save them.\n--keepclassmembers class * implements java.io.Serializable {\n-    static final long serialVersionUID;\n-    private static final java.io.ObjectStreamField[] serialPersistentFields;\n-    private void writeObject(java.io.ObjectOutputStream);\n-    private void readObject(java.io.ObjectInputStream);\n-    java.lang.Object writeReplace();\n-    java.lang.Object readResolve();\n-}\n-\n-# Preserve all native method names and the names of their classes.\n--keepclasseswithmembernames class * {\n-    native <methods>;\n-}\n-\n--keepclasseswithmembernames class * {\n-    public <init>(android.content.Context, android.util.AttributeSet);\n-}\n-\n--keepclasseswithmembernames class * {\n-    public <init>(android.content.Context, android.util.AttributeSet, int);\n-}\n-\n-# Preserve static fields of inner classes of R classes that might be accessed\n-# through introspection.\n--keepclassmembers class **.R$* {\n-  public static <fields>;\n-}\n-\n-# Preserve the special static methods that are required in all enumeration classes.\n--keepclassmembers enum * {\n-    public static **[] values();\n-    public static ** valueOf(java.lang.String);\n-}\n-\n--keep public class * {\n-    public protected *;\n-}\n-\n--keep class * implements android.os.Parcelable {\n-  public static final android.os.Parcelable$Creator *;\n-}\n-##---------------End: proguard configuration common for all Android apps ----------\n-\n ##---------------Begin: proguard configuration for Gson  ----------\n # Gson uses generic type information stored in a class file when working with fields. Proguard\n # removes such information by default, so configure it to keep all of it., ", 0, 74, "\"modified, \"", 74], ["jwilson", "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.", "10/21/15, 03:40:24 PM", "jwilson", "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -16,6 +16,22 @@\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.internal.LazilyParsedNumber;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -34,23 +50,6 @@\n import java.util.StringTokenizer;\n import java.util.UUID;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonIOException;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.JsonSyntaxException;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.TypeAdapterFactory;\n-import com.google.gson.annotations.SerializedName;\n-import com.google.gson.internal.LazilyParsedNumber;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.JsonWriter;\n-\n /**\n  * Type adapters for basic types.\n  */\n@@ -815,12 +814,33 @@ public void write(JsonWriter out, T value) throws IOException {\n     };\n   }\n \n-  public static <TT> TypeAdapterFactory newTypeHierarchyFactory(\n-      final Class<TT> clazz, final TypeAdapter<TT> typeAdapter) {\n+  /**\n+   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n+   * that the deserialized type matches the type requested.\n+   */\n+  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n+      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\")\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n-        return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter<T>) typeAdapter : null;\n+      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n+        final Class<? super T2> requestedType = typeToken.getRawType();\n+        if (!clazz.isAssignableFrom(requestedType)) {\n+          return null;\n+        }\n+        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n+          @Override public void write(JsonWriter out, T1 value) throws IOException {\n+            typeAdapter.write(out, value);\n+          }\n+\n+          @Override public T1 read(JsonReader in) throws IOException {\n+            T1 result = typeAdapter.read(in);\n+            if (result != null && !requestedType.isInstance(result)) {\n+              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n+                  + \" but was \" + result.getClass().getName());\n+            }\n+            return result;\n+          }\n+        };\n       }\n       @Override public String toString() {\n         return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";, @@ -15,6 +15,21 @@\n  */\n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Type;\n@@ -40,24 +55,8 @@\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n-\n import junit.framework.TestCase;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n-\n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n  * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\n@@ -479,7 +478,8 @@ public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws E\n     Gson gson = new GsonBuilder()\n         .setDateFormat(pattern)\n         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n-          public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+          public Date deserialize(JsonElement json, Type typeOfT,\n+              JsonDeserializationContext context)\n               throws JsonParseException {\n             return new Date(1315806903103L);\n           }\n@@ -618,6 +618,16 @@ public void testJsonNullDeserialization() {\n     assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonNull.class));\n   }\n \n+  public void testJsonElementTypeMismatch() {\n+    try {\n+      gson.fromJson(\"\\\"abc\\\"\", JsonObject.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+      assertEquals(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive\",\n+          expected.getMessage());\n+    }\n+  }\n+\n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n     ClassWithBigDecimal(String value) {, ", 68, 38, "\"modified, modified, \"", 106], ["Chris Conroy", "Thread safe method cache", "10/28/15, 12:01:38 AM", "Chris Conroy", "7abeb1608064abd19129ef7bcaf781dbd3ed26e9", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -20,6 +20,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.base.Converter;\n+import com.google.common.collect.MapMaker;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n@@ -44,10 +45,10 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentMap;\n \n /**\n  * GSON type adapter for protocol buffers that knows how to serialize enums either by using their\n@@ -190,6 +191,9 @@ public static Builder newBuilder() {\n   private static final com.google.protobuf.Descriptors.FieldDescriptor.Type ENUM_TYPE =\n       com.google.protobuf.Descriptors.FieldDescriptor.Type.ENUM;\n \n+  private static final ConcurrentMap<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n+      new MapMaker().makeMap();\n+\n   private final EnumSerialization enumSerialization;\n   private final Converter<String, String> fieldNameSerializationFormat;\n   private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n@@ -380,18 +384,23 @@ private EnumValueDescriptor findValueByNameAndExtension(EnumDescriptor desc,\n     }\n   }\n \n-  private static Method getCachedMethod(Class<?> clazz, String methodName)\n-      throws NoSuchMethodException {\n-    if (!mapOfMapOfMethods.containsKey(methodName)) {\n-      mapOfMapOfMethods.put(methodName, new HashMap<Class<?>, Method>());\n-    }\n+  private static Method getCachedMethod(Class<?> clazz, String methodName,\n+      Class<?>... methodParamTypes) throws NoSuchMethodException {\n     Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\n-    if (!mapOfMethods.containsKey(clazz)) {\n-      mapOfMethods.put(clazz, clazz.getMethod(methodName));\n+    if (mapOfMethods == null) {\n+      mapOfMethods = new MapMaker().makeMap();\n+      Map<Class<?>, Method> previous =\n+          mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\n+      mapOfMethods = previous == null ? mapOfMethods : previous;\n+    }\n+\n+    Method method = mapOfMethods.get(clazz);\n+    if (method == null) {\n+      method = clazz.getMethod(methodName, methodParamTypes);\n+      mapOfMethods.putIfAbsent(clazz, method);\n+      // NB: it doesn't matter which method we return in the event of a race.\n     }\n-    return mapOfMethods.get(clazz);\n+    return method;\n   }\n \n-  private static Map<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n-      new HashMap<String, Map<Class<?>, Method>>();\n }, ", 20, 11, "\"modified, \"", 31], ["Inderjeet Singh", "Linking to JDK 6 javadocs", "11/05/15, 02:55:23 AM", "Inderjeet Singh", "79e1c669ed8e02dcd645a701fc6afa7de12225db", ["gson/pom.xml"], "@@ -189,7 +189,7 @@\n            <includePackageNames>com.google.gson</includePackageNames>\n            <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n             <links>\n-             <link>http://docs.oracle.com/javase/1.5.0/docs/api/</link>\n+             <link>http://docs.oracle.com/javase/6/docs/api/</link>\n            </links>\n            <version>true</version>\n            <show>protected</show>, ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "Added support to serialize/deserialize ConcurrentMap and ConcurrentNavigableMap.", "11/05/15, 05:25:15 AM", "Inderjeet Singh", "fef43b2aaa4fd7cb8f0dff395980c69f614635af", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java", "gson/src/test/java/com/google/gson/functional/MapTest.java"], "@@ -16,10 +16,6 @@\n \n package com.google.gson.internal;\n \n-import com.google.gson.InstanceCreator;\n-import com.google.gson.JsonIOException;\n-import com.google.gson.reflect.TypeToken;\n-\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.ParameterizedType;\n@@ -37,6 +33,14 @@\n import java.util.SortedSet;\n import java.util.TreeMap;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Returns a function that can construct an instance of a requested type.\n@@ -58,7 +62,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n     final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);\n     if (typeCreator != null) {\n       return new ObjectConstructor<T>() {\n-        public T construct() {\n+        @Override public T construct() {\n           return typeCreator.createInstance(type);\n         }\n       };\n@@ -70,7 +74,7 @@ public T construct() {\n         (InstanceCreator<T>) instanceCreators.get(rawType);\n     if (rawTypeCreator != null) {\n       return new ObjectConstructor<T>() {\n-        public T construct() {\n+        @Override public T construct() {\n           return rawTypeCreator.createInstance(type);\n         }\n       };\n@@ -98,7 +102,7 @@ public T construct() {\n       }\n       return new ObjectConstructor<T>() {\n         @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n-        public T construct() {\n+        @Override public T construct() {\n           try {\n             Object[] args = null;\n             return (T) constructor.newInstance(args);\n@@ -130,14 +134,14 @@ public T construct() {\n     if (Collection.class.isAssignableFrom(rawType)) {\n       if (SortedSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new TreeSet<Object>();\n           }\n         };\n       } else if (EnumSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n           @SuppressWarnings(\"rawtypes\")\n-          public T construct() {\n+          @Override public T construct() {\n             if (type instanceof ParameterizedType) {\n               Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];\n               if (elementType instanceof Class) {\n@@ -152,42 +156,54 @@ public T construct() {\n         };\n       } else if (Set.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedHashSet<Object>();\n           }\n         };\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedList<Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new ArrayList<Object>();\n           }\n         };\n       }\n     }\n \n     if (Map.class.isAssignableFrom(rawType)) {\n-      if (SortedMap.class.isAssignableFrom(rawType)) {\n+      if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {\n+        return new ObjectConstructor<T>() {\n+          @Override public T construct() {\n+            return (T) new ConcurrentSkipListMap<Object, Object>();\n+          }\n+        };\n+      } else if (ConcurrentMap.class.isAssignableFrom(rawType)) {\n+        return new ObjectConstructor<T>() {\n+          @Override public T construct() {\n+            return (T) new ConcurrentHashMap<Object, Object>();\n+          }\n+        };\n+      } else if (SortedMap.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new TreeMap<Object, Object>();\n           }\n         };\n       } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(\n           TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedHashMap<Object, Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedTreeMap<String, Object>();\n           }\n         };\n@@ -202,7 +218,7 @@ public T construct() {\n     return new ObjectConstructor<T>() {\n       private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n       @SuppressWarnings(\"unchecked\")\n-      public T construct() {\n+      @Override public T construct() {\n         try {\n           Object newInstance = unsafeAllocator.newInstance(rawType);\n           return (T) newInstance;, @@ -16,6 +16,18 @@\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n@@ -33,14 +45,6 @@\n \n import junit.framework.TestCase;\n \n-import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-\n /**\n  * Functional test for Json serialization and deserialization for Maps\n  *\n@@ -179,6 +183,46 @@ public void testSortedMap() throws Exception {\n     assertEquals(\"456\", map.get(123));\n   }\n \n+  public void testConcurrentMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentMap<Integer, String>>() {}.getType();\n+    ConcurrentMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentHashMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentHashMap<Integer, String>>() {}.getType();\n+    ConcurrentHashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentNavigableMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentNavigableMap<Integer, String>>() {}.getType();\n+    ConcurrentNavigableMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentSkipListMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentSkipListMap<Integer, String>>() {}.getType();\n+    ConcurrentSkipListMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n   public void testParameterizedMapSubclassSerialization() {\n     MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>(10);\n     map.put(\"a\", \"b\");, ", 85, 25, "\"modified, modified, \"", 110], ["Inderjeet Singh", "fixed typos", "11/06/15, 05:43:10 AM", "Inderjeet Singh", "da4334b8dfcfa3efe6fba6b95afd0e5e6b272348", ["gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java"], "@@ -29,7 +29,7 @@\n import junit.framework.TestCase;\n \n /**\n- * Functional test for Json serialization and deserialization for java.util.concurrent.locks classes\n+ * Functional test for Json serialization and deserialization for classes in java.util.concurrent.atomic\n  */\n public class JavaUtilConcurrentLocksTest extends TestCase {\n   private Gson gson;, ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest", "11/06/15, 11:24:15 PM", "Inderjeet Singh", "457f53f08f38e3c6d154699ea00fa521f208882d", ["gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java"], "@@ -31,7 +31,7 @@\n /**\n  * Functional test for Json serialization and deserialization for classes in java.util.concurrent.atomic\n  */\n-public class JavaUtilConcurrentLocksTest extends TestCase {\n+public class JavaUtilConcurrentAtomicTest extends TestCase {\n   private Gson gson;\n \n   @Override, ", 1, 1, "\"renamed, \"", 2], ["Inderjeet Singh", "added tests for Properties", "11/07/15, 12:17:47 AM", "Inderjeet Singh", "10cefa49d2ade8f1ba99693509916128c8786a6d", ["gson/src/test/java/com/google/gson/functional/JavaUtilTest.java"], "@@ -17,6 +17,7 @@\n package com.google.gson.functional;\n \n import java.util.Currency;\n+import java.util.Properties;\n \n import com.google.gson.Gson;\n \n@@ -49,4 +50,13 @@ public void testCurrency() throws Exception {\n   private static class CurrencyHolder {\n     Currency value;\n   }\n+\n+  public void testProperties() {\n+    Properties props = gson.fromJson(\"{'a':'v1','b':'v2'}\", Properties.class);\n+    assertEquals(\"v1\", props.getProperty(\"a\"));\n+    assertEquals(\"v2\", props.getProperty(\"b\"));\n+    String json = gson.toJson(props);\n+    assertTrue(json.contains(\"\\\"a\\\":\\\"v1\\\"\"));\n+    assertTrue(json.contains(\"\\\"b\\\":\\\"v2\\\"\"));\n+  }\n }, ", 10, 0, "\"modified, \"", 10], ["Inderjeet Singh", "Added the cause to Assertions", "11/16/15, 05:16:23 PM", "Inderjeet Singh", "c935f89b23c69e7c9d6d98df87f81635b3eb3700", ["gson/src/main/java/com/google/gson/internal/Excluder.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"], "@@ -62,7 +62,7 @@\n     try {\n       return (Excluder) super.clone();\n     } catch (CloneNotSupportedException e) {\n-      throw new AssertionError();\n+      throw new AssertionError(e);\n     }\n   }\n , @@ -241,7 +241,7 @@ private Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundF\n           }\n         }\n       } catch (IllegalAccessException e) {\n-        throw new AssertionError();\n+        throw new AssertionError(e);\n       }\n       out.endObject();\n     }, ", 2, 2, "\"modified, modified, \"", 4], ["Gorik", "Removed unused code in ISO8601Utils", "11/23/15, 06:21:41 AM", "Gorik", "d86dfdec7c18ceb002889d73f808a4be4ee7105f", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"], "@@ -345,42 +345,4 @@ private static int indexOfNonDigit(String string, int offset) {\n         return string.length();\n     }\n \n-    public static void main(String[] args)\n-    {\n-        final int REPS = 250000;\n-        while (true) {\n-            long start = System.currentTimeMillis();\n-            int resp = test1(REPS, 3);\n-            long msecs = System.currentTimeMillis() - start;\n-            System.out.println(\"Pow (\"+resp+\") -> \"+msecs+\" ms\");\n-\n-            start = System.currentTimeMillis();\n-            resp = test2(REPS, 3);\n-            msecs = System.currentTimeMillis() - start;\n-            System.out.println(\"Iter (\"+resp+\") -> \"+msecs+\" ms\");\n-        }\n-    }\n-\n-    static int test1(int reps, int pow)\n-    {\n-        int resp = 3;\n-        while (--reps >= 0) {\n-            resp = (int) Math.pow(10, pow);\n-        }\n-        return resp;\n-    }\n-\n-    static int test2(int reps, int pow)\n-    {\n-        int resp = 3;\n-        while (--reps >= 0) {\n-            resp = 10;\n-            int p = pow;\n-\n-            while (--p > 0) {\n-                resp *= 10;\n-            }\n-        }\n-        return resp;\n-    }\n }, ", 0, 38, "\"modified, \"", 38], ["Pi\u00ebt Delport", "README: Update old Google Sites links to GitHub", "11/26/15, 10:22:42 AM", "Pi\u00ebt Delport", "05515adc8bf8794e8b89cee38b3184e43f447771", ["README.md"], "@@ -16,9 +16,9 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n *Gson Documentation*\n   * Gson [API](http://google.github.io/gson/apidocs/): Javadocs for the current Gson release\n-  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide): This guide contains examples on how to use Gson in your code.\n-  * Gson [Roadmap](https://sites.google.com/site/gson/gson-roadmap): Details on upcoming releases \n-  * Gson [design document](https://sites.google.com/site/gson/gson-design-document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n+  * Gson [Roadmap](https://github.com/google/gson/blob/master/ReleaseProcess.md): Details on upcoming releases \n+  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n , ", 3, 3, "\"modified, \"", 6], ["Misha Brukman", "Added code formatting; removed HTML tags.\n\nAlso fixed minor grammar issues.", "11/27/15, 08:45:21 PM", "Misha Brukman", "14e53cf7d4918e1a3f40084d6150831349d6efda", ["README.md", "UserGuide.md"], "@@ -5,7 +5,7 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n *Gson Goals*\n-  * Provide simple toJson() and fromJson() methods to convert Java objects to JSON and vice-versa\n+  * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects, @@ -52,17 +52,17 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [PerformanceTest](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n \n-*   Strings: Deserialized strings of over 25MB without any problems (see <span style=\"font-family:courier new,monospace\">disabled_testStringDeserializationPerformance</span> method in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n \n *   Large collections:\n \n-*   Serialized a collection of 1.4 million objects (see <span style=\"font-family:courier new,monospace\">disabled_testLargeCollectionSerialization</span> method in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n \n-*   Deserialized a collection of 87,000 objects (see <span style=\"font-family:courier new,monospace\">disabled_testLargeCollectionDeserialization</span> in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n \n *   Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n \n-Note: Delete the <span style=\"font-family:courier new,monospace\">disabled_</span> prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n+Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n \n ## <a name=\"TOC-Gson-Users\"></a>Gson Users\n \n@@ -211,20 +211,20 @@ Collection<Integer> ints2 = gson.fromJson(json, collectionType);\n ints2 is same as ints\n ```\n \n-Fairly hideous: note how we define the type of collection\n-Unfortunately, no way to get around this in Java</font></span>\n+Fairly hideous: note how we define the type of collection.\n+Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n *   Can serialize collection of arbitrary objects but can not deserialize from it\n *   Because there is no way for the user to indicate the type of the resulting object\n *   While deserializing, Collection must be of a specific generic type\n \n-All of this makes sense, and is rarely a problem when following good Java coding practices\n+All of this makes sense, and is rarely a problem when following good Java coding practices.\n \n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n \n-When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass <span style=\"font-family:courier new,monospace\">MyClass.class</span> object in the <span style=\"font-family:courier new,monospace\">fromJson(json, MyClass.class)</span> method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n+When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n ```\n class Foo<T> {\n   T value;\n@@ -236,9 +236,9 @@ gson.toJson(foo); // May not serialize foo.value correctly\n gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n ```\n \n-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, <span style=\"font-family:courier new,monospace\">Foo.class</span>. This means that Gson has no way of knowing that this is an object of type Foo<Bar>, and not just plain Foo.\n+The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n-You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [TypeToken](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n+You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n ```\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n gson.toJson(foo, fooType);\n@@ -348,22 +348,21 @@ Often you want to register a single handler for all generic types corresponding\n   *   Essentially write out the id value\n \n *   Deserialization is very similar but not exactly the same\n-  *   Need to call <span style=\"font-family:courier new,monospace\">\"new Id(Class<T>, String)\"</span> which returns an instance of Id<T>\n+  *   Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n \n-Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say <span style=\"font-family:courier new,monospace\">Id<RequiresSpecialHandling></span> needed special handling).\n-The <span style=\"font-family:courier new,monospace\">Type</span> parameter for the <span style=\"font-family:courier new,monospace\">toJson</span> and <span style=\"font-family:courier new,monospace\">fromJson</span> contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type\n+Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).\n+The `Type` parameter for the `toJson` and `fromJson` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n \n ### <a name=\"TOC-Writing-an-Instance-Creator\"></a>Writing an Instance Creator\n \n-While deserializing an Object, Gson needs to create a default instance of the class\n-Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor\n+While deserializing an Object, Gson needs to create a default instance of the class.\n+Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.\n \n *   Doesn't matter whether public or private\n \n Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor\n \n-**\n-Instance Creator Example**\n+**Instance Creator Example**\n \n ```\n private class MoneyInstanceCreator implements InstanceCreator<Money> {\n@@ -393,7 +392,7 @@ class MyListInstanceCreator implements InstanceCreator<MyList<?>> {\n   }\n }\n ```\n-However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the <span style=\"font-family:courier new,monospace\">createInstance</span> method. Here is an example:\n+However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:\n ```\n public class Id<T> {\n   private final Class<T> classOfId;\n@@ -413,15 +412,15 @@ class IdInstanceCreator implements InstanceCreator<Id<?>> {\n }\n ```\n \n-In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, <span style=\"font-family:courier new,monospace\">type</span>. The <span style=\"font-family:courier new,monospace\">type</span> object in this case is the Java parameterized type representation of <span style=\"font-family:courier new,monospace\">Id<Foo></span> where the actual instance should be bound to <span style=\"font-family:courier new,monospace\">Id<Foo></span>. Since <span style=\"font-family:courier new,monospace\">Id</span> class has just one parameterized type parameter, <span style=\"font-family:courier new,monospace\">T</span>, we use the zeroth element of the type array returned by <span style=\"font-family:courier new,monospace\">getActualTypeArgument()</span> which will hold <span style=\"font-family:courier new,monospace\">Foo.class</span> in this case.\n+In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, `type`. The `type` object in this case is the Java parameterized type representation of `Id<Foo>` where the actual instance should be bound to `Id<Foo>`. Since `Id` class has just one parameterized type parameter, `T`, we use the zeroth element of the type array returned by `getActualTypeArgument()` which will hold `Foo.class` in this case.\n \n ### <a name=\"TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format\"></a>Compact Vs. Pretty Printing for JSON Output Format\n \n The default JSON output that is provide by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n \n-If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default <span style=\"font-family:courier new,monospace\">JsonPrintFormatter</span> that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n+If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n \n-The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the <span style=\"font-family:courier new,monospace\">JsonCompactFormatter</span>:\n+The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:\n ```\n Gson gson = new GsonBuilder().setPrettyPrinting().create();\n String jsonOutput = gson.toJson(someObject);\n@@ -465,7 +464,7 @@ null\n ```\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n-Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your <span style=\"font-family:courier new,monospace\">Gson</span> instance to ignore any field/object that is greater than some version number. If no version is set on the <span style=\"font-family:courier new,monospace\">Gson</span> instance then it will serialize and deserialize all fields and classes regardless of the version.\n+Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n ```\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n@@ -517,11 +516,11 @@ Gson gson = new GsonBuilder()\n \n #### <a name=\"TOC-Gson-s-Expose\"></a>Gson's @Expose\n \n-This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using <span style=\"font-family:courier new,monospace\">new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</span>. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n+This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [<span style=\"font-family:courier new,monospace\">ExclusionStrategy</span>](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific \"@Foo\" annotation and excludes top-level types (or declared field type) of class String.\n ```\n@@ -575,7 +574,7 @@ The following example shows how to exclude fields marked with a specific \"@Foo\"\n ```\n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n-Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e. camel cased names starting with lower case --- \"sampleFieldNameInJava\") to a Json field name (i.e. sample_field_name_in_java or SampleFieldNameInJava). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n+Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n , ", 25, 26, "\"modified, modified, \"", 51], ["Misha Brukman", "Add full license text for Apache License 2.0\n\nMoved the short-form license to README.", "11/27/15, 09:02:19 PM", "Misha Brukman", "95c5a7d57020c63e87e465832db9e74a5cd15ab5", ["LICENSE", "README.md"], "@@ -1,13 +1,202 @@\n-Copyright 2008 Google Inc. \n \n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-you may not use this file except in compliance with the License.\n-You may obtain a copy of the License at\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n \n-    http://www.apache.org/licenses/LICENSE-2.0\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n-Unless required by applicable law or agreed to in writing, software\n-distributed under the License is distributed on an \"AS IS\" BASIS,\n-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-See the License for the specific language governing permissions and\n-limitations under the License.\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License., @@ -24,3 +24,23 @@ Please use the [google-gson Google group](http://groups.google.com/group/google-\n \n *Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+\n+*License*\n+\n+Gson is released under the [Apache 2.0 license](LICENSE).\n+\n+```\n+Copyright 2008 Google Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+```, ", 219, 10, "\"modified, modified, \"", 229], ["Misha Brukman", "Docs fixes: markdown, links, formatting.\n\n* Removed extra spacing after bullets in list\n* Removed extra blank lines; fixed indentation\n* Fixed all links (including examples) to code.google.com to use github.com\n  instead; deep links to code.google.com redirect to top-level GitHub project\n  page, thus rendering them useless\n* Removed extra strings in Markdown link targets\n* Fixed capitalization and grammar\n* Added more code formatting", "11/27/15, 09:56:59 PM", "Misha Brukman", "b4ca41aafe884f40beae3b1f5912aca24d080f5f", ["UserGuide.md"], "@@ -38,39 +38,35 @@\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n \n-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n+Gson can work with arbitrary Java objects including pre-existing objects that you do not have source code of.\n \n ## <a name=\"TOC-Goals-for-Gson\"></a>Goals for Gson\n \n-*   Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa\n-*   Allow pre-existing unmodifiable objects to be converted to and from JSON\n-*   Allow custom representations for objects\n-*   Support arbitrarily complex object\n-*   Generate compact and readability JSON output\n+* Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa\n+* Allow pre-existing unmodifiable objects to be converted to and from JSON\n+* Allow custom representations for objects\n+* Support arbitrarily complex objects\n+* Generate compact and readability JSON output\n \n ## <a name=\"TOC-Gson-Performance-and-Scalability\"></a>Gson Performance and Scalability\n \n-Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [PerformanceTest](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n+Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [`PerformanceTest`](gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n \n-*   Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n+* Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n+* Large collections:\n+  * Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n+  * Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n+* Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n \n-*   Large collections:\n-\n-*   Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n-\n-*   Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n-\n-*   Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n-\n-Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n+Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run JUnit tests.\n \n ## <a name=\"TOC-Gson-Users\"></a>Gson Users\n \n Gson was originally created for use inside Google where it is currently used in a number of projects. It is now used by a number of public projects and companies. See details [here](https://sites.google.com/site/gson/gson-users).\n \n ## <a name=\"TOC-Using-Gson\"></a>Using Gson\n \n-The primary class to use is [Gson](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/Gson.java \"Gson\") which you can just create by calling new Gson(). There is also a class [GsonBuilder](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/GsonBuilder.java \"GsonBuilder\") available that can be used to create a Gson instance with various settings like version control and so on.\n+The primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `new Gson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.\n \n The Gson instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.\n \n@@ -135,14 +131,14 @@ BagOfPrimitives obj2 =gson.fromJson(json, BagOfPrimitives.class);\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n \n-*   It is perfectly fine (and recommended) to use private fields\n-*   There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n-*   If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n-*   This implementation handles nulls correctly\n-*   While serialization, a null field is skipped from the output\n-*   While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n-*   If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n-*   Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n+* It is perfectly fine (and recommended) to use private fields\n+* There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n+* If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n+* This implementation handles nulls correctly\n+* While serialization, a null field is skipped from the output\n+* While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n+* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n+* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n \n ### <a name=\"TOC-Nested-Classes-including-Inner-Classes-\"></a>Nested Classes (including Inner Classes)\n \n@@ -216,9 +212,9 @@ Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n-*   Can serialize collection of arbitrary objects but can not deserialize from it\n-*   Because there is no way for the user to indicate the type of the resulting object\n-*   While deserializing, Collection must be of a specific generic type\n+* Can serialize collection of arbitrary objects but can not deserialize from it\n+* Because there is no way for the user to indicate the type of the resulting object\n+* While deserializing, Collection must be of a specific generic type\n \n All of this makes sense, and is rarely a problem when following good Java coding practices.\n \n@@ -273,13 +269,13 @@ class Event {\n \n You can serialize the collection with Gson without doing anything specific: `toJson(collection)` would write out the desired output.\n \n-However, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in fromJson. So, you have three options:\n+However, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in `fromJson()`. So, you have three options:\n \n-Option 1: Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use Gson.fromJson() on each of the array elements.This is the preferred approach. [Here is an example](http://code.google.com/p/google-gson/source/browse/trunk/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.\n+1. Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use `Gson.fromJson()` on each of the array elements.This is the preferred approach. [Here is an example](extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.\n \n-Option 2: Register a type adapter for Collection.class that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.\n+2. Register a type adapter for `Collection.class` that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.\n \n-Option 3: Register a type adapter for MyCollectionMemberType and use fromJson with Collection<MyCollectionMemberType>\n+3. Register a type adapter for `MyCollectionMemberType` and use `fromJson()` with `Collection<MyCollectionMemberType>`.\n \n This approach is practical only if the array appears as a top-level element or if you can change the field type holding the collection to be of type `Collection<MyCollectionMemberType>`.\n \n@@ -288,20 +284,20 @@ This approach is practical only if the array appears as a top-level element or i\n Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.\n Here is a list of such classes:\n \n-1.  `java.net.URL` to match it with strings like \"http://code.google.com/p/google-gson/\".\n-2.  `java.net.URI` to match it with strings like \"/p/google-gson/\".\n+1. `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n+2. `java.net.URI` to match it with strings like `\"/google/gson/\"`\n \n-You can also find source-code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n+You can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n \n ### <a name=\"TOC-Custom-Serialization-and-Deserialization\"></a>Custom Serialization and Deserialization\n \n Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).\n Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:\n \n-*   Json Serialiers: Need to define custom serialization for an object\n-*   Json Deserializers: Needed to define custom deserialization for a type\n+* Json Serialiers: Need to define custom serialization for an object\n+* Json Deserializers: Needed to define custom deserialization for a type\n \n-*   Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n+* Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n ```\n GsonBuilder gson = new GsonBuilder();\n gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\n@@ -343,22 +339,21 @@ Gson calls `deserialize` when it needs to deserialize a JSON string fragment int\n \n Often you want to register a single handler for all generic types corresponding to a raw type\n \n-*   For example, suppose you have an \"Id\" class for Id representation/translation (i.e. an internal vs. external representation).\n-*   `Id<T>` type that has same serialization for all generic types\n-  *   Essentially write out the id value\n-\n-*   Deserialization is very similar but not exactly the same\n-  *   Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n+* For example, suppose you have an `Id` class for id representation/translation (i.e. an internal vs. external representation).\n+* `Id<T>` type that has same serialization for all generic types\n+  * Essentially write out the id value\n+* Deserialization is very similar but not exactly the same\n+  * Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n \n Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).\n-The `Type` parameter for the `toJson` and `fromJson` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n+The `Type` parameter for the `toJson()` and `fromJson()` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n \n ### <a name=\"TOC-Writing-an-Instance-Creator\"></a>Writing an Instance Creator\n \n While deserializing an Object, Gson needs to create a default instance of the class.\n Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.\n \n-*   Doesn't matter whether public or private\n+* Doesn't matter whether public or private\n \n Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor\n \n@@ -374,8 +369,8 @@ private class MoneyInstanceCreator implements InstanceCreator<Money> {\n \n Type could be of a corresponding generic type\n \n-*   Very useful to invoke constructors which need specific generic type information\n-*   For example, if the `Id` class stores the class for which the Id is being created\n+* Very useful to invoke constructors which need specific generic type information\n+* For example, if the `Id` class stores the class for which the Id is being created\n \n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n@@ -464,7 +459,7 @@ null\n ```\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n-Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n+Multiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n ```\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n@@ -520,9 +515,9 @@ This feature provides a way where you can mark certain fields of your objects to\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n-The following example shows how to exclude fields marked with a specific \"@Foo\" annotation and excludes top-level types (or declared field type) of class String.\n+The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n ```\n   @Retention(RetentionPolicy.RUNTIME)\n   @Target({ElementType.FIELD})\n@@ -605,9 +600,9 @@ If you have a need for custom naming policy ([see this discussion](http://groups\n \n Sometimes you need to share state across custom serializers/deserializers ([see this discussion](http://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb)). You can use the following three strategies to accomplish this:\n \n-1.  Store shared state in static fields\n-2.  Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state\n-3.  Use Java ThreadLocal\n+1. Store shared state in static fields\n+2. Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state\n+3. Use Java `ThreadLocal`\n \n 1 and 2 are not thread-safe options, but 3 is.\n \n@@ -621,4 +616,4 @@ See the [Gson design document](https://sites.google.com/site/gson/gson-design-do\n \n ## <a name=\"TOC-Future-Enhancements-to-Gson\"></a>Future Enhancements to Gson\n \n-For the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](http://code.google.com/p/google-gson/issues/list \"Issues section\") under the project website.\n+For the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](https://github.com/google/gson/issues) under the project website., ", 51, 56, "\"modified, \"", 107], ["Misha Brukman", "Cleanups and formatting fixes\n\n* Formatted multi-line and complex commands via multi-line blocks and\n  line-wrapping for readability and ease of copy-pasting\n* Hid URLs behind text links for readability and brevity\n* Added missing code formatting, both inline and blocks", "11/27/15, 10:39:05 PM", "Misha Brukman", "137100e2e2080639f59f90e5cc2c90e127863241", ["ReleaseProcess.md"], "@@ -3,54 +3,105 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-2. Edit pom.xml and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n+2. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 3. Ensure all changelists are code-reviewed and have +1\n-4. Ensure that your ~/.m2/settings.xml is configured properly (see steps below)\n-5. cd gson. Ensure there are no open files and all changes are committed. \n+4. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n+5. `cd gson`; ensure there are no open files and all changes are committed.\n 6. Run `mvn release:clean`\n 7. Do a dry run: `mvn release:prepare -DdryRun=true`\n 8. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine. \n-  * This will do a full build, change version from -SNAPSHOT to the released version, commit and create the tags. It will then change the version to -SNAPSHOT for the next release.\n-9. Ensure you have defined `sonatype-nexus-staging` in your maven `settings.xml` and run `mvn -s /home/<username>/.m2/settings.xml  release:perform`\n-10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and javadoc jars.\n-  * `cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2  /tmp; cd /tmp/1.7.2`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2-javadoc.jar -Dclassifier=javadoc`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2-sources.jar -Dclassifier=sources`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2.jar`\n-11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+  * Answer questions: usually the defaults are fine.\n+  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+9. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n+\n+   ```bash\n+   mvn -s /home/<username>/.m2/settings.xml release:perform\n+   ```\n+\n+10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n+\n+  ```bash\n+  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n+  cd /tmp/1.7.2\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2-javadoc.jar \\\n+      -Dclassifier=javadoc\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2-sources.jar \\\n+      -Dclassifier=sources\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2.jar\n+  ```\n+\n+11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 12. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n 13. Publishing Javadocs\n-  * Switch to the branch `gh-pages`\n-  * `jar xvf /tmp/2.5/gson-2.5-javadoc.jar`\n-  * `git commit -m 'updated javadocs to 2.5'`\n+\n+  ```bash\n+  # Switch to the branch `gh-pages`\n+  git checkout gh-pages\n+\n+  # Unpack the generated Javadoc\n+  jar xvf /tmp/2.5/gson-2.5-javadoc.jar\n+\n+  # Commit the new Javadoc\n+  git commit -m 'Updated Javadoc to 2.5'\n+\n+  # Push changes to GitHub\n+  git push\n+  ```\n+\n 14. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n 15. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n 16. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n 17. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n \n ## Configuring a machine for deployment to Sonatype Repository\n \n-(Borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease)).\n+This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n 2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n 3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n 4. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n-Based on Gson group thread: https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion\n \n-1. Signup for a Sonatype account following instructions under 2) at https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\n+Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n+\n+1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n 2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n-Download vogar\n-Put `adb` on your `$PATH` and run:\n-`vogar --benchmark --classpath gson.jar path/to/Benchmark.java`\n \n-For example, here is how to run the CollectionsDeserializationBenchmark:\n+* Download vogar\n+* Put `adb` on your `$PATH` and run:\n+\n+  ```bash\n+  vogar --benchmark --classpath gson.jar path/to/Benchmark.java\n+  ```\n+\n+For example, here is how to run the [CollectionsDeserializationBenchmark](gson/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java):\n \n-`export ANDROID_HOME=~/apps/android-sdk-mac_x86\n+```bash\n+export ANDROID_HOME=~/apps/android-sdk-mac_x86\n export PATH=$PATH:$ANDROID_HOME/platform-tools/:$ANDROID_HOME/android-sdk-mac_x86/tools/\n-$VOGAR_HOME/bin/vogar  --benchmark --sourcepath ../gson/src/main/java/  src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java -- --vm \"app_process -Xgc:noconcurrent,app_process\"`\n+$VOGAR_HOME/bin/vogar \\\n+    --benchmark \\\n+    --sourcepath ../gson/src/main/java/ \\\n+    src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java \\\n+    -- \\\n+    --vm \"app_process -Xgc:noconcurrent,app_process\"\n+```, ", 75, 24, "\"modified, \"", 99], ["Misha Brukman", "Added language annotations to code blocks.\n\nThis enables GitHub to do proper syntax highlighting, thus improving the\nreadability of multi-line code blocks. As a result, some changes were required\nto make the code blocks syntactically correct, since they're actually parsed by\nlanguage-aware parsers; primarily, this meant inserting comments.", "11/27/15, 11:33:31 PM", "Misha Brukman", "883fbd0a160d2a7cc57bd0d02242cc8833c0fb67", ["UserGuide.md"], "@@ -26,7 +26,7 @@\n   * [Versioning Support](#TOC-Versioning-Support)\n   * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n     * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n-    * [Gson's @Expose](#TOC-Gson-s-Expose)\n+    * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n     * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n   * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n   * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n@@ -72,7 +72,8 @@ The Gson instance does not maintain any state while invoking Json operations. So\n \n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n To use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:\n-```\n+\n+```xml\n <dependencies>\n     <!--  Gson: Java to Json conversion -->\n     <dependency>\n@@ -83,19 +84,21 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     </dependency>\n </dependencies>\n ```\n+\n That is it, now your maven project is Gson enabled. \n \n ### <a name=\"TOC-Primitives-Examples\"></a>Primitives Examples\n-```\n-(Serialization)\n+\n+```java\n+// Serialization\n Gson gson = new Gson();\n-gson.toJson(1);            ==> prints 1\n-gson.toJson(\"abcd\");       ==> prints \"abcd\"\n-gson.toJson(new Long(10)); ==> prints 10\n+gson.toJson(1);            // ==> 1\n+gson.toJson(\"abcd\");       // ==> \"abcd\"\n+gson.toJson(new Long(10)); // ==> 10\n int[] values = { 1 };\n-gson.toJson(values);       ==> prints [1]\n+gson.toJson(values);       // ==> [1]\n \n-(Deserialization)\n+// Deserialization\n int one = gson.fromJson(\"1\", int.class);\n Integer one = gson.fromJson(\"1\", Integer.class);\n Long one = gson.fromJson(\"1\", Long.class);\n@@ -105,7 +108,8 @@ String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class);\n ```\n \n ### <a name=\"TOC-Object-Examples\"></a>Object Examples\n-```\n+\n+```java\n class BagOfPrimitives {\n   private int value1 = 1;\n   private String value2 = \"abc\";\n@@ -114,19 +118,21 @@ class BagOfPrimitives {\n     // no-args constructor\n   }\n }\n-(Serialization)\n+\n+// Serialization\n BagOfPrimitives obj = new BagOfPrimitives();\n Gson gson = new Gson();\n String json = gson.toJson(obj);  \n \n-==> json is {\"value1\":1,\"value2\":\"abc\"}\n+// ==> json is {\"value1\":1,\"value2\":\"abc\"}\n ```\n \n Note that you can not serialize objects with circular references since that will result in infinite recursion.\n-```\n-(Deserialization)\n-BagOfPrimitives obj2 =gson.fromJson(json, BagOfPrimitives.class);\n-==> obj2 is just like obj\n+\n+```java\n+// Deserialization\n+BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n+// ==> obj2 is just like obj\n ```\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n@@ -146,7 +152,7 @@ Gson can serialize static nested classes quite easily.\n \n Gson can also deserialize static nested classes. However, Gson can **not** automatically deserialize the **pure inner classes since their no-args constructor also need a reference to the containing Object** which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:\n \n-```\n+```java\n public class A { \n   public String a; \n \n@@ -160,11 +166,12 @@ public class A {\n   } \n }\n ```\n+\n **NOTE**: The above class B can not (by default) be serialized with Gson.\n \n Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. if it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n \n-```\n+```java\n public class InstanceCreatorForB implements InstanceCreator<A.B> {\n   private final A a;\n   public InstanceCreatorForB(A a)  {\n@@ -175,36 +182,40 @@ public class InstanceCreatorForB implements InstanceCreator<A.B> {\n   }\n }\n ```\n+\n The above is possible, but not recommended.\n \n ### <a name=\"TOC-Array-Examples\"></a>Array Examples\n-```\n+\n+```java\n Gson gson = new Gson();\n int[] ints = {1, 2, 3, 4, 5};\n String[] strings = {\"abc\", \"def\", \"ghi\"};\n \n-(Serialization)\n-gson.toJson(ints);     ==> prints [1,2,3,4,5]\n-gson.toJson(strings);  ==> prints [\"abc\", \"def\", \"ghi\"]\n+// Serialization\n+gson.toJson(ints);     // ==> [1,2,3,4,5]\n+gson.toJson(strings);  // ==> [\"abc\", \"def\", \"ghi\"]\n \n-(Deserialization)\n+// Deserialization\n int[] ints2 = gson.fromJson(\"[1,2,3,4,5]\", int[].class); \n-==> ints2 will be same as ints\n+// ==> ints2 will be same as ints\n ```\n+\n We also support multi-dimensional arrays, with arbitrarily complex element types.\n \n ### <a name=\"TOC-Collections-Examples\"></a>Collections Examples\n-```\n+\n+```java\n Gson gson = new Gson();\n Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);\n \n-(Serialization)\n-String json = gson.toJson(ints); ==> json is [1,2,3,4,5]\n+// Serialization\n+String json = gson.toJson(ints);  // ==> json is [1,2,3,4,5]\n \n-(Deserialization)\n+// Deserialization\n Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();\n Collection<Integer> ints2 = gson.fromJson(json, collectionType);\n-ints2 is same as ints\n+// ==> ints2 is same as ints\n ```\n \n Fairly hideous: note how we define the type of collection.\n@@ -221,7 +232,8 @@ All of this makes sense, and is rarely a problem when following good Java coding\n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n \n When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n-```\n+\n+```java\n class Foo<T> {\n   T value;\n }\n@@ -235,7 +247,8 @@ gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n-```\n+\n+```java\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n gson.toJson(foo, fooType);\n \n@@ -248,15 +261,18 @@ The idiom used to get `fooType` actually defines an anonymous local inner class\n Sometimes you are dealing with JSON array that contains mixed types. For example:\n `['hello',5,{name:'GREETINGS',source:'guest'}]`\n \n-The equivalent Collection containing this is:\n-```\n+The equivalent `Collection` containing this is:\n+\n+```java\n Collection collection = new ArrayList();\n collection.add(\"hello\");\n collection.add(5);\n collection.add(new Event(\"GREETINGS\", \"guest\"));\n ```\n-Where the Event class is defined as:\n-```\n+\n+where the `Event` class is defined as:\n+\n+```java\n class Event {\n   private String name;\n   private String source;\n@@ -298,7 +314,8 @@ Gson allows you to register your own custom serializers and deserializers. This\n * Json Deserializers: Needed to define custom deserialization for a type\n \n * Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n-```\n+\n+```java\n GsonBuilder gson = new GsonBuilder();\n gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\n gson.registerTypeAdapter(MyType.class, new MySerializer());\n@@ -311,7 +328,8 @@ gson.registerTypeAdapter(MyType.class, new MyInstanceCreator());\n #### <a name=\"TOC-Writing-a-Serializer\"></a>Writing a Serializer\n \n Here is an example of how to write a custom serializer for JodaTime `DateTime` class.\n-```\n+\n+```java\n private class DateTimeSerializer implements JsonSerializer<DateTime> {\n   public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {\n     return new JsonPrimitive(src.toString());\n@@ -324,7 +342,8 @@ Gson calls `serialize()` when it runs into a `DateTime` object during serializat\n #### <a name=\"TOC-Writing-a-Deserializer\"></a>Writing a Deserializer\n \n Here is an example of how to write a custom deserializer for JodaTime DateTime class.\n-```\n+\n+```java\n private class DateTimeDeserializer implements JsonDeserializer<DateTime> {\n   public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n       throws JsonParseException {\n@@ -359,7 +378,7 @@ Typically, Instance Creators are needed when you are dealing with a library clas\n \n **Instance Creator Example**\n \n-```\n+```java\n private class MoneyInstanceCreator implements InstanceCreator<Money> {\n   public Money createInstance(Type type) {\n     return new Money(\"1000000\", CurrencyCode.USD);\n@@ -375,7 +394,8 @@ Type could be of a corresponding generic type\n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n Sometimes that the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n-```\n+\n+```java\n class MyList<T> extends ArrayList<T> {\n }\n \n@@ -387,8 +407,10 @@ class MyListInstanceCreator implements InstanceCreator<MyList<?>> {\n   }\n }\n ```\n+\n However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:\n-```\n+\n+```java\n public class Id<T> {\n   private final Class<T> classOfId;\n   private final long value;\n@@ -425,12 +447,16 @@ String jsonOutput = gson.toJson(someObject);\n The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java.\n \n Here's how you would configure a `Gson` instance to output null:\n-`Gson gson = new GsonBuilder().serializeNulls().create();`\n+\n+```java\n+Gson gson = new GsonBuilder().serializeNulls().create();\n+```\n \n NOTE: when serializing `null`s with Gson, it will add a `JsonNull` element to the `JsonElement` structure. Therefore, this object can be used in custom serialization/deserialization.\n \n Here's an example:\n-```\n+\n+```java\n public class Foo {\n   private final String s;\n   private final int i;\n@@ -452,15 +478,20 @@ System.out.println(json);\n \n json = gson.toJson(null);\n System.out.println(json);\n+```\n+\n+The output is:\n \n-======== OUTPUT ========\n+```\n {\"s\":null,\"i\":5}\n null\n ```\n+\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n Multiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n-```\n+\n+```java\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n   @Since(1.0) private final String newField;\n@@ -482,8 +513,11 @@ System.out.println();\n gson = new Gson();\n jsonOutput = gson.toJson(someObject);\n System.out.println(jsonOutput);\n+```\n \n-======== OUTPUT ========\n+The output is:\n+\n+```\n {\"newField\":\"new\",\"field\":\"old\"}\n \n {\"newerField\":\"newer\",\"newField\":\"new\",\"field\":\"old\"}\n@@ -496,20 +530,23 @@ Gson supports numerous mechanisms for excluding top-level classes, fields and fi\n #### <a name=\"TOC-Java-Modifier-Exclusion\"></a>Java Modifier Exclusion\n \n By default, if you mark a field as `transient`, it will be excluded. As well, if a field is marked as `static` then by default it will be excluded. If you want to include some transient fields then you can do the following:\n-```\n+\n+```java\n import java.lang.reflect.Modifier;\n Gson gson = new GsonBuilder()\n     .excludeFieldsWithModifiers(Modifier.STATIC)\n     .create();\n ```\n+\n NOTE: you can use any number of the `Modifier` constants to `excludeFieldsWithModifiers` method. For example:\n-```\n+\n+```java\n Gson gson = new GsonBuilder()\n     .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)\n     .create();\n ```\n \n-#### <a name=\"TOC-Gson-s-Expose\"></a>Gson's @Expose\n+#### <a name=\"TOC-Gson-s-Expose\"></a>Gson's `@Expose`\n \n This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n \n@@ -518,63 +555,69 @@ This feature provides a way where you can mark certain fields of your objects to\n If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n-```\n-  @Retention(RetentionPolicy.RUNTIME)\n-  @Target({ElementType.FIELD})\n-  public @interface Foo {\n-    // Field tag only annotation\n-  }\n \n-  public class SampleObjectForTest {\n-    @Foo private final int annotatedField;\n-    private final String stringField;\n-    private final long longField;\n-    private final Class<?> clazzField;\n+```java\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD})\n+public @interface Foo {\n+  // Field tag only annotation\n+}\n \n-    public SampleObjectForTest() {\n-      annotatedField = 5;\n-      stringField = \"someDefaultValue\";\n-      longField = 1234;\n-    }\n-  }\n+public class SampleObjectForTest {\n+  @Foo private final int annotatedField;\n+  private final String stringField;\n+  private final long longField;\n+  private final Class<?> clazzField;\n \n-  public class MyExclusionStrategy implements ExclusionStrategy {\n-    private final Class<?> typeToSkip;\n+  public SampleObjectForTest() {\n+    annotatedField = 5;\n+    stringField = \"someDefaultValue\";\n+    longField = 1234;\n+  }\n+}\n \n-    private MyExclusionStrategy(Class<?> typeToSkip) {\n-      this.typeToSkip = typeToSkip;\n-    }\n+public class MyExclusionStrategy implements ExclusionStrategy {\n+  private final Class<?> typeToSkip;\n \n-    public boolean shouldSkipClass(Class<?> clazz) {\n-      return (clazz == typeToSkip);\n-    }\n+  private MyExclusionStrategy(Class<?> typeToSkip) {\n+    this.typeToSkip = typeToSkip;\n+  }\n \n-    public boolean shouldSkipField(FieldAttributes f) {\n-      return f.getAnnotation(Foo.class) != null;\n-    }\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return (clazz == typeToSkip);\n   }\n \n-  public static void main(String[] args) {\n-    Gson gson = new GsonBuilder()\n-        .setExclusionStrategies(new MyExclusionStrategy(String.class))\n-        .serializeNulls()\n-        .create();\n-    SampleObjectForTest src = new SampleObjectForTest();\n-    String json = gson.toJson(src);\n-    System.out.println(json);\n+  public boolean shouldSkipField(FieldAttributes f) {\n+    return f.getAnnotation(Foo.class) != null;\n   }\n+}\n+\n+public static void main(String[] args) {\n+  Gson gson = new GsonBuilder()\n+      .setExclusionStrategies(new MyExclusionStrategy(String.class))\n+      .serializeNulls()\n+      .create();\n+  SampleObjectForTest src = new SampleObjectForTest();\n+  String json = gson.toJson(src);\n+  System.out.println(json);\n+}\n+```\n+\n+The output is:\n \n-======== OUTPUT ========\n+```\n {\"longField\":1234}\n ```\n+\n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n \n The following is an example of how to use both Gson naming policy features:\n-```\n+\n+```java\n private class SomeObject {\n   @SerializedName(\"custom_naming\") private final String someField;\n   private final String someOtherField;\n@@ -589,8 +632,11 @@ SomeObject someObject = new SomeObject(\"first\", \"second\");\n Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();\n String jsonRepresentation = gson.toJson(someObject);\n System.out.println(jsonRepresentation);\n+```\n \n-======== OUTPUT ========\n+The output is:\n+\n+```\n {\"custom_naming\":\"first\",\"SomeOtherField\":\"second\"}\n ```\n , ", 134, 88, "\"modified, \"", 222], ["Misha Brukman", "Remove explicit step numbers; use autonumbering.\n\nMarkdown supports automatic list numbering; using this approach makes it easier\nto add or remove new items without having to update all the following entries.", "11/28/15, 01:09:46 AM", "Misha Brukman", "994d589bcfe5bb6fbc7b2117d27c560ed2785b9a", ["ReleaseProcess.md"], "@@ -3,22 +3,22 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-2. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n-3. Ensure all changelists are code-reviewed and have +1\n-4. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n-5. `cd gson`; ensure there are no open files and all changes are committed.\n-6. Run `mvn release:clean`\n-7. Do a dry run: `mvn release:prepare -DdryRun=true`\n-8. Start the release: `mvn release:prepare`\n+1. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n+1. Ensure all changelists are code-reviewed and have +1\n+1. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n+1. `cd gson`; ensure there are no open files and all changes are committed.\n+1. Run `mvn release:clean`\n+1. Do a dry run: `mvn release:prepare -DdryRun=true`\n+1. Start the release: `mvn release:prepare`\n   * Answer questions: usually the defaults are fine.\n   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n-9. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n+1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n \n    ```bash\n    mvn -s /home/<username>/.m2/settings.xml release:perform\n    ```\n \n-10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n+1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n \n   ```bash\n   cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n@@ -45,9 +45,9 @@ The following is a step-by-step procedure for releasing a new version of Google-\n       -Dfile=gson-1.7.2.jar\n   ```\n \n-11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n-12. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n-13. Publishing Javadocs\n+1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n+1. Publishing Javadocs\n \n   ```bash\n   # Switch to the branch `gh-pages`\n@@ -63,10 +63,10 @@ The following is a step-by-step procedure for releasing a new version of Google-\n   git push\n   ```\n \n-14. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n-15. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n-16. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n-17. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n+1. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n+1. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n+1. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n+1. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n \n ## Configuring a machine for deployment to Sonatype Repository\n , ", 16, 16, "\"modified, \"", 32], ["Jake Wharton", "Remove synthetic accessors from being generated.", "12/27/15, 06:39:19 AM", "Jake Wharton", "7a1c94f9863bfc6915eaa56236dcef46876d4674", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/TreeTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java", "gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -120,7 +120,7 @@\n    * Converts the field name that uses camel-case define word separation into\n    * separate words that are separated by the provided {@code separatorString}.\n    */\n-  private static String separateCamelCase(String name, String separator) {\n+  static String separateCamelCase(String name, String separator) {\n     StringBuilder translation = new StringBuilder();\n     for (int i = 0; i < name.length(); i++) {\n       char character = name.charAt(i);\n@@ -135,7 +135,7 @@ private static String separateCamelCase(String name, String separator) {\n   /**\n    * Ensures the JSON field names begins with an upper case letter.\n    */\n-  private static String upperCaseFirstLetter(String name) {\n+  static String upperCaseFirstLetter(String name) {\n     StringBuilder fieldNameBuilder = new StringBuilder();\n     int index = 0;\n     char firstCharacter = name.charAt(index);, @@ -303,7 +303,7 @@ public Gson() {\n     };\n   }\n \n-  private void checkValidFloatingPoint(double value) {\n+  static void checkValidFloatingPoint(double value) {\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n       throw new IllegalArgumentException(value\n           + \" is not a valid double value as per JSON specification. To override this\"\n@@ -459,7 +459,7 @@ private void checkValidFloatingPoint(double value) {\n    *  }</pre>\n    *  Note that this call will skip all factories registered before {@code skipPast}. In case of\n    *  multiple TypeAdapterFactories registered it is up to the caller of this function to insure\n-   *  that the order of registration does not prevent this method from reaching a factory they \n+   *  that the order of registration does not prevent this method from reaching a factory they\n    *  would expect to reply from this call.\n    *  Note that since you can not override type adapter factories for String and Java primitive\n    *  types, our stats factory will not count the number of String or primitives that will be, @@ -38,7 +38,7 @@\n   /** The delegate is lazily created because it may not be needed, and creating it may fail. */\n   private TypeAdapter<T> delegate;\n \n-  private TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n+  TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n       Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\n     this.serializer = serializer;\n     this.deserializer = deserializer;\n@@ -112,7 +112,7 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n     private final JsonSerializer<?> serializer;\n     private final JsonDeserializer<?> deserializer;\n \n-    private SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,\n+    SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,\n         Class<?> hierarchyType) {\n       serializer = typeAdapter instanceof JsonSerializer\n           ? (JsonSerializer<?>) typeAdapter, @@ -16,9 +16,6 @@\n \n package com.google.gson.internal;\n \n-import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n-import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n-\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.GenericArrayType;\n@@ -34,6 +31,9 @@\n import java.util.NoSuchElementException;\n import java.util.Properties;\n \n+import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n+import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n+\n /**\n  * Static methods for working with types.\n  *\n@@ -212,7 +212,7 @@ public static boolean equals(Type a, Type b) {\n     }\n   }\n \n-  private static int hashCodeOrZero(Object o) {\n+  static int hashCodeOrZero(Object o) {\n     return o != null ? o.hashCode() : 0;\n   }\n \n@@ -430,7 +430,7 @@ private static int indexOf(Object[] array, Object toFind) {\n         : null;\n   }\n \n-  private static void checkNotPrimitive(Type type) {\n+  static void checkNotPrimitive(Type type) {\n     checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());\n   }\n , @@ -762,6 +762,9 @@ void add(Node<K, V> node) {\n     Node<K, V> lastReturned = null;\n     int expectedModCount = modCount;\n \n+    LinkedTreeMapIterator() {\n+    }\n+\n     public final boolean hasNext() {\n       return next != header;\n     }, @@ -528,6 +528,9 @@ public V setValue(V value) {\n     Node<K, V> lastReturned = null;\n     int expectedModCount = modCount;\n \n+    LinkedTreeMapIterator() {\n+    }\n+\n     public final boolean hasNext() {\n       return next != header;\n     }\n@@ -624,4 +627,4 @@ public K next() {\n   private Object writeReplace() throws ObjectStreamException {\n     return new LinkedHashMap<K, V>(this);\n   }\n-}\n\\ No newline at end of file\n+}, @@ -85,7 +85,7 @@ public static Writer writerForAppendable(Appendable appendable) {\n     private final Appendable appendable;\n     private final CurrentWrite currentWrite = new CurrentWrite();\n \n-    private AppendableWriter(Appendable appendable) {\n+    AppendableWriter(Appendable appendable) {\n       this.appendable = appendable;\n     }\n , @@ -104,7 +104,7 @@\n  */\n public final class MapTypeAdapterFactory implements TypeAdapterFactory {\n   private final ConstructorConstructor constructorConstructor;\n-  private final boolean complexMapKeySerialization;\n+  final boolean complexMapKeySerialization;\n \n   public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,\n       boolean complexMapKeySerialization) {, @@ -47,7 +47,7 @@\n \n   private final Gson gson;\n \n-  private ObjectTypeAdapter(Gson gson) {\n+  ObjectTypeAdapter(Gson gson) {\n     this.gson = gson;\n   }\n , @@ -16,16 +16,6 @@\n \n package com.google.gson.internal.bind;\n \n-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n import com.google.gson.FieldNamingStrategy;\n import com.google.gson.Gson;\n import com.google.gson.JsonSyntaxException;\n@@ -42,6 +32,15 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n \n /**\n  * Type adapter that reflects over the fields and methods of a class.\n@@ -127,7 +126,7 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     };\n   }\n \n-  private TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n+  TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n     if (annotation != null) {\n       TypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n@@ -193,7 +192,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {\n     private final ObjectConstructor<T> constructor;\n     private final Map<String, BoundField> boundFields;\n \n-    private Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\n+    Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\n       this.constructor = constructor;\n       this.boundFields = boundFields;\n     }, @@ -242,7 +242,7 @@\n   private int lineNumber = 0;\n   private int lineStart = 0;\n \n-  private int peeked = PEEKED_NONE;\n+  int peeked = PEEKED_NONE;\n \n   /**\n    * A peeked value that was composed entirely of digits with an optional\n@@ -462,7 +462,7 @@ public JsonToken peek() throws IOException {\n     }\n   }\n \n-  private int doPeek() throws IOException {\n+  int doPeek() throws IOException {\n     int peekStack = stack[stackSize - 1];\n     if (peekStack == JsonScope.EMPTY_ARRAY) {\n       stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n@@ -1314,11 +1314,11 @@ private boolean fillBuffer(int minimum) throws IOException {\n     return false;\n   }\n \n-  private int getLineNumber() {\n+  int getLineNumber() {\n     return lineNumber + 1;\n   }\n \n-  private int getColumnNumber() {\n+  int getColumnNumber() {\n     return pos - lineStart + 1;\n   }\n , ", 36, 31, "\"modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, \"", 67], ["Danillo Souza", "timezones without minutes should are valid according RFC3339", "01/11/16, 05:33:55 PM", "Danillo Souza", "ed6298c98a35ccef795caa6cb39bcef01b64e274", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -113,7 +113,7 @@ public static String format(Date date, boolean millis, TimeZone tz) {\n \n     /**\n      * Parse a date from ISO-8601 formatted string. It expects a format\n-     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]\n+     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n      * \n      * @param date ISO string to parse in the appropriate format.\n      * @param pos The position to start parsing from, updated to where parsing stopped.\n@@ -209,6 +209,10 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {\n                 offset += 1;\n             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                 String timezoneOffset = date.substring(offset);\n+\n+                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00\n+                timezoneOffset = timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + \"00\";\n+\n                 offset += timezoneOffset.length();\n                 // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n                 if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {, @@ -130,6 +130,7 @@ public void testDateDeserializationISO8601() throws Exception {\n     assertParsed(\"1970-01-01T00:00Z\", adapter);\n     assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n     assertParsed(\"1970-01-01T01:00:00+01:00\", adapter);\n+    assertParsed(\"1970-01-01T01:00:00+01\", adapter);\n   }\n   \n   public void testDateSerialization() throws Exception {, ", 6, 1, "\"modified, modified, \"", 7], ["Psidium", "fix typo in JsonArray docs", "01/12/16, 01:02:42 PM", "Psidium", "61f58baaf926d3e6b16a52305537b3495f155ca8", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -162,7 +162,7 @@ public int size() {\n   }\n \n   /**\n-   * Returns an iterator to navigate the elemetns of the array. Since the array is an ordered list,\n+   * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,\n    * the iterator navigates the elements in the order they were inserted.\n    *\n    * @return an iterator to navigate the elements of the array., ", 1, 1, "\"modified, \"", 2], ["Jake Wharton", "Add setting for leniency on Gson instance.\n\nAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.", "01/17/16, 08:03:04 AM", "Jake Wharton", "3360c93a76a74d1182b912052973e08ffa868b43", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/functional/LeniencyTest.java"], "@@ -101,6 +101,12 @@\n  */\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n+  static final boolean DEFAULT_LENIENT = false;\n+  static final boolean DEFAULT_PRETTY_PRINT = false;\n+  static final boolean DEFAULT_ESCAPE_HTML = true;\n+  static final boolean DEFAULT_SERIALIZE_NULLS = false;\n+  static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n+  static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n@@ -124,6 +130,7 @@\n   private final boolean htmlSafe;\n   private final boolean generateNonExecutableJson;\n   private final boolean prettyPrinting;\n+  private final boolean lenient;\n \n   final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n     @SuppressWarnings(\"unchecked\")\n@@ -177,22 +184,24 @@\n    */\n   public Gson() {\n     this(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,\n-        Collections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,\n-        true, false, false, LongSerializationPolicy.DEFAULT,\n-        Collections.<TypeAdapterFactory>emptyList());\n+        Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,\n+        DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,\n+        DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,\n+        LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());\n   }\n \n   Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingPolicy,\n       final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n-      boolean prettyPrinting, boolean serializeSpecialFloatingPointValues,\n+      boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy,\n       List<TypeAdapterFactory> typeAdapterFactories) {\n     this.constructorConstructor = new ConstructorConstructor(instanceCreators);\n     this.serializeNulls = serializeNulls;\n     this.generateNonExecutableJson = generateNonExecutableGson;\n     this.htmlSafe = htmlSafe;\n     this.prettyPrinting = prettyPrinting;\n+    this.lenient = lenient;\n \n     List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();\n \n@@ -704,6 +713,15 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {\n     return jsonWriter;\n   }\n \n+  /**\n+   * Returns a new JSON writer configured for the settings on this Gson instance.\n+   */\n+  public JsonReader newJsonReader(Reader reader) {\n+    JsonReader jsonReader = new JsonReader(reader);\n+    jsonReader.setLenient(lenient);\n+    return jsonReader;\n+  }\n+\n   /**\n    * Writes the JSON for {@code jsonElement} to {@code writer}.\n    * @throws JsonIOException if there was a problem writing to the writer\n@@ -795,7 +813,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * @since 1.2\n    */\n   public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {\n-    JsonReader jsonReader = new JsonReader(json);\n+    JsonReader jsonReader = newJsonReader(json);\n     Object object = fromJson(jsonReader, classOfT);\n     assertFullConsumption(object, jsonReader);\n     return Primitives.wrap(classOfT).cast(object);\n@@ -822,7 +840,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n-    JsonReader jsonReader = new JsonReader(json);\n+    JsonReader jsonReader = newJsonReader(json);\n     T object = (T) fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;, @@ -16,6 +16,7 @@\n \n package com.google.gson;\n \n+import com.google.gson.stream.JsonReader;\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n@@ -31,6 +32,14 @@\n import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.reflect.TypeToken;\n \n+import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;\n+import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;\n+import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;\n+import static com.google.gson.Gson.DEFAULT_LENIENT;\n+import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;\n+import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;\n+import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;\n+\n /**\n  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration\n  * options other than the default. For {@link Gson} with default configuration, it is simpler to\n@@ -74,15 +83,16 @@\n   private final List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();\n   /** tree-style hierarchy factories. These come after factories for backwards compatibility. */\n   private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();\n-  private boolean serializeNulls;\n+  private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;\n   private String datePattern;\n   private int dateStyle = DateFormat.DEFAULT;\n   private int timeStyle = DateFormat.DEFAULT;\n-  private boolean complexMapKeySerialization;\n-  private boolean serializeSpecialFloatingPointValues;\n-  private boolean escapeHtmlChars = true;\n-  private boolean prettyPrinting;\n-  private boolean generateNonExecutableJson;\n+  private boolean complexMapKeySerialization = DEFAULT_COMPLEX_MAP_KEYS;\n+  private boolean serializeSpecialFloatingPointValues = DEFAULT_SPECIALIZE_FLOAT_VALUES;\n+  private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;\n+  private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;\n+  private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;\n+  private boolean lenient = DEFAULT_LENIENT;\n \n   /**\n    * Creates a GsonBuilder instance that can be used to build Gson with various configuration\n@@ -351,6 +361,19 @@ public GsonBuilder setPrettyPrinting() {\n     return this;\n   }\n \n+  /**\n+   * By default, Gson is strict and only accepts JSON as specified by\n+   * <a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. This option makes the parser\n+   * liberal in what it accepts.\n+   *\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @see JsonReader#setLenient(boolean)\n+   */\n+  public GsonBuilder setLenient() {\n+    lenient = true;\n+    return this;\n+  }\n+\n   /**\n    * By default, Gson escapes HTML characters such as &lt; &gt; etc. Use this option to configure\n    * Gson to pass-through HTML characters as is.\n@@ -544,7 +567,7 @@ public Gson create() {\n \n     return new Gson(excluder, fieldNamingPolicy, instanceCreators,\n         serializeNulls, complexMapKeySerialization,\n-        generateNonExecutableJson, escapeHtmlChars, prettyPrinting,\n+        generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,\n         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);\n   }\n , @@ -294,7 +294,7 @@ public JsonReader(Reader in) {\n   }\n \n   /**\n-   * Configure this parser to be  be liberal in what it accepts. By default,\n+   * Configure this parser to be liberal in what it accepts. By default,\n    * this parser is strict and only accepts JSON as specified by <a\n    * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n    * parser to lenient causes it to ignore the following syntax errors:, @@ -0,0 +1,46 @@\n+/*\n+ * Copyright (C) 2016 The Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import java.util.List;\n+import junit.framework.TestCase;\n+\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * Functional tests for leniency option.\n+ */\n+public class LeniencyTest extends TestCase {\n+\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().setLenient().create();\n+  }\n+\n+  public void testLenientFromJson() {\n+    List<String> json = gson.fromJson(\"\"\n+        + \"[ # One!\\n\"\n+        + \"  'Hi' #Element!\\n\"\n+        + \"] # Array!\", new TypeToken<List<String>>() {}.getType());\n+    assertEquals(singletonList(\"Hi\"), json);\n+  }\n+}, ", 101, 14, "\"modified, modified, modified, added, \"", 115], ["Jerzy Chalupski", "Make TypeAdapters created by @JsonAdapter null-safe", "01/18/16, 03:41:07 PM", "Jerzy Chalupski", "23e2916947940864f828505531aa130fba6d8743", ["gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -51,18 +51,20 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n       TypeToken<?> fieldType, JsonAdapter annotation) {\n     Class<?> value = annotation.value();\n+    final TypeAdapter<?> typeAdapter;\n     if (TypeAdapter.class.isAssignableFrom(value)) {\n-          Class<TypeAdapter<?>> typeAdapter = (Class<TypeAdapter<?>>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n-    }\n-    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n-          Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n+      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n+    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n           .construct()\n           .create(gson, fieldType);\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n     }\n \n-    throw new IllegalArgumentException(\n-        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n+    return typeAdapter.nullSafe();\n   }\n }, @@ -133,6 +133,12 @@ public void testSuperclassTypeAdapterNotInvoked() {\n     assertFalse(json.contains(\"jsonAdapter\"));\n   }\n \n+  public void testNullSafeObjectFromJson() {\n+    Gson gson = new Gson();\n+    NullableClass fromJson = gson.fromJson(\"null\", NullableClass.class);\n+    assertNull(fromJson);\n+  }\n+\n   @JsonAdapter(A.JsonAdapter.class)\n   private static class A {\n     final String value;\n@@ -215,6 +221,23 @@ public void testSuperclassTypeAdapterNotInvoked() {\n     }\n   }\n \n+  @JsonAdapter(value = NullableClassJsonAdapter.class)\n+  private static class NullableClass {\n+  }\n+\n+  private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {\n+    @Override\n+    public void write(JsonWriter out, NullableClass value) throws IOException {\n+      out.value(\"nullable\");\n+    }\n+\n+    @Override\n+    public NullableClass read(JsonReader in) throws IOException {\n+      in.nextString();\n+      return new NullableClass();\n+    }\n+  }\n+\n   @JsonAdapter(FooJsonAdapter.class)\n   private static enum Foo { BAR, BAZ }\n   private static class FooJsonAdapter extends TypeAdapter<Foo> {, @@ -200,4 +200,24 @@ public void testJsonAdapterInvokedOnlyForAnnotatedFields() {\n       this.part2 = part2;\n     }\n   }\n+\n+  public void testJsonAdapterWrappedInNullSafeAsRequested() {\n+    Gson gson = new Gson();\n+    String fromJson = \"{'part':null}\";\n+\n+    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\n+    assertNull(gadget.part);\n+\n+    String toJson = gson.toJson(gadget);\n+    assertFalse(toJson.contains(\"PartJsonFieldAnnotationAdapter\"));\n+  }\n+\n+  private static final class GadgetWithOptionalPart {\n+    @JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)\n+    final Part part;\n+\n+    private GadgetWithOptionalPart(Part part) {\n+      this.part = part;\n+    }\n+  }\n }, ", 53, 8, "\"modified, modified, modified, \"", 61], ["Jake Wharton", "Update reader and writer for RFC 7159.", "01/18/16, 08:07:33 PM", "Jake Wharton", "c8627c8ab831dec86eeb52fc02600b22c81ba858", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -24,7 +24,7 @@\n import java.io.Reader;\n \n /**\n- * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n+ * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n  * encoded value as a stream of tokens. This stream includes both literal\n  * values (strings, numbers, booleans, and nulls) as well as the begin and\n  * end delimiters of objects and arrays. The tokens are traversed in\n@@ -571,9 +571,6 @@ int doPeek() throws IOException {\n       checkLenient();\n       return peeked = PEEKED_SINGLE_QUOTED;\n     case '\"':\n-      if (stackSize == 1) {\n-        checkLenient();\n-      }\n       return peeked = PEEKED_DOUBLE_QUOTED;\n     case '[':\n       return peeked = PEEKED_BEGIN_ARRAY;\n@@ -583,10 +580,6 @@ int doPeek() throws IOException {\n       pos--; // Don't consume the first character in a literal value.\n     }\n \n-    if (stackSize == 1) {\n-      checkLenient(); // Top-level value isn't an array or an object.\n-    }\n-\n     int result = peekKeyword();\n     if (result != PEEKED_NONE) {\n       return result;, @@ -30,7 +30,7 @@\n import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;\n \n /**\n- * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n+ * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n  * encoded value to a stream, one token at a time. The stream includes both\n  * literal values (strings, numbers, booleans and nulls) as well as the begin\n  * and end delimiters of objects and arrays.\n@@ -130,7 +130,7 @@\n public class JsonWriter implements Closeable, Flushable {\n \n   /*\n-   * From RFC 4627, \"All Unicode characters may be placed within the\n+   * From RFC 7159, \"All Unicode characters may be placed within the\n    * quotation marks except for the characters that must be escaped:\n    * quotation mark, reverse solidus, and the control characters\n    * (U+0000 through U+001F).\"\n@@ -222,7 +222,7 @@ public final void setIndent(String indent) {\n   /**\n    * Configure this writer to relax its syntax rules. By default, this writer\n    * only emits well-formed JSON as specified by <a\n-   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the writer\n+   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n    * to lenient permits the following:\n    * <ul>\n    *   <li>Top-level values of any type. With strict writing, the top-level\n@@ -322,7 +322,7 @@ public JsonWriter endObject() throws IOException {\n    * bracket.\n    */\n   private JsonWriter open(int empty, String openBracket) throws IOException {\n-    beforeValue(true);\n+    beforeValue();\n     push(empty);\n     out.write(openBracket);\n     return this;\n@@ -415,7 +415,7 @@ public JsonWriter value(String value) throws IOException {\n       return nullValue();\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     string(value);\n     return this;\n   }\n@@ -432,7 +432,7 @@ public JsonWriter jsonValue(String value) throws IOException {\n       return nullValue();\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.append(value);\n     return this;\n   }\n@@ -451,7 +451,7 @@ public JsonWriter nullValue() throws IOException {\n         return this; // skip the name and the value\n       }\n     }\n-    beforeValue(false);\n+    beforeValue();\n     out.write(\"null\");\n     return this;\n   }\n@@ -463,7 +463,7 @@ public JsonWriter nullValue() throws IOException {\n    */\n   public JsonWriter value(boolean value) throws IOException {\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.write(value ? \"true\" : \"false\");\n     return this;\n   }\n@@ -480,7 +480,7 @@ public JsonWriter value(double value) throws IOException {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.append(Double.toString(value));\n     return this;\n   }\n@@ -492,7 +492,7 @@ public JsonWriter value(double value) throws IOException {\n    */\n   public JsonWriter value(long value) throws IOException {\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.write(Long.toString(value));\n     return this;\n   }\n@@ -515,7 +515,7 @@ public JsonWriter value(Number value) throws IOException {\n         && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    beforeValue(false);\n+    beforeValue();\n     out.append(string);\n     return this;\n   }\n@@ -608,12 +608,9 @@ private void beforeName() throws IOException {\n    * Inserts any necessary separators and whitespace before a literal value,\n    * inline array, or inline object. Also adjusts the stack to expect either a\n    * closing bracket or another element.\n-   *\n-   * @param root true if the value is a new array or object, the two values\n-   *     permitted as top-level elements.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private void beforeValue(boolean root) throws IOException {\n+  private void beforeValue() throws IOException {\n     switch (peek()) {\n     case NONEMPTY_DOCUMENT:\n       if (!lenient) {\n@@ -622,10 +619,6 @@ private void beforeValue(boolean root) throws IOException {\n       }\n       // fall-through\n     case EMPTY_DOCUMENT: // first in document\n-      if (!lenient && !root) {\n-        throw new IllegalStateException(\n-            \"JSON must start with an array or an object.\");\n-      }\n       replaceTop(NONEMPTY_DOCUMENT);\n       break;\n , @@ -195,14 +195,6 @@ public void testEmptyString() {\n     }\n   }\n \n-  public void testNoTopLevelObject() {\n-    try {\n-      new JsonReader(reader(\"true\")).nextBoolean();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n-\n   public void testCharacterUnescaping() throws IOException {\n     String json = \"[\\\"a\\\",\"\n         + \"\\\"a\\\\\\\"\\\",\"\n@@ -1227,44 +1219,37 @@ public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\n     }\n   }\n \n-  public void testStrictTopLevelString() {\n-    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n-    try {\n-      reader.nextString();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n+  public void testTopLevelValueTypes() throws IOException {\n+    JsonReader reader1 = new JsonReader(reader(\"true\"));\n+    assertTrue(reader1.nextBoolean());\n+    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());\n \n-  public void testLenientTopLevelString() throws IOException {\n-    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n-    reader.setLenient(true);\n-    assertEquals(\"a\", reader.nextString());\n-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n-  }\n+    JsonReader reader2 = new JsonReader(reader(\"false\"));\n+    assertFalse(reader2.nextBoolean());\n+    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());\n \n-  public void testStrictTopLevelValueType() {\n-    JsonReader reader = new JsonReader(reader(\"true\"));\n-    try {\n-      reader.nextBoolean();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n+    JsonReader reader3 = new JsonReader(reader(\"null\"));\n+    assertEquals(JsonToken.NULL, reader3.peek());\n+    reader3.nextNull();\n+    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());\n \n-  public void testLenientTopLevelValueType() throws IOException {\n-    JsonReader reader = new JsonReader(reader(\"true\"));\n-    reader.setLenient(true);\n-    assertEquals(true, reader.nextBoolean());\n+    JsonReader reader4 = new JsonReader(reader(\"123\"));\n+    assertEquals(123, reader4.nextInt());\n+    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());\n+\n+    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n+    assertEquals(123.4, reader5.nextDouble());\n+    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());\n+\n+    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n+    assertEquals(\"a\", reader6.nextString());\n+    assertEquals(JsonToken.END_DOCUMENT, reader6.peek());\n   }\n \n-  public void testStrictTopLevelValueTypeWithSkipValue() {\n+  public void testTopLevelValueTypeWithSkipValue() throws IOException {\n     JsonReader reader = new JsonReader(reader(\"true\"));\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n+    reader.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n   public void testStrictNonExecutePrefix() {\n@@ -1524,7 +1509,7 @@ public void testUnterminatedObject() throws IOException {\n     } catch (MalformedJsonException expected) {\n     }\n   }\n-  \n+\n   public void testVeryLongQuotedString() throws IOException {\n     char[] stringChars = new char[1024 * 16];\n     Arrays.fill(stringChars, 'x');, @@ -25,11 +25,44 @@\n @SuppressWarnings(\"resource\")\n public final class JsonWriterTest extends TestCase {\n \n-  public void testWrongTopLevelType() throws IOException {\n+  public void testTopLevelValueTypes() throws IOException {\n+    StringWriter string1 = new StringWriter();\n+    JsonWriter writer1 = new JsonWriter(string1);\n+    writer1.value(true);\n+    writer1.close();\n+    assertEquals(\"true\", string1.toString());\n+\n+    StringWriter string2 = new StringWriter();\n+    JsonWriter writer2 = new JsonWriter(string2);\n+    writer2.nullValue();\n+    writer2.close();\n+    assertEquals(\"null\", string2.toString());\n+\n+    StringWriter string3 = new StringWriter();\n+    JsonWriter writer3 = new JsonWriter(string3);\n+    writer3.value(123);\n+    writer3.close();\n+    assertEquals(\"123\", string3.toString());\n+\n+    StringWriter string4 = new StringWriter();\n+    JsonWriter writer4 = new JsonWriter(string4);\n+    writer4.value(123.4);\n+    writer4.close();\n+    assertEquals(\"123.4\", string4.toString());\n+\n+    StringWriter string5 = new StringWriter();\n+    JsonWriter writert = new JsonWriter(string5);\n+    writert.value(\"a\");\n+    writert.close();\n+    assertEquals(\"\\\"a\\\"\", string5.toString());\n+  }\n+\n+  public void testInvalidTopLevelTypes() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.name(\"hello\");\n     try {\n-      jsonWriter.value(\"a\");\n+      jsonWriter.value(\"world\");\n       fail();\n     } catch (IllegalStateException expected) {\n     }, ", 74, 70, "\"modified, modified, modified, modified, \"", 144], ["jwilson", "Simplify Gson poms.\n\nA lot of the configuration in these poms has been taken over by improvements\nto the Maven release plugin.", "02/11/16, 05:47:25 PM", "jwilson", "2016e9553eb946a09a9e70d83d31f4e8da675805", ["gson/pom.xml", "pom.xml"], "@@ -1,246 +1,36 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>com.google.code.gson</groupId>\n-  <artifactId>gson</artifactId>\n-  <packaging>jar</packaging>\n-  <version>2.6-SNAPSHOT</version>\n-  <inceptionYear>2008</inceptionYear>\n-  <name>Gson</name>\n+\n   <parent>\n-    <groupId>org.sonatype.oss</groupId>\n-    <artifactId>oss-parent</artifactId>\n-    <version>9</version>\n-    <relativePath />\n+    <groupId>com.google.code.gson</groupId>\n+    <artifactId>gson-parent</artifactId>\n+    <version>2.6-SNAPSHOT</version>\n   </parent>\n-  <url>https://github.com/google/gson</url>\n-  <description>Google Gson: Java to JSON conversion library</description>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <licenses>\n-    <license>\n-      <name>The Apache Software License, Version 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-      <distribution>repo</distribution>\n-    </license>\n-  </licenses>\n-  <scm>\n-    <connection>scm:git:https://github.com/google/gson.git</connection>\n-    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n-    <url>https://github.com/google/gson</url>\n-    <tag>gson-${project.version}</tag>\n-  </scm>\n-  <issueManagement>\n-    <system>Github Issue Tracking</system>\n-    <url>https://github.com/google/gson/issues</url>\n-  </issueManagement>\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <name>Sonatype Nexus Snapshots</name>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <name>Nexus Release Repository</name>\n-      <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n-  <organization>\n-    <name>Google, Inc.</name>\n-    <url>http://www.google.com</url>\n-  </organization>\n+\n+  <artifactId>gson</artifactId>\n+  <name>Gson</name>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n-  <profiles>\n-    <!-- Activate PGP signing only when performing a release -->\n-    <profile>\n-      <id>release-sign-artifacts</id>\n-      <activation>\n-        <property>\n-          <name>performRelease</name>\n-          <value>true</value>\n-        </property>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-gpg-plugin</artifactId>\n-            <version>1.5</version>\n-            <executions>\n-              <execution>\n-                <id>sign-artifacts</id>\n-                <phase>verify</phase>\n-                <goals>\n-                  <goal>sign</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-    <profile>\n-      <id>doclint-java8-disable</id>\n-      <activation>\n-        <jdk>[1.8,)</jdk>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-javadoc-plugin</artifactId>\n-            <configuration>\n-              <additionalparam>-Xdoclint:none</additionalparam>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n+\n   <build>\n-    <defaultGoal>package</defaultGoal>\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.3</version>\n-        <configuration>\n-          <source>1.6</source>\n-          <target>1.6</target>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.6</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>jar</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <archive>\n-            <addMavenDescriptor>false</addMavenDescriptor>\n-            <manifestEntries>\n-              <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n-              <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n-              <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n-              <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n-              <Bundle-Name>${project.name}</Bundle-Name>\n-              <Bundle-Description>${project.description}</Bundle-Description>\n-              <Bundle-ClassPath>.</Bundle-ClassPath>\n-              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-              <Bundle-SymbolicName>com.google.gson</Bundle-SymbolicName>\n-            </manifestEntries>\n-          </archive>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-       <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n-         <executions>\n-           <execution>\n-             <id>attach-sources</id>\n-             <phase>verify</phase>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <archive>\n-             <manifestEntries>\n-               <Eclipse-SourceBundle>com.google.gson;version=\"${project.version}\"</Eclipse-SourceBundle>\n-               <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>\n-               <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-               <Bundle-Version>${project.version}</Bundle-Version>\n-             </manifestEntries>\n-           </archive>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.3</version>\n-         <executions>\n-           <execution>\n-             <id>attach-javadocs</id>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <includePackageNames>com.google.gson</includePackageNames>\n-           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n-            <links>\n-             <link>http://docs.oracle.com/javase/6/docs/api/</link>\n-           </links>\n-           <version>true</version>\n-           <show>protected</show>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.10</version>\n-         <configuration>\n-           <downloadSources>true</downloadSources>\n-           <downloadJavadocs>true</downloadJavadocs>\n-           <workspace>\n-             ../eclipse-ws/\n-           </workspace>\n-           <workspaceCodeStylesURL>\n-             file:///${basedir}/../lib/gson-formatting-styles.xml\n-           </workspaceCodeStylesURL>\n-         </configuration>\n-       </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-release-plugin</artifactId>\n-        <!-- version>2.5</version -->\n-        <configuration>\n-          <arguments>-DenableCiProfile=true</arguments>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.5</version>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n         <configuration>\n-          <descriptor>assembly-descriptor.xml</descriptor>\n-          <finalName>google-gson-${project.version}</finalName>\n-          <outputDirectory>target/dist</outputDirectory>\n-          <workDirectory>target/assembly/work</workDirectory>\n+          <includePackageNames>com.google.gson</includePackageNames>\n+          <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n+          <links>\n+            <link>http://docs.oracle.com/javase/6/docs/api/</link>\n+          </links>\n         </configuration>\n       </plugin>\n     </plugins>\n   </build>\n-  <developers>\n-    <developer>\n-      <name>Inderjeet Singh</name>\n-    </developer>\n-    <developer>\n-      <name>Joel Leitch</name>\n-      <organization>Google Inc.</organization>\n-    </developer>\n-    <developer>\n-      <name>Jesse Wilson</name>\n-      <organization>Square Inc.</organization>\n-    </developer>\n-  </developers>\n </project>, @@ -1,249 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>com.google.code.gson</groupId>\n-  <artifactId>gson-parent</artifactId>\n-  <packaging>pom</packaging>\n-  <version>2.6-SNAPSHOT</version>\n-  <inceptionYear>2008</inceptionYear>\n-  <name>Gson Parent</name>\n+\n   <parent>\n     <groupId>org.sonatype.oss</groupId>\n     <artifactId>oss-parent</artifactId>\n-    <version>9</version>\n-    <relativePath />\n+    <version>7</version>\n   </parent>\n+\n+  <groupId>com.google.code.gson</groupId>\n+  <artifactId>gson-parent</artifactId>\n+  <version>2.6-SNAPSHOT</version>\n+  <packaging>pom</packaging>\n+\n+  <name>Gson Parent</name>\n+  <description>Gson JSON library</description>\n   <url>https://github.com/google/gson</url>\n-  <description>Google Gson library</description>\n+\n+  <modules>\n+    <module>gson</module>\n+  </modules>\n+\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <java.version>1.7</java.version>\n   </properties>\n-  <licenses>\n-    <license>\n-      <name>The Apache Software License, Version 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-      <distribution>repo</distribution>\n-    </license>\n-  </licenses>\n+\n   <scm>\n+    <url>https://github.com/google/gson/</url>\n     <connection>scm:git:https://github.com/google/gson.git</connection>\n-    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n-    <url>https://github.com/google/gson</url>\n-    <tag>gson-${project.version}</tag>\n+    <developerConnection>scm:git:git@github.com:google/gson.git</developerConnection>\n+    <tag>HEAD</tag>\n   </scm>\n+\n   <issueManagement>\n-    <system>Github Issue Tracking</system>\n+    <system>GitHub Issues</system>\n     <url>https://github.com/google/gson/issues</url>\n   </issueManagement>\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <name>Sonatype Nexus Snapshots</name>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <name>Nexus Release Repository</name>\n-      <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n-  <organization>\n-    <name>Google, Inc.</name>\n-    <url>http://www.google.com</url>\n-  </organization>\n-  <dependencies>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n-      <scope>test</scope>\n-    </dependency>\n-  </dependencies>\n-  <modules>\n-    <module>gson</module>\n-  </modules>\n-  <profiles>\n-    <!-- Activate PGP signing only when performing a release -->\n-    <profile>\n-      <id>release-sign-artifacts</id>\n-      <activation>\n-        <property>\n-          <name>performRelease</name>\n-          <value>true</value>\n-        </property>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-gpg-plugin</artifactId>\n-            <version>1.5</version>\n-            <executions>\n-              <execution>\n-                <id>sign-artifacts</id>\n-                <phase>verify</phase>\n-                <goals>\n-                  <goal>sign</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-    <profile>\n-      <id>doclint-java8-disable</id>\n-      <activation>\n-        <jdk>[1.8,)</jdk>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-javadoc-plugin</artifactId>\n-            <configuration>\n-              <additionalparam>-Xdoclint:none</additionalparam>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n+\n+  <licenses>\n+    <license>\n+      <name>Apache 2.0</name>\n+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+    </license>\n+  </licenses>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>junit</groupId>\n+        <artifactId>junit</artifactId>\n+        <version>3.8.2</version>\n+        <scope>test</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n   <build>\n-    <defaultGoal>package</defaultGoal>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-compiler-plugin</artifactId>\n+          <version>3.0</version>\n+          <configuration>\n+            <source>${java.version}</source>\n+            <target>${java.version}</target>\n+          </configuration>\n+        </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-javadoc-plugin</artifactId>\n+          <version>2.10.3</version>\n+        </plugin>\n+      </plugins>\n+    </pluginManagement>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.3</version>\n-        <configuration>\n-          <source>1.5</source>\n-          <target>1.5</target>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.6</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>jar</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <archive>\n-            <addMavenDescriptor>false</addMavenDescriptor>\n-            <manifestEntries>\n-              <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n-              <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n-              <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n-              <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n-              <Bundle-Name>${project.name}</Bundle-Name>\n-              <Bundle-Description>${project.description}</Bundle-Description>\n-              <Bundle-ClassPath>.</Bundle-ClassPath>\n-              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-              <Bundle-SymbolicName>com.google.gson</Bundle-SymbolicName>\n-            </manifestEntries>\n-          </archive>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-       <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n-         <executions>\n-           <execution>\n-             <id>attach-sources</id>\n-             <phase>verify</phase>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <archive>\n-             <manifestEntries>\n-               <Eclipse-SourceBundle>com.google.gson;version=\"${project.version}\"</Eclipse-SourceBundle>\n-               <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>\n-               <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-               <Bundle-Version>${project.version}</Bundle-Version>\n-             </manifestEntries>\n-           </archive>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.3</version>\n-         <executions>\n-           <execution>\n-             <id>attach-javadocs</id>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <includePackageNames>com.google.gson</includePackageNames>\n-           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n-            <links>\n-             <link>http://docs.oracle.com/javase/1.5.0/docs/api/</link>\n-           </links>\n-           <version>true</version>\n-           <show>protected</show>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.10</version>\n-         <configuration>\n-           <downloadSources>true</downloadSources>\n-           <downloadJavadocs>true</downloadJavadocs>\n-           <workspace>\n-             ../eclipse-ws/\n-           </workspace>\n-           <workspaceCodeStylesURL>\n-             file:///${basedir}/../lib/gson-formatting-styles.xml\n-           </workspaceCodeStylesURL>\n-         </configuration>\n-       </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-release-plugin</artifactId>\n-        <!-- version>2.5</version -->\n-        <configuration>\n-          <arguments>-DenableCiProfile=true</arguments>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.5</version>\n+        <version>2.4.2</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.apache.maven.scm</groupId>\n+            <artifactId>maven-scm-provider-gitexe</artifactId>\n+            <version>1.9</version>\n+          </dependency>\n+        </dependencies>\n         <configuration>\n-          <descriptor>assembly-descriptor.xml</descriptor>\n-          <finalName>google-gson-${project.version}</finalName>\n-          <outputDirectory>target/dist</outputDirectory>\n-          <workDirectory>target/assembly/work</workDirectory>\n+          <autoVersionSubmodules>true</autoVersionSubmodules>\n         </configuration>\n       </plugin>\n     </plugins>\n   </build>\n-  <developers>\n-    <developer>\n-      <name>Inderjeet Singh</name>\n-    </developer>\n-    <developer>\n-      <name>Joel Leitch</name>\n-      <organization>Google Inc.</organization>\n-    </developer>\n-    <developer>\n-      <name>Jesse Wilson</name>\n-      <organization>Square Inc.</organization>\n-    </developer>\n-  </developers>\n </project>, ", 85, 447, "\"modified, modified, \"", 532], ["jwilson", "Build Gson for Java 1.6.\n\nThe upgrade to Java 1.7 was a clumsy bug.", "02/12/16, 03:42:41 AM", "jwilson", "11d89f39c963f8efb6440add80328dbcf53b74ed", ["pom.xml"], "@@ -24,7 +24,7 @@\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <java.version>1.7</java.version>\n+    <java.version>1.6</java.version>\n   </properties>\n \n   <scm>, ", 1, 1, "\"modified, \"", 2], ["Marcelo Camargo", "Fixed code style to remove explicit casting op.\n\n\u00b7 Separated binary operators", "02/14/16, 05:47:05 AM", "Marcelo Camargo", "bddc1a9ed385595ab8ec75aa0ac9be586f55a68f", ["examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java"], "@@ -52,6 +52,6 @@ public String getCurrencyCode() {\n   @Override\n   public String toString() {\n     return String.format(\"(item: %s, qty: %s, price: %.2f %s)\",\n-        name, quantity, priceInMicros/(double)1000000, currencyCode);\n+        name, quantity, priceInMicros / 1000000d, currencyCode);\n   }\n }, ", 1, 1, "\"modified, \"", 2], ["Dongjoon Hyun", "Fix some typos in gson comments.", "02/15/16, 10:11:23 PM", "Dongjoon Hyun", "aa209fa2555271215a89fe382a4b9078102e6abd", ["gson/src/main/java/com/google/gson/FieldAttributes.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/test/java/com/google/gson/ParameterizedTypeTest.java", "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java"], "@@ -68,7 +68,7 @@ public String getName() {\n    *   private List&lt;String&gt; red;\n    * }\n    *\n-   * Type listParmeterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n+   * Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n    * </pre>\n    *\n    * <p>This method would return {@code String.class} for the {@code bar} field and, @@ -78,7 +78,7 @@\n  * <p>If the object that your are serializing/deserializing is a {@code ParameterizedType}\n  * (i.e. contains at least one type parameter and may be an array) then you must use the\n  * {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method.  Here is an\n- * example for serializing and deserialing a {@code ParameterizedType}:\n+ * example for serializing and deserializing a {@code ParameterizedType}:\n  *\n  * <pre>\n  * Type listType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();, @@ -303,7 +303,7 @@ public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrateg\n    * Configures Gson to apply a set of exclusion strategies during both serialization and\n    * deserialization. Each of the {@code strategies} will be applied as a disjunction rule.\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during serializaiton/deserialization.\n+   * skipped then that field (or object) is skipped during serialization/deserialization.\n    *\n    * @param strategies the set of strategy object to apply during object (de)serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern, @@ -26,7 +26,7 @@\n import java.util.List;\n \n /**\n- * Unit tests for {@code ParamterizedType}s created by the {@link $Gson$Types} class.\n+ * Unit tests for {@code ParameterizedType}s created by the {@link $Gson$Types} class.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch, @@ -25,7 +25,7 @@\n \n   public void testFirstNameIsChosenForSerialization() {\n     MyClass target = new MyClass(\"v1\", \"v2\");\n-    // Ensure name1 occurs exactly once, and name2 and name3 dont appear\n+    // Ensure name1 occurs exactly once, and name2 and name3 don't appear\n     assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n   }\n , ", 5, 5, "\"modified, modified, modified, modified, modified, \"", 10], ["Egor N", "Fix RuntimeTypeAdapterFactory javadoc", "02/19/16, 02:14:55 PM", "Egor N", "edaf59e178301fc2cdc5523cd703121cfcd4c009", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -94,11 +94,11 @@\n  * \"Rectangle\"}) are configurable.\n  *\n  * <h3>Registering Types</h3>\n- * Create a {@code RuntimeTypeAdapter} by passing the base type and type field\n+ * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter\n- *       = RuntimeTypeAdapter.of(Shape.class, \"type\");\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n  * registered. This protects your application from injection attacks. If you\n@@ -115,7 +115,7 @@\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);, ", 4, 4, "\"modified, \"", 8], ["Jonathan Paugh", "Collapse bullets into a paragraph\n\nThe section entitled \"Collections Limitations\" contains 3 bullets, but one semantic point.\r\n\r\nMake this point in a paragraph instead of a bullet list.", "02/22/16, 09:30:29 PM", "Jonathan Paugh", "bad5cc804733d7f439e3e32822aa4436be28360c", ["UserGuide.md"], "@@ -223,11 +223,8 @@ Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n-* Can serialize collection of arbitrary objects but can not deserialize from it\n-* Because there is no way for the user to indicate the type of the resulting object\n-* While deserializing, Collection must be of a specific generic type\n-\n-All of this makes sense, and is rarely a problem when following good Java coding practices.\n+Gson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type.\n+This makes sense, and is rarely a problem when following good Java coding practices.\n \n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n , ", 2, 5, "\"modified, \"", 7], ["Sean Bright", "Restore OSGi manifest headers\n\nCommit 2016e95 removed the necessary MANIFEST.MF headers for Gson to\nresolve in an OSGi environment. This patch restores them.", "02/23/16, 04:25:21 PM", "Sean Bright", "4eff1a855f342f1b36117535218762f3257ae78c", ["gson/bnd.bnd", "gson/pom.xml", "pom.xml"], "@@ -0,0 +1,14 @@\n+Bundle-SymbolicName: com.google.gson\n+Bundle-Name: ${project.name}\n+Bundle-Description: ${project.description}\n+Bundle-Vendor: Google Gson Project\n+Bundle-ContactAddress: ${project.parent.url}\n+Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n+\n+-removeheaders: Private-Package\n+\n+-exportcontents:\\\n+    com.google.gson,\\\n+    com.google.gson.annotations,\\\n+    com.google.gson.reflect,\\\n+    com.google.gson.stream, @@ -31,6 +31,18 @@\n           </links>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>biz.aQute.bnd</groupId>\n+        <artifactId>bnd-maven-plugin</artifactId>\n+        <version>3.1.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>bnd-process</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -74,6 +74,13 @@\n           <artifactId>maven-javadoc-plugin</artifactId>\n           <version>2.10.3</version>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-jar-plugin</artifactId>\n+          <configuration>\n+            <useDefaultManifestFile>true</useDefaultManifestFile>\n+          </configuration>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n     <plugins>, ", 33, 0, "\"added, modified, modified, \"", 33], ["ghandhikus", "Minor readability edit", "02/24/16, 06:50:07 PM", "ghandhikus", "0ef365969292fb63a5911ab36f7000b1e3c0ef82", ["README.md"], "@@ -7,28 +7,29 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n-*Gson Goals*\n+###*Gson Goals*\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-*Gson Downloads*\n+###*Gson Download and Maven*\n   * [Gson 2.6.1 Download](http://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.6.1%7Cjar) downloads at Maven Central\n+  * For Maven check \"Dependency Information\" tab, on the left side.\n \n-*Gson Documentation*\n+###*Gson Documentation*\n   * Gson [API](http://google.github.io/gson/apidocs/): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n   * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n \n-*Gson-related Content Created by Third Parties*\n+###*Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n \n-*License*\n+###*License*\n \n Gson is released under the [Apache 2.0 license](LICENSE).\n , ", 6, 5, "\"modified, \"", 11], ["Inderjeet Singh", "incorporated code review feedback by eliminating the stringified type adapter.", "02/26/16, 05:25:23 PM", "Inderjeet Singh", "1ab73ffd21d8c08bbe734154921a936e4a8cb091", ["gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java"], "@@ -15,54 +15,37 @@\n  */\n package com.google.gson.regression;\n \n-import java.io.IOException;\n-import java.util.Objects;\n-\n import com.google.gson.Gson;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonParser;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n \n import junit.framework.TestCase;\n \n public class JsonAdapterNullSafeTest extends TestCase {\n-  // The recursiveCall in {@link Device.JsonAdapterFactory} is the source of this bug\n-  // because it returns a null type adapter.\n-\n   private final Gson gson = new Gson();\n \n   public void testNullSafeBugSerialize() throws Exception {\n-    Device device = new Device(\"ec57803e\", 2);\n+    Device device = new Device(\"ec57803e\");\n     gson.toJson(device);\n   }\n \n   public void testNullSafeBugDeserialize() throws Exception {\n-    String json = \"\\\"{\\\\\\\"id\\\\\\\":\\\\\\\"ec57803e2\\\\\\\",\\\\\\\"category\\\\\\\":2}\\\"\";\n-    Device device = gson.fromJson(json, Device.class);\n+    Device device = gson.fromJson(\"{'id':'ec57803e2'}\", Device.class);\n     assertEquals(\"ec57803e2\", device.id);\n-    assertEquals(2, device.category);\n   }\n \n   @JsonAdapter(Device.JsonAdapterFactory.class)\n   private static final class Device {\n     String id;\n-    int category;\n-    Device(String id, int category) {\n+    Device(String id) {\n       this.id = id;\n-      this.category = category;\n     }\n \n-    /**\n-     * Write the value as a String, not JSON.\n-     */\n     static final class JsonAdapterFactory implements TypeAdapterFactory {\n+      // The recursiveCall in {@link Device.JsonAdapterFactory} is the source of this bug\n+      // because we use it to return a null type adapter on a recursive call.\n       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();\n \n       @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@@ -72,31 +55,7 @@ public void testNullSafeBugDeserialize() throws Exception {\n           return null;\n         }\n         recursiveCall.set(Boolean.TRUE);\n-        final TypeAdapter<Device> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);\n-        return (TypeAdapter) new TypeAdapter<Device>() {\n-          @Override public void write(JsonWriter out, Device value) throws IOException {\n-            delegate.write(out, value);\n-          }\n-          @Override public Device read(JsonReader in) throws IOException {\n-            String json = in.nextString();\n-            JsonParser parser = new JsonParser();\n-            JsonElement root = parseString(parser, json, null);\n-            return root == null ? null : delegate.fromJsonTree(root);\n-          }\n-          private JsonElement parseString(JsonParser parser, String json, String prevJson)\n-              throws IOException { // called recursively\n-            JsonElement root = parser.parse(json);\n-            if (root instanceof JsonPrimitive) {\n-              prevJson = json;\n-              json = root.getAsString();\n-              if (Objects.equals(json, prevJson)) {\n-                throw new JsonSyntaxException(\"Unexpected Json: \" + json);\n-              }\n-              return parseString(parser, json, prevJson);\n-            }\n-            return root;\n-          }\n-        };\n+        return (TypeAdapter) gson.getDelegateAdapter(this, type);\n       }\n     }\n   }, ", 6, 47, "\"modified, \"", 53], ["Inderjeet Singh", "Added JDK 8 doclint exclusion section", "02/27/16, 02:13:43 AM", "Inderjeet Singh", "42276de76323114f79b08c671611d6db10e537b9", ["pom.xml"], "@@ -101,4 +101,23 @@\n       </plugin>\n     </plugins>\n   </build>\n+  <profiles>\n+    <profile>\n+      <id>doclint-java8-disable</id>\n+      <activation>\n+        <jdk>[1.8,</jdk>\n+      </activation>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-javadoc-plugin</artifactId>\n+            <configuration>\n+              <additionalparam>-Xdoclint:none</additionalparam>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n </project>, ", 19, 0, "\"modified, \"", 19], ["Inderjeet Singh", "previous mvn release:prepare failed but updated GitHub anyway. Fixing that.", "02/27/16, 02:19:41 AM", "Inderjeet Singh", "0dfa28ac3ec9dc0d9a2f4c9d5e14a6a0a470f69c", ["gson/pom.xml", "pom.xml"], "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.6.3-SNAPSHOT</version>\n+    <version>2.6.2-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.6.3-SNAPSHOT</version>\n+  <version>2.6.2-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>, ", 2, 2, "\"modified, modified, \"", 4], ["qwwdfsad", "More appropriate usage of null key surrogate in Gson#getAdapter for backward compatibility", "03/04/16, 11:08:26 PM", "qwwdfsad", "31dcfa3ad6fff0ee64f0fc5b8a1712c3ef3dcf95", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -390,10 +390,7 @@ static void checkValidFloatingPoint(double value) {\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n-    if (type == null) {\n-      type = (TypeToken<T>) NULL_KEY_SURROGATE;\n-    }\n-    TypeAdapter<?> cached = typeTokenCache.get(type);\n+    TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;\n     }, ", 1, 4, "\"modified, \"", 5], ["Scott Brown", "allow unquoted long and integer keys", "03/12/16, 06:52:13 PM", "Scott Brown", "0669ff7fd16c26521b924a58c7dd64ab2dc1a46d", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"], "@@ -951,8 +951,12 @@ public long nextLong() throws IOException {\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         long result = Long.parseLong(peekedString);\n         peeked = PEEKED_NONE;\n@@ -1179,8 +1183,12 @@ public int nextInt() throws IOException {\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         result = Integer.parseInt(peekedString);\n         peeked = PEEKED_NONE;, @@ -167,6 +167,34 @@ public void testMapDeserializationWithIntegerKeys() {\n     assertEquals(\"456\", map.get(123));\n   }\n \n+  public void testMapDeserializationWithUnquotedIntegerKeys() {\n+    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n+    Map<Integer, String> map = gson.fromJson(\"{123:\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+  }\n+\n+  public void testMapDeserializationWithLongKeys() {\n+    long longValue = 9876543210L;\n+    String json = String.format(\"{\\\"%d\\\":\\\"456\\\"}\", longValue);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longValue));\n+    assertEquals(\"456\", map.get(longValue));\n+  }\n+\n+  public void testMapDeserializationWithUnquotedLongKeys() {\n+    long longKey = 9876543210L;\n+    String json = String.format(\"{%d:\\\"456\\\"}\", longKey);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longKey));\n+    assertEquals(\"456\", map.get(longKey));\n+  }\n+\n   public void testHashMapDeserialization() throws Exception {\n     Type typeOfMap = new TypeToken<HashMap<Integer, String>>() {}.getType();\n     HashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);, @@ -501,7 +501,7 @@ public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException\n     try {\n       reader.nextInt();\n       fail();\n-    } catch (IllegalStateException expected) {\n+    } catch (NumberFormatException expected) {\n     }\n     assertEquals(\"12.34e5x\", reader.nextString());\n   }, ", 41, 5, "\"modified, modified, modified, \"", 46], ["Valeriy.Vyrva", "Add some useful badges with automatic version detection: Maven and Javadoc", "03/25/16, 10:16:19 AM", "Valeriy.Vyrva", "4fdef155ce2824b3761116ebccb1aeaa9514d4cb", ["README.md"], "@@ -1,6 +1,8 @@\n # google-gson\n \n [![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n+[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson)\n+[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. , ", 2, 0, "\"modified, \"", 2], ["Inderjeet Singh", "moved the JsonSerializationContext/JsonDeserializationContext fields to where they are used.\nAlso moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory.", "03/28/16, 09:46:02 PM", "Inderjeet Singh", "34d7521d9581b025c23bd5e4880a1b3a687b3da0", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"], "@@ -133,22 +133,6 @@\n   private final boolean prettyPrinting;\n   private final boolean lenient;\n \n-  final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n-    @SuppressWarnings(\"unchecked\")\n-    @Override public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n-      return (T) fromJson(json, typeOfT);\n-    }\n-  };\n-\n-  final JsonSerializationContext serializationContext = new JsonSerializationContext() {\n-    @Override public JsonElement serialize(Object src) {\n-      return toJsonTree(src);\n-    }\n-    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n-      return toJsonTree(src, typeOfSrc);\n-    }\n-  };\n-\n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n    * following settings:, @@ -29,6 +29,7 @@\n \n import com.google.gson.internal.$Gson$Preconditions;\n import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.bind.TreeTypeAdapter;\n import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.reflect.TypeToken;\n , @@ -14,31 +14,42 @@\n  * limitations under the License.\n  */\n \n-package com.google.gson;\n+package com.google.gson.internal.bind;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import com.google.gson.internal.$Gson$Preconditions;\n import com.google.gson.internal.Streams;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n /**\n  * Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter. Since the\n  * tree adapter may be serialization-only or deserialization-only, this class\n  * has a facility to lookup a delegate type adapter on demand.\n  */\n-final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n+public final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n   private final JsonSerializer<T> serializer;\n   private final JsonDeserializer<T> deserializer;\n   private final Gson gson;\n   private final TypeToken<T> typeToken;\n   private final TypeAdapterFactory skipPast;\n+  private final GsonContextImpl context = new GsonContextImpl();\n \n   /** The delegate is lazily created because it may not be needed, and creating it may fail. */\n   private TypeAdapter<T> delegate;\n \n-  TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n+  public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n       Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\n     this.serializer = serializer;\n     this.deserializer = deserializer;\n@@ -55,7 +66,7 @@\n     if (value.isJsonNull()) {\n       return null;\n     }\n-    return deserializer.deserialize(value, typeToken.getType(), gson.deserializationContext);\n+    return deserializer.deserialize(value, typeToken.getType(), context);\n   }\n \n   @Override public void write(JsonWriter out, T value) throws IOException {\n@@ -67,7 +78,7 @@\n       out.nullValue();\n       return;\n     }\n-    JsonElement tree = serializer.serialize(value, typeToken.getType(), gson.serializationContext);\n+    JsonElement tree = serializer.serialize(value, typeToken.getType(), context);\n     Streams.write(tree, out);\n   }\n \n@@ -105,7 +116,7 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n     return new SingleTypeFactory(typeAdapter, null, false, hierarchyType);\n   }\n \n-  private static class SingleTypeFactory implements TypeAdapterFactory {\n+  private static final class SingleTypeFactory implements TypeAdapterFactory {\n     private final TypeToken<?> exactType;\n     private final boolean matchRawType;\n     private final Class<?> hierarchyType;\n@@ -138,4 +149,17 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n           : null;\n     }\n   }\n+\n+  private final class GsonContextImpl implements JsonSerializationContext, JsonDeserializationContext {\n+    @Override public JsonElement serialize(Object src) {\n+      return gson.toJsonTree(src);\n+    }\n+    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n+      return gson.toJsonTree(src, typeOfSrc);\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    @Override public <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+      return (R) gson.fromJson(json, typeOfT);\n+    }\n+  };\n }, ", 31, 22, "\"modified, modified, renamed, \"", 53], ["Inderjeet Singh", "Fixed unbound range bug issue# 819", "03/30/16, 08:02:24 AM", "Inderjeet Singh", "93414608afba1cf92f660199f1bbdf6c9aaaf1ea", ["pom.xml"], "@@ -105,7 +105,7 @@\n     <profile>\n       <id>doclint-java8-disable</id>\n       <activation>\n-        <jdk>[1.8,</jdk>\n+        <jdk>[1.8,)</jdk>\n       </activation>\n       <build>\n         <plugins>, ", 1, 1, "\"modified, \"", 2], ["Ryan Scheidter", "UserGuide Grammar Corrections", "04/05/16, 02:20:14 PM", "Ryan Scheidter", "4f031a4e78643db1b82bef5ab89d6c5912e1f128", ["UserGuide.md"], "@@ -46,7 +46,7 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n * Allow pre-existing unmodifiable objects to be converted to and from JSON\n * Allow custom representations for objects\n * Support arbitrarily complex objects\n-* Generate compact and readability JSON output\n+* Generate compact and readable JSON output\n \n ## <a name=\"TOC-Gson-Performance-and-Scalability\"></a>Gson Performance and Scalability\n \n@@ -141,8 +141,8 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n * This implementation handles nulls correctly\n-* While serialization, a null field is skipped from the output\n-* While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n+* While serializing, a null field is skipped from the output\n+* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null\n * If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n * Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n \n@@ -169,7 +169,7 @@ public class A {\n \n **NOTE**: The above class B can not (by default) be serialized with Gson.\n \n-Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. if it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n+Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. If it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n \n ```java\n public class InstanceCreatorForB implements InstanceCreator<A.B> {\n@@ -390,7 +390,7 @@ Type could be of a corresponding generic type\n \n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n-Sometimes that the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n+Sometimes the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n \n ```java\n class MyList<T> extends ArrayList<T> {\n@@ -430,9 +430,9 @@ In the above example, an instance of the Id class can not be created without act\n \n ### <a name=\"TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format\"></a>Compact Vs. Pretty Printing for JSON Output Format\n \n-The default JSON output that is provide by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n+The default JSON output that is provided by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n \n-If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n+If you would like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n \n The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:\n ```\n@@ -441,7 +441,7 @@ String jsonOutput = gson.toJson(someObject);\n ```\n ### <a name=\"TOC-Null-Object-Support\"></a>Null Object Support\n \n-The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java.\n+The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java form.\n \n Here's how you would configure a `Gson` instance to output null:\n \n@@ -522,7 +522,7 @@ The output is:\n \n ### <a name=\"TOC-Excluding-Fields-From-Serialization-and-Deserialization\"></a>Excluding Fields From Serialization and Deserialization\n \n-Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanism that allow field and class exclusion. If none of the below mechanism satisfy your needs then you can always use [custom serializers and deserializers](#TOC-Custom-Serialization-and-Deserializ).\n+Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanisms that allow field and class exclusion. If none of the below mechanisms satisfy your needs then you can always use [custom serializers and deserializers](#TOC-Custom-Serialization-and-Deserialization).\n \n #### <a name=\"TOC-Java-Modifier-Exclusion\"></a>Java Modifier Exclusion\n \n@@ -535,7 +535,7 @@ Gson gson = new GsonBuilder()\n     .create();\n ```\n \n-NOTE: you can use any number of the `Modifier` constants to `excludeFieldsWithModifiers` method. For example:\n+NOTE: you can give any number of the `Modifier` constants to the `excludeFieldsWithModifiers` method. For example:\n \n ```java\n Gson gson = new GsonBuilder(), ", 10, 10, "\"modified, \"", 20], ["Scott Brown", "minor javadoc fix ... @code block not treated as html", "04/09/16, 01:34:05 AM", "Scott Brown", "9c4f3523206468746ef5ee135f2bced4e45b33b5", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -428,9 +428,9 @@ static void checkValidFloatingPoint(double value) {\n    *  class StatsTypeAdapterFactory implements TypeAdapterFactory {\n    *    public int numReads = 0;\n    *    public int numWrites = 0;\n-   *    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {\n-   *      final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);\n-   *      return new TypeAdapter&lt;T&gt;() {\n+   *    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+   *      final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n+   *      return new TypeAdapter<T>() {\n    *        public void write(JsonWriter out, T value) throws IOException {\n    *          ++numWrites;\n    *          delegate.write(out, value);, ", 3, 3, "\"modified, \"", 6], ["Ugljesa Jovanovic", "Check if class can be instantiated based on class modifiers. If not throw an unsupported operation exception.", "04/12/16, 08:34:16 PM", "Ugljesa Jovanovic", "ab40462cc76f6708e3ce2e981f5c6b485347702b", ["gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java", "gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java"], "@@ -20,6 +20,7 @@\n import java.io.ObjectStreamClass;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n /**\n  * Do sneaky things to allocate objects without invoking their constructors.\n@@ -45,6 +46,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) allocateInstance.invoke(unsafe, c);\n         }\n       };\n@@ -68,6 +70,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, constructorId);\n         }\n       };\n@@ -87,6 +90,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, Object.class);\n         }\n       };\n@@ -101,4 +105,19 @@ public static UnsafeAllocator create() {\n       }\n     };\n   }\n+\n+  /**\n+   * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\n+   * throw an {@link java.lang.UnsupportedOperationException}\n+   * @param c instance of the class to be checked\n+   */\n+  private static void assertInstantiable(Class<?> c) {\n+    int modifiers = c.getModifiers();\n+    if (Modifier.isInterface(modifiers)) {\n+      throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\n+    }\n+    if (Modifier.isAbstract(modifiers)) {\n+      throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\n+    }\n+  }\n }, @@ -0,0 +1,74 @@\n+/*\n+ * Copyright (C) 2016 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test unsafe allocator instantiation\n+ * @author Ugljesa Jovanovic\n+ */\n+public final class UnsafeAllocatorInstantiationTest extends TestCase {\n+\n+  public interface Interface {\n+  }\n+\n+  public static abstract class AbstractClass {\n+  }\n+\n+  public static class ConcreteClass {\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an interface\n+   */\n+  public void testInterfaceInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(Interface.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an abstract class\n+   */\n+  public void testAbstractClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(AbstractClass.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that no exception is thrown when trying to instantiate a concrete class\n+   */\n+  public void testConcreteClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(ConcreteClass.class);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+}, ", 93, 0, "\"modified, added, \"", 93], ["gavlyukovskiy", "fixed throwing RuntimeException instead of JsonIOException", "04/15/16, 06:00:59 PM", "gavlyukovskiy", "966de9e60dd6a828cb52548dd8de77adc86bd319", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -679,7 +679,7 @@ public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOExce\n       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\n       toJson(jsonElement, jsonWriter);\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n+      throw new JsonIOException(e);\n     }\n   }\n , ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "Don't use a runtime wrapper if a JsonAdapter annotation is present on a field.\n\nThis ensures that JsonAdapter annotation works correctly on a primitive field.\nThis is a potentially backward incompatible change.", "05/17/16, 08:30:59 PM", "Inderjeet Singh", "3ff16c30dbcd2a66209935a3e71a5f21f696d896", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -24,7 +24,6 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Locale;\n-import java.util.TimeZone;\n \n import com.google.gson.internal.bind.util.ISO8601Utils;\n , @@ -72,7 +72,6 @@ public static void write(JsonElement element, JsonWriter writer) throws IOExcept\n     TypeAdapters.JSON_ELEMENT.write(writer, element);\n   }\n \n-  @SuppressWarnings(\"resource\")\n   public static Writer writerForAppendable(Appendable appendable) {\n     return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);\n   }, @@ -32,6 +32,7 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n+\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n@@ -104,14 +105,22 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n     // special casing primitives here saves ~5% on Android...\n+    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n+    TypeAdapter<?> mapped = null;\n+    if (annotation != null) {\n+      mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n+    }\n+    final boolean jsonAdapterPresent = mapped != null;\n+    if (mapped == null) mapped = context.getAdapter(fieldType);\n+\n+    final TypeAdapter<?> typeAdapter = mapped;\n     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n-      final TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n       @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n       @Override void write(JsonWriter writer, Object value)\n           throws IOException, IllegalAccessException {\n         Object fieldValue = field.get(value);\n-        TypeAdapter t =\n-          new TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());\n+        TypeAdapter t = jsonAdapterPresent ? typeAdapter\n+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n         t.write(writer, fieldValue);\n       }\n       @Override void read(JsonReader reader, Object value)\n@@ -129,15 +138,6 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     };\n   }\n \n-  TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n-    if (annotation != null) {\n-      TypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n-      if (adapter != null) return adapter;\n-    }\n-    return gson.getAdapter(fieldType);\n-  }\n-\n   private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {\n     Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();\n     if (raw.isInterface()) {, @@ -15,14 +15,15 @@\n  */\r\n package com.google.gson.internal.bind;\r\n \r\n+import java.io.IOException;\r\n+import java.lang.reflect.Type;\r\n+import java.lang.reflect.TypeVariable;\r\n+\r\n import com.google.gson.Gson;\r\n import com.google.gson.TypeAdapter;\r\n import com.google.gson.reflect.TypeToken;\r\n import com.google.gson.stream.JsonReader;\r\n import com.google.gson.stream.JsonWriter;\r\n-import java.io.IOException;\r\n-import java.lang.reflect.Type;\r\n-import java.lang.reflect.TypeVariable;\r\n \r\n final class TypeAdapterRuntimeTypeWrapper<T> extends TypeAdapter<T> {\r\n   private final Gson context;\r, @@ -63,7 +63,6 @@ public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {\n         @Override public void write(JsonWriter out, Part part) throws IOException {\n           throw new AssertionError();\n         }\n-\n         @Override public Part read(JsonReader in) throws IOException {\n           throw new AssertionError();\n         }\n@@ -220,4 +219,53 @@ private GadgetWithOptionalPart(Part part) {\n       this.part = part;\n     }\n   }\n+\n+  /** Regression test contributed through https://github.com/google/gson/issues/831 */\n+  public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithOptionalPart(new Part(\"foo\")));\n+    assertEquals(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\", json);\n+    GadgetWithOptionalPart gadget = gson.fromJson(\"{'part':'foo'}\", GadgetWithOptionalPart.class);\n+    assertEquals(\"PartJsonFieldAnnotationAdapter\", gadget.part.name);\n+  }\n+\n+  /** Regression test contributed through https://github.com/google/gson/issues/831 */\n+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithPrimitivePart(42));\n+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\n+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\n+    assertEquals(42, gadget.part);\n+  }\n+\n+  private static final class GadgetWithPrimitivePart {\n+    @JsonAdapter(LongToStringTypeAdapterFactory.class)\n+    final long part;\n+\n+    private GadgetWithPrimitivePart(long part) {\n+      this.part = part;\n+    }\n+  }\n+\n+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {\n+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {\n+      @Override public void write(JsonWriter out, Long value) throws IOException {\n+        out.value(value.toString());\n+      }\n+      @Override public Long read(JsonReader in) throws IOException {\n+        return in.nextLong();\n+      }\n+    };\n+    @SuppressWarnings(\"unchecked\")\n+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+      Class<?> cls = type.getRawType();\n+      if (Long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      } else if (long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      }\n+      throw new IllegalStateException(\"Non-long field of type \" + type\n+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");\n+    }\n+  }\n }, ", 65, 18, "\"modified, modified, modified, modified, modified, \"", 83], ["Jake Wharton", "Add boxed boolean value() overload.\n\nWhen calling value() with a Boolean overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.", "04/22/16, 11:50:10 PM", "Jake Wharton", "59edfc1caf2bb30e30f523f8502f23e8f8edc38e", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -159,6 +159,14 @@ private void put(JsonElement value) {\n     return this;\n   }\n \n+  @Override public JsonWriter value(Boolean value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n   @Override public JsonWriter value(double value) throws IOException {\n     if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);, @@ -162,10 +162,6 @@ public Boolean read(JsonReader in) throws IOException {\n     }\n     @Override\n     public void write(JsonWriter out, Boolean value) throws IOException {\n-      if (value == null) {\n-        out.nullValue();\n-        return;\n-      }\n       out.value(value);\n     }\n   };, @@ -468,6 +468,21 @@ public JsonWriter value(boolean value) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * Encodes {@code value}.\n+   *\n+   * @return this writer.\n+   */\n+  public JsonWriter value(Boolean value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue();\n+    out.write(value ? \"true\" : \"false\");\n+    return this;\n+  }\n+\n   /**\n    * Encodes {@code value}.\n    *, @@ -283,6 +283,17 @@ public void testBooleans() throws IOException {\n     assertEquals(\"[true,false]\", stringWriter.toString());\n   }\n \n+  public void testBoxedBooleans() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginArray();\n+    jsonWriter.value((Boolean) true);\n+    jsonWriter.value((Boolean) false);\n+    jsonWriter.value((Boolean) null);\n+    jsonWriter.endArray();\n+    assertEquals(\"[true,false,null]\", stringWriter.toString());\n+  }\n+\n   public void testNulls() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);, ", 34, 4, "\"modified, modified, modified, modified, \"", 38], ["zzz40500", " Documentation Error\n\nString anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class); => String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);", "04/23/16, 05:36:52 PM", "zzz40500", "71ee0e3759c7aafa849871443a47bdd001faaf1b", ["UserGuide.md"], "@@ -104,7 +104,7 @@ Integer one = gson.fromJson(\"1\", Integer.class);\n Long one = gson.fromJson(\"1\", Long.class);\n Boolean false = gson.fromJson(\"false\", Boolean.class);\n String str = gson.fromJson(\"\\\"abc\\\"\", String.class);\n-String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class);\n+String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);\n ```\n \n ### <a name=\"TOC-Object-Examples\"></a>Object Examples, ", 1, 1, "\"modified, \"", 2], ["Jake Wharton", "Optimize list allocation for every reflective field.\n\nThe common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.\n\nThis is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.", "04/27/16, 04:28:51 AM", "Jake Wharton", "8537c8932f0d9bd3338a5048fb65a8506c7a8247", ["gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"], "@@ -35,8 +35,9 @@\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n@@ -67,20 +68,22 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n \n   /** first element holds the default name */\n   private List<String> getFieldNames(Field f) {\n-    return getFieldName(fieldNamingPolicy, f);\n-  }\n+    SerializedName annotation = f.getAnnotation(SerializedName.class);\n+    if (annotation == null) {\n+      String name = fieldNamingPolicy.translateName(f);\n+      return Collections.singletonList(name);\n+    }\n \n-  /** first element holds the default name */\n-  static List<String> getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n-    SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    List<String> fieldNames = new LinkedList<String>();\n-    if (serializedName == null) {\n-      fieldNames.add(fieldNamingPolicy.translateName(f));\n-    } else {\n-      fieldNames.add(serializedName.value());\n-      for (String alternate : serializedName.alternate()) {\n-        fieldNames.add(alternate);\n-      }\n+    String serializedName = annotation.value();\n+    String[] alternates = annotation.alternate();\n+    if (alternates.length == 0) {\n+      return Collections.singletonList(serializedName);\n+    }\n+\n+    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);\n+    fieldNames.add(serializedName);\n+    for (String alternate : alternates) {\n+      fieldNames.add(alternate);\n     }\n     return fieldNames;\n   }, ", 17, 14, "\"modified, \"", 31], ["Jake Wharton", "Switch default Queue implementation to ArrayDeque.\n\nNow that we require Java 1.6 or newer this much more efficient implementation can be used as the default.", "04/27/16, 04:37:28 AM", "Jake Wharton", "371aff7ce4fb73ed997cbf6aa08706f272cef0c6", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -20,12 +20,12 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n+import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n@@ -163,7 +163,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n           @Override public T construct() {\n-            return (T) new LinkedList<Object>();\n+            return (T) new ArrayDeque<Object>();\n           }\n         };\n       } else {, ", 2, 2, "\"modified, \"", 4], ["Nth Circle", "Typo\n\nChanged \"Serialiers\" to \"Serializers\"", "05/08/16, 03:48:54 AM", "Nth Circle", "1bffde09edd228db162fc1f13502fb9654e21d06", ["UserGuide.md"], "@@ -307,7 +307,7 @@ You can also find source code for some commonly used classes such as JodaTime at\n Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).\n Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:\n \n-* Json Serialiers: Need to define custom serialization for an object\n+* Json Serializers: Need to define custom serialization for an object\n * Json Deserializers: Needed to define custom deserialization for a type\n \n * Instance Creators: Not needed if no-args constructor is available or a deserializer is registered, ", 1, 1, "\"modified, \"", 2], ["Baschdl", "Corrected documentation, copy&paste error", "05/12/16, 12:47:03 PM", "Baschdl", "c414b368e120a6240ceb238f4e0abce821a9f7cd", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -719,7 +719,7 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {\n   }\n \n   /**\n-   * Returns a new JSON writer configured for the settings on this Gson instance.\n+   * Returns a new JSON reader configured for the settings on this Gson instance.\n    */\n   public JsonReader newJsonReader(Reader reader) {\n     JsonReader jsonReader = new JsonReader(reader);, ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "Replaced a JDK 1.7 specific method with its JDK 1.6 equivalent.", "05/17/16, 08:03:00 AM", "Inderjeet Singh", "61f83d630935eec742f66346389fa3d2a13c0874", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"], "@@ -805,7 +805,7 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           constantToName.put(constant, name);\n         }\n       } catch (NoSuchFieldException e) {\n-        throw new AssertionError(\"Missing field in \" + classOfT.getName(), e);\n+        throw new AssertionError(e);\n       }\n     }\n     @Override public T read(JsonReader in) throws IOException {, ", 1, 1, "\"modified, \"", 2], ["Nykolas Lima", "handle explicit null values in JSON", "05/23/16, 07:44:30 PM", "Nykolas Lima", "2928b3ef978a619a5433a6f3c9209e2968497904", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"], "@@ -262,8 +262,8 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n           String jsonFieldName =\n               getCustSerializedName(fieldDescriptor.getOptions(), fieldDescriptor.getName());\n \n-          if (jsonObject.has(jsonFieldName)) {\n-            JsonElement jsonElement = jsonObject.get(jsonFieldName);\n+          JsonElement jsonElement = jsonObject.get(jsonFieldName);\n+          if (jsonElement != null && !jsonElement.isJsonNull()) {\n             // Do not reuse jsonFieldName here, it might have a custom value\n             Object fieldValue;\n             if (fieldDescriptor.getType() == ENUM_TYPE) {, @@ -66,4 +66,11 @@ public void testDeserializeProto() {\n     assertEquals(\"foo\", proto.getMsg());\n     assertEquals(3, proto.getCount());\n   }\n+\n+  public void testDeserializeWithExplicitNullValue() {\n+    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\n+    assertEquals(\"foo\", proto.getMsg());\n+    assertEquals(0, proto.getCount());\n+  }\n+\n }, ", 9, 2, "\"modified, modified, \"", 11], ["Juan Andre\u0301s Diana", "Docs fix for the RuntimeTypeAdapterFactory class.\nInstances of classes that implement RuntimeTypeAdapterFactory should be registered using the registerTypeAdapterFactory method instead of registerTypeAdapter.", "05/24/16, 07:45:55 PM", "Juan Andre\u0301s Diana", "d4a9eb4e7bcbf0fa9e9e76c81fc86ff669f7c8ea", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -97,7 +97,7 @@\n  * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory\n  *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n@@ -108,14 +108,14 @@\n  *   shapeAdapter.registerSubtype(Circle.class, \"Circle\");\n  *   shapeAdapter.registerSubtype(Diamond.class, \"Diamond\");\n  * }</pre>\n- * Finally, register the type adapter in your application's GSON builder:\n+ * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code\n  *   Gson gson = new GsonBuilder()\n- *       .registerTypeAdapter(Shape.class, shapeAdapter)\n+ *       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);, ", 4, 4, "\"modified, \"", 8], ["Juan Andre\u0301s Diana", "The method registerTypeAdapterFactory accepts a TypeAdapterFactory instance only.", "05/25/16, 06:49:39 PM", "Juan Andre\u0301s Diana", "86d88c32cf6a6b7a6e0bbc855d76e4ccf6f120bb", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -111,7 +111,7 @@\n  * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code\n  *   Gson gson = new GsonBuilder()\n- *       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)\n+ *       .registerTypeAdapterFactory(shapeAdapterFactory)\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code, ", 1, 1, "\"modified, \"", 2], ["Jake Wharton", "Consolidate location and path rendering for exceptions.", "06/09/16, 10:02:36 PM", "Jake Wharton", "ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -347,8 +347,7 @@ public void beginArray() throws IOException {\n       pathIndices[stackSize - 1] = 0;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n@@ -366,8 +365,7 @@ public void endArray() throws IOException {\n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n@@ -384,8 +382,7 @@ public void beginObject() throws IOException {\n       push(JsonScope.EMPTY_OBJECT);\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n@@ -404,8 +401,7 @@ public void endObject() throws IOException {\n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n@@ -790,8 +786,7 @@ public String nextName() throws IOException {\n     } else if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n       result = nextQuotedValue('\"');\n     } else {\n-      throw new IllegalStateException(\"Expected a name but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a name but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathNames[stackSize - 1] = result;\n@@ -827,8 +822,7 @@ public String nextString() throws IOException {\n       result = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n     } else {\n-      throw new IllegalStateException(\"Expected a string but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a string but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n@@ -856,8 +850,7 @@ public boolean nextBoolean() throws IOException {\n       pathIndices[stackSize - 1]++;\n       return false;\n     }\n-    throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new IllegalStateException(\"Expected a boolean but was \" + peek() + locationString());\n   }\n \n   /**\n@@ -876,8 +869,7 @@ public void nextNull() throws IOException {\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n     } else {\n-      throw new IllegalStateException(\"Expected null but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected null but was \" + peek() + locationString());\n     }\n   }\n \n@@ -910,15 +902,14 @@ public double nextDouble() throws IOException {\n     } else if (p == PEEKED_UNQUOTED) {\n       peekedString = nextUnquotedValue();\n     } else if (p != PEEKED_BUFFERED) {\n-      throw new IllegalStateException(\"Expected a double but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a double but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double result = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n-      throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new MalformedJsonException(\n+          \"JSON forbids NaN and infinities: \" + result + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -966,16 +957,14 @@ public long nextLong() throws IOException {\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected a long but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a long but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     long result = (long) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'long'.\n-      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected a long but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -1172,8 +1161,7 @@ public int nextInt() throws IOException {\n     if (p == PEEKED_LONG) {\n       result = (int) peekedLong;\n       if (peekedLong != result) { // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n-            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedLong + locationString());\n       }\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n@@ -1198,16 +1186,14 @@ public int nextInt() throws IOException {\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected an int but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected an int but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     result = (int) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'int'.\n-      throw new NumberFormatException(\"Expected an int but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected an int but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -1315,14 +1301,6 @@ private boolean fillBuffer(int minimum) throws IOException {\n     return false;\n   }\n \n-  int getLineNumber() {\n-    return lineNumber + 1;\n-  }\n-\n-  int getColumnNumber() {\n-    return pos - lineStart + 1;\n-  }\n-\n   /**\n    * Returns the next character in the stream that is neither whitespace nor a\n    * part of a comment. When this returns, the returned character is always at\n@@ -1412,8 +1390,7 @@ private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n       }\n     }\n     if (throwOnEof) {\n-      throw new EOFException(\"End of input\"\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n+      throw new EOFException(\"End of input\" + locationString());\n     } else {\n       return -1;\n     }\n@@ -1465,8 +1442,13 @@ private boolean skipTo(String toFind) throws IOException {\n   }\n \n   @Override public String toString() {\n-    return getClass().getSimpleName()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();\n+    return getClass().getSimpleName() + locationString();\n+  }\n+\n+  private String locationString() {\n+    int line = lineNumber + 1;\n+    int column = pos - lineStart + 1;\n+    return \" at line \" + line + \" column \" + column + \" path \" + getPath();\n   }\n \n   /**\n@@ -1571,8 +1553,7 @@ private char readEscapeCharacter() throws IOException {\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new MalformedJsonException(message\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new MalformedJsonException(message + locationString());\n   }\n \n   /**\n@@ -1615,9 +1596,8 @@ private void consumeNonExecutePrefix() throws IOException {\n         } else if (p == PEEKED_UNQUOTED_NAME) {\n           reader.peeked = PEEKED_UNQUOTED;\n         } else {\n-          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n-              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n-              + \" path \" + reader.getPath());\n+          throw new IllegalStateException(\n+              \"Expected a name but was \" + reader.peek() + reader.locationString());\n         }\n       }\n     };, ", 27, 47, "\"modified, \"", 74], ["Jake Wharton", "Implement JSON Path for JsonTreeReader.", "06/10/16, 04:08:33 AM", "Jake Wharton", "c2fae85a9f71d478d1153112e09dbc45ef31259a", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java", "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java", "pom.xml"], "@@ -25,9 +25,7 @@\n import com.google.gson.stream.JsonToken;\n import java.io.IOException;\n import java.io.Reader;\n-import java.util.ArrayList;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Map;\n \n /**\n@@ -47,35 +45,57 @@\n   };\n   private static final Object SENTINEL_CLOSED = new Object();\n \n-  private final List<Object> stack = new ArrayList<Object>();\n+  /*\n+   * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\n+   */\n+  private Object[] stack = new Object[32];\n+  private int stackSize = 0;\n+\n+  /*\n+   * The path members. It corresponds directly to stack: At indices where the\n+   * stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),\n+   * pathNames contains the name at this scope. Where it contains an array\n+   * (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in\n+   * that array. Otherwise the value is undefined, and we take advantage of that\n+   * by incrementing pathIndices when doing so isn't useful.\n+   */\n+  private String[] pathNames = new String[32];\n+  private int[] pathIndices = new int[32];\n \n   public JsonTreeReader(JsonElement element) {\n     super(UNREADABLE_READER);\n-    stack.add(element);\n+    push(element);\n   }\n \n   @Override public void beginArray() throws IOException {\n     expect(JsonToken.BEGIN_ARRAY);\n     JsonArray array = (JsonArray) peekStack();\n-    stack.add(array.iterator());\n+    push(array.iterator());\n+    pathIndices[stackSize - 1] = 0;\n   }\n \n   @Override public void endArray() throws IOException {\n     expect(JsonToken.END_ARRAY);\n     popStack(); // empty iterator\n     popStack(); // array\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public void beginObject() throws IOException {\n     expect(JsonToken.BEGIN_OBJECT);\n     JsonObject object = (JsonObject) peekStack();\n-    stack.add(object.entrySet().iterator());\n+    push(object.entrySet().iterator());\n   }\n \n   @Override public void endObject() throws IOException {\n     expect(JsonToken.END_OBJECT);\n     popStack(); // empty iterator\n     popStack(); // object\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public boolean hasNext() throws IOException {\n@@ -84,19 +104,19 @@ public JsonTreeReader(JsonElement element) {\n   }\n \n   @Override public JsonToken peek() throws IOException {\n-    if (stack.isEmpty()) {\n+    if (stackSize == 0) {\n       return JsonToken.END_DOCUMENT;\n     }\n \n     Object o = peekStack();\n     if (o instanceof Iterator) {\n-      boolean isObject = stack.get(stack.size() - 2) instanceof JsonObject;\n+      boolean isObject = stack[stackSize - 2] instanceof JsonObject;\n       Iterator<?> iterator = (Iterator<?>) o;\n       if (iterator.hasNext()) {\n         if (isObject) {\n           return JsonToken.NAME;\n         } else {\n-          stack.add(iterator.next());\n+          push(iterator.next());\n           return peek();\n         }\n       } else {\n@@ -127,89 +147,121 @@ public JsonTreeReader(JsonElement element) {\n   }\n \n   private Object peekStack() {\n-    return stack.get(stack.size() - 1);\n+    return stack[stackSize - 1];\n   }\n \n   private Object popStack() {\n-    return stack.remove(stack.size() - 1);\n+    Object result = stack[--stackSize];\n+    stack[stackSize] = null;\n+    return result;\n   }\n \n   private void expect(JsonToken expected) throws IOException {\n     if (peek() != expected) {\n-      throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek());\n+      throw new IllegalStateException(\n+          \"Expected \" + expected + \" but was \" + peek() + locationString());\n     }\n   }\n \n   @Override public String nextName() throws IOException {\n     expect(JsonToken.NAME);\n     Iterator<?> i = (Iterator<?>) peekStack();\n     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n-    stack.add(entry.getValue());\n-    return (String) entry.getKey();\n+    String result = (String) entry.getKey();\n+    pathNames[stackSize - 1] = result;\n+    push(entry.getValue());\n+    return result;\n   }\n \n   @Override public String nextString() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n+    }\n+    String result = ((JsonPrimitive) popStack()).getAsString();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n     }\n-    return ((JsonPrimitive) popStack()).getAsString();\n+    return result;\n   }\n \n   @Override public boolean nextBoolean() throws IOException {\n     expect(JsonToken.BOOLEAN);\n-    return ((JsonPrimitive) popStack()).getAsBoolean();\n+    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n+    return result;\n   }\n \n   @Override public void nextNull() throws IOException {\n     expect(JsonToken.NULL);\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public double nextDouble() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     double result = ((JsonPrimitive) peekStack()).getAsDouble();\n     if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n       throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result);\n     }\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public long nextLong() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     long result = ((JsonPrimitive) peekStack()).getAsLong();\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public int nextInt() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     int result = ((JsonPrimitive) peekStack()).getAsInt();\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public void close() throws IOException {\n-    stack.clear();\n-    stack.add(SENTINEL_CLOSED);\n+    stack = new Object[] { SENTINEL_CLOSED };\n+    stackSize = 1;\n   }\n \n   @Override public void skipValue() throws IOException {\n     if (peek() == JsonToken.NAME) {\n       nextName();\n+      pathNames[stackSize - 2] = \"null\";\n     } else {\n       popStack();\n+      pathNames[stackSize - 1] = \"null\";\n     }\n+    pathIndices[stackSize - 1]++;\n   }\n \n   @Override public String toString() {\n@@ -220,7 +272,45 @@ public void promoteNameToValue() throws IOException {\n     expect(JsonToken.NAME);\n     Iterator<?> i = (Iterator<?>) peekStack();\n     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n-    stack.add(entry.getValue());\n-    stack.add(new JsonPrimitive((String)entry.getKey()));\n+    push(entry.getValue());\n+    push(new JsonPrimitive((String) entry.getKey()));\n+  }\n+\n+  private void push(Object newTop) {\n+    if (stackSize == stack.length) {\n+      Object[] newStack = new Object[stackSize * 2];\n+      int[] newPathIndices = new int[stackSize * 2];\n+      String[] newPathNames = new String[stackSize * 2];\n+      System.arraycopy(stack, 0, newStack, 0, stackSize);\n+      System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);\n+      System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);\n+      stack = newStack;\n+      pathIndices = newPathIndices;\n+      pathNames = newPathNames;\n+    }\n+    stack[stackSize++] = newTop;\n+  }\n+\n+  @Override public String getPath() {\n+    StringBuilder result = new StringBuilder().append('$');\n+    for (int i = 0; i < stackSize; i++) {\n+      if (stack[i] instanceof JsonArray) {\n+        if (stack[++i] instanceof Iterator) {\n+          result.append('[').append(pathIndices[i]).append(']');\n+        }\n+      } else if (stack[i] instanceof JsonObject) {\n+        if (stack[++i] instanceof Iterator) {\n+          result.append('.');\n+          if (pathNames[i] != null) {\n+            result.append(pathNames[i]);\n+          }\n+        }\n+      }\n+    }\n+    return result.toString();\n+  }\n+\n+  private String locationString() {\n+    return \" at path \" + getPath();\n   }\n }, @@ -16,15 +16,35 @@\n \n package com.google.gson.stream;\n \n+import com.google.gson.JsonElement;\n+import com.google.gson.internal.Streams;\n+import com.google.gson.internal.bind.JsonTreeReader;\n import java.io.IOException;\n import java.io.StringReader;\n-import junit.framework.TestCase;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n-@SuppressWarnings(\"resource\")\n-public class JsonReaderPathTest extends TestCase {\n-  public void testPath() throws IOException {\n-    JsonReader reader = new JsonReader(\n-        new StringReader(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\"));\n+import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(Parameterized.class)\n+public class JsonReaderPathTest {\n+  @Parameterized.Parameters(name = \"{0}\")\n+  public static List<Object[]> parameters() {\n+    return Arrays.asList(\n+        new Object[] { Factory.STRING_READER },\n+        new Object[] { Factory.OBJECT_READER }\n+    );\n+  }\n+\n+  @Parameterized.Parameter\n+  public Factory factory;\n+\n+  @Test public void path() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\");\n     assertEquals(\"$\", reader.getPath());\n     reader.beginObject();\n     assertEquals(\"$.\", reader.getPath());\n@@ -62,8 +82,8 @@ public void testPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testObjectPath() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n+  @Test public void objectPath() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\n     assertEquals(\"$\", reader.getPath());\n \n     reader.peek();\n@@ -102,8 +122,8 @@ public void testObjectPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testArrayPath() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1,2]\"));\n+  @Test public void arrayPath() throws IOException {\n+    JsonReader reader = factory.create(\"[1,2]\");\n     assertEquals(\"$\", reader.getPath());\n \n     reader.peek();\n@@ -132,8 +152,10 @@ public void testArrayPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testMultipleTopLevelValuesInOneDocument() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[][]\"));\n+  @Test public void multipleTopLevelValuesInOneDocument() throws IOException {\n+    assumeTrue(factory == Factory.STRING_READER);\n+\n+    JsonReader reader = factory.create(\"[][]\");\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.endArray();\n@@ -143,40 +165,41 @@ public void testMultipleTopLevelValuesInOneDocument() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testSkipArrayElements() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1,2,3]\"));\n+  @Test public void skipArrayElements() throws IOException {\n+    JsonReader reader = factory.create(\"[1,2,3]\");\n     reader.beginArray();\n     reader.skipValue();\n     reader.skipValue();\n     assertEquals(\"$[2]\", reader.getPath());\n   }\n \n-  public void testSkipObjectNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1}\"));\n+  @Test public void skipObjectNames() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1}\");\n     reader.beginObject();\n     reader.skipValue();\n     assertEquals(\"$.null\", reader.getPath());\n   }\n \n-  public void testSkipObjectValues() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n+  @Test public void skipObjectValues() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\n     reader.beginObject();\n+    assertEquals(\"$.\", reader.getPath());\n     reader.nextName();\n     reader.skipValue();\n     assertEquals(\"$.null\", reader.getPath());\n     reader.nextName();\n     assertEquals(\"$.b\", reader.getPath());\n   }\n \n-  public void testSkipNestedStructures() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[[1,2,3],4]\"));\n+  @Test public void skipNestedStructures() throws IOException {\n+    JsonReader reader = factory.create(\"[[1,2,3],4]\");\n     reader.beginArray();\n     reader.skipValue();\n     assertEquals(\"$[1]\", reader.getPath());\n   }\n \n-  public void testArrayOfObjects() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[{},{},{}]\"));\n+  @Test public void arrayOfObjects() throws IOException {\n+    JsonReader reader = factory.create(\"[{},{},{}]\");\n     reader.beginArray();\n     assertEquals(\"$[0]\", reader.getPath());\n     reader.beginObject();\n@@ -195,8 +218,8 @@ public void testArrayOfObjects() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testArrayOfArrays() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[[],[],[]]\"));\n+  @Test public void arrayOfArrays() throws IOException {\n+    JsonReader reader = factory.create(\"[[],[],[]]\");\n     reader.beginArray();\n     assertEquals(\"$[0]\", reader.getPath());\n     reader.beginArray();\n@@ -214,4 +237,20 @@ public void testArrayOfArrays() throws IOException {\n     reader.endArray();\n     assertEquals(\"$\", reader.getPath());\n   }\n+\n+  enum Factory {\n+    STRING_READER {\n+      @Override public JsonReader create(String data) {\n+        return new JsonReader(new StringReader(data));\n+      }\n+    },\n+    OBJECT_READER {\n+      @Override public JsonReader create(String data) {\n+        JsonElement element = Streams.parse(new JsonReader(new StringReader(data)));\n+        return new JsonTreeReader(element);\n+      }\n+    };\n+\n+    abstract JsonReader create(String data);\n+  }\n }, @@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>3.8.2</version>\n+        <version>4.12</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>, ", 178, 49, "\"modified, modified, modified, \"", 227], ["Jake Wharton", "Expose JsonObject size.", "06/10/16, 04:46:32 AM", "Jake Wharton", "c16be41e77bb53a4b639cb864c9a6e4d0f8df7c2", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/test/java/com/google/gson/JsonObjectTest.java"], "@@ -132,6 +132,15 @@ private JsonElement createJsonElement(Object value) {\n     return members.entrySet();\n   }\n \n+  /**\n+   * Returns the number of key/value pairs in the object.\n+   *\n+   * @return the number of key/value pairs in the object.\n+   */\n+  public int size() {\n+    return members.size();\n+  }\n+\n   /**\n    * Convenience method to check if a member with the specified name is present in this object.\n    *, @@ -158,6 +158,20 @@ public void testEqualsNonEmptyObject() {\n     assertFalse(b.equals(a));\n   }\n \n+  public void testSize() {\n+    JsonObject o = new JsonObject();\n+    assertEquals(0, o.size());\n+\n+    o.add(\"Hello\", new JsonPrimitive(1));\n+    assertEquals(1, o.size());\n+\n+    o.add(\"Hi\", new JsonPrimitive(1));\n+    assertEquals(2, o.size());\n+\n+    o.remove(\"Hello\");\n+    assertEquals(1, o.size());\n+  }\n+\n   public void testDeepCopy() {\n     JsonObject original = new JsonObject();\n     JsonArray firstEntry = new JsonArray();, ", 23, 0, "\"modified, modified, \"", 23], ["Inderjeet Singh", "addressed code review comments.", "06/14/16, 11:34:34 PM", "Inderjeet Singh", "1f859ec769ed3a220bf8adf2423ba29b44db94e2", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -134,7 +134,7 @@\n   private final boolean generateNonExecutableJson;\n   private final boolean prettyPrinting;\n   private final boolean lenient;\n-  private JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\n+  private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\n \n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n@@ -488,14 +488,13 @@ static void checkValidFloatingPoint(double value) {\n    * @since 2.2\n    */\n   public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\n-    boolean skipPastFound = false;\n-\n     // Hack. If the skipPast factory isn't registered, assume the factory is being requested via\n     // our @JsonAdapter annotation.\n     if (!factories.contains(skipPast)) {\n       skipPast = jsonAdapterFactory;\n     }\n \n+    boolean skipPastFound = false;\n     for (TypeAdapterFactory factory : factories) {\n       if (!skipPastFound) {\n         if (factory == skipPast) {, @@ -274,20 +274,20 @@ private GadgetWithPrimitivePart(long part) {\n   }\n \n   public void testFieldAnnotationWorksForParameterizedType() {\n-      Gson gson = new Gson();\n-      String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\n-      assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n-      Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\n-      assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.get(0).name);\n-    }\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\n+    assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n+    Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\n+    assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.get(0).name);\n+  }\n \n   private static final class Gizmo2 {\n-      @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)\n-      List<Part> part;\n-      Gizmo2(List<Part> part) {\n-        this.part = part;\n-      }\n+    @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)\n+    List<Part> part;\n+    Gizmo2(List<Part> part) {\n+      this.part = part;\n     }\n+  }\n \n   private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {\n     @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {, ", 13, 14, "\"modified, modified, \"", 27], ["Inderjeet Singh", "Preparing 2.7-SNAPSHOT to cut the 2.7 release.", "06/14/16, 11:39:19 PM", "Inderjeet Singh", "687ddb319e452d93cac1f83a2e850140b5dc49e7", ["gson/pom.xml", "pom.xml"], "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.6.3-SNAPSHOT</version>\n+    <version>2.7-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.6.3-SNAPSHOT</version>\n+  <version>2.7-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>, ", 2, 2, "\"modified, modified, \"", 4], ["testcenter", "made nullSafe wrapper of JsonAdapter optional", "06/28/16, 07:18:03 AM", "testcenter", "193349f4aa7eecf43cc6ebf104e218e704db21d9", ["gson/src/main/java/com/google/gson/annotations/JsonAdapter.java", "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java"], "@@ -94,4 +94,7 @@\n   /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}. */\n   Class<?> value();\n \n+  /** false, to be able to handle {@code null} values within the adapter, default value is true. */\n+  boolean nullSafe() default true;\n+\n }, @@ -73,7 +73,7 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n               + \"JsonSerializer or JsonDeserializer reference.\");\n     }\n \n-    if (typeAdapter != null) {\n+    if (typeAdapter != null && annotation.nullSafe()) {\n       typeAdapter = typeAdapter.nullSafe();\n     }\n , ", 4, 1, "\"modified, modified, \"", 5], ["Jake Wharton", "Add static factories for array and parameterized type tokens.\n\nThese are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.", "08/12/16, 04:11:57 PM", "Jake Wharton", "9414b9b3b61d59474a274aab21193391e5b97e52", ["gson/src/main/java/com/google/gson/reflect/TypeToken.java", "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"], "@@ -302,4 +302,19 @@ private static boolean matches(Type from, Type to, Map<String, Type> typeMap) {\n   public static <T> TypeToken<T> get(Class<T> type) {\n     return new TypeToken<T>(type);\n   }\n+\n+  /**\n+   * Gets type literal for the parameterized type represented by applying {@code typeArguments} to\n+   * {@code rawType}.\n+   */\n+  public static TypeToken<?> getParameterized(Type rawType, Type... typeArguments) {\n+    return new TypeToken<Object>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));\n+  }\n+\n+  /**\n+   * Gets type literal for the array type whose elements are all instances of {@code componentType}.\n+   */\n+  public static TypeToken<?> getArray(Type componentType) {\n+    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\n+  }\n }, @@ -19,6 +19,7 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.RandomAccess;\n import java.util.Set;\n import junit.framework.TestCase;\n@@ -79,4 +80,26 @@ public void testIsAssignableFromWithNestedWildcards() throws Exception {\n     // listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false\n     assertFalse(TypeToken.get(b).isAssignableFrom(a));\n   }\n+\n+  public void testArrayFactory() {\n+    TypeToken<?> expectedStringArray = new TypeToken<String[]>() {};\n+    assertEquals(expectedStringArray, TypeToken.getArray(String.class));\n+\n+    TypeToken<?> expectedListOfStringArray = new TypeToken<List<String>[]>() {};\n+    Type listOfString = new TypeToken<List<String>>() {}.getType();\n+    assertEquals(expectedListOfStringArray, TypeToken.getArray(listOfString));\n+  }\n+\n+  public void testParameterizedFactory() {\n+    TypeToken<?> expectedListOfString = new TypeToken<List<String>>() {};\n+    assertEquals(expectedListOfString, TypeToken.getParameterized(List.class, String.class));\n+\n+    TypeToken<?> expectedMapOfStringToString = new TypeToken<Map<String, String>>() {};\n+    assertEquals(expectedMapOfStringToString, TypeToken.getParameterized(Map.class, String.class, String.class));\n+\n+    TypeToken<?> expectedListOfListOfListOfString = new TypeToken<List<List<List<String>>>>() {};\n+    Type listOfString = TypeToken.getParameterized(List.class, String.class).getType();\n+    Type listOfListOfString = TypeToken.getParameterized(List.class, listOfString).getType();\n+    assertEquals(expectedListOfListOfListOfString, TypeToken.getParameterized(List.class, listOfListOfString));\n+  }\n }, ", 38, 0, "\"modified, modified, \"", 38], ["Inderjeet Singh", "Added @Documented to Gson annotations.\n\nThis is useful since it shows the JSON format for a class which the user of that class should typically know.", "09/16/16, 01:24:21 AM", "Inderjeet Singh", "688f918a353e57f11405fab17d82d506a4e7dc4c", ["gson/src/main/java/com/google/gson/annotations/Expose.java", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/annotations/Since.java", "gson/src/main/java/com/google/gson/annotations/Until.java"], "@@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -57,6 +58,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.FIELD)\n public @interface Expose {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -76,6 +77,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.METHOD})\n public @interface SerializedName {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -50,6 +51,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.TYPE})\n public @interface Since {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -54,6 +55,7 @@\n  * @author Joel Leitch\n  * @since 1.3\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.TYPE})\n public @interface Until {, ", 8, 0, "\"modified, modified, modified, modified, \"", 8], ["Chaitanya Pramod", "Prevent Proguard from stripping interface info from @JsonAdapter classes\n\nPreviously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.\r\n\r\nFixes #925", "09/14/16, 01:27:35 PM", "GitHub", "74f4f74b8b752d13c14aef448a883a297fe3f764", ["examples/android-proguard-example/proguard.cfg"], "@@ -13,4 +13,10 @@\n # Application classes that will be serialized/deserialized over Gson\n -keep class com.google.gson.examples.android.model.** { *; }\n \n+# Prevent proguard from stripping interface information from TypeAdapterFactory,\n+# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n+-keep class * implements com.google.gson.TypeAdapterFactory\n+-keep class * implements com.google.gson.JsonSerializer\n+-keep class * implements com.google.gson.JsonDeserializer\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 6, 0, "\"modified, \"", 6], ["Inderjeet Singh", "Added PostConstruct Factory sample in Extras.", "09/17/16, 12:35:34 AM", "Inderjeet Singh", "4512f31c698d41cdd97144187fb3ed3b94102768", ["extras/pom.xml", "extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java", "extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java"], "@@ -40,9 +40,14 @@\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.3.1</version>\n+      <version>2.7</version>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>javax.annotation</groupId>\n+      <artifactId>jsr250-api</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n@@ -86,16 +91,16 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.2</version>\n+        <version>3.5.1</version>\n         <configuration>\n-          <source>1.5</source>\n-          <target>1.5</target>\n+          <source>1.6</source>\n+          <target>1.6</target>\n         </configuration>\n       </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.5</version>\n+        <version>3.0.2</version>\n         <executions>\n           <execution>\n             <phase>package</phase>\n@@ -113,7 +118,7 @@\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n+         <version>3.0.1</version>\n          <executions>\n            <execution>\n              <id>attach-sources</id>\n@@ -127,7 +132,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.1</version>\n+         <version>2.10.4</version>\n          <executions>\n            <execution>\n              <id>attach-javadocs</id>\n@@ -147,7 +152,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.9</version>\n+         <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>, @@ -0,0 +1,76 @@\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+public class PostConstructAdapterFactory implements TypeAdapterFactory {\n+    // copied from https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a\n+    @Override\n+    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+        for (Class<?> t = type.getRawType(); t != Object.class; t = t.getSuperclass()) {\n+            for (Method m : t.getDeclaredMethods()) {\n+                if (m.isAnnotationPresent(PostConstruct.class)) {\n+                    m.setAccessible(true);\n+                    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n+                    return new PostConstructAdapter<T>(delegate, m);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    final static class PostConstructAdapter<T> extends TypeAdapter<T> {\n+        private final TypeAdapter<T> delegate;\n+        private final Method method;\n+\n+        public PostConstructAdapter(TypeAdapter<T> delegate, Method method) {\n+            this.delegate = delegate;\n+            this.method = method;\n+        }\n+\n+        @Override public T read(JsonReader in) throws IOException {\n+            T result = delegate.read(in);\n+            if (result != null) {\n+                try {\n+                    method.invoke(result);\n+                } catch (IllegalAccessException e) {\n+                    throw new AssertionError();\n+                } catch (InvocationTargetException e) {\n+                    if (e.getCause() instanceof RuntimeException) throw (RuntimeException) e.getCause();\n+                    throw new RuntimeException(e.getCause());\n+                }\n+            }\n+            return result;\n+        }\n+\n+        @Override public void write(JsonWriter out, T value) throws IOException {\n+            delegate.write(out, value);\n+        }\n+    }\n+}\n\\ No newline at end of file, @@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+import junit.framework.TestCase;\n+\n+public class PostConstructAdapterFactoryTest extends TestCase {\n+    public void test() throws Exception {\n+        Gson gson = new GsonBuilder()\n+                .registerTypeAdapterFactory(new PostConstructAdapterFactory())\n+                .create();\n+        gson.fromJson(\"{\\\"bread\\\": \\\"white\\\", \\\"cheese\\\": \\\"cheddar\\\"}\", Sandwich.class);\n+        try {\n+            gson.fromJson(\"{\\\"bread\\\": \\\"cheesey bread\\\", \\\"cheese\\\": \\\"swiss\\\"}\", Sandwich.class);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+            assertEquals(\"too cheesey\", expected.getMessage());\n+        }\n+    }\n+\n+    static class Sandwich {\n+        String bread;\n+        String cheese;\n+\n+        @PostConstruct void validate() {\n+            if (bread.equals(\"cheesey bread\") && cheese != null) {\n+                throw new IllegalArgumentException(\"too cheesey\");\n+            }\n+        }\n+    }\n+}, ", 139, 8, "\"modified, added, added, \"", 147], ["Heidi Dong", "Remove deprecated useDefaultManifestFile for jar plugin", "09/17/16, 07:23:49 AM", "Heidi Dong", "e10442714e4ffbc7caaab08bbe4fa83e9ecdcde3", ["pom.xml"], "@@ -77,9 +77,6 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-jar-plugin</artifactId>\n-          <configuration>\n-            <useDefaultManifestFile>true</useDefaultManifestFile>\n-          </configuration>\n         </plugin>\n       </plugins>\n     </pluginManagement>, ", 0, 3, "\"modified, \"", 3], ["mark", "Add keySet method and test", "10/07/16, 10:35:07 PM", "mark", "8570ffab75cc370bebb4fa5f593c40356fe89842", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/test/java/com/google/gson/JsonObjectTest.java"], "@@ -132,6 +132,15 @@ private JsonElement createJsonElement(Object value) {\n     return members.entrySet();\n   }\n \n+  /**\n+   * Returns a set of members key values.\n+   *\n+   * @return a set of member keys as Strings\n+   */\n+  public Set<String> keySet() {\n+    return members.keySet();\n+  }\n+\n   /**\n    * Returns the number of key/value pairs in the object.\n    *, @@ -183,4 +183,19 @@ public void testDeepCopy() {\n     assertEquals(1, original.get(\"key\").getAsJsonArray().size());\n     assertEquals(0, copy.get(\"key\").getAsJsonArray().size());\n   }\n+\n+  /**\n+   * From issue 941\n+   */\n+  public void testKeySet() {\n+    JsonObject a = new JsonObject();\n+\n+    a.add(\"foo\", new JsonArray());\n+    a.add(\"bar\", new JsonObject());\n+\n+    assertEquals(2, a.size());\n+    assertEquals(2, a.keySet().size());\n+    assertTrue(a.keySet().contains(\"foo\"));\n+    assertTrue(a.keySet().contains(\"bar\"));\n+  }\n }, ", 24, 0, "\"modified, modified, \"", 24], ["Norman Peitek", "README.md Add a 2nd third party tutorial resource", "10/07/16, 08:40:45 PM", "GitHub", "61d46cb971717951da2b80983a129a249d70969d", ["README.md"], "@@ -30,6 +30,7 @@ Please use the [google-gson Google group](http://groups.google.com/group/google-\n \n ###*Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+  * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n \n ###*License*\n , ", 1, 0, "\"modified, \"", 1], ["Greg Koblanski (melquiades)", "Update gson version used in the Maven example", "11/08/16, 04:13:31 PM", "Greg Koblanski (melquiades)", "9a2d8a20a460d5d5fd3936e6789fb82525459312", ["UserGuide.md"], "@@ -79,7 +79,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.7</version>\n+      <version>2.8</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, ", 1, 1, "\"modified, \"", 2], ["Egor Neliuba", "Allow deserialization of a Number represented as a String", "11/24/16, 02:36:44 PM", "Egor Neliuba", "1eb677195e8129324e4bbbdb39d04099d2d039bd", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"], "@@ -368,6 +368,7 @@ public Number read(JsonReader in) throws IOException {\n         in.nextNull();\n         return null;\n       case NUMBER:\n+      case STRING:\n         return new LazilyParsedNumber(in.nextString());\n       default:\n         throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);, @@ -158,6 +158,11 @@ public void testNumberDeserialization() {\n     assertEquals(1L, actual.longValue());\n   }\n \n+  public void testNumberAsStringDeserialization() {\n+    Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);\n+    assertEquals(18, value.intValue());\n+  }\n+\n   public void testPrimitiveDoubleAutoboxedSerialization() {\n     assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));\n     assertEquals(\"122.08112002\", gson.toJson(new Double(122.08112002)));, ", 6, 0, "\"modified, modified, \"", 6], ["Kevin Most", "Update JsonAdapter documentation\n\nInclude mention of JsonDeserializer and JsonSerializer.", "12/12/16, 02:04:10 AM", "GitHub", "7a8b3906025eab290d2a8b4936c9c03d8159d6e1", ["gson/src/main/java/com/google/gson/annotations/JsonAdapter.java"], "@@ -16,6 +16,8 @@\n \n package com.google.gson.annotations;\n \n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonSerializer;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n import java.lang.annotation.ElementType;\n@@ -77,8 +79,10 @@\n  * adapters, which in turn take precedence over annotated types.\n  *\n  * <p>The class referenced by this annotation must be either a {@link\n- * TypeAdapter} or a {@link TypeAdapterFactory}. Using the factory interface\n- * makes it possible to delegate to the enclosing {@code Gson} instance.\n+ * TypeAdapter} or a {@link TypeAdapterFactory}, or must implement one\n+ * or both of {@link JsonDeserializer} or {@link JsonSerializer}. \n+ * Using {@link TypeAdapterFactory} makes it possible to delegate \n+ * to the enclosing {@code Gson} instance.\n  *\n  * @since 2.3\n  *\n@@ -91,7 +95,7 @@\n @Target({ElementType.TYPE, ElementType.FIELD})\n public @interface JsonAdapter {\n \n-  /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}. */\n+  /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}, or one or both of {@link JsonDeserializer} or {@link JsonSerializer}. */\n   Class<?> value();\n \n   /** false, to be able to handle {@code null} values within the adapter, default value is true. */, ", 7, 3, "\"modified, \"", 10], ["Yutaro Iino", "Add missing comma in toString()", "12/20/16, 03:00:33 PM", "Yutaro Iino", "9e5e4ac630d6785b3a764a1c523a91605935d61d", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -981,7 +981,7 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {\n   public String toString() {\n     return new StringBuilder(\"{serializeNulls:\")\n         .append(serializeNulls)\n-        .append(\"factories:\").append(factories)\n+        .append(\",factories:\").append(factories)\n         .append(\",instanceCreators:\").append(constructorConstructor)\n         .append(\"}\")\n         .toString();, ", 1, 1, "\"modified, \"", 2], ["Martin Lind", "Fix for #957", "01/11/17, 04:32:23 PM", "Martin Lind", "180ad3263f55248ca96579512816aab53fe71da4", ["gson/pom.xml"], "@@ -43,6 +43,15 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <configuration>\n+          <archive>\n+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+          </archive>\n+        </configuration>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, ", 9, 0, "\"modified, \"", 9], ["Shiyao Qi", "Fixed typo\n\nFixed typo", "01/22/17, 10:00:33 AM", "GitHub", "614e735992ae4d3d7366a036e2ced17a78d0ba69", ["CHANGELOG.md"], "@@ -73,7 +73,7 @@ _2015-10-04_\n \n ## Version 2.3.1\n \n-__2014-11-20_\n+_2014-11-20_\n \n  * Added support to serialize objects with self-referential fields. The self-referential field is set to null in JSON. Previous version of Gson threw a StackOverflowException on encountering any self-referential fields.\n    * The most visible impact of this is that Gson can now serialize Throwable (Exception and Error), ", 1, 1, "\"modified, \"", 2], ["BloodShura", "All JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's message", "02/08/17, 12:04:22 AM", "BloodShura", "9d8d7a43e1335005dbaea0f96c1f1c5d33a61531", ["gson/src/main/java/com/google/gson/JsonElement.java"], "@@ -103,7 +103,7 @@ public JsonArray getAsJsonArray() {\n     if (isJsonArray()) {\n       return (JsonArray) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Array.\");\n+    throw new IllegalStateException(\"Not a JSON Array: \" + this);\n   }\n \n   /**\n@@ -119,7 +119,7 @@ public JsonPrimitive getAsJsonPrimitive() {\n     if (isJsonPrimitive()) {\n       return (JsonPrimitive) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Primitive.\");\n+    throw new IllegalStateException(\"Not a JSON Primitive: \" + this);\n   }\n \n   /**\n@@ -136,7 +136,7 @@ public JsonNull getAsJsonNull() {\n     if (isJsonNull()) {\n       return (JsonNull) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Null.\");\n+    throw new IllegalStateException(\"Not a JSON Null: \" + this);\n   }\n \n   /**, ", 3, 3, "\"modified, \"", 6], ["Andr\u00e9 Rou\u00e9l", "Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTreeReader #1013", "02/08/17, 12:34:35 PM", "Andr\u00e9 Rou\u00e9l", "b06e23d09e75ebf2ca6701cac82f0bb137bb5674", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java", "gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java"], "@@ -259,9 +259,13 @@ private void expect(JsonToken expected) throws IOException {\n       pathNames[stackSize - 2] = \"null\";\n     } else {\n       popStack();\n-      pathNames[stackSize - 1] = \"null\";\n+      if (stackSize > 0) {\n+        pathNames[stackSize - 1] = \"null\";\n+      }\n+    }\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n     }\n-    pathIndices[stackSize - 1]++;\n   }\n \n   @Override public String toString() {, @@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2017 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.bind;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.stream.JsonToken;\n+import java.io.IOException;\n+import junit.framework.TestCase;\n+\n+@SuppressWarnings(\"resource\")\n+public class JsonTreeReaderTest extends TestCase {\n+  public void testSkipValue_emptyJsonObject() throws IOException {\n+    JsonTreeReader in = new JsonTreeReader(new JsonObject());\n+    in.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, in.peek());\n+  }\n+\n+  public void testSkipValue_filledJsonObject() throws IOException {\n+    JsonObject jsonObject = new JsonObject();\n+    JsonArray jsonArray = new JsonArray();\n+    jsonArray.add('c');\n+    jsonArray.add(\"text\");\n+    jsonObject.add(\"a\", jsonArray);\n+    jsonObject.addProperty(\"b\", true);\n+    jsonObject.addProperty(\"i\", 1);\n+    jsonObject.add(\"n\", JsonNull.INSTANCE);\n+    JsonObject jsonObject2 = new JsonObject();\n+    jsonObject2.addProperty(\"n\", 2L);\n+    jsonObject.add(\"o\", jsonObject2);\n+    jsonObject.addProperty(\"s\", \"text\");\n+    JsonTreeReader in = new JsonTreeReader(jsonObject);\n+    in.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, in.peek());\n+  }\n+}, ", 56, 2, "\"modified, added, \"", 58], ["Mohammad Yasir", "Incorporating code review suggestions", "02/17/17, 01:55:23 AM", "Mohammad Yasir", "9c30b0e20389dfce7baf897685677a7ed42e42f3", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -997,7 +997,7 @@ private String nextQuotedValue(char quote) throws IOException {\n         if (c == quote) {\n           pos = p;\n           int len = p - start - 1;\n-          if(null == builder) {\n+          if (builder == null) {\n             return new String(buffer, start, len);\n           } else {\n             builder.append(buffer, start, len);\n@@ -1007,9 +1007,9 @@ private String nextQuotedValue(char quote) throws IOException {\n           pos = p;\n           int len = p - start - 1;\n           char escapeChar = readEscapeCharacter();\n-          if(null == builder) {\n+          if (builder == null) {\n             int estimatedLength = (len + pos - p) * 2;\n-            builder = new StringBuilder(estimatedLength < 16 ? 16 : estimatedLength);\n+            builder = new StringBuilder(Math.max(estimatedLength, 16));\n           }\n           builder.append(buffer, start, len);\n           builder.append(escapeChar);\n@@ -1022,9 +1022,9 @@ private String nextQuotedValue(char quote) throws IOException {\n         }\n       }\n \n-      if(null == builder) {\n-        int len = (p - start) * 2;\n-        builder = new StringBuilder(len < 16 ? 16 : len);\n+      if (builder == null) {\n+        int estimatedLength = (p - start) * 2;\n+        builder = new StringBuilder(Math.max(estimatedLength, 16));\n       }\n       builder.append(buffer, start, p - start);\n       pos = p;, ", 6, 6, "\"modified, \"", 12], ["Mohammad Yasir", "Incorporating the review comments. While more than 1 charachter might be read from the buffer the output will have only one escaped charachter.", "02/17/17, 06:24:30 AM", "Mohammad Yasir", "4644837207fba089f73ca0dd0b05a7750b960b38", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -1006,13 +1006,12 @@ private String nextQuotedValue(char quote) throws IOException {\n         } else if (c == '\\\\') {\n           pos = p;\n           int len = p - start - 1;\n-          char escapeChar = readEscapeCharacter();\n           if (builder == null) {\n-            int estimatedLength = (len + pos - p) * 2;\n+            int estimatedLength = (len + 1) * 2;\n             builder = new StringBuilder(Math.max(estimatedLength, 16));\n           }\n           builder.append(buffer, start, len);\n-          builder.append(escapeChar);\n+          builder.append(readEscapeCharacter());\n           p = pos;\n           l = limit;\n           start = p;, ", 2, 3, "\"modified, \"", 5], ["anirudh.r", "build fix, missed braces", "03/01/17, 07:04:21 AM", "anirudh.r", "8e6d34ae11a6118c6144e71e7b30fcc393f41274", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -483,7 +483,9 @@ public Type getOwnerType() {\n \n     @Override public String toString() {\n       int length = typeArguments.length;\n-      if length == 0 return typeToString(rawType);\n+      if (length == 0) {\n+        return typeToString(rawType);\n+      }\n \n       StringBuilder stringBuilder = new StringBuilder(30 * (length + 1));\n       stringBuilder.append(typeToString(rawType)).append(\"<\").append(typeToString(typeArguments[0]));, ", 3, 1, "\"modified, \"", 4], ["guptasourabh", "JsonArray with capacity in constructor\n\nJsonArray with capacity in constructor", "03/12/17, 06:49:29 PM", "GitHub", "952171e329db262c742a5d0fd8aa6868e0a80511", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -39,14 +39,21 @@\n   public JsonArray() {\n     elements = new ArrayList<JsonElement>();\n   }\n+  \n+  public JsonArray(int capacity) {\n+    elements = new ArrayList<JsonElement>(capacity);\n+  }\n \n   @Override\n   JsonArray deepCopy() {\n-    JsonArray result = new JsonArray();\n-    for (JsonElement element : elements) {\n-      result.add(element.deepCopy());\n+    if (!elements.isEmpty()) {\n+      JsonArray result = new JsonArray(elements.size());\n+      for (JsonElement element : elements) {\n+        result.add(element.deepCopy());\n+      }\n+      return result;\n     }\n-    return result;\n+    return new JsonArray();\n   }\n \n   /**, ", 11, 4, "\"modified, \"", 15], ["Sourabh Gupta", "elimiating code overhead", "03/15/17, 05:11:42 PM", "Sourabh Gupta", "d0e70bcdbf15aab8b03a05c88da4a4b4f60222dc", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"], "@@ -150,10 +150,6 @@ static String upperCaseFirstLetter(String name) {\n       firstCharacter = name.charAt(++index);\n     }\n \n-    if (index == length) {\n-      return fieldNameBuilder.toString();\n-    }\n-\n     if (!Character.isUpperCase(firstCharacter)) {\n       String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);\n       return fieldNameBuilder.append(modifiedTarget).toString();, @@ -224,7 +224,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\n \n       if (hasComplexKeys) {\n         out.beginArray();\n-        for (int i = 0; i < keys.size(); i++) {\n+        for (int i = 0, size = keys.size(); i < size; i++) {\n           out.beginArray(); // entry array\n           Streams.write(keys.get(i), out);\n           valueTypeAdapter.write(out, values.get(i));\n@@ -233,7 +233,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\n         out.endArray();\n       } else {\n         out.beginObject();\n-        for (int i = 0; i < keys.size(); i++) {\n+        for (int i = 0, size = keys.size(); i < size; i++) {\n           JsonElement keyElement = keys.get(i);\n           out.name(keyToString(keyElement));\n           valueTypeAdapter.write(out, values.get(i));, ", 2, 6, "\"modified, modified, \"", 8], ["guptasourabh", "Optimized imports\n\nOptimized imports", "03/16/17, 06:24:35 PM", "GitHub", "5a6c85daaec12df92caf0394728fc61b2a72d2ec", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -16,13 +16,6 @@\n \n package com.google.gson;\n \n-import com.google.gson.internal.$Gson$Preconditions;\n-import com.google.gson.internal.Excluder;\n-import com.google.gson.internal.bind.TreeTypeAdapter;\n-import com.google.gson.internal.bind.TypeAdapters;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n@@ -33,6 +26,13 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.google.gson.internal.$Gson$Preconditions;\n+import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.bind.TreeTypeAdapter;\n+import com.google.gson.internal.bind.TypeAdapters;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+\n import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;\n import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;\n import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;, ", 7, 7, "\"modified, \"", 14], ["Egor Neliuba", "Fix headers format in the README.md", "03/20/17, 11:11:18 AM", "GitHub", "f16a769853638f507bc166c43e46cb9e05f58c5c", ["README.md"], "@@ -9,30 +9,30 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n-###*Gson Goals*\n+### Gson Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-###*Gson Download and Maven*\n+### Gson Download and Maven\n   * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n   * For Maven check \"Dependency Information\" tab, on the left side.\n \n-###*Gson Documentation*\n+### Gson Documentation\n   * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n   * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n \n-###*Gson-related Content Created by Third Parties*\n+### Gson-related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n \n-###*License*\n+### License\n \n Gson is released under the [Apache 2.0 license](LICENSE).\n , ", 5, 5, "\"modified, \"", 10], ["sourabh gupta", "Simplified access of getSimpleName\n\nCode Review changes", "03/20/17, 06:11:38 PM", "GitHub", "c6a3ce644855c07b4a23020f66bd15032271bbe6", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java"], "@@ -37,11 +37,12 @@\n final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n \n   // TODO: migrate to streaming adapter\n-\n+  \n+  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n+  \n   private final DateFormat enUsFormat;\n   private final DateFormat localFormat;\n-  private final static String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n-\n+  \n   DefaultDateTypeAdapter() {\n     this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));, ", 4, 3, "\"modified, \"", 7], ["Matthew Haughton", "UserGuide formatting fixes", "03/21/17, 05:37:22 PM", "GitHub", "74c938523f55aba728e86e602e328f6898052345", ["UserGuide.md"], "@@ -5,32 +5,32 @@\n 3. [Gson Performance and Scalability](#TOC-Gson-Performance-and-Scalability)\n 4. [Gson Users](#TOC-Gson-Users)\n 5. [Using Gson](#TOC-Using-Gson)\n-  * [Using Gson with Maven](#TOC-Gson-With-Maven)\n-  * [Primitives Examples](#TOC-Primitives-Examples)\n-  * [Object Examples](#TOC-Object-Examples)\n-  * [Finer Points with Objects](#TOC-Finer-Points-with-Objects)\n-  * [Nested Classes (including Inner Classes)](#TOC-Nested-Classes-including-Inner-Classes-)\n-  * [Array Examples](#TOC-Array-Examples)\n-  * [Collections Examples](#TOC-Collections-Examples)\n-    * [Collections Limitations](#TOC-Collections-Limitations)\n-  * [Serializing and Deserializing Generic Types](#TOC-Serializing-and-Deserializing-Generic-Types)\n-  * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types)\n-  * [Built-in Serializers and Deserializers](#TOC-Built-in-Serializers-and-Deserializers)\n-  * [Custom Serialization and Deserialization](#TOC-Custom-Serialization-and-Deserialization)\n-    * [Writing a Serializer](#TOC-Writing-a-Serializer)\n-    * [Writing a Deserializer](#TOC-Writing-a-Deserializer)\n-  * [Writing an Instance Creator](#TOC-Writing-an-Instance-Creator)\n-    * [InstanceCreator for a Parameterized Type](#TOC-InstanceCreator-for-a-Parameterized-Type)\n-  * [Compact Vs. Pretty Printing for JSON Output Format](#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format)\n-  * [Null Object Support](#TOC-Null-Object-Support)\n-  * [Versioning Support](#TOC-Versioning-Support)\n-  * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n-    * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n-    * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n-    * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n-  * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n-  * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n-  * [Streaming](#TOC-Streaming)\n+   * [Using Gson with Maven](#TOC-Gson-With-Maven)\n+   * [Primitives Examples](#TOC-Primitives-Examples)\n+   * [Object Examples](#TOC-Object-Examples)\n+   * [Finer Points with Objects](#TOC-Finer-Points-with-Objects)\n+   * [Nested Classes (including Inner Classes)](#TOC-Nested-Classes-including-Inner-Classes-)\n+   * [Array Examples](#TOC-Array-Examples)\n+   * [Collections Examples](#TOC-Collections-Examples)\n+     * [Collections Limitations](#TOC-Collections-Limitations)\n+   * [Serializing and Deserializing Generic Types](#TOC-Serializing-and-Deserializing-Generic-Types)\n+   * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types)\n+   * [Built-in Serializers and Deserializers](#TOC-Built-in-Serializers-and-Deserializers)\n+   * [Custom Serialization and Deserialization](#TOC-Custom-Serialization-and-Deserialization)\n+     * [Writing a Serializer](#TOC-Writing-a-Serializer)\n+     * [Writing a Deserializer](#TOC-Writing-a-Deserializer)\n+   * [Writing an Instance Creator](#TOC-Writing-an-Instance-Creator)\n+     * [InstanceCreator for a Parameterized Type](#TOC-InstanceCreator-for-a-Parameterized-Type)\n+   * [Compact Vs. Pretty Printing for JSON Output Format](#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format)\n+   * [Null Object Support](#TOC-Null-Object-Support)\n+   * [Versioning Support](#TOC-Versioning-Support)\n+   * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n+     * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n+     * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n+     * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n+   * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n+   * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n+   * [Streaming](#TOC-Streaming)\n 6. [Issues in Designing Gson](#TOC-Issues-in-Designing-Gson)\n 7. [Future Enhancements to Gson](#TOC-Future-Enhancements-to-Gson)\n , ", 26, 26, "\"modified, \"", 52], ["sourabh gupta", "Size allocation of StringBuilder\n\nSize allocation of StringBuilder", "03/23/17, 02:24:13 AM", "GitHub", "7daa7aff28d3005f5844fb36b7e080a3c15c2b35", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -1077,7 +1077,7 @@ private String nextUnquotedValue() throws IOException {\n \n       // use a StringBuilder when the value is too long. This is too long to be a number!\n       if (builder == null) {\n-        builder = new StringBuilder();\n+        builder = new StringBuilder(Math.max(i,16));\n       }\n       builder.append(buffer, pos, i);\n       pos += i;\n@@ -1086,14 +1086,8 @@ private String nextUnquotedValue() throws IOException {\n         break;\n       }\n     }\n-\n-    String result;\n-    if (builder == null) {\n-      result = new String(buffer, pos, i);\n-    } else {\n-      builder.append(buffer, pos, i);\n-      result = builder.toString();\n-    }\n+   \n+    String result = (null == builder) ? new String(buffer, pos, i) : builder.append(buffer, pos, i).toString();\n     pos += i;\n     return result;\n   }\n@@ -1438,14 +1432,15 @@ private void skipToEndOfLine() throws IOException {\n    * @param toFind a string to search for. Must not contain a newline.\n    */\n   private boolean skipTo(String toFind) throws IOException {\n+    int length = toFind.length();\n     outer:\n-    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n+    for (; pos + length <= limit || fillBuffer(length); pos++) {\n       if (buffer[pos] == '\\n') {\n         lineNumber++;\n         lineStart = pos + 1;\n         continue;\n       }\n-      for (int c = 0; c < toFind.length(); c++) {\n+      for (int c = 0; c < length; c++) {\n         if (buffer[pos + c] != toFind.charAt(c)) {\n           continue outer;\n         }, ", 6, 11, "\"modified, \"", 17], ["Timmy Villaluz", "Update GsonDesignDocument.md", "03/23/17, 09:58:52 PM", "GitHub", "4274e359567814ddb2859c1dbdb78af0a1ad476a", ["GsonDesignDocument.md"], "@@ -1,4 +1,4 @@\n-#Gson Design Document\n+# Gson Design Document\n \n This document presents issues that we faced while designing Gson. It is meant for advanced users or developers working on Gson. If you are interested in learning how to use Gson, see its user guide. \n , ", 1, 1, "\"modified, \"", 2], ["Mohammad Yasir", "Implementing code review changes", "04/12/17, 07:31:07 PM", "Mohammad Yasir", "29435b8d8834229d052b392903f22c66230b1402", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -109,6 +109,7 @@\n   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n+  private static final TypeToken<?> NULL_KEY_SURROGATE = TypeToken.get(Object.class);\n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   /**\n@@ -395,7 +396,7 @@ static void checkValidFloatingPoint(double value) {\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n-    TypeAdapter<?> cached = typeTokenCache.get(type == null ? TypeToken.get(Object.class) : type);\n+    TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;\n     }, ", 2, 1, "\"modified, \"", 3], ["Inderjeet Singh", "Printing more debugging information to help track an invalid JsonAdapter.\n\nNow the thrown exception carries this information:\njava.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer.", "04/18/17, 06:54:27 PM", "Inderjeet Singh", "c3b9c0daa8c49e985983ff6d74ebc522a4396955", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java"], "@@ -136,6 +136,7 @@ private JsonElement createJsonElement(Object value) {\n    * Returns a set of members key values.\n    *\n    * @return a set of member keys as Strings\n+   * @since 2.8.1\n    */\n   public Set<String> keySet() {\n     return members.keySet();, @@ -68,9 +68,10 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n           : null;\n       typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n     } else {\n-      throw new IllegalArgumentException(\n-          \"@JsonAdapter value must be TypeAdapter, TypeAdapterFactory, \"\n-              + \"JsonSerializer or JsonDeserializer reference.\");\n+      throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \"\n+          + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString()\n+          + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\"\n+          + \" JsonSerializer or JsonDeserializer.\");\n     }\n \n     if (typeAdapter != null && annotation.nullSafe()) {, @@ -249,4 +249,15 @@ public NullableClass read(JsonReader in) throws IOException {\n       return Foo.valueOf(in.nextString().toUpperCase(Locale.US));\n     }\n   }\n+\n+  public void testIncorrectJsonAdapterType() {\n+    try {\n+      new Gson().toJson(new D());\n+      fail();\n+    } catch (IllegalArgumentException expected) {}\n+  }\n+  @JsonAdapter(Integer.class)\n+  private static final class D {\n+    @SuppressWarnings(\"unused\") final String value = \"a\";\n+  }\n }, ", 16, 3, "\"modified, modified, modified, \"", 19], ["Michele Vivoda", "negative zero test and fix", "04/19/17, 04:03:51 PM", "Michele Vivoda", "60c977a706763bf6a27b7b79afcb710f96665090", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"], "@@ -728,7 +728,7 @@ private int peekNumber() throws IOException {\n     }\n \n     // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.\n-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n+    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {\n       peekedLong = negative ? value : -value;\n       pos += i;\n       return peeked = PEEKED_LONG;, @@ -560,6 +560,18 @@ public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\n     } catch (NumberFormatException expected) {\n     }\n   }\n+  \n+  /**\n+   * Issue 1053, negative zero.\n+   * @throws Exception\n+   */\n+  public void testNegativeZero() throws Exception {\n+\t  \tJsonReader reader = new JsonReader(reader(\"[-0]\"));\n+\t    reader.setLenient(false);\n+\t    reader.beginArray();\n+\t    assertEquals(NUMBER, reader.peek());\n+\t    assertEquals(\"-0\", reader.nextString());\n+  }\n \n   /**\n    * This test fails because there's no double for 9223372036854775808, and our, ", 13, 1, "\"modified, modified, \"", 14], ["Lyubomyr Shaydariv", "Migrate DefaultDateTypeAdapter to streaming adapter", "04/21/17, 10:13:31 AM", "Lyubomyr Shaydariv", "40addce96ffe9e6546aa9952dd709306f7a39370", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -16,7 +16,7 @@\n \n package com.google.gson;\n \n-import java.lang.reflect.Type;\n+import java.io.IOException;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n@@ -26,6 +26,9 @@\n import java.util.Locale;\n \n import com.google.gson.internal.bind.util.ISO8601Utils;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and\n@@ -34,78 +37,89 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n+final class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n \n-  // TODO: migrate to streaming adapter\n-  \n   private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n-  \n+\n+  private final Class<? extends Date> dateType;\n   private final DateFormat enUsFormat;\n   private final DateFormat localFormat;\n   \n-  DefaultDateTypeAdapter() {\n-    this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType) {\n+    this(dateType,\n+        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n   }\n \n-  DefaultDateTypeAdapter(String datePattern) {\n-    this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {\n+    this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));\n   }\n \n-  DefaultDateTypeAdapter(int style) {\n-    this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {\n+    this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));\n   }\n \n   public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n-    this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n+    this(Date.class,\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n         DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n   }\n \n-  DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n+  public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {\n+    this(dateType,\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n+  }\n+\n+  DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {\n+    if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {\n+      throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType);\n+    }\n+    this.dateType = dateType;\n     this.enUsFormat = enUsFormat;\n     this.localFormat = localFormat;\n   }\n \n   // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n   // See issue 162\n   @Override\n-  public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n+  public void write(JsonWriter out, Date value) throws IOException {\n     synchronized (localFormat) {\n-      String dateFormatAsString = enUsFormat.format(src);\n-      return new JsonPrimitive(dateFormatAsString);\n+      String dateFormatAsString = enUsFormat.format(value);\n+      out.value(dateFormatAsString);\n     }\n   }\n \n   @Override\n-  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-      throws JsonParseException {\n-    if (!(json instanceof JsonPrimitive)) {\n+  public Date read(JsonReader in) throws IOException {\n+    if (in.peek() != JsonToken.STRING) {\n       throw new JsonParseException(\"The date should be a string value\");\n     }\n-    Date date = deserializeToDate(json);\n-    if (typeOfT == Date.class) {\n+    Date date = deserializeToDate(in.nextString());\n+    if (dateType == Date.class) {\n       return date;\n-    } else if (typeOfT == Timestamp.class) {\n+    } else if (dateType == Timestamp.class) {\n       return new Timestamp(date.getTime());\n-    } else if (typeOfT == java.sql.Date.class) {\n+    } else if (dateType == java.sql.Date.class) {\n       return new java.sql.Date(date.getTime());\n     } else {\n-      throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n+      // This must never happen: dateType is guarded in the primary constructor\n+      throw new AssertionError();\n     }\n   }\n \n-  private Date deserializeToDate(JsonElement json) {\n+  private Date deserializeToDate(String s) {\n     synchronized (localFormat) {\n       try {\n-      \treturn localFormat.parse(json.getAsString());\n+        return localFormat.parse(s);\n       } catch (ParseException ignored) {}\n       try {\n-        return enUsFormat.parse(json.getAsString());\n+        return enUsFormat.parse(s);\n       } catch (ParseException ignored) {}\n       try {\n-        return ISO8601Utils.parse(json.getAsString(), new ParsePosition(0));\n+        return ISO8601Utils.parse(s, new ParsePosition(0));\n       } catch (ParseException e) {\n-        throw new JsonSyntaxException(json.getAsString(), e);\n+        throw new JsonSyntaxException(s, e);\n       }\n     }\n   }, @@ -572,19 +572,26 @@ public Gson create() {\n         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,\n       List<TypeAdapterFactory> factories) {\n     DefaultDateTypeAdapter dateTypeAdapter;\n+    TypeAdapter<Timestamp> timestampTypeAdapter;\n+    TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;\n     if (datePattern != null && !\"\".equals(datePattern.trim())) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);\n+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);\n+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);\n+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);\n     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);\n+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);\n+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);\n+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);\n     } else {\n       return;\n     }\n \n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Date.class), dateTypeAdapter));\n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Timestamp.class), dateTypeAdapter));\n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(java.sql.Date.class), dateTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(Date.class, dateTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(Timestamp.class, timestampTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(java.sql.Date.class, javaSqlDateTypeAdapter));\n   }\n }, @@ -16,6 +16,7 @@\n \n package com.google.gson;\n \n+import java.io.IOException;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n@@ -44,10 +45,10 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(locale);\n     try {\n-      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter());\n-      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n+      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertFormatted(\"1/1/70 12:00 AM\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n@@ -62,16 +63,16 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     }\n   }\n \n-  public void testParsingDatesFormattedWithSystemLocale() {\n+  public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.FRANCE);\n     try {\n-      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter());\n-      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertParsed(\"01/01/70 00:00\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(\"1 janv. 1970 00:00:00\",\n@@ -86,16 +87,16 @@ public void testParsingDatesFormattedWithSystemLocale() {\n     }\n   }\n \n-  public void testParsingDatesFormattedWithUsLocale() {\n+  public void testParsingDatesFormattedWithUsLocale() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter());\n-      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertParsed(\"1/1/70 0:00 AM\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(\"Jan 1, 1970 0:00:00 AM\",\n@@ -110,22 +111,22 @@ public void testParsingDatesFormattedWithUsLocale() {\n     }\n   }\n \n-  public void testFormatUsesDefaultTimezone() {\n+  public void testFormatUsesDefaultTimezone() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n-      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n+      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n     }\n   }\n \n   public void testDateDeserializationISO8601() throws Exception {\n-  \tDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();\n+    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n     assertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\n     assertParsed(\"1970-01-01T00:00Z\", adapter);\n     assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n@@ -135,38 +136,41 @@ public void testDateDeserializationISO8601() throws Exception {\n   \n   public void testDateSerialization() throws Exception {\n     int dateStyle = DateFormat.LONG;\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);\n+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle);\n     DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);\n     Date currentDate = new Date();\n \n-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n-    assertEquals(formatter.format(currentDate), dateString);\n+    String dateString = dateTypeAdapter.toJson(currentDate);\n+    assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n   public void testDatePattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);\n+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, pattern);\n     DateFormat formatter = new SimpleDateFormat(pattern);\n     Date currentDate = new Date();\n \n-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n-    assertEquals(formatter.format(currentDate), dateString);\n+    String dateString = dateTypeAdapter.toJson(currentDate);\n+    assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n   public void testInvalidDatePattern() throws Exception {\n     try {\n-      new DefaultDateTypeAdapter(\"I am a bad Date pattern....\");\n+      new DefaultDateTypeAdapter(Date.class, \"I am a bad Date pattern....\");\n       fail(\"Invalid date pattern should fail.\");\n     } catch (IllegalArgumentException expected) { }\n   }\n \n   private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n-    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());\n+    assertEquals(toLiteral(formatted), adapter.toJson(new Date(0)));\n   }\n \n-  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {\n-    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));\n-    assertEquals(\"ISO 8601\", new Date(0), adapter.deserialize(\n-        new JsonPrimitive(\"1970-01-01T00:00:00Z\"), Date.class, null));\n+  private void assertParsed(String date, DefaultDateTypeAdapter adapter) throws IOException {\n+    assertEquals(date, new Date(0), adapter.fromJson(toLiteral(date)));\n+    assertEquals(\"ISO 8601\", new Date(0), adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\")));\n+  }\n+\n+  private static String toLiteral(String s) {\n+    return '\"' + s + '\"';\n   }\n }, ", 89, 64, "\"modified, modified, modified, \"", 153], ["James Carman", "Adding maven-bundle-plugin.", "04/21/17, 07:26:27 PM", "James Carman", "1f6b1cd663fce6aa6bbca240e2dc89de033b13d7", ["gson/pom.xml", "pom.xml"], "@@ -52,6 +52,10 @@\n           </archive>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -78,6 +78,12 @@\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-jar-plugin</artifactId>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.felix</groupId>\n+          <artifactId>maven-bundle-plugin</artifactId>\n+          <version>3.2.0</version>\n+          <inherited>true</inherited>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n     <plugins>, ", 10, 0, "\"modified, modified, \"", 10], ["Eric Cochran", "Remove need for synthetic accessor methods.", "04/23/17, 12:32:59 AM", "Eric Cochran", "3270e8d97259665cad9b66011993044de97c26db", ["gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java", "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -111,7 +111,7 @@ public static UnsafeAllocator create() {\n    * throw an {@link java.lang.UnsupportedOperationException}\n    * @param c instance of the class to be checked\n    */\n-  private static void assertInstantiable(Class<?> c) {\n+  static void assertInstantiable(Class<?> c) {\n     int modifiers = c.getModifiers();\n     if (Modifier.isInterface(modifiers)) {\n       throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());, @@ -41,7 +41,7 @@\n public final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n   private final JsonSerializer<T> serializer;\n   private final JsonDeserializer<T> deserializer;\n-  private final Gson gson;\n+  final Gson gson;\n   private final TypeToken<T> typeToken;\n   private final TypeAdapterFactory skipPast;\n   private final GsonContextImpl context = new GsonContextImpl();, @@ -1459,7 +1459,7 @@ private boolean skipTo(String toFind) throws IOException {\n     return getClass().getSimpleName() + locationString();\n   }\n \n-  private String locationString() {\n+  String locationString() {\n     int line = lineNumber + 1;\n     int column = pos - lineStart + 1;\n     return \" at line \" + line + \" column \" + column + \" path \" + getPath();, ", 3, 3, "\"modified, modified, modified, \"", 6], ["Lyubomyr Shaydariv", "Remove helper methods mentioned in the TODO list", "04/23/17, 12:38:39 PM", "Lyubomyr Shaydariv", "eb27d55f497a5bb292c020e255415677e0b646fc", ["gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java"], "@@ -27,8 +27,6 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -43,59 +41,59 @@\n   private TypeAdapter<Map<String, Double>> mapAdapter\n       = miniGson.getAdapter(new TypeToken<Map<String, Double>>() {});\n \n-  public void testSerialize() throws IOException {\n+  public void testSerialize() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     truck.horsePower = 300;\n \n     assertEquals(\"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserialize() throws IOException {\n     String json = \"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\";\n-    Truck truck = fromJson(truckAdapter, json);\n+    Truck truck = truckAdapter.fromJson(json.replace('\\'', '\\\"'));\n     assertEquals(300.0, truck.horsePower);\n     assertEquals(Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29)), truck.passengers);\n   }\n \n-  public void testSerializeNullField() throws IOException {\n+  public void testSerializeNullField() {\n     Truck truck = new Truck();\n     truck.passengers = null;\n     assertEquals(\"{'horsePower':0.0,'passengers':null}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullField() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':null}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':null}\".replace('\\'', '\\\"'));\n     assertNull(truck.passengers);\n   }\n \n-  public void testSerializeNullObject() throws IOException {\n+  public void testSerializeNullObject() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList((Person) null);\n     assertEquals(\"{'horsePower':0.0,'passengers':[null]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullObject() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':[null]}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':[null]}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList((Person) null), truck.passengers);\n   }\n \n-  public void testSerializeWithCustomTypeAdapter() throws IOException {\n+  public void testSerializeWithCustomTypeAdapter() {\n     usePersonNameAdapter();\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     assertEquals(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeWithCustomTypeAdapter() throws IOException {\n     usePersonNameAdapter();\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList(new Person(\"Jesse\", -1), new Person(\"Jodie\", -1)), truck.passengers);\n   }\n \n@@ -113,40 +111,40 @@ private void usePersonNameAdapter() {\n     truckAdapter = miniGson.getAdapter(Truck.class);\n   }\n \n-  public void testSerializeMap() throws IOException {\n+  public void testSerializeMap() {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(\"{'a':5.0,'b':10.0}\", toJson(mapAdapter, map).replace('\"', '\\''));\n+    assertEquals(\"{'a':5.0,'b':10.0}\", mapAdapter.toJson(map).replace('\"', '\\''));\n   }\n \n   public void testDeserializeMap() throws IOException {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(map, fromJson(mapAdapter, \"{'a':5.0,'b':10.0}\"));\n+    assertEquals(map, mapAdapter.fromJson(\"{'a':5.0,'b':10.0}\".replace('\\'', '\\\"')));\n   }\n \n-  public void testSerialize1dArray() throws IOException {\n+  public void testSerialize1dArray() {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    assertEquals(\"[1.0,2.0,3.0]\", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));\n+    assertEquals(\"[1.0,2.0,3.0]\", arrayAdapter.toJson(new double[]{ 1.0, 2.0, 3.0 }));\n   }\n \n   public void testDeserialize1dArray() throws IOException {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    double[] array = fromJson(arrayAdapter, \"[1.0,2.0,3.0]\");\n+    double[] array = arrayAdapter.fromJson(\"[1.0,2.0,3.0]\");\n     assertTrue(Arrays.toString(array), Arrays.equals(new double[]{1.0, 2.0, 3.0}, array));\n   }\n \n-  public void testSerialize2dArray() throws IOException {\n+  public void testSerialize2dArray() {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n     double[][] array = { {1.0, 2.0 }, { 3.0 } };\n-    assertEquals(\"[[1.0,2.0],[3.0]]\", toJson(arrayAdapter, array));\n+    assertEquals(\"[[1.0,2.0],[3.0]]\", arrayAdapter.toJson(array));\n   }\n \n   public void testDeserialize2dArray() throws IOException {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n-    double[][] array = fromJson(arrayAdapter, \"[[1.0,2.0],[3.0]]\");\n+    double[][] array = arrayAdapter.fromJson(\"[[1.0,2.0],[3.0]]\");\n     double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n     assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n   }\n@@ -186,15 +184,15 @@ public void write(JsonWriter out, Person person) throws IOException {\n     assertEquals(\"jesse\", truck.passengers.get(1).name);\n   }\n \n-  public void testSerializeRecursive() throws IOException {\n+  public void testSerializeRecursive() {\n     TypeAdapter<Node> nodeAdapter = miniGson.getAdapter(Node.class);\n     Node root = new Node(\"root\");\n     root.left = new Node(\"left\");\n     root.right = new Node(\"right\");\n     assertEquals(\"{'label':'root',\"\n         + \"'left':{'label':'left','left':null,'right':null},\"\n         + \"'right':{'label':'right','left':null,'right':null}}\",\n-        toJson(nodeAdapter, root).replace('\"', '\\''));\n+        nodeAdapter.toJson(root).replace('\"', '\\''));\n   }\n   \n   public void testFromJsonTree() {\n@@ -243,19 +241,4 @@ public void testFromJsonTree() {\n       this.label = label;\n     }\n   }\n-\n-  // TODO: remove this when TypeAdapter.toJson() is public\n-  private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {\n-    StringWriter stringWriter = new StringWriter();\n-    JsonWriter writer = new JsonWriter(stringWriter);\n-    typeAdapter.write(writer, value);\n-    return stringWriter.toString();\n-  }\n-\n-  // TODO: remove this when TypeAdapter.fromJson() is public\n-  private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(json));\n-    reader.setLenient(true); // TODO: non-lenient?\n-    return typeAdapter.read(reader);\n-  }\n }, ", 23, 40, "\"modified, \"", 63], ["inder123", "added copyright header", "05/31/17, 12:45:50 AM", "GitHub", "06f96e561933ad9cd74eb4cfd095e1d7481546b1", ["gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java"], "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright (C) 2017 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.google.gson.internal.bind;\n \n import com.google.gson.Gson;, ", 16, 0, "\"modified, \"", 16], ["Inderjeet Singh", "since 2.8.2", "05/31/17, 05:29:29 PM", "Inderjeet Singh", "e467a48683744a2ac1eae60249382b853c244502", ["gson/src/main/java/com/google/gson/JsonArray.java", "gson/src/main/java/com/google/gson/JsonElement.java", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/main/java/com/google/gson/JsonPrimitive.java"], "@@ -46,7 +46,7 @@ public JsonArray(int capacity) {\n \n   /**\n    * Creates a deep copy of this element and all its children\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonArray deepCopy() {, @@ -34,7 +34,7 @@\n   /**\n    * Returns a deep copy of this element. Immutable elements like primitives\n    * and nulls are not copied.\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   public abstract JsonElement deepCopy();\n , @@ -42,7 +42,7 @@ public JsonNull() {\n \r\n   /**\r\n    * Returns the same instance since it is an immutable value\r\n-   * @since 2.8.1\r\n+   * @since 2.8.2\r\n    */\r\n   @Override\r\n   public JsonNull deepCopy() {\r, @@ -35,7 +35,7 @@\n \n   /**\n    * Creates a deep copy of this element and all its children\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonObject deepCopy() {, @@ -87,7 +87,7 @@ public JsonPrimitive(Character c) {\n \n   /**\n    * Returns the same value as primitives are immutable.\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonPrimitive deepCopy() {, ", 5, 5, "\"modified, modified, modified, modified, modified, \"", 10], ["mike", "Fixed JsonWriter#value(double) to write infinite and NaN values when lenient, as JsonWriter#value(Number) does. (fixes #1090)", "05/31/17, 08:19:57 AM", "mike", "9963a477d667a6cf2a978c50d1d0c270d160508b", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -491,10 +491,10 @@ public JsonWriter value(Boolean value) throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter value(double value) throws IOException {\n-    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+    writeDeferredName();\n+    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    writeDeferredName();\n     beforeValue();\n     out.append(Double.toString(value));\n     return this;, ", 2, 2, "\"modified, \"", 4], ["Lyubomyr Shaydariv", "Fixed DefaultDateTypeAdapter nullability on write", "06/08/17, 06:42:17 PM", "Lyubomyr Shaydariv", "435cc9f05ad2cd159be22b17ba160a7d2851cdac", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -84,6 +84,10 @@ public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int\n   // See issue 162\n   @Override\n   public void write(JsonWriter out, Date value) throws IOException {\n+    if (value == null) {\n+      out.nullValue();\n+      return;\n+    }\n     synchronized (localFormat) {\n       String dateFormatAsString = enUsFormat.format(value);\n       out.value(dateFormatAsString);, @@ -164,6 +164,7 @@ public void testInvalidDatePattern() throws Exception {\n   public void testNullValue() throws Exception {\n     DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n     assertNull(adapter.fromJson(\"null\"));\n+    assertEquals(\"null\", adapter.toJson(null));\n   }\n \n   public void testUnexpectedToken() throws Exception {, ", 5, 0, "\"modified, modified, \"", 5], ["Niv Singer", "Improve the code quality of PostConstructAdapterFactoryTest", "06/19/17, 07:22:57 PM", "GitHub", "9aed8cb6cf084727ffbc2d3dd76154a2dbc63135", ["extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java"], "@@ -50,8 +50,7 @@ public void testList() {\n \n         // Throws NullPointerException without the fix in https://github.com/google/gson/pull/1103\n         String json = gson.toJson(sandwiches);\n-        Assert.assertEquals(\n-            \"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n+        Assert.assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n \n         MultipleSandwiches sandwichesFromJson = gson.fromJson(json, MultipleSandwiches.class);\n         Assert.assertEquals(sandwiches, sandwichesFromJson);, ", 1, 2, "\"modified, \"", 3], ["StefMa", "Fix well formed exception\n\nThe previous exception was styled in the following way:\n... [\"DATE']...\nThis commit will fix the different quote marks and replace the \" with '", "06/23/17, 01:20:21 PM", "StefMa", "30cfe03c45c03f73a007145e7f048c8b7566df11", ["extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java", "extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java", "extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java"], "@@ -229,7 +229,7 @@ private static Date parse(String date, ParsePosition pos) throws ParseException\n     } catch (IllegalArgumentException e) {\n       fail = e;\n     }\n-    String input = (date == null) ? null : ('\"' + date + \"'\");\n+    String input = (date == null) ? null : (\"'\" + date + \"'\");\n     throw new ParseException(\"Failed to parse date [\" + input + \"]: \" + fail.getMessage(), pos.getIndex());\n   }\n , @@ -22,7 +22,6 @@\n import com.google.gson.GsonBuilder;\n \n import junit.framework.TestCase;\n-import org.junit.Assert;\n \n import java.util.Arrays;\n import java.util.List;\n@@ -50,10 +49,10 @@ public void testList() {\n \n         // Throws NullPointerException without the fix in https://github.com/google/gson/pull/1103\n         String json = gson.toJson(sandwiches);\n-        Assert.assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n+        assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n \n         MultipleSandwiches sandwichesFromJson = gson.fromJson(json, MultipleSandwiches.class);\n-        Assert.assertEquals(sandwiches, sandwichesFromJson);\n+        assertEquals(sandwiches, sandwichesFromJson);\n     }\n \n     static class Sandwich {, @@ -22,6 +22,7 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import com.google.gson.JsonParseException;\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n@@ -76,4 +77,13 @@ public void testNullDateSerialization() {\n     String json = gson.toJson(null, Date.class);\n     assertEquals(\"null\", json);\n   }\n+\n+  public void testWellFormedParseException() {\n+    try {\n+      gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\n+      fail(\"No exception\");\n+    } catch (JsonParseException exe) {\n+      assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\n+    }\n+  }\n }, ", 13, 4, "\"modified, modified, modified, \"", 17], ["Ori Schwartz", "Java protobuf uses lower camel for all field names. When using reflection to find the generic type of repeated fields, can't use the user specified formats for field name conversion.", "07/19/17, 02:13:25 PM", "Ori Schwartz", "5a91259b09d5a57bba1a1ddfb046415c6a922d40", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java", "proto/src/main/protobuf/bag.proto", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java"], "@@ -19,7 +19,6 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.base.CaseFormat;\n-import com.google.common.base.Converter;\n import com.google.common.collect.MapMaker;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n@@ -94,7 +93,8 @@\n     private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n     private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;\n     private EnumSerialization enumSerialization;\n-    private Converter<String, String> fieldNameSerializationFormat;\n+    private CaseFormat protoFormat;\n+    private CaseFormat jsonFormat;\n \n     private Builder(EnumSerialization enumSerialization, CaseFormat fromFieldNameFormat,\n         CaseFormat toFieldNameFormat) {\n@@ -126,7 +126,8 @@ public Builder setEnumSerialization(EnumSerialization enumSerialization) {\n      */\n     public Builder setFieldNameSerializationFormat(CaseFormat fromFieldNameFormat,\n         CaseFormat toFieldNameFormat) {\n-      fieldNameSerializationFormat = fromFieldNameFormat.converterTo(toFieldNameFormat);\n+      this.protoFormat = fromFieldNameFormat;\n+      this.jsonFormat = toFieldNameFormat;\n       return this;\n     }\n \n@@ -174,7 +175,7 @@ public Builder addSerializedEnumValueExtension(\n     }\n \n     public ProtoTypeAdapter build() {\n-      return new ProtoTypeAdapter(enumSerialization, fieldNameSerializationFormat,\n+      return new ProtoTypeAdapter(enumSerialization, protoFormat, jsonFormat,\n           serializedNameExtensions, serializedEnumValueExtensions);\n     }\n   }\n@@ -195,16 +196,19 @@ public static Builder newBuilder() {\n       new MapMaker().makeMap();\n \n   private final EnumSerialization enumSerialization;\n-  private final Converter<String, String> fieldNameSerializationFormat;\n+  private final CaseFormat protoFormat;\n+  private final CaseFormat jsonFormat;\n   private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n   private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;\n \n   private ProtoTypeAdapter(EnumSerialization enumSerialization,\n-      Converter<String, String> fieldNameSerializationFormat,\n+      CaseFormat protoFormat,\n+      CaseFormat jsonFormat,\n       Set<Extension<FieldOptions, String>> serializedNameExtensions,\n       Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions) {\n     this.enumSerialization = enumSerialization;\n-    this.fieldNameSerializationFormat = fieldNameSerializationFormat;\n+    this.protoFormat = protoFormat;\n+    this.jsonFormat = jsonFormat;\n     this.serializedNameExtensions = serializedNameExtensions;\n     this.serializedEnumValueExtensions = serializedEnumValueExtensions;\n   }\n@@ -284,8 +288,9 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             } else if (fieldDescriptor.isRepeated()) {\n               // If the type is an array, then we have to grab the type from the class.\n+              // protobuf java field names are always lower camel case\n               String protoArrayFieldName =\n-                  fieldNameSerializationFormat.convert(fieldDescriptor.getName()) + \"_\";\n+                  protoFormat.to(CaseFormat.LOWER_CAMEL, fieldDescriptor.getName()) + \"_\";\n               Field protoArrayField = protoClass.getDeclaredField(protoArrayFieldName);\n               Type protoArrayFieldType = protoArrayField.getGenericType();\n               fieldValue = context.deserialize(jsonElement, protoArrayFieldType);\n@@ -325,7 +330,7 @@ private String getCustSerializedName(FieldOptions options, String defaultName) {\n         return options.getExtension(extension);\n       }\n     }\n-    return fieldNameSerializationFormat.convert(defaultName);\n+    return protoFormat.to(jsonFormat, defaultName);\n   }\n \n   /**, @@ -24,6 +24,11 @@ message SimpleProto {\n   optional int32 count = 2;\n }\n \n+message ProtoWithDifferentCaseFormat {\n+  repeated string name_that_tests_case_format = 1;\n+  optional string another_field = 2;\n+}\n+\n message ProtoWithRepeatedFields {\n   repeated int64 numbers = 1;\n   repeated SimpleProto simples = 2;, @@ -15,10 +15,13 @@\n  */\n package com.google.gson.protobuf.functional;\n \n+import com.google.common.base.CaseFormat;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n import com.google.gson.protobuf.ProtoTypeAdapter;\n import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;\n+import com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat;\n import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n import com.google.protobuf.GeneratedMessage;\n@@ -32,6 +35,7 @@\n  */\n public class ProtosWithComplexAndRepeatedFieldsTest extends TestCase {\n   private Gson gson;\n+  private Gson upperCamelGson;\n \n   @Override\n   protected void setUp() throws Exception {\n@@ -43,6 +47,14 @@ protected void setUp() throws Exception {\n                     .setEnumSerialization(EnumSerialization.NUMBER)\n                     .build())\n             .create();\n+    upperCamelGson =\n+        new GsonBuilder()\n+            .registerTypeHierarchyAdapter(\n+                GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+                    .setFieldNameSerializationFormat(\n+                        CaseFormat.LOWER_UNDERSCORE, CaseFormat.UPPER_CAMEL)\n+                    .build())\n+            .create();\n   }\n \n   public void testSerializeRepeatedFields() {\n@@ -67,4 +79,23 @@ public void testDeserializeRepeatedFieldsProto() {\n     assertEquals(\"bar\", proto.getSimples(0).getMsg());\n     assertEquals(7, proto.getSimples(1).getCount());\n   }\n+\n+  public void testSerializeDifferentCaseFormat() {\n+    final ProtoWithDifferentCaseFormat proto =\n+      ProtoWithDifferentCaseFormat.newBuilder()\n+        .setAnotherField(\"foo\")\n+        .addNameThatTestsCaseFormat(\"bar\")\n+        .build();\n+    final JsonObject json = upperCamelGson.toJsonTree(proto).getAsJsonObject();\n+    assertEquals(\"foo\", json.get(\"AnotherField\").getAsString());\n+    assertEquals(\"bar\", json.get(\"NameThatTestsCaseFormat\").getAsJsonArray().get(0).getAsString());\n+  }\n+\n+  public void testDeserializeDifferentCaseFormat() {\n+    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\n+    ProtoWithDifferentCaseFormat proto =\n+      upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\n+    assertEquals(\"foo\", proto.getAnotherField());\n+    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\n+  }\n }, ", 50, 9, "\"modified, modified, modified, \"", 59], ["Igor Mysak", "fix javaDoc", "07/20/17, 10:45:46 PM", "Igor Mysak", "8728fd941dfc7724565b09a337f6160f42aa7184", ["gson/src/main/java/com/google/gson/FieldAttributes.java"], "@@ -136,9 +136,13 @@ public boolean hasModifier(int modifier) {\n   }\n \n   /**\n-   * This is exposed internally only for the removing synthetic fields from the JSON output.\n+   * Returns the value of the field represented by this {@code Field}, on\n+   * the specified object. The value is automatically wrapped in an\n+   * object if it has a primitive type.\n    *\n-   * @return true if the field is synthetic; otherwise false\n+   * @return the value of the represented field in object\n+   * {@code obj}; primitive values are wrapped in an appropriate\n+   * object before being returned\n    * @throws IllegalAccessException\n    * @throws IllegalArgumentException\n    */, ", 6, 2, "\"modified, \"", 8], ["Andrey Mogilev", "fix build errors", "07/31/17, 05:16:34 PM", "Andrey Mogilev", "ef9a3f6d79cfb9e54ccc0fd1157c0a53c05f975d", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -25,11 +25,7 @@\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Properties;\n+import java.util.*;\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;, ", 1, 5, "\"modified, \"", 6], ["Tom Magnusson", "fix typo in ConstructorConstructor exception", "08/03/17, 01:28:31 PM", "GitHub", "68cf8fdc9576815e313ffbae2d9e2604dc2f16fa", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -224,7 +224,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n           return (T) newInstance;\n         } catch (Exception e) {\n           throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \"\n-              + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n+              + \"Registering an InstanceCreator with Gson for this type may fix this problem.\"), e);\n         }\n       }\n     };, ", 1, 1, "\"modified, \"", 2], ["Warren Smith", "Use better initializer.", "08/14/17, 03:21:33 PM", "Warren Smith", "a0edf14c7025fde807c2e85385f1259ee091d6ec", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -563,8 +563,7 @@ public Gson create() {\n     factories.addAll(this.factories);\n     Collections.reverse(factories);\n \n-    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories.size());\n-    hierarchyFactories.addAll(this.hierarchyFactories);\n+    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories);\n     Collections.reverse(hierarchyFactories);\n     factories.addAll(hierarchyFactories);\n , ", 1, 2, "\"modified, \"", 3], ["Warren Smith", "Reduce visibility of GsonBuilder constructor.", "09/12/17, 12:35:10 AM", "Warren Smith", "8058ab7672509842241dc2a5ac647accc425546b", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -110,7 +110,7 @@ public GsonBuilder() {\n    *\n    * @param gson the gson instance whose configuration should by applied to a new GsonBuilder.\n    */\n-  public GsonBuilder(Gson gson) {\n+  GsonBuilder(Gson gson) {\n     this.excluder = gson.excluder;\n     this.fieldNamingPolicy = gson.fieldNamingStrategy;\n     this.instanceCreators.putAll(gson.instanceCreators);, ", 1, 1, "\"modified, \"", 2], ["Andrey Mogilev", "fix Codacy warnings", "08/19/17, 09:26:00 AM", "Andrey Mogilev", "4f582bc558db104311c2bd2a1e6b79af4264e833", ["gson/src/test/java/com/google/gson/functional/CollectionTest.java"], "@@ -394,9 +394,9 @@ public void testSetDeserialization() {\n     }\n   }\n \n-  private class BigClass { Map<String, ? extends List<SmallClass>> inBig; }\n+  private class BigClass { private Map<String, ? extends List<SmallClass>> inBig; }\n \n-  private class SmallClass { String inSmall; }\n+  private class SmallClass { private String inSmall; }\n \n   public void testIssue1107() {\n     String json = \"{\\n\" +, ", 2, 2, "\"modified, \"", 4], ["Nels Beckman", "Update fromJson Javadoc.\n\nFor the string-based fromJson() method, mention that the result will be null if the given string is empty.", "09/08/17, 05:02:56 PM", "GitHub", "4fffebc14850a3957063b2e41bfb21c10f647138", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -765,7 +765,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * @param <T> the type of the desired object\n    * @param json the string from which the object is to be deserialized\n    * @param classOfT the class of T\n-   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * classOfT\n    */, ", 2, 1, "\"modified, \"", 3], ["Warren Smith", "Dont warn on sun.misc package.", "09/15/17, 03:18:32 PM", "Warren Smith", "9f8ace9ac4c56b82eba1bbd8b44f80e042bda7e0", ["examples/android-proguard-example/proguard.cfg"], "@@ -7,7 +7,7 @@\n -keepattributes *Annotation*\n \n # Gson specific classes\n--keep class sun.misc.Unsafe { *; }\n+-dontwarn sun.misc.**\n #-keep class com.google.gson.stream.** { *; }\n \n # Application classes that will be serialized/deserialized over Gson, ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "Upgraded plugin versions", "09/20/17, 01:16:13 AM", "Inderjeet Singh", "221fbd09b1dcdd2b4a4523e268075b0cdebcd612", ["pom.xml"], "@@ -63,7 +63,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n-          <version>3.0</version>\n+          <version>3.7.0</version>\n           <configuration>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n@@ -72,7 +72,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.3</version>\n+          <version>2.10.4</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -81,7 +81,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.2.0</version>\n+          <version>3.3.0</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>\n@@ -90,12 +90,12 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-release-plugin</artifactId>\n-        <version>2.4.2</version>\n+        <version>2.5.3</version>\n         <dependencies>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9</version>\n+            <version>1.9.5</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 5, 5, "\"modified, \"", 10], ["Elliotte Rusty Harold", "Clarify handling of non-object omitted fields\n\nWhile deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.", "10/11/17, 08:14:38 PM", "GitHub", "56b84c242235389c759bf7b8e62569ca18960bb7", ["UserGuide.md"], "@@ -144,14 +144,14 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n \n-* It is perfectly fine (and recommended) to use private fields\n+* It is perfectly fine (and recommended) to use private fields.\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n-* This implementation handles nulls correctly\n-* While serializing, a null field is skipped from the output\n-* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null\n-* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n-* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n+* This implementation handles nulls correctly.\n+* While serializing, a null field is omitted from the output.\n+* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n+* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization.\n+* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.\n \n ### <a name=\"TOC-Nested-Classes-including-Inner-Classes-\"></a>Nested Classes (including Inner Classes)\n , ", 6, 6, "\"modified, \"", 12], ["michaelmkwelele", "Fix README.md grammatical error", "10/20/17, 03:57:39 AM", "michaelmkwelele", "f473251d83a86b2f60d3b5939dfa585b9bbb69ab", ["README.md"], "@@ -5,9 +5,9 @@\n [![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. \n+Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n \n-There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n+There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n \n ### Gson Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n@@ -31,9 +31,9 @@ dependencies {\n   * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n-  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n \n-Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n+Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions.\n \n ### Gson-related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`, ", 4, 4, "\"modified, \"", 8], ["michaelsavich", "Exclude module-info.java by default", "10/26/17, 09:32:39 PM", "michaelsavich", "eefb9b5e6c63bc46626082101326155fa53ac1b1", ["pom.xml"], "@@ -65,6 +65,7 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n+            <excludes>**/module-info.java</excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, ", 1, 0, "\"modified, \"", 1], ["Trung Do", "Fix a small typo", "10/31/17, 03:18:45 PM", "GitHub", "0647f73948d17e22e3453327f6c9b6cdab8f41d7", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"], "@@ -266,7 +266,7 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {\n         } catch (IllegalArgumentException e) {\n             fail = e;\n         }\n-        String input = (date == null) ? null : ('\"' + date + \"'\");\n+        String input = (date == null) ? null : ('\"' + date + '\"');\n         String msg = fail.getMessage();\n         if (msg == null || msg.isEmpty()) {\n             msg = \"(\"+fail.getClass().getName()+\")\";, ", 1, 1, "\"modified, \"", 2], ["Inderjeet Singh", "Replaced oracle JDK 7 with openJDK 7 to fix broken build.", "10/31/17, 06:40:29 PM", "Inderjeet Singh", "23d2056228f6d360ec9cc8ac1d0aad9e6137ee29", [".travis.yml"], "@@ -1,7 +1,7 @@\n language: java\n \n jdk:\n-  - oraclejdk7\n+  - openjdk7\n   - oraclejdk8\n \n install: mvn -f gson install -DskipTests=true, ", 1, 1, "\"modified, \"", 2], ["Ori Schwartz", "Use Message instead of GeneratedMessage which is specific to protobuf v2. Message is a common superclass of both GeneratedMessage and GeneratedMessageV3. Also throw an exception to notify caller that DynamicMessage is not supprorted.", "11/15/17, 03:30:19 PM", "Ori Schwartz", "b19ef12e8bf0e0f9a3c0508a3364fa00a8e29d8f", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -34,8 +34,8 @@\n import com.google.protobuf.Descriptors.EnumDescriptor;\n import com.google.protobuf.Descriptors.EnumValueDescriptor;\n import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.DynamicMessage;\n import com.google.protobuf.Extension;\n-import com.google.protobuf.GeneratedMessage;\n import com.google.protobuf.Message;\n \n import java.lang.reflect.Field;\n@@ -72,7 +72,7 @@\n  * @author Stanley Wang\n  */\n public class ProtoTypeAdapter\n-    implements JsonSerializer<GeneratedMessage>, JsonDeserializer<GeneratedMessage> {\n+    implements JsonSerializer<Message>, JsonDeserializer<Message> {\n   /**\n    * Determines how enum <u>values</u> should be serialized.\n    */\n@@ -214,7 +214,7 @@ private ProtoTypeAdapter(EnumSerialization enumSerialization,\n   }\n \n   @Override\n-  public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,\n+  public JsonElement serialize(Message src, Type typeOfSrc,\n       JsonSerializationContext context) {\n     JsonObject ret = new JsonObject();\n     final Map<FieldDescriptor, Object> fields = src.getAllFields();\n@@ -247,17 +247,21 @@ public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,\n   }\n \n   @Override\n-  public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n+  public Message deserialize(JsonElement json, Type typeOfT,\n       JsonDeserializationContext context) throws JsonParseException {\n     try {\n       JsonObject jsonObject = json.getAsJsonObject();\n       @SuppressWarnings(\"unchecked\")\n-      Class<? extends GeneratedMessage> protoClass = (Class<? extends GeneratedMessage>) typeOfT;\n+      Class<? extends Message> protoClass = (Class<? extends Message>) typeOfT;\n+\n+      if (DynamicMessage.class.isAssignableFrom(protoClass)) {\n+        throw new IllegalStateException(\"only generated messages are supported\");\n+      }\n \n       try {\n         // Invoke the ProtoClass.newBuilder() method\n-        GeneratedMessage.Builder<?> protoBuilder =\n-            (GeneratedMessage.Builder<?>) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n+        Message.Builder protoBuilder =\n+            (Message.Builder) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n \n         Descriptor protoDescriptor =\n             (Descriptor) getCachedMethod(protoClass, \"getDescriptor\").invoke(null);\n@@ -303,7 +307,7 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n             }\n           }\n         }\n-        return (GeneratedMessage) protoBuilder.build();\n+        return (Message) protoBuilder.build();\n       } catch (SecurityException e) {\n         throw new JsonParseException(e);\n       } catch (NoSuchMethodException e) {, ", 12, 8, "\"modified, \"", 20], ["anirudhramanan", "removed the method, will raise it as a separate PR", "12/07/17, 08:49:01 AM", "anirudhramanan", "d461136c31f29761325b999df20a0724ad17d8d6", ["gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/internal/Excluder.java"], "@@ -286,17 +286,6 @@ public GsonBuilder disableInnerClassSerialization() {\n     return this;\n   }\n \n-  /**\n-   * Configures Gson to include anonymous and local classes during serialization.\n-   *\n-   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   * @since 2.8.2\n-   */\n-  public GsonBuilder enableAnonymousAndLocalClassSerialization() {\n-    excluder = excluder.enableAnonymousAndLocalClassSerialization();\n-    return this;\n-  }\n-\n   /**\n    * Configures Gson to apply a specific serialization policy for {@code Long} and {@code long}\n    * objects., @@ -54,7 +54,6 @@\n   private double version = IGNORE_VERSIONS;\n   private int modifiers = Modifier.TRANSIENT | Modifier.STATIC;\n   private boolean serializeInnerClasses = true;\n-  private boolean serializeAnonymousAndLocalClasses = false;\n   private boolean requireExpose;\n   private List<ExclusionStrategy> serializationStrategies = Collections.emptyList();\n   private List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();\n@@ -88,12 +87,6 @@ public Excluder disableInnerClassSerialization() {\n     return result;\n   }\n \n-  public com.google.gson.internal.Excluder enableAnonymousAndLocalClassSerialization() {\n-    com.google.gson.internal.Excluder result = clone();\n-    result.serializeAnonymousAndLocalClasses = true;\n-    return result;\n-  }\n-\n   public Excluder excludeFieldsWithoutExposeAnnotation() {\n     Excluder result = clone();\n     result.requireExpose = true;\n@@ -180,7 +173,7 @@ public boolean excludeField(Field field, boolean serialize) {\n       return true;\n     }\n \n-    if (!serializeAnonymousAndLocalClasses && isAnonymousOrLocal(field.getType())) {\n+    if (isAnonymousOrLocal(field.getType())) {\n       return true;\n     }\n \n@@ -206,7 +199,7 @@ private boolean excludeClassChecks(Class<?> clazz) {\n           return true;\n       }\n \n-      if (!serializeAnonymousAndLocalClasses && isAnonymousOrLocal(clazz)) {\n+      if (isAnonymousOrLocal(clazz)) {\n           return true;\n       }\n , ", 2, 20, "\"modified, modified, \"", 22], ["inder123", "incorporated feedback", "12/13/17, 02:12:31 AM", "GitHub", "f2f7979da2dc24681e371067851563d474735d62", ["README.md"], "@@ -18,15 +18,15 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n ### Gson Download and Maven\n   * To use Gson in Android\n-```\n+```gradle\n dependencies {\n     compile 'com.google.code.gson:gson:2.8.2'\n }\n ```\n \n   * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n   * To use Gson with Maven\n-  ```\n+  ```xml\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>, ", 2, 2, "\"modified, \"", 4], ["Andrey Mogilev", "fix Codacy warnings", "12/20/17, 05:36:40 AM", "Andrey Mogilev", "ba732e3a72dbc6d5d78014ba055a4241d31a08a3", ["gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java"], "@@ -56,7 +56,8 @@\n    * The first of them (default US format) is used for serialization as well.\n    */\n   private final List<DateFormat> dateFormats = new ArrayList<DateFormat>();\n-  {\n+\n+  public DateTypeAdapter() {\n     dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US));\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));, ", 2, 1, "\"modified, \"", 3], ["Ori Schwartz", "avoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstance", "12/28/17, 01:47:07 AM", "Ori Schwartz", "c91e3270900c835cd11b3f931d33deaba58b943f", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -263,6 +263,9 @@ public Message deserialize(JsonElement json, Type typeOfT,\n         Message.Builder protoBuilder =\n             (Message.Builder) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n \n+        Message defaultInstance =\n+            (Message) getCachedMethod(protoClass, \"getDefaultInstance\").invoke(null);\n+\n         Descriptor protoDescriptor =\n             (Descriptor) getCachedMethod(protoClass, \"getDescriptor\").invoke(null);\n         // Call setters on all of the available fields\n@@ -300,8 +303,7 @@ public Message deserialize(JsonElement json, Type typeOfT,\n               fieldValue = context.deserialize(jsonElement, protoArrayFieldType);\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             } else {\n-              Message prototype = protoBuilder.build();\n-              Object field = prototype.getField(fieldDescriptor);\n+              Object field = defaultInstance.getField(fieldDescriptor);\n               fieldValue = context.deserialize(jsonElement, field.getClass());\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             }, ", 4, 2, "\"modified, \"", 6], ["inder123", "inlined createReflectionAccessor method", "01/03/18, 06:52:38 PM", "GitHub", "c74fa568b84ee99e6c6dface1d41be8f141ea280", ["gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java"], "@@ -33,7 +33,7 @@\n public abstract class ReflectionAccessor {\n \n   // the singleton instance, use getInstance() to obtain\n-  private static final ReflectionAccessor instance = createReflectionAccessor();\n+  private static final ReflectionAccessor instance = VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n \n   /**\n    * Does the same as {@code ao.setAccessible(true)}, but never throws\n@@ -51,8 +51,4 @@\n   public static ReflectionAccessor getInstance() {\n     return instance;\n   }\n-\n-  private static ReflectionAccessor createReflectionAccessor() {\n-    return VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n-  }\n }, ", 1, 5, "\"modified, \"", 6], ["Leon", "add FieldNamingPolicy.LOWER_CASE_WITH_DOTS", "04/02/18, 12:36:36 PM", "Leon", "9884edae51dc7d197b8512476c55c992df0c5c69", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"], "@@ -114,6 +114,29 @@\n     @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n+  },\n+\n+  /**\n+   * Using this naming policy with Gson will modify the Java Field name from its camel cased\n+   * form to a lower case field name where each word is separated by a dot (.).\n+   *\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <ul>\n+   *   <li>someFieldName ---> some.field.name</li>\n+   *   <li>_someFieldName ---> _some.field.name</li>\n+   *   <li>aStringField ---> a.string.field</li>\n+   *   <li>aURL ---> a.u.r.l</li>\n+   * </ul>\n+   * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n+   * expressions. This requires that a field named with dots is always accessed as a quoted\n+   * property like {@code myobject['my.field']}. Accessing it as an object field\n+   * {@code myobject.my.field} will result in an unintended javascript expression.\n+   * @since 2.8\n+   */\n+  LOWER_CASE_WITH_DOTS() {\n+    @Override public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \".\").toLowerCase(Locale.ENGLISH);\n+    }\n   };\n \n   /**, @@ -63,6 +63,14 @@ public void testGsonWithLowerCaseDashPolicySerialization() {\n         + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicySerialization() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    StringWrapper target = new StringWrapper(\"blah\");\n+    assertEquals(\"{\\\"some.constant.string.instance.field\\\":\\\"\"\n+          + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n+  }\n+\n+\n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n     String target = \"{\\\"some-constant-string-instance-field\\\":\\\"someValue\\\"}\";, ", 31, 0, "\"modified, modified, \"", 31], ["inder123", "Merge branch 'master' into master", "05/09/18, 08:11:43 PM", "GitHub", "354742088597d78a14672c56325ddb66589f37ad", [".gitignore", "CHANGELOG.md", "README.md", "ReleaseProcess.md", "UserGuide.md", "build.gradle", "examples/android-proguard-example/AndroidManifest.xml", "gradle/wrapper/gradle-wrapper.jar", "gradle/wrapper/gradle-wrapper.properties", "gradlew", "gradlew.bat", "gson/build.gradle", "gson/pom.xml", "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonParser.java", "gson/src/main/java/com/google/gson/internal/JavaVersion.java", "gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/main/java/com/google/gson/util/VersionUtils.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/GsonBuilderTest.java", "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java", "gson/src/test/java/com/google/gson/functional/ObjectTest.java", "gson/src/test/java/com/google/gson/internal/JavaVersionTest.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java", "pom.xml", "settings.gradle"], "@@ -13,4 +13,8 @@ release.properties\n *.iws\n classes\n \n+.gradle\n+local.properties\n+build\n+\n .DS_Store, @@ -1,6 +1,17 @@\n Change Log\n ==========\n \n+## Version 2.8.4\n+_2018-05-01_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.3...gson-parent-2.8.4)\n+ * Added a new FieldNamingPolicy, `LOWER_CASE_WITH_DOTS` that mapps JSON name `someFieldName` to `some.field.name`\n+ * Fixed issue https://github.com/google/gson/issues/1305 by removing compile/runtime dependency on `sun.misc.Unsafe`\n+\n+## Version 2.8.3\n+_2018-04-27_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.2...gson-parent-2.8.3)\n+ * Added a new API, `GsonBuilder.newBuilder()` that clones the current builder\n+ * Preserving DateFormatter behavior on JDK 9\n+ * Numerous other bugfixes\n+\n ## Version 2.8.2\n _2017-09-19_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.1...gson-parent-2.8.2)\n  * Introduced a new API, `JsonElement.deepCopy()`, @@ -20,7 +20,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n   * To use Gson in Android\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.2'\n+    implementation 'com.google.code.gson:gson:2.8.4'\n }\n ```\n \n@@ -30,7 +30,7 @@ dependencies {\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>\n-    <version>2.8.2</version>\n+    <version>2.8.4</version>\n </dependency>\n ```\n , @@ -1,51 +1,19 @@\n-#Gson Release Process\n+# Gson Release Process\n \n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n 1. (obsolete step) Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 1. Ensure all changelists are code-reviewed and have +1\n-1. (obsolete step) Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n 1. `cd gson` to the parent directory; ensure there are no open files and all changes are committed.\n 1. Run `mvn release:clean`\n 1. Do a dry run: `mvn release:prepare -DdryRun=true`\n 1. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine.\n-  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n-1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n-\n-   ```bash\n-   mvn -s /home/<username>/.m2/settings.xml release:perform\n-   ```\n-\n-1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n-\n-  ```bash\n-  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n-  cd /tmp/1.7.2\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2-javadoc.jar \\\n-      -Dclassifier=javadoc\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2-sources.jar \\\n-      -Dclassifier=sources\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2.jar\n-  ```\n-\n-1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+   * Answer questions: usually the defaults are fine.\n+   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+1. Complete the release: `mvn release:perform`\n+1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson.\n+1. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n \n 1. Update the version in the [Using Gson with Maven2 page](https://github.com/google/gson/blob/master/UserGuide.md#TOC-Gson-With-Maven)\n@@ -58,16 +26,16 @@ The following is a step-by-step procedure for releasing a new version of Google-\n This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n-2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n-3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n-4. Now for deploying a snapshot repository, use `mvn deploy`.\n+1. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n+1. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n+1. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n \n Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n \n 1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n-2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n+1. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n , @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    compile 'com.google.code.gson:gson:2.8.2'\n+    compile 'com.google.code.gson:gson:2.8.4'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.2</version>\n+      <version>2.8.4</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, @@ -0,0 +1,12 @@\n+buildscript {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+, None, None, @@ -0,0 +1,6 @@\n+#Fri Apr 27 17:41:01 PDT 2018\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip, @@ -0,0 +1,172 @@\n+#!/usr/bin/env sh\n+\n+##############################################################################\n+##\n+##  Gradle start up script for UN*X\n+##\n+##############################################################################\n+\n+# Attempt to set APP_HOME\n+# Resolve links: $0 may be a link\n+PRG=\"$0\"\n+# Need this for relative symlinks.\n+while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+        PRG=\"$link\"\n+    else\n+        PRG=`dirname \"$PRG\"`\"/$link\"\n+    fi\n+done\n+SAVED=\"`pwd`\"\n+cd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\n+APP_HOME=\"`pwd -P`\"\n+cd \"$SAVED\" >/dev/null\n+\n+APP_NAME=\"Gradle\"\n+APP_BASE_NAME=`basename \"$0\"`\n+\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS=\"\"\n+\n+# Use the maximum available, or set MAX_FD != -1 to use that value.\n+MAX_FD=\"maximum\"\n+\n+warn () {\n+    echo \"$*\"\n+}\n+\n+die () {\n+    echo\n+    echo \"$*\"\n+    echo\n+    exit 1\n+}\n+\n+# OS specific support (must be 'true' or 'false').\n+cygwin=false\n+msys=false\n+darwin=false\n+nonstop=false\n+case \"`uname`\" in\n+  CYGWIN* )\n+    cygwin=true\n+    ;;\n+  Darwin* )\n+    darwin=true\n+    ;;\n+  MINGW* )\n+    msys=true\n+    ;;\n+  NONSTOP* )\n+    nonstop=true\n+    ;;\n+esac\n+\n+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n+\n+# Determine the Java command to use to start the JVM.\n+if [ -n \"$JAVA_HOME\" ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+        # IBM's JDK on AIX uses strange locations for the executables\n+        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+        JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+    if [ ! -x \"$JAVACMD\" ] ; then\n+        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+    fi\n+else\n+    JAVACMD=\"java\"\n+    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+fi\n+\n+# Increase the maximum file descriptors if we can.\n+if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n+    MAX_FD_LIMIT=`ulimit -H -n`\n+    if [ $? -eq 0 ] ; then\n+        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n+            MAX_FD=\"$MAX_FD_LIMIT\"\n+        fi\n+        ulimit -n $MAX_FD\n+        if [ $? -ne 0 ] ; then\n+            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n+        fi\n+    else\n+        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n+    fi\n+fi\n+\n+# For Darwin, add options to specify how the application appears in the dock\n+if $darwin; then\n+    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin ; then\n+    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n+    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n+\n+    # We build the pattern for arguments to be converted via cygpath\n+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n+    SEP=\"\"\n+    for dir in $ROOTDIRSRAW ; do\n+        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n+        SEP=\"|\"\n+    done\n+    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n+    # Add a user-defined pattern to the cygpath arguments\n+    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n+        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n+    fi\n+    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n+    i=0\n+    for arg in \"$@\" ; do\n+        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n+        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n+\n+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n+            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n+        else\n+            eval `echo args$i`=\"\\\"$arg\\\"\"\n+        fi\n+        i=$((i+1))\n+    done\n+    case $i in\n+        (0) set -- ;;\n+        (1) set -- \"$args0\" ;;\n+        (2) set -- \"$args0\" \"$args1\" ;;\n+        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+    esac\n+fi\n+\n+# Escape application args\n+save () {\n+    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n+    echo \" \"\n+}\n+APP_ARGS=$(save \"$@\")\n+\n+# Collect all arguments for the java command, following the shell quoting and substitution rules\n+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n+\n+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\n+if [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n+  cd \"$(dirname \"$0\")\"\n+fi\n+\n+exec \"$JAVACMD\" \"$@\", @@ -0,0 +1,84 @@\n+@if \"%DEBUG%\" == \"\" @echo off\n+@rem ##########################################################################\n+@rem\n+@rem  Gradle startup script for Windows\n+@rem\n+@rem ##########################################################################\n+\n+@rem Set local scope for the variables with windows NT shell\n+if \"%OS%\"==\"Windows_NT\" setlocal\n+\n+set DIRNAME=%~dp0\n+if \"%DIRNAME%\" == \"\" set DIRNAME=.\n+set APP_BASE_NAME=%~n0\n+set APP_HOME=%DIRNAME%\n+\n+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+set DEFAULT_JVM_OPTS=\n+\n+@rem Find java.exe\n+if defined JAVA_HOME goto findJavaFromJavaHome\n+\n+set JAVA_EXE=java.exe\n+%JAVA_EXE% -version >NUL 2>&1\n+if \"%ERRORLEVEL%\" == \"0\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:findJavaFromJavaHome\n+set JAVA_HOME=%JAVA_HOME:\"=%\n+set JAVA_EXE=%JAVA_HOME%/bin/java.exe\n+\n+if exist \"%JAVA_EXE%\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:init\n+@rem Get command-line arguments, handling Windows variants\n+\n+if not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n+\n+:win9xME_args\n+@rem Slurp the command line arguments.\n+set CMD_LINE_ARGS=\n+set _SKIP=2\n+\n+:win9xME_args_slurp\n+if \"x%~1\" == \"x\" goto execute\n+\n+set CMD_LINE_ARGS=%*\n+\n+:execute\n+@rem Setup the command line\n+\n+set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n+\n+@rem Execute Gradle\n+\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n+\n+:end\n+@rem End local scope for the variables with windows NT shell\n+if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n+\n+:fail\n+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\n+rem the _cmd.exe /c_ return code!\n+if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\n+exit /b 1\n+\n+:mainEnd\n+if \"%OS%\"==\"Windows_NT\" endlocal\n+\n+:omega, @@ -0,0 +1,13 @@\n+apply plugin: 'java'\n+apply plugin: 'maven'\n+\n+group = 'com.google.code.gson'\n+version = '2.8.4-SNAPSHOT'\n+\n+sourceCompatibility = 1.6\n+targetCompatibility = 1.6\n+\n+sourceSets.main.java.exclude(\"**/module-info.java\")\n+dependencies {\n+    testCompile \"junit:junit:4.12\"\n+}, @@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.8.3-SNAPSHOT</version>\n+    <version>2.8.5-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -27,12 +27,12 @@\n import java.util.List;\n import java.util.Locale;\n \n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.VersionUtils;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and\n@@ -59,7 +59,7 @@\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n   }\n@@ -78,7 +78,7 @@\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateInstance(style));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateFormat(style));\n     }\n   }\n@@ -93,7 +93,7 @@ public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(dateStyle, timeStyle));\n     }\n   }, @@ -114,6 +114,29 @@\n     @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n+  },\n+\n+  /**\n+   * Using this naming policy with Gson will modify the Java Field name from its camel cased\n+   * form to a lower case field name where each word is separated by a dot (.).\n+   *\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <ul>\n+   *   <li>someFieldName ---> some.field.name</li>\n+   *   <li>_someFieldName ---> _some.field.name</li>\n+   *   <li>aStringField ---> a.string.field</li>\n+   *   <li>aURL ---> a.u.r.l</li>\n+   * </ul>\n+   * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n+   * expressions. This requires that a field named with dots is always accessed as a quoted\n+   * property like {@code myobject['my.field']}. Accessing it as an object field\n+   * {@code myobject.my.field} will result in an unintended javascript expression.\n+   * @since 2.8\n+   */\n+  LOWER_CASE_WITH_DOTS() {\n+    @Override public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \".\").toLowerCase(Locale.ENGLISH);\n+    }\n   };\n \n   /**, None, None, @@ -0,0 +1,90 @@\n+/*\n+ * Copyright (C) 2017 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal;\n+\n+/**\n+ * Utility to check the major Java version of the current JVM.\n+ */\n+public final class JavaVersion {\n+  // Oracle defines naming conventions at http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html\n+  // However, many alternate implementations differ. For example, Debian used 9-debian as the version string\n+\n+  private static final int majorJavaVersion = determineMajorJavaVersion();\n+\n+  private static int determineMajorJavaVersion() {\n+    String javaVersion = System.getProperty(\"java.version\");\n+    return getMajorJavaVersion(javaVersion);\n+  }\n+\n+  // Visible for testing only\n+  static int getMajorJavaVersion(String javaVersion) {\n+    int version = parseDotted(javaVersion);\n+    if (version == -1) {\n+      version = extractBeginningInt(javaVersion);\n+    }\n+    if (version == -1) {\n+      return 6;  // Choose minimum supported JDK version as default\n+    }\n+    return version;\n+  }\n+\n+  // Parses both legacy 1.8 style and newer 9.0.4 style \n+  private static int parseDotted(String javaVersion) {\n+    try {\n+      String[] parts = javaVersion.split(\"[._]\");\n+      int firstVer = Integer.parseInt(parts[0]);\n+      if (firstVer == 1 && parts.length > 1) {\n+        return Integer.parseInt(parts[1]);\n+      } else {\n+        return firstVer;\n+      }\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  private static int extractBeginningInt(String javaVersion) {\n+    try {\n+      StringBuilder num = new StringBuilder();\n+      for (int i = 0; i < javaVersion.length(); ++i) {\n+        char c = javaVersion.charAt(i);\n+        if (Character.isDigit(c)) {\n+          num.append(c);\n+        } else {\n+          break;\n+        }\n+      }\n+      return Integer.parseInt(num.toString());\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\n+   */\n+  public static int getMajorJavaVersion() {\n+    return majorJavaVersion;\n+  }\n+\n+  /**\n+   * @return {@code true} if the application is running on Java 9 or later; and {@code false} otherwise.\n+   */\n+  public static boolean isJava9OrLater() {\n+    return majorJavaVersion >= 9;\n+  }\n+}, @@ -20,13 +20,13 @@\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.VersionUtils;\n \n import java.io.IOException;\n import java.text.DateFormat;\n@@ -62,7 +62,7 @@ public DateTypeAdapter() {\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n   }, @@ -25,12 +25,9 @@\n  */\n final class PreJava9ReflectionAccessor extends ReflectionAccessor {\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n     ao.setAccessible(true);\n   }\n-\n }, @@ -15,10 +15,10 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import com.google.gson.util.VersionUtils;\n-\n import java.lang.reflect.AccessibleObject;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Provides a replacement for {@link AccessibleObject#setAccessible(boolean)}, which may be used to\n  * avoid reflective access issues appeared in Java 9, like {@link java.lang.reflect.InaccessibleObjectException}\n@@ -33,7 +33,7 @@\n public abstract class ReflectionAccessor {\n \n   // the singleton instance, use getInstance() to obtain\n-  private static final ReflectionAccessor instance = VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n+  private static final ReflectionAccessor instance = JavaVersion.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n \n   /**\n    * Does the same as {@code ao.setAccessible(true)}, but never throws, @@ -15,40 +15,63 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import sun.misc.Unsafe;\n-\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import com.google.gson.JsonIOException;\n \n /**\n  * An implementation of {@link ReflectionAccessor} based on {@link Unsafe}.\n  * <p>\n  * NOTE: This implementation is designed for Java 9. Although it should work with earlier Java releases, it is better to\n  * use {@link PreJava9ReflectionAccessor} for them.\n  */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n final class UnsafeReflectionAccessor extends ReflectionAccessor {\n \n-  private final Unsafe theUnsafe = getUnsafeInstance();\n+  private static Class unsafeClass;\n+  private final Object theUnsafe = getUnsafeInstance();\n   private final Field overrideField = getOverrideField();\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n+    boolean success = makeAccessibleWithUnsafe(ao);\n+    if (!success) {\n+      try {\n+        // unsafe couldn't be found, so try using accessible anyway\n+        ao.setAccessible(true);\n+      } catch (SecurityException e) {\n+        throw new JsonIOException(\"Gson couldn't modify fields for \" + ao\n+          + \"\\nand sun.misc.Unsafe not found.\\nEither write a custom type adapter,\"\n+          + \" or make fields accessible, or include sun.misc.Unsafe.\", e);\n+      }\n+    }\n+  }\n+\n+  // Visible for testing only\n+  boolean makeAccessibleWithUnsafe(AccessibleObject ao) {\n     if (theUnsafe != null && overrideField != null) {\n-      long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n-      theUnsafe.putBoolean(ao, overrideOffset, true);\n+      try {\n+        Method method = unsafeClass.getMethod(\"objectFieldOffset\", Field.class);\n+        long overrideOffset = (Long) method.invoke(theUnsafe, overrideField);  // long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n+        Method putBooleanMethod = unsafeClass.getMethod(\"putBoolean\",  Object.class, long.class, boolean.class);\n+        putBooleanMethod.invoke(theUnsafe, ao, overrideOffset, true); // theUnsafe.putBoolean(ao, overrideOffset, true);\n+        return true;\n+      } catch (Exception ignored) { // do nothing\n+      }\n     }\n+    return false;\n   }\n \n-  private static Unsafe getUnsafeInstance() {\n+  private static Object getUnsafeInstance() {\n     try {\n-      Field unsafeField = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+      unsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+      Field unsafeField = unsafeClass.getDeclaredField(\"theUnsafe\");\n       unsafeField.setAccessible(true);\n-      return (Unsafe) unsafeField.get(null);\n+      return unsafeField.get(null);\n     } catch (Exception e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }\n@@ -57,7 +80,6 @@ private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n     } catch (NoSuchFieldException e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }, @@ -1,49 +0,0 @@\n-/*\n- * Copyright (C) 2017 The Gson authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.gson.util;\n-\n-/**\n- * Utility to check the major Java version of the current JVM.\n- */\n-public class VersionUtils {\n-\n-  private static final int majorJavaVersion = determineMajorJavaVersion();\n-\n-  private static int determineMajorJavaVersion() {\n-    String[] parts = System.getProperty(\"java.version\").split(\"[._]\");\n-    int firstVer = Integer.parseInt(parts[0]);\n-    if (firstVer == 1 && parts.length > 1) {\n-      return Integer.parseInt(parts[1]);\n-    } else {\n-      return firstVer;\n-    }\n-  }\n-\n-  /**\n-   * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\n-   */\n-  public static int getMajorJavaVersion() {\n-    return majorJavaVersion;\n-  }\n-\n-  /**\n-   * @return {@code true} if the application is running on Java 9 or later; and {@code false} otherwise.\n-   */\n-  public static boolean isJava9OrLater() {\n-    return majorJavaVersion >= 9;\n-  }\n-}, @@ -23,7 +23,8 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import com.google.gson.util.VersionUtils;\n+import com.google.gson.internal.JavaVersion;\n+\n import junit.framework.TestCase;\n \n /**\n@@ -47,9 +48,9 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(locale);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \", \" : \" \";\n-      String afterYearLongSep = VersionUtils.isJava9OrLater() ? \" at \" : \" \";\n-      String utcFull = VersionUtils.isJava9OrLater() ? \"Coordinated Universal Time\" : \"UTC\";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \", \" : \" \";\n+      String afterYearLongSep = JavaVersion.isJava9OrLater() ? \" at \" : \" \";\n+      String utcFull = JavaVersion.isJava9OrLater() ? \"Coordinated Universal Time\" : \"UTC\";\n       assertFormatted(String.format(\"Jan 1, 1970%s12:00:00 AM\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n@@ -75,7 +76,7 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.FRANCE);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \" \u00e0 \" : \" \";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \" \u00e0 \" : \" \";\n       assertParsed(String.format(\"1 janv. 1970%s00:00:00\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n@@ -87,7 +88,7 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n-      assertParsed(VersionUtils.isJava9OrLater() ?\n+      assertParsed(JavaVersion.isJava9OrLater() ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n@@ -127,7 +128,7 @@ public void testFormatUsesDefaultTimezone() throws Exception {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \", \" : \" \";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \", \" : \" \";\n       assertFormatted(String.format(\"Dec 31, 1969%s4:00:00 PM\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));, None, None, @@ -27,6 +27,7 @@\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n@@ -56,7 +57,6 @@\n import java.util.TreeSet;\n import java.util.UUID;\n \n-import com.google.gson.util.VersionUtils;\n import junit.framework.TestCase;\n \n /**\n@@ -330,7 +330,7 @@ public void testBitSetDeserialization() throws Exception {\n   public void testDefaultDateSerialization() {\n     Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Sep 11, 2011, 10:55:03 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n@@ -375,7 +375,7 @@ public void testDefaultJavaSqlDateDeserialization() {\n   public void testDefaultJavaSqlTimestampSerialization() {\n     Timestamp now = new java.sql.Timestamp(1259875082000L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Dec 3, 2009, 1:18:02 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Dec 3, 2009 1:18:02 PM\\\"\", json);\n@@ -405,7 +405,7 @@ public void testDefaultDateSerializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n     Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Sep 11, 2011, 10:55:03 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);, None, @@ -63,6 +63,20 @@ public void testGsonWithLowerCaseDashPolicySerialization() {\n         + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicySerialization() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    StringWrapper target = new StringWrapper(\"blah\");\n+    assertEquals(\"{\\\"some.constant.string.instance.field\\\":\\\"\"\n+          + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n+  }\n+\n+  public void testGsonWithLowerCaseDotPolicyDeserialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    String target = \"{\\\"some.constant.string.instance.field\\\":\\\"someValue\\\"}\";\n+    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n+    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n+  }\n+\n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n     String target = \"{\\\"some-constant-string-instance-field\\\":\\\"someValue\\\"}\";, None, @@ -33,6 +33,7 @@\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-import com.google.gson.util.VersionUtils;\n import junit.framework.TestCase;\n \n /**\n@@ -484,7 +484,7 @@ public void testSingletonLists() {\n   public void testDateAsMapObjectField() {\n     HasObjectMap a = new HasObjectMap();\n     a.map.put(\"date\", new Date(0));\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969, 4:00:00 PM\\\"}}\", gson.toJson(a));\n     } else {\n       assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969 4:00:00 PM\\\"}}\", gson.toJson(a));, @@ -0,0 +1,81 @@\n+/*\n+ * Copyright (C) 2017 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.google.gson.internal.JavaVersion;\n+\n+/**\n+ * Unit and functional tests for {@link JavaVersion}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class JavaVersionTest {\n+  // Borrowed some of test strings from https://github.com/prestodb/presto/blob/master/presto-main/src/test/java/com/facebook/presto/server/TestJavaVersion.java\n+\n+  @Test\n+  public void testGetMajorJavaVersion() {\n+    JavaVersion.getMajorJavaVersion();\n+  }\n+\n+  @Test\n+  public void testJava6() {\n+    assertEquals(6, JavaVersion.getMajorJavaVersion(\"1.6.0\")); // http://www.oracle.com/technetwork/java/javase/version-6-141920.html\n+  }\n+\n+  @Test\n+  public void testJava7() {\n+    assertEquals(7, JavaVersion.getMajorJavaVersion(\"1.7.0\")); // http://www.oracle.com/technetwork/java/javase/jdk7-naming-418744.html\n+  }\n+\n+  @Test\n+  public void testJava8() {\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_131\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_60-ea\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_111-internal\"));\n+\n+    // openjdk8 per https://github.com/AdoptOpenJDK/openjdk-build/issues/93\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0-internal\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_131-adoptopenjdk\"));\n+  }\n+\n+  @Test\n+  public void testJava9() {\n+    // Legacy style\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.0.4\")); // Oracle JDK 9\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9-Debian\")); // Debian as reported in https://github.com/google/gson/issues/1310\n+    // New style\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9-ea+19\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9+100\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.0.1+20\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.1.1+20\"));\n+  }\n+\n+  @Test\n+  public void testJava10() {\n+    assertEquals(10, JavaVersion.getMajorJavaVersion(\"10.0.1\")); // Oracle JDK 10.0.1\n+  }\n+\n+  @Test\n+  public void testUnknownVersionFormat() {\n+    assertEquals(6, JavaVersion.getMajorJavaVersion(\"Java9\")); // unknown format\n+  }\n+}, @@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.reflect;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link UnsafeReflectionAccessor}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class UnsafeReflectionAccessorTest {\n+\n+  @Test\n+  public void testMakeAccessibleWithUnsafe() throws Exception {\n+    UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+    Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+    try {\n+      boolean success = accessor.makeAccessibleWithUnsafe(field);\n+      assertTrue(success);\n+    } catch (Exception e) {\n+      fail(\"Unsafe didn't work on the JDK\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithPrivateFinalFields {\n+    private final String a;\n+    public ClassWithPrivateFinalFields(String a) {\n+      this.a = a;\n+    }\n+  }\n+}, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.8.3-SNAPSHOT</version>\n+  <version>2.8.5-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>\n@@ -65,7 +65,9 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n-            <excludes>**/module-info.java</excludes>\n+            <excludes>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, @@ -0,0 +1 @@\n+include ':gson', ", 640, 137, "\"modified, modified, modified, modified, modified, added, modified, added, added, added, added, added, modified, modified, modified, modified, modified, added, modified, modified, modified, modified, removed, modified, modified, modified, modified, modified, modified, modified, modified, added, added, modified, added, \"", 777], ["JoonHo Park", "Format ReleaseProcess.md using GFM\n\nChanges\n- Space in `h1` header\n- Indent code block & nested bullets properly with 3 spaces\n- Unify numbered list indicator to `1.`", "04/13/18, 04:45:33 AM", "JoonHo Park", "33a29816f44fe83af62a654ff99ce6a60a6eb3ac", ["ReleaseProcess.md"], "@@ -1,4 +1,4 @@\n-#Gson Release Process\n+# Gson Release Process\n \n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n@@ -10,8 +10,8 @@ The following is a step-by-step procedure for releasing a new version of Google-\n 1. Run `mvn release:clean`\n 1. Do a dry run: `mvn release:prepare -DdryRun=true`\n 1. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine.\n-  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+   * Answer questions: usually the defaults are fine.\n+   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n 1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n \n    ```bash\n@@ -20,30 +20,30 @@ The following is a step-by-step procedure for releasing a new version of Google-\n \n 1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n \n-  ```bash\n-  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n-  cd /tmp/1.7.2\n+   ```bash\n+   cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n+   cd /tmp/1.7.2\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2-javadoc.jar \\\n       -Dclassifier=javadoc\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2-sources.jar \\\n       -Dclassifier=sources\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2.jar\n-  ```\n+   ```\n \n 1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n@@ -58,16 +58,16 @@ The following is a step-by-step procedure for releasing a new version of Google-\n This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n-2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n-3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n-4. Now for deploying a snapshot repository, use `mvn deploy`.\n+1. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n+1. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n+1. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n \n Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n \n 1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n-2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n+1. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n , ", 14, 14, "\"modified, \"", 28], ["Lyubomyr Shaydariv", "Removed the executable flag from clearly text files", "04/26/18, 07:23:15 AM", "Lyubomyr Shaydariv", "bdea5b9e99012eacf1a7f35f5f23733c9caf8a89", ["examples/android-proguard-example/AndroidManifest.xml", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonParser.java", "gson/src/test/java/com/google/gson/GsonBuilderTest.java", "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java"], "None, None, None, None, None, None, None, ", 0, 0, "\"modified, modified, modified, modified, modified, modified, modified, \"", 0], ["Inderjeet Singh", "Fixed excludes section in maven-compiler-plugin", "04/27/18, 10:29:53 PM", "Inderjeet Singh", "8f68101979309d50d0b3aeb6106d282be17ea740", ["pom.xml"], "@@ -65,7 +65,9 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n-            <excludes>**/module-info.java</excludes>\n+            <excludes>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, ", 3, 1, "\"modified, \"", 4], ["Inderjeet Singh", "Added gradle/Idea support", "04/28/18, 01:08:23 AM", "Inderjeet Singh", "a5d6683171c05ea8db1f80b268100d78614f4aa2", [".gitignore", "build.gradle", "gradle/wrapper/gradle-wrapper.jar", "gradle/wrapper/gradle-wrapper.properties", "gradlew", "gradlew.bat", "gson/build.gradle", "settings.gradle"], "@@ -13,4 +13,8 @@ release.properties\n *.iws\n classes\n \n+.gradle\n+local.properties\n+build\n+\n .DS_Store, @@ -0,0 +1,12 @@\n+buildscript {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+, None, @@ -0,0 +1,6 @@\n+#Fri Apr 27 17:41:01 PDT 2018\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip, @@ -0,0 +1,172 @@\n+#!/usr/bin/env sh\n+\n+##############################################################################\n+##\n+##  Gradle start up script for UN*X\n+##\n+##############################################################################\n+\n+# Attempt to set APP_HOME\n+# Resolve links: $0 may be a link\n+PRG=\"$0\"\n+# Need this for relative symlinks.\n+while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+        PRG=\"$link\"\n+    else\n+        PRG=`dirname \"$PRG\"`\"/$link\"\n+    fi\n+done\n+SAVED=\"`pwd`\"\n+cd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\n+APP_HOME=\"`pwd -P`\"\n+cd \"$SAVED\" >/dev/null\n+\n+APP_NAME=\"Gradle\"\n+APP_BASE_NAME=`basename \"$0\"`\n+\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS=\"\"\n+\n+# Use the maximum available, or set MAX_FD != -1 to use that value.\n+MAX_FD=\"maximum\"\n+\n+warn () {\n+    echo \"$*\"\n+}\n+\n+die () {\n+    echo\n+    echo \"$*\"\n+    echo\n+    exit 1\n+}\n+\n+# OS specific support (must be 'true' or 'false').\n+cygwin=false\n+msys=false\n+darwin=false\n+nonstop=false\n+case \"`uname`\" in\n+  CYGWIN* )\n+    cygwin=true\n+    ;;\n+  Darwin* )\n+    darwin=true\n+    ;;\n+  MINGW* )\n+    msys=true\n+    ;;\n+  NONSTOP* )\n+    nonstop=true\n+    ;;\n+esac\n+\n+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n+\n+# Determine the Java command to use to start the JVM.\n+if [ -n \"$JAVA_HOME\" ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+        # IBM's JDK on AIX uses strange locations for the executables\n+        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+        JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+    if [ ! -x \"$JAVACMD\" ] ; then\n+        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+    fi\n+else\n+    JAVACMD=\"java\"\n+    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+fi\n+\n+# Increase the maximum file descriptors if we can.\n+if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n+    MAX_FD_LIMIT=`ulimit -H -n`\n+    if [ $? -eq 0 ] ; then\n+        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n+            MAX_FD=\"$MAX_FD_LIMIT\"\n+        fi\n+        ulimit -n $MAX_FD\n+        if [ $? -ne 0 ] ; then\n+            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n+        fi\n+    else\n+        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n+    fi\n+fi\n+\n+# For Darwin, add options to specify how the application appears in the dock\n+if $darwin; then\n+    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin ; then\n+    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n+    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n+\n+    # We build the pattern for arguments to be converted via cygpath\n+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n+    SEP=\"\"\n+    for dir in $ROOTDIRSRAW ; do\n+        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n+        SEP=\"|\"\n+    done\n+    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n+    # Add a user-defined pattern to the cygpath arguments\n+    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n+        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n+    fi\n+    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n+    i=0\n+    for arg in \"$@\" ; do\n+        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n+        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n+\n+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n+            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n+        else\n+            eval `echo args$i`=\"\\\"$arg\\\"\"\n+        fi\n+        i=$((i+1))\n+    done\n+    case $i in\n+        (0) set -- ;;\n+        (1) set -- \"$args0\" ;;\n+        (2) set -- \"$args0\" \"$args1\" ;;\n+        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+    esac\n+fi\n+\n+# Escape application args\n+save () {\n+    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n+    echo \" \"\n+}\n+APP_ARGS=$(save \"$@\")\n+\n+# Collect all arguments for the java command, following the shell quoting and substitution rules\n+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n+\n+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\n+if [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n+  cd \"$(dirname \"$0\")\"\n+fi\n+\n+exec \"$JAVACMD\" \"$@\", @@ -0,0 +1,84 @@\n+@if \"%DEBUG%\" == \"\" @echo off\n+@rem ##########################################################################\n+@rem\n+@rem  Gradle startup script for Windows\n+@rem\n+@rem ##########################################################################\n+\n+@rem Set local scope for the variables with windows NT shell\n+if \"%OS%\"==\"Windows_NT\" setlocal\n+\n+set DIRNAME=%~dp0\n+if \"%DIRNAME%\" == \"\" set DIRNAME=.\n+set APP_BASE_NAME=%~n0\n+set APP_HOME=%DIRNAME%\n+\n+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+set DEFAULT_JVM_OPTS=\n+\n+@rem Find java.exe\n+if defined JAVA_HOME goto findJavaFromJavaHome\n+\n+set JAVA_EXE=java.exe\n+%JAVA_EXE% -version >NUL 2>&1\n+if \"%ERRORLEVEL%\" == \"0\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:findJavaFromJavaHome\n+set JAVA_HOME=%JAVA_HOME:\"=%\n+set JAVA_EXE=%JAVA_HOME%/bin/java.exe\n+\n+if exist \"%JAVA_EXE%\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:init\n+@rem Get command-line arguments, handling Windows variants\n+\n+if not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n+\n+:win9xME_args\n+@rem Slurp the command line arguments.\n+set CMD_LINE_ARGS=\n+set _SKIP=2\n+\n+:win9xME_args_slurp\n+if \"x%~1\" == \"x\" goto execute\n+\n+set CMD_LINE_ARGS=%*\n+\n+:execute\n+@rem Setup the command line\n+\n+set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n+\n+@rem Execute Gradle\n+\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n+\n+:end\n+@rem End local scope for the variables with windows NT shell\n+if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n+\n+:fail\n+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\n+rem the _cmd.exe /c_ return code!\n+if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\n+exit /b 1\n+\n+:mainEnd\n+if \"%OS%\"==\"Windows_NT\" endlocal\n+\n+:omega, @@ -0,0 +1,13 @@\n+apply plugin: 'java'\n+apply plugin: 'maven'\n+\n+group = 'com.google.code.gson'\n+version = '2.8.4-SNAPSHOT'\n+\n+sourceCompatibility = 1.6\n+targetCompatibility = 1.6\n+\n+sourceSets.main.java.exclude(\"**/module-info.java\")\n+dependencies {\n+    testCompile \"junit:junit:4.12\"\n+}, @@ -0,0 +1 @@\n+include ':gson', ", 292, 0, "\"modified, added, added, added, added, added, added, added, \"", 292], ["Inderjeet Singh", "Added a test for deserialization of fields using lowercase-dot naming policy", "04/28/18, 01:54:07 AM", "Inderjeet Singh", "9664a3a2f0907fc2a1673817b91667b771d31f34", ["gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"], "@@ -70,6 +70,12 @@ public void testGsonWithLowerCaseDotPolicySerialization() {\n           + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicyDeserialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    String target = \"{\\\"some.constant.string.instance.field\\\":\\\"someValue\\\"}\";\n+    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n+    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n+  }\n \n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();, ", 6, 0, "\"modified, \"", 6], ["Inderjeet Singh", "Using sun.misc.Unsafe only through reflection to avoid binary dependency\n\nIf sun.misc.Unsafe not found on Java 9, try field.setAccessible\nAlso removed exception traces when sun.misc.Unsafe or override are not found", "04/30/18, 10:23:28 PM", "Inderjeet Singh", "ce4ab63bd960c79ec6529cba446fbb5d7773d6d7", ["gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java"], "@@ -25,12 +25,9 @@\n  */\n final class PreJava9ReflectionAccessor extends ReflectionAccessor {\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n     ao.setAccessible(true);\n   }\n-\n }, @@ -15,40 +15,63 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import sun.misc.Unsafe;\n-\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import com.google.gson.JsonIOException;\n \n /**\n  * An implementation of {@link ReflectionAccessor} based on {@link Unsafe}.\n  * <p>\n  * NOTE: This implementation is designed for Java 9. Although it should work with earlier Java releases, it is better to\n  * use {@link PreJava9ReflectionAccessor} for them.\n  */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n final class UnsafeReflectionAccessor extends ReflectionAccessor {\n \n-  private final Unsafe theUnsafe = getUnsafeInstance();\n+  private static Class unsafeClass;\n+  private final Object theUnsafe = getUnsafeInstance();\n   private final Field overrideField = getOverrideField();\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n+    boolean success = makeAccessibleWithUnsafe(ao);\n+    if (!success) {\n+      try {\n+        // unsafe couldn't be found, so try using accessible anyway\n+        ao.setAccessible(true);\n+      } catch (SecurityException e) {\n+        throw new JsonIOException(\"Gson couldn't modify fields for \" + ao\n+          + \"\\nand sun.misc.Unsafe not found.\\nEither write a custom type adapter,\"\n+          + \" or make fields accessible, or include sun.misc.Unsafe.\", e);\n+      }\n+    }\n+  }\n+\n+  // Visible for testing only\n+  boolean makeAccessibleWithUnsafe(AccessibleObject ao) {\n     if (theUnsafe != null && overrideField != null) {\n-      long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n-      theUnsafe.putBoolean(ao, overrideOffset, true);\n+      try {\n+        Method method = unsafeClass.getMethod(\"objectFieldOffset\", Field.class);\n+        long overrideOffset = (Long) method.invoke(theUnsafe, overrideField);  // long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n+        Method putBooleanMethod = unsafeClass.getMethod(\"putBoolean\",  Object.class, long.class, boolean.class);\n+        putBooleanMethod.invoke(theUnsafe, ao, overrideOffset, true); // theUnsafe.putBoolean(ao, overrideOffset, true);\n+        return true;\n+      } catch (Exception ignored) { // do nothing\n+      }\n     }\n+    return false;\n   }\n \n-  private static Unsafe getUnsafeInstance() {\n+  private static Object getUnsafeInstance() {\n     try {\n-      Field unsafeField = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+      unsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+      Field unsafeField = unsafeClass.getDeclaredField(\"theUnsafe\");\n       unsafeField.setAccessible(true);\n-      return (Unsafe) unsafeField.get(null);\n+      return unsafeField.get(null);\n     } catch (Exception e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }\n@@ -57,7 +80,6 @@ private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n     } catch (NoSuchFieldException e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }, @@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.reflect;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link UnsafeReflectionAccessor}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class UnsafeReflectionAccessorTest {\n+\n+  @Test\n+  public void testMakeAccessibleWithUnsafe() throws Exception {\n+    UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+    Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+    try {\n+      boolean success = accessor.makeAccessibleWithUnsafe(field);\n+      assertTrue(success);\n+    } catch (Exception e) {\n+      fail(\"Unsafe didn't work on the JDK\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithPrivateFinalFields {\n+    private final String a;\n+    public ClassWithPrivateFinalFields(String a) {\n+      this.a = a;\n+    }\n+  }\n+}, ", 87, 17, "\"modified, modified, added, \"", 104], ["Inderjeet Singh", "Moved JavaVersion to an internal package", "05/07/18, 09:17:35 PM", "Inderjeet Singh", "15965c278bd54ab8d207bef5b57761873d89649e", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/JavaVersion.java", "gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/ObjectTest.java", "gson/src/test/java/com/google/gson/internal/JavaVersionTest.java"], "@@ -27,12 +27,12 @@\n import java.util.List;\n import java.util.Locale;\n \n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.JavaVersion;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and, @@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package com.google.gson.util;\n+package com.google.gson.internal;\n \n /**\n  * Utility to check the major Java version of the current JVM., @@ -20,13 +20,13 @@\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.JavaVersion;\n \n import java.io.IOException;\n import java.text.DateFormat;, @@ -15,10 +15,10 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import com.google.gson.util.JavaVersion;\n-\n import java.lang.reflect.AccessibleObject;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Provides a replacement for {@link AccessibleObject#setAccessible(boolean)}, which may be used to\n  * avoid reflective access issues appeared in Java 9, like {@link java.lang.reflect.InaccessibleObjectException}, @@ -23,7 +23,8 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import com.google.gson.util.JavaVersion;\n+import com.google.gson.internal.JavaVersion;\n+\n import junit.framework.TestCase;\n \n /**, @@ -27,6 +27,7 @@\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n@@ -56,7 +57,6 @@\n import java.util.TreeSet;\n import java.util.UUID;\n \n-import com.google.gson.util.JavaVersion;\n import junit.framework.TestCase;\n \n /**, @@ -33,6 +33,7 @@\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-import com.google.gson.util.JavaVersion;\n import junit.framework.TestCase;\n \n /**, @@ -13,12 +13,14 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.google.gson.util;\n+package com.google.gson.internal;\n \n import static org.junit.Assert.*;\n \n import org.junit.Test;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Unit and functional tests for {@link JavaVersion}\n  *, ", 12, 9, "\"modified, renamed, modified, modified, modified, modified, modified, renamed, \"", 21], ["Inderjeet Singh", "Issue 1242: Printing Gson version when throwing AssertionError and IllegalArgumentException\n\nOn some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.\nFor those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue.", "05/15/18, 10:28:00 PM", "Inderjeet Singh", "6df4c824bfcf63686d8c9505aeea945ad9879e51", ["gson/pom.xml", "gson/src/main/java-templates/com/google/gson/internal/GsonBuildConfig.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/test/java/com/google/gson/functional/GsonVersionDiagnosticsTest.java", "gson/src/test/java/com/google/gson/internal/GsonBuildConfigTest.java"], "@@ -17,7 +17,7 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n-\n+ \n   <build>\n     <plugins>\n       <plugin>\n@@ -56,6 +56,23 @@\n         <groupId>org.apache.felix</groupId>\n         <artifactId>maven-bundle-plugin</artifactId>\n       </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>templating-maven-plugin</artifactId>\n+        <version>1.0.0</version>\n+        <executions>\n+          <execution>\n+            <id>filtering-java-templates</id>\n+            <goals>\n+              <goal>filter-sources</goal>\n+            </goals>\n+            <configuration>\n+              <sourceDirectory>${basedir}/src/main/java-templates</sourceDirectory>\n+              <outputDirectory>${project.build.directory}/generated-sources/java-templates</outputDirectory>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -0,0 +1,30 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal;\n+\n+/**\n+ * Build configuration for Gson. This file is automatically populated by\n+ * templating-maven-plugin and .java/.class files are generated for use in Gson.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class GsonBuildConfig {\n+  // Based on https://stackoverflow.com/questions/2469922/generate-a-version-java-file-in-maven\n+\n+  /** This field is automatically populated by Maven when a build is triggered */\n+  public static final String VERSION = \"${project.version}\";\n+}, @@ -37,6 +37,7 @@\n \n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.GsonBuildConfig;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.Streams;\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n@@ -461,7 +462,7 @@ static void checkValidFloatingPoint(double value) {\n           return candidate;\n         }\n       }\n-      throw new IllegalArgumentException(\"GSON cannot handle \" + type);\n+      throw new IllegalArgumentException(\"GSON (\" + GsonBuildConfig.VERSION + \") cannot handle \" + type);\n     } finally {\n       threadCalls.remove(type);\n \n@@ -703,6 +704,8 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE\n       ((TypeAdapter<Object>) adapter).write(writer, src);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -779,6 +782,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n       Streams.write(jsonElement, writer);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -935,6 +940,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n     } catch (IOException e) {\n       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       reader.setLenient(oldLenient);\n     }, @@ -0,0 +1,96 @@\n+/*\n+ * Copyright (C) 2018 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests to validate printing of Gson version on AssertionErrors\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class GsonVersionDiagnosticsTest extends TestCase {\n+  private static final Pattern GSON_VERSION_PATTERN = Pattern.compile(\"(\\\\(GSON \\\\d\\\\.\\\\d\\\\.\\\\d)(?:[-.][A-Z]+)?\\\\)$\");\n+\n+  private Gson gson;\n+\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().registerTypeAdapter(TestType.class, new TypeAdapter<TestType>() {\n+      @Override public void write(JsonWriter out, TestType value) {\n+        throw new AssertionError(\"Expected during serialization\");\n+      }\n+      @Override public TestType read(JsonReader in) throws IOException {\n+        throw new AssertionError(\"Expected during deserialization\");\n+      }\n+    }).create();\n+  }\n+\n+  @Test\n+  public void testVersionPattern() {\n+    assertTrue(GSON_VERSION_PATTERN.matcher(\"(GSON 2.8.5)\").matches());\n+    assertTrue(GSON_VERSION_PATTERN.matcher(\"(GSON 2.8.5-SNAPSHOT)\").matches());\n+  }\n+\n+  @Test\n+  public void testAssertionErrorInSerializationPrintsVersion() {\n+    try {\n+      gson.toJson(new TestType());\n+      fail();\n+    } catch (AssertionError expected) {\n+      ensureAssertionErrorPrintsGsonVersion(expected);\n+    }\n+  }\n+\n+  @Test\n+  public void testAssertionErrorInDeserializationPrintsVersion() {\n+    try {\n+      gson.fromJson(\"{'a':'abc'}\", TestType.class);\n+      fail();\n+    } catch (AssertionError expected) {\n+      ensureAssertionErrorPrintsGsonVersion(expected);\n+    }\n+  }\n+\n+  private void ensureAssertionErrorPrintsGsonVersion(AssertionError expected) {\n+    String msg = expected.getMessage();\n+    // System.err.println(msg);\n+    int start = msg.indexOf(\"(GSON\");\n+    assertTrue(start > 0);\n+    int end = msg.indexOf(\"):\") + 1;\n+    assertTrue(end > 0 && end > start + 6);\n+    String version = msg.substring(start, end);\n+    // System.err.println(version);\n+    assertTrue(GSON_VERSION_PATTERN.matcher(version).matches());\n+  }\n+\n+  private static final class TestType {\n+    @SuppressWarnings(\"unused\")\n+    String a;\n+  }\n+}, @@ -0,0 +1,33 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@code GsonBuildConfig}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class GsonBuildConfigTest {\n+\n+  @Test\n+  public void testEnsureGsonBuildConfigGetsUpdatedToMavenVersion() {\n+    assertFalse(\"${project.version}\".equals(GsonBuildConfig.VERSION));\n+  }\n+}, ", 185, 2, "\"modified, added, modified, added, added, \"", 187], ["Joel Leitch", "Remove obsolete step", "05/22/18, 03:00:15 AM", "Joel Leitch", "d7db0abf2c244b092de7bd41923f91ca19165eda", ["ReleaseProcess.md"], "@@ -3,7 +3,6 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-1. (obsolete step) Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 1. Ensure all changelists are code-reviewed and have +1\n 1. `cd gson` to the parent directory; ensure there are no open files and all changes are committed.\n 1. Run `mvn release:clean`, ", 0, 1, "\"modified, \"", 1], ["Christian Schwarz", "Updated dependency examples to version 2.8.5", "06/06/18, 01:29:56 PM", "GitHub", "9c4c7d26287fa44d5d12910e0529553d6107c11d", ["README.md"], "@@ -20,7 +20,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n   * To use Gson in Android\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.4'\n+    implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n \n@@ -30,7 +30,7 @@ dependencies {\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>\n-    <version>2.8.4</version>\n+    <version>2.8.5</version>\n </dependency>\n ```\n , ", 2, 2, "\"modified, \"", 4], ["lucalas", "Add possibility to maintain type variable in created pojo\n\nInstead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.", "07/03/18, 10:11:38 AM", "lucalas", "420ab1f04c894dcb0402c0117bbc5d35ad1136eb", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -126,29 +126,40 @@\n   private final String typeFieldName;\n   private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();\n   private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();\n+  private final boolean maintainType;\n \n-  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n+  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boolean maintainType) {\n     if (typeFieldName == null || baseType == null) {\n       throw new NullPointerException();\n     }\n     this.baseType = baseType;\n     this.typeFieldName = typeFieldName;\n+    this.maintainType = maintainType;\n   }\n \n+  /**\n+   * Creates a new runtime type adapter using for {@code baseType} using {@code\n+   * typeFieldName} as the type field name. Type field names are case sensitive.\n+   * {@code maintainType} flag decide if the type will be stored in pojo or not.\n+   */\n+  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName, boolean maintainType) {\n+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, maintainType);\n+  }\n+  \n   /**\n    * Creates a new runtime type adapter using for {@code baseType} using {@code\n    * typeFieldName} as the type field name. Type field names are case sensitive.\n    */\n   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {\n-    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);\n+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, false);\n   }\n \n   /**\n    * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as\n    * the type field name.\n    */\n   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {\n-    return new RuntimeTypeAdapterFactory<T>(baseType, \"type\");\n+    return new RuntimeTypeAdapterFactory<T>(baseType, \"type\", false);\n   }\n \n   /**\n@@ -199,7 +210,13 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n     return new TypeAdapter<R>() {\n       @Override public R read(JsonReader in) throws IOException {\n         JsonElement jsonElement = Streams.parse(in);\n-        JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);\n+        JsonElement labelJsonElement;\n+        if (maintainType) {\n+            labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);\n+        } else {\n+            labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);\n+        }\n+        \n         if (labelJsonElement == null) {\n           throw new JsonParseException(\"cannot deserialize \" + baseType\n               + \" because it does not define a field named \" + typeFieldName);\n@@ -224,12 +241,16 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n               + \"; did you forget to register a subtype?\");\n         }\n         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n-        if (jsonObject.has(typeFieldName)) {\n-          throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n-              + \" because it already defines a field named \" + typeFieldName);\n-        }\n         JsonObject clone = new JsonObject();\n-        clone.add(typeFieldName, new JsonPrimitive(label));\n+        \n+        if (!maintainType) {\n+            if (jsonObject.has(typeFieldName)) {\n+              throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n+                  + \" because it already defines a field named \" + typeFieldName);\n+            }\n+            clone.add(typeFieldName, new JsonPrimitive(label));\n+        }\n+        \n         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n           clone.add(e.getKey(), e.getValue());\n         }, ", 30, 9, "\"modified, \"", 39], ["Alexey Alexandrovich", "add .gitattributes \n\nUse the linguist-documentation attribute to mark paths as documentation.", "07/17/18, 10:09:55 AM", "GitHub", "0a10047fd3ab56ee93a367fdcfdb374f97876c3e", [".gitattributes"], "@@ -0,0 +1 @@\n+gson/docs/javadocs/* linguist-documentation, ", 1, 0, "\"added, \"", 1], ["Eric Cochran", "Fix return.", "07/30/18, 05:32:01 PM", "GitHub", "0df2fea59496200bdfaa70a18f8b73586b55c8b8", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -243,7 +243,8 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boole\n         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n \n         if (maintainType) {\n-          return jsonObject;\n+          Streams.write(jsonObject, out);\n+          return;\n         }\n \n         JsonObject clone = new JsonObject();, ", 2, 1, "\"modified, \"", 3], ["Eric Cochran", "Add Deprecated annotation.", "07/30/18, 05:34:02 PM", "GitHub", "60d7950c32c5a3aa880c60f7fb7ea150822843df", ["gson/src/main/java/com/google/gson/JsonElement.java"], "@@ -271,6 +271,7 @@ public byte getAsByte() {\n    * @deprecated This method is misleading, as it does not get this element as a char but rather as\n    * a string's first character.\n    */\n+  @Deprecated\n   public char getAsCharacter() {\n     throw new UnsupportedOperationException(getClass().getSimpleName());\n   }, ", 1, 0, "\"modified, \"", 1], ["Karan Kumar", "Change 'compile' to 'implementation'", "08/21/18, 08:12:12 PM", "Karan Kumar", "86ade21078b656506c47d51933af6df921ab5161", ["UserGuide.md"], "@@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    compile 'com.google.code.gson:gson:2.8.5'\n+    implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven, ", 1, 1, "\"modified, \"", 2], ["Jake Wharton", "Clean up the README a bit\n\n* Remove a lot of \"Gson\" as it's implied nearly everywhere.\r\n* Remove broken Javadoc badge. Move other badges to be near the content to which they apply\r\n* Not an official Google product\r\n* Make download section more general. People other than Android developers use Gradle, for example.", "08/23/18, 03:08:20 PM", "GitHub", "7a77eb91e74ba730429682f50cb41aadc3741fc0", ["README.md"], "@@ -1,48 +1,48 @@\n-# google-gson\n-\n-[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n-[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson)\n-[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n+# Gson\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n \n-### Gson Goals\n+### Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-### Gson Download and Maven\n-  * To use Gson in Android\n+### Download\n+\n+Gradle:\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.5'\n+  implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n \n-  * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n-  * To use Gson with Maven\n-  ```xml\n+Maven:\n+```xml\n <dependency>\n-    <groupId>com.google.code.gson</groupId>\n-    <artifactId>gson</artifactId>\n-    <version>2.8.5</version>\n+  <groupId>com.google.code.gson</groupId>\n+  <artifactId>gson</artifactId>\n+  <version>2.8.5</version>\n </dependency>\n ```\n \n-### Gson Documentation\n-  * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n-  * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n-  * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n-  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n+[Gson jar downloads](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) are available from Maven Central.\n+\n+[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n+\n+### Documentation\n+  * [API Javadoc](http://www.javadoc.io/doc/com.google.code.gson/gson): Documentation for the current release\n+  * [User guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n+  * [Change log](https://github.com/google/gson/blob/master/CHANGELOG.md): Changes in the recent versions\n+  * [Design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n \n-Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions.\n+Please use the 'gson' tag on StackOverflow or the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n \n-### Gson-related Content Created by Third Parties\n+### Related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n   * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n@@ -66,3 +66,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ```\n+\n+### Disclaimer\n+\n+This is not an officially supported Google product., ", 26, 22, "\"modified, \"", 48], ["Mike Cumings", "Replace instance equality checks in $Gson$Types#resolve", "09/27/18, 05:38:53 AM", "Mike Cumings", "69f7c4e243c385b318ed63205817347e4bbe379e", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -370,7 +370,7 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         Class<?> original = (Class<?>) toResolve;\n         Type componentType = original.getComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        toResolve = componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n         break;\n@@ -379,7 +379,7 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         GenericArrayType original = (GenericArrayType) toResolve;\n         Type componentType = original.getGenericComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        toResolve = componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n         break;\n@@ -388,12 +388,12 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = newOwnerType != ownerType;\n+        boolean changed = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n-          if (resolvedTypeArgument != args[t]) {\n+          if (!equal(resolvedTypeArgument, args[t])) {\n             if (!changed) {\n               args = args.clone();\n               changed = true;, ", 4, 4, "\"modified, \"", 8], ["hmble", "Typo in JavaDoc example", "10/10/18, 02:58:10 PM", "GitHub", "b046ea28eeb819ecc30c3a39cb6912dc84fae015", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -104,9 +104,9 @@\n  * registered. This protects your application from injection attacks. If you\n  * don't supply an explicit type label, the type's simple name will be used.\n  * <pre>   {@code\n- *   shapeAdapter.registerSubtype(Rectangle.class, \"Rectangle\");\n- *   shapeAdapter.registerSubtype(Circle.class, \"Circle\");\n- *   shapeAdapter.registerSubtype(Diamond.class, \"Diamond\");\n+ *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");\n+ *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");\n+ *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");\n  * }</pre>\n  * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code, ", 3, 3, "\"modified, \"", 6], ["Piet van Dongen", "Re-added cause to AssertionErrors", "10/18/18, 07:57:16 AM", "Piet van Dongen", "22877d67ba44299e8d77eb841ab20c2087d46752", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -705,7 +705,9 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -783,7 +785,9 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -941,7 +945,9 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       reader.setLenient(oldLenient);\n     }, ", 9, 3, "\"modified, \"", 12], ["Jeremy W. Sherman", "Display null-handling details as sublist\n\nIndent the details of null handling.\r\n\r\nComparing against the [old, Google Sites user guide][gsites] shows that the two items following the \"handles nulls correctly\" item are intended as a sublist under that item.\r\n\r\n[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects", "10/26/18, 03:12:00 PM", "GitHub", "aa1a34eb5e1f0070b2b5697434a358059a4d7267", ["UserGuide.md"], "@@ -148,8 +148,8 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n * This implementation handles nulls correctly.\n-* While serializing, a null field is omitted from the output.\n-* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n+  * While serializing, a null field is omitted from the output.\n+  * While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n * If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization.\n * Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.\n , ", 2, 2, "\"modified, \"", 4], ["Lyubomyr Shaydariv", "The JavaDoc is now more accurate about the type adapter serialization and deserialization", "12/08/18, 11:42:38 AM", "Lyubomyr Shaydariv", "383f7bdcdf980eca8a7de26d795c5061f767f31b", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -120,6 +120,18 @@\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);\n  * }</pre>\n+ *\n+ * <h3>Serialization and deserialization</h3>\n+ * In order to serialize and deserialize a polymorphic object,\n+ * you must specify the base type explicitly.\n+ * <pre>   {@code\n+ *   Diamond diamond = new Diamond();\n+ *   String json = gson.toJson(diamond, Shape.class);\n+ * }</pre>\n+ * And then:\n+ * <pre>   {@code\n+ *   Shape shape = gson.fromJson(json, Shape.class);\n+ * }</pre>\n  */\n public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {\n   private final Class<?> baseType;, ", 12, 0, "\"modified, \"", 12], ["Paul Kassianik", "Fixed tests for java 11", "01/11/19, 12:49:50 AM", "Paul Kassianik", "b52e1aca99a701292b4d4492a3579e3eca31dc3b", ["gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -88,8 +88,9 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n-      assertParsed(JavaVersion.isJava9OrLater() ?\n+      assertParsed(JavaVersion.isJava9OrLater() ? (JavaVersion.getMajorJavaVersion() <11 ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n+                      \"jeudi 1 janvier 1970 \u00e0 00:00:00 Temps universel coordonn\u00e9\") :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {, ", 2, 1, "\"modified, \"", 3], ["M\u00e1rton Braun", "Update Gson.java documentation to explicitly state behavior for empty strings", "02/04/19, 12:54:51 PM", "GitHub", "ffb315ef692b17b0d2b02915d7ee3eb4b30e46af", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -832,7 +832,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    */\n@@ -965,7 +966,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n    * @param json the root of the parse tree of {@link JsonElement}s from which the object is to\n    * be deserialized\n    * @param classOfT The class of T\n-   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n@@ -988,7 +990,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */, ", 6, 3, "\"modified, \"", 9], ["BlockLab", "Adapt gson/gson/README to match with gson/README.md", "02/19/19, 10:53:23 PM", "BlockLab", "b31450fc81be042d3cd1c5f2a260dde92ec99070", ["gson/README"], "@@ -1,5 +1,5 @@\n-Gson is a Java library that can be used to convert a Java object into its \n-JSON representation. It can also be used to convert a JSON string into an \n+Gson is a Java library that can be used to convert Java Objects into their \n+JSON representation. It can also be used to convert a JSON string to an \n equivalent Java object. Gson can work with arbitrary Java objects including \n pre-existing objects that you do not have source-code of.\n , ", 2, 2, "\"modified, \"", 4], ["BlockLab", "Removed spaces in code", "02/21/19, 12:49:02 AM", "BlockLab", "954f9f6c3e9d396b116cd9b0c175e005995fc010", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/InheritanceTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java", "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java", "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java"], "@@ -87,20 +87,20 @@ protected void tearDown() throws Exception {\n \n   public void testClassSerialization() {\n     try {\n-      gson.toJson(String.class);  \n+      gson.toJson(String.class);\n     } catch (UnsupportedOperationException expected) {}\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n-    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));  \n+    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));\n   }\n \n   public void testClassDeserialization() {\n     try {\n-      gson.fromJson(\"String.class\", String.class.getClass());  \n+      gson.fromJson(\"String.class\", String.class.getClass());\n     } catch (UnsupportedOperationException expected) {}\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n-    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));  \n+    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));\n   }\n \n   public void testUrlSerialization() throws Exception {, @@ -217,7 +217,7 @@ boolean queueContains(long... values) {\n           return false;\n         }\n       }\n-      return true;      \n+      return true;\n     }\n     \n     boolean setContains(float... values) {\n@@ -235,7 +235,7 @@ boolean sortedSetContains(char... values) {\n           return false;\n         }\n       }\n-      return true;      \n+      return true;\n     }\n     \n     public String getExpectedJson() {, @@ -163,7 +163,7 @@ public void testAbsentJsonElementsAreSetToNull() {\n     assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec\r\n   }\r\n \r\n-  public static class ClassWithInitializedMembers  {\r\n+  public static class ClassWithInitializedMembers {\r\n     // Using a mix of no-args constructor and field initializers\r\n     // Also, some fields are intialized and some are not (so initialized per JVM spec)\r\n     public static final String MY_STRING_DEFAULT = \"string\";\r\n@@ -204,7 +204,7 @@ public void testExplicitNullSetsFieldToNullDuringDeserialization() {\n     Gson gson = new Gson();\r\n     String json = \"{value:null}\";\r\n     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);\r\n-    assertNull(obj.value);    \r\n+    assertNull(obj.value);\r\n   }\r\n \r\n   public void testCustomTypeAdapterPassesNullSerialization() {\r, @@ -472,11 +472,11 @@ public boolean equals(Object obj) {\n     @SuppressWarnings(\"unused\")\n     int q2 = 20;\n   }\n-  private interface Measurable<T> {    \n+  private interface Measurable<T> {\n   }\n-  private interface Field<T> {    \n+  private interface Field<T> {\n   }\n-  private interface Immutable {    \n+  private interface Immutable {\n   }\n   \n   public static final class Amount<Q extends Quantity> \n@@ -490,12 +490,12 @@ public void testDeepParameterizedTypeSerialization() {\n     Amount<MyQuantity> amount = new Amount<MyQuantity>();\n     String json = gson.toJson(amount);\n     assertTrue(json.contains(\"value\"));\n-    assertTrue(json.contains(\"30\"));    \n+    assertTrue(json.contains(\"30\"));\n   }\n   \n   public void testDeepParameterizedTypeDeserialization() {\n     String json = \"{value:30}\";\n-    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();    \n+    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();\n     Amount<MyQuantity> amount = gson.fromJson(json, type);\n     assertEquals(30, amount.value);\n   }, @@ -50,11 +50,11 @@ protected void setUp() throws Exception {\n     gson = new Gson();\n   }\n   \n-  public void testDummy() {    \n+  public void testDummy() {\n     // This is here to prevent Junit for complaining when we disable all tests.\n-  }  \n+  }\n \n-  public void disabled_testStringDeserialization() {    \n+  public void disabled_testStringDeserialization() {\n     StringBuilder sb = new StringBuilder(8096);\n     sb.append(\"Error Yippie\");\n \n@@ -138,8 +138,8 @@ public void disabled_testLargeCollectionDeserialization() {\n     }    \n     sb.append(']');\n     String json = sb.toString();\n-    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    \n-    List<CollectionEntry> list = gson.fromJson(json, collectionType);       \n+    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();\n+    List<CollectionEntry> list = gson.fromJson(json, collectionType);\n     assertEquals(count, list.size());\n   }\n \n@@ -203,7 +203,7 @@ public void disabled_testSerializeClasses() {\n     } \n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testDeserializeClasses() {\n@@ -215,7 +215,7 @@ public void disabled_testDeserializeClasses() {\n     }\n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);\n   }\n   \n   public void disable_testLargeObjectSerializationAndDeserialization() {\n@@ -249,7 +249,7 @@ public void disabled_testSerializeExposedClasses() {\n     } \n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testDeserializeExposedClasses() {\n@@ -261,7 +261,7 @@ public void disabled_testDeserializeExposedClasses() {\n     }\n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testLargeGsonMapRoundTrip() throws Exception {, ", 22, 22, "\"modified, modified, modified, modified, modified, \"", 44], ["Tomy Jaya", "Fix wrong reference in Versioning Support example", "03/06/19, 12:03:13 PM", "GitHub", "194daa1cd869f6c0a5c954836ba5edd8f4d0c4e4", ["UserGuide.md"], "@@ -510,12 +510,12 @@ public class VersionedClass {\n \n VersionedClass versionedObject = new VersionedClass();\n Gson gson = new GsonBuilder().setVersion(1.0).create();\n-String jsonOutput = gson.toJson(someObject);\n+String jsonOutput = gson.toJson(versionedObject);\n System.out.println(jsonOutput);\n System.out.println();\n \n gson = new Gson();\n-jsonOutput = gson.toJson(someObject);\n+jsonOutput = gson.toJson(versionedObject);\n System.out.println(jsonOutput);\n ```\n , ", 2, 2, "\"modified, \"", 4], ["YOUNG HO CHA", "Fix indentation of EnumWithObfuscatedTest", "08/04/21, 03:30:07 AM", "YOUNG HO CHA", "d8c5fcf00bdd3170365e92e43880021031c7d005", ["gson/src/test/java/com/google/gson/functional/EnumWithObfuscatedTest.java"], "@@ -45,11 +45,11 @@ protected void setUp() throws Exception {\n \n   public void testEnumClassWithObfuscated() {\n     for (Gender enumConstant: Gender.class.getEnumConstants()) {\n-        try {\n-            Gender.class.getField(enumConstant.name());\n-            fail(\"Enum is not obfuscated\");\n-        } catch (NoSuchFieldException ignore) {\n-        }\n+      try {\n+        Gender.class.getField(enumConstant.name());\n+        fail(\"Enum is not obfuscated\");\n+      } catch (NoSuchFieldException ignore) {\n+      }\n     }\n \n     assertEquals(Gender.MALE, gson.fromJson(\"\\\"MAIL\\\"\", Gender.class));, ", 5, 5, "\"modified, \"", 10], ["Degubi", "Make sql module dependency transitive", "03/14/19, 10:26:46 AM", "Degubi", "95b36afcb96930f4e675fa4313721f8521372e93", ["gson/src/main/java/module-info.java"], "@@ -4,5 +4,5 @@\n \texports com.google.gson.reflect;\n \texports com.google.gson.stream;\n \n-\trequires java.sql;\n+\trequires transitive java.sql;\n }, ", 1, 1, "\"modified, \"", 2], ["Manuel Kollus", "Removing 'final' accessor from constructor", "03/28/19, 03:47:15 PM", "Manuel Kollus", "3e7669ce835ae000dfc7d1806b4f84a1dedc3e89", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -192,8 +192,8 @@ public Gson() {\n         Collections.<TypeAdapterFactory>emptyList());\n   }\n \n-  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,\n-      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n+  Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy,\n+      Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,, ", 2, 2, "\"modified, \"", 4], ["Degubi", "Refactor prefix array & loop logic, use if-s instead", "03/31/19, 04:03:33 PM", "Degubi", "ef2def39d3612fa718917c68a894098c1f8e6ef0", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -189,8 +189,6 @@\n  * @since 1.6\n  */\n public class JsonReader implements Closeable {\n-  /** The only non-execute prefix this parser permits */\n-  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n   private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n \n   private static final int PEEKED_NONE = 0;\n@@ -1572,18 +1570,18 @@ private void consumeNonExecutePrefix() throws IOException {\n     nextNonWhitespace(true);\n     pos--;\n \n-    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n+    int p = pos;\n+    if (p + 5 > limit && !fillBuffer(5)) {\n       return;\n     }\n \n-    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\n-      if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\n-        return; // not a security token!\n-      }\n+    char[] buf = buffer;\n+    if(buf[p] != ')' || buf[p + 1] != ']' || buf[p + 2] != '}' || buf[p + 3] != '\\'' || buf[p + 4] != '\\n') {\n+      return; // not a security token!\n     }\n \n     // we consumed a security token!\n-    pos += NON_EXECUTE_PREFIX.length;\n+    pos += 5;\n   }\n \n   static {, ", 6, 8, "\"modified, \"", 14], ["Degubi", "Remove unnecessary explicit else statement", "04/05/19, 02:20:06 PM", "Degubi", "46d0f58d1266c17a9fe6354344e9b1b7145fcb3d", ["gson/src/main/java/com/google/gson/JsonPrimitive.java"], "@@ -100,10 +100,9 @@ public boolean isBoolean() {\n   public boolean getAsBoolean() {\n     if (isBoolean()) {\n       return ((Boolean) value).booleanValue();\n-    } else {\n-      // Check to see if the value as a String is \"true\" in any case.\n-      return Boolean.parseBoolean(getAsString());\n     }\n+\t// Check to see if the value as a String is \"true\" in any case.\n+    return Boolean.parseBoolean(getAsString());\n   }\n \n   /**, ", 2, 3, "\"modified, \"", 5], ["Degubi", "Refactor uppercaseFirstLetter, add additional field to test", "04/17/19, 10:05:15 PM", "Degubi", "8eb2ffc85a1ec2fce2cfedb7ef5bfda7e163eb61", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java"], "@@ -159,31 +159,20 @@ static String separateCamelCase(String name, String separator) {\n    * Ensures the JSON field names begins with an upper case letter.\n    */\n   static String upperCaseFirstLetter(String name) {\n-    StringBuilder fieldNameBuilder = new StringBuilder();\n-    int index = 0;\n-    char firstCharacter = name.charAt(index);\n-    int length = name.length();\n+    int firstLetterIndex = 0;\n+    int limit = name.length() - 1;\n+    for(; !Character.isLetter(name.charAt(firstLetterIndex)) && firstLetterIndex < limit; ++firstLetterIndex);\n \n-    while (index < length - 1) {\n-      if (Character.isLetter(firstCharacter)) {\n-        break;\n-      }\n-\n-      fieldNameBuilder.append(firstCharacter);\n-      firstCharacter = name.charAt(++index);\n+    char firstLetter = name.charAt(firstLetterIndex);\n+    if(Character.isUpperCase(firstLetter)) { //The letter is already uppercased, return the original\n+      return name;\n     }\n \n-    if (!Character.isUpperCase(firstCharacter)) {\n-      String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);\n-      return fieldNameBuilder.append(modifiedTarget).toString();\n-    } else {\n-      return name;\n+    char uppercased = Character.toUpperCase(firstLetter);\n+    if(firstLetterIndex == 0) { //First character in the string is the first letter, saves 1 substring\n+      return uppercased + name.substring(1);\n     }\n-  }\n \n-  private static String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {\n-    return (indexOfSubstring < srcString.length())\n-        ? firstCharacter + srcString.substring(indexOfSubstring)\n-        : String.valueOf(firstCharacter);\n+    return name.substring(0, firstLetterIndex) + uppercased + name.substring(firstLetterIndex + 1);\n   }\n }, @@ -33,39 +33,39 @@ public void testIdentity() {\n     Gson gson = getGsonWithNamingPolicy(IDENTITY);\n     assertEquals(\"{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7,'lowerId':8}\",\n+        \"'annotatedName':7,'lowerId':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCase() {\n     Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE);\n     assertEquals(\"{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7,'LowerId':8}\",\n+        \"'annotatedName':7,'LowerId':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCaseWithSpaces() {\n     Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);\n     assertEquals(\"{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,\" +\n         \"'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,\" +\n-        \"'annotatedName':7,'Lower Id':8}\",\n+        \"'annotatedName':7,'Lower Id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithUnderscores() {\n     Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);\n     assertEquals(\"{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,\" +\n         \"'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,\" +\n-        \"'annotatedName':7,'lower_id':8}\",\n+        \"'annotatedName':7,'lower_id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithDashes() {\n     Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);\n     assertEquals(\"{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,\" +\n         \"'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,\" +\n-        \"'annotatedName':7,'lower-id':8}\",\n+        \"'annotatedName':7,'lower-id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n@@ -85,5 +85,6 @@ private Gson getGsonWithNamingPolicy(FieldNamingPolicy fieldNamingPolicy){\n     int UPPER_WORDS = 6;\n     @SerializedName(\"annotatedName\") int annotated = 7;\n     int lowerId = 8;\n+    int _9 = 9;\n   }\n }, ", 16, 26, "\"modified, modified, \"", 42], ["inder123", "Changed github.io to javadoc", "05/07/19, 10:48:14 PM", "GitHub", "d10df8b8b15252a0ad5594eddfe3b72198a91a65", ["UserGuide.md"], "@@ -250,7 +250,7 @@ gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n \n The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n-You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n+You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/reflect/TypeToken.html) class.\n \n ```java\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n@@ -556,7 +556,7 @@ This feature provides a way where you can mark certain fields of your objects to\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](https://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n \n@@ -615,7 +615,7 @@ The output is:\n \n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n-Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](https://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n+Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n \n@@ -644,7 +644,7 @@ The output is:\n {\"custom_naming\":\"first\",\"SomeOtherField\":\"second\"}\n ```\n \n-If you have a need for custom naming policy ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](https://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html) annotation.\n+If you have a need for custom naming policy ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/annotations/SerializedName.html) annotation.\n \n ### <a name=\"TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers\"></a>Sharing State Across Custom Serializers and Deserializers\n , ", 4, 4, "\"modified, \"", 8], ["Degubi", "Minor cleanups in deprecations and other warnings", "04/27/19, 06:27:11 PM", "Degubi", "ea22bf7159107e7a96b238a8db5c4eef162ef028", ["gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/FieldAttributesTest.java", "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java", "gson/src/test/java/com/google/gson/common/MoreAsserts.java", "gson/src/test/java/com/google/gson/functional/ArrayTest.java", "gson/src/test/java/com/google/gson/functional/CollectionTest.java", "gson/src/test/java/com/google/gson/functional/JsonParserTest.java", "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java", "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java", "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java", "gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java", "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -167,6 +167,7 @@ public void testDatePattern() throws Exception {\n     assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n+  @SuppressWarnings(\"unused\")\n   public void testInvalidDatePattern() throws Exception {\n     try {\n       new DefaultDateTypeAdapter(Date.class, \"I am a bad Date pattern....\");, @@ -39,6 +39,7 @@ protected void setUp() throws Exception {\n     fieldAttributes = new FieldAttributes(Foo.class.getField(\"bar\"));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   public void testNullField() throws Exception {\n     try {\n       new FieldAttributes(null);, @@ -30,6 +30,7 @@\n  */\n public class JsonPrimitiveTest extends TestCase {\n \n+  @SuppressWarnings(\"unused\")\n   public void testNulls() {\n     try {\n       new JsonPrimitive((Boolean) null);\n@@ -113,8 +114,8 @@ public void testExponential() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"1E+7\");\n \n     assertEquals(new BigDecimal(\"1E+7\"), json.getAsBigDecimal());\n-    assertEquals(new Double(\"1E+7\"), json.getAsDouble(), 0.00001);\n-    assertEquals(new Float(\"1E+7\"), json.getAsDouble(), 0.00001);\n+    assertEquals(1E+7, json.getAsDouble(), 0.00001);\n+    assertEquals(1E+7, json.getAsDouble(), 0.00001);\n \n     try {\n       json.getAsInt();\n@@ -123,91 +124,91 @@ public void testExponential() throws Exception {\n   }\n \n   public void testByteEqualsShort() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Short.valueOf((short)10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Integer.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10L));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Integer.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testIntegerEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Integer.valueOf(10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10L));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testIntegerEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Integer.valueOf(10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testLongEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Long.valueOf(10L));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testFloatEqualsDouble() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n-    JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));\n+    JsonPrimitive p1 = new JsonPrimitive(Float.valueOf(10.25F));\n+    JsonPrimitive p2 = new JsonPrimitive(Double.valueOf(10.25D));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testFloatEqualsBigDecimal() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n+    JsonPrimitive p1 = new JsonPrimitive(Float.valueOf(10.25F));\n     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testDoubleEqualsBigDecimal() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));\n+    JsonPrimitive p1 = new JsonPrimitive(Double.valueOf(10.25D));\n     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());, @@ -16,7 +16,7 @@\n \n package com.google.gson.common;\n \n-import junit.framework.Assert;\n+import org.junit.Assert;\n \n import java.util.Collection;\n \n@@ -28,26 +28,6 @@\n  */\n public class MoreAsserts {\n \n-  public static void assertEquals(int[] expected, int[] target) {\n-    if (expected == null) {\n-      Assert.assertNull(target);\n-    }\n-    Assert.assertEquals(expected.length, target.length);\n-    for (int i = 0; i < expected.length; ++i) {\n-      Assert.assertEquals(expected[i], target[i]);\n-    }\n-  }\n-\n-  public static void assertEquals(Integer[] expected, Integer[] target) {\n-    if (expected == null) {\n-      Assert.assertNull(target);\n-    }\n-    Assert.assertEquals(expected.length, target.length);\n-    for (int i = 0; i < expected.length; ++i) {\n-      Assert.assertEquals(expected[i], target[i]);\n-    }\n-  }\n-\n   /**\n    * Asserts that the specified {@code value} is not present in {@code collection}\n    * @param collection the collection to look into\n@@ -69,5 +49,4 @@ public static void assertEqualsAndHashCode(Object a, Object b) {\n     Assert.assertFalse(a.equals(null));\n     Assert.assertFalse(a.equals(new Object()));\n   }\n-\n }, @@ -19,12 +19,12 @@\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n-import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.ClassWithObjects;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+import static org.junit.Assert.assertArrayEquals;\n \n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n@@ -53,7 +53,7 @@ public void testTopLevelArrayOfIntsSerialization() {\n   public void testTopLevelArrayOfIntsDeserialization() {\n     int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n     int[] actual = gson.fromJson(\"[1,2,3,4,5,6,7,8,9]\", int[].class);\n-    MoreAsserts.assertEquals(expected, actual);\n+    assertArrayEquals(expected, actual);\n   }\n \n   public void testInvalidArrayDeserialization() {\n@@ -173,8 +173,8 @@ public void testArrayOfCollectionDeserialization() throws Exception {\n     Collection<Integer>[] target = gson.fromJson(json, type);\n \n     assertEquals(2, target.length);\n-    MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n-    MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n+    assertArrayEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n+    assertArrayEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n   }\n \n   public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {, @@ -42,6 +42,7 @@\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+import static org.junit.Assert.assertArrayEquals;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n@@ -70,7 +71,7 @@ public void testTopLevelCollectionOfIntegersDeserialization() {\n     Type collectionType = new TypeToken<Collection<Integer>>() { }.getType();\n     Collection<Integer> target = gson.fromJson(json, collectionType);\n     int[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n-    MoreAsserts.assertEquals(expected, toIntArray(target));\n+    assertArrayEquals(expected, toIntArray(target));\n   }\n \n   public void testTopLevelListOfIntegerCollectionsDeserialization() throws Exception {\n@@ -86,7 +87,7 @@ public void testTopLevelListOfIntegerCollectionsDeserialization() throws Excepti\n     }\n \n     for (int i = 0; i < 3; i++) {\n-      MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));\n+      assertArrayEquals(expected[i], toIntArray(target.get(i)));\n     }\n   }\n , @@ -123,9 +123,9 @@ public void testChangingCustomTreeAndDeserializing() {\n \n   public void testExtraCommasInArrays() {\n     Type type = new TypeToken<List<String>>() {}.getType();\n-    assertEquals(list(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n-    assertEquals(list(null, null), gson.fromJson(\"[,]\", type));\n-    assertEquals(list(\"a\", null), gson.fromJson(\"[a,]\", type));\n+    assertEquals(Arrays.asList(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n+    assertEquals(Arrays.asList(null, null), gson.fromJson(\"[,]\", type));\n+    assertEquals(Arrays.asList(\"a\", null), gson.fromJson(\"[a,]\", type));\n   }\n \n   public void testExtraCommasInMaps() {\n@@ -136,8 +136,4 @@ public void testExtraCommasInMaps() {\n     } catch (JsonSyntaxException expected) {\n     }\n   }\n-\n-  private <T> List<T> list(T... elements) {\n-    return Arrays.asList(elements);\n-  }\n }, @@ -59,8 +59,8 @@ public void disabled_testTwoTypesCollapseToOneSerialize() {\n         .create();\n \n     Map<Number, String> original = new LinkedHashMap<Number, String>();\n-    original.put(new Double(1.0), \"a\");\n-    original.put(new Float(1.0), \"b\");\n+    original.put(1.0D, \"a\");\n+    original.put(1.0F, \"b\");\n     try {\n       gson.toJson(original, new TypeToken<Map<Number, String>>() {}.getType());\n       fail(); // we no longer hash keys at serialization time, @@ -364,7 +364,7 @@ public void testMapDeserializationWithWildcardValues() {\n     Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() {}.getType();\n     Map<String, ? extends Long> map = gson.fromJson(\"{\\\"test\\\":123}\", typeOfMap);\n     assertEquals(1, map.size());\n-    assertEquals(new Long(123L), map.get(\"test\"));\n+    assertEquals(Long.valueOf(123L), map.get(\"test\"));\n   }\n \n , @@ -121,7 +121,7 @@ public void testParameterizedTypesWithCustomDeserializer() {\n         .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())\n         .registerTypeAdapter(ptStringType, new MyParameterizedTypeInstanceCreator<String>(\"\"))\n         .registerTypeAdapter(ptIntegerType,\n-            new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))\n+            new MyParameterizedTypeInstanceCreator<Integer>(0))\n         .create();\n \n     MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);, @@ -144,12 +144,12 @@ public void testNumberSerialization() {\n \n   public void testNumberDeserialization() {\n     String json = \"1\";\n-    Number expected = new Integer(json);\n+    Number expected = Integer.valueOf(json);\n     Number actual = gson.fromJson(json, Number.class);\n     assertEquals(expected.intValue(), actual.intValue());\n \n     json = String.valueOf(Long.MAX_VALUE);\n-    expected = new Long(json);\n+    expected = Long.valueOf(json);\n     actual = gson.fromJson(json, Number.class);\n     assertEquals(expected.longValue(), actual.longValue());\n \n@@ -164,16 +164,16 @@ public void testNumberAsStringDeserialization() {\n   }\n \n   public void testPrimitiveDoubleAutoboxedSerialization() {\n-    assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));\n-    assertEquals(\"122.08112002\", gson.toJson(new Double(122.08112002)));\n+    assertEquals(\"-122.08234335\", gson.toJson(-122.08234335D));\n+    assertEquals(\"122.08112002\", gson.toJson(122.08112002D));\n   }\n \n   public void testPrimitiveDoubleAutoboxedDeserialization() {\n     double actual = gson.fromJson(\"-122.08858585\", double.class);\n-    assertEquals(-122.08858585, actual);\n+    assertEquals(-122.08858585D, actual);\n \n     actual = gson.fromJson(\"122.023900008000\", Double.class);\n-    assertEquals(122.023900008, actual);\n+    assertEquals(122.023900008D, actual);\n   }\n \n   public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {, @@ -157,17 +157,17 @@ public void testStrictBoxedNansAndInfinities() throws IOException {\n     writer.setLenient(false);\n     writer.beginArray();\n     try {\n-      writer.value(new Double(Double.NaN));\n+      writer.value(Double.valueOf(Double.NaN));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      writer.value(new Double(Double.NEGATIVE_INFINITY));\n+      writer.value(Double.valueOf(Double.NEGATIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      writer.value(new Double(Double.POSITIVE_INFINITY));\n+      writer.value(Double.valueOf(Double.POSITIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }, @@ -34,10 +34,11 @@\n  */\n public class RecursiveTypesResolveTest extends TestCase {\n \n+  @SuppressWarnings(\"unused\")\n   private static class Foo1<A> {\n-    public Foo2<? extends A> foo2;\n+\tpublic Foo2<? extends A> foo2;\n   }\n-\n+  @SuppressWarnings(\"unused\")\n   private static class Foo2<B> {\n     public Foo1<? super B> foo1;\n   }\n@@ -93,10 +94,12 @@ public void testSubSupertype() {\n    * Tests for recursion while resolving type variables.\n    */\n \n+  @SuppressWarnings(\"unused\")\n   private static class TestType<X> {\n     TestType<? super X> superType;\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class TestType2<X, Y> {\n     TestType2<? super Y, ? super X> superReversedType;\n   }\n@@ -111,6 +114,3 @@ public void testRecursiveTypeVariablesResolve12() throws Exception {\n     assertNotNull(adapter);\n   }\n }\n-\n-\n-, @@ -48,14 +48,13 @@ public void testNullSafeBugDeserialize() throws Exception {\n       // because we use it to return a null type adapter on a recursive call.\n       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();\n \n-      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n       @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {\n         if (type.getRawType() != Device.class || recursiveCall.get() != null) {\n           recursiveCall.set(null); // clear for subsequent use\n           return null;\n         }\n         recursiveCall.set(Boolean.TRUE);\n-        return (TypeAdapter) gson.getDelegateAdapter(this, type);\n+        return gson.getDelegateAdapter(this, type);\n       }\n     }\n   }, @@ -27,9 +27,10 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assume.assumeTrue;\n \n+@SuppressWarnings(\"resource\")\n @RunWith(Parameterized.class)\n public class JsonReaderPathTest {\n   @Parameterized.Parameters(name = \"{0}\"), @@ -189,6 +189,7 @@ public void testInvalidJsonInput() throws IOException {\n     }\n   }\n   \n+  @SuppressWarnings(\"unused\")\n   public void testNulls() {\n     try {\n       new JsonReader(null);, @@ -198,17 +198,17 @@ public void testNonFiniteBoxedDoubles() throws IOException {\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);\n     jsonWriter.beginArray();\n     try {\n-      jsonWriter.value(new Double(Double.NaN));\n+      jsonWriter.value(Double.valueOf(Double.NaN));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));\n+      jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      jsonWriter.value(new Double(Double.POSITIVE_INFINITY));\n+      jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }, ", 61, 81, "\"modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, \"", 142], ["Farid Forootan Shad", "update proguard to fix R8 compatibility issue\n\nhttps://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always", "05/05/19, 10:28:29 AM", "GitHub", "920301ec7f453377b7457c353ceb3db92fd3f21b", ["examples/android-proguard-example/proguard.cfg"], "@@ -19,4 +19,9 @@\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer\n \n+# Prevent R8 from leaving Data object members always null\n+-keepclassmembers,allowobfuscation class * {\n+  @com.google.gson.annotations.SerializedName <fields>;\n+}\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 5, 0, "\"modified, \"", 5], ["Donald Chai", "Update sample ProGuard config to mark fields instead of all members.\n\nGSON only needs to reflect based on fields:\nhttps://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152\n\nThere's no reason to disallow optimizing methods.", "05/08/19, 10:31:47 PM", "Donald Chai", "2d560268ae4b5d379957e4a50b30348c60b8c0e8", ["examples/android-proguard-example/proguard.cfg"], "@@ -11,7 +11,7 @@\n #-keep class com.google.gson.stream.** { *; }\n \n # Application classes that will be serialized/deserialized over Gson\n--keep class com.google.gson.examples.android.model.** { *; }\n+-keep class com.google.gson.examples.android.model.** { <fields>; }\n \n # Prevent proguard from stripping interface information from TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter), ", 1, 1, "\"modified, \"", 2], ["Degubi", "Add docs to module-info.java", "05/26/19, 02:49:54 PM", "Degubi", "d95634b613c72a097947ca7dee14d84302751446", ["gson/src/main/java/module-info.java"], "@@ -1,3 +1,7 @@\n+/**\n+ * Defines the Gson serialization/deserialization API.\n+ * @since 2.8.6\n+ */\n module com.google.gson {\n \texports com.google.gson;\n \texports com.google.gson.annotations;, ", 4, 0, "\"modified, \"", 4], ["William Collishaw", "Add IDEA generated classes folder to gitignore", "06/02/19, 09:05:45 PM", "William Collishaw", "e63ae88a349163554f32eff749bca520faf91c68", [".gitignore"], "@@ -18,3 +18,5 @@ local.properties\n build\n \n .DS_Store\n+\n+examples/android-proguard-example/gen, ", 2, 0, "\"modified, \"", 2], ["inder123", "formatting", "06/04/19, 06:03:26 PM", "GitHub", "ddb9729260e6dee18d95db2397c0f0f30e7bac7f", ["metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java"], "@@ -66,22 +66,18 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (this == obj)\n-      return true;\n-    if (obj == null)\n-      return false;\n-    if (getClass() != obj.getClass())\n-      return false;\n+    if (this == obj) return true;\n+    if (obj == null) return false;\n+    if (getClass() != obj.getClass()) return false;\n     BagOfPrimitives other = (BagOfPrimitives) obj;\n-    if (booleanValue != other.booleanValue)\n-      return false;\n-    if (intValue != other.intValue)\n-      return false;\n-    if (longValue != other.longValue)\n-      return false;\n+    if (booleanValue != other.booleanValue) return false;\n+    if (intValue != other.intValue) return false;\n+    if (longValue != other.longValue) return false;\n     if (stringValue == null) {\n       return other.stringValue == null;\n-    } else return stringValue.equals(other.stringValue);\n+    } else {\n+      return stringValue.equals(other.stringValue);\n+    }\n   }\n \n   @Override, ", 9, 13, "\"modified, \"", 22], ["hqzxzwb", "Keep `TypeAdapter`s from being stripped", "07/01/19, 04:09:18 AM", "GitHub", "22f77117d3ececd0d7e6c4246b2ba76bd705a649", ["examples/android-proguard-example/proguard.cfg"], "@@ -13,8 +13,9 @@\n # Application classes that will be serialized/deserialized over Gson\n -keep class com.google.gson.examples.android.model.** { <fields>; }\n \n-# Prevent proguard from stripping interface information from TypeAdapterFactory,\n+# Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n+-keep class * implements com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer, ", 2, 1, "\"modified, \"", 3], ["Prempal Singh", "Fix typo in UserGuide", "08/27/19, 05:41:35 PM", "GitHub", "4ef06d6f1d5faa26446bf2f49054d5e5b11324a2", ["UserGuide.md"], "@@ -248,7 +248,7 @@ gson.toJson(foo); // May not serialize foo.value correctly\n gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n ```\n \n-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n+The above code fails to interpret value as type Bar because Gson invokes `foo.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/reflect/TypeToken.html) class.\n , ", 1, 1, "\"modified, \"", 2], ["David Maplesden", "Prefer writing chars instead of strings of length one\n\nThis results in a noticeable performance improvement with most writer\nimplementations (including BufferedWriter).", "09/16/19, 08:08:32 PM", "David Maplesden", "1d559bbc8d7e64884c3ef7f6717141c9f5fc96ba", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -286,7 +286,7 @@ public final boolean getSerializeNulls() {\n    */\n   public JsonWriter beginArray() throws IOException {\n     writeDeferredName();\n-    return open(EMPTY_ARRAY, \"[\");\n+    return open(EMPTY_ARRAY, '[');\n   }\n \n   /**\n@@ -295,7 +295,7 @@ public JsonWriter beginArray() throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter endArray() throws IOException {\n-    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");\n+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, ']');\n   }\n \n   /**\n@@ -306,7 +306,7 @@ public JsonWriter endArray() throws IOException {\n    */\n   public JsonWriter beginObject() throws IOException {\n     writeDeferredName();\n-    return open(EMPTY_OBJECT, \"{\");\n+    return open(EMPTY_OBJECT, '{');\n   }\n \n   /**\n@@ -315,14 +315,14 @@ public JsonWriter beginObject() throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter endObject() throws IOException {\n-    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");\n+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, '}');\n   }\n \n   /**\n    * Enters a new scope by appending any necessary whitespace and the given\n    * bracket.\n    */\n-  private JsonWriter open(int empty, String openBracket) throws IOException {\n+  private JsonWriter open(int empty, char openBracket) throws IOException {\n     beforeValue();\n     push(empty);\n     out.write(openBracket);\n@@ -333,7 +333,7 @@ private JsonWriter open(int empty, String openBracket) throws IOException {\n    * Closes the current scope by appending any necessary whitespace and the\n    * given bracket.\n    */\n-  private JsonWriter close(int empty, int nonempty, String closeBracket)\n+  private JsonWriter close(int empty, int nonempty, char closeBracket)\n       throws IOException {\n     int context = peek();\n     if (context != nonempty && context != empty) {\n@@ -562,7 +562,7 @@ public void close() throws IOException {\n \n   private void string(String value) throws IOException {\n     String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\n-    out.write(\"\\\"\");\n+    out.write('\\\"');\n     int last = 0;\n     int length = value.length();\n     for (int i = 0; i < length; i++) {\n@@ -589,15 +589,15 @@ private void string(String value) throws IOException {\n     if (last < length) {\n       out.write(value, last, length - last);\n     }\n-    out.write(\"\\\"\");\n+    out.write('\\\"');\n   }\n \n   private void newline() throws IOException {\n     if (indent == null) {\n       return;\n     }\n \n-    out.write(\"\\n\");\n+    out.write('\\n');\n     for (int i = 1, size = stackSize; i < size; i++) {\n       out.write(indent);\n     }, ", 9, 9, "\"modified, \"", 18], ["Inderjeet Singh", "Made the build work again with JDK 8", "10/03/19, 10:07:46 PM", "Inderjeet Singh", "4eadc0c6450aa17385a72a5ee2237a09c2d4fd84", ["pom.xml"], "@@ -63,28 +63,14 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n-          <version>3.8.0</version>\n-          <executions>\n-            <execution>\n-              <id>default-compile</id>\n-              <configuration>\n-                <release>9</release>\n-              </configuration>\n-            </execution>\n-            <execution>\n-              <id>base-compile</id>\n-              <goals>\n-                <goal>compile</goal>\n-              </goals>\n-              <configuration>\n-                <excludes>\n-                  <exclude>module-info.java</exclude>\n-                </excludes>\n-              </configuration>\n-            </execution>\n-          </executions>\n+          <version>3.8.1</version>\n           <configuration>\n-            <release>6</release>\n+            <excludes>\n+              <release>6</release>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n+            <source>1.6</source>\n+            <target>1.6</target>\n           </configuration>\n         </plugin>\n         <plugin>, ", 7, 21, "\"modified, \"", 28], ["Inderjeet Singh", "restored Java 9 build", "10/03/19, 11:31:34 PM", "Inderjeet Singh", "7896b66a1f4c60e2d8a1ee1146747cfea1179013", ["pom.xml"], "@@ -64,11 +64,32 @@\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.8.1</version>\n+          <executions>\n+            <execution>\n+              <id>default-compile</id>\n+              <configuration>\n+                <jdkToolchain>\n+                  <version>9</version>\n+                </jdkToolchain>\n+                <release>9</release>\n+              </configuration>\n+            </execution>\n+            <execution>\n+              <id>base-compile</id>\n+              <goals>\n+                <goal>compile</goal>\n+              </goals>\n+              <configuration>\n+                <excludes>\n+                  <exclude>module-info.java</exclude>\n+                </excludes>\n+              </configuration>\n+            </execution>\n+          </executions>\n           <configuration>\n-            <excludes>\n-              <release>6</release>\n-              <exclude>**/module-info.java</exclude>\n-            </excludes>\n+            <jdkToolchain>\n+              <version>[1.5,9)</version>\n+            </jdkToolchain>\n             <source>1.6</source>\n             <target>1.6</target>\n           </configuration>, ", 25, 4, "\"modified, \"", 29], ["Alireza Afkar", "Update CHANGELOG.md", "10/13/19, 07:02:24 AM", "GitHub", "321003a737f36d88805f05df983b16d8276e451b", ["CHANGELOG.md"], "@@ -3,7 +3,7 @@ Change Log\n \n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n- * Added static nethods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`\n+ * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`\n  * Java 9 module-info support\n \n ## Version 2.8.5, ", 1, 1, "\"modified, \"", 2], ["Brian de Alwis", "Drop JavaSE-1.5 since that boat sailed a long time ago", "10/31/19, 04:18:50 PM", "Brian de Alwis", "186846ffcffee4115e431054f932800b9174b902", ["gson/bnd.bnd"], "@@ -3,8 +3,8 @@ Bundle-Name: ${project.name}\n Bundle-Description: ${project.description}\n Bundle-Vendor: Google Gson Project\n Bundle-ContactAddress: ${project.parent.url}\n-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n-Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.5))\"\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"\n \n -removeheaders: Private-Package\n , ", 2, 2, "\"modified, \"", 4], ["Marcono1234", "Use OpenJDK 11 for Travis CI\n\nFixes #1606 (?)", "11/05/19, 06:11:09 PM", "Marcono1234", "128a3a8f3635c4fded414e19192b6edee8efd207", [".travis.yml"], "@@ -1,7 +1,7 @@\n language: java\n \n jdk:\n-  - oraclejdk9\n+  - openjdk11\n \n install: mvn -f gson install -DskipTests=true\n script: mvn -f gson test, ", 1, 1, "\"modified, \"", 2], ["Matthew Lee", "Fixing https://github.com/google/gson/issues/1592\n\nadding null parameter check to name(), fixing the issue and being consistent with superclass behavior", "11/26/19, 08:54:50 PM", "GitHub", "e84396336d75868547fe71875b637be58b89b813", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"], "@@ -130,6 +130,9 @@ private void put(JsonElement value) {\n   }\n \n   @Override public JsonWriter name(String name) throws IOException {\n+    if (name == null) {\n+      throw new NullPointerException(\"name == null\");\n+    }\n     if (stack.isEmpty() || pendingName != null) {\n       throw new IllegalStateException();\n     }, ", 3, 0, "\"modified, \"", 3], ["Omega-Ariston", "Add Tests for ISO8601Utils", "01/03/20, 02:57:58 AM", "Omega-Ariston", "69b334d2a4847210436831f6373b72799fa67e1c", ["gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"], "@@ -98,4 +98,4 @@ public void testDateParseInvalidTime() throws ParseException {\n             Locale.setDefault(defaultLocale);\n         }\n     }\n-}\n\\ No newline at end of file\n+}, ", 1, 1, "\"modified, \"", 2], ["Gabriel Basilio Brito", "Add isEmpty method to JsonArray class\n\nThe method will return true if the array is empty and false if it's not", "01/14/20, 05:47:23 AM", "GitHub", "720497121d39fe165fd9917e52c0a4d568f27a16", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -171,6 +171,15 @@ public boolean contains(JsonElement element) {\n   public int size() {\n     return elements.size();\n   }\n+  \n+  /**\n+   * Returns true if the array is empty\n+   *\n+   * @return true if the array is empty\n+   */\n+  public boolean isEmpty() {\n+    return elements.isEmpty();\n+  }\n \n   /**\n    * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,, ", 9, 0, "\"modified, \"", 9], ["Jonathan Leitschuh", "Official Gradle Wrapper Validation Action\n\nSee: https://github.com/gradle/wrapper-validation-action", "02/04/20, 04:49:38 PM", "GitHub", "d6c23b029b087dbbf5d14ba1c3a29ad7855c9503", [".github/workflows/gradle-wrapper-validation.yml"], "@@ -0,0 +1,10 @@\n+name: \"Validate Gradle Wrapper\"\n+on: [push, pull_request]\n+\n+jobs:\n+  validation:\n+    name: \"Validation\"\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - uses: gradle/wrapper-validation-action@v1, ", 10, 0, "\"added, \"", 10], ["Marcono1234", "Fix javadoc doclint HTML warnings", "02/11/20, 05:00:38 PM", "Marcono1234", "80f4c01621c16878191a900f1bbcf8e9aa50faee", ["gson/src/main/java/com/google/gson/ExclusionStrategy.java", "gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/annotations/Expose.java", "gson/src/main/java/com/google/gson/annotations/JsonAdapter.java", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/annotations/Since.java", "gson/src/main/java/com/google/gson/annotations/Until.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -46,11 +46,11 @@\n  *\n  * <p><strong>Excludes fields and objects based on a particular annotation:</strong>\n  * <pre class=\"code\">\n- * public &#64interface FooAnnotation {\n+ * public &#64;interface FooAnnotation {\n  *   // some implementation here\n  * }\n  *\n- * // Excludes any field (or class) that is tagged with an \"&#64FooAnnotation\"\n+ * // Excludes any field (or class) that is tagged with an \"&#64;FooAnnotation\"\n  * private static class FooAnnotationExclusionStrategy implements ExclusionStrategy {\n  *   public boolean shouldSkipClass(Class&lt;?&gt; clazz) {\n  *     return clazz.getAnnotation(FooAnnotation.class) != null;, @@ -44,10 +44,10 @@\n    * Using this naming policy with Gson will ensure that the first \"letter\" of the Java\n    * field name is capitalized when serialized to its JSON form.\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> SomeFieldName</li>\n-   *   <li>_someFieldName ---> _SomeFieldName</li>\n+   *   <li>someFieldName ---&gt; SomeFieldName</li>\n+   *   <li>_someFieldName ---&gt; _SomeFieldName</li>\n    * </ul>\n    */\n   UPPER_CAMEL_CASE() {\n@@ -61,10 +61,10 @@\n    * field name is capitalized when serialized to its JSON form and the words will be\n    * separated by a space.\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> Some Field Name</li>\n-   *   <li>_someFieldName ---> _Some Field Name</li>\n+   *   <li>someFieldName ---&gt; Some Field Name</li>\n+   *   <li>_someFieldName ---&gt; _Some Field Name</li>\n    * </ul>\n    *\n    * @since 1.4\n@@ -79,12 +79,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by an underscore (_).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some_field_name</li>\n-   *   <li>_someFieldName ---> _some_field_name</li>\n-   *   <li>aStringField ---> a_string_field</li>\n-   *   <li>aURL ---> a_u_r_l</li>\n+   *   <li>someFieldName ---&gt; some_field_name</li>\n+   *   <li>_someFieldName ---&gt; _some_field_name</li>\n+   *   <li>aStringField ---&gt; a_string_field</li>\n+   *   <li>aURL ---&gt; a_u_r_l</li>\n    * </ul>\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n@@ -97,12 +97,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by a dash (-).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some-field-name</li>\n-   *   <li>_someFieldName ---> _some-field-name</li>\n-   *   <li>aStringField ---> a-string-field</li>\n-   *   <li>aURL ---> a-u-r-l</li>\n+   *   <li>someFieldName ---&gt; some-field-name</li>\n+   *   <li>_someFieldName ---&gt; _some-field-name</li>\n+   *   <li>aStringField ---&gt; a-string-field</li>\n+   *   <li>aURL ---&gt; a-u-r-l</li>\n    * </ul>\n    * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in\n    * expressions. This requires that a field named with dashes is always accessed as a quoted\n@@ -120,12 +120,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by a dot (.).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some.field.name</li>\n-   *   <li>_someFieldName ---> _some.field.name</li>\n-   *   <li>aStringField ---> a.string.field</li>\n-   *   <li>aURL ---> a.u.r.l</li>\n+   *   <li>someFieldName ---&gt; some.field.name</li>\n+   *   <li>_someFieldName ---&gt; _some.field.name</li>\n+   *   <li>aStringField ---&gt; a.string.field</li>\n+   *   <li>aURL ---&gt; a.u.r.l</li>\n    * </ul>\n    * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n    * expressions. This requires that a field named with dots is always accessed as a quoted, @@ -34,9 +34,9 @@\n  * <p>Here is an example of how this annotation is meant to be used:\n  * <p><pre>\n  * public class User {\n- *   &#64Expose private String firstName;\n- *   &#64Expose(serialize = false) private String lastName;\n- *   &#64Expose (serialize = false, deserialize = false) private String emailAddress;\n+ *   &#64;Expose private String firstName;\n+ *   &#64;Expose(serialize = false) private String lastName;\n+ *   &#64;Expose (serialize = false, deserialize = false) private String emailAddress;\n  *   private String password;\n  * }\n  * </pre></p>, @@ -31,7 +31,7 @@\n  *\n  * <p>Here is an example of how this annotation is used:</p>\n  * <pre>\n- * &#64JsonAdapter(UserJsonAdapter.class)\n+ * &#64;JsonAdapter(UserJsonAdapter.class)\n  * public class User {\n  *   public final String firstName, lastName;\n  *   private User(String firstName, String lastName) {\n@@ -40,15 +40,15 @@\n  *   }\n  * }\n  * public class UserJsonAdapter extends TypeAdapter&lt;User&gt; {\n- *   &#64Override public void write(JsonWriter out, User user) throws IOException {\n+ *   &#64;Override public void write(JsonWriter out, User user) throws IOException {\n  *     // implement write: combine firstName and lastName into name\n  *     out.beginObject();\n  *     out.name(\"name\");\n  *     out.value(user.firstName + \" \" + user.lastName);\n  *     out.endObject();\n  *     // implement the write method\n  *   }\n- *   &#64Override public User read(JsonReader in) throws IOException {\n+ *   &#64;Override public User read(JsonReader in) throws IOException {\n  *     // implement read: split name into firstName and lastName\n  *     in.beginObject();\n  *     in.nextName();\n@@ -59,13 +59,13 @@\n  * }\n  * </pre>\n  *\n- * Since User class specified UserJsonAdapter.class in &#64JsonAdapter annotation, it\n+ * Since User class specified UserJsonAdapter.class in &#64;JsonAdapter annotation, it\n  * will automatically be invoked to serialize/deserialize User instances. <br>\n  *\n  * <p> Here is an example of how to apply this annotation to a field.\n  * <pre>\n  * private static final class Gadget {\n- *   &#64JsonAdapter(UserJsonAdapter2.class)\n+ *   &#64;JsonAdapter(UserJsonAdapter2.class)\n  *   final User user;\n  *   Gadget(User user) {\n  *     this.user = user;, @@ -35,8 +35,8 @@\n  * <p>Here is an example of how this annotation is meant to be used:</p>\n  * <pre>\n  * public class MyClass {\n- *   &#64SerializedName(\"name\") String a;\n- *   &#64SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+ *   &#64;SerializedName(\"name\") String a;\n+ *   &#64;SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n  *   String c;\n  *\n  *   public MyClass(String a, String b, String c) {, @@ -36,9 +36,9 @@\n  * public class User {\n  *   private String firstName;\n  *   private String lastName;\n- *   &#64Since(1.0) private String emailAddress;\n- *   &#64Since(1.0) private String password;\n- *   &#64Since(1.1) private Address address;\n+ *   &#64;Since(1.0) private String emailAddress;\n+ *   &#64;Since(1.0) private String password;\n+ *   &#64;Since(1.1) private Address address;\n  * }\n  * </pre>\n  *, @@ -38,8 +38,8 @@\n  * public class User {\n  *   private String firstName;\n  *   private String lastName;\n- *   &#64Until(1.1) private String emailAddress;\n- *   &#64Until(1.1) private String password;\n+ *   &#64;Until(1.1) private String emailAddress;\n+ *   &#64;Until(1.1) private String password;\n  * }\n  * </pre>\n  *, @@ -170,7 +170,7 @@\n  * precision loss, extremely large values should be written and read as strings\n  * in JSON.\n  *\n- * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n+ * <a id=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n  * Web servers that serve private data using JSON may be vulnerable to <a\n  * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n  * request forgery</a> attacks. In such an attack, a malicious site gains access, ", 39, 39, "\"modified, modified, modified, modified, modified, modified, modified, modified, \"", 78], ["Marcono1234", "Remove unused Maven assembly plugin file\n\nPlugin usage has been removed in 2016e95", "02/11/20, 03:39:05 PM", "Marcono1234", "9be4400d70660a591fa4dfeaa836a89a0385ee3e", ["gson/assembly-descriptor.xml"], "@@ -1,21 +0,0 @@\n-<assembly>\r\n-  <id>release</id>\r\n-  <formats>\r\n-    <format>zip</format>\r\n-  </formats>\r\n-  <fileSets>\r\n-    <fileSet>\r\n-      <includes>\r\n-        <include>README*</include>\r\n-        <include>LICENSE*</include>\r\n-      </includes>\r\n-    </fileSet>\r\n-    <fileSet>\r\n-      <directory>target</directory>\r\n-      <outputDirectory></outputDirectory>\r\n-      <includes>\r\n-        <include>gson-*.jar</include>\r\n-      </includes>\r\n-    </fileSet>\r\n-  </fileSets>\r\n-</assembly>\n\\ No newline at end of file, ", 0, 21, "\"removed, \"", 21], ["Marcono1234", "Change links from HTTP to HTTPS", "02/11/20, 05:23:24 PM", "Marcono1234", "2294a47eb8b950fd78f9f02e546233166f08bb59", ["README.md", "gson/pom.xml", "pom.xml"], "@@ -43,7 +43,7 @@ Maven:\n Please use the 'gson' tag on StackOverflow or the [google-gson Google group](https://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n \n ### Related Content Created by Third Parties\n-  * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+  * [Gson Tutorial](https://www.studytrails.com/java/json/java-google-json-introduction/) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n   * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n , @@ -27,7 +27,7 @@\n           <includePackageNames>com.google.gson</includePackageNames>\n           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n           <links>\n-            <link>http://docs.oracle.com/javase/6/docs/api/</link>\n+            <link>https://docs.oracle.com/javase/6/docs/api/</link>\n           </links>\n         </configuration>\n       </plugin>, @@ -42,7 +42,7 @@\n   <licenses>\n     <license>\n       <name>Apache 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n     </license>\n   </licenses>\n , ", 3, 3, "\"modified, modified, modified, \"", 6], ["Simon Legner", "doc(UserGuide): mention TypeAdapters class", "04/30/20, 09:35:52 AM", "Simon Legner", "5a7d426070cb79a526920106a373b420bfc4c4e1", ["UserGuide.md"], "@@ -301,11 +301,12 @@ This approach is practical only if the array appears as a top-level element or i\n \n ### <a name=\"TOC-Built-in-Serializers-and-Deserializers\"></a>Built-in Serializers and Deserializers\n \n-Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.\n-Here is a list of such classes:\n+Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate, for instance\n \n-1. `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n-2. `java.net.URI` to match it with strings like `\"/google/gson/\"`\n+* `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n+* `java.net.URI` to match it with strings like `\"/google/gson/\"`\n+\n+For many more, see the internal class [`TypeAdapters`](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java).\n \n You can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n , ", 5, 4, "\"modified, \"", 9], ["Marcono1234", "Fix ISO8601UtilsTest failing on systems with UTC+X\n\nPreviously ISO8601UtilsTest.testDateFormatString() would fail on systems\nwhere the time zone is UTC+X because getTime() returned \"2018-06-24\" for them.\n\nAdditionally the tests which previously changed the system locale and time\nzone have been rewritten to create a UTC calendar instead. Setting locale\nseems to not be necessary because ISO8601Utils.parse(...) does not do that\neither.", "05/02/20, 10:34:08 PM", "Marcono1234", "9171715a880bf65bb698c6c76480d0a3fe65ae20", ["gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"], "@@ -15,9 +15,25 @@\n     @Rule\n     public final ExpectedException exception = ExpectedException.none();\n \n+    private static TimeZone utcTimeZone() {\n+        return TimeZone.getTimeZone(\"UTC\");\n+    }\n+\n+    private static GregorianCalendar createUtcCalendar() {\n+        TimeZone utc = utcTimeZone();\n+        GregorianCalendar calendar = new GregorianCalendar(utc);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        return calendar;\n+    }\n+\n     @Test\n     public void testDateFormatString() {\n-        Date date = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime();\n+        GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        calendar.set(2018, Calendar.JUNE, 25);\n+        Date date = calendar.getTime();\n         String dateStr = ISO8601Utils.format(date);\n         String expectedDate = \"2018-06-25\";\n         assertEquals(expectedDate, dateStr.substring(0, expectedDate.length()));\n@@ -51,51 +67,28 @@ public void testDateParseWithDefaultTimezone() throws ParseException {\n \n     @Test\n     public void testDateParseWithTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:00:00-03:00\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:00:00-03:00\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseSpecialTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:02:00-02:58\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:02:00-02:58\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseInvalidTime() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T61:60:62-03:00\";\n-            exception.expect(ParseException.class);\n-            ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T61:60:62-03:00\";\n+        exception.expect(ParseException.class);\n+        ISO8601Utils.parse(dateStr, new ParsePosition(0));\n     }\n }, ", 32, 39, "\"modified, \"", 71], ["Marius Volkhart", "Update proguard.cfg\n\nTypeAdapter is an abstract class, and R8 warns about this during the build.", "05/12/20, 05:03:50 PM", "GitHub", "2911695efa0f040ebe59c6efbf0c11a1f67e70c7", ["examples/android-proguard-example/proguard.cfg"], "@@ -15,7 +15,7 @@\n \n # Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n--keep class * implements com.google.gson.TypeAdapter\n+-keep class * extends com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer, ", 1, 1, "\"modified, \"", 2], ["\u00c9amonn McManus", "Merge branch 'master' into optional-sql", "08/24/21, 08:41:12 PM", "GitHub", "69173b02eaa82de0382d94478a1b4cdeafeca829", [".github/dependabot.yml", "CHANGELOG.md", "README.md", "UserGuide.md", "codegen/pom.xml", "examples/android-proguard-example/proguard.cfg", "extras/pom.xml", "gson/pom.xml", "gson/src/main/java/com/google/gson/JsonStreamParser.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/JsonArrayTest.java", "gson/src/test/java/com/google/gson/functional/EnumWithObfuscatedTest.java", "gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java", "gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java", "gson/src/test/resources/testcases-proguard.conf", "metrics/pom.xml", "pom.xml", "proto/pom.xml"], "@@ -0,0 +1,6 @@\n+version: 2\n+updates:\n+  - package-ecosystem: \"maven\"\n+    directory: \"/\"\n+    schedule:\n+      interval: \"daily\", @@ -1,6 +1,22 @@\n Change Log\n ==========\n \n+## Version 2.8.8\n+\n+* Fixed issue with recursive types (#1390).\n+* Better behaviour with Java 9+ and `Unsafe` if there is a security manager (#1712).\n+* `EnumTypeAdapter` now works better when ProGuard has obfuscated enum fields (#1495).\n+\n+## Version 2.8.7\n+\n+* Fixed `ISO8601UtilsTest` failing on systems with UTC+X.\n+* Improved javadoc for `JsonStreamParser`.\n+* Updated proguard.cfg (#1693).\n+* Fixed `IllegalStateException` in `JsonTreeWriter` (#1592).\n+* Added `JsonArray.isEmpty()` (#1640).\n+* Added new test cases (#1638).\n+* Fixed OSGi metadata generation to work on JavaSE < 9 (#1603).\n+\n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n  * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`, @@ -17,7 +17,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n Gradle:\n ```gradle\n dependencies {\n-  implementation 'com.google.code.gson:gson:2.8.6'\n+  implementation 'com.google.code.gson:gson:2.8.8'\n }\n ```\n \n@@ -26,7 +26,7 @@ Maven:\n <dependency>\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n-  <version>2.8.6</version>\n+  <version>2.8.8</version>\n </dependency>\n ```\n , @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.6'\n+    implementation 'com.google.code.gson:gson:2.8.8'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.6</version>\n+      <version>2.8.8</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, @@ -40,7 +40,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -15,7 +15,7 @@\n \n # Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n--keep class * implements com.google.gson.TypeAdapter\n+-keep class * extends com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer\n@@ -25,4 +25,8 @@\n   @com.google.gson.annotations.SerializedName <fields>;\n }\n \n+# Retain generic signatures of TypeToken and its subclasses with R8 version 3.0 and higher.\n+-keep,allowobfuscation,allowshrinking class com.google.gson.reflect.TypeToken\n+-keep,allowobfuscation,allowshrinking class * extends com.google.gson.reflect.TypeToken\n+\n ##---------------End: proguard configuration for Gson  ----------, @@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.8.7-SNAPSHOT</version>\n+    <version>2.8.9-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>\n@@ -16,6 +16,12 @@\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.github.wvengen</groupId>\n+      <artifactId>proguard-maven-plugin</artifactId>\n+      <version>2.4.0</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n  \n   <build>\n@@ -34,7 +40,7 @@\n       <plugin>\n         <groupId>biz.aQute.bnd</groupId>\n         <artifactId>bnd-maven-plugin</artifactId>\n-        <version>4.0.0</version>\n+        <version>5.3.0</version>\n         <executions>\n           <execution>\n             <goals>\n@@ -69,6 +75,87 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>com.coderplus.maven.plugins</groupId>\n+        <artifactId>copy-rename-maven-plugin</artifactId>\n+        <version>1.0.1</version>\n+        <executions>\n+          <execution>\n+            <id>pre-obfuscate-class</id>\n+            <phase>process-test-classes</phase>\n+            <goals>\n+              <goal>rename</goal>\n+            </goals>\n+            <configuration>\n+              <fileSets>\n+                <fileSet>\n+                  <sourceFile>${project.build.directory}/test-classes/com/google/gson/functional/EnumWithObfuscatedTest.class</sourceFile>\n+                  <destinationFile>${project.build.directory}/test-classes-obfuscated-injar/com/google/gson/functional/EnumWithObfuscatedTest.class</destinationFile>\n+                </fileSet>\n+                <fileSet>\n+                  <sourceFile>${project.build.directory}/test-classes/com/google/gson/functional/EnumWithObfuscatedTest$Gender.class</sourceFile>\n+                  <destinationFile>${project.build.directory}/test-classes-obfuscated-injar/com/google/gson/functional/EnumWithObfuscatedTest$Gender.class</destinationFile>\n+                </fileSet>\n+              </fileSets>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>com.github.wvengen</groupId>\n+        <artifactId>proguard-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>process-test-classes</phase>\n+            <goals><goal>proguard</goal></goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <proguardVersion>6.2.2</proguardVersion>\n+          <obfuscate>true</obfuscate>\n+          <injar>test-classes-obfuscated-injar</injar>\n+          <outjar>test-classes-obfuscated-outjar</outjar>\n+          <inFilter>**/*.class</inFilter>\n+          <proguardInclude>${basedir}/src/test/resources/testcases-proguard.conf</proguardInclude>\n+          <libs>\n+            <lib>${project.build.directory}/classes</lib>\n+            <lib>${java.home}/jmods/java.base.jmod</lib>\n+          </libs>\n+        </configuration>\n+        <dependencies>\n+          <dependency>\n+            <groupId>net.sf.proguard</groupId>\n+            <artifactId>proguard-base</artifactId>\n+            <version>6.2.2</version>\n+            <scope>runtime</scope>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-resources-plugin</artifactId>\n+        <version>3.2.0</version>\n+        <executions>\n+          <execution>\n+            <id>post-obfuscate-class</id>\n+            <phase>process-test-classes</phase>\n+            <goals>\n+              <goal>copy-resources</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}/test-classes/com/google/gson/functional</outputDirectory>\n+              <resources>\n+                <resource>\n+                  <directory>${project.build.directory}/test-classes-obfuscated-outjar/com/google/gson/functional</directory>\n+                  <includes>\n+                    <include>EnumWithObfuscatedTest.class</include>\n+                    <include>EnumWithObfuscatedTest$Gender.class</include>\n+                  </includes>\n+                </resource>\n+              </resources>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -29,8 +29,9 @@\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously.\n- * \n+ * asynchronously. The JSON data is parsed in lenient mode, see also\n+ * {@link JsonReader#setLenient(boolean)}.\n+ *\n  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To\n  * properly use this class across multiple threads, you will need to add some external\n  * synchronization. For example:\n@@ -72,10 +73,12 @@ public JsonStreamParser(Reader reader) {\n   }\n   \n   /**\n-   * Returns the next available {@link JsonElement} on the reader. Null if none available.\n-   * \n-   * @return the next available {@link JsonElement} on the reader. Null if none available.\n-   * @throws JsonParseException if the incoming stream is malformed JSON.\n+   * Returns the next available {@link JsonElement} on the reader. Throws a\n+   * {@link NoSuchElementException} if no element is available.\n+   *\n+   * @return the next available {@code JsonElement} on the reader.\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n+   * @throws NoSuchElementException if no {@code JsonElement} is available.\n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n@@ -97,6 +100,7 @@ public JsonElement next() throws JsonParseException {\n   /**\n    * Returns true if a {@link JsonElement} is available on the input for consumption\n    * @return true if a {@link JsonElement} is available on the input, false otherwise\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n    * @since 1.4\n    */\n   public boolean hasNext() {, @@ -25,7 +25,12 @@\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n@@ -334,52 +339,62 @@ public static Type getCollectionElementType(Type context, Class<?> contextRawTyp\n   }\n \n   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable<?>>());\n+\n+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable<?>, Type>());\n   }\n \n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n-                              Collection<TypeVariable<?>> visitedTypeVariables) {\n+                              Map<TypeVariable<?>, Type> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n+    TypeVariable<?> resolving = null;\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\n-        if (visitedTypeVariables.contains(typeVariable)) {\n+        Type previouslyResolved = visitedTypeVariables.get(typeVariable);\n+        if (previouslyResolved != null) {\n           // cannot reduce due to infinite recursion\n-          return toResolve;\n-        } else {\n-          visitedTypeVariables.add(typeVariable);\n+          return (previouslyResolved == Void.TYPE) ? toResolve : previouslyResolved;\n+        }\n+\n+        // Insert a placeholder to mark the fact that we are in the process of resolving this type\n+        visitedTypeVariables.put(typeVariable, Void.TYPE);\n+        if (resolving == null) {\n+          resolving = typeVariable;\n         }\n+\n         toResolve = resolveTypeVariable(context, contextRawType, typeVariable);\n         if (toResolve == typeVariable) {\n-          return toResolve;\n+          break;\n         }\n \n       } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {\n         Class<?> original = (Class<?>) toResolve;\n         Type componentType = original.getComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof GenericArrayType) {\n         GenericArrayType original = (GenericArrayType) toResolve;\n         Type componentType = original.getGenericComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof ParameterizedType) {\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = newOwnerType != ownerType;\n+        boolean changed = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n-          if (resolvedTypeArgument != args[t]) {\n+          if (!equal(resolvedTypeArgument, args[t])) {\n             if (!changed) {\n               args = args.clone();\n               changed = true;\n@@ -388,9 +403,10 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n           }\n         }\n \n-        return changed\n+        toResolve = changed\n             ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n             : original;\n+        break;\n \n       } else if (toResolve instanceof WildcardType) {\n         WildcardType original = (WildcardType) toResolve;\n@@ -400,20 +416,28 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         if (originalLowerBound.length == 1) {\n           Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);\n           if (lowerBound != originalLowerBound[0]) {\n-            return supertypeOf(lowerBound);\n+            toResolve = supertypeOf(lowerBound);\n+            break;\n           }\n         } else if (originalUpperBound.length == 1) {\n           Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);\n           if (upperBound != originalUpperBound[0]) {\n-            return subtypeOf(upperBound);\n+            toResolve = subtypeOf(upperBound);\n+            break;\n           }\n         }\n-        return original;\n+        toResolve = original;\n+        break;\n \n       } else {\n-        return toResolve;\n+        break;\n       }\n     }\n+    // ensure that any in-process resolution gets updated with the final result\n+    if (resolving != null) {\n+      visitedTypeVariables.put(resolving, toResolve);\n+    }\n+    return toResolve;\n   }\n \n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {, @@ -17,12 +17,15 @@\n package com.google.gson.internal.bind;\n \n import java.io.IOException;\n+import java.lang.reflect.Field;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Calendar;\n@@ -753,9 +756,20 @@ public void write(JsonWriter out, Locale value) throws IOException {\n \n     public EnumTypeAdapter(Class<T> classOfT) {\n       try {\n-        for (T constant : classOfT.getEnumConstants()) {\n+        for (final Field field : classOfT.getDeclaredFields()) {\n+          if (!field.isEnumConstant()) {\n+            continue;\n+          }\n+          AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            @Override public Void run() {\n+              field.setAccessible(true);\n+              return null;\n+            }\n+          });\n+          @SuppressWarnings(\"unchecked\")\n+          T constant = (T)(field.get(null));\n           String name = constant.name();\n-          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n+          SerializedName annotation = field.getAnnotation(SerializedName.class);\n           if (annotation != null) {\n             name = annotation.value();\n             for (String alternate : annotation.alternate()) {\n@@ -765,7 +779,7 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           nameToConstant.put(name, constant);\n           constantToName.put(constant, name);\n         }\n-      } catch (NoSuchFieldException e) {\n+      } catch (IllegalAccessException e) {\n         throw new AssertionError(e);\n       }\n     }, @@ -79,7 +79,7 @@ private static Object getUnsafeInstance() {\n   private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n-    } catch (NoSuchFieldException e) {\n+    } catch (Exception e) {\n       return null;\n     }\n   }, @@ -16,9 +16,8 @@\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import com.google.gson.common.MoreAsserts;\n+import junit.framework.TestCase;\n \n /**\n  * @author Jesse Wilson\n@@ -99,4 +98,68 @@ public void testDeepCopy() {\n     assertEquals(1, original.get(0).getAsJsonArray().size());\n     assertEquals(0, copy.get(0).getAsJsonArray().size());\n   }\n+\n+  public void testFailedGetArrayValues() {\n+    JsonArray jsonArray = new JsonArray();\n+    jsonArray.add(JsonParser.parseString(\"{\" + \"\\\"key1\\\":\\\"value1\\\",\" + \"\\\"key2\\\":\\\"value2\\\",\" + \"\\\"key3\\\":\\\"value3\\\",\" + \"\\\"key4\\\":\\\"value4\\\"\" + \"}\"));\n+    try {\n+      jsonArray.getAsBoolean();\n+      fail(\"expected getBoolean to fail\");\n+    } catch (UnsupportedOperationException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"JsonObject\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.get(-1);\n+      fail(\"expected get to fail\");\n+    } catch (IndexOutOfBoundsException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Index -1 out of bounds for length 1\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsString();\n+      fail(\"expected getString to fail\");\n+    } catch (UnsupportedOperationException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"JsonObject\", e.getMessage());\n+    }\n+\n+    jsonArray.remove(0);\n+    jsonArray.add(\"hello\");\n+    try {\n+      jsonArray.getAsDouble();\n+      fail(\"expected getDouble to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsInt();\n+      fail(\"expected getInt to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.get(0).getAsJsonArray();\n+      fail(\"expected getJSONArray to fail\");\n+    } catch (IllegalStateException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Not a JSON Array: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsJsonObject();\n+      fail(\"expected getJSONObject to fail\");\n+    } catch (IllegalStateException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Not a JSON Object: [\\\"hello\\\"]\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsLong();\n+      fail(\"expected getLong to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+  }\n }, @@ -0,0 +1,58 @@\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests for enums with Proguard.\n+ *\n+ * @author Young Cha\n+ */\n+public class EnumWithObfuscatedTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public enum Gender {\n+    @SerializedName(\"MAIL\")\n+    MALE,\n+\n+    @SerializedName(\"FEMAIL\")\n+    FEMALE\n+  }\n+\n+  public void testEnumClassWithObfuscated() {\n+    for (Gender enumConstant: Gender.class.getEnumConstants()) {\n+      try {\n+        Gender.class.getField(enumConstant.name());\n+        fail(\"Enum is not obfuscated\");\n+      } catch (NoSuchFieldException ignore) {\n+      }\n+    }\n+\n+    assertEquals(Gender.MALE, gson.fromJson(\"\\\"MAIL\\\"\", Gender.class));\n+    assertEquals(\"\\\"MAIL\\\"\", gson.toJson(Gender.MALE, Gender.class));\n+  }\n+}, @@ -0,0 +1,55 @@\n+package com.google.gson.functional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * This test covers the scenario described in #1390 where a type variable needs to be used\n+ * by a type definition multiple times.  Both type variable references should resolve to the\n+ * same underlying concrete type.\n+ */\n+public class ReusedTypeVariablesFullyResolveTest {\n+\n+  private Gson gson;\n+\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().create();\n+  }\n+\n+  @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n+  @Test\n+  public void testGenericsPreservation() {\n+    TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n+    Iterator<TestEnum> iterator = withSet.collection.iterator();\n+    assertNotNull(withSet);\n+    assertNotNull(withSet.collection);\n+    assertEquals(2, withSet.collection.size());\n+    TestEnum first = iterator.next();\n+    TestEnum second = iterator.next();\n+\n+    assertTrue(first instanceof TestEnum);\n+    assertTrue(second instanceof TestEnum);\n+  }\n+\n+  enum TestEnum { ONE, TWO, THREE }\n+\n+  private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n+\n+  private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n+\n+  private static class BaseCollection<U, C extends Collection<U>>\n+  {\n+    public C collection;\n+  }\n+\n+}, @@ -15,9 +15,25 @@\n     @Rule\n     public final ExpectedException exception = ExpectedException.none();\n \n+    private static TimeZone utcTimeZone() {\n+        return TimeZone.getTimeZone(\"UTC\");\n+    }\n+\n+    private static GregorianCalendar createUtcCalendar() {\n+        TimeZone utc = utcTimeZone();\n+        GregorianCalendar calendar = new GregorianCalendar(utc);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        return calendar;\n+    }\n+\n     @Test\n     public void testDateFormatString() {\n-        Date date = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime();\n+        GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        calendar.set(2018, Calendar.JUNE, 25);\n+        Date date = calendar.getTime();\n         String dateStr = ISO8601Utils.format(date);\n         String expectedDate = \"2018-06-25\";\n         assertEquals(expectedDate, dateStr.substring(0, expectedDate.length()));\n@@ -51,51 +67,28 @@ public void testDateParseWithDefaultTimezone() throws ParseException {\n \n     @Test\n     public void testDateParseWithTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:00:00-03:00\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:00:00-03:00\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseSpecialTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:02:00-02:58\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:02:00-02:58\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseInvalidTime() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T61:60:62-03:00\";\n-            exception.expect(ParseException.class);\n-            ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T61:60:62-03:00\";\n+        exception.expect(ParseException.class);\n+        ISO8601Utils.parse(dateStr, new ParsePosition(0));\n     }\n }, @@ -15,10 +15,12 @@\n  */\n package com.google.gson.internal.reflect;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.lang.reflect.Field;\n+import java.security.Permission;\n \n import org.junit.Test;\n \n@@ -41,6 +43,30 @@ public void testMakeAccessibleWithUnsafe() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {\n+    final Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\n+    final SecurityManager original = System.getSecurityManager();\n+    SecurityManager restrictiveManager = new SecurityManager() {\n+      @Override\n+      public void checkPermission(Permission perm) {\n+        if (accessDeclaredMembers.equals(perm)) {\n+          throw new SecurityException(\"nope\");\n+        }\n+      }\n+    };\n+    System.setSecurityManager(restrictiveManager);\n+\n+    try {\n+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+      assertFalse(\"override field should have been inaccessible\", accessor.makeAccessibleWithUnsafe(field));\n+      accessor.makeAccessible(field);\n+    } finally {\n+      System.setSecurityManager(original);\n+    }\n+  }\n+\n   @SuppressWarnings(\"unused\")\n   private static final class ClassWithPrivateFinalFields {\n     private final String a;, @@ -0,0 +1,20 @@\n+# Options from Android Gradle Plugins\n+# https://android.googlesource.com/platform/tools/base/+/refs/heads/studio-master-dev/build-system/gradle-core/src/main/resources/com/android/build/gradle\n+-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*\n+-optimizationpasses 5\n+-allowaccessmodification\n+-keepattributes *Annotation*,Signature,InnerClasses,EnclosingMethod\n+-keepclassmembers enum * {\n+  public static **[] values();\n+  public static ** valueOf(java.lang.String);\n+}\n+\n+-keep enum com.google.gson.functional.EnumWithObfuscatedTest$Gender\n+-keep class com.google.gson.functional.EnumWithObfuscatedTest {\n+  public void test*();\n+  protected void setUp();\n+}\n+\n+-dontwarn com.google.gson.functional.EnumWithObfuscatedTest\n+-dontwarn junit.framework.TestCase\n+, @@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.8.7-SNAPSHOT</version>\n+  <version>2.8.9-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>\n@@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>4.12</version>\n+        <version>4.13.2</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>\n@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.4</version>\n+          <version>3.3.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -106,7 +106,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>5.1.2</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>\n@@ -117,10 +117,15 @@\n         <artifactId>maven-release-plugin</artifactId>\n         <version>2.5.3</version>\n         <dependencies>\n+          <dependency>\n+            <groupId>org.apache.maven.scm</groupId>\n+            <artifactId>maven-scm-api</artifactId>\n+            <version>1.11.3</version>\n+          </dependency>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9.5</version>\n+            <version>1.11.3</version>\n           </dependency>\n         </dependencies>\n         <configuration>, @@ -76,7 +76,7 @@\n     <dependency>\r\n       <groupId>junit</groupId>\r\n       <artifactId>junit</artifactId>\r\n-      <version>4.12</version>\r\n+      <version>4.13.1</version>\r\n       <scope>test</scope>\r\n     </dependency>\r\n     \r, ", 459, 84, "\"added, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, added, added, modified, modified, added, modified, modified, modified, \"", 543], ["Richard Hernandez", "Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessible", "05/27/20, 03:12:06 AM", "Richard Hernandez", "b39494dbe68f91045850778cac4b661b38beb615", ["gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java"], "@@ -79,7 +79,7 @@ private static Object getUnsafeInstance() {\n   private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n-    } catch (NoSuchFieldException e) {\n+    } catch (Exception e) {\n       return null;\n     }\n   }, @@ -15,10 +15,12 @@\n  */\n package com.google.gson.internal.reflect;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.lang.reflect.Field;\n+import java.security.Permission;\n \n import org.junit.Test;\n \n@@ -41,6 +43,30 @@ public void testMakeAccessibleWithUnsafe() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {\n+    final Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\n+    final SecurityManager original = System.getSecurityManager();\n+    SecurityManager restrictiveManager = new SecurityManager() {\n+      @Override\n+      public void checkPermission(Permission perm) {\n+        if (accessDeclaredMembers.equals(perm)) {\n+          throw new SecurityException(\"nope\");\n+        }\n+      }\n+    };\n+    System.setSecurityManager(restrictiveManager);\n+\n+    try {\n+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+      assertFalse(\"override field should have been inaccessible\", accessor.makeAccessibleWithUnsafe(field));\n+      accessor.makeAccessible(field);\n+    } finally {\n+      System.setSecurityManager(original);\n+    }\n+  }\n+\n   @SuppressWarnings(\"unused\")\n   private static final class ClassWithPrivateFinalFields {\n     private final String a;, ", 27, 1, "\"modified, modified, \"", 28], ["Marcono1234", "Improve incorrect JsonStreamParser doc", "09/19/20, 11:30:50 AM", "Marcono1234", "b1edb7048687c2822b4fa006ddeb5e2cc2a038f9", ["gson/src/main/java/com/google/gson/JsonStreamParser.java"], "@@ -29,8 +29,9 @@\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously.\n- * \n+ * asynchronously. The JSON data is parsed in lenient mode, see also\n+ * {@link JsonReader#setLenient(boolean)}.\n+ *\n  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To\n  * properly use this class across multiple threads, you will need to add some external\n  * synchronization. For example:\n@@ -72,10 +73,12 @@ public JsonStreamParser(Reader reader) {\n   }\n   \n   /**\n-   * Returns the next available {@link JsonElement} on the reader. Null if none available.\n-   * \n-   * @return the next available {@link JsonElement} on the reader. Null if none available.\n-   * @throws JsonParseException if the incoming stream is malformed JSON.\n+   * Returns the next available {@link JsonElement} on the reader. Throws a\n+   * {@link NoSuchElementException} if no element is available.\n+   *\n+   * @return the next available {@code JsonElement} on the reader.\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n+   * @throws NoSuchElementException if no {@code JsonElement} is available.\n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n@@ -97,6 +100,7 @@ public JsonElement next() throws JsonParseException {\n   /**\n    * Returns true if a {@link JsonElement} is available on the input for consumption\n    * @return true if a {@link JsonElement} is available on the input, false otherwise\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n    * @since 1.4\n    */\n   public boolean hasNext() {, ", 10, 6, "\"modified, \"", 16], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /extras\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:55:48 PM", "GitHub", "074a556d38f0ff2c7a4924bb00a8ae1631601b67", ["extras/pom.xml"], "@@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump junit from 4.12 to 4.13.1 in /proto\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:03 PM", "GitHub", "345dea2c8adc0af2722c4261e7e3fa93a1f9bd0c", ["proto/pom.xml"], "@@ -76,7 +76,7 @@\n     <dependency>\r\n       <groupId>junit</groupId>\r\n       <artifactId>junit</artifactId>\r\n-      <version>4.12</version>\r\n+      <version>4.13.1</version>\r\n       <scope>test</scope>\r\n     </dependency>\r\n     \r, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /codegen\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:05 PM", "GitHub", "daba2fd7ff4bc9fd51c209952964b6fd5366b923", ["codegen/pom.xml"], "@@ -40,7 +40,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /metrics\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:23 PM", "GitHub", "ada6985285ee2d1d864c77d17d9b162d78371a26", ["metrics/pom.xml"], "@@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-bundle-plugin from 3.3.0 to 5.1.2\n\nBumps maven-bundle-plugin from 3.3.0 to 5.1.2.\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:25 PM", "GitHub", "0d4e59da8bad80b48b13d1be1728244e9faa99ac", ["pom.xml"], "@@ -106,7 +106,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>5.1.2</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-javadoc-plugin from 2.10.4 to 3.2.0\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:25 PM", "GitHub", "49d128b4231217786274a53df29af1aeeb469cdb", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.4</version>\n+          <version>3.2.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump bnd-maven-plugin from 4.0.0 to 5.3.0\n\nBumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.\n- [Release notes](https://github.com/bndtools/bnd/releases)\n- [Changelog](https://github.com/bndtools/bnd/blob/master/docs/ADDING_RELEASE_DOCS.md)\n- [Commits](https://github.com/bndtools/bnd/commits)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:27 PM", "GitHub", "83c63d225604b2c1c4c863a18940a52cc7c70f2a", ["gson/pom.xml"], "@@ -34,7 +34,7 @@\n       <plugin>\n         <groupId>biz.aQute.bnd</groupId>\n         <artifactId>bnd-maven-plugin</artifactId>\n-        <version>4.0.0</version>\n+        <version>5.3.0</version>\n         <executions>\n           <execution>\n             <goals>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2\n\nBumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:28 PM", "GitHub", "e6750e7b947b5508128689915c66e89792e0cdb2", ["pom.xml"], "@@ -120,7 +120,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9.5</version>\n+            <version>1.11.2</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump junit from 4.12 to 4.13.2\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:34 PM", "GitHub", "05a25a1ef242520bef0e4f9a64e319f3af687e69", ["pom.xml"], "@@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>4.12</version>\n+        <version>4.13.2</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-javadoc-plugin from 3.2.0 to 3.3.0\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/24/21, 06:27:14 AM", "GitHub", "d4fb033a472c338814f4159d6602aef561f393f1", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>3.2.0</version>\n+          <version>3.3.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2], ["\u00c9amonn McManus", "Update user guide and change log to reflect 2.8.7 release.", "05/24/21, 11:39:52 PM", "\u00c9amonn McManus", "45c0bd96f08ce60baaacc339138a2a2c97b953a6", ["CHANGELOG.md", "UserGuide.md"], "@@ -1,6 +1,16 @@\n Change Log\n ==========\n \n+## Version 2.8.7\n+\n+* Fixed `ISO8601UtilsTest` failing on systems with UTC+X.\n+* Improved javadoc for `JsonStreamParser`.\n+* Updated proguard.cfg (#1693).\n+* Fixed `IllegalStateException` in `JsonTreeWriter` (#1592).\n+* Added `JsonArray.isEmpty()` (#1640).\n+* Added new test cases (#1638).\n+* Fixed OSGi metadata generation to work on JavaSE < 9 (#1603).\n+\n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n  * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`, @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.6'\n+    implementation 'com.google.code.gson:gson:2.8.7'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.6</version>\n+      <version>2.8.7</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, ", 12, 2, "\"modified, modified, \"", 14], ["Conclure", "Update README.md version 2.8.6 -> 2.8.7\n\nversion 2.8.6 -> 2.8.7 for gradle and maven dependencies block", "05/26/21, 11:27:53 AM", "GitHub", "812b9c08e373240d69e0dd99a8d08fd47c53b48e", ["README.md"], "@@ -17,7 +17,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n Gradle:\n ```gradle\n dependencies {\n-  implementation 'com.google.code.gson:gson:2.8.6'\n+  implementation 'com.google.code.gson:gson:2.8.7'\n }\n ```\n \n@@ -26,7 +26,7 @@ Maven:\n <dependency>\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n-  <version>2.8.6</version>\n+  <version>2.8.7</version>\n </dependency>\n ```\n , ", 2, 2, "\"modified, \"", 4], ["HiFromAjay", "Remove unused imports [#1909, #1908]", "08/05/21, 11:23:28 PM", "HiFromAjay", "01ab13f701e6db84bdf37f602ef7af3c8d5c2f35", ["gson/src/test/java/com/google/gson/JsonArrayTest.java"], "@@ -16,12 +16,8 @@\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import com.google.gson.common.MoreAsserts;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import junit.framework.TestCase;\n \n /**\n  * @author Jesse Wilson, ", 1, 5, "\"modified, \"", 6], ["\u00c9amonn McManus", "Adjust some minor details of #1391.\n\nUse two-space indentation for the new test.\nUse standard Google import style.\nSupply missing type argument for `TypeVariable`.", "08/03/21, 12:33:10 AM", "\u00c9amonn McManus", "425cb25549ae83082b5e1ba4dfbc3bb635a15faf", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java"], "@@ -339,13 +339,13 @@ public static Type getCollectionElementType(Type context, Class<?> contextRawTyp\n   }\n \n   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n-    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable, Type>());\n+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable<?>, Type>());\n   }\n \n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n-                              Map<TypeVariable, Type> visitedTypeVariables) {\n+                              Map<TypeVariable<?>, Type> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n-    TypeVariable resolving = null;\n+    TypeVariable<?> resolving = null;\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;, @@ -1,54 +1,55 @@\n package com.google.gson.functional;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Set;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * This test covers the scenario described in #1390 where a type variable needs to be used\n  * by a type definition multiple times.  Both type variable references should resolve to the\n  * same underlying concrete type.\n  */\n public class ReusedTypeVariablesFullyResolveTest {\n \n-    private Gson gson;\n+  private Gson gson;\n \n-    @Before\n-    public void setUp() {\n-        gson = new GsonBuilder().create();\n-    }\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().create();\n+  }\n \n-    @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n-    @Test\n-    public void testGenericsPreservation() {\n-        TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n-        Iterator<TestEnum> iterator = withSet.collection.iterator();\n-        assertNotNull(withSet);\n-        assertNotNull(withSet.collection);\n-        assertEquals(2, withSet.collection.size());\n-        TestEnum first = iterator.next();\n-        TestEnum second = iterator.next();\n+  @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n+  @Test\n+  public void testGenericsPreservation() {\n+    TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n+    Iterator<TestEnum> iterator = withSet.collection.iterator();\n+    assertNotNull(withSet);\n+    assertNotNull(withSet.collection);\n+    assertEquals(2, withSet.collection.size());\n+    TestEnum first = iterator.next();\n+    TestEnum second = iterator.next();\n \n-        assertTrue(first instanceof TestEnum);\n-        assertTrue(second instanceof TestEnum);\n-    }\n+    assertTrue(first instanceof TestEnum);\n+    assertTrue(second instanceof TestEnum);\n+  }\n \n-    enum TestEnum { ONE, TWO, THREE }\n+  enum TestEnum { ONE, TWO, THREE }\n \n-    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n+  private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n \n-    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n+  private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n \n-    private static class BaseCollection<U, C extends Collection<U>>\n-    {\n-        public C collection;\n-    }\n+  private static class BaseCollection<U, C extends Collection<U>>\n+  {\n+    public C collection;\n+  }\n \n }, ", 32, 31, "\"modified, modified, \"", 63], ["dependabot[bot]", "Bump maven-resources-plugin from 2.7 to 3.2.0\n\nBumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.\n- [Release notes](https://github.com/apache/maven-resources-plugin/releases)\n- [Commits](https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.plugins:maven-resources-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-major\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:02:56 AM", "GitHub", "178b221fa0dfc26bf27331e7ef6da9657bde1fdf", ["gson/pom.xml"], "@@ -133,7 +133,7 @@\n       </plugin>\n       <plugin>\n         <artifactId>maven-resources-plugin</artifactId>\n-        <version>2.7</version>\n+        <version>3.2.0</version>\n         <executions>\n           <execution>\n             <id>post-obfuscate-class</id>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump proguard-maven-plugin from 2.3.1 to 2.4.0\n\nBumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.\n- [Release notes](https://github.com/wvengen/proguard-maven-plugin/releases)\n- [Changelog](https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/wvengen/proguard-maven-plugin/commits)\n\n---\nupdated-dependencies:\n- dependency-name: com.github.wvengen:proguard-maven-plugin\n  dependency-type: direct:development\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:03:00 AM", "GitHub", "b7fce3850d6508ad18500abf3aac1354d277798d", ["gson/pom.xml"], "@@ -19,7 +19,7 @@\n     <dependency>\n       <groupId>com.github.wvengen</groupId>\n       <artifactId>proguard-maven-plugin</artifactId>\n-      <version>2.3.1</version>\n+      <version>2.4.0</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump copy-rename-maven-plugin from 1.0 to 1.0.1\n\nBumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.\n- [Release notes](https://github.com/coderplus/copy-rename-maven-plugin/releases)\n- [Commits](https://github.com/coderplus/copy-rename-maven-plugin/commits)\n\n---\nupdated-dependencies:\n- dependency-name: com.coderplus.maven.plugins:copy-rename-maven-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:03:02 AM", "GitHub", "da2bfd7d1c0462547cb470d992a861987f3cca16", ["gson/pom.xml"], "@@ -78,7 +78,7 @@\n       <plugin>\n         <groupId>com.coderplus.maven.plugins</groupId>\n         <artifactId>copy-rename-maven-plugin</artifactId>\n-        <version>1.0</version>\n+        <version>1.0.1</version>\n         <executions>\n           <execution>\n             <id>pre-obfuscate-class</id>, ", 1, 1, "\"modified, \"", 2], ["Christoffer Quist Adamsen", "Retain generic signature of TypeToken with R8 version 3.0 and higher", "08/05/21, 07:18:32 AM", "Christoffer Quist Adamsen", "d3a75cb56937d687a66c8710e40c2da6223db0c3", ["examples/android-proguard-example/proguard.cfg"], "@@ -25,4 +25,8 @@\n   @com.google.gson.annotations.SerializedName <fields>;\n }\n \n+# Retain generic signatures of TypeToken and its subclasses with R8 version 3.0 and higher.\n+-keep,allowobfuscation,allowshrinking class com.google.gson.reflect.TypeToken\n+-keep,allowobfuscation,allowshrinking class * extends com.google.gson.reflect.TypeToken\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 4, 0, "\"modified, \"", 4], ["dependabot[bot]", "Bump maven-scm-api from 1.11.2 to 1.11.3\n\nBumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.\n- [Release notes](https://github.com/apache/maven-scm/releases)\n- [Commits](https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.scm:maven-scm-api\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/12/21, 03:04:02 AM", "GitHub", "f98dabd1e966c97aa88ee74d587eb1ea810e39b3", ["pom.xml"], "@@ -120,7 +120,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-api</artifactId>\n-            <version>1.11.2</version>\n+            <version>1.11.3</version>\n           </dependency>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3\n\nBumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.scm:maven-scm-provider-gitexe\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/12/21, 03:04:06 AM", "GitHub", "205df01c047ecc03cf217f17e2030852a4ac96be", ["pom.xml"], "@@ -125,7 +125,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.11.2</version>\n+            <version>1.11.3</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 1, 1, "\"modified, \"", 2], ["Simon Guerout", "Fix formatting", "08/30/21, 02:33:16 PM", "Simon Guerout", "6c156801bfc136d608298caec5755dc6ab20afb5", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"], "@@ -251,12 +251,10 @@ private void expect(JsonToken expected) throws IOException {\n \n   JsonElement nextJsonElement() throws IOException {\n     final JsonToken peeked = peek();\n-    if (\n-      peeked == JsonToken.NAME\n-      || peeked == JsonToken.END_ARRAY\n-      || peeked == JsonToken.END_OBJECT\n-      || peeked == JsonToken.END_DOCUMENT\n-    ) {\n+    if (peeked == JsonToken.NAME\n+        || peeked == JsonToken.END_ARRAY\n+        || peeked == JsonToken.END_OBJECT\n+        || peeked == JsonToken.END_DOCUMENT) {\n       throw new IllegalStateException(\"Unexpected \" + peeked + \" when reading a JsonElement.\");\n     }\n     final JsonElement element = (JsonElement) peekStack();, ", 4, 6, "\"modified, \"", 10], ["\u00c9amonn McManus", "Remove an unused import.", "08/31/21, 09:52:50 PM", "\u00c9amonn McManus", "03a720312c83d5a9b8d96213e7ab2d19d098919f", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -39,7 +39,6 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URL;\n-import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.util.ArrayList;, ", 0, 1, "\"modified, \"", 1], ["\u00c9amonn McManus", "Add missing  calls when testing for exceptions.", "08/31/21, 10:01:44 PM", "\u00c9amonn McManus", "8b9c23dc65cc8316e08c594d6f460afc0072dd59", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -90,7 +90,9 @@ protected void tearDown() throws Exception {\n   public void testClassSerialization() {\n     try {\n       gson.toJson(String.class);\n-    } catch (UnsupportedOperationException expected) {}\n+      fail();\n+    } catch (UnsupportedOperationException expected) {\n+    }\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n     assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));\n@@ -99,7 +101,9 @@ public void testClassSerialization() {\n   public void testClassDeserialization() {\n     try {\n       gson.fromJson(\"String.class\", String.class.getClass());\n-    } catch (UnsupportedOperationException expected) {}\n+      fail();\n+    } catch (UnsupportedOperationException expected) {\n+    }\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n     assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));, ", 6, 2, "\"modified, \"", 8], ["\u00c9amonn McManus", "Use GeneratedMessageV3 rather than GeneratedMessage, consistent with recent protoc versions.", "09/02/21, 12:06:49 AM", "\u00c9amonn McManus", "84806ead8462b736dce570fb4bd2776512bd0a87", ["proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"], "@@ -30,8 +30,7 @@\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage;\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Data;\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Type;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n /**\n@@ -52,15 +51,15 @@ protected void setUp() throws Exception {\n         .addSerializedNameExtension(Annotations.serializedName)\n         .addSerializedEnumValueExtension(Annotations.serializedValue);\n     gson = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter.build())\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter.build())\n         .create();\n     gsonWithEnumNumbers = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter\n             .setEnumSerialization(EnumSerialization.NUMBER)\n             .build())\n         .create();\n     gsonWithLowerHyphen = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter\n             .setFieldNameSerializationFormat(CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_HYPHEN)\n             .build())\n         .create();, @@ -24,8 +24,7 @@\n import com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat;\n import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n /**\n@@ -42,15 +41,15 @@ protected void setUp() throws Exception {\n     super.setUp();\n     gson =\n         new GsonBuilder()\n-            .registerTypeHierarchyAdapter(GeneratedMessage.class,\n+            .registerTypeHierarchyAdapter(GeneratedMessageV3.class,\n                 ProtoTypeAdapter.newBuilder()\n                     .setEnumSerialization(EnumSerialization.NUMBER)\n                     .build())\n             .create();\n     upperCamelGson =\n         new GsonBuilder()\n             .registerTypeHierarchyAdapter(\n-                GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+                GeneratedMessageV3.class, ProtoTypeAdapter.newBuilder()\n                     .setFieldNameSerializationFormat(\n                         CaseFormat.LOWER_UNDERSCORE, CaseFormat.UPPER_CAMEL)\n                     .build()), @@ -21,8 +21,7 @@\n import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n import com.google.protobuf.Descriptors.Descriptor;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n public class ProtosWithPrimitiveTypesTest extends TestCase {\n@@ -32,7 +31,7 @@\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new GsonBuilder().registerTypeHierarchyAdapter(\n-      GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+      GeneratedMessageV3.class, ProtoTypeAdapter.newBuilder()\n           .setEnumSerialization(EnumSerialization.NUMBER)\n           .build())\n       .create();, ", 9, 12, "\"modified, modified, modified, \"", 21], ["\u00c9amonn McManus", "Change `Apache 2.0` to `Apache-2.0`.\n\nAs suggested by @Marcono1234.\r\n> The [Maven POM Reference](https://maven.apache.org/pom.html#licenses) says:\r\n> > Using an [SPDX identifier](https://spdx.org/licenses/) as the license name is recommended.\r\n> The identifier for Apache 2.0 seems to be [`Apache-2.0`](https://spdx.org/licenses/Apache-2.0.html).\r\n> (Though even the Maven POM Reference example does not follow that advice; not sure how important it is.)", "09/06/21, 05:33:39 PM", "GitHub", "9407ebc927da344450e365f68aaeae62fc509ca7", ["gson/pom.xml"], "@@ -12,7 +12,7 @@\n \n   <licenses>\n     <license>\n-      <name>Apache 2.0</name>\n+      <name>Apache-2.0</name>\n       <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n     </license>\n   </licenses>, ", 1, 1, "\"modified, \"", 2], ["Z", "update RawCollectionsExample.java\n\nuse static method instead deprecated method", "09/07/21, 03:43:54 AM", "GitHub", "78e50af5e10f201413db38ad157d3d1aea87acc0", ["extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java"], "@@ -45,8 +45,7 @@ public static void main(String[] args) {\n     collection.add(new Event(\"GREETINGS\", \"guest\"));\n     String json = gson.toJson(collection);\n     System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\n-    JsonParser parser = new JsonParser();\n-    JsonArray array = parser.parse(json).getAsJsonArray();\n+    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\n     String message = gson.fromJson(array.get(0), String.class);\n     int number = gson.fromJson(array.get(1), int.class);\n     Event event = gson.fromJson(array.get(2), Event.class);, ", 1, 2, "\"modified, \"", 3], ["Z", "update UserGuide.md\n\nId Class does not have get method, we should new a instance.", "09/07/21, 03:58:26 AM", "GitHub", "865245edc8826ae4c0453e7f2299dae62e693f5e", ["UserGuide.md"], "@@ -429,7 +429,7 @@ class IdInstanceCreator implements InstanceCreator<Id<?>> {\n   public Id<?> createInstance(Type type) {\n     Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();\n     Type idType = typeParameters[0]; // Id has only one parameterized type T\n-    return Id.get((Class)idType, 0L);\n+    return new Id((Class)idType, 0L);\n   }\n }\n ```, ", 1, 1, "\"modified, \"", 2], ["dependabot[bot]", "Bump maven-javadoc-plugin from 3.3.0 to 3.3.1\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.plugins:maven-javadoc-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "09/08/21, 03:02:49 AM", "GitHub", "94a27bd409c3075f7f21dfc187044de3a7b62757", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>3.3.1</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2]]