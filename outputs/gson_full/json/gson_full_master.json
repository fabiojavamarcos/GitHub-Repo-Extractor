[["1", "Provide default support for java.util.Map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:22 PM", "```\nShould be able to convert the default representation of a Map. \nShould be able to deserialize {{\"a\":\"1\"},{\"b\":2\"}} as well as\n[{\"a\":\"1\"},{\"b\":2\"}] to a map. Consider using a concrete implementation\n(linked list) of Map that preserves the order of elements. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 7:16", "```\nAdded support for serialization and deserialization of all subclasses of\njava.util.Map in changelist r13:\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/6a6c\nfc7309918aea\n```\n\nOriginal comment by `inder123` on 29 Apr 2008 at 4:19\n- Changed state: **Fixed**\n =||= ", 0], ["2", "Provide support for pretty printing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:23 PM", "```\nGson should provide ability to print nicely indented Json. It should be\npossible to set print margin, default indentation, and so on. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 9:10", "```\nAdded pretty printing support in r19 change:\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/6a6c\nfc7309918aea\n\n```\n\nOriginal comment by `inder123` on 29 Apr 2008 at 4:18\n- Changed state: **Fixed**\n =||= ", 0], ["3", "Provide support to escape HTML", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:23 PM", "```\nTo prevent against XSS attacks, Gson should provide a GsonBuilder option to\nautomatically escape and unescape HTML\n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 11:18", "Original comment by `inder123` on 19 May 2008 at 6:25\n =||= Original comment by `joel.leitch@gmail.com` on 31 May 2008 at 12:45\n =||= ```\nSubmission r94\n(http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ac9\na092a4b45f6b6)\n added JSON escaping to google-gson which fixes this bug.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 18 Jun 2008 at 12:14\n- Changed state: **Fixed**\n =||= ", 0], ["4", "Provide a mode of operation to force explicit serialization and deserialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:25 PM", "```\nProvide a GsonBuilder setting that forces Gson to ignore all fields except\nthose marked with a specific annotation like \"@Expose\"\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Apr 2008 at 2:34", "Original comment by `inder123` on 27 Apr 2008 at 2:34\n =||= ```\nFixed in r34 by providing an @Expose annotation that can be applied to fields. \nThe\nexplicit serialization and deserialization can be enabled by invoking the\nexcludeFieldsWithoutExposeAnnotation() method of GsonBuilder. \n\nSee\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/aa9f\n9a8c8cb4a2a4\n```\n\nOriginal comment by `inder123` on 9 May 2008 at 8:48\n- Changed state: **Fixed**\n =||= ", 0], ["5", "Support JavaBeans properties in addition to class fields", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:25 PM", "```\nGson uses class fields for conversion to/from Json. It would also be great\nto have a mode of operation (using GsonBuilder) that forces Gson to use\nmethods as well. Essentially, a mode where Gson only considers the class\nmembers with @Expose annotation.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Apr 2008 at 2:37", "Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:53\n- Added labels: **Type-Enhancement**, **Priority-Low**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= ```\nThis library is primarily designed as a field mapping library and it has served \nthe \npurpose well. We decided not to implement this feature for now. \n```\n\nOriginal comment by `inder123` on 13 Nov 2008 at 1:53\n- Changed state: **WontFix**\n =||= ```\nThere have been a few requests for supporting this, so I am reopening this \nissue but \nstill not promises on fixing it.\n```\n\nOriginal comment by `inder123` on 2 Jun 2009 at 5:43\n- Changed state: **New**\n =||= ```\nSomehow we can not convince ourselves that this is worth doing, so closing it \nagain.\n```\n\nOriginal comment by `inder123` on 1 Oct 2009 at 3:58\n- Changed state: **WontFix**\n =||= ", 0], ["6", "Not serializing arrays of string", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:27 PM", "```\nWhat steps will reproduce the problem?\n\nTry to serialize and array of String\n\nWhat is the expected output? What do you see instead?\n\n[\"hello\", \"world\"]\n[{},{}]\n\nWhat version of the product are you using? On what operating system?\n\nCurrent.  Ubuntu ;)\n\nPlease provide any additional information below.\n\nit isn't serializing my array list of strings as it once was, I just get a\nlist of empty dicts of the same size.\n\nFor example the output of :\n\nimport com.google.gson.Gson;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class GsonExample {\n\n  public static void main(String args[]) {\n    List<String> vals = new ArrayList<String>();\n    vals.add(\"Hello\");\n    vals.add(\"World\");\n    Gson gson = new Gson();\n    System.out.println(gson.toJson(vals));\n    System.out.println(gson.toJson(vals, List.class));\n  }\n}\n\nIs :\n\n[{},{}]\n[{},{}]\n\nAt line 127 of JsonSerializationVisitor the fieldValue of my object is\n\"ade\" for instance and the fieldType is \"class java.lang.Object\"\n\nAt line 131, the childVisitor.getJsonElement() line always returns an empty\ndict {}\n\nRegards,\n\nCameron\n```\n\nOriginal issue reported on code.google.com by `camerong...@gmail.com` on 7 May 2008 at 6:21", "```\nadded a test, and reproduced the problem. Thanks for the detailed bug report. \n```\n\nOriginal comment by `inder123` on 8 May 2008 at 3:52\n- Changed state: **Accepted**\n =||= ```\nFixed in r36. See\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/f6a1\n92c317003180\n\nAdded new serialization and deserialization tests for array and collection of \nStrings. \n```\n\nOriginal comment by `inder123` on 8 May 2008 at 4:10\n- Changed state: **Fixed**\n =||= ", 0], ["7", "JsonParser fails to parse decimal values correctly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:28 PM", "```\n-122.08 is parsed as -122.0\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2008 at 5:34", "```\nFixed in r37 by updating the token definition for a digit to support multiple \ndigits\nafter the decimal point. \nThis allows numbers with more than one leading zeros as valid numbers even \nthough\nJson grammar technically disallows it. But I figured that allowing this is a \nlittle\nmore permissive without breaking any code, so can't hurt. \n\nSee:\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/7a22\nfa0d485a4a76\n```\n\nOriginal comment by `inder123` on 8 May 2008 at 5:39\n- Changed state: **Fixed**\n =||= ", 0], ["8", "Provide support to escape \" character", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:28 PM", "```\nif i have a property set to \"aaaa\\\"bbbb\" json loooks like \"aaaa\"bbbb\". The\noutput should be properly escaped. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 19 May 2008 at 6:19", "Original comment by `inder123` on 19 May 2008 at 6:25\n =||= ```\nSubmission r94\n(http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ac9\na092a4b45f6b6)\n added JSON escaping to google-gson which fixes this bug.\n\nNOTE: Issue #3 is a similar bug.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 18 Jun 2008 at 12:15\n- Changed state: **Fixed**\n =||= ", 0], ["9", "Gson should provide an ability to customize field name mapping", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:29 PM", "```\nCurrently Gson just uses the actual name of the field as the Json property\nname. This should be customizable. For example, it should be possible to\nconvert camel-case into hyphenated, or Camel-cased with upper-case first\nletter.\n\nso, myFavoriteField in Java gets mapped to my-favorite-field or\nMyFavoriteField in Json. \n\nOne approach to achieve this is by providing a name translation policy in\nGsonBuilder. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 May 2008 at 5:51", "```\nStarted implementing this feature.\n\nThis bug will be part of the next version cut (tentative date: July 4th).\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Jun 2008 at 1:37\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nr100 contains the code to support this feature.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Jun 2008 at 4:46\n- Changed state: **Fixed**\n =||= ", 0], ["10", "Gson should provide an ability to restrict the namespace of classes used", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:30 PM", "```\nIt should be possible to restrict Gson to only java.*, javax.* and\ncom.google.checkout.api.model.* and nothing else. \n\nThis is probably a good security feature. We should look at Ant (or\neclipse) conventions for deciding how to define package mappings. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 May 2008 at 5:52", "```\nThis seemed like a lot less useful feature than we originally thought so I am \nclosing \nit.\n```\n\nOriginal comment by `inder123` on 13 Nov 2008 at 1:53\n- Changed state: **WontFix**\n =||= ", 0], ["11", "publish javadocs on the web", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:31 PM", "```\nProbably best to check them in the svn alongwith setting properties to\nenable them to be viewed as HTML. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 May 2008 at 4:09", "```\nDone and also set the svn properties for mime-types:\n\nfind docs -name \"*.html\" -exec svn propset svn:mime-type text/html {} \\;\nfind docs -name \"*.gif\" -exec svn propset svn:mime-type image/gif {} \\;\n```\n\nOriginal comment by `inder123` on 30 May 2008 at 4:03\n =||= Original comment by `inder123` on 30 May 2008 at 4:03\n- Changed state: **Fixed**\n =||= ", 0], ["12", "Edit User Guide to match 1.0 APIs", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:32 PM", "```\nAPI changed in the 1.0 release, and the guides are not yet updated to match\nthem. Also, publish the guides on the wiki for gson.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 May 2008 at 4:10", "```\nThe examples in the User Guide have been updated to match the version 1.0 \nrelease of\nGson.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 31 May 2008 at 12:43\n- Changed state: **Fixed**\n =||= ", 0], ["13", "Publish Gson jars in maven2 repository", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:32 PM", "```\nThe subject says it all. We should figure out how guice guys are doing it,\nand do the same. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 30 May 2008 at 10:00", "```\nCreated a JIRA issue in the maven project for this: \nhttp://jira.codehaus.org/browse/MAVENUPLOAD-2128\n\n```\n\nOriginal comment by `inder123` on 7 Jul 2008 at 6:18\n =||= ```\nGson 1.1 is now available in maven2 central repository. We should figure out a \nway to\nupdate it automatically. \n```\n\nOriginal comment by `inder123` on 11 Aug 2008 at 9:25\n- Changed state: **Started**\n =||= ```\nYes please.\n```\n\nOriginal comment by `antony.s...@gmail.com` on 19 Nov 2008 at 10:12\n =||= ```\nI'm guessing this [1] is where it will now continue to be available and \nup-to-date? I\njust wanted to clarify, since this issue is still open.\n\n[1] http://google-gson.googlecode.com/svn/mavenrepo\n```\n\nOriginal comment by `estebis...@gmail.com` on 28 Jan 2009 at 4:31\n =||= ```\nYou are right that http://google-gson.googlecode.com/svn/mavenrepo remains the \nplace \nwhere latest versions will be available. Maven2 central repository has an \nearlier \nversion, but it is too much work to upload a new version there. \n\nAny volunteers?\n```\n\nOriginal comment by `inder123` on 28 Jan 2009 at 5:04\n =||= ```\nWe have what we have in the maven central repository, and we have our own with \nthe \nlatest and greatest Gson. Not worth keeping this bug open anymore.\n```\n\nOriginal comment by `inder123` on 1 Oct 2009 at 3:59\n- Changed state: **Fixed**\n =||= ```\ninder123: As you asked for in the JIRA entry, automatic updates are possible and\ndescribed at\nhttp://maven.apache.org/guides/mini/guide-central-repository-upload.html#Syncing\n_your_own_repository_to_the_central_repository_automatically\n\nI'd really like to see google-gson in the official Maven 2 repositories as that \nwould\nfree every Maven 2 user from the need to add the current repository explicitly \nto\n`pom.xml`.\n```\n\nOriginal comment by `j...@nwsnet.de` on 12 Oct 2009 at 12:52\n =||= ", 0], ["14", "Can not parse null arrays", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:34 PM", "```\nWhat steps will reproduce the problem?\n1. JSON to parse: \n2. Java: class Test { Object[] my_array; }\n3. gson.fromJson(\"{\\\"my_array\\\": null}\", Test.class);\n\nWhat is the expected output? What do you see instead?\n\nExpected: A Test object with my_array initialized to null.\nActual: java.lang.NullPointerException\n        at\ncom.google.gson.JsonDeserializationVisitor.visitChildAsArray(JsonDeserialization\nVisitor.java:93)\n        at\ncom.google.gson.JsonObjectDeserializationVisitor.visitArrayField(JsonObjectDeser\nializationVisitor.java:114)\n        at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:172)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)\n        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:75)\n        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:47)\n        at com.google.gson.Gson.fromJson(Gson.java:310)\n        at com.google.gson.Gson.fromJson(Gson.java:285)\n\nWhat version of the product are you using? On what operating system?\n\nv1_0 on Linux\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 2 Jun 2008 at 11:52", "```\nSorry, the JSON missing in \"step 1\" is inline in \"step 3\".\n```\n\nOriginal comment by `ch...@gmail.com` on 2 Jun 2008 at 11:53\n =||= ```\nAlso, null values outside of arrays also fail to parse due to a Precondition \nfailure:\n\njava.lang.IllegalArgumentException: condition failed: false\n        at com.google.gson.Preconditions.checkArgument(Preconditions.java:39)\n        at com.google.gson.Preconditions.checkNotNull(Preconditions.java:34)\n        at\ncom.google.gson.JsonDeserializationVisitor.<init>(JsonDeserializationVisitor.jav\na:46)\n        at\ncom.google.gson.JsonObjectDeserializationVisitor.<init>(JsonObjectDeserializatio\nnVisitor.java:37)\n        at\ncom.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio\nnVisitor.java:85)\n        at\ncom.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese\nrializationVisitor.java:72)\n        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)\n        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:75)\n        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:47)\n\nI'm pretty sure null is a valid JSON type, but even if it's not, then this \nshould\nthrow a ParseError.\n```\n\nOriginal comment by `ch...@gmail.com` on 2 Jun 2008 at 5:12\n =||= ```\nnull is a valid JSON type as per JSON spec\n(http://tools.ietf.org/id/draft-crockford-jsonorg-json-04.txt). I just wrote a \ntest\n(thanks for providing a good example) and this is indeed failing. We will fix \nthis\nand put it in our next release. \n```\n\nOriginal comment by `inder123` on 2 Jun 2008 at 5:51\n- Changed state: **Started**\n =||= ```\nFixed in r90: \nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ec69\nab8bcddfa3da\n\nActually, well designed Json should just omit the field instead of passing \nnulls.\nHowever, Gson should handle the case as well, and that is why we have now added\nsupport for it. \n```\n\nOriginal comment by `inder123` on 2 Jun 2008 at 7:37\n- Changed state: **Fixed**\n =||= ```\nRevised the fix. See: \nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/1507\n840c6b401a0c\n```\n\nOriginal comment by `inder123` on 2 Jun 2008 at 8:11\n =||= ", 0], ["15", "Add a ZIP download", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:36 PM", "```\nWe should add a ZIP file as a download which includes the license, jar and\nREADME for Gson.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 3 Jun 2008 at 5:51", "```\nFixed in r93\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/da61\na2050b013c04\nand r92\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/38dc\n2d40ab7fc3ed\n```\n\nOriginal comment by `inder123` on 18 Jun 2008 at 12:07\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 18 Jun 2008 at 12:08\n =||= ", 0], ["16", "Provide annotation to rename an individual field", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:37 PM", "```\nI'd like the ability to control the name of a property being serialized on\na per-field basis using an annotation. Something like:\n\n   @SerializeAsName(\"id\")\n   String getUniqueName() { ... }\n\nOther alternatives are @Name, @Named, @JsonName, etc.\n```\n\nOriginal issue reported on code.google.com by `viri...@gmail.com` on 4 Jun 2008 at 10:09", "```\nThis request is similar to Issue 9.\n\nWe should develop a generic naming policy that can handle both annotation based \nand\ngeneral field renaming (or a combination of naming policies).\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 6 Jun 2008 at 12:30\n =||= ```\nGeneric naming policy infrastructure has been added so now I need to hook in the\nannotation based naming strategy.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Jun 2008 at 4:50\n- Changed state: **Accepted**\n =||= ```\nFeature request submitted in r104.  This change will be rolled out in the 1.1 \nrelease.\n\nSee https://sites.google.com/site/gson/gson-roadmap for information on upcoming \nreleases.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 30 Jun 2008 at 2:30\n- Changed state: **Fixed**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["17", "Json + schema", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:40 PM", "```\nhttp://groups.google.com/group/json-schema/web/json-schema-proposal---second-dra\nft\nhas a discussion on how to define a Json schema. We should explore how this\ncan be used for Gson. In Gson, currently, the Java classes define the\nschema. May be we can provide a validator that validates the schema against\na set of classes.Or generates the Json schema corresponding to a set of\nclasses (using the ObjectNavigator). \n```\n\nOriginal issue reported on code.google.com by `inder123` on 13 Jun 2008 at 8:46", "```\nFYI... I've started implementing a JsonValidator class to do just this based on \ntop\nof the Gson library.  I have only implemented the validation I have needed so \nfar,\nbut I can post it if you are interested.\n```\n\nOriginal comment by `z13g...@gmail.com` on 14 Apr 2009 at 8:33\n =||= ```\nIt would be great if you can either post it in a forum, or create a new \nopen-source \nproject that we can point people to for this. \nThanks\n```\n\nOriginal comment by `inder123` on 14 Apr 2009 at 8:41\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:25\n- Added labels: **Milestone-Undefined**\n =||= Original comment by `limpbizkit` on 24 Jan 2011 at 10:21\n- Changed title: **Json + schema**\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nJoel pointed me to this IETF draft\nhttp://tools.ietf.org/html/draft-zyp-json-schema-03\n\nI don't like it because it is not simple. It has many features that should be \nleft up to the application-level: value range checking, hrefs, IDs, enums, \ninheritance, refs, etc.  These all remind me of XML, which is why we all like \nJSON so much.\n```\n\nOriginal comment by `limpbizkit` on 15 Feb 2011 at 12:21\n =||= ```\n@limpbizkit: I generally agree with your concerns about using a schema language.\n\nHowever, the big advantage of a schema language is that it is language neutral \ndocumentation. Currently, the Java Objects used by Gson is the real \nspecification. Having a schema would be nice.\n```\n\nOriginal comment by `inder123` on 8 Jul 2011 at 3:31\n =||= ```\n@inder123: ya, a specification can provide a neutral guide to do interaction \nwith other language or platform. But implementing such a specification is a \ntime-consuming work. For your experience, how much work it should take to do \nthis work? you know, I am really interested in it.\n```\n\nOriginal comment by `alloyer` on 8 Jul 2011 at 3:42\n =||= ```\nIt is not going to be too much work. How about you experiment with generating \nDOM with Gson by using Gson.toJsonTree() method. Currently \nGson.toJson(JsonElement e) method prints the JSON for the DOM tree. Instead, \nyou need to output the schema. Should be as simple as walking through each of \nthe DOM nodes and writing schema elements to the output.\n```\n\nOriginal comment by `inder123` on 8 Jul 2011 at 5:11\n =||= ```\nThere are plenty of time, users choose XML, for it's concrete schema validation \nfeature. a quick solution on top of my head , may be not so efficient, we can \nabstract. That is \nconvert json schema in to xml one (less work I assume)\nuse xml validation feature to verify data. \n\n```\n\nOriginal comment by `estifa...@google.com` on 8 Jul 2011 at 5:37\n =||= ```\nI am starting the work to describe a Java type in Json schema. But I can't get \nhow to describe the generic type of a list? I know I can use \"array\" to \nrepresent a List type, but where to set the entity type for the List?\n```\n\nOriginal comment by `alloyer` on 11 Jul 2011 at 8:50\n =||= ```\nMight be worth asking this question on the JSON Schema group:\nhttps://groups.google.com/forum/#!forum/json-schema\n\nI am actually not sure if this JSON schema is the most popular schema language \nfor JSON. Please look around to see if you find a schema language that is \ncomplete and has gained most traction.\n```\n\nOriginal comment by `inder123` on 11 Jul 2011 at 8:57\n =||= ```\nHere is a pointer to another schema language for JSON:\nhttp://tools.ietf.org/html/draft-zyp-json-schema-03\n\nIt seems like this one is from IETF so is more official. Please help figure out \nwhich is the most popular schema language.\n```\n\nOriginal comment by `inder123` on 11 Jul 2011 at 9:00\n =||= ```\nIf we ever do this, I'd prefer we do it as an optional extension.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:50\n =||= ```\nIt only took me 2 years to get around to posting it, but here is the JSON \nValidation code a wrote a while ago.\n\nFeel free to do with it as you will.  If (within the next few years) I create a \nopensource project for it, I'll post here.  If someone else does, please post a \nnote here so that I can follow it.\n\nThanks.\n```\n\nOriginal comment by `zieg...@amaratech.com` on 6 Feb 2012 at 10:44\n\nAttachments:\n- [JSONValidator.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-17/comment-14/JSONValidator.java)\n- [JSONValidationException.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-17/comment-14/JSONValidationException.java)\n =||= ```\nFYI, you have a bug on line 118. It should be \nANY.getTypeString().equals(type)), not ANY.equals(type) -- in the latter case, \nyou're using equals() to compare an Enum<Type> and a String.\n```\n\nOriginal comment by `tedpenni...@gmail.com` on 7 Feb 2012 at 2:48\n =||= ```\nThanks for pointing that out.\n\nFYI, I use JSON for my web APIs.  I use the schema as an easy way of validating \ninput (and output) data.  Since I use the schema file for validation in my \ncode, I can publish it and provides a definitive documentation of the API.  For \nthis, I find it really useful.\n```\n\nOriginal comment by `zieg...@amaratech.com` on 10 Feb 2012 at 11:50\n =||= ```\nI don't think we're gonna get to this.\n```\n\nOriginal comment by `limpbizkit` on 16 Apr 2012 at 10:47\n- Changed state: **WontFix**\n =||= ", 0], ["18", "Gson does not handle null values in arrays properly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:44 PM", "```\n(reported by Ben Littman)\nThis:\n    System.out.println(gson.toJson(new String[]{\"foo\", \"bar\"}));\nresults in:\n[\"foo\", \"bar]\n\nBut should a null value be allowed, as in:\n    System.out.println(gson.toJson(new String[]{\"foo\", null,\"bar\"}));\nwhich results in:\njava.lang.NullPointerException\n        at\ncom.google.gson.JsonTreeNavigator.visitChild(JsonTreeNavigator.java:76)\n        at\ncom.google.gson.JsonTreeNavigator.navigate(JsonTreeNavigator.java:39)\n        at\ncom.google.gson.JsonCompactFormatter.format(JsonCompactFormatter.java:112)\n        at com.google.gson.Gson.toJson(Gson.java:270)\n        at com.google.gson.Gson.toJson(Gson.java:243)\n\nAlso, this:\n    String[] stringArray = gson.fromJson(\"[\\\"foo\\\", \\\"bar\\\"]\", String[].class);\nreturns the string array one would expect\n\nBut an serialized array with a null in it:\n    String[] stringArray = gson.fromJson(\"[\\\"foo\\\", null, \\\"bar\\\"]\",\nString[].class);\nresults in:\njava.lang.IllegalState\nException\n        at\ncom.google.gson.JsonArrayDeserializationVisitor.visitArray(JsonArrayDeserializat\nionVisi\ntor.java:73)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:136)\n        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonArray(JsonDeserializat\nionCont\nextDefault.java:63)\n        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContex\ntDefault.java:45)\n        at com.google.gson.Gson.fromJson(Gson.java:319)\n        at com.google.gson.Gson.fromJson(Gson.java:292)\n```\n\nOriginal issue reported on code.google.com by `inder123` on 26 Jun 2008 at 7:38", "```\nFixed in r99:\nhttp://groups.google.com/group/google-gson-codereviews/browse_thread/thread/c01b\ndc408a4dae95#\n```\n\nOriginal comment by `inder123` on 26 Jun 2008 at 7:46\n- Changed state: **Fixed**\n =||= ", 0], ["19", "Gson should handle stack overflow and other errors happening from parsing untrusted JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:44 PM", "```\n(reported by Meder):\n\n'print \"{\\\"a\\\":[],\\\"a\\\":\" x 2000'`\n`perl -e 'print \"{\\\"a\\\":[],\\\"\"; print \"X\" x 6000;'`\n\nto generate really large JSON and feed it to GSON. Gson brings down the JVM\nwith stack overflow error. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:35", "Original comment by `inder123` on 8 Jul 2008 at 5:44\n =||= ```\nHere is a test that will reproduce this problem. On the positive side, Gson is \nable\nto handle individual strings upto 103kb on my machine. \n\n  public void testReallyLongStrings() {\n    StringBuilder sb = new StringBuilder(8096);\n    sb.append(\"com.codegoogle.gson.gks.anon.GksDataNotFoundException: Instrument 10\nnot found.\\n\");\n    sb.append(\"\\tat\ncom.codegoogle.gson.common.backend.reflect.Instrument.load(Instrument.java\");\n    sb.append(\":135)\\n\\tat\ncom.codegoogle.gson.common.entities.InstrumentFactoryImpl$1.run(Ins\");\n    sb.append(\"trumentFactoryImpl.java:70)\\n\\tat\ncom.codegoogle.gson.common.InstrumentFactory\");\n    sb.append(\"Impl$1.run(InstrumentFactoryImpl.java:98)\\n\\tat\ncom.codegoogle.gson.common.base.\");\n\nsb.append(\"CbgRunnableToGksRunnableAdapter.run(CbgRunnableToGksRunnableAdapter.j\nava:32)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.anon.GksConnManager.run(GksConnectionManager.java:15)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.common.entities.NonTransactionalRunner.run(NonTransactional\"\n);\n    sb.append(\"Runner.java:4544)\\n\\tat\ncom.codegoogle.gson.common.base.ConnectionContextSwitch\");\n    sb.append(\"er$1.run(ConnectionSwitcher.java:20)\\n\\tat\ncom.codegoogle.gson.anon.GksConnecti\");\n    sb.append(\"onManager.run(GksConnectionManager.java:65)\\n\\tat\ncom.codegoogle.gson.common.base\");\n\nsb.append(\".ConnectionContextSwitcher.run(ConnectionContextSwitcher.java:2238)\\n\n\\tat\ncom\");\n\nsb.append(\".google.common.entities.base.SierraContext.runNonTransactionalOnRepli\nca(Sierra\");\n    sb.append(\"Context.java:60)\\n\\tat\ncom.codegoogle.gson.common.InstrumentFactoryImpl.getIns\");\n    sb.append(\"(InstrumentFactoryImpl.java:7)\\n\\tat\ncom.codegoogle.gson.common.webservice.buyer\");\n\nsb.append(\".facades.common.BuyerFacadecommon.getDomainInstrument(BuyerFacadecomm\non.jav\");\n    sb.append(\"a:183)\\n\\tat\ncom.codegoogle.gson.common.buyer.facades.common.CartFacadePaym\");\n    sb.append(\"ents.update(CartFacadecommon.java:39)\\n\\tat\ncom.codegoogle.gson.common.buy\");\n\nsb.append(\"er.facades.common.CartFacadecommon.update(CartFacadecommon.java:2415)\n\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.common.webservice.buyer.facades.common.CartFacadecommo.upda\"\n);\n    sb.append(\"te(CartFacadecommon.java:2053)\\n\\tat\ncom.codegoogle.gson.common.buyer.web.B\");\n\nsb.append(\"uyerWebServiceCartPagelet.executePut(BuyerWebServiceCartPagelet.java:\n48)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.common.webservice.buyer.web.CartPagelet.onPostCar\");\n    sb.append(\"tSelections(BuyerWebServiceCartPagelet.java:12)\\n\\tat\nsun.reflect.NativeMethodAc\");\n    sb.append(\"cessorImpl.invoke0(Native Method)\\n\\tat\nsun.reflect.NativeMethodAccessorImpl.inv\");\n    sb.append(\"oke(Unknown Source)\\n\\tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(Unknow\");\n    sb.append(\"n Source)\\n\\tat java.lang.reflect.Method.invoke(Unknown Source)\\n\\tat\ncom.gson\");\n\nsb.append(\".web.pagelets.di.ObjectDriver$MethodInvoker.invoke(ObjectDriver.java:\n86)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.web.di.ObjectDriver.execute(ObjectDriver.java:155)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.web.ReflectorPageletDriver.invokeExecuteOrOnEvent(Reflect\");\n    sb.append(\"orPageletDriver.java:84)\\n\\tat\ncom.codegoogle.gson.web.ReflectorPageletDriver.ex\");\n    sb.append(\"ecute(ReflectorPageletDriver.java:54)\\n\\tat\ncom.codegoogle.gson.web.DelegatingPa\");\n    sb.append(\"geletDriver.execute(DelegatingPageletDriver.java:20)\\n\\tat\ncom.codegoogle.gson.w\");\n\nsb.append(\"ebservice.buyer.web.BuyerTosPageletDriver.execute(BuyerTosPageletDriv\ner.java:44)\");\n    sb.append(\"\\n\\tat\ncom.codegoogle.gson.web.DelegatingPageletDriver.execute(DelegatingPagelet\");\n    sb.append(\"Driver.java:20)\\n\\tat\ncom.codegoogle.gson.common.webservice.web.BuyerAuthenticati\");\n\nsb.append(\"onPageletDriver.execute(BuyerAuthenticationPageletDriver.java:58)\\n\\t\nat\ncom.goog\");\n\nsb.append(\"le.web.pagelets.DelegatingPageletDriver.execute(DelegatingPageletDriv\ner.java:20)\");\n    sb.append(\"\\n\\tat\ncom.codegoogle.gson.common.apps.common.DbTransactionPageletDriver.access\");\n    sb.append(\"$001(DbTransactionPageletDriver.java:17)\\n\\tat\ncom.codegoogle.gson.apps.common.p\");\n\nsb.append(\"agelet.DbTransactionPageletDriver$1.run(DbTransactionPageletDriver.ja\nva:28)\\n\\t\");\n    sb.append(\"at\ncom.codegoogle.gson.common.apps.common.DbTransactionPageletDriver$1.run(DbTr\");\n    sb.append(\"ansactionPageletDriver.java:26)\\n\\tat\ncom.codegoogle.gson.common.base.Transact\");\n    sb.append(\"ionalRunner$Wrapper.run(TransactionalRunner.java:64)\\n\\tat\ncom.codegoogle.gson.\");\n\nsb.append(\"common.entities.base.GksTransactionBodyAdapter.run(GksTransactionBody\nAdapter.j\");\n    sb.append(\"ava:56)\\n\\tat\ncom.codegoogle.gson.GksConnectionManager.runTransaction(GksConnecti\");\n    sb.append(\"onManager.java:1040)\\n\\tat\ncom.codegoogle.gson.GksConnectionManager.runTransactio\");\n    sb.append(\"n(GksConnectionManager.java:961)\\n\\tat\ncom.codegoogle.gson.common.base.Transac\");\n    sb.append(\"tionalRunner.newTransaction(TransactionalRunner.java:224)\\n\\tat\ncom.gson.payme\");\n\nsb.append(\"nts.entities.base.TransactionalRunner.run(TransactionalRunner.java:13\n4)\\n\\tat\nco\");\n\nsb.append(\"m.google.common.entities.base.ConnectionContextSwitcher$1.run(Connect\nionContex\");\n    sb.append(\"tSwitcher.java:90)\\n\\tat\ncom.codegoogle.gson.GksConnectionManager.run(GksConnecti\");\n    sb.append(\"onManager.java:615)\\n\\tat\ncom.codegoogle.gson.common.base.ConnectionContextSwi\");\n    sb.append(\"tcher.run(ConnectionContextSwitcher.java:78)\\n\\tat\ncom.codegoogle.gson.common.\");\n    sb.append(\"SierraContext.runPrimary(SierraContext.java:373)\\n\\tat\ncom.codegoogle.gson.common.\");\n\nsb.append(\"apps.common.pagelet.DbTransactionPageletDriver.execute(DbTransactionP\nageletDrive\");\n    sb.append(\"r.java:26)\\n\\tat\ncom.codegoogle.gson.web.DelegatingPageletDriver.execute(Delegat\");\n    sb.append(\"ingPageletDriver.java:20)\\n\\tat\ncom.codegoogle.gson.web.DelegatingPageletDriver.\");\n    sb.append(\"execute(DelegatingPageletDriver.java:20)\\n\\tat\ncom.codegoogle.gson.common.bu\");\n\nsb.append(\"yer.web.BuyerWebServiceErrorPageletDriver.execute(BuyerWebServiceErro\nrPageletDri\");\n    sb.append(\"ver.java:42)\\n\\tat\ncom.codegoogle.gson.web.PageletServletAdapterWithoutScope.ser\");\n    sb.append(\"vice(PageletServletAdapterWithoutScope.java:58)\\n\\tat\ncom.codegoogle.gson.web.Pa\");\n    sb.append(\"geletServletAdapter2.service(PageletServletAdapter2.java:52)\\n\\tat\njavax.servlet\");\n    sb.append(\".HttpServlet.service(HttpServlet.java:102)\\n\\tat\ncom.codegoogle.gson.FilteredSer\");\n    sb.append(\"vlet$ChainEnd.doFilter(FilteredServlet.java:133)\\n\\tat\ncom.codegoogle.gson.common\");\n\nsb.append(\".monitorableservices.web.pagelets.LocaleContextFilter.doFilter(Locale\nContextFil\");\n    sb.append(\"ter.java:72)\\n\\tat\ncom.codegoogle.gson.FilteredSt$Chain.doFilter(FilteredServlet\");\n    sb.append(\".java:131)\\n\\tat\ncom.codegoogle.gson.common.apps.DatabaseFilter.doFilter(Data\");\n    sb.append(\"baseFilter.java:31)\\n\\tat\ncom.codegoogle.gson.FilteredSet$Chain.doFilter(Filtered\");\n    sb.append(\"Servlet.java:131)\\n\\tat\ncom.codegoogle.gson.common.apps.StatsFilter.doFilter(\");\n    sb.append(\"StatsFilter.java:75)\\n\\tat\ncom.codegoogle.gson.FilteredSet$Chain.doFilter(Filtere\");\n    sb.append(\"dServlet.java:131)\\n\\tat\ncom.codegoogle.gson.common.apps.LoggingFilter.doFilt\");\n    sb.append(\"er(LoggingFilter.java:31)\\n\\tat\ncom.codegoogle.FilteredServlet$Chain.doFilter(Fi\");\n    sb.append(\"lteredServlet.java:131)\\n\\tat\ncom.codegoogle.gson.di.guice.GuiceFilter.doFil\");\n    sb.append(\"ter(GuiceFilter.java:419)\\n\\tat\ncom.codegoogle.FilteredServlet$Chain.doFilter(Fil\");\n    sb.append(\"teredServlet.java:13)\\n\\tat\ncom.codegoogle.FilteredServlet.service(FilteredServ\");\n    sb.append(\"let.java:103)\\n\\tat\ncom.codegoogle.HttpConnection.runServlet(HttpConnection.java\");\n    sb.append(\":65)\\n\\tat\ncom.codegoogle.HttpConnection.run(HttpConnection.java:275)\\n\\tat com\");\n\nsb.append(\".codegoogle.parser.DispatchQueue$WorkerThread.run(DispatchQueue.java:\n3139)\\n\");\n\n    String initialStackTrace = sb.toString();\n    for (int i = 1; i < 18; ++i) {\n      sb.append(initialStackTrace);\n    }\n    String stackTrace = sb.toString();\n    System.out.println(\"length at which Gson causes stack overflow errors: \" +\nstackTrace.length());\n    String json = \"{\\\"message\\\":\\\"Instrument 10 not found.\\\",\"\n      + \"\\\"stackTrace\\\":\\\"\" + stackTrace + \"\\\"}\";\n    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);\n    assertTrue(target.message.contains(\"Instrument\"));\n    assertTrue(target.stackTrace.contains(\"DispatchQueue\"));\n  }\n```\n\nOriginal comment by `inder123` on 17 Jul 2008 at 12:41\n =||= ```\nr116 includes a test that can reproduce this bug.\n```\n\nOriginal comment by `inder123` on 17 Jul 2008 at 8:18\n =||= ```\nFixed in r117\n```\n\nOriginal comment by `inder123` on 17 Jul 2008 at 8:52\n- Changed state: **Fixed**\n =||= ```\nThis is a duplicate of Issue 47\nhttp://code.google.com/p/google-gson/issues/detail?id=47\n```\n\nOriginal comment by `inder123` on 14 Oct 2008 at 9:44\n- Changed state: **Duplicate**\n =||= ", 0], ["20", "Gson should limit the allowed recursion depth", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:46 PM", "```\n(reported by Meder) While parsing untrusted JSON, or even during attempting\nto serialize classes, Gson should consider limiting the maximum allowed\ndepth for recursion. There should also be an option in GsonBuilder to set a\ndifferent value.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:43", "Original comment by `inder123` on 8 Jul 2008 at 5:44\n =||= ```\nThis bug is similar to issue 19 which is fixed in r118, r117, and r116. \nHowever, I\nwill leave it open for now to see if we need to provide explicit option to set\nrecursion depth. One problem is how does anyone know what a good value for the \ndepth is? \n```\n\nOriginal comment by `inder123` on 19 Jul 2008 at 1:09\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= Original comment by `inder123` on 1 Oct 2009 at 3:59\n- Added labels: **Milestone-Release1.5**\n =||= ```\n[deleted comment]\n```\n =||= ```\nI agree to add param dept, It does not work fine when I use Hibernate\n\n```\n\nOriginal comment by `weit...@263.net` on 22 Dec 2009 at 8:04\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:28\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:25\n- Added labels: **Milestone-Undefined**\n =||= ```\nWhy is this needed?\n```\n\nOriginal comment by `michael.hixson@gmail.com` on 19 Apr 2011 at 6:54\n =||= ```\nI say that recursion should not be used for parsing at all, queues should be \nused instead to avoid code recursion all together.\n\n```\n\nOriginal comment by `pawel.ve...@gmail.com` on 17 Dec 2011 at 2:25\n =||= ```\nWe don't recurse in the streaming parser.\n```\n\nOriginal comment by `limpbizkit` on 23 Dec 2011 at 5:35\n- Changed state: **WontFix**\n =||= ", 0], ["21", "Support Readers and Writers for Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:49 PM", "```\nTo support streaming input/output it should be possible to invoke toJson\nwith a writer, and fromJson with a Reader. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:46", "Original comment by `inder123` on 8 Jul 2008 at 5:46\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `joel.leitch@gmail.com` on 19 Jul 2008 at 8:45\n =||= ```\nFixed in r143 \nWe still need to write tests for this feature though.\n```\n\nOriginal comment by `inder123` on 12 Aug 2008 at 12:47\n- Changed state: **Fixed**\n =||= ", 0], ["22", "GsonBuilder.prettyPrint causes extra element when serializer returns JsonArray", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:50 PM", "```\nWhat steps will reproduce the problem?\n1. Run the attached unit test\n\nWhat is the expected output? What do you see instead?\n was expecting \"[1,2,3,4,5]\" and got \"[,1,2,3,4,5]\"\n\nWhat version of the product are you using? On what operating system?\n GSON 1.1.1, Windows XP, Java 1.6.0_04\n\nPlease provide any additional information below.\n If I don't call setPrettyPrint, the unit test passes.  (Sorry if this\nreport came in twice, Google barfed the first time I tried to submit it)\n\n```\n\nOriginal issue reported on code.google.com by `ericmu...@gmail.com` on 23 Jul 2008 at 8:30\n\nAttachments:\n- [GsonBuilderPrettyPrintArrayTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-22/comment-0/GsonBuilderPrettyPrintArrayTest.java)", "```\nWe will fix this in our next release. Thanks for reporting this bug. \n```\n\nOriginal comment by `inder123` on 24 Jul 2008 at 1:20\n- Changed state: **Accepted**\n =||= Original comment by `joel.leitch@gmail.com` on 26 Jul 2008 at 4:51\n =||= ```\nFix was submitted in r122.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 26 Jul 2008 at 5:24\n- Changed state: **Fixed**\n =||= ", 0], ["23", "Gson fails to parse strings with chinese characters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:51 PM", "```\nGson fails to parse: \n\n{\"name\": \"\u597d\", \"code\": \"aa\", \"remark\": \"aa\"}\n\ngson.fromJson(jsonString, TbDepartment.class);\n\n\u7684\u65f6\u5019\u51fa\u73b0\u5f02\u5e38 Failed parsing JSON source: {\"name\": \"\u597d\", \"code\": \"aa\",\n\"remark\": \"aa\"} to Json \n\nSee:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/588a87b9ef1fc479\n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 Jul 2008 at 12:28", "```\nAdded a test to reproduce this bug in r131. Seems like our parser does not \nhandle\nunicode strings properly.\n```\n\nOriginal comment by `inder123` on 5 Aug 2008 at 10:14\n- Changed state: **Accepted**\n =||= ```\nr134 has some additional tests some of which pass. One thing to note is that \nGson\nwill serialize a string with chinese characters correctly, by converting them to\nescaped unicode. It would probably be better to convert these to unescaped \nunicode,\nbut at least it is valid Json.\n```\n\nOriginal comment by `inder123` on 7 Aug 2008 at 11:54\n =||= ```\nFixed in r138 by enabling hte parser to treat all input as unicode strings. This\nworks because we are feeding java strings to the parser, and java strings are \nalways\nunicode.\n```\n\nOriginal comment by `inder123` on 8 Aug 2008 at 2:04\n- Changed state: **Fixed**\n =||= ```\nIssue 80 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Dec 2008 at 9:38\n =||= ", 0], ["24", "Gson should support serialization of nulls", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:52 PM", "```\nSee:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/48a2ce8b9cc2d7ee\n\nWe should consider supporting a GsonBuilder mode to send out nulls as well. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 Jul 2008 at 12:30", "```\nFixed in r126 by providing a GsonBuilder.serializeNulls() option. I also added \na new\nclass JsonNull that is used to represent a JsonNull value for use by custom \nserializers. \n```\n\nOriginal comment by `inder123` on 31 Jul 2008 at 1:51\n- Changed state: **Fixed**\n =||= ```\nAdded a test for custom serialization using JsonNull in r127\n```\n\nOriginal comment by `inder123` on 31 Jul 2008 at 2:02\n =||= ", 0], ["25", "java.lang.IllegalArgumentException when giving a double in place of a String", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:53 PM", "```\nWhat steps will reproduce the problem?\n\nTry to parse {\"version\": 1.0} into class A { String version; }\n\nWhat is the expected output? What do you see instead?\n\nI expect a JsonParsingException, but instead get:\n\njava.lang.IllegalArgumentException: Can not adapt type class java.lang.Double \nto class \njava.lang.String\n    at com.google.gson.PrimitiveTypeAdapter.adaptType(PrimitiveTypeAdapter.java:64)\n    at com.google.gson.TypeAdapterNotRequired.adaptType(TypeAdapterNotRequired.java:51)\n    at \ncom.google.gson.JsonObjectDeserializationVisitor.visitPrimitiveField(JsonObjectD\neserializationVis\nitor.java:131)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)\n    at \ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextD\nefault.java:75)\n    at \ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefaul\nt.java:47)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at com.google.gson.Gson.fromJson(Gson.java:299)\n\nWhat version of the product are you using? On what operating system?\nv1_1 on Linux\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 29 Jul 2008 at 10:21", "Original comment by `joel.leitch@gmail.com` on 30 Jul 2008 at 11:55\n- Changed state: **Accepted**\n =||= ```\nFixed in r125.  Expected to roll out with Release 1.2.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:49\n- Changed state: **Fixed**\n =||= ", 0], ["26", "Map serialization fails", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:54 PM", "```\nWhat steps will reproduce the problem?\n1. new Gson().toJson(new HashMap<String, String>());\n\nWhat is the expected output?\n{}\n\nWhat do you see instead?\nFails with the attached exception.\n\nWhat version of the product are you using? On what operating system?\ngson 1.1.1\nJDK 1.5, JDK 1.6\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `cedric.v...@gmail.com` on 30 Jul 2008 at 9:57\n\nAttachments:\n- [ParameterizedTypeClassCastException.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-26/comment-0/ParameterizedTypeClassCastException.txt)", "Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:59\n- Changed state: **Accepted**\n =||= ```\nYou need to handle top-level \"Parameterized\" types differently than Class \nobjects.\n\nDue to \"Type Erasure\" in the Java language, when you pass in a instance of the \n\"Map\"\nobject, all generic information is lost.  To get around this problem, we \noverloaded\nthe toJson method to take a \"Type\" parameter.\n\nHere is an example:\n\nimport com.google.gson.reflect.TypeToken;\n\npublic class TopLevelMapExample {\n  public static void main(String[] args) {\n    Type mapType = new TypeToken<Map<String, String>>() {}.getType();\n    String json = new Gson().toJson(new HashMap<String, String>(), mapType);\n    System.out.println(json);\n  }\n}\n\n----\n\nI am updating the code to throw an IllegalArgumentException with a very \ndescriptive\nmessage.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 7:25\n- Changed state: **Invalid**\n =||= ```\nr128 changed the code to raise a IllegalArgumentException instead.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 7:57\n =||= ", 0], ["27", "Update Documentation", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:55 PM", "```\nUpdate the \"User Guide\" to reflect the new features that have been added to\nGSON since its initial launch.\n\nHere is a list of some of the features:\n- Field Naming Policy including the new \"SerializedName\" annotation\n- Null Field Support (coming in 1.2)\n- Reader and Writer support (coming in 1.2)\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 31 Jul 2008 at 1:08", "```\nI'm closing out some obsolete bugs.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:25\n- Changed state: **WontFix**\n =||= ", 0], ["28", "Should support SAX like function?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:56 PM", "```\nSometime, I need parse huge json input or I need customize the pasre\nprocess. Having SAX stream API is going to be very helpful.\n```\n\nOriginal issue reported on code.google.com by `jiming...@gmail.com` on 4 Aug 2008 at 3:01", "```\nWould this be served by providing a hook to plug-in a different JSON parser? \n\nCan you give us some concrete examples of where this will be useful? You can use\ncustom serializer/deserializers to do the customized handling anyway. But you \nare\nright, our parser creates the parse tree first, so can choke on very large \ninput. \n```\n\nOriginal comment by `inder123` on 4 Aug 2008 at 6:44\n =||= ```\nhttp://www.cowtowncoder.com/hatchery/jackson/index.html\n\nI am using JSON-lib and looking for a better one. I myself like upper lib so far\nsince it supply a Streaming API which allows to process huge data. But then I \nfound\nyour lib, which is also a nice one expect do not support Streaming API. I think \nwhich\nwould be a highlight if you can add it in.\n\nWhen I said customize the parsing, I mean you could supply event like SAX do, \nso I\ncan create new instance or set value according to the events. \n\nI do not how to do these because I do not know parsing algorithm. But I wish to\nsupply some idea to make gson better.\n\nThanks,\n\nJiming\n\n\n\n\n```\n\nOriginal comment by `jiming...@gmail.com` on 5 Aug 2008 at 3:09\n =||= ```\nWe thought more about it, and it seems that this is worth doing since it will \nenable\nGson to process really large documents. We will essentially have to rewrite our\nparser to either support SAX (event based) or StAX (Streaming based) parsing. \nThis\ncan probably be done by modifying our JavaCC grammar itself. This is a major\nundertaking, but we will consider this for one of our major releases. \n```\n\nOriginal comment by `inder123` on 5 Aug 2008 at 6:12\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nGreat to hear that!\n\nThanks and looking forward to that.\n\nJiming\n```\n\nOriginal comment by `jiming...@gmail.com` on 6 Aug 2008 at 2:19\n =||= ```\nJust a suggestion: make it \"pull\" variety (~= stax), since it is trivial to \ninvert\nStax to produce SAX-like events (so \"SAX\" part can build on lower-level \"Stax\" \npart).\nThe reverse is not generally possible without multi-threading (or language \nsupport\nfor co-procedures/closures).\n\n```\n\nOriginal comment by `tsaloranta@gmail.com` on 11 Aug 2008 at 10:30\n =||= ```\nHi I just ran into this issue as well.  Any timeline for when issue 28 will be \naddressed?\n```\n\nOriginal comment by `toddwe...@gmail.com` on 21 Nov 2008 at 4:56\n =||= ```\nWell, I looked into rewriting our JavaCC parser to be a SAX or pull-based one, \nand \nwas not terribly successful. At this time, we have put this on hold. If someone \ncan \npoint us to a third-party SAX/pull parser that we can adapt, we will consider \nusing \nit. Or better, help us write one. \n\nThis will likely have an impact on the backward compatibility. However, that is \nsomething we can carefully weigh on.\n```\n\nOriginal comment by `inder123` on 22 Nov 2008 at 2:15\n =||= ```\nWe dont have SAX like functions, but Gson 1.4 adds a JsonParserAsync class that \nlets \nyou parse multiple JSON objects on a stream. \n\nOverall, backwards compatibility is quite important for us, so I dont see us \nbreaking \nthat in favor of a SAX like parser (which is in general harder to use).\n```\n\nOriginal comment by `inder123` on 1 Oct 2009 at 4:01\n- Changed state: **WontFix**\n =||= ", 0], ["29", "JSON does not seem to support the java.util.Date type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:58 PM", "```\nWhat steps will reproduce the problem?\nSample code:\nGson gson = new Gson();\nDate test = new Date();\nSystem.out.println(\"Date is \"+gson.toJson(test));\n\nWhat is the expected output? What do you see instead?\nExpected output was a json string with current date. Instead\nDate is {}      (an empty javascript object)\n\nWhat version of the product are you using? On what operating system?\ngson-1.1.1. Mac OS X, JDK 5\n\nPlease provide any additional information below.\nI modified my code to pass dates as Strings. But this is not elegant.\n\n\n```\n\nOriginal issue reported on code.google.com by `kkape...@gmail.com` on 5 Aug 2008 at 4:30", "```\n\nWe plan to add a Default Date/Time serialization/deserialization in version \n1.2.  The\ntricky thing about this feature is that we do not know the format that the \nclient\nsupports.  If the system using the GSON library passes these JSON serialized \nobject\nback and forth and serializing/deserializing on both ends then its a non-issue \nfor\nwhich format is supported; however, if you used the serialized version for \ndisplay\npurposes then the date format matters.\n\nFor the time being, you can register the following Type Adapter:\n\n/**\n * A default type adapter for a {@link Date} object.\n *\n * @author Joel Leitch\n */\npublic class DateTypeAdapter implements JsonSerializer<Date>, \nJsonDeserializer<Date> {\n\n  private final DateFormat format = DateFormat.getInstance();\n\n  public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext\ncontext) {\n    String dateFormatAsString = format.format(src);\n    return new JsonPrimitive(dateFormatAsString);\n  }\n\n  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext\ncontext)\n      throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n      throw new JsonParseException(\"The date should be a string value\");\n    }\n\n    try {\n      return format.parse(json.getAsString());\n    } catch (ParseException e) {\n      throw new JsonParseException(e);\n    }\n  }\n}\n\n\n// Create a GSON instance that can serialize/deserialize \"java.util.Date\" \nobjects\nGson gson = new GsonBuilder()\n    .registerTypeAdapter(new DateTypeAdapter())\n    .create();\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 5 Aug 2008 at 6:41\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nSubmitted the type adapter to support this feature (r130).  Still need to \nupdate the\nGsonBuilder class to make the Date TypeAdapter configurable without requiring \nthe\nadapter to be registered.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 5 Aug 2008 at 7:30\n =||= ```\nThe change r145 contains the last piece of code required to close off this bug. \nRemoved the DateTypeAdapter from the public API so that it can only be \nconfigured via\nthe GsonBuilder.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Aug 2008 at 8:28\n- Changed state: **Fixed**\n =||= ", 0], ["30", "Using excludeFieldsWithoutExposeAnnotation can write empty objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:21:59 PM", "```\nWhat steps will reproduce the problem?\n1. Build a Gson object using GsonBuilder.excludeFieldsWithoutExposeAnnotation()\n2. Annotate a class variable with @Expose\n3. Write an instance of the class with the variable that was exposed null\n\nWhat is the expected output? What do you see instead?\nI expected to see nothing written for that object, since it should be\nempty, instead, I see an empty object.\n\nWhat version of the product are you using? On what operating system?\n1.1.1\n\nPlease provide any additional information below.\nI have attached a unit test that demonstrates this issue.\n\n```\n\nOriginal issue reported on code.google.com by `ericmu...@gmail.com` on 6 Aug 2008 at 6:16\n\nAttachments:\n- [ExcludeFieldsWithoutAnnotationTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-30/comment-0/ExcludeFieldsWithoutAnnotationTest.java)", "```\nThis issue is discussed in the following thread: \n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/a9933f2ea9d43ad5\n?hl=en\n```\n\nOriginal comment by `inder123` on 7 Aug 2008 at 5:22\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nAs per the conclusion in the discussion thread, we will not be supporting this\nfeatures since it alters the semantics of a list. \n```\n\nOriginal comment by `inder123` on 8 Aug 2008 at 6:22\n- Changed state: **WontFix**\n =||= ", 0], ["31", "Given sample does not work", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:01 PM", "```\nWhen I include the given sample in my sourcecode I get an exception:\n\n...\n  class BagOfPrimitives {\n    private int value1 = 1;\n    private String value2 = \"abc\";\n    private transient int value3 = 3;\n  }\n...\n    BagOfPrimitives obj = new BagOfPrimitives();\n    Gson gson = new Gson();\n    String json = gson.toJson(obj); \n    // this throws an exception\n    BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);  \n\nException:\n\nException in thread \"AWT-EventQueue-0\" java.lang.RuntimeException: No-args\nconstructor for class InteropManager$BagOfPrimitives does not exist.\nRegister an InstanceCreator with Gson for this type to fix this problem.\n    at\ncom.google.gson.MappedObjectConstructor.constructWithNoArgConstructor(MappedObje\nctConstructor.java:66)\n    at\ncom.google.gson.MappedObjectConstructor.construct(MappedObjectConstructor.java:5\n5)\n    at\ncom.google.gson.JsonObjectDeserializationVisitor.<init>(JsonObjectDeserializatio\nnVisitor.java:39)\n    at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:70)\n    at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:47)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at com.google.gson.Gson.fromJson(Gson.java:299)\n    at InteropManager.getAObject(InteropManager.java:90)\n    at MainForm.button1ActionPerformed(MainForm.java:49)\n    at MainForm.access$3(MainForm.java:48)\n    at MainForm$5.actionPerformed(MainForm.java:236)\n    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)\n    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)\n    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)\n    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)\n    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)\n    at java.awt.Component.processMouseEvent(Unknown Source)\n    at javax.swing.JComponent.processMouseEvent(Unknown Source)\n    at java.awt.Component.processEvent(Unknown Source)\n    at java.awt.Container.processEvent(Unknown Source)\n    at java.awt.Component.dispatchEventImpl(Unknown Source)\n    at java.awt.Container.dispatchEventImpl(Unknown Source)\n    at java.awt.Component.dispatchEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)\n    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)\n    at java.awt.Container.dispatchEventImpl(Unknown Source)\n    at java.awt.Window.dispatchEventImpl(Unknown Source)\n    at java.awt.Component.dispatchEvent(Unknown Source)\n    at java.awt.EventQueue.dispatchEvent(Unknown Source)\n    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n    at java.awt.EventDispatchThread.run(Unknown Source)\n\nversion: gson-1.1.1.jar\nenvironment: eclipse 3.3.2\n```\n\nOriginal issue reported on code.google.com by `tick...@googlemail.com` on 11 Aug 2008 at 9:14", "```\nGson is telling you what the error is, and possible solutions: your class\nBagOfPrimitives needs to have a no-args constructor. If you can not provide \nsuch a\nthing, then you need to register an InstanceCreator that can construct \ninstances of\nBagOfPrimitives when Gson needs them. \n\nBut you bring up a good point, we should improve the example to include a \nno-args\nconstructor. I will do so. \n```\n\nOriginal comment by `inder123` on 11 Aug 2008 at 11:56\n- Changed state: **Accepted**\n =||= ```\nFixed the document at http://sites.google.com/site/gson/gson-user-guide\n```\n\nOriginal comment by `inder123` on 11 Aug 2008 at 11:58\n- Changed state: **Fixed**\n =||= Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 4:44\n- Added labels: **Type-Other**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["32", "Read and write log files where each entry is in JSON format", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:02 PM", "```\nPerhaps Gson would be useful for reading and writing logs where each entry\nis in JSON format?\n\nI haven't looked closely, but it appears that Gson won't emit a newline\nwhen serializing to a file.  If this is something that Gson could\nguarantee, then we could use newlines as record separators and make each\nlog entry a JSON object, and also use GSon to iterate over a log file and\ndeserialize each line into an object.\n\n```\n\nOriginal issue reported on code.google.com by `bslesinsky` on 15 Aug 2008 at 3:39", "```\nYes, by default, Gson uses compact formatting, eliminating all white-space so it\nshould never write a new line. \n\n```\n\nOriginal comment by `inder123` on 15 Aug 2008 at 6:10\n =||= ```\nClosing the bug since this was a question, not an issue. The best place to post \nsuch\nquestions is the Google group for Gson, \nhttp://groups.google.com/group/google-gson\n```\n\nOriginal comment by `inder123` on 15 Aug 2008 at 6:12\n- Changed state: **Invalid**\n =||= ```\nOkay, but I think there is an issue: it's not documented that toJson() will \nreturn a\nString in compact formatting.  Also, I don't think there's a formal definition \nof\nwhat compact formatting means.\n\n```\n\nOriginal comment by `bslesinsky` on 15 Aug 2008 at 4:01\n =||= ```\nThat is a good point, and we need to explain all the default settings used by \nGson. I\nhave added it in r157 to the javadoc for the default constructor of Gson(). \n```\n\nOriginal comment by `inder123` on 15 Aug 2008 at 7:55\n- Changed state: **Fixed**\n =||= ", 0], ["33", "Provide some benchmarking results", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:04 PM", "```\nWe should implement some benchmarking to ensure that with each release we\nare not degrading on performance.  Maybe we should start with the next\nrelease (i.e. 1.2) as the base benchmark.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 17 Aug 2008 at 12:29", "```\nI ran a quick&dirty benchmark comparing Jackson, JsonReader, Gson, and \nGson+JsonReader:\nhttp://microbenchmarks.appspot.com/run/limpbizkit@gmail.com/twitter.JsonBenchmar\nk/411002\n\nEach library was tested 2x; once doing parsing only and a second time doing \nparse+binding.\n```\n\nOriginal comment by `jessewil...@google.com` on 20 Aug 2010 at 5:08\n =||= ```\nThe attached patch is 5% faster on some datasets but 30% slower on another. I'm \nnot committing it, but I'm saving it here in case we ever want to revisit.\n\n                             TWEETS                              \n        api          run  us linear runtime                    % \nGSON_STREAM   Gson 2.1 a 532 ============================== 100% \nGSON_STREAM char-by-char 507 ============================    95% \n\n                             READER_SHORT                        \n        api          run  us linear runtime                    % \nGSON_STREAM   Gson 2.1 a 114 ============================== 100% \nGSON_STREAM char-by-char 107 ============================    94% \n\n                              READER_LONG                         \n        api          run   ms linear runtime                    % \nGSON_STREAM   Gson 2.1 a 1.05 =======================        100% \nGSON_STREAM char-by-char 1.36 ============================== 130% \n```\n\nOriginal comment by `limpbizkit` on 27 Dec 2011 at 7:05\n\nAttachments:\n- [character-by-character.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-33/comment-2/character-by-character.patch)\n =||= ```\nhttps://sites.google.com/site/gson/gson-performance\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:33\n- Changed state: **Fixed**\n =||= ", 0], ["34", "Add support for java.math.BigDecimal", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:05 PM", "```\nJsonPrimitive provides support to get values as double through\ngetAsDouble(). However, to support higher precision (for example, while\ndealing with money objects), it should also provide support for BigDecimal. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 18 Aug 2008 at 8:47", "```\nWe should add support \"BigInteger\" as well.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Aug 2008 at 2:32\n =||= ```\nFixed in r176\n```\n\nOriginal comment by `inder123` on 21 Aug 2008 at 11:56\n- Changed state: **Fixed**\n =||= ```\nGson does not properly handle small values of BigDecimal and BigInteger during\ndeserialization.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:44\n- Changed state: **Accepted**\n =||= ```\nNOTE: r180 exposes this bug.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:45\n =||= ```\nFixed after r181.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:56\n- Changed state: **Fixed**\n =||= ", 0], ["35", "Gson should support Parameterized types with variable types as parameters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:07 PM", "```\nIf a field is of wild-card type, Gson should be able to handle it. \n\nclass Foo<? extends Number> {\n}\n\nClass Bar {\n  Foo<Integer> foo;\n} \n\nshould serialize and deserialize correctly.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 21 Aug 2008 at 7:50", "```\nWe also need to handle the following:\n\npublic class B<T> {\n  List<T> list;\n  List<T>[] arrayList;\n}\n\nNOTE: I've added some tests that are currently failing, but should pass once \nthis is\nsupported.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:38\n =||= Original comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:39\n- Changed title: **Gson should support Wildcard types and Parameterized types with with variable types as parameters**\n =||= Original comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:40\n- Changed title: **Gson should support Wildcard types and Parameterized types with variable types as parameters**\n =||= ```\nThe supporting code is in r211.  With this change, an instance of class B above \ncan\nbe serialized/deserialized properly.\n\n- Added support for ParameterizedTypes where at least one type parameter is a\nTypeVariable.\n- Added support for GenericArrayTypes where the ParameterizedType has a\n\"TypeVariable\" as one of its type parameters.\n\nMarking this issue as fixed and will reopen another issue for the Wildcard \ntypes.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Aug 2008 at 7:55\n- Changed title: **Gson should support Parameterized types with variable types as parameters**\n- Changed state: **Fixed**\n =||= ", 0], ["36", "Exception Handling for Custom Serializers", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:08 PM", "```\nWe should add some exception handling around the \"custom\" type adapters to\nensure that all exceptions that are propagated out from the \"toJson\" and\n\"fromJson\" are JsonParseException.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 22 Aug 2008 at 6:09", "Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 7:28\n- Changed state: **Accepted**\n =||= ```\nFixed with r190.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 9:50\n =||= Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 9:50\n- Changed state: **Fixed**\n =||= ", 0], ["37", "http://groups.google.com/group/google-gson/t/677d56e9976d7761", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:10 PM", "```\nHi, guys!\n\nI was thinking of the problem and have concluded, that the solution of the\nissue (see link\nhttp://groups.google.com/group/google-gson/t/677d56e9976d7761):\nJsonObjectDeserializationVisitor should check if there is custom\ndeserializer registered for specified type and not create instance by.\n\n  Something like this:\n\n  @SuppressWarnings(\"unchecked\")\n  JsonObjectDeserializationVisitor(JsonElement json, Type type,\n      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n      TypeAdapter typeAdapter,\nParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n      JsonDeserializationContext context) {\n    super(json, factory, objectConstructor, typeAdapter, deserializers,\ncontext);\n    JsonDeserializer deserialezer;\n    if ((deserialezer = deserializers.getHandlerFor(type)) != null) {\n      this.target = deserialezer.deserialize(json, type, context);\n    } else {\n      this.target = (T) objectConstructor.construct(type);\n    }\n  }\n\n\n```\n\nOriginal issue reported on code.google.com by `tazija@gmail.com` on 27 Aug 2008 at 7:57", "```\nTo verify the functionality that you want, I wrote a test in r209.\n\nSurprisingly, the test passes already, so I dont know what problem you are \nrunning\ninto. Can you look at r209 and let me know if it does what you want? If not, how\nshould I modify the test? Also, feel free to suggest additional tests. \n```\n\nOriginal comment by `inder123` on 28 Aug 2008 at 4:21\n =||= ```\nI think I fixed the issue that you raise by changing the object construction to \nbe a\nlazy operation. This way it will done only if really needed. \n\nSee r210 for the details of the fix.\n```\n\nOriginal comment by `inder123` on 28 Aug 2008 at 5:59\n- Changed state: **Fixed**\n =||= ```\nThanks for your fix. It solves the problem.\n\nJust FYI, there is difference that allows you to get your test running (before \nfixes\nwhere applied): I have FilterCondition class marked ABSTRACT (because only its \ntwo\npotential subclasses - ComplexCondition and BinaryCondition can be instantiated)\nwhile your Base class is a CONCRETE type.\n```\n\nOriginal comment by `tazija@gmail.com` on 2 Sep 2008 at 5:04\n =||= ```\nReopening this bug as it seems like we still need to register a \n\"InstanceCreator\"\neven though a customer deserializer is registered.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 9 Oct 2008 at 9:10\n- Changed state: **Accepted**\n =||= ```\nAfter the original fix, this bug was reopened and was a duplicate to Issue 69.\n\nRemarking as fixed since issue 69 is now fixed.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:39\n- Changed state: **Fixed**\n =||= ", 0], ["38", "Gson should handle top-level \"null\"s for deserialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:12 PM", "```\nGson fails with a \"parse\" exception if the JSON string \"null\" is passed in.\n This should just set the expected type to \"null\".\n\nSee NullObjectAndFieldTest#testTopLevelNullDeserialization() test.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 28 Aug 2008 at 7:12", "```\nFixed in r219\n```\n\nOriginal comment by `inder123` on 29 Aug 2008 at 6:04\n- Changed state: **Fixed**\n =||= ", 0], ["39", "Gson should support Wildcard types ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:13 PM", "```\nWe should add support for Wildcard fields where it is \"extending\" some\nobject.  For example:\n\npublic class Foo {\n  private static final List<? extends Number> EMPTY_LIST = Collections.\n  private final List<? extends Number> listOfNumbers;\n\n  public Foo() {\n    this(null);\n  }\n\n  public Foo(List<? extends Number> list) {\n    this.listOfNumbers = list;\n  }\n}\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 28 Aug 2008 at 8:14", "```\nWildcard support added in r218.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Aug 2008 at 5:44\n- Changed state: **Fixed**\n =||= ", 0], ["40", "Fails to serialize/deserialize a class where a super-class has a type parameter", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:14 PM", "```\nUnfortunately, shortly after the Gson 1.2 release, I found a bug in the\nTypeVariable support.  Basically, the following class can not be serialized\nor deserialized using Gson:\n\npublic class Foo<T> {\n  private final T someField;\n\n  public Foo(T value) {\n    this.someField = value;\n  }\n\n  public boolean equals(Object o) {\n    if (!(o instanceof Foo)) {\n      return false;\n    } else {\n        return someField.equals(((Foo)o).someField);\n    }\n  }\n}\n\npublic class Bar extends Foo<Integer> {\n  public Bar(Integer i) {\n    super(i);\n  }\n}\n\nGson gson = new Gson();\nBar bar1 = new Bar(1);\nString json = gson.toJson(bar1);   // Fails\nBar bar2 = gson.fromJson(\"{\\\"someField\\\":1\", Bar.class);    // Fails\n\nassertEquals(bar1, bar2);\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Aug 2008 at 11:53\n- Merged into: #168", "Original comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 1:28\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nWhy it is marked as enhancement while it seems to be the bug?\n```\n\nOriginal comment by `chere...@gmail.com` on 1 Apr 2009 at 5:19\n =||= ```\nDeferred to a future release\n```\n\nOriginal comment by `inder123` on 1 Oct 2009 at 4:04\n- Added labels: **Type-Defect**, **Milestone-Release1.5**\n- Removed labels: **Type-Enhancement**\n =||= ```\nFYI: Guice's TypeLiteral can do full type resolution. This could be adapted for \nuse internally in GSON.\n  http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/TypeLiteral.html\n```\n\nOriginal comment by `jessewil...@google.com` on 20 Aug 2010 at 5:10\n =||= ```\nHere is a proposed patch for the issue (and associated unit test).\n\nThe modification was simply to add a recursive search on all parents super \nclasses until the declairing class was found. Then do it again util we end up \nwith something that is not a \"TypeVariable<?>\" (This is done so complex \nhierarchies can work).\n\nCan someone with commit privilege review and approve/reject ?\n\nThank you.\n```\n\nOriginal comment by `alexandr...@gmail.com` on 13 Oct 2010 at 3:14\n\nAttachments:\n- [Issue40-proposedFix.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-40/comment-5/Issue40-proposedFix.patch)\n =||= ```\nThanks for the patch. Adding it as part of the Gson 1.6 release which is set to \nrelease this coming Friday.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 2 Nov 2010 at 3:31\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:01\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nWe're planning on fixing this in 1.7.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:20\n- Changed state: **Duplicate**\n =||= ", 0], ["41", "Less strict parsing to make it easier to switch to gson?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:16 PM", "```\ngson appears to require all the elements to be strictly quoted. e.g. it\nwants the format: { \"hello\": \"world\" }. Some other libraries like\nnet.sf.json and org.json are more relaxed and will also accept { hello:\n\"world\" } but gson doesn't seem to accept this.\n\nFor example, the json.org api doc says: \"Strings do not need to be quoted\nat all if they do not begin with a quote or single quote, and if they do\nnot contain leading or trailing spaces, and if they do not contain any of\nthese characters: { } [ ] / \\ : , = ; # and if they do not look like\nnumbers and if they are not the reserved words true, false, or null.\"\n\nhttp://www.json.org/javadoc/org/json/JSONObject.html\n\nIt's arguable whether this behaviour is sensible / in spec, but to switch\nto gson from my current library I'll have to change all my unit tests,\nnotify everyone who interacts with me that they may have to review / change\ntheir JSON formatting etc etc. and cope with any resulting breakages.\n\nCould more relaxed parsing behaviour be made an option maybe via an\nalternate javacc parser?\n\n```\n\nOriginal issue reported on code.google.com by `msmith99...@gmail.com` on 8 Sep 2008 at 1:05", "```\nThis seems like a reasonable request.  According to the JSON specification, \nstring\nvalues should be quoted.\n\nWe will add an options on the Gson Builder to allow for \"lenient\" parsing; \nhowever,\nall objects that get serialized by Gson (or your outgoing responses) will have \nquoted\nstring.  My gut instinct is that this should be fine since it abides by the JSON\nspec, but I just wanted to make you aware that if you are currently returning \nJSON\nresponses with unquoted string then this may break your clients.\n\nWe will aim to get this into the 1.2.1 release which is slotted for early \nOctober.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:30\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:30\n- Changed state: **Accepted**\n =||= ```\nThanks for your response. I think generating strings with quotes is fine. I was\nworried about handling requests from people with other libraries. \n\nI agree that this new behaviour should be optional.\n\n```\n\nOriginal comment by `msmith99...@gmail.com` on 16 Oct 2008 at 4:55\n =||= ```\nI am not clear about how it is even supposed to parse. If there are no quotes, \nwhat \nis the delimiter indicating end of a string?\n\nCan someone point me to a library that handles unquoted strings?\n```\n\nOriginal comment by `inder123` on 16 Oct 2008 at 5:09\n =||= ```\nAh I see that the request is being made for the field names, not values. There \nit \nmakes a little more sense. \n\nCan the header names have arbitrary string values? Can they contain the ':' \ncharacter \n? Can they contain the white space? \n\n\n```\n\nOriginal comment by `inder123` on 17 Oct 2008 at 10:27\n =||= ```\nThe initial post included a link to the javadoc for a library that supports \nthis.\n\nThe values need to be quoted if they contain the characters you describe or are\nreserved words etc. Additional rules as listed here:\n\nhttp://www.json.org/javadoc/org/json/JSONObject.html\n\n```\n\nOriginal comment by `msmith99...@gmail.com` on 21 Oct 2008 at 3:44\n =||= ```\nA slight variation on this is allowing *any* value that the parser otherwise\nrecognizes to be assigned to a String. In particular, I would like to see\n\n{ \"foo\": 1}\n\nbe compatible with\n\nclass bar {\n    String foo;\n    };\n\nNow, you get a gson exception stating in effect that a java.lang.Integer can't \nbe\nassigned to a java.lang String. But I thought *all* java objects had a \ntoString()\nfunction that could be used for the conversion? (Might be wrong on this in \ngeneral,\nbut it is certainly true for Integer, Boolean, etc.)\n\nThe motivation for this, among other things, is that when you're first \nexploring a\nnew JSON source, you can declare everything to be a String, see what you get, \nthen\nmake adjustments either in class declarations or in processing logic.\n\nI suppose you could declare everything to be an Object and see what you get, \nbut I\nhaven't (yet!) tried this and don't know how it works.\n\nThanks in advance,\n\nJim Renkel\n```\n\nOriginal comment by `james.re...@gmail.com` on 22 Oct 2008 at 4:14\n =||= Original comment by `joel.leitch@gmail.com` on 25 Nov 2008 at 6:58\n =||= ```\nAdded a test in r313\n```\n\nOriginal comment by `inder123` on 26 Nov 2008 at 6:27\n =||= ```\nFixed in r314\n```\n\nOriginal comment by `inder123` on 26 Nov 2008 at 6:27\n- Changed state: **Fixed**\n =||= ", 0], ["42", "provide a feature to protect against remote \"script src\" inclusion of Gson output ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:19 PM", "```\nwould it be possible to provide a feature which would prepend a string\n(e.g. \"while(1);\") in front of the JSON output on the server-side and have\nclient-side library remove that string before deserializing, to prevent 3rd\nparty sites from <script src'ing the output. \n```\n\nOriginal issue reported on code.google.com by `mede...@gmail.com` on 8 Sep 2008 at 6:46", "```\nit would be great to have some central way of enabling it for all GSON objects \nin a\ngiven app\n```\n\nOriginal comment by `mede...@gmail.com` on 8 Sep 2008 at 6:53\n =||= ```\ninstead of while(1); can we use the following prefix:\n)]}'\n<data>\n\nplease notice the newline character after '\n\nthanks!\n```\n\nOriginal comment by `mede...@gmail.com` on 10 Sep 2008 at 8:25\n =||= ```\nThis is a great feature request.  Thanks for the suggestion.\n\nI have added this to our roadmap for version 1.2.1 which is slotted for early \nOctober.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:39\n- Changed state: **Accepted**\n =||= ```\nHi Joel, i was wondering what's the status with this?\n```\n\nOriginal comment by `mede...@gmail.com` on 17 Mar 2009 at 9:26\n =||= ```\nFixed in r397 by supporting a new GsonBuilder setting \ngenerateNonExecutableJson()\nthat prefixes the generated JSON with some )]}'\\n<data> to make the output\nnon-executable javascript. Gson now recognizes this special text in the input \nwhile\nparsing the JSON in fromJson and filters it out, if present.\n```\n\nOriginal comment by `inder123` on 17 Mar 2009 at 9:15\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:41\n- Added labels: **Milestone-Release1.3**\n =||= ```\nIs there a reason the NON_EXECUTABLE_PREFIX wasn't made configurable? I just \nsubmitted a request for it to be made configurable. \nhttps://code.google.com/p/google-gson/issues/detail?id=551\n```\n\nOriginal comment by `heath.bo...@gmail.com` on 17 Dec 2013 at 11:03\n =||= ", 0], ["43", "Custom Serializers fail if the serializer context is used on the source", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:21 PM", "```\nGson will fail to serialize a class \"Foo\" if you create a custom serializer\nas follows:\n\npublic static class FooTypeAdapter implements JsonSerializer<Foo> {\n  public JsonElement serialize(Foo src, Type typeOfSrc,\nJsonSerializationContext context) {\n    return context.serialize(src, typeOfSrc);\n  }\n}\n\nBasically, it detects this as a circular reference.  Instead, we should\nallow this kind of custom serializer because a client may want to perform\nthe default serialization of an object and then add new fields into the\nJsonElement tree.\n\nFor example:\npublic static class FooTypeAdapter implements JsonSerializer<Foo> {\n  public JsonElement serialize(Foo src, Type typeOfSrc,\nJsonSerializationContext context) {\n    JsonElement element = context.serialize(src, typeOfSrc);\n    JsonObject jsonObject = element.getAsJsonObject();\n    jsonObject.add(\"someNewProperty\", new JsonPrimitive(1L));\n    return jsonObject;\n  }\n}\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:53", "```\nI could use that, too. Basically what's missing is some kind of \nserializeInternal()\nmethod that ignores type adapters registered for this Type.\n```\n\nOriginal comment by `maik.sch...@gmail.com` on 20 Mar 2009 at 2:17\n =||= Original comment by `inder123` on 28 Mar 2009 at 5:58\n- Added labels: **Milestone-Release1.4**\n =||= ```\nI would absolutely love this feature as well.  See this thread for related \ndiscussion: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/a87d5d47b83d0cbe\n```\n\nOriginal comment by `mbur...@gmail.com` on 17 Jul 2009 at 5:13\n =||= ```\ndeferred to a future release\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 9:10\n- Added labels: **Milestone-Release1.5**\n- Removed labels: **Milestone-Release1.4**\n =||= ```\nwhat about cloning the src object, serializing it using context and then do all \nthe \npost-processing you want?\nDidn't try this though, I'm just conjecturing....\n```\n\nOriginal comment by `polaretto@gmail.com` on 27 Apr 2010 at 4:04\n =||= ```\nWas this actually fixed?  I'm not sure it is in 1.5, even though it is marked \nwith the 1.5 milestone.\n\nRelying on clone() is a really bad idea.\n```\n\nOriginal comment by `wendel.s...@gmail.com` on 26 Oct 2010 at 4:24\n =||= ```\nI could use this feature too. I do not believed it was fixed in 1.5 or current \ntrunk version.\n```\n\nOriginal comment by `fedorov....@gmail.com` on 31 Oct 2010 at 3:24\n =||= Original comment by `inder123` on 2 Nov 2010 at 11:59\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nI experimented with this. We might be able to use the ancestors stack as a \nhint. Whenever a serializer+object pair exists on the ancestors stack, we \nshould skip that serializer when recursively asked to serialize that object. \nWe'll either eventually serialize it with a lower-level serializer, or we'll \nrun out and we know we've hit a circular reference.\n```\n\nOriginal comment by `limpbizkit` on 9 Nov 2010 at 8:03\n =||= ```\nI would think that context.defaultWriteObject() (eg similar to the java object \nserialization mechanism) would make a lot of sense.\n```\n\nOriginal comment by `swall...@gmail.com` on 21 Jan 2011 at 4:58\n =||= ```\nYou can do this in Gson 2.1 with TypeAdapterFactory and Gson.getNextAdapter.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:37\n- Changed state: **WontFix**\n =||= ```\nIssue 44 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:50\n =||= ```\nDoes a Gson.getNextAdapter mechanism solve the following issue?\n\nclass Obj\n...\n\nclass A extends Obj\n   Obj subobject;\n...\n\nNow assume we have registered:\n\npublic class ObjSerializer implements JsonSerializer<Obj> {\n  public JsonElement serialize(Obj obj, Type t, JSC jsc) {\n    JsonObject json = new JsonObject();\n    json.addProperty(\"name\", obj.getClass());\n    json.add(\"value\", jsc.serialize(obj, t));\n    return json;\n  }\n}\n\nWhat \"should\" happen is that:\n\nA a = new A();\n...\ngson.toJson(a);\n\nshould have a call sequence that looks like:\n\nObjSerializer.serialize(a, ...)\ngetNextAdapter().serialize(a, ...)\nObjSerializer.serialize(subobject, ...)\ngetNextAdapter().serialize(subobject, ...)\n\nThat is, can we both avoid infinite recursion while also respecting nested \nregistered objects' serialize mechanisms? \nhttp://code.google.com/p/google-gson/issues/detail?id=43#c9 seems like it \nsolves this problem, but \nhttp://code.google.com/p/google-gson/issues/detail?id=43#c11 doesn't seem to.\n```\n\nOriginal comment by `mint...@everlaw.com` on 6 Feb 2012 at 9:27\n =||= ```\nYeah, you want getNextAdapter. That API was hidden in Gson 2.1 because we \nweren't sure that name was right, but its there in SVN. I'll write up an \nexample and post it here...\n```\n\nOriginal comment by `jessewil...@google.com` on 7 Feb 2012 at 3:21\n =||= ```\nHere's a big example that demonstrates all of the moving parts of \ngetNextAdapter. Drink maps to 'Obj' and MixedDrink maps to 'A' in your model. \nNote that we're using the new streaming TypeAdapter API and not the tree-based \nJsonSerializer/JsonDeserializer API. Only the new streaming API gives you \naccess to the next type adapter in the chain.\n\n\npackage com.google.gson;\n\nimport com.google.gson.reflect.TypeToken;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonWriter;\nimport java.io.IOException;\n\npublic class GetNextAdapterExample {\n\n    static class Drink {\n        protected final String name;\n\n        Drink(String name) {\n            this.name = name;\n        }\n\n        @Override public String toString() {\n            return name;\n        }\n    }\n\n    static class MixedDrink extends Drink {\n        private final Drink mix;\n        private final String alcohol;\n\n        MixedDrink(String name, Drink mix, String alcohol) {\n            super(name);\n            this.mix = mix;\n            this.alcohol = alcohol;\n        }\n\n        @Override public String toString() {\n            return name + \" (\" + mix + \"+\" + alcohol + \")\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Drink orangeJuice = new Drink(\"Orange Juice\");\n        MixedDrink screwdriver = new MixedDrink(\"Screwdriver\", orangeJuice, \"Vodka\");\n\n        Gson gson = new GsonBuilder()\n                .registerTypeAdapterFactory(new DrinkTypeAdapterFactory())\n                .create();\n\n        // exercise toJson\n        System.out.println(gson.toJson(orangeJuice));\n        System.out.println(gson.toJson(screwdriver));\n\n        // exercise fromJson\n        String s = \"{'name':'Orange Juice','virgin':true}\";\n        String t = \"{'mix':{'name':'Orange Juice','virgin':true},'alcohol':'Vodka','name':'Screwdriver'}\";\n        System.out.println(gson.fromJson(s, Drink.class));\n        System.out.println(gson.fromJson(t, Drink.class));\n    }\n\n    static class DrinkTypeAdapterFactory implements TypeAdapterFactory {\n        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n            if (!Drink.class.isAssignableFrom(type.getRawType())) {\n                return null; // this class only serializes 'Drink' and its subtypes\n            }\n\n            /*\n             * Lookup type adapters to do the actual work. We use getNextAdapter\n             * to avoid getting 'this' on the types that this factory supports.\n             */\n            final TypeAdapter<Drink> drinkAdapter\n                    = gson.getNextAdapter(this, TypeToken.get(Drink.class));\n            final TypeAdapter<MixedDrink> mixedDrinkAdapter\n                    = gson.getNextAdapter(this, TypeToken.get(MixedDrink.class));\n\n            /*\n             * The JsonElement type adapter is always handy when we want to\n             * tweak what our delegate type adapter created.\n             */\n            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);\n\n            /**\n             * Now that we have some helpers, create the tweaked type adapter.\n             */\n            TypeAdapter<Drink> result = new TypeAdapter<Drink>() {\n                @Override public void write(JsonWriter out, Drink value) throws IOException {\n                    if (value instanceof MixedDrink) {\n                        // write mixed drinks out normally\n                        mixedDrinkAdapter.write(out, (MixedDrink) value);\n                    } else {\n                        /*\n                         * Always add a 'virgin' attribute on non-mixed drinks.\n                         * This takes three steps:\n                         *  1. Get the delegate to serialize to a JsonObject,\n                         *  2. Add our extra property to that JsonObject.\n                         *  3. Serialize that to the stream.\n                         */\n                        JsonObject object = drinkAdapter.toJsonTree(value).getAsJsonObject();\n                        object.add(\"virgin\", new JsonPrimitive(true));\n                        elementAdapter.write(out, object);\n                    }\n                }\n\n                @Override public Drink read(JsonReader in) throws IOException {\n                    /*\n                     * Use the appropriate type adapter based on the contents\n                     * of the stream.\n                     */\n                    JsonObject object = elementAdapter.read(in).getAsJsonObject();\n                    if (object.has(\"alcohol\")) {\n                        return mixedDrinkAdapter.fromJsonTree(object);\n                    } else {\n                        return drinkAdapter.fromJsonTree(object);\n                    }\n                }\n            }.nullSafe(); // so we don't have to check for null on the stream\n\n            return (TypeAdapter<T>) result;\n        }\n    }\n}\n\n```\n\nOriginal comment by `jessewil...@google.com` on 7 Feb 2012 at 4:55\n =||= ```\nTwo notes about the example from the previous comment:\n\n1) You'll need at least GSon V2.2.\n2) gson.getNextAdapter was renamed to gson.getDelegateAdapter\n```\n\nOriginal comment by `seble...@gmail.com` on 26 Nov 2012 at 3:07\n =||= ", 0], ["44", "Custom Deserializers fail if the deserializer context is used on the source JsonElement", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:24 PM", "```\nGson gets caught in infinite recursion if a client attempts to convert a\nJSON string into a Java object of type Foo with the following\nJsonDeserializer registered:\n\npublic static class FooTypeAdapter implements JsonDeserializer<Foo> {\n  public Foo deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context)\n      throws JsonParseException {\n    Foo fooObj = context.deserialize(json, typeOfT);\n    fooObj.setExtraField(\"ThisIsExtra\");\n    return fooObj;\n  }\n}\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:58\n- Merged into: #43", "```\nSee the discussion at:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/196bc3a2798a3905\n/5775ce74143d0194#5775ce74143d0194\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 8:09\n =||= ```\nAnd this discussion: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/a87d5d47b83d0cbe\nApologies for any excessive notification emails, I accidentally commented on 43 \n(serializers) when I really \nintended to comment on 44 (deserializers)\n```\n\nOriginal comment by `mbur...@gmail.com` on 17 Jul 2009 at 5:15\n =||= ```\ndeferred to a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 9:10\n- Added labels: **Milestone-Release1.5**\n =||= ```\nGosh, this sure would be nice to have.  It would simplify writing custom \ndeserializers \nimmensely.\n```\n\nOriginal comment by `mbur...@gmail.com` on 29 Sep 2009 at 9:26\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:01\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nI would think that a context.defaultReadObject() similar to the java object \ninput stream makes a lot of sense.\n```\n\nOriginal comment by `swall...@gmail.com` on 21 Jan 2011 at 4:59\n =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:50\n- Changed state: **Duplicate**\n =||= ", 0], ["45", "Serializing/Deserializing simple maps should be better supported", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:26 PM", "```\nAttempting to simply serialize a map results in fairly useless output:\n\n// dead simple map\nMap<String, Object> m = new ArrayOrderedMap<String, Object>();\nm.put(\"id\", 123);\nm.put(\"thing\", \"AZ\");\n\n// serialize (annoyingly requires the typetoken thing)\nString encoded = gson.toJson(data, new TypeToken<Map<String, Object>>()\n{}.getType());\n\nencoded = {\"id\":{},\"thing\":{}}\n\nIt should have been:\nencoded = {\"id\":123,\"thing\":\"AZ\"}\n\nThis should really be able to handle the simple example of a map of\nprimitive/simple objects much better. The same type of thing happens when\nattempting to read back in the data.\n\nWith a more realistic example it is even worse because another map placed\ninside the first map results in an exception like so:\ncom.google.gson.JsonParseException: The JsonSerializer\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter@b27bb5 failed to\nserialized object {name=aaron, date=Mon Sep 15 11:58:33 BST 2008, num=456,\narray=[Ljava.lang.String;@fe3238} given the type class java.lang.Object\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:61)\n    at\ncom.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati\nonVisitor.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:301)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:293)\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:48)\n    at\ncom.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati\nonVisitor.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:272)\n    at com.google.gson.Gson.toJson(Gson.java:228)\n    at\norg.sakaiproject.entitybroker.impl.EntityEncodingManager.encodeData(EntityEncodi\nngManager.java:586)\n    at\norg.sakaiproject.entitybroker.impl.EntityEncodingManagerTest.testEncode(EntityEn\ncodingManagerTest.java:243)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\na:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at junit.framework.TestCase.runTest(TestCase.java:154)\n    at junit.framework.TestCase.runBare(TestCase.java:127)\n    at junit.framework.TestResult$1.protect(TestResult.java:106)\n    at junit.framework.TestResult.runProtected(TestResult.java:124)\n    at junit.framework.TestResult.run(TestResult.java:109)\n    at junit.framework.TestCase.run(TestCase.java:118)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at\norg.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestR\neference.java:130)\n    at\norg.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\n.java:460)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\n.java:673)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\n:386)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\na:196)\nCaused by: java.lang.IllegalArgumentException: Map objects need to be\nparameterized unless you use a custom serializer. Use the\ncom.google.gson.reflect.TypeToken to extract the ParameterizedType.\n    at com.google.gson.TypeInfoMap.<init>(TypeInfoMap.java:34)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:298)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:293)\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:48)\n    ... 31 more\n\n\n\n```\n\nOriginal issue reported on code.google.com by `azeckoski` on 15 Sep 2008 at 11:00", "```\nExtra info on the deserializing:\njson = {\"id\":123,\"thing\":\"AZ\"}\n\nMap<String, Object> decoded = gson.fromJson(data, new TypeToken<Map<String,\nObject>>() {}.getType());\n\nproduces a map with: {id=java.lang.Object@e6612c, thing=java.lang.Object@d704f0}\n(seems to be instances of Object with no data)\n\n```\n\nOriginal comment by `azeckoski` on 15 Sep 2008 at 1:29\n =||= ```\nFirst off, I'd like to start with some background information.  When you are \ndefining\ntypes (or local variables) that have type parameters, the JVM drops the actual \ntype\nparameters and associates everything as \"Object\".  This is known as \"type \nerasure\". \nIn order for a Java Program to retrieve the actual type parameters at run-time, \nyou\nneed to leverage the TypeToken object (this methodology was established by \nGUICE ---\nsee\nhttp://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/TypeLiter\nal.html).\n\nOriginally, we implemented Gson so that it could \"serialize\" these kinds of \nobjects\nwithout requiring the use of TypeToken; however, deserializing it back into the \nreal\nobject requires it since the JSON output has no type information in it.  As \nwell,\nwith this approach, it meant you were serializing the \"real\" object which meant \nthat\nsome fields on the real object would be added to the JSON output.  Therefore, \nif you\nhad a List<A> and added both A and B objects (i.e. B extends A) some objects \nwould\nexpose extra fields in the output.  We decided to take the more explicit route \nand\nforce the client to provide us the type parameters of the top-level object that \nis\nbeing serialized.\n\nThe common use of a Map or List is that you populate the List with the same \nobject\ntypes.  Passing in Object means that you can add any instance of a class that \nyou\ndesire to the data structure.  I know there are exceptions to this best \npractice, but\nwe do not want to implement this corner case scenario.  Instead, if you really \ndo\nwant to use a list of Objects, then do as the exception message says and write a\n\"custom\" (de)serializer (you can bind it specifically to a Map<String, Object> \nand\nhave the default Gson map serializer handle everything else).\n\nAs for a Map of Maps (i.e. Map<String, Map<String, Integer>>) this is already\nsupported and works well as long as you pass in the actual type object (i.e. new\nTypeToken<Map<String, Map<String, Integer>>>() {}.getType())\n\nHere's an example:\npublic static void main(String[] args) {\n  Type mapType = new TypeToken<Map<String, Map<String, Integer>>>() {}.getType();\n  Map<String, Map<String, Integer>> map = new HashMap<String, Map<String, Integer>>();\n  Map<String, Integer> value1 = new HashMap<String, Integer>();\n  value1.put(\"lalala\", 78);\n  value1.put(\"haha\", 9999);\n  map.put(\"id\", value1);\n\n  Map<String, Integer> value2 = new HashMap<String, Integer>();\n  value2.put(\"nahhd\", 121112);\n  value2.put(\"uuywss\", 19987);\n  map.put(\"thing\", value2);\n\n  Map<String, Integer> value3 = new HashMap<String, Integer>();\n  map.put(\"other\", value3);\n\n  Gson gson = new Gson();\n  String json = gson.toJson(map, mapType);\n  System.out.println(json);\n\n  Map<String, Map<String, Integer>> deserializedMap = gson.fromJson(json, mapType);\n  System.out.println(deserializedMap);\n}\n\n=========== OUTPUT ===========\n{\"thing\":456,\"id\":123}\n{\"other\":{},\"thing\":{\"nahhd\":121112,\"uuywss\":19987},\"id\":{\"lalala\":78,\"haha\":999\n9}}\n{other={}, thing={nahhd=121112, uuywss=19987}, id={lalala=78, haha=9999}}\n\n\nFor now, I am closing this off as \"Working as Designed\".  Maybe I am not \ncompletely\nfollowing your issue and if that is the case, please start up a new discussion \nin our\nGson discussion group.\n\nThanks,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Sep 2008 at 8:57\n- Changed state: **Invalid**\n =||= ```\nWe solved our problem by using a different library but I wanted to put a \ncomment here\nanyway.\n\nSo what happens if I want to do this?\nMap<String, Number>\nor\nMap<String, Serializable>\n\n(it seems to fail)\n\nIt seems that this is designed to only work for the basic case where I have \nreally\nsimple and non-nested structures where all the beans are easily instantiable \nand not\nsuperclasses. It is a shame that this is considered working as designed.\n\n```\n\nOriginal comment by `azeckoski` on 18 Sep 2008 at 9:01\n =||= ```\nI am glad to hear that you found something that works for you, but it's too bad \nyou\nare unable to use Gson.  I'd still like to follow up on this issue because it is\nuser's like yourself that will help to advance this library.\n\nFirst off, are you serializing and deserializing an object of type Map<String,\nNumber>?  If it is serialization only, than that is a much \"easier\" problem to \nsolve\nbecause we have the runtime types.  As for \"deserializing\" this kind of object, \nwe\nhave provided our clients with the concept of a custom \"Type Adapter\".  You \nshould be\nable to write a type as follows to get it to work with \"Number\":\n\n  public static class NumberTypeAdapter \n      implements JsonSerializer<Number>, JsonDeserializer<Number>,\nInstanceCreator<Number> {\n\n    public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext\ncontext) {\n      return new JsonPrimitive(src);\n    }\n\n    public Number deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context)\n        throws JsonParseException {\n      JsonPrimitive jsonPrimitive = json.getAsJsonPrimitive();\n      if (jsonPrimitive.isNumber()) {\n        return jsonPrimitive.getAsNumber();\n      } else {\n        throw new IllegalStateException(\"Expected a number field, but was \" + json);\n      }\n    }\n\n    public Number createInstance(Type type) {\n      return 1L;\n    }\n  }\n\n  public static void main(String[] args) {\n    Map<String, Number> map = new HashMap<String, Number>();    \n    map.put(\"int\", 123);\n    map.put(\"long\", 1234567890123456789L);\n    map.put(\"double\", 1234.5678D);\n    map.put(\"float\", 1.2345F);\n    Type mapType = new TypeToken<Map<String, Number>>() {}.getType();\n\n    Gson gson = new GsonBuilder().registerTypeAdapter(Number.class, new\nNumberTypeAdapter()).create();\n    String json = gson.toJson(map, mapType);\n    System.out.println(json);\n\n    Map<String, Number> deserializedMap = gson.fromJson(json, mapType);\n    System.out.println(deserializedMap);\n  }\n\n========== OUTPUT ==========\n{\"double\":1234.5678,\"float\":1.2345,\"int\":123,\"long\":1234567890123456789}\n{double=1234.5678, float=1.2345, int=123, long=1234567890123456789}\n\n\nWe should probably just include the above type adapter as a default in Gson and \nI\nwill discuss this with Inderjeet.  There is a bug, however, since you actually \nhave\nto specify a \"instance creator\" for this type of object (i.e. primitive), but I \nwill\nhave that fixed by the next release.  You should be able to write something \nsimilar\nas above for \"Serializable\".\n\nI hope this information is helpful and thanks for the all the feedback on this \nlibrary.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 8:32\n =||= ```\nI modify the MapTypeAdapter to match the jdk14's Map\n======================================================\npublic JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext \ncontext) {\n      JsonObject map = new JsonObject();\n      //Type childType = new TypeInfoMap(typeOfSrc).getValueType();\n      for (Iterator iterator = src.entrySet().iterator(); iterator.hasNext(); ) {\n        Map.Entry entry = (Map.Entry) iterator.next();\n        Object obj = entry.getValue();\n        JsonElement valueElement = context.serialize(obj, obj.getClass());\n        ---------------------------------------------------------------------modified\n        map.add(entry.getKey().toString(), valueElement);\n      }\n      return map;\n    }\n--------------------------------------------------------------------------------\n\nand then the map class can be used like this:\n  HashMap aaaa = new HashMap();\n  aaaa.put(\"aa\", 1212);\n  aaaa.put(\"bb\", \"fasdfa\");\n  System.out.println(gson.toJson(aaaa));\n==========output=================\n{\"bb\":\"fasdfa\",\"aa\":1212}\n=================================\n\nIt can run, good or bad? because there are lot's of  jdk14's source code in many\nproject's.\n\n```\n\nOriginal comment by `zhaojinz...@gmail.com` on 21 Oct 2008 at 9:53\n =||= ```\nThanks for providing the code snippet. This will not work properly in case of \ngenericized maps since in those cases it is important to use the type specified \nin \nthe field declaration instead of the actual type. I have made similar fixes for \nIssue \n54 and 58 that I will apply in this case as well. \n```\n\nOriginal comment by `inder123` on 21 Oct 2008 at 3:32\n =||= ```\nI have fixed this issue in r277 \n\nNow, you should be able to serialize raw maps. The deserialization continues to \nrequire parameterized type. \n```\n\nOriginal comment by `inder123` on 21 Oct 2008 at 10:41\n- Changed state: **Fixed**\n =||= ```\nThank you for fixing this issue: \nIn java land, you really shouldn't be instantiating Map<String, Object> but \nsince\nwe're dealing with JSON world, it actually makes a lot of sense. \nConsider Map<String, Object> map;\nmap.put(\"field1\", 123);\nmap.put(\"field2\", \"myfield2\");\n\nWhat is gson.toJson(map)???\nIt's a javascript object o where o.field1 is the number 123 and o.field2 is the\nstring myfield2!\n```\n\nOriginal comment by `SystemIn...@gmail.com` on 22 Jan 2010 at 9:43\n =||= ```\njson convert to map<Integer,MyClass> it have problem !\nhow to  do ?\n\n```\n\nOriginal comment by `demog...@gmail.com` on 6 Mar 2010 at 6:43\n =||= ```\nIf you do json eval() in javascript or python, you get a dictionary. Inside the \ndictionary, it has String/Number or nested dictionaries. eval doesnt expect \nthese type declarations.\nI would expect the same on static language as well - Maps with default Number \n(lossless datatype like Double) datatype for deserialization.\n```\n\nOriginal comment by `mani.dor...@gtempaccount.com` on 25 Jun 2010 at 6:12\n =||= ```\nHi demograp,\n\nDid you forget to implement a default constructor for MyClass ?\nIt was my case, and I solved it doing this.\n\nHope it helps.\n```\n\nOriginal comment by `kstruil...@gmail.com` on 6 Aug 2010 at 2:45\n =||= ```\nI faced similar problems. Easiest solution for me was wrapping the desired map \nin a wrapper object and passing that to gson. I guess in the end that just \nboils down to be the same as providing the TypeToken, but it is a much more \nstraightforward solution for those who want a quick fix.\n```\n\nOriginal comment by `dska...@gmail.com` on 1 Sep 2011 at 12:23\n =||= ", 0], ["46", "Add toString() to Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:30 PM", "```\nGson should provide a convenient toString() that displays the type-handlers \nthat have been registered alongwith any other configuration settings.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 15 Sep 2008 at 3:54", "```\nFixed in r248\n```\n\nOriginal comment by `inder123` on 16 Sep 2008 at 6:30\n =||= Original comment by `inder123` on 16 Sep 2008 at 6:31\n- Changed state: **Fixed**\n =||= ", 0], ["47", "StackOverflowError for big String values (JSON to Java)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:30 PM", "```\nimport com.google.gson.Gson;\npublic class TestGson {\n\n  public static void main(String[] args) {\n    String str = getJsonString(Integer.parseInt(args[0]));\n    GString gString = new Gson().fromJson(str, GString.class);\n  }\n\n  public static String getJsonString(int size) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"{\\\"value\\\":\\\"\");\n    for (int i = 0; i <= size; i++) {\n      builder.append(\"a\");\n    }\n    builder.append(\"\\\"}\");\n    return builder.toString();\n  }\n\n}\n\npublic class GString {\n\n  private String value = null;\n\n  public String getValue() {\n    return value;\n  }\n\n}\n\nThis will always end in an StackOverflowError for big Strings (e.g. 6112) \nat line 303 in JsonParser.java.\n```\n\nOriginal issue reported on code.google.com by `dominik....@gmail.com` on 22 Sep 2008 at 12:33", "```\nInderjeet knows more about this, but I believe this is a shortcoming with a \nJavaCC\nparser.  It is not efficient at parsing long string values; therefore, if you \nhave a\nfield in your JSON object with a very long String value (like a stack trace, \netc.)\nthen this will occur.  We explicitly catch this \"Error\" and rethrow it as a\nJsonParseException which should be safe as by the error is caught, all the \nrecursive\nfunction calls have popped off the stack.\n\nWe actually have a test for this scenario to ensure that a \"JsonParseException\" \nis\nthrown instead of a StackOverflowError so that it will not take down the JVM \n(unless\nthe client doesn't not care about catching any JsonParseException).\n\nThis issue will be fixed once a new parser is implement.  See issue #28.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2008 at 5:11\n =||= ```\nLooks like this was fixed by Inderjeet in r256.\n```\n\nOriginal comment by `ble...@gmail.com` on 13 Oct 2008 at 3:22\n =||= ```\nYes, I have tested the new Gson with strings of size up to 20MB and it worked \nfine. \nIt probably will work for even larger strings, but the test itself starts to \ngenerate \ntoo much GC. Previously, Gson was able to handle strings of about 100kb on the \nsame \ntest so I am excited about this fix.\n```\n\nOriginal comment by `inder123` on 13 Oct 2008 at 3:37\n- Changed state: **Fixed**\n =||= ", 0], ["48", "Support @NotSince annotation for removing fields in future versions", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:31 PM", "```\nI don't think this is currently possible, but it'd be nice for some protocols.\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 26 Sep 2008 at 7:28", "```\nHow is that better than simply marking the method @deprecated? \nCan you list some specific use-cases where @NotSince will be better than \n@deprecated? \n\n```\n\nOriginal comment by `inder123` on 26 Sep 2008 at 7:39\n =||= ```\nMaybe I'm misunderstanding Gson's functionality. Assume the following example:\n\npublic class Person {\n  private int age;\n  @Since(1.1) private int birthYear;\n}\n\nnew GsonBuilder().setVersion(1.0).create().toJson(new Person()) => \"{age: 0}\"\nnew GsonBuilder().setVersion(1.1).create().toJson(new Person()) => \"{age: 0,\nbirthYear: 0}\"\n\nI would like to replace the field, as in (renaming @NotSince to @Until):\n\npublic class Person {\n  @Until(1.1) private int age;\n  @Since(1.1) private int birthYear;\n}\n\nSo that:\n\nnew GsonBuilder().setVersion(1.0).create().toJson(new Person()) => \"{age: 0}\"\nnew GsonBuilder().setVersion(1.1).create().toJson(new Person()) => \"{birthYear: \n0}\"\n\n\n```\n\nOriginal comment by `ch...@gmail.com` on 27 Sep 2008 at 12:22\n =||= ```\nInderjeet and I have discussed that we needed some way to \"version\" field \ndeletions\nfrom classes, but have not put much thought into it.  The above proposal seems \nlike a\npretty good solution.\n\nI prefer \"Until\" as it fits well with the \"Since\" annotation.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 6:38\n =||= Original comment by `joel.leitch@gmail.com` on 13 Oct 2008 at 7:13\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nEnhancement submitted in r322.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 12:10\n- Changed state: **Fixed**\n =||= ", 0], ["49", "Pretty Print generates invalid JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:33 PM", "```\nVersion: 1.2\n\nThe following code returns an invalid JSON string:\n\n-----\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class App {\n    public static void main(String[] args) {\n        Node root = new Node(\"root\");\n        root.createChild(\"Pete\");\n\n        Gson gson = new GsonBuilder()\n                .setPrettyPrinting()\n                .create();\n\n        System.out.println(gson.toJson(root));\n    }\n}\n\nclass Node {\n    private final String name;\n    private final List<Node> children = new ArrayList<Node>();\n\n    public Node(String name) {\n        this.name = name;\n    }\n\n    public Node createChild(String childName) {\n        Node child = new Node(childName);\n        children.add(child);\n        return child;\n    }\n}\n```\n\nOriginal issue reported on code.google.com by `b.richt...@gmail.com` on 27 Sep 2008 at 5:54", "```\nBelow is the output from the above program:\n{\"name\":\"root\",\"children\":[{,\"name\":\"Pete\",\"children\":[]}]}\n\nNotice the extra \",\" instead the \"children\" array.\n\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 6:42\n- Changed state: **Accepted**\n =||= ```\nFix submitted in r251.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 7:10\n- Changed state: **Fixed**\n =||= ", 0], ["50", "toJson inserts extraneous comma in Collection elements with pretty-printing turned on", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:34 PM", "```\nWhat steps will reproduce the problem?\n1. Compile and run the attached test case\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n\nxxx{\"x\":\"hello\",\"y\":\"world\"}xxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]xxx\nxxx{\"x\":\"hello\",\"y\":\"world\"}\nxxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]\nxxx\n\nActual:\n\nxxx{\"x\":\"hello\",\"y\":\"world\"}xxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]xxx\nxxx{\"x\":\"hello\",\"y\":\"world\"}\nxxx\nxxx[{,\"x\":\"hello\",\"y\":\"world\"}]\nxxx\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@860d49 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:383)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at PPTest.main(PPTest.java:39)\nCaused by: com.google.gson.ParseException: Encountered \",\" at line 1, column 3.\nWas expecting one of:\n    \"\\\"\" ...\n    \"}\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:497)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:436)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:57)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:141)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:117)\n    at com.google.gson.JsonParser.JsonArray(JsonParser.java:103)\n    at com.google.gson.JsonParser.parse(JsonParser.java:25)\n    at com.google.gson.Gson.fromJson(Gson.java:375)\n    ... 2 more\n\n\nWhat version of the product are you using? On what operating system?\n\nGson 1.2 with Sun Java 1.6.0_07 (Ubuntu package sun-java6-jdk=6-07-3ubuntu2\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `christop...@gmail.com` on 28 Sep 2008 at 9:00\n\nAttachments:\n- [PPTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-50/comment-0/PPTest.java)", "```\nThis is a duplicate of issue #49\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2008 at 10:01\n- Changed state: **Duplicate**\n =||= ", 0], ["51", "fromJson fails with SubClasses", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:35 PM", "```\nWhen I use a code like:\n\npublic class GsonTester\n{\n...\n  class BagOfPrimitives {\n    private int value1 = 1;\n    private String value2 = \"abc\";\n    private transient int value3 = 3;\n  }\n...\n  public String getAObject()\n  {\n    BagOfPrimitives obj = new BagOfPrimitives();\n    Gson gson = new Gson();\n    String json = gson.toJson(obj); \n    BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);  \n    return json;\n  }\n...\n}\n\nI can not use the standard \"fromJson\" method. Because the no-arg\nconstructor is not recognized.\n\n```\n\nOriginal issue reported on code.google.com by `mmuelle...@googlemail.com` on 30 Sep 2008 at 3:59", "```\nSince BagOfPrimitives class in your case is an inner class (not a static inner \nclass) \nit needs a reference to the parent class GsonTester to work. \n\nIf your BagOfPrimitives was a static inner class, this will work without any \nissues. \nHowever, for the other case, you need to provide an instance creator since \nthere is \nno way to constructor an inner class without a reference to the outer class to \nwhich \nit is bound.\n```\n\nOriginal comment by `inder123` on 13 Oct 2008 at 7:27\n- Changed state: **Accepted**\n =||= ```\nSee r262 for an example of how non-static inner classes can be serialized and \ndeserialized with Gson.\n```\n\nOriginal comment by `inder123` on 13 Oct 2008 at 7:49\n- Changed state: **Fixed**\n =||= ", 0], ["52", "Add 'Appendable' as a destination for Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:36 PM", "```\nCurrently, Gson can generate a String or write to a Writer.  This can result in \nunnecessary temporary \nString objects when the user wants to embed Gson in a larger response.  Both \nStringBuilder and \nWriter share a common interface however: Appendable.  Since it is unlikely that \nthe flush and close \nmethods are called on Writer while serializing, consider either adding \nAppendable as a destination \nor replacing Writable with Appendable as the stream output type.\n```\n\nOriginal issue reported on code.google.com by `complexm...@gmail.com` on 1 Oct 2008 at 9:32", "```\nNote that java.lang.Appendable first appeared in Java 1.5\n```\n\nOriginal comment by `damiancarrillo` on 6 Oct 2008 at 9:53\n =||= Original comment by `joel.leitch@gmail.com` on 13 Oct 2008 at 7:26\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nFixed in r315\n\nNote that this breaks backwards binary compatibility while preserving backwards\nsource compatibility. This is so because we changed the toJson() method \nsignatures\ninstead of adding new methods. However, since Appendable is a super class of \nWriter,\na simple recompilation of code should be sufficient. Since this bug fix will go \nin a\nmajor release, this is acceptable.\n```\n\nOriginal comment by `inder123` on 26 Nov 2008 at 7:15\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 26 Nov 2008 at 7:15\n =||= ", 0], ["53", "Gson does not handle default deserialization of dates correctly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:37 PM", "```\nAs pointed out in the thread, \nhttp://groups.google.com/group/google-gson/browse_thread/thread/af726d49986ac245\n\nGson doesn't handle deserialization of dates very well.\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 6 Oct 2008 at 10:00", "```\nAdded additional tests for this functionality in r252\n```\n\nOriginal comment by `inder123` on 6 Oct 2008 at 10:00\n =||= ```\nFixed in r260\n```\n\nOriginal comment by `inder123` on 13 Oct 2008 at 6:40\n- Changed state: **Fixed**\n =||= ", 0], ["54", "Serialization of Object fields ignores their types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:38 PM", "```\nIf type of a class field is Object, then GSON serializes it as {} instead\nof the JSON for the actual object. See discussion at: \n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/9241110c81f306b8\n```\n\nOriginal issue reported on code.google.com by `inder123` on 9 Oct 2008 at 5:11", "```\nFixed this issue in r263 by updating the serialization visitor to use the more\nspecific of either the declared type of field or the actual type of the field \nvalue.\n```\n\nOriginal comment by `inder123` on 13 Oct 2008 at 9:13\n- Changed state: **Fixed**\n =||= ", 0], ["55", "Gson can not handle JSON that uses single quote for field name/values", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:39 PM", "```\nr254 contains a test that illustrates this problem.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Oct 2008 at 2:33", "```\nFixed in r255\n\nGson now supports different fields with-in the JSON to use either single quote \nor\ndouble quote. However, a single field name or value must use ' or \"\" to delimit \nitself.\n```\n\nOriginal comment by `inder123` on 10 Oct 2008 at 2:54\n- Changed state: **Fixed**\n =||= ", 0], ["56", "Gson does not serialize null fields for strings, arrays and collection types even when serializeNulls is set", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:39 PM", "```\nSee bug report at\n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/1f7cc3301ca6e3e7\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Oct 2008 at 10:32", "```\nAdded tests for this in r257\n```\n\nOriginal comment by `inder123` on 10 Oct 2008 at 10:33\n =||= ```\nFixed in r258\n```\n\nOriginal comment by `inder123` on 10 Oct 2008 at 10:34\n- Changed state: **Fixed**\n =||= ", 0], ["57", "Make setFormatter of GsonBuilder public", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:40 PM", "```\nTo be honest I don't think the pretty print option generates a pretty\nstring. I would like to provide my own JsonFormatter. But both the\ninterface (JsonFormatter) and the setter (setFormatter) in the GsonBuilder\nare package private. Could they be made public?\n```\n\nOriginal issue reported on code.google.com by `b.richt...@gmail.com` on 14 Oct 2008 at 7:58", "```\nWe kept these objects/methods private on purpose.  We were not happy with its \nAPI\nwhen we first release GSON, so we did not want to leak it out to the clients of \nthis\nlibrary and then have to support it forever.\n\nHopefully we can clean up the API that this interface exposes and then we will\ndefinitely consider exposing this interface and method in GsonBuilder.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Oct 2008 at 5:56\n- Added labels: **Type-Enhancement**, **Priority-Low**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= ```\nAlso, if you have any specific suggestions on how to improve the pretty \nprinting, we \nwould be happy to incorporate them. Even better, if you can contribute some \ncode in \nthis regard. \n\nWe also welcome suggestions on the API design in this respect. What API would \nyou \nprefer? Would the current API (when made public) meet your needs? Can you live \nwith \nit, if we keep the parse tree navigation support private in JsonElement and its \nsubtypes? \n\n\n```\n\nOriginal comment by `inder123` on 16 Oct 2008 at 11:33\n =||= ```\nI realize I've been a lazy user that has done nothing but complaining till now \n:-) \nI'll enjoy looking into the code to see if I can come up with a suggestion to \nimprove\nthe pretty print. To do some expectation management: No promises though \nregarding any\nschedule.\n```\n\nOriginal comment by `b.richt...@gmail.com` on 16 Oct 2008 at 2:09\n =||= ```\nHi,\n\nI'm sorry I'm late to the game, but ooh-ooh, let it look (literally) like your \nschema\ndefinition (issue #17:\nhttp://code.google.com/p/google-gson/issues/detail?id=17&sort=type)! Looking at \nthe\nexample in the JSON Schema Proposal, if the user provides a schema string, then\nsetPrettyPrinting(schema-String) will do exactly what you want. Only the \ndeveloper\n\"really\" knows how s/she wants it to look - using the example again, should\n\"description\" and \"type\" be on one line or two? Likewise with \"properties\". \nWell, if\nI know I'm only outputting a handful of rows of data, one per line is great. \nHowever,\nI have an example of an organizational tree of employees, which could be in the\nhundreds. In my case, I'm not going to be a one-per-line person.\n\nGreat stuff.\n\nSteve\n```\n\nOriginal comment by `steven.b...@gmail.com` on 8 Dec 2008 at 2:14\n =||= ```\nI need a simple human readable formatter for complex objects. Basically a \nformat of\none key per line, indentation and the usual stuff. Example:\n\n{\n  \"foo\": \"bar\",\n  \"baz\": 1,\n  \"list\": [\n    \"first\",\n    \"second\",\n    \"last\"\n  ],\n  \"object\": {\n    \"nested\": \"value\"\n  }\n}\n\nThere's probably as many different opinions on how this is is indented and \nnested as\nthere are different coding styles - but I just want something that is a bit more\nreadable for nested structures than a one-liner (or a wrapped one-liner, in the \ncase\nof the current \"pretty\" printer).\n```\n\nOriginal comment by `nuutti.k...@gmail.com` on 26 Mar 2009 at 10:46\n =||= ```\nAs a response to inder123's comment I emailed a proposal for the Pretty Print \nto Joel\nin October 2008. I thought to share it here as well. \n\nMy suggestion is to add a new method called setJsonFormatter to the GsonBuilder,\nwhich takes a JsonFormatter as an argument. First of all: I (re-)use the name\nJsonFormatter. As the current interface called JsonFormatter is not part of the\npublic API, I think it's ok to use this name.\n\nThe JsonFormatter takes, as it does now, care of the formatting of a json \nobject tree\nto a string. It is constructed via a builder pattern. A simple example could be:\n\nJsonFormatter formatter = new JsonFormatterBuilder()\n       .indentUsingSpacesWithSize(4)\n       .create();\n\nGson gson = new GsonBuilder()\n       .setJsonFormatter(formatter)\n       .create();\n\nThe public methods the JsonFormatterBuilder has are:\n\n- indentUsingSpacesWithSize(4) // Undoes a preceding call to indentUsingTabs()\n- indentUsingTabs() // Undoes a preceding call to indentUsingSpacesWithSize()\n- insertNewLineAfterStartObject()\n- insertNewLineBeforeEndObject()\n- insertNewLineAfterStartArray()\n- insertNewLineBeforeEndArray()\n- insertSpaceBeforeComma()\n- insertSpaceAfterComma() // Undoes a preceding call to \ninsertNewLineAfterComma()\n- insertNewLineAfterComma() // Undoes a preceding call to \ninsertSpaceAfterComma()\n- insertSpaceBeforeColon()\n- insertSpaceAfterColon() // Undoes a preceding call to \ninsertNewLineAfterColon()\n- insertNewLineAfterColon() // Undoes a preceding call to \ninsertSpaceAfterColon()\n- wrapIfPossibleAfter(80)\n- doubleIndentWrappedLines()\n- setLineSeparator(...)\n\nNot calling the method setJsonFormatter, uses a default formatter which has a \ncompact\noutput, just like the current output without pretty print is. The current method\n'setPrettyPrinting' of the GsonBuilder will (of course) be preserved as a \nconvenience\nmethod. It will automatically create a JsonFormatter which, if desired, \nimitates the\ncurrent behavior as much as possible.\n\nWhat worries me a bit is the the responsibilities of the objects seem to be \nmixed up.\nShould the Gson object have knowledge of the way it will be formatted? Maybe \nit's\nbetter to do it the other way around. Give a JsonFormatter a Gson object. The \nsame\nGson object could then be formatted in different ways, which is currently \nimpossible.\nBut I see no real solution for this given the current API with setPrettyPrint \nand toJson.\n```\n\nOriginal comment by `b.richt...@gmail.com` on 27 Mar 2009 at 8:05\n =||= ```\nThanks for the detailed proposal. Even though it is way late in the game for \nGson\n1.3, I will try to see if we can put it in. \n\nA somewhat simpler approach will be to leave out the JsonFormatterBuilder from \nthe\nAPI, and just provide a setFormatter method in GsonBuilder. We will also make\nJsonFormatter public. Will that suffice for your needs? Also, does that lock us \nout\nof any future enhancements? For example, would there ever be a need to chain \nthese\nformatters? \n\nRegarding your comment about taking the responsiblity for formatting out, one \nway to\naddress it would be to add new methods to Gson: toJsonTree() that return a \nparse tree\ninstead of String. The primary difference between that and using JsonParser \ndirectly\nis that Gson.toJsonTree applies all the custom serializers. Is that a better \napproach? \n\n\n\n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 3:33\n- Changed state: **Started**\n =||= ```\nFor me, providing setFormatter method in GsonBuilder is quite enough (and making\nJsonFormatter public). I can not speak for others, of course. I will also \ncreate and\nsubmit the verbose formatter I described for public inclusion, with tests.\n```\n\nOriginal comment by `nuutti.k...@gmail.com` on 27 Mar 2009 at 4:34\n =||= ```\nFor now, a quick solution (workaround) I use is to provide a \nJsonDeserializer<String>\n(with GsonBuilder#registerTypeAdapter). Most likely this would be an extra\nJsonDeserializer, next to the one you need for the 'real' deserialization. \n\nThis extra deserializer outputs a String just the way you want; a pretty one, \nfor\ninstance.\n```\n\nOriginal comment by `b.richt...@gmail.com` on 27 Mar 2009 at 5:19\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:35\n- Added labels: **Priority-High**, **Milestone-Release1.4**\n- Removed labels: **Priority-Low**\n =||= ```\nI submitted the new formatter as issue 112.\n```\n\nOriginal comment by `nuutti.k...@gmail.com` on 29 Mar 2009 at 2:20\n =||= ```\nDeferred to a future release. Meanwhile, you can use Gson.toJsonTree and format \nthe output yourself.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 9:12\n- Added labels: **Milestone-Release1.5**\n- Removed labels: **Milestone-Release1.4**\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:29\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:27\n- Added labels: **Milestone-Undefined**\n =||= ```\nObsoleted by JsonWriter.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:49\n- Changed state: **WontFix**\n =||= ", 0], ["58", "Gson 1.2.1 incorrectly used subclass type for serialization/deserialization for fields of base class type ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:44 PM", "```\nAs stated\n```\n\nOriginal issue reported on code.google.com by `inder123` on 14 Oct 2008 at 6:53", "```\nWe have a test for this bug in r268\n```\n\nOriginal comment by `inder123` on 14 Oct 2008 at 6:54\n =||= ```\nFixed in r269\n```\n\nOriginal comment by `inder123` on 14 Oct 2008 at 6:59\n =||= Original comment by `inder123` on 14 Oct 2008 at 6:59\n- Changed state: **Fixed**\n =||= ", 0], ["59", "java.lang.IllegalStateException when parsing String as double", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:45 PM", "```\nWhat steps will reproduce the problem?\n1. Define a class with a double type called \"test\"\n2. Construct some JSON passing a String in place of the double: {\"test\": \"-1\"}\n3. Parse the JSON into your class\n\nWhat is the expected output? What do you see instead?\n\nExpected: JSONException\n\nActual:\nException in thread \"Timer-0\" java.lang.IllegalStateException: How can the type \nvariable not be \npresent in the class declaration!\n    at com.google.gson.TypeInfoFactory.getIndex(TypeInfoFactory.java:121)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:92)\n    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\n    at com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:131)\n    at \ncom.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio\nnVisitor.java:93)\n    at \ncom.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese\nrializationVisit\nor.java:75)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at \ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextD\nefault.java:75)\n    at \ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefaul\nt.java:47)\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at com.google.gson.Gson.fromJson(Gson.java:302)\n\nWhat version of the product are you using? On what operating system?\n\nGSON 1.2 on OSX\n\nPlease provide any additional information below.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 15 Oct 2008 at 6:14", "```\nActually, you can close this. I think I misdiagnosed the problem. Sorry about \nthat!\n```\n\nOriginal comment by `ch...@gmail.com` on 15 Oct 2008 at 6:19\n =||= ```\nThis actually is a problem for certain types; however, it is covered by issue \n#40. \nClosing this off as a duplicate.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Oct 2008 at 5:58\n- Changed state: **Duplicate**\n =||= ", 0], ["60", "Map serialization fails with non-Primitive type (or String) keys", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:46 PM", "```\nThe key gets serialized using the \"toString()\" method instead of actually\nserializing the key object.\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 17 Oct 2008 at 4:01", "```\nThe JSON specification requires that the Map keys are strings, not objects. So, \nI \nthink Gson exhibits correct behavior.\n```\n\nOriginal comment by `inder123` on 20 Oct 2008 at 1:03\n- Changed state: **Invalid**\n =||= ", 0], ["62", "Please add remove method to JsonObject", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:49 PM", "```\nPlease add remove method to JsonObject class like that:\n\n/**\n* @param property name of the member.\n*/\npublic void remove(String property) {\n  members.remove(property);\n}\n\nBecause client code needs to distinguish between null value and not defined \nproperty. I have to patch the library code to use in my project.\n```\n\nOriginal issue reported on code.google.com by `art.or...@gmail.com` on 20 Oct 2008 at 5:11", "```\nSorry for the wrong issue category, please change it to Enhancement\n```\n\nOriginal comment by `art.or...@gmail.com` on 20 Oct 2008 at 5:13\n =||= Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 11:09\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nFix submitted in r307.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Nov 2008 at 1:24\n- Changed state: **Fixed**\n =||= ", 0], ["63", "Gson is not threadsafe", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:50 PM", "```\nGson throws ConcurrentModificationException when used concurrently. \nSee the discussion in http://groups.google.com/group/google-\ngson/browse_thread/thread/563bb51ee2495081\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 20 Oct 2008 at 6:28", "```\nI add a test for this in r274\n```\n\nOriginal comment by `inder123` on 20 Oct 2008 at 7:49\n =||= ```\nThe culprit is ObjectNavigatorFactory which holds the memory stack reference. \nThis \nstack must be held per call, not throughout the lifetime of Gson.\n```\n\nOriginal comment by `inder123` on 20 Oct 2008 at 7:49\n =||= ```\nFixed in r276\n```\n\nOriginal comment by `inder123` on 20 Oct 2008 at 8:11\n- Changed state: **Fixed**\n =||= The perfomance hit might be an issue for us so we resorted to using an overrride by using our own Serde for `util.date` and `sql.date`.\r\n\r\nUses FastDateFormat instead of SimpleDateFormat to ensure you dont take a performance hit due to serial usage (synchronize write and read)\r\n\r\nHave added some sample code in [github gist](https://gist.github.com/aarengee/e3ea670f64497b9140358a7db8077a24). =||= ", 0], ["64", "New JsonElements not equal", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:51 PM", "```\nWhat steps will reproduce the problem?\n1. assertEquals(new JsonElement(), new JsonElement())\n2. assertEquals(new JsonElement().hashCode(), new JsonElement().hashCode())\n3. assertTrue(new JsonElement().equals(new JsonElement()))\n\nWhat is the expected output? What do you see instead?\nAll these shoul dbe true, but they are false.\n\nWhat version of the product are you using? On what operating system?\n1.2.2\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `jacob.to...@gmail.com` on 20 Oct 2008 at 7:37", "```\nAfter r278 JsonNull elements created by Gson during deserialization are same \nelements. So, the reference equality will work for them.\n```\n\nOriginal comment by `inder123` on 29 Oct 2008 at 11:34\n =||= ```\nWhile it is nice to have equal method in JsonElement itself, it comes at a cost \nof a \nmuch more expensive value equality check instead of reference equality which is \nthe \ndefault. Since we internally use collections to hold JsonElements, I would be \nconcerned about the performance implications of implementing value equality. \nCan you \ngive specific cases where this would be desirable? \n```\n\nOriginal comment by `inder123` on 29 Oct 2008 at 11:39\n =||= ```\nI have lost track of the test case that was failing for me when I switched from\njson-marshaller to google-gson.  I have sense worked around this. (I think by\ncomparing strings and not the objects).\n\nThe general use-case is when you are manual creating JsonObjects and you want to\ncompare them.\n```\n\nOriginal comment by `jacob.to...@gmail.com` on 31 Oct 2008 at 9:00\n =||= ```\nFYI... The attached patch implements deep equals methods which addresses this \nissue.\n The patch also includes my escaping work because I was too lazy to cut it out.\n```\n\nOriginal comment by `z13g...@gmail.com` on 23 Apr 2009 at 9:00\n\nAttachments:\n- [equals.and.escaping.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-64/comment-4/equals.and.escaping.patch)\n =||= ```\nDeferred to a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 9:09\n- Added labels: **Milestone-Release1.5**\n =||= ```\nThis issue can probably be closed; JsonElement is abstract and cannot be \ninstantiated.\n```\n\nOriginal comment by `jessewil...@google.com` on 20 Aug 2010 at 5:13\n =||= ```\n... and actually it shouldn't be closed; the problem is that equals() and \nhashCode() aren't implemented for any of the JsonElement subtypes.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:58\n =||= ```\nIssue 225 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:58\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:31\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:28\n- Added labels: **Milestone-Reelase1.7**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:28\n- Added labels: **Milestone-Release1.7**\n- Removed labels: **Milestone-Reelase1.7**\n =||= ```\nThis issue was closed by revision r726.\n```\n\nOriginal comment by `limpbizkit` on 15 Feb 2011 at 12:14\n- Changed state: **Fixed**\n =||= ", 0], ["65", "Expose Gson Parser API ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:54 PM", "```\nSee discussion at\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/412b1dab8a67961e\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 21 Oct 2008 at 3:28", "```\nI really need this functionality exposed to switch my project from json.org to \ngson.\n Why artificially restrict the power of your library by not exposing this?\n\nIn the interim, I'm attaching a patch that I wrote (can be dropped into any \nproject -\njust create a com/google/gson subdirectory in your source directory)\n\n```\n\nOriginal comment by `alexande...@gmail.com` on 14 Jan 2009 at 8:17\n\nAttachments:\n- [GsonParserPatch.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-65/comment-1/GsonParserPatch.java)\n =||= ```\nr379 contains changes to expose API for JsonParser and methods to Gson to \ndeserialize\nfrom a parse tree.\n```\n\nOriginal comment by `inder123` on 4 Feb 2009 at 2:00\n- Changed state: **Fixed**\n =||= ", 0], ["66", "Deserializer too strict with string escapes???", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:55 PM", "```\nThe deserializer seems to be too strict (maybe not even compliant?) in\nhandling escapes in strings.\n\nIn particular, JSON feeds such as Twitter escape slashes in strings, and\ngson complains of a syntax error on encountering them.\n\nAlthough in theory only double-quotes, reverse solidusses (sp?), and\ncontrol characters need be escaped, the \"official\" JSON syntax at\nhttp://www.json.org/ explicitly lists the slash as being acceptable when\nescaped.\n\nYa, maybe JSON generators should not be escaping slashes. But in line with\na paraphrase of the Postel Principle (\"Generate strictly, accept\nleniently\"). maybe gson should accept any character when escaped?\n\nJust a thought, I could be wrong. Comments welcome and expected.\n\nJim Renkel\n```\n\nOriginal issue reported on code.google.com by `james.re...@gmail.com` on 22 Oct 2008 at 4:02", "```\nAppendix E of \"JavaScript: The Good Parts\" said that:\n\n\"JSON allows the / character to be escaped so that JSON can be embedded in HTML\n<script> tags. HTML does not allow the sequence </ except to start the \n</script> tag.\nJSON allows <\\/, which produces the same result but does not confuse HTML.\"\n\n\nThe solidum characters are escaped in other popular scripting languages (e.g., \nPHP).\nSo I think gson should consider it seriously.\n```\n\nOriginal comment by `william....@gmail.com` on 29 Oct 2008 at 10:17\n =||= ```\nI agree this is a good idea. I have fixed this in r279 and also added a test. \nWe will \ninclude it in our next release.\n```\n\nOriginal comment by `inder123` on 29 Oct 2008 at 11:32\n- Changed state: **Fixed**\n =||= ", 0], ["67", "Can't read own output", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:56 PM", "```\nWhat steps will reproduce the problem?\n\nAttempting to deserialize this string to a bean:\n\n{\"body\":{\"username\":\"some\ndude\",\"fullname\":\"w00t\",\"description\":\"testing\",\"loginCount\":0,\"failedLogins\":0,\n\"passwordLastChanged\":\"Oct\n12, 2008 2:44:01\nPM\",\"whoChanged\":\"mike\",\"email\":\"asdf@asdf.com\",\"userId\":82,\"whoCreated\":\"admin\"\n,\"external\":true,\"expiredPassword\":false,\"groups\":[],\"permissions\":[{\"permission\nId\":62,\"level\":7,\"privilege\":{\"privilegeId\":61,\"name\":\"Login\",\"description\":\"Per\nmission\nto login to\nCompass\",\"applicationId\":81}}],\"attributes\":{\"entities\":\"\\u0000\\u003d{\\\"entityId\n\\\":62452,\\\"name\\\":\\\"some\ncompany, LLC\\\",\\\"type\\\":\\\"Nam\\\"}\"}},\"version\":1,\"statusCode\":0}\n\n\nWhat is the expected output? What do you see instead?\n\nCaused by: com.google.gson.ParseException: Encountered \"e\" at line 1,\ncolumn 476.\nWas expecting one of:\n    \"}\" ...\n    \",\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:435)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:374)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:48)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n\nWhat version of the product are you using? On what operating system?\n\n1.2.2, java6\n\nPlease provide any additional information below.\n\nIt seems to have trouble with this member:\n{\"entities\":\"\\u0000\\u003d{\\\"entityId\\\":62452,\\\"name\\\":\\\"some company,\nLLC\\\",\\\"type\\\":\\\"Nam\\\"}\"}\n\nIt's a string list written to a String by DataOutputStream and converted to\njson with gson.toJson(Object).\n\nThanks for the great product. I've been really happy with it so far.\n\n```\n\nOriginal issue reported on code.google.com by `mrjohns...@gmail.com` on 25 Oct 2008 at 5:45", "```\nHere's the output using DEBUG_PARSER = true;. I know nothing of javacc but it \nseems\nthe parser stops after '\"entities\":'.\n\n{\"body\":{\"username\":\"some\ndude\",\"fullname\":\"w00t\",\"description\":\"testing\",\"loginCount\":0,\"failedLogins\":0,\n\"passwordLastChanged\":\"Oct\n12, 2008 2:44:01\nPM\",\"whoChanged\":\"johnsm89\",\"email\":\"asdf@asdf.com\",\"userId\":82,\"whoCreated\":\"ad\nmin\",\"external\":true,\"expiredPassword\":false,\"groups\":[],\"permissions\":[{\"permis\nsionId\":62,\"level\":7,\"privilege\":{\"privilegeId\":61,\"name\":\"Login\",\"description\":\n\"Permission\nto login to\nCompass\",\"applicationId\":81}}],\"attributes\":{\"entities\":\"\\u0000\\u003d{\\\"entityId\n\\\":62452,\\\"name\\\":\\\"xxxxxxxxxxxxxxx,\nLLC\\\",\\\"type\\\":\\\"Nam\\\"}\"}},\"version\":1,\"statusCode\":0}\n\nCall:   parse\n  Call:   JsonObject\n    Consumed token: <\"{\" at line 1 column 1>\n    Call:   Members\n      Call:   Pair\n        Call:   JsonString\n          Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"body\"\" at line 1 column 2>\n        Return: JsonString\n        Consumed token: <\":\" at line 1 column 8>\n        Call:   JsonValue\n          Call:   JsonObject\n            Consumed token: <\"{\" at line 1 column 9>\n            Call:   Members\n              Call:   Pair\n                Call:   JsonString\n                  Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"username\"\" at line 1\ncolumn 10>\n                Return: JsonString\n                Consumed token: <\":\" at line 1 column 20>\n                Call:   JsonValue\n                  Call:   JsonString\n                    Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"some dude\"\" at line 1\ncolumn 21>\n                  Return: JsonString\n                Return: JsonValue\n              Return: Pair\n              Consumed token: <\",\" at line 1 column 32>\n              Call:   Members\n                Call:   Pair\n                  Call:   JsonString\n                    Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"fullname\"\" at line 1\ncolumn 33>\n                  Return: JsonString\n                  Consumed token: <\":\" at line 1 column 43>\n                  Call:   JsonValue\n                    Call:   JsonString\n                      Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"w00t\"\" at line 1\ncolumn 44>\n                    Return: JsonString\n                  Return: JsonValue\n                Return: Pair\n                Consumed token: <\",\" at line 1 column 50>\n                Call:   Members\n                  Call:   Pair\n                    Call:   JsonString\n                      Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"description\"\" at\nline 1 column 51>\n                    Return: JsonString\n                    Consumed token: <\":\" at line 1 column 64>\n                    Call:   JsonValue\n                      Call:   JsonString\n                        Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"testing\"\" at line\n1 column 65>\n                      Return: JsonString\n                    Return: JsonValue\n                  Return: Pair\n                  Consumed token: <\",\" at line 1 column 74>\n                  Call:   Members\n                    Call:   Pair\n                      Call:   JsonString\n                        Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"loginCount\"\" at\nline 1 column 75>\n                      Return: JsonString\n                      Consumed token: <\":\" at line 1 column 87>\n                      Call:   JsonValue\n                        Call:   JsonNumber\n                          Call:   JsonInt\n                            Call:   Digits\n                              Consumed token: <<DIGITS>: \"0\" at line 1 column 88>\n                            Return: Digits\n                          Return: JsonInt\n                        Return: JsonNumber\n                      Return: JsonValue\n                    Return: Pair\n                    Consumed token: <\",\" at line 1 column 89>\n                    Call:   Members\n                      Call:   Pair\n                        Call:   JsonString\n                          Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"failedLogins\"\"\nat line 1 column 90>\n                        Return: JsonString\n                        Consumed token: <\":\" at line 1 column 104>\n                        Call:   JsonValue\n                          Call:   JsonNumber\n                            Call:   JsonInt\n                              Call:   Digits\n                                Consumed token: <<DIGITS>: \"0\" at line 1 column 105>\n                              Return: Digits\n                            Return: JsonInt\n                          Return: JsonNumber\n                        Return: JsonValue\n                      Return: Pair\n                      Consumed token: <\",\" at line 1 column 106>\n                      Call:   Members\n                        Call:   Pair\n                          Call:   JsonString\n                            Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"passwordLastChanged\"\" at line 1 column 107>\n                          Return: JsonString\n                          Consumed token: <\":\" at line 1 column 128>\n                          Call:   JsonValue\n                            Call:   JsonString\n                              Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"Oct 12, 2008\n2:44:01 PM\"\" at line 1 column 129>\n                            Return: JsonString\n                          Return: JsonValue\n                        Return: Pair\n                        Consumed token: <\",\" at line 1 column 154>\n                        Call:   Members\n                          Call:   Pair\n                            Call:   JsonString\n                              Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"whoChanged\"\"\nat line 1 column 155>\n                            Return: JsonString\n                            Consumed token: <\":\" at line 1 column 167>\n                            Call:   JsonValue\n                              Call:   JsonString\n                                Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"johnsm89\"\"\nat line 1 column 168>\n                              Return: JsonString\n                            Return: JsonValue\n                          Return: Pair\n                          Consumed token: <\",\" at line 1 column 178>\n                          Call:   Members\n                            Call:   Pair\n                              Call:   JsonString\n                                Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"email\"\" at\nline 1 column 179>\n                              Return: JsonString\n                              Consumed token: <\":\" at line 1 column 186>\n                              Call:   JsonValue\n                                Call:   JsonString\n                                  Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"asdf@asdf.com\"\" at line 1 column 187>\n                                Return: JsonString\n                              Return: JsonValue\n                            Return: Pair\n                            Consumed token: <\",\" at line 1 column 202>\n                            Call:   Members\n                              Call:   Pair\n                                Call:   JsonString\n                                  Consumed token: <<DOUBLE_QUOTE_LITERAL>: \"\"userId\"\"\nat line 1 column 203>\n                                Return: JsonString\n                                Consumed token: <\":\" at line 1 column 211>\n                                Call:   JsonValue\n                                  Call:   JsonNumber\n                                    Call:   JsonInt\n                                      Call:   Digits\n                                        Consumed token: <<DIGITS>: \"82\" at line 1\ncolumn 212>\n                                      Return: Digits\n                                    Return: JsonInt\n                                  Return: JsonNumber\n                                Return: JsonValue\n                              Return: Pair\n                              Consumed token: <\",\" at line 1 column 214>\n                              Call:   Members\n                                Call:   Pair\n                                  Call:   JsonString\n                                    Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"whoCreated\"\" at line 1 column 215>\n                                  Return: JsonString\n                                  Consumed token: <\":\" at line 1 column 227>\n                                  Call:   JsonValue\n                                    Call:   JsonString\n                                      Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"admin\"\" at line 1 column 228>\n                                    Return: JsonString\n                                  Return: JsonValue\n                                Return: Pair\n                                Consumed token: <\",\" at line 1 column 235>\n                                Call:   Members\n                                  Call:   Pair\n                                    Call:   JsonString\n                                      Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"external\"\" at line 1 column 236>\n                                    Return: JsonString\n                                    Consumed token: <\":\" at line 1 column 246>\n                                    Call:   JsonValue\n                                      Consumed token: <\"true\" at line 1 column 247>\n                                    Return: JsonValue\n                                  Return: Pair\n                                  Consumed token: <\",\" at line 1 column 251>\n                                  Call:   Members\n                                    Call:   Pair\n                                      Call:   JsonString\n                                        Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"expiredPassword\"\" at line 1 column 252>\n                                      Return: JsonString\n                                      Consumed token: <\":\" at line 1 column 269>\n                                      Call:   JsonValue\n                                        Consumed token: <\"false\" at line 1 column 270>\n                                      Return: JsonValue\n                                    Return: Pair\n                                    Consumed token: <\",\" at line 1 column 275>\n                                    Call:   Members\n                                      Call:   Pair\n                                        Call:   JsonString\n                                          Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"groups\"\" at line 1 column 276>\n                                        Return: JsonString\n                                        Consumed token: <\":\" at line 1 column 284>\n                                        Call:   JsonValue\n                                          Call:   JsonArray\n                                            Consumed token: <\"[\" at line 1 column 285>\n                                            Consumed token: <\"]\" at line 1 column 286>\n                                          Return: JsonArray\n                                        Return: JsonValue\n                                      Return: Pair\n                                      Consumed token: <\",\" at line 1 column 287>\n                                      Call:   Members\n                                        Call:   Pair\n                                          Call:   JsonString\n                                            Consumed token: <<DOUBLE_QUOTE_LITERAL>:\n\"\"permissions\"\" at line 1 column 288>\n                                          Return: JsonString\n                                          Consumed token: <\":\" at line 1 column 301>\n                                          Call:   JsonValue\n                                            Call:   JsonArray\n                                              Consumed token: <\"[\" at line 1 column 302>\n                                              Call:   Elements\n                                                Call:   JsonValue\n                                                  Call:   JsonObject\n                                                    Consumed token: <\"{\" at line 1\ncolumn 303>\n                                                    Call:   Members\n                                                      Call:   Pair\n                                                        Call:   JsonString\n                                                          Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"permissionId\"\" at line 1 column 304>\n                                                        Return: JsonString\n                                                        Consumed token: <\":\" at line\n1 column 318>\n                                                        Call:   JsonValue\n                                                          Call:   JsonNumber\n                                                            Call:   JsonInt\n                                                              Call:   Digits\n                                                                Consumed token:\n<<DIGITS>: \"62\" at line 1 column 319>\n                                                              Return: Digits\n                                                            Return: JsonInt\n                                                          Return: JsonNumber\n                                                        Return: JsonValue\n                                                      Return: Pair\n                                                      Consumed token: <\",\" at line 1\ncolumn 321>\n                                                      Call:   Members\n                                                        Call:   Pair\n                                                          Call:   JsonString\n                                                            Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"level\"\" at line 1 column 322>\n                                                          Return: JsonString\n                                                          Consumed token: <\":\" at\nline 1 column 329>\n                                                          Call:   JsonValue\n                                                            Call:   JsonNumber\n                                                              Call:   JsonInt\n                                                                Call:   Digits\n                                                                  Consumed token:\n<<DIGITS>: \"7\" at line 1 column 330>\n                                                                Return: Digits\n                                                              Return: JsonInt\n                                                            Return: JsonNumber\n                                                          Return: JsonValue\n                                                        Return: Pair\n                                                        Consumed token: <\",\" at line\n1 column 331>\n                                                        Call:   Members\n                                                          Call:   Pair\n                                                            Call:   JsonString\n                                                              Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"privilege\"\" at line 1 column 332>\n                                                            Return: JsonString\n                                                            Consumed token: <\":\" at\nline 1 column 343>\n                                                            Call:   JsonValue\n                                                              Call:   JsonObject\n                                                                Consumed token: <\"{\"\nat line 1 column 344>\n                                                                Call:   Members\n                                                                  Call:   Pair\n                                                                    Call:   JsonString\n                                                                      Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"privilegeId\"\" at line 1 column 345>\n                                                                    Return: JsonString\n                                                                    Consumed token:\n<\":\" at line 1 column 358>\n                                                                    Call:   JsonValue\n                                                                      Call:   JsonNumber\n                                                                        Call:   JsonInt\n                                                                          Call:   Digits\n                                                                            Consumed\ntoken: <<DIGITS>: \"61\" at line 1 column 359>\n                                                                          Return: Digits\n                                                                        Return: JsonInt\n                                                                      Return: JsonNumber\n                                                                    Return: JsonValue\n                                                                  Return: Pair\n                                                                  Consumed token:\n<\",\" at line 1 column 361>\n                                                                  Call:   Members\n                                                                    Call:   Pair\n                                                                      Call:   JsonString\n                                                                        Consumed\ntoken: <<DOUBLE_QUOTE_LITERAL>: \"\"name\"\" at line 1 column 362>\n                                                                      Return: JsonString\n                                                                      Consumed token:\n<\":\" at line 1 column 368>\n                                                                      Call:   JsonValue\n                                                                        Call:  \nJsonString\n                                                                          Consumed\ntoken: <<DOUBLE_QUOTE_LITERAL>: \"\"Login\"\" at line 1 column 369>\n                                                                        Return:\nJsonString\n                                                                      Return: JsonValue\n                                                                    Return: Pair\n                                                                    Consumed token:\n<\",\" at line 1 column 376>\n                                                                    Call:   Members\n                                                                      Call:   Pair\n                                                                        Call:  \nJsonString\n                                                                          Consumed\ntoken: <<DOUBLE_QUOTE_LITERAL>: \"\"description\"\" at line 1 column 377>\n                                                                        Return:\nJsonString\n                                                                        Consumed\ntoken: <\":\" at line 1 column 390>\n                                                                        Call:   JsonValue\n                                                                          Call:  \nJsonString\n                                                                            Consumed\ntoken: <<DOUBLE_QUOTE_LITERAL>: \"\"Permission to login to Compass\"\" at line 1 \ncolumn 391>\n                                                                          Return:\nJsonString\n                                                                        Return: JsonValue\n                                                                      Return: Pair\n                                                                      Consumed token:\n<\",\" at line 1 column 423>\n                                                                      Call:   Members\n                                                                        Call:   Pair\n                                                                          Call:  \nJsonString\n                                                                            Consumed\ntoken: <<DOUBLE_QUOTE_LITERAL>: \"\"applicationId\"\" at line 1 column 424>\n                                                                          Return:\nJsonString\n                                                                          Consumed\ntoken: <\":\" at line 1 column 439>\n                                                                          Call:  \nJsonValue\n                                                                            Call:  \nJsonNumber\n                                                                              Call: \n JsonInt\n                                                                                Call:\n  Digits\n\nConsumed token: <<DIGITS>: \"81\" at line 1 column 440>\n\nReturn: Digits\n                                                                              Return:\nJsonInt\n                                                                            Return:\nJsonNumber\n                                                                          Return:\nJsonValue\n                                                                        Return: Pair\n                                                                      Return: Members\n                                                                    Return: Members\n                                                                  Return: Members\n                                                                Return: Members\n                                                                Consumed token: <\"}\"\nat line 1 column 442>\n                                                              Return: JsonObject\n                                                            Return: JsonValue\n                                                          Return: Pair\n                                                        Return: Members\n                                                      Return: Members\n                                                    Return: Members\n                                                    Consumed token: <\"}\" at line 1\ncolumn 443>\n                                                  Return: JsonObject\n                                                Return: JsonValue\n                                              Return: Elements\n                                              Consumed token: <\"]\" at line 1 column 444>\n                                            Return: JsonArray\n                                          Return: JsonValue\n                                        Return: Pair\n                                        Consumed token: <\",\" at line 1 column 445>\n                                        Call:   Members\n                                          Call:   Pair\n                                            Call:   JsonString\n                                              Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"attributes\"\" at line 1 column 446>\n                                            Return: JsonString\n                                            Consumed token: <\":\" at line 1 column 458>\n                                            Call:   JsonValue\n                                              Call:   JsonObject\n                                                Consumed token: <\"{\" at line 1 column\n459>\n                                                Call:   Members\n                                                  Call:   Pair\n                                                    Call:   JsonString\n                                                      Consumed token:\n<<DOUBLE_QUOTE_LITERAL>: \"\"entities\"\" at line 1 column 460>\n                                                    Return: JsonString\n                                                    Consumed token: <\":\" at line 1\ncolumn 470>\n                                                    Call:   JsonValue\n                                                    Return: JsonValue\n                                                  Return: Pair\n                                                Return: Members\n                                              Return: JsonObject\n                                            Return: JsonValue\n                                          Return: Pair\n                                        Return: Members\n                                      Return: Members\n                                    Return: Members\n                                  Return: Members\n                                Return: Members\n                              Return: Members\n                            Return: Members\n                          Return: Members\n                        Return: Members\n                      Return: Members\n                    Return: Members\n                  Return: Members\n                Return: Members\n              Return: Members\n            Return: Members\n          Return: JsonObject\n        Return: JsonValue\n      Return: Pair\n    Return: Members\n  Return: JsonObject\nReturn: parse\n16282 [http-8080-Processor23] ERROR com.botw.trinity.sales.servlet.Admin  - \nUnknown\nerror evaluating script: \norg.mozilla.javascript.WrappedException: Wrapped\ncom.botw.trinity.sales.dao.DaoException: Error getting user (/getuser#10)\n    at org.mozilla.javascript.Context.throwAsScriptRuntimeEx(Context.java:1757)\n    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:170)\n    at org.mozilla.javascript.NativeJavaMethod.call(NativeJavaMethod.java:243)\n    at org.mozilla.javascript.optimizer.OptRuntime.call2(OptRuntime.java:76)\n    at org.mozilla.javascript.gen.c3._c0(/getuser:10)\n    at org.mozilla.javascript.gen.c3.call(/getuser)\n    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)\n    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)\n    at org.mozilla.javascript.gen.c3.call(/getuser)\n    at org.mozilla.javascript.gen.c3.exec(/getuser)\n    at org.mozilla.javascript.Context.evaluateReader(Context.java:1227)\n    at com.botw.trinity.sales.servlet.Admin.processRequest(Admin.java:141)\n    at com.botw.trinity.sales.servlet.Admin.doGet(Admin.java:183)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n    at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilt\nerChain.java:269)\n    at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.\njava:188)\n    at com.botw.sanction.client.SanctionNtlmFilter.doFilter(SanctionNtlmFilter.java:129)\n    at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilt\nerChain.java:215)\n    at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.\njava:188)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)\n    at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConne\nction(Http11BaseProtocol.java:665)\n    at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n    at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorker\nThread.java:81)\n    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)\n    at java.lang.Thread.run(Thread.java:619)\nCaused by: com.botw.trinity.sales.dao.DaoException: Error getting user\n    at com.botw.trinity.sales.dao.TrinitySalesDao.getUser(TrinitySalesDao.java:2819)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:155)\n    ... 30 more\nCaused by: java.util.concurrent.ExecutionException:\ncom.google.gson.JsonParseException: Failed parsing JSON source:\njava.io.StringReader@2de41d to Json\n    at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:232)\n    at java.util.concurrent.FutureTask.get(FutureTask.java:91)\n    at com.botw.trinity.sales.dao.TrinitySalesDao.getUser(TrinitySalesDao.java:2815)\n    ... 35 more\nCaused by: com.google.gson.JsonParseException: Failed parsing JSON source:\njava.io.StringReader@2de41d to Json\n    at com.google.gson.Gson.fromJson(Gson.java:386)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n    at com.botw.sanction.client.ClientRequest.call(ClientRequest.java:93)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)\n    ... 1 more\nCaused by: com.google.gson.ParseException: Encountered \"\\\"\" at line 1, column \n471.\nWas expecting one of:\n    <DIGITS> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"null\" ...\n    \"[\" ...\n    \"true\" ...\n    \"false\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:512)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:450)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:189)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:100)\n    at com.google.gson.JsonParser.Members(JsonParser.java:78)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:171)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:100)\n    at com.google.gson.JsonParser.Members(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.Members(JsonParser.java:82)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:171)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:100)\n    at com.google.gson.JsonParser.Members(JsonParser.java:78)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)\n    at com.google.gson.JsonParser.parse(JsonParser.java:13)\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    ... 8 more\n\n```\n\nOriginal comment by `mrjohns...@gmail.com` on 25 Oct 2008 at 8:50\n =||= ```\nDoh, after driving myself nuts for a while with the javacc grammar, and trying \njust\nabout everything else, I traced my error to using JsonObject.toString() in a \ncustom\ndeserializer, which translated the escapes. Oops.\n\nI'd suggest please overriding toString() to either write json or provide the \noriginal\njson source would be handy.\n\nPlease close this, sorry for the noise.\n\n```\n\nOriginal comment by `mrjohns...@gmail.com` on 27 Oct 2008 at 5:56\n =||= ```\ntoString() should only display internal state of the object, and I think it \ndoes a \nreasonably good job of that. What specific thing would you want changed in the \noutput? Please reopen the bug if you think we dont give out enough information.\n```\n\nOriginal comment by `inder123` on 13 Nov 2008 at 1:31\n- Changed state: **Invalid**\n =||= ", 0], ["68", "Gson should support null values for primitive wrapper types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:57 PM", "```\nSee thread\nhttp://groups.google.com/group/google-gson/browse_thread/thread/8418964267ace8f1\n```\n\nOriginal issue reported on code.google.com by `inder123` on 30 Oct 2008 at 1:31", "```\nAdded tests in r280 that serialize and deserialize null fields that are wrapped\nprimitive types (Long). The tests pass so I am closing this bug.\n```\n\nOriginal comment by `inder123` on 30 Oct 2008 at 1:48\n- Changed state: **Invalid**\n =||= ```\nThe real issue is that a custom type adapter registered for a primitive type is \nnot\ninvoked. I verified the bug in a test in r281\n\nWe need to think through the use-cases of registering a custom type adapter for\nprimitive types before we implement this.\n```\n\nOriginal comment by `inder123` on 30 Oct 2008 at 6:28\n- Changed state: **Accepted**\n =||= ```\nFixed in r282 by providing support to override default type adapters for \nprimitive types.\n```\n\nOriginal comment by `inder123` on 31 Oct 2008 at 12:20\n- Changed state: **Fixed**\n =||= ", 0], ["69", "createInstance before deserialize", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:58 PM", "```\nHi, only a cuestion:\n\nWhy call createInstance before deserialize?\nIn deserialize I'm need make new MyObj but before in createInstance already\ni'am make new MyObj.\n\nThanks\n```\n\nOriginal issue reported on code.google.com by `inad...@gmail.com` on 12 Nov 2008 at 11:54", "```\nThis is a valid issue although it doesnt really have an impact on the users \nsince the \nfirst instance gets thrown away. We should fix this by writing a ClassNavigator \ninstead of ObjectNavigator that is used for the deserialization. This is not a \nhigh \npriority bug though, unless you convince us of otherwise. \n```\n\nOriginal comment by `inder123` on 13 Nov 2008 at 1:43\n- Changed state: **Accepted**\n =||= ```\nMedium or less\nThanks\n\n```\n\nOriginal comment by `inad...@gmail.com` on 13 Nov 2008 at 12:33\n =||= Original comment by `joel.leitch@gmail.com` on 19 Nov 2008 at 1:20\n =||= ```\nFix submitted in r311.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 25 Nov 2008 at 6:58\n- Changed state: **Fixed**\n =||= ```\nIssue 78 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:51\n =||= ", 0], ["70", "JsonArray of primative to Collection of non-Primative or Strings fails", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:22:59 PM", "```\nI have this model:\npublic class Foo {\n  private String part1;\n  private String part2;\n\n  public Foo(String string) {\n    String[] parts = strings.split[\"|\"];\n    part1 = parts[0];\n    part2 = parts[1];\n  }\n}\n\nI have this deserializer:\npublic class FooAdapter implements JsonDeserializer<Foo>,\nInstanceCreator<Foo> {\n\n    //Fill up Eden with objects that will be thrown away\n    public Foo createInstance(Type type) {\n        return new Foo(\"unknown|thing\");\n    }\n\n    public Foodeserialize(JsonElement src, Type type,\nJsonDeserializationContext context)\n            throws JsonParseException {\n        return new Foo(src.getAsString());\n    }\n}\n\nI think have this line that fails:\nnew GsonBuilder().registerTypeAdapter(Foo.class, new FooAdapter())\n                .create().fromJson(\"[\\\"Jacob|Tomaw\\\"]\", new\nTypeToken<Set<Foo>>() {}.getType());\n\ncom.google.gson.JsonParseException: Can not adapt type class\njava.lang.String to class Foo\n```\n\nOriginal issue reported on code.google.com by `jacob.to...@gmail.com` on 14 Nov 2008 at 5:44", "```\nI added testS in r292 that check this functionality but could not reproduce \nthis bug. \nEither this bug is invalid, or has been fixed in the big overhaul that happened \nin\nversion 1.2.3. \n\nI noticed that the above test has a bug. strings.split(\"|\") will split \"abc\" \ninto\n\"a\",\"b\",\"c\" because | is a reserved word for regex.\n```\n\nOriginal comment by `inder123` on 14 Nov 2008 at 10:02\n- Changed state: **Invalid**\n =||= ```\nDang,\nCaught coding in a textarea! :)\n\nI was trying to make the example lest contrived, but the reality is that\nFooAdapter.deserialize is never called in v1.2.2\n```\n\nOriginal comment by `jacob.to...@gmail.com` on 14 Nov 2008 at 10:05\n =||= ```\nAdded more tests for this bug in r293.\n\nJacob, can you look at the tests and see if that is what you were intending?\n\nMy tests (based on your code) essentially ensure that custom\nserializers/deserializers are called for the elements of a collection or a map.\n```\n\nOriginal comment by `inder123` on 14 Nov 2008 at 10:12\n =||= ```\nYeah that test looks spot on.\n\nI copied the test into my check out of 1.2.2 and it fails exactly like I would\nexpect.  So if it work in 1.2.3 then I think I am satisfied.\n```\n\nOriginal comment by `jacob.to...@gmail.com` on 14 Nov 2008 at 10:35\n =||= ", 0], ["71", "Parser fails on \"1E+5\"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:01 PM", "```\n* What steps will reproduce the problem?\n\nTry executing either of these lines:\n    Double x = new Gson().fromJson(\"1E+5\", Double.class);\n    BigDecimal y = new Gson().fromJson(\"1E+5\", BigDecimal.class);\n\n\n* What is the expected output? What do you see instead?\n\nThe expected result is a Double or BigDecimal containing the value 100000.\nThe actual behaviour is a NumberFormatException thrown from within the\njava.math.BigDecimal constructor.  The key line is in the method\nJsonParser.JsonNumber():\n\n    n = new java.math.BigDecimal(intpart + fracpart + exppart);\n\nAt this point, fracpart is null because there is no decimal point in\n\"1E+5\", and so the string addition produces \"1nullE+5\".  Is this a bug\nin JsonParser.jj or perhaps even in the parser generator?\n\n\n* What version of the product are you using? On what operating system?\n\nI'm using Gson release 1.2.3 on Linux.\n```\n\nOriginal issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:39", "Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 7:55\n- Changed state: **Accepted**\n =||= ```\nFixed in r304\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 7:56\n- Changed state: **Fixed**\n =||= ", 0], ["72", "BigDecimal loses precision on round trip", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:02 PM", "```\n* What steps will reproduce the problem?\n\nTry executing the following:\n\n    BigDecimal x = new BigDecimal(\"1.00\");\n    String json = new Gson().toJson(x);\n    BigDecimal y = new Gson().fromJson(json, BigDecimal.class);\n    assertEquals(x, y);\n\n\n* What is the expected output? What do you see instead?\n\nx and y should be equal, but they aren't.  The assertion fails with:\n\n    expected: <1.00> but was: <1.0>\n\nPrecision is lost: x.precision() is 3, but y.precision() is 2.  This\nseems to be happening because the JsonParser.JsonNumber() method is\ntrying to optimize the number representation -- see the clause beginning\nwith \"if (exppart != null)\".  Because there is no exponent, it chooses\na Double, which loses the information on how many digits of precision\nare present.\n\nThis problem doesn't happen for numbers with exponents.  Parsing \"1.00\"\nyields a BigDecimal with precision 2, but parsing \"1.00E+5\" does produce\na BigDecimal with precision 3.\n\nSince BigDecimal is carefully designed to preserve information in\nits string representation (see the Javadoc for BigDecimal.toString()),\nand its equals() method considers \"1.0\" and \"1.00\" to be unequal,\nit would be nice to carry this through.  I believe this would just be\na matter of always using BigDecimal as the representation in the parser,\nregardless of whether \"exppart\" or \"fracpart\" are present, and converting\nto another number type only when you know what kind of number is being\nrequested.\n\n\n* What version of the product are you using? On what operating system?\n\nI'm using Gson 1.2.3 on Linux.\n```\n\nOriginal issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:51", "```\nFix submitted is r306.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 8:26\n- Changed state: **Fixed**\n =||= ", 0], ["73", "Backwards compatibility problem found - Serializing Collection<Object>", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:03 PM", "```\nGson use to be able to serialize a field and/or object of type\nCollection<Object>, but now fails to serialize properly.\n\nSupport in 1.2.2\nFails in 1.2.3\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 20 Nov 2008 at 1:22", "```\nFix submitted in r308\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Nov 2008 at 1:22\n- Changed state: **Fixed**\n =||= ", 0], ["74", "addProperty Boolean in JsonObject", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:04 PM", "```\nIn JsonObject is missing this methods for add JsonPrimitive:\npublic void addProperty(String property, Boolean value);\npublic void addProperty(String property, Character value);\npublic void addProperty(String property, char value);\nThanks\n```\n\nOriginal issue reported on code.google.com by `inad...@gmail.com` on 25 Nov 2008 at 12:05", "Original comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:17\n =||= ```\nNew methods were added as part of r321.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:37\n- Changed state: **Fixed**\n =||= Original comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 1:22\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["75", "Exposing examples", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:05 PM", "```\nCould you please describe how to expose the following code\n@Expose\nprivate ObjectInterface obj1;\n\n@Expose\nprivate Set<ObjectInterface> objSet = new HashSet<ObjectInterface>();\n\nIt seems it doesn't work.\n\nThank you.\n```\n\nOriginal issue reported on code.google.com by `ant%biz...@gtempaccount.com` on 25 Nov 2008 at 10:18", "```\nHere are a few links that might help:\n-\nhttp://google-gson.googlecode.com/svn/tags/1.2.3/docs/javadocs/com/google/gson/a\nnnotations/Expose.html\n-\nhttp://sites.google.com/site/gson/gson-user-guide#TOC-Excluding-Fields-From-Seri\nalization\n\nIn short, you need to create your Gson instance as follows:\nGson gson = GsonBuilder.excludeFieldsWithoutExposeAnnotation().create();\n\nHope this helps,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 26 Nov 2008 at 1:13\n =||= ```\nHello, \nI have problem when I specify interface type\n@Expose\nprivate ObjectInterface1 obj1;\n\nBut everything works fine when I use class type \n@Expose\nprivate Object1 obj1;\n\nThanks\n```\n\nOriginal comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 12:27\n =||= ```\nSeems to be working for me...what's the issue?\n\nSome test were submitted under r316 and are passing with the current Gson \ncodebase.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 26 Nov 2008 at 10:57\n =||= ```\nHi, \n\nI've created a few test classes, please verify\nThanks.\n```\n\nOriginal comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 11:53\n\nAttachments:\n- [tst.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-75/comment-4/tst.zip)\n =||= ```\nI'm using gson-1.2.3.jar from the maven repository.\nMy result is\n{\"id\":1,\"name\":\"Name\",\"manager\":{},\"contractors\":[{}],\"employees\":{\"3\":{},\"2\":{}\n}}\n```\n\nOriginal comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 11:57\n =||= ```\nOK, I see the issue.  The tests that I added above only test that the actual\ninterface field exists in the Json output.  In my case, the object had no \nfields so I\nwas expecting an empty object (i.e. {}).\n\nThis is somewhat similar to Issue #5.  Right now, I do not exactly know the best\napproach on how this bug should be fixed, but I do agree that it should be \nconsidered\nand fixed in the 1.3 release.\n\nAs a workaround, you can register a type adapter for these two interfaces.  \nHere's an\nexample of TestInterfaceA (basically replace the A to B to get TestInterfaceB):\n\npublic class TestInterfaceATypeAdapter implements \nJsonSerializer<TestInterfaceA>, \n    JsonDeserializer<TestInterfaceA>, InstanceCreator<TestInterfaceA> {\n\n  public JsonElement serialize(\n      TestInterfaceA src, Type typeOfSrc, JsonSerializationContext context) {\n    return context.serialize(src);\n  }\n\n  public TestInterfaceA createInstance(Type type) {\n    return new TestClassA();\n  }\n\n  public TestInterfaceA deserialize(JsonElement json, Type typeOfT,\n      JsonDeserializationContext context) throws JsonParseException {\n    return context.deserialize(json, TestClassA.class);\n  }\n}\n\nNOTE: The above also will allow for proper deserialization of the interface \ntype.\n\n\n\nNow when you build your Gson instance you would build it as follows:\n    Gson gson = new GsonBuilder()\n        .excludeFieldsWithoutExposeAnnotation()\n        .registerTypeAdapter(TestInterfaceA.class, new TestInterfaceATypeAdapter())\n        .registerTypeAdapter(TestInterfaceB.class, new TestInterfaceBTypeAdapter())\n        .create();\n\n\nKeep tracking this bug to find out how we handle interfaces in the future so \nthat you\ndo not have to add these silly type adapters for all interfaces that you define.\n\nHope this helps,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Nov 2008 at 8:42\n =||= ```\nHere's the output of your provided program when registering the type adapters \nfor\nthese interfaces:\n\n{\"id\":1,\"name\":\"Name\",\"manager\":{\"id\":1,\"name\":\"Manager\",\"history\":[\"ManagerH1\",\n\"ManagerH2\"]},\"contractors\":[{\"id\":1,\"name\":\"Manager\",\"history\":[\"ManagerH1\",\"Ma\nnagerH2\"]}],\"employees\":{\"3\":{\"id\":3,\"name\":\"Name3\",\"history\":[\"NameH3\"]},\"2\":{\"\nid\":2,\"name\":\"Name2\",\"history\":[\"NameH2\"]}}}\n\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Nov 2008 at 8:46\n =||= ```\nHello, \n\nAny news about this issue?\nI've tried google-gson-1.3-release version, but interfaces exposing without Type\nAdapters still doesn't work.\n\nThank you.\n\n```\n\nOriginal comment by `ant%biz...@gtempaccount.com` on 14 Apr 2009 at 1:13\n =||= ```\nThis is fixed in 1.4 (will be released soon).\n\nAdded tests to prove it (r458).\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 7:05\n- Changed state: **Fixed**\n =||= ", 0], ["76", "A field with a SerializedName in common with another field isn't included in serialized output", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:10 PM", "```\nWhat steps will reproduce the problem?\n\n1.\n\npublic class Test {\n @SerializedName(\"a\")\n public Integer b;\n public Double a;\n}\n\n2.\n\nTest t = new Test();\nt.b = 3;\ngson.toJson(t)\n\nWhat is the expected output? What do you see instead?\n\nExpect: {\"a\":3}\nActual: {}\n\nWhat version of the product are you using? On what operating system?\n\nThis works as expected in v1.2.2, but broke in one of the more recent builds.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 26 Nov 2008 at 9:06", "```\nFix submitted in r318.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Nov 2008 at 12:52\n- Changed state: **Fixed**\n =||= ", 0], ["77", "Serializing a null value in a Map throws a NPE", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:11 PM", "```\nIf a Map contains a \"null\" as one of its entry values, the default Map\nserialization throws an NPE.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Nov 2008 at 1:03", "```\nFix submitted in r320.\n\nSee the unit tests that were added into the MapTests class for informaiton on \nhow\nnulls function within a map.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:03\n- Changed state: **Fixed**\n =||= ", 0], ["78", "Custom Deserializer is not used when calling directly gson.fromJson(jsonString, MyCustomClass.class)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:11 PM", "```\nWhat steps will reproduce the problem?\n1. Define a MyCustomClass\n2. Build a gson instance, with a MyCustomClassDeserializer bound to it.\n3. Try to deserialize directly a string to MyCustomClass (i.e. the\nMyCustomClass instance is not a member of an object to deserialize, it IS\nthe object to deserialize)\n\nWhat is the expected output? What do you see instead?\nThe JVM should pass through MyCustomClassDeserializer.deserialize, instead\nit searches for a no arg constructor in MyCustomClass\n\n\nWhat version of the product are you using? On what operating system?\nv1.2.3 on WinXP SP3.\n\nPlease provide any additional information below.\nN/A\n\n```\n\nOriginal issue reported on code.google.com by `nicolas....@gmail.com` on 9 Dec 2008 at 3:53", "```\nAn instance creator (or default constructor) is no longer required when \nregistering a\ncustom deserializer.  As a \"temporary\" fix, you can have your type adapter \nimplement\na \"InstanceCreator\" for your object.  This instance create returns a dummy \nobject\nwhich will just get discarded and garbage collected later.\n\nWe are going to try and push a new release within the next couple of weeks.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:51\n- Changed state: **Duplicate**\n =||= ", 0], ["79", "java.util.UUID should be supported out of the box (just like URL and URI do)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:12 PM", "```\nWhat steps will reproduce the problem?\nAdd tests:\n    public void testUuidSerialization() throws Exception {\n        String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\n        UUID uuid = UUID.fromString(uuidValue);\n        assertEquals('\"' + uuidValue + '\"', gson.toJson(uuid));\n    }\n\n    public void testUuidDeserialization() {\n        String uuidValue = \"c237bec1-19ef-4858-a98e-521cf0aad4c0\";\n        String json = '\"' + uuidValue + '\"';\n        UUID target = gson.fromJson(json, UUID.class);\n        assertEquals(uuidValue, target.toString());\n    }\n\n\nSuggestion of how to implement type adapter:\n\n  private static class UuidTypeAdapter implements JsonSerializer<UUID>,\nJsonDeserializer<UUID>,\n    InstanceCreator<UUID> {\n\n    public JsonElement serialize(UUID src, Type typeOfSrc,\nJsonSerializationContext context) {\n        return new JsonPrimitive(src.toString());\n    }\n\n    public UUID deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context) \n    throws JsonParseException {     \n        return UUID.fromString(json.getAsString());\n    }\n\n    public UUID createInstance(Type type) {     \n        return new UUID(0, 0);\n    }\n    @Override\n    public String toString() {\n        return UuidTypeAdapter.class.getSimpleName();\n    }\n  }\n\n\n```\n\nOriginal issue reported on code.google.com by `heg...@gmail.com` on 9 Dec 2008 at 11:56", "```\nThis seems reasonable to me!\n\nI am going to take your suggested implementation and modify it ever so \nslightly. \nThis is because the next release of Gson will not longer require an \n\"InstanceCreator\"\nwhen a custom deserializer is registered (i.e. Issue #69).\n\nThanks for the suggestion and implementation :)\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:36\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nDefault support for UUID implemented in r327.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:45\n- Changed state: **Fixed**\n =||= ", 0], ["80", "Is that gson not support Chinese charaterset?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:13 PM", "```\nWhen serializing Chinese charater with gson like: gson.toJson('\u6d4b\u8bd5'); it \nwill return something like \"\\u6d4b\\u8bd5\".  Is that gson not support non-\nEnglish charaterset?I'm using the gson-1.2.3. Thanks!\n\n\n\n```\n\nOriginal issue reported on code.google.com by `roger.y2...@gmail.com` on 10 Dec 2008 at 9:12", "```\nThis was a problem before, but was fixed in Issue #23.  See the following \nthread:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/f2094410e2a7f347\n\nIn short, \\u6d4b\\u8bd5 is the unicode equivalent of \u6d4b\u8bd5.\n\nTry the following:\npublic static void main(String[] args) {\n  System.out.println(\"\u6d4b\u8bd5\");\n  System.out.println(\"\\u6d4b\\u8bd5\");\n}\n\nNOTE: you'll need to save the file as UTF-8\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Dec 2008 at 9:38\n- Changed state: **Duplicate**\n =||= ```\nWe agree with the issue that was raised. Gson should not write escaped unicode \ncharacters and instead let the underlying writer (passed in toJson()) handle \nthe \ncharacter encoding.\n```\n\nOriginal comment by `inder123` on 19 Dec 2008 at 8:46\n- Changed state: **Accepted**\n =||= ```\nFixed in r342\n```\n\nOriginal comment by `inder123` on 19 Dec 2008 at 8:47\n- Changed state: **Fixed**\n =||= ", 0], ["81", "Exception when deserializing Double.NaN, Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITY", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:15 PM", "```\nWhat steps will reproduce the problem?\n\npublic class GsonDouble\n{\n    private double negInf = Double.NEGATIVE_INFINITY;\n    private double posInf = Double.POSITIVE_INFINITY;\n    private double notANumber = Double.NaN;\n    private double number = 2.0;\n\n    public static void main(String[] args)\n    {\n        Gson gson = new Gson();\n\n        String json = gson.toJson(new GsonDouble());\n        System.out.println(json);\n\n        GsonDouble gsonDouble = gson.fromJson(json, GsonDouble.class);\n\n    }\n}\n\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@134bed0 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:321)\n    at com.google.gson.Gson.fromJson(Gson.java:297)\n    at GsonDouble.main(GsonDouble.java:29)\nCaused by: com.google.gson.TokenMgrError: Lexical error at line 1, column\n12.  Encountered: \"I\" (73), after : \"\"\n    at\ncom.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:\n999)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:366)\n    at com.google.gson.JsonParser.Digits(JsonParser.java:267)\n    at com.google.gson.JsonParser.JsonInt(JsonParser.java:241)\n    at com.google.gson.JsonParser.JsonNumber(JsonParser.java:192)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:131)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:370)\n    ... 3 more\n\n\nThe serialized String looks as follows:\n\n{\"negInf\":-Infinity,\"posInf\":Infinity,\"notANumber\":NaN,\"number\":2.0}\n\nI guess the serialization is ok, since JavaScript uses Number.NaN,\nNumber.NEGATIVE_INFINITY and Number.POSITIVE_INFINITY and the text\nrepresentation fits the above JSON string.\nThe deserializer seems to be unaware of this.\n\nI would be great if you could fix this for the upcoming release.\n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 12 Dec 2008 at 1:09", "```\nAs per the JSON spec, see http://tools.ietf.org/id/draft-crockford-jsonorg-json-\n04.txt, infinity is not a valid JSON number. However, we will consider \naccepting it \nas valid input to our parser. BTW, this also means that we are generating \ninvalid \nJSON when infinity is present. Any suggestions on a good approach to handle it? \nShould we just ignore the field, or should we throw an exception when a user \ntries to \nserialize infinity.\n```\n\nOriginal comment by `inder123` on 18 Dec 2008 at 7:10\n =||= ```\nr333 disallows NaN, positive or negative infinity double values to be \nserialized \nthrough Gson. We will add additional support for disallowing this through Float \nor \nBigDecimal. This is to ensure that we do not emit invalid JSON.\n```\n\nOriginal comment by `inder123` on 18 Dec 2008 at 8:04\n- Changed state: **Started**\n =||= ```\nThe spec says \"Numeric values that cannot be represented as sequences of digits \n(such\nas Infinity and NaN) are not permitted.\" \nBut the spec also says: \n\"It is inappropriate to use Internet-Drafts as reference material or to cite \nthem\nother than as \"work in progress.\"\"\nAnd: \"Expires: June 10, 2006\"\n\nSo maybe there is a new spec which allows NaN/Infinity and if not then one \nshould\nwrite one.\n\nJavaScript has no problems with the above JSON-String as the example below \nshows:\n\n<html>\n<script>\nvar json =\n\"{\\\"negInf\\\":-Infinity,\\\"posInf\\\":Infinity,\\\"notANumber\\\":NaN,\\\"number\\\":2.0}\";\nvar obj = eval('(' + json + ')');\nalert(\"negInf= \"+obj.negInf+\" posInf= \"+obj.posInf+\" notANumber= \n\"+obj.notANumber+\"\nnumber= \"+obj.number);\nalert(\"is NaN \" + isNaN(obj.notANumber));\n</script>\n<body>\n</body>\n</html>\n\nIMHO gson/json should support all values of the Double/Number object. The spec \nseems\nto be outdated and incomplete.\n\n```\n\nOriginal comment by `nit...@googlemail.com` on 18 Dec 2008 at 8:42\n =||= ```\nQuote from r333:\nsrc + \" is not a valid double value as per JavaScript specification.\"\n\nI think this is definitely wrong since Number.NaN, Number.NEGATIVE_INFINITY and\nNumber.POSITIVE_INFINITY are perfectly legal within JavaScript. \n\nI guess, you mean JSON specification, but as I said before it is only a draft. \nYou\nshould reconsider and support all Double values in GSON.\n\n\n\n```\n\nOriginal comment by `nit...@googlemail.com` on 18 Dec 2008 at 8:51\n =||= ```\nYou are right, these are valid JavaScript values. I looked up the spec for \nJavaScript \nhttp://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf which \ndefines these to be valid values in 4.3.20, 4.3.22, and 4.3.23.\n\nHowever, the official spec for JSON http://www.ietf.org/rfc/rfc4627.txt \nexplicitly \nmarks these as non-permitted values. See section 2.4\n```\n\nOriginal comment by `inder123` on 19 Dec 2008 at 9:45\n- Changed state: **Fixed**\n =||= ```\nOne approach that we can take is that we will accept these values but never \noutput \nthese values. This is to ensure that the JSON output by Gson complies with the \nspec.  \nWe can also provide a GsonBuilder setting to allow these values to be output. \nWill \nthat be a good solution?\n```\n\nOriginal comment by `inder123` on 19 Dec 2008 at 9:47\n- Changed state: **Accepted**\n =||= ```\nr344 adds support for deserialization of NaN, Infinity and -Infinity\n```\n\nOriginal comment by `inder123` on 19 Dec 2008 at 10:22\n- Changed state: **Started**\n =||= ```\nr345 adds support for enabling serialization of NaN, Infinity and -Infinity\n```\n\nOriginal comment by `inder123` on 20 Dec 2008 at 1:26\n- Changed state: **Fixed**\n =||= ```\nSupport for NaN should be there. I cannot unset a database column which is \ndeclared\nas a number. ie. If a database column is declared as a number which can be null,\nthere is no way to unset this column once it is set from the UI; I'm using dojo \nwith\nJson and Gson.\n```\n\nOriginal comment by `rakumar...@gmail.com` on 28 Jan 2009 at 5:52\n =||= ```\nYes, we do have support for NaN in the latest beta release. Do you want us to \ndo \nsomething different? \n\n\n```\n\nOriginal comment by `inder123` on 29 Jan 2009 at 2:21\n =||= The same problem with Float.POSITIVE_INFINITY and  Float.NEGATIVE_INFINITY as of V2.8.4. =||= @zipswich, what error message do you observe? I see\r\n```\r\nCaused by: java.lang.IllegalArgumentException: -Infinity is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\r\n```\r\nand when I use\r\n```java\r\nGsonBuilder.serializeSpecialFloatingPointValues() \r\n```\r\nto create my `Gson` I can serialize both float and double infinities and NaNs (on version 2.8.5) =||= ", 0], ["82", "Deserialization of long primitive types can lead to data corruption", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:18 PM", "```\nWhat steps will reproduce the problem?\n1. Deserializing a long > 32 bits from javascript into a java long primitive\n\n\nWhat is the expected output? What do you see instead?\ni don't think you guys handle long conversion from JSON -> Java properly.\nIn javascript, there is no such thing as a long (the language doesn't\nsupport it - gwt plays tricks like using an array of doubles to keep\nprecision).\n\nSo, when passing back json, I have to quote my long id so it looks like a\nstring. However, Gson will try to cast the String to a Number which\nobviously fails.\nCould you change the default deserialization to take this case into\nconsideration?\n\nAlso, when serializing, I'm not so sure it makes sense to just convert a\nlong to a javascript number (like in your gson example doc).\n\nPerhaps some sort of annotation on the that can be used to indicate it is\nsafe to cast a string to a long.\n\nie:\n\n{ \"myLongVar\": \"1000000\" } should convert the String to a primitive long\n\nbut something like\n\n{ \"myLongVar\" : 20000 } should also work without the quotes.\n\nThere are a lot of cases where you want a long as an id where you are not\nperforming math and should be safe to serialize/deserialize\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `dws...@gmail.com` on 16 Dec 2008 at 5:40", "```\nThis is partially fixed and will be release with the next version of Gson.  r310\nhandles deserializing a string value into a long, int, byte, boolean, etc.\n\nAs for the JavaScript long support, there is no 32 bit restriction in the JSON\nspecification, but it probably makes sense to add a method to the GsonBuilder \nclass\nthat will construct a Gson instance which serializes \"long\" fields as string \n(i.e.\nquoted numbers) instead of a number field.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 17 Dec 2008 at 4:45\n- Changed state: **Accepted**\n =||= ```\nAdded ability for client to configure Gson to output all long (and Long) fields \nas\nStrings.  Change made in r352.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 3:41\n- Changed state: **Fixed**\n =||= ", 0], ["83", "Gson does not handle null values in list properly ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:19 PM", "```\nmy code:\n\nGson g=new Gson();      \nList<String> t6=new ArrayList<String>();\nt6.add(\"list 1\");\nt6.add(null);\nt6.add(\"list 2\");\nString s6=g.toJson(t6);\n\ntrace:\n\njava.lang.NullPointerException\n    at \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize\n(DefaultTypeAdapters.java:414)\n    at \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize\n(DefaultTypeAdapters.java:1)\n    at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler\n(JsonSerializationVisitor.java:132)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:96)\n    at com.google.gson.JsonSerializationContextDefault.serialize\n(JsonSerializationContextDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:279)\n    at com.google.gson.Gson.toJson(Gson.java:230)\n    at com.google.gson.Gson.toJson(Gson.java:210)\n    at com.aisino.platform.view.json.TestGson.testToJson\n(TestGson.java:71)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at org.junit.internal.runners.TestMethodRunner.executeMethodBody\n(TestMethodRunner.java:99)\n    at org.junit.internal.runners.TestMethodRunner.runUnprotected\n(TestMethodRunner.java:81)\n    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected\n(BeforeAndAfterRunner.java:34)\n    at org.junit.internal.runners.TestMethodRunner.runMethod\n(TestMethodRunner.java:75)\n    at org.junit.internal.runners.TestMethodRunner.run\n(TestMethodRunner.java:45)\n    at \norg.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod\n(TestClassMethodsRunner.java:71)\n    at org.junit.internal.runners.TestClassMethodsRunner.run\n(TestClassMethodsRunner.java:35)\n    at org.junit.internal.runners.TestClassRunner$1.runUnprotected\n(TestClassRunner.java:42)\n    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected\n(BeforeAndAfterRunner.java:34)\n    at org.junit.internal.runners.TestClassRunner.run\n(TestClassRunner.java:52)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run\n(JUnit4TestReference.java:45)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run\n(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests\n(RemoteTestRunner.java:460)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests\n(RemoteTestRunner.java:673)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run\n(RemoteTestRunner.java:386)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main\n(RemoteTestRunner.java:196)\n\n\nand  when I made some change on \ncom.google.gson.DefaultTypeAdapters,then ,it is ok.\n\n\npublic JsonElement serialize(Collection src, Type typeOfSrc, \nJsonSerializationContext context) {\n      if (src == null) {\n        return JsonNull.createJsonNull();\n      }\n      JsonArray array = new JsonArray();\n      Type childGenericType = null;\n      if (typeOfSrc instanceof ParameterizedType) {\n        childGenericType = new TypeInfoCollection(typeOfSrc).getElementType\n();        \n      }\n      for (Object child : src) {\n          if(child!=null){   // here, if null? \n        Type childType = (childGenericType == null || childGenericType == \nObject.class)\n            ? child.getClass() : childGenericType;\n        JsonElement element = context.serialize(child, childType);\n        array.add(element);\n          }else{   //  here, do when it is null\n              array.add(null);\n          }\n\n\n      }\n      return array;\n    }\n\n```\n\nOriginal issue reported on code.google.com by `iamj...@gmail.com` on 25 Dec 2008 at 1:18", "```\nWhat version of Gson are you using?\n\nIt appears that this bug was fixed in the 1.2 release.  This bug should not \nresurface\nsince we added a test to ensure \"null\"s in lists are properly serialized\n(http://www.google.com/codesearch/p?hl=en#1W0hTXRl0vg/trunk/gson/src/test/java/c\nom/google/gson/functional/CollectionTest.java&q=testNullsInListSerialization%20p\nackage:http://google-gson\\.googlecode\\.com).\n\n\nA side note:\nInderjeet and I hope to release a new version of Gson, 1.3, before the new year \n(but\nthat is an aggressive goal).\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 2:21\n- Changed state: **Fixed**\n =||= ```\nI test the Gson 1.3 release. But still has the problem,\n\njava.lang.NullPointerException\n    at \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize\n(DefaultTypeAdapters.java:414)\n\nI also checked the URL and ran the CollectionTest.java ,but I found a different \nbetween your class and mine.\nI use\n               String s6=g.toJson(t6);\nand the test class user \n              Type typeOfList = new TypeToken<List<String>>() {}.getType();\n          String json = g.toJson(list, typeOfList);\n\nThat why mine failed.\n\n\n\n```\n\nOriginal comment by `iamj...@gmail.com` on 24 Jun 2009 at 5:12\n =||= ", 0], ["84", "Nested classes cannot be deserialized", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:20 PM", "```\nWhat steps will reproduce the problem?\n1. Create a nested class (inside a test case for instance)\n2. Create Gson object\n3. Try to deserlialize an instance of the nested class\n\nWhat is the expected output? What do you see instead?\nExpected output is successfull deserailization. Insted an exception is\nthrown (No no-args constructor found for class blaablaa please use...)\n\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `miku.kop...@gmail.com` on 27 Dec 2008 at 11:07", "```\nWe have several tests that thoroughly tests the expected behavior around inner \nclasses. Is this a static inner class or a regular inner class? For regular \ninner \nclasses, Gson would have no way of constructing the instance because of the \nneeded \nreference to the outer class. You will need to register an InstanceCreator.\n\nPlease provide a code sample so that we can reproduce the bug. \n```\n\nOriginal comment by `inder123` on 27 Dec 2008 at 1:35\n =||= ```\nOn a somewhat related note, I have added the ability to exclude all \"inner \nclasses\"\nfrom serialization/deserialization in r350.\n\nThis is useful if you have many classes that contain an inner class, but you do \nnot\nwant to write custom serializers for each of these classes.  This feature would \nhelp\nthe user above assuming that they do not want this inner class as part of the\nserialization/deserializaiton and they have a default constructor (or Instance\nCreator) for the outer class.  The latter assumption must be correct since it is\nattempt to deserialize the field.\n\nFYI, a \"static nested class\" is not an \"inner class\".\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 3:54\n =||= ```\nThis got me too - But Joel's comment about a \"static nested class\" vs \"inner \nclass\"\ngave me the clue I needed to solve the problem.\n\nEven if you create a no-args constructor in your inner class it still throws an\nexception saying it can't find one.\n\nIt might be worth mentioning in the User Guide that to use an inner class it \nneeds to\nbe static or GSON won't be able to find the constructor. Alternatively can the \ncode\nthat looks for the constructor in MappedObjectConstructor check for this \nsomehow and\nthrow a more informative exception message?\n```\n\nOriginal comment by `dirk.mcc...@gmail.com` on 24 Jun 2009 at 3:22\n =||= ```\nChanged the User Guide to highlight this fact a little more.  See the \"Nested\nClasses\" section.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:45\n- Changed state: **WontFix**\n =||= ```\nChanged the User Guide to highlight this fact a little more.  See the \"Nested\nClasses\" section.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:45\n =||= ", 0], ["85", "Map<Integer, Object> has string keys after deserialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:22 PM", "```\nWhat steps will reproduce the problem?\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\n\n\npublic class TestGson\n{\n    Map<Integer, String> map = new HashMap<Integer, String>();\n\n    public static void main(String[] args)\n    {\n        TestGson testGson = new TestGson();\n        testGson.map.put(1, \"one\");\n\n        Gson gson = new Gson();\n\n        String json = gson.toJson(testGson);\n        System.out.println(\"Json: \"+json);\n\n        TestGson testGson2 = gson.fromJson(json, TestGson.class);\n\n        System.out.println(\"original:\");\n        System.out.println(testGson.map.containsKey(1));\n        System.out.println(testGson.map.containsKey(\"1\"));\n\n        System.out.println(\"fromJson:\");\n        System.out.println(testGson2.map.containsKey(1));\n        System.out.println(testGson2.map.containsKey(\"1\"));\n    }\n}\n\nOutput:\n\nJson: {\"map\":{\"1\":\"one\"}}\noriginal:\ntrue\nfalse\nfromJson:\nfalse\ntrue\n\n\nWhat is the expected output? What do you see instead?\n\nThe keys should be integers. It should be possible to check the generic\ntypes of the map and then assign the values accordingly. \n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.2.3\n\n\n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 29 Dec 2008 at 7:53", "```\nFix submitted in r363.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 6 Jan 2009 at 7:11\n- Changed state: **Fixed**\n =||= how slove this problem\uff1f i use gson 2.8.0 , has the same problem =||= Hi, I am having the same problem, did anyone knows the solution? Thanks =||= ", 0], ["86", "Unexpected EOF", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:22 PM", "```\nWhat steps will reproduce the problem?\n1. Compile the attached code against gson 1.2.3: javac -classpath\n~/src/gossip/thirdpartylib/gson-1.2.3.jar Test.java\n2. Run the code: java -classpath\n~/src/gossip/thirdpartylib/gson-1.2.3.jar:. Test\n\nWhat is the expected output? What do you see instead?\n\nExpect to see:\nMy buffer contains: 9 bytes\nabcdef\n1\n\nBut get:\nMy buffer contains: 9 bytes\nabcdef\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.InputStreamReader@5856a5 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    at com.google.gson.Gson.fromJson(Gson.java:344)\n    at Test.main(Test.java:19)\nCaused by: com.google.gson.ParseException: Encountered \"<EOF>\" at line 0,\ncolumn 0.\nWas expecting one of:\n    <DIGITS> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"null\" ...\n    \"[\" ...\n    \"true\" ...\n    \"false\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:435)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:374)\n    at com.google.gson.JsonParser.parse(JsonParser.java:29)\n    at com.google.gson.Gson.fromJson(Gson.java:370)\n    ... 2 more\n\n\nWhat version of the product are you using? On what operating system?\n\ngson-1.2.3 on OSX 10.5.5\n\nPlease provide any additional information below.\n\nNot sure if this is correct usage of Gson....\n```\n\nOriginal issue reported on code.google.com by `dan.cres...@gmail.com` on 30 Dec 2008 at 2:30\n\nAttachments:\n- [Test.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-86/comment-0/Test.java)\n- [Test.class](https://storage.googleapis.com/google-code-attachments/google-gson/issue-86/comment-0/Test.class)", "```\nI looked at the test that you provided and Gson was not built for this kind of \nTest\nCase.  Gson is a tool for converting a JSON structure to a Java object and vice \nversa.\n\nThis test case outputs two objects to the Writer, a String and an Integer.  \nTherefore\nthe writer buffer looks like:\n\"abcdef\"1\n\nThe above is invalid JSON.  If you'd like to output a String and integer as \nJSON then\nyou should create a model class the contains these as fields.  For example:\n\npublic class Foo {\n  private final String a;\n  private final int b;\n\n  public Foo() {\n    this(\"\", 0);\n  }\n\n  public Foo(String a, int b) {\n    this.a = a;\n    this.b = b;\n  }\n}\n\nFoo foo = new Foo(\"abcdef\", 1);\nmyGson.toJson(foo, myWriter);\nFoo anotherFoo = myGson.fromJson(myReader, Foo.class);\n\nOr\n\nFoo foo = new Foo(\"abcdef\", 1);\nString json = myGson.toJson(foo);\nFoo anotherFoo = myGson.fromJson(json, Foo.class);\n\nNOTE: Foo will be represented as the following JSON structure:\n{\"a\":\"abcdef\",\"b\":1}\n\n\nI would be possible for us to allow multiple objects to be parsed from a Reader\nobject, but I for now I am lowering the Priority of this bug as I feel this a\nsomewhat of a special case.  Feel free to argue otherwise if the above \nexplanation\ndoes not help your use case. \n```\n\nOriginal comment by `joel.leitch@gmail.com` on 6 Jan 2009 at 5:36\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nThis is not a bug as it was invalid JSON.  The above suggestion to serialize \nbased on\nthe newline in a writer doesn't makes sense either because JSON get be \nsubmitted with\nnewlines.\n\nClosing this off as Gson support serializing a JSON structure to a Java object.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 27 Mar 2009 at 6:38\n- Changed state: **Invalid**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["87", "java.util.Properties does not get deserialized properly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:23 PM", "```\nSee discussion at:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/f70060e56b7d7015\n```\n\nOriginal issue reported on code.google.com by `inder123` on 31 Dec 2008 at 12:42", "```\nThis is a valid bug. confirmed in r360\n```\n\nOriginal comment by `inder123` on 31 Dec 2008 at 12:43\n =||= ```\nFixed the bug in r361 and r362\n```\n\nOriginal comment by `inder123` on 31 Dec 2008 at 1:15\n- Changed state: **Fixed**\n =||= Original comment by `joel.leitch@gmail.com` on 12 Jan 2009 at 6:09\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["88", "gson library on Android throws java.lang.TypeNotPresentException", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:24 PM", "```\n\nGSON version:  trunk   (7 January 2009)\n\nAndroid platform:   Android 1.0 R2 SDK\n\n\nI can't get GSON to work properly on Android's Dalvik VM.   The Android \nruntime is throwing java.lang.TypeNotPresentException.\n\nI reproduced this bug with the Android SDK emulator and also on the Android\nG1 Developer Phone.\n\nHere is the stack trace:\n\nE/jpoco.android.ContactsActivity(  251): Type jpoco.client.Contact not present\nE/jpoco.android.ContactsActivity(  251):\njava.lang.TypeNotPresentException: Type jpoco.client.Contact not\npresent\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:63)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav\na:72)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes(ListOfTypes.ja\nva:68)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getActualTypeArguments(ImplForT\nype.java:40)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:136)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.ObjectNavigator.accept(ObjectNavigator.java:122)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:73)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:49)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:381)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:329)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:305)\nE/jpoco.android.ContactsActivity(  251):        at\njpoco.io.Deserializer.deserialize(Deserializer.java:63)\nE/jpoco.android.ContactsActivity(  251):        at\njpoco.client.Client.fromString(Client.java:152)\n\n\n```\n\nOriginal issue reported on code.google.com by `sean%sea...@gtempaccount.com` on 7 Jan 2009 at 12:13", "```\n\nThis appears to be a bug in Android's implementation of\njava.lang.reflect.ParameterizedType\n\nI've opened an issue in the Android tracker:\n\nhttp://code.google.com/p/android/issues/detail?id=1760\n\n\n```\n\nOriginal comment by `sean%sea...@gtempaccount.com` on 9 Jan 2009 at 9:37\n =||= ```\nI installed the Android SDK 1.5 Preview last night.   Using the emulator, I can\nconfirm that this bug is resolved.\n\nI'll retest when Android SDK 1.5 Final becomes available.\n\n```\n\nOriginal comment by `sean%sea...@gtempaccount.com` on 14 Apr 2009 at 4:16\n =||= ```\nThanks for testing this on Android SDK 1.5. We are glad that the issues have \nbeen \nresolved but if you find anything that is broken, please reopen the bug and we \nwould \nbe happy to fix it then.\n```\n\nOriginal comment by `inder123` on 15 Apr 2009 at 9:20\n- Changed state: **WontFix**\n =||= ", 0], ["89", "Use String.valueOf() for numeric and boolean types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:26 PM", "```\nCurrently, if gson tries to convert a JSON integer into a String, it just\ntries casting, which throws an exception.  It should be smart enough to use\nString.valueOf() for numeric and boolean types.\n\nSee discussion\nhttp://groups.google.com/group/google-gson/browse_thread/thread/86e023adede4394c\n#\nfor more info.\n\n```\n\nOriginal issue reported on code.google.com by `tobini...@gmail.com` on 9 Jan 2009 at 1:46", "```\nFixed submitted in r328.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 9 Jan 2009 at 7:28\n- Changed state: **Fixed**\n =||= ", 0], ["90", "Include a default serializer for exceptions", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:26 PM", "```\nWhat steps will reproduce the problem?\n1. Extend Exception and call the no-arg constructor\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nYou should get deserialized json data.\n\nRather, a ciruclar reference is detected and the object cannot be\ndeserialized to json. However, if you explicitly call the 2-arg constructor\nwith (null, null), it will deserialize to json correctly.\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `davids...@google.com` on 9 Jan 2009 at 6:59", "```\nA related discussion is here:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/6b6dc35deef5ba78\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 9 Jan 2009 at 7:35\n =||= ```\nDeferred for a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 8:59\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:01\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nThe underlying problem is that exceptions default to being caused by 'this'. \nYou can work-around this by writing a custom serializer & deserializer for \nexceptions.\n\n(If we fix issue 164, you'll only have to register \"Throwable\" for this to work \nfor most exceptions)\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:40\n- Changed title: **Include a default serializer for exceptions**\n- Added labels: **Type-Enhancement**, **Milestone-Undefined**\n- Removed labels: **Type-Defect**\n =||= ```\nregisterTypeHierarchyAdapter() makes this relatively easy. We won't support \nthis in the framework.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:42\n- Changed state: **WontFix**\n =||= ", 0], ["91", "Gson should allow developers to register their own field naming policies", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:28 PM", "```\nSee the discussion at: http://groups.google.com/group/google-\ngson/browse_thread/thread/cb441a2d717f6892?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Jan 2009 at 4:13", "```\nFixed in r392\n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 6:34\n- Changed state: **Duplicate**\n =||= ", 0], ["92", "Gson Contexts should allow storing some state", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:29 PM", "```\nSee discussion at http://groups.google.com/group/google-\ngson/browse_thread/thread/2850010691ea09fb?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Jan 2009 at 4:24", "```\nStoring state in a shared map will compromise thread-safety. So, if we were to\naddress this in Gson, we should be using ThreadLocal. However, that doesn't \nreally\nseem all that more convenient than the clients using ThreadLocal directly. So, \nwe\ndecided not to implement this feature.\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 8:59\n- Changed state: **WontFix**\n =||= ```\nIn case the feature is rejected, please attach the recipe on how to use \nThreadLocal\nvariable. Solving my problem, my custom deserialization of Json element depends \non\nits parent element's data. There is no way to get the parent from within of:\n\npublic JDataFieldModel deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context) throws JsonParseException\n{\n   ... json.getParent().get(\"field\"); ?\n}\n```\n\nOriginal comment by `Anton.Troshin@gmail.com` on 18 Mar 2010 at 10:33\n =||= Can anyone \"attach the recipe on how to use `ThreadLocal`\"?\n =||= For ThreadLocal example, see http://www.javacreed.com/gson-deserialiser-example/ =||= ", 0], ["93", "Pretty Printing Results in Omission of Comma following a Serialized Map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:30 PM", "```\nWhat steps will reproduce the problem?\n1. Create a Gson object with pretty printing: new \nGsonBuilder().setPrettyPrinting().create();\n2. Serialize an object containing a map.\n\nWhat is the expected output? What do you see instead?\nAs pretty JSON: {\"baz\":{}\"fizzle\":\"bar\"}\n\nAs compact JSON: {\"baz\":{},\"fizzle\":\"bar\"}\n\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\nHere's a simple example that produces the output above and demonstrates the \nproblem:\n\npackage com.joelpm;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class App {\n  public static class Foo {\n    private Map<String,String> baz;\n    private String fizzle;\n\n    public Foo(String fizzle) {\n      this.baz = new HashMap<String,String>();\n      this.fizzle = fizzle;\n    }\n  }\n\n  public static void main(String[] args) {\n    Foo quux = new Foo(\"bar\");\n    Gson gsonPretty = new GsonBuilder().setPrettyPrinting().create();\n    Gson gsonRegular = new GsonBuilder().create();\n    System.out.println(\"As pretty JSON: \" + gsonPretty.toJson(quux));\n    System.out.println(\"As compact JSON: \" + gsonRegular.toJson(quux));\n  }\n}\n\n\n\n```\n\nOriginal issue reported on code.google.com by `joel.me...@gmail.com` on 12 Jan 2009 at 10:52", "```\nThis is fixed in the 1.3 beta release.  Added a test in r372 to ensure there is \nno\nregression in latter releases.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 17 Jan 2009 at 10:36\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 1 Oct 2009 at 5:09\n- Added labels: **Milestone-Release1.3**\n =||= ", 0], ["94", "Gson1.3 can't handle big number strings with exponent", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:30 PM", "```\nWhat steps will reproduce the problem?\npublic class FindIssue {\n    public double largeNumber;\n    public static void main(String[] args) {\n        Gson gson = new Gson();\n        FindIssue f=gson.fromJson(\"{largeNumber:1.234567899E8}\",\nFindIssue.class);\n        System.out.println(f.largeNumber);\n    }\n}\n\nWhat is the expected output? What do you see instead?\nexpected output: 1.234567899E8\ninstead: Exception in thread \"main\" com.google.gson.JsonParseException:\nFailed parsing JSON source: java.io.StringReader@f81843 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:386)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n    at own.FindIssue.main(FindIssue.java:18)\nCaused by: com.google.gson.ParseException: Encountered \"E8\" at line 1,\ncolumn 25.\nWas expecting one of:\n    <E> ...\n    \"}\" ...\n    \",\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:624)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:504)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:50)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    ... 3 more\n\nWhat version of the product are you using? On what operating system?\ngson1.3-BETA, Linux (Ubuntu 8.10)\n\nPlease provide any additional information below.\nBecause of some changes in gson1.3, Parser can't detect literal E, it will\nalways find literal \"E#number#\" as one IDENTIFIER literal which is not\nhandled in JsonParser.JsonNumber()\n\n```\n\nOriginal issue reported on code.google.com by `J.Berin...@gmail.com` on 20 Jan 2009 at 10:07", "```\nThis problem occurs because we require + or - after the \"e\" sign. So, \n1.234567899E+8\nwill work fine.\n\n```\n\nOriginal comment by `inder123` on 4 Mar 2009 at 6:52\n =||= ```\nBut Gson itself produce such json without + or - after e and it is a valid \nnumber\nformat. Following code produce the same Exception (gson1.3 Rev. 389):\n\npublic class FindIssue {\n    public double largeNumber;\n    public static void main(String[] args) {\n        Gson gson = new Gson();\n        FindIssue fi=new FindIssue();\n        fi.largeNumber=1234567899;\n        String json=gson.toJson(fi);\n        System.out.println(\"json: \"+json);\n        FindIssue f=gson.fromJson(json, FindIssue.class);\n        System.out.println(f.largeNumber);\n    }\n}\n```\n\nOriginal comment by `J.Berin...@gmail.com` on 5 Mar 2009 at 7:15\n =||= ```\n[deleted comment]\n```\n =||= ```\nJ.Beringer is right, Gson itself omits the \"+\" sign after E when emitting \nnumbers,\nbut then throws an exception when trying to parse the string it generated.\n\nAccording to the spec at json.org, the sign after E is not required.  All of \nthese\nformats should be recognized:\n\nE+25\nE-25\nE25\n\ne+25\ne-25\ne25\n\ninder123, can you remove the sign requirement from your grammar?\n\n```\n\nOriginal comment by `alexande...@gmail.com` on 5 Mar 2009 at 9:28\n =||= ```\n[deleted comment]\n```\n =||= ```\nFixed in r390. Updated Gson grammar to support floating point numbers without \nthe +/-\nsign after E. This was a bit tricky since E8 matches an identifier as well, and \nthat\nwas the source of the earlier bug. Added tests in PrimitiveTest to verify this \nbehavior.\n\n```\n\nOriginal comment by `inder123` on 5 Mar 2009 at 11:07\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:39\n- Added labels: **Milestone-Release1.3**\n =||= ", 0], ["95", "deserialize map of map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:33 PM", "```\ni'm not sure that it is an issue but i haven't found document that explain\nhow to execute follow code\n\nMap map = new HashMap();\nMap nestedMap = new HashMap();\nnestedMap.put(\"1\", \"1\");\nnestedMap.put(\"2\", \"2\");\nmap.put(\"nestedMap\", nestedMap);\n\nString json = new Gson().toJson(map);\nassertThat(json, is(equalTo(\"{\\\"nestedMap\\\":{\\\"2\\\":\\\"2\\\",\\\"1\\\":\\\"1\\\"}}\")));\n\n// in next statements i try to deserialize json to obtain same map of map\nMap map2 = new Gson().fromJson(json, Map.class);\nString json2 = new Gson().toJson(map2);\nassertThat(json, is(equalTo(json2)));\n\n```\n\nOriginal issue reported on code.google.com by `luca.marrocco` on 21 Jan 2009 at 12:46", "```\nAdded tests for serialization and deserialization of map of maps in r396\n\nThe tests pass currently, so we need an exact case that fails before we can \naddress it.\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 8:54\n- Changed state: **Invalid**\n =||= ", 0], ["96", "StackOverflowError with long Collections", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:33 PM", "```\nWhat steps will reproduce the problem?\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\n\npublic class TestGson\n{\n    private String name;\n    private String value;\n\n    public TestGson()\n    {\n    }\n\n\n    /**\n     * @param name\n     * @param value\n     */\n    public TestGson(String name, String value)\n    {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n\n\n    public static void main(String[] args)\n    {\n        List<TestGson> list = new ArrayList<TestGson>(10000);\n\n        for (int x = 0; x < 10000;x++)\n        {\n            list.add(new TestGson(\"name\"+x,\"value\"+x));\n        }\n\n        Gson gson = new Gson();\n\n        String json = gson.toJson(list);\n        System.out.println(\"Json: \"+json);\n\n        Type collectionType = new TypeToken<ArrayList<TestGson>>(){}.getType();\n\n        List<TestGson> list2 = gson.fromJson(json,collectionType);\n\n    }\n}\n\nWhat is the expected output? What do you see instead?\n\nThe stack trace looks as follows:\n\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@1b9ce4b to Json\n    at com.google.gson.Gson.fromJson(Gson.java:380)\n    at com.google.gson.Gson.fromJson(Gson.java:321)\n    at TestGson.main(TestGson.java:48)\nCaused by: java.lang.StackOverflowError\n    at com.google.gson.SimpleCharStream.readChar(SimpleCharStream.java:198)\n    at\ncom.google.gson.JsonParserTokenManager.jjMoveNfa_0(JsonParserTokenManager.java:5\n84)\n    at\ncom.google.gson.JsonParserTokenManager.jjStartNfaWithStates_0(JsonParserTokenMan\nager.java:165)\n    at\ncom.google.gson.JsonParserTokenManager.jjMoveStringLiteralDfa0_0(JsonParserToken\nManager.java:172)\n    at\ncom.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:\n935)\n    at com.google.gson.JsonParser.jj_ntk(JsonParser.java:396)\n    at com.google.gson.JsonParser.JsonString(JsonParser.java:274)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:76)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:109)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:113)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:113)\n...\n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.3\n\nPlease provide any additional information below.\nIt is strange that a linear collection is deserialized using recursion.\nThis will always fail with large collections. Sooner or later. With my\nstack size the limit was something like 8500 elements. \n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 22 Jan 2009 at 9:40", "```\nAdded performance tests in r388 \n\nOn my machine (a dual-processor 64 bit ubuntu with 8GB RAM), Gson was able to\nserialize a collection of 1.4 million objects. The deserializer threw a stack\noverflow error in the parser beyond a collection of 87,000 objects. \n```\n\nOriginal comment by `inder123` on 3 Mar 2009 at 10:23\n =||= Original comment by `inder123` on 3 Mar 2009 at 10:24\n- Changed state: **WontFix**\n =||= ```\nThe parser uses a production to match a collection, and that is implemented by \nJavaCC\nusing recursion. If someone proposes a more efficient production, we will be \nhappy to\nincorporate it.\n```\n\nOriginal comment by `inder123` on 3 Mar 2009 at 10:39\n =||= ```\nOne of the stated goals of GSON is to \"Support arbitrarily complex objects \n(with deep \ninheritance hierarchies and extensive use of generic types)\".\n\nI guess you should change it to 'arbitrarily complex objects (except \ncollections with \nlarge numbers of items)'.\n\nI use a byte array to store the bytes of a file.  I can serialize this array w/ \nGSON \njust fine, but somehow this object is too complex to be parsed?  A byte array?  \nReally?\n```\n\nOriginal comment by `kenot...@gmail.com` on 13 Jul 2009 at 8:33\n =||= ```\nCan you give some more information on how large the byte array is?\n```\n\nOriginal comment by `inder123` on 13 Jul 2009 at 8:38\n =||= ```\nIt's a megabyte-ish file, so about a million items.  The point though is that \nit \nshouldn't matter how many items are in it, it's perhaps the most basic data \ntype in all \nof Java, and if GSON can't parse it, then perhaps GSON shouldn't be generating \nit in \nthe first place.\n```\n\nOriginal comment by `kenot...@gmail.com` on 13 Jul 2009 at 8:48\n =||= ```\nWell, that is not how parsers work unfortunately. They have to match a \nproduction, \nwhich in this case is for matching a String (I presume this is how you are \nstoring \nbytearrays). A String may seem like a simple thing but it actually require a \nfair \namount of escaping and unescaping character by character. \n\nIn an earlier version of Gson, we used a recursive production to match a String \nas an \narray of characters. This resulted in a StackOverflowError for 100KB strings. \nIn a \nlater version, I revised it to a production that does a single token match. \nLast I \ntested, Gson could handle strings of over 20MB in size. \n\nCan you give us more details (may be post a code snippet) on how are the bytes \nstored? Are you using a byte[] or are you using a String?\n```\n\nOriginal comment by `inder123` on 13 Jul 2009 at 9:03\n =||= ```\nWrote performance tests for byte array serialization and deserialization in \nr430. Gson \nfailed at serializing arrays beyond 8MB, but for deserialization it failed for \narrays \nas small as 32KB. So, seems like we have a real performance issue here that we \nneed \nfixing.\n```\n\nOriginal comment by `inder123` on 13 Jul 2009 at 10:29\n- Changed state: **Accepted**\n =||= ```\nOk, I revised my tests to determine the limit somewhat more precisely. Gson \nfailed at \ndeserialization on byte arrays of size beyond 80k. \n\nThe primary reason is that Gson matches an Array as a production of Array \nelements. \nThe Elements themselves are matched with a recursive production (and therein \nlies the \nproblem): \n\nprivate JsonArray JsonArray() :\n{ JsonArray array = new JsonArray(); }\n{\n  \"[\" [ Elements(array) ] \"]\"\n  {\n    array.reverse();\n    return array;\n  }\n}\n\nprivate void Elements(JsonArray array) :\n{\n  JsonElement element;\n}\n{\n  element=JsonValue() [ \",\" Elements(array) ]\n  { array.add(element); }\n}\n\nAny suggestions from anyone on how to improve these productions?\n```\n\nOriginal comment by `inder123` on 13 Jul 2009 at 10:45\n =||= ```\nYour production appears to approach N^2 in memory usage, since you pass the \nentire \nparsed array into the recursive call.  The top-level recursion gets a 0-item \nJsonArray, the first inner recursion gets a 1-item array, and so on, up to N \nitems.  \nBut those recursive calls will stay on the stack until the whole list is \nparsed, so \nyou end up with 1+2+3+...+N items on the stack.\n\nWhat if you built the JsonArray iteratively in the top-level rule instead, so \nthat \nthe single 'result' array could be updated without passing it into another \nrule?    I \nhaven't played with parser generators since ANTLR back in my compiler class, so \nI'm \nnot well-versed enough in JavaCC semantics to write up the rule, but I'm \nimagining a \ngrammar like this (in EBNF):\n\n    JsonArray : '[' JsonArrayElement ( ',' JsonArrayElement )+ ']'\n\nI'm not sure how that translates to JavaCC, or how you'd get the next element \nback,  \nbut the point is to not pass a potentially huge data structure around in the \ncall \nparameters and build it up iteratively instead.\n```\n\nOriginal comment by `kenot...@gmail.com` on 14 Jul 2009 at 5:54\n =||= ```\nIf you want to keep your current rules, you could perhaps instead make a single \nglobally-scoped JsonArray...so long as you only parse a single array at a time, \nthis \nmay work better with your current rule...globally-scoped variables are not \npassed on \nthe stack like parameters are, so you should be able to scan arrays all the way \nup to \nthe size of the JVM's memory.\n```\n\nOriginal comment by `kenot...@gmail.com` on 15 Jul 2009 at 2:12\n =||= ```\n[deleted comment]\n```\n =||= ```\nThe limitation is much smaller on devices with limited resources, such as \nAndroid phones.  I'm running into this \nproblem trying to deserialize a string that's about 20k on Android 1.5.\n\nCan anyone think of a constructive way to work around this issue for now?  \nWould writing a custom deserializer \nhelp, or is the problem more low-level than that?\n```\n\nOriginal comment by `mbur...@gmail.com` on 5 Aug 2009 at 5:11\n =||= ```\nUnfortunately the problem is more low-level since our JavaCC parser uses \nrecursive\nproductions. The parser gets invoked way before the deserializers are run. \n\nWe will try to address this in our next release, but it would greatly help if \nothers\ncan also provide alternate JavaCC productions for Javascript Arrays.\n```\n\nOriginal comment by `inder123` on 5 Aug 2009 at 8:46\n =||= ```\nRecursive rules are fine when your input is guaranteed to be small, but the way \nyour \nJsonArray rule is written, you pass the whole array into each recursive \ncall...that's just \nplain unnecessary, and it quickly consumes all available memory for even \nmoderately-sized \narrays.  Instead, rephrase your grammar as left-associative rather than \nright-recursive.  \nRead values from the left end of the input and immediately add them to the \noutput array, then \nconsume the comma and iterate.  Something like this:\n\nprivate JsonArray JsonArray() :\n{ JsonArray array = new JsonArray(); JsonElement elem = null; }\n{\n  \"[\" ( elem=JsonValue() {array.add(elem);} [\",\"] )* \"]\"\n  {    return array;  }\n}\n\nThere's no need for a second Elements() rule here at all, and since the \nelements are read in \nthe proper order to begin with, there's no need to reverse the array either.\n\nBut also note that this is a rather lax grammar, since it doesn't validate that \nthe array is \nproper JSON...the comma is optional only so that the last value is matched, but \nbecause its \noptional you could have bogus JSON like '[ 12 34, 56 ]' return the incorrect \narray \n(12,34,56).  If that matters to you, I'll leave the solution to you.\n\nI generated this to a java class and plugged in my replacement JsonArray \nimplementation into \nthe GSON source, then compiled and ran it against 234 KB of json text \nrepresenting a byte \narray of about 64,000 items, and it successfully returned the array.  It was \nhorribly slow, \nabout 3 minutes, but it did return eventually...not sure why it's so slow, \nperhaps since I \nhave done the rule for you here, you can profile it and find out where all the \ntime is being \nspent.  You may have other recursive rules that can be similarly re-written to \nreduce your \nparser's memory footprint significantly.\n\nOther than this problem (a major one IMHO), GSON has been great, definitely one \nof the better \nJava <-> JSON converters out there.  Keep up the good work!\n\nPS: when I convert my class to use a String to contain the byte array, it \nserializes and \ndeserializes without problems, and extremely quickly too (no 3 minute wait).  I \nsee you defer \nthis parsing to StringUnmarshaller.  I suspect your parser is doing a lot of \nbacktracking, \nspinning its wheels trying to find a matching production, but a profiler will \ntell you for \nsure.\n```\n\nOriginal comment by `kenot...@gmail.com` on 14 Aug 2009 at 8:38\n =||= ```\nFixed in r438\nThanks for the tip, kenotron. I was able to build on your productions to come \nup with\nsomething that enforces the proper JSON rules.\n```\n\nOriginal comment by `inder123` on 22 Aug 2009 at 1:04\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ```\nLovely!  Preliminary testing on r438 seems to work fine for me\n```\n\nOriginal comment by `mbur...@gmail.com` on 22 Aug 2009 at 2:10\n =||= ", 0], ["97", "JsonNull.createJsonNull should be public, constructor should be private", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:38 PM", "```\nVersion: gson-1.3 from http://google-gson.googlecode.com/svn/mavenrepo\n\nI assume it's not public because the original intention was to only need it\nin automatically gson serialization. However I'm writing a serializer and\nwould like to return json null programmatically when desired (say, to\nhandle GsonBuilder#serializeNulls).\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 28 Jan 2009 at 4:51", "```\nAny reason why you will not prefer to use just new JsonNull()?\n\n\n```\n\nOriginal comment by `inder123` on 28 Jan 2009 at 5:02\n =||= ```\nNo, that's what I'm doing now, but why restrict the singleton to internal \nusage? Why\nthen allow new instance and dilute the meaning of the singleton? As it stands \nnow, on\ndeserialization, one would have to test (jsonElem instanceof JsonNull) instead \nof\n(JsonNull.getInstance().equals(jsonElem)).\n```\n\nOriginal comment by `estebis...@gmail.com` on 28 Jan 2009 at 6:14\n =||= ```\nWe certainly can not make the constructor private anymore since that will break \nbackwards compatibility. Also, all instance of JsonNull are equal to each other \nso \nyou can just use equals(). \n\nWe (Joel and I, the creators of this library) had lots of discussions on making \nthe \nfactory method public, and deprecate the constructor. We sort-of concluded that \nnew \nJsonNull() is more aligned with how other JsonElements are created so was \nslightly \npreferred. The performance overhead is probably not all that significant. So, I \nwanted to get some external input, and hence I am trying to understand your \nperspective.\n```\n\nOriginal comment by `inder123` on 29 Jan 2009 at 2:20\n =||= ```\nI see. Fair enough. No, it isn't a performance concern. That would be premature \nto\nsay the least. It was more of an inconsistency that stood out for me (enough to \nsay\nsomething I guess). Somehow I saw it and thought for a moment that I should be \nusing\nit (because it returned a singleton, usually a very proactive mechanism by a \nclass\nauthor).\n\nAssuming that new JsonNull is the intended way going forward, it might not hurt \nto\nput a note to this effect on the createJsonNull method, perhaps even deprecate \nit.\n\nAll that said, we can end this issue as \"wontfix\".\n```\n\nOriginal comment by `estebis...@gmail.com` on 29 Jan 2009 at 2:31\n =||= ```\nWe will add the comment. \n```\n\nOriginal comment by `inder123` on 29 Jan 2009 at 2:38\n- Changed state: **WontFix**\n =||= ", 0], ["98", "[deleted issue]", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:40 PM", "```\n[deleted issue]\n```", "NaN", 0], ["99", "Invalid serialization of a Map with null values", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:40 PM", "```\nWhat steps will reproduce the problem?\n\npublic class GsonTest {\n\n    private static class TestType {\n        Map<String, String> map = new TreeMap<String, String>();\n    }\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        TestType t = new TestType();\n        t.map.put(\"name1\", null);\n        t.map.put(\"name2\", \"value2\");\n\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(t));\n    }\n\n}\n\nThe output is:\n{\"map\":{,\"name2\":\"value2\"}}\n\nNote the extra comma at the beginning of the map.\n\nThe expected output is:\n{\"map\":{\"name2\":\"value2\"}}\n\n\nWhat version of the product are you using? On what operating system?\n\nThis is gson 1.2.3 on Ubuntu 8.10 64-bit.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `gary...@gmail.com` on 8 Feb 2009 at 6:55", "```\nAdded tests in r387 but can not reproduce the bug\n```\n\nOriginal comment by `inder123` on 3 Mar 2009 at 9:09\n- Changed state: **Invalid**\n =||= ", 0], ["100", "deserializing a Set requires elements to implement Comparable, when ordering is not required", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:41 PM", "```\nWhat steps will reproduce the problem?\n1. See attached beans Tree and Monkey\n2. Run this test:\n\n    Tree tree = new Tree();\n    tree.getMonkeys().add(new Monkey());\n    tree.getMonkeys().add(new Monkey());\n\n    String serialised = json.toJson(tree);\n    Tree newTree = json.fromJson(serialised, Tree.class);\n\nWhat is the expected output? What do you see instead?\n\nDeserialize fails, Caused by: java.lang.ClassCastException:\ncom.jpmorgan.ibmlbus.beans.serialise.Monkey cannot be cast to\njava.lang.Comparable\n    at java.util.TreeMap.put(Unknown Source)\n    at java.util.TreeSet.add(Unknown Source)\n    at\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp\neAdapters.java:404)\n    at\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp\neAdapters.java:369)\n    at\ncom.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExc\neptionWrapper.java:50)\n    ... 27 more\n\nThe point is that Monkeys have no natural ordering. We should be able to\nuse them in a Set though, because uniqueness is fine.\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `aaron.b...@gmail.com` on 12 Feb 2009 at 4:08\n\nAttachments:\n- [Tree.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Tree.java)\n- [Monkey.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Monkey.java)", "```\nHi - could you please delete the package names from the attached beans? My \nerror.\n```\n\nOriginal comment by `aaron.b...@gmail.com` on 12 Feb 2009 at 4:22\n =||= ```\nSorry, I do not have the ability to edit the original bug report. \n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 2:00\n =||= ```\nFixed this bug in r394 by using HashSet instead of TreeSet while instantiating \nsets\nduring deserialization\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 2:00\n- Changed state: **Fixed**\n =||= ```\nUpdated in r395 to ensure that sorted sets continue to use TreeSets and HashSet \nis\nused for other sets.\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 6:17\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:39\n- Added labels: **Milestone-Release1.3**\n =||= ", 0], ["101", "Does gson can support a method to create the BasicDynaBean from the json string?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:43 PM", "```\njust like the json-lib does. thanks\n```\n\nOriginal issue reported on code.google.com by `killvin....@gmail.com` on 13 Feb 2009 at 9:32", "```\nCan you give an example of what is it that you would like us to support? We are \nnot\nfamiliar with json-lib. Thanks.\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 2:01\n =||= ```\nDeferred for a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 8:59\n- Added labels: **Milestone-Release1.5**\n =||= ```\nImplementing this would require a dependency on json-lib.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:39\n- Changed state: **Invalid**\n =||= ", 0], ["102", "ClassCastException in TypeInfoFactory", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:44 PM", "```\nGetting exception when trying to jsonify a internally created object. Stack\ntrace is \n\njava.lang.ClassCastException: java.lang.Class cannot be cast to\njava.lang.reflect.ParameterizedType\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:91)\n    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\n    at\ncom.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsArrayElement(JsonSerializationVisi\ntor.java:150)\n    at\ncom.google.gson.JsonSerializationVisitor.visitCollection(JsonSerializationVisito\nr.java:78)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitCollectionField(JsonSerializationV\nisitor.java:103)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:174)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:273)\n    at com.google.gson.Gson.toJson(Gson.java:229)\n    at com.google.gson.Gson.toJson(Gson.java:209)\n    at com.company.it.widgetserver.AjaxServlet.doGet(AjaxServlet.java:138)\n\n\nWhat steps will reproduce the problem?\nCreate classes with generics and try to convert to json\n\nWhat version of the product are you using? On what operating system?\nTried with 1.3, 1.2.3, 1.2.2 and still getting same error.  It is on Windows.\n\n\n```\n\nOriginal issue reported on code.google.com by `brsan...@gmail.com` on 19 Feb 2009 at 8:07", "```\nPlease post a code sample that we can use to reproduce this problem.\n```\n\nOriginal comment by `inder123` on 11 Mar 2009 at 9:56\n =||= ```\nIs this related to Issue #40?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Mar 2009 at 5:35\n =||= ```\nI've got the same error with class: \n\npublic class BaseEvent<C extends IContent> implements IEvent<C> {\n    //private static final Log log = LogFactory.getLog( BaseEvent.class );\n\n    private final long timestamp;\n    private Severity severity;\n    private final C content;\n    private transient final Object source;\n    private final Tag tag;\n\n    public BaseEvent( final Tag tag,\n                      final Severity severity,\n                      final C content,\n                      final Object source,\n                      final long timestamp ) {\n        if ( tag == null ) {\n            throw new IllegalArgumentException( \"Type can't be null\" );\n        }\n        if ( severity == null ) {\n            throw new IllegalArgumentException( \"Severity can't be null\" );\n        }\n        if ( source == null ) {\n            throw new IllegalArgumentException( \"Source can't be null\" );\n        }\n\n        this.tag = tag;\n        this.severity = severity;\n        this.content = content;\n        this.source = source;\n        this.timestamp = timestamp;\n    }\n\n    public BaseEvent( final Tag tag,\n                      final Severity severity,\n                      final C content,\n                      final Object source ) {\n        this( tag, severity, content, source, System.currentTimeMillis() );\n    }\n\n    public Tag getTag() {\n        return tag;\n    }\n\n    public long getTimestamp() {\n        return timestamp;\n    }\n\n    public Severity getSeverity() {\n        return severity;\n    }\n\n    public synchronized void promote( final Severity s ) {\n        if ( s.more( severity ) ) {\n            severity = s;\n        }\n    }\n\n    public C getContent() {\n        return content;\n    }\n\n    public Object getSource() {\n        return source;\n    }\n\n    public String toString() {\n        final StringBuilder sb = new StringBuilder();\n        sb.append( \"Event[\" );\n        sb.append( tag ).append( \"; \" );\n        sb.append( severity ).append( \"; \" );\n        sb.append( new Date( timestamp ) );\n        sb.append( \"]\\n\" );\n        sb.append( content );\n        return sb.toString();\n    }\n}\n```\n\nOriginal comment by `chere...@gmail.com` on 1 Apr 2009 at 7:25\n =||= ```\nWe have enough tests that use similar kind of types in Gson. See\nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/\ngoogle/gson/functional/ParameterizedTypesTest.java\nfor examples. \n\nI also took the specified test and ran it without any problems. One thing to \nnote is\nthat if you are directly serializing/deserializing an instance of BaseEvent \nthen you\nneed to pass the correct parameterized type using the TypeToken idiom. See\nhttp://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializ\ning-Gener\nfor examples.\n```\n\nOriginal comment by `inder123` on 1 Apr 2009 at 10:17\n- Changed state: **Invalid**\n =||= ```\nr415 includes a fix to show a more helpful message when this situation occurs.\n```\n\nOriginal comment by `inder123` on 1 Apr 2009 at 10:27\n =||= ```\nWell, may be it is not right place to ask, but I do not really understand why I \nrequire to specify additional params just to serialize generalized type. JS is \neasy \ntyped, why you need so much type info to serialize to it? Is it any option to \nserialize \"by real type\", as if all generics are converted to their <?> version?\n```\n\nOriginal comment by `chere...@gmail.com` on 8 Apr 2009 at 9:14\n =||= ```\nUnfortunately, this is a Java issue. The way Java Generics were designed, an \npbject\nloses all the Generics information (because of type-erasure).  This is \ngenerally not\na problem during serialization except in the cases like above. In your example,\nBaseEvent class defines its content field as type C (which is called a \nTypeVariable).\nAfter type-erasure, the object's field has no information as to what C actually \nmaps\nto. Gson uses some tricks to figure that out, but for that it needs the generic \ntype\ninformation as specified. \n\n```\n\nOriginal comment by `inder123` on 8 Apr 2009 at 6:44\n =||= ```\nYes, I understand about type-erasure. I do understand about how it complicate \ndeserializing json -> java too. But I do not \nunderstand what prevent Gson from serializing, say,  class Struct<C>{ private C \ncontent; } as if it was class Struct{ private \nObject content;} ? As far, as I know, second is exactly what we'll have in \nbytecode after type-erasure, and exactly what \nwe'll see throught Reflection API. In any case, object, reffered by field \n\"content\" will be serialized using it actual type, \nnot declared one -- why we ever need field declared type? May be I miss \nsomething?\n\n\n\n```\n\nOriginal comment by `chere...@gmail.com` on 9 Apr 2009 at 11:59\n =||= ", 0], ["103", "ClassCastException in 1.3b2 from line 91 in TypeInfoFactory.java", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:46 PM", "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/50e5c3b80ac7c7ab?hl=en\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 Feb 2009 at 6:27", "```\nAdded tests to reproduce this issue in r393\nThe tests pass at the moment, so either this is not a valid issue or we need \nmore\ninformation in the bugreport.\n```\n\nOriginal comment by `inder123` on 12 Mar 2009 at 1:05\n- Changed state: **Invalid**\n =||= ```\nThis test case fails with v1.3\n```\n\nOriginal comment by `j.matthe...@gmail.com` on 24 Apr 2009 at 2:20\n\nAttachments:\n- [ParameterizedTypesTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-103/comment-2/ParameterizedTypesTest.java)\n =||= ", 0], ["104", "Expose FieldNamingPolicy", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:47 PM", "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/27a454d1d289bbdd?hl=en\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 Feb 2009 at 8:11", "```\nFixed in r392\n```\n\nOriginal comment by `inder123` on 11 Mar 2009 at 9:53\n- Changed state: **Fixed**\n =||= ```\nIssue 91 has been merged into this issue.\n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 6:34\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:38\n- Added labels: **Milestone-Release1.3**\n =||= ```\nGreat job on this one!  I starting using this today, very useful :)\n```\n\nOriginal comment by `jpsw...@gmail.com` on 27 Mar 2009 at 8:16\n =||= ", 0], ["105", "ClassCastException thrown instead of ParseError", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:48 PM", "```\nWhat steps will reproduce the problem?\n1. class TestObjectA { TestObjectB b }\n2. String two = {\"b\" : [ ]}\n3. new Gson().fromJson(two, TestObjectA.class)\n\nWhat is the expected output? What do you see instead?\n\nExpected: parse error\n\nActual: ClassCastException: com.google.gson.JsonArray cannot be cast to\ncom.google.gson.JsonObject\n\nWhat version of the product are you using? On what operating system?\n\nv1.2.2 on Linux\n\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 4 Mar 2009 at 7:12", "```\nFull stacktrace below:\n\nClassCastException: com.google.gson.JsonArray cannot be cast to\ncom.google.gson.JsonObject\n\njava.lang.ClassCastException\n  at com.google.gson.JsonElement.getAsJsonObject(JsonElement.java:78)\n  at\ncom.google.gson.JsonObjectDeserializationVisitor.visitPrimitiveField(JsonObjectD\neserializationVisitor.java:129)\n  at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:177)\n  at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n  at\ncom.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor\n.java:131)\n  at\ncom.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio\nnVisitor.java:93)\n  at\ncom.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese\nrializationVisitor.java:75)\n  at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n  at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n  at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:75)\n  at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:47)\n  at com.google.gson.Gson.fromJson(Gson.java:379)\n  at com.google.gson.Gson.fromJson(Gson.java:327)\n  at com.google.gson.Gson.fromJson(Gson.java:303)\n```\n\nOriginal comment by `ch...@gmail.com` on 4 Mar 2009 at 7:13\n =||= ```\nYou have an array and you are trying to map it to an object. Objects have \nname-value\npairs whereas Arrays only have values. This mapping can not be made to work in \nGson.\n```\n\nOriginal comment by `inder123` on 11 Mar 2009 at 8:53\n- Changed state: **Invalid**\n =||= ```\nYep, I understand, but the expected output should be a JsonParseError, not a\nClassCastException -- is this correct?\n\nAm I supposed to try/catch ClassCastException when parsing untrusted input?\n```\n\nOriginal comment by `ch...@gmail.com` on 20 Mar 2009 at 2:41\n =||= ```\nI don't think catching a ClassCastException is a good idea.  I don't know if \nthrowing\na \"JsonParseException\" is the right thing to do either because it is valid JSON.\n\nIt's more like bad user input which sounds like an \"IllegalArgumentException\" \nshould\nbe thrown in this case.\n\nThoughts?\n\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Mar 2009 at 3:13\n- Changed state: **Accepted**\n =||= ```\nThat's fine with me. I consider both malformed JSON and\nvalid-JSON-that-doesn't-match-what-I'm-parsing to be parse errors, but I'm find\ncatching a second exception if that's the desired behavior.\n```\n\nOriginal comment by `ch...@gmail.com` on 26 Mar 2009 at 10:43\n =||= ```\nOn second thoughts, we decided to consider all such errors as parsing errors, \nso we \nwill now be throwing JsonParseException if the input didn't match what was \nexpected \n(even if it was valid JSON).\n```\n\nOriginal comment by `inder123` on 28 Mar 2009 at 5:54\n =||= ```\nFixed in r404\n```\n\nOriginal comment by `inder123` on 28 Mar 2009 at 5:55\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.3**\n =||= ", 0], ["106", "Please support java.util.Calendar by default", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:50 PM", "```\nWhat steps will reproduce the problem?\n1. Create a Class Customer with \nCustomer {\n String name;\n Calendar timestamp;\n}\n2.  Try Serializing this class and you will get an exception for Calendar\n\n3.\n            Customer c = new Customer();\n        c.setName(\"jjj sdss\");\n        c.setRegTime(Calendar.getInstance());\n                Gson gson = new Gson();\n        String json = gson.toJson(c);\n\nWhat is the expected output? What do you see instead?\nCalendar seems to be not supported\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\njava.lang.RuntimeException: Unable to invoke no-args constructor for class\njava.util.Calendar. Register an InstanceCreator with Gson for this type may\nfix this problem.\n\n\n\nCan java.util.Calendar be supported by default ??? \n\n```\n\nOriginal issue reported on code.google.com by `njun...@gmail.com` on 5 Mar 2009 at 8:01", "```\nFixed in r391 by serializing a calendar object to something like\n{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}\n\nI wonder if there is a standard way of serializing a calendar object that we \nshould\nbe using.\n```\n\nOriginal comment by `inder123` on 11 Mar 2009 at 9:48\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 27 Mar 2009 at 7:38\n- Added labels: **Milestone-Release1.3**\n =||= @GoogleCodeExporter Yeah the unofficial standard for json dates is ISO 8601. What the hey\n =||= @GoogleCodeExporter how would I parse a string in format \"yyyy-MM-dd\" into Calendar object using GSON ?? \n =||= It would be nice to support `java.util.Calendar` model attributes for converting from an ISO 8601 format like `2016-02-29T15:00:00+02:00`, in order to store both the UTC datetime _and_ the time zone data.\n =||= ", 0], ["107", "toString on JsonPrimitve does not produce valid Json", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:51 PM", "```\nWhat steps will reproduce the problem?\n1. Compile attached file GsonTest.java\n2. Run it\n\nWhat is the expected output? What do you see instead?\nThe line break and tab should be escaped. Currently they are not escaped and\ntherefore the output is not valid Json. The documentation for the toString\nmethod claims that it is.\n\nWhat version of the product are you using? On what operating system?\n1.3b2 on Linux\n```\n\nOriginal issue reported on code.google.com by `dennis.b...@gmx.net` on 11 Mar 2009 at 5:46\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-107/comment-0/GsonTest.java)", "```\nThis is a valid bug, but relatively hard to fix since we would need to allow a \nway\nfor the user to specify whether to escape Html characters or not. \n```\n\nOriginal comment by `inder123` on 11 Mar 2009 at 9:06\n- Changed state: **Accepted**\n =||= ```\nWhat do you mean with HTML character?\n\nThe JSON specification <http://www.ietf.org/rfc/rfc4627.txt> clearly specifies \nin the \nlast sentence of the first paragraph of section 2.5. Strings which characters \nmust be\nescaped.\n```\n\nOriginal comment by `dennis.b...@gmx.net` on 11 Mar 2009 at 9:34\n =||= ```\nThe contents of the string may contain HTML characters and Gson provides a \nGsonBuilder setting to escape them. We would have to provide a similar setting \nto \nthe Constructor (or some other way) in the toString() method to make it work \ncorrectly. For now, I have updated the Javadoc to remove this claim. But I will \nleave this bug open because it is worth fixing in future.\n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 7:31\n =||= ```\nI'm not sure what this issue has to do with HTML characters.  To produce valid \nJSON,\nyou just need to escape \"s and the control characters listed in the JSON spec:\nhttp://www.json.org/\n\nIf the string being escaped contains HTML, then that's fine, but escaping for \nHTML\nshould be outside of the purview of this library since this library deals with \nJSON\nnot HTML.\n\nUnless there is something I am missing?\n```\n\nOriginal comment by `z13g...@gmail.com` on 14 Apr 2009 at 8:31\n =||= ```\nI think I understand the issue.  You are depending on the toString(Appender) \nmethod\nin JsonPrimitive to generate unescaped JSON so that the Serializer can do the \nescaping.\n\nI am running into the issue because I'm not using the Gson class at all because \nI\ndon't need the Json <--> Object stuff.  I am just parsing JSON via JsonParser to\ngenerate the JsonElements then modifying it and outputting it.\n\nIMHO, the toString method on the JsonElements should return properly escaped \nJSON. \nIf it doesn't, then the method isn't of much use except by the internal methods \nsince\nthe JSON it is generating is invalid.\n\nIs my interpretation correct?  If it is, I'm still not clear how the HTML \nescaping\nfits into the problem.\n```\n\nOriginal comment by `z13g...@gmail.com` on 14 Apr 2009 at 9:29\n =||= ```\nI agree that this is a valid problem. The toString() method should just do JSON\nescaping and not HTML escaping (setting through GsonBuilder). \n```\n\nOriginal comment by `inder123` on 14 Apr 2009 at 9:34\n- Added labels: **Milestone-Release1.4**\n =||= ```\nFYI... In the meantime, here is a quicky patch which adds the functionality via \na\nsecond toEscapedString method.\n```\n\nOriginal comment by `z13g...@gmail.com` on 14 Apr 2009 at 9:48\n\nAttachments:\n- [escape.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-107/comment-7/escape.patch)\n =||= ```\n[deleted comment]\n```\n =||= Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:49\n- Changed state: **Duplicate**\n =||= ", 0], ["108", "Error during parsing hex codes.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:53 PM", "```\nWhat steps will reproduce the problem?\n\n1. Try to parse string value with hex codes.\n\n{\n\"title\" : \"The Dun \\x26 Bradstreet Corporation\",\n\"id\" : \"10242\"\n}\n\nwe get:\n\nCaused by: com.google.gson.ParseException: Encountered \"\\\"\" at line 2,\ncolumn 20.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n\nWhat is the expected output? What do you see instead?\n\nThere must not be any errors!\n\nWhat version of the product are you using? On what operating system?\n\n1.3.b\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `alexande...@gmail.com` on 24 Mar 2009 at 8:38", "```\nHex escapes are not a part of the JSON specification - or JSON RFC4627.\nParseException is the correct behavior when provided with invalid JSON.\n\nThe correct escape in your example is \\u0026 instead of \\x26.\n\nNote: I am not a developer on this project, or with google.\n\n\n```\n\nOriginal comment by `nuutti.k...@gmail.com` on 26 Mar 2009 at 10:57\n =||= ```\nAs Nuutti points out, this is an invalid bug. You need to use the unicode \nescape \nsequence.\n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 7:29\n- Changed state: **Invalid**\n =||= ", 0], ["109", "Trivial bug in user guide", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:54 PM", "```\nIn the user guide, on collection types, this is said:\n\n----\n(Deserialization)\nType collectionType = new TypeToken<Collection<Integer>>(){}.getType();\nCollection<Integer> ints2 = gson.fromJson(collectionType, json);\nints2 is same as ints\n----\n\nYet, gson.fromJson is most likely taking the String argument first, and\nthen the Type arguments.\n```\n\nOriginal issue reported on code.google.com by `nuutti.k...@gmail.com` on 26 Mar 2009 at 1:28", "```\nFixed. Thanks for the bug report. This was a vestige from a very early \nimplementation \nof Gson where the type parameter actually came first. \n```\n\nOriginal comment by `inder123` on 27 Mar 2009 at 7:26\n- Changed state: **Fixed**\n =||= ", 0], ["110", "splitting the Json to Object into two pass", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:54 PM", "```\nTo implement a json-rpc protocol, there are three steps.\nFirst parse the json text to find the callee function and parameter types,\nSecond, based on type discoverd in first step, deseriallize sub-parts of \njson text into different object.\nThird, convert result and other logging info into json.\n\ngson only provided to object  to json  api, make it hard to do the first \nand third step.\n\nThis request to split the json to object into two pass.\n1\\ convert json text to json element tree.\n2\\ convert json element tree to object.\n\nAnd split the object to json  into two pass.\n1\\ convert json element tree to object.\n2\\ convert json text to json element tree.\n\nIs it possibel to add something like \npublic JsonElement toJsonElement(Object src, Type typeOfSrc);\nand\npublic JsonElement toJsonElement(string json);\n\nThanks.\n\nI have a example.\n\n\n```\n\nOriginal issue reported on code.google.com by `yufanyu...@gmail.com` on 28 Mar 2009 at 1:20\n\nAttachments:\n- [gson.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-110/comment-0/gson.txt)", "```\nWe explored making a change similar to this in \nhttp://code.google.com/p/google-gson/issues/detail?id=57 \n\nWe plan to release Gson 1.4 beta soon and in that we will provide a \ntoJsonTree() or some similarly named \nmethod that will address this issue.\n```\n\nOriginal comment by `inder123` on 28 Mar 2009 at 3:11\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**, **Milestone-Release1.4**\n- Removed labels: **Type-Defect**\n =||= ```\nFixed in r420  by providing toJsonTree methods in Gson.\n```\n\nOriginal comment by `inder123` on 3 Apr 2009 at 9:52\n- Changed state: **Fixed**\n =||= ", 0], ["111", "make JsonPrimitive.getAsObject a public method", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:55 PM", "```\nIn json-rpc, it's necessary to determining actual type of a JsonPrimitive, \nsuch as Interger, Long or BigInterger. This information can be make available \nby add several is*** function, but make JsonPrimitive.getAsObject a public \nmethod would be more easily. \n\n```\n\nOriginal issue reported on code.google.com by `yufanyu...@gmail.com` on 28 Mar 2009 at 1:33", "```\nNever mind.\nIt's the same as using getAsNumber().\nPlease close this issue.\n\n```\n\nOriginal comment by `yufanyu...@gmail.com` on 8 Apr 2009 at 2:07\n =||= ```\nClosed per the request of yufanyufan\n```\n\nOriginal comment by `inder123` on 8 Apr 2009 at 5:56\n- Changed state: **WontFix**\n =||= ", 0], ["112", "Verbose, multi-line formatter for Gson (patch included)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:56 PM", "```\nIncluded is a patch to add a verbose, multi-line, one value per line\nformatter as discussed in issue 57\n(http://code.google.com/p/google-gson/issues/detail?id=57).\n\nThe changes to GsonBuilder are just examples and will probably be entirely\ndifferent if setFormatter becomes public. I just included them to make the\nformatter testable and to have atleast one way of using it myself.\n\nClass names and such have not been really thought out, so feel free to\nrename and mangle as much as you wish.\n\nLet me know if there's a need for copyright assignment or such.\n```\n\nOriginal issue reported on code.google.com by `nuutti.k...@gmail.com` on 29 Mar 2009 at 2:17\n\nAttachments:\n- [gson-verbose-formatter.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-112/comment-0/gson-verbose-formatter.diff)", "```\nIssue 143 has been merged into this issue.\n```\n\nOriginal comment by `inder123` on 7 Aug 2009 at 10:48\n =||= ```\nWe will revisit print formatting in a future release. Meanwhile, you can use \nGson.toJsonTree method and do the \nformatting yourself.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 8:58\n- Added labels: **Milestone-Release1.5**\n =||= ```\nThe latest code in SVN does one-value-per-line formatting.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:57\n- Changed state: **Fixed**\n =||= ", 0], ["113", "Output of single element String arrays not consistent with multi-element String arrays", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:57 PM", "```\nWhat steps will reproduce the problem?\n1. String s = {\"hello\"};\n2. new Gson().toJson(s);\nResult: [\"hello\"]\nShould be:  \"[\\\"hello\\\"]\"\n\n1. String s = {\"hello\", \"goodbye\"};\n2. new Gson().toJson(s);\nResult: \"[\\\"hello\\\",\\\"goodbye\\\"]\" \n(correct)\n\n\nWhat version of the product are you using? On what operating system?\n1.2.2, Ubuntu\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `ehin...@gmail.com` on 2 Apr 2009 at 1:29", "```\nUh, you mean, String[] s = {\"hello\"}, right?\n```\n\nOriginal comment by `a.revolu...@gmail.com` on 13 May 2009 at 11:03\n =||= ```\nYes\n```\n\nOriginal comment by `ehin...@gmail.com` on 13 May 2009 at 4:00\n =||= ```\nI am unable to reproduce this issue.  Added tests in r458.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:18\n- Changed state: **WontFix**\n =||= ```\nSorry, tests are in r459.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:26\n =||= ", 0], ["114", "GSON does not handle Object[] well", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:23:58 PM", "```\nWhat steps will reproduce the problem?\n1. Create a 1-element Object[] array\n2. Insert a Double into said array\n3. Convert said array to JSON using GSON\n\nWhat is the expected output? What do you see instead?\nI expected to get \"[1235.12411]\" but got \"[{}]\" instead.  This happens for\nother element types such as java.util.Date and java.lang.Integer.  I see\nthe expected output if I use a Double[] or List instead of Object[].\n\nUsing GSON 1.3 release on Ubuntu Intrepid Ibex.\n$ java -version\njava version \"1.6.0_10\"\nJava(TM) SE Runtime Environment (build 1.6.0_10-b33)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0-b15, mixed mode)\n```\n\nOriginal issue reported on code.google.com by `ket...@gmail.com` on 2 Apr 2009 at 9:09\n\nAttachments:\n- [GsonDouble.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-114/comment-0/GsonDouble.java)", "```\nI also get the expected result when I wrap the Object[] with \nArrays.asList(...).  See\nattachment for a simple example of this behavior.\n```\n\nOriginal comment by `ket...@gmail.com` on 2 Apr 2009 at 9:12\n\nAttachments:\n- [GsonDouble.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-114/comment-1/GsonDouble.java)\n =||= ```\nI also encounter this problem with following code:\n\nString[] str = new String[3];\nstr[0] = \"str\";\n\nObject[] obj = new Object[3]; \nobj[0] = str;\n\nArrayList lst = new ArrayList();\nlst.add(str);\n\nGson gson = new Gson();\nSystem.out.println(gson.toJson(obj));\nSystem.out.println(gson.toJson(lst));\nSystem.out.println(gson.toJson(lst.toArray()));\n\nOutput:\n\n[{},null,null]\n[[\"str\",null,null]]\n[{}]\n\nIt seems that Gson can not handle array properly.\n```\n\nOriginal comment by `wanpee...@gmail.com` on 7 May 2009 at 10:41\n =||= ```\nExpecting output for code above.\n\n[[\"str\",null,null],null,null]\n[[\"str\",null,null]]\n[[\"str\",null,null]]\n\n```\n\nOriginal comment by `wanpee...@gmail.com` on 7 May 2009 at 10:44\n =||= ```\nThis works acceptably well for me at the moment:\n\n  static class ArraySerializer implements JsonSerializer<Object[]>,\nJsonDeserializer<Object[]> {\n    public JsonElement serialize(final Object[] src, final Type typeOfSrc, final\nJsonSerializationContext context) {\n      if (src == null) {\n        return new JsonNull();\n      }\n\n      JsonArray result = new JsonArray();\n      for (Object el : src) {\n        if (el == null) {\n          result.add(new JsonNull());\n        } else {\n          result.add(context.serialize(el, el.getClass()));\n        }\n      }\n      return result;\n    }\n\n    @Override\n    public Object[] deserialize(final JsonElement json, final Type typeOfT, final\nJsonDeserializationContext context)\n        throws JsonParseException {\n      JsonArray array = json.getAsJsonArray();\n      Object[] result = new Object[array.size()];\n      int tally = 0;\n      for (JsonElement childElement : array) {\n        Object value;\n        if (childElement == null || childElement.isJsonNull()) {\n          value = null;\n        } else {\n          Type type = null;\n          if (childElement.isJsonArray()) {\n            type = Object[].class;\n          } else if (childElement.isJsonObject()) {\n            type = Object.class;\n          } else if (childElement.isJsonPrimitive()) {\n            final JsonPrimitive primitive = childElement.getAsJsonPrimitive();\n            if (primitive.isBoolean()) {\n              type = Boolean.class;\n            } else if (primitive.isNumber()) {\n              type = Number.class;\n            } else if (primitive.isString()) {\n              type = String.class;\n            }\n          }\n\n          value = context.deserialize(childElement, type);\n          if (value instanceof Object[]) {\n            value = new ArrayList(Arrays.asList((Object[]) value));\n          }\n        }\n\n        result[tally] = value;\n        ++tally;\n      }\n      return result;\n    }\n  }\n\nThough I'm pretty sure it doesn't cover all the corner cases or generics.\n```\n\nOriginal comment by `anton.sa...@gmail.com` on 7 May 2009 at 12:11\n =||= ```\nr432 adds ability to serialize and deserialize array/collections of \njava.lang.Object \nwhen the actual object is a primitive.\n```\n\nOriginal comment by `inder123` on 27 Jul 2009 at 11:26\n =||= Original comment by `inder123` on 27 Jul 2009 at 11:26\n- Changed state: **Started**\n =||= ```\nHi! if someone could help me, I need to serialize and deserialize Date format \nfor\nHttp calls to a Web Service, I \u00b4m using gson 1.3\nThanks\nFlor\n```\n\nOriginal comment by `florpere...@gmail.com` on 29 Jul 2009 at 9:59\n =||= ```\nFixed in r442.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:13\n- Changed state: **Fixed**\n =||= ", 0], ["115", "JsonParser.jj wrong grammar", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:01 PM", "```\nWhat steps will reproduce the problem?\n\n1. Please take a look at the JsonParser.jj file in you source control.\nParse method looks like this:\n\npublic JsonElement parse() :\n{\n  JsonElement json = null;\n}\n{\n  [\")]}'\\n\"]( json=JsonObject() |\n    json=JsonArray() |\n    json=JsonPrimitive() |\n    json=JsonNull())\n  { return json; }\n}\n\nWhat is the expected output? What do you see instead?\n\nI've found at least two instances of json text causing to return incorrect\nresult. Try to proceed parsing with the following input:\n\n1. JsonElement element = new JsonParser(new StringReader(\"  \")).parse();\n\nExpected element is to be null, but it failed with exception:\n\nEncountered \"<EOF>\" at line 1, column 2.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"[\" ...\n    \"{\" ...\n    \"-\" ...\n    \")]}\\'\\n\" ...\n\n2. Second option is event more harmful:\nJsonElement element = new JsonParser(new StringReader(\"{}, 12, 23\")).parse();\n\nExpected: parse exception to be throws (indicating bad grammar).\nBut encountered empty JsonObject (parser stop parsing after it encounters\ncurly bracket and immediately returns).\n\nI want to provide you with a fix to JsonParser.jj grammar file.\n\npublic JsonElement parse():{\n  JsonElement json = null;\n}\n{\n  (<EOF>\n  | json = JsonObject()\n  | json = JsonArray()\n  | json = JsonPrimitive()\n  | json = JsonNull()) <EOF> {\n    return json;\n  }\n}\n\n\n```\n\nOriginal issue reported on code.google.com by `tazija@gmail.com` on 4 Apr 2009 at 12:19", "```\nThanks for the detailed bug report and the suggestions to improve the grammar.\n\n2) can not be done since Gson 1.4 allows multiple JSON objects on the stream. \nSo, in your example, it should \nreturn 3 objects: empty JsonObject(), JsonPrimitive(12), JsonPrimitive(23)\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 6:59\n =||= ```\nJust realized that the 2 will fail to parse since it is not a valid JSON.\nGson stops at matching {} and doesn't look any further. \n\nIf you were using JsonParserAsync (in 1.4) you will be able to parse \"{} 12 23\" \ninto what I said above.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 7:32\n =||= ```\nThis is working as we intended it to work.\n\nNote: your use case #1 will return a JsonNull object now.  Not sure if this is \nnew\nafter the 1.4 release.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 7:34\n- Changed state: **WontFix**\n =||= ", 0], ["116", "Supporting associations like JS (Map based) is desired", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:02 PM", "```\nWhat steps will reproduce the problem?\n1.create something like String s = '{a:[1,2,\"b\"],c:[3,\"5\",6]}';\n2. gson.fromJson(s, Map.class);\n3. you get exception\n\nWhat is the expected output? What do you see instead?\nI expected Map (association) similar I have in JS. However I am forced to \ncreate a new Java type, like:\nstatic class MyType {\n  String[] a, c;}\n\n\nWhat version of the product are you using? On what operating system?\nversion 1.3 on Ubuntu\n\nPlease provide any additional information below.\n\nBTW if I have mixed array, why can't I deserialize in Object[] with \nautomatic fills of elements as Sting, Integer, Long, OtherObject\n\n```\n\nOriginal issue reported on code.google.com by `jAddress...@gmail.com` on 8 Apr 2009 at 1:11", "```\nGson does serialize non-parameterized maps and collections, but it doesn't \nallow them for deserialization and \nwe have no plans to support it. \n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 8:57\n- Changed state: **WontFix**\n =||= ", 0], ["117", "Can't seriallize/deseriallize a List<Object> with null element;", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:03 PM", "```\nWhat steps will reproduce the problem?\n   List<Object> d = new ArrayList<Object>();\n   d.add(null);\n   JsonElement je = gson.toJsonTree(d);\n\nWhat is the expected output? What do you see instead?\n   create json like \"[null]\"\nactually\n   throw a null pointer exception\n\nWhat version of the product are you using? On what operating system?\n   1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `yufanyu...@gmail.com` on 8 Apr 2009 at 9:24", "```\nFixed in r460.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:35\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 1 Oct 2009 at 5:07\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["118", "Gson should list the field that caused circular reference error", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:04 PM", "```\nSee the discussion at \nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/8570497f1d35479d\n```\n\nOriginal issue reported on code.google.com by `inder123` on 14 Apr 2009 at 8:44", "```\nFixed in r461\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 8:44\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ```\nThanks a lot!\n```\n\nOriginal comment by `seba.wag...@gmail.com` on 29 Sep 2009 at 9:03\n =||= ", 0], ["119", "registerDeserializer in GsonBuilder is private", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:05 PM", "```\nWhat steps will reproduce the problem?\n1. See source code\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\nHow can a client register a custom deserializer?\n```\n\nOriginal issue reported on code.google.com by `kaveh.gh...@gmail.com` on 27 Apr 2009 at 8:35", "```\nJust use registerTypeAdapter method in GsonBuilder and pass it the \ndeserializer. \n```\n\nOriginal comment by `inder123` on 5 May 2009 at 11:33\n- Changed state: **Invalid**\n =||= ", 0], ["120", "[enhancement] Add OSGi Bundle manifest headers so gson can be used in OSGi environment.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:06 PM", "```\nAttaching patch to the 1.3 POM which includes the bundle manifest headers into \nthe compiled jar.  \n```\n\nOriginal issue reported on code.google.com by `rfar...@gmail.com` on 5 May 2009 at 10:17\n\nAttachments:\n- [gson-osgi.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-120/comment-0/gson-osgi.patch)", "```\nReplaced patch with one using maven-bundle-plugin. (thanks to  nairb774 for \npointing this out)\n```\n\nOriginal comment by `rfar...@gmail.com` on 5 May 2009 at 10:54\n\nAttachments:\n- [gson-osgi.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-120/comment-1/gson-osgi.patch)\n =||= ```\nFixed in r421 \nThanks for the patch.\n```\n\nOriginal comment by `inder123` on 5 May 2009 at 11:32\n- Changed state: **Fixed**\n =||= ```\nJust noticed, my first patch has a typo.   \"com.google.json;version=1.3.0\" \nneeds to\nbe \"com.google.gson;version=1.3.0\".\n```\n\nOriginal comment by `rfar...@gmail.com` on 8 May 2009 at 7:34\n =||= ```\nFixed in r423\n```\n\nOriginal comment by `inder123` on 8 May 2009 at 10:24\n =||= ", 0], ["121", "SerializedName should allow Java reserved words in JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:08 PM", "```\nSee\nhttp://groups.google.com/group/google-gson/browse_thread/thread/085ae0279f57b8e9\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 May 2009 at 11:37", "```\nFix submitted in r426.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 24 May 2009 at 10:32\n- Changed state: **Fixed**\n =||= ```\nSerializedName should allow '-' too.\n\n@SerializedName(\"font-size\")\nprivate Integer fontSize;\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 24 Aug 2009 at 11:06\n =||= Original comment by `inder123` on 24 Aug 2009 at 5:20\n- Changed state: **Accepted**\n =||= ```\nFixed in r455.\n\nAdded a new default naming policy with dashes in r456.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 6:46\n- Changed state: **Fixed**\n =||= ", 0], ["122", "add more flexable ability to GsonBuilder for filtering property", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:09 PM", "```\nbefore I know Gson I have a own annotation named @NotInJson,It's familar\nwith @Expose,and @NotInJson is exclude not include,I hope Gson can provide\na exclude annotation named @NotExpose or provide a mechanism let developers\nprocess filtering,thanks.\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 6 May 2009 at 8:07", "```\nattachment is patch \n\nadd two methods for GsonBuilder\n\nregisterExclusionStrategy(ExclusionStrategy... exclusionStrategies)\nexcludeFieldsWithAnnotations(Class<?extends Annotation>...annotationClasses)\n\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 6 May 2009 at 9:28\n\nAttachments:\n- [patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-122/comment-1/patch.txt)\n =||= ```\nYou can mark fields as \"transient\" and Gson will skip over them.  In Java, the\n\"transient\" is used to mark a field that should not appear in the class's \nserialized\nor persisted state.\n\nDoes this solution work for you?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 May 2009 at 4:24\n =||= ```\nI know that,there are two problems\n1.I hope that does not require source code changes for switching library\n2.transient can effect other function like serialization\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 13 May 2009 at 1:26\n =||= ```\nSorry, but I don't think that I understand your first point from above.\n\nUsing a Java annotation would still require source changes because you'd have to\nannotate your field or class with an annotation such as \"@Ignore\".\n\nWriting the code to support this features is actually quite simple because of \nthe\nExclusionStrategy concept.  We already do something very similar to this for \nthe API\nversioning control; however, I am not completely convinced that adding an \nannotation\nfor this purpose is better than specifying the field as \"transient\".  I \nunderstand\nthat this affect the default Java object serialization, but you can assume that\npassing an object through Gson is just serializing an object into a JSON format,\nwhich can later be translated back into a Java Object instance.\n\n@Inder, what are your thoughts on this feature request?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 May 2009 at 7:25\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nI think we should have an annotation way of excluding fields too. Requiring \nthat the \nusers use transient may have unintended side-effects.\n```\n\nOriginal comment by `inder123` on 14 May 2009 at 12:28\n =||= ```\nhi,joel,before I know gson,I use my own utils using json.org to serialize \nobjects,and\nI have defined a annotation @NotInJson for my application,so I wish I can reuse \nthis\nannotation and needn't make changes for my annotated classes when I switch lib \nfrom\njson.org to gson.\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 14 May 2009 at 1:11\n =||= ```\nHello Joel,\nMarking a field as transient does not solve the problem. For example: Class A\nreference class B (class A has a collection reference of type class B), if I\nserialization a collection instance of class A, it will serialize all the \nreferences\nof class B as well, which is fine. But when I have another class, let called it \nC,\nclass C have a collection reference of class A, and when I serialize instances \nof\nclass C, I don't want all instances class B to be serialized (maybe because \nthey are\nunneccessary or way too big). I know that marking a field as transient is good \nfor\nserialization and deserialization back, but in some case, I only use gson just \nfor\nserialization. I'm developing an application which uses GWT and GWT-Ext, for\ndeserialization I use the built-in mechanism of GWT but for serialization \n(mostly\nconsumed by GWT-Ext widgets) I use gson.\n```\n\nOriginal comment by `xuantinh@gmail.com` on 21 Aug 2009 at 12:15\n =||= ```\nIn Gson 1.4, we extended the Expose annotation to support finer-grained control \nover\nwhat gets output or not. The expose annotation now supports a serialize and\ndeserialize parameter, if you set both to false, then that is effectively same \nas\n@NotInJson.\n\n Expose (serialize = false, deserialize = true) \n```\n\nOriginal comment by `inder123` on 24 Aug 2009 at 5:28\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ```\nis it possible let users make their own annotation?\nI need this @NotInJson for compatibility with some code written by org.json.xxx \nbefore\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 25 Aug 2009 at 1:08\n =||= ```\nMy gut reaction will be to advise to use a custom serializer/deserializer to do \nthis,\nbut do you have a proposal on how you would like to see it work?\n```\n\nOriginal comment by `inder123` on 25 Aug 2009 at 1:19\n =||= ```\nplease see my patch in Comment 1\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 25 Aug 2009 at 1:51\n =||= ", 0], ["123", "Gson parser consumes more input that needed", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:14 PM", "```\nSee the discussion at: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/af43e04cb644b734\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2009 at 4:26", "```\nFixed in r422 by adding a new API method for being able to parse a stream\nasynchronously as well as to allow looking for multiple JSON elements on the \nstream.\n```\n\nOriginal comment by `inder123` on 8 May 2009 at 10:25\n- Changed state: **Fixed**\n =||= ```\nRefactored the async parsing code into a new top-level class JsonParserAsync in \nr424\n```\n\nOriginal comment by `inder123` on 14 May 2009 at 8:20\n =||= ", 0], ["124", "Custom field handler", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:15 PM", "```\nI have a problem in need of a solution.  I don't think that there is a\n\"easy\" way to do this in gson (there is a \"hard\" way).\n\nA little about the problem I am trying to solve.  I am using BDB and have a\nfew entities stored in the database. A few have key relationships that\nmight be nice to optionally bridge.  For example given the two classes:\nclass A {\n @PrimaryKey\n String key;\n @SecondaryKey(relatedEntity=B.class)\n String bKey;\n}\nclass B {\n @PrimaryKey\n String key;\n}\n\nIf I serialize an instance of A it would be nice to have the option to\ninclude the referenced instance of B in the serialized representation. \nCurrently the best option is to write a custom serializer for each entity\nobject that handles this.  This is the \"hard\" option.  This requires me to\nhand code a lot of stuff that gson gives me for free.\n\nThe \"easier\" option that I have thought of (though I am open to\nsuggestions) would be to have a way to get a callback on serialization when\nGson is at a field with some marker (say a annotation).  From this callback\nI could get a hold of the field in need of serialization, and the object\nunder serialization.  This would then allow me to serialize the field\nnormally (keeping the key - say the depth is far enough) or to substitute\nthe referenced entity into the serialized location.  The awkward part of\nthis approach is that there is no good analog for the deserialization side.\n\nConsider this a long winded enhancement request :) unless there comes a\nbetter option.  ~Brian\n```\n\nOriginal issue reported on code.google.com by `nairb...@gmail.com` on 18 May 2009 at 3:46", "```\nLet us get a bit more concrete here. What would that annotation be? I presume \nsomething like: \n\n@Callback\nlong myfield;\n\nHowever, now this Callback needs a callback method specification. How is that \ncallback method specified? One way would be: \n@Callback(callBackClass = MyCallBack.class)\n\nwhere the expectation will be that MyCallBack will implement an interface that \nis \ninvoked during serialization or deserialization. That interface will probably \nlook \nvery similar to JsonSerializer or JsonDeserializer interface. But then we \nhaven't \nachieved much compared to your other \"hard\" way of doing this. \n\nAny comments?\n```\n\nOriginal comment by `inder123` on 19 May 2009 at 5:30\n =||= ```\nI was thinking something where the annotation is user specified. Example \nfollows. The\nonly problem is when you register SomeAnnotation, and AnotherAnnotation and \nthey both\nshow up on the same field, which goes first? First to register?\n\ninterface AnnotatedFieldHandler {\n    /** The object, at the this field has the given value in some context. Please\ntranslate/mutate/substitute and return. This could be passed to another \nhandler, or\nbe serialized if not a JsonElement (or subclass thereof) */\n    Object handle(Object object, Field field, Object value, SomeContext context);\n}\n\nclass AHandler implements AnnotatedFieldHandler {\n    public Object handle(final Object object, final Field field, final Object value,\nfinal SomeContext context) {\n        // make magic happen\n    }\n}\n\nclass ToSerialize {\n    private int notTouched;\n    @SomeAnnotation private String foreignKeyA;\n    @AnotherAnnotation private String foreignKeyB;\n}\n\npublic static void main(final String args[]) {\n    new GsonBuilder().registerAnnotatedFieldHandler(SomeAnnotation.class, new\nAHandler()).registerAnnotatedFieldHandler(AnotherAnnotation.class, new\nADifferentHandler())...;\n}\n\nThis was the shoot from the hip solution that I had.  My fear with this is that\nchecking every field for a annotation like this can be a potential performance \nissue\nand I would hate to introduce that.  In a way my thought was to give the \nability to\ndo substitution at serialization of individual fields.  I will be the first to \nadmit\nit does nto feel like the optimal solution. \nhttp://code.google.com/p/google-gson/issues/detail?id=43 may be another avenue \nas it\nsaves form hand writing the whole serialization code by hand (which can be \nerror prone).\n\nThoughts?\n```\n\nOriginal comment by `nairb...@gmail.com` on 19 May 2009 at 9:08\n =||= ```\nI agree with your assessment. We do plan to fix Issue 43 soon, so that will \nhelp in \nthis. I am closing this bug for now.\n```\n\nOriginal comment by `inder123` on 20 May 2009 at 6:01\n- Changed state: **WontFix**\n =||= ", 0], ["125", "[Patch] Allow alternate strategies for finding handlers.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:16 PM", "```\nThe attached patch (created against tags/1.3) allows you to specify alternate \nresolvers when \nattempting to locate the handler for a class.\n\nA resolver that attempts to find the most suitable handler via inheritance \nwhich will allow you to \nspecify a resolver based on an interface (my motivation for starting this) is \nincluded.\n```\n\nOriginal issue reported on code.google.com by `mr.kevin...@gmail.com` on 29 May 2009 at 10:06\n- Merged into: #164\n\nAttachments:\n- [resolver-strategy.tbz](https://storage.googleapis.com/google-code-attachments/google-gson/issue-125/comment-0/resolver-strategy.tbz)", "```\nI would have set this as an enhancement rather than a defect given the option.\n```\n\nOriginal comment by `mr.kevin...@gmail.com` on 29 May 2009 at 10:06\n =||= ```\ndeferred for consideration in a future release since this changes Gson's public \nAPI.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:14\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:32\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nSeems like this is related to issue 164, which wants to find serializers based \non inheritance.\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:43\n- Added labels: **Type-Enhancement**, **Milestone-Undefined**\n- Removed labels: **Type-Defect**\n =||= Original comment by `limpbizkit` on 30 Dec 2011 at 6:28\n- Changed state: **Duplicate**\n =||= ", 0], ["126", "Should not look into excluded (e.g. transient) fields for type information", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:18 PM", "```\nWhat steps will reproduce the problem?\n1. create a class with generic transient field; such as:\nclass ImGeneric<T> {\n  transient T dontLookAtMe;\n}\n2. try to serialize (or deserialize) with default settings\n\nWhat is the expected output? What do you see instead?\nexception from thrown from TypeInfoFactory.java:97 - Expecting parameterized \ntype, got class \nImGeneric.\n Are you missing the use of TypeToken idiom?\n See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-\nGener\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\nattached you'll find the patch and unit test for this issue\n```\n\nOriginal issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 12:46\n\nAttachments:\n- [transient_generic_field.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-126/comment-0/transient_generic_field.patch)", "```\nThis is a valid bug and thanks for the patch. It is now fixed in r429.\n```\n\nOriginal comment by `inder123` on 2 Jun 2009 at 6:02\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["127", "Should support custom serializers for map keys", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:19 PM", "```\nThis is actually a RFE for supporting custom serializers for map keys, the \ncurrent implementation \nrelies on result of String.valueOf for map keys, but if I've registered a \ncustom serialization type \nadapter for the type of map key it (obviously) doesn't get called\n\nWhat steps will reproduce the problem?\ncreate any class with toString method and register a JsonSerializer for it, try \nto serialize to JSON, \nyou'll see the toString method beeing called instead of the registered \nserializer\n\nWhat is the expected output? What do you see instead?\na call to JsonSerializer instead to toString method, and result from the \nserializer in the JSON \noutput\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\npatch is attached, with a possible solution that calls into serialization \ncontext while honoring \ncurrent implementation's behavior for keys without registered serializers, and \na unit test for the \nspecific situation\n\n```\n\nOriginal issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 6:30\n\nAttachments:\n- [map_key.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-127/comment-0/map_key.patch)", "```\nThe reason Gson doesn't allow custom handlers for Map Keys is because the key \nneeds to \nbe a valid field name (it can not be a Json object, for example). Allowing \narbitrary \nhandlers can result in invalid JSON being produced.I understand that using \ntoString() \nis probably unnaturally limited, but supporting serializers is not a good idea. \nAny \nother proposals? \n```\n\nOriginal comment by `inder123` on 2 Jun 2009 at 5:46\n =||= ```\nYes, this was quick and dirty support custom serializers as it expects (JSON) \nString to be returned from the \nserializers; I see two other possible solutions, either have the key objects \nimplement something like JsonMapKey \ninterface with String asMapKey() method, or have specialized type for custom \nmap key serializers. One thing to \nnote is that deserialization for custom map key objects is currently supported, \nso one would hope that \nserialization would be supported trough the same mechanism.\nOverall this is not a big issue as one can implement toString() method and \npreform serialization there...\n```\n\nOriginal comment by `zregv...@gmail.com` on 3 Jun 2009 at 12:56\n =||= ```\nThe reason we do not support serialization is because we do not want to output \ninvalid \nJSON. Deserialization is supported to be more permissive in what input we \naccept.\n```\n\nOriginal comment by `inder123` on 3 Jun 2009 at 5:46\n =||= Original comment by `inder123` on 23 Sep 2009 at 7:08\n- Changed state: **Fixed**\n =||= ", 0], ["128", "please add support for getter method", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:20 PM", "```\ncurrently gson only serializing field and doesn't support java bean property\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 1 Jun 2009 at 9:04", "```\nDuplicate on an existing enhancement request\n```\n\nOriginal comment by `inder123` on 2 Jun 2009 at 5:42\n- Changed state: **Duplicate**\n =||= ", 0], ["129", "Permit type data in the serialized JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:21 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nGSon gson = new GSon();\nMyObject ob = new MyObject();\nString text = gson.toJson(ob);\nMyObject copy_ob = (MyObject)gson.fromJson(text);\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `new.r...@gmail.com` on 19 Jun 2009 at 5:41\n- Merged into: #231", "```\nWhile this may seem tempting, having the client JSON specify which class to \ninstantiate seems to be full of \nsecurity holes to me. Do you have a proposal on how to avoid security issues?\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 7:03\n =||= ```\ndeferred for consideration in a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:13\n- Added labels: **Milestone-Release1.5**\n =||= ```\nHow about allowing new org.mypackage.ClassName in JSON input?  \n\nWe would like to use Gson as a lightweight IoC controller (we already are using \nGson) \nas it fits our use cases better than Guice (file-based configuration rather \nthan \nannotation-based dependency injection).  \n\nSecurity issues can be mitigated by disabling this by default.  A method in \nGsonBuilder \n(setXXX) can activate it.\n```\n\nOriginal comment by `gin...@gmail.com` on 21 Feb 2010 at 8:05\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:32\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:46\n- Added labels: **Milestone-Undefined**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:46\n- Added labels: **Milestone-Release1.7**\n- Removed labels: **Milestone-Undefined**\n =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:44\n- Changed title: **Permit type data in the serialized JSON**\n- Changed state: **Duplicate**\n =||= ", 0], ["130", "Unbearable when toJson a long string(1M)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:23 PM", "```\nWhat steps will reproduce the problem?\n1. a long xml type string, call toJson() method,\n2. cost exceed 1 minutes with cpu 100%\n3. I used disableEscapeHtml ,but it is no useful.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nI guess escape a very long string cost to much, maybe gson could offer a \nEscapedStringBuffer, so we can build an escaped string, and toJson then \noutput it directly.\n\n```\n\nOriginal issue reported on code.google.com by `iamj...@gmail.com` on 26 Jun 2009 at 3:35", "```\noh, I made a mistake, disableHtmlEscaping works.... \n```\n\nOriginal comment by `iamj...@gmail.com` on 26 Jun 2009 at 3:59\n =||= ```\nI am closing this bug since you seem to indicate that the bug report was \ninvalid.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:13\n- Changed state: **Invalid**\n =||= ", 0], ["131", "Gson should provide a way to configure order for field navigation", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:24 PM", "```\nCurrently gson 1.3 build output string navigating fields starting from \nclass of object that is serializing.\n\nIn my case (for human readabilty of serialized strings) I need a reverse \nstratedy - navigate fields of topmost class in hierarchy first and fields \nof serializing object last.\n\n--------------\nHere some code: \n\nchanges in com.google.gson.ObjectNavigator:\n  public void accept(Visitor visitor) {\n    boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler\n(obj, objType);\n    if (!visitedWithCustomHandler) {\n      Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;\n      if (objectToVisit == null) {\n        return;\n      }\n      TypeInfo objTypeInfo = new TypeInfo(objType);\n      if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n        return;\n      }\n\n      if (ancestors.contains(objectToVisit)) {\n        throw new IllegalStateException(\"Circular reference found: \" + \nobjectToVisit);\n      }\n      ancestors.push(objectToVisit);\n\n      try {\n        if (objTypeInfo.isArray()) {\n          visitor.visitArray(objectToVisit, objType);\n        } else {\n          visitor.startVisitingObject(objectToVisit);\n          // For all classes in the inheritance hierarchy (including the \ncurrent class),\n          // visit all fields\n\n // !!!! changes !!!!\n // collect classes to navigate\n          List<Class<?>> classesToNavigate = new ArrayList<Class<?>>();\n          for (Class<?> curr = objTypeInfo.getRawClass();\n          curr != null && !curr.equals(Object.class); curr = \ncurr.getSuperclass()) {\n            if (!curr.isSynthetic()) {\n                classesToNavigate.add(curr);\n            }\n          }\n\n // here we could check somr flag if needed\n          Collections.reverse(classesToNavigate);\n\n          for (Class<?> curr : classesToNavigate)\n          {\n           navigateClassFields(objectToVisit, curr, visitor);\n          }\n        }\n      } finally {\n        ancestors.pop();\n      }\n    }\n  }\n\n```\n\nOriginal issue reported on code.google.com by `kua...@gmail.com` on 26 Jun 2009 at 11:55", "```\ndeferred for consideration in a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:12\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:32\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:46\n- Added labels: **Milestone-Undefined**\n =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:57\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nCustom type adapters exist to handle this.\n```\n\nOriginal comment by `limpbizkit` on 21 Mar 2011 at 9:55\n- Changed state: **WontFix**\n =||= ", 0], ["132", "Not able to deserialize.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:26 PM", "```\nI'm using gson-1.3.jar.\n\nI'm serializing my object using gson lib and i get the proper json string.\nBut while deserializing i get following exception:\nMap objects need to be parameterized unless you use a custom serializer.\n\nHere is my code:\npublic class A {\n    Map map; //and getter and setter for this\n}\n\n//in main method of some other class\n    Map m=new HashMap();\n    m.put(\"entry1\", \"value1\");\n\n    A a=new A();\n        a.setMap(m);\n\n        //serialize\n    Gson gson = new Gson();\n    String jsonString=gson .toJson(a);\n\n    //deserialize\n    A newA =gson .fromJson(jsonString, A.class);\n    System.out.println(\"Map is:\"+newA);\n\nLee\n\n\n\nb.setProp(\"prop\");\n\n```\n\nOriginal issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:21", "```\nPlease assume that the map which I'm using stores the different types of object \nso I\nreally cannot use the generics. \nI guess and this is not supported by gson.\nIf not then also please let me know when will it be available and provide the\nsolution for above.\n\nthanks,\nLee\n```\n\nOriginal comment by `leenabo...@gmail.com` on 7 Jul 2009 at 6:26\n =||= ```\nRight now this is not supported by Gson.  The JSON output does not contain type\ninformation in the output so we are unable to deserialize the objects back into \na map\nform.\n\nFor now, I do not see us adding this feature to Gson; however, you should be \nable to\nwrite your own custom serializer and deserializer to drop type information into \nyour\noutput so that you will be able to serialize the value back into Java.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:52\n- Changed state: **Invalid**\n =||= ", 0], ["133", "Not able to deserialize.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:27 PM", "```\nI'm using gson-1.3.jar.\n\nI'm serializing my object using gson lib and i get the proper json string.\nBut while deserializing i get following exception:\nMap objects need to be parameterized unless you use a custom serializer.\n\nHere I cannot do this (what exception says) as I'm using spring mvc, and\nwhat I'm trying to serialize is Springs ModelAndView's ModelMap class.\n\nsteps to reproduce the problem\n1. put attached classes folder in classpath (classes.rar)\n2. put attached jars in classpath (lib.rar)\n3. And run the following code-snippet:\n    Gson gson = new Gson(); \n\n    FileInputStream fin=new FileInputStream(\"c:\\\\mv.ser\");\n    ObjectInputStream oin=new ObjectInputStream(fin);\n    ModelMap map=(ModelMap)oin.readObject();\n    System.out.println(\"Map is:\"+map);\n\n    //serialize\n    String jsonString=gson .toJson(map);\n    System.out.println();\n    System.out.println(\"JSOn String is :\");\n    System.out.println(jsonString);\n\n    //deserialize\n    ModelMap modelMap=gson .fromJson(jsonString, ModelMap.class);\n    System.out.println(\"Map is:\"+modelMap);\n\nPlease let me is it possible to deserialize this using gson-lib or do I\nneed to use json-lib for deserialization.\n\nI would really appreciate if yoy reply me ASAP as we need to take decision\non which library to use.\n\n\n```\n\nOriginal issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:27\n\nAttachments:\n- [mv.ser](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/mv.ser)\n- [classes.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/classes.rar)\n- [lib.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/lib.rar)", "```\ndeferred for a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:11\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:01\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nMaps need to be parameterized. There's no action we can take here.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:56\n- Changed state: **WontFix**\n =||= ", 0], ["134", "support java.sql.Date and Timestamp types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:28 PM", "```\nApparently these two types are not supported in the DefaultTypeAdapters\n(v1.3). Would be very useful if they are provided out of the box, and saves\nusers from writing custom serializer/deserializer.\n\nThanks\n```\n\nOriginal issue reported on code.google.com by `HSajja...@gmail.com` on 8 Jul 2009 at 5:31", "```\nWe are concerned about introducing a dependency on the java.sql package on \nGson. While I understand that \njava.sql is part of all Java runtimes, there could be Java like runtimes that \ndont support these packages.\n\nWe should publish the converters for these classes at this page though: \nhttp://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 7:07\n =||= ```\nDeferred for consideration in a future release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 6:10\n- Added labels: **Milestone-Release1.5**\n =||= ```\nPerhaps the fact that java.sql.Date and java.sql.Timestamp are subclasses of\njava.util.Date would allow you to avoid explicit dependencies... ? I haven't \nlooked\nat the code so don't know if this would work or not.\n\n```\n\nOriginal comment by `archie.c...@gmail.com` on 3 Dec 2009 at 4:56\n =||= ```\nFixed in r513 by adding explicit support for java.sql Date and Timestamp. I \ncould not \navoid the explicit dependencies though, but decided that java.sql dependency \nmay not \nbe all that bad.\n```\n\nOriginal comment by `inder123` on 4 Dec 2009 at 1:22\n- Changed state: **Fixed**\n =||= ```\nGiven java.sql.Timestamp allows for more precise time tracking (ie: nano \nseconds), was wondering how one would go about converting a nano/micro second \nstring timestamp into a java.sql.Timestamp using GSON, ie:\n\n{\n \"microsecond_date\": \"2012-10-24T00:25:42.000000Z\",\n \"nanosecond_date\": \"2012-10-24T00:25:42.000000000Z\"\n}\n\nGiven GSON uses ISO 8601 formatting which accepts decimal positions on any of \nthe time elements (http://en.wikipedia.org/wiki/ISO_8601#Times), I'm wondering \nif there would be a way without having to write my own \nserialization/deserialization logic to parse the string out given the impl \nprovided by DefaultDateTypeAdapter relies on SimpleDateFormat which doesn't \nsupport more than 3 decimal positions.\n```\n\nOriginal comment by `roberto.andrade` on 14 Aug 2013 at 10:48\n =||= ```\nI am also curious if it can be done without writing a custom deserializer. \n```\n\nOriginal comment by `Rob.Isak...@gmail.com` on 3 Dec 2013 at 9:36\n =||= Hi, \n  We use gson in [Leshan](https://www.eclipse.org/leshan/). This is an implementation of lightweight M2M protocol.\n  We have a Server and a Client implementation.\n  We aim compact [profile of java](http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html) for the Client. Unfortunately gson has dependency to java.sql.\\* so we need to use the compact2 profile instead of the compact1 profiles which is ~40% bigger.\n  See [leshan issue](https://github.com/eclipse/leshan/issues/58)\n =||= @sbernard31, did you find an alternative to use compact1 profile? =||= No, we didn't do anything for now, but we consider using https://github.com/ralfstx/minimal-json =||= With Java 9 and modularity, it means we have to add an extra dependency on java.sql module when using Gson. =||= Yeah, the module thing is a bit of a pain. Every time I `requires gson;` I also need to `requires java.sql;`.\r\n\r\nWould be nice if this supported project Jigsaw in a more complete manor. =||= Hey ! Is there any hotfix for 1.4 version for sql date and time types ?? =||= ", 0], ["135", "Having an inner class gives this error - No-args constructor for B does not exist.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:30 PM", "```\nWhat steps will reproduce the problem?\n\nI have a Java representation of the JSON object. When I declared something\nlike this -\n\npublic class A{\n   public String i;\n   public int t;\n  public B[] q;\n//no arg constructor for A\n   class B{\n       public String j;\n       public String[] k;\n       //no arg constructor for B\n   }\n}\n\n\nIt throws an exception saying B does not have a no arg constructor. when I\ndebugged, the constructor for B is actually being passed as B(A).\n\nI could get it working by taking B out of A but shouldn't it be working as\nis? you don't want to create a separate class just for 2 variables right?\nThis is a a very basic case that is supposed to work.\n\nWhat is the expected output? What do you see instead?\nExpecetd to return an instance of A. But I see the following error.\n\"No-args constructor for B does not exist. Register an InstanceCreator with\nGson for this type to fix this problem.\"\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `radha.te...@gmail.com` on 8 Jul 2009 at 10:04", "```\nYou can use Gson to serialize/deserialize nested classes; however, the nested \nclasses\nneed to be \"static\" nested classes.\n\nNote that the Java language has two types of \"nested\" classes:\n1. Inner Class\n2. Static Nested Class\n\nAn Inner Class has an implicit reference to the \"this\" instance of the outer \nclass. \nThis is why an inner class can access the private instance members of its outer \nclass.\n\nA Static Nested Class does not get this implicit reference.  You can have it \nstore a\nreference to A, but you will need to explicitly pass in a reference to the \nouter class.\n\nTry changing your example as follows:\npublic class A {\n  public String i;\n  public int t;\n  public B[] q;\n\n  //no arg constructor for A\n\n  static class B {\n       public String j;\n       public String[] k;\n       //no arg constructor for B\n   }\n}\n\n\nHope this helps,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 5:56\n- Changed state: **WontFix**\n =||= ", 0], ["138", "Gson should have a way to provide custom exclusion strategies", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:36 PM", "```\nSee the request at: http://groups.google.com/group/google-\ngson/browse_thread/thread/573f7359be79f4db?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Jul 2009 at 9:03", "```\nDeferring it to a future release. Meanwhile, you can use a custom \nserializer/deserializer to achieve what you \nwant.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 5:58\n- Added labels: **Milestone-Release1.5**\n =||= ```\nDue to popular demand, we are squeezing this into the 1.4 beta release.  We \nwill be\ngetting some feedback on this feature during the beta and \"may\" make a backwards\nincompatible change to this exclusion mechanism.  Try it out and let us know.\n\nSince this is now doable as of r485, marking this bug as fixed.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 8 Oct 2009 at 10:38\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n- Removed labels: **Milestone-Release1.5**\n =||= ", 0], ["139", "all should be strings", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:37 PM", "```\nVersion 1.3 does a good job of converting an Object to JSON string \nfollowing JSON standards.. However it does not suit my requirement, that \nis is all the data should be strings, meaning all the keys and values \nshould be enclosed by double quotes including for numbers, float, and \nintegers...\nexample:\n\"amount\":1.3300000000000000710542735760100185871124267578125  - current\n\"amount\":\"1.3300000000000000710542735760100185871124267578125\" - needed\n\nHow can i achieve this? Can i change the source code to get this behavior? \nwhere do i start? thanks a bunch in advance...\n-\n```\n\nOriginal issue reported on code.google.com by `pudur.ra...@gmail.com` on 30 Jul 2009 at 9:31", "```\nYou should be able to accomplish this without modifying any of the Gson code, \nbut\nrather creating your own serializers for longs, float, double, etc.\n\nHere is an example of a Long serializer:\npublic class MyLongSerializer implements JsonSerializer<Long> {\n  public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext\ncontext) {\n    return new JsonPrimitive(String.valueOf(src));\n  }\n}\n\nYou would then register these custom serializers using the GsonBuilder.\n\nHope this helps,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 18 Aug 2009 at 6:01\n =||= ```\nHaving Gson output a number as a number and not as a string is a feature not a \nbug.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 7:05\n- Changed state: **WontFix**\n =||= ", 0], ["140", "Error Deserializing objects using fromJson(string, type)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:38 PM", "```\nWhat steps will reproduce the problem?\n1. Created this class\n\npublic class Search {\n\n    private String accountNumber = \"\";\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n    public String getConfirmationNumber() {\n        return confirmationNumber;\n    }\n    public void setConfirmationNumber(String confirmationNumber) {\n        this.confirmationNumber = confirmationNumber;\n    }\n    public String getBankNumber() {\n        return bankNumber;\n    }\n    public void setBankNumber(String bankNumber) {\n        this.bankNumber = bankNumber;\n    }\n    private String confirmationNumber = \"\";\n    private String bankNumber = \"\";\n\n\n\n\n}\n\n\n2.run a toJson and then try to fromJson back to the object\n       Search search = new Search();\n       search.setAccountNumber(\"123456\");\n       String jsonString = new Gson().toJson(search);\n       Search search = new Gson().fromJson(jsonString, \nSearch.class); //Parse error here\n\n15:25:18,615 DEBUG []  Lookup JSON: \n{\"accountNumber\":\"5794749\",\"confirmationNumber\":\"\",\"bankNumber\":\"\"}\n15:25:18,615 ERROR []  Failed to generate JSON!\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@5b205b20 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:57)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n\n\n\n3. This code works though\n\n            Gson gson = new Gson();\n        JsonElement root = new JsonParser().parse(json);\n        return  gson.fromJson(root, type);\n\n\n\nWhat is the expected output? What do you see instead?\n\nIt should work with either code\n\n\nWhat version of the product are you using? On what operating system?\n\n\n1.3 with IBM JVM 1.6\n\nPlease provide any additional information below.\n\nWhat appears to be happening is that inside the Library code, the string \ngets converted to a StringReader and then that get passed to a parse \nmethod, but the parse method tries to parse the StringReader.toSTring(), \nwhich doesn't yield a JSON string, only a class address. \n\n\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 6 Aug 2009 at 8:30", "```\nWrote a test in r433 that attempts to reproduce this bug but the test passes. I \nam\nusing OpenJDK 1.6 on linux.\n```\n\nOriginal comment by `inder123` on 7 Aug 2009 at 1:13\n- Changed state: **Invalid**\n =||= ```\nIs OpenJDK 1.6 on Linux a requirement. In order to reproduce a test, you also \nhave \nto reproduce the circumstances. I said IBM JVM 1.6. Now, if Gson, doesn't \nsupport \nthe 1.6 IBM JVM, then we have no issue. I guess I'll have to figure it out \nmyself \nand fix it. I don't like using an IBM JVM, but I have no choice on this project.\n```\n\nOriginal comment by `chrislha...@gmail.com` on 7 Aug 2009 at 10:47\n =||= ```\nI dont know if it is a JDK issue or something else. I dont have the IBM JDK\ninstalled, so can you help testing for it? I wrote tests in r433 that \ngeneralizes\nyour code a little bit. Can you run those tests and let us know if they pass?\n\n```\n\nOriginal comment by `inder123` on 7 Aug 2009 at 9:57\n =||= ```\nIssue 142 is a better description of the problem. It isn't JVM related, it is \nSpring\nrelated. Something to do with Injection somehow. I complete examples to \nreproduce in\nIssue 142. I apologize for not investigating it further before I posted the \nbug, but\nat the time, it was all the information I had. I spent an hour today trying to\nconsistently reproduce it and getting the steps documented to created that \nissue. \n```\n\nOriginal comment by `chrislha...@gmail.com` on 7 Aug 2009 at 10:32\n =||= ", 0], ["141", "com.google.gson.Gson should be able to toJson JsonElements/JsonObjects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:39 PM", "```\ncom.google.gson.Gson should be able to toJson JsonElements/JsonObjects\n\nSomething like this would be stellar:\n  public String toJson(JsonElement jsonElement)\n  {\n      final StringWriter writer = new StringWriter();\n      try\n      {\n        formatter.format(jsonElement, writer, serializeNulls);\n      }\n      catch (IOException e)\n      {\n          throw new RuntimeException(e.getMessage(), e);\n      }\n      return writer.toString();\n  }\n```\n\nOriginal issue reported on code.google.com by `james.w....@gmail.com` on 7 Aug 2009 at 6:22", "```\nFixed in r434 by creating new APIs toJson(JsonElement) and toJson(JsonElement,\nAppendable)\n```\n\nOriginal comment by `inder123` on 7 Aug 2009 at 8:59\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ```\nHey thanks heaps for that :-)\n```\n\nOriginal comment by `james.w....@gmail.com` on 8 Aug 2009 at 3:13\n =||= ```\nHey thanks heaps for that :-)\n```\n\nOriginal comment by `james.w....@gmail.com` on 8 Aug 2009 at 3:20\n =||= ", 0], ["142", "Deserialization/Serialization issue when json is injected via spring annotations", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:40 PM", "```\nWhat steps will reproduce the problem?\n\n1. Create the following java object\n\npublic class Search {\n\n    private String accountNumber = \"\";\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n    public String getConfirmationNumber() {\n        return confirmationNumber;\n    }\n    public void setConfirmationNumber(String confirmationNumber) {\n        this.confirmationNumber = confirmationNumber;\n    }\n    public String getBankNumber() {\n        return bankNumber;\n    }\n    public void setBankNumber(String bankNumber) {\n        this.bankNumber = bankNumber;\n    }\n    private String confirmationNumber = \"\";\n    private String bankNumber = \"\";\n\n\n}\n\n\n2. Create a controller class in Spring and add this method\n\n\n\n@Controller(\"transactionController\")\n@RequestMapping(\"/transaction/*.jspx\")\npublic class TransactionController {\n\n     @RequestMapping(value = \"lookup.jspx\",\n              method = { RequestMethod.GET, RequestMethod.POST })\n    public ModelAndView lookup(@RequestParam(\"json\") String json) throws \nException {\n\n        String jsonString = \"\";\n\n\n        try {\n\n\n     Gson gson = new Gson();\n     System.out.println(json); //JSON prints fine here\n         Search ns = gson.fromJson(jsonString, Search.class); //runtime \nError occurs here, everytime\n\n   Replace the above code to this and it works fine.\n\n            JsonElement element = new JsonParser().parse(json);\n            gson.fromJson(element , Search.class);\n\n\n}\n\n3. Create a Junit test method inside another class. Run this test method.\n\n\n    @SpringBeanByName\n    public TransactionController transactionController;\n\n\n    @Test\n    public void testThis() throws Exception{\n\n\n        Gson gson = new Gson();\n        Search search = new Search();\n        search.setAccountNumber(\"5794749\");\n        String json = gson.toJson(search);\n        transactionController.lookup(json);\n     }\n\n\n\n\n\n4. You get this error \n\n{\"accountNumber\":\"5794749\",\"confirmationNumber\":\"\",\"bankNumber\":\"\"}\n05:56:00,288 ERROR \n[com.bbvacompass.webpromises.web.spring.mvc.TransactionController]  Failed \nto generate JSON!\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@51165116 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:57)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n    at \ncom.bbvacompass.webpromises.web.spring.mvc.TransactionController.lookup\n(TransactionController.java:100)\n\n\n5. If you write a simple test, it works fine. \n\n\n\n    @Test\n    public void testJSONSearch(){\n\n        Search search = new Search();\n        search.setAccountNumber(\"123456\");\n        Gson gson = new Gson();\n        String json = gson.toJson(search);\n        search = gson.fromJson(json, Search.class);\n\n    }\n\n\n\nWhat is the expected output? What do you see instead?\n\nYou should get the object back either way\n\n\nWhat version of the product are you using? On what operating system?\n\n\nGson 1.3 on an IBM 1.6 JVM, but I believe that if you follow the exact \nsteps above and inject the value of json, it will bomb using the fromJson\n(String, Object) method. The fromJson(Jsonelement, class) works fine.\n\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 7 Aug 2009 at 11:07", "```\nThis is a parser error so I wonder if your incoming JSON string is complete \n(although it seems to print fine). Can \nyou try adding a blank space at the end and see if that works (that shouldn't \nactually make any difference, I am \njust trying a shot in the  dark). \n\nCan you debug this further (debug through parser and see what is going on)? We \ndo not have the setup or \nexpertise to use Spring, so we need someone else to narrow down the problem. \nThanks.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 5:32\n =||= ```\nKeeping it open for a bit longer for further input, but deferring it for a \nfuture release.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 5:55\n- Added labels: **Milestone-Release1.5**\n =||= ```\nI'm a bit confused here.\n\nIn your example you have the following:\n\nString jsonString = \"\";\ntry {\n  Gson gson = new Gson();\n  System.out.println(json); //JSON prints fine here\n  Search ns = gson.fromJson(jsonString, Search.class);\n  ...\n} catch (SomeException e) { ... }\n\n\n-------------\n\nShouldn't the parameter into the gson.fromJson(...) method be the \"json\" \nvariable not\n\"jsonString\"?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 10 Oct 2009 at 12:17\n =||= ```\nYes, you are correct. My apologies. This was a project I didn't have access to\nanymore and I went back and wrote something to test and it works. This should be\nclosed as Not a Bug.\n```\n\nOriginal comment by `chrislha...@gmail.com` on 10 Oct 2009 at 1:21\n =||= Original comment by `inder123` on 10 Oct 2009 at 6:06\n- Changed state: **Invalid**\n =||= nice =||= ", 0], ["143", "Set formatting style in pretty printing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:41 PM", "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/b03c165bfd1f6ce4\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 7 Aug 2009 at 8:32", "Original comment by `inder123` on 7 Aug 2009 at 10:48\n- Changed state: **Duplicate**\n =||= ", 0], ["144", "suggestion: Add @Verification annotation for easy verification of POJO validity", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:42 PM", "```\nA POJO can have a no-parameter, void return type method throwing a \nJsonParseException \nannotated with @Verification.  \n\nIf present, this will be called on the object after its fields have been \npopulated.  If it determines a \nproblem, it may throw a JsonParseException and the de-serialization will fail.\n\nThe motivation is to make it easier to add additional constraints on the \nvalidity of JSON objects, \nsuch as requiring that one, but not both, of two fields contain values.\n```\n\nOriginal issue reported on code.google.com by `ian.clarke` on 7 Aug 2009 at 11:16\n- Merged into: #315", "```\nSeems like there is a general need for a hook for invocation after create. How \nabout if we create a @PostCreate \nannotation that you apply to a method. Gson will invoke this method after \ndeserializing an object. Will that work \nfor your use-case?\n```\n\nOriginal comment by `inder123` on 18 Aug 2009 at 5:48\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nYes, provided it can throw a JsonParseException or otherwise indicate that the \nobject is unsuitable (eg. required \nfields are missing).\n```\n\nOriginal comment by `ian.clarke` on 18 Aug 2009 at 5:50\n =||= ```\nWe could not settle on a design of PostCreate so deferring it to a future \nrelease.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 5:56\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:33\n- Removed labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:28\n- Added labels: **Milestone-Undefined**\n =||= ```\nThis is essentially a subset of the features requested in issue 315.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:52\n- Changed state: **Duplicate**\n =||= ", 0], ["145", "compilation via maven fails due to generics bug in javac", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:43 PM", "```\nThe following javac error occurs when trying to compile gson using Maven.\n(this probably was not caught since Googlers use Eclipse)\n\n[INFO] Compilation failure\n/home/jdumay/code/google/gson/trunk/gson/src/main/java/com/google/gson/Gson.java\n:[446,23]\ntype parameters of <T>T cannot be determined; no unique maximal instance\nexists for type variable T with upper bounds T,java.lang.Object\n\nAnd its a bug in javac!\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954\n\nAttached is a patch that works around this problem.\n\n\n```\n\nOriginal issue reported on code.google.com by `james.w....@gmail.com` on 8 Aug 2009 at 3:34\n\nAttachments:\n- [compile-fix.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-145/comment-0/compile-fix.patch)", "Original comment by `inder123` on 23 Sep 2009 at 5:47\n- Changed state: **Duplicate**\n =||= ", 0], ["146", "Gson needs a more obust inclusion and exclusion mechanism", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:44 PM", "```\n\nGson has the ability to mark a method as exposed with @Expose, but another\nmode would be more useful. The ability to mark a class, so that all methods\nwill be exposed and putting a @Conceal annotation maybe on the methods you\ndon't want to expose. I am running into an issue where I have Hibernate\nobjects that are being handed to Gson and I have properties that are lazy\nloaded and Gson will try to load them if I don't mark them as transient\nmembers. I don't want these fields to be transient and I don't want to have\nto write a wrapper layer for my POJOs. I also think it is a bit of a kludge\nto have to mark all of my methods as @Expose that I want to expose. I'd\nrather say all methods are exposed, except ...\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 13 Aug 2009 at 12:14", "```\nYou can use parameters in Expose to get the effect of conceal. \n\n@Expose(serialize=false, deserialize=false)\n```\n\nOriginal comment by `inder123` on 13 Aug 2009 at 2:22\n =||= ```\nI'm using Gson 1.3 and the @Expose annotation has no properties at all.\n```\n\nOriginal comment by `chrislha...@gmail.com` on 13 Aug 2009 at 2:55\n =||= ```\nAh ok, this is going to be included in Gson 1.4 release.\n```\n\nOriginal comment by `inder123` on 13 Aug 2009 at 4:38\n =||= ```\nAs noted above, this is fixed in Gson 1.4\n```\n\nOriginal comment by `inder123` on 18 Aug 2009 at 5:42\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["147", "JsonPrimitive.equals() should work with BigInteger and BigDecimal", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:45 PM", "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/f6be51f5c5cf7168?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 19 Aug 2009 at 9:15", "```\nThis issue was closed by revision r447.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 6:54\n- Changed state: **Fixed**\n =||= ```\nFixed in r447\n\nIntegral values (byte, short, integer, long, BigInteger) are now comparable to \neach other.\nFloating point values (float, double, BigDecimal) are now comparable to each \nother.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 6:54\n =||= ", 0], ["148", "Few serialization strategies for same type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:46 PM", "```\nI want to be able to serialize same object to different Json representations. \nExample:\n\npublic class Some {\nprivate String field;\nprivate String filed2;\nprivate String filed3;\n}\n\nI want to have a way to get JSON with field and field2, but also I want to \ncreate JSON with field and field3. \nI think, annotation @Mode({string}) could help.\n```\n\nOriginal issue reported on code.google.com by `yura.ta...@gmail.com` on 20 Aug 2009 at 2:52", "```\nCan you write a custom serializer that does what you want? \n```\n\nOriginal comment by `inder123` on 1 Sep 2009 at 9:59\n =||= ```\nI am not sure how the @Mode annotation is supposed to work besides you can do \nthe same with a custom \nserializer. I am closing this bug but feel free to reopen it with more details \nand compelling example use-cases. \n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 5:26\n- Changed state: **WontFix**\n =||= ", 0], ["149", "how to generate a Primitive json from a String?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:47 PM", "```\nI use 1.3 version, I don't know whether my problem, how will a json \nrequest directly format string directly into the client executable json \nrequest directly? For example:\nMap<String,Object> map = new HashMap<String,Object>();\nmap.put(\"abc\",\"abc\");\nmap.put(\"data\",\"[['1','a'],['2','b']]\");\n\nI hope generates code: {\" ABC \":\" ABC \", \"data\" : [[' 1 ', 'a'], [' \n2 ', 'b']], \nbut not\uff0cI get:\n{\"abc\":\"abc\",\"data\":\"[['1','a'],['2','b']]\"}. Normally, we do not know \nwhat type of data format, here is String[][], to change how I get the \nresult?\n```\n\nOriginal issue reported on code.google.com by `wu.ar...@gmail.com` on 21 Aug 2009 at 1:43", "```\nSorry but I do not understand this bug. Are you saying that you would like the \ntype\ninformation carried over to the client? That is not possible through any \nin-build\nJson schemes. However, you can attach extra string properties for the values \nthat\ncontain a hint for the type. \n```\n\nOriginal comment by `inder123` on 24 Aug 2009 at 5:26\n =||= ```\nPlease provide further information if you want us to keep this bug open. In any \ncase, I am deferring it to a future \nrelease.\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 5:57\n- Added labels: **Milestone-Release1.5**\n =||= ```\nThis is clearly not a bug, the reporter is expecting some very bizarre \nbehaviour.\n\nI suppose, if he put something like:\n\nmap.put(\"data\", new String[][] { {\"1\",\"a\"},{\"2\",\"b\"} });\n\nand that will serialize to this: {\"abc\":\"abc\",\"data\":[[\"1\",\"a\"],[\"2\",\"b\"]]}\n\nWhich is good.\n```\n\nOriginal comment by `apri...@gmail.com` on 22 Mar 2010 at 10:51\n =||= Original comment by `limpbizkit` on 28 Aug 2010 at 5:43\n- Changed state: **Invalid**\n =||= ", 0], ["150", "gson1.4 can't use in spring dm", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:49 PM", "```\n i download 1.4 source and build it to jar.then i put it into spring dm's\npickup dictionary ,after i start up spring dm ,got a error :\n\nsource.kernel.deployer.core.internal.StandardApplicationDeployer E\n<SPDE0018E> Unable to install application from location\n'file:/D:/spring_DM/dm-server-2.0.0.M3/pickup/gson-1.4.jar'. Could not\nsatisfy constraints for bundle 'com.google.gson' at version '1.4.0'. Cannot\nresolve: com.google.gson\n    Resolver report:\n        Missing constraint: <null> in bundle <com.google.gson_1.4.0>\n\nso i use spring budle tool(it have a maven plugin) to build a osgi bundle\nof gson!\n\n\n\n```\n\nOriginal issue reported on code.google.com by `1982hong...@gmail.com` on 23 Aug 2009 at 8:28", "```\nFixed in r439\n\nPlease verify the fix and update this bug with the results. Thanks.\n```\n\nOriginal comment by `inder123` on 24 Aug 2009 at 5:23\n- Changed state: **Fixed**\n =||= ", 0], ["151", "WARN log level to high for message about overriding type handlers", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:50 PM", "```\nWhat steps will reproduce the problem?\n1. Create a GSON object: new GsonBuilder().create(); \n2. Retrotranslate the byte code to jdk 1.4, using Retrotranslator \nhttp://retrotranslator.sourceforge.net/\n3. Run the code.\n\nWhat is the expected output? What do you see instead?\n\nI would expect no WARNINGs to be logged. However, I see the following output to \nthe console:\n\ncom.google.gson.ParameterizedTypeHandlerMap register\nWARNING: Overriding the existing type handler for interface java.util.Collection\n\nWhat version of the product are you using? On what operating system?\n1.3 and also tested with 1.4 built from trunk.\n\nPlease provide any additional information below.\n\nThis log message comes from the following line of code:\nhttp://code.google.com/p/google-\ngson/source/browse/trunk/gson/src/main/java/com/google/gson/ParameterizedTypeHan\ndlerM\nap.java#49\n\n\nSpecifically, it is logged because the \nDefaultTypeAdapters.createDefaultInstanceCreators method \nadds a COLLECTION_TYPE_HANDLER for Collection.class, and then later, a \nQueue.class. \nBecause Queue.class is @since 1.5, retrotranslator replaces the class literal \n\"java.util.Queue\", with \n\"java.util.Collection\". This causes the Queue type handler to overwrite the \nCollection type \nhandler.\n\n    map.register(Map.class, MAP_TYPE_ADAPTER);\n\n    // Add Collection type instance creators\n    map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n    map.register(List.class, COLLECTION_TYPE_ADAPTER);\n    map.register(Queue.class, COLLECTION_TYPE_ADAPTER);\n\n\nI'm not sure that a WARNING is needed here, since both Collection and Queue \nhave the same \nCollection type handlers. \n\nEither the WARNING could be removed, or there could be some smarter registering \nof type \nhandlers so that the Queue class automatically gets the COLLECTION_TYPE_HANDLER.\n```\n\nOriginal issue reported on code.google.com by `npel...@gmail.com` on 27 Aug 2009 at 1:17", "```\nWe log it as a WARNING because we want to make sure that the user is not\n\"accidentally\" overriding one of the default type adapters.  We are using the \nJDK\nlogger, so it is possible for you to disable all logging coming from the Gson \nlibrary\nby adding the following line to your logging properties file:\n\n# Turn off all Gson logging.\ncom.google.gson.level = OFF\n\n\nOr you can turn off all JDK logging with:\n# Disable all logging\n.level = OFF\n\n\n-----------------\n\nOn a side note, would you be able to post the instructions on how you \nretrotranslated\nthe Gson library to run on a Java 1.4 VM?\n\nThanks,\nJoel\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 5:30\n- Changed state: **WontFix**\n =||= ```\nHI Joel, \n\nThanks for the update.\n\nI worked around this by telling retrotranslator to keep class literals. The \nconfiguration for the retrotranslator Ant task is as follows:\n\n<retrotranslator target=\"1.4\"\n                             destjar=\"${destjar}\" srcjar=\"${srcjar}\"\n                             smart=\"true\" verify=\"false\" failonwarning=\"true\" keepclasslit=\"true\">\n                <classpath>\n                     ....\n                </classpath>\n</retrotranslator>\n\nHowever, IMO - that logging should be at DEBUG level by default, because it is \na programmer error, and not a user error.\nThe programmer should ensure the program functions correctly by writing tests, \netc before shipping to the customer, rather than use log \nmessages from the library to detect possible errors. Or, the library should \nfail hard and fast if an error really exists.\n\nIn my case - everything worked fine, and that log message was still being \noutput as WARN.\n\nCheers,\nNick\n```\n\nOriginal comment by `npel...@gmail.com` on 29 Sep 2009 at 10:20\n =||= ```\nI noticed this is marked won't fix. I just spent some time figuring out why our \nlogs are bloated with this particular message and found my way here. From my \npoint of view this is indeed debug level information. In general, libraries \nshould be very conservative with logging above debug level IMHO.\n\nAnyway, am I actually doing something wrong here? I was under the impression I \nwas using a (well) supported feature of GSon when I implemented a handful of \ncustom serializers and deserializers.\n```\n\nOriginal comment by `jillesva...@gmail.com` on 10 Dec 2010 at 2:02\n =||= By code:\n\n```\nprivate static void logfixInit() {\n    {\n        // com.google.gson.level = OFF\n        try {\n            String newLoggingProperties // this is a copy of the original one +\n                    = \"handlers= java.util.logging.ConsoleHandler\\n\"\n                    + \".level= INFO\\n\"\n                    + \"rectory.\\n\"\n                    + \"java.util.logging.FileHandler.pattern = %h/java%u.log\\n\"\n                    + \"java.util.logging.FileHandler.limit = 50000\\n\"\n                    + \"java.util.logging.FileHandler.count = 1\\n\"\n                    + \"java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\\n\"\n                    + \"java.util.logging.ConsoleHandler.level = INFO\\n\"\n                    + \"java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\\n\"\n                    + \"com.google.gson.level = OFF\\n\" // changed to disable gson as per https://github.com/google/gson/issues/151\n                    // + \"com.xyz.foo.level = SEVERE\\n\"\n                    ;\n            LogManager logManager = LogManager.getLogManager();\n            logManager.readConfiguration(new ByteArrayInputStream(newLoggingProperties.getBytes()));\n        } catch (Exception e) {\n            // log error\n        }\n    }\n}\n```\n =||= ", 0], ["152", "Minor javadoc documentation issue in com.google.gson.Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:54 PM", "```\nThe Javadoc documentation for the class is eating some < characters:\n Type listType = new TypeToken>() {}.getType();\n List target = new LinkedList();\n...\n List target2 = gson.fromJson(json, listType);\n\n\nIt should be:\n Type listType = new TypeToken<List<String>>() {}.getType();\n List<String> target = new LinkedList<String>();\n...\n List<String> target2 = gson.fromJson(json, listType);\n\n```\n\nOriginal issue reported on code.google.com by `australi...@gmail.com` on 2 Sep 2009 at 2:22", "```\nThanks for catching this.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:11\n- Changed state: **Fixed**\n =||= ", 0], ["153", "setPrettyPrinting cause missing comma deliminator after an empty map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:55 PM", "```\nif Gson instance is obtained from GsonBuilder with pretty print \n        GsonBuilder builder = new GsonBuilder();\n        builder.setPrettyPrinting();\n        Gson gson = builder.create();        \nit would produce un-parseable json string if the object contains an empty map\nexample:\n{\"viewsStale\":true,\"fireAllRules\":0,\"formRules\":[],\"dcs\":[{\"accountId\":1,\n      \"createdBy\":\"\",\"name\":\"dc1\",\"m_segmentGroup\":{\"accountId\":1,\n        \"nextRuleId\":0,\"name\":\"dc1\",\"createdBy\":\"\",\"rules\":{}\"description\":\n        \"desc\"},\"m_dcmTexts\":{}}],\"dispatchableName\":\"disp1\",\"typeCode\":-1,\n  \"subType\":\"GENERIC\",\"name\":\"disp1\",\"status\":\"A\"}\n\nnotice missing comma here (\"rules\":{}\"description\":)\n\ncorrect output without pretty print\n{\"viewsStale\":true,\"fireAllRules\":0,\"formRules\":[],\"dcs\":[{\"accountId\":1,\"create\ndBy\":\"\",\"name\":\"dc1\",\"m_segmentGroup\":{\"accountId\":1,\"nextRuleId\":0,\"name\":\"dc1\"\n,\"createdBy\":\"\",\"rules\":{},\"description\":\"desc\"},\"m_dcmTexts\":{}}],\"dispatchable\nName\":\"disp1\",\"typeCode\":-1,\"subType\":\"GENERIC\",\"name\":\"disp1\",\"status\":\"A\"}\n\nWhat version of the product are you using? On what operating system?\nlatest product. java: 1.6, os: xp\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jackwum...@gmail.com` on 2 Sep 2009 at 9:13", "```\nFixed in r454\n```\n\nOriginal comment by `inder123` on 29 Sep 2009 at 5:53\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["154", "how to convert JsonObject to JSONString()?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:55 PM", "```\ncall JsonObject.toString()  result is not a realy JSONString\nbecause some char is not quoted!!!\nGson gson = new Gson();\nJsonParser p = new JsonParser();\n\nJsonElement r = p.parse(\"{\\\"text\\\":\\\"good\\\\n after\\\\nnoom\\\"}\");\nJsonObject ob = r.getAsJsonObject();\n\nr.toString() \\\\ espect {\"text\":\"good\\\\n after\\\\nnoom\\\"} but {\"text\":\"good\nafter\nnoom\\\"}\n\n```\n\nOriginal issue reported on code.google.com by `lxb...@gmail.com` on 9 Sep 2009 at 9:56", "```\nIssue 157 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:27\n =||= ```\nI will create a change to fix this to at least use the basic escaping according \nto\nthe JSON spec.\n\nSince the Gson object can be configured to do extra escaping (i.e. HTML, JS, \netc.),\nyou can always use the following method to generate valid JSON from some \nJsonElement\nobject:\n{@link Gson#toJson(JsonElement)}\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:31\n- Changed state: **Accepted**\n =||= ```\nFix submitted with r446.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:28\n- Changed state: **Fixed**\n =||= ```\nIssue 107 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:49\n =||= ", 0], ["155", "An Object[] field should be serialized per the actual object types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:57 PM", "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/e4df79a0d0dc8959?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Sep 2009 at 4:40", "```\nFixed in r442.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:12\n- Changed state: **Fixed**\n =||= ```\nNot sure this is completely fixed in the 1.4 version I downloaded from the \nwebsite. \n\nSuppose I have a class Message with a simple 'id':\n\n    public class Message {\n        public String messageId;\n    }\n\nand a subclass TextMessage which adds a 'text' field.  \n\n    public class TextMessage extends Message {\n        public String text;\n    }\n\nLastly I create a MessageBox class that contains a List<Message> (not \nTextMessage) \ncalled 'messages':\n\n    public class MessageBox {\n        public List<Message> messages;\n    }\n\nIf I create an instance of MessageBox (called mbox) and populate it's list of \nMessages with TextMessages, then I get the following behaviour:\n\n    gson.toJson(mbox.messages) // serialise the collection directly...\n    [{\"text\":\"Hello World!\",\"messageId\":\"t1\"},\n     {\"text\":\"Hello World!\",\"messageId\":\"t2\"}]\n\n    gson.toJson(mbox) // serialise the containing MessageBox object...\n    {\"messages\":[{\"messageId\":\"t1\"},{\"messageId\":\"t2\"}]}\n\nIn the seconds example simply containing the List in a parent class has \nreverted back \nto the behaviour of serialising based on the parent class. \n\nFinally, if I switch the declaration of mbox.messages from List<Message> to \nList<Object>, it all works as expected:\n\n    {\"messages\":[{\"text\":\"Hello World!\",\"messageId\":\"t1\"},\n                 {\"text\":\"Hello World!\",\"messageId\":\"t2\"}]}\n\n```\n\nOriginal comment by `charles%...@gtempaccount.com` on 3 Jun 2010 at 5:45\n =||= ", 0], ["156", "Gson should convert use the actual type of a field while serializing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:57 PM", "```\nSee discussion at: \nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/937ca75af0c6869f\n```\n\nOriginal issue reported on code.google.com by `inder123` on 18 Sep 2009 at 8:11", "```\nThis issue was closed by revision r453.\n```\n\nOriginal comment by `inder123` on 25 Sep 2009 at 7:54\n- Changed state: **Fixed**\n =||= Original comment by `inder123` on 25 Sep 2009 at 7:55\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["157", "Newlines not converted to json properly in JsonObject.toString()", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:58 PM", "```\nWhat steps will reproduce the problem?\n\n\nJsonObject obj = new JsonObject();\nobj.addProperty(\"someProp\", \"multiline\\nstring\");\nSystem.out.println(obj.toString());\n\nWhat is the expected output? What do you see instead?\n\nExpected Output: \n\n{\"someProp\":\"multiline\\nstring\"}\n\nObserved Output:\n\n{\"someProp\":\"multiline\nstring\"}\n\nWhat version of the product are you using? On what operating system?\nGson 1.3\nWindows Vista\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `vish.ram...@gmail.com` on 19 Sep 2009 at 1:48", "```\nYou should not expect valid JSON here.  Since the Gson object can be configured \nwith\ndifferent escaping strategies, we recommend that you use the following function \ninstead:\n{@link Gson#toJson(JsonElement)}\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:27\n- Changed state: **Duplicate**\n =||= ", 0], ["158", "gson doesn't build on Java 6", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:24:59 PM", "```\nWhen building gson using Java 6, I get the following error.\n\n  .../gson-trunk/gson/src/main/java/com/google/gson/Gson.java:[446,23]\n  type parameters of <T>T cannot be determined; no unique maximal instance\n  exists for type variable T with upper bounds T,java.lang.Object\n\nI can confirm this when using Sun's JDK, versions 6u12 through 6u16, but I\nsuspect that the error happens with all of Sun's Java 6 JDKs.\n\nI've attached a patch that fixes the issue.\n\n```\n\nOriginal issue reported on code.google.com by `tim.molo...@gmail.com` on 23 Sep 2009 at 2:03\n\nAttachments:\n- [Gson.fromJson-addCast.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-158/comment-0/Gson.fromJson-addCast.patch)", "```\nOh, since it's such a trivial change, can it be included in the gson 1.4 \nrelease that\nI hear could happen before the end of the month?  Thanks.\n```\n\nOriginal comment by `tim.molo...@gmail.com` on 23 Sep 2009 at 2:04\n =||= ```\nThis issue was closed by revision r444.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 5:17\n- Changed state: **Fixed**\n =||= ```\nFixed in r444 \nThe problem arises because of the incompatible way JDK 1.5 and JDK 1.6 handle \ncasting to type variables. One of \nthem throws a warning if you cast, the other one throws a compilation error if \nyou dont. \n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 5:22\n =||= ```\nIssue 145 has been merged into this issue.\n```\n\nOriginal comment by `inder123` on 23 Sep 2009 at 5:47\n =||= ", 0], ["159", "How to serialize single-level simple arrays", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:00 PM", "```\nI've currently used net.sf.json and flexjson and was hoping google-gson \nwas as easy to use. Is it really necessary to write a custom serializer to \noutput a simple JsonArry as follows?\n\n[{\"xxx\",\"yyy\",\"zzz\"},{\"111\",\"222\",\"333\"}]\n\nWhat am I missing...a code snippet would be appreciated. \n```\n\nOriginal issue reported on code.google.com by `quin.h.m...@boeing.com` on 24 Sep 2009 at 6:33", "```\nThis is not a bug, please post such comments on the Gson discussion group where \nthey can be answered \nbest. The discussion group is at: http://groups.google.com/group/google-gson \n\nPlease move any further response to the group after cutting and pasting from \nthis issue. Thanks.\n\nIt is not clear to me what you are outputting from? Is it an Array (or \ncollection) of objects? If so, Gson can \neasily convert it to what you want. No need to write a custom serializer.\n\nClass Element {\n  String a, b, c;\n}\n\nElement[] array = new Element[] { new Element(\"xxx\", \"yyy\", \"zzz\"}, new \nElement(\"111\", \"222\", \"333\"); };\n\nGson.toJson(array); will output what you want.\n\n```\n\nOriginal comment by `inder123` on 24 Sep 2009 at 9:11\n- Changed state: **Invalid**\n =||= ", 0], ["160", "JsonParseExceptions (or specialized sub-classes) should provide more specific info", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:01 PM", "```\nJsonParseException contains only the usual message and cause. What I am \nspecifically looking for is separate properties outlining details of what \nwent wrong when parsing a value. Specifically, the field name (if it was a \nfield), and target and actual data based on what went wrong. If the type \nwas wrong, show target and actual type (string vs. boolean vs. BigDecimal, \netc.). Perhaps a specific format is required, then I would want the text \nposition where the actual value diverges.\n\nThe JPE message do typically contain this information. The problem is that \nthey often contain information appropriate to a consumer over HTTP. Most \noften it's the name of the target Java class. With the bits of information \nprovided separately on the exception, I could construct a more appropriate \nerror message.\n\nSo, e.g., instead of:\n\nThe JsonDeserializer BigDecimalTypeAdapter failed to deserialized json \nobject \"abcde\" given the type class java.math.BigDecimal\n\nI would send to the client:\n\nFor field X: expected a decimal number and instead got a string\n\nWhich would be more friendly to non-java consumers of my json\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:08\n- Merged into: #395", "```\nI agree with the goal but it is not as straightforward in the current design. \nAt the \npoint where the exception is thrown, we are not in the context of the parent, \nwe are \nin the context of the object being deserialized. However, we will see what can \nbe done \nabout this in a future release.\n```\n\nOriginal comment by `inder123` on 25 Sep 2009 at 5:31\n =||= Original comment by `inder123` on 25 Sep 2009 at 5:34\n- Added labels: **Milestone-Release1.5**\n =||= Original comment by `inder123` on 1 Nov 2010 at 11:24\n- Removed labels: **Milestone-Release1.5**\n =||= ```\nLet's finally get this done!\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 6:03\n- Changed state: **Duplicate**\n =||= ", 0], ["161", "BigDecimalTypeAdapter accepts invalid input when parsed alone", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:03 PM", "```\nnew Gson().fromJson(\"12345X67890\", BigDecimal.class) yields a BigDecimal \nrepresenting the number 12345. From the code it appears that \nBigDecimalTypeAdapter merely delegates parsing the String to BigDecimal \nitself, so the bug (or documented allowance) is there. However, this does \nnot appear to be valid json, and in the context of json parsing an \nexception should be thrown. It would appear the type adapter needs to \nenforce a format on the input before constructing the BD.\n\nFunny enough, it only passes in this situation. In these other three \nsituations, an exception *does* occur:\n\n1. Quoted String is given as input: new Gson().fromJson(\"\\\"12345X67890\\\"\", \nBigDecimal.class)\n2. Value is a field on an object, quoted : new \nGson().fromJson(\"{\\\"price\\\":\\\"12345X67890\\\"}\", StockQuote.class)\n3. Value is a field on an object, unquoted: new \nGson().fromJson(\"{\\\"price\\\":12345X67890}\", StockQuote.class)\n\nI don't get why this matters, since the same adapter, using the same code I \ncan see is used each time... perhaps it's late and I'm missing something.\n\nGson version is 1.3.\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:22", "```\nErr, sorry. Case #3 gives an error different from the first two. Doesn't even \nmake it \nto the BigDecimalTypeAdapter, which is what I would expect in the original \ninput that \nis allowed. Here are the exception messages by situation:\n\n1. The JsonDeserializer BigDecimalTypeAdapter failed to deserialized json \nobject \n\"12345X67890\" given the type class java.math.BigDecimal\n2. The JsonDeserializer BigDecimalTypeAdapter failed to deserialized json \nobject \n\"12345X67890\" given the type class java.math.BigDecimal\n3. Failed parsing JSON source: java.io.StringReader@7f2a3793 to Json\n```\n\nOriginal comment by `estebis...@gmail.com` on 25 Sep 2009 at 3:26\n =||= ```\nThis is how the Gson's JSON parser works. In the first case, the lexical \nanalyzer \ntreats 12345 as one token and the remaining part as another. Your fromJson call \nreturns fine because Gson doesn't look at the input beyond what it needs. Your \nother \nmethods fail because they force Gson to look beyond the first token.\n```\n\nOriginal comment by `inder123` on 25 Sep 2009 at 5:29\n- Changed state: **Invalid**\n =||= ```\nSo it's a documented feature of Gson's JSON parser that gargage is ignored in \nthe \nstream? Seems like the overall JSON stream should fail, as this isn't valid \nJSON when \nviewed altogether.\n```\n\nOriginal comment by `estebis...@gmail.com` on 25 Sep 2009 at 6:31\n =||= ```\ns/gargage/garbage/\n\nbleh\n```\n\nOriginal comment by `estebis...@gmail.com` on 25 Sep 2009 at 6:32\n =||= ", 0], ["162", "Thread issues with date formatter", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:04 PM", "```\nWhat steps will reproduce the problem?\n1.  Run high levels of threads which do date serialization\n2.  DefaultDateTypeAdapter uses SimpleDateFormat statically\n3.  See lots of exceptions on random occasions\n\nWhat is the expected output? What do you see instead?\n\nExpect date serialization to work!\n public JsonElement serialize(Date src, Type typeOfSrc,\nJsonSerializationContext context) {\n      String dateFormatAsString = format.format(src);\n      return new JsonPrimitive(dateFormatAsString);\n    }\nChanging the constructor to:\n public DefaultDateTypeAdapter(final String datePattern) {\n      this.format = new ThreadLocal<DateFormat>() {\n        protected DateFormat initialValue() {\n                   new SimpleDateFormat(datePattern);\n                };\n    }\n\n  public JsonElement serialize(Date src, Type typeOfSrc,\nJsonSerializationContext context) {\n      String dateFormatAsString = format.get().format(src);\n      return new JsonPrimitive(dateFormatAsString);\n    }\n\n  public Date deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n      }\n\n      try {\n        return format.get().parse(json.getAsString());\n      } catch (ParseException e) {\n        throw new JsonParseException(e);\n      }\n    }\n\n\nWould be a simple fix.\n\n\nWhat version of the product are you using? On what operating system?\n\nLatest GSON release.  Issue is using the date formatter statically, as\nSimpleDateFormat isn't thread safe, so you'll get random results with the\ndate format.  It will also randomly throw exceptions.  See stack trace below.\n\nPlease provide any additional information below.\n\njava.lang.ArrayIndexOutOfBoundsException: -28   at\nsun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:43\n6)\nat\njava.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081)  at\njava.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996)  at\njava.util.Calendar.setTimeInMillis(Calendar.java:1066)  at\njava.util.Calendar.setTime(Calendar.java:1032)  at\njava.text.SimpleDateFormat.format(SimpleDateFormat.java:785)    at\njava.text.SimpleDateFormat.format(SimpleDateFormat.java:778)    at\njava.text.DateFormat.format(DateFormat.java:314)    at\ncom.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.serialize(DefaultType\nAdapters.java:254)\nat \n```\n\nOriginal issue reported on code.google.com by `mcinto...@gmail.com` on 25 Sep 2009 at 4:12", "```\nGood catch. We chose to instead just synchronize the serialize and deserialize \nmethods. See r452\n```\n\nOriginal comment by `inder123` on 25 Sep 2009 at 5:15\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= Original comment by `inder123` on 25 Sep 2009 at 5:15\n =||= ```\nNote, the synchronization will fix the threading issues, but there is a \nperformance\ncost of that versus thread local variables.  In high performance/highly threaded\nenvironments, using SimpleDateFormat has a cost.  Because of the way it's\nimplemented, with regular expressions, when you're running a lot of threads \nthere is\ndefinitely a potential for blocking that could be problematic.  I don't have \nany hard\nand fast numbers at the moment, but it might be worth while to run some \nprofiling\nwith at least 16 threads to make sure there aren't any performance issues.\n```\n\nOriginal comment by `mcinto...@gmail.com` on 28 Sep 2009 at 5:05\n =||= ```\nYes, we thought about the performance issues regarding synchronization. \nHowever, the synchronization is \nspecific to the default DateTypeAdapter so the impact will be if you have lots \nof dates getting serialized at the \nsame time. That shouldn't be a problem in real world situations in my opinion. \nIf you have a situation where this \nis a concern, please reopen the bug and provide details and we will take \nanother look.\n```\n\nOriginal comment by `inder123` on 28 Sep 2009 at 3:11\n =||= We have too many Thread blocked at below line due to synchronized keyword. \ncom.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.serialize(java:265) \n\nWe have heavy usage of date format in gson.\n =||= @ilyassoomro you can probably install a custom date adapter that uses separate `SimpleDateFormat` instances per-thread rather than shared ones.\n =||= Also - this adapter might not be of the exact format you want, but it's threadsafe & doesn't use synchronized.\nhttps://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n =||= The perfomance hit might be an issue for us so we resorted to using an overrride by using our own Serde for `util.date` and `sql.date`.\r\n\r\nUses FastDateFormat instead of SimpleDateFormat to ensure you dont take a performance hit due to serial usage (synchronize write and read)\r\n\r\nHave added some sample code in [github gist](https://gist.github.com/aarengee/e3ea670f64497b9140358a7db8077a24). =||= ", 0], ["163", "Add @PreSerialize annotation", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:06 PM", "```\n1.remove unused field value\npublic class User{\nprivate String username;\nprivate String password;\n@PreSerialize\npublic void preSerialize(){\nthis.password = null;\n}\n}\n\n2.set getter's value to field\nbecause gson doesn't support serialize getter method\n\npublic class TreeNode{\nprivate Collection<TreeNode> children;\nprivate boolean hasChildren;\n@PreSerialize\npublic void preSerialize(){\nthis.hasChildren = isHasChildren();\n}\npublic boolean isHasChildren(){\nreturn this.children != null && this.children.size() != 0;\n}\n}\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 2:50", "```\nSorry, but I do not fully understand the requirements for this new PreSerialize\nannotation.\n\nThis could done similar to the PostCreate (Issue #144) or it could be done with \na\nTypeConverter where you can do some special behaviour and than use the\nSerializationContext and serialize this (Issue #43).\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 10 Oct 2009 at 4:17\n =||= ```\nI can't find @PostCreate,I think it's for deserialization not serialization\nTypeConverter need exact class\nregisterTypeAdapter(Foo.class, new FooTypeAdapter()) doesn't works for subclass \nof Foo\nit must be \nregisterTypeAdapter(ChildOfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child2OfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child3OfFoo.class, new \nFooTypeAdapter())....\n\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:40\n =||= ```\nI have a patch,please see \nhttp://code.google.com/p/google-gson/issues/detail?id=164\n```\n\nOriginal comment by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:58\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:29\n- Added labels: **Milestone-Undefined**\n =||= ```\nLet's fix issue 164 instead.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 5:30\n- Changed state: **WontFix**\n =||= ", 0], ["164", "Check parent class for ParameterizedTypeHandlerMap", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:08 PM", "```\nTypeConverter need exact class\n\nregisterTypeAdapter(Foo.class, new FooTypeAdapter()) doesn't works for \nsubclass of Foo\n\nit must be \n\nregisterTypeAdapter(ChildOfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child2OfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child3OfFoo.class, new \nFooTypeAdapter())....\n\nthis patch can solve this problem.\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:57\n\nAttachments:\n- [patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-164/comment-0/patch.txt)", "```\nWe were aware of this issue when we were designing the ParameterizedHandlerMap. \nThe reason that it doesnt \nsupport subclasses is that SubClasses usually contain extra fields, and \napplying a base-class type adapter will \nresult in unintended consequences (since the base class handler may not be \ndesigned to work with the extra \nfields of subclasses). \n\nIn a future release of Gson, we are thinking of providing a way to address \ncommon use-cases around this. For \nexample, we could provide an annotation that is used to determine the type of \nthe object to deserialize into. Or a \nvariant of your suggestion.\n```\n\nOriginal comment by `inder123` on 10 Oct 2009 at 6:11\n =||= ```\nI've been frustrated by this surprising limitation myself, having spent a good \ndeal of time developing a generic EObject (as in Eclipse EMF) type adapter, \nwhich uses Ecore metadata to determine which features to serialize and how.\n\nA related use case relates to serialization of interfaces. The current adapter \nlookup code uses the object class as the key; I would like to be able to \nregister type adapters by interface (such as EObject).\n\nI'd have thought it would have made sense to:\n1. provide a GsonBuilder setting to enable serialization-via-superclass\nand/or\n2. add a JsonSerializer.isAdapterForType(Type) : boolean method so that a \nserializer which matches on superclass/(super)interface can indicate whether it \nwants to handle a given subclass/subinterface.\n\nWithout this flexibility it is hard to define a generalized reusable serializer \n- as things currently stand you must explicitly register such a serializer for \nevery conceivable class it may be required to handle. This is tedious and \ninefficient at best and impossible at worst, since you may not know in advance \nwhat the subclasses are (in my own scenario, unknown generated Ecore packages \nextending known types can be contributed by 3rd party extensions).\n\nI would greatly welcome improvements in this area :-)\n\nThanks,\n\nAdrian Price\nSenior Architect\nTIBCO Software Inc.\n```\n\nOriginal comment by `adrianp....@gtempaccount.com` on 1 Oct 2010 at 12:54\n =||= ```\nThis is related to issue 242, where enums frequently have anonymous subclasses \nthat aren't easily registered in the type adapter map.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:02\n =||= ```\nI think we might want to reconsider this behavior in 1.7.\n\nThe attached patch demonstrates how the current behavior is quite surprising. \nThe core problem is that sometimes we use the type adapter and sometimes we \ndon't. We use it if it's assigned to the static type (such as the field type); \nwe don't use it if we don't have static type information, or if we don't have \nsufficient static type information and we use runtime type information.\n\nI particularly don't like how GSON does different things depending on how much \ntype information it has.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:18\n\nAttachments:\n- [Runtime_TypeAdapters.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-164/comment-4/Runtime_TypeAdapters.patch)\n =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:18\n- Added labels: **Milestone-Release1.7**\n =||= ```\nObsolete by GsonBuilder.registerTypeHierarchyAdapter().\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:20\n- Changed state: **WontFix**\n =||= ```\nIssue 125 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:28\n =||= ", 0], ["165", "Enum constant does not exist", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:11 PM", "```\nThis isn't a bug per say, more of a starting point for a conversation. Our\norganization uses GSON to pass data between two internal applications, both\nrunning in Java. Both applications depend on a particular in-house library,\nbut the receiving end isn't guaranteed to have the same version as the\nsending end. This has caused some problems with our use of enums, when the\nsender has knowledge of enum constants that the receiver does not know\nabout. It might be nice to have a way to optionally silently ignore these\nmis-matches on the receiver. We have a solution that works for us, and are\nsomewhat curious if this is an issue for anyone else out there.\n\n\nWhat steps will reproduce the problem?\n1. Serialize an object that has an enum property to JSON\n2. Deserialize the JSON in another application that does not have that enum\nconstant available\n\n\nWhat is the expected output? What do you see instead?\n\nThat is the big question. In our particular instance, we would just want\nthat enum to be ignored. If the class that has the enum looked like\n\npublic class Something {\nMyEnum a;\n}\n\nAnd MyEnum had \"A\" and \"B\", if the JSON said it should be \"C\", I would want\nthe property \"a\" to be null.\n\nIn another instance in our application, we have a class:\n\npublic class SomethingElse {\nSet<MyEnum> flags;\n}\n\nIf a constant of \"C\" were coming through in JSON, I would expect this set\nto be empty, if the application containing it only knew about A and B.\n\nWhat version of the product are you using? On what operating system?\nAny\n\nPlease provide any additional information below.\n\nWe have overcome the first example by making our own type adapter, based on\nthe built-in one, that looks like:\n\npublic class EnumSafeChangeTypeAdapter<T extends Enum<T>> implements\nJsonSerializer<T>, JsonDeserializer<T> {\n    public JsonElement serialize(T src, Type typeOfSrc,\nJsonSerializationContext context) {\n        return new JsonPrimitive(src.name());\n    }\n\n    // The NULL here needs to be coupled with an instancecreator that returns\n    // null as well. See VzLite for an example of this\n    @SuppressWarnings(\"cast\")\n    public T deserialize(JsonElement json, Type classOfT,\nJsonDeserializationContext context) throws JsonParseException {\n        try {\n            return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());\n        }\n        catch (Exception e) {\n            return null;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return EnumSafeChangeTypeAdapter.class.getSimpleName();\n    }\n}\n\nAlso, we have to register an instance creator to handle the null, otherwise\nwe get other exceptions:\n\nGsonBuilder builder = new GsonBuilder();\nbuilder.registerTypeAdapter(Enum.class, new InstanceCreator<Enum<?>>() {\npublic Enum<?> createInstance(Type type) {\nreturn null;\n}\n});\n```\n\nOriginal issue reported on code.google.com by `danw...@gmail.com` on 12 Oct 2009 at 8:29", "```\nGlad to know that you could register a custom type adapter to address your \nuse-case. \nWe wouldn't like to change the design of Gson to silently ignore invalid Enum \nvalues \nas it may mask real bugs. Some organization prefer the fail-fast approach to \ndetect \nbugs.\n```\n\nOriginal comment by `inder123` on 15 Oct 2009 at 4:10\n =||= ```\nSorry for jumping in a bit late here.  What version of Gson are you running \nthat requires you to register both a custom deserializer and an instance \ncreator.  I know we had that bug a while back, but I thought it was fixed in \nversion 1.3 and later.\n\nIs it possible to use the Gson versioning to protect you from the \nsender/receiver incompatibilities? The common approach for API versioning is \nthat the client will request the API version it would like to use with the \nserver. The server is then able to process and respond to the client without \nbreaking backward compatibility. As new features get added to API calls (or new \nAPI calls emerge) then the server should support a new version. \n```\n\nOriginal comment by `joel.leitch@gmail.com` on 21 Aug 2010 at 8:31\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:45\n- Added labels: **Milestone-Undefined**\n =||= ```\nI do not consider this a Gson issue, but rather a versioning issue between the \nclient and server.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 22 Mar 2011 at 10:15\n- Changed state: **Invalid**\n =||= > ```\r\n> Glad to know that you could register a custom type adapter to address your \r\n> use-case. \r\n> We wouldn't like to change the design of Gson to silently ignore invalid Enum \r\n> values \r\n> as it may mask real bugs. Some organization prefer the fail-fast approach to \r\n> detect \r\n> bugs.\r\n> ```\r\n> \r\n> Original comment by `inder123` on 15 Oct 2009 at 4:10\r\n\r\nIronically, this behavior changed all the way back in 2011 (this original issue was opened in 2009!), and since then invalid enum constant values ARE being silently ignored!\r\n\r\nThis is the PR that changed that behavior:\r\nhttps://github.com/google/gson/commit/214234e2029919dd7d25c4a90e2fac825795c022#diff-59aaf1be173468019fecc281a6b1890f\r\n\r\nSpecifically the change from:\r\n `return Enum.valueOf(classOfT, in.nextString());` (which throws an exception if the value does not match a constant) to:\r\n `return nameToConstant.get(in.nextString());` (which returns null in the same case!)\r\n\r\nWouldn't it make sense to throw an exception after all, as you mentioned in your comment in 2009 (posted by \"GoogleCodeExporter\" in 2015... I was a bit confused by that), \"We wouldn't like to change the design of Gson to silently ignore invalid Enum values\"? =||= ", 0], ["166", "merge method for JsonObject", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:12 PM", "```\nWhat about new method(s) merge for JsonObject... it would be something\nsimmilar to JsonArray.addAll\n\nvoid    merge(JsonObject value) \nvoid    merge(Object value) \n```\n\nOriginal issue reported on code.google.com by `adamchuk` on 20 Oct 2009 at 3:47", "```\nI don't know if I correctly understand this request. I would like gson to have a\nmerge function that adds all values from an jsonstring to an existing object \nbut not\nchanging the values that don't exist in the json string. \n\nsomething like: \n\ngson.merge(String updatedValuesAsJson, class of the object, originalObject)\n```\n\nOriginal comment by `inno...@gmail.com` on 6 May 2010 at 3:00\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:36\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:46\n- Added labels: **Milestone-Undefined**\n =||= ```\ninterested in this method\n```\n\nOriginal comment by `taps...@gmail.com` on 23 Sep 2011 at 4:49\n =||= ```\nI would also like to see this. It would help me when dealing with more complex \nserialization issues.\n\nImagine the rather simple example:\n\n{id: 42} and {value: \"answer\"}\n\nMerging these two JsonElements to {id: 42, value: \"answer\"} is hard with the \ncurrent API\n```\n\nOriginal comment by `oliver.s...@gmail.com` on 3 Jan 2012 at 12:11\n =||= ```\nIt's pretty straightforward to write your own static merge method:\n  public static merge(JsonObject a, JsonObject b)\n\nThe best part about writing your own method is that you get to define your own \nsemantics when there's a conflict. There's lots of strategies that Gson could \ndo, but application developers will know best.\n\nA: { \"name\": \"Jesse\" }\nB: { \"name\": \"Inder\" }\nConflict resolution: throw IllegalArgumentException\n\nA: { \"name\": \"Jesse\", \"pets\": \"Butters\" }\nB: { \"name\": \"Jesse\", \"pets\": \"McFly\" }\nConflict resolution: create an array\n   { \"name\": \"Jesse\", \"pets\": [ \"Butters\", \"McFly\" ] }\n\nA: { \"name\": \"Jesse\", \"city\": null }\nB: { \"name\": \"Jesse\", \"city\": \"Waterloo\" }\nConflict resolution: prefer non-null over null\n   { \"name\": \"Jesse\", \"city\": \"Waterloo\" }\n\nFor this reason I'd prefer we not implement a merge() method that assumes we'll \nget the behavior developers want.\n```\n\nOriginal comment by `limpbizkit` on 3 Jan 2012 at 3:10\n- Changed state: **WontFix**\n =||= ```\nHello,\n\nI know it's an old issue to discuss, but I still believe it could be a fine \nfeature to have. \nI'm thinking something about this:\n\nnew \nGsonMerger().setConflictResolutionStrategy(myResolutionStrategy).merge(jsonObjec\nt1, jsonObject2).build();\n\nnew \nGsonMerger().setConflictResolutionStrategy(myResolutionStrategy).merge(jsonObjec\nt1).merge(jsonObject2).build();\n\nwhere \n\ninterface ConflictResolutionStrategy {\n      void handleError(JsonElement parent, JsonElement oldElement, JsonElement newElement);\n}\n\nFollowing limpbizkit's comment, available options could be:\n\nDefaultConflictResolutionStrategy - throws IllegalArgumentException if name \nconflict [DEFAULT]\nAppendElementConflictResolutionStrategy - appends it to the same \"bucket\"\nNonNullElementConflictResolutionStrategy - replaces the previous element only \nif null\nNewerElementConflictResolutionStrategy - always replaces the previous element\n\nWhy do I refloat this? Because all the examples I saw they were with shallow \njson trees, just one depth-level. It comes a little bit more complex with \ngreater json graphs. A single-line utility would be perfect.\n\nThanks,\n\nSebas.-\n```\n\nOriginal comment by `scotti.s...@gmail.com` on 11 Sep 2014 at 3:01\n =||= ```\nThis is needed, please revoke the resolution \"won't fix\" and have a look at \nSebas suggestion above.\n```\n\nOriginal comment by `eirir...@gmail.com` on 8 Dec 2014 at 11:56\n =||= ```\nSebas' suggestion seems spot on to me and would be extremely useful.\n```\n\nOriginal comment by `christop...@gmail.com` on 27 Feb 2015 at 5:55\n =||= plus one to Sebas' suggestion ! to do a deep copy is non-trivial and more scope for bugs. the strategies suggested could handle this, and one could always plug-in their own strategy =||= ", 0], ["167", "Cannot deserialize TreeSet", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:15 PM", "```\nWhat steps will reproduce the problem?\n\nTreeSet<String> strings = new TreeSet<String>();\nstrings.add(\"Happy\");\n\nGson gson = new Gson();\nString json = gson.toJson(strings);\n\nstrings = gson.fromJson(json, new TypeToken<TreeSet<String>>() {}.getType());\n\n\nWhat is the expected output? What do you see instead?\nI would expect it to run without exceptions.  \nI am getting the following:\nException in thread \"main\" java.lang.ClassCastException:\njava.util.LinkedList cannot be cast to java.util.TreeSet\n\n\nWhat version of the product are you using? On what operating system?\ngson-1.3.jar and gson-1.4.jar  \nRunning on OSX 10.6\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `gciar...@gmail.com` on 23 Oct 2009 at 1:32", "```\nThanks for the bug report.\nFixed in r520\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:15\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ", 0], ["168", "No support for fields whose types are type parameters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:16 PM", "```\nAssume you have the following 2 classes:\nclass Entity<IDT,NameT>{\n    IDT id;\n    NameT name;\n\n    public Entity(IDT id, NameT name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public IDT getId() {\n        return id;\n    }\n    public NameT getName() {\n        return name;\n    }\n}\n\nclass Employee extends Entity<Integer,String>{\n    double age; \n    private int tag;\n\n    public Employee() {\n        super(0,null);\n    }\n    public Employee(int id, String name, double age) {\n        super(id,name);\n        this.age = age;\n    }\n\n    public double getAge() {\n        return age;\n    }\n\n    void setTag(int tag){\n        this.tag = tag;\n    }   \n}\n\nwhen trying to use \n  new GsonBuilder().create().toJson(new Employee(1,\"Mary\",10)); it throws \n\njava.lang.UnsupportedOperationException: Expecting parameterized type, got\nclass test.gson.Employee.\n Are you missing the use of TypeToken idiom?\n See\nhttp://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializ\ning-Gener\n\nok, then I try the generic one using \nnew GsonBuilder().create().toJson(new Employee(1,\"Mary\",10),new\nTypeToken<Employee>(){}.getType()); Gson will only show id/name field, all\nother field in Employee class is ignored. any solution? \n\nI've refered <a\nhref=\"http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/jav\na/com/google/gson/functional/ParameterizedTypesTest.java\">,\nbut didn't help.\n\nplease help to solve the problem. thanks!\n```\n\nOriginal issue reported on code.google.com by `hnjch...@gmail.com` on 26 Oct 2009 at 8:49", "```\nby the way, I tried this under both 1.3/1.4 beta, both threw the same exception\n```\n\nOriginal comment by `hnjch...@gmail.com` on 26 Oct 2009 at 8:51\n =||= ```\nI am having the same issue as well.\n\nI am using the 1.4 version on Ubuntu.\n\nIs there any solution for this?  \n```\n\nOriginal comment by `ekaqu1...@gmail.com` on 14 Mar 2010 at 6:03\n =||= ```\nPls refer to the gson's guide for generic class:\n\nSerializing and Deserializing Generic Types\nWhen you call toJson(obj), Gson calls obj.getClass() to get information on the \nfields\nto serialize. Similarly, you can typically pass MyClass.class object in the\nfromJson(json, MyClass.class) method. This works fine if the object is a \nnon-generic\ntype. However, if the object is of a generic type, then the Generic type \ninformation\nis lost because of Java Type Erasure. Here is an example illustrating the point:\n\nList<String> myStrings = new List<String>();\ngson.toJson(myStrings); // Will cause a runtime exception\n\ngson.fromJson(json, myStrings.getClass());\n\nThe above call results in a runtime exception because Gson invokes\nmyStrings.getClass() to get its class information, but this method returns a raw\nclass, List.class. This means that Gson has no way of knowing that this is a \nlist of\nStrings, and not plain objects.\n\nYou can solve this problem by specifying the correct parameterized type for your\ngeneric type. You can do this by using the TypeToken class.\nType listType = new TypeToken<List<String>>() {}.getType();\ngson.toJson(myStrings, listType);\n\ngson.fromJson(json, listType);\n\nThe idiom used to get listType actually defines an anonymous local inner class\ncontaining a method getType() that returns the fully parameterized type. \n```\n\nOriginal comment by `pvthang...@gmail.com` on 22 Apr 2010 at 3:38\n =||= ```\nThe core problem is that GSON isn't tracking that the type of 'IDT' will be \n'Integer' for Employee instances.\n```\n\nOriginal comment by `limpbizkit` on 1 Nov 2010 at 11:10\n- Changed title: **No support for fields whose types are type parameters**\n =||= ```\nI've attached a patch that uses type mojo stolen from Guice. In general I think \nit's a big leap forward because it'll give GSON better support for type \nparameters in fields and type arguments of fields. In particular, this should \nwork:\n  class Foo<K, V> {\n    K k1;\n    Map<K, V> map;\n    List<V> list;\n  }\n\nMore interestingly, these should also work:\n  class WackyHashMap<V, K> extends HashMap<K, V> {...}\n  class SecondArgCollection<A, B> implements Collection<B> {...}\n\nI'd prefer not to commit this change in time for GSON 1.6 because this change \nis destabilizing. It's a large change and we can build upon it by using \nTypeToken internally everywhere instead of TypeInfo.\n```\n\nOriginal comment by `limpbizkit` on 2 Nov 2010 at 8:08\n- Changed state: **Started**\n\nAttachments:\n- [TypeToken_refactor.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-168/comment-5/TypeToken_refactor.patch)\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:47\n- Added labels: **Milestone-Release1.7**\n =||= ```\nThe attached patch resolves merge conflicts.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:12\n\nAttachments:\n- [TypeToken_refactor_2.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-168/comment-7/TypeToken_refactor_2.patch)\n =||= ```\nIssue 241 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:16\n =||= ```\nIssue 40 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:20\n =||= ```\nThis issue was closed by revision r707.\n```\n\nOriginal comment by `limpbizkit` on 19 Jan 2011 at 10:24\n- Changed state: **Fixed**\n =||= ", 0], ["169", "Update documentation", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:19 PM", "```\nUpdate section \"Custom Serialization and Deserialization\" to reflect the\nabsence of:\ngson.registerDeserializer(MyType.class, new MyDeserializer());\ngson.registerInstanceCreator(MyType.class, new MyInstanceCreator());\n\nfrom the API in 1.4. It is documented in the javadoc but not reflected in\nthe guide.\n\nWhat version of the product are you using? On what operating system?\nGson 1.4 on Windows XP SP3\n\n```\n\nOriginal issue reported on code.google.com by `kareem.shabazz@gmail.com` on 30 Oct 2009 at 5:02", "```\nI believe this has already been fixed.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:45\n- Changed state: **Invalid**\n =||= ", 0], ["170", "unable to serialize an object with list of other objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:20 PM", "```\ninterface IPerson {\n  String getName();\n}\n\npublic class Person implements IPerson {\n  private String name;\n  public Person() { \n  } \n  public Person(String name) {\n    this.name = name;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n}\n\npublic class People {\n  private List<IPerson> people = new LinkedList<IPerson>();\n  public People() {\n  }\n  public People(List<IPerson> people) {\n    this.people = people;\n  }\n  public List<IPerson> getPeople() {\n    return people;\n  }\n}\n\n@Test\npublic void testGsonProjects() {\n  People people = new People(asList((IPerson) new Person(\"Obama\")));\n  String json = new Gson().toJson(people);  \n  System.out.println(json);\n}\n\nexpected: {people:[{name:\"Obama\"}]}\nactual  : {people:[{}]}\n\naffected version: 1.3, 1.4\n```\n\nOriginal issue reported on code.google.com by `luca.marrocco` on 30 Oct 2009 at 11:33\n- Merged into: #231", "```\nI have not used asList() before, but I understand that that is to get a List \nbacked\nup by an Array. (It is a static method of an Array).\n\nI can't see that the Person class is an Array. Doesn't the compiler report an \nerror\non this code?\n\nAlso, isn't the syntax to be Array.asList<IPerson>(yourArray)?\n\nArray<IPerson> peopleArray = new ArrayList<IPerson>(); // e.g.\npeopleArray.add(new Person(\"Obama\"));\npeopleList = Array.asList(peopleArray); // I have no idea how to get the list \nas a\nLinkedList\nPeople people = new People(peopleList);\n\nAlso, I think that you should move the \"private List<IPerson> people = new\nListnkedList<IPerson>();\" to inside \"public People()\". Because this new \ninstance of\nthe List is not needed for the next constructor, i.e. public People(List...);\n\nProbably you should just declare the member as \"private List<IPerson> people;\"\n\n\n\n```\n\nOriginal comment by `takayama...@gmail.com` on 15 Feb 2010 at 11:28\n =||= ```\nHello, thank you for your reply.\n\nasList works (almost) if you do an static import of java.util.Arrays.*;\nBut anyway that is not the point. \n\nHere is new test without the \"asList\" and GSON is not producing the expected \nresult.\n\npublic void testGsonProjects() {\n  List<IPerson> personList = new LinkedList<IPerson>();\n  personList.add(new Person(\"Obama\"));\n  personList.add(new Person(\"Clinton\"));\n\n  People people = new People(personList);\n  String json = new Gson().toJson(people);\n  System.out.println(json);\n}\n\nExpected:\n{\"people\":[{\"name\":\"Obama\"},{\"name\":\"Clinton\"}]}\n\nActual:\n{\"people\":[{},{}]}\n\nHowever, toJson(personList) produces:\n[{\"name\":\"Obama\"},{\"name\":\"Clinton\"}]\n\nThis is very weird.\n```\n\nOriginal comment by `jevgenij...@gmail.com` on 16 Feb 2010 at 3:57\n =||= ```\n[deleted comment]\n```\n =||= ```\ni have the following code using json-lib\n\nString response = put(command.toString());\nJsonConfig jsonConfig = new JsonConfig();\njsonConfig.setExcludes(new String[]{\"cookie\", \"length\"});\nfinal JSONArray jsonResponse = (JSONArray) \nJSONSerializer.toJSON(response,jsonConfig);\n\nI have to rewrite this code on Android using gson.. I could not find a \nconfigurable\nJson de-serialzer where i can write excludes as above. Does any one have any \nidea how\ni can do so.\n```\n\nOriginal comment by `daljeet....@gmail.com` on 16 Feb 2010 at 7:16\n =||= ```\nTo: jevgenij.tsoi\n\nNow your code has less error. To use a List in Gson, you have to declare the \ntype of\nthe list to Gson. You either register it with Gson or give it as an argument to \ntoJson().\n\nIt is documented here:\n\nhttp://sites.google.com/site/gson/gson-user-guide#TOC-Collections-Examples\n```\n\nOriginal comment by `takayama...@gmail.com` on 16 Feb 2010 at 11:20\n =||= ```\nI am sorry, but that seems a bit strange.\n\nAre you saying GSON cannot serialize Lists unless it know what type they are?\nIn that case (new Gson()).toJson(personList); should NOT produce a valid result.\nbut it does.\n\nLet me sum it up:\nTyped list as a member in an object -> the object is serialized but all the list\nelements are empty \"{}\"\n\nUntyped list as a member in an object -> works fine.\n\nTyped list directly, without type info to Gson -> works fine.\n\nHow come the Untyped case works but the typed case does not?\nIt should default to the untyped case. Do you not agree?\n\n\n```\n\nOriginal comment by `jevgenij...@gmail.com` on 17 Feb 2010 at 8:48\n =||= ```\nI am sorry, but that seems a bit strange.\n\nAre you saying GSON cannot serialize Lists unless it know what type they are?\nIn that case (new Gson()).toJson(personList); should NOT produce a valid result.\nbut it does.\n\nLet me sum it up:\nTyped list as a member in an object -> the object is serialized but all the list\nelements are empty \"{}\"\n\nUntyped list as a member in an object -> works fine.\n\nTyped list directly, without type info to Gson -> works fine.\n\nHow come the Untyped case works but the typed case does not?\nIt should default to the untyped case. Do you not agree?\n\n\n```\n\nOriginal comment by `jevgenij...@gmail.com` on 17 Feb 2010 at 8:49\n =||= ```\nGson can serialize it fine but will not be able to deserialize an untyped \ncollection.\n\nThe Typed list in the code sample is declared as List<IPerson>. However, \nIPerson has \nno fields (since it is an interface). Hence Gson serializes it as an empty \nobject. In \nthe case of Untyped collection, Gson uses the actual class of the objects in \nthe \ncollection, and is able to serialize them since it sees their fields.\n\n```\n\nOriginal comment by `inder123` on 17 Feb 2010 at 9:48\n =||= ```\nOh, I did not realise that. Obviously I have not used it in the similar way \nbefore.\n\nSo, the solution is to declare the type of the list with a concrete class which \nhas\nimplemented the interface?\n```\n\nOriginal comment by `takayama...@gmail.com` on 17 Feb 2010 at 11:04\n =||= ```\nSorry but I think the OP has a point that has still not been addressed.  \n\nForgetting about de-serialization entirely for the time being, why does GSON \ncorrectly serialize a typed collection when passed directly the the toJson() \nmethod, \nbut not when it is a member variable of a parent class?\n\nIf I have a List<Shape> that contains Circle objects, and serialize the list \n(using \nGSON v1.4) the resulting JSON correctly includes the fields from the Shape \n(position) \nand Circle (radius). However, if I add my List<Shape> as a member variable \n'shapes' \nof a Canvas object and serialise that, all I get is the positions and none of \nthe \nsubclass fields.\n\nIf I need my list to contain Circles and Squares, I can't simple promote the \nlist to \nthe correct concrete type as suggested here. \n\n```\n\nOriginal comment by `charles%...@gtempaccount.com` on 3 Jun 2010 at 6:16\n =||= ```\nI've opened issue 231 to track the polymorphism issue.\n\nIn the interim, you'll have to work around this with a custom JsonSerializer.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 6:03\n- Changed state: **Duplicate**\n =||= ```\nI had the same problem.\n\nI had to patch the CollectionTypeAdapter because I couldn't register my own \nAdaptater on java.util.Collection.\n```\n\nOriginal comment by `jprudent@gmail.com` on 22 Oct 2010 at 9:38\n =||= ", 0], ["171", "Custom deserializer not called for explicit null value", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:25 PM", "```\nWhen a json object contains an explicit null for a field, the custom\ndeserializer for that field type is never called, rather the field is\nsimply set to null. This makes it impossible to map json nulls to some\nnon-null value in a consistent way. It also makes it impossible to have\nguaranteed non-null fields in objects which are deserialized from json.\n\nThe handling of explicit nulls and missing values is also inconsistent: in\nthe case of an explicit null, the Java object's field is set to null. In\nthe case of a missing value, the field is left alone (as initialized by the\nno-arg constructor).\n\nThe behavior for missing values is reasonable, but the behavior for\nexplicit nulls is very difficult to work around. Explicit null values\nshould (perhaps optionally) be passed through the custom deserializer.\n\nWhat steps will reproduce the problem?\n1. compile the attached file\n2. run it\n\nWhat is the expected output? What do you see instead?\nExpected output:\n  NullInner should equal NullInner\n  NullInner should equal NullInner\nOR:\n  NullInner should equal NullInner\n  InitInner should equal NullInner\nI see:\n  null should equal NullInner\n  InitInner should equal NullInner\n\nWhat version of the product are you using? On what operating system?\ngson 1.4\n\n\n```\n\nOriginal issue reported on code.google.com by `hell...@gmail.com` on 3 Nov 2009 at 11:33\n\nAttachments:\n- [Main.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-171/comment-0/Main.java)", "```\nWe thought about providing that support, but doing so will break existing \ndeserializers since now they will have to do a check for JsonNulls. We couldn't \nthink \nof a backward compatible way of solving this problem. \n\nWhat is the problem that you are trying to solve. Will a postConstruct method \ndo the \njob?\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:24\n =||= ```\nSorry for the very long delay. The problem we were trying to solve here is \nmapping json values to scala Option \nvalues. Rather than null, a missing value should be mapped to the distinguished \nNone value, while any value \nwill be Some(blah). (Of course, this pattern is useful in many cases other than \nOption, and not just in Scala: \nanytime one would like to avoid nulls.)\n\nA postConstruct method would probably do the job, but it still feels very dirty \nto allow the assignment to null \nand then check for it in a second pass. This is effectively what I've had to do \nnow, and it works, but I find it \npretty unsatisfying.\n\nMy preference would be to *optionally* expose the JsonNulls to the \ndeserializers, controlled by a setting on \nGsonBuilder, I suppose. The standard deserializers could easily be changed to \ndeal with this, and users would \nonly have to update their deserializers if they wanted access to explicit \nnulls. \n```\n\nOriginal comment by `hell...@gmail.com` on 15 May 2010 at 2:37\n =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:55\n- Added labels: **Type-Enhancement**, **Milestone-Undefined**\n- Removed labels: **Type-Defect**\n =||= ```\nWe don't have this problem with TypeAdapterFactory-registered TypeAdapters. \nUsing those allow you to do whatever you want with null in either direction.\n\nThis is in Gson 2.1.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:43\n- Changed state: **Fixed**\n =||= ", 0], ["172", "add custom exception handlers to serialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:26 PM", "```\nthis is not a bug, but a feature request:\n\nit would be great to have the option to supply a custom exception handler, so \nthat we could, for \ninstance, continue serializing an object instead of throwing one exception that \nkills the entire \nprocess.\n\nin the source, it would go something like while serializing a field, catch any \nexception and call a \nhandler which can optionally rethrow or swallow it and return a JsonElement, \nthus allowing \nserialization to continue... bla, bla, etc., etc.\n\nnamely this was failing with Hibernate lazy init properties... i just want it \nto log for debug, and if \nlazy-init is failing, i don't care.\n```\n\nOriginal issue reported on code.google.com by `johnmarn...@gmail.com` on 5 Nov 2009 at 7:56", "Original comment by `limpbizkit` on 7 Oct 2010 at 7:17\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:47\n- Added labels: **Milestone-Undefined**\n =||= ```\nMarking won't fix. Ping if you think this is an error.\n```\n\nOriginal comment by `limpbizkit` on 11 Feb 2012 at 6:41\n- Changed state: **WontFix**\n =||= ", 0], ["173", "missing coma", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:27 PM", "```\nWhat steps will reproduce the problem?\n1. I'm serializing a not-accessible-class. It's unreproducible other way. \n\nWhat is the expected output? What do you see instead?\n\n{\n    \"wsImpl\":\n    {\n        \"name\":\"Derby JDBC Provider (XA)\",\n        \"type\":17,\n        \"instrumentationLevel\":-2,\n        \"subCollections\":\n        [\n            {\n                \"dsOName\":{}         <-------------\n                \"name\":\"jdbc/DefaultEJBTimerDataSource\",\n                \"type\":17,\n                \"instrumentationLevel\":-2,\n                \"dataMembers\":\n                [\n                    {\n                        \"count\":2,\n                        \"id\":1,\n                        \"startTime\":1257966935229,\n\n\"lastSampleTime\":1257966972191\n                    },\n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.4\nRHEL 5.2\nJDK 1.6\n\nPlease provide any additional information below.\n\nI can not use any other serialize for JSON because i don't have the class.\nAny idea, help, solution path will be helpful.\n\n```\n\nOriginal issue reported on code.google.com by `drdet...@gmail.com` on 12 Nov 2009 at 9:52", "```\nI found the problem : PrettyPrinter. he removes a comma, don't know why.\n```\n\nOriginal comment by `drdet...@gmail.com` on 16 Nov 2009 at 8:11\n =||= ```\nA test case that demonstrates the fix is in r593.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:47\n- Changed state: **Fixed**\n =||= ", 0], ["174", "Support for protobufs", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:28 PM", "```\nSee http://code.google.com/p/protobuf/\n\nWhat is the expected output? What do you see instead?\nUnderscores are added to the end of all the field names and the values\nappear to be the byte arrays instead of actual Strings.\n```\n\nOriginal issue reported on code.google.com by `bmcc...@google.com` on 17 Nov 2009 at 7:03", "```\nCan you explain how you want us to support protobufs? Is it to \nserialize/deserialize \nJSON data into protobufs?\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:25\n =||= ```\nI had a situation in which I wanted to use GSON to serialize protobufs to JSON. \n I\nbelieve this is a functionality that GXPs may include though I am not certain.  \nI\nimagine that the reverse direction is less likely to be as frequently used.\n```\n\nOriginal comment by `bmcc...@google.com` on 8 Jan 2010 at 10:38\n =||= ```\nInder started this:\nhttp://code.google.com/p/google-gson/source/browse/trunk/proto/src/main/java/com\n/google/gson/protobuf/ProtoTypeAdapter.java\n```\n\nOriginal comment by `limpbizkit` on 7 Oct 2010 at 7:19\n- Changed state: **Started**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nInder started this:\nhttp://code.google.com/p/google-gson/source/browse/trunk/proto/src/main/java/com\n/google/gson/protobuf/ProtoTypeAdapter.java\n```\n\nOriginal comment by `limpbizkit` on 7 Oct 2010 at 7:19\n =||= ```\nFixed this in r613\n```\n\nOriginal comment by `inder123` on 1 Nov 2010 at 11:26\n- Changed state: **Fixed**\n =||= ```\nIt seems that ProtoTypeAdapter fails when used with Protobuf enums, due to a \ncircular reference error.\n\n```\n\nOriginal comment by `omer.ta...@gmail.com` on 7 Dec 2011 at 3:05\n =||= ```\nAnyone have a version that works with enums?\n```\n\nOriginal comment by `tfishw...@gmail.com` on 30 Jan 2015 at 3:54\n =||= ", 0], ["175", "Support for StringBuilder/StringBuffer", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:30 PM", "```\nWhat steps will reproduce the problem?\n1. Make an object with a StringBuilder\n2. Convert to JSON\n\nWhat is the expected output?\n\nI expect a JSON string\n\nWhat do you see instead?\n\nI see this:\n\n{\"value\":[\"S\",\"u\",\"c\",\"c\",\"e\",\"s\",\"s\",\" \",\"f\",\"o\",\"r\",\":\", ...\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 windows\n\nPlease provide any additional information below.\n\nYou might think it is correct since a StringBuilder is not really a string\nunder the covers.  But I suggest that most people will want to see a String\nin json rather than an array of chars...\n\nThanks for your consideration.\n\nChris\n```\n\nOriginal issue reported on code.google.com by `mchy...@gmail.com` on 20 Nov 2009 at 6:26", "```\nWould you want the same behavior for StringBuffer too? Would you want \ndeserialization \nof a String to StringBuilder/StringBuffer as well? \n\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:27\n =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:48\n- Changed title: **Support for StringBuilder/StringBuffer**\n =||= ```\n[deleted comment]\n```\n =||= ```\nFixed in r717\n```\n\nOriginal comment by `inder123` on 31 Jan 2011 at 11:15\n- Changed state: **Fixed**\n =||= ", 0], ["176", "Updating of existing entities during deserialization instead of creating new ones", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:31 PM", "```\nI need to update existing entity from json data instead of creating new one.\nFor example i have some entity like this one:\nEntity {\n  int id;\n  String value1;\n  String value2;\n}\nand json like {\"value2\":\"newValue\"}\nI whould like to update only value2 in such object leaving id and value1 as \nthey are.\n\nThis can be achieved by two ways:\na) provide a new method in Gson class like this one:\npublic void fromJson(String jsonText, Object exitsingEntity);\nb) private access to property values in InstanceCreator, for example\npublic T createInstance(Type type, <some way to get values for this object from \njson string>);\n\na) should not be hard to implement\n```\n\nOriginal issue reported on code.google.com by `zlow...@gmail.com` on 20 Nov 2009 at 3:26", "```\na) is not a general solution. What if you wanted to replace a value deep-down \nin the \nJson tree. \n\nRegarding b) I suppose you can already write an InstanceCreator that keeps \ntrack of \nall the objects of type Entity and gives you the one that matches id. \n\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:03\n =||= ```\nThe problem with b) it that i cannot access id and other fields from JSON data \nin InstanceCreator\n```\n\nOriginal comment by `zlow...@gmail.com` on 8 Jan 2010 at 7:11\n =||= Original comment by `limpbizkit` on 7 Oct 2010 at 7:21\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:48\n- Added labels: **Milestone-Undefined**\n =||= ```\nI don't think we'll ever build this in. Users can accomplish this with their \nown TypeAdapterFactory instances.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:39\n- Changed state: **WontFix**\n =||= ", 0], ["177", "Support for different serializers for root and nested objects of same class", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:34 PM", "```\nSuppose i have some class like this one:\nTreeNode {\n  int id;\n  TreeNode parent;\n  List<TreeNode> children;\n  String nodeName;\n  String nodeValue;\n}\n\nI want to be able to get following JSON:\n{\"id\":<id>, \"parent\":<parent id>, \"nodeName\":<name>, \"nodeValue\":<value>, \n\"children\":[<child \n1 id>, <child 2 id>...]}\n\nUsing serializer like this one:\n    public JsonElement serialize(TreeNode src, Type typeOfSrc, JsonSerializationContext context) {\n        return new JsonPrimitive(src.getId());\n    }\n\nFor all objects except root one will solve this problem\n```\n\nOriginal issue reported on code.google.com by `zlow...@gmail.com` on 20 Nov 2009 at 3:48", "```\nCan't you handle this at the application level? Detect if you're serializing \nthe parent node?\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:48\n- Changed state: **WontFix**\n =||= ", 0], ["178", "Map Keys are not escaped correctly if they contain \"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:35 PM", "```\nMap<String,String> s = new HashMap<String, String>();\ns.put(\"h\\\"allo\", \"w\\\"elt\");\ns.put(\"hallo\", \"welt\");\n\nWriter w = new PrintWriter(System.out, true);\ngson.toJson(s, w);\nw.flush();      \n\nprints (invalid JSON):\n{\"h\"allo\":\"w\\\"elt\",\"hallo\":\"welt\"}\n\nBut should be \n{\"h\\\"allo\":\"w\\\"elt\",\"hallo\":\"welt\"}\n\n```\n\nOriginal issue reported on code.google.com by `developm...@mj-networks-gmbh.de` on 22 Nov 2009 at 6:16", "```\nUnfortunaly just copy&paste the default MapTypeAdapter code doesnt work, since \nall\nimportant classes are gson package-visible only \ne.g. TypeInfoMap, JsonDeserializationContextDefault\n```\n\nOriginal comment by `developm...@mj-networks-gmbh.de` on 22 Nov 2009 at 6:32\n =||= ```\nIs there any solution/quick fix for this issue?\n```\n\nOriginal comment by `marek.ho...@gmail.com` on 14 Jun 2010 at 11:06\n =||= ```\nThis could be fixed by using JsonWriter in gson.toJson().\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 5:33\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= ```\nIssue 180 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 5:34\n =||= ```\nIssue 182 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 5:35\n =||= ```\nI checked in failing test cases for this problem as it appears in both map keys \n(r572) and object property names (r573).\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 5:47\n =||= ```\nFix with r577.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 21 Aug 2010 at 6:51\n- Changed state: **Fixed**\n =||= ", 0], ["179", "Hibernate question.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:37 PM", "```\nIn the lastest realese I can get lazy property of hibernate's beans.\n\nThanks \n\n```\n\nOriginal issue reported on code.google.com by `vllumiqu...@gmail.com` on 25 Nov 2009 at 2:30", "```\nCan you clarify what the Gson bug is? Do you mean that you can not get \nsomething in \nHibernate to work with Gson? \n\nThanks\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 7:49\n =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:34\n- Changed state: **Invalid**\n =||= ", 0], ["180", "escape \" in map's key", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:38 PM", "```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"ab\\\"c\", \"a\\\"bc\");\n\nresult is\n{\"ab\"c\":\"a\\\"bc\"}\nshould be\n{\"ab\\\"c\":\"a\\\"bc\"}\n\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 16 Dec 2009 at 7:01\n- Merged into: #178", "```\nThis issue could be merged with #178.\nTried to build from svn head, but it doesn't seem to contain fix yet.\nIs there any quick workaround proposed to escape keys properly?\n```\n\nOriginal comment by `marek.ho...@gmail.com` on 25 May 2010 at 3:34\n =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:34\n- Changed state: **Duplicate**\n =||= ", 0], ["181", "No User Manual for JsonStreamParser", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:39 PM", "```\nI am using Gson 1.4 Beta.\n\nThe Roadmap (1.4 Beta) states:\n\n\"JsonStreamParser: A streaming parser API class to deserialize multiple\nJSON objects on a stream (such as a pipelined HTTP response).\"\n\nHowever, I cannot find any info in the user manual or API about it. The\nsearch in the issues database does pick up anything with\n\"JsonStreamParser\". Search in the User Manual or Gson site yields nothing\nother than the Roadmap.\n\nThis is fundamental to process large object maps from/to the Json\nInputStream/OutputStream with another InputStream/OutputStream.\n\nFor example, with JDO, we should be able to:\n\n   Type listType = new TypeToken<List<MyJDO>>() {}.getType();\n   InputStream ins = fileItemStream.openSream();\n   JasonInputStream jins = gson.fromJsonStream(ins, listType);\n\n   while ((MyJDO jdo = jins.readNextJson()) != null)\n   {\n       pm.makePersistent(jdo);\n   }\n\nIf I use \n\n   List<MyJDO> list = gson.fromJson(ins, listType); \n\nand get the entire List, that is too large. It exceeds memory limit and it\ntakes a long time to store it away with pm.makePersistentAll() (if it does\nnot crash the app). By any rate, the makePersistentAll() uses iterator\nanyway, so it seems to have the same efficiency.\n\nI believe that this is a deficient item.\n\nYoichi\n\n\n```\n\nOriginal issue reported on code.google.com by `takayama...@gmail.com` on 22 Dec 2009 at 4:02", "```\nFYI: if this is still to be a problem, the new JsonReader class makes it \npossible to consume a JSON stream in parts. Better integration between Gson and \nJsonReader in the public API is forthcoming.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:40\n =||= ```\nhttp://sites.google.com/site/gson/streaming\n```\n\nOriginal comment by `limpbizkit` on 5 Oct 2010 at 6:43\n- Changed state: **Fixed**\n =||= ", 0], ["182", "JsonObject toString method doesn't escape double quotes", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:40 PM", "```\nCreate the following code:\n JsonObject jsonObj = new JsonObject();\n jsonObj.add(\"quotes\", new JsonPrimitive(\"this is a double quote:'\\\"'\"));\n System.out.println(jsonObj.toString());\n\nI expected this string to be printed:\n {\"quotes\":\"this is a double quote:'\\\"'\"}\n\nhowever i get this one instead:\n {\"quotes\":\"this is a double quote:'\"'\"}\n\nIt's odd because if I have an object (non JsonObject) with a field with\nquotes and i use GsonBuilder to convert it into a string it correctly\nescapes the double quotes.\n\nI am using version 1.3.\n\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `rafael.c...@gmail.com` on 24 Dec 2009 at 12:59\n- Merged into: #178", "```\nUsing version 1.4 it works!\n```\n\nOriginal comment by `rafael.c...@gmail.com` on 22 Jan 2010 at 2:27\n =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:35\n- Changed state: **Duplicate**\n =||= ", 0], ["183", "add set locale method", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:41 PM", "```\nPlease add setLocale() method to GsonBuilder, so we can output date format\nin a specified locale format.\n\n```\n\nOriginal issue reported on code.google.com by `Kevin.ti...@gmail.com` on 26 Dec 2009 at 4:50\n- Merged into: #223", "```\nHi Kevin,\n\nI just add this feature see on http://jansouza.com/2010/07/14/google-json-java/\n\n/*\n* Atenciosamente/ Regards/ Saludos, \n* Jan Souza\n*/\n```\n\nOriginal comment by `jango...@gmail.com` on 14 Jul 2010 at 3:34\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:39\n- Changed state: **Duplicate**\n =||= ", 0], ["184", "Can't build gson-1.3 in timezones other than PST:", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:42 PM", "```\nWhat steps will reproduce the problem?\n1. Set the system timezone to something other than Pacific (I'm in the\nEastern timezone).\n2. Build gson via Maven.\n\nWhat is the expected output? What do you see instead?\n\nExpecting all tests to pass so . Serialized times carry their timezones\nwith them, thus the times are offset from expected values. This is probably\ncorrect behavior in production, so the problem is with the test. For\ninstance, in the Eastern timezone:\n\n-------------------------------------------------------------------------------\nTest set: com.google.gson.functional.DefaultTypeAdaptersTest\n-------------------------------------------------------------------------------\nTests run: 38, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.157 sec\n<<< FAILURE!\ntestDefaultJavaSqlTimestampSerialization(com.google.gson.functional.DefaultTypeA\ndaptersTest)\n Time elapsed: 0.016 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<\"Dec 3, 2009 [1]:18:02 PM\">\nbut was:<\"Dec 3, 2009 [4]:18:02 PM\">\n    at junit.framework.Assert.assertEquals(Assert.java:81)\n    at junit.framework.Assert.assertEquals(Assert.java:87)\n    at\ncom.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSe\nrialization(DefaultTypeAdaptersTest.java:239)\n\ntestDefaultJavaSqlTimeSerialization(com.google.gson.functional.DefaultTypeAdapte\nrsTest)\n Time elapsed: 0 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<\"0[1]:18:02 PM\"> but\nwas:<\"0[4]:18:02 PM\">\n    at junit.framework.Assert.assertEquals(Assert.java:81)\n    at junit.framework.Assert.assertEquals(Assert.java:87)\n    at\ncom.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSeriali\nzation(DefaultTypeAdaptersTest.java:252)\n\n\nWhat version of the product are you using? On what operating system?\n\ngson-1.3, SVN rev. 518 on 32-bit Windows XP w/cygwin.\n\nPlease provide any additional information below.\n\nOne workaround is to change the local system timezone to PST; this causes\nall unit tests to pass.\n```\n\nOriginal issue reported on code.google.com by `mich...@barnathan.name` on 28 Dec 2009 at 4:09", "```\nThanks for the bug report.\nFixed in r519 by using PST time-zone as default in test setup.\n```\n\nOriginal comment by `inder123` on 8 Jan 2010 at 6:54\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.4**\n =||= ```\ncouldn't get r519 to build. the last revision that i got to build is r513, \nthough i \ndidn't try everything between r519 and head (which is r537, which i think is \nthe \nclosest thing to release 1.4). anyone know which revision is release 1.4 ?\n```\n\nOriginal comment by `lytles...@gmail.com` on 24 Feb 2010 at 2:09\n =||= ```\nYou should be able to use the head version. We try to never regress the head \nbranch.\n```\n\nOriginal comment by `inder123` on 24 Feb 2010 at 9:27\n =||= ", 0], ["185", "Why not getter and setter?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:44 PM", "```\nWhat steps will reproduce the problem?\nGson does not use the getter and setter when serialize and deserialize \nJava objects, that is very strange. \ne.g. I want to do something in the setter: \nprivate int number;\npublic void setNumber(int number) {\n    this.number = number > 0 ? number : 0;\n}\nBut Gson skip over it. \n\nWhat is the expected output? What do you see instead?\nWhen setNumber(- 1);\nthis.number == 0;\nBut not this.number == - 1;\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jessige...@gmail.com` on 14 Jan 2010 at 3:12\n- Merged into: #232", "```\nYes, I agree, this is confusing. Breaking java bean model means that we can't \nuse\ninheritance, overriding getters in successors. \n```\n\nOriginal comment by `Anton.Troshin@gmail.com` on 12 Feb 2010 at 7:15\n =||= ```\nthat's also bad because one can't access private fields in unsigned applets\n```\n\nOriginal comment by `nordlig....@gmail.com` on 13 Mar 2010 at 3:13\n =||= ```\nWhy do you want to touch privete fields??\n```\n\nOriginal comment by `minglq.9` on 16 Mar 2010 at 3:33\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:09\n- Changed state: **Duplicate**\n =||= ", 0], ["186", "JsonParseException is not very informative (does not return the offending string)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:45 PM", "```\nWhat steps will reproduce the problem?\n1. trigger a JsonParseException at the invocation of Gson.fromJson (by \nproviding a malformed String)\n2. catch and print the trace (e.printStackTrace())\n3. the trace print does not provide the offending String\n\nWhat is the expected output? What do you see instead?\nHere is the expected output:\ncom.google.gson.JsonParseException: Failed parsing JSON source: \"actual \nmalformed Json string\" to Json\n\nand here is what I got instead:\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@a0dcd9 to Json\n\nlooking at the sources:\nJsonParser.java:59 we find:\n      throw new JsonParseException(\"Failed parsing JSON source: \" + json + \n\" to Json\", e);\nmaybe (...??) the following could be used:\n\nWhat version of the product are you using? On what operating system?\ngson-1.4 on Windows XP\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `mperdik...@gmail.com` on 20 Jan 2010 at 10:52", "```\nFixed by JsonReader.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:41\n- Changed state: **Fixed**\n =||= ", 0], ["187", "Support InputStream", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:45 PM", "```\nPlease support InputStream and GZIPInputStream instead of String for \ngson.fromJson(response, listType);\n\nThanks, :-)\n```\n\nOriginal issue reported on code.google.com by `david.jonathan.nelson` on 22 Jan 2010 at 8:16", "```\nIf you wrap your InputStream in an InputStreamReader, you're good!\n  InputStream myInputStream = ...\n  Reader reader = new InputStreamReader(myInputStream);\n  gson.fromJson(reader, listType);\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 5:50\n- Changed state: **WontFix**\n =||= ", 0], ["189", "crash with embeded \"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:48 PM", "```\nWhat steps will reproduce the problem?\ngson.fromJson(\"{\\\"title\\\":\\\"? The Trend: \\\"Can You Write News\\\" ? The\nSearch For Stuff:\\\"}\", Object.class);\n\nWhat is the expected output? What do you see instead?\n\nShould parse (with an error because of using Object.class) instead throws:\n\nCaused by: com.google.gson.ParseException: Encountered \"\n<IDENTIFIER_SANS_EXPONENT> \"Can \"\" at line 1, column 25.\nWas expecting one of:\n    \"}\" ...\n    \",\" ...\n\ncom.google.gson.JsonParseException: Failed parsing JSON source:\njava.io.StringReader@380e28b9 to Json\n        at com.google.gson.JsonParser.parse(JsonParser.java:59)\n        at com.google.gson.Gson.fromJson(Gson.java:443)\n        at com.google.gson.Gson.fromJson(Gson.java:396)\n        at com.google.gson.Gson.fromJson(Gson.java:372)\n        at Test.foo(Test.java:139)\n        at\ncom.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:70\n5)\n        at\ncom.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n        at\ncom.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:82)\n        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n        at com.google.gson.JsonParser.parse(JsonParser.java:54)\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 Windows 7 64-bit.\n\nPlease provide any additional information below.\n\nThe issue is the \\\"Can You Write News\\\" - works if you change it to \\\\\\\"Can\nYou Write News\\\\\\\".  From what I can tell it should work with out the\nadditional \\\\ though.\n```\n\nOriginal issue reported on code.google.com by `dstobede...@gmail.com` on 22 Jan 2010 at 11:13", "```\nFixed by JsonReader.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:45\n- Changed state: **Fixed**\n =||= ", 0], ["190", "can't handle the following json: {\"type\":\"Point\",\"coordinates\":[37.43504333,-122.42824554]}", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:49 PM", "```\nWhat steps will reproduce the problem?\n\nurl: http://twitter.com/statuses/user_timeline.json?\nscreen_name=StartupDigest\n\n// get http request, convert to bufferedreader\n\nType listType = new TypeToken<List<Status>>() {}.getType();\ngson.fromJson(bufferedReader, listType);\n\nWhat is the expected output? What do you see instead?\n\nExpected: A json deserialized object in java.\n\nActual:\n\nThe JsonDeserializer failed to deserialized json object \n{\"type\":\"Point\",\"coordinates\":[37.43504333,-122.42824554]}\n\nWhat version of the product are you using? On what operating system?\n\nLatest.  Windows Vista.\n```\n\nOriginal issue reported on code.google.com by `david.jonathan.nelson` on 24 Jan 2010 at 8:54", "```\nThe related thread I suppose is here:\n\nhttp://groups.google.com/group/google-gson/browse_frm/thread/9e654daeda6f4d9a/bb\n9ce6f0a8a5708d?#bb9ce6f0a8a5708d\n\nSteps to reproduce:\n\n1. Initial JSON contains array:\n\n  {value1 : \"value 1\", value2 : [\"1\", \"2\"] } \n\n2. Map doc = gson.fromJson( {value1 : \"value 1\", value2 : [\"1\", \"2\"] },\n          new TypeToken<Map<String, Object>>(){}.getType());\n\njava.lang.RuntimeException: com.google.gson.JsonParseException: Type\ninformation is unavailable, and the target object is not a primitive:\n[\"1\", \"2\"]\n\nThus GSON cannot form a Collection out of JSonArray.\nHowever, in case then JSON is like \n\n{value1 : \"value 1\", value2 : {\"1\", \"2\"} }\n\nthe above exception can be just because no Java type pointed out for {\"1\", \n\"2\"}. But\n[\"1\", \"2\"] is a Collection (Of course, not generic collection, so type of its\nelements is not known. May in this case cast to String?). \n```\n\nOriginal comment by `Anton.Troshin@gmail.com` on 12 Mar 2010 at 1:42\n =||= ```\nYou'll need to write a custom serializer. Here's how that looks:\n\n  static class Geo {\n    GeoType type;\n    double[] coordinates;\n  }\n\n  enum GeoType {\n    POINT, ADDRESS;\n  }\n\n  public static void main(String... args) {\n    /*\n     * This deserializer turns a \"Point\" into our GeoType enum.\n     * A custom deserializer required because enums are case-sensitive.\n     */\n    JsonDeserializer<GeoType> geoTypeDeserializer = new JsonDeserializer<GeoType>() {\n      public GeoType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n          throws JsonParseException {\n        return GeoType.valueOf(json.getAsString().toUpperCase());\n      }\n    };\n\n    /*\n     * This deserializer turns the full object into an instance of Geo.\n     */\n    JsonDeserializer<Geo> geoDeserializer = new JsonDeserializer<Geo>() {\n      public Geo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n          throws JsonParseException {\n        JsonObject jsonObject = json.getAsJsonObject();\n        Geo result = new Geo();\n        result.type = context.deserialize(jsonObject.get(\"type\"), GeoType.class);\n        result.coordinates = context.deserialize(jsonObject.get(\"coordinates\"), double[].class);\n        return result;\n      }\n    };\n\n    Gson gson = new GsonBuilder()\n        .registerTypeAdapter(GeoType.class, geoTypeDeserializer)\n        .registerTypeAdapter(Geo.class, geoDeserializer)\n        .create();\n\n    String json = \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[37.43504333,-122.42824554]}\";\n    Geo geo = gson.fromJson(json, Geo.class);\n    System.out.println(geo.type + \" \" + Arrays.toString(geo.coordinates));\n  }\n\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:23\n- Changed state: **Invalid**\n =||= ```\nCustom serializer is okey, but what we really asked for is GSON to be able to \ndeal with ARRAYS of primitives.\n```\n\nOriginal comment by `Anton.Troshin@gmail.com` on 28 Aug 2010 at 7:13\n =||= ```\nYes, It does not solve our problem. We need it auto cast to string of array.\n```\n\nOriginal comment by `laise...@gmail.com` on 4 Jun 2011 at 3:41\n =||= ", 0], ["191", "Fields excluded in ExclusionStrategy should not be made accessible", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:50 PM", "```\nWhat steps will reproduce the problem?\nWe faced this problem on Google App Engine since there are security \nrestrictions in place.\n\n1. We have a class with field on which access via reflection is not \nallowed. e.g\n\nclass ClassWithNonAccessibleField {\n  //Security manager doesn't allow access to this\n  private static final int version;\n  //This field is accessible\n  private int accessible;\n}\n\n2. Try to serialize the class as follows using the following exclusion \nstrategy:\nprivate Gson gson= new GsonBuilder().excludeFieldsWithModifiers\n(Modifier.STATIC, Modifier.TRANSIENT,\n                    Modifier.VOLATILE).create();\n\nWhat is the expected output? What do you see instead?\nThe excluded fields should be skipped and only fields that are to be \nserialized should be made accessible. \nBut in this case, trying to serialize ClassWithNonAccessibleField will \nresult in a SecurityException in the ObjectNavigator class.\n\nWe could overcome this problem by trying to exclude such fields from \nserialization. But the setAccessible() method is called for all fields of \nthe class in a single shot, hence causing a AccessControlException.\n\nWhat version of the product are you using? On what operating system?\nGson version 1.4 on Google app engine 1.3.0\n\nPlease provide any additional information below.\nThe above example is a simplification of the scenario in which we faced \nthe problem. I can provide more details if required.\n\nAlso find attached a patch that is working fine on app engine. :)\n```\n\nOriginal issue reported on code.google.com by `akhilra...@gmail.com` on 27 Jan 2010 at 7:25", "```\nAh!! Forgot to attach the patch.\n```\n\nOriginal comment by `akhilra...@gmail.com` on 27 Jan 2010 at 7:43\n\nAttachments:\n- [ObjectNavigator_field_access.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-191/comment-1/ObjectNavigator_field_access.patch)\n =||= ```\nakhilraina's patch works well for me on AppEngine as well. I'm attaching the \nrebuilt binary jar for those without a build environment.\n```\n\nOriginal comment by `gareth.c...@gmail.com` on 19 Jun 2010 at 4:06\n\nAttachments:\n- [gson-1.4-issue191.jar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-191/comment-2/gson-1.4-issue191.jar)\n =||= ```\nIs this still a problem with the latest Gson 1.7.1 release and the new App \nEngine pushes?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 26 Apr 2011 at 11:22\n =||= ```\nThis issue was closed by revision r1095.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:11\n- Changed state: **Fixed**\n =||= ", 0], ["192", "convert JSON to Map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:52 PM", "```\nWhat steps will reproduce the problem?\n1.just run the TestJson.\n\nWhat is the expected output? What do you see instead?\nerror.\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\nI have used the json string created by Gson.toJson to recreate the values fo \nTestJson.\nPlease refer attached file\n```\n\nOriginal issue reported on code.google.com by `usp...@gmail.com` on 11 Feb 2010 at 10:00\n\nAttachments:\n- [TestJson.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-192/comment-0/TestJson.java)", "```\nYou cannot use raw types with GSON. Change line 8 of your program to the \nfollowing and you'll be fine:\n    public HashMap<String, String> MM = new HashMap<String, String>();\n\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:42\n- Changed state: **Invalid**\n =||= ", 0], ["193", "Circular dependency default exclusion strategy required for persistance frameworks", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:53 PM", "```\nWhat steps will reproduce the problem?\n1.Any JPA, hibernate or other persistance frameworks pojos include circular \ndependencies\n2.serialization to json will fail (infinite loop) though standard \nserialization will happen normally\n\n\nWhat is the expected output? What do you see instead?\nPutting the serialized instances in a set and checking if they weren't \nalready processed will simply resolve the problem\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `zhamdi.into` on 12 Feb 2010 at 9:13\n- Merged into: #137", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:56\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nThese problems are already handled by the library flexjson, maybe it could be a \ngood idea to port that lib to GWT instead of building all features from scratch \nagain!??\n```\n\nOriginal comment by `zhamdi.into` on 7 Oct 2010 at 7:49\n =||= ```\nhas this issue been fixed? If so, how do i use the new feature? I'm currently \nfacing the same issue with gson 1.6\n```\n\nOriginal comment by `varun...@gmail.com` on 6 Apr 2011 at 7:54\n =||= ```\nIt is a perennial problem with ORMs and JSON. That feature would be much \nappreciated\n```\n\nOriginal comment by `y.monsoon` on 6 Oct 2011 at 2:31\n =||= ```\nIt is a perennial problem with ORMs and JSON. That feature would be much \nappreciated\n```\n\nOriginal comment by `y.monsoon` on 6 Oct 2011 at 2:34\n =||= Original comment by `limpbizkit` on 30 Dec 2011 at 6:32\n- Changed state: **Duplicate**\n =||= ", 0], ["194", "some other standard ExclusionStrategy needed", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:55 PM", "```\nWhat steps will reproduce the problem?\n1.The purpuse of using json is to be less verbose: in different contexes we \nwon't represent the same pojo by the same fields (we usually use a few \nfields in the object for a given task)\n\nWhat is the expected output? What do you see instead?\nI think it could be a good idea to include in the standard ExclusionStrategy  \nimplementations two additional classes that will just \nuse field names in a class context, we then construct a serializer for each \nbusiness context or ejb:\n1- inclusion strategy by field name\n2- exclusion strategy by field name\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `zhamdi.into` on 12 Feb 2010 at 9:19", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:55\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nThe library flexjson is adapted to these features in java code. \n```\n\nOriginal comment by `zhamdi.into` on 7 Oct 2010 at 7:47\n =||= ```\nIs there a reason that you can not do this now with Gson? The exclusion \nstrategy has a \"FieldAttributes\" object as part of its API. The FieldAttributes \nobject has information about the \"parent\" class (class the possesses this \nfield) and the field's name.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:33\n =||= ```\nHi Joel,\n\nThis post is too old, (feb 10). I didn't follow the evolution of the product, \nit's possible it is supported nowadays.\n```\n\nOriginal comment by `zhamdi.into` on 13 Apr 2011 at 8:17\n =||= ```\nMarking as invalid since it is now obsolete.\n\nSorry for not following up on this right away.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 11:46\n- Changed state: **Invalid**\n =||= ", 0], ["195", "json-lib to gson conversion", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:56 PM", "```\ni have the following code using json-lib\n\nString response = put(command.toString());\nJsonConfig jsonConfig = new JsonConfig();\njsonConfig.setExcludes(new String[]{\"cookie\", \"length\"});\nfinal JSONArray jsonResponse = (JSONArray)\nJSONSerializer.toJSON(response,jsonConfig);\n\nI have to rewrite this code on Android using gson.. I could not find a\nconfigurable Json de-serialzer where i can write excludes as above. Does\nany one have any idea how i can do so.\n```\n\nOriginal issue reported on code.google.com by `daljeet....@gmail.com` on 16 Feb 2010 at 7:17", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:55\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `inder123` on 3 Nov 2010 at 12:29\n- Added labels: **Milestone-Undefined**\n =||= ```\nDoes the exclusion strategy feature support this?\n\nSee \nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/E\nxclusionStrategy.html\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:42\n =||= ```\nReopen if this is still an issue.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:31\n- Changed state: **WontFix**\n =||= ", 0], ["196", "Support serializing local classes", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:57 PM", "```\nWhat steps will reproduce the problem?\n1. Run the following test case\n    @Test\n    public void localClassSerializationFailed()\n    {\n        Gson s = new Gson();\n        class MyLocalClass{\n            String someString=\"SomeValue\";\n        }\n        String serializedString=s.toJson(new MyLocalClass());\n        assertTrue(serializedString.contains(           \n                          \"{\\\"someString\\\":\\\"SomeValue\\\"}\"));\n    }\n\n```\n\nOriginal issue reported on code.google.com by `td.abinesh` on 26 Feb 2010 at 5:32\n- Merged into: #298", "Original comment by `inder123` on 3 Nov 2010 at 1:47\n- Added labels: **Milestone-Undefined**\n =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:41\n- Changed title: **Support serializing local classes**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 9:54\n- Changed state: **Duplicate**\n =||= ", 0], ["197", "StackOverflowError for large maps", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:58 PM", "```\nWhat steps will reproduce the problem?\n\n  public void testLargeGsonMapRoundTrip() throws Exception {\n    Map<Long, Long> original = Maps.newHashMap();\n    for (long i = 0; i < 50000; i++) {\n      original.put(i, i + 1);\n    }\n\n    Gson gson = new Gson();\n    String json = gson.toJson(original);\n\n    Type longToLong = new TypeToken<Map<Long, Long>>(){}.getType();\n    gson.fromJson(json, longToLong);\n  }\n\nWhat is the expected output? \n\nGson should not recurse when parsing map entries. Parsing JSON is not that \nhard, so I suggest not using Javacc. \n\nWhat do you see instead?\n\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@186d484 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:61)\n    at com.google.gson.Gson.fromJson(Gson.java:443)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n...\n\nCaused by: java.lang.StackOverflowError\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_5(JsonParserJavacc.java:449)\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_4(JsonParserJavacc.java:456)\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_2(JsonParserJavacc.java:443)\n    at \ncom.google.gson.JsonParserJavacc.jj_3_1(JsonParserJavacc.java:462)\n    at \ncom.google.gson.JsonParserJavacc.jj_2_1(JsonParserJavacc.java:428)\n    at \ncom.google.gson.JsonParserJavacc.JsonNumber(JsonParserJavacc.java:276)\n    at \ncom.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:213)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at \ncom.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)\n    at \ncom.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n...\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 (in google3)\n\n```\n\nOriginal issue reported on code.google.com by `skybr...@google.com` on 9 Mar 2010 at 7:44", "```\nI have the same problem. My Input is a 18MB json file, which has basically the\nstructure of Map<String, <Map, <String, Map<String, String>>>>\n\n(I 'm not at liberty to provide the file)\n\nThere are only few keys on first level, so each \"value\" is quite large\n```\n\nOriginal comment by `CptMa...@googlemail.com` on 4 May 2010 at 9:26\n =||= ```\nr543 fixes this issue. Thanks for the bug report. The fix also improved Gson\nperformance by 20-30%.\n```\n\nOriginal comment by `inder123` on 19 May 2010 at 9:25\n- Changed state: **Fixed**\n =||= ", 0], ["198", "toJson has many useless character", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:25:59 PM", "```\nStruts2+hibernate3.3+Spring\nSysUserConfig sysUserConfig = \nthis.sysUserConfigService.getSysUserConfig(this.sysUserConfig.getId());\n\nout.write(new GsonBuilder().setDateFormat(\"yyyy-MM-\ndd\").disableHtmlEscaping().create().toJson(sysUserConfig));\n\noutput:\n{\"handler\":{\"interfaces\":[{}],\"constructed\":true,\"persistentClass\":{},\"getI\ndentifierMethod\":{\"clazz\":{},\"slot\":27,\"name\":\"getId\",\"returnType\":{},\"para\nmeterTypes\":[],\"exceptionTypes\":[],\"modifiers\":1,\"root\":{\"clazz\":{},\"slot\":\n27,\"name\":\"getId\",\"returnType\":{},\"parameterTypes\":[],\"exceptionTypes\":[],\"\nmodifiers\":1,\"override\":false},\"override\":false},\"setIdentifierMethod\":{\"cl\nazz\":{},\"slot\":0,\"name\":\"setId\",\"returnType\":{},\"parameterTypes\":[{}],\"exce\nptionTypes\":[],\"modifiers\":1,\"root\":{\"clazz\":{},\"slot\":0,\"name\":\"setId\",\"re\nturnType\":{},\"parameterTypes\":[{}],\"exceptionTypes\":[],\"modifiers\":1,\"overr\nide\":false},\"override\":false},\"overridesEquals\":false,\"entityName\":\"com.tjs\noft.vo.SysUserConfig\",\"id\":\"20100308170143781\",\"target\":{\"id\":\"201003081701\n43781\",\"configName\":\"\u6d4b\u8bd5\",\"userId\":999999999999999,\"slStartDate\":\"2009-01-\n01\",\"slEndData\":\"2010-03-31\",\"createDate\":\"2010-03-\n08\",\"status\":\"1\",\"bjStartDate\":\"2009-01-01\",\"bjEndDate\":\"2010-04-\n02\",\"zaiban\":\"1\",\"banjie\":\"1\",\"suoyou\":\"1\"},\"initialized\":true,\"unwrap\":fal\nse}}\n\nbut i just want:\n\n{\"id\":\"20100308170143781\",\"configName\":\"\u6d4b\n\u8bd5\",\"userId\":999999999999999,\"slStartDate\":\"2009-01-01\",\"slEndData\":\"2010-\n03-31\",\"createDate\":\"2010-03-08\",\"status\":\"1\",\"bjStartDate\":\"2009-01-\n01\",\"bjEndDate\":\"2010-04-02\",\"zaiban\":\"1\",\"banjie\":\"1\",\"suoyou\":\"1\"}\n\nhow can i do it?\n\n```\n\nOriginal issue reported on code.google.com by `ilovehon...@gmail.com` on 19 Mar 2010 at 8:49", "```\nThis doesn't look like a defect. Using GsonBuilder, you can specify to only \nserialize\nobjects which match the @Expose annotation, or you could build a proxy class \nwith\nonly those fields, set them from sysUserConfig, and then serialize that. \n```\n\nOriginal comment by `arcanef...@gmail.com` on 20 Apr 2010 at 5:28\n =||= ```\nThis doesn't look like a defect. Using GsonBuilder, you can specify to only \nserialize\nobjects which match the @Expose annotation, or you could build a proxy class \nwith\nonly those fields, set them from sysUserConfig, and then serialize that. \n```\n\nOriginal comment by `arcanef...@gmail.com` on 20 Apr 2010 at 5:28\n =||= Original comment by `limpbizkit` on 28 Aug 2010 at 5:28\n- Changed state: **Invalid**\n =||= ", 0], ["199", "date format problem", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:01 PM", "```\nWhat is the expected output? What do you see instead?\nexpected:'2010-02-02' actually:{\"nanos\":0} or null\n\nWhat version of the product are you using? On what operating system?\nversion=1.4   system=windows 7\n\nPlease provide any additional information below.\nwhen I select a date field from the database and output the string with\nGson,and the date field displays follow :{\"nanos\":0} or null, but my\ndatabase has date data in it.\n```\n\nOriginal issue reported on code.google.com by `wuguangjian` on 21 Mar 2010 at 7:22", "```\n\u0421onfirm this bug:\n------------\nGson g = new GsonBuilder().create();//setDateFormat(\"'Date('yyyy-MM-\ndd'T'HH:mm:ss.SSSZ')'\").create();\nthrow new Exception(g.toJson(item.shiftBegin) + \"----\" + \nitem.shiftBegin.toString());\n------------\n\"{nanos:0}----2010-05-03 00:00:00.0\"\n```\n\nOriginal comment by `saph...@gmail.com` on 5 May 2010 at 6:49\n =||= ```\nIt's not bug :)\nreturning field from database is \"java.sql.Timestamp\"\nsolution:\n\n...\n    static private class sqlTimestampConverter implements JsonSerializer<Timestamp> {\n        static SimpleDateFormat sdf = new SimpleDateFormat(\"'Date('yyyy-MM-\ndd'T'HH:mm:ss.SSSZ')'\");\n\n        @Override\n        public JsonElement serialize(Timestamp src, Type srcType, \nJsonSerializationContext context) {\n            return new JsonPrimitive(sdf.format(src));\n        }\n    }\n...\n        GsonBuilder gson = new GsonBuilder().setDateFormat(\"'Date('yyyy-MM-\ndd'T'HH:mm:ss.SSSZ')'\");\n        gson.registerTypeAdapter(Timestamp.class, new sqlTimestampConverter());\n\n```\n\nOriginal comment by `saph...@gmail.com` on 7 May 2010 at 8:39\n =||= ```\nThanks saphsys.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:34\n- Changed state: **Invalid**\n =||= ", 0], ["200", "How do I deserialize when the result is sometimes an object and sometimes an array", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:02 PM", "```\n\nI am trying to deserialize a json object which sometimes comes in the form of \nan array of objects \nand sometimes it's the object itself. Is there a way of handling these \nsituations.\n\neg\n\"Categories\":{\"Category\":[{\"id\":\"96926148\",\"content\":\"Food Delivery \nServices\"},{\"id\":\"96926234\",\"content\":\"Carry Out & Take \nOut\"},{\"id\":\"96926238\",\"content\":\"Sandwiches\"},{\"id\":\"96926242\",\"content\":\"Fast \nFood\"},{\"id\":\"96926243\",\"content\":\"Pizza\"}]}\n\nand sometimes\n\n\"Categories\":{\"Category\":{\"id\":\"96926148\",\"content\":\"Food Delivery Services\"}}\n\n\n```\n\nOriginal issue reported on code.google.com by `james.st...@epochsg.com` on 4 Apr 2010 at 3:54", "```\nI know this doesn't directly answer the question, but would it make more sense \nto \nalways have an array in the JSON?  It seems like the data structure in your \nexample \nmakes things more difficult for both the JavaScript and Java.\n\nI would probably try using two different beans on the Java side.  Try one first \nand \nsee if it throws a Gson exception, then try the other one.  Quick and dirty, \nmaybe \nnot the best solution.\n```\n\nOriginal comment by `joshuadr...@gmail.com` on 5 Apr 2010 at 12:51\n =||= ```\nI would definitely agree with your comment although I don't have any control \nover the incoming JSON.\n```\n\nOriginal comment by `james.st...@epochsg.com` on 5 Apr 2010 at 1:27\n =||= ```\nI think you want to create a custom JsonDeserializer<List<Category>>.\n\nThat deserializer should check whether the passed-in object is a JsonArray \n(isJsonArray()) and if so, loop over the contents, converting each to a \nCategory using the passed-in JsonDeserializationContext.\n\nOtherwise it should convert the lone object to a Category, also with the \nJsonDeserializationContext.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:33\n- Changed state: **Invalid**\n =||= ", 0], ["201", "Cannot deserialize JSON into a JsonObject", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:04 PM", "```\nWhat steps will reproduce the problem?\n1. Create a Gson() object\n2. Attempt to deserialize a Json string into a JsonObject instance\n3. Watch as you get an empty JsonObject\n\nWhat is the expected output? What do you see instead?\nIt would be nice to have the JsonObject be populated with the fields and\nvalues from the Json string. This doesn't happen, and instead we receive an\nempty Json object. This is likey to be caused because there is a lack of a\ncustom deserializer for JsonObject, which would fill it up with the fields\nin the Json string.\n\nWhat version of the product are you using? On what operating system?\nVersion 1.4, on OpenSuse Linux\n\n```\n\nOriginal issue reported on code.google.com by `paul.gib...@gmail.com` on 14 Apr 2010 at 7:33", "```\nThere is a workaround. What you can do is write your own custom JsonObject\ndeserializer, and its very simple. I've attached the source.\n\nIts as simple as having a deserializer that returns a JsonObject with this as \nthe\nmethod body for the method \"deserialize\":\n\nreturn json.getAsJsonObject();\n```\n\nOriginal comment by `paul.gib...@gmail.com` on 14 Apr 2010 at 8:11\n\nAttachments:\n- [JsonObjectDeserializer.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-201/comment-1/JsonObjectDeserializer.java)\n =||= ```\nThe workaround should be sufficient.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:46\n- Changed state: **Invalid**\n =||= ", 0], ["202", "Don't include empty ENUMs in serialized output", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:05 PM", "```\nI have a few classes with \n\nprivate final EnumSet<MyEnum> myflags = EnumSet.noneOf(MyEnum.class);\n\nthe JSON-serialized output contains\n\"myflags\":[]\n\nwhich is surprising given that from the docs\n\"This implementation handles nulls correctly, While serialization, a null\nfield is skipped from the output\"\n\nYes, the field isn't null.  But it is empty.  Is there a way to \"skip empty\ncollections\" in the output?\n\nIt would be a huge space saver in the generated JSON file if there was a\nway to skip empty EnumSet (or even better, any empty collection) -\nespecially for outputs that contain a LOT of instances of objects with\nflags in them.\n\nLatest gson release (1.4)\n\n```\n\nOriginal issue reported on code.google.com by `benjamin...@gmail.com` on 15 Apr 2010 at 2:44", "```\nTreating empty as null will change the semantics of Java, so there needs to be \na much better rationale for doing \nthis. In the interim, you can do this by registering a custom serializer for \nyour collections that treats empty as \nnull. I will still advise against doing so though.\n```\n\nOriginal comment by `inder123` on 16 Apr 2010 at 6:17\n- Changed state: **Invalid**\n =||= ```\nhi! We do not want to change semantic of java or more general of the set \ntheory. Yet we all used to live with those issues.\n\nI also miss exactly this GSON feature: to treat empty collection as nulls (and \noptionally omitting in the serialization like already possible). Please let \nthis decision be taken by the developer, if he wants empty fields not to be \nserialized.\n\nan API on the GsonBuilder would be fine for the first time and maybe, extended \nby annotations in the future.\n\nthanks\n```\n\nOriginal comment by `eplisc...@gmail.com` on 2 Apr 2013 at 2:03\n =||= ", 0], ["203", "toJson escapes \"=\" unnecessarily in raw strings", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:06 PM", "```\nWhat steps will reproduce the problem?\n1. Create an object with a single String field.\n2. Set field to \"http://someUrl.com?a=b\"\n3. Attempt to convert the object to json via gson.toJson\n\nWhat is the expected output? What do you see instead?\nI would expect the URL to be serialized exactly as it is written. Instead, \nthe equals sign is encoded as \\u003d.\n\nWhat version of the product are you using? On what operating system?\n1.4\n\n\n```\n\nOriginal issue reported on code.google.com by `arcanef...@gmail.com` on 20 Apr 2010 at 5:08", "```\nI also think this is a bug. It is causing problems when I am trying to turn \nbase64 encoded string (which ends with equals sign) into JSON.\n```\n\nOriginal comment by `dennis.d...@gmail.com` on 11 Jun 2010 at 9:27\n =||= ```\nHope this will help you :\n\nGson gson = new GsonBuilder().disableHtmlEscaping().create();\n```\n\nOriginal comment by `Cassel.G...@gmail.com` on 30 Jul 2010 at 7:33\n =||= ```\nwhat version of library?\n```\n\nOriginal comment by `zlob...@gmail.com` on 2 Aug 2010 at 2:00\n =||= ```\nWorking fine for me now If I use below code to create Gson object. \n\nGson gson = new GsonBuilder().disableHtmlEscaping().create();\n\nThanks to Cassel.Guillaume.\n```\n\nOriginal comment by `sadineni...@gmail.com` on 18 Aug 2010 at 8:30\n =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:32\n- Changed state: **Invalid**\n =||= It's un-reasonable to enable html escaping. This escape is un-necessary in most of situation. \n =||= I am having exactly the same issue here: trying to export an object that contains an equal sign in URL but only got a string contains the escaping character instead. If the object is exported to JSON in classes of different hierarchies, then each class that may contain the original class needs to use GsonBuilder and explicitly disabling HTML escaping.\n\nA solution should allow that if nested object specifies disabling HTML escaping, then outer classes should not need to specify it again. Redundancy is always the enemy of software engineering.\n =||= ", 0], ["204", "Empty Maps crash the json rendering when pretty printing is used - the next comma is missing from output", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:07 PM", "```\nTest Code:\n\nHashMap<String, Object> hs = new HashMap<String, Object>();\nHashMap<String, Object> details = new HashMap<String, Object>();\n\nhs.put(\"id\", 12);\nhs.put(\"name\", \"Alejandro\");\nhs.put(\"details\", details);\n\nBoolean includeNullFields = true;\nBoolean prettyRender = true;\n\ntry {\n\n    GsonBuilder gsonBuilder = new GsonBuilder();\n\n    if (includeNullFields && prettyRender)\n        gsonBuilder.serializeNulls().setPrettyPrinting();\n    else if (includeNullFields && !prettyRender)\n        gsonBuilder.serializeNulls();\n    else if (!includeNullFields && prettyRender)\n        gsonBuilder.setPrettyPrinting();\n\n    Gson gson = null;\n    gson = gsonBuilder.create();\n    String jsonResponse = gson.toJson(hs);\n\n    System.out.println(jsonResponse);\n\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n\nThe above code outputs: \n{\"id\":12,\"details\":{}\"name\":\"Alejandro\"}\n\n\nIf Pretty Printing is NOT used then the output is correct:\n{\"id\":12,\"details\":{},\"name\":\"Alejandro\"}\n\n\n```\n\nOriginal issue reported on code.google.com by `bobghera...@gmail.com` on 21 Apr 2010 at 10:09", "```\nThe code in SVN works. I checked in a test case with r593.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:45\n- Changed state: **Fixed**\n =||= ", 0], ["205", "Confusing behavior when Object is the field type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:08 PM", "```\nWhat steps will reproduce the problem?\n1. Object[] array = new Object[] { new Object[] { 1, 2 } };\n2. Gson gson = new Gson();\n3. System.out.println(gson.toJson(array));\n\nWhat is the expected output? \n[[1,2]]\n\nWhat do you see instead?\n[{}]\n\nWhat version of the product are you using? On what operating system?\n1.4 on Windows XP.\n\nPlease provide any additional information below.\nI may be doing this wrong...  Is that behavior intentional?\n```\n\nOriginal issue reported on code.google.com by `michael.hixson@gmail.com` on 23 Apr 2010 at 10:51", "```\nI add something similar to your problem, issue 209.\nI \"fix\" your problem as following on version 1;3 (1.4 is beta did not look at \nit):\nClass: com.google.gson.JsonSerializationVisitor\nMethod: visitArray\n\nOld content\n  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      Type childType = componentType;\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\n      addAsArrayElement(new ObjectTypePair(child, childType, false));\n    }\n  }\n\nNew content\n  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      // we should not get more specific component type yet since it is possible\n      // that a custom\n      // serializer is registered for the componentType\n      addAsArrayElement(new ObjectTypePair(child, child.getClass(), false));\n    }\n  }\n\nEtienne\n```\n\nOriginal comment by `lapinouj...@gmail.com` on 15 May 2010 at 1:02\n =||= ```\nSorry my thread was for the current version in trunk.\nFor version 1.3 I did the folowwing:\nClass: com.google.gson.JsonSerializationVisitor\nMethod: visitArray\nOld content\n  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);\n    Type componentType = fieldTypeInfo.getSecondLevelType();\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      addAsArrayElement(componentType, child);\n    }\n  }\n\nNew content\n  public void visitArray(Object array, Type arrayType) {\n    assignToRoot(new JsonArray());\n    int length = Array.getLength(array);\n    for (int i = 0; i < length; ++i) {\n      Object child = Array.get(array, i);\n      addAsArrayElement(child.getClass(), child);\n    }\n  }\n\nEtienne\n```\n\nOriginal comment by `lapinouj...@gmail.com` on 15 May 2010 at 1:10\n =||= Original comment by `inder123` on 3 Nov 2010 at 1:48\n- Added labels: **Milestone-Release1.7**\n =||= ```\nFYI - you can work around this by providing static type information when \ncalling toJson().\n  toJson(array, Integer[][].class);\n\nIn general GSON works better when it knows the types of everything!\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:43\n =||= ```\n@limpbizkit: Understood.  \n\nIn the situation that led to this report, those arrays were buried deep within \na Map<String, Object>, which contained many nested maps, collections, and \narrays of various types.  I was building this data structure up in Java and \nwanted to convert it to JSON in one pass, so that solution would not have been \npractical for me.  \n```\n\nOriginal comment by `michael.hixson@gmail.com` on 3 Nov 2010 at 5:44\n =||= ```\nYup, good to know. One thing we should consider doing is using runtime types \nwhenever \"Object\" is the static type.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 5:54\n =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:52\n- Changed title: **Confusing behavior when Object is the field type**\n =||= ```\nIssue 245 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:53\n =||= ```\nI have an inkling that this works in Gson 1.7.\n\nWe have a test for a Collection<Object>, Object[] and a Map<String,Object>.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:16\n =||= ```\nThe array of object arrays is actually assigned to an \"Object[][]\" instead of \nObject[] than it does work as expected.\n\nMarking this as fixed because since it would be a super crazy use case if \nsomeone actually need to assign an array of object arrays to a type object \narray.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 5:19\n- Changed state: **Fixed**\n =||= ```\nI think you've misunderstood the use case and the bug report, and you've marked \nthis \"fixed\" when you meant \"closed\" or \"won't fix\".  \n\n  Gson gson = new Gson();\n  System.out.println(\n    gson.toJson(new Object[] { 1, 2, new Object[] { \"foo\", 3 } })\n  );\n\nExpected output:\n\n  [1,2,[\"foo\",3]]\n\nActual output:\n\n  [1,2,{}]\n\nObviously, that code won't compile if you put \"new Object[][]\" in place of \"new \nObject[]\".  What type would you suggest instead, to hold \"{ 1, 2, new Object[] \n{ \"foo\", 3 } }\" ?\n\nThis report didn't come from a contrived use case designed to break Gson.  \nPlease see comment #5.\n```\n\nOriginal comment by `michael.hixson@gmail.com` on 15 Apr 2011 at 5:46\n =||= ```\nOK, I see. I did misunderstand your initial example, but the above example \nmakes it more clear because now I see you are mixing primitives (or objects) \nand arrays within an array.\n\nAgain, I stand by my statement that is is a super crazy use-case to support, \nbut I'd like to hear the your reasoning as to why this is wanted. The only \nthing that I can think of is that you are trying to form some object that will \nobject the correct JSON value for you. If that's the case then I recommend that \nyou build up the output using the JsonElement objects (i.e. JsonArray, \nJsonObject, JsonPrimitive) and generate the output that way.\n\nI will reopen this issue to hear your thoughts.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 10:08\n- Changed state: **New**\n =||= ```\nI swear, I'm not crazy! :)\n\nI was passing a large amount of data from a Java-based back end to a \nJavaScript-based front end.  It seemed only natural to form the container for \nthis data in Java using maps, arrays/collections, strings, and primitives, \nwhich have counterparts in JSON.  Then I'd use some Java-to-JSON tool to make \nthe data readable by the client.  \n\nThe JavaScript didn't know or care about the Java types being used, or whether \nthey were being mixed - [ 1, 2, [ \"foo\", 3 ] ] is an array like any other.  Why \nshould I avoid that mixing on the Java side when the JavaScript doesn't care?  \nThe front end might (does) even encourage it in some cases.  For instance, look \nat the API for Flot:\n\n  http://people.iola.dk/olau/flot/API.txt\n\nSpecifically, see the section about gradients.  What I declare as the \nbackgroundColor of a graph could be a string, or an array of strings, of an \narray of maps of strings to numbers.  \n\nWhy do I need to worry about that on the Java side?  I shouldn't, but with \nGson, I do.  Even with the weak example in my initial report:\n\n  new Object[] { new Object[] { 1, 2 } }\n\nWho would want that to render in JSON as \"[{}]\" ?  It seems plain that's not \nthe right representation.  If I have to add a second set of square brackets, \nthen I'd be doing so only to appease Gson, because of the particulars in how \nGson was implemented.  \n\nAddressing your suggestion to use JsonElement objects:  I wouldn't want to tie \nmyself to a particular Java-to-JSON library in this way.  If my Java object is \nmade of things that have an obvious counterpart in JavaScript, then I'd think a \nnumber of tools could do the JSON conversion for me.  I could choose between \nthem based on correctness and performance.  Meanwhile, using Gson's API for \nbuilding the entire structure would marry me to Gson.\n```\n\nOriginal comment by `michael.hixson@gmail.com` on 18 Apr 2011 at 1:26\n =||= ```\nTo paraphrase, you want to build up a JSON parse tree using Java constructs \ninstead of using the Gson parse tree constructs. JsonObject --> Map<String, \nObject>, JsonArray --> List<Object> or Object[], JsonPrimitive --> (String, \nint, long, ....), JsonNull ---> null.\n\nWe talked about getting rid of the JsonElement parse tree hierarchy and have \nGson use the common Java classes to map to JSON structures; however, this makes \nwriting JsonSerializers and deserializers very difficult and hard to \nunderstand. That said, Gson should definitely be able to handle this use case \nand it is a bug.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:22\n- Changed state: **Accepted**\n =||= ```\nFixed in r828.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33\n- Changed state: **Fixed**\n =||= ```\nSee the new test added here:\nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/\ngoogle/gson/functional/ArrayTest.java?r=829#280\n\nFYI, we are planning to launch a version 1.7.2 in the next two weeks that will \ncontain only bug fixes and performance enhancements. Stay tuned.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:44\n =||= ```\nAwesome!\n\nGson can't deserialize its own JSON output for these mixed-type objects, \ncorrect?  That is, unless the user writes a custom deserializer?  (I'm not \nsuggesting it should; I'm wondering about the nature of your changes above.)\n```\n\nOriginal comment by `michael.hixson@gmail.com` on 21 Apr 2011 at 12:25\n =||= ", 0], ["206", "Make it possible to build Gson with Ant directly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:12 PM", "```\nThe Maven integration is nifty, but I believe the use of Ant is far more\nwidespread than that of Maven, so it would be nice if it weren't required.\nI suppose the counterargument is to use this guy:\n\nhttp://maven.apache.org/plugins/maven-ant-plugin/index.html\n\nThough that still requires installing and setting up Maven initially, so\nthat doesn't exactly solve the problem.\n\n```\n\nOriginal issue reported on code.google.com by `bolinf...@gmail.com` on 27 Apr 2010 at 4:06", "```\nHere is an example of ANT script:\nbuild.xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"Juridoc Client\" basedir=\".\">\n    <property file=\"build.properties\" />\n\n    <!-- Init all properties for the ANT script -->\n    <property name=\"jarsDir\" value=\"${build.dir}/${build.dir.package}\" />\n    <property name=\"compileDir\" value=\"${build.dir}/${build.dir.gson}\" />\n    <property name=\"resourcesDir\" value=\"${project.dir}/src/main/resources\" />\n    <property name=\"sourceDir\" value=\"${project.dir}/src/main/java\" />\n    <property name=\"jarName\" value=\"${build.name.gson}\" />\n\n    <target name=\"compile\" depends=\"setup\" description=\"Compile into ${compileDir}\">\n        <!-- Compile the client source -->\n        <javac srcdir=\"${sourceDir}\" destdir=\"${compileDir}\" source=\"${version.source}\"\ntarget=\"${version.compile}\" debug=\"on\" encoding=\"${compile.encoding}\">\n        </javac>\n    </target>\n\n    <target name=\"package\" depends=\"setupJAR, compile\" description=\"Package to file\n${jarName}\">\n        <!-- Build the manifest file -->\n        <manifest file=\"MANIFEST.MF\">\n            <attribute name=\"Build-Version\" value=\"${build.version.num}\"/>\n        </manifest>\n        <copy todir=\"${compileDir}\">\n            <fileset dir=\"${resourcesDir}\" includes=\"**/*.*\" />\n        </copy>\n        <!-- Build the jar with compilation folder content -->\n        <jar destfile=\"${jarsDir}/${jarName}\" manifest=\"MANIFEST.MF\">\n            <fileset dir=\"${compileDir}\" includes=\"**\" />\n        </jar>\n        <!-- Delete the compilation folder -->\n        <delete dir=\"${compileDir}\" />\n        <!-- Delete the manifest file -->\n        <delete file=\"MANIFEST.MF\" />\n    </target>\n\n    <target name=\"deploy\" depends=\"package\" />\n\n    <target name=\"setup\" description=\"Creates the ${compileDir} directory\">\n        <!-- generate the client compilation folder -->\n        <delete dir=\"${compileDir}\" />\n        <mkdir dir=\"${compileDir}\" />\n    </target>\n\n    <target name=\"setupJAR\" description=\"Creates the ${jarsDir} directory\">\n        <!-- generate the jar folder -->\n        <mkdir dir=\"${jarsDir}\" />\n    </target>\n\n</project>\n\nbuild.properties:\nbuild.dir=c:/temp/gson\n\nbuild.dir.gson=gson-core\nbuild.name.gson=gson-1.3-patch.jar\nbuild.dir.package=jars\n\nbuild.version.num=1.3\n\nproject.dir=.\n\ncompile.encoding=ISO_8859-1\nversion.source=1.5\nversion.compile=1.5\n```\n\nOriginal comment by `lapinouj...@gmail.com` on 15 May 2010 at 12:52\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:52\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nIt's hard enough to support one build system. If you'd like to use Ant, I \ninvite you to copy the build.xml above into your copy of GSON.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 9:46\n- Changed state: **WontFix**\n =||= ", 0], ["207", "Handle bitsets correctly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:14 PM", "```\nSee \nhttp://groups.google.com/group/google-gson/browse_thread/thread/535892ffcf691aa\nfor details on the bug\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Apr 2010 at 4:19", "```\nThere's many different ways to map a bit set to JSON...\n\nSuppose we're given the bit set 100101100. Here are some options:\n  bit array: [1,0,0,1,0,1,1,0,0]\n  bit string: \"100101100\"\n  hex array: [\"01\",\"2C\"]\n  hex string: \"012C\"\nHex is compact but it cannot preserve the length attribute of the bit set.\n\nI'd prefer that we leave this up to the application developer, who will be able \nto make an informed decision. They'll need to weigh the tradeoffs between \nencoded length and retention of the bit set length.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:27\n- Changed state: **WontFix**\n =||= ```\n(The application developer would be expected to create a type adapter for the \nbit set, and register that in their GsonBuilder)\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:28\n =||= ```\nWe should consider writing a sample type adapter for bitset in our guide. \nhttp://sites.google.com/site/gson/gson-user-guide\n```\n\nOriginal comment by `inder123` on 3 Nov 2010 at 7:53\n =||= ```\nMost of the BitSet problems are occurred by using Gson in Google AppEngine. I \nalso got the same problem. In most cases, I think most of the people don't use \nand don't care about it, because we can't use this kind of type in our value \nobject.\n\nHere is a snapshot of this exception thrown in Google Appengine.\n\njava.lang.SecurityException: java.lang.IllegalAccessException: Reflection is \nnot allowed on private static final int java.util.BitSet.ADDRESS_BITS_PER_WORD\n    at com.google.appengine.runtime.Request.process-56ead41f7d18d602(Request.java)\n    at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:29)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:149)\n\n\nPeople can implement a default BitSetSerializer like this:\n\nimport java.lang.reflect.Type;\nimport java.util.BitSet;\n\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonSerializationContext;\nimport com.google.gson.JsonSerializer;\n\npublic class BitSetSerializer implements JsonSerializer<BitSet> {\n\n  @Override\n  public JsonElement serialize(BitSet src, Type arg1, JsonSerializationContext arg2) {\n    return null; //I dont care about it !!!\n  }\n\n}\n\nHope this can help you work around this problem in AppEngine\n```\n\nOriginal comment by `matt.jiang` on 13 Mar 2011 at 1:25\n =||= ```\nThis is fixed and will be in the next release.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 4:10\n =||= ```\nThanks for posting that Matt; I was running in the exact same problem and that \ndid the trick.  I just created a new gson builder with that BitSetSerializer:\n\nGsonBuilder gsonBuilder = new GsonBuilder();\ngsonBuilder.registerTypeAdapter(java.util.BitSet.class, new BitSetSerializer());\n```\n\nOriginal comment by `ad...@cosanta.com` on 14 May 2011 at 2:34\n =||= ", 0], ["208", "GWT client-side support", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:15 PM", "```\nRequested feature enhancement. I realize introspection is unavailable in a \nGWT client-side environment. But it'd be so great and simple to use if you \ncould use some sort of GWT.create() version.\n```\n\nOriginal issue reported on code.google.com by `christop...@gmail.com` on 10 May 2010 at 12:21", "```\nIs it currently possible to, at least, use the GSON annotations \n(@SerializedName, @Expose, @Since...) in objects that can be sent over the wire \nin a GWT RPC call?   \n\n\n```\n\nOriginal comment by `pohl.lon...@gmail.com` on 29 Jun 2010 at 5:29\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:52\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `limpbizkit` on 18 Mar 2012 at 8:17\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:47\n- Changed state: **WontFix**\n =||= ```\n> But it'd be so great and simple to use if you \n> could use some sort of GWT.create() version.\n\nThat would be very tough. IMHO writing a GWT generator that does a compatible \nserialization should be possible but deserialization without knowing all \npossible classes to receive would almost be impossible. I have the same need \nand am looking for such solution. However, I think this would need to be \nprovided by GWT itself as it needs deeper integration. It should also not be in \nthe way for code-splitting.\nWatch m-m-m.sf.net (mmm-service) if you want to see if I am lucky finding the \nright solution.\n\n> Is it currently possible to, at least, use the GSON annotations \n> (@SerializedName, @Expose, @Since...) in objects that can be sent \n> over the wire in a GWT RPC call?  \n\nThat is fairly easy. All you need to do for that is writing a *.gwt.xml for \ngson.\nI could provide this.\n\nUnfortunately it seems that the makes of gson do not care about GWT :(\n```\n\nOriginal comment by `joerg.ho...@googlemail.com` on 20 Feb 2013 at 8:48\n =||= ```\nI have write a library that allows using GWT with Gson, you can download here \nand enjoy it: https://github.com/heroandtn3/bGwtGson\n```\n\nOriginal comment by `heroand...@gmail.com` on 10 May 2013 at 11:37\n =||= ", 0], ["209", "Can not serialize when the bean contains a List of object defined by interfaces", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:17 PM", "```\nWhat steps will reproduce the problem?\nSee the code:\n\npublic class FirstImpl implements First {\n\n    private String name;\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n\npublic interface First {\n\n    public String getName();\n\n    public void setName(String name);\n\n}\n\nimport java.util.List;\n\npublic class ParentFirst {\n\n    private String name;\n    private List<First> firsts;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public List<First> getFirsts() {\n        return this.firsts;\n    }\n\n    public void setFirsts(List<First> firsts) {\n        this.firsts = firsts;\n    }\n}\n\nimport java.util.List;\n\npublic class ParentFirstImpl {\n\n    private String name;\n    private List<FirstImpl> firsts;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public List<FirstImpl> getFirsts() {\n        return this.firsts;\n    }\n\n    public void setFirsts(List<FirstImpl> firsts) {\n        this.firsts = firsts;\n    }\n}\n\nGson gson = new Gson();\nString json = null;\n\nFirstImpl firstClass = new FirstImpl();\nfirstClass.setName(\"First name by class\");\njson = gson.toJson(firstClass);  \nSystem.out.println(json);\n\nFirst firstInterface = new FirstImpl();\nfirstInterface.setName(\"First name by interface\");\njson = gson.toJson(firstInterface);  \nSystem.out.println(json);\n\nList<FirstImpl> firstsClass = new ArrayList<FirstImpl>();\nfirstsClass.add(firstClass);\njson = gson.toJson(firstsClass);\nSystem.out.println(json);\n\nList<First> firstsInterface = new ArrayList<First>();\nfirstsInterface.add(firstInterface);\njson = gson.toJson(firstsInterface);\nSystem.out.println(json);\n\nParentFirst parentFirst = new ParentFirst();\nparentFirst.setName(\"List first name by interface\");\nparentFirst.setFirsts(firstsInterface);\njson = gson.toJson(parentFirst);\nSystem.out.println(json);\n\nParentFirstImpl parentFirstImpl = new ParentFirstImpl();\nparentFirstImpl.setName(\"List first name by class\");\nparentFirstImpl.setFirsts(firstsClass);\njson = gson.toJson(parentFirstImpl);\nSystem.out.println(json);\n\n\nWhat is the expected output? What do you see instead?\nExpected:\n[{\"name\":\"First name by class\"}]\n[{\"name\":\"First name by interface\"}]\n{\"name\":\"List first name by interface\",\"firsts\":[{\"name\":\"First name by\nclass\"}]}\n{\"name\":\"List first name by class\",\"firsts\":[{\"name\":\"First name by class\"}]}\n\nSee:\n[{\"name\":\"First name by class\"}]\n[{\"name\":\"First name by interface\"}]\n{\"name\":\"List first name by interface\",\"firsts\":[{}]}\n{\"name\":\"List first name by class\",\"firsts\":[{\"name\":\"First name by class\"}]}\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nI am actually debugging to see if I can find a patch, even if i write a\ncustom serializer should work.\n```\n\nOriginal issue reported on code.google.com by `lapinouj...@gmail.com` on 14 May 2010 at 10:35\n- Merged into: #231", "```\nFind a quick patch for version 1.3 and for current source. But I did not already\nunderstood everything (just 2h on the project).\n\nThen for version 1.3:\nClass: com.google.gson.JsonSerializationVisitor\nMethod: visitFieldUsingCustomHandler\nLine 148 (may change)\nReplace: JsonElement child = serializer.serialize(obj, actualTypeOfField, \ncontext);\nby: JsonElement child = serializer.serialize(obj, obj.getClass(), context);\n\nFor current version from svn:\nClass: com.google.gson.JsonSerializationVisitor\nMethod: visitFieldUsingCustomHandler\nLine 203\nReplace: ObjectTypePair objTypePair = new ObjectTypePair(obj, \ndeclaredTypeOfField,\nfalse);\nby: ObjectTypePair objTypePair = new ObjectTypePair(obj, obj.getClass(), false);\n\nI ran Junit test before and after the modification.\nI got 3 errors and 6 failures, but they are the same. So the modification may \nnot\nhave consequence.\n\nIs the patch correct ?\n\n```\n\nOriginal comment by `lapinouj...@gmail.com` on 14 May 2010 at 11:47\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:35\n- Changed state: **Duplicate**\n =||= ", 0], ["210", "Cannot serialize or deserialize Maps with complex keys", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:18 PM", "```\nimport java.util.HashMap;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\n\npublic class GsonTest {\n\n    public static void main(String[] args) {\n\n        new GsonTest();\n\n    }\n\n    public GsonTest() {\n        HashMap<ComplexKey, String> map = new HashMap<ComplexKey, String>();\n\n        map.put(new ComplexKey(\"Test1\", \"Test2\"), \"Value1\");\n\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(map, new TypeToken<HashMap<ComplexKey,\nString>>(){}.getType()));\n    }\n\n    public class ComplexKey {\n\n        private String keyOne;\n        private String keyTwo;\n\n        public ComplexKey(String keyOne, String keyTwo) {\n            this.keyOne = keyOne;\n            this.keyTwo = keyTwo;\n        }\n\n        public String getKeyOne() {\n            return keyOne;\n        }\n\n        public void setKeyOne(String keyOne) {\n            this.keyOne = keyOne;\n        }\n\n        public String getKeyTwo() {\n            return keyTwo;\n        }\n\n        public void setKeyTwo(String keyTwo) {\n            this.keyTwo = keyTwo;\n        }\n    }\n}\n\nExpected Output:\n{\"{\"keyOne\":\"Test1\",\"keyTwo\":\"Test2\"}\":\"Value1\"}\n\n\nActual Output:\n{\"GsonTest$ComplexKey@1172e08\":\"Value1\"}\n\n\n```\n\nOriginal issue reported on code.google.com by `rev...@paradise.net.nz` on 25 May 2010 at 2:53", "```\n[deleted comment]\n```\n =||= ```\nI have investigated this a bit and written some code (got toJson to work, but \nparsing\nfails), but what is really the expected behavior? What you expect is probably \nnot\nlegal JSON, as the quotation marks are nested.\n\nI am beginning to wonder if the best solution for complex keys is to encode it \nas:\n\n{\"key\":{\"keyOne\":\"Test1\",\"keyTwo\":\"Test2\"},\"value\":\"Value1\"}\n\n```\n\nOriginal comment by `marius.k...@gmail.com` on 6 Jun 2010 at 3:56\n =||= ```\nI have implemented the solution mentioned above (with those in an array) in the \ncases the key consists of a complex key (not representable as text).\n\nPatch is attached. The code could maybe be cleaner, but all tests and a new for \nthis case passes.\n```\n\nOriginal comment by `marius.k...@gmail.com` on 9 Jun 2010 at 12:19\n\nAttachments:\n- [0001-Fixed-serialization-of-Map-with-complex-key.-Solves-.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-210/comment-3/0001-Fixed-serialization-of-Map-with-complex-key.-Solves-.patch)\n =||= ```\nAdopting something like the above patch would make my life so much better. :)\n```\n\nOriginal comment by `jsha...@google.com` on 28 Aug 2010 at 6:36\n =||= ```\nIssue 224 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 8:26\n =||= ```\nIssue 228 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:50\n =||= ```\nIssue 214 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:51\n =||= ```\nI did some exploring and it's possible to fix this by registering a type \nadapter. I've created a type adapter that takes any map and serializes it as a \nJSON array. It's pretty fantastic and it should work for anyone stuck on this \nbug.\n\nI'd like to get this patch included in GSON 1.7. I'm not committing it directly \nbecause we're still stabilizing GSON 1.6.\n```\n\nOriginal comment by `limpbizkit` on 8 Nov 2010 at 9:06\n- Changed state: **Accepted**\n- Added labels: **Milestone-Release1.7**\n\nAttachments:\n- [map_as_array_type_adapter.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-210/comment-8/map_as_array_type_adapter.patch)\n =||= ```\nWell, the only problem with this patch is that you need to explicitly add the \ntype adapter. It will not work automatically work and be compatible with data \nsaved with older versions, thus it can't be added as default.\n\nMy approach above tries to detect if we are dealing with a type that can be \nserialized as string and choose strategy (but i don't remember if it works \nfully, as I don't know too much of the internals of GSon).\n```\n\nOriginal comment by `marius.k...@gmail.com` on 9 Nov 2010 at 9:01\n =||= ```\nFixed in r702 with one explicit type adapter for all maps. This new type \nadapter works for arbitrary maps with both complex and non-complex keys.\n```\n\nOriginal comment by `limpbizkit` on 12 Jan 2011 at 12:23\n- Changed state: **Fixed**\n =||= ```\nFor any internet travelers from the future (like myself)... you can enable this \nfunctionality in GSON 2.* with the enableComplexMapKeySerialization() method on \nGsonBuilder.\n```\n\nOriginal comment by `jakewhar...@gmail.com` on 9 Jan 2013 at 8:29\n =||= enableComplexMapKeySerialization() is a great help and should be default. Thanx for the hint! =||= @electronicpeter  It isn't default because doing so will break backward compatibility =||= ", 0], ["211", "Giant strings can be used to DoS parsing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:21 PM", "```\nWhat steps will reproduce the problem?\n1. Create a small json file with one name field really big (let's say 3 Mb)\n2. Parse that String\n\nWhat is the expected output? What do you see instead?\nAlthough the json object is really small one, the fact of having that\nreally big name field makes the parsing really slow.\n\nWhat version of the product are you using? On what operating system?\nI have tested that with 1.3 and 1.4.  Ubuntu 9.10\n\nPlease provide any additional information below.\nAlthough it seems not so important because no one should create a json\nobject like that , this is an important issue when trying to avoid DoS attacks.\n```\n\nOriginal issue reported on code.google.com by `Enrique....@gmail.com` on 26 May 2010 at 6:02", "```\nWe're susceptible to denial-of-service attacks on massive strings. I don't \nthink we can really work around this, since there can be many situations where \nmalicious input data will overwhelm a system. For example, an unterminated \nstream. Or very high magnitude numbers.\n\nIf you absolutely need to accept JSON from an untrusted source, sanitize it in \na separate Java process. Give that process a fixed small memory ceiling, and \nrun the parse with a short timeout.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:38\n- Changed title: **Giant strings can be used to DoS parsing**\n- Changed state: **Invalid**\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ", 0], ["212", "Make it possible to allow comments in JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:22 PM", "```\nI am working on a project (http://code.google.com/p/plovr/) that is trying\nto use JSON as the format for a config file. The inability to comment\nsomething out is making me consider XML instead :( You can see the\nworkaround that I'm using (which I believe is what Crockford recommends) here:\n\nhttp://code.google.com/p/plovr/source/browse/test/org/plovr/integration-test-con\nfig.js\n\nThis is a pretty horrible option for multi-line comments, or when you are\nexperimenting and are frequently enabling/disabling various options.\n\nI realize that // and /* comments are no longer part of the JSON spec, but\nin practice, it would be great if it were possible to instantiate a\ncom.google.gson.JsonParser() in such a way that it would tolerate comments.\nI believe some of the other JSON parsers offer this mode.\n\n```\n\nOriginal issue reported on code.google.com by `bolinf...@gmail.com` on 2 Jun 2010 at 1:42", "```\nFixed by r584.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:34\n- Changed state: **Fixed**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\n[deleted comment]\n```\n =||= Is there no way to mark a comment as spam? (i.e. the two comments above?)\n =||= ", 0], ["213", "Typo", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:24 PM", "```\nWhat steps will reproduce the problem?\n1. Go to http://sites.google.com/site/gson/gson-user-guide#TOC-Writing-a-\nSerializer\n2. There is no return statement in the method definition for \nDateTimeSerializer.\n\nWhat is the expected output? What do you see instead?\nThe return statement is missing.\n\nWhat version of the product are you using? On what operating system?\nAny browser, any os.\n\n\n```\n\nOriginal issue reported on code.google.com by `jeremyfl...@gmail.com` on 6 Jun 2010 at 10:42", "```\nFixed. Thanks!\n```\n\nOriginal comment by `limpbizkit` on 3 Sep 2010 at 6:49\n- Changed state: **Fixed**\n =||= ", 0], ["214", "Map key can not use java bean.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:24 PM", "```\nWhat steps will reproduce the problem?\n1.User.java\n\npackage gson.test;\n\npublic class User {\n\n    private String id;\n\n    private String name;\n\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return \"User [id=\" + id + \", name=\" + name + \"]\";\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n2.Test.java\npackage gson.test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\npublic class Test {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        Gson gson = new Gson();\n        User user = new User();\n        user.setId(\"1001\");\n        user.setName(\"\u5f20\u4e09\");\n\n        Map<User,User> map = new HashMap<User, User>();\n        map.put(user, user);\n        String jsonString = gson.toJson(map);\n        System.out.println(jsonString);\n        Object o = gson.fromJson(jsonString,new TypeToken<Map<User, User>>(){}.getType());\n        System.out.println( o);\n    }\n\n}\n\n3.\n\nWhat is the expected output? What do you see instead?\n{\"User [id=1001, name=\u5f20\u4e09]\":{\"id\":\"1001\",\"name\":\"\u5f20\u4e09\"}}\nException in thread \"main\" com.google.gson.JsonParseException: Expecting object \nfound: \"User [id=1001, name=\u5f20\u4e09]\"\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:100)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonPrimitive(JsonDeserializationContextDefault.java:84)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:53)\n    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:531)\n    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:498)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:50)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:88)\n    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:76)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:495)\n    at com.google.gson.Gson.fromJson(Gson.java:444)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n    at gson.test.Test.main(Test.java:24)\n\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `haoks...@gmail.com` on 10 Jun 2010 at 5:52\n- Merged into: #210", "Original comment by `limpbizkit` on 3 Sep 2010 at 6:51\n- Changed state: **Duplicate**\n =||= ", 0], ["215", "Deserialization of List with one item", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:25 PM", "```\nI am using GSON for JSON deserialization and so far it has been a great help.\nBut I am struggling with an issue with de serialization of List with generic \nand concrete types when the list contains only one element.\n\nFor example - \n\npublic class Department {\n    public String name;\n    public String code;\n}\n\npublic class Product {\n\n        private List<String> attributes;\n        private List<Department> departments;\n\n        public List<String> getAttributes() {\n            return attributes;\n        }\n\n        public void setAttributes(List<String> attributes) {\n            this.attributes = attributes;\n\n        public List<Department> getDepartments() {\n            return departments;\n        }\n\n        public void setDepartments(List<Department> departments) {\n            this.departments = departments;\n\n    }\n}\n\nThis works fine if either of my list attributes or departments contain more \nthan one item in the list.\nBut if it contains only element in the list - I get an error saying - no valid \nJSON Array\n\nPlease help!\n\n\n```\n\nOriginal issue reported on code.google.com by `nitin.na@gmail.com` on 12 Jun 2010 at 2:04", "```\nI couldn't reproduce this. Please provide a JUnit test case if it continues to \nbe a problem.\nhttp://code.google.com/p/google-gson/source/detail?r=582\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:10\n- Changed state: **Invalid**\n =||= ", 0], ["216", "Does gson should work for a Blackberry application?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:25 PM", "```\nWhat steps will reproduce the problem?\n1. Create a Java BlackBerry application at Eclipse\n2. Add the gson JARs as external jars\n3. Try to run the application in the simulator. Wont run: module not found error\n\nTried to preverify class and it's throwing an error\n\nWhat is the expected output? What do you see instead?\nShould be able to run the application without errors.\n\nWhat version of the product are you using? On what operating system?\ngson 1.4, Eclipse Galileo, latest Blackberry SDK (1.2)\n\nPlease provide any additional information below.\nIf I select to Export the JAR at the project's properties it wont even get \npacked, it will throw an error when packing\n```\n\nOriginal issue reported on code.google.com by `arturo.o...@gmail.com` on 16 Jun 2010 at 9:10", "```\nCould you paste the error? What version of Java does Blackberry SDK 1.2 support?\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:34\n- Changed state: **Invalid**\n =||= ```\nI'm working with a BlackBerry project in which I would like to use gson to \nretrieve data from server. I have a BlackBerry Client which should consume json \npayload from my server. After a few attempts I came to know that gson is not \ndesigned keeping blackberry in mind. I would be desirable to have this feature \nin gson.\n\nI'm attaching the trace...\n\ncom.google.gson.DefaultTypeAdapters$CharacterTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter: Warning!: \nDuplicate method only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer: Warning!: \nDuplicate method only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter: Warning!: \nDuplicate method only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$IntegerTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$BigIntegerTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$UrlTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$UriTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$NumberTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$BigDecimalTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$ShortTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$EnumTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$StringTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$FloatDeserializer: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$LongDeserializer: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$UuidTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.JsonStreamParser: Warning!: Duplicate method only differs by \nreturn type: next\ncom.google.gson.DefaultTypeAdapters$HashSetCreator: Warning!: Duplicate method \nonly differs by return type: createInstance\ncom.google.gson.DefaultTypeAdapters$LocaleTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$DoubleDeserializer: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$BooleanTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: createInstance\ncom.google.gson.DefaultTypeAdapters$ByteTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter: Warning!: Duplicate \nmethod only differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$TreeSetCreator: Warning!: Duplicate method \nonly differs by return type: createInstance\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter: Warning!: Duplicate method \nonly differs by return type: deserialize\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter: Warning!: Duplicate method \nonly differs by return type: createInstance\ncom.google.gson.DefaultTypeAdapters$PropertiesCreator: Warning!: Duplicate \nmethod only differs by return type: createInstance\njava.lang.Enum: Warning!: No definition found\ncom.google.gson.FieldNamingPolicy: Warning!: Base class has undefined type: \njava.lang.Enum\njava.lang.reflect.GenericArrayType: Warning!: No definition found\ncom.google.gson.GenericArrayTypeImpl: Warning!: Implements undefined interface: \njava.lang.reflect.GenericArrayType\njava.lang.Iterable: Warning!: No definition found\ncom.google.gson.JsonArray: Warning!: Implements undefined interface: \njava.lang.Iterable\njava.util.Iterator: Warning!: No definition found\ncom.google.gson.JsonStreamParser: Warning!: Implements undefined interface: \njava.util.Iterator\ncom.google.gson.LongSerializationPolicy: Warning!: Base class has undefined \ntype: java.lang.Enum\njava.util.LinkedHashMap: Warning!: No definition found\ncom.google.gson.LruCache: Warning!: Base class has undefined type: \njava.util.LinkedHashMap\ncom.google.gson.ModifyFirstLetterNamingPolicy$LetterModifier: Warning!: Base \nclass has undefined type: java.lang.Enum\njava.lang.reflect.ParameterizedType: Warning!: No definition found\ncom.google.gson.ParameterizedTypeImpl: Warning!: Implements undefined \ninterface: java.lang.reflect.ParameterizedType\njava.io.Serializable: Warning!: No definition found\ncom.google.gson.Token: Warning!: Implements undefined interface: \njava.io.Serializable\njava.lang.annotation.Annotation: Warning!: No definition found\ncom.google.gson.annotations.Expose: Warning!: Implements undefined interface: \njava.lang.annotation.Annotation\ncom.google.gson.annotations.SerializedName: Warning!: Implements undefined \ninterface: java.lang.annotation.Annotation\ncom.google.gson.annotations.Since: Warning!: Implements undefined interface: \njava.lang.annotation.Annotation\ncom.google.gson.annotations.Until: Warning!: Implements undefined interface: \njava.lang.annotation.Annotation\njava.lang.Appendable: Warning!: No definition found\njava.lang.StringBuilder: Warning!: No definition found\njava.lang.reflect.Field: Warning!: No definition found\njava.lang.reflect.Type: Warning!: No definition found\njava.math.BigInteger: Warning!: No definition found\njava.text.DateFormat: Warning!: No definition found\njava.util.Collection: Warning!: No definition found\njava.util.List: Warning!: No definition found\njava.util.Map: Warning!: No definition found\njava.util.Set: Warning!: No definition found\njava.util.logging.Logger: Warning!: No definition found\njava.util.regex.Pattern: Warning!: No definition found\njava.lang.Class: Warning!: No definition found for method: isAnonymousClass\njava.lang.Class: Warning!: No definition found for method: isLocalClass\ncom.google.gson.AnonymousAndLocalClassExclusionStrategy: Error!: Missing stack \nmap in: isAnonymousOrLocal at label: 18\nPackaging project GSON_ME_Library failed (took 2.532 seconds) \n```\n\nOriginal comment by `santhosh...@gmail.com` on 18 Oct 2010 at 11:48\n =||= ```\nI'm working with BlackBerry SDK 5.0.0\n```\n\nOriginal comment by `santhosh...@gmail.com` on 18 Oct 2010 at 11:51\n =||= ```\nI faced the same problem, and sadly this is impossible since the Blackberry SDK \nis based on J2ME wich does not have Reflection or other things required by Gson.\n\nCheers.\n```\n\nOriginal comment by `Nahuel.B...@gmail.com` on 15 Dec 2010 at 11:31\n =||= ", 0], ["217", "primitive type support", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:27 PM", "```\nObject d=100.0;\nString jsond=gson.toJson(d);\nassertEquals(\"100.0\",jsond);\nObject db=gson.fromJson(jsond, Object.class);\n//gson bug,this should be true, although given a Object.class, but from the \njson string ,it's clear that , the result should be a Double\nassertFalse(d.equals(db));\n\n//also\nObject b=true;\nString jsonb=gson.toJson(b);\nassertEquals(\"true\",jsonb);\nObject bb=gson.fromJson(jsonb, Object.class);\n//gson bug, bb should be a Boolean\nassertFalse(b.equals(bb));\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `lanxia...@gmail.com` on 25 Jun 2010 at 12:02", "```\nTo get what you're requesting, you should change the 2nd argument in the call \nto \"fromJson()\" to the desired type. Although GSON could infer certain types, \ndoing so would be inefficient and/or unreliable because the encoded text has \nvery little type information.\n\n\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 4:53\n- Changed state: **Invalid**\n =||= ", 0], ["218", "Nested generic collections don't return jsonized values on toJson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:27 PM", "```\n+  private static class ClassWithDistinguishableFieldName {\n+    private String distinguishableFieldName = \"distinguishableFieldValue\";\n+  }\n+\n+  private static class ClassWithHashMapField {\n+    private String a = \"a\";\n+    private String b = \"b\";\n+    HashMap<String, Object> c = new HashMap<String, Object>();\n+\n+    ClassWithHashMapField() {\n+      c.put(\"someArray\", Arrays.asList(new \nClassWithDistinguishableFieldName()));\n+    }\n+  }\n\n\n\n+    ClassWithHashMapField o = new ClassWithHashMapField();\n+    String json = gson.toJson(o);\n\njson:\n  {\"a\":\"a\",\"b\":\"b\",\"c\":{\"someArray\":{}}}\n\nexpected:\n  {\"a\":\"a\",\"b\":\"b\",\"c\":{\"someArray\":[{\"distinguishableFieldName\":\"distinguishableFieldValue\"}]}}\n\n\nThis issue was blocking a project I am working on; so I attached a patch with a \ntest.\n```\n\nOriginal issue reported on code.google.com by `masahji%...@gtempaccount.com` on 28 Jun 2010 at 2:47", "```\nAttaching patch\n```\n\nOriginal comment by `masahji%...@gtempaccount.com` on 28 Jun 2010 at 2:47\n\nAttachments:\n- [issue_218.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-218/comment-1/issue_218.patch)\n =||= ```\nping\n```\n\nOriginal comment by `masahji%...@gtempaccount.com` on 13 Sep 2010 at 12:36\n =||= ```\nSame problem here:\n\npublic class ComplexObj {\n    public List<Map<String, Object>> rows;\n}\n@Test\npublic void ttt() {\n    List<Map<String, Object>> rows = buildRows(100);\n    String json1 = new Gson().toJson(rows);\n    ComplexObj complexObj = new ComplexObj();\n    complexObj.rows = rows;\n    String json2 = new Gson().toJson(complexObj);\n    assertThat(json2, containsString(json1));\n}\nprivate List<Map<String, Object>> buildRows(int id) {\n    List<Map<String, Object>> rows = Lists.newArrayList();\n    Map<String, Object> row = Maps.newHashMap();\n    row.put(\"id\", id);\n    rows.add(row);\n    row = Maps.newHashMap();\n    row.put(\"id\", 999);\n    rows.add(row);\n    return rows;\n}\n\nI'm also blocked by this issue\n```\n\nOriginal comment by `gianmarco.gherardi` on 13 Sep 2010 at 8:28\n =||= ```\nCan you avoid using Object as the value in your Map? Use of Object omits type \ninformation that GSON uses when inspecting your types.\n```\n\nOriginal comment by `limpbizkit` on 6 Oct 2010 at 5:51\n =||= ```\nI thought my attached patch would fix the problem. There should also be a unit \ntest in there as well.\n```\n\nOriginal comment by `masahji%...@gtempaccount.com` on 6 Oct 2010 at 5:54\n =||= ```\nIssue 234 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 6 Oct 2010 at 6:08\n =||= ```\nGson is able to serialize a plain List<Map<String, Object>>, don't understand \nwhy it fail when serializing the same type in a custom object\n```\n\nOriginal comment by `gianmarco.gherardi` on 6 Oct 2010 at 6:24\n =||= ```\nThe core problem is that GSON does something slightly differently depending on \nwhether it has static type information. When it has no static type information, \nit will use the runtime type. When it has some static type information (as is \nthe case when it's serializing the field of a custom object), it will use that \ntype information.\n\nFor predictable results, always supply GSON will full type information. In this \ncase the fix is to replace List<Map<String, Object>> with List<Map<String, \nFoo>>, for the appropriate value of Foo. Don't forget that you can register a \ntype adapter for Foo if you need to handle multiple subclasses.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:31\n- Changed state: **WontFix**\n =||= ```\nI would appreciate a fix on this.  I have a case where I could have a \nList<Map<String, Object>> because the type ending up as the value in the Map \ncould be a String, Integer, Boolean, List, or Map.  As I understand the \ndescription of the reason why this will not be fixed I would need to extend \neach of those classes so I could then register a type adapter to handle \nsubclasses of what are simply basic types.\n\nIt would be very helpful if this issue could be upgrade from WontFix.  This is \neffectively a blocking issue for me.\n```\n\nOriginal comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 5:52\n =||= ```\nI need to clarify my nesting.  The nesting I am trying to handle is...\n\nMap<String, Object> where \"object\" could possibly be a List<Map<String, \nObject>>.\n\nI Map<String, Object> that Object could be an Integer, List, String, Boolean, \netc.\n\nI have tried updating the list to be a List<Map<String, String>> but that made \nno difference.\n```\n\nOriginal comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 6:17\n =||= ```\nI had exactly the same situation you do and could not get it to work either.\n\nI instead opted to use FlexJSon -- which I found just as easy to use as\nGSon, but which actually could be told to do precisely what you are trying\nto accomplish.\nhttp://flexjson.sourceforge.net/\n\nie:\n    JSONSerializer jsonSerializer = new JSONSerializer();\n      String jsonString = jsonSerializer.deepSerialize(\nmyObjectThatMapsAStringToAnObject );\n```\n\nOriginal comment by `brandon....@gmail.com` on 1 Dec 2010 at 6:35\n =||= ```\nNifty!  Thanks!  I will look into that.\n```\n\nOriginal comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 7:02\n =||= ```\nCan this be a solution?\n\n--------------------------------------------------------------------------------\n-------------------------------\npackage com.github.gimmi.spikegson;\n\nimport com.google.gson.*;\nimport com.google.gson.reflect.TypeToken;\nimport org.junit.Test;\n\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class StringTemplateBuilderTest {\n    private static class CustomType {\n        public String value = \"a value\";\n    }\n\n    @Test\n    public void should_serialize_custom_type_in_map_with_type_token() {\n        Map<String, Object> obj = new HashMap<String, Object>();\n        obj.put(\"k1\", new CustomType());\n\n        Type type = new TypeToken<Map<String, Object>>() {\n        }.getType();\n\n        String actual = new Gson().toJson(obj, type).replace('\"', '\\'');\n\n        assertEquals(\"{'k1':{}}\", actual);\n\n        actual = new GsonBuilder().registerTypeAdapter(Object.class, new JsonSerializer<Object>() {\n            @Override\n            public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {\n                return context.serialize(src);\n            }\n        }).create().toJson(obj, type).replace('\"', '\\'');\n\n        assertEquals(\"{'k1':{'value':'a value'}}\", actual);\n    }\n}\n--------------------------------------------------------------------------------\n-------------------------------\n```\n\nOriginal comment by `gianmarco.gherardi` on 13 Apr 2011 at 5:43\n =||= ```\nDecision which accepted by developers, to use the \"static information about the \ntype of\", generate extremely delusional behavior of Gson:\n\n----\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Test {\n  public static void main(String args[]) {\n    Result result = new Result();\n    Gson gson = new GsonBuilder().setPrettyPrinting().create();\n    gson.toJson(result, System.out);\n  }\n\n  interface Column {\n  }\n\n  static class ColumnImpl implements Column {\n    private final String one;\n    private final int two;  \n    private final Boolean three;\n\n    public ColumnImpl(String one, int two, Boolean three) {\n      this.one = one;\n      this.two = two;\n      this.three = three;\n    }\n  }\n\n  static class Result {\n    private List<ColumnImpl> columnImpls = Arrays.asList(\n      new ColumnImpl(\"one\", 2, false), \n      new ColumnImpl(\"two\", 4, true), \n      new ColumnImpl(\"three\", 8, false));\n    private List<Column> columns = (List)columnImpls;\n  }\n}\n------\n\n\nprint:\n\n\n------\n{\n  \"columnImpls\": [\n    {\n      \"one\": \"one\",\n      \"two\": 2,\n      \"three\": false\n    },\n    {\n      \"one\": \"two\",\n      \"two\": 4,\n      \"three\": true\n    },\n    {\n      \"one\": \"three\",\n      \"two\": 8,\n      \"three\": false\n    }\n  ],\n  \"columns\": [\n    {},\n    {},\n    {}\n  ]\n}\n------\n\nFor what has been chosen such behavior?\n```\n\nOriginal comment by `radio...@ya.ru` on 28 Jul 2011 at 11:30\n =||= ", 0], ["219", "Support surrogate pairs", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:31 PM", "```\nA fix for com.google.gson.StringUnmarshaller line 17:\n\n  // TODO(inder): Handle the case where code points are of size bigger than 4\n\nThere are two files in the attachment, for com.google.gson.StringUnmarshaller \nand com.google.gson.StringUnmarshallerTest respectively, based on Revision 551 \nin trunk.\n```\n\nOriginal issue reported on code.google.com by `jacky163...@163.com` on 3 Jul 2010 at 9:06\n\nAttachments:\n- [StringUnmarshaller.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-219/comment-0/StringUnmarshaller.zip)", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:35\n- Changed title: **Support surrogate pairs**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nApologies for sitting on this for a very long time. Could you please sign the \nGoogle Code CLA so we can accept patches from you? Once you've filled in that \nform please update that bug and I'll take a look at your patch.\nhttp://code.google.com/legal/individual-cla-v1.0.html\n```\n\nOriginal comment by `limpbizkit` on 24 Jan 2011 at 10:40\n =||= ```\nObsolete.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:27\n- Changed state: **WontFix**\n =||= ", 0], ["220", "It is not supporting ot CachedRowSet objet", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:32 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nShould support CatchedRowSet object\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `mrrajar...@gmail.com` on 8 Jul 2010 at 12:16", "```\nThe CachedRowSet type is very complex, and each application would want to \nconvert it to JSON in a different way. I recommend you implement a custom \nJsonDeserializer.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:38\n- Changed state: **Invalid**\n =||= ", 0], ["221", "Gson can't parse JSON text encoded in UTF-8?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:33 PM", "```\n<code>\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\n\npublic class Test {\n        private static final String charEncoding=\"UTF-8\";\n\n        private static final String fileName=\"c:\\\\test2.txt\";\n        public static void main(String args[]){\n                try{\n                        File file=new File(fileName);\n                        if(file.canRead()){\n                                FileInputStream inStream=new FileInputStream(file);\n                                InputStreamReader reader=new InputStreamReader(inStream,\ncharEncoding);\n                                JsonParser parser=new JsonParser();\n                                JsonElement jsonA=parser.parse(new BufferedReader(reader));\n                                System.out.println(jsonA.isJsonArray());\n                                System.out.println(jsonA.toString());\n                        }\n                }catch(IOException e){\n                        e.printStackTrace();\n                }\n        }\n\n} \n</code>\n\nWhat is the expected output? What do you see instead?\nCaused by: com.google.gson.TokenMgrError: Lexical error at line 1,\ncolumn 1.  Encountered: \"\\ufeff\" (65279), after : \"\"\n        at\ncom.google.gson.JsonParserJavaccTokenManager.getNextToken(JsonParserJavaccTokenM\nanager.java:\n1193)\n        at com.google.gson.JsonParserJavacc.jj_ntk(JsonParserJavacc.java:635)\n        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:10)\n        at com.google.gson.JsonParser.parse(JsonParser.java:54)\n        ... 1 more \n\nWhat version of the product are you using? On what operating system?\ngson 1.4\n\nPlease provide any additional information below.\nattached is the text file containing the json string\n\n```\n\nOriginal issue reported on code.google.com by `monstern...@gmail.com` on 8 Jul 2010 at 12:57\n\nAttachments:\n- [test2.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-221/comment-0/test2.txt)", "```\nIt looks like you've got an input text containing a byte order mark. I blogged \nthe workaround here:\n  http://blog.publicobject.com/2010/08/handling-byte-order-mark-in-java.html\n```\n\nOriginal comment by `limpbizkit` on 20 Aug 2010 at 6:04\n- Changed state: **WontFix**\n =||= ", 0], ["222", "Locale on Date Format", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:34 PM", "```\nIt\u2019s my two cent for this project. I add locale option for Date format.\n\npublic GsonBuilder setDateFormat(int style,Locale locale);\npublic GsonBuilder setDateFormat(int dateStyle, int timeStyle, Locale locale);\n\n/*\n* Atenciosamente/ Regards/ Saludos, \n* Jan Gomes - jangomes@gmail.com\n*/\n```\n\nOriginal issue reported on code.google.com by `jango...@gmail.com` on 14 Jul 2010 at 1:44\n- Merged into: #223\n\nAttachments:\n- [gson-locale.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-222/comment-0/gson-locale.diff)", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:36\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:39\n- Changed state: **Duplicate**\n =||= ", 0], ["224", "Not able searialize HashMap and adding instance into JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:36 PM", "```\nWhat steps will reproduce the problem?\nHashMap<Customer, List<CampaignProduct>> customerCplHashMap = new \nHashMap<Customer, List<CampaignProduct>>();\n\ncustomerCplHashMap.put(semCustomer, cpls);\ndumpJson(writerCustCpl, gson.toJson(customerCplHashMap));\n\nOUTPUT\n\n{\"cs.com.test.domain.Customer@7cd6de\":[{\"id\":1532,\"name\":\"25-2\"}]}\n\nWhat is the expected output? What do you see instead?\n{\"\"id\":1,\"name\":\"John\":[{\"id\":1532,\"name\":\"25-2\"}]}\n\n\nWhat version of the product are you using? On what operating system?\nWINDOWS and GSON 1.5 Beta\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `das.k.ab...@gmail.com` on 5 Aug 2010 at 5:20\n- Merged into: #210", "```\nI meant HashMap key where key is userdefined not able to serialize properly.\n\n```\n\nOriginal comment by `das.k.ab...@gmail.com` on 5 Aug 2010 at 5:24\n =||= ```\nDefinitely a problem, but the solution isn't obvious.\n\nPerhaps GSON should look at the conversion for the map's key type. If it \nconverts to a primitive, then a GSON could emit an object. If it converts to \nanother type, GSON could emit an array of pairs. For example, the customer \nabove could be converted to this:\n  [\n    [{ \"customerId\": 1, \"name\": \"John\" },{\"campaignId\": 1532, \"name\": \"25-2\"}]\n  ]\nWe could emit something more concise for say, a map with integer keys:\n  { \"5\": \"five\", \"6\": \"six\" }\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:00\n- Changed state: **Accepted**\n =||= ```\nThanks for reply! Is it going to be fixed in GSON library soon?\n```\n\nOriginal comment by `das.k.ab...@gmail.com` on 27 Aug 2010 at 5:08\n =||= ```\n [\n    [{ \"customerId\": 1, \"name\": \"John\" },{\"campaignId\": 1532, \"name\": \"25-2\"}]\n  ]\n\nI'm not able to understand how to convert?\n\nI've Hashmap<Customer, List<Campaign>>, in this case how do I put above one as \na key?\n\n\n```\n\nOriginal comment by `das.k.ab...@gmail.com` on 27 Aug 2010 at 5:16\n =||= ```\nI'm not sure about when it'll be fixed. In the interim you can work around the \nproblem by writing a custom JsonSerializer.\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 2:13\n =||= ```\nThis is basically a dupe of issue 210, which provides an example patch that \nsolves this problem.\n```\n\nOriginal comment by `jsha...@google.com` on 28 Aug 2010 at 6:40\n =||= Original comment by `limpbizkit` on 28 Aug 2010 at 8:26\n- Changed state: **Duplicate**\n =||= ", 0], ["225", "Implement equals() to perform deep-value-comparison", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:39 PM", "```\nJsonObject and friends should implement equals() to support unit testing \nwithout forcing a call to toString() just to do a comparison.\n\n    assertThat(someJsonObject, is(someOtherJsonObject));\n\nas opposed to\n\n    assertThat(someJsonObject.toString(), \n            is(someOtherJsonObject.toString()));\n\nThere's a patch for this at\n\n    http://code.google.com/p/google-gson/issues/detail?id=64&q=equals#c4\n\n```\n\nOriginal issue reported on code.google.com by `emperorf...@gmail.com` on 21 Aug 2010 at 12:05\n- Merged into: #64", "Original comment by `limpbizkit` on 3 Sep 2010 at 6:58\n- Changed state: **Duplicate**\n =||= ", 0], ["226", "Enum with body does not serialize", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:39 PM", "```\nGiven this test:\n\nenum Toy{\n        CAR\n}\n\n@Test\n    public void serializeEnums()\n    {\n        assertEquals(\"\\\"CAR\\\"\",new Gson().toJson(Toy.CAR));\n\n   }\n\n... the serialization works fine. If I add body to the enum, however:\n\nenum Toy{\n        CAR{ /** Empty body **/}\n}\n\n.. the result is an empty string.\n\n\nTested on version 1.5.\n```\n\nOriginal issue reported on code.google.com by `tfn...@gmail.com` on 26 Aug 2010 at 4:09", "```\nYikes. We're probably using getClass() rather than getDeclaringClass(). Should \nbe straightforward fix.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 2:38\n- Changed state: **Accepted**\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= ```\nFixed by r583.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 7:27\n- Changed state: **Fixed**\n =||= ", 0], ["227", "Map<String, ...> with empty strings (or strings consisting of whitespace) don't serialize", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:40 PM", "```\nJsonObject has this precondition check for map properties:\n\n!\"\".equals(property.trim())\n\n(line 55 of JsonObject.java in my checkout)\n\nThis causes this map to fail to serialize:\n\nMap<String, Integer> map = new HashMap();\nmap.put(\"\", 1);\nmap.put(\"k\", 1000);\nmap.put(\"m\", 1000000);\n```\n\nOriginal issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 8:56", "```\nThis is a bug. The JSON spec permits empty strings as property names.\n```\n\nOriginal comment by `limpbizkit` on 27 Aug 2010 at 3:39\n- Changed state: **Accepted**\n =||= ```\nFixed with r585.\n\nFYI... this bug was making it difficult for our application to serialize \ncertain data sets to JSON. In Caliper we use maps for pretty-printing display \nunits. For example, Caliper may render \"48KiB\", \"3s\" or \"5 thousand\" in its \ntable. The empty string is used for counted units, like the \"5\" in \"5 instances \nallocated\".\n   { \"ms\": 0.001, \"s\": 1, \" minutes\": 60 }\n   { \"B\": 1, \"KiB\": 1024, \"MiB\": 1048576, \"GiB\": 1073741824 }\n   { \"\": 1, \" thousand\": 1000, \" million\": 1000000 }\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:11\n- Changed state: **Fixed**\n =||= ```\nIssue 256 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:38\n =||= ", 0], ["228", "Maps do not serialize usefully", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:41 PM", "```\nI want to serialize a Map<MyObject, ...>. This is not currently possible \nbecause these are serialized into:\n\n{\"<myObject1.toString()>\" : ..., \"<myObject2.toString()>\" : ..., ...}\n\nwhich is obviously not reversible back into my MyObject instances.\n\nI was able to fix this problem by writing a custom adapter that simply \ntransforms the Map into a List on serialization and back into a Map on \ndeserialization, but this is a pain when otherwise I can serialize a huge \nobject hierarchy very simply.\n\ne.g., I made the above serialize to [{\"k\" : myObject1, \"v\" : ...}, {\"k\" : \nmyObject2, \"v\" : ...}, ...]\n\nI propose that DefaultMapTypeAdapter use something like this List approach by \ndefault, unless the key value happens to be a String, since there is really \nnothing else particularly sane it can do without losing a ton of information in \ndoing the String.valueOf() call.\n```\n\nOriginal issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 9:02\n- Merged into: #210", "```\nThis is a dupe of issue 210.\n```\n\nOriginal comment by `jsha...@google.com` on 28 Aug 2010 at 6:23\n =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:50\n- Changed state: **Duplicate**\n =||= ", 0], ["229", "Missing sources in Maven repository", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:43 PM", "```\nWhat steps will reproduce the problem?\n1. checkout trunk / head \n2. mvn clean install\n3. watch compiler complaints about missing classes\n( Gson,  GsonReader ) \nWhat is the expected output? What do you see instead?\n\n... clean maven build\n\nWhat version of the product are you using? On what operating system?\n\nWinXP / mvn 2.1\n\n\n```\n\nOriginal issue reported on code.google.com by `konstant...@gmail.com` on 27 Aug 2010 at 8:58", "```\nInder, I think you may need to do some Maveney stuff for the 1.5 release...\n```\n\nOriginal comment by `limpbizkit` on 28 Aug 2010 at 5:35\n- Changed title: **Missing sources in Maven repository**\n =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:55\n- Added labels: **Milestone-Release1.6**\n =||= ```\nPlease update to Gson 1.7.1 to fix this problem. We will not be updating the \nprevious Gson versions.\n\nhttp://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/\n\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 11:29\n- Changed state: **Fixed**\n =||= ", 0], ["230", "GsonBuilder setDateFormat ignored", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:26:44 PM", "```\nWhat steps will reproduce the problem?\n1. Build a gson with setDateFormat\nDate date = new Date();\nGson gson = new GsonBuilder().setDateFormat(\"MM/dd/yyyy\").create();\nSystem.out.println(gson.toJson(date));\n\nWhat is the expected output? What do you see instead?\nExpected is \"08/27/2010\"\nDate results in standard format: \"Aug 27, 2010 10:21:32 AM\"\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nIt works ok in 1.4 but when I change to 1.5 it ignores the setDateFormat() \nmethod\n```\n\nOriginal issue reported on code.google.com by `tradefie...@gmail.com` on 27 Aug 2010 at 2:38", "```\nIt still happens in version 1.6 when the object is within a collection. \n```\n\nOriginal comment by `alxm...@gmail.com` on 4 Jan 2011 at 11:55\n =||= ```\nWe encountered this problem as well with our server, except that we expected \nthe dates to be serialized by a custom adapter.  The weird thing is that \neverything was going fine in our unit tests.\nWe spent a couple of hours doing remote debugging and looking at the code. It \nseems at some point during serialization, our java.util.Date objects were \nhandled as if they were java.sql.Date objects.\nSo they were serialized following the default pattern for java.sql.Date, which \nmatches our unexpected output and the unexpected output in the comment above.\nI think the problem appeared in gson 1.5, where support for sql dates was \nadded, and is maybe related to the fact that java.sql.Date extends \njava.util.Date...\nA workaround for us was to register the same adapter for java.sql.Date than for \njava.util.Date:\n\nGson gson = new GsonBuilder()\n        .......\n        .registerTypeAdapter(Date.class, new DateTypeAdapter())\n        .registerTypeAdapter(java.sql.Date.class, new DateTypeAdapter())\n        .......\n        .create();\n```\n\nOriginal comment by `pfrangi...@gmail.com` on 3 Feb 2011 at 8:40\n =||= ```\nThat woule be cool to fix that in 1.7!\n```\n\nOriginal comment by `pfrangi...@gmail.com` on 3 Feb 2011 at 8:41\n =||= ```\nThis should be a higher priority defect since working with dates is very \ncommon. Hope this will be fixed as soon as possible.\n```\n\nOriginal comment by `inancsev...@gmail.com` on 4 Feb 2011 at 10:07\n =||= ```\n[deleted comment]\n```\n =||= ```\nJsonSerializationVisitor.visitFieldUsingCustomHandler(FieldAttributes, Type, \nObject) line: 195\n\nObject obj = f.get(parent);\n\nIn f.get() method, \"field.get(instance)\" returns Timestamp object for \njava.util.Date class.\n\nfield is java.lang.reflect.Field\n\n\nand then\n\n\nObjectTypePair.getActualTypeIfMoreSpecific(Type, Class<?>) line: 87 \n\nif (typeAsClass.isAssignableFrom(actualClass)) {\n    type = actualClass;\n}\n\nThe \"type\" which is \"java.util.Date\" is assigned by \"actualClass\" which is \n\"java.sql.Timestamp\".\n\n```\n\nOriginal comment by `das...@gmail.com` on 4 Feb 2011 at 9:58\n =||= ```\nOn startup when sets datePattern for GsonBuilder, code creates dateTypeAdapter \nfor Date.class in GsonBuilder.addTypeAdaptersForDate method:\n\n\nif (datePattern != null && !\"\".equals(datePattern.trim())) {\n   dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);\n} \n...\nif (dateTypeAdapter != null) {\n  if (!serializers.hasSpecificHandlerFor(Date.class)) {\n      serializers.register(Date.class, dateTypeAdapter);\n  }\n....\n\nbut line 530 of GsonBuilder while \"serializers\" is being filled with \ndefaultSerializers, dateTypeAdapter for Timestamp.class is created with default \nSimpleDateFormat.\n\n```\n\nOriginal comment by `das...@gmail.com` on 4 Feb 2011 at 11:40\n =||= ```\nHi again, \n\nGson is trying to serialize more specific field type. When reading Date type \nfrom database the Date field of domain object is set to java.sql.Timestamp or \njava.sql.Date\n\nA workaround is to register custom adapter according to your Date instance type \nread from database:\n\nregisterTypeAdapter(Timestamp.class, new DateSerializer())\nor\nregisterTypeAdapter(java.sql.Date.class, new DateSerializer())\n\n\n\nin source code we can change GsonBuilder.addTypeAdaptersForDate method like \nthis:\n\n....\n   if (dateTypeAdapter != null) {\n      if (!serializers.hasSpecificHandlerFor(Date.class)) {\n          serializers.register(Date.class, dateTypeAdapter);\n      }\n      if (!serializers.hasSpecificHandlerFor(Timestamp.class)) {\n          serializers.register(Timestamp.class, dateTypeAdapter);\n      }\n      if (!serializers.hasSpecificHandlerFor(java.sql.Date.class)) {\n          serializers.register(java.sql.Date.class, dateTypeAdapter);\n      }\n\n\n      if (!deserializers.hasSpecificHandlerFor(Date.class)) {\n          deserializers.register(Date.class, dateTypeAdapter);\n      }\n      if (!deserializers.hasSpecificHandlerFor(Timestamp.class)) {\n          deserializers.register(Timestamp.class, dateTypeAdapter);\n      }\n      if (!deserializers.hasSpecificHandlerFor(java.sql.Date.class)) {\n          deserializers.register(java.sql.Date.class, dateTypeAdapter);\n      }\n    }\n....\n\n\n```\n\nOriginal comment by `das...@gmail.com` on 7 Feb 2011 at 12:09\n =||= ```\nThis issue was closed by revision r762.\n```\n\nOriginal comment by `limpbizkit` on 29 Mar 2011 at 9:36\n- Changed state: **Fixed**\n =||= In which versions was this fixed? I have the exact same problem in version 2.3.1.\n =||= ", 0], ["233", "Bug using pretty printing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:01 PM", "```\nWhat steps will reproduce the problem?\n1. Run the test\n@Test\npublic void json_pretty_printing_bug() {\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"F868\", new Object());\n    map.put(\"F867\", new Object());\n    map.put(\"ID\", new Object());\n    GsonBuilder builder = new GsonBuilder();\n    builder.setPrettyPrinting();\n    Gson gson = builder.create();\n    assertEquals(\"{\\\"F868\\\":{},\\\"F867\\\":{},\\\"ID\\\":{}}\", gson.toJson(map));\n}\n\nWhat is the expected output? What do you see instead?\nExpected: {\"F868\":{},\"F867\":{},\"ID\":{}}\nActual: {\"F868\":{}\"F867\":{}\"ID\":{}}\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nremoving setPrettyPrinting() solves the problem\n```\n\nOriginal issue reported on code.google.com by `gianmarco.gherardi` on 10 Sep 2010 at 7:30", "```\nFixed in the latest SVN.\n```\n\nOriginal comment by `limpbizkit` on 11 Sep 2010 at 9:12\n- Changed state: **Fixed**\n =||= ", 0], ["234", "Arrays referenced in Object field serialization bug", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:02 PM", "```\nWhat steps will reproduce the problem?\n1. Run the test\n\n    public class ComplexObj {\n        public double[] result;\n        public Object obj;\n    }\n\n    @Test\n    public void json_pretty_printing_bug() {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        ComplexObj response = new ComplexObj();\n        response.result=new double[2];\n        response.result[0] = 2.5;\n        response.result[1] = 2.5;\n        response.obj=response.result;\n        assertEquals(\"{\\\"result\\\":[2.5,2.5],\\\"obj\\\":[2.5,2.5]}\", gson.toJson(response));\n    }\n\nWhat is the expected output? What do you see instead?\nExpected: {\"result\":[2.5,2.5],\"obj\":[2.5,2.5]}\nActual: {\"result\":[2.5,2.5],\"obj\":{}}\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nThis is a regression, i'm switching from gson-1.3 to gson-1.5 as suggested \nhere: http://code.google.com/p/google-gson/issues/detail?id=233\n```\n\nOriginal issue reported on code.google.com by `gianmarco.gherardi` on 12 Sep 2010 at 1:12\n- Merged into: #218", "Original comment by `limpbizkit` on 6 Oct 2010 at 6:08\n- Changed state: **Duplicate**\n =||= ", 0], ["235", "Could not deserialize JsonPrimitive to int", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:03 PM", "```\nGson gson = new Gson();\n\ngson.fromJson(\"1\", int.class) works ok,\ngson.fromJson(new JsonPrimitive(1), int.class) throws ClassCastException,\n\nThe latter method calls cast method of Class, while the former one does not.\nint.class.cast(new Integer(1)) does not work on my Java6SE JVM.\n\nI'm using Gson 1.5 on Java6SE\n```\n\nOriginal issue reported on code.google.com by `adi...@gmail.com` on 13 Sep 2010 at 6:53", "```\nIt's definitely an inconsistency in GSON.\n\nGson.fromJson(JsonElement, Class) calls Class.cast() but fromJson(String, \nClass) does not.\n\nIt suggests there are two bugs:\n1. fromJson(String, Class) should call Class.cast() before returning its result\n2. In both methods we should canonicalize int.class to Integer.class, and \nsimilarly for the other primitive types.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:52\n- Changed state: **Accepted**\n =||= ```\nFixed in r623.\n```\n\nOriginal comment by `limpbizkit` on 1 Nov 2010 at 10:38\n- Changed state: **Fixed**\n =||= ", 0], ["236", "com.google.gson.ParseException when Json string contains new line characters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:04 PM", "```\nWhat steps will reproduce the problem?\n1.Create a Json string containing new line characters ie. \\n or \\r\\n\ne.g.\n{\"rid\":\"3fe769c3-93ee-43b4-91ee-2f279cf5e9bb\",\"org\":\"001\",\"acno\":\"TL000000000068\n\",\"fseq\":\"7893ca16-ed66-431a-96fd-c20001efa487\",\"actcd\":\"IA\",\"fdt\":\"17.09.2010\",\n\"rescd\":\"PTP\",\"nactcd\":\"IA\",\"nactdt\":\"17.09.2010\",\"note\":\"Remarks\\r\\nRemarks\",\"f\nee\":\"N\",\"toall\":\"N\",\"watch\":\"N\",\"promises\":[{\"prdt\":\"17.09.2010\",\"pramt\":\"100.00\n0\"}]} \n2.Parse string using JsonStreamParser\n\nWhat is the expected output? What do you see instead?\nThe string should be parsed but it throws following exception:\nException in thread \"main\" com.google.gson.JsonParseException: Failed parsing \nJSON source to Json\n    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:91)\n    at com.rsystems.services.util.JSONUtil.getMapFromJson(JSONUtil.java:49)\n    at com.rsystems.services.testing.TestUtil.main(TestUtil.java:35)\nCaused by: com.google.gson.ParseException: Encountered \" \"\\\"\" \"\\\" \"\" at line 1, \ncolumn 218.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)\n    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)\n    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:87)\n    ... 2 more\n\n\nWhat version of the product are you using? On what operating system?\ncom.google.code.gson version 1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `bhavesh....@gmail.com` on 17 Sep 2010 at 7:35", "```\nSame exception occurs even for version 1.5\n```\n\nOriginal comment by `bhavesh....@gmail.com` on 17 Sep 2010 at 7:38\n =||= ```\nCan you try the latest code from SVN? I believe it's fixed there.\n```\n\nOriginal comment by `limpbizkit` on 17 Sep 2010 at 2:57\n =||= ```\nIt works with the latest code from SVN. Thanks :)\nWhen will this be included in the release on maven repo?\n```\n\nOriginal comment by `bhavesh....@gmail.com` on 17 Sep 2010 at 3:46\n =||= Original comment by `limpbizkit` on 3 Oct 2010 at 6:38\n- Changed state: **Fixed**\n =||= ```\nCould you please let us know When will this be included in the release ?\n```\n\nOriginal comment by `iit.ni...@gmail.com` on 20 Oct 2010 at 9:57\n =||= ", 0], ["237", "Incorrect serialisation for sub classed objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:05 PM", "```\nWhat steps will reproduce the problem?\n1. Extract the Containers.zip maven project attached.\n2. Run the BookingDialogViewJsonSerializerTest.java JUnit test to observe the \nissue.\n\nWhat is the expected output? What do you see instead?\nI'm trying to serialise a nested object. The object serialises fine when not \nnested. When nested only fields on the base class are serialised, fields on the \nsubclasses are omitted.\n\nWhat version of the product are you using? On what operating system?\n2.3.2 on win xp.\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `proggerp...@gmail.com` on 20 Sep 2010 at 7:25\n- Merged into: #231\n\nAttachments:\n- [Containers.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-237/comment-0/Containers.zip)", "Original comment by `limpbizkit` on 6 Oct 2010 at 5:49\n- Changed state: **Duplicate**\n =||= ", 0], ["238", "Feature: Add support for InstanceCreatorEx interface with createInstance(JsonElement json, Type typeOfT)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:06 PM", "```\njson data can contain information about which exact class should be created,\nbut original InstanceCreator can't use this information.\n\nExample: \nI have abstract Command class and Command1, Command2, etc subclasses.\nMy json data contains \"type\":\"Command1\" pair.\n\nSo we can overcome \"Collections Limitations\" and can deserialize \n\nCollection[? extends Command] realCommands = gson.fromJson(json, \ncollectionTypeCommand);\n```\n\nOriginal issue reported on code.google.com by `rybin.andrey` on 20 Sep 2010 at 12:38\n- Merged into: #231", "```\nThis issues isn't about collections, it's about being able to deserialize a \nderived type, when only the base type is known:\n\nIMyInterface deserialized = gson.fromJson(json, IMyInterface.class);\n\nIt would seem that the JSON itself would need some type identifier to know \nwhich derived type to use.\n```\n\nOriginal comment by `MarceliN...@gmail.com` on 5 Oct 2010 at 3:58\n =||= ```\nIn my case I have this identifier.\nOne field inside json contains \"type\" of this object.\nAnd I want to use this \"type\" to create subclass of \"IMyInterface\".\n```\n\nOriginal comment by `rybin.andrey` on 5 Oct 2010 at 7:46\n =||= ```\nAnother example (as XStream does)\n\nimport java.io.*;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier;\nimport com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;\nimport com.thoughtworks.xstream.io.xml.XppReader;\n\npublic class Test{\n    public static void main(String[] args) {\n        String xml = \"<user>\" +\n\n                        \"<name>Pavel</name>\" +\n\n                        \"<sername>Samolisov</sername>\" +\n\n                        \"<age>23</age>\" +\n\n                        \"<rating>89.93</rating>\" +\n\n                     \"</user>\";\n\n       StringWriter buffer = new StringWriter();\n        HierarchicalStreamReader reader = new XppReader(new StringReader(xml));\n\n        HierarchicalStreamWriter writer = new JettisonMappedXmlDriver().createWriter(buffer);\n        HierarchicalStreamCopier copier = new HierarchicalStreamCopier();\n        copier.copy(reader, writer);\n        System.out.println(buffer);\n    }\n}\n\nResult: \n{\"user\":{\"name\":\"Pavel\",\"sername\":\"Samolisov\",\"age\":\"23\",\"rating\":\"89.93\"}}\n\nSo every object has \"root\"\n```\n\nOriginal comment by `rybin.andrey` on 6 Oct 2010 at 8:38\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:57\n- Changed state: **Duplicate**\n =||= ", 0], ["239", "Escaper not public class -- can't extend JsonElement", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:07 PM", "```\nWhat steps will reproduce the problem?\n1. Create class to extend JsonElement\n2. implement toString(Appender,Escaper)\n3. Cannot include Escaper, as it is not a public class\n\nWhat is the expected output? What do you see instead?\nI would expect to be able to include Escaper and implement the toString(...) \nabstract method, but since Escaper is package scope, I cannot.\n\nWhat version of the product are you using? On what operating system?\nOSX 10.6.4\n\nPlease provide any additional information below.\n\nI would like to be able to extend JsonElement to provide a new json element \ntype. The use case I'm working with is that I have a JSON block generated \nelsewhere in our application that I would like to just 'use' in json output \ncreated near the UI layer of the application. To avoid deserializing & \nreserializing the JSON block I already have, I would like to create a new \nJsonElement that can just \"hand back\" this pre-generated block of JSON. I was \ngoing to extend JsonElement to create such a class, but cannot, since \ntoString(...) requires Escaper, and that is a package level class, instead of \npublic.\n```\n\nOriginal issue reported on code.google.com by `jbros...@gmail.com` on 21 Sep 2010 at 3:58", "```\nCan you address this with the streaming API?\nhttp://sites.google.com/site/gson/streaming\n```\n\nOriginal comment by `limpbizkit` on 21 Mar 2011 at 9:20\n- Changed state: **WontFix**\n =||= ```\nFollowing is my similar case which I need to do by implementing JsonElement and \ncouldn't figure out how to do with streaming API. Any idea please?\n\nGson gson = new GsonBuilder()\n  .registerTypeAdapter(MyRawJson.class, new MyRawJsonSerializer())\n  .create();\n\ninterface MyRawJson {\n  String getJson();\n}\n\nclass MyRawJsonSerializer implements JsonSerializer<RawJson> {\n  @Override\n  public JsonElement serialize(final MyRawJson src, Type type, JsonSerializationContext ctx) {\n    return new JsonElement() {\n      @Override\n      protected void toString(Appendable sb, Escaper escaper) throws IOException {\n        sb.append(src.getJson());\n      }\n    };\n  }\n}\n```\n\nOriginal comment by `ali.sak...@gmail.com` on 15 Jul 2011 at 10:30\n =||= ```\nYou're close. Use JsonParser to convert your JSON string to a JSON element, and \nthen return that in your serialize() method.\n```\n\nOriginal comment by `limpbizkit` on 17 Jul 2011 at 4:44\n =||= ```\nHow to do this in the current gson version? I see in 2.2.2 the escaper class is \ngone and instead you use the JsonWriter.. \n\nI'm trying to extend JsonElement  to have an implementation that avoids \nescaping a string which is already escaped (performance wise, not going through \neach and every character).\n```\n\nOriginal comment by `anmolsha...@gmail.com` on 18 Mar 2013 at 5:44\n =||= ", 0], ["240", "Provide a way to deserialize a JsonElement into an Object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:09 PM", "```\nSee discussion at:\n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/cc836a1b93b92428\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:40", "```\nI believe the solution in the thread is to use new JsonParser().parse().\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:34\n- Changed state: **Fixed**\n =||= ", 0], ["241", "Gson support for parameterized type hierarchy", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:09 PM", "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/28ed956399ed0e2e\n\nThe above link provides code to derive a test for the bug.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:48\n- Merged into: #168", "Original comment by `limpbizkit` on 3 Nov 2010 at 3:16\n- Changed state: **Duplicate**\n =||= ", 0], ["242", "Gson support for classes parameterized with enums", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:10 PM", "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/2d490f16c0b3f639\n\nThe link above provides a reproducible test case as well.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:53", "```\nI've investigated this. Everything works if GSON has the type information that \nit needs. For example, if it is deserializing into the enum-typed field, it \nfinds it and then finds the type adapter.\n\nBut if it has to use the runtime type, it doesn't find the type adapter. And so \nit doesn't use the custom serialization.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:53\n- Changed state: **Started**\n =||= ```\nThis is related to issue 164.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 4:03\n =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:18\n- Added labels: **Milestone-Release1.7**\n =||= ```\nTest written in r769 shows that this is no longer an issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 7:21\n- Changed state: **Fixed**\n =||= ", 0], ["243", "Json Conversion", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:11 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `sivasubb...@gmail.com` on 28 Sep 2010 at 1:40", "```\n[deleted comment]\n```\n =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:40\n- Changed state: **Invalid**\n =||= ", 0], ["244", "Failure to serialize enums with method definitions.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:12 PM", "```\nI've attached a JUnit test file that shows the issue. I've confirmed that the \nfollowing patch fixes this.\n\nExisting method in Gson.java:\n\n  public String toJson(Object src) {\n    if (src == null) {\n      return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass());\n  }\n\nPatched version of above method:\n\n  public String toJson(Object src) {\n    if (src == null) {\n      return serializeNulls ? NULL_STRING : \"\";\n    }\n\n    Type typeOfSrc;\n    if (src instanceof Enum) {\n      typeOfSrc = ((Enum) src).getDeclaringClass();\n    } else {\n      typeOfSrc = src.getClass();\n    }\n\n    return toJson(src, typeOfSrc);\n  }\n```\n\nOriginal issue reported on code.google.com by `MarceliN...@gmail.com` on 29 Sep 2010 at 10:20\n\nAttachments:\n- [EnumTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-244/comment-0/EnumTest.java)", "```\nAlready fixed in SVN.\n```\n\nOriginal comment by `limpbizkit` on 3 Oct 2010 at 6:41\n- Changed state: **Fixed**\n =||= ", 0], ["245", "Cannot convert Object to Json with complex datastructure", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:13 PM", "```\nWhat steps will reproduce the problem?\npublic class JSonNode {\n    private String label;\n    private String identifier;\n    private List<Map<String, Object>> items = new ArrayList<Map<String, Object>>();\n}\nI have remove get set methods for simplicity.\n\npublic static void main(String [] args  ) {\n        JSonNode node= new JSonNode();\n        Gson g = new Gson();\n        node.setIdentifier(\"name\");\n        node.setLabel(\"name\");\n        Map<String, Object> values = new HashMap<String, Object>();\n\n        values.put(\"name\", \"Africa\");\n        values.put(\"type\", \"continent\");\n\n\n        List<JSonNode> children = new ArrayList<JSonNode>();\n        JSonNode child1 = new JSonNode();\n        Map<String, Object> values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Egypt\");\n        values1.put(\"type\", \"country\");\n        child1.getItems().add(values1);\n\n        JSonNode child2 = new JSonNode();\n        values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Kenya\");\n        values1.put(\"type\", \"country\");\n        child2.getItems().add(values1);\n\n        JSonNode child3 = new JSonNode();\n        values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Sudan\");\n        values1.put(\"type\", \"country\");\n        child3.getItems().add(values1);\n\n        children.add(child1);\n        children.add(child2);\n        children.add(child3);\n\n        values.put(\"children\", children);\n\n        node.getItems().add(values);\n\n        System.out.println(g.toJson(node));\n\n    }\n\n\nWhat is the expected output? What do you see instead?\nExpected O/P :\n{\"label\":\"name\",\"identifier\":\"name\",\"items\":[{\"name\":\"Africa\",\"children\":{\"name\"\n:\"Africa\",\"children\":[{\"items\":[{\"name\":\"Egypt\",\"type\":\"country\"}]},{\"items\":[{\"\nname\":\"Kenya\",\"type\":\"country\"}]},{\"items\":[{\"name\":\"Sudan\",\"type\":\"country\"}]}]\n,\"type\":\"continent\"},\"type\":\"continent\"}]}\nAcutal O/P :\n{\"label\":\"name\",\"identifier\":\"name\",\"items\":[{\"name\":\"Africa\",\"children\":{},\"typ\ne\":\"continent\"}]}\n\n\n\nWhat version of the product are you using? On what operating system?\nGson 1.5, Windows, with JDK 1.5\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `nis...@gmail.com` on 30 Sep 2010 at 10:56\n- Merged into: #205", "```\nYou'll have success by replacing 'Object' in your map with the actual type of \nthe value.\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:53\n- Changed state: **Duplicate**\n =||= ", 0], ["246", "Document thrown exceptions", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:14 PM", "```\nWhat steps will reproduce the problem?\nLook in the javadoc for gson.toJson(Object src, Appendable writer) or any of \nthe methods serializing to a writer.\n\nWhat is the expected output? What do you see instead?\nI would like to know what exception to expect if there is any problem writing \nto the writer.\n\nThere is no such information currently.\n\nWhat version of the product are you using? On what operating system?\nsource code from trunk.\n\nPlease provide any additional information below.\nThe methods will wrap any IOException in a very generic RuntimeException. IMHO \nit would be better to create a new exception for this problem; \nJsonSerializationException, maybe. But in any case, the javadoc should specify \nwhat to expect.\n```\n\nOriginal issue reported on code.google.com by `albin.th...@gmail.com` on 4 Oct 2010 at 1:53", "```\nWe added two new Exceptions in Gson 1.6: JsonIOException and \nJsonSyntaxException. Both of these are subclasses of JsonParseException. If you \nhave suggestions on improving this design please let us know as soon as \npossible before we release Gson 1.6 publicly.\n```\n\nOriginal comment by `inder123` on 3 Nov 2010 at 12:21\n- Changed state: **Fixed**\n =||= ```\nI think that sounds great. That's exactly what I was looking for.\n\nTwo things, though:\n\n1. There are still two methods that need to be changed:\npublic void toJson(JsonElement jsonElement, Appendable writer)\npublic void toJson(Object src, Appendable writer)\n\n2. I have no problems with using unchecked exceptions, but there must be a way \nfor the user of the API to know which exceptions can be thrown. Either add them \nto the javadoc for the methods or to the method signature, i.e.:\n\npublic void toJson(JsonElement jsonElement, Appendable writer) throws \nJsonIOException\n\nor both. :-)\n\nThanks for a great API!\n```\n\nOriginal comment by `albin.th...@gmail.com` on 3 Nov 2010 at 6:56\n =||= ```\nThanks for the suggestion. r642 declares the exceptions that can be thrown by a \nmethod.\n```\n\nOriginal comment by `inder123` on 3 Nov 2010 at 7:47\n =||= ```\nExcellent!\n\nGreat work!\n```\n\nOriginal comment by `albin.th...@gmail.com` on 3 Nov 2010 at 10:20\n =||= ", 0], ["247", "Gson should release final fields reverting setAccessible to its earlier value", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:16 PM", "```\nChapter 9 of JSR 133 (Java Memory Model and Thread Specification) \nhttp://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf has some semantics \nregarding potential implication on compiler optimizations when setAccessible is \nused. Figure out what is the right thing to do after Gson has done its job on \nan object instance. We should consider using setAcessible to false for the \nobject.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 Oct 2010 at 12:26", "```\nI don't think setting setAccessible() to false is necessary. Each type you get \nthe fields of a class, you get new Field objects. Field.setAccessible() doesn't \nimpact any happens-before relationships.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 3:11\n- Changed state: **Invalid**\n =||= ", 0], ["248", "Avoid compiler warnings when deserializing to a parameterized type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:16 PM", "```\nFoo<Bar> foo = gson.fromJson(json, Foo.class);\n\ncurrently produces compiler warning for unchecked conversion and needs \n@SuppressWarnings(\"unchecked\")\n\nExplore revising gson.fromJson(String json, Class<? super T> classOfT) to get \nrid of this warning.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 Oct 2010 at 1:53", "```\nThere's nothing we can do here. The type of List.class is Class<List>, not the \ntype we really want. The only typesafe option we have is to add an overload \nthat accepts a TypeToken, and we've already decided not to go that route.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:19\n- Changed state: **WontFix**\n =||= ```\nThere's nothing we can do here. The type of List.class is Class<List>, not the \ntype we really want. The only typesafe option we have is to add an overload \nthat accepts a TypeToken, and we've already decided not to go that route.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2010 at 3:19\n =||= ", 0], ["249", "java.lang.IllegalArgumentException on toJson() for: new Object[] { new Object() }", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:17 PM", "```\nWhat steps will reproduce the problem?\nRun the attached source code.\n\nWhat is the expected output? What do you see instead?\nExpected legal json.\nThrows exception instead.\n\nAlso see example number two where expected output is [] yet it output's [null]\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nUbuntu 64bit, Sun Java 1.6 (Don't speak the O word!).\n```\n\nOriginal issue reported on code.google.com by `hq4ever` on 13 Oct 2010 at 7:35\n\nAttachments:\n- [Main.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-249/comment-0/Main.java)", "```\nAdded tests in r637\n\n                // Works, but prints \"null\" (not expected, expected: \"[]\")\n                System.out.println(new Gson().toJson(new Object[] { null }));\n\nGson indeed prints the correct answer of [null]. new Object[]{null} is not a \nnull array. It is an array containing a single object of value null. Since \narrays are ordered, nulls must always be printed.\n\n\n                // java.lang.IllegalArgumentException\n                System.out.println(new Gson().toJson(new Object[] { new Object() }));\n\nGson has no way to convert the Object into anything meaningful and hence you \nget the exception. \n```\n\nOriginal comment by `inder123` on 3 Nov 2010 at 12:18\n- Changed state: **Invalid**\n =||= ", 0], ["250", "API documentation - JsonStreamParser", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:18 PM", "```\nWhat steps will reproduce the problem?\n1.Opening up Gson API and selecting JsonStreamParser in firefox\n\n\nWhat is the expected output? What do you see instead?\nA formatted HTML page and instead i see the inner workings of the page\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `markhop...@gmail.com` on 14 Oct 2010 at 11:57", "```\nI forgot to mention that this is in relation to the online version google host, \nnot the seperate documents supplied with the GSON framework\n```\n\nOriginal comment by `markhop...@gmail.com` on 14 Oct 2010 at 11:59\n =||= Original comment by `limpbizkit` on 14 Oct 2010 at 3:47\n- Changed state: **Fixed**\n =||= ", 0], ["251", "OSGi Bundle version for 1.5 still points to 1.4", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:19 PM", "```\nWhat steps will reproduce the problem?\n1. Check META-INF/MANIFEST.MF\n\nWhat is the expected output? What do you see instead?\n\nI see:\n\nBundle-Version: 1.4\nExport-Package: com.google.gson;version=1.4, com.google.gson.annotatio\n ns;version=1.4, com.google.gson.reflect;version=1.4\n\nbut expected would be 1.5\n\nWhat version of the product are you using? On what operating system?\n\nApache Felix OSGi stack\n\nPlease provide any additional information below.\n\nThis way I cannot say if I upgraded from 1.4 to 1.5 or still stuck on 1.4\n```\n\nOriginal issue reported on code.google.com by `Krystian...@gmail.com` on 18 Oct 2010 at 11:17", "```\nFixed in r621 to the upcoming 1.6 version.\n```\n\nOriginal comment by `in...@google.com` on 1 Nov 2010 at 10:14\n =||= Original comment by `inder123` on 1 Nov 2010 at 10:15\n- Changed state: **Fixed**\n =||= ", 0], ["252", "Supply a public accessor for FieldAttributes.parentClass", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:20 PM", "```\nWhat steps will reproduce the problem?\n1. try to implement an ExclusionStrategy to exclude specific fields of specific \nclasses\n\nWhat is the expected output? What do you see instead?\nIt simply isn't possible\n\nWhat version of the product are you using? On what operating system?\n1.5, any\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `robby...@gmail.com` on 18 Oct 2010 at 11:26", "```\nDone in r622\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:47\n- Changed state: **Fixed**\n =||= ```\nI should have mentioned that this is part of the 1.6 release that can be \ndownloaded from the project downloads page.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:48\n =||= ", 0], ["253", "Cannot parse {' ':''}", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:21 PM", "```\nWhat steps will reproduce the problem?\n1. new JsonParser().parse(new StringReader(\"{' ':''}\"));\n\nWhat is the expected output? What do you see instead?\nEither return a valid object, or throw a JsonParseException.  Instead I get a \nprecondition failure in the javacc-generated code.\n\nWhat version of the product are you using? On what operating system?\nHead, as of 10/10/18.  On Ubuntu Lucid.\n\n```\n\nOriginal issue reported on code.google.com by `d...@google.com` on 19 Oct 2010 at 1:22", "```\nBroken in 1.5, but already fixed in SVN. \"Head\" is disingenuous.\n```\n\nOriginal comment by `limpbizkit` on 19 Oct 2010 at 3:56\n- Changed state: **Fixed**\n =||= ```\nBy head, I meant that I ran svn checkout \nhttp://google-gson.googlecode.com/svn/trunk/ google-gson-read-only yesterday, \nand the problem was there.  It seems to be current to r602.\nHow do I get the \"fixed\" version?  Is there an issue tracked for the fix?\n```\n\nOriginal comment by `d...@google.com` on 19 Oct 2010 at 7:08\n =||= ```\n[deleted comment]\n```\n =||= ```\n[deleted comment]\n```\n =||= ```\nThe bug is fixed in head. Did you rebuild?\n\nmkdir issue253\ncd issue253/\nsvn checkout http://google-gson.googlecode.com/svn/trunk/ google-gson-read-only \ncd google-gson-read-only/gson/\nmvn\nvi Issue253.java\n  import com.google.gson.JsonParser;\n  import java.io.StringReader;\n  public class Issue253  {\n    public static void main(String[] args) {\n      System.out.println(new JsonParser().parse(new StringReader(\"{' ':''}\")));\n    }\n  }\njavac -cp target/classes/ Issue253.java\njava -cp target/classes/:. Issue253\n\n(Comment 3 was edited to add a mvn command)\n```\n\nOriginal comment by `limpbizkit` on 20 Oct 2010 at 1:39\n =||= ", 0], ["254", "patch for GsonBuilder.addTypeAdaptersForDate() to register java.sql.Date handler", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:22 PM", "```\nThe serialized format of java.sql.Date is forced to \"MMM d, yyyy\".\nPlease consider the attached patch wherein DefaultJavaSQLDateTypeAdapter is \nexpanded to behave like DefaultDateTypeAdapter.  \nGsonBuilder.addTypeAdaptersForDate() registers a default pattern string or \nstyle for java.sql.Date.  Consequently, GsonBuilder.setDateFormat() creates the \ndesired date formatting for java.util.Date and java.sql.Date.\n\nThis seemed like a reasonable enhancement considering the explicit \njava.sql.Date support added in issue #134 (r513).\n```\n\nOriginal issue reported on code.google.com by `dvs...@gmail.com` on 22 Oct 2010 at 3:39\n\nAttachments:\n- [gson GsonBuilder addTypeAdaptersForDate.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-254/comment-0/gson GsonBuilder addTypeAdaptersForDate.patch)", "```\nIf we fixed issue 164, the default date handlers would catch SQL dates \nautomatically.\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:42\n- Added labels: **Type-Enhancement**, **Milestone-Undefined**\n- Removed labels: **Type-Defect**\n =||= ```\nFixed by r762.\n```\n\nOriginal comment by `limpbizkit` on 29 Mar 2011 at 9:53\n =||= Original comment by `limpbizkit` on 29 Mar 2011 at 9:53\n- Changed state: **Fixed**\n =||= ", 0], ["256", "GSON should permit the empty string as a property name in a map", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:30 PM", "```\nI have recently upgraded from GSON 1.3 to GSON 1.4 and now I'm getting an \nexception with code that worked correct before. I also tested GSON 1.5 and it \nbehaves the same as 1.4, throwing the exception.\nBelow is the stack trace:\n\nCaused by: java.lang.IllegalArgumentException: condition failed: false\n        at com.google.gson.Preconditions.checkArgument(Preconditions.java:39)\n        at com.google.gson.JsonObject.add(JsonObject.java:55)\n        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:519)\n        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:498)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:205)\n        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n        at com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializationVisitor.java:148)\n        at com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVisitor.java:126)\n        at com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisitor.java:113)\n        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:49)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:452)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:435)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)\n        at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:161)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\n        at com.google.gson.Gson.toJsonTree(Gson.java:230)\n        at com.google.gson.Gson.toJson(Gson.java:315)\n        at com.google.gson.Gson.toJson(Gson.java:270)\n        at com.google.gson.Gson.toJson(Gson.java:250)\n\n\nHappens when I call gson.toJson() passing a list of objects. If it is not \nobvious what changed in Preconditions.checkArgument(Preconditions.java:39) \nbetween versions 1.3 and 1.4 I can submit the actual object that is causing \nthis exception.\n```\n\nOriginal issue reported on code.google.com by `kosta.kr...@gmail.com` on 26 Oct 2010 at 11:27\n- Merged into: #227", "```\nOk, I have done some further investigation and found out the cause.\n\nBasically, what causes the exception is a Map<String, String> that contains an \nempty string as a key. Adding a space does nothing either, I have to enter a \nnon-empty value in order to avoid it.\n\nDue to the fact that this used to work in 1.3, I believe it is a regression \nbug, unless this has been outlined elsewhere.\n```\n\nOriginal comment by `kosta.kr...@gmail.com` on 26 Oct 2010 at 1:08\n =||= Original comment by `limpbizkit` on 31 Oct 2010 at 2:34\n- Changed title: **GSON should permit the empty string as a property name in a map**\n =||= ```\nFixed in subversion.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:38\n- Changed state: **Duplicate**\n =||= ", 0], ["257", "Cannot toJson custom Class, that has got a parameterized member", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:31 PM", "```\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12", "```\nIssue 258 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:30\n =||= ```\nYour core problem is that you're trying to operate on type parameters whose \nactual types has not been specified. If you call the overload of toJson() that \ntakes a type object, you might have more success.\n\nSee the TypeToken docs for an example of how to obtain the proper parameterized \ntype:\n  http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:33\n- Changed state: **Invalid**\n =||= ```\nIssue 259 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 31 Oct 2010 at 2:40\n =||= Please remove the Mailaddress of the user!\n =||= ", 0], ["258", "Cannot toJson custom Class, that has got a parameterized member", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:32 PM", "```\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12\n- Merged into: #257", "Original comment by `limpbizkit` on 31 Oct 2010 at 2:30\n- Changed state: **Duplicate**\n =||= ", 0], ["259", "Custom class having a parameterized member class.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:33 PM", "```\nCustom class having a parameterized member class.\n\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:13\n- Merged into: #257", "Original comment by `limpbizkit` on 31 Oct 2010 at 2:40\n- Changed state: **Duplicate**\n =||= ", 0], ["260", "Make TypeAdapters public", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:33 PM", "```\nWe have a couple cases where we need to serialize an object as a List.  As a \nresult, I'd like to extract the valueSet from a JsonObject and convert it to an \nArrayList.  However, all default typeadapters are package-only access, which \nmeans I can't extend nor delegate.\n\nAny chance we can see these converted to public classes? Any reason they're not?\n```\n\nOriginal issue reported on code.google.com by `aaron.st...@gmail.com` on 2 Nov 2010 at 6:28", "```\nWe didn't want to increase the footprint of our API by doing so. Also, we \ndidn't want to commit to the backward compatibility of these type adapters.\n\nAny reason why you can't just copy over the source-code in your own type \nadapter. When you register a type adapter, it overrides any Gson defaults.\n```\n\nOriginal comment by `inder123` on 3 Nov 2010 at 12:04\n- Changed state: **WontFix**\n =||= ```\nI can't only because the builtin type adapters also reference package-only \nvisibility classes.  As another example, I have a json response from a web \nservice that returns an array if empty, otherwise a map.  I need to check for \nthe type before serializing and set the target field to null, otherwise it \nthrows an exception.\n\nThe builtin MapTypeAdapter, however, depends on package-local TypeInfoMap.  I'm \nworried that a rat's nest is in store for me if I try and move everything out.  \nPreferable would be to be able to decorate MapTypeAdapter and call it a day.\n```\n\nOriginal comment by `aaron.st...@gmail.com` on 7 Dec 2010 at 7:49\n =||= ", 0], ["261", "ObjectTypePair obj and type mismatch possible.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:34 PM", "```\nWhat steps will reproduce the problem?\n1. Put gson under load with mutliple threads.\n2. cause the setObject method in ObjectTypePair to be called.\n3. note that the type does not get updated, leading to the ObjectTypePair \nhaving the wrong type for an object.\n\nWhat is the expected output? What do you see instead?\n\nAny call to setObject should update the type to the type of the current object \nusing a getClass on the object.\n\nWhat version of the product are you using? On what operating system?\nJRE 1.5 and 1.6 on Windows/Mac/linux/IBM JVM.\n\n```\n\nOriginal issue reported on code.google.com by `rojo...@gmail.com` on 3 Nov 2010 at 10:35", "```\nThere is a race condition that occurs around this that will cause gson to fail \nto put JSON data into Java classes when the ObjectTypePair is out of sync.\n```\n\nOriginal comment by `rojo...@gmail.com` on 3 Nov 2010 at 10:37\n =||= ```\nI'm having trouble finding the place where an ObjectTypePair instance is \nvisible to multiple threads. Can you tell me what public API you're using to \nget ObjectTypePair.setObject() to be called?\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2010 at 10:33\n =||= ```\nI don't have a deep understanding of the code, and the change does seem to be a \nside effect - but in ObjectNavigator.java in the accept method there is a call \nto objTypePair.setObject(objectToVisit);\n\nThe original type was an object, not the type of the objectToVisit.\n\nThis lack of type causes the deserialisation to fail.\n\nThe root cause seems to be earlier in the system, but once gson gets into the \nstate where this mismatch happens it continues to be in the bad state.\n\nIn our system we have forked gson in order to ensure that it works correctly.\n```\n\nOriginal comment by `rojo...@gmail.com` on 9 Nov 2010 at 3:07\n =||= ```\nDespite significant effort, I can't reproduce this in the current GSON tree. \nI'm guessing this has already been fixed.\n```\n\nOriginal comment by `limpbizkit` on 24 Jan 2011 at 10:36\n- Changed state: **Fixed**\n =||= ", 0], ["262", "Binding should optionally fail on an unrecognized property name", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:38 PM", "```\nWhat steps will reproduce the problem?\n1. Create simple Bean.\n2. Generate Json from exited Bean.\n3. Modify in the generated Json field name\n4. Build (fromJson) Bean from modified Json.\n\nWhat is the expected output? What do you see instead?\nShould be JsonParseException instead of full ignore.\n\nWhat version of the product are you using? On what operating system?\nGson 1.5\n\nPlease provide any additional information below.\nLook at attached example.\n\n```\n\nOriginal issue reported on code.google.com by `mst...@gmail.com` on 8 Nov 2010 at 4:23\n- Merged into: #188\n\nAttachments:\n- [GTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-262/comment-0/GTest.java)", "Original comment by `limpbizkit` on 30 Dec 2011 at 6:23\n- Changed title: **Binding should optionally fail on an unrecognized property name**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nIssue 188 can do this, and it's also more general.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:38\n- Changed state: **Duplicate**\n =||= ", 0], ["263", "tom", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:39 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `Brentley...@gmail.com` on 12 Nov 2010 at 7:23", "```\nSorry, a type, close/delete this. thanks\n```\n\nOriginal comment by `Brentley...@gmail.com` on 12 Nov 2010 at 7:23\n =||= Original comment by `limpbizkit` on 12 Nov 2010 at 9:57\n- Changed state: **WontFix**\n =||= ", 0], ["264", "Can't parse backslash", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:40 PM", "```\nWhat steps will reproduce the problem?\n\nString str = \"{message:\\\":-\\\\\\\"}\";\nMap<String,String> map = gson.fromJson(str,new TypeToken<Map<String, String>>() \n{}.getType());\n\n\nWhat is the expected output? What do you see instead?\n\nI expect Map<String,String> (size = 1): key = \"message\", value = \":-\\\"\n\nInstead:\n\"Exception in thread \"main\" com.google.gson.JsonParseException: Failed parsing \nJSON source: java.io.StringReader@911f71 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:59)\n    at com.google.gson.Gson.fromJson(Gson.java:443)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n    at json.Main.main(Main.java:22)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)\nCaused by: com.google.gson.ParseException: Encountered \" \"\\\"\" \"\\\" \"\" at line 1, \ncolumn 10.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)\n    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)\n    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n    at com.google.gson.JsonParser.parse(JsonParser.java:54)\n    ... 8 more\n\"\n\nWhat version of the product are you using? On what operating system?\n\n1.5, windows7 - 32 bit\n\nPlease provide any additional information below.\n\nIf I parse this string with additional two backslashes - it works, but there is \n:\\\\ in value..\n\n```\n\nOriginal issue reported on code.google.com by `Dmitry.T...@gmail.com` on 18 Nov 2010 at 11:18", "```\nDoes it work with the latest code from SVN? That has a new parser.\n```\n\nOriginal comment by `limpbizkit` on 18 Nov 2010 at 4:21\n =||= ```\nFixed in GSON 1.6. See StringTest#testEscapedBackslashInStringDeserialization.\n```\n\nOriginal comment by `limpbizkit` on 24 Jan 2011 at 10:38\n- Changed state: **Fixed**\n =||= Looks like this bug is still exist in Gson 2.7 would suggest following fix:\n\n```\nprivate StringBuilder removeExtraBackslashes(StringBuilder json, int startingIndex) {\n        int first = json.indexOf(BACKSLASH, startingIndex);\n        int second = json.indexOf(BACKSLASH, first+1);\n        if (second != -1 && second == first+1) {\n            json.deleteCharAt(second);\n        } else {\n            second = first+1;\n        }\n        int next = json.indexOf(BACKSLASH, second);\n        if (next != -1) {\n            removeExtraBackslashes(json, next);\n        }\n        return json;\n}\n\n```\n =||= ", 0], ["265", "Alternative API for deserializing a generic object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:41 PM", "```\nI'm using the following code for deserializing a generic object like \nList<String>\n\nThe syntax becomes:\nList<String> list = deserialize(json, List.class, String.class); \nMap<String, List<Integer>> map = deserialize(json, Map.class, String.class, \nList.class, Integer.class);\n\nwhich is (arguably) cleaner compared to the TypeToken.\n\n\n\n\n    public static <T> T deserialize(String string, Class<?> clazz, Class<?>... argsArr) {\n        Type t = getType(clazz, new ArrayList<Class<?>>(Arrays.asList(argsArr)));\n        return new Gson().fromJson(string, t);\n    }\n\n    private static Type getType(Class<?> clazz, List<Class<?>> args) {\n        if (clazz.getTypeParameters().length == 0) {\n            return clazz;\n        }\n\n        List<Type> types = new ArrayList<Type>();\n        for (int n = 0; n < clazz.getTypeParameters().length; ++n) {\n            types.add(getType(args.remove(0), args));\n        }\n        return new PT(clazz, types);\n    }\n\n    private static class PT implements ParameterizedType {\n\n        private Class<?> type;\n        private Type[] typeArgs;\n\n        public PT(Class<?> type, List<Type> typeArgs) {\n            this.type = type;\n            this.typeArgs = typeArgs.toArray(new Type[0]);\n        }\n\n        @Override\n        public Type[] getActualTypeArguments() {\n            return typeArgs;\n        }\n\n        @Override\n        public Type getOwnerType() {\n            return type.getDeclaringClass();\n        }\n\n        @Override\n        public Type getRawType() {\n            return type;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == null || obj.getClass() != PT.class) {\n                return false;\n            }\n            PT other = (PT) obj;\n            return type == other.type && Arrays.equals(typeArgs, other.typeArgs);\n        }\n    }\n```\n\nOriginal issue reported on code.google.com by `goo...@boast.nl` on 19 Nov 2010 at 10:16", "```\nThanks for sharing your thoughts. It is an interesting approach, and works well \nfor your List<String> example. On the other hand, it is not descriptive enough \nfor your Map example. What if it was a Map<K1<K2<K3<K4>>>, V1<V2>>? How would \nyou know where the key description ends and the value description starts? \n\nGson API is better off leaving the type construction out of its scope. \nIn Gson 1.7, we are borrowing Types class from Guice that lets you create \narbitrarily complex parameterized types on the fly. Checkout the latest code or \nstay tuned for our public 1.7 release.\n```\n\nOriginal comment by `inder123` on 31 Jan 2011 at 11:31\n- Changed state: **WontFix**\n =||= ```\nYour Map example would work equally well. The function #getType() is recursive: \nit checks how many generic types a class expects and then walks this tree depth \nfirst. \n\nYou would simply specify it in the same order like you define it: (Map, K1, K2, \nK3, K4, V1, V2). Where the key description ends is obtained from the actual \nclass files (class.getTypeParameters().length). As long as nobody invents \nvariable generics your safe :)\n\n```\n\nOriginal comment by `goo...@boast.nl` on 1 Feb 2011 at 10:56\n =||= ", 0], ["266", "checksum failure in http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:42 PM", "```\nWhile building code using maven and using \nhttp://google-gson.googlecode.com/svn/mavenrepo/, we are getting check sum \nfailure on this file \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml\n\nThe reason is check sum stored in this file \n5d94c0b19adc896ec3e3503f4216f3d4c86087ad from location \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml.sha1  doesn't match up checksum created for the file in this \nlocation \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml which is 1d715fb31af33a21d79b835cb630540e3a5d0b1c\n\n\nexpected checksum should be 1d715fb31af33a21d79b835cb630540e3a5d0b1c on this \nlocation \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml.sha1\n\n\nif you using nexus maven mirror it would be as simple update index on this \nfolder should fix this problem\n```\n\nOriginal issue reported on code.google.com by `muruve...@gmail.com` on 22 Nov 2010 at 4:49", "```\nwork around to this problem do checksum to warning on your maven build and it \nshould work fine. But I would recommend these people fix this silly problem \nrather than working around the problem\n```\n\nOriginal comment by `muruve...@gmail.com` on 22 Nov 2010 at 4:58\n =||= ```\nWe have now deprecated our own Maven repository and activated sync of Gson to \nMaven Central. Please use Gson 1.7.1 from Maven Central and it would have the \ncorrect checksums.\n\nhttp://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 11:31\n- Changed state: **Fixed**\n =||= ", 0], ["267", "Please clear up what gson version is available from Maven", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:43 PM", "```\nAfter getting my nexus repo to proxu your maven repo (at \nhttp://google-gson.googlecode.com/svn/mavenrepo/) I can only find gson up to \nversion 1.4. I cannot locate gson version 1.5 or 1.6.\n\nDo I have the incorrect maven address?\n```\n\nOriginal issue reported on code.google.com by `cmdema...@gmail.com` on 22 Nov 2010 at 8:30", "```\nGson is now synced to Maven Central repository so you do not need to refer to \nhttp://google-gson.googlecode.com/svn/mavenrepo/ to get the latest versions. \nJust add the Gson dependency in your project and you will be good. \nSee: https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 8:52\n- Changed state: **Invalid**\n =||= ", 0], ["268", "Unparseable date exception when parsing SQL dates in 1.5", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:44 PM", "```\nWhat steps will reproduce the problem?\n\n1. set date format as follows:\n\nGson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"MMM dd, yyyy \nhh:mm:ss a\").create();\n\n2. create a new java.sql.Date \njava.sql.Date sqlDate = new java.sql.Date(12345l);\n\n3. create a class with a date field and create an instance of that class \nsetting our date as a member\n\nprivate static class MyDate {\n    public Date date;\n}\n\n3. set the date in the class and serialize it to JSON:\n\n\npublic static void main(String[] args) throws ParseException {\n\n    Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"MMM dd, yyyy hh:mm:ss a\").create();\n\n    java.sql.Date sqlDate = new java.sql.Date(12345l);\n\n    MyDate d = new MyDate();\n    d.date = sqlDate;\n\n    String json = gson.toJson(d);\n    System.out.println(json);\n    gson.fromJson(json, MyDate.class);\n}\n\nprivate static class MyDate {\n    public Date date;\n}\n\nWhat is the expected output? What do you see instead?\n\nserialized MyDate {\"date\":\"Dec 31, 1969\"}) does not have a time component in \ngson 1.5, however in gson 1.4 MyDate will be serialized as {\"date\":\"Dec 31, \n1969 07:00:12 PM\"} \n\nAttempting to deserialize MyDate which was serialized with gson 1.5 results in \nthe following exception, when using the same DateFormat:\n\nException in thread \"main\" com.google.gson.JsonParseException: \njava.text.ParseException: Unparseable date: \"Dec 31, 1969\"\n\nThe desired behavior would be to serialize the time component as zeros when it \nis specified in the DateFormat, but not available in the date object. The \ncurrent behavior of 1.5 results in unparsable date exceptions when the date \ndoes not have a time component.\n\nWhat version of the product are you using? On what operating system?\n\ngson version 1.5, on Windows 7 and Red Hat Enterprise Linux Server release 5.3 \n\n\n\n```\n\nOriginal issue reported on code.google.com by `dmitri.sotnikov@gmail.com` on 23 Nov 2010 at 10:42", "```\nI'm seeing the same issue (I think)...out of curiosity, have you tried this \nwith gson 1.6 yet?\n```\n\nOriginal comment by `snag...@yahoo.com` on 30 Nov 2010 at 10:26\n =||= ```\nThe same problem occurs in Gson 1.6, the main issue is that I think you should \nbe able to deserialize the data with the same GsonBuilder that was used to \nserialize it, and that's currently not the case.\n```\n\nOriginal comment by `dmitri.sotnikov@gmail.com` on 30 Nov 2010 at 11:24\n =||= ```\nThe work around I'm using currently is to write custom serializers and \ndeserializers for dates:\n\n        private static final String dateFormat = \"MM/dd/yyyy hh:mm:ss a\";\n    private static SimpleDateFormat format = new SimpleDateFormat(dateFormat);\n\n    private static class DateTimeSerializer implements JsonSerializer<Date> {\n        public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n            return new JsonPrimitive(format.format(src));\n        }\n    }\n\n    private static class DateTimeDeserializer implements JsonDeserializer<Date> {\n        public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n            try {\n                return format.parse(json.getAsJsonPrimitive().getAsString());\n            } catch (ParseException e) {\n                throw new JsonParseException(e.getMessage());\n            }\n        }\n    }\n```\n\nOriginal comment by `dmitri.sotnikov@gmail.com` on 30 Nov 2010 at 11:26\n =||= ```\nCool, thanks.  It turned out the problem I was having was that my object model \nhad a java.sql.Timestamp (derived from the database), which is a subclass of \nDate and therefore skipped the custom serializer.  By registering all the \nsubclasses (including java.sql.Date, etc.) with the same serializer, it works \nfine now.\n\nBTW, is there no way to configure the GsonBuilder so that subclasses use the \nsame custom serializer?  It seems like that would be desired, unless a more \nspecific serializer applied.\n```\n\nOriginal comment by `snag...@yahoo.com` on 1 Dec 2010 at 5:26\n =||= ```\nFixed by r762.\n```\n\nOriginal comment by `limpbizkit` on 29 Mar 2011 at 9:53\n- Changed state: **Fixed**\n =||= ", 0], ["270", "java.util.Date is serialized as null when referenced from [Container { Map<String,Object> }]", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:47 PM", "```\nWhat steps will reproduce the problem?\n1. Open maven based eclipse project\n2. Run as java application gson.bug.MessItUp\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n\nPrint the JSON of values:\nPrint the JSON of values:\n{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}\nPrint the JSON of A:\n{\"values\":{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}}\n\nActual: \nPrint the JSON of values:\n{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}\nPrint the JSON of A:\n{\"values\":{\"creationDate\":{}}}\n\nWhat version of the product are you using? On what operating system?\nGSON 1.6, Ubuntu 64bit. Java 1.6.\n\n```\n\nOriginal issue reported on code.google.com by `hq4ever` on 6 Dec 2010 at 1:14\n\nAttachments:\n- [reproduce.tar.gz](https://storage.googleapis.com/google-code-attachments/google-gson/issue-270/comment-0/reproduce.tar.gz)", "```\nI'm attaching the patch for the issue.\nI suggest to serialize map's values based on actual class (value.getClass()) \nrather then parameter type.\nIn this case standalone map and field (as in hq4ever's example) will be \nserialized in the same way.\nAlso this way we'll have more transparent way of serialization subclasses \ninside the map.\nAm I missing any use cases which will be broken?\n```\n\nOriginal comment by `kulik.st...@gmail.com` on 10 Jan 2011 at 10:42\n\nAttachments:\n- [Issue270.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-270/comment-1/Issue270.patch)\n =||= ```\nThis should work with Gson 1.7.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:18\n =||= ```\nFixed in GSON 2.0.\n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 3:18\n- Changed state: **Fixed**\n =||= ", 0], ["271", "cannot cleanly override enum deserializer", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:48 PM", "```\nThere's a constructor for Gson that accepts a list of serializers/deserializers \nfor default types.  I can't seem to figure out a way to override Enum without \ncopy/pasting the 900 line DefaultTypeAdapters class and changing it, as all of \nthe default serializers are marked private in a package private class.  Any \nideas on a cleaner way?\n```\n\nOriginal issue reported on code.google.com by `adrian.f...@gmail.com` on 6 Dec 2010 at 2:06", "```\nhere's a way I've found:\n\nopen up the package (com.google.gson) and add the type hierarchy you want with \nthe package private registerTypeHierarchyAdapter method.\n\npackage com.google.gson;\n\npublic class JcloudsGsonPackageAccessor {\n   public static GsonBuilder registerTypeHierarchyAdapter(GsonBuilder builder, Class<?> baseType, Object typeAdapter) {\n      return builder.registerTypeHierarchyAdapter(baseType, typeAdapter);\n   }\n}\n\n...\n\n      JcloudsGsonPackageAccessor.registerTypeHierarchyAdapter(builder, Enum.class, new MyEnumTypeAdapter());\n\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 6 Dec 2010 at 2:19\n =||= ```\nFixed in r709\n```\n\nOriginal comment by `inder123` on 24 Jan 2011 at 10:21\n- Changed state: **Fixed**\n =||= ", 0], ["272", "Multidimensional array support is now broken", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:49 PM", "```\nWhat steps will reproduce the problem?\n\nRun the below object through:\n\nString[][] items = new String[][]{\n            {\"3m Co\", \"71.72\", \"0.02\", \"0.03\", \"4/2 12:00am\", \"Manufacturing\"},\n            {\"Alcoa Inc\", \"29.01\", \"0.42\", \"1.47\", \"4/1 12:00am\", \"Manufacturing\"}\n        };\n\nWhat is the expected output? What do you see instead?\n[[\"3m Co\",\"71.72\",\"0.02\",\"0.03\",\"4/2 12:00am\",\"Manufacturing\"],[\"Alcoa \nInc\",\"29.01\",\"0.42\",\"1.47\",\"4/1 12:00am\",\"Manufacturing\"]]\n\nInstead get an empty object on client side... {}\n\nWhat version of the product are you using? On what operating system?\nUsed to work in 1.3, now using 1.6 and it's broken (fixed the door broke the \nwindow :) ). On Linux (not sure makes a difference).\n\nPlease provide any additional information below.\nnone\n\n```\n\nOriginal issue reported on code.google.com by `VictorLe...@gmail.com` on 15 Dec 2010 at 9:03", "Original comment by `inder123` on 24 Jan 2011 at 10:41\n- Changed state: **Invalid**\n =||= ", 0], ["273", "Problem when deserializing Float but not with Double", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:50 PM", "```\nWhat steps will reproduce the problem?\n{{{\npackage gson.floating.point;\n\nimport com.google.gson.Gson;\n\npublic class TestFloat {\n\n    public static class FloatData{\n        Float cantidad;\n\n        protected FloatData(){}\n\n        public Float getCantidad() {\n            return cantidad;\n        }\n        public void setCantidad(Float cantidad) {\n            this.cantidad = cantidad;\n        }\n\n    }\n    public static class DoubleData{\n        Double cantidad;\n\n        protected DoubleData(){}\n\n        public Double getCantidad() {\n            return cantidad;\n        }\n        public void setCantidad(Double cantidad) {\n            this.cantidad = cantidad;\n        }\n\n    }\n\n    public static void main(String[] args) {\n        String json=\"{\\\"cantidad\\\":13113715.22}\";\n        DoubleData d=new Gson().fromJson(json, DoubleData.class);\n        FloatData f=new Gson().fromJson(json, FloatData.class);\n        //Prints 'Double value: 1.311371522E7'\n        System.out.println(\"Double value: \"+d.getCantidad());\n        //Prints 'Float value: 1.3113715E7', decimal lost\n        System.out.println(\"Float value: \"+f.getCantidad());\n        assert d.getCantidad().equals(13113715.22);\n        assert f.getCantidad().equals(13113715.22);\n    }\n\n}\n}}}\nWhat is the expected output? Number with decimals \nWhat do you see instead? Number without decimals\nWhat version of the product are you using?\nGson 1.4\nOn what operating system?\nUbuntu 10.10\n```\n\nOriginal issue reported on code.google.com by `cirovlad...@gmail.com` on 16 Dec 2010 at 9:59", "```\nNot a gson issue.\nAll numbers between 13113714.5 and 13113715.5 are represented as 1.3113715E7f.\n(13113714.5 falls between 2^23 and 2^24, and float has only 23bit mantissa)\n```\n\nOriginal comment by `kulik.st...@gmail.com` on 7 Jan 2011 at 1:43\n =||= ```\nOk, Thanks for the correction.\nI have troubles determining the range of float and the java documentation \ndoesn't help me.\n```\n\nOriginal comment by `cirovlad...@gmail.com` on 7 Jan 2011 at 8:45\n =||= Original comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:57\n- Changed state: **WontFix**\n =||= ", 0], ["274", "ExclusionStrategy should provide context information", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:52 PM", "```\nWhat steps will reproduce the problem?\n\nUser class has a password field:\n\nclass User {\n\n  String username;\n\n  @Strategy(deserialize=true, serialize=false)\n  String password;\n}\n\nWhat is the expected output? What do you see instead?\n\nfromJson() should get password\ntoJson() should ignore password\n\nbut ExclusionStrategy.shouldSkipField() missing context information:\n\npublic boolean shouldSkipField(FieldAttributes attrs) {\n    Strategy s = attrs.getAnnotation(Strategy.class);\n    if (isSerializing() && s!=null && !s.serialize)\n        return false;\n    return true;\n}\n\ncannot determin isSerializing() in shouldSkipField() method.\n\nWhat version of the product are you using? On what operating system?\n\nGson-1.6\n\nPlease provide any additional information below.\n\nMaybe provides a Context argument?\n```\n\nOriginal issue reported on code.google.com by `askxuefeng@gmail.com` on 30 Dec 2010 at 2:09", "```\nFunctionality added as part of r710.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:39\n- Changed state: **Fixed**\n- Added labels: **Milestone-Release1.7**\n =||= ", 0], ["275", "Problem version gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:52 PM", "```\nI try to use GSON library in JDEVELOPER 10G and I get this error:\n\nError(5,24): cannot access class com.google.gson.Gson; \nclass file has wrong version 49.0, should be 45.3 or 46.0 or 47.0 or 48.0\n\nMy JDEVELOPER VERSION IS 10.1.2.0.0 (BUILD 1811)\n```\n\nOriginal issue reported on code.google.com by `jesus....@gmail.com` on 7 Jan 2011 at 9:42", "```\nYou may have JDeveloper set with jdk1.4.\nAlso your JDeveloper version is too old. You should consider moving to a newer \nversion (at least 10.1.3 which is based on jdk5) \n```\n\nOriginal comment by `kulik.st...@gmail.com` on 7 Jan 2011 at 11:59\n =||= ```\nProblem to change jdk version in JDEVELOPER is that I will have to change \nversion of my server. It will be a big problem.\nIs there another option ?\n\nThanks.\n\nAtte. JFAA\n\n\n```\n\nOriginal comment by `jesus....@gmail.com` on 10 Jan 2011 at 4:17\n =||= ```\nGson is built using a lot of Java 1.5 features (i.e. annotations, enums, type \nparameters, etc.). That said, I have heard of others cross compiling Gson to \n1.4 and had success doing so, but I have not tried this myself.\n\nWe do not plan to support pre-1.5 JDK in the near future.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 10 Jan 2011 at 10:25\n- Changed state: **WontFix**\n =||= ```\nChange Environment property variable in its global definition.\nIt will work fine.\nI was experiencing the same problem.\n```\n\nOriginal comment by `lalit.ve...@gmail.com` on 22 Nov 2012 at 12:40\n =||= ", 0], ["276", "Make GsonBuilde.registerTypeAdapter() method more concrete ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:54 PM", "```\nI'd like to suggest one enhancement.\n\nAs described in docs:\nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/G\nsonBuilder.html#registerTypeAdapter(java.lang.reflect.Type,%20java.lang.Object)\nmethod registerTypeAdapter receive second argument of type Object,\nwhich is wired (at least for me), code didn't tells me what I should\npass as actual parameter so I should consider documentation first.\n\n-------------\nHere is my plan.\n1. Declare abstract interface:\npackage com.google.gson;\npublic abstract interface TypeAdapter<T> {\n  //emty body\n  //Note: abstract interface can not be implemented directrly.\n}\n\n2. Inherit InstanceCreator, JsonSerializer, and a JsonDeserializer from\nTypeAdapter, like this:\npublic interface InstanceCreator<T> extends TypeAdapter<T>\npublic interface JsonSerializer<T> extends TypeAdapter<T>\npublic interface JsonDeserializer <T> extends TypeAdapter<T>\n\n3. Change registerTypeAdapter method signature to:\nregisterTypeAdapter(java.lang.reflect.Type,TypeAdapter<T>)\n//note: something might be done to handle type T more precisely\n//to check that TypeAdapter type corresponds to first agrument.\n//But I'm not sure.\n\n4. As result it will be clear for gson llibrary users - what should\nbe passed as typaAdapter.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `dmitry.s...@gmail.com` on 13 Jan 2011 at 4:56", "```\nWe have methods like that (though marked private) registerSerializer, \nregisterDeserializer, etc. \n\nIt seems type-safe but with a false sense of security. Unfortunately, Java Type \nclass is not parameterized, so it is possible for you to attach a \nTypeAdapter<T> with any type instead of the type of T.  We can address that by \nproviding registerSerializer(Class<T>, JsonSerializer<T>) but that excludes the \npossibility of registering type adapters for parameterized types.  Providing \nboth methods results in unnecessary API bloat. \n\nI think what we currently have is a reasonable solution but if you can think of \na minimalist enhancement that improves type safety, let us know. \n```\n\nOriginal comment by `inder123` on 19 Jan 2011 at 10:16\n- Changed state: **WontFix**\n =||= ", 0], ["277", "Using GOSN in HTTP Servlet call", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:27:58 PM", "```\nWhat steps will reproduce the problem?\n1. Create a java class named as Test with 3 attributes all are string\n2. using gson convert it to String\n3. sending that data to the requester\n\nWhat is the expected output? What do you see instead?\n{\"mapperId\":\"14\",\"mapperName\":\"REPO Live\",\"deskId\":\"12\"}\n\n\"{\\\"mapperId\\\":\\\"14\\\",\\\"mapperName\\\":\\\"REPO Live\\\",\\\"deskId\\\":\\\"12\\\"}\"\n\nWhat version of the product are you using? On what operating system?\ngson-1.6.jar\nWindows 7 ultimate N\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `sathee.r...@gmail.com` on 13 Jan 2011 at 5:14\n\nAttachments:\n- [UserMarketViewMapper.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-277/comment-0/UserMarketViewMapper.java)", "```\n[deleted comment]\n```\n =||= ```\nCould you provide an executable test case? I suspect the problem is that you're \ndouble encoding your JSON.\n```\n\nOriginal comment by `limpbizkit` on 14 Jan 2011 at 3:03\n =||= ```\n[deleted comment]\n```\n =||= ```\nyes, you are right.. i didn't noticed that..\n```\n\nOriginal comment by `sathee.r...@gmail.com` on 14 Jan 2011 at 12:03\n =||= Original comment by `limpbizkit` on 15 Jan 2011 at 8:10\n- Changed state: **Invalid**\n =||= ", 0], ["278", "Support versioning of json files.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:00 PM", "```\nThe current approach of @Until and @Since doesn't work as it only deals with \nversioning from the perspective of the current code.  If I wrote out a json \nstream with version 1.0 code and version 2.0 code has that version as a \ndifferent type, this will fail. \n\nA couple of parts need to change:\n\n1) There needs to be some concept of 'type' (eg json:type) associated with each \nelement.  This would also resolve the problem of deserializing polymorphic \ncollections.  I have implemented this explicitly but it really should be built \ninto the framework rather than having to register type adapters for each \nabstract super class.  I believe this issue is already in the queue, but I view \nit as a requirement for #2.\n\n2) There needs to be a version id of the type that has been stored (eg \njson:version).  When the parser reads the data, it should be able to lookup the \nadapter per type/version pair that can correctly deserialize the json stream.\n\n\n```\n\nOriginal issue reported on code.google.com by `swall...@gmail.com` on 21 Jan 2011 at 4:54", "```\nAdding type and version information to JSON objects slightly defeats much of \nthe motivation of JSON: high signal to noise ratio.\n\nWe may consider this but if you really need type safety and versioning you \nmight be better off with a more complex wire protocol like protobuffers or \nthrift.\n```\n\nOriginal comment by `limpbizkit` on 22 Jan 2011 at 2:19\n- Added labels: **Type-Enhancement**, **Priority-Low**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= ```\nI understand it's not for every use case.  My use case is JSON as a document \nstorage format.  So as the code changes, the document schema will evolve and \ntype and version information (where appropriate) is required to keep the latest \ncode clean of old schema information.\n```\n\nOriginal comment by `swall...@gmail.com` on 24 Jan 2011 at 3:40\n =||= ```\nThere are security issues with carrying type information in the data, and \ntrusting it on the receiving end. With Gson, we want to discourage such \npotential security holes. \n\nMay be you should have an explicit field called type but use that to mean \n\"type/version of the document\" instead of the actual Java type.\n```\n\nOriginal comment by `inder123` on 24 Jan 2011 at 10:25\n =||= ```\nHow about tagging the entity version outside of the JSON data?\n\nFor example, web services and API, the version is usually within the URL\nFor file systems, add the version on the file name (or as part of the directory \nstructure)\nFor some database storing a blob (or clob), store the version within the same \nrecord as the data.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 26 Apr 2011 at 11:26\n =||= ```\nI don't think we want to fix this in-framework. If you want to add a version \nproperty to your top-level object, you should be able to accomplish what you \nwant.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:49\n- Changed state: **WontFix**\n =||= ", 0], ["279", "Templated collections of collecctions do not serialize correctly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:01 PM", "```\nWhat steps will reproduce the problem?\n\nSee attached file. The program contains a class with a Map and a Map<String, \nObject>. If a value in the map is a List<String>, it does not serialize \ncorrectly. This is a problem only with the parametrized type Map<String, \nObject>. The non-parametrized type, Map, serializes correctly.\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n{\"map\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-2\":\"value-2\"},\"list\":[\"e\nlement-1\",\"element-2\"]},\"pMap\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-\n2\":\"value-2\"},\"list\":[\"element-1\",\"element-2\"]}}\n\n\nGot:\n{\"map\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-2\":\"value-2\"},\"list\":[\"e\nlement-1\",\"element-2\"]},\"pMap\":{\"string\":\"strval\",\"map\":{},\"list\":{}}}\n\n\nWhat version of the product are you using? On what operating system?\n\nGson version 1.6, Mac OS X 10.6.5\n\nPlease provide any additional information below.\nRelated to Issue 205\n\nFIX\n\nModify DefaultTypeAdapters.MapTypeAdapter to check if the generic type of the \nvalue type of the map is Object. If so, use the instance's type.\n\nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/\ngoogle/gson/DefaultTypeAdapters.java#649\n\nWorkaround:\n\nDefine an adapter for Objects:\n\n    private static class ObjectTypeAdapter implements JsonSerializer<Object> {\n        public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {\n\n            if (src.getClass() != Object.class) {\n                return context.serialize(src, src.getClass());\n            }\n\n            return new JsonObject();\n        }\n    }\n\nRegister this with the builder:\nGson gson2 = (new GsonBuilder()).registerTypeAdapter(Object.class, new \nObjectTypeAdapter()).create();\n\n\n```\n\nOriginal issue reported on code.google.com by `anand.ke...@gmail.com` on 28 Jan 2011 at 6:38\n\nAttachments:\n- [GsonMapBug.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-279/comment-0/GsonMapBug.java)", "```\nI like the suggestion of using the runtime type if the map value type is \nObject. It's unfortunate that you can't specify the actual type on the map.\n```\n\nOriginal comment by `limpbizkit` on 21 Mar 2011 at 9:54\n =||= ```\nI think this works with 1.7.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:55\n =||= ```\nVerified that this is fixed in 1.7.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 5:20\n- Changed state: **Fixed**\n =||= ", 0], ["280", "long type can't convert right", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:05 PM", "```\nWhat steps will reproduce the problem?\njust use java long data type.\nthe problem caused by the java long type is 64 bit,javascript long type is 53 \nbit.So the data lost.\n\nWhat is the expected output? What do you see instead?\nsuggest use string to convert long type.\n\nWhat version of the product are you using? On what operating system?\nnewest version.\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `zhangbo...@gmail.com` on 29 Jan 2011 at 2:08", "```\nsee \nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/L\nongSerializationPolicy.html\n```\n\nOriginal comment by `radio...@ya.ru` on 10 Feb 2011 at 12:41\n =||= ```\nAs stated above, this can be achieved by using the LongSerializationPolicy with \nthe GsonBuilder. This feature has been available since 1.3 release, so you \nshould be able to use this functionality now.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:42\n- Changed state: **Fixed**\n =||= ", 0], ["281", "GSON default date serializer is locale-specific", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:06 PM", "```\nThis has caused problems for Caliper, which was relying on the default date \nserializer:\nhttp://code.google.com/p/caliper/issues/detail?id=113\n\nWork-around the problem by registering a date type adapter like the following:\n\n  private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n    private final DateFormat dateFormat;\n\n    private DateTypeAdapter() {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssz\", Locale.US);\n      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    }\n\n    @Override public synchronized JsonElement serialize(Date date, Type type,\n        JsonSerializationContext jsonSerializationContext) {\n      return new JsonPrimitive(dateFormat.format(date));\n    }\n\n    @Override public synchronized Date deserialize(JsonElement jsonElement, Type type,\n        JsonDeserializationContext jsonDeserializationContext) {\n      try {\n        return dateFormat.parse(jsonElement.getAsString());\n      } catch (ParseException e) {\n        throw new JsonParseException(e);\n      }\n    }\n  }\n\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 30 Jan 2011 at 1:01", "```\nFixed by r721.\n```\n\nOriginal comment by `limpbizkit` on 10 Feb 2011 at 1:07\n- Changed state: **Fixed**\n =||= ```\nIt will be great if we can configure GsonBuilder to force used of ISO-8601 \nformat with UTC timezone, for serialization and deserialization.\n\nThanks\n```\n\nOriginal comment by `boillodm...@gmail.com` on 14 Jun 2011 at 10:03\n =||= ```\n[deleted comment]\n```\n =||= ```\nprivate static class GmtDateTypeAdapter implements JsonSerializer<Date>, \nJsonDeserializer<Date> {\n        private final DateFormat dateFormat;\n\n        private GmtDateTypeAdapter() {\n            dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.US);\n            dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        }\n\n        @Override\n        public synchronized JsonElement serialize(Date date, Type type,\n                JsonSerializationContext jsonSerializationContext) {\n            synchronized (dateFormat) {\n                String dateFormatAsString = dateFormat.format(date);\n                return new JsonPrimitive(dateFormatAsString);\n            }\n        }\n\n        @Override\n        public synchronized Date deserialize(JsonElement jsonElement, Type type,\n                JsonDeserializationContext jsonDeserializationContext) {\n            try {\n                synchronized (dateFormat) {\n                    return dateFormat.parse(jsonElement.getAsString());\n                }\n            } catch (ParseException e) {\n                throw new JsonSyntaxException(jsonElement.getAsString(), e);\n            }\n        }\n    }\n```\n\nOriginal comment by `boillodm...@gmail.com` on 14 Jun 2011 at 12:36\n =||= ```\n+1 ! And it would be nice to be able to specify the DateFormat and not just \nonly the SDF pattern on the GsonBuilder\n```\n\nOriginal comment by `lorber.s...@gmail.com` on 15 Mar 2013 at 2:46\n =||= ```\nWhich version of gson has this fix ?\n```\n\nOriginal comment by `misramay...@gmail.com` on 3 Jul 2014 at 9:48\n =||= still experiencing this issue in gson 2.3.1\n =||= This issue still exists in Gson 2.4\n =||= Is the intention that the UtcDateTypeAdapter introduced in 2.4 should be manually registered as a type adapter?\n =||= @code77se  Yes. Register UtcDateTypeAdapter manually.\n =||= Still an issue in gson 2.7\n\n``` java\nimport com.google.gson.typeadapters.UtcDateTypeAdapter;\n```\n\nError:\n\n``` java\nerror: package com.google.gson.typeadapters does not exist\nimport com.google.gson.typeadapters.UtcDateTypeAdapter;\n```\n =||= Worked as:\n\n``` java\nGson gson = new GsonBuilder()\n        .setPrettyPrinting()\n        .setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\")\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .create();\n```\n =||= @Paxa \r\nthis only adds hour difference. but for countries like India you will miss the minutes part.\r\nInstead of X use Z to get the minutes part as well\r\n```java \r\nGson gson = new GsonBuilder()\r\n        .setPrettyPrinting()\r\n        .setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\r\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\r\n        .create();```\r\n =||= This will be slightly off topic still I hope you can help me. For my applications I get strings like `\"2017-10-13T18:10+03:00\"`, `\"2017-10-13T14:15+02:00\"`, etc. which have to be converted to a java.util.Date property **without** loosing time zone information. \r\n\r\nI'm using `new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssX\").create()`\r\nalready which leads to correct date/time but converted to my time zone and the original time zone property of the Date being lost. \r\n\r\nHow can I convert the String to Date while maintaining the time zone information?\r\n\r\nThanks! =||= In case anyone was wondering where `UtcDateTypeAdapter.java` ended up, it's part of `gson-extras`:\r\n\r\nhttps://github.com/google/gson/blob/d9cc7bc60b492664fe9f328d1bab9f9ae873f4d4/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java =||= ", 0], ["282", "Unquoted strings in lenient mode", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:07 PM", "```\nSince 677, GSON has not supported unquoted strings in lenient mode. It should, \nespecially to be compatible with org.json.\n\nhttp://code.google.com/p/google-gson/source/detail?r=677\n```\n\nOriginal issue reported on code.google.com by `jessewil...@google.com` on 31 Jan 2011 at 7:10", "Original comment by `limpbizkit` on 31 Jan 2011 at 7:12\n\nAttachments:\n- [fix-unquoted-strings.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-282/comment-1/fix-unquoted-strings.patch)\n =||= ```\nThis issue was closed by revision r722.\n```\n\nOriginal comment by `limpbizkit` on 10 Feb 2011 at 1:36\n- Changed state: **Fixed**\n =||= ", 0], ["283", "Please provide a source only tarball ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:08 PM", "```\nPlease provide a source only tarball to ease building for downstreams (e.g. \nFedora Linux in my case). \nSee https://fisheye.codehaus.org/changelog/qdox/?cs=695#trunkZ002fqdox for \nexample what qdox guys has done. All Apache Commons are doing it also\n```\n\nOriginal issue reported on code.google.com by `akurta...@gmail.com` on 2 Feb 2011 at 11:01", "```\nI believe you should be able to pull this out of the zip file provided in the \ndownloads section. Within the zip is a gson-sources.jar file which is \nessentially the same as a tarball. Unzip the files from the jar and you have \nthe source.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:28\n =||= ```\nThe -sources.jar does contain the source *java files but not build scripts \n(pom.xml). \n\nYou could add something like this into pom to generate nice project releases:\n  <build>\n      <plugins>\n ...\n <plugin>\n   <artifactId>maven-assembly-plugin</artifactId>\n   <configuration>\n     <descriptorRefs>\n       <descriptorRef>project</descriptorRef>\n     </descriptorRefs>\n   </configuration>\n   <executions>\n     <execution>\n       <id>make-assembly</id>\n       <phase>package</phase>\n       <goals>\n         <goal>single</goal>\n       </goals>\n     </execution>\n   </executions>\n </plugin>\n ...\n      </plugins>\n    </build>\n\n```\n\nOriginal comment by `sochotni...@gmail.com` on 13 Apr 2011 at 4:42\n =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:52\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nFWIW, there seems to be something terribly wrong with google-code's svn. There \nis now way to get the same sources for a release tag for two subsequent svn \nexports.\n\nExample:\n\n\n    $ cat google-gson.sh\n    #!/bin/bash\n\n    FIRST=\"first\"\n    SECOND=\"second\"\n\n    rm -rf $FIRST $SECOND\n\n    mkdir $FIRST $SECOND\n\n    pushd $FIRST\n    svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 google-gson-2.2.2 > /dev/null\n    tar -cJf google-gson-2.2.2.tar.xz google-gson-2.2.2\n    first_sha=$(sha256sum google-gson-2.2.2.tar.xz | cut -d' ' -f1)\n    popd\n\n    pushd $SECOND\n    svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 google-gson-2.2.2 > /dev/null\n    tar -cJf google-gson-2.2.2.tar.xz google-gson-2.2.2\n    second_sha=$(sha256sum google-gson-2.2.2.tar.xz | cut -d' ' -f1)\n    popd\n\n    if [ \"$first_sha\" != \"$second_sha\" ]; then\n    echo -e \"FAIL!\\n\"\n    echo \"SHA256SUM of 1: $first_sha\"\n    echo \"SHA256SUM of 2: $second_sha\"\n    else\n    echo \"PASS!\"\n    fi\n\n    $ bash google-gson.sh\n    ~/first ~\n    ~\n    ~/second ~\n    ~\n    FAIL!\n\n    SHA256SUM of 1: b6d0fea60c653b9b138848c613ea9c25e67e3a09d5b969c36bf11edf2ca4e687\n    SHA256SUM of 2: 8d91396ff9baed486310f8b44c4312ba7d438438249abeed58abd493b193e6b4\n\nProviding source tarballs would be much appreciated.\n\n\n```\n\nOriginal comment by `jerb...@gmail.com` on 20 Dec 2012 at 10:52\n =||= ```\nAs it turns out something like this works:\n\n#!/bin/bash\n\nFIRST=\"first\"\nSECOND=\"second\"\n\nfirst_sha_list=first_sha256.txt\nsecond_sha_list=second_sha256.txt\n\nrm -rf $FIRST $SECOND\n\nmkdir $FIRST $SECOND\n\npushd $FIRST\nsvn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 \ngoogle-gson-2.2.2 > /dev/null\nOLD_IFS=\"$IFS\"\nexport IFS='\n'\nfor i in $(find google-gson-2.2.2 -type f); do sha256sum $i; done > \n$first_sha_list\nexport IFS=\"$OLD_IFS\"\npopd\n\npushd $SECOND\nsvn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 \ngoogle-gson-2.2.2 > /dev/null\nOLD_IFS=\"$IFS\"\nexport IFS='\n'\nfor i in $(find google-gson-2.2.2 -type f); do sha256sum $i; done > \n$second_sha_list\nexport IFS=\"$OLD_IFS\"\npopd\n\nif ! diff -u $FIRST/$first_sha_list $SECOND/$second_sha_list; then\n   echo -e \"FAIL!\\n\"\n   diff -u $FIRST/$first_sha_list $SECOND/$second_sha_list;\nelse\n   echo \"PASS!\"\nfi\n\nIn any case, source tarballs would be much easier to verify.\n```\n\nOriginal comment by `jerb...@gmail.com` on 20 Dec 2012 at 11:51\n =||= ```\nWe no longer provide downloads on the Gson page.\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:43\n- Changed state: **Invalid**\n =||= ", 0], ["284", "More caching of reflection objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:10 PM", "```\nShould yield a nice speedup. See also\nhttp://groups.google.com/group/google-gson/browse_thread/thread/b20c0439a0d13029\n/b9256f4ead94ca84?show_docid=b9256f4ead94ca84\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 3 Feb 2011 at 7:27", "```\nInder took care of this in Gson 1.7\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:24\n- Changed state: **Fixed**\n =||= ```\nCool :)\nI eventually opted to write stream based de-serializers for everything to \neliminate reflection. \nIs the current approach similar to this in efficiency? How efficient are the \ncaches?\nWhat are some cool things to see in your codebase?\n\nThanks!\n```\n\nOriginal comment by `tra...@bricksimple.com` on 11 May 2011 at 3:09\n =||= ", 0], ["285", "@Expose should be used with methods", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:12 PM", "```\nCan we use @Expose with method declaration like:\n\n@Expose\npublic List<SomeObject> getFilteredList(){\n...\n}\n\nand in result includes json of SomeObject list.\n```\n\nOriginal issue reported on code.google.com by `das...@gmail.com` on 3 Feb 2011 at 8:29\n- Merged into: #232", "Original comment by `limpbizkit` on 29 Dec 2011 at 5:52\n- Changed state: **Duplicate**\n =||= ", 0], ["286", "\u7559\u4e2a\u540d", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:13 PM", "```\n\u54c8\u54c8\uff0c\u5927\u5bb6\u597d~\n```\n\nOriginal issue reported on code.google.com by `epinszteinic` on 7 Feb 2011 at 9:46", "Original comment by `limpbizkit` on 14 Feb 2011 at 10:18\n- Changed state: **Invalid**\n =||= ", 0], ["287", "Support immutable objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:13 PM", "```\nGSON should use Unsafe to instantiate objects without invoking the default \nconstructor. That would permit GSON to support immutable objects, similarly to \nhow Java serialization does it.\n```\n\nOriginal issue reported on code.google.com by `jessewil...@google.com` on 7 Feb 2011 at 11:01", "```\nThis may be an ugly syntax, but I'll propose it:\n\n@DeserializationConstructor  \npublic MetaData(\n  String shortDescription,\n  String description,\n  TaskType type) {\n  ...\n}\n\nand\n\nclass X {\n  @SerializedName(\"changeSets\")\n  private final List<Stuff> internalName;\n  private final MetaData metadata;\n\n  @DeserializationConstructor  \n  public Task(\n    @SerializedName(\"changeSets\")\n    List<Stuff> otherName,\n    Metadata metadata) {\n  }\n\n```\n\nOriginal comment by `konigsb...@google.com` on 7 Feb 2011 at 11:05\n =||= ```\nMan I thought, \"I'll just knock out something ugly and they'll love me.\" This \nis hard.\n\nFirst I thought, the parameter names will suffice for mapping to JSON names. \nNope - those don't exist. Then I thought, I can just use \nconstructor.getParameterTypes. Nope -- that doesn't work either. Lots to do.\n```\n\nOriginal comment by `konigsb...@google.com` on 9 Feb 2011 at 5:50\n =||= ```\nThe \"Unsafe\" approach was implements in r723.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:28\n- Changed state: **Fixed**\n =||= ```\nThe Unsafe approach doesn't work on google app engine.\n\nCan we use the approach in Comment 1?  Ex. use an annotation to select a \nconstructor, then SerializedName annotation to store the name mapping of the \nfields?\n\nEx. here's how Jackson do it:\n\n public class Point {\n  private final int x, y;\n\n  @JsonCreator\n  public Point(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n   this.x = x;\n   this.y = y;\n  }\n }\n\nPersonally, I would like to be able to choose which annotations designate the \nname of fields and that select constructors.\n\nI hope you can resurrect this issue, as jclouds code needs to work in google \napp engine, and the current approach doesn't work (and didn't *really* work \nanyway, as it cheats and can leave fields uninitialized or unvalidated as the \nintended immutable constructor is never used).\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 29 May 2012 at 7:57\n =||= ```\nAnything that requires a special compilation option is not a robust enough \napproach for inclusion in Gson.\n\nThe next best thing would be to provide a reusable class in extras package. We \nshould consider writing writing a reusable TypeAdapterFactory that does this \nfor all classes with DeserializationConstructor annotation.\n\n```\n\nOriginal comment by `inder123` on 30 May 2012 at 4:21\n =||= ```\n+1 to Inder's suggestion. It wouldn't be too much effort to make constructor \ndeserialization work with TypeAdapterFactory.\n```\n\nOriginal comment by `jessewil...@google.com` on 30 May 2012 at 4:23\n =||= ```\nok. I'll work on a patch today.  thanks!\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 30 May 2012 at 4:30\n =||= ```\nHere's a start complete w/unit tests for deserializing.  what's left to do is:\n  * implement serializing\n  * weave in where unsafe is currently used\n  * (probably separate issue) provide means to supply alternate annotations\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 30 May 2012 at 6:38\n\nAttachments:\n- [issue-287-immutablector.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-287/comment-8/issue-287-immutablector.patch)\n =||= ```\nI'm going to hack on other stuff for the rest of the day.  if this looks \nalright, I can help complete it tomorrow.\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 30 May 2012 at 6:44\n =||= ```\nattached DeserializationConstructorAndReflectiveTypeAdapterFactory is a drop-in \nreplacement for ReflectiveTypeAdapterFactory\n\nNote that if you do replace, the following test fails:\nCustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubC\nlassInstances\n\nI hope this is a good start and this code can work its way into gson!\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 1 Jun 2012 at 12:30\n\nAttachments:\n- [gson-patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-287/comment-10/gson-patch.txt)\n =||= ```\nAny thoughts on how do deal with classes that you can't modify?  E.g. \nImmutableList in Guava\n```\n\nOriginal comment by `gak@google.com` on 31 Aug 2012 at 5:41\n =||= ```\nEr, how to\n```\n\nOriginal comment by `gak@google.com` on 31 Aug 2012 at 5:41\n =||= Any updates on this one? Jackson has been supporting @JsonCreator for constructors for ages, and it's also the only (clean) way to instantiate an object for deserialization without using reflection, especially in case of immutable objects.\nI would expect this to be a very common use case scenario (J. Block, Effective Java item 15, \"Minimize Mutability\"), but maybe I'm missing something?\n =||= @marcosalis  InstanceCreator let's you plug in custom instances.\n\nCan you share an example of how JsonCreator is used to return an immutable object?\n =||= @inder123 as far as I know, `InstanceCreator` is only used for the object's instance creation, rather than setting the actual deserialized values to the object fields. This is only useful when you can't have a parameterless constructor in the model class. Field setting is still done via reflection (again, correct me if I'm wrong).\n\nWith Jackson you achieve it simply by doing this (just the first example I found):\n\n``` java\npublic class Point {\n  private final int x, y;\n\n  @JsonCreator\n  public Point(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n   this.x = x;\n   this.y = y;\n  }\n }\n```\n =||= You can do the same with a TypeAdapter or a JsonDeserializer.\n\nWith JsonDeserializer you can use context.deserialize() to map a complex JsonObject to a field.\n =||= @inder123 sure thing, however using these two methods bear the significant disadvantage of having to completely override the standard deserialization process, and having to process every single field manually: this can be quite verbose (and time consuming) in case of complex models.\n\nI still think that having the same kind of annotation processing would be extremely useful for developers. Should I create a separate improvement ticket or is it something that Gson is not planning on implementing anytime soon?\n =||= A pull request with a proposal on how to do this will be great. However, please note that we set a high bar for adding anything to the API, so don't be disheartened if we eventually reject that PR. Thanks.\n =||= Hi @marcosalis\n\nStumbled across this issue and saw your comment regarding annotation processors. If you're interested I have a solution to your problem within my gson 'extension'  library. \n\nHere is a link to the project:\nhttps://github.com/lachlanm/gsonpath/\n\nWith regards to your wish for proper immutability support, I have recently added a feature which generates code based on interfaces. These interfaces are used to generate an immutable pojo and a proper type adapter which will use the constructor correctly. \n\nIt would certainly be nice to have something like this in the base gson project, but if you're interested, you can use this library in conjunction with gson. \n\nHere is a link to the details of how it works:\nhttps://github.com/lachlanm/gsonpath/blob/master/guides/interfaces.md\n =||= Hey @LachlanMcKee, apologies for the late reply. Thank you, I'll check your library out, it seems very interesting! I'd be curious to know, have you done any performance tests to compare deserialization speeds between the standard Gson pattern and your library?\n =||= Hi @marcosalis \n\nI have done a degree of performance tests (I will need to publish these sometime...). The main performance benefit is obtained from the initial deserialization. This is because Gson normally generates a type adapter when it is first required, and it is then cached. This is why they always recommend hanging on to your gson instance.\n\nIt very much depends on how complicated your JSON is as well. If it is a heavily complex structure that normally requires multiple type adapters, and you generate a simple type adapter with my library, there will be a very noticeable performance boost on the first deserialization.\n =||= ", 0], ["288", "Thread safety issue on IBM's JDK", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:18 PM", "```\nWhat steps will reproduce the problem?\n1. Install the latest IBM JDK (version 6)\n2. Run the attached program\n\nWhat is the expected output? What do you see instead?\nThe program starts 20 threads; each thread deserializes a JSON string into an \nobject and prints out a statement to the console 1000 times. There should then \nbe 20,000 lines written to the console. This code works fine on Sun's JDK and \nApple's JDK.\n\nOn IBM's JDK, you'll see a few of the deserializations work, and then the rest \nblow up with NPE's. Here is the stack trace:\njava.lang.NullPointerException\n    at java.util.LinkedHashMap.get(LinkedHashMap.java:324)\n    at com.google.gson.LruCache.getElement(LruCache.java:50)\n    at com.google.gson.FieldAttributes.getAnnotations(FieldAttributes.java:157)\n    at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:145)\n    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:44)\n    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:568)\n    at com.google.gson.Gson.fromJson(Gson.java:515)\n    at com.google.gson.Gson.fromJson(Gson.java:484)\n    at com.google.gson.Gson.fromJson(Gson.java:434)\n    at com.google.gson.Gson.fromJson(Gson.java:406)\n    at com.test.GsonTest$Thready.run(GsonTest.java:32)\n\nWhat version of the product are you using? On what operating system?\nI've tried this with the Gson 1.5 and Gson 1.6 releases on Ubuntu 9.04 32-bit \nand Ubuntu 10.10 64-bit, and it fails both places. It works on Ubuntu and OS X \nwith the Sun and Apple JDK's.\n\nPlease provide any additional information below.\nHere is the reported java version information for the IBM JDK we're using:\n$ java -version\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr9-20101125_01(SR9))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 \njvmxa6460sr9-20101124_69295 (JIT enabled, AOT enabled)\nJ9VM - 20101124_069295\nJIT  - r9_20101028_17488ifx2\nGC   - 20101027_AA)\nJCL  - 20101119_01\n```\n\nOriginal issue reported on code.google.com by `tobini...@gmail.com` on 9 Feb 2011 at 8:33\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-288/comment-0/GsonTest.java)", "```\nA fix was submitted for this in r699.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:31\n- Changed state: **Fixed**\n =||= Hi, I'm new at github. How can I locate the r699?\n =||= ", 0], ["289", "Final keyword will not increase performance (significantly)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:19 PM", "```\nIn document:\n\nhttp://developer.android.com/guide/practices/design/performance.html\n\nin section:\nPerformance Myths\n\nYou can find that final fields, and classes do not increase performance.\nYou should try increase performance in other ways (e.g. by modifying algorithm)\n\nBecause GsonBuilder and Gson are final, currently I cannot registerTypeAdapter \nfor tree type (I saw that this will be possible in next version). So currently \nI cannot use this project, because of this simple reason. Removing final \nkeyword would help to use this project in non-standard cases.\n\nYou can find more:\nhttp://www.ibm.com/developerworks/java/library/j-jtp1029.html\nhttp://www.ibm.com/developerworks/java/library/j-jtp04223.html#N100A7\n```\n\nOriginal issue reported on code.google.com by `piotr.au...@gmail.com` on 11 Feb 2011 at 1:29", "```\nJust use GSON from subversion?\n```\n\nOriginal comment by `limpbizkit` on 11 Feb 2011 at 4:35\n =||= Original comment by `limpbizkit` on 14 Feb 2011 at 10:18\n- Changed state: **Invalid**\n =||= ", 0], ["290", "SerializedName should allow the @ character", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:28:20 PM", "```\nI'm having trouble deserialising json of the following form:\n\n{ \"@value\" : 3 }\n\nAs far as I can tell this is valid json, however gson's JsonFieldNameValidator \nappears to dislike the presence of the @ character.\n\nI'm declaring the gson java class:\n\nstatic class MyObj {\n    @SerializedName(\"@value\")\n    int value;\n}\n\nI'd expect this to work, but instead I get an exception:\n\nWhat is the expected output? What do you see instead?\nxception in thread \"main\" java.lang.IllegalArgumentException: @value is not a \nvalid JSON field name.\n    at com.google.gson.JsonFieldNameValidator.validate(JsonFieldNameValidator.java:52)\n    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:45)\n    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:107)\n    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:95)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:61)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:164)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:568)\n    at com.google.gson.Gson.fromJson(Gson.java:515)\n    at com.google.gson.Gson.fromJson(Gson.java:484)\n    at com.google.gson.Gson.fromJson(Gson.java:434)\n    at com.google.gson.Gson.fromJson(Gson.java:406)\n\n\nI'm using gson 1.6 on Ubuntu.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `t.denley` on 17 Feb 2011 at 9:11", "```\nSimilar to issue 121, where the hyphen character was added.\nhttp://code.google.com/p/google-gson/issues/detail?id=121\n```\n\nOriginal comment by `t.denley` on 17 Feb 2011 at 9:13\n =||= ```\nI have the same problem, so i have done a patch to pass this.\n\nWarning, the issue 121 isn't about the @ caracter.\n```\n\nOriginal comment by `ybonnel` on 5 Apr 2011 at 6:40\n\nAttachments:\n- [patchIssue290.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-290/comment-2/patchIssue290.diff)\n =||= ```\nThanks for doing a patch. I think that allowing a bypass of field validation is \na bit overkill though. I'd suggest the following patch might be a bit more \ntargeted.\n```\n\nOriginal comment by `t.denley` on 5 Apr 2011 at 10:20\n\nAttachments:\n- [gson_issue290.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-290/comment-3/gson_issue290.diff)\n =||= ```\nAre there any committers reviewing bugs at the moment?\nGiven the simplicity of this fix, is there any chance of getting it into 1.7?\n```\n\nOriginal comment by `t.denley` on 7 Apr 2011 at 6:21\n =||= ```\nUnfortunately, with certain browsers this would cause problems while doing \nevals on JSON objects. That said, I'm not too worried about relaxing this \nconstraint on Gson since we should be aligning more closely with the JSON spec \nrather than focusing on what certain clients can and cannot handle.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 4:42\n- Changed state: **Accepted**\n =||= ```\nI'm surprised that we do any name policy enforcement at all. JSON permits \nanything in a name; we should too. If that means we can't map a property to a \nfield, then we have to fail at runtime.\n```\n\nOriginal comment by `limpbizkit` on 12 Apr 2011 at 4:48\n =||= ```\nFixed in r798.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 5:31\n- Changed state: **Fixed**\n =||= ```\nThanks for the fix.\n\nAre there instructions for doing a local snapshot build anywhere?\n\nI was hoping to lift a suitable artefact from gson CI, but \nhttp://continuousbuild.dyndns.org:8080/job/gson/ seems rather sad at the moment.\n```\n\nOriginal comment by `t.denley` on 12 Apr 2011 at 7:13\n =||= ```\nWe are planning to push a new version of Gson today. Can you wait another day \nfor the public release?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 9:36\n =||= ```\nSure, no rush.\n\nI was under the impression that this fix hadn't made it into 1.7 though. Am I \nmistaken?\n```\n\nOriginal comment by `t.denley` on 12 Apr 2011 at 10:09\n =||= ```\nThe 1.7 push went out earlier today that contains this fix. Enjoy!\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:16\n =||= ```\nFantastic! Thanks.\n```\n\nOriginal comment by `t.denley` on 13 Apr 2011 at 8:03\n =||= ", 0], ["291", "Feature Request: RegExp object support.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:23 PM", "```\nI have created a XML Schema to JSON converter that is using handwritten code to \nbuild the JSON representation.\n\nI wanted to factor out that handwritten code and replace it with a library like \nGSON.\n\nUnfortunatly I don't see a way to write a custom serializer that would allow me \nto convert a regular expression into a RegExp object using the /.../ notation.\n\nfor example [0-9A-Z]{1,8} would become /[0-9A-Z]{1,8}/\n\nbut I don't have an element type available that would allow me to do this. \nStrings are always quoted. I need a way to be able to add RAW data in the \nserialized stream.\n\nMaybe it's not a goal of a JSON payload to support such a thing, but it allows \nme to optimize the use of the schema in the browser.\n\n\n```\n\nOriginal issue reported on code.google.com by `david.nouls` on 17 Feb 2011 at 9:28", "```\nCan you provide a more detailed code example on what you want to be written out?\nIs the output going to be valid JSON?\n```\n\nOriginal comment by `inder123` on 20 May 2011 at 9:56\n =||= ```\nNo indeed, officially it would not be valid JSON sing a RegExp object is not \ndefined in the specs to be correct JSON. In practive however it works fine \nsince RegExp is natively supported with the /regexp/ syntax.\nAnyway, I no longer need this feature since I implemented a workaround.\n```\n\nOriginal comment by `david.nouls` on 1 Jun 2011 at 12:42\n =||= ```\nWe aren't going to support /regex/ syntax.\n```\n\nOriginal comment by `limpbizkit` on 17 Jun 2011 at 9:11\n- Changed state: **Invalid**\n =||= ", 0], ["292", "Add JAX-RS support", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:24 PM", "```\nThis is a feature request.\n\nJackson and Jettison libraries are used in other JAX-RS server implementations \nand this support makes them a more compelling tool for me because JSON web \nservices seems like the main reason why I would need Java <-> JSON \nserialization. I personally haven't been able to get GSON working with any \nJAX-RS implementation but please disregard this if it does work somewhere. If \nnot, it would be cool if GSON did support JAX-RS.\n```\n\nOriginal issue reported on code.google.com by `sardonic...@gmail.com` on 17 Feb 2011 at 1:36", "```\nSee Greaze.\nhttps://sites.google.com/site/greazeproject/\n\nI don't think we'll support JAX-RS since there are libraries that already do \nthat.\n\n```\n\nOriginal comment by `limpbizkit` on 17 Jun 2011 at 9:04\n- Changed state: **WontFix**\n =||= ```\nInfinite sorrow.  I'm already using GSON throughout and want to introduce \nJAX-RS.  The jersey/jaxb implementation of JSON is ass.  \n```\n\nOriginal comment by `darren.h...@gmail.com` on 8 Dec 2011 at 5:57\n =||= ```\nmaybe this helps you: \nhttp://stackoverflow.com/questions/9516224/using-gson-instead-of-jackson-in-jers\ney\n```\n\nOriginal comment by `lagr...@gmail.com` on 24 Mar 2012 at 12:34\n =||= ", 0], ["293", "Patch for /trunk/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.java", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:25 PM", "```\nFix grammar error. I LOVE THE EDIT FEATURE.\n```\n\nOriginal issue reported on code.google.com by `konigsb...@gmail.com` on 22 Feb 2011 at 5:15\n\nAttachments:\n- [JsonDeserializerExceptionWrapper.java.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-293/comment-0/JsonDeserializerExceptionWrapper.java.patch)", "Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:19\n- Changed state: **Fixed**\n =||= ", 0], ["294", "Serialized HashMap is different if inside another class", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:25 PM", "```\nSerializing a HashMap yields different results if it is an object in another \nclass.\nCode sample:\n\nGson gson = new Gson();\nObject test = new String[] {\"this\", \"is\", \"a\", \"test\"};\nMap<String, Object> hash = new HashMap<String, Object>();\nhash.put(\"othertest\", \"othertest\");\nhash.put(\"test\", test);\nNamedClass nc = new NamedClass(\"test\", hash);\n\nSystem.out.println(gson.toJson(hash));\nSystem.out.println(gson.toJson(nc));\n\nThis is NamedClass:\npublic class NamedClass\n{\n    private String id;\n    private Map<String, Object> attributes;\n\n    NamedClass() {}\n\n    public NamedClass(String id, Map<String, Object> attributes)\n    {\n        this.id = id;\n        this.attributes = attributes;\n    }\n}\n\nWhat is the expected output? What do you see instead?\nThis produces:\n{\"test\":[\"this\",\"is\",\"a\",\"test\"],\"othertest\":\"othertest\"}  (Great!)\n{\"id\":\"test\",\"attributes\":{\"test\":{},\"othertest\":\"othertest\"}}  (Oh no, the \narray inside the hashmap now reads \"{}\")\n\nWhile I would expect the second line to serialize the hashmap as smartly as it \ndoes on the first line:\n{\"id\":\"test\",\"attributes\":{\"test\":[\"this\",\"is\",\"a\",\"test\"],\"othertest\":\"othertes\nt\"}}  (Cool, now I see the array here as well)\n\n\n\nWhat version of the product are you using? On what operating system?\ngson 1.6 on Windows XP\n\n\nI need the Map to be <String, Object> because it may contain multivalued as \nwell as single valued values (String vs String[]).\nI have written a custom serializer to \"fix\" this, but I believe that should be \nthe default behavior...\n```\n\nOriginal issue reported on code.google.com by `crau...@gmail.com` on 7 Mar 2011 at 9:45", "```\nFixed in 828.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:32\n- Changed state: **Fixed**\n =||= ```\ncould you please send me the link for the fix.... or send me the link for (\nsvn 828) a jar file for this fix... I need code please send me asap..... thank \nyou \n```\n\nOriginal comment by `ravi4ami...@gmail.com` on 3 Oct 2011 at 12:16\n =||= ", 0], ["295", "com.google.gson.ParseException: Encountered \" <IDENTIFIER_SANS_EXPONENT> \"access_token \"\" at line 1, column 1.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:26 PM", "```\nI am getting the below error while parsing the JSON response:\naccess_token=149368218440158|50f0e0c6b08ccdb7ada52ded-1020078280|GpLTaXrOlS9R-GR\nvkc7H5iIc1_g\n\ncom.google.gson.ParseException: Encountered \" <IDENTIFIER_SANS_EXPONENT> \n\"access_token \"\" at line 1, column 1.\nWas expecting one of:\n    <EOF> \n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \")]}\\'\\n\" ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)\n    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:62)\n    at com.google.gson.JsonParser.parse(JsonParser.java:54)\n    at com.nbcareer.utils.FacebookIntegrator.getFaceBookAccessToken(FacebookIntegrator.java:273)\n    at org.apache.jsp.WEB_002dINF.jsp.tile.jobsearch.newJobSearch_002dbody_jsp._jspService(newJobSearch_002dbody_jsp.java:173)\n    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n\n\n\n```\n\nOriginal issue reported on code.google.com by `kasiram....@gmail.com` on 10 Mar 2011 at 6:21", "```\nIf that is the full text, that is not json, but looks to be an \napplication/x-www-form-urlencoded response. If that is not the full text, you \nmight want to provide a full sample that produces the bug.\n```\n\nOriginal comment by `nairb...@gmail.com` on 30 Mar 2011 at 9:10\n =||= ```\nThis is not a valid JSON object so I am going to close this issue out. If you \nhave more information then please feel free to open a new bug.\n\nAs well, you are using an older version of Gson. If you upgrade to 1.6 (or in a \nweek or so we'll have 1.7) then you will get the new Json Parser that has some \nsignificant performance improvements.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:39\n- Changed state: **Invalid**\n =||= ", 0], ["296", "Null exception thrown", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:27 PM", "```\nWhat steps will reproduce the problem?\n1. I had string of JSON data.\n2. I tried to deserialize the JSON into an object DisruptionList.\n3. DisruptionList had one member \n        public ArrayList<Disruption> Incidents.\n\nWhat is the expected output? What do you see instead?\nI saw a NULL exception.  The value of the exception was NULL.\n\nWhat version of the product are you using? On what operating system?\nWindows 7, and Gson 1.6.  Developing a JAVA android app.\n\nPlease provide any additional information below.\n\nI just wanted more information from about the error, but instead got a NULL \nerror, no stack trace no error no nothing.  If this isn't considered a bug I \napologize.  \n\nI fixed my issue by changing Incidents from ArrayList to List.  Let me know if \nyou need my help.\n\n```\n\nOriginal issue reported on code.google.com by `kyle.ell...@gmail.com` on 14 Mar 2011 at 6:23", "```\nConfirmed. Tested with r745.\n```\n\nOriginal comment by `limpbizkit` on 21 Mar 2011 at 9:50\n- Changed state: **Started**\n =||= Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 6:05\n- Changed state: **Fixed**\n =||= ", 0], ["297", "Cannot deserialize array of unknown type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:28 PM", "```\nSee the test case at: \nhttp://stackoverflow.com/questions/5143842/cannot-deserialize-array-of-unknown-t\nype-using-gson-w-java\n\nDiscussed at Gson group thread: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/68c6365b89940b0a\n```\n\nOriginal issue reported on code.google.com by `inder123` on 14 Mar 2011 at 7:42", "```\nGuice's Types.arrayOf() method would work here. I don't think we want to \ninclude that in Gson, but we should push to get it included in Guava.\n\nhttp://google-guice.googlecode.com/git/javadoc/com/google/inject/util/Types.html\n#arrayOf(java.lang.reflect.Type)\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:33\n- Changed state: **WontFix**\n =||= ", 0], ["298", "Allow serialization of anonymous and local classes", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:29 PM", "```\nWhat steps will reproduce the problem?\n\n        Gson gson = new Gson();\n        String json = gson.toJson(new Object() {\n            String url = \"http://localhost:10080/live/list\";\n            String[] names = new String[] {\"dsc0001\",\"dsc0002\",\"dsc0003\"};\n        });\n        System.out.println(json);\n\nWhat is the expected output?\n{\"url\":\"http://localhost:10080/live/list\",\"name\":[{\"dsc0001\",\"dsc0002\",\"dsc0003\"\n]}\n\nWhat do you see instead?\nblank line\n\nWhat version of the product are you using? On what operating system?\n1.6\n\nPlease provide any additional information below.\nI understand that there are default exclusion strategies that prevent the \nserialization of objects belonging to an anonymous or local class, but it would \nbe great if these could be bypassed to allow the above notation.\n\n\n```\n\nOriginal issue reported on code.google.com by `robby...@gmail.com` on 17 Mar 2011 at 2:14", "```\nI have the same doubt. Are there any specific reasons why anonymous or local \nclasses should be excluded?\n\nI tried to disable the DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY. It does not \nseem producing any problems\n```\n\nOriginal comment by `lindap...@gmail.com` on 14 Apr 2011 at 2:43\n =||= ```\nAnd inner class will trigger problems using a type adapter is specified for the \nclass since it generated an implicit reference to the outer class/instance \nwhich causes a circular reference. I do not recall the reason as to why we skip \nanonymous classes.\n\nI will discuss this with Inder, but I do think that this is a valid feature \nthat we should support.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 5:59\n =||= ```\nIssue 196 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 9:54\n =||= ```\nIssue 346 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 3:38\n =||= ```\nI respectfully disagree.\n\nI'm doing something like this.\n\nI have an interface, TFlat. I registered a custom serializer for that interface.\n\nI have:\n\nclass O {\n  TFlat p = new TFlat(){ int field1 = 3; int field2 = 4; }\n  ...\n}\n\nAnd I'm trying to serialize an instance of O.\n\nMay be the exclusion strategy should pass out anonymous/local classes that \nwould have be serialized in a custom way?\n\nThanks,\n  Pawel.\n\n```\n\nOriginal comment by `pawel.ve...@gmail.com` on 12 Jan 2012 at 8:58\n =||= ```\nPawel, that's interesting I'll take a look. What do you think should happen \nwhen this is deserialized?\n```\n\nOriginal comment by `limpbizkit` on 13 Jan 2012 at 2:35\n =||= ```\nJesse,\n\nI don't think this is particularly useful for deserializing.\nIf we were to stretch this, deserialization can see that the field is \ninitialized, and if the incoming JSON fragment is an object, map the properties \nof the fragment to the fields of the object. IMO, right now, GSon always \nattempts to instantiate classes that are declared for each field (or use a \ncustom deserializer to do so).\n\ncustom deserialization can create its own anonymous class that will implement \nTFlat. It would need to know the field location (somehow indicate where the \nfield will go after deserialization), though, which is, to my knowledge, is not \nsomething GSon supports either. But I'm still on 1.7, haven't checked out all \nthe 2.x goodies.\n\n\n```\n\nOriginal comment by `pawel.ve...@gmail.com` on 13 Jan 2012 at 5:02\n =||= ```\n[deleted comment]\n```\n =||= ```\nInterestingly enough, you can create instances of anonymous objects.\nHowever, such instances will not be \"attached\" to the outer class, yet they are \nlegal. Attempting to reference parent class will simply return null. Obvious \nproblem is, of course, that there is no way to declare a field of anonymous \nclass.\n\nHere is the Groovy fragment I ran to test this:\n\n\ninterface T {\n}\nclass P {\n  int out = 13;\n  T z = new T() {\n    int k;\n    {\n        System.out.println(\"Anonymous <init>...\");\n        P parent = P.this;\n        if (parent == null) { System.out.println(\"No Parent!\"); }\n        else { System.out.println(parent.out) }; \n    }\n  };\n}\nP p = new P();\nClass<T> cc = p.z.getClass();\nSystem.out.println(cc.getName());\nT another = cc.newInstance();\n---\noutput:\nAnonymous <init>...\n13\nP$1\nAnonymous <init>...\nNo Parent!\nResult: P$1@1567ee3\n```\n\nOriginal comment by `pawel.ve...@gmail.com` on 13 Jan 2012 at 5:10\n =||= Original comment by `limpbizkit` on 11 Apr 2012 at 8:50\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nWe still use gson-1.3 due to this issue...\n\nToday I found http://code.google.com/p/google-gson/issues/detail?id=96 in our \nlogs.\nThe bug fixed in 1.4++, but we can't move to fresh version of gson since we \nhave a lot of inner/local classes to serialize.\n\n\n\n```\n\nOriginal comment by `stanisla...@gmail.com` on 22 Jan 2013 at 12:02\n =||= ```\nSame here. Even though I love GSON simplicity and extensibility, but inability \nto serialize anonymous classes simply kills the practical usability of this \ngreat library!\n\nThe use case I'm talking about is very simple and widely used. Image you have \nclass Car:\npublic class Car {\n   String name;\n   String color;\n}\n\nLet's create 2 instances using different code-style:\n\n   Car car1 = new Car();\n   car1.name = \"BMW\";\n   car1.color = \"Red\";\n\n   Car car2 = new Car() {{\n      name = \"Nissan\";\n      color = \"Gold\";\n   }}\n\ncar2 object has the same number of fields and from logical perspective it is of \nthe same type than car1. The anonymous Car subclass created for the car2 \ninstance can be safely ignored in this case as it doesn't add anything to the \ncar2 that car1 wouldn't have. So why would Gson refuse processing car2?\n```\n\nOriginal comment by `alexande...@gmail.com` on 6 Feb 2013 at 5:24\n =||= ```\nDon't use double brace initialization. It prevents serialization and Gson is \ndesigned for symmetric serialization and serialization.\n```\n\nOriginal comment by `limpbizkit` on 7 Feb 2013 at 1:02\n- Changed state: **WontFix**\n =||= ```\njackson can do this:\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\n        String result=mapper.writeValueAsString(x);\nwhy gson not?\n```\n\nOriginal comment by `che...@gmail.com` on 21 Nov 2013 at 2:55\n =||= I see this closed, but I don't see a reason.  Can we reopen or provide clarification?  It sounds like this thread seemed in overwhelming support for anonymous class serialization.\n =||= This is especially problematic with Java 8. I've tried to create a TypeAdapterFactory for serializing Streams, but my `create` method never even gets called because `ReferencePipeline$2` is anonymous, so the Excluder just returns null. =||= @mintern\r\n\r\n> This is especially problematic with Java 8. I've tried to create a TypeAdapterFactory for serializing Streams, but my `create` method never even gets called because `ReferencePipeline$2` is anonymous, so the Excluder just returns null.\r\n\r\nIt should work if you provide a type to the `toJson()` method:\r\n\r\n```java\r\n... = gson.toJson(stringStream, new TypeToken<Stream<String>>() {}.getType());\r\n```\r\n\r\n----\r\n\r\nI think that this issue should be reopened, because it's possible to serialize and deserialize an anonymous/local class object, if the class does not have its outer class reference `this$0`, for example, if declared in a static method (don't think it has much practical use, though). =||= ", 0], ["299", "Cache no-args constructors", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:32 PM", "```\nIn MappedObjectConstructor.getNoArgsConstructor(), use a cache of constructors \nto avoid reflection every single time an instance is constructed.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 21 Mar 2011 at 9:27", "Original comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:34\n- Changed state: **Fixed**\n =||= ", 0], ["300", "Update all tests and documentation to remove unneeded no-args constructors", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:32 PM", "```\nWe do need to create some tests to ensure that no-args constructors are invoked \nwhen they are provided.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 21 Mar 2011 at 9:34", "Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:36\n- Changed state: **Fixed**\n =||= ", 0], ["301", "Support copy/cloning of JsonObject and JsonArray", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:33 PM", "```\nThe above two objects are not immutable so it would be nice to make a defensive \ncopy in some cases to ensure the internals of your object do not get modified \nby others if you leak out this object via a getter.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 22 Mar 2011 at 10:19", "```\nThis issue was closed by revision r855.\n```\n\nOriginal comment by `limpbizkit` on 17 Jun 2011 at 9:46\n- Changed state: **Fixed**\n =||= ```\nWhen are we planning to include this fix into newer version of gson jar?\n```\n\nOriginal comment by `taps...@gmail.com` on 28 Oct 2011 at 5:50\n =||= ```\nWhat were the reasons to remove this with r1010? I was hoping this landed with \n2.1\n```\n\nOriginal comment by `oliver.s...@gmail.com` on 3 Jan 2012 at 1:43\n =||= ```\nWe decided against it because we decided that it encourages mutable objects. \nYou can implement this yourself relatively easy in application code so it isn't \na big loss.\n```\n\nOriginal comment by `limpbizkit` on 4 Jan 2012 at 1:05\n =||= ```\nI think this should be revisited. How can you claim it's \"relatively easy\" to \nimplement it ourselves when you had to touch 5-10 lines in 5 application \nclasses?\n\nIf you don't want to support deep clones, then can you support immutable \nversions of each of the Json* types? The current situation could inadvertently \nlead to all sorts of aliasing bugs.\n```\n\nOriginal comment by `bolinf...@gmail.com` on 24 Apr 2013 at 3:40\n =||= ```\nbolinfest: what's your proposal to make Json* types as immutable? JsonObject \nand JsonArray are designed as mutable types. Are you thinking of a \nCollections.unmodifiableList() type of method?\n```\n\nOriginal comment by `inder123` on 24 Apr 2013 at 6:19\n =||= ", 0], ["302", "Permit trailing whitespace", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:34 PM", "```\nFrom this thread:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/6f12cf80b12a85b8\n/b76628ffdcd4c7af?show_docid=b76628ffdcd4c7af&pli=1\n\nOur parser is failing on documents with trailing whitespace. This needs to be \nfixed.\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 23 Mar 2011 at 3:57", "```\nAlready fixed. Test is in r764.\n```\n\nOriginal comment by `limpbizkit` on 29 Mar 2011 at 9:48\n- Changed state: **Fixed**\n =||= ", 0], ["303", "Maps with interface-type values are not serialized properly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:35 PM", "```\nWhat steps will reproduce the problem?\n    @Test\n    public final void testInterfaceTypeMap() {\n        MapClass element = new MapClass();\n        element.addSerializable(\"Test\", \"I am invisible!\");\n        element.addStrings(\"Test\", \"I am visible!\");\n        GsonBuilder builder = new GsonBuilder();\n        Gson creator = builder.create();\n        String json = creator.toJson(element);\n        assertEquals(\"{\\\"serializables\\\":{\\\"Test\\\":\\\"I am invisible!\\\"},\\\"strings\\\":{\\\"Test\\\":\\\"I am visible!\\\"}}\", json);\n    }\n\n    static final class MapClass {\n        private Map<String, Serializable> serializables = Maps.newHashMap();\n        private Map<String, String> strings = Maps.newHashMap();\n\n        public final void addSerializable(final String name, final Serializable value) {\n            this.serializables.put(name, value);\n        }\n\n        public final void addStrings(final String name, final String value) {\n            this.strings.put(name, value);\n        }\n    }\n\nWhat is the expected output? What do you see instead?\nExpected: {\"serializables\":{\"Test\":\"I am invisible!\"},\"strings\":{\"Test\":\"I am \nvisible!\"}}\nWhat I see: {\"serializables\":{\"Test\":{}},\"strings\":{\"Test\":\"I am visible!\"}}\n\nWhat version of the product are you using? On what operating system?\n1.6 on Ubuntu Linux\n\nPlease provide any additional information below.\nUnit test should be sufficient I hope... :)\n\n```\n\nOriginal issue reported on code.google.com by `chea...@gmail.com` on 23 Mar 2011 at 10:21", "```\nFixed in r776\n```\n\nOriginal comment by `inder123` on 5 Apr 2011 at 11:11\n- Changed state: **Fixed**\n =||= ", 0], ["304", "Serializing a class that aggregates a map with variable type values fails.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:35 PM", "```\nWhen I serialize a Map<String, IChild> where IChild can be of type ChildA or \nChildB then Gson works correctly without a custom serializer.\n\nWhen I aggregate this map into some other object \"Root\" and I serialize the \nRoot object, then the map is no longer correctly serialized.\n\nI included a JUnit4 test that exposes the problem...\n\nThis is an annoying bug since I wanted to use GSON to avoid needing to write \ntoo many unittests on the serialisation part of my code.\n\nI don't need to deserialize the output that is done in the browser with GWT \nJavaScriptObject overlays.\n```\n\nOriginal issue reported on code.google.com by `david.nouls` on 24 Mar 2011 at 10:17\n\nAttachments:\n- [SerialisationTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-304/comment-0/SerialisationTest.java)", "```\nIs anybody actually looking at issues in the team ? \n```\n\nOriginal comment by `david.nouls` on 30 Mar 2011 at 11:29\n =||= ```\nI'll make sure this gets looked at before our 1.7 release. Have you been able \nto reproduce the problem on GSON 1.7 ?\n```\n\nOriginal comment by `limpbizkit` on 30 Mar 2011 at 2:41\n- Added labels: **Milestone-Release1.7**\n =||= ```\nI don't have aa 1.7 release, so I can not double check.\nBut this issue report contains a straightforward junit4 test, if it runs \nwithout error with the cirrent 1.7 then consider it fixed.\n\n```\n\nOriginal comment by `david.nouls` on 30 Mar 2011 at 3:16\n =||= ```\nI tried my unittest with 1.7 and it fixes the bug.\nThanks for the fast release!\n```\n\nOriginal comment by `david.nouls` on 13 Apr 2011 at 6:38\n =||= Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:04\n- Changed state: **Fixed**\n =||= ```\nthis bug is fixed, but I have the same issue with Lists.\n```\n\nOriginal comment by `david.nouls` on 1 Jun 2011 at 2:09\n =||= ", 0], ["305", "Adding 1.6 jar to android project triggers dalvik error", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:37 PM", "```\nWhat steps will reproduce the problem?\n   1. Create an android 3.0 project in eclipse\n   2.  Download the Gson library from http://code.google.com/p/google-gson/downloads/list (1.6 full release).\n   3. Unzip the files to a folder of your choosing on your your machine (you should get the required jar files)\n   4. Add the gson-1.6.jar jar file must now be added to Java build path in eclipse. (I did this by navigating to (Project > Properties > Java Build Path) from the context menu on the created project)\n   5. Add the gson jar files on this dialog (click the \"Add External JARs..\" button on the Libraries tab to do this).\n\n\nWhat is the expected output? \nJar file is added with no error.  Access to gson api.\n\nWhat do you see instead?\nDalvik error.  See stack track :\n\n[2011-03-25 16:26:15 - SampleProg] Dx\nUNEXPECTED TOP-LEVEL EXCEPTION:\njava.lang.IllegalArgumentException: already added: \nLcom/google/gson/DefaultTypeAdapters$ByteTypeAdapter;\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.dex.file.ClassDefsSection.add(ClassDefsSection.java:123)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.dex.file.DexFile.add(DexFile.java:143)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.processClass(Main.java:372)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.processFileBytes(Main.java:346)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.access$400(Main.java:59)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main$1.processFileBytes(Main.java:294)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.cf.direct.ClassPathOpener.processArchive(ClassPathOpener.java:244\n)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.cf.direct.ClassPathOpener.processOne(ClassPathOpener.java:130)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.cf.direct.ClassPathOpener.process(ClassPathOpener.java:108)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.processOne(Main.java:313)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.processAllFiles(Main.java:233)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.dx.command.dexer.Main.run(Main.java:185)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \nsun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \njava.lang.reflect.Method.invoke(Unknown Source)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.ide.eclipse.adt.internal.build.DexWrapper.run(DexWrapper.java:179)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.ide.eclipse.adt.internal.build.BuildHelper.executeDx(BuildHelper.jav\na:585)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \ncom.android.ide.eclipse.adt.internal.build.builders.PostCompilerBuilder.build(Po\nstCompilerBuilder.java:490)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:629)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:172)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:203)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:255)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:258)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:3\n11)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.BuildManager.build(BuildManager.java:343)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:242)\n[2011-03-25 16:26:15 - SampleProg] Dx     at \norg.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\n[2011-03-25 16:26:15 - SampleProg] Dx 1 error; aborting\n[2011-03-25 16:26:15 - SampleProg] Conversion to Dalvik format failed with \nerror 1\n\n\nWhat version of the product are you using? On what operating system?\nI am on Windows 7 64 bit.  Using eclipse.  Developing for Xoom android tablet \n(not an emulator) (android 3.0).\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `nigel.gr...@gmail.com` on 25 Mar 2011 at 11:47", "```\nI'v got the same problem. the application works fine w/out gson .\n```\n\nOriginal comment by `galite.p...@gmail.com` on 27 Mar 2011 at 9:35\n =||= ```\nI have the same error while trying to use some sources from j2se, like \norg.jdom, javax.xml.\nBut all works fine before upgrading to Android SDK tools v.10\n```\n\nOriginal comment by `trueFe...@gmail.com` on 28 Mar 2011 at 8:50\n =||= ```\n@limpbizkit:\nIs this similiar to Issue 255? Is the Android SDK tools pulling in Gson?\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:33\n =||= ```\nYes, this looks like a duplicate of issue 255, and using jarjar should work \naround it. \n\nI'm somewhat surprised that the android.jar is triggering this. Is that .jar \nsourced from the Android SDK? To date we'd only seen this problem on certain \nHTC handsets.\n```\n\nOriginal comment by `limpbizkit` on 6 Apr 2011 at 1:30\n =||= ```\nClosing as obsolete. If you could tell me which Android .jar you're using, I \nmight be able to help.\n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 3:24\n- Changed state: **WontFix**\n =||= **### SOLUTION TO ERROR DALVICKAND  AND SUN / MISC / BASECODER64 IN ECLISPE.**\r\n\r\n**INSTRUCTIONS TO SOLVE THE PROBLEM ARE:**\r\n\r\n1- INSTALL WINDOWS XP SP2 WITH JAVA 6.\r\n\r\n2- DOWNLOAD ADT VERSION 23.0.2 WITH SDK 19.\r\n\r\n3- DECOMPRESS THE ADT AND INSTALL IT ON YOUR COMPUTER.\r\n\r\n4- OPEN THE ECLIPSE AS ADMINISTRATOR AND IMPORT THE ANDORID FILE.\r\n\r\n5- IN THE FILE project.properties WRITE THIS -> target = android-19 <--VERY IMPORTANT.\r\n\r\n6- EXPORT YOUR PROJECT AND NO MORE THIS ERROR WILL APPEAR.\r\n\r\n7- AND SO WE SOLVE THE ERROR CHECKED AND RUNNING.\r\n\r\n8- 100% CHECKED BY ME. =||= ", 0], ["307", "Ability to configure date pattern", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:40 PM", "```\nIt would be nice to configure a date pattern for an attribute, in the \nannotation, like :\n\n@DatePattern(\"yyyy-mm-dd\")\nprivate Date day;\n\nThe configuration in GsonBuilder is useful to change date pattern each time, \nbut it can be useful to change configuration for only one attribute.\n\n\n```\n\nOriginal issue reported on code.google.com by `mick8...@gmail.com` on 6 Apr 2011 at 1:08\n- Merged into: #306", "```\nThis is a valid feature request and I will look into supporting something like \nthis in the next Gson release.\n\nI see this feature functioning such that you define your own annotations (like \nabove) and provide your own type adapter; however, the JsonSerializer or \nJsonDeserializer will have enough context to pull off the field and class \nannotations.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:30\n- Changed state: **Accepted**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:30\n- Changed state: **Duplicate**\n =||= ```\nI came across feature request while trying to do this exact thing with the GSON \nlib earier today.\nI had a go at modding the GSON code to support this, its a little rough but it \nmay help someone out if they need to do this in the future, maybe even provide \na starting point to something like this being implemented in future releases. \n\nSee attached SVN patch file\n\n\n```\n\nOriginal comment by `donalfen...@gmail.com` on 9 Feb 2014 at 11:09\n\nAttachments:\n- [AddFieldSpeificDateFormatParsingPatch.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-307/comment-3/AddFieldSpeificDateFormatParsingPatch.patch)\n =||= ", 0], ["308", "gson & AdMob 4.0.4 crashes Android app", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:41 PM", "```\nWhat steps will reproduce the problem?\n1. Use gson-1.6.jar in the build path of the Android app\n2. Use GoogleAdMobAdsSdk-4.0.4.jar in the build path of the Android app\n3. -\n\nWhat is the expected output? What do you see instead?\nExpected: application to work normally\nInstead: getting \"Conversion to Dalvik format failed with error 1\" error which \ncompletely blocks the application from compiling or running.\n\nWhat version of the product are you using? On what operating system?\nGSON 1.6 & GoogleAdMobAdsSdk-4.0.4.jar (same problem with 4.0.2)\n\nPlease provide any additional information below.\nPlease fix asap. I require gson (it rocks!) but also wanna change to the new \nAdMob SDK.\n```\n\nOriginal issue reported on code.google.com by `derbsl...@gmail.com` on 12 Apr 2011 at 7:32\n- Merged into: #255", "Original comment by `limpbizkit` on 12 Apr 2011 at 10:52\n- Changed state: **Duplicate**\n =||= ```\nWhy has this issue merged into 255? It's not the same problem!\nI actually followed the solution in issue 255 but this did not solve my \nproblem. At least it fixes the problem I also have with crashing certain phone \ntypes from HTC.\n\nFollowing this solution I just get a different error:\n\n[2011-04-13 10:57:01 - cheatdatabase-android] Error generating final archive: \nFound duplicate file for APK: assembly-descriptor.xml\nOrigin 1: \nC:\\Users\\de\\Development\\Android\\cheatdatabase-android\\lib\\GoogleAdMobAdsSdk-4.0.\n4.jar\nOrigin 2: \nC:\\Users\\de\\Development\\Android\\cheatdatabase-android\\lib\\myjson-1.6.jar\n\nMy problem has nothing to do with any phone types or whatsoever. The problem \ncomes in Eclipse and I am not able to compile the app anymore when using GSON \n1.6 & AdMob 4.0.4 in my build path. It also does not work if I follow the steps \nmentioned in Issue 255.\n```\n\nOriginal comment by `derbsl...@gmail.com` on 13 Apr 2011 at 9:26\n =||= ```\nFYI,\nI contacted the AdMob SDK team and they are aware of this issue and are working \non it. Watch their forums for a new beta release.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 5:28\n =||= ```\nThank you very much :]\n```\n\nOriginal comment by `derbsl...@gmail.com` on 13 Apr 2011 at 5:38\n =||= ```\nremoved assembly-descriptor.xml from the jar files in r812\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 6:28\n =||= ", 0], ["309", "Custom Map Serializers do not override the default", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:42 PM", "```\nIf a user creates and registers a custom type adapter for some Map type then it \nshould override the default map behaviour.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:28", "Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:23\n- Changed state: **Invalid**\n =||= ", 0], ["310", "Wrong jar in maven central for v1.7", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:42 PM", "```\nWhat steps will reproduce the problem?\nDownload com.google.code.gson:gson:1.7 from repo1.maven.org\n\nWhat is the expected output? What do you see instead?\nExpected: downloading gson 1.7 jar\nCurrent: downloading gson 1.7 javadoc jar (under the name gson-1.7.jar)\n\nPlease provide any additional information below.\nSee for yourself at http://repo1.maven.org/maven2/com/google/code/gson/gson/1.7/\n\n```\n\nOriginal issue reported on code.google.com by `yonatan.graber` on 13 Apr 2011 at 10:36", "```\nYes, I noticed it too. We are in the process of releasing Gson 1.7.1 with \ncorrect jars. If you know of a way to modify the current jars at Maven Central, \nlet us know. \n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 6:21\n- Changed state: **Accepted**\n =||= Original comment by `inder123` on 13 Apr 2011 at 7:31\n- Added labels: **Priority-Critical**\n- Removed labels: **Priority-Medium**\n =||= ```\nFixed with the release of Gson 1.7.1\nsee: http://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 11:28\n- Changed state: **Fixed**\n =||= ", 0], ["311", "Remove MVN specific files from gson.jar", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:43 PM", "```\nDuring the release, the follow files get included in the compiled class jar.\n\nassembly-descriptor.xml\nMETA-INF/maven/com.google.code.gson/gson/pom.xml\nMETA-INF/maven/com.google.code.gson/gson/pom.properties\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 13 Apr 2011 at 5:32", "```\nFixed this from Maven generated jars in r811\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 6:21\n =||= ```\nFixed in Gson 1.7.1\n```\n\nOriginal comment by `inder123` on 13 Apr 2011 at 11:27\n- Changed state: **Fixed**\n =||= ", 0], ["312", "get(String membername) method", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:44 PM", "```\nCould we have a method that accepts member paths also?\n\nSo instead of get(\"name\") also get(\"address.country\"), which would then \nautomatically descend in the hierarchy and return that subpart of the json data.\n\n\n```\n\nOriginal issue reported on code.google.com by `mendri...@gmail.com` on 14 Apr 2011 at 5:31\n- Merged into: #322", "Original comment by `inder123` on 3 Jun 2011 at 6:33\n- Changed state: **Duplicate**\n =||= ", 0], ["313", "Why no-arg ctor are needed for deserialization in Gson when java native serialization/deserialization doesn't need it?  ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:44 PM", "```\nWhy no-arg ctor are needed?\nDoesn't is uses java reflection?\n\nThanks!\n```\n\nOriginal issue reported on code.google.com by `prafull....@gmail.com` on 14 Apr 2011 at 6:37", "```\nIf you download the latest version of Gson then you will get this behaviour.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 1:21\n- Changed state: **Invalid**\n =||= ```\nthat's great!\nthanks!\n```\n\nOriginal comment by `prafull....@gmail.com` on 15 Apr 2011 at 2:16\n =||= ", 0], ["314", "Make GsonBuilder cloneable", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:48 PM", "```\nSince it it mutable, GsonBuilder should also be cloneable.\n```\n\nOriginal issue reported on code.google.com by `jeremiah...@gmail.com` on 16 Apr 2011 at 10:01", "```\nWhy are you cloning a GsonBuilder? I'm marking this as WontFix only because we \ndon't expect GsonBuilder instances to survive beyond a single method call.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 6:01\n- Changed state: **WontFix**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nI needed this to create a \"default\" builder that can be personalized by \na-priori unknown users of my service.\nI wanted to be able to create the default instance and then pass around clones \nof it.\n\nI worked around it by having a method dedicated to the creation of that default \nbuilder. It is however not optimal if you want to have multiple layers of such \n\"services\", each tuning their builder for their very needs.\n```\n\nOriginal comment by `jeremiah...@gmail.com` on 29 Dec 2011 at 6:02\n =||= ", 0], ["315", "Allow providing a custom visitor to preprocess or postprocess default serialization / deserialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:48 PM", "```\nI have the following use cases:\n\n1. When searching a list of, for example, products I want to be able to (only \nin this situation) provide a way to only serialize fields that the client asks \nfor. I could use a DTO to do the job but, in my use-case (multiple lists with \ncustom fields) it would be very unnatural. I could simply use the exclusion \nstrategy that GSON provides but in this use case it is just not enough. Imagine \none of the fields the client asks for is, for example, product.country.name. \nThen, if I want a generic way to serialize this I need to know the precise \ncontext of the field being serialized (I mean context as the stack of objects \nalready visited in that branch of the object graph).\n\n2. When posting a complex form (multiple associations through html select \nfields) I only want to send the id of the select form fields instead of the \nwhole object graph (avoiding a lot of traffic). The problem is that if I need \nto rebuild the object when it arrives to the server I need to provide a custom \nserializer / deserializer for doing this. With a custom visitor I could \npost-process these kind of objects in some generic way (for example during \ndeserialization).\n\nThese two use-cases (I hope I have explained myself well) has brought me to \ndevelop an extension of GSON to allow to provide a custom JsonVisitor through a \nfactory (to avoid reflection and the derived performance gain) configured in \nGSON builder. Attached you can find a patch for v1.7.1 (tag gson-1.7.1) with a \nunit test case.\n\nInstead of using a single custom gson visitor (as for example in the Exclusion \nStrategies) I wanted a factory so I don't have to deal with thread locals in my \nimplementations to store the object stack being processed. \n\nAny comments are very welcome.\n```\n\nOriginal issue reported on code.google.com by `ignacio....@kotasoft.com` on 18 Apr 2011 at 1:54\n\nAttachments:\n- [json_visitor_patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-0/json_visitor_patch.txt)", "```\nSorry for posting this as a Defect. Obviestly this is an enhancement... Is \nthere anyway to change it or should I file a new issue?\n```\n\nOriginal comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 1:55\n =||= ```\nIssue #20 (I have seen it has been accepted) could be relatively easily solved \nwith this patch! \n```\n\nOriginal comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 2:21\n =||= ```\nThis fix (over the previous patch) solves a NPE issue on Gson and probably has \na minimal performance gain over previous patch.\n```\n\nOriginal comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 2:46\n\nAttachments:\n- [gson_patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-3/gson_patch.txt)\n =||= ```\nIssue 144 has been merged into this issue.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:52\n =||= ```\nTest for issue 20 using this patch\n```\n\nOriginal comment by `ignacio....@kotasoft.com` on 21 Apr 2011 at 12:58\n\nAttachments:\n- [Issue20Test.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-5/Issue20Test.java)\n =||= ```\nYou can do this in Gson 2.1 by writing your own TypeAdapterFactory. Look at \nReflectiveTypeAdapterFactory if you need inspiration.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:53\n- Changed state: **WontFix**\n =||= ", 0], ["316", "Unwanted side-effects when using transient", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:50 PM", "```\nWhat steps will reproduce the problem?\n1. mark a field you want to store in DB but not serialize with gson as transient\n2. use the class with a Hibernate-like framework\n\nWhat is the expected output? What do you see instead?\n  I would like to be easily able to exclude a field from (de)serialization with gson, but the transient modifier is used by some frameworks, and therefore my field cannot be stored\u2026\n\nWhat version of the product are you using? On what operating system?\nGson 1.6\n\nPlease provide any additional information below.\nI attached a patch that adds a skipFieldsWithExcludeAnnotation method like for \nthe Expose annotation.\n\nWhy not use Expose ? Because it is faster to @Exclude one field than to @Expose \nall the others.\n```\n\nOriginal issue reported on code.google.com by `julien.d...@clever-cloud.com` on 18 Apr 2011 at 10:13\n\nAttachments:\n- [0001-add-exclude-strategy.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-316/comment-0/0001-add-exclude-strategy.patch)", "```\nI don't think we want to support this in Gson directly. I think @Expose was a \nmistake, but now we are stuck with it :-). This is really easy for you to do \nyourself if you are using Gson 1.7 or later.\n\nInstead, what I recommend is that you write your own Exclusion Strategies for \nserialization and deserialization. Then you would create your Gson instance as \nfollows:\nGson gson = new GsonBuilder()\n    .addSerializationExclusionStrategy(new MySerializationExclusionStrategy())\n    .addDeserializationExclusionStrategy(new MyDeserializationExclustionStrategy())\n    .create();\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:44\n- Changed state: **WontFix**\n =||= ```\nYeah, I (we) already use that, but we thought we could help a little.\n\nAnyway, if you suddenly want to add it in gson, the patch is here ;-).\n```\n\nOriginal comment by `julien.d...@clever-cloud.com` on 20 Apr 2011 at 7:15\n =||= ", 0], ["317", "Is there any way to restrict deserialization if certain conditions not full-filled?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:51 PM", "```\n1) Suppose if some field / method is deleted from the class OR changed the data \ntype and are present in stored JSON format object then it should not \ndeserialize it.\n\n2) If some field/method is added then it should deserialize.\n```\n\nOriginal issue reported on code.google.com by `prafull....@gmail.com` on 19 Apr 2011 at 8:00", "```\nHave you considered using the versioning support in Gson? If you model changes \nin a drastic way then maybe its better to version your fields.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:34\n =||= ```\nThanks joel !!\nyes i am trying to use it for versioning which can be backward compatible but \nshould be only in case of addition of new features not in case of deleting OR \nmodifying the fields. otherwise It will give unexpected results which are hard \nto catch.\n```\n\nOriginal comment by `prafull....@gmail.com` on 3 Jun 2011 at 6:46\n =||= ```\nClosing as WontFix. If you can explain what we should add, please post that \nhere. Otherwise custom type adapters should make this easy.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 6:00\n- Changed state: **WontFix**\n =||= ", 0], ["318", "Gson should serialize sub-class objects per sub-class type for collections", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:52 PM", "```\nSee the thread: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/f92fb49692e0aa33\n?hl=en\n\nSee the tests for reproducing this issue in r825\n\nThis seems to work fine for maps but fails for collections.\nAfter fixing this issue, we need to enable disabled_testListOfSubclassFields() \ntest\n```\n\nOriginal issue reported on code.google.com by `inder123` on 19 Apr 2011 at 8:28", "```\nFixed in r828.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33\n =||= Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33\n- Changed state: **Fixed**\n =||= ", 0], ["319", "Gson 1.4 doesn't support type parameters in superclass.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:53 PM", "```\nWhat steps will reproduce the problem?\n\nclass Foo<T> {\n    T val;\n}\n\nclass Bar\n        extends Foo<Integer> {\n}\n\npublic class GsonTest {\n\n    public static void main(String[] args) {\n        Bar bar = new Bar();\n        bar.val = 123;\n\n        Gson gson = new Gson();\n        gson.toJson(bar);\n    }\n\n}\n\n\nGot the error:\n\n\nException in thread \"main\" java.lang.UnsupportedOperationException: Expecting \nparameterized type, got class com.bee32.plover.ajax.Bar.\n Are you missing the use of TypeToken idiom?\n See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)\n    at com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:148)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n    at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\n    at com.google.gson.Gson.toJsonTree(Gson.java:230)\n    at com.google.gson.Gson.toJson(Gson.java:315)\n    at com.google.gson.Gson.toJson(Gson.java:270)\n    at com.google.gson.Gson.toJson(Gson.java:250)\n    at com.bee32.plover.ajax.GsonTest.main(GsonTest.java:20)\n\n```\n\nOriginal issue reported on code.google.com by `x...@99jsj.com` on 20 Apr 2011 at 9:26", "```\nSorry, it's resolved in 1.7.1. Please close this issue.\n```\n\nOriginal comment by `x...@99jsj.com` on 20 Apr 2011 at 9:31\n =||= Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 3:58\n- Changed state: **Fixed**\n =||= ", 0], ["320", "GSON 1.7.1 and AdMob 4.0.4 still not working together", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:54 PM", "```\nWhat steps will reproduce the problem?\n1. Set AdMob version 4.0.0 or upwards to build path\n2. Set GSON 1.7.1 to build parth\n3. Try making an Android app\n\nWhat is the expected output? What do you see instead?\nI expect the application to compile. Instead I get this error in Eclipse:\n\"Conversion to Dalvik format failed with error 1\"\n\nWhat version of the product are you using? On what operating system?\nWindows 7, GSON 1.7.1, AdMob 4.0.4\n\nPlease provide any additional information below.\nGSON works fine with older versions of AdMob (don't know the exact version) but \nblocks the entire app from compiling when trying to use the latest versions of \nboth libraries. it also does not work with GSON 1.6\n```\n\nOriginal issue reported on code.google.com by `derbsl...@gmail.com` on 29 Apr 2011 at 7:33", "```\nYou can just delete GSON library because Admob library itself use GSON\n```\n\nOriginal comment by `nathanie...@gmail.com` on 30 Apr 2011 at 9:10\n =||= ```\n[deleted comment]\n```\n =||= ```\n[deleted comment]\n```\n =||= ```\nAdMob is available in version 4.1.0. Now it works fine with GSON 1.7.1 together.\n```\n\nOriginal comment by `martinko...@gmail.com` on 27 May 2011 at 12:14\n =||= ```\nAdMob updated its library.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:22\n- Changed state: **WontFix**\n =||= ", 0], ["321", "issue  with extends class", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:55 PM", "```\nHello,\n\ni have notice that the current example\n\npublic class gsonTest {\n\n    public static void main(String[] args) {\n        Response r = new Response().add(new B()).add(new A());\n        Gson gson = new GsonBuilder().create();\n        System.out.println(gson.toJson(r, r.getClass()));\n    }\n\n    public static class Response {\n        Vector<A> a = new Vector<A>();\n        public Response add(A aa) {\n\n            a.add(aa);\n            return this;\n        }\n\n    }\n    public static class A {\n        int A = 1;\n\n    }\n\n    public static class B extends A {\n        int B = 2;\n    }\n}\n\n\nproduce\n{\"a\":[{\"A\":1},{\"A\":1}]}\n\ninstead\n{\"a\":[{\"A\":1},{\"A\":1,\"B\":2}]}\n\n\ntested on mac/linux/win 1.6 jvm and 1.7.1 gson lib.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `ramarr...@gmail.com` on 4 May 2011 at 1:47\n- Merged into: #231", "```\n321 is a duplicate of 231.\n```\n\nOriginal comment by `limpbizkit` on 4 May 2011 at 9:31\n- Changed state: **Duplicate**\n =||= ", 0], ["322", "Provide xpath like accessors for the Parse Tree", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:56 PM", "```\nSee the discussion at \nhttps://groups.google.com/forum/?hl=en#!topic/google-gson/DPTGYmbfI5c\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2011 at 8:20", "```\nIssue 312 has been merged into this issue.\n```\n\nOriginal comment by `inder123` on 3 Jun 2011 at 6:33\n =||= ```\nThe feature requester wanted to do this:\n  String value = element.get(\"mystructure.myArray[3].myproperty\");\n\nI recommend that they just use the Java APIs:\n  element.getAsJsonObject().get(\"mystructure\")\n    .getAsJsonObject().get(\"myArray\")\n    .getAsJsonArray().get(3)\n    .getAsJsonObject().get(\"myproperty\");\n\nI admit that it's more verbose, but it's type safe and it will fail with a much \nmore meaningful error.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 9:51\n- Changed state: **WontFix**\n =||= ```\nessentially defeats the intent of the original request - to have an xpath like \nconstruct.\n```\n\nOriginal comment by `javadba@gmail.com` on 7 Apr 2013 at 2:15\n =||= ```\na meaningful error is not at all difficult in case of of failure\nmoreover all the convenience methods of getString and the like still make sense\n\nthe feature originally described would make the library useful in a whole class \nof problems where json is a good enough structure for working with data and \ndoing Java<->Json is not necessary\n```\n\nOriginal comment by `un...@webgress.com` on 5 Mar 2014 at 2:33\n =||= ", 0], ["323", "Provide ability to register different FieldNamingStrategies for serialization and deserialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:57 PM", "```\nSee discussion at: \nhttps://groups.google.com/forum/?hl=en#!topic/google-gson/ZYnHXcY6IBg\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2011 at 8:25", "```\nIs this possible enhancement just to be able to register different \nFieldNamingStrategies for serialization and deserialization, or is it also to \naddress adding the ability to specify name translation preferences in both \ndirections: from Java field to JSON element, and from JSON element to Java \nfield?\n\nTo clarify, might this enhancement include the ability to deserialize a JSON \nelement without consideration for the case of the characters in the JSON \nelement name -- that is, to possibly allow a case-insensitive binding between \nJava field and JSON element names, along the lines of what's described at \nhttp://stackoverflow.com/questions/6332651?\n```\n\nOriginal comment by `Programm...@gmail.com` on 14 Jun 2011 at 12:24\n =||= ```\nThis is rarely what you want. Even case insensitivity is strange because \nJavaScript is case sensitive. Plus, there are weird situations with \ncapitalization rules for non-ASCII characters.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 8:21\n- Changed state: **WontFix**\n =||= ", 0], ["324", "GsonBuilder excludeFieldsWithModifiers() not working", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:58 PM", "```\nWhat steps will reproduce the problem?\n1. Create one POJO bean\n2. Add one field with transient\n3. Set excludeFieldsWithModifiers(Modifier.TRANSIENT) on GsonBuilder and \nconvert the pojo to json.\n\nWhat is the expected output? What do you see instead?\n- Transient field was exluded event though i hint gsonbuilder to include it\n- I want to include all the transient fields\n\n\nWhat version of the product are you using? On what operating system?\ngson 1.7.1, Win7\n\n\nPlease provide any additional information below.\nAttached is the zipped eclipse project for testing\n\n```\n\nOriginal issue reported on code.google.com by `techgur...@gmail.com` on 12 May 2011 at 1:36\n\nAttachments:\n- [gsontest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-324/comment-0/gsontest.zip)", "```\nThis issue was closed by revision r1096.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:17\n- Changed state: **Fixed**\n =||= ```\nTransient is excluded by default. Call excludeFieldsWithModifiers() with no \narguments to enable transient field serialization.\n\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:18\n =||= ", 0], ["325", "default parsing of  Map where generic value param is object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:29:59 PM", "```\nIt seems we could make a better parser for Map<String,Object> which converts \nthe Object to a primitive wrapper, list, or map.  Right now, we just get an \nerror back.\n\n\"Type information is unavailable, and the target object is not a primitive\"\n\nFor example, the following test should work, ideally:\n\n   public void testMapStringObjectWithAllValidValuesOneDeep() {\n      Map<String, Object> map = Maps.newHashMap();\n      map.put(\"string\", \"string\");\n      map.put(\"number\", 1);\n      map.put(\"boolean\", true);\n      map.put(\"map\", ImmutableMap.of(\"key\", \"value\"));\n      map.put(\"list\", ImmutableList.of(\"key\", \"value\"));\n      assertEquals(json.toJson(map),\n            \"{\\\"string\\\":\\\"string\\\",\\\"map\\\":{\\\"key\\\":\\\"value\\\"},\\\"list\\\":[\\\"key\\\",\\\"value\\\"],\\\"boolean\\\":true,\\\"number\\\":1}\");\n      Map<String, Object> map2 = json.fromJson(json.toJson(map), new TypeLiteral<Map<String, Object>>() {\n      }.getType());\n      assertEquals(map2, map);\n      assertEquals(json.toJson(map2), json.toJson(map));\n   }\n```\n\nOriginal issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 12:15", "```\nHere's the patch for this:\n\nin MapTypeAdapter, add this where the value is being parsed\n\n      Object value = null;\n      if (keyAndValueTypes[1] == Object.class) {\n         value = ParseObjectFromElement.SINGLETON.apply(entry.getValue());\n      }\n      if (value == null) {\n         value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);\n      }\n\nParseObjectFromElement and deps are below:\n\npublic enum ParseObjectFromElement implements Function<JsonElement, Object> {\n   SINGLETON;\n   public Object apply(JsonElement input) {\n      Object value = null;\n      if (input == null || input.isJsonNull()) {\n         value = null;\n      } else if (input.isJsonPrimitive()) {\n         JsonPrimitive primitive = input.getAsJsonPrimitive();\n         if (primitive.isNumber()) {\n            value = primitive.getAsNumber();\n         } else if (primitive.isBoolean()) {\n            value = primitive.getAsBoolean();\n         } else {\n            value = primitive.getAsString();\n         }\n      } else if (input.isJsonArray()) {\n         value = Lists.newArrayList(Iterables.transform(input.getAsJsonArray(), this));\n      } else if (input.isJsonObject()) {\n         value = Maps.<String,Object>newLinkedHashMap(Maps.transformValues(JsonObjectAsMap.INSTANCE.apply(input.getAsJsonObject()),\n               this));\n      }\n      return value;\n   }\n}\n\npublic enum JsonObjectAsMap implements Function<JsonObject, Map<String, \nJsonElement>> {\n   INSTANCE;\n\n   private final Field members;\n\n   JsonObjectAsMap() {\n      try {\n         members = JsonObject.class.getDeclaredField(\"members\");\n         members.setAccessible(true);\n      } catch (NoSuchFieldException e) {\n         throw new UnsupportedOperationException(\"cannot access gson internals\", e);\n      }\n   }\n\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public Map<String, JsonElement> apply(JsonObject in) {\n      try {\n         return (Map<String, JsonElement>) members.get(in);\n      } catch (IllegalArgumentException e) {\n         throw new UnsupportedOperationException(\"cannot access gson internals\", e);\n      } catch (IllegalAccessException e) {\n         throw new UnsupportedOperationException(\"cannot access gson internals\", e);\n      }\n   }\n}\n\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:17\n =||= ```\nIf you want to parse an arbitrary map, how about using JsonParser to parse the \nJSON into a JsonElement DOM. You can then navigate the DOM and deserialize \nusing gson.fromJson(JsonElement, Type) method.\n```\n\nOriginal comment by `inder123` on 15 May 2011 at 6:53\n =||= ```\n[deleted comment]\n```\n =||= ```\nImplementation of this change would also provide better consistency with the \nbehavior when simple object fields of type \"Object\" are deserialized to.\n\nFor example, simple deserialization of \n\n{\"one\":\"won\",\"two\":2,\"three\":false}\n\ninto \n\nclass ObjectThings\n{\n  Object one;\n  Object two;\n  Object three;\n}\n\nusing\n\nObjectThings objectThings = gson.fromJson(new FileReader(\"input.json\"), \nObjectThings.class);\n\ngenerates an instance of ObjectThings where the fields \"one\", \"two\", and \n\"three\" are populated with instances of String, LazilyParsedNumber, and Boolean \nrespectively.\n\nHowever, when deserializing this same JSON using \n\nType mapStringObjectType = new TypeToken<Map<String, Object>>(){}.getType();\nMap<String, Object> mapStringObject = gson.fromJson(new \nFileReader(\"input.json\"), mapStringObjectType);\n\nthis creates a map with three entries (with keys \"one\", \"two\", \"three\"), where \neach entry value is a mostly useless instance of Object, containing of course \nno deserialized data.  This is an inconsistent result when compared to the \nfirst example I posted.  To be consistent, the types of the map entries values \nshould be String, LazilyParsedNumber, and Boolean, with values \"won\", 2, false.\n\nIt is certainly possible for users to implement a custom deserializer for this \nscenario, however doing so somewhat defeats the entire purpose for using an API \nlike Gson, and, again, the necessity to do so is inconsistent with the \ndeserialization behavior of the first example I posted.\n\nA very simple alteration to Gson to provide deserialization to Map<String, \nObject> consistent with deserialization to ObjectThings {Object one; Object \ntwo; Object three;} is in JsonDeserializationContext.fromJsonPrimitive(Type, \nJsonPrimitive, JsonDeserializationContext) to change \n\nobjectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), \nvisitor);\n\nto\n\nobjectNavigator.accept(new ObjectTypePair(null, typeOfT, true), visitor);\n\nThis change introduces no new failures to the current Gson test suite.  (The \ntest suite currently contains six failures based on date indexes off by one \nposition.  This is not affected by the change I just described.)\n\nAn alternative solution to this problem, so as not to affect the current API \nbehavior, may be the changes described above by Adrian (I don't know, as I \ndidn't yet go through them), or it may be to add a configuration to GsonBuilder \nalong the following lines \n\npublic GsonBuilder enableLazyJsonPrimitiveMapValueDeserialization() {\n  registerTypeHierarchyAdapter(Map.class, PRIMITIVES_AS_MAP_VALUES_TYPE_ADAPTER);\n  return this;\n}\n\nwith an appropriate implementation of a new MapTypeAdapter type.\n\nIf there is any interest amongst the Gson project maintainers for this change, \nI'm glad to provide an implementation along with appropriate test cases.\n```\n\nOriginal comment by `Programm...@gmail.com` on 13 Jun 2011 at 5:52\n =||= ```\nA recent post on StackOverflow.com helps demonstrate the value of implementing \na reasonable solution for issue 325.  http://stackoverflow.com/questions/6455303\n\nSolution With Gson without 325 Implemented: Fugly\nSolution With Jackson: 1 Line\n```\n\nOriginal comment by `Programm...@gmail.com` on 24 Jun 2011 at 2:21\n =||= ```\nFixed in GSON 2.0. I also answered the stackoverflow question.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:55\n- Changed state: **Fixed**\n =||= ```\nlooks great.  thanks\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 1 Jan 2012 at 10:57\n =||= ", 0], ["326", "Allow fields to be json literals", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:01 PM", "```\nIn the jclouds project, we often encounter semi-structured data.  For example, \nthe structure is known to a certain depth, and after which we'd like to defer \nparsing to an extension.\n\nFor example, a json schema could be known to have attributes, which are not \ntyped.  We'd like to defer parsing of these attributes.\n\nFor example, I'd like to parse the following:\n\n{\n    \"name\": \"elmo\",\n    \"attributes\": {\n        \"custom/1\": {\n            \"favorite\": \"berries\"\n        },\n        \"custom/2\": 1000\n    }\n}\n\ninto a class like this:\n\nclass Thing {\n    String name;\n    Map<String, String> attributes; \n}\n```\n\nOriginal issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 12:28", "```\nin jclouds we have a workaround to this which includes a wrapper type called \nJsonBall, so in the above example, it is Map<String, JsonBall> attributes.  \n\n\npublic class JsonBall implements java.io.Serializable, Comparable<String>, \nCharSequence {\n   private final String value;\n\n   @Override\n   public String toString() {\n      return value;\n   }\n\n   public JsonBall(double value) {\n      this.value = value + \"\";\n   }\n\n   public JsonBall(int value) {\n      this.value = value + \"\";\n   }\n\n   public JsonBall(long value) {\n      this.value = value + \"\";\n   }\n\n   public JsonBall(String value) {\n      this.value = quoteStringIfNotNumber(checkNotNull(value, \"value\"));\n   }\n\n   static String quoteStringIfNotNumber(String in) {\n      if (Patterns.JSON_STRING_PATTERN.matcher(in).find() && !Patterns.JSON_NUMBER_PATTERN.matcher(in).find()) {\n         return \"\\\"\" + in + \"\\\"\";\n      }\n      return in;\n   }\n--snip---\n\nWe've then used registerTypeAdapter into gson to short-circuit on the JsonBall \ntype. \n\nHowever, to get this type to properly serialize/deserialze, we had to create an \ninternal type called JsonLiteral, adding JsonWriter.value(JsonLiteral), which \nis called by Streams.write if the element is an instanceof JsonLiteral.  The \nuser-level class JsonBall and the internal class JsonLiteral are hooked \ntogether with type adapter below:\n\n   public static class JsonBallAdapterImpl implements JsonSerializer<JsonBall>, JsonDeserializer<JsonBall> {\n\n      public JsonElement serialize(JsonBall src, Type typeOfSrc, JsonSerializationContext context) {\n         return new JsonLiteral(src);\n      }\n\n      public JsonBall deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n            throws JsonParseException {\n         return new JsonBall(json.toString());\n      }\n\n   }\n\n\n\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:36\n =||= ```\nI believe that a better way would be to optionally mark members with an \nannotation ex. @Literal or something.  This would eliminate the forced type.  \nAlso open for any suggestions, as I'd like to eliminate the gson patches \ncurrently lying around in jclouds\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:38\n =||= ```\nHow about using JsonParser class in Gson and navigating the DOM and using Gson \nto deserialize selective elements?\n```\n\nOriginal comment by `inder123` on 20 May 2011 at 9:39\n =||= ```\nI feel that we do not want to support a feature like this; however, here is \nsome examples and documentation on how this can be achieved on your own:\n\nhttp://sites.google.com/site/gson/streaming\nhttp://code.google.com/p/google-gson/source/browse/trunk/extras/src/main/java/co\nm/google/gson/extras/examples/rawcollections/RawCollectionsExample.java\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:29\n- Changed state: **WontFix**\n =||= ```\nI understand the reluctance, just I'd love to be able to properly osgify \njclouds without the classclash issues we currently have due to this.  \n\nI've tried again using gson 2.1, and things are certainly easier.  However, I \ncan't seem to add a new JsonElement (JsonLiteral in this case) without patching \ntwo classes.  Maybe you have some ideas.\n\nJsonWriter <- I'd like to be able to overload write(JsonLiteral), or otherwise \nwrite a string directly, but cannot as this class is new'ed directly in a few \nplaces.\n\nhttps://github.com/jclouds/jclouds/blob/master/core/src/main/java/com/google/gso\nn/stream/JsonWriter.java\n\nStreams.write <- static method which is called by a few classes, and calls \nTypeAdapters.JSON_ELEMENT.write.  Same issue as above; I'd like to override \nthis behavior.  In the mean time, I have an instance of check delegating to my \npatched version of JsonWriter above, delegating to  overloads .value()\n\nhttps://github.com/jclouds/jclouds/blob/master/core/src/main/java/com/google/gso\nn/internal/Streams.java\n\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 2 Jan 2012 at 3:31\n =||= ```\nDo you really need to add a new JsonElement type? I'd like to talk to you \noffline to understand what you can't do with the existing APIs...\n```\n\nOriginal comment by `limpbizkit` on 2 Jan 2012 at 5:31\n =||= ```\nokie.  just sent offline mail. thx\n```\n\nOriginal comment by `fernc...@gmail.com` on 2 Jan 2012 at 5:51\n =||= ```\nhere's a valid workaroud:\n\nhttps://github.com/jclouds/jclouds/blob/master/core/src/main/java/org/jclouds/js\non/internal/NullHackJsonLiteralAdapter.java\nhttps://github.com/jclouds/jclouds/blob/master/core/src/test/java/org/jclouds/js\non/internal/NullHackJsonLiteralAdapterTest.java\n\nThanks tons for the help!\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 2 Jan 2012 at 10:51\n =||= ", 0], ["327", "support basic yaml parsing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:04 PM", "```\nother libraries that support yaml are extremely bad at the things you guys are \ngood at. \n\nfor example, you guys are very good at handling injecting data into classes \nwith custom constructors, coercing generic types, intuitive serializers, \ndeserializers.\n\nI'm not necessarily asking for advanced yaml, with munging, etc.  mainly a \ngson-like deserializer for yaml which is as clean as you current code is, and \nclearly benefits from all the core stuff in gson that isn't json dependent.\n\nHere's an example of what we otherwise have to deal with:\n\n   class SelectiveConstructor extends Constructor {\n      public SelectiveConstructor() {\n         // define a custom way to create a mapping node\n         yamlClassConstructors.put(NodeId.mapping, new MyPersistentObjectConstruct());\n      }\n\n      class MyPersistentObjectConstruct extends Constructor.ConstructMapping {\n         @Override\n         protected Object constructJavaBean2ndStep(MappingNode node, Object object) {\n            Class type = node.getType();\n            if (type.equals(MyPersistentObject.class)) {\n               // create a map\n               Map map = constructMapping(node);\n               String id = (String) map.get(\"id\");\n               return new MyPersistentObject(id, 17);\n            } else {\n               // create JavaBean\n               return super.constructJavaBean2ndStep(node, object);\n            }\n         }\n      }\n   }\n\n   public void testConstructor() throws IOException {\n      Yaml yaml = new Yaml(new SelectiveConstructor());\n      List<?> data = (List<?>) yaml.load(\"- 1\\n- 2\\n- !!examples.MyPersistentObject {amount: 222, id: persistent}\");\n      // System.out.println(data);\n      assertEquals(3, data.size());\n      MyPersistentObject myObject = (MyPersistentObject) data.get(2);\n      assertEquals(17, myObject.getAmount());\n      assertEquals(\"persistent\", myObject.getId());\n   }\n```\n\nOriginal issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 4:08", "```\nYaml is outside of the scope of GSON. If you'd like to create a GSON-inspired \nYAML project, that would be great!\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 9:38\n- Changed state: **WontFix**\n =||= ```\nworth a shot :)  thx anyway\n```\n\nOriginal comment by `adrian.f...@gmail.com` on 1 Jul 2011 at 10:14\n =||= Will do this soon :) =||= ", 0], ["328", "GenericType convert problem", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:05 PM", "```\nWhat steps will reproduce the problem?\n1.A class has an Object field:\npublic class ClassA{\n    Object o;\n\n    public Object getO() {\n        return o;\n    }\n\n    public void setO(Object o) {\n        this.o = o;\n    }\n}\n\n2. a GenericClass like this:\n\npublic class ClassB<T> {\n    T f;\n\n    public T getF() {\n        return f;\n    }\n\n    public void setF(T f) {\n        this.f = f;\n    }\n}\n\n3. convert a ClassA object:\n\nClassA obja = new ClassA();\nClassB<String> objb = new ClassB<String>();\nobjb.setF(\"this is objB\");\n\nList<ClassB<String>> objblist = new ArrayList<ClassB<String>>();\nobjblist.add(objb);\nobja.setO(objblist);\n\nSystem.out.println(g.toJson(obja));\n\nWhat is the expected output? What do you see instead?\n\nexpected output: {\"o\":[{\"f\":{}}]}\nactually output: {\"o\":[{\"f\":\"this is objB\"}]}\n\n\nWhat version of the product are you using? On what operating system?\nversion: google-gson-1.7.0\njdk:1.6_20\nos:Windows 7\n\n\n```\n\nOriginal issue reported on code.google.com by `liu78...@gmail.com` on 18 May 2011 at 5:35", "```\nThis is indeed the expected output with Gson. During serialization, it writes \nout the actual object's fields instead of the specified type.\n```\n\nOriginal comment by `inder123` on 20 May 2011 at 9:32\n =||= ```\nYou can register a type hierarchy adapter for your types that limits the output \nto the specific set of fields.\n```\n\nOriginal comment by `inder123` on 20 May 2011 at 9:37\n- Changed state: **WontFix**\n =||= ```\nRegister a type adapter need to know the type - the type of ClassB's field f.\nActually i do not know the type. How do i do?\n```\n\nOriginal comment by `liu78...@gmail.com` on 24 May 2011 at 6:08\n =||= ", 0], ["329", "Maven build fail.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:07 PM", "```\nWhat steps will reproduce the problem?\n1.add maven dependency to project\n\n\nI try to use 1.7.1 instead of 1.6, but error happend during project build.\n\nReason: Cannot find parent: org.sonatype.oss:oss-parent for project: \ncom.google.code.gson:gson:jar:1.7.1 for project \ncom.google.code.gson:gson:jar:1.7\n.1\n```\n\nOriginal issue reported on code.google.com by `vitek.pa...@gmail.com` on 19 May 2011 at 3:31", "```\nIn maven pom xml file \n\n <modelVersion>4.0.0</modelVersion>\n <groupId>com.google.code.gson</groupId>\n <artifactId>gson</artifactId>\n <packaging>jar</packaging>\n <version>1.7.1</version>\n <inceptionYear>2008</inceptionYear>\n <name>Gson</name>\n <parent>\n   <groupId>org.sonatype.oss</groupId>\n   <artifactId>oss-parent</artifactId>\n   <version>5</version>\n </parent>\n\nI confounded...\n```\n\nOriginal comment by `vitek.pa...@gmail.com` on 19 May 2011 at 3:34\n =||= ```\nIn UserGuide I didn't see any information about parent \n\nOnly\n\nUsing Gson with Maven2\nTo use Gson with Maven2/3, you can use the Gson version available in Maven \nCentral by adding the following dependency:\n\n<dependencies>\n    <!--  Gson: Java to Json conversion -->\n    <dependency>\n      <groupId>com.google.code.gson</groupId>\n      <artifactId>gson</artifactId>\n      <version>1.7.1</version>\n      <scope>compile</scope>\n    </dependency>\n</dependencies>\n\nThat is it, now your maven project is Gson enabled. \n```\n\nOriginal comment by `vitek.pa...@gmail.com` on 19 May 2011 at 3:36\n =||= ```\nI dont see that error when I run maven on Gson. Can you share in detail the \ncommand you are running and the error you are seeing?\n```\n\nOriginal comment by `inder123` on 20 May 2011 at 9:26\n =||= Original comment by `inder123` on 3 Jun 2011 at 6:29\n- Changed state: **Invalid**\n =||= ", 0], ["330", "EOFException in JsonReader on an empty document", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:09 PM", "```\nWhat steps will reproduce the problem?\n\n  public void test() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"\"));\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }\n\nWhat is the expected output? What do you see instead?\n\nExpected test to pass, but instead it throws an exception:\n\njava.io.EOFException: End of input\n    at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:887)\n    at com.google.gson.stream.JsonReader.nextValue(JsonReader.java:787)\n    at com.google.gson.stream.JsonReader.quickPeek(JsonReader.java:365)\n    at com.google.gson.stream.JsonReader.peek(JsonReader.java:340)\n...\n\nWhat version of the product are you using? On what operating system?\n\nGSON 1.6\n\nPlease provide any additional information below.\n\nInterestingly, we catch EOFException in quickPeek() for the NONEMPTY_DOCUMENT \nscope, but not for the EMPTY_DOCUMENT scope.\n```\n\nOriginal issue reported on code.google.com by `yan...@google.com` on 2 Jun 2011 at 4:10", "```\nThe empty string is not a valid JSON document. So strictly speaking, this is \nworking as it should. But I'm tempted to support an empty document if the \nparser is lenient.\n```\n\nOriginal comment by `limpbizkit` on 2 Jun 2011 at 8:55\n =||= ```\nI agree that it makes sense to only support an empty string if the parser is \nlenient.  That said, for the case of a non-lenient parser, I think it would be \na better developer experience to use syntaxError() and throw an IOException \nrather than throw an EOFException.\n```\n\nOriginal comment by `yan...@google.com` on 2 Jun 2011 at 9:07\n =||= ```\nEOFException subclasses IOException; I think you'll catch it either way.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:58\n- Changed state: **WontFix**\n =||= ", 0], ["331", "Failed tests in DefaultTypeAdaptersTest", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:10 PM", "```\nWhat steps will reproduce the problem?\n1. Build google-gson\n\nWhat is the expected output?\nNo failures\n\nWhat do you see instead?\ntestDefaultDateSerialization(com.google.gson.functional.DefaultTypeAdaptersTest)\n: null expected:<\"Jun 10, 2011 [7:47:38 A]M\"> but was:<\"Jun 10, 2011 [4:47:38 \nP]M\">\ntestDefaultDateDeserialization(com.google.gson.functional.DefaultTypeAdaptersTes\nt): expected:<13> but was:<12>\ntestDefaultJavaSqlDateDeserialization(com.google.gson.functional.DefaultTypeAdap\ntersTest): expected:<3> but was:<2>\ntestDefaultJavaSqlTimestampSerialization(com.google.gson.functional.DefaultTypeA\ndaptersTest): null expected:<\"Dec 3, 2009 1[]:18:02 PM\"> but was:<\"Dec 3, 2009 \n1[0]:18:02 PM\">\ntestDefaultJavaSqlTimestampDeserialization(com.google.gson.functional.DefaultTyp\neAdaptersTest): expected:<13> but was:<4>\ntestDefaultJavaSqlTimeSerialization(com.google.gson.functional.DefaultTypeAdapte\nrsTest): null expected:<\"[01]:18:02 PM\"> but was:<\"[10]:18:02 PM\">\ntestDefaultJavaSqlTimeDeserialization(com.google.gson.functional.DefaultTypeAdap\ntersTest): expected:<13> but was:<4>\ntestDefaultDateSerializationUsingBuilder(com.google.gson.functional.DefaultTypeA\ndaptersTest): null expected:<\"Jun 10, 2011 [7:47:39 A]M\"> but was:<\"Jun 10, \n2011 [4:47:39 P]M\">\n\nWhat version of the product are you using?\n1.7.1\n\nOn what operating system?\nFedora 15 [x86_64]\n\n```\n\nOriginal issue reported on code.google.com by `jcapik%r...@gtempaccount.com` on 14 Jun 2011 at 4:11\n\nAttachments:\n- [com.google.gson.functional.DefaultTypeAdaptersTest.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-331/comment-0/com.google.gson.functional.DefaultTypeAdaptersTest.txt)", "```\nThis issue was closed by revision r863.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 10:00\n- Changed state: **Fixed**\n =||= ", 0], ["332", "Please add support for nesting hierarchical type adapters.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:11 PM", "```\nI'd like to add hierarchical type adapters for types like Iterable, \nImmutableList, ImmutableSet, ImmutableMap, etc.  But that isn't currently \npossible because registerTypeHierarchyAdapter generates an error saying nesting \nof this kind isn't allowed.\n\nThis doesn't seem too hard to change and will make this feature much more \nuseful.\n```\n\nOriginal issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:06", "```\nYou can do this in Gson 2.1 with TypeAdapterFactory.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:57\n- Changed state: **Fixed**\n =||= ", 0], ["333", "Public APIs for type introspection", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:12 PM", "```\nIn order to write type adapters for parameterized types, it would be very \nuseful to have machinery for getting the parameter types, as in \n$Gson$Types#getCollectionElementType.  The attached patch provides just such a \ngeneralization that can be used by authors of type adapters.\n```\n\nOriginal issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:09\n\nAttachments:\n- [foo.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-333/comment-0/foo.diff)", "```\nBasically we'd have our own copy of Guice's TypeAdapter class with all of its \ntype resolution methods.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:48\n- Changed title: **Public APIs for type introspection**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nI believe Guava is going to include a type introspection API in their next \nrelease. I recommend using that.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 8:19\n- Changed state: **WontFix**\n =||= ", 0], ["334", "Add support for proxy type adapters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:13 PM", "```\nSometimes it's useful for the logical serialization of a type to be quite \ndifferent from its physical structure.  I've come up with a simple mechanism \nfor handling this situation: use of a \"proxy class\" for serialization and \ndeserialization.\n\nThe way this works is that the programmer provides a class that will \nparticipate in serialization in place of the original type.  This \"proxy class\" \nhas a constructor that can be called with an instance of the original type; \nthen the resulting proxy instance is serialized.  On deserialization, the proxy \nclass provides a no-argument constructor; the type adapter deserializes into a \nproxy instance, then converts it to a type instance using the required #build() \nmethod.\n\nAttached are three files: (1) a definition of a type proxy; (2) a type adapter \nthat implements this proxy behavior; and (3) a usage example.\n```\n\nOriginal issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:24\n\nAttachments:\n- [TypeProxy.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/TypeProxy.java)\n- [ProxyTypeAdapter.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/ProxyTypeAdapter.java)\n- [ProxyExample.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/ProxyExample.java)", "```\nNeat. This reminds me of readReplace and writeResolve in Java serialization.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 5:05\n =||= ```\nThis is relatively straightforward with Gson 2.1's TypeAdapters. @cph, would \nyou be interested in contributing a TypeAdapter to Gson's extras/ package?\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:57\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `limpbizkit` on 18 Mar 2012 at 8:18\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nThis doesn't need to be in core Gson.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:48\n- Changed state: **WontFix**\n =||= ", 0], ["335", "Improve Gson error handling", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:15 PM", "```\nhttps://groups.google.com/forum/?hl=en_US#!topic/google-gson/x1Rh7GQRSxw\n```\n\nOriginal issue reported on code.google.com by `inder123` on 24 Jun 2011 at 12:10\n- Merged into: #395", "Original comment by `limpbizkit` on 29 Dec 2011 at 7:29\n- Changed state: **Duplicate**\n =||= ", 0], ["336", "Allow annotations to specify type adapters", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:16 PM", "```\nhttps://groups.google.com/forum/?hl=en_US#!topic/google-gson/JR-7nVdLSMA\n```\n\nOriginal issue reported on code.google.com by `inder123` on 26 Jun 2011 at 5:51", "```\nDe-prioritizing this to low. We regret adding features like this to Guice. The \nfact that you can specify a type in the GSON instance and on the type means you \nneed precedence rules; that's quite unpleasant. \n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 3:43\n- Changed state: **New**\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nSorry, probably I am missing something here. How is this a \"Guice\" feature. I \ndo see the possible complications that you are talking about, but I do have \nbelief unpleasantness could be hidden in the implementation and not exposed to \nuser through too much semantics. \nIf you think I am not missing too much, then I could probably work on a \nproposal to help explain better, let me know.\n\nThanks !\nguru\n\n\n```\n\nOriginal comment by `guru...@gmail.com` on 2 Oct 2011 at 5:24\n =||= ```\nGuice has two ways to attach a provider to a type. In the central Injector:\n A. bind(Foo.class).to(DatabaseFoo).class;\nor on the type itself:\n B. @ImplementedBy(DatabaseFoo.class)\n    class Foo {...}\n\nApproach B loses because it means sometimes configuration is in the central \nplace and sometimes its on the types. So you never get a full picture of the \napplication's configuration.\n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 9:57\n =||= ```\nI still don't think this is a good idea for the framework. But with Gson 2.1's \nTypeAdapterFactory type, you can do this yourself if you want in only a few \nlines of code.\n```\n\nOriginal comment by `limpbizkit` on 30 Dec 2011 at 6:47\n- Changed state: **WontFix**\n =||= ", 0], ["337", "Fix documentation related to streaming classes", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:17 PM", "```\nhttps://groups.google.com/forum/#!topic/google-gson/d9LTaCH4sNQ\n```\n\nOriginal issue reported on code.google.com by `inder123` on 26 Jun 2011 at 8:16", "```\nIt's the reporter's mistake. He was using an old version of GSON that didn't \nhave JsonReader.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:42\n- Changed state: **Invalid**\n =||= ", 0], ["338", "Exception java.lang.NoClassDefFoundError", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:18 PM", "```\nWhat steps will reproduce the problem?\n1.I write a simple Java package game extension for Smartfox Server 2x using \nGson and get the exception java.lang.NoClassDefFoundError: com/google/Gson. But \nusing unzip sources there's no error found.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nI don't know while ClassLoader can not find class def.\n\nWhat version of the product are you using? On what operating system?\nI use Eclipse Helios\n\nPlease provide any additional information below.\nI think maybe Gson has loaded somewhere and try to follow this article \nhttp://www.gitshah.com/2011/04/fixing-javalangclassnotfoundexception.html but \nnothing changes.\n```\n\nOriginal issue reported on code.google.com by `langxangvn` on 27 Jun 2011 at 3:48", "```\nThis looks like a class path problem. You should make sure that the GSON .jar \nfile is on your application's class path.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 9:52\n- Changed state: **Invalid**\n =||= ```\nI assure the .jar in the application's class path. There're no errors when I \nexport the library as .jar file in Eclipse. I have the  IntelliSense \n(auto-complete) for GSON too. The errors appear at the run-time.\n```\n\nOriginal comment by `langxangvn` on 2 Jul 2011 at 5:19\n =||= ", 0], ["339", "POM schema has wrong scm url", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:19 PM", "```\nThis is a minor issue,\n\nWhat steps will reproduce the problem?\n\nThe pom schema contains\n<scm>\n...\n   <url>http://google-gson.codegoogle.com/svn/trunk/gson</url>\n</scm>\n\nWhat is the expected output? What do you see instead?\n\nshould be\n\n<url>http://google-gson.googlecode.com/svn/trunk/gson</url>\n\n(change of codegoogle to googlecode)\n\nWhat version of the product are you using? On what operating system?\nsource revision r857\n```\n\nOriginal issue reported on code.google.com by `jkirschn...@gmail.com` on 29 Jun 2011 at 3:48", "```\nThis issue was closed by revision r862.\n```\n\nOriginal comment by `inder123` on 1 Jul 2011 at 9:59\n- Changed state: **Fixed**\n =||= ```\nThanks for the bug report.\nFixed in r862 \n```\n\nOriginal comment by `inder123` on 1 Jul 2011 at 10:00\n =||= ", 0], ["340", "Serialization and Deserialization of Type and Class", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:20 PM", "```\nI have a class like \n\nClass Function {\n\npublic int functionId;\npublic Type functionId;\npublic String functionName\n\n}\n\npublic void static main ()\n{\n                Function fc= new Function();        \n        fc.functionId(100);\n        fc.functionName(\"Divide\");\n\n        Type tmp = new Integer(100).getClass();\n        Gson gson = new GsonBuilder.create();\n        System.out.println(gson.togson(fc) );\n}\n\n\nI am getting {} ie null for functionType Filed.\nWhat is the issue here ? am I missing something\n\n```\n\nOriginal issue reported on code.google.com by `DRDO.YOG...@gmail.com` on 1 Jul 2011 at 5:23", "```\nPlease post coding questions like this on our Google Group \n(https://groups.google.com/forum/#!forum/google-gson) instead of creating bug \nreports.\n\nNot sure if your example is correct. Here are a few suggestions:\nnew GsonBuilder().create() is same as new Gson()\n\nYou are not using Type tmp anywhere. \nIn any case, you can get it simply as: Integer.class or int.class\n\ngson.toJson() should print all the fields of Function. Please post complete \nworking code on Google group and someone will be able to help you better.\n```\n\nOriginal comment by `inder123` on 1 Jul 2011 at 9:54\n- Changed state: **Invalid**\n =||= ```\nSerializing types is actually somewhat of a security problem, so we don't want \nto support it by default. A malicious .json file could cause your application \nto load classes that it wouldn't otherwise; depending on your class path \nloading certain classes could DoS your application.\n\nBut it's quite straightforward to write a type adapter to support this in your \nown app.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2011 at 9:56\n =||= ", 0], ["341", "Gson should escape \\u2028", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:21 PM", "```\nWhat steps will reproduce the problem?\n1. Serve a json response containing unicode character \\u2028 \n2. In javascript, eval(\"(\" + jsonResult + \")\")\n\nWhat is the expected output? \njson is correctly parsed\n\nWhat do you see instead?\nSyntaxError -unterminated string literal\n\nWhat version of the product are you using? On what operating system?\nFirefox and chrome\n\nSee also:\nhttp://bulknews.typepad.com/blog/2009/02/json-jquery-and-some-unicode-characters\n-u2028.html\nhttps://issues.apache.org/jira/browse/SOLR-1936\n\n```\n\nOriginal issue reported on code.google.com by `cb...@google.com` on 6 Jul 2011 at 6:45", "```\nThis issue was closed by revision r868.\n```\n\nOriginal comment by `limpbizkit` on 12 Jul 2011 at 4:05\n- Changed state: **Fixed**\n =||= ", 0], ["342", "Cannot Serialize Object[] of String[]'s", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:22 PM", "```\nWhat steps will reproduce the problem?\n1. new Gson().toJson(new Object[]{new String[]{\"test1\", \"test2\"}, new \nString[]{\"test3\", \"test4\"}})\n2. output: [{},{}]\n\nWhat is the expected output? What do you see instead?\nExpected output: [[\"test1\",\"test2\"],[\"test3\",\"test4\"]]\nThe output I'm seeing instead is: [{},{}]\n\nWhat version of the product are you using? On what operating system?\nVersion: 1.7.1\nOS: Windows 7\n\nPlease provide any additional information below.\nA LinkedList<String[]> will be correctly serialized but if you convert it to \n\".toArray()\" which gives you an Object[] that Object[] will give you an \nincorrect output when serialized.\n\n```\n\nOriginal issue reported on code.google.com by `jamespwa...@gmail.com` on 6 Jul 2011 at 10:04", "```\nFixed in GSON 2.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:19\n- Changed state: **Fixed**\n =||= ", 0], ["343", "Create Facebook page, facebook like buttons, Google +1 buttons, and Tweet buttons for Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:22 PM", "```\nSomething similar to what http://code.google.com/p/acra/ has done would be good.\n\nWe should also consider creating a survey like them.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2011 at 7:04", "```\nWe have the +1 button; that's enough for me.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 8:27\n- Changed state: **Done**\n =||= ", 0], ["345", "Use Streams.write() instead of Escaper", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:23 PM", "```\nWe have two different code paths for converting strings to JSON. We should only \nhave one.\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 12 Jul 2011 at 11:35", "```\nThis issue was closed by revision r870.\n```\n\nOriginal comment by `limpbizkit` on 12 Jul 2011 at 11:50\n- Changed state: **Fixed**\n =||= ", 0], ["346", "Double brace initialization not working", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:24 PM", "```\nMap<String, List<String>> jsonData = new HashMap<String, List<String>>();\njsonData.put(\"test\", new ArrayList<String>() {\n    {\n        add(\"1\");\n        add(\"2\");\n        add(\"3\");\n    }\n});\nSystem.out.println(new Gson().toJson(jsonData));\n//OUTPUT = {}\n\n\nMap<String, List<String>> jsonData = new HashMap<String, List<String>>();\nArrayList<String> list = new ArrayList<String>();\nlist.add(\"1\");\nlist.add(\"2\");\nlist.add(\"3\");\njsonData.put(\"test\", list);\nSystem.out.println(new Gson().toJson(jsonData));\n\n//OUTPUT = {\"test\":[\"1\",\"2\",\"3\"]}\n```\n\nOriginal issue reported on code.google.com by `neyas...@gmail.com` on 13 Jul 2011 at 9:39\n- Merged into: #298", "```\nThe fundamental problem is that you aren't supplying GSON with enough type \ninformation and so it has to infer the type from the value. You can work-around \nthis by providing the type in your call to toJson():\n\n  String json = gson.toJson(jsonData, new TypeToken<Map<String, List<String>>>() {}.getType()));\n\nWe still have a problem where GSON never serializes anonymous classes, which is \nan unfortunate policy in this instance.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:40\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= Original comment by `limpbizkit` on 2 Oct 2011 at 3:38\n- Changed state: **Duplicate**\n =||= ```\nIssue 370 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 19 Oct 2011 at 4:30\n =||= ", 0], ["347", "Add support of @SerializedName to enums", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:26 PM", "```\nUsually, by naming conventions, enum members have all letters in uppercase. If \nthe serialized object has the field of the enum type, then it gets serialized \nas an uppercase string. Gson ignores the annotation  @SerializedName on the \nenum.\n\nSee example:\n\n{{{\npublic enum Status {\n  @SerializedName(\"placed\")\n  PLACED,\n\n  @SerializedName(\"settled\")\n  SETTLED,\n\n  @SerializedName(\"disputed\")\n  DISPUTED,\n\n  @SerializedName(\"refunded\")\n  REFUNDED,\n\n  @SerializedName(\"canceled\")\n  CANCELED;\n}\n\n}}}\n```\n\nOriginal issue reported on code.google.com by `illarion.kovalchuk` on 14 Jul 2011 at 11:11", "```\nIssue 363 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:23\n =||= ```\nThis issue was closed by revision r1078.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:32\n- Changed state: **Fixed**\n =||= ```\nFixed. Apologies for the delay!\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:33\n =||= ```\nsads\n```\n\nOriginal comment by `Sezgin8...@gmail.com` on 31 Jan 2014 at 3:07\n =||= ", 0], ["349", "Json attribute tag is not supported", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:31 PM", "```\nWhat steps will reproduce the problem?\n1. create a json object from xml file with json-lib's xmlserializer\n2. for an attribute in xml element, the created json object will have a field \nname as '@xxxx'. \n3. I tried to build a java object from that json (using @SerializedName) but \nwas told the @xxx is an invalidate json name\n\nWhat is the expected output? What do you see instead?\nTreat it as validate name because a lot of json converters create such field \nname. \n\n\nWhat version of the product are you using? On what operating system?\ngson 1.6 on linux\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jdai%rea...@gtempaccount.com` on 26 Jul 2011 at 7:11", "```\nFixed in GSON 2.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:22\n- Changed state: **Fixed**\n =||= ", 0], ["350", "Generiz-ed type are not well serialized", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:31 PM", "```\nWhat steps will reproduce the problem?\n1. Create a generic-ized class containing a generic-ized collection\n2. Try to serialize it via Gson.toJson()\nExample:\n    public class MyObject<T> {\n        public List<T> foo;\n    }\n\nMyObject<String> o = new MyObject<String>();\no.foo = new ArrayList<String>();\no.foo.add(\"bar\"); o.foo.add(\"baz\");\nnew Gson().toJson(o); // returns { \"foo\": [{},{}] } instead of { \"foo\": \n[\"bar\",\"baz\"] }\n\nWhat is the expected output? What do you see instead?\nI would expect that GSon would consider each instances of my collection, or \neventually, an exception saying it is not yet implemented.\nInstead, the serialization seems to be ok, and I have an \"empty object\" for \neach of the collection elements, instead of the plain representation of the \nobject.\n\nWhat version of the product are you using? On what operating system?\nGSon 1.7.1\n\nPlease provide any additional information below.\nUnit test attached reproducing the problem.\n```\n\nOriginal issue reported on code.google.com by `fcamb...@gmail.com` on 28 Jul 2011 at 3:15\n\nAttachments:\n- [JSonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-350/comment-0/JSonTest.java)", "```\nYou need to use the two-arg form of Gson.toJson():\n  new Gson().toJson(o, new TypeToken<<MyObject<String>>() {});\nOtherwise GSON doesn't have the type information that it needs to do a good job.\n```\n\nOriginal comment by `limpbizkit` on 29 Jul 2011 at 4:23\n- Changed state: **Invalid**\n =||= ```\nOk I just learnt I was confused between compile time and runtime valorization \nof parameteried types (if we use List<String> as an attribute in a class it \nwill work well).\n\nHowever, wouldn't be worth to throw an exception instead of  serializing an \nempty object when we are in such a case where no TypeToken is given on a \ngeneric type ?\n```\n\nOriginal comment by `fcamb...@gmail.com` on 29 Jul 2011 at 7:10\n =||= ```\n@fcamblor yeah, I agree that our behavior is confusing. Often the current \nbehavior is useful when you're serializing a giant graph of things and you \ndon't necessarily care about everything.\n```\n\nOriginal comment by `limpbizkit` on 29 Jul 2011 at 1:25\n =||= ```\nIssue 351 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 2 Aug 2011 at 6:22\n =||= ", 0], ["351", "Serialization of generic collections is broken", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:33 PM", "```\nclass Test {\n    static class Dummy1 {\n        List<String> str = Arrays.asList(\"Test\");\n    }\n\n    static class Dummy2 {\n        List str = Arrays.asList(\"Test\");\n    }\n\n    static class Dummy3<T> {\n        List<T> str;\n\n        public Dummy3(List<T> str) {\n            super();\n            this.str = str;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Gson().toJson(new Dummy1()));\n        System.out.println(new Gson().toJson(new Dummy2()));\n        System.out\n                .println(new Gson().toJson(new Dummy3(Arrays.asList(\"Test\"))));\n    }   \n}\n\nExpected output:\n{\"str\":[\"Test\"]}\n{\"str\":[\"Test\"]}\n{\"str\":[\"Test\"]}\n\nGot:\n{\"str\":[\"Test\"]}\n{\"str\":[\"Test\"]}\n{\"str\":[{}]}\n\nI find it really awkward\n\nI figured out the reason is that `CollectionTypeAdapter` resolves \n`childGenericType` to `T`. It would be perfect if it simply serialized \ncollections as if they were not generic at all.\n```\n\nOriginal issue reported on code.google.com by `konrad.g...@gmail.com` on 1 Aug 2011 at 4:05\n- Merged into: #350", "```\nYou need to use the two-arg form of Gson.toJson():\n  new Gson().toJson(o, new TypeToken<<Dummy3<String>>() {});\nOtherwise GSON doesn't have the type information that it needs to do a good job.\n\n```\n\nOriginal comment by `limpbizkit` on 2 Aug 2011 at 6:22\n- Changed state: **Duplicate**\n =||= ", 0], ["352", "Can't register a custom Date serializer", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:33 PM", "```\nWhat steps will reproduce the problem?\n1. Create a DateAdapter\npublic class DateAdapter implements JsonSerializer<Date>, \nJsonDeserializer<Date> {\n\n    @Override\n    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n        if(src == null) {\n            return new JsonNull();\n        }\n        return new JsonPrimitive(src.getTime());\n    }\n\n    @Override\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        if(json.isJsonNull()) {\n            return null;\n        }\n        if(!json.isJsonPrimitive() || !json.getAsJsonPrimitive().isNumber()) {\n            throw new JsonParseException(\"Invalid type for Date, must be a numeric timestamp!\");\n        }\n\n        return new Date(json.getAsLong());\n    }\n\n}\n\n2. Register it using GsonBuilder.registerTypeAdapter\nGson gson = new GsonBuilder()\n        .registerTypeAdapter(Date.class,new DateAdapter())\n                .create();\n\n3. Execute test cases\n\n    public void testDateDeserialization() throws Exception {\n        assertEquals(null, gson.fromJson(\"null\", Date.class));\n        assertEquals(new Date(10), gson.fromJson(\"10\", Date.class));\n    }\n\n    public void testDateSerialization() throws Exception {\n        assertEquals(null, gson.toJson(null, Date.class));\n        assertEquals(\"10\", gson.toJson(new Date(10), Date.class));\n    }\n\n\nWhat is the expected output? What do you see instead?\n These test cases were passing when using gson-1.4, upgraded to gson-1.7.1 and they started failing.\n\nWhat version of the product are you using? On what operating system?\n  Upgrading from gson-1.4 to gson-1.7.1 introduced the issue.\n\nPlease provide any additional information below.\n  Since Date does not contain a timezone, I find transmitting it as a long (milliseconds since epoch UTC) much less error prone, if I could enable this behavior again I would really appreciate that. Thanks.\n```\n\nOriginal issue reported on code.google.com by `tedj...@gmail.com` on 3 Aug 2011 at 9:17", "```\nSorry, seems to be an issue with my build process, that test started passing \nagain. Failed on both my machine and the build server, but it was spurious, \nsorry for the noise.\n```\n\nOriginal comment by `tedj...@gmail.com` on 3 Aug 2011 at 9:23\n =||= ```\nI pulled it together in one test case, it's registerTypeHierarchyAdapter which \ncan't be used for Date. I'ld unpost the bug if I could, but I can't, so here is \na test case that exercises it.\n```\n\nOriginal comment by `tedj...@gmail.com` on 3 Aug 2011 at 9:36\n\nAttachments:\n- [TestDateAdapter.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-352/comment-2/TestDateAdapter.java)\n =||= ```\nSo registerTypeHierarchyAdapter isn't working on Date.class? Sounds like it \ncould be a real problem.\n```\n\nOriginal comment by `limpbizkit` on 4 Aug 2011 at 6:43\n =||= ```\nNo, you can't registerTypeHiearchyAdapter on Date.class. Try the test case. I'm \nnot sure what intended behavior would be, but  because there is an implicit \nadapter added specifically for Date.class in the GsonBuilder regardless of \nwhether or not you call .setDateFormat, you can't register a hiearchy adapter. \nThis may be an issue if you use javax.sql.Date.\n```\n\nOriginal comment by `tedj...@gmail.com` on 5 Aug 2011 at 3:09\n =||= ```\nit's a problem. you can just not serialize date to a long value\n```\n\nOriginal comment by `chenzhikong@gmail.com` on 5 Sep 2011 at 3:43\n =||= ```\n[deleted comment]\n```\n =||= ```\nThis issue was closed by revision r1097.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:27\n- Changed state: **Fixed**\n =||= ```\nFixed in Gson 2.1.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 7:27\n =||= ```\nStill seeing this in Gson 2.2.4.\n```\n\nOriginal comment by `Guy.Padd...@gmail.com` on 28 Sep 2013 at 8:55\n =||= ```\n[deleted comment]\n```\n =||= ```\nI'm still observing that in Gson 2.3.\n```\n\nOriginal comment by `tobo...@gmail.com` on 17 Dec 2014 at 12:49\n =||= ", 0], ["353", "JsonArray has no remove/set", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:37 PM", "```\nIt would be nice if, like JsonObject, we could set and remove elements within a \nJsonArray.  \n\ni.e.,\n\n  public JsonElement remove(int index) {\n    if(index < 0 || index >= elements.length)\n         return new IndexOutOfBoundsException();\n    return elements.remove(index);\n  }\n\n  public JsonElement set(int index,JsonElement je) {\n    if(index < 0 || index >= elements.length)\n         return new IndexOutOfBoundsException();\n    return elements.set(je);\n  }\n```\n\nOriginal issue reported on code.google.com by `dave.f.b...@gmail.com` on 3 Aug 2011 at 10:37", "```\nJoel, you've been thinking of doing builders for these?\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:11\n =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:34\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nI am also looking for ways to remove an element from JsonArray.\n```\n\nOriginal comment by `zacha...@gmail.com` on 9 Jul 2012 at 5:01\n =||= ```\nI am also looking for it. Please add it soon.\n```\n\nOriginal comment by `nani4...@gmail.com` on 12 Sep 2012 at 7:37\n =||= ```\nI too am looking for it.\n```\n\nOriginal comment by `lahiri.r...@gmail.com` on 4 Oct 2012 at 12:49\n =||= ```\nI think this is something that really should be in the next release. It seems \nweird that you can only add elements and not remove them.\n```\n\nOriginal comment by `Lucas.Li...@gmail.com` on 26 Mar 2014 at 1:56\n =||= ```\nI think we should fix this by adding remove methods.\n```\n\nOriginal comment by `inder123` on 2 Jul 2014 at 5:59\n- Changed state: **Accepted**\n =||= ```\nAdded remove and contains in \nhttp://code.google.com/p/google-gson/source/detail?r=1281\n```\n\nOriginal comment by `inder123` on 2 Jul 2014 at 6:22\n =||= ```\nAdded set method in http://code.google.com/p/google-gson/source/detail?r=1282\n```\n\nOriginal comment by `inder123` on 2 Jul 2014 at 6:30\n- Changed state: **Fixed**\n =||= ```\nThe set method returns void but the documentation says:\n@return the element previously at the specified position\n```\n\nOriginal comment by `buchholz...@googlemail.com` on 4 Jul 2014 at 4:13\n =||= ```\nGood catch Buchholz. Fixed in r1285\n```\n\nOriginal comment by `inder123` on 4 Jul 2014 at 5:32\n =||= Can you please  add a clear() method that removes all the elements from the JSONArray.\n =||= send a pull request. Thanks =||= ", 0], ["354", "Threading issue in FieldAttributes?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:40 PM", "```\nWe're using gson on a high-load system, and when we recently bumped version to \n1.7.1 we're starting having sporadic exceptions as shown in the following \nstacktrace:\n\njava.lang.NullPointerException\n        at com.google.gson.FieldAttributes.getAnnotationFromArray(FieldAttributes.java:231)\n        at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:150)\n        at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:45)\n        at com.google.gson.JsonSerializationVisitor.addChildAsElement(JsonSerializationVisitor.java:132)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:206)\n        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n        at com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializationVisitor.java:147)\n        at com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVisitor.java:127)\n        at com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisitor.java:114)\n        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)\n        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)\n        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)\n        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        at com.google.gson.BaseMapTypeAdapter.serialize(BaseMapTypeAdapter.java:34)\n        at com.google.gson.MapTypeAdapter.serialize(MapTypeAdapter.java:53)\n        at com.google.gson.MapTypeAdapter.serialize(MapTypeAdapter.java:33)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)\n        at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:160)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)\n        at com.google.gson.Gson.toJsonTree(Gson.java:220)\n        at com.google.gson.Gson.toJson(Gson.java:260)\n...\n\nThis doesn't happen all the time, even with the same data. The exception always \nappears on portions of code that are ran in a thread pool, and each worker \nshares the same GsonBuilder.\n```\n\nOriginal issue reported on code.google.com by `aba...@gmail.com` on 4 Aug 2011 at 3:19", "```\nThis is fixed in source. It'll be available in the next GSON release.\n```\n\nOriginal comment by `limpbizkit` on 5 Aug 2011 at 10:45\n- Changed state: **Started**\n =||= ```\nWhen is planned to put Gson 1.7.2 at the market?\nThe Roadmap states that it was intended to July 2011.\n```\n\nOriginal comment by `Ricardo....@gmail.com` on 24 Aug 2011 at 7:32\n =||= ```\n[deleted comment]\n```\n =||= ```\nI've been getting exactly the same exception, again since upgrading to 1.7.1.\n\nI'm glad that it is fixed in the next release. Any idea of when that might be?\n\nIf this isn't due soon, any chance you could point me at the svn revision where \nthe fix was made, so that I can do a custom patch whilst I'm waiting.\n```\n\nOriginal comment by `t.denley` on 29 Aug 2011 at 9:21\n =||= ```\nSince I couldn't wait for a new version of Gson and using an svn snapshot is \nout of the question, I switched to Jackson. Its interface it's pretty similar \nto that of Gson.\n```\n\nOriginal comment by `aba...@gmail.com` on 29 Aug 2011 at 11:50\n =||= ```\nYou can grab GSON 1.7.2 source here:\nhttp://code.google.com/p/google-gson/source/browse/tags/gson-1.7.2/\n\nI'll talk to our Maven guy to upload a Maven-built binary.\n```\n\nOriginal comment by `limpbizkit` on 29 Aug 2011 at 9:51\n =||= ```\nThanks limpbiz, a 1.7.2 release binary would be fantastic.\n```\n\nOriginal comment by `t.denley` on 30 Aug 2011 at 10:21\n =||= ```\nany news on that binary?\n```\n\nOriginal comment by `t.denley` on 5 Sep 2011 at 10:07\n =||= ```\nAny news?\n```\n\nOriginal comment by `Ricardo....@gmail.com` on 17 Sep 2011 at 1:44\n =||= ```\nAny updates?\n```\n\nOriginal comment by `matt.hug...@gmail.com` on 17 Sep 2011 at 6:37\n =||= ```\nI am our Maven guy but I dont quite know how to do a release from a subversion \ntagged version. As you probably know, the main Gson tree has digressed \nsubstantially. If someone can help me figure out how to do 1.7.2, I am happy to \ndo so.\n\nOtherwise, we will have to wait for the next release, Gson 2.0. However, that \nis probably a few weeks away.\n```\n\nOriginal comment by `inder123` on 17 Sep 2011 at 9:14\n =||= ```\nYou can try\n\nmvn release:perform \n-DconnectionUrl=scm:svn:https://google-gson.googlecode.com/svn/tags/gson-1.7.2\n\n\n```\n\nOriginal comment by `car...@carlossanchez.eu` on 30 Sep 2011 at 4:27\n =||= ```\nbtw for more info \nhttp://maven.apache.org/plugins/maven-release-plugin/examples/perform-release.ht\nml\n\n```\n\nOriginal comment by `car...@carlossanchez.eu` on 30 Sep 2011 at 4:29\n =||= ```\nThanks for the instructions on releasing a specific version of Gson!\nI have now completed the promotion of Gson 1.7.2 to Maven Central. Should sync \nin about an hour. \n```\n\nOriginal comment by `inder123` on 30 Sep 2011 at 7:07\n- Changed state: **Fixed**\n =||= ```\nFantastic. thanks.\n```\n\nOriginal comment by `t.denley` on 30 Sep 2011 at 7:18\n =||= ", 0], ["355", "Deserialization of a specified Json into an object of type Map<String, Set<Long>>", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:43 PM", "```\nWhat steps will reproduce the problem?\n1. Create a Json Object with data of type Map<String, Set<Long>>\n2. Deserialize above created Json object back to Map<String, Set<Long>> type\n3.\n\nWhat is the expected output? What do you see instead?\nExpected:\nSame Map has to be reproduced.\n\nActual:\nException in thread \"main\" com.google.gson.JsonParseException: The \nJsonDeserializer \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter@1eec612 failed to \ndeserialize json object \"[1313490105362, 1313490105363]\" given the type \njava.util.TreeSet<java.lang.Long>\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:64)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)\n    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:80)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonPrimitive(JsonDeserializationContextDefault.java:85)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:56)\n    at com.google.gson.MapTypeAdapter.deserialize(MapTypeAdapter.java:68)\n    at com.google.gson.MapTypeAdapter.deserialize(MapTypeAdapter.java:33)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)\n    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:80)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)\n    at com.google.gson.Gson.fromJson(Gson.java:551)\n    at com.google.gson.Gson.fromJson(Gson.java:498)\n    at com.google.gson.Gson.fromJson(Gson.java:467)\n    at com.google.gson.Gson.fromJson(Gson.java:417)\n    at TestClass.main(TestClass.java:50)\nCaused by: java.lang.IllegalStateException: This is not a JSON Array.\n    at com.google.gson.JsonElement.getAsJsonArray(JsonElement.java:99)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:659)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)\n    ... 18 more\n\nWhat version of the product are you using? On what operating system?\ngson-1.7.1\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `vinayasi...@gmail.com` on 16 Aug 2011 at 10:18", "```\nI couldn't reproduce this.\n\n\n    Map<String, Set<Long>> m = new HashMap<String, Set<Long>>();\n    m.put(\"a\", new TreeSet<Long>(Arrays.asList(1L, 2L, 3L)));\n    m.put(\"b\", new TreeSet<Long>(Arrays.asList(4L, 5L, 6L)));\n\n    String s = new Gson().toJson(m);\n    System.out.println(s);\n\n    Object value = new Gson().fromJson(s, new TypeToken<Map<String, Set<Long>>>() {}.getType());\n    System.out.println(value);\n\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 5:10\n- Changed state: **WontFix**\n =||= ```\nIssue is string representation of \"JSONObject.toString()\" is different from the \n\"Gson().toString()\". For example\n\nGson().toString() gives below output:\n\n{\"b\":[4,5,6],\"a\":[1,2,3]}\n\nJSONObject.toString() gives below output:\n\n{\"b\":\"[4, 5, 6]\",\"a\":\"[1, 2, 3]\"}\n\nCode for reproducing the issue: \n\n    Map<String, Set<Long>> m = new HashMap<String, Set<Long>>();\n    m.put(\"a\", new TreeSet<Long>(Arrays.asList(1L, 2L, 3L)));\n    m.put(\"b\", new TreeSet<Long>(Arrays.asList(4L, 5L, 6L)));\n\n    JSONObject json = new JSONObject(m);\n    String s = json.toString();\n    System.out.println(s);\n\n    Object value = new Gson().fromJson(s, new TypeToken<Map<String, Set<Long>>>() {}.getType());\n    System.out.println(value);\n```\n\nOriginal comment by `vinayasi...@gmail.com` on 2 Oct 2011 at 11:54\n =||= ", 0], ["357", "links in user guide broken", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:45 PM", "```\nWhat steps will reproduce the problem?\n1. go to https://sites.google.com/site/gson/gson-user-guide#TOC-Using-Gson\n2. try the links to GsonBuilder, etc. -- all broken\n```\n\nOriginal issue reported on code.google.com by `er...@mediamods.com` on 23 Aug 2011 at 2:47", "Original comment by `limpbizkit` on 23 Aug 2011 at 7:23\n- Changed state: **Fixed**\n =||= ", 0], ["358", "Patch for /trunk/examples/android-proguard-example/proguard.cfg", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:46 PM", "```\n-keepattributes *Annotation*\nIn case of using GSON @Expose annotation\n```\n\nOriginal issue reported on code.google.com by `synte...@syntezzz.ru` on 23 Aug 2011 at 3:21\n\nAttachments:\n- [proguard.cfg.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-358/comment-0/proguard.cfg.patch)", "```\nThis issue was closed by revision r1077.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:18\n- Changed state: **Fixed**\n =||= ```\nThanks!\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:18\n =||= ", 0], ["359", "JsonObject#getAsString() throws UnsupportedOperationException", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:47 PM", "```\nGson version 1.7.1\n\n```\n\nOriginal issue reported on code.google.com by `ahmed.ye...@gmail.com` on 27 Aug 2011 at 3:33", "```\nAs designed.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:18\n- Changed state: **WontFix**\n =||= ```\nWhy is it as designed?\n\n```\n\nOriginal comment by `orbf...@gmail.com` on 28 Jan 2015 at 11:00\n =||= ", 0], ["360", "Error in JsonSerializer and JsonDeserializer documentation.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:47 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:03", "```\nSorry, I hit the return key while entering the title, and it submitted my bug \nreport.  (I'm not sure that's the best interface, but oh well.)\n\nIn any case, here's the problem.  The documentation for the JsonSerializer \ninterface shows this example:\n\nclass IdSerializer implements JsonSerializer<Id>() {\n  public JsonElement toJson(Id id, Type typeOfId, JsonSerializationContext context) {\n    return new JsonPrimitive(id.getValue());\n  }\n}\n\nThe method should be named \"serialize\" and not \"toJson\".  A similar mistake \nappears in the JsonDeserializer documentation.\n```\n\nOriginal comment by `von...@gmail.com` on 31 Aug 2011 at 5:04\n =||= ```\nThis issue was closed by revision r989.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 4:09\n- Changed state: **Fixed**\n =||= ", 0], ["361", "Strange example in the user guide", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:48 PM", "```\nThe user guide shows this example:\n\nList<String> myStrings = new List<String>();\ngson.toJson(myStrings); // Will cause a runtime exception\n\ngson.fromJson(json, myStrings.getClass());\n\n\nThis example has a few issues.\n1.) List is an interface and does not have a constructor.  (Not a big deal, but \nI figured I should mention it.)\n2.) The `json` and the `gson` variables are undefined.  (I assume the second \nline is supposed to define and initialize the value of `json`.)\n3.) Even if you correct these mistakes, this code does not throw a runtime \nexception. (But the comment in the exmaple insists that it will.)  For example:\n\nimport java.util.*;\nimport com.google.gson.*;\n\npublic class Test\n{\n    public static void\n    main(String[] args)\n    {        \n        Gson gson = new Gson();\n        List<String> myStrings = new ArrayList<String>();\n        String json = gson.toJson(myStrings); // Will cause a runtime exception\n        Object ans = gson.fromJson(json, myStrings.getClass());\n\n        System.out.println(ans);\n        /*\n            expected output:\n                runtime exception (according to the user guide)\n\n            actual output:\n                []\n        */\n    }\n}\n\n```\n\nOriginal issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:08", "```\nThanks for reporting the mistakes. I have corrected them. \nA very early version of Gson (1.x) was unable to handle any type of list \nwithout type parameter for toJson(). The newer versions of Gson would actually \nbe able to handle a list of primitives just fine.\n```\n\nOriginal comment by `inder123` on 16 Dec 2011 at 6:20\n- Changed state: **Fixed**\n =||= ", 0], ["362", "Gson.toJson(Object) emits surprising results for JsonElement values", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:49 PM", "```\nThis may not be a bug, but the behavior surprised me (so I figured I should \nmention it).\n\nThe Gson.toJson(Object) method handles JsonElement values differently than the \nGson.toJson(JsonElement) method.  This can come up when you have heterogeneous \ncollections, for example, where only some (but not all) of the elements are \nJsonElement values.\n\nHere's a sample program.\n\nimport com.google.gson.*;\n\npublic class Test\n{\n    public static void\n    main(String[] args)\n    {\n        String input = \"{\\\"name\\\": \\\"lars\\\", \\\"age\\\": 12}\";\n        Object obj = new JsonParser().parse(input).getAsJsonObject();       \n        String output = new Gson().toJson(obj);\n\n        System.out.println(output);\n        /*\n            expected output:\n                either `{\"name\":\"lars\",\"age\":12}`\n                or `{\"age\":12,\"name\":\"lars\"}`\n\n            actual output:\n                `{\"members\":{\"name\":{\"value\":\"lars\"},\"age\":{\"value\":12}}}`\n        */\n}\n\n(In case it's not clear, I was surprised to see the `members` and the `value` \nfields in the output.)\n```\n\nOriginal issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:14", "```\nThis issue was closed by revision r991.\n```\n\nOriginal comment by `limpbizkit` on 2 Oct 2011 at 5:00\n- Changed state: **Fixed**\n =||= ", 0], ["363", "Cannot map a field value to an enum value if value is a keyword", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:49 PM", "```\nWhat steps will reproduce the problem?\n1. For a json object { visibility : \"public\" }\n2. Create an enum with a value of public.\neg: enum Visibility { PUBLIC, PRIVATE }\n3. Create a member variable private Visibility visibility;\n4. Run your fromJson(...)\n\nOther parsers allow you to use the toString or name methods of an enum to \ndetermine value instead of calling valueOf(String) as a builder config.  This \nwould be great.\n\nWhat is the expected output? What do you see instead?\nParse exception.\ncom.google.gson.JsonParseException: The JsonDeserializer EnumTypeAdapter failed \nto deserialize json object \"public\" given the type class \ncom.williamvanderhoef.foursquare.types.Photo$Visibility\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:64)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)\n    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:663)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:663)\n    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)\n    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)\n    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)\n    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)\n    at com.google.gson.Gson.fromJson(Gson.java:551)\n    at com.google.gson.Gson.fromJson(Gson.java:498)\n    at com.google.gson.Gson.fromJson(Gson.java:467)\n    at com.google.gson.Gson.fromJson(Gson.java:417)\n    at com.williamvanderhoef.foursquare.GsonResultsLoader.parse(GsonResultsLoader.java:35)\n    at com.williamvanderhoef.foursquare.test.ListsTest.setUp(ListsTest.java:76)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)\n    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.junit.runners.Suite.runChild(Suite.java:128)\n    at org.junit.runners.Suite.runChild(Suite.java:24)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.IllegalArgumentException: No enum const class \ncom.williamvanderhoef.foursquare.types.Photo$Visibility.public\n    at java.lang.Enum.valueOf(Unknown Source)\n    at com.google.gson.DefaultTypeAdapters$EnumTypeAdapter.deserialize(DefaultTypeAdapters.java:524)\n    at com.google.gson.DefaultTypeAdapters$EnumTypeAdapter.deserialize(DefaultTypeAdapters.java:514)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)\n    ... 76 more\n\n\n\nWhat version of the product are you using? On what operating system?\n1.6 on Windows xp\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `william....@gmail.com` on 1 Sep 2011 at 5:44\n- Merged into: #347", "```\nThis also fails on 1.7.1\n```\n\nOriginal comment by `william....@gmail.com` on 1 Sep 2011 at 5:44\n =||= Original comment by `limpbizkit` on 16 Dec 2011 at 5:23\n- Changed state: **Duplicate**\n =||= ```\nFixed!\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:33\n =||= ", 0], ["364", "final transient list initializers aren't executed", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:51 PM", "```\nWhat steps will reproduce the problem?\n1.Create a class without a no-arg constructor\n2.Give the class a final transient List<String> initialized at declaration\n3.Convert to json, and back.\n\nWhat is the expected output? What do you see instead?\nThe transient list should have an empty length array.\n\nWhat version of the product are you using? On what operating system?\nGSON 1.7.1, Windows XP, Java 1.7.\n\nPlease provide any additional information below.\nIf there's a no-arg constructor, it's fine. But without one, the transient \nfield isn't initialized. Here's an example that shows the problem:\n\npublic class NullTransient\n{\n    public static final Gson GSON;\n    static {\n        GsonBuilder builder = new GsonBuilder();\n        builder.setPrettyPrinting();\n        GSON = builder.create();\n    }\n\n    final int x;\n    final transient List<String> aList = new ArrayList<>();\n    NullTransient( int y )\n    {\n        x = y;\n    }\n\n    public static void main( String[] args )\n    {\n        NullTransient b = new NullTransient( 1 );\n        String asJson = GSON.toJson( b );\n        NullTransient c = GSON.fromJson( asJson, NullTransient.class );\n        System.out.println( b.aList );\n        System.out.println( c.aList );\n    }\n}\n\nOutput:\n[]\nnull  <-- this is wrong, it should be an empty list.\n\nYou end up in an odd spot where you have a final field that wasn't initialized \nand you can't initialize it later because it's final.\n```\n\nOriginal issue reported on code.google.com by `crkes...@gmail.com` on 6 Sep 2011 at 3:08", "```\nI faced the same problem, issue #366\n```\n\nOriginal comment by `hussain.mutawa` on 24 Sep 2011 at 3:59\n =||= ```\nThe core problem is that GSON is constructing your object without executing any \ncode, so everything defaults to null. To work around you'll need to add a \nno-args constructor.\n```\n\nOriginal comment by `limpbizkit` on 1 Oct 2011 at 5:12\n- Changed state: **WontFix**\n =||= @googlecodeexporter You mention that adding a no-args constructor is a workaround. Would a patch be accepted that actually fixed this functionality for objects that don't have a no-args constructor (I'm thinking specifically in this case objects with no constructor specified), or do you think this is a problem that can't be fixed for some other reason?\n\nIt just seems more intuitive to me to have a class with no constructor defined, but with transient members should function in a similar way to the same class with a no-args constructor defined.\n =||= ", 0], ["365", "Maven artifacts for release 1.7.1", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:52 PM", "```\nWhat steps will reproduce the problem?\n1. Unable to find maven artifacts for release 1.7.1, can you upload them.\n\nhttp://code.google.com/p/google-gson/source/browse/#svn%2Fmavenrepo%2Fcom%2Fgoog\nle%2Fcode%2Fgson%2Fgson\n\n```\n\nOriginal issue reported on code.google.com by `rajesh.k...@gmail.com` on 12 Sep 2011 at 4:29", "```\nWe'll make sure to provide Maven artifacts for future releases. Inder loves \nMaven.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:03\n- Changed state: **WontFix**\n =||= ", 0], ["366", "transient access modifier is hidden to Gson object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:53 PM", "```\nWhat steps will reproduce the problem?\n1. when an object is declared as transient, Gson can not observe it.\n2. an object that has transient variables, even PUBLIC are hidden\n3. converting from json to object with transient variables will give a none \ninitialized object\n\nWhat is the expected output? What do you see instead?\ntransient variables if declared public should be treated the same as default \nmodifier\n\nWhat version of the product are you using? On what operating system?\njava 1.6 / tomcat 7\n\nPlease provide any additional information below.\nplease email me if you need extra information. I had to remove the transient \nmodifier to get the library working. which solved the problem. My knowledge of \ntransient is that a modifier that informs JVM not to invoke the variable if it \nis in the cache memory which improves the response time as compared with \nvolatile which forces the JVM to invoke the variable from the main memory \nregardless of being updated by another thread or not. Please correct me if I am \nwrong\n```\n\nOriginal issue reported on code.google.com by `hussain.mutawa` on 24 Sep 2011 at 12:42", "```\nby the way, it took me two hours searching for a cause why the result is not \nshown until I found that the reason was the transient modifier. So,is it a Java \nproblem or a bug in Gson?\n```\n\nOriginal comment by `hussain.mutawa` on 24 Sep 2011 at 3:57\n =||= ```\nTransient has nothing to do with memory caching and everything to do with \nserialization and binding.\n\nYou want 'volatile'.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:03\n- Changed state: **Invalid**\n =||= ", 0], ["367", "Fix @Since and @Until in GSON 2.0", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:54 PM", "```\nWe're currently broken because we're handling inherited annotations \ndifferently. \n\nThe attached patch moves versions to fields only; annotations on types simply \nget inherited by their unannotated fields.\n```\n\nOriginal issue reported on code.google.com by `jessewil...@google.com` on 28 Sep 2011 at 5:36\n\nAttachments:\n- [change_the_way_versions_work.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-367/comment-0/change_the_way_versions_work.patch)", "Original comment by `limpbizkit` on 1 Oct 2011 at 4:06\n- Changed state: **Fixed**\n =||= ", 0], ["368", "the XMLGregorianCalendar datatype is not supported by gson API", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:54 PM", "```\nWhat steps will reproduce the problem?\n1. If a POJO has a variable of the XMLGregorianCalendar datatype, the result is \nnull.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nIt should be Date.\n\nWhat version of the product are you using? On what operating system?\ngSon 1.2.3 and Windows 7\n\nPlease provide any additional information below.\n\n\nI have application from which XML can be converted to json and vice versa. The \nfollowing variable in my POJO with the datatype of XMLGregorianCalendar for \ndate is null in my output.\n\nprotected XMLGregorianCalendar doj;\n\nPlease help me ASAP.\n\nRegards,\nHarish\n```\n\nOriginal issue reported on code.google.com by `swarab...@gmail.com` on 10 Oct 2011 at 8:01", "```\nInstall your own type adapter! And you should avoid reporting bugs against \nancient versions of GSON.\n```\n\nOriginal comment by `limpbizkit` on 10 Oct 2011 at 2:07\n- Changed state: **WontFix**\n =||= ```\nnevertheless this feature is often needed. I found the following code for a \ntype adapter wheen googling\npublic class XMLGregorianCalendarConverter {\n    public static class Serializer implements JsonSerializer {\n        public Serializer() {\n            super();\n        }\n        public JsonElement serialize(Object t, Type type,\n                JsonSerializationContext jsonSerializationContext) {\n            XMLGregorianCalendar xgcal = (XMLGregorianCalendar) t;\n            return new JsonPrimitive(xgcal.toXMLFormat());\n        }\n    }\n    public static class Deserializer implements JsonDeserializer {\n        public Object deserialize(JsonElement jsonElement, Type type,\n                JsonDeserializationContext jsonDeserializationContext) {\n            try {\n                return DatatypeFactory.newInstance().newXMLGregorianCalendar(\n                        jsonElement.getAsString());\n            } catch (Exception e) {\n                return null;\n            }\n        }\n    }\n}\nregister this with\n            GsonBuilder gson_builder = new GsonBuilder();\n            gson_builder.registerTypeAdapter(XMLGregorianCalendar.class,\n                    new XMLGregorianCalendarConverter.Serializer());\n            gson_builder.registerTypeAdapter(XMLGregorianCalendar.class,\n                    new XMLGregorianCalendarConverter.Deserializer());\n            gson = gson_builder.create();\n\n\n```\n\nOriginal comment by `mbreuer....@googlemail.com` on 22 Mar 2013 at 4:15\n =||= ```\n[deleted comment]\n```\n =||= ```\nI had an issue with the above example. The \"jsonElement.getAsString()\" method \nwould throw an UnSupportedOperation exception and the adapter would always \nreturned null. I made a slight modification that worked for me. Here is what I \nused to be able to DeSerialize the XMLGregorianCalendar class to json:\n\npublic class XMLGregorianCalendarConverter {\n    public static class Serializer implements JsonSerializer {\n\n        public Serializer() {\n            super();\n        }\n        @Override\n        public JsonElement serialize(Object t, Type type,\n                JsonSerializationContext jsonSerializationContext) {\n            XMLGregorianCalendar xgcal = (XMLGregorianCalendar) t;\n            return new JsonPrimitive(xgcal.toXMLFormat());\n        }\n\n    }\n    public static class Deserializer implements JsonDeserializer {\n\n        @Override\n        public Object deserialize(JsonElement jsonElement, Type type,\n                JsonDeserializationContext jsonDeserializationContext) {\n            try {\n                JsonObject obj  = jsonElement.getAsJsonObject();\n                XMLGregorianCalendar xmlGregCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(obj.get(\"year\").getAsInt(), \n                                                                     obj.get(\"month\").getAsInt(), \n                                                                     obj.get(\"day\").getAsInt(), \n                                                                     obj.get(\"hour\").getAsInt(), \n                                                                     obj.get(\"minute\").getAsInt(),obj.get(\"second\").getAsInt(),\n                                                                     0, obj.get(\"timezone\").getAsInt());\n                return xmlGregCalendar;\n            } catch (Exception e) {\n                return null;\n            }\n        }\n\n    }\n}\n```\n\nOriginal comment by `eric.b.f...@gmail.com` on 18 Oct 2013 at 2:59\n =||= With gson v2.5 and java 8\n\n```\npublic class XMLGregorianCalendarConverter {\n    public static class Serializer implements JsonSerializer<XMLGregorianCalendar> {\n        @Override\n        public JsonElement serialize(XMLGregorianCalendar xmlGregorianCalendar, Type type, JsonSerializationContext jsonSerializationContext) {\n            return new JsonPrimitive(xmlGregorianCalendar.toXMLFormat());\n        }\n    }\n\n    public static class Deserializer implements JsonDeserializer<XMLGregorianCalendar> {\n        @Override\n        public XMLGregorianCalendar deserialize(JsonElement jsonElement, Type type,\n                JsonDeserializationContext jsonDeserializationContext) {\n            try {\n                return DatatypeFactory.newInstance().newXMLGregorianCalendar(jsonElement.getAsString());\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }\n    }\n}\n```\n\nand the registration \n\n```\n    private static final Gson gson = new GsonBuilder()\n            .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Deserializer())\n            .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Serializer())\n            .create();\n```\n =||= Thank you. So helpful. =||= ", 0], ["369", "NPE calling toJson() with a null UUID field", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:55 PM", "```\nWhat steps will reproduce the problem?\npublic class TestToJsonObject\n{\n  private UUID u1 = null;\n\n  public TestToJsonObject() {}\n}\n\nGson gson = new GsonBuilder().create();\nTestToJsonObject o = new TestToJsonObject();\nSystem.out.println(gson.toJson(o));\n\nWhat is the expected output? What do you see instead?\nI would expect to see no output. Instead I get the following NPE:\njava.lang.NullPointerException\n    at com.google.gson.internal.bind.TypeAdapters$17.write(TypeAdapters.java:411)\n    at com.google.gson.internal.bind.TypeAdapters$17.write(TypeAdapters.java:400)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:66)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:82)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:194)\n    at com.google.gson.Gson.toJson(Gson.java:510)\n    at com.google.gson.Gson.toJson(Gson.java:489)\n    at com.google.gson.Gson.toJson(Gson.java:444)\n    at com.google.gson.Gson.toJson(Gson.java:424)\n\n\nWhat version of the product are you using? On what operating system?\nr992\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `chris.p....@gmail.com` on 13 Oct 2011 at 5:59", "```\nThis issue was closed by revision r993.\n```\n\nOriginal comment by `limpbizkit` on 14 Oct 2011 at 3:17\n- Changed state: **Fixed**\n =||= ```\nThanks for the perfect bug report. Fixed!\n```\n\nOriginal comment by `limpbizkit` on 14 Oct 2011 at 3:17\n =||= ", 0], ["370", "Double braces initialization seems to break toJson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:56 PM", "```\nLet's say I have this class:\npublic class Command {\n  Map<String, String> parameters;\n  String name;\n\n  Command(String name) {\n    this.name = name;\n  }\n\n  public void addParameter(String name, String value) {\n    parameters.put(name, value);\n  }\n\n  public String getParameter(String name) {\n    return parameters.get(name);\n  }\n}\n\nIf I use double braces initialization and try to dump it I get an empty output:\n  Command cmd = new Command(\"run\") {{ \n    addParameter(\"distance\", \"100\");\n  }}\n  Gson gson = new Gson();\n  System.out.println(gson.toJson(cmd)); // <-- Empty line is printed\n\nIf I do initialization in the usual way I get correct output:\n  Command cmd = new Command(\"run\");\n  cmd.addParameter(\"distance\", \"100\");\n  Gson gson = new Gson();\n  System.out.println(gson.toJson(cmd)); // <-- Evertyhing is ok\n\nI use Oralce JDK 1.7.0 on Kubuntu Linux\n```\n\nOriginal issue reported on code.google.com by `iu.biryu...@gmail.com` on 18 Oct 2011 at 6:42\n- Merged into: #346", "```\nForgot to mention I use version 1.7.2 of gson.\n```\n\nOriginal comment by `iu.biryu...@gmail.com` on 18 Oct 2011 at 6:44\n =||= ```\nWe'll fix this. Regardless, you shouldn't use double brace initialization. It's \ninefficient and ugly.\n```\n\nOriginal comment by `limpbizkit` on 19 Oct 2011 at 4:30\n- Changed state: **Duplicate**\n =||= ", 0], ["371", "The javadoc for JsonDeserializer is out of date or incorrect (I'm pretty sure)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:30:57 PM", "```\nThe section at \nhttp://google-gson.googlecode.com/svn-history/r88/trunk/docs/javadocs/com/google\n/gson/JsonDeserializer.html is currently:\n\n\"\"\"\nclass IdDeserializer implements JsonDeserializer<Id>() {\n  public Id fromJson(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return (Id) new Id((Class)typeOfT, id.getValue());\n}\n\nYou will also need to register IdDeserializer with Gson as follows:\nGson gson = new GsonBuilder().registerTypeAdapter(new \nIdDeserializer()).create();\n\"\"\"\n\nand should be, with the following corrections:\n  remove \"()\"  \n  \"fromJson\" -> \"deserialize\"\n  remove \"(Id)\" since it seems to be unnecessary (I didn't check)\n  \"id.getValue()\" should be \"json.getAsString()\"?\n  add \"Id.class\" argument to \"registerTypeAdapter\"\n\n\"\"\"\nclass IdDeserializer implements JsonDeserializer<Id> {\n  public Id deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return new Id((Class) typeOfT, json.getAsString());\n}\n\nYou will also need to register IdDeserializer with Gson as follows:\nGson gson = new GsonBuilder().registerTypeAdapter(Id.class, new \nIdDeserializer()).create();\n\"\"\"\n\nCheers,\n-Greg-\n```\n\nOriginal issue reported on code.google.com by `borisb0...@gmail.com` on 24 Oct 2011 at 2:35", "```\nOops, realized I was using a google-found link that might be for an older \nrevision, but the docs at \nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html look \nthe same.\n```\n\nOriginal comment by `borisb0...@gmail.com` on 24 Oct 2011 at 2:39\n =||= ```\nAlready fixed in source control.\n```\n\nOriginal comment by `limpbizkit` on 24 Oct 2011 at 3:41\n- Changed state: **Fixed**\n =||= ```\nThanks for pointing me to that, I'll check what's checked in next time.\n\nIt appears as though the extra () and possibly unnecessary cast are still there \n(where there == \nhttp://www.google.com/codesearch#1W0hTXRl0vg/trunk/gson/src/main/java/com/google\n/gson/JsonDeserializer.java&q=JsonDeserializer%20package:http://google-gson%5C.g\nooglecode%5C.com) but these are minor in comparison to the incorrect method \nnames and parameters. \n```\n\nOriginal comment by `borisb0...@gmail.com` on 24 Oct 2011 at 5:01\n =||= ", 0], ["373", "server-side object serialization (GSON)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:00 PM", "```\nHello!\nI have a question in my final project, I'm using gson on the server to get data \nfrom a table in my database, how I can do for the customer can get the data? \nbecause I can not use the method fromJson in client side.\n\nthank you very much\nA greeting.\n```\n\nOriginal issue reported on code.google.com by `gema.mat...@gmail.com` on 28 Oct 2011 at 11:09", "```\nFor vague questions you might be better asking on stackoverflow or a \nstudent-oriented board.\n```\n\nOriginal comment by `limpbizkit` on 24 Nov 2011 at 8:48\n- Changed state: **Invalid**\n =||= ", 0], ["374", "DefaultDateTypeAdapterTest#testDateSerialization fails on non-US systems", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:01 PM", "```\nWhat steps will reproduce the problem?\n1. run DefaultDateTypeAdapterTest\n\nWhat is the expected output? What do you see instead?\nFailed tests: \n  testDateSerialization(com.google.gson.DefaultDateTypeAdapterTest): expected:<[31 oktober] 2011> but was:<[October 31,] 2011>\n\nLocale.US should be used to create the expected value\n\n```\n\nOriginal issue reported on code.google.com by `d.de...@gmail.com` on 31 Oct 2011 at 1:04\n- Merged into: #381", "```\nFixed with issue 381.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:02\n- Changed state: **Duplicate**\n =||= ", 0], ["375", "GSON is (very) slow", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:02 PM", "```\ni ran a test where a serialized / deserialized a simply bean object with an \nembedded collection (map of string to list of string). GSON was 10x slower than \nJackson, and 5x slower than org.json. \n\ni'm not sure a real comparison can be done against org.json, as it doesn't \noffer any sort of object binding facility.\n\ni've attached the test harness i used.\n```\n\nOriginal issue reported on code.google.com by `jeffrey.blattman@gmail.com` on 31 Oct 2011 at 7:30\n\nAttachments:\n- [JSONTest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-375/comment-0/JSONTest.zip)", "```\nHave you tried the latest GSON from SVN? It's faster.\n```\n\nOriginal comment by `jessewil...@google.com` on 1 Nov 2011 at 1:46\n =||= ```\nI spent some time on this tonight and I isolated the problem. Our map type \nadapter is doing a lot more work than it needs to when converting a property \nname into a map key. I'll have a fix soon.\n```\n\nOriginal comment by `limpbizkit` on 25 Nov 2011 at 5:25\n- Changed state: **Ass**\n =||= Original comment by `limpbizkit` on 25 Nov 2011 at 5:25\n- Changed state: **Accepted**\n =||= ```\nOn today's numbers the comparison is much more favorable. After disabling \npretty printing we get this:\n  \"GSON test\" took 9495ms\n  \"org.json test\" took 13162ms\n  \"Jackson test\" took 4943ms\n(Pretty printing adds about 30%).\n```\n\nOriginal comment by `limpbizkit` on 13 Dec 2011 at 4:33\n- Changed state: **Fixed**\n =||= ", 0], ["376", "JsonParseException: Expecting object found: \"anyType\"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:03 PM", "```\n11-02 22:42:06.774: WARN/System.err(270): com.google.gson.JsonParseException: \nExpecting object found: \"anyType\"\n\nMy code:\ngson.fromJson(response.toString(), CollectionCategory.class)\n\nData: response.toString()\n\n\"anyType{\nCollectionCategory=anyType{CategoryId=531aca3d-7710-427f-8592-3591d0f37bf5; \nDescription=Category1; Name=Category1; }; \nCollectionCategory=anyType{CategoryId=b9b3cd04-bc7c-40bc-af5c-42b63f2b5784; \nDescription=Category2; Name=Category2; }; \n}\"\n\nClass Definition:\npublic class CollectionCategory {\n    public UUID CategoryId;\n    public String Name;\n    public String Description;\n}\n```\n\nOriginal issue reported on code.google.com by `haidaocht` on 2 Nov 2011 at 2:56", "```\nI hate to break it to you, but that isn't JSON.\n```\n\nOriginal comment by `limpbizkit` on 3 Nov 2011 at 1:45\n- Changed state: **Invalid**\n =||= ```\nThanks, it's from Microsoft WCF Service.\n\nAnyone hit same issue? \nIs there a workaround for this issue?\n```\n\nOriginal comment by `haidaocht` on 3 Nov 2011 at 2:34\n =||= ```\nUse a different library. GSON only parses JSON.\n```\n\nOriginal comment by `limpbizkit` on 4 Nov 2011 at 4:09\n =||= ", 0], ["377", "[Patch] Bug in JsonObjectDeserializationVisitor", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:07 PM", "```\nin public void visitPrimitive(Object primitive) method,\n\nshould add one line below:\n\nconstructed = true;\n\n\n```\n\nOriginal issue reported on code.google.com by `calvinxiu@gmail.com` on 8 Nov 2011 at 10:47", "```\nWhat version are you looking at? This code no longer exists in SVN.\n```\n\nOriginal comment by `limpbizkit` on 9 Nov 2011 at 5:31\n- Changed state: **WontFix**\n =||= ", 0], ["378", "Can't register a Double serializer", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:08 PM", "```\nWhat steps will reproduce the problem?\n\nExecute:\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception {\n        Gson gson = new GsonBuilder()\n            .registerTypeAdapter(Double.class, new JsonSerializer<Double>() {\n                public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {\n                    if (src.isNaN() || src.isInfinite())\n                        return new JsonPrimitive(src.toString());\n                    return new JsonPrimitive(src);\n                }\n            })\n            .create();\n        System.out.println(gson.toJson(21.24));\n        System.out.println(gson.toJson(Double.NaN));\n        System.out.println(gson.toJson(Double.POSITIVE_INFINITY));\n    }\n\n}\n\n\nWhat is the expected output? What do you see instead?\nI see this Exception:\nException in thread \"main\" java.lang.IllegalArgumentException: Cannot register \ntype adapters for class java.lang.Double\n    at com.google.gson.GsonBuilder.registerTypeAdapter(GsonBuilder.java:504)\n    at com.google.gson.GsonBuilder.registerTypeAdapter(GsonBuilder.java:495)\n    at Main.main(Main.java:13)\n\nWhat version of the product are you using? On what operating system?\nUpgrading from gson-1.7.1 to 2.0 introduced the issue.\n\nPlease provide any additional information below.\nThanks.\n```\n\nOriginal issue reported on code.google.com by `ajk...@gmail.com` on 18 Nov 2011 at 12:09", "```\nDoes this work for you?\n  Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().build();\n\nThis will serialize NaN and Infinity, but not as strings.\n```\n\nOriginal comment by `limpbizkit` on 19 Nov 2011 at 3:33\n =||= ```\nYes, it works but I prefer the previous strings.\n```\n\nOriginal comment by `ajk...@gmail.com` on 20 Nov 2011 at 9:39\n =||= ```\nI'm sorry we broke this use case with the 2.0 upgrade.\n\nWe can't support custom type adapters here in the general case without \nsacrificing some performance on binding. We're hoping to do optimizations where \nwe can avoid boxing primitives but that only works when applications don't \nprovide custom type adapters for primitive types.\n\nI'm keeping this open because with some significant effort we could probably \nget Gson to handle custom type adapters as long as it knows to test for them.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:01\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nFixed in 2.3 by restoring the ability to register custom serializers for \nprimitive types.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2012 at 5:59\n- Changed state: **Fixed**\n =||= ", 0], ["379", "OSGI entries in manifest specify bundle (and exported packages) version 1.7 for gson-2.0.jar", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:10 PM", "```\nWhat steps will reproduce the problem?\n\n1. download the google-gson-2.0-release.zip\n2. check the META-INF/MANIFEST.MF from the gson-2.0.jar\n\nWhat is the expected output? What do you see instead?\n\nThere should be lines like these:\nBundle-Version: 2.0\nExport-Package: com.google.gson;version=2.0.0, com.google.gson.annotat\n ions;version=2.0.0, com.google.gson.reflect;version=2.0.0, com.google\n .gson.stream;version=2.0.0, com.google.gson.internal;version=2.0.0\n\nThe file contains the following:\nBundle-Version: 1.7\nExport-Package: com.google.gson;version=1.7.1, com.google.gson.annotat\n ions;version=1.7.1, com.google.gson.reflect;version=1.7.1, com.google\n .gson.stream;version=1.7.1, com.google.gson.internal;version=1.7.1\n\n\nWhat version of the product are you using? On what operating system?\nVersion 2.0\n\nPlease provide any additional information below.\nI haven't checked if there are any missing exported packages (if any have been \nintroduced in v2.0).\n```\n\nOriginal issue reported on code.google.com by `jmalche...@gmail.com` on 20 Nov 2011 at 12:39", "```\nWe'll make sure to get this right in version 2.1, coming very soon.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:58\n- Changed state: **WontFix**\n =||= ", 0], ["380", "Broken deserialization of java.util.regex.Pattern objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:10 PM", "```\nWhat steps will reproduce the problem?\n1. Serialize and deserialize Pattern object.\n2. Example code:\n     Pattern org = Pattern.compile(\"te.t\");\n     String gson = new Gson().toJson(org);\n     Pattern back = new Gson().fromJson(gson, Pattern.class);\n\n     Matcher orgMatcher = org.matcher(\"XtestX\");\n     Matcher backMatcher = back.matcher(\"XtestX\");\n\nWhat is the expected output? What do you see instead?\nCalling matcher method forces deserialized pattern compilation. In this case \npattern group index count is not reset ie. pattern field capturingGroupCount is \nnot set to 1. In the example above orgMatcher and backMatcher should behave the \nsame. Executing following code \n     backMatcher.find();\n     backMatcher.group();\ncauses java.lang.IndexOutOfBoundsException: No group 0. The same methods called \non orgMatcher, result in group() method returning proper string \"test\".\n\nWhat version of the product are you using? On what operating system?\nGson 1.7.1 and 2.0. Windows 7 Enterprise 64bit. Java 1.6.0_27 32bit.\n\nPlease provide any additional information below.\nExecute provided code, all lines from top to bottom, to reproduce the problem.\n```\n\nOriginal issue reported on code.google.com by `copter01` on 24 Nov 2011 at 5:07", "```\nYou'll have to create a custom type adapter for Pattern. It should take about \n12 lines of code.\nhttps://sites.google.com/site/gson/gson-user-guide#TOC-Custom-Serialization-and-\nDeserializ\n```\n\nOriginal comment by `limpbizkit` on 24 Nov 2011 at 8:32\n- Changed state: **WontFix**\n =||= ", 0], ["381", "DefaultDateTypeAdapterTest#testDateSerialization fails on non US Locale", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:11 PM", "```\nWhat steps will reproduce the problem?\n\nTest assumes that the default locale is US.\n\nSimple fix\n\nChange line 130 in com.google.gson.DefaultDateTypeAdapterTest to\n\nDateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);\n\n\nWhat version of the product are you using? On what operating system?\nlatest svn snapshot r1051\n\nPlease provide any additional information below.\n\nStatcktrace of failure\n\njunit.framework.ComparisonFailure: \nExpected :26 November 2011\nActual   :November 26, 2011\n    at com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization(DefaultDateTypeAdapterTest.java:134)\n```\n\nOriginal issue reported on code.google.com by `jkirschn...@gmail.com` on 26 Nov 2011 at 4:43", "```\nThis issue was closed by revision r1076.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:57\n- Changed state: **Fixed**\n =||= ```\nThanks!\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:57\n =||= ```\nIssue 374 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 5:02\n =||= ", 0], ["382", "GSON 2.0 causes SecurityException", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:14 PM", "```\nWhat steps will reproduce the problem?\n1.\npublic abstract class GSONObject<K,V> {\n\n    protected static transient Gson gson;\n        protected HashMap<K,V> data;\n    public GSONObject() {\n           gson = new GsonBuilder(). \n                disableHtmlEscaping().\n                setPrettyPrinting().\n                serializeNulls().\n                create();\n               data=new HashMap<K,V>();\n    }\n    @Override\n    public String toString() {\n        return gson.toJson(this);\n    }\n    public <T> String toJson(Class<T> type) {\n        return gson.toJson(this, type);\n    }\n}\n\n2.\nExtending GSONObject and invoking toString or toJson results in the exception\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n{\"data\":{...}}\n\nResults Instead:\nException in thread \"main\" java.lang.SecurityException: Can not make a \njava.lang.Class constructor accessible\n    at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:139)\n    at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:129)\n    at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:84)\n    at com.google.gson.internal.ConstructorConstructor.getConstructor(ConstructorConstructor.java:66)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:64)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:49)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:49)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)\n    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n    at com.google.gson.Gson.toJson(Gson.java:504)\n    at com.google.gson.Gson.toJson(Gson.java:491)\n    at com.google.gson.Gson.toJson(Gson.java:446)\n    at com.google.gson.Gson.toJson(Gson.java:426)\n...\n\nWhat version of the product are you using? On what operating system?\nWindows 7, JDK 1.7 (Netbeans)\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `court...@crlog.info` on 29 Nov 2011 at 10:00", "```\nAhhhhh, sorry forgot to include GSON version.\nSo:\nGSON version 2.0\nThis worked previously with \nGSON Version 1.7.x\n```\n\nOriginal comment by `court...@crlog.info` on 29 Nov 2011 at 10:01\n =||= ```\nI'll look into this... We're going to have a new version of Gson out by year's \nend that should include a fix.\n```\n\nOriginal comment by `limpbizkit` on 3 Dec 2011 at 8:33\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= ```\nCool...I'll keep an eye out\n```\n\nOriginal comment by `courtney...@datasift.com` on 3 Dec 2011 at 8:55\n =||= ```\nI couldn't reproduce this. Could you provide a complete example?\n\n  public void testBug382() {\n    String string = new GSONObjectImpl().toString();\n    System.out.println(string);\n  }\n\n  public abstract static class GSONObject<K, V> {\n    protected static transient Gson gson;\n    protected HashMap<K, V> data;\n\n    public GSONObject() {\n      gson = new GsonBuilder().\n          disableHtmlEscaping().\n          setPrettyPrinting().\n          serializeNulls().\n          create();\n      data = new HashMap<K, V>();\n    }\n\n    @Override\n    public String toString() {\n      return gson.toJson(this);\n    }\n\n    public <T> String toJson(Class<T> type) {\n      return gson.toJson(this, type);\n    }\n  }\n\n  public static class GSONObjectImpl extends GSONObject<String, String> {\n  }\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:50\n =||= ```\nI have seen this happen. For me, this happens when Gson runs into a field of \ntype java.lang.Class. Typically, the reason is that I forgot to add a type \nadapter for the class containing this field. Clearly, java.lang.Class fields \nare not meant to be deserialized. May be a less cryptic message would help.\n```\n\nOriginal comment by `inder123` on 16 Dec 2011 at 6:13\n =||= ```\nI wasn't able to re-produce it just now. The super class that contain the \nstatic JSON object and methods as well as the sub classes have all changed \nquite a bit. I tried doing it based on what I posted and remembered but it \ndidn't happen...\nI'm not sure what inder123 means exactly but when this happened I had only that \nhashmap, data as a field in the class, something like\n\n    public void put(K key, V val) {\n        data.put(key, val);\n    }\nAnd the key was always a string, the value was occasionally POJOs that were \nknown to serialize just fine with GSON.\n\nI'll try again when I get home, I'll see if I can revert to the version of the \ncode that had all this and try again, but unfortunately I wasn't able to \nreproduce it...\n```\n\nOriginal comment by `court...@crlog.info` on 16 Dec 2011 at 6:46\n =||= ```\nInder fixed this with r1090.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:33\n- Changed state: **Fixed**\n =||= ", 0], ["383", "Revision 1051 crashes when ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:16 PM", "```\nWhat steps will reproduce the problem?\n1. Use Gson r1050\n2. Run GsonCrash with data.json\n3. No Exception\n\n4. Use Gson r1051\n5. Run GsonCrash with data.json\n6. Exception attached\n\n4. Use Gson r1052\n5. Run GsonCrash with data.json\n6. Exception attached\n\n\nWhat version of the product are you using? On what operating system?\nRevision 1050, 1051, 1052\n\njava version \"1.6.0_26\"\nJava(TM) SE Runtime Environment (build 1.6.0_26-b03)\nJava HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jsch...@logitech.com` on 30 Nov 2011 at 10:41\n\nAttachments:\n- [data.json](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/data.json)\n- [GsonCrash.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/GsonCrash.java)\n- [exception_r1051.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/exception_r1051.txt)\n- [exception_r1052.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/exception_r1052.txt)", "```\nFixed in r1056 ?\nhttp://code.google.com/p/google-gson/source/detail?r=1056\n```\n\nOriginal comment by `limpbizkit` on 3 Dec 2011 at 8:34\n- Changed state: **Fixed**\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= ```\nIt fixed my problem. Thanks\n```\n\nOriginal comment by `jsch...@logitech.com` on 6 Dec 2011 at 1:48\n =||= ", 0], ["384", "add support for \"maybe-lists\"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:17 PM", "```\nhello everyone,\n\nsometimes when i request my service depending on query parameters it can return \nsomething like this:\n\n{\n    \"retorno\":[\n        {\n            \"comment\":\"comment A\",\n            \"id\":\"7\"\n        },\n        {\n            \"comment\":\"comment B\",\n            \"id\":\"13\"\n        }\n    ]\n}\n\nand sometimes like this:\n\n{\n    \"retorno\":{\n        \"comment\":\"comment C\",\n        \"id\":\"6\"\n    }\n}\n\nand my class seems like this:\n\npublic class CommentReturn {\n\n    private List<Comment>comment;\n\n    public List<Comment>getComment(){\n        return comment;\n    }\n\n    public void setComment(List<Comment> comment){\n        this.comment=comment;\n    }\n}\n\nthis is generated by a jaxb backend, but had no success generating always the \nlist even when there is only one result.\n\nthis is not a gson problem... but would be nice to have a way to always feed \nthe class correctly, even when it have an object instead a list... but is the \ncorrect generic type. \n\n```\n\nOriginal issue reported on code.google.com by `Sombr...@gmail.com` on 6 Dec 2011 at 2:40", "```\nAn small uppdate: even jackson which is used by jersey to generate such odd \njson does not handle well this own result. At least in the default setup.\n\nplease forget it and close, i'll try something else.\n```\n\nOriginal comment by `Sombr...@gmail.com` on 6 Dec 2011 at 3:39\n =||= Original comment by `limpbizkit` on 6 Dec 2011 at 4:12\n- Changed state: **WontFix**\n =||= ", 0], ["385", "Patch for /trunk/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:18 PM", "```\nvariable naming fix\n```\n\nOriginal issue reported on code.google.com by `cue...@gmail.com` on 6 Dec 2011 at 3:07\n\nAttachments:\n- [RawCollectionsExample.java.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-385/comment-0/RawCollectionsExample.java.patch)", "```\nThere was a variable naming error json2 vs. json.\nThank you for GSON!!\nI love it.\n```\n\nOriginal comment by `cue...@gmail.com` on 6 Dec 2011 at 3:10\n =||= ```\nThis issue was closed by revision r1075.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:55\n- Changed state: **Fixed**\n =||= ```\nThanks.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:56\n =||= ", 0], ["387", "Bundle-Version is set to 1.7 in Manifest file of Release 2.0", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:19 PM", "```\nThe release 2.0 zip contains gson-2.0.jar. This jar file contains a MANIFEST.MF \nwhere Bundle-Version is set to 1.7. The exported packages are set to version \n1.7.1.\n\nI guess it should 2.0 !?\n```\n\nOriginal issue reported on code.google.com by `lerch.jo...@gmail.com` on 8 Dec 2011 at 1:53", "```\nWe'll make sure to get this right for 2.1.\n```\n\nOriginal comment by `limpbizkit` on 16 Dec 2011 at 4:53\n- Changed state: **WontFix**\n =||= ```\nI also added this in our release process so that we would not miss it in future.\n```\n\nOriginal comment by `inder123` on 16 Dec 2011 at 6:03\n =||= ", 0], ["388", "Enable Escape All Non Ascii chars", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:20 PM", "```\nEnable Escape All Non Ascii chars\nlike php json_encode\n```\n\nOriginal issue reported on code.google.com by `farmer1...@gmail.com` on 10 Dec 2011 at 5:22\n\nAttachments:\n- [escapeNonAscii.patch.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-388/comment-0/escapeNonAscii.patch.diff)", "```\nEww, why would you do this? You're better off fixing your other tools that \ncan't handle Unicode.\n```\n\nOriginal comment by `limpbizkit` on 10 Dec 2011 at 10:20\n- Changed state: **WontFix**\n =||= ```\nthis is important to cjk non-unicode users\ne.g. \nthe page encoded in gbk\nand wanted to export json data\nservlet will encode json using gbk if not escaped\n\nmake all non ascii would be safe for javascript to use\n\njackson1.8 and php json_encode always have this feature\n```\n\nOriginal comment by `farmer1...@gmail.com` on 11 Dec 2011 at 9:46\n =||= ```\nIts about an hour's work to make a Writer subclass that does what you'd like. \nThere's no benefit to doing this in Gson directly.\n```\n\nOriginal comment by `limpbizkit` on 11 Dec 2011 at 2:47\n =||= ```\n... actually it was only about eight minutes work. Paste this class into your \napplication (public domain license) and use it when you create your JsonWriter. \nThere's some optimization opportunities if write() isn't fast enough; changes \nare it'll be fine.\n\npublic class GhettoAsciiWriter extends Writer {\n    private final Writer out;\n\n    public GhettoAsciiWriter(Writer out) {\n        this.out = out;\n    }\n\n    @Override public void write(char[] buffer, int offset, int count) throws IOException {\n        for (int i = 0; i < count; i++) {\n            char c = buffer[i + offset];\n            if (c <= 0x7f) {\n                out.write(c);\n            } else {\n                out.write(String.format(\"\\\\u%04x\", (int) c));\n            }\n        }\n    }\n\n    @Override public void flush() throws IOException {\n        out.flush();\n    }\n\n    @Override public void close() throws IOException {\n        out.close();\n    }\n}\n```\n\nOriginal comment by `limpbizkit` on 11 Dec 2011 at 10:39\n =||= ", 0], ["389", "Gson 2.0 backwards incompatibility: an absent Json field is set to new Object() instead of null.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:21 PM", "```\nhttps://groups.google.com/forum/?hl=en_US#!topic/google-gson/L2ALXLxguNY\n\n was using gson-1.2.2 version and decided to upgrade to the gson-2.0.\nThe only drawback I've had so far is that in version 1.2.2, when a\nfield is ignored in the json, it is converted to null.\nFor example this class.\n\nClass Persona{\nprivate String nombre;\nprivate Long id;\nprivate Genero genero = new Genero();\n}\n\nIf I send the following json\n\n{\"id\":1,\"nombre\":\"juan\"}\n\nIn version 1.2.2 the java object\n\nnombre = \u201cjuan\u201d\nid= 1\ngenero = null\n\nPerforming tests on version 2.0.  I have\n\nnombre = \u201cjuan\u201d\nid= 1\ngenero = object\n\nWhat can i do? .. or that is the default in new versions?\n```\n\nOriginal issue reported on code.google.com by `inder123` on 16 Dec 2011 at 4:54", "```\nThis is not a valid issue.\nAdded a test for this in r1082\n\nI tested this test with r1016 (Gson 2.0) as well and it passed.\n```\n\nOriginal comment by `inder123` on 16 Dec 2011 at 5:23\n- Changed state: **Invalid**\n =||= ", 0], ["390", "provide standard set of convenience methods to navigate JSON DOM tree", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:22 PM", "```\n\nThis request is to add a standard set of convenience methods to complex JSON \nelement implementations. The \"convenience\" here is that the user doesn't have \nto re-type the result, and instead calls for the method that does the typing \ninternally, or throws an exception, if the typing is not possible. It would be \nalso a convenience, if the user could quickly tell if a given object is null.\n\nJsonObject already implements methods that allow to retrieve a property as \nanother json object, a json array, or a primitive. However, to retrieve a \nproperty as a terminal primitive type, the user has to call additional methods.\n\nSince JsonElement supports returning values as the following terminal types:\n\nprimList = {BigDecimal, BigInteger, boolean, byte, char, double, float, int, \nlong, Number, short, String}\n\nI propose that the list of the convenience methods should shadow these \nprimitive types, having JsonObject export getAsTYPE, where TYPE is each one \nfrom the primList.\n\nThe same is for the JsonArray. JsonArray current support retrieving primitive \ntypes of the first array of the element (which I actually believe is more \ndangerous than useful), but does not support returning n-th element as a \nspecific type.\n\nIt would be as convenient, if the user could retrieve a specific array element \nas both complex json type, or a terminal primitive type. So, I propose adding \nthe following methods to JsonArray (the only parameter is the 0-based index of \nthe array element):\n\nJsonArray getAsJsonArray(int);\nJsonObject getAsJsonObject(int);\nJsonPrimitive getAsJsonPrimitive(int);\n\nand then also the set of getAsTYPE(int), where TYPE is one of primList.\n\n\nTo support checking for a NULL, method isNull(String) can be added JsonObject, \nand isNull(int) to JsonArray.\n\nThank you.\n\n```\n\nOriginal issue reported on code.google.com by `pawel.ve...@gmail.com` on 17 Dec 2011 at 2:23", "```\nPersonally I don't like this idea. The existing APIs are very normalized and \nthat makes them easy to learn.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:31\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:48\n- Changed state: **WontFix**\n =||= ", 0], ["391", "App crash when using Gson library (2.0) on Android 3.2 (Acer a100)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:23 PM", "```\nReproduced sometimes when creating objects with google-gson library (2.0) from \njson strings on device with android 3.2 (Acer a100), sometimes with variation \nof ClassCastException. On other devices (android 3.0, 3.1) it's work fine. \n\n```\n\nOriginal issue reported on code.google.com by `effectiv...@gmail.com` on 20 Dec 2011 at 7:03\n- Merged into: #255\n\nAttachments:\n- [log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log1.zip)\n- [log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log2.zip)\n- [log3.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log3.zip)\n- [log4.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log4.zip)", "```\nSigh. I suspect Acer has joined HTC in including Gson in their boot classpath.\n```\n\nOriginal comment by `limpbizkit` on 21 Dec 2011 at 8:07\n- Changed state: **Duplicate**\n =||= ", 0], ["392", "UTF-8 handling", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:24 PM", "```\nI searched web and API, could not figure out how to handle UTF-8. Any help is \nappreciated.\n\nThe request the service got is in UTF-8, I make sure it read correctly.\n\nString strContent =CharStreams.toString(new InputStreamReader(is, \"UTF-8\"));\n\nFrom the log, the strContent indeed has the following:\n\n\"Text\": \"\\u20ACHello from UIE-3\"\n\nWhen I converted to json object, it appears have some issues:\n\n\nGson gson = new \nGsonBuilder().setPrettyPrinting().setFieldNamingPolicy(FieldNamingPolicy.UPPER_C\nAMEL_CASE).create();\n\nNotificationRequest nr = null;\ntry{\n    nr = gson.fromJson(strContent, NotificationRequest.class);\n    LOGGER.debug(\"NOTIFICATION REQUEST: {}\", nr.toString());\n\nThe 'text' becomes:  Text=\u00e2\u00acHello from UIE-3\n\nWhat did I miss?\n\nThanks.\n\nJim \n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `wguo1...@gmail.com` on 20 Dec 2011 at 6:11", "```\nI suspect that your IDE or terminal emulator is choking on the UTF-8 \ncharacters. You can confirm this by printing the string.length() - if Gson is \ndoing unicode properly then \"\\u20AC\" will have length of 1. But a non-unicode \ncapable terminal emulator will print two characters for the two bytes in the \nUTF-8 encoding.\n\nIf that is the problem, you should consider upgrading to a Unicode-capable \nterminal emulator. I use Terminator: http://software.jessies.org/terminator/\n```\n\nOriginal comment by `limpbizkit` on 21 Dec 2011 at 8:05\n- Changed state: **Invalid**\n =||= ```\nThanks a lot. You are absolutely right. I used putty as the terminal. When I \nopen the log file on Windows, everything is displayed well. I blamed wrong lib \n:-(. \nJim \n```\n\nOriginal comment by `wguo1...@gmail.com` on 21 Dec 2011 at 8:19\n =||= ", 0], ["393", "Strict variant that allows non-Object/Array top level types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:25 PM", "```\nThe latest Ecmascript standard (which modern browsers adhere to) follows RFC \n4627 strictly, with the one exception that the top-level type can be any type, \nnot just Object or Array. It would be nice to have a Gson parsing mode that has \nthe same behavior.\n\nhttp://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262%20edition%\n205.1,%20June%202011.pdf\n```\n\nOriginal issue reported on code.google.com by `chr...@google.com` on 21 Dec 2011 at 6:51", "```\nYou can use setLenient(true) to enable this. Unfortunately this also disables \nother strictness checks.\n```\n\nOriginal comment by `jessewil...@google.com` on 21 Dec 2011 at 6:23\n =||= ```\nOne more option, while I'm thinking of it. You can wrap your document in '[' \nand ']' to make it conform to the strict standard.\n```\n\nOriginal comment by `limpbizkit` on 21 Dec 2011 at 6:30\n- Changed state: **WontFix**\n =||= ```\nTo check whether something is valid JSON as per Ecmascript would then require \ncatching a MalformedJsonException, wrapping in '[' + json + ']', and trying \nagain? I don't think that is reasonable.\n```\n\nOriginal comment by `chr...@google.com` on 21 Dec 2011 at 6:38\n =||= ", 0], ["394", "object list in Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:26 PM", "```\n1. I want to add list of object in gson. Example there is list of person object \nthat list need to add in gosn to get String object for response.\nCode\nList<Person> personList = new ArrayList<Perosn>();\npersonList.add(new Person());\npersonList.add(new Person());\npersonList.add(new Person());\n\nGson gson = new Gson();\nString personObject = gson.toJson(personList);\n\nI am getting error while doing this.\n\n\nI am using gson-2.0.jar and related jar for that.\n\nOperating system is windows 7.\n```\n\nOriginal issue reported on code.google.com by `aijaz....@gmail.com` on 28 Dec 2011 at 1:01", "```\nYou'll need the two-argument version of toJson(). The 2nd argument should be \nthis: \n  new TypeToken<List<Person>>() {}.getType()\n\nFor ease in triage, you should include a stacktrace when you report a bug like \nthis.\n```\n\nOriginal comment by `limpbizkit` on 29 Dec 2011 at 5:29\n- Changed state: **Invalid**\n =||= ", 0], ["396", "Include Strategy?", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:29 PM", "```\nIn the actual version of the google-gson developers are able to create a \ncustomized strategy to field exclusion and this is great, I was able to create \na strategy that I think to be smarter than the original one.\n\nMy strategy doesn't just allow me to exclude fields by their name because \nsometimes the name repeats itself across a lot of classes (most common in JPA \nentities) but it also allows me to specify the class in which the field that I \nwant to exclude lives. This is working great because it used to generate lots \nof circular references and I was compelled to exclude the fields that generates \nthat circular references, but how that name is common across some entities I \nhad seen myself in trouble using the default behavior that excludes every field \nin the object graph with that specified name.\n\nTherefore, I think it would be great to enable this kind of feature either \nnative in the GsonBuilder or by enabling customizing include strategy as today \nexists for excluding. What you guys think about this?\n\nThanks.\n```\n\nOriginal issue reported on code.google.com by `Jayrmo...@gmail.com` on 30 Dec 2011 at 12:44", "```\nWhat could you do with an inclusion strategy that you can't do with \nExclusionStrategy?\n```\n\nOriginal comment by `limpbizkit` on 11 Feb 2012 at 6:37\n- Added labels: **Type-Enhancement**, **Priority-Low**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= Original comment by `limpbizkit` on 19 Mar 2012 at 3:30\n- Changed state: **WontFix**\n =||= It would have been great to have inclusion strategy. Assume a few deep nested class with several fields and all I want to serialize or create a JSON with few countable number of fields. On such cases It would be better to use inclusion strategy. \n =||= ", 0], ["397", "Lenient JsonWriter should allow multiple top level objects", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:30 PM", "```\nWhat steps will reproduce the problem?\n\nJsonWriter jsonWriter = new JsonWriter( new StringWriter() );\njsonWriter.setLenient( true );\njsonWriter.beginObject();\njsonWriter.endObject);\njsonWriter.beginObject();\n\nWhat is the expected output? What do you see instead?\n\nExpected to write additional objects.  Instead, an IllegalStateException is \nthrown: \"JSON must have only one top-level value.\"\n\nWhat version of the product are you using? On what operating system?\n\ngson-2.1\n\nPlease provide any additional information below.\n\nLenient JsonReader allows this, it would seem that the writer should as well.\n```\n\nOriginal issue reported on code.google.com by `kpha...@gmail.com` on 3 Jan 2012 at 8:46", "```\nHere is a simple patch to fix the issue.  It breaks one unit test but appears \nto work in practice.  Can someone with more knowledge of the product take a \nlook and make sure I'm not overlooking something.\n```\n\nOriginal comment by `kpha...@gmail.com` on 3 Jan 2012 at 8:50\n\nAttachments:\n- [Issue397.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-397/comment-1/Issue397.patch)\n =||= ```\nThanks for the helpful report. We'll fix this in the next release.\n```\n\nOriginal comment by `limpbizkit` on 4 Jan 2012 at 1:26\n =||= ```\nThis issue was closed by revision r1124.\n```\n\nOriginal comment by `limpbizkit` on 12 Feb 2012 at 8:42\n- Changed state: **Fixed**\n =||= ", 0], ["398", "Gson can not work with G10", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:31 PM", "```\nHello,I use gson lib for my android application.It works in many phones very \nwell,but in some mobile it can not work.\nHere is the stack trace.\nHTC DesireHD G10:\n01-05 09:49:50.553: W/System.err(11264): java.lang.TypeNotPresentException: \nType com.ifeng.news2.bean.BaseItem not present\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:64)\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav\na:73)\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes(ListOfTypes.ja\nva:68)\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav\na:72)\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.Types.getType(Types.java:29)\n01-05 09:49:50.573: W/System.err(11264):    at \njava.lang.reflect.Field.getGenericType(Field.java:191)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:53)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:148)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor\n.java:107)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio\nnVisitor.java:95)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese\nrializationVisitor.java:62)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:73)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:51)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.Gson.fromJson(Gson.java:495)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.Gson.fromJson(Gson.java:444)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.Gson.fromJson(Gson.java:396)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.google.gson.Gson.fromJson(Gson.java:372)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.ifeng.news2.bean.ListUnit.parse(ListUnit.java:137)\n01-05 09:49:50.573: W/System.err(11264):    at \ncom.ifeng.news2.test.ListUnitTest.testParseList(ListUnitTest.java:138)\n01-05 09:49:50.573: W/System.err(11264):    at \njava.lang.reflect.Method.invokeNative(Native Method)\n01-05 09:49:50.573: W/System.err(11264):    at \njava.lang.reflect.Method.invoke(Method.java:521)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestCase.runTest(TestCase.java:154)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestCase.runBare(TestCase.java:127)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestResult$1.protect(TestResult.java:106)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestResult.runProtected(TestResult.java:124)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestResult.run(TestResult.java:109)\n01-05 09:49:50.573: W/System.err(11264):    at \njunit.framework.TestCase.run(TestCase.java:118)\n01-05 09:49:50.573: W/System.err(11264):    at \nandroid.test.AndroidTestRunner.runTest(AndroidTestRunner.java:169)\n01-05 09:49:50.573: W/System.err(11264):    at \nandroid.test.AndroidTestRunner.runTest(AndroidTestRunner.java:154)\n01-05 09:49:50.573: W/System.err(11264):    at \nandroid.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:52\n0)\n01-05 09:49:50.573: W/System.err(11264):    at \nandroid.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1580)\n01-05 09:49:50.573: W/System.err(11264): Caused by: \njava.lang.ClassNotFoundException: com.ifeng.news2.bean.BaseItem\n01-05 09:49:50.573: W/System.err(11264):    at \njava.lang.Class.classForName(Native Method)\n01-05 09:49:50.573: W/System.err(11264):    at \njava.lang.Class.forName(Class.java:235)\n01-05 09:49:50.573: W/System.err(11264):    at \norg.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:62)\n01-05 09:49:50.573: W/System.err(11264):    ... 33 more\n01-05 09:49:50.573: W/System.err(11264): Caused by: \njava.lang.NoClassDefFoundError: com.ifeng.news2.bean.BaseItem\n01-05 09:49:50.573: W/System.err(11264):    ... 36 more\n01-05 09:49:50.573: W/System.err(11264): Caused by: \njava.lang.ClassNotFoundException: com.ifeng.news2.bean.BaseItem in loader \ndalvik.system.PathClassLoader[.]\n01-05 09:49:50.583: W/System.err(11264):    at \ndalvik.system.PathClassLoader.findClass(PathClassLoader.java:243)\n01-05 09:49:50.583: W/System.err(11264):    at \njava.lang.ClassLoader.loadClass(ClassLoader.java:573)\n01-05 09:49:50.583: W/System.err(11264):    at \njava.lang.ClassLoader.loadClass(ClassLoader.java:532)\n01-05 09:49:50.583: W/System.err(11264):    ... 36 more\n\nThat's strange.I write test case like that:\nClass.forName(\"com.ifeng.news2.bean.BaseItem\");\n//parseFrom json String\nClass.forName is ok,fromJson occured a TypeNotPresentException\nThank you for help.\n```\n\nOriginal issue reported on code.google.com by `ifen...@gmail.com` on 5 Jan 2012 at 2:04\n- Merged into: #255", "Original comment by `limpbizkit` on 5 Jan 2012 at 5:43\n- Changed state: **Duplicate**\n =||= ", 0], ["399", "error happend when converting object to json", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:31 PM", "```\nWhat steps will reproduce the problem?\n1.class A declared a field age\n2.class B extends A and also declared a field age \n3.new an instance of class B\n4.convert the newed B instance to json\n5.java.lang.IllegalArgumentException: class B declares multiple JSON fields \nnamed age\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n2.1\n\nPlease provide any additional information below.\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            A a = new A();\n            a.setAge(2);\n            a.setName(\"someone\");\n            B b = new B();\n            b.setAge(2);\n            Gson gson = new Gson();\n            System.out.println(gson.toJson(a));\n            System.out.println(gson.toJson(b));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\nclass A {\n    String name;\n    int age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\nclass B extends A {\n    Date birthday;\n    int age;\n\n    public Date getBirthday() {\n        return birthday;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n\n```\n\nOriginal issue reported on code.google.com by `jackydu1...@gmail.com` on 11 Jan 2012 at 3:50", "```\nWorking as intended.\n\nIf the age fields can be different, use @SerializedName() on one or more of \nthem to give it an unambiguous name. If they're the same, remove the age field \ndeclaration on 'b'.\n\nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/a\nnnotations/SerializedName.html\n```\n\nOriginal comment by `limpbizkit` on 11 Jan 2012 at 4:50\n- Changed state: **Invalid**\n =||= ```\nWhat if Class A is an abstract parent class? The error still happens. I \nshouldn't have to put an annotation on an abstract class that would never be \nused with gson should I?\n```\n\nOriginal comment by `ianwal...@gmail.com` on 15 Aug 2012 at 11:47\n =||= ```\nI just bumped into this issue. Where the parent class were abstract. And I \ncannot modify that class since I'm not the author but I need to serialize it.\n```\n\nOriginal comment by `lajvbuti...@gmail.com` on 10 Nov 2012 at 8:30\n =||= ```\nWhat steps will reproduce the problem?\n1.class A declared a field age\n2.class B extends A and also declared a field age \n3.new an instance of class B\n4.convert the newed B instance to json\n5.java.lang.IllegalArgumentException: class B declares multiple JSON fields \nnamed age\n```\n\nOriginal comment by `atsakthi...@gmail.com` on 27 Mar 2013 at 12:52\n =||= ```\nI have posted a question on stackoverflow with same problem. Can anybody answer \nit?\nQuestion can be found at:\n\nhttp://stackoverflow.com/questions/15756551/solr-java-error-class-com-restfb-typ\nes-post-declares-multiple-json-fields-named\n```\n\nOriginal comment by `ndthokar...@gmail.com` on 2 Apr 2013 at 2:29\n =||= I recently got below error: \nERROR:class java.text.DecimalFormat declares multiple JSON fields named maximumIntegerDigits\n\nThe reason is I used \"private final java.text.DecimalFormat\" in a class which is deserialized by Gson. And DecimalFormat and its base class NumberFormat, both define \"private int  maximumIntegerDigits\". \nI fixed the problem by removing the field. \n\nBut my point is, as gson knows duplicate fields, if they are same type, can gson just deserialize the value to subclass instead of throwing an exception?\n =||= That's only half the problem. What if they have different values when serializing?\n\nYou should not be relying on the implementation details of `java.*` types anyway. Write a type adapter for `DecimalFormat` which calls `toPattern()` to serialize as a String and uses the `DecimalFormat(String)` constructor to deserialize from a String.\n =||= Agree. @JakeWharton. Not a good way to have duplicate fields.\n\nBut the condition is if we cannot modify those classes and we have to use them, it's better that gson provides a work around.\n =||= I just told you the workaround: a type adapter which doesn't serialize\nimplementation details of classes outside your control. Use their public\nAPIs to encode their data.\n\nThis is less of a workaround and more just the correct thing to do.\n\nOn Fri, Feb 5, 2016 at 11:39 AM William notifications@github.com wrote:\n\n> Agree. @JakeWharton https://github.com/JakeWharton. Not a good way to\n> have duplicate fields.\n> \n> But the condition is if we cannot modify those classes and we have to use\n> them, it's better that gson provides a work around.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/399#issuecomment-180431956.\n =||= ", 0], ["400", "Dynamic serialization and deserialization via class interface", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:33 PM", "```\nI have created a patch against gson-2.1 that adds code for allowing classes to \ndefine serialization and deserialization by implementing a simple interface. \nThe benefit of this approach is that there is no longer a need to register \nspecial handlers for each class that requires custom serialization. It can be \nused as follows:\n\npublic class Foo implements JsonSerialization, \nJsonDeserializedBy<FooDeserializer> {\n    public String name;\n    public JsonElement serialize (JsonSerializationContext jsc) {\n        return new JsonPrimitive(name);\n    }\n}\n\npublic class FooDeserializer implements JsonDeserializer<Foo> {\n    public Foo deserialize(JsonElement je, Type type, JsonDeserializationContext jdc) {\n        Foo f = new Foo();\n        f.name = je.getAsString();\n        return f;\n    }\n}\n\n...\nFoo foo = new Foo();\nfoo.name = \"foo\";\ngson.toJson(foo); // \"foo\"\ngson.fromJson(gson.toJson(foo), Foo.class).name; // \"foo\"\n\nWith my patch, a Gson object now checks the argument sent to toJson to \ndetermine if it implements JsonSerialization. If so, it calls its \nserialize(jsc) method to retrieve a JsonElement for that class.\n\nWhen fromJson is called, the given class is inspected to determine if it \nimplements the JsonDeserializer interface. If so, the class specified in the \ntemplate parameter (in this case FooDeserializer) is used for deserialization \nby creating a new instance of that class (using the no-argument constructor), \nand then deserialize is called as with any JsonDeserializer object.\n\nThis patch adds the two new interfaces (JsonSerialization and \nJsonDeserialization) and adds a few lines of code to Gson in order to provide \nthe aforementioned functionality. I'm not sure I chose the appropriate location \nto insert the functionality, and the code is pretty ugly, but it seems to work \npretty well in my limited test cases.\n\nI'll license the patch under the same license as gson, in case anyone is \nconcerned about that.\n```\n\nOriginal issue reported on code.google.com by `mint...@everlaw.com` on 12 Jan 2012 at 1:59\n\nAttachments:\n- [gson-2.1-dynamic_serialization.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-0/gson-2.1-dynamic_serialization.patch)", "```\nSorry, the example code has a small mistake, as I renamed one of the interfaces \nbefore submitting the patch. Where it says \"JsonDeserializedBy\", it should say \n\"JsonDeserialization\". The patch and the rest of my post are accurate.\n```\n\nOriginal comment by `mint...@everlaw.com` on 12 Jan 2012 at 2:03\n =||= ```\nThat's extremely clever!\n\nFYI, if you're willing to make a single call to \nGsonBuilder.registerTypeAdapterFactory(), I don't think you need to make any \nchanges to Gson 2.1 to make this work.\n```\n\nOriginal comment by `jessewil...@google.com` on 12 Jan 2012 at 6:03\n =||= ```\n[deleted comment]\n```\n =||= ```\nWill that actually work, though? From what I could tell looking at the code, a \nTypeAdaptor is registered against a specific type that is later retrieved with \na map lookup. Since my method relies on any object simply implementing an \ninterface, doesn't that require a change to Gson?\n\nThe alternative would be for each object to register itself with some \nglobally-used Gson object. I preferred the interface approach.\n```\n\nOriginal comment by `mint...@everlaw.com` on 18 Jan 2012 at 7:06\n =||= ```\nIt'll work, but you need to register a TypeAdapterFactory, not a TypeAdapter. \nThe factory lets you support any type.\n```\n\nOriginal comment by `jessewil...@google.com` on 21 Jan 2012 at 2:06\n =||= ```\nThank you for the continued guidance, Jesse. A TypeAdapterFactory is definitely \nthe right way to do this, but I've run into a few issues with accessibility in \nimplementing it. I've attached my TypeAdapterFactory and the interfaces \nassociated with it, and I would appreciate any suggestions you can give me on a \nbetter approach. I am aware that using ReflectiveTypeAdapter in the way that I \nhave is something of a hack (I should be following an approach like \nTreeTypeAdapter's delegate()), but I don't think it changes the idea much.\n\nThere are a few calls to my own custom class called \"Reflection\". I am not \ngoing to include it in the attachment, but I'll specify the methods instead:\n\nClass classOfType(Type t)\nReturn the upper bound on t. If (t instanceof Class), it's simply ((Class) t). \nFor a ParameterizedType, e.g., List<String> would be List.class. For something \nlike \"? extends Comparable\", it's Comparable.class.\n\nClass[] getTypeParameters(Class implClass, Class genClass)\nAscends and descends the class hierarchy between implClass and genClass to \nreturn the array indicating genClass's instantiated type parameters as \nspecifically as possible. For any parameter that doesn't resolve completely, \nthe behavior follows that of classOfType(). (In its usage here, it's used to \nfind the actual class DESERIALIZER when a class implements \nJsonDeserialization<DESERIALIZER>.)\n\nT newInstance(Class<T> c)\nJust like c.newInstance() except that exceptions are rethrown as a \nRuntimeException and the accessibility is set to true before invoking the \nconstructor (so that non-public constructors can be invoked).\n\nField getAccesibleField(Class c, String fieldName)\nCalls c.getDeclaredField(fieldName), rethrowing exceptions as a \nRuntimeException and setting the resulting Field's accessibility to true and \nbefore returning it.\n```\n\nOriginal comment by `mint...@everlaw.com` on 6 Feb 2012 at 3:19\n\nAttachments:\n- [factory.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-6/factory.zip)\n =||= ```\nYeah, you probably shouldn't have to do that much work. See the \nTypeAdapterFactory documentation for an example that includes delegation:\n\nhttp://google-gson.googlecode.com/svn-history/r1110/trunk/gson/docs/javadocs/com\n/google/gson/TypeAdapterFactory.html\n\nFor serialization, you should delegate to the concrete class of the type being \nserialized. For deserialization, you should delegate to the adapter of the \nconcrete class that implements your interface. You can get both type adapters \nusing the Gson instance passed in to create().\n```\n\nOriginal comment by `jessewil...@google.com` on 6 Feb 2012 at 4:46\n =||= ```\nI'm sorry, but I'm having trouble following your suggestion. My mechanism \nallows a class to implement one or both of JsonSerialization and \nJsonDeserialization<DESERIALIZER>. If Obj obj implements the former, calls to \ngson.toJson(obj) execute a callback to \nobj.serialize(gson.serializationContext). If Obj implements the latter, calls \nto gson.fromJson(Obj.class) effectively execute \nDESERIALIZER.newInstance().deserialize(JsonElement je, Obj.class, \ngson.deserializationContext).\n\nI don't see how I can handle that with a delegate. I understand that I can \navoid my usage of ReflectiveTypeAdapter, but that's a more minor issue. The \nissue I'm running up against is that in implementing my own TypeAdapterFactory, \nI can't technically access gson.de/serializationContext without hacking around \nthe Java security system. This leads me to believe I'm doing something wrong.\n\nIn the case where I wish to override the default de/serialization, I don't \nbelieve that I can perform the delegation you suggest because I'm not actually \nregistering a type adapter for every type implementing JsonSerialization and \nJsonDeserialization (my two custom interfaces). Is there some hook to perform \nthat registration without resorting to hacks that use the Reflections package \nto find every subclass of the aforementioned interfaces and register a \nTypeAdapter for each?\n\nThe point of my factory is to allow objects to simply implement an interface \ninstead of having to register themselves with a canonical Gson instance. That \nmeans that I can't \"delegate to the concrete class of the type being \nserialized\" for classes that implement JsonSerialization because I need to \nensure that the object's serialize(jsc) method is called instead. I also don't \nthink I can delegate for deserialization because the deserializer is not \nregistered with any Gson instance.\n\nAm I missing something simple?\n```\n\nOriginal comment by `mint...@everlaw.com` on 6 Feb 2012 at 9:15\n =||= ```\nGot it. The JsonSerializationContext/JsonDeserializationContext APIs aren't \npresent nor necessary for streaming type adapters implementing the TypeAdapter \ninterface. Instead that interface uses 'Gson' which provides a superset of the \nfunctionality of JsonSerializationContext and JsonDeserializationContext.\n\nIf you want, change your interface to take a Gson instance instead. I posted \nanother big TypeAdapterFactory example on issue 43; you may want to read it \nthrough.\n```\n\nOriginal comment by `jessewil...@google.com` on 7 Feb 2012 at 5:02\n =||= ```\nPerfect! Thank you very much. I'll reply here soon with a cleaner version of my \nInterfaceTypeAdapterFactory mechanism. Perhaps it will turn out to be something \nworth including in trunk after a few iterations.\n```\n\nOriginal comment by `mint...@everlaw.com` on 7 Feb 2012 at 5:24\n =||= ```\n[deleted comment]\n```\n =||= ```\n[deleted comment]\n```\n =||= ```\nThanks a lot for working through this issue with me. Attached is an \nimplementation of the mechanism I discussed. It uses the Drink example you \nprovided in  issue 43 . My goal was to make it as simple as possible for an \nimplementor to perform the conversion to and from Json.\n\nIt's also available on github: https://github.com/BMintern/gson-interface\n\nIn order for it to work, it must be registered with the Gson instance:\nGson gson = new GsonBuilder()\n        .registerTypeAdapterFactory(new InterfaceAdapterFactory())\n        .create();\n\nNote that I changed the deserializer class to implement JsonDeserializes \ninstead of JsonDeserializer. I felt that the method signature defined there was \nmore consistent with JsonSerialization (and slightly easier to use).\n\nNote also that this provides a dead-simple way for a class to recursively \nserialize itself.\n```\n\nOriginal comment by `mint...@everlaw.com` on 9 Feb 2012 at 12:02\n\nAttachments:\n- [gson-interface.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-13/gson-interface.zip)\n =||= ```\nNice work!\n\nFYI Gson team, mintern's library is a use case for a public getNextAdapter() \nmethod.\n```\n\nOriginal comment by `limpbizkit` on 9 Feb 2012 at 1:05\n =||= ```\nThanks, I'm glad you like it! Unfortunately, it also uses TypeToken(Type) in a \ngross way. I'd be interested in hearing an alternative. See \nGsonContext.nextAdapter(Type).\n```\n\nOriginal comment by `mint...@everlaw.com` on 9 Feb 2012 at 1:14\n =||= ```\nLooks interesting. mintern/Jesse, do you have any take on the performance \nimpact of this? I remember that in the past, annotations caused us quite a bit \nof hit on performance. Does this reflection have any such issues?\n```\n\nOriginal comment by `inder123` on 11 Feb 2012 at 1:31\n =||= ```\nI did not perform any performance tests on my mechanism. I can say that in the \ncase of large class hierarchies where none actually implements \nJsonDeserialization, the Reflection.getTypeParameters(...) call will visit \nevery ancestor of the type. I expect that this could be trivially improved by \nfirst checking JsonDeserialization.class.isAssignableFrom(...) before calling \ngetTypeParameters.\n\nBased on my (somewhat limited) understanding of Gson, the most expensive part \nwill be called just once per (de/serialized) type per Gson instance. That is, \nthe first time a user calls a Gson method on a type, the reflection \nintrospection will slow it down somewhat. Subsequent operations, however, \nshould be as fast as they currently are.\n```\n\nOriginal comment by `mint...@everlaw.com` on 13 Feb 2012 at 7:25\n =||= ```\nWe're going to publish the getNextAdapter API in Gson 2.2, though I believe we \nmay rename it to getDelegateAdapter().\n\nmintern, any further action you'd like us to take here?\n\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 6:08\n =||= ```\nThat's a good start, but I found in the implementation of my interface that I \nsometimes needed to call getNextAdapter(..., Type). Currently, getNextAdapter \nonly accepts a TypeToken as an argument. The solution, then, is to either \nimplement getNextAdapter(..., Type) or to make the TypeToken(Type) constructor \npublic. A justification follows.\n\nI provide a pair of methods (called thisToJson and thisFromJson) that allow one \nto use Gson to perform the de/serialization while avoiding infinite recursion. \nAs you're aware, this makes use of getNextAdapter.\n\nIn some cases, however, I have to call getNextAdapter with a different \ntype--for example, when using thisFromJson to construct a subclass. In this \ncase, I need to call getNextAdapter with a TypeToken other than the one with \nwhich my TypeAdapter was constructed.\n\nFor an example of what I'm talking about, see:\n\nhttps://github.com/BMintern/gson-interface/blob/master/InterfaceAdapterFactory.j\nava#L137\n\ncalled by:\n\nhttps://github.com/BMintern/gson-interface/blob/master/GsonContext.java#L85\n\ncalled by:\n\nhttps://github.com/BMintern/gson-interface/blob/master/InterfaceExample.java#L81\n```\n\nOriginal comment by `mint...@everlaw.com` on 19 Mar 2012 at 9:29\n =||= ```\nCan you use TypeToken.get(type) ?\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:46\n =||= ```\nYes, I can. I don't know how I missed that. Thanks! This bug can be closed.\n```\n\nOriginal comment by `mint...@everlaw.com` on 12 Apr 2012 at 8:58\n =||= ```\nThis is a very useful addition.  Worked fine inside our own codebase.  I think \nit would make a good addition to the core library.\n```\n\nOriginal comment by `a...@shapeways.com` on 13 Apr 2012 at 8:49\n =||= ```\nThanks! I'm glad it was useful.\n\nSome notes based on our usage:\n\n1. If a class has a non-static inner class that extends Runnable, it results in \nan infinite loop during serialization. This is a problem with Gson in general, \nas far as I can tell. Implementing JsonSerialization and avoiding the use of \nthisToJson allows one to avoid this problem.\n\n2. As Gson appears to be moving toward a streaming JSON interface, I'm not sure \nhow much sense my interface makes. Streaming is clearly superior for large \ndatasets, but it adds a lot of complexity when you just want to serialize a \nsimple object.\n\n3. Make sure you have the latest version. I made a change nearly a month ago \nthat improved efficiency and fixed the problem outlined in (1) above. Just \ntoday I committed the change suggested by comment #20 above.\n\n4. My package introduces several new classes that might be confusing in the \ngeneral case (JsonSerialization, JsonDeserialization, JsonDeserializes, \nGsonContext, InterfaceTypeAdapter, InterfaceAdapterFactory). Some of my \nGsonContext functionality could potentially be rolled into the Gson object \nitself, but otherwise the departure from standard Gson means that I can't \nsimplify the interfaces all that much.\n\n5. Requiring an object to be deserialized by a separate class that implements \nJsonDeserialization is a bit cumbersome, but there's not a good way around it \nas far as I can tell. One pattern that eases the indirection is to make the \ndeserializer be a static inner class of the class it is deserializing. In order \nto do that, in YourClass.java you'll have to import \nYourClass.YourClassDeserializer, where YourClass implements \nJsonDeserialization<YourClassDeserializer>, and YourClassDeserializer \nimplements JsonDeserializes<YourClass>.\n\nI hope that helps. Definitely report any issues you have on my github... I'm \ngenerally pretty responsive.\n\nhttps://github.com/BMintern/gson-interface\n```\n\nOriginal comment by `mint...@everlaw.com` on 13 Apr 2012 at 9:15\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:50\n- Changed state: **Done**\n =||= ", 0], ["401", "Deserializing of custom object collection (comma issue)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:38 PM", "```\nWhat steps will reproduce the problem?\n\n1. The code:\n items = gson.fromJson(json, new TypeToken<ArrayList<Foo>>(){}.getType());\n\n2. The data:\n[\n {\"uuid\":\"041347d3-56b5-4f64-b295-044d812802a3\", \"path\":\"fooPath\", \"name\":\"FooName\"},\n]\n\nWhat is the expected output? \n\n  ArrayList of Foo with size = 1.\n\nWhat do you see instead?\n\n  ArrayList of Foo with size = 2.\n\nWhat version of the product are you using? On what operating system?\n\n  gson-2.1, Android 3.1\n\nPlease provide any additional information below.\n\n  The comma (,) symbol after the (}) causes trouble. If I remove the comma - the resulting array is correct.\n\n\n```\n\nOriginal issue reported on code.google.com by `martynas...@gmail.com` on 12 Jan 2012 at 2:10", "```\nUnnecessary commas aren't valid JSON. Gson supports them when you're \ndatabinding because it's lenient by default. Here's what JsonReader says on it:\n\n  \"Setting the parser to lenient causes it to ignore the following syntax errors:\n   ... Unnecessary array separators. These are interpreted as if null was the omitted value.\"\n\nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/s\ntream/JsonReader.html#setLenient(boolean)\n\nYour best bet is to avoid the avoid unnecessary commas in your documents. \nUsually machine-generated JSON won't have them.\n```\n\nOriginal comment by `limpbizkit` on 12 Jan 2012 at 3:58\n- Changed state: **WontFix**\n =||= ```\nCould you kindly reconsider this?\n\nWhen writing the json manually (what I do quite often as I use it for \nconfiguration)\nthe trailing comma bites me quite often. Lenient mode doesn't help here at all \nas the null leads to worse problems later.\n\nNote that both Java and Javascript allow and IGNORE trailing commas in array \ninitializers, see\nhttp://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.6\nhttp://ecma262-5.com/ELS5_HTML.htm#Section_11.1.5\nMaybe one day JSON will too as it's very practical.\n\nIn most browsers \"[1,, 2,]\" is the same as \"[1, null, 2]\", since the trailing \ncomma gets ignored and only the others get interpreted as nulls.\n\nThe needed change is very trivial (just drop the condition above the comment \n`fall-through to handle \",]\"`).\n\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 29 Jul 2012 at 8:58\n =||= Is there a workaround for this? =||= ", 0], ["402", "Memory Leak in web application", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:39 PM", "```\nWhat steps will reproduce the problem?\n1. Use on web application / Tomcat , view log\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nExpected None / Warning\n\nWhat version of the product are you using? On what operating system?\nCentOS/ Apache Tomcat Version 7.0.12\n\nPlease provide any additional information below.\n\nJan 26, 2012 12:09:41 AM org.apache.catalina.loader.WebappClassLoader \ncheckThreadLocalMapForLeaks\nSEVERE: The web application [] created a ThreadLocal with key of type \n[com.google.gson.internal.bind.MiniGson$1] (value \n[com.google.gson.internal.bind.MiniGson$1@73055179]) and a value of type \n[java.util.HashMap] (value [{}]) but failed to remove it when the web \napplication was stopped. Threads are going to be renewed over time to try and \navoid a probable memory leak.\n```\n\nOriginal issue reported on code.google.com by `a...@aniljava.com` on 26 Jan 2012 at 6:17", "```\nAdditional INFO:\nUsing Gson as :\n\nString gson = new Gson().toJson(<java.util.Map instance>);\n\nMap<String, String> responseMap = new Gson().fromJson(responseJSON, Map.class); \n//not related to first\n\n```\n\nOriginal comment by `a...@aniljava.com` on 26 Jan 2012 at 6:21\n =||= ```\nThis is just a stupid warning from Tomcat. Ignore the warning, and consider \nupgrading to a better servlet container.\n```\n\nOriginal comment by `limpbizkit` on 27 Jan 2012 at 4:31\n- Changed state: **WontFix**\n =||= ```\nDoes this mean the warning is not something to worry about?\n```\n\nOriginal comment by `phil...@gmail.com` on 6 Feb 2012 at 4:36\n =||= ```\nYeah, or you could report this as a bug to the Tomcat maintainers.\n```\n\nOriginal comment by `limpbizkit` on 6 Feb 2012 at 1:26\n =||= ```\nI usually agree that these warning messages are dumb; I think there is some \nmerit to to this one. Hear me out based on my reading of the code.\n\nStart here:\nhttp://docs.oracle.com/javase/6/docs/api/java/lang/ThreadLocal.html\n\nThreadLocal instances are typically private static fields in classes that wish \nto associate state with a thread (e.g., a user ID or Transaction ID).\n\n\nWhenever I've used ThreadLocals they are static members of the class. I'm \ncertainly willing to entertain other use cases. The use in Gson appears to be a \nperformance cache.\n\nI had a use case where I created a new Gson() on every request.  It ended up \nassociating a ThreadLocal on the servlet container thread.  Until the container \nthread was GC'd these ThreadLocal's were continually associated with the \ncontainer thread. I had several thousand of these warnings get printed out on \nshutdown. Not that big of a deal because these are pretty small; but it doesn't \ngive me the warm and fuzzy that this is as right as it should be.\n\nI think it would be more correct if the ThreadLocal inside Gson was static to \nthe class.\n\nMy $.02\n\n```\n\nOriginal comment by `marty.r...@gmail.com` on 6 Feb 2012 at 8:32\n =||= ```\nGson's ThreadLocal is not a performance cache. Its for detecting reentrancy in \nTypeAdapters. Making it static would make it incorrect. \n\nThe GC can collect ThreadLocal instances in the same way that it collects \ninstances of any other type. If you create a Gson instance and release it, \nthere is no leak.\n\nThe only potential for leak here is that we create up to one (empty) HashMap \nper live Gson instance per live thread. Most applications have a limited number \nof live Gson instances: they either create them and discard them (zero long \nlasting instances) or create one and reuse it (one long lasting instance.)\n```\n\nOriginal comment by `jessewil...@google.com` on 7 Feb 2012 at 3:15\n =||= ```\nhi,\n\ni have the same problem. and it is not as stupid warning from tomcat. a \nthreadlocal value will be put in the threadlocalmap which is an instance \nvariable in the Thread-class. so every object here must be removed in a \nserverside application. \n\nthe problem arises, when you stop your application or redeploy it. there is a \ngson-instance in the threadlocalmap and because this is directly referenced \nfrom thread, this value lives as long as the thread in the server (well, \nforever). the situtation becomes really worse, when you profile the memory: the \ngson-object has my \"webappclassloader\" as classloader and this classloader is \nalso not gc'd. this classloader (as every classloader) caches all classes which \nare loaded with it, so all my classes (and my webapp-library-classes) are also \nnot GC'd. and every static variable in my classes (and my library classes) are \nalso not GC'd. \n\nplease profile a simple webapplication with your gson-threadlocal and undeploy \nthe application in the container. you will see, that your \napplicationcode/-classes still is/are referenced by the webappclassloader which \nis referenced by a value which is referenced by a threadlocal-variable. so i \nthink: tomcat is correct, this is probably a memory leak!\n\nlast but not least: yes, a threalocal can be GC'd like every other object in \njava. but the value in the threadlocal is directly referenced by the current \nthread, so in a serverside application the value in the threadlocal is never \nGC'd as long the thread exists.\n\nplease think about it.\n\n\n\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 3 Mar 2012 at 8:24\n =||= ```\n@ulrich apologies for the delayed reply.\n\nIn your redeploy scenario what exactly is causing objects to leak? The \nThreadLocal should be collected when nothing references it, and nothing \nreferences it. There might be a bug in the silly Tomcat diagnostic code.\n```\n\nOriginal comment by `jessewil...@google.com` on 22 Mar 2012 at 10:30\n =||= ```\nHi\n\njava.lang.Thread references every threadlocal (real tricky). Tomcat only looks \nfor values in the threadlocalmap (instancevariable from java.lang.Thread) and \nissues this warning. So i think it is not a silly warning: the value is not \ngc'd, it is referenced.\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 23 Mar 2012 at 3:28\n =||= ```\nif tomcat is what's broken, maybe an interested party could provide a patch for \ntomcat? if a bug is filed with them, post about it here; i am not able to find \none.\n```\n\nOriginal comment by `jon.shu...@gmail.com` on 20 Jul 2012 at 8:19\n =||= ```\ntomcat isn't broken. it does correctly warn that a value is not GC'd. and \ntomcat is right, the value is not gc'd.\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 21 Jul 2012 at 4:07\n =||= ```\nAny chance of this issue being reconsidered, or at least a workaround being \ninvestigated? In light of @ulrich's comments, this looks like a valid issue.\n```\n\nOriginal comment by `rob.c...@gmail.com` on 16 Oct 2012 at 11:40\n =||= ```\nThe project members here are wrong. Tomcat's warning is valid.\n\nWhen you store an object o in a static ThreadLocal tl, it essentially gets \nstored in a map m in the thread t as an entry of the form WeakReference(tl) -> \no. If t enternally lives in a pool, as is common in servlet containers, m will \nnever be GCed so in order to free the entry, tl must be GCed or o must be \nremoved from it. However, neither of these will happen if you have a static \nGson that you never null out.\n\nNow see the problem: t references m, which references o, which references o's \nclass, which references the webapp's class loader, which references the class \ncontaining the Gson, which references tl, so this whole object graph won't be \nGCed. Thus the webapp's class loader and all of its classes are stuck in memory \neven if you undeploy it.\n```\n\nOriginal comment by `j...@dataminr.com` on 17 Oct 2012 at 2:10\n =||= ```\nI think I might have worked around the problem with r1214.  The issue isn't \nthat the ThreadLocal knows about any application classes; it's just that I'm \n*subclassing* thread local (as it is intended to be) and that's preventing \nunloading.\n\nThe correct fix for this problem is for Tomcat to not reuse threads once an \napplications has been unloaded. Threads are not stateless! Tomcat's shared \nthread pool is a broken optimization that's the root cause of this trouble. But \nI suspect it's a lot harder to fix Tomcat than it is to work around the problem \nin Gson, so we work around the problem in Gson. Sigh.\n```\n\nOriginal comment by `limpbizkit` on 23 Oct 2012 at 2:46\n =||= ```\nSorry, but i think you are wrong :-)\n\nHere:\nhttps://sites.google.com/site/gson/gson-user-guide#TOC-Gson-Performance-and-Scal\nability\n\nyou can read this:\n=====\nThe Gson instance does not maintain any state while invoking Json operations. \nSo, you are free to reuse the same object for multiple Json serialization and \ndeserialization operations.\n=====\n\nSo most people who are using gson in serverside apps use a single instance \n(static instance variable of type Gson). As long as this instance lives, the \nincluded ThreadLocal instancevariable is not GC'd. And now read comment 13 \nagain. \n\nBtw: this is not an issue in tomcat, it is also an issue in websphere (i had a \ncomparable issue with WAS7) and i think in weblogic, ... an dany server which \nuses a threadpool. the difference between tomcat an this servers is that tomcat \nissues a warning, the others don't. but the memoryleak exists (believe me, we \nhad a lot of work with a websphere-app and threadlocals which were not cleared; \nmany many libraries put threadlocals but don't clear them).\n\nAnd it cannot be fixed in any of these servers, it is a issue in JRE, because \nthe values in the TL are referenced from the thread as long as the TL lives. \nThe \"Thread.threadlocalMap\" is a map for \"global variables in the thread \nscope\". if you put values in this scope you should clear them out later. Tomcat \nissues a warning that there are values in this map which were not cleared. \n\nAs Gson does not start the thread, Gson should not take assumptions about the \nlifecycle of a thread. You are taking the assumption, that a thread should be \nthrown away after it handled a request. That's wrong for most servers. \n\nI think your Gson class needs some sort of \"clear\" Method; or the people should \nbe informed that a Gson-Instance does not clear it's state in the thread scope \nand it would be better to NOT use a single instance of type \"Gson\".\n\n\n\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 23 Oct 2012 at 4:53\n =||= ```\nI don't know if a \"clear\" method would make sense given that you could just \nnull out the Gson reference. Perhaps a cleaner resolution would be to stop \nusing a ThreadLocal and instead pass state in the [de]serialization context.\n```\n\nOriginal comment by `j...@dataminr.com` on 23 Oct 2012 at 2:19\n =||= ```\nAnd how would one null out this ThreadLocal reference created by Gson ?\n```\n\nOriginal comment by `mich...@newsrx.com` on 19 Dec 2012 at 9:01\n =||= ```\nNull out the Gson reference; then it and its ThreadLocal get GCed.\n```\n\nOriginal comment by `j...@dataminr.com` on 19 Dec 2012 at 11:27\n =||= ```\nI switched to creating the Gson instances on demand so that they would \nhopefully get GCed as soon as scope changed, and now I get hundreds of of:\n\ncreated a ThreadLocal with key of type [com.google.gson.Gson$1] (value \n[com.google.gson.Gson$1@4ea55a96]) and a value of type [java.util.HashMap] \n(value [{}]) but failed to remove it when the web application was stopped. \nThreads are going to be renewed over time to try and avoid a probable memory \nleak.\n\nCan a way be added to EXPLICITLY permit request for thread destruction via a \nstatic class method call?\n```\n\nOriginal comment by `mich...@newsrx.com` on 31 Jan 2013 at 3:48\n =||= ```\n@18\n\nI null out the reference in contextDestroyed and still get the warnings.\n```\n\nOriginal comment by `edychen` on 4 Mar 2013 at 8:22\n =||= ```\nI think you cannot null out the reference because \njava.lang.ThreadLocal.ThreadLocalMap still references the values. ThreadLocal's \nmust be cleared explictly and in the same thread as the were filled with a \nvalue, because the \"current thread\" is the key in the map. So really don't try \nto clear the values in \"contextDestroyed\".\n\nI think you have to live with it ... it is a bug in a library :-)\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 5 Mar 2013 at 5:46\n =||= ```\n>> ThreadLocal's must be cleared explictly and in the same thread as the were \nfilled with a value, because the \"current thread\" is the key in the map.\n\nPlease explain how i can do that. (Code-Sample?)\nOr exists in the meantime an other workaround to face this problem?\nMy Provider don't allow my Webapp to be deployed because of this issue so this \nis a very critical problem for me.\n\n```\n\nOriginal comment by `hannes.w...@gmail.com` on 27 Mar 2013 at 10:16\n =||= ```\nSince I just started using Apache ActiveMQ, which is bundled with TomEE\n(tomcat7), I see more threadlocals in my tomee/tomcat7 log when shutting\ndown the container.\n\nSo, I did some research, and I think I found an ActiveMQ\nissue/mail-discussion-thread which discussed this; i think the ActiveMQ\nJIRA/issue was the better thread to follow, and I saw a recommendation\nthere that stated that this is a classloader issue; if the library that is\ncausing the issue is in your tomcat/lib folder, then move it to the\nweb-inf/... folder, and IIRC, problem can be solved that way.\n\nI have not tried that, since TomEE bundles ActiveMQ library in tomee/lib\nfolder, I prefer not to de-bundle activeMQ from TomEE, and I really don't\nhave an issue with the threadlocals reported in the log when shutting down\ntomee/tomcat7.\n```\n\nOriginal comment by `smithh03...@gmail.com` on 27 Mar 2013 at 11:34\n =||= ```\nI don't think you can solve the issue by putting the library in the web-inf/lib \nfolder (most people do this). The problem here is that the systemclassloader \nfrom java itself references the value which is not cleared because ThreadLocal \n(and ThreadLocalMap) are standard java classes and they \"glue\" the value to the \ncurrent thread. if they reference a value which was loaded by a different \nclassloader, this value (and the classes and everything hanging behind) will \nnot be gc'ed. so a higher-order classloader references a \napplication-classloader. no chance.\n\nyou have to live with it: if you use gson, you have this bug. and the team will \nnot fix it because they think it is not a bug.\n\n\n\n```\n\nOriginal comment by `ulrich.s...@gmail.com` on 29 Mar 2013 at 1:06\n =||= ```\nI believe this code solves the issue, at least in Java 7 and Gson 2.2.2. Just \ncall it when your webapp shuts down. But I don't use Tomcat currently so I \nhaven't tested it in action. (Of course, it isn't exactly the epitome of \nelegance and isn't at all portable...)\n```\n\nOriginal comment by `j...@dataminr.com` on 29 Mar 2013 at 2:54\n\nAttachments:\n- [GSONThreadLocalImmolater.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-402/comment-25/GSONThreadLocalImmolater.java)\n =||= ```\nI tried the GSONThreadLocalImmolater and tested.\n\n1. added the class, without 'main()', to my project (web app running on\ntomcat/tomee)\n\n2. added the following to @PreDestroy method of CDI @ApplicationScoped bean\n\n    try {\n        Integer threadLocalCount;\n        GSONThreadLocalImmolater gsonImmolator = new\nGSONThreadLocalImmolater();\n        threadLocalCount = gsonImmolator.immolate();\n        logger.info(\"gsonImmolator.immolate() completed: immolated \" +\n                    threadLocalCount + \" GSON values in ThreadLocals\");\n    } catch (Exception e) {\n        logger.info(\"caught exception raised by gsonImmolator.immolate()\",\ne);\n    } finally {\n        // do nothing\n    }\n\n\n3. Ran the web app, executed part of app that has gson dependency, exited\nthe app, and shutdown tomee/tomcat7. below is what was in the log\n\nMar 29, 2013 1:11:01 PM pf.ApplicationScopeBean destroy\nINFO: gsonImmolator.immolate() completed: immolated 1 GSON values in\nThreadLocals\nMar 29, 2013 1:11:01 PM pf.ApplicationScopeBean destroy\nINFO: END\n\n4. Voila, that looks good, that it immolated '1' GSON value in\nThreadLocals, because when I usually stop tomee/tomcat7 on production\nserver, I see the following (which was possibly immolated on my development\nserver, just now)\n\nMar 28, 2013 9:27:00 PM org.apache.catalina.loader.WebappClassLoader\ncheckThreadLocalMapForLeaks\nSEVERE: The web application [/mcmsweb] created a ThreadLocal with key of\ntype [com.google.gson.Gson$1] (value [com.google.gson.Gson$1@e9a08f7]) and\na value of type [java.util.HashMap] (value [{}]) but failed to remove it\nwhen the web application was stopped. Threads are going to be renewed over\ntime to try and avoid a probable memory leak.\n\n\n5. Now, '1' threadlocal down and 'more' to go, since I still get the\nfollowing in my log after shutting down tomee/tomcat7. Thanks!\n\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [PoolIdleReleaseTimer] but has failed to stop it. This is very likely\nto create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [Default JMS Resource Adapter-worker-1] but has failed to stop it.\nThis is very likely to create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [Default JMS Resource Adapter-worker-2] but has failed to stop it.\nThis is very likely to create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [ActiveMQ VMTransport: vm://localhost#5-2] but has failed to stop it.\nThis is very likely to create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [ActiveMQ VMTransport: vm://localhost#5-3] but has failed to stop it.\nThis is very likely to create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\nclearReferencesThreads\nSEVERE: The web application [/mcmsweb] appears to have started a thread\nnamed [ActiveMQ VMTransport: vm://localhost#4-3] but has failed to stop it.\nThis is very likely to create a memory leak.\nMar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader\ncheckThreadLocalMapForLeaks\nSEVERE: The web application [/mcmsweb] created a ThreadLocal with key of\ntype [com.google.api.client.util.escape.Platform$1] (value\n[com.google.api.client.util.escape.Platform$1@30b7785e]) and a value of\ntype [char[]] (value [[C@5d3f7c4e]) but failed to remove it when the web\napplication was stopped. Threads are going to be renewed over time to try\nand avoid a probable memory leak.\n```\n\nOriginal comment by `smithh03...@gmail.com` on 29 Mar 2013 at 5:58\n =||= ```\nThat code works great. I tweaked the code, removed the IF which checks if the \nclass is 'Gson.class', and just let it run through all threadlocals != null, \nand now all of my threadlocals are cleared!\n\nKindly, disregard the last part of my previous response; after doing some \ntesting and reviewing the threads in Java Visual VM, I see that the ActiveMQ \nthreads are cleared as well, most likely because the following occurs last \n(after catalina's WebappClassLoader checkThreadLocalMapForLeaks) :\n\nMar 29, 2013 6:05:43 PM \norg.apache.openejb.resource.activemq.ActiveMQResourceAdapter stop\nINFO: Stopping ActiveMQ\nMar 29, 2013 6:05:43 PM \norg.apache.openejb.resource.activemq.ActiveMQResourceAdapter stopImpl\nINFO: Stopped ActiveMQ broker\n\n```\n\nOriginal comment by `smithh03...@gmail.com` on 29 Mar 2013 at 10:20\n =||= ```\nI don't know if it's wise to clear all ThreadLocals because you could be \nclearing state necessary for the standard library or Tomcat or something else. \nEven if the appears to work, it might cause things to fail in subtle ways, and \nif you upgrade Tomcat or Java, it might cause different things to fail. The \ncode was hacky enough in its original form.\n```\n\nOriginal comment by `j...@dataminr.com` on 29 Mar 2013 at 10:32\n =||= ```\nUnderstood, thanks.\n```\n\nOriginal comment by `smithh03...@gmail.com` on 29 Mar 2013 at 10:35\n =||= ```\n[deleted comment]\n```\n =||= ```\nIt is worth noting that this issue seems to have been addressed in revision \n1223 of the code: http://code.google.com/p/google-gson/source/detail?r=1223\n\nThis change was part of release 2.2.3 of the Gson library.\n\nBasic tests (deploy webapp, perform serialization, undeploy webapp) show that \nTomcat reports warnings of the type as discussed in this issue for version \n2.2.2 of Gson, but does not report this type of warnings when using versions \n2.2.3 or 2.2.4.\n```\n\nOriginal comment by `Guus.der...@gmail.com` on 24 Jul 2013 at 1:26\n =||= ```\nSince this issue has been resolved can we have it marked as resolved? As it \ncurrently stands you have to read all the way to the bottom to find out that \nit's been fixed and the current status of \"wontfix\" makes it seem like wasted \neffort.\n\nI'm also just going to mention that I've had this issue while using Netty and \nGson 2.2.2 instead of Tomcat just so that anybody else in a similar situation \ncan more easily find the solution to this issue.\n```\n\nOriginal comment by `sam.peng...@gmail.com` on 24 Feb 2014 at 5:56\n =||= ```\nEchoing Sam. Please mark as issue as resolved. I just wasted 15 minutes only to \nfind out it was fixed it with 2.2.3.\n```\n\nOriginal comment by `thomashu...@gmail.com` on 8 Apr 2014 at 9:39\n =||= Sorry to comment on an old thread, but just had this issue and wanted to point to the specific commit that appears to have solved the issue. As stated this is in 2.2.3 onwards.\r\nhttps://github.com/google/gson/commit/6dc6b4be9208221caad81b52aec665f133b5e9af\r\n\r\n =||= ", 0], ["403", "Application has crashes when using Gson library in multithreading environment on Android 3.2 (Acer a100)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:46 PM", "```\nWe use Gson library 2.0 in our application and find that it is unstable in \nmultithreading environment on Acer A100 device (Android 3.2) - see test \napplication, that crashed every time with different type of exceptions on A100 \nif we use several threads. If we call fromJson method in one thread or use \nsyncronized block on it - it's work fine. On other device and on Android 3.2 \nemulator test application work fine independently on treads count.\n\nP.S. in test app we apply fix from Issue 255 \n(http://code.google.com/p/google-gson/issues/detail?id=255), but original gson \nlib have the same behaviour on Acer A100.\n```\n\nOriginal issue reported on code.google.com by `effectiv...@gmail.com` on 31 Jan 2012 at 8:48\n- Merged into: #255\n\nAttachments:\n- [jsontest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-0/jsontest.zip)\n- [jsontest.apk](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-0/jsontest.apk)", "```\nYou need to apply the fix from 255. I recommend jarjar; others have had success \nwith proguard.\n```\n\nOriginal comment by `limpbizkit` on 31 Jan 2012 at 1:56\n- Changed state: **Duplicate**\n =||= ```\nwe apply this fix (255), but nothing changes - the app still crashes on Acer \nA100 devices\n```\n\nOriginal comment by `effectiv...@gmail.com` on 1 Feb 2012 at 6:20\n =||= ```\nCan you paste a stacktrace? I don't have an A100 to test with.\n```\n\nOriginal comment by `jessewil...@google.com` on 2 Feb 2012 at 6:36\n =||= ```\nyes, we have several acer devices and we can test all proposed solutions or \nprepare additional information about this issue\n```\n\nOriginal comment by `effectiv...@gmail.com` on 2 Feb 2012 at 7:08\n\nAttachments:\n- [acer_log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log1.zip)\n- [acer_log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log2.zip)\n- [acer_log3.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log3.zip)\n- [acer_log4.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log4.zip)\n =||= ```\nCan you still reproduce on Gson 2.1? Some classes from your stacktrace like \nModifierBasedExclusionStrategy don't exist in Gson 2.1.\n```\n\nOriginal comment by `limpbizkit` on 2 Feb 2012 at 7:13\n =||= ```\nThe device is broken and should be returned to the manufacturer. \nModifierBasedExclusionStrategy.shouldSkipField doesn't even call \nArrayList.add(). \n\n02-02 10:05:35.500: E/AndroidRuntime(1352): \njava.lang.ArrayIndexOutOfBoundsException: index=1081965120 length=0\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \njava.util.ArrayList.add(ArrayList.java:124)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.ModifierBasedExclusionStrategy.shouldSkipField(ModifierBasedEx\nclusionStrategy.java:42)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.DisjunctionExclusionStrategy.shouldSkipField(DisjunctionExclus\nionStrategy.java:38)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.Gson$1.deserializeField(Gson.java:225)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Refl\nectiveTypeAdapterFactory.java:107)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTy\npeAdapterFactory.java:65)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:\n45)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Reflective\nTypeAdapterFactory.java:75)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Re\nflectiveTypeAdapterFactory.java:74)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Refl\nectiveTypeAdapterFactory.java:112)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTy\npeAdapterFactory.java:65)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.Gson.fromJson(Gson.java:719)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.Gson.fromJson(Gson.java:686)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.Gson.fromJson(Gson.java:636)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.google.myjson.Gson.fromJson(Gson.java:608)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \ncom.gson.test.JsontestActivity$ParseRunnable.run(JsontestActivity.java:86)\n02-02 10:05:35.500: E/AndroidRuntime(1352):     at \njava.lang.Thread.run(Thread.java:1020)\n```\n\nOriginal comment by `limpbizkit` on 2 Feb 2012 at 7:20\n =||= ```\n[deleted comment]\n```\n =||= ```\nunfortunately, gson-2.1 also crashed on Acer (see attached). We have several \nAcer a100 devices and all of them has the same problems with gson, all other \napplication work normally - we think the manufacturer will not accept claims \nfor non-working device based on one issue.\n```\n\nOriginal comment by `effectiv...@gmail.com` on 3 Feb 2012 at 8:22\n\nAttachments:\n- [acer_gson21_log.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log.zip)\n- [acer_gson21_log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log1.zip)\n- [acer_gson21_log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log2.zip)\n =||= ", 0], ["404", "TypeAdapter issue", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:49 PM", "```\nTypeAdapter for String.Class doesn't work on gson 2.1 (was working on previous \nversion)\n\n\nhere a small test case:\n\nexpected output should be \"test\", but i got \"candy\" instead.\nNote: this issue is only relative to the current 'stable' release.\n\n------\npublic class TestCase {\n\n    public static void main(String[] args) {\n\n        String test = \"candy\";\n        Gson gson = new GsonBuilder()\n                .excludeFieldsWithModifiers(java.lang.reflect.Modifier.TRANSIENT)\n                .registerTypeAdapter(String.class, new JsonSerializer<String>() {\n                    public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n                        return new JsonPrimitive(\"test\");\n                    }\n                }).setPrettyPrinting().create();\n        System.out.println(gson.toJson(test, String.class));\n    }\n\n}\n\n\n\n```\n\nOriginal issue reported on code.google.com by `ramarr...@gmail.com` on 1 Feb 2012 at 9:01", "```\nThis was a difficult, but intentional decision. Why do you want to register a \ntype adapter for String?\n\n\n```\n\nOriginal comment by `limpbizkit` on 2 Feb 2012 at 6:27\n- Changed state: **Accepted**\n =||= ```\nsometimes a string can contain data (xml) that have to be handled in a specific \nway.\n\nIn my scenario, i use xml -> string to serialize an xml via socket between 2 \napp (and writing them on DB)\n\nxml implementation isn't serializable (so, i have to do a conversion to string)\n\nnow, after all the trip (sending data via java serialization, write them on db, \nsending results back) i want to dump the result to a js client, that work \nbetter with json.\n\non 1.7.2 i add a typeadapter that try to detect if a string is an xml (contains \n/> or > or something like that, i haven't the code here) and if so, do a custom \nserialization before send it out.\n\nObviusly i can rewrote all the serialization layer, but this will be time \nconsuming.\nWhat i have found convenient, is to wrap my request/response bean, make the \nstring that contain xml not gson_able (via notation) and make a getter to write \non the wrapper the XML element that i need.\nThen, i use the typeAdapter registered with Xml.Class and make here the custom \nserialization.\n\nThe only issue is that i have to write more code :(\n\nThe other option is to make XML serializable, and this will solve all my issue. \nUnfortunatly this solution isn't feasable due to implementation of XML library \n(can be probably wrapped as well, with some externalizable stuff, but again is \ntime consuming)\n\n\n\n```\n\nOriginal comment by `ramarr...@gmail.com` on 6 Feb 2012 at 8:05\n =||= ```\nPresumably you know which of your strings are eligible to be XML. Create a type \nXmlOrString and use that in the appropriate fields. Then register a type \nadapter for that type.\n\nclass XmlOrString {\n  Document xml;\n  String string;\n}\n```\n\nOriginal comment by `limpbizkit` on 6 Feb 2012 at 1:42\n =||= ```\nIn your example, XmlOrString isn't serializable (as i state before,\nXML /our impl of XML dom/ isn't serializable, due to high resource\nneed to perform the serialization. Same issue appen on dom4j for\nexample)\n```\n\nOriginal comment by `ramarr...@gmail.com` on 6 Feb 2012 at 7:00\n =||= ```\nWhat does serialization have to do with Gson?\n\nI'm marking this as won't fix just 'cause I don't think your use case is \ntypical!\n```\n\nOriginal comment by `limpbizkit` on 11 Feb 2012 at 6:30\n- Changed state: **WontFix**\n =||= ", 0], ["405", "Gson 1.7.1 - Gson.toJson(myObject) causes StackOverflowError on com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:50 PM", "```\nWhen calling the following code from a Tomcat servlet:\n\nGson myjson = new Gson();\nString json = myjson.toJson(myObject);\nmyjsons.add(json);\n\nWe get a stack overflow error: \n\njava.lang.StackOverflowError\n        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:141)\n        .....\n        .....\n        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)\n        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)\n        com.google.gson.ObjectTypePair.getMatchingHandler(ObjectTypePair.java:66)\n        com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:176)\n        com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:160)\n        com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)\n        com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)\n        com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)\n        com.google.gson.Gson.toJsonTree(Gson.java:220)\n        com.google.gson.Gson.toJson(Gson.java:260)\n        com.google.gson.Gson.toJson(Gson.java:240)\n\nmyObject is an instance of: \n\npublic class MyObject\n{\npublic String a;\n   public String b;\n   public String c;\n   public String d;\n   public String e;\n   public String f;\n   public String g;\n   public String h;\n   public String i;\n   public String j;\n\n   public void init()\n   {\n     this.a= \"\";\n     this.b= \"\";\n     this.c= \"\";\n     this.d= \"\";\n     this.e= \"\";\n     this.f= \"\";\n     this.g= \"\";\n     this.h= \"\";\n     this.i= \"\";\n     this.j= \"\";\n   }\n}\n\nHere is the weird part... it seems to be related to Tomcat redeploys. If we \nredeploy tomcat and try again, sometimes (randomly) the stack overflow no \nlonger occurs and it will continue to work until the next redeploy. \n\nWhy would redeploying Tomcat have an affect on the Gson library? \n\n\n```\n\nOriginal issue reported on code.google.com by `nicholas...@gmail.com` on 2 Feb 2012 at 3:14", "```\nUpgrading to latest version seemed to eliminate the error (not sure why). \n```\n\nOriginal comment by `nicholas...@gmail.com` on 2 Feb 2012 at 10:35\n =||= Original comment by `limpbizkit` on 3 Feb 2012 at 2:42\n- Changed state: **WontFix**\n =||= ", 0], ["407", "Trailing slash in array caused null value in output", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:51 PM", "```\nWhat steps will reproduce the problem?\nArrayList<Integer> list = gson.fromJson(\"[1,2,3,]\", new \nTypeToken<ArrayList<Integer>>() {}.getType());\neither: fail(\"Expected trailing slash to give error\");\nor if super-lenient: assertEquals(3, list.size());\n\nWhat is the expected output? What do you see instead?\nShould fail according to the syntax diagram on http://json.org, or give an \nArrayList<Integer> with three elements [1, 2, 3] if we want to emulate \nJavaScript's lenient behaviour.\n\nWhat version of the product are you using? On what operating system?\n2.1\n\n```\n\nOriginal issue reported on code.google.com by `martinpr...@google.com` on 8 Feb 2012 at 2:12", "```\nBy the way, the actual behaviour (how could I miss that...) is to return the \nlist [1, 2, 3, null], where the null is the obvious problem.\n```\n\nOriginal comment by `martinpr...@google.com` on 8 Feb 2012 at 6:56\n =||= ```\nGson is emulating the original implementation of org.json; it might be the \nwrong choice but I'd prefer not to change it for backwards compatibility.\n\nIf you'd prefer for it to crash, use TypeAdapter rather than fromJson():\n  TypeAdapter<List<Integer>> typeAdapter = gson.getAdapter(new TypeToken<List<Integer>>() {});\n  List<Integer> list = typeAdapter.read(\"[1,2,3,]\");\n\nThis will throw. The new TypeAdapter APIs are strict about ',' whereas \nGson.fromJson is lenient.\n```\n\nOriginal comment by `limpbizkit` on 9 Feb 2012 at 12:59\n- Changed state: **WontFix**\n =||= ", 0], ["408", "Get NullPointer Exeption when parsing a Map<String,Map<String,String> object.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:52 PM", "```\nWhat steps will reproduce the problem?\n1.\nAccording to documentation the following code should work:\n<code>\nMap<String,Map<String,String>> map = new HashMap<String,Map<String,String>>();\nHashMap<String, String> vals = new HashMap<String,String>();\nvals.put(\"memo\", \"tired\");\nvals.put(\"mem\", \"lome\");\nmap.put( \"hello\",  vals);\n\nString str = gson.toJson(map);\nSystem.out.println(str);\nType type2 = new TypeToken<Map<String,Map<String,String>>>(){}.getType();\nString str2 = gson.toJson(map, type2);\nSystem.out.println(str2);\n\nMap<String,Map<String,String>> map2 =\n            gson.fromJson(str2, type2);\n</code>\nThe Type object is being created to tell json the nested types that it should \nlook for.\nHowever, I get this error:\n<error>\n{\"hello\":{\"memo\":\"tired\",\"mem\":\"lome\"}}\nException in thread \"main\" java.lang.NullPointerException\n    at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)\n    at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:146)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:721)\n    at com.google.gson.Gson.fromJson(Gson.java:670)\n    at RawCollectionsExample.main(RawCollectionsExample.java:80)\n</error>\nNotice that the json string is created correctly.  \n\nWhat is the expected output? What do you see instead?\nThe output should be the map<string,map<string,string> back to its form.  \n\n\nWhat version of the product are you using? On what operating system?\nGson 2.1 release \nhttp://code.google.com/p/google-gson/downloads/detail?name=google-gson-2.1-relea\nse.zip&can=2&q=\nThis is happening on Kubuntu 11.10(x86_64).  Java version\njava version \"1.6.0_30\"\nJava(TM) SE Runtime Environment (build 1.6.0_30-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 20.5-b03, mixed mode)\nkernel = 3.0.0-15-generic\n\n\nPlease provide any additional information below.\n```\n\nOriginal issue reported on code.google.com by `jeremyvillalobos` on 10 Feb 2012 at 6:52", "```\nI'm guessing you have both gson.jar AND gson-stream.jar on your class path; \nthat won't work.\n\nThe problem is that in Gson 2.1 we have a custom version of JsonReader that \nadds some secret hooks to make MapTypeAdatperFactory faster; these hooks won't \nwork with gson-stream.jar's version of JsonReader.\n```\n\nOriginal comment by `limpbizkit` on 11 Feb 2012 at 6:25\n- Changed state: **Invalid**\n =||= ```\nYes, that was it.\n```\n\nOriginal comment by `jeremyvillalobos` on 17 Apr 2012 at 11:18\n =||= ```\nThanks a lot. Helped me too\n```\n\nOriginal comment by `abiram...@gmail.com` on 19 Dec 2012 at 9:16\n =||= ```\nThanks a lot. Helped me too\n```\n\nOriginal comment by `abiram...@gmail.com` on 19 Dec 2012 at 9:16\n =||= ", 0], ["409", "ArrayIndexOutOfBoundsException on parsing \"/\" as a JSON document", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:53 PM", "```\nIt's an invalid document but we're crashing the wrong way. The problem has to \ndo with how we handle the nonexecute prefix. We might have a more severe \nproblem hiding here, particularly for source readers that feed data one \ncharacter at a time.\n\n  public void testStringEndingInSlash() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(\"/\"));\n    reader.setLenient(true);\n    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n  }\n\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 11 Feb 2012 at 7:51", "Original comment by `limpbizkit` on 18 Mar 2012 at 6:16\n- Changed state: **Fixed**\n =||= ", 0], ["412", "StackOverflowError on Logger", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:56 PM", "```\nI incorrectly used a logger in a class by forgetting the declaration to static.\nI wanted to make a Json String out of the object of the class by the following \nway:\n\nGson gson = new Gson();\nString json = gson.toJson(o, o.getClass());\n\nThere comes a java.lang.StackOverflowError exception, as you can see in my \nattachment.\nWhen I declared the logger correctly, everything was fine.\n\nMy configuration:\n- gson 2.1\n- Win7, 64bit\n- java6, u24, 64bit\n```\n\nOriginal issue reported on code.google.com by `christia...@gmail.com` on 21 Feb 2012 at 2:12\n\nAttachments:\n- [consoleOutput.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-412/comment-0/consoleOutput.txt)\n- [GsonTester.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-412/comment-0/GsonTester.java)", "Original comment by `limpbizkit` on 18 Mar 2012 at 5:22\n- Changed state: **WontFix**\n =||= ", 0], ["413", "Cannot override default adapter for BigInteger type", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:59 PM", "```\nI've tried \nregisterTypeAdapter(BigInteger.class, new TypeAdapter<BigInteger>()...)\nbut with no success.\n\nThe default behavior is not correct for javascript.\n\nI see solution for Long (setLongSerializationPolicy method).\nBut with BigInteger I gave up and changed the library.\n```\n\nOriginal issue reported on code.google.com by `man...@barco.kiev.ua` on 21 Feb 2012 at 2:49", "```\nYeah, that's definitely a bug. I'm tempted to just make the long serialization \npolicy apply to BigIntegers and BigDecimals. But I know that there's some \ndanger there.\n\nOur best solution will be to make the type adapters for BigInteger and \nBigDecimal user-overrideable in Gson 2.2.\n```\n\nOriginal comment by `limpbizkit` on 25 Feb 2012 at 4:09\n- Changed state: **Accepted**\n =||= ```\nThanks for reporting this. Fixed with r1132.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 5:56\n- Changed state: **Fixed**\n =||= ", 0], ["414", "File object after deserialization has corrupted absolute path", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:31:59 PM", "```\nWhat steps will reproduce the problem?\n1) Create File object with absolute path: File file = new \nFile(\"/tmp/test.txt\"). Output of file.getAbsolutePath() will be \"/tmp/test.txt\"\n2) Create gson string from File oject created in step #1.\n3) Create File object from gson string created in step #2. Output of \nfile.getAbsolutePath() will be \"/current_path/tmp/test.txt\"\n\nWhat is the expected output? What do you see instead?\nExpected output in step #3 is same as on step #1 (\"/tmp/test.txt\"), but path of \ncurrent dir is added in front of original path.\n\nWhat version of the product are you using? On what operating system?\nUsing GSON 2.1, and CentOS. Same issue is on Windows 7 when writing absolute \npaths without disk name, i.e. /tmp/test.txt.\n\nPlease provide any additional information below.\nEverything works well on Windows 7 when writing absolute path with disk name, \ni.e. C:/tmp/test.txt.\nAttached is test file to reproduce that issue.\n\n```\n\nOriginal issue reported on code.google.com by `rimvydas...@gmail.com` on 24 Feb 2012 at 7:01\n\nAttachments:\n- [GsonFileTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-414/comment-0/GsonFileTest.java)", "```\nYou should just create a type adapter for File.\n```\n\nOriginal comment by `limpbizkit` on 25 Feb 2012 at 4:34\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:46\n- Changed state: **WontFix**\n =||= ```\nJesse, Jesse, Jesse. Seriously?\n```\n\nOriginal comment by `ray.ryan` on 10 May 2013 at 10:23\n =||= ```\nThis same issue sprang up today and caused a ton of confusion. Works perfectly \non all OSX versions of Java I've tried, but was causing issues on coworkers' \nWindows7/JDK6 machines. I'm going to add a type adapter to all my projects, but \nit seems like this would be a good candidate for \ncom.google.gson.internal.bind.TypeAdapters\n```\n\nOriginal comment by `prog...@gmail.com` on 15 Aug 2013 at 6:33\n =||= ```\nNot fixing this is a little lame...\nAt least attach a TypeAdapter example on this issue for the next person who \nfaces it.\n```\n\nOriginal comment by `kr...@cwa.to` on 7 Mar 2014 at 12:06\n =||= ``` java\nimport com.google.gson.*;\n\nimport java.io.File;\nimport java.lang.reflect.Type;\n\npublic class FileTypeAdapter implements JsonDeserializer<File> {\n    @Override\n    public File deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        return new File(((JsonObject) json).get(\"path\").getAsString());\n    }\n}\n```\n =||= ", 0], ["416", "Support custom String stub for null values", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:02 PM", "```\nWhat steps will reproduce the problem?\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class GsonNullExample {\n    public static void main(String[] args) {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"key\", null);\n        Gson gson = new GsonBuilder().serializeNulls().create();\n        System.out.println(gson.toJson(map));\n    }\n}\n\n\nWhat is the expected output? What do you see instead?\nThe output is:\n   {\"key\":null}\n\nI would like the option to set a custom value for null, e.g. \"\" :\n   {\"key\":\"\"}\n\nPerhaps serializeNulls() could be overloaded to serializeNulls(String \nnullStringValue), to allow custom String instead of the word \"null\".\n\nWhat version of the product are you using? On what operating system?\ngson 2.1 on Mac OSx using Eclipse.\n\nPlease provide any additional information below.\n```\n\nOriginal issue reported on code.google.com by `a...@matan.name` on 28 Feb 2012 at 5:48", "```\nLow priority. I'm not a fan of the requested behavior.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 5:23\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nThen there's another way to deserialize fields with null value? I'm triying to \ndeserialize a field expecting a string but if it's null it crashes.\n```\n\nOriginal comment by `nagash...@gmail.com` on 20 Mar 2012 at 1:29\n =||= ```\nWe fixed it by allowing you to register a custom type adapter for strings. In \nthis case your type adapter would read in the empty string and write out null, \nand vice versa.\n```\n\nOriginal comment by `limpbizkit` on 1 Jul 2012 at 5:58\n- Changed state: **Fixed**\n =||= ```\nI am using gson-2.2.2.jar. is it solved in release 2.2.2? I added string custom \ntype adapter. It just calls serialize method for non NULL strings. I also build \nGson object using serializeNulls() call. It does not call serialize for NULL \nstring object fields.\n```\n\nOriginal comment by `vinod.el...@gmail.com` on 29 Oct 2012 at 9:31\n =||= This problem still happens on version 2.8.5. =||= ", 0], ["417", "GSON dies with an IllegalStateException with valid json", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:03 PM", "```\n\n// Here is the string gson dies on:\nString json = \"{\\\"coordinates\\\": {\\\"type\\\": \\\"Point\\\", \\\"coordinates\\\": \n[1.41751613, 52.13286294]}\"\n\n// I create my builder as so:\nGson gson = new GsonBuilder().\n            serializeNulls().\n            create();\n// I then use this builder to put this json in a map:\nMap<String,Object> a = gson.fromJson(json, Map.class);\nSystem.out.println(a);\n\nA type-A \"freakout\" ensues. Thoughts?\nMy gson version is 2.1 (using maven to grab that jar)\nMy favourite colour is sometimes green, other times it is blue. \n- Sina\n\n\n```\n\nOriginal issue reported on code.google.com by `sin...@gmail.com` on 2 Mar 2012 at 5:13", "```\nSorry, i saw an error in my test case, and\u2026 yes this is more likely my \nfault\u2026\n```\n\nOriginal comment by `sin...@gmail.com` on 2 Mar 2012 at 5:16\n =||= Original comment by `limpbizkit` on 18 Mar 2012 at 5:23\n- Changed state: **Invalid**\n =||= ", 0], ["418", "Prevent unused field warnings", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:04 PM", "```\nWhen I write a Gson class I end up having to annotate the classes with \n@SuppressWarnings(\"unused\") to prevent unused field warnings.\n\nPlease eliminate these warnings automatically\n\nGoogle Guice somehow accomplishes this, so it's definitely possible.  If you \nneed pointers about under which scenario Guice supresses warnings, let me know \nand I'll add an example.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `glenview...@gmail.com` on 9 Mar 2012 at 7:29", "```\nThere isn't much we can do. Your tools might be suppressing warnings on \nannotated fields; Gson doesn't require annotations so that won't apply.\n\nPerhaps you want to explicitly add an @SerializedName annotation?\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 6:02\n- Changed state: **WontFix**\n =||= ", 0], ["420", "Date parse problem", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:05 PM", "```\nWhat steps will reproduce the problem?\n1. Consume a JSon collection object using java.util.Date\n2. When set the GSonBuilder to use the datePattern \"yyyy-MM-dd\"\n3. Get the unparsable Date\n\nI think it's trying to create a Date using Integer instead of Long.\nToo mainstream.\n\njava.text.ParseException: Unparseable date: \"1323434500000\"\n```\n\nOriginal issue reported on code.google.com by `santana....@gmail.com` on 15 Mar 2012 at 2:15", "```\nCould you provide a complete test case? It looks like your parsing a date \nformatted as a long rather than as a string.\n```\n\nOriginal comment by `limpbizkit` on 18 Mar 2012 at 5:57\n- Changed state: **Invalid**\n =||= ```\nI found the problem.\n\nI was receiving the JSON sometimes with a string date and sometimes with long, \nso I created a TypeAdapter and the problem is resolved.\n\nThanks.\n```\n\nOriginal comment by `santana....@gmail.com` on 18 Mar 2012 at 7:21\n =||= ", 0], ["421", "Should be pass EMPTY DOCUMENT without throwing exception", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:06 PM", "```\nfrom this code \nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/\ngoogle/gson/stream/JsonWriter.java?r=615#416\n\nIt only check for document to end properly, but sometime we just open \nJSonWriter but later logic don't write anything so we just want to close then \nit will throw exception\n\nWhich I think is no need, it should be check or if peek() != \nJsonScope.EMPTY_DOCUMENT too, or changing JsonScope to drop EMPTY and NONEMPTY, \njust check that scope stack is empty and that's all\n```\n\nOriginal issue reported on code.google.com by `thainayu` on 19 Mar 2012 at 7:55", "```\nAn empty string isn't a valid JSON document. Two options:\n- just catch the exception.\n- begin your document with a beginArray() call (unconditionally) and end it \nwith an endArray() call. That'll guarantee your document is never invalid, even \nif your array is empty.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:48\n- Changed state: **WontFix**\n =||= ```\nTHIS IS NOT JSONDOCUMENT BUT A JSONWRITER\n\nIf the logic is creation of \"Writer\" then we may not write anything and we \nclose \"The Writer\" so there are no document\n\nMaking a writer then force it to create document immediately is wrong logic in \nthe first place. Think about OOP then \"Writer\" and \"Document\" is difference \nobject. Creation and Closing \"Writer\" should not always strongly relate to \n\"Document\"\n```\n\nOriginal comment by `thainayu` on 12 Apr 2012 at 6:37\n =||= ", 0], ["422", "Invalid JSON parsed without any notification/exception.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:07 PM", "```\nWhat steps will reproduce the problem?\n1. Create default instance of Gson.\n2. Parse file with fromJson method.\n3. Result list of elements has one empty (excessive) element in the end.\n\nWhat is the expected output? What do you see instead?\nParsingException with message about invalid JSON data.\n\nWhat version of the product are you using? On what operating system?\ngson-2.1.jar on Android\n\nPlease provide any additional information below.\nAttached JSON was reported as invalid on http://jsonlint.com/\n```\n\nOriginal issue reported on code.google.com by `mst...@gmail.com` on 23 Mar 2012 at 9:11\n\nAttachments:\n- [events.json](https://storage.googleapis.com/google-code-attachments/google-gson/issue-422/comment-0/events.json)", "```\nWhen you use Gson.fromJson(json, type), it parses in lenient mode. Changing \nthis would break backwards compatibility.\n\nYou can work around this by calling Gson.getAdapter(type).fromJson(json) which \nwill do a strict parse.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:45\n- Changed state: **WontFix**\n =||= ```\nIn such case it would be nice to have possibility to change lenient/strict \nparse mode(by default let it be lenient mode). It looks not really good to hide \ninformation about invalid JSON.\n```\n\nOriginal comment by `mst...@gmail.com` on 12 Apr 2012 at 5:51\n =||= ", 0], ["423", "Fix Javadoc for JsonReader.endObject()", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:08 PM", "```\nThe Javadoc for endObject() appears to be copied from endArray(), and so states:\n          Consumes the next token from the JSON stream and asserts that it is the end of the current array.\n\nRather than:\n\n          Consumes the next token from the JSON stream and asserts that it is the end of the current object.\n```\n\nOriginal issue reported on code.google.com by `megbec...@gmail.com` on 23 Mar 2012 at 3:24", "Original comment by `limpbizkit` on 11 Apr 2012 at 8:42\n- Changed state: **Accepted**\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= ```\nThis issue was closed by revision r1136.\n```\n\nOriginal comment by `limpbizkit` on 12 Apr 2012 at 6:09\n- Changed state: **Fixed**\n =||= ", 0], ["424", "dangling colon makes gson create a null reference", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:09 PM", "```\nhello everyone,\n\nin my tests, json like this:\n\n{\"a\":[\"x\",\"y\",\"z\",]}\n\ngenerates the \"List<String>a\" as expected, but the size is 4 and the last one \nis null.\n\nthis behavior was not observed at native javascript array length neither in \nlibjson on C application.\n\nIs this the correct behavior and C/Javascript implementations are incorrect?\n\nIt's easy to deal with, yet it was the single discrepacy detected between my 3 \napps consuming the very same json.\n\nT.I.A.\n```\n\nOriginal issue reported on code.google.com by `Sombr...@gmail.com` on 24 Mar 2012 at 3:09", "```\nThe above is not valid JSON. If you want your parsers to all agree, you should \nuse valid JSON.\n\nWe've chosen to insert omitted nulls because that's what early versions of the \norg.json parser did. That was probably the wrong decision. But we're mostly \nstuck with it for backwards compatibility.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:41\n- Changed state: **WontFix**\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ", 0], ["425", "TreeMap getValues() serialization fails with -XX:+AggressiveOpts on Oracle VM", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:10 PM", "```\nWhat steps will reproduce the problem?\n1. Run the attached class on an Oracle (or Apple) VM. Notice the output that \nsays \"*[{\"name\":\"foo\",\"displayName\":\"foo\"}]*\"\n2. Re-run the attached class on the same VM with -XX:+AggressiveOpts . With \nGson 1.7.1 I get \"**\", with 2.1 I get \"*null*\".\n\n\nWhat is the expected output? What do you see instead?\n\nI would expect in both runs that the output would be \n\"*[{\"name\":\"foo\",\"displayName\":\"foo\"}]*\"\n\n\nWhat version of the product are you using? On what operating system?\n\nI've tried with Gson 1.7.1 or 2.1 (didn't really make a difference) on a \nMacBook pro with:\njava version \"1.6.0_29\"\nJava(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)\nJava HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)\n\n\nPlease provide any additional information below.\n\nThe cause seems to be a new TreeMap implementation ( -> \nhttps://blogs.oracle.com/dagastine/entry/apache_harmony_thanks_for_the ) that's \nenabled with that option. On an IBM JVM this new implementation seems to be the \ndefault, so Gson fails \"out of the box\" when running on an IBM JDK.\n\nIf I'm really coding the serialization myself it's of course simple to use \n\n        Type typeOfSrc = new TypeToken<Collection<Dummy>>() {}.getType();\n        gson.toJson(map.values(), typeOfSrc, writer);\n\ninstead of just:\n\n        gson.toJson(map.values(), writer);\n\nBut if Gson is used by an intermediate Framework then I don't have that control \nand would expect that \"built-in\" types work.\n\n\n```\n\nOriginal issue reported on code.google.com by `DerWi...@googlemail.com` on 27 Mar 2012 at 12:53\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-425/comment-0/GsonTest.java)", "```\nThe JVM is incorrect when the -XX:+AggressiveOpts option is used. You shouldn't \nuse that option in your application; it's only intended for foolish \nbenchmarking.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:38\n- Changed state: **WontFix**\n =||= ```\n[deleted comment]\n```\n =||= ```\nWhat about the IBM JVM? Above mentioned example will fail using standard \noptions. Is the coding not supposed to work with an IBM JVM?\nAlso, it could well be that Oracle decides to change the default behaviour of \nthe Oracle JDK, i.e. the coding would fail there too without any \n-XX:+AggressiveOpts option set.\n```\n\nOriginal comment by `UweFisch...@gmail.com` on 16 Apr 2012 at 12:56\n =||= ", 0], ["426", "Exclusion Strategy that uses the field's value", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:11 PM", "```\nHow to write ExclusionStrategy by field value?\nWhat for to serialize default field values?\n```\n\nOriginal issue reported on code.google.com by `2morrow...@gmail.com` on 27 Mar 2012 at 3:52", "```\nYou can accomplish a similar result by registering a TypeAdapter that writes \n'null' for that value. Gson won't serialize nulls by default.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:37\n- Changed title: **Exclusion Strategy that uses the field's value**\n- Changed state: **WontFix**\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ", 0], ["427", "Wrong convertion in deserialization from int object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:12 PM", "```\nWhat steps will reproduce the problem?\n1. Im deserializing an first object then\n2. Im decompressing a field from this object then\n3. Im deserializing this object decompressed.\n\nWhat is the expected output? What do you see instead?\n I was expecting a int return after deserialization. A double value.\n\n\nWhat version of the product are you using? On what operating system?\n Gson 2.1  in Windows 7 64bits\n\n\nPlease provide any additional information below.\n\n In my application Im comunicating with the server using json data\nfor the comunication. In second deserialization all objects that shoud\nbe integers are Double\n\n```\n\nOriginal issue reported on code.google.com by `pedrohms...@gmail.com` on 30 Mar 2012 at 7:53\n\nAttachments:\n- [mSocket.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-427/comment-0/mSocket.java)", "```\n Im using the gson in android 2.2\n```\n\nOriginal comment by `pedrohms...@gmail.com` on 30 Mar 2012 at 7:57\n =||= ```\ndeserialize function is here\n```\n\nOriginal comment by `pedrohms...@gmail.com` on 30 Mar 2012 at 8:43\n\nAttachments:\n- [mSocket.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-427/comment-2/mSocket.java)\n =||= ```\nIs the target type an int? The best way to fix this is to make sure your target \nvalue is typed the way you want it.\n```\n\nOriginal comment by `limpbizkit` on 10 Apr 2012 at 2:10\n- Changed state: **WontFix**\n =||= ```\nthanks for answering. My type has to be an Object class because it must be of \nany type to be stored.\n```\n\nOriginal comment by `pedrohms...@gmail.com` on 10 Apr 2012 at 2:27\n =||= ", 0], ["428", "No built-in type adapter for Iterable", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:13 PM", "```\nWhat steps will reproduce the problem?\nSee the attached file.\n\nWhat is the expected output?\n[{\"a\":1},{\"a\":2}]\n[{\"a\":1},{\"a\":2}]\n[1, 2]\n[1, 2]\n\nWhat do you see instead?\n[{\"a\":1},{\"a\":2}]\n{}\n[1, 2]\nException in thread \"main\" java.lang.RuntimeException: Unable to invoke no-args \nconstructor for java.lang.Iterable<com.ash2k.test1.App$A>. Register an \nInstanceCreator with Gson for this type may fix this problem.\n    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:166)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:163)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:721)\n    at com.google.gson.Gson.fromJson(Gson.java:670)\n    at com.ash2k.test1.App.main(App.java:31)\nCaused by: java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.google.gson.internal.UnsafeAllocator$1.newInstance(UnsafeAllocator.java:48)\n    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:163)\n    ... 5 more\nCaused by: java.lang.InstantiationException: java.lang.Iterable\n    at sun.misc.Unsafe.allocateInstance(Native Method)\n    ... 11 more\n\nWhat version of the product are you using? On what operating system?\n2.1 on Ubuntu 11.10 x64\n\n```\n\nOriginal issue reported on code.google.com by `Ash2kk@gmail.com` on 1 Apr 2012 at 7:38\n\nAttachments:\n- [App.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-428/comment-0/App.java)", "```\nJust use a Collection or a List?\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:36\n- Changed title: **No built-in type adapter for Iterable**\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nThe problem was that I have big Iterable objects that need to be\nserialized. It's not efficient to convert those into Lists or Collections\njust for the serialization purpose.\n```\n\nOriginal comment by `phamduc...@gmail.com` on 11 Apr 2012 at 8:52\n =||= ```\nI have an interface (DAO) with method that returns Iterable<SomeType> and i \nwant to be able to pass the returned object and it's type to Gson. I cannot be \nsure that the object is always a Collection.\n```\n\nOriginal comment by `Ash2kk@gmail.com` on 12 Apr 2012 at 4:31\n =||= ```\nYou should be able to write a TypeAdapterFactory for Iterable. You can use the \ntype adapter for collection as a guide:\nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/\ngoogle/gson/internal/bind/CollectionTypeAdapterFactory.java\n\nThe code is even simpler if the iterable always has the same type parameter.\n```\n\nOriginal comment by `limpbizkit` on 16 Apr 2012 at 10:36\n- Changed state: **WontFix**\n =||= ```\nWhy can't or shouldn't it be supported in Gson? Isn't it a valid usecase? \nIterable is Java's built-in type and i expect it to be supported as well as \nCollection or Map.\n```\n\nOriginal comment by `Ash2kk@gmail.com` on 17 Apr 2012 at 4:07\n =||= ```\nIterable must be supported. It is a very very common & valid usecase. \n```\n\nOriginal comment by `rajkumar...@gmail.com` on 25 Oct 2012 at 7:49\n =||= ```\nAny suggestions to implementing a TypeAdapterFactory for Iterable? The example \nfor Collection won't work since TypeAdapterRuntimeTypeWrapper is \npackage-private.\nAlso, the Iterable interface does not have an add method so the read method \nwon't work.\n```\n\nOriginal comment by `jason.di...@gmail.com` on 31 Oct 2012 at 5:06\n =||= ```\n\nHello, \n\nThis comment isn't intended to be aggressive or demanding but I'm really \nconfused by the status of this ticket.  Would somebody working on Gson please \nprovide an explanation as to why this is marked WontFix?\n\nSimply informing users that they can implement this themselves isn't really an \nanswer - we could all go off and implement our own JSON libraries.  Instead I \nwill have an additional dependency everywhere I use Gson, and will have to \nmaintain and test this extension.  As will countless other users.\n\n\nGive the increasing functional paradigm being employed in Java and Guava's \njudicious use of Iterable (in preference to ? extends Collection) this would \nseem like a very obvious use-case.\n\nAlso from a performance perspective it just seems crazy to expect me to convert \nmy Iterable to a Collection just to pass it to Gson to ...  iterate over it \nagain.  And rewriting my code to suit Gson is obviously absurd and out of the \nquestion.\n\nIf anything throw out the Collection TypeAdapterFactory etc and replace with a \nsingle Ierable version.  I strongly suspect this ticket will receive votes from \nevery Gson user when Java 8 is released.\n\n\nPlease comment with the rationale behind closing this.\n\nI would also like to thank you for providing a nice, tidy library - so thanks =)\n```\n\nOriginal comment by `ear...@gmail.com` on 8 Nov 2012 at 5:48\n =||= ```\nPlease reopen this issue.\n```\n\nOriginal comment by `eirir...@gmail.com` on 9 Oct 2013 at 9:53\n =||= ```\nPlease resolve this issue.Having the same problem. Any alternate for this?\n```\n\nOriginal comment by `vivek.sr...@gmail.com` on 16 Oct 2013 at 5:49\n =||= ```\nFrom the front page:\n\nGson Goals:\n* Extensive support of Java Generics\n* Support arbitrarily complex objects (with deep inheritance hierarchies and \nextensive use of generic types)\n\nYet for some reason refuse to support such a fundamental, basic type such as \nIterable.\n```\n\nOriginal comment by `collinsa...@gmail.com` on 23 Jan 2015 at 5:25\n =||= Hi Folks.\nWhat is the intended behavior here? Do you want us to pick a random sub-class of Iterable (such as List) and deserialize the collection into it? \n =||= @inder123 To answer your question: yes, absolutely.\n\nFrom a user's perspective this is consistent with the rest of Gson. When I ask Gson to deserialize some JSON to a `List<Integer>`, I don't much care which specific implementation of the `List<Integer>` interface Gson chooses to produce. It could be a `LinkedList<Integer>` or an `ArrayList<Integer>`. But as long as it's something that implements `List<Integer>` (and it's reasonably performant) I'm happy, and my code works.\n\nIn this case, Gson does exactly what you suggested: it picks an appropriate subclass of `List<Integer>` for me. It would be great if it did the same for an `Iterable<Integer>` as well.\n\nI haven't dug into the Gson source code, so forgive me if this is technically impossible for some reason. But, from an outsider's perspective, this seems totally feasible.\n\nI know this is an older issue, but I'm still having to work around this issue in my current project, specifically when serializing an `Iterable<Integer>`. As @ear...@gmail.com pointed out in his fourth paragraph on 8 Nov 2012, the workaround requires me to iterate over my `Iterable<Integer>` one more time, which is less than ideal.\n =||= ", 0], ["429", "Throw exception on type adapter registration for non overridable built-in type adapter", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:16 PM", "```\nWhat steps will reproduce the problem?\nGson g = new GsonBuilder().registerTypeAdapter(String.class, new \nJsonSerializer<String>() {\n\n    public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n        return new JsonPrimitive(src.toUpperCase());\n    }\n\n}).create();\nSystem.out.println(g.toJson(\"test\"));\n\nWhat is the expected output? What do you see instead?\nI expect that an exception should be thrown. Instead i see:\n\"test\"\n\nWhat version of the product are you using? On what operating system?\n2.1 on Ubuntu 11.10 x64\n\n```\n\nOriginal issue reported on code.google.com by `Ash2kk@gmail.com` on 1 Apr 2012 at 9:02", "```\nWorth looking into in 2.2.\n```\n\nOriginal comment by `limpbizkit` on 11 Apr 2012 at 8:35\n- Added labels: **Priority-High**\n- Removed labels: **Priority-Medium**\n =||= Original comment by `limpbizkit` on 12 Apr 2012 at 6:29\n- Changed state: **Fixed**\n =||= ", 0], ["430", "Javadoc should include protected members", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:17 PM", "```\nOur maven Javadoc config needs tweaking.\nhttp://stackoverflow.com/questions/10001645/deserialize-collections-on-gson-2-x-\nversion\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 4 Apr 2012 at 2:22", "```\nThis issue was closed by revision r1139.\n```\n\nOriginal comment by `limpbizkit` on 12 Apr 2012 at 6:34\n- Changed state: **Fixed**\n =||= ", 0], ["431", "Populate existing object", "Google Code Exporter", "GoogleCodeExporter", "02/29/16, 03:10:17 AM", "```\nIt would be great is gson supported the population of existing objects. There \nwas a post a while back alluding to this behavior, but it doesn't exist now:\n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/ab97b754c1f3c53a\n?pli=1\n\nThe rationale is that this would prevent users from having to create \nTypeAdapters or InstanceCreators for every object that requires custom \nconstruction, particularly since gson doesn't support the notion of a global \nInstanceCreator at the moment.\n```\n\nOriginal issue reported on code.google.com by `pacesysj...@gmail.com` on 8 Apr 2012 at 5:12", "```\nNote: This is an enhancement (didn't see a setting for this).\n```\n\nOriginal comment by `pacesysj...@gmail.com` on 8 Apr 2012 at 5:13\n =||= Original comment by `limpbizkit` on 11 Apr 2012 at 8:33\n- Added labels: **Type-Enhancement**\n- Removed labels: **Type-Defect**\n =||= ```\nIt would be nice if it will be supported :)\n\nhttp://stackoverflow.com/questions/12277765/it-is-possible-to-fill-current-objec\nt-with-json-values-from-json\n```\n\nOriginal comment by `KKoce...@gmail.com` on 12 Feb 2013 at 9:03\n =||= ```\nwhat is the plan for this enhancement? is it on the roadmap?\n```\n\nOriginal comment by `dominik.mengelt` on 12 Nov 2013 at 1:34\n =||= ```\nI really like to see this enhancement. I am using the library in my Android \napp. I have a ViewPager with existing items, when a page becomes visible, I \npull additional items remotely and I would like to populate the additional \nfields in the existing items.\n```\n\nOriginal comment by `tasoman...@gmail.com` on 26 Nov 2013 at 9:50\n =||= ```\nAny update on this?\nAny chance that it will ever be implemented? any body have a nice work around?\nI'm starting a new project and can choose to use Jackson vs GSON, and I'm \ndeeply interested in the ability to update existing instance rather than always \ncreating new instance.\nI'm thinking of creating a new object and then merging to the existing one \nusing reflexion but I would rather have this handle at the deserialization \nlayer.\n\n```\n\nOriginal comment by `hugues.b...@gmail.com` on 13 Jan 2015 at 10:26\n =||= ```\nSee Inderjeet Singh's answer in this thread: \nhttps://groups.google.com/d/msg/google-gson/q5e3VMHzxTo/DOivwaGC2XoJ\n\nI use the InstanceCreator solution and it works very well. It is far from ideal \nas it requires creating a new Gson instance every time, but it works quite well.\n\nHere is my function :\n\n    public static <T> void populate(GsonBuilder builder, JsonObject json, Class<T> type, T into) {\n        builder.registerTypeAdapter(type, new InstanceCreator<T>() {\n            @Override public T createInstance(Type t) { return into; }\n        }).create().fromJson(json, type);\n    }\n\n```\n\nOriginal comment by `timelza...@gmail.com` on 15 Jan 2015 at 2:51\n =||= Something like this seems to work well for me. I might have missed something but so far, so good...\n\n``` Java\n    /**\n     * updates @target object from the @json object. Only fields existing in @json are affected\n     * @param target\n     * @param json\n     * @throws Exception\n     */\n    public static  void update(Object target, JsonObject json) throws Exception {\n\n        Class<? > class1 = target.getClass();\n\n        Set<Entry<String, JsonElement>> entrySet = json.entrySet();\n        for (Entry<String, JsonElement> entry : entrySet) {\n            String key = entry.getKey();\n            Field field = class1.getField(key);\n            Type genType = field.getGenericType();\n\n            field.set(target,\n                    gson.fromJson(entry.getValue(),genType));\n        }\n\n    }\n```\n =||= For the love of source do NOT use the snippet above as is.\n\nBut yes - This is a much needed feature. Just came across a very unfortunate use case.\n =||= Any update on this?\n =||= Why this issue was closed? is this became a planned feature? is it rejected?\n =||= You can implement this using InstanceCreators.\n\n``` java\nfinal Foo existing;\nInstanceCreator<Foo> creator = new InstanceCreator<Foo>() {\n  public Foo createInstance(Type type) { return existing; }\n}\n\nGson gson = new GsonBuilder().registerTypeAdapter(Foo.class, creator).create();\nFoo value = gson.fromJson(jsonString, Foo.class);\n// value should be same as existing\n```\n =||= I needed to update a managed JPA object with a JSON from the web service, this is the solution I've found (I needed to use the local instance of appConfig):\n\n``` java\nAppConfiguration appConfig = AppConfigurationDAO.getInstance().read(Long.parseLong(req.params(\":id\")));\n\nInstanceCreator<AppConfiguration> creator = new InstanceCreator<AppConfiguration>() {\n    private AppConfiguration appConfig;\n\n    public AppConfiguration createInstance(Type type) {\n        return appConfig;\n    }\n\n    public InstanceCreator<AppConfiguration> withValue(AppConfiguration appConfig) {\n        this.appConfig = appConfig;\n        return this;\n    }\n\n}.withValue(appConfig);\n\nGson gson = new GsonBuilder().registerTypeAdapter(AppConfiguration.class, creator).create();\nappConfig = gson.fromJson(req.body(), AppConfiguration.class);\n\nreturn AppConfigurationDAO.getInstance().update(appConfig);\n```\n\nI then stated to wonder: can't we have a `InstanceUpdater` class? It could have a implementation like this:\n\n``` java\nimport com.google.gson.InstanceCreator;\nimport java.lang.reflect.Type;\n\npublic class InstanceUpdater<T> implements InstanceCreator<T> {\n\n    private T object;\n\n    public T createInstance(Type type) {\n        return object;\n    }\n\n    public InstanceUpdater(T object) {\n        this.object = object;\n    }\n\n}\n```\n\nThen I can use with something like this:\n\n``` java\nInstanceCreator<AppConfiguration> creator = new InstanceUpdater<AppConfiguration>(appConfig);\n```\n\nBut I'm not sure, I feel there may be a better way of doing this, and it would be amazing to have something inside Gson to manage this for me.\n =||= Why this issue was closed? is this became a planned feature? is it rejected?\n =||= @Robertiano At the moment there is a workaround as outlined above with InstanceCreator.\nWe are still searching for an elegant proposal.\n =||= Apparently i need this as well, InstanceCreator is a bad option as if i want to make an extendable class static creators will need to be overwritten since there is no inheritance for that.\nTypeadapter creates the object, i seriously think that only copying field without object creation should be easy, if not at least can you supply a static method that can copy the fields using reflection ? \n =||= `TypeAdapter` ([example code](http://www.javacreed.com/gson-typeadapter-example/)) worked well for populating an existing object. Just return the instance in the `read` method. \n =||= Would love to see this, too. =||= I've been looking for this functionality for years.  @inder123 said \"We are still searching for an elegant proposal.\"\r\nWhat's wrong with something like gson.fromJson(existingObject, json) ? I don't see why it would not cover the same use cases as gson.fromJson(json). =||= For posterity, if this is ever addressed:\r\n\r\nTake into account nested reuse of existing objects at any level of the deserialization, not just the root object. Then you can see why InstanceCreator doesn't work.\r\n\r\nYou would need to pass in the containing object (which itself went through the usual process to be obtained), perhaps the InstanceUpdater<T> where it passes along the containing object as context mainly so it can choose to reuse the T hanging off of it and continue on.\r\n\r\nI have use cases (multiple) where I have all sorts of state like event handlers hanging off of important levels of a large tree of objects, and I want essentially all the unimportant \"leaf fields\" overwritten with incoming values but the important object scaffolding itself remains unchanged at all levels.\r\n\r\nThis is one of those things that is pretty easy to imagine how to implement it inside Gson, but hard to impossible to do from the outside looking in. =||= ", 0], ["434", "Decoding Date object from Json String not working!!", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:23 PM", "```\nWhat steps will reproduce the problem?\nrun following code snippet.   \n   Gson gson = new Gson();\n   Date myDate = new Date();   \n   System.out.println(\"JSON : \" + gson.toJson(myDate));\n   myDate = gson.fromJson(\"Apr 12, 2012 11:56:04 AM\", Date.class);\n   System.out.println(\"Date : \" + myDate);\n\nWhat is the expected output? \n   JSON : \"Apr 12, 2012 12:03:58 PM\"\n   Date : Thu Apr 12 12:03:58 IST 2012\n\nWhat do you see instead?\n   JSON : \"Apr 12, 2012 12:04:56 PM\"\nException in thread \"main\" com.google.gson.JsonSyntaxException: Apr\n    at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:78)\n    at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:63)\n    at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:38)\n    at com.google.gson.Gson.fromJson(Gson.java:720)\n    at com.google.gson.Gson.fromJson(Gson.java:686)\n    at com.google.gson.Gson.fromJson(Gson.java:636)\n    at com.google.gson.Gson.fromJson(Gson.java:608)\n    at test.Test2.main(Test2.java:19)\nCaused by: java.text.ParseException: Unparseable date: \"Apr\"\n    at java.text.DateFormat.parse(DateFormat.java:354)\n    at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:76)\n    ... 7 more\n\n\nWhat version of the product are you using? On what operating system?\n   gson 2.0 on Ubuntu 11.10\n\n```\n\nOriginal issue reported on code.google.com by `e.alifar...@gmail.com` on 12 Apr 2012 at 6:36", "```\nThat isn't a JSON string; you're losing the quotes. You should pass in a quoted \nstring, like this:\n\n   myDate = gson.fromJson(\"\\\"Apr 12, 2012 11:56:04 AM\\\"\", Date.class);\n\n```\n\nOriginal comment by `limpbizkit` on 16 Apr 2012 at 9:30\n- Changed state: **Invalid**\n =||= ", 0], ["435", "Gson 2.1 in the android", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:23 PM", "```\nhello  everyone !\ni have a problems  when using the gson2.1 in the  development of android apps\nhow i  can handle it ? thank you \n\n1\\ I imported the download gson package to the project\n2\\ when debug the program \n3\\ \"NoClassDefFounudError\"  error  happened ?\n\n\nwho  can  help  me  ?  thank  you very much \n```\n\nOriginal issue reported on code.google.com by `Aiftri...@gmail.com` on 14 Apr 2012 at 1:51\n\nAttachments:\n- [error.jpg](https://storage.googleapis.com/google-code-attachments/google-gson/issue-435/comment-0/error.jpg)", "```\nThis is a build problem. Is gson.jar in your libs folder?\n```\n\nOriginal comment by `limpbizkit` on 16 Apr 2012 at 9:27\n- Changed state: **WontFix**\n =||= ", 0], ["437", "Gson.getAdapter(Type) has low concurrency", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:24 PM", "```\nWhat steps will reproduce the problem?\n1. Run Gson.toJson in a highly concurrent environment\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\nLess thead blocking\n\nWhat version of the product are you using? On what operating system?\n\nGson 2.1 on Mac OS X 10.7.3\n\nPlease provide any additional information below.\n\nThe first line of the implementation hits a synchronized map; In highly \nconcurrent use cases this causes a significant amount of blockage (51% in my \nuse case). As I am in a situation where creating large numbers of gson \ninstances to work around this issue is not possible (i.e. - I have to use a \nshard Gson instance) I have a serious performance bottleneck.\n\nI normally would provide a patch for this, but there are two distinct \napproaches that can equally solve this bug: Use a thread local for the cache, \nor use a concurrent collection. I generally favor thread locals, but this has \nthe down side of causing the cache to be less effective as other threads can \nnot cross pollinate the cache. However, concurrent maps (e.g.- \nConcurrentHashMap) do not allow null keys; without the tribal knowledge of the \nimplementation I could not utilize this collection without fear of breaking an \nexisting use case.\n```\n\nOriginal issue reported on code.google.com by `dirkharr...@gmail.com` on 20 Apr 2012 at 2:31", "```\nAvoid this problem by using the TypeAdapter directly. That way Gson doesn't \nneed to keep on looking up the type to serialize. This approach is also faster \neven if there isn't contention.\n\n  public static final TypeAdapter<Foo> myFooAdapter = gson.getAdapter(Foo.class);\n\ninder, joel: do you guys think we should encourage this?\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:26\n- Changed state: **WontFix**\n =||= ```\nI apologize for my naivety in advance.\n\nThis issue is occurring as a natural use of toJson(...). How would your \nsuggestion resolve this (e.g. - I don't understand the equivalent API call of \ngson.toJson(...) using a specific TypeAdapter)?\n```\n\nOriginal comment by `dirkharr...@gmail.com` on 30 Jun 2012 at 12:38\n =||= ```\nWe are running into this same issue. Using the TypeAdapter directly is not a \nviable option for us because some of type information in our serialized objects \nis dynamic. It seems like a simple change, and like the original author we \ncould potentially provide a patch. Is there a fundamental objection to making \nthis change, perhaps a concern about performance in low concurrency \nenvironments, or is it just a matter of resources?\n```\n\nOriginal comment by `douglas....@gmail.com` on 9 Jul 2013 at 1:30\n =||= This seems to be fixed since 2.7 version\r\n> Using ArrayDeque, ConcurrentHashMap, and other JDK 1.6 features\r\n =||= ", 0], ["438", "why gson give up use utf16", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:25 PM", "```\nour old program(c++) only support utf 16.\nand for gson 1.2 it works. \nbut now ... \nso how can i use both gson2.1 and utf 16 encoding\n\nExpect : \n        JsonRPC j = new JsonRPC();\n        j.setJsonrpc(\"\u53d1\u989d\u53d1\u53d1\u7684\");\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(j));\n\n        {\"id\":0,\"jsonrpc\":\"\\u53d1\\u989d\\u53d1\\u53d1\\u7684\"}\n\n\nThanks...\n```\n\nOriginal issue reported on code.google.com by `jion...@gmail.com` on 24 Apr 2012 at 1:08", "```\nGson relies on the Java libraries to do character decoding. You probably want \nto look for InputStreamReader.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:23\n- Changed state: **Invalid**\n =||= ", 0], ["439", "Provide JsonObject and JsonArray constructors for parsing JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:26 PM", "```\nI would like to be able to do the following:\n\nJsonObject json = new JsonObject(\"{a:1,b:2,c:[1,2,3]}\");\nThis will be a handy shortcut to invoke\nnew JsonParser().parse(\"{}\").getAsJsonObject().\n\nThe same could be done for JsonArray.\n\nJsonPrimitive sort of has this support already.\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 24 Apr 2012 at 10:44", "```\nI don't think we want to fix this because we would be inconsistent with \nJsonPrimitive.\n\nWhen you create a JsonPrimitive with the string \"[]\", we accept that input as a \nstring literal. It is _not_ JSON to be parsed! It's best to use JsonParser to \ndo JSON parsing.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:22\n- Changed state: **WontFix**\n- Added labels: **Type-Enhancement**, **Priority-Low**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= ", 0], ["441", "GSon doesn't deserialize parametrized maps that are fields in a plain object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:33 PM", "```\nclass Bar {\n    String bar1;\n    String bar2;\n}\n\nclass Foo {\n    String var1;\n    Map<Bar,String> bars;\n}\n\n\nassuming that an instance of Foo was serialized, this will fail:\n\nFoo foo = gson.fromJson(serializedString, Foo.class);\n\nBut since Foo is not generic, there does not seem to be a way to give gson a \ntokenizer that tells it what type to deserialize the bars field on Foo into. \n(And just out of curiosity, is there some magic which allows Morphia to handle \nmaps as fields which Gson can't use?)\n\nThanks!\n```\n\nOriginal issue reported on code.google.com by `christop...@gmail.com` on 10 May 2012 at 12:13", "```\nYou need to register a TypeAdapter for Bar that writes it out as a single \nstring. Gson has no idea how to take single strings and split them into Bar's \ntwo fields!\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:20\n- Changed state: **WontFix**\n =||= ", 0], ["442", "how to access embedded tags/key value pairs in  JSON data using gson? tried,but it returns \"null\"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:33 PM", "```\nWhat steps will reproduce the problem?\n1.while trying to access the embedded data using java inner classes\n2.even if we have separate classes for different data values..still it returns \nnull  \n3.\n\nWhat is the expected output? What do you see instead?\nexpected output should be the values of the embedded data..but i see null.\n\nWhat version of the product are you using? On what operating system?\nwindows; gson 2.2\n\nPlease provide any additional information below.\nhere is part of data which is generated.How do i access submac,subhost?I have \nseparate classes for outer data and \"sub\"\ndata.\n{ \n    \"mac\": null,\n    \"ipv4\": \"198.162.1.1\",\n    \"ipv6\": \"12.234.345.44\",\n    \"host\": \"xyz.com\",\n    \"_dns\": true,    \n    \"sub\":[ \n    {\n    \"submac\": null,\n    \"subhost\": \"xyz12.com\"\n     }\n     ]        \n    }\n\n\n\n```\n\nOriginal issue reported on code.google.com by `amathu...@gmail.com` on 11 May 2012 at 9:05", "Original comment by `limpbizkit` on 30 Jun 2012 at 3:19\n- Changed state: **Invalid**\n =||= ", 0], ["443", "JsonParser.parse( String json) returns JsonNull instead of JsonSyntaxException", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:34 PM", "```\nWhat steps will reproduce the problem?\nFollowing code:\n  String badJson = \"[[]\";\n  JsonElement jsonElem = jsonParser.parse( badJson );\n\n  if ( jsonElem.isJsonNull() ) {\n    out.println(\"Request-String has not correct JSON-Format!\");\n    return;\n  }\n\n  out.println(\"Parsing successfull...\");\n\n\nWhat is the expected output? What do you see instead?\nIn my understanding of the documentation the function should throw a \nJsonSyntaxException. Confusingly the no catch block is required by Eclipse, \nalthough the method definition specifies a throw. Instead we get an instance of \nJsonNull...\n\n\nWhat version of the product are you using? On what operating system?\nEclipse and Gson 2.1\n\nPlease provide any additional information below.\nthe error may be located in the JsonParser Class \n(http://google-gson.googlecode.com/svn/trunk/gson/src/main/java/com/google/gson/\nJsonParser.java) in the JsonElement parse(Reader json) method\n\nThe if statement should check for if (element.isJsonNull() && jsonReader.peek() \n!= JsonToken.END_DOCUMENT)\n\nand not if (!element.isJsonNull() && jsonReader.peek() != \nJsonToken.END_DOCUMENT)\n\n\n    try {\n      JsonReader jsonReader = new JsonReader(json);\n      JsonElement element = parse(jsonReader);\n      if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {\n        throw new JsonSyntaxException(\"Did not consume the entire document.\");\n      }\n\n```\n\nOriginal issue reported on code.google.com by `luscus.r...@gmail.com` on 11 May 2012 at 2:39", "```\nPlease simply ignore this line: Confusingly the no catch block is required by \nEclipse, although the method definition specifies a throw.\n\n\nWhat is the expected output? What do you see instead?\nIn my understanding of the documentation the function should throw a \nJsonSyntaxException. Instead we get an instance of JsonNull...\n```\n\nOriginal comment by `luscus.r...@gmail.com` on 11 May 2012 at 2:58\n =||= ```\nGood find. That's definitely bad behavior on Gson's part.\n\nYour best bet is to avoid JsonParser. Instead just do this:\n    new Gson().fromJson(\"[[]\", JsonElement.class)\n\nInder, any recommendations on how we should proceed here? I suspect the current \nbehavior is for backwards compatibility with Gson 1.6.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:17\n- Added labels: **Priority-Low**\n- Removed labels: **Priority-Medium**\n =||= ```\nI think we should fix JsonParser to throw a JsonSyntax exception.\n```\n\nOriginal comment by `inder123` on 30 Jun 2012 at 6:23\n- Changed state: **Accepted**\n =||= ```\nThis issue was closed by revision r1156.\n```\n\nOriginal comment by `inder123` on 30 Jun 2012 at 6:48\n- Changed state: **Fixed**\n =||= ```\nFixed in r1156 \nHowever, it now throws JsonIOException instead of JsonParseException. It can be \nargued that JsonSyntaxException would have been a better choice. However, since \nthe root cause is an IOException (EOFException), JsonIOException makes sense \ntoo.\n\nSomewhat inconsistently, the same done view gson.fromJson(\"[[]\", \nObject[].class) throws JsonSyntaxException.\n\nIMHO, this incosistency is tolerable, though we can easily fix it by adding a \ncheck in JsonParser. I would like to hear other opinions before making that \nchange though.\n```\n\nOriginal comment by `inder123` on 30 Jun 2012 at 6:51\n =||= ```\nChanged the behavior to throw JsonSyntaxException in r1157\n```\n\nOriginal comment by `in...@trymph.com` on 2 Jul 2012 at 6:37\n =||= ", 0], ["444", "json path parsing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:36 PM", "```\nI've made some improvements over Gson API to iterate elements through a given \npath in a groovy style\n\nhttp://dl.dropbox.com/u/20272624/Pson.java\n\nInstead of doing:\nJsonElement response = APIUtils.callAPI(countryId, APIUtils.HOTELS + \"/\" + \nhotelId + \"?includeamenities=true\"));\n\nif( \n!response.getAsJsonObject.get(\"hotels\").getAsJsonArray().get(0).getAsJsonObject(\n).get(\"geoLocation\").getAsJsonObject().get(\"latitude\").isJsonNull()) {\n    ...\n}\n\nDo:\nPson response = new Pson(DespegarAPIUtils.callAPI(countryId, \nDespegarAPIUtils.HOTELS + \"/\" + hotelId + \"?includeamenities=true\"));\n\nif( !response.get(\"hotels[0].geoLocation.latitude\").isJsonNull()) {\n    cityId = response.get(\"hotels[0].cityId\").getAsString();\n    hotelLatitude = response.get(\"hotels[0].geoLocation.latitude\").getAsDouble();\n    hotelLongitude = response.get(\"hotels[0].geoLocation.longitude\").getAsDouble();\n}\n\nAlso, I've made an iterator for JsonArrays:\nfor (Pson range : configJson.getIterable(\"configuration.ranges\")) {\n    int startRange = range.get(\"startRange\").getAsInt();\n    int endRange = range.get(\"endRange\").getAsInt();\n    if(startRange <= rangeValue && rangeValue <= endRange) {\n        return range.get(\"value\").getAsString();\n    }\n}\n\ninstead of old coding style:\nJsonArray arr = \nresponse.getAsJsonObject().get(\"configuration\").getAsJsonObject().get(\"ranges\").\ngetAsJsonArray();\n\nfor(int i = 0; i < arr.size(); i++) {\n    JsonElement range = arr.get(i).getAsJsonObject();\n    ....\n}\n\nBest regards!\nIgnacio Nieto\n```\n\nOriginal issue reported on code.google.com by `nietofar...@gmail.com` on 16 May 2012 at 5:37\n\nAttachments:\n- [Pson.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-444/comment-0/Pson.java)", "```\nNeat. I don't think there's much action for us to take here.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:12\n- Changed state: **WontFix**\n =||= ", 0], ["446", "JsonWriter should implement Flushable", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:36 PM", "```\nI propose an enhancement for the com.google.gson.stream.JsonWriter class, that \nit should implement Flushable as well as Closeable.  \n\nThe implemented flush() method would just be the existing flush() method.  With \nthis enhancement it would be possible to use this class with Flushables from \nthe guava api.\n\n```\n\nOriginal issue reported on code.google.com by `forticul...@gmail.com` on 17 May 2012 at 1:36", "```\nGreat idea. Done with r1155.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 2:47\n- Changed state: **Fixed**\n =||= ", 0], ["447", "deserializing abstract class which is member of another class", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:37 PM", "```\nHi,\n\nI need to know how we can deserialize an object which contains a list of type \nabstract class as an attribute using gson\n\ncode eg:\n\nclass A{\nList<B> list;\n}\n\npublic abstract class B{\n}\n```\n\nOriginal issue reported on code.google.com by `chinju18...@gmail.com` on 24 May 2012 at 8:37", "Original comment by `limpbizkit` on 30 Jun 2012 at 3:09\n- Changed state: **Invalid**\n =||= ", 0], ["448", "Improve JsonDeserializationContext type safety", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:38 PM", "```\nWhat steps will reproduce the problem?\n\nFoo foo = ctx.deserialize(jsonElement, Bar.class);\n\nJsonDeserializationContext have the method\n<T> T deserialize(JsonElement json, Type typeOfT)\n\nYou may accidentally pass wrong typeOfT argument here and it'll explode at \nruntime (Bar do not extend Foo).\n\nWhy not make it type safer and make compiler catch the problem:\n<T> T deserialize(JsonElement json, TypeToken<T> typeOfT)\n<T> T deserialize(JsonElement json, Class<T> typeOfT)\n\n```\n\nOriginal issue reported on code.google.com by `Ash2kk@gmail.com` on 30 May 2012 at 10:08", "```\nAcknowledged. Unfortunately it's too late to address this. We're encouraging \nuse of our new TypeAdapter APIs which are type safe in this way.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 2:43\n- Changed state: **WontFix**\n =||= ", 0], ["450", "Easier way to exclude properties", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:40 PM", "```\nSuggested way to exclude property from serializing/deserializing is the @Expose \nannotation, but when option \nGsonBuilder().excludeFieldsWithoutExposeAnnotation() is used I need to use \n@Expose on all fields I intend to serialize.\n\nThis is very annoying provided I have a big graph of data and only want to \nexclude one property.\n\nSuggested way is to have an annotation @ExcludeFromGson that would always be \nread and properties marked with this annotation would not be \nserialized/deserialized.\n```\n\nOriginal issue reported on code.google.com by `tomasz.b...@pragmatists.pl` on 8 Jun 2012 at 12:41", "```\npublic class YourAnnotationExclusionStrategy implements ExclusionStrategy {\n    public boolean shouldSkipClass(Class<?> clazz) {return false;}\n    public boolean shouldSkipField(FieldAttributes f) {return f.getAnnotation(YourAnnotation.class) != null;}\n}\n\nGsonBuilder().setExclusionStrategies(new YourAnnotationExclusionStrategy(), ...\n```\n\nOriginal comment by `spdenne` on 13 Jun 2012 at 8:36\n =||= ```\nLet me know if there's action we should be taking here.\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 3:09\n- Changed state: **WontFix**\n =||= ```\nI'd like a strategy like in comment #1 be implemented inside library along with \nthe annotation for that. It can be configurable on GsonBuilder, but should be \npart of the library.\n\nThat's good it is easy to do it on my own, but purpose of using library is not \nto write the stuff myself.\n```\n\nOriginal comment by `tomasz.b...@pragmatists.pl` on 2 Jul 2012 at 2:35\n =||= ", 0], ["452", "Boolean values represented by \"Y\" and \"N\" are not deserialized properly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:41 PM", "```\nI am dealing with a feed that uses \"Y\" and \"N\" for boolean values.\n\nFor example:\n\n{ \"isConditionA\": \"Y\",\n\"isConditionB\": \"N\"\n}\n\nI am using version 2.2.1, which interprets both values as false.\n\nI tried registering my own TypeAdapter but that is no longer allowed for \nprimitives. \n\nI imagine it wouldn't be a big problem to support \"Y\" and \"N\" in the default \nBoolean deserializer.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `jflo...@phunware.com` on 19 Jun 2012 at 9:24", "```\nWe now permit users to register their own type adapters for booleans. Check out \nthe example in the test case.\nhttp://code.google.com/p/google-gson/source/detail?r=1154\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 2:41\n- Changed state: **Fixed**\n =||= ", 0], ["454", "Support 0 and 1 for booleans", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:45 PM", "```\nThere's a rogue ObjectiveC library that's preventing some high-profile Gson \nusers from upgrading to 2.2.\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 22 Jun 2012 at 11:51", "```\nWe now permit this via a custom type adapter. \nhttp://code.google.com/p/google-gson/source/detail?r=1154\n```\n\nOriginal comment by `limpbizkit` on 30 Jun 2012 at 2:40\n- Changed state: **Fixed**\n =||= ", 0], ["456", "how to deserialize json object at client side in an ajax call which was serialized using toJson mthd  ", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:46 PM", "```\nWhat steps will reproduce the problem?\n\n1.Make a ajax call to a servlet and set the json object as below\nType listOfTestObject = new TypeToken< ArrayList <HashMap> >(){}.getType();\nString sGson = new Gson().toJson(alReportsData,listOfTestObject);\nresponse.getWriter().write(sGson); \n\n2.how to read the json object in ajax success call\n\n\nWhat is the expected output? What do you see instead?\nInstead i receive a parse exception SyntxaxError:JSON.parse:unexpected \ncharacter \n\nWhat version of the product are you using? On what operating system?\n i am using google-gson-2.2.1 on Win XP\n\nPlease provide any additional information below.\n\n$.ajax({   \ntype: \"POST\",   \nurl:  \"/app1/servlet/Controller?destinationHandler=208&obid= \" +  sObid  ,  \ndataType: 'json',                            \nsuccess: function (data) {\nconsole.log(\"Success... \");\n   ??? How to deserialize the json object here ??? Please HELP !!\n},\nerror: function(jqXHR, textStatus, errorThrown){\n      // I get an error here\n      alert(textStatus + \" | \" + errorThrown);\n}                                                                   \n});\n\nThanks \nRanchs\n```\n\nOriginal issue reported on code.google.com by `venkates...@gmail.com` on 27 Jun 2012 at 7:28", "Original comment by `limpbizkit` on 30 Jun 2012 at 2:48\n- Changed state: **Invalid**\n =||= ", 0], ["457", "Attempting to parse an empty string returns null instead of throwing JsonSyntaxException", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:47 PM", "```\nThe following test case illustrates what I think the parser should be doing in \nthe event of an immediate EOF:\n\n    @Test\n    public void testEmptyStreamBehaviour()\n    {\n        Gson gson = new Gson();\n        try\n        {\n            gson.fromJson(new StringReader(\"\"), String.class);\n            fail(\"Expected JsonSyntaxException\");\n        }\n        catch (JsonSyntaxException e)\n        {\n            // Expected.\n        }\n    }\n\nWhat really happens is that it returns null. This resulted in an incredibly \ndifficult to track down bug which turned out to just be someone sending no data \ninstead of sending JSON.\n\n```\n\nOriginal issue reported on code.google.com by `trejkaz` on 2 Jul 2012 at 1:49", "```\nThis is a sad consequence of our decision to be backwards-compatible with Gson \n1.5 which had the same behavior.\n\nWork around this by using a TypeAdapter to do your serialization:\n  gson.getAdapter(String.class).fromJson(string)\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:38\n- Changed state: **WontFix**\n =||= The suggested workaround doesn't seem to work if there is a custom type adapter registered for the class, because that type adapter code never gets hit. A slight modification of the OP's code with the suggested fix still fails:\n\n```\n@Test\npublic void testEmptyStreamBehaviour()\n{\n    Gson gson = new GsonBuilder().registerTypeAdapter(String.class, new JsonDeserializer<String>() {\n        @Override\n        public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n            throw new JsonSyntaxException(\"Never gets here\");\n        }\n    }).create();\n    try\n    {\n        gson.getAdapter(String.class).fromJson(\"\");\n        fail(\"Expected JsonSyntaxException\");\n    }\n    catch (JsonSyntaxException | IOException e)\n    {\n        // Expected.\n    }\n}\n```\n =||= @mbroshi, you have to use a `TypeAdapter` instead of a `JsonDeserializer` because that is automatically made `null`-safe, i.e. the deserializer is not called for `null` values, see #1697. =||= ", 0], ["458", "Expected BEGIN_OBJECT but was BEGIN_ARRAY", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:47 PM", "```\nI want to convert this string to JSON:\n\nString jsonString = \n\"{\\\"id\\\":1,\\\"result\\\":[{\\\"activityId\\\":78398,\\\"employeeId\\\":131969,\\\"id\\\":270035\n3,\\\"revision\\\":0,\\\"wageSpecificationId\\\":0,\\\"invoiceId\\\":0,\\\"hours\\\":2,\\\"javaCla\nss\\\":\\\"no.tripletex.tcp.model.Hour\\\",\\\"projectId\\\":1164299,\\\"companyId\\\":593187,\n\\\"comment\\\":\\\"hei\\\",\\\"date\\\":{\\\"time\\\":1.3397112e12,\\\"javaClass\\\":\\\"java.sql.Dat\ne\\\"}},{\\\"activityId\\\":78399,\\\"employeeId\\\":131969,\\\"id\\\":2701989,\\\"revision\\\":0,\n\\\"wageSpecificationId\\\":0,\\\"invoiceId\\\":0,\\\"hours\\\":5,\\\"javaClass\\\":\\\"no.triplet\nex.tcp.model.Hour\\\",\\\"projectId\\\":1166105,\\\"companyId\\\":593187,\\\"comment\\\":\\\"hei\n du\\\",\\\"date\\\":{\\\"time\\\":1.3397112e12,\\\"javaClass\\\":\\\"java.sql.Date\\\"}}]}\";\n\nWhere do I initzialize the JSONArray. I'm new to this and I didn't understand \nthe other threads with the same subject. I understand why it's not running, but \nI don't know what to do about it. My code: \n\nGson gson = new Gson();\n\nString jsonString = \n\"{\\\"id\\\":1,\\\"result\\\":[{\\\"activityId\\\":78398,\\\"employeeId\\\":131969,\\\"id\\\":270035\n3,\\\"revision\\\":0,\\\"wageSpecificationId\\\":0,\\\"invoiceId\\\":0,\\\"hours\\\":2,\\\"javaCla\nss\\\":\\\"no.tripletex.tcp.model.Hour\\\",\\\"projectId\\\":1164299,\\\"companyId\\\":593187,\n\\\"comment\\\":\\\"hei\\\",\\\"date\\\":{\\\"time\\\":1.3397112e12,\\\"javaClass\\\":\\\"java.sql.Dat\ne\\\"}},{\\\"activityId\\\":78399,\\\"employeeId\\\":131969,\\\"id\\\":2701989,\\\"revision\\\":0,\n\\\"wageSpecificationId\\\":0,\\\"invoiceId\\\":0,\\\"hours\\\":5,\\\"javaClass\\\":\\\"no.triplet\nex.tcp.model.Hour\\\",\\\"projectId\\\":1166105,\\\"companyId\\\":593187,\\\"comment\\\":\\\"hei\n du\\\",\\\"date\\\":{\\\"time\\\":1.3397112e12,\\\"javaClass\\\":\\\"java.sql.Date\\\"}}]}\";\n\nSystem.out.println(jsonString);\n\nDebug obj = (Debug) gson.fromJson(jsonString, Debug.class);\n\nSystem.out.println(obj.getResult());\n\n__________________________________________________________\n\nimport com.google.gson.annotations.SerializedName;\n\n    public class Debug {\n        @SerializedName(\"id\")\n        private String id;\n        @SerializedName(\"method\")\n        private String method;\n        @SerializedName(\"result\")\n        private Result result;\n\n\n\n        public final String getId() {\n            return this.id;\n        }\n\n        public final String getMethod() {\n            return this.method;\n        }\n\n\n        public final Result getResult() {\n            return this.result;\n        }\n}\n______________________________________________________________________\n\nimport com.google.gson.annotations.SerializedName;\n\npublic class Result {\n        @SerializedName(\"companyId\")\n        private String companyId;\n        @SerializedName(\"javaClass\")\n        private String javaClass;\n        @SerializedName(\"activityId\")\n        private String activityId;\n        @SerializedName(\"projectId\")\n        private String projectId;\n        @SerializedName(\"employeeId\")\n        private String employeeId;\n        @SerializedName(\"comment\")\n        private String comment;\n        @SerializedName(\"revision\")\n        private String revision;\n        @SerializedName(\"invoiceId\")\n        private String invoiceId;\n        @SerializedName(\"hours\")\n        private String hours;\n        @SerializedName(\"wageSpeceficationId\")\n        private String wageSpeceficationId;\n        @SerializedName(\"id\")\n        private String id;\n        @SerializedName(\"date\")\n        private Date date;\n\n\n        public final String getCompanyId() {\n            return companyId;\n        }\n\n        public final String getJavaClass() {\n            return javaClass;\n        }\n\n        public final String getActivityId() {\n            return activityId;\n        }\n\n        public final String getProjectId() {\n            return projectId;\n        }\n\n        public final String getEmployeeId() {\n            return employeeId;\n        }\n\n        public final String getComment() {\n            return comment;\n        }\n\n        public final String getRevision() {\n            return revision;\n        }\n\n        public final String getInvoiceId() {\n            return invoiceId;\n        }\n\n        public final String getHours() {\n            return hours;\n        }\n\n        public final String getWageSpeceficationId() {\n            return wageSpeceficationId;\n        }\n\n        public final String getId() {\n            return id;\n        }\n\n        public final Date getDate() {\n            return date;\n        }\n}\n\nThe output: \n\nException in thread \"main\" com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at \nline 1 column 19\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:172)\n    at com.google.gson.Gson.fromJson(Gson.java:791)\n    at com.google.gson.Gson.fromJson(Gson.java:757)\n    at com.google.gson.Gson.fromJson(Gson.java:706)\n    at com.google.gson.Gson.fromJson(Gson.java:678)\n    at com.example.tutorial.plugins.Test.main(Test.java:24)\nCaused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was \nBEGIN_ARRAY at line 1 column 19\n    at com.google.gson.stream.JsonReader.expect(JsonReader.java:339)\n    at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:322)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:165)\n    ... 7 more\n\n\nThanks!\n```\n\nOriginal issue reported on code.google.com by `matiaspe...@gmail.com` on 2 Jul 2012 at 1:29", "```\n[deleted comment]\n```\n =||= ```\nNot a bug! Please use stackoverflow for \"how do I\" questions.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:35\n- Changed state: **Invalid**\n =||= ", 0], ["460", "deserialize many arraylist inside a class using gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:50 PM", "```\nI have a class with multiple Lists.  How can I deserialize it using gson?\n\nMy class ...\n\n    Class Data\n    {\n\n    List<String> actor;\n    List<Integer> text_relevance;\n    List<String> title;\n    }\n\nThe json string is as follows ... \nIs the class design for this json correct?\n\n    {\"data\":{\n            \"actor\":[\"Abercrombie, Ian\",\"Baker, Dee Bradley\",\"Burton, Corey\",\n                     \"Eckstein, Ashley\",\"Futterman, Nika\",\"Kane, Tom\",\n                     \"Lanter, Matt\",\"Taber, Catherine\",\"Taylor, James Arnold\",\n                     \"Wood, Matthew\"],\n            \"text_relevance\":[\"308\"],\n            \"title\":[\"Star Wars: The Clone Wars\"]\n        }\n    }\n```\n\nOriginal issue reported on code.google.com by `gowtham....@gmail.com` on 15 Jul 2012 at 12:03", "```\nNot a bug! Please use stackoverflow for \"how do I\" questions.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:34\n- Changed state: **Invalid**\n =||= ", 0], ["461", "Gson fails to deserialize long value with .0 decimal when in custom deserializer", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:51 PM", "```\nWhen attempting to deserialize object with long field from JSON containing \nvalue such as 1342911054.0, using custom deserializer, Gson throws a \nNumberFormatException. If not defining any deserializer for the object, works \nfine but does not allow any custom handling of fields.\nSee code for detail in reduced test case. Code also contains workaround for \nthis issue. However, I do not know if it has any unwanted side effects.\n\nWhat is the expected output? What do you see instead?\nGson should verify that double value equals long value then return it. Gson \ninstead throws NumberFormatException. NFE is also displaying substring of value \n(missing first 3 chars) instead of actual value.\n\nWhat version of the product are you using? On what operating system?\nGson 2.2.2 on JDK 7u5 x86 on Windows 7 SP1 x64\n```\n\nOriginal issue reported on code.google.com by `alek...@sovietnation.net` on 21 Jul 2012 at 8:25\n- Merged into: #462\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-461/comment-0/GsonTest.java)", "```\nAnd now I realize that the reason it fails is because a JsonTreeReader is being \nused, instead of a JsonReader. JsonTreeReader's nextLong method is more strict \nthan JsonReader's method.\n```\n\nOriginal comment by `alek...@sovietnation.net` on 22 Jul 2012 at 12:49\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:33\n- Changed state: **Duplicate**\n =||= ", 0], ["462", "inconsistency LazilyParsedNumber vs. JsonReader.nextInt()", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:52 PM", "```\nWhat steps will reproduce the problem?\nSee attached JUnit test.\n\nWhat is the expected output?\nI expect Gson fromJson(JsonElement json, Class<T> classOfT) to behave like Gson \nfromJson(String json, Class<T> classOfT) when I use the same json string input \nbut converted the first one with JsonParser .parse(String json). \n\nWhat do you see instead?\nInstead I got that exception:\n\ncom.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input \nstring: \"1.0\"\n    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:230)\n    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:220)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:819)\n    at com.google.gson.Gson.fromJson(Gson.java:792)\n    at GsonTest.testWithJsonString(GsonTest.java:17)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.NumberFormatException: For input string: \"1.0\"\n    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n    at java.lang.Integer.parseInt(Integer.java:458)\n    at java.math.BigInteger.<init>(BigInteger.java:316)\n    at java.math.BigInteger.<init>(BigInteger.java:451)\n    at com.google.gson.internal.LazilyParsedNumber.intValue(LazilyParsedNumber.java:41)\n    at com.google.gson.JsonPrimitive.getAsInt(JsonPrimitive.java:255)\n    at com.google.gson.internal.bind.JsonTreeReader.nextInt(JsonTreeReader.java:197)\n    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:228)\n    ... 30 more\n\n\nWhat version of the product are you using? On what operating system?\nCould be reproduced with 2.1 and 2.2.2\n```\n\nOriginal issue reported on code.google.com by `s.groeb...@googlemail.com` on 26 Jul 2012 at 3:35\n- Merged into: #453\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-462/comment-0/GsonTest.java)", "```\nsorry I mixed up the method names in the test. here is the corrected one.\n```\n\nOriginal comment by `s.groeb...@googlemail.com` on 26 Jul 2012 at 3:40\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-462/comment-1/GsonTest.java)\n =||= ```\nThis is a bug!\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:31\n- Changed title: *_inconsistency of Gson.fromJson methods: *_\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:32\n- Changed title: **inconsistency LazilyParsedNumber vs. JsonReader.nextInt()**\n =||= ```\nIssue 461 has been merged into this issue.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:33\n =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:39\n- Changed state: **Duplicate**\n =||= ", 0], ["463", "JsonToken javadoc mistake", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:53 PM", "```\nThe javadoc for JsonToken#BEGIN_ARRAY says:\n\"The opening of a JSON array. Written using {@link JsonWriter#beginObject} and \nread using {@link JsonReader#beginObject}.\"\n\nIt should be referring to beginArray instead.\n```\n\nOriginal issue reported on code.google.com by `alek...@sovietnation.net` on 29 Jul 2012 at 8:33", "```\nThis issue was closed by revision r1196.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:29\n- Changed state: **Fixed**\n =||= ", 0], ["464", "Integrate with java.sql.ResultSet", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:54 PM", "```\nI would like to do the following:\n\n    Statement s = \"SELECT id, label FROM arbitrary_view\";\n    PreparedStatement ps = getConnection().prepareStatement( s );\n    ResultSet rs = ps.executeQuery();\n\n    Gson gson = new Gson();\n    String json = gson.toJson( rs );\n\nThe ResultSetMetaData contains all the information necessary to create a \nsensible default JSON structure for the basic types (strings, numbers) based on \nthe JDBC driver being used. The above code should generate:\n\n    {\n      id: id_value_1,\n      label: label_value_1\n    },\n    {\n      id: id_value_2,\n      label: label_value_2\n    }\n\nInstead, the code generates the following:\n\njava.lang.IllegalArgumentException: class java.text.DecimalFormat declares \nmultiple JSON fields named maximumIntegerDigits\n    at com.ahs.ismtool.QueryService.handle(QueryService.java:85)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)\n    at org.eclipse.jetty.server.Server.handle(Server.java:350)\n    at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)\n    at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)\n    at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)\n    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)\n    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)\n    at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77)\n    at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:620)\n    at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538)\n    at java.lang.Thread.run(Unknown Source)\n\n```\n\nOriginal issue reported on code.google.com by `dave.jar...@gmail.com` on 31 Jul 2012 at 11:57", "```\nSee also:\n\nhttp://stackoverflow.com/questions/6514876/converting-resultset-to-json-faster-o\nr-better-way\n```\n\nOriginal comment by `dave.jar...@gmail.com` on 1 Aug 2012 at 12:04\n =||= ```\nYou need to write a custom type adapter.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:28\n- Changed state: **WontFix**\n =||= ```\nIs this not a common enough feature to warrant implementation?\n```\n\nOriginal comment by `dave.jar...@gmail.com` on 3 Sep 2012 at 12:44\n =||= ```\nYes. I too was expecting a default implementation for such kinds of objects. \nBut there apparently isn't.\n```\n\nOriginal comment by `ashleyli...@gmail.com` on 9 Nov 2012 at 7:49\n =||= ```\nI was forced by EclipseLink to redefine id field in some of my objects (kind of \nbug in EclipseLink...). And now all the json serialization is broken. And there \nis no easy way to fix it. \n\nshouldSkipField(FieldAttributes f) cant help because it has no access to the \njava type which is actually serializing (you can get a declaring type but it is \nan abstract class in my case and the actual class is unknown).\n\nThe only way I see now is to exclude this field from a serialization, serialize \nobject to json tree and add the field manually. Or to write a dozen of adapters.\n\nIt would be good to have some mechanism to resolve this issue. Instead of\n        if (previous != null) {\n          throw new IllegalArgumentException(declaredType\n              + \" declares multiple JSON fields named \" + previous.name);\n        }\nwe can use some policy enum to define behavior. For example \"prefer \noverridden\", \"ignore overridden\", \"throw exception\".\n\nOr to add some annotation which can be used on overridden field.\n\n\n\n```\n\nOriginal comment by `kostya31...@gmail.com` on 26 Mar 2014 at 2:40\n =||= ", 0], ["465", "Gson doesn't serialize collection with object of derived collection", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:55 PM", "```\nWhat steps will reproduce the problem?\nPlease look at the following code:\n<code language=\"java\">\npublic class SerializeTest {\n\n    public static class AssetMetadata extends ArrayList<String> {}\n    public static class AssetRequest {\n        public ArrayList<AssetMetadata> styles;\n        public ArrayList<AssetMetadata> scripts;\n    }\n\n    private static final AssetMetadata SCRIPT_METADATA = new AssetMetadata() {{\n        add(\"path/to/script.js\");\n    }};\n    private static final AssetMetadata STYLE_METADATA = new AssetMetadata() {{\n        add(\"path/to/style.js\");\n    }};\n\n    @Test\n    public void testSerialization() {\n\n        AssetRequest metadata = new AssetRequest();\n        metadata.styles = new ArrayList<AssetMetadata>() {{ add(STYLE_METADATA); }};\n        metadata.scripts = new ArrayList<AssetMetadata>() {{ add(SCRIPT_METADATA); }};\n\n        String json = new Gson().toJson(metadata, AssetRequest.class);\n\n        System.out.println(json);\n    }\n}\n</code>\n\nWhat is the expected output? What do you see instead?\nExpected output: \n{\"styles\":[[\"path/to/style.js\"]],\"scripts\":[[\"path/to/script.js\"]]}\nActual output: {\"styles\":[null],\"scripts\":[null]}\n\nWhat version of the product are you using? On what operating system?\nI use version 2.2.2. With version 1.7.1 serialization and deserialization works \nas expected.\n\nPlease provide any additional information below.\nIf I use the ArrayList<String> collection instead of the AssetMetadata class \nthen it works as expected.\n```\n\nOriginal issue reported on code.google.com by `kaps.chr...@gmail.com` on 16 Aug 2012 at 2:11", "```\nDon't use double brace initialization. This should work if you avoid double \nbrace initialization.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:27\n- Changed state: **WontFix**\n =||= ", 0], ["466", "Map entries sorted by keys", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:56 PM", "```\nIt would be great to be able to configure Gson to write all Map entries sorted \nby keys.\n\nEspecially in Unit Tests an equality assertion of two larger objects \nrepresented as their json strings is very neat because modern IDEs bring up the \nexact diff of the two, whereas classic Object.equals only returns true or false.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `th.kiesl...@gmail.com` on 23 Aug 2012 at 12:51", "```\nYou could create a helper method that returns a JsonObject sorted by keys. It \ncould even be recursive.\n\nWe don't want to make this change because some applications depend on \npreserving the order that keys and values are returned.\n```\n\nOriginal comment by `limpbizkit` on 2 Sep 2012 at 9:26\n- Changed state: **WontFix**\n =||= ```\nI created a recursive method to sort JsonObjects. It works for Maps (and \nObjects). I don't see how it could sort Sets though.\n\nIntroducing another flag on the builder to trigger sorting of Maps and Sets \nwould not change the behavior if its default was false.\n```\n\nOriginal comment by `th.kiesl...@gmail.com` on 11 Sep 2012 at 2:11\n =||= ```\nI agree. I've worked with other json libraries in other languages (e.g., perl), \nand having the ability (optionally, of course) to sort by keys is very useful \nin some cases. I'm currently trying to do this myself, and I'm finding I have \nto write the code by hand.\n```\n\nOriginal comment by `paul.cle...@steeleye.com` on 18 Dec 2014 at 5:18\n =||= ", 0], ["469", "Support Throwable and Exception for serializing/deserializing", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:32:59 PM", "```\nhttps://groups.google.com/d/topic/google-gson/fGTi5EEc9jM/discussion\n```\n\nOriginal issue reported on code.google.com by `in...@trymph.com` on 6 Sep 2012 at 10:58", "```\njust for clarity, here's a patch that implements this.\n\n```\n\nOriginal comment by `sysbliss` on 6 Sep 2012 at 11:50\n\nAttachments:\n- [ReflectivePolymorphicThrowables.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-469/comment-1/ReflectivePolymorphicThrowables.patch)\n =||= ```\nany progress on this?\n```\n\nOriginal comment by `sysbliss` on 25 Sep 2012 at 11:37\n =||= Original comment by `limpbizkit` on 4 Feb 2013 at 4:07\n- Added labels: **Type-Enhancement**, **Priority-High**\n- Removed labels: **Type-Defect**, **Priority-Medium**\n =||= ```\ndealing with Throwables still fails in gson-2.2.4. Is the patch ready to be \nused ?\n```\n\nOriginal comment by `liviu.ca...@gmail.com` on 13 Jul 2013 at 4:34\n =||= ```\nI need that patch, too. I'm currently writing a client / server architecture \nand the exceptions should also be returned to the client.\n```\n\nOriginal comment by `noctur...@googlemail.com` on 14 Apr 2014 at 10:11\n =||= ```\nWe will not integrate that patch since it has a huge security hole. We can't \ntrust the class information present in the JSON. We will have to think of an \nalternate way.\n```\n\nOriginal comment by `inder123` on 17 Apr 2014 at 10:15\n =||= ```\nIt is ridiculous that GSON still does not support to serialize \nThrowable/Exception objects 2 years after it has been reported. This cannot be \ntoo hard to implement.\n\nAnyway, thanks for your great work. But I would be much more thankful if you \nwould solve this problem ;P\n```\n\nOriginal comment by `simonspr...@gmail.com` on 20 Aug 2014 at 6:38\n =||= ```\nsimonsprankel: I have had some false starts on this, but punted when realized \nthat the specs aren't clear. Can you explain what your expectations are by \nserializing/deserializing an exception object? Please provide some examples as \nwell.\n```\n\nOriginal comment by `inder123` on 20 Aug 2014 at 6:42\n =||= ```\nThanks for your superfast reply! Just FYI, there is also a Stack Overflow \nthread on this topic: \nhttps://stackoverflow.com/questions/8151082/gson-an-java-throwable\n\nIn the Stack Overflow thread, there is also an example how Jackson serializes \nexceptions (though I am not sure if it is still up to date).\n\nI personally would expect that the important fields are properly \nserialized/unserialized (so that the getter functions return the same data \nafter the serialization process):\n- cause\n- detailMessage\n- stacktrace\n- suppressedExceptions\n\nBut in any case, serializing/deserializing something or just the real basic \nstuff would be better than an exception.\n```\n\nOriginal comment by `simonspr...@gmail.com` on 20 Aug 2014 at 6:53\n =||= ```\nThe big problem is the cause field. That is what causes the \nCircularReferenceException. I can't figure out a good way to solve it when it \nis not null. It requires the general solution for CircularReferenceException \nwhich we have punted on for too long. We used to support it in Gson 1.x....\n```\n\nOriginal comment by `inder123` on 20 Aug 2014 at 7:25\n =||= ```\nAs already written, just skipping the cause field would be better than getting \nan exception. It is not too bad if it will be properly documented.\nBut another idea: Would it be possible to just break the recursion? If we want \nto serialize a Throwable \"e\", which has a Throwable \"e2\" in its cause field, \ncan we just ignore the cause field of e2? This should solve the problem, right?\n```\n\nOriginal comment by `simonspr...@gmail.com` on 20 Aug 2014 at 7:32\n =||= ```\nThis issue was closed by revision r1308.\n```\n\nOriginal comment by `inder123` on 16 Nov 2014 at 10:25\n- Changed state: **Fixed**\n =||= ```\nThanks inder123!\nDo you know when this is scheduled for release?\n```\n\nOriginal comment by `ant...@gmail.com` on 18 Nov 2014 at 11:13\n =||= ```\nantweb: Hopefully, this week itself. Just waiting for some code reviews to \ncomplete.\n```\n\nOriginal comment by `inder123` on 19 Nov 2014 at 7:16\n =||= ```\nThanks - please let me know when this has been released as my project is \nwaiting :)\n```\n\nOriginal comment by `ant...@gmail.com` on 10 Dec 2014 at 2:53\n =||= ```\n@antweb: This is already publicly available with Gson 2.3.1\n```\n\nOriginal comment by `inder123` on 16 Dec 2014 at 7:19\n =||= ", 0], ["470", "Implement \"Object fromJson(String json)\"", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:02 PM", "```\nI'd like to propose to add a non-generic method to Gson: Object fromJson(String \njson). The return value is either a primitive, a List, or a Map. The benefit is \nthat you don't need to provide the 2nd parameter (either Class or Type) when \nyou don't know the type of the json string. This might not be that useful for \nyou Java application, but it would be super helpful for JSR-223 (scripting \nlanguage) such as Jython. \n\nLet me know if you guys like the idea or not. I can contribution a patch if \nneeded.\n```\n\nOriginal issue reported on code.google.com by `danith...@gmail.com` on 10 Sep 2012 at 3:53", "```\nSample code:\n\n    public Object fromJson(String json) {\n        JsonElement element = new JsonParser().parse(json);\n        return fromJson(element);\n    }\n\n    private Object fromJson(JsonElement element) {\n        if (element.isJsonNull()) {\n            return null;\n        } else if (element.isJsonPrimitive()) {\n            JsonPrimitive primitive = element.getAsJsonPrimitive();\n            if (primitive.isBoolean()) {\n                return primitive.getAsBoolean();\n            } else if (primitive.isNumber()) {\n                return primitive.getAsNumber();\n            } else if (primitive.isString()) {\n                return primitive.getAsString();\n            }\n            throw new AssertionError(\"Invalid JsonPrimitive.\");\n        } else if (element.isJsonArray()) {\n            List<Object> list = new ArrayList<Object>();\n            for (JsonElement e : element.getAsJsonArray()) {\n                list.add(fromJson(e));\n            }\n            return list;\n        } else if (element.isJsonObject()) {\n            Map<String, Object> map = new HashMap<String, Object>();\n            for (Map.Entry<String, JsonElement> entry : element.getAsJsonObject().entrySet()) {\n                map.put(entry.getKey(), fromJson(entry.getValue()));\n            }\n            return map;\n        }\n        throw new AssertionError(\"Invalid JsonElement.\");\n    }\n```\n\nOriginal comment by `danith...@gmail.com` on 10 Sep 2012 at 4:18\n =||= ```\nYou already get this with Gson.fromJson(String, Object.class)\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:08\n- Changed state: **Done**\n =||= ", 0], ["471", "Error in the Javadoc", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:02 PM", "```\nWhat steps will reproduce the problem?\n1. Head over to this page: \nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/J\nsonElement.html#getAsJsonArray()\n\nWhat is the expected output? What do you see instead?\nThe two statements \"If the element is of some other type, a ClassCastException \nwill result.\" and \"Throws: IllegalStateException - if the element is of another \ntype.\" are contradictory.\n\nWhat version of the product are you using? On what operating system?\nCurrent online Javadoc.\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `stevenroose` on 11 Sep 2012 at 10:01", "```\nFixed in r1293.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:14\n- Changed state: **Fixed**\n =||= ", 0], ["472", "JsonParseException when encountering an empty value for an int or long", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:03 PM", "```\nWhat steps will reproduce the problem?\n1. Create a data class with an int data member and a default value of 0 (any \nvalue would do).  Example:\npublic class GsonData {\n    public int intValue = 0;\n}\n\n2. Create a json document with an empty value for intValue.  Example:\n{\n    \"intValue\":\"\"\n}\n3. Parse the document:\nString jsonString = < the json file as a string >\nGsonData testDoc = new Gson().fromJson(jsonString, GsonData.class);\n\nWhat is the expected output? \nI would expect that the document would parse correctly and result in intValue \nhaving the default value of 0.\n\nWhat do you see instead?\nIt throws a parse exception because the empty value could not be converted to \nan int.\n\ncom.google.gson.JsonParseException: The JsonDeserializer IntegerTypeAdapter \nfailed to deserialized json object \"\" given the type int\n\nWhat version of the product are you using? \ngson-1.5.jar\n\nOn what operating system?\nWindows 2008 R2\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `bryan.am...@gmail.com` on 17 Sep 2012 at 4:00", "```\nThis solution posted here worked for me: \nhttps://groups.google.com/forum/#!msg/google-gson/kNf5HADtY14/bdD1xmDPbH0J\n\nI created a new class as follows:\n\npublic class IntTypeAdapter extends TypeAdapter<Number> {\n\n    @Override\n    public void write(JsonWriter out, Number value)\n            throws IOException {\n        out.value(value);\n    }\n\n    @Override\n    public Number read(JsonReader in) throws IOException {\n        if (in.peek() == JsonToken.NULL) {\n            in.nextNull();\n            return null;\n        }\n        try {\n            String result = in.nextString();\n            if (\"\".equals(result)) {\n                return null;\n            }\n            return Integer.parseInt(result);\n        } catch (NumberFormatException e) {\n            throw new JsonSyntaxException(e);\n        }\n    }\n}\n\n\nAnd then ran the gson parsing as follows:\n\nGson gson = new GsonBuilder()\n    .registerTypeAdapter(int.class, new IntTypeAdapter())\n    .registerTypeAdapter(Integer.class, new IntTypeAdapter()).create();\nmyObject = gson.fromJson(myJsonString, Student.class);\n\n\n```\n\nOriginal comment by `graili...@gmail.com` on 25 Sep 2012 at 7:08\n =||= ```\nWorking as intended.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:09\n- Changed state: **WontFix**\n =||= @GoogleCodeExporter Why won't this issue be fixed? Isn't this considered as a bug?\n =||= @GokhanArik it is not logical to parse `\"\"` empty string as `0` integer =||= I know this bug is closed but it's one of the top google results when searching for this issue so I wanted to provide a broader solution to what was posted above, since it only attempts to handle empty strings\r\n\r\nThis code below will continue to correctly parse json tokens that look like ints, doubles, and strings ints and string doubles, while defaulting to 0 (or null for Integer types) on nulls, empty strings, invalid strings, and boolean values\r\n\r\n```\r\npublic static final TypeAdapter<Number> UNRELIABLE_INTEGER = new TypeAdapter<Number>() {\r\n    @Override\r\n    public Number read(JsonReader in) throws IOException {\r\n        JsonToken jsonToken = in.peek();\r\n        switch (jsonToken) {\r\n            case NUMBER:\r\n            case STRING:\r\n                String s = in.nextString();\r\n                try {\r\n                    return Integer.parseInt(s);\r\n                } catch (NumberFormatException ignored) {\r\n                }\r\n                try {\r\n                    return (int)Double.parseDouble(s);\r\n                } catch (NumberFormatException ignored) {\r\n                }\r\n                return null;\r\n            case NULL:\r\n                in.nextNull();\r\n                return null;\r\n            case BOOLEAN:\r\n                in.nextBoolean();\r\n                return null;\r\n            default:\r\n                throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\r\n        }\r\n    }\r\n    @Override\r\n    public void write(JsonWriter out, Number value) throws IOException {\r\n        out.value(value);\r\n    }\r\n};\r\npublic static final TypeAdapterFactory UNRELIABLE_INTEGER_FACTORY = TypeAdapters.newFactory(int.class, Integer.class, UNRELIABLE_INTEGER);\r\n\r\nGson gson = new GsonBuilder()\r\n    .registerTypeAdapterFactory(UNRELIABLE_INTEGER_FACTORY)\r\n    .create();\r\n``` =||= ", 0], ["473", "SerializedName does not work with enum types in EnumMap", "Google Code Exporter", "GoogleCodeExporter", "09/06/15, 05:45:15 PM", "```\nWhat steps will reproduce the problem?\n1. Defining an enum type such as:\npublic enum Test {\n    @SerializedName(\"aaa\")\n    A,\n    @SerializedName(\"bbb\")\n    B,\n    @SerializedName(\"ccc\")\n    C\n}\n\n2. Testing the enum type with a EnumMap class, such as:\n\nGson gson = new Gson();\nSystem.out.println(gson.toJson(Test.A));\nSystem.out.println(gson.toJson(Test.B));\nSystem.out.println(gson.toJson(Test.C));\n\nMap<Test, Integer> testMap = new EnumMap<Test, Integer>(Test.class);\ntestMap.put(Test.A, 3);\ntestMap.put(Test.B, 2);\ntestMap.put(Test.C, 1);\nSystem.out.println(gson.toJson(testMap));\n\nWhat is the expected output? What do you see instead?\nI would expect to have an output like this:\n\"aaa\"\n\"bbb\"\n\"ccc\"\n{\"aaa\":3,\"bbb\":2,\"ccc\":1}\n\nHowever, the EnumMap class does not seem to take into account the \n@SerializedName annotation, and I obtain this instead:\n\"aaa\"\n\"bbb\"\n\"ccc\"\n{\"A\":3,\"B\":2,\"C\":1}\n\nWhat version of the product are you using? On what operating system?\nI'm using Gson 2.2.2 in Windows 7\n\nPlease provide any additional information below.\nThis problem is present in both serialization and deserialization. I have a \nJson file that I cannot modify, with map fields such as \"Item_Value#Parameter\". \nI would like to deserialize it avoiding the use of a Map<String, Integer> class \nif possible.\n```\n\nOriginal issue reported on code.google.com by `FernA...@gmail.com` on 22 Sep 2012 at 2:11", "```\nI am new with Gson, but I managed to do this with a custom serializer and \ndeserializer. Nevertheless, I still think this should be implemented without \nneeding them:\n\nGsonBuilder gb = new GsonBuilder();\nType t = (new TypeToken<Map<Test, Integer>>(){}).getType();\ngb.registerTypeAdapter(t, new JsonSerializer<Map<Test,Integer>>(){\n\n    @Override\n    public JsonElement serialize(Map<Test, Integer> arg0, Type arg1, JsonSerializationContext arg2) {\n        // TODO Auto-generated method stub\n        JsonObject obj = new JsonObject();\n        for (Test t : arg0.keySet()) {\n            obj.add(arg2.serialize(t).getAsString(), new JsonPrimitive(arg0.get(t)));\n        }\n        return obj;\n    }\n\n});\ngb.registerTypeAdapter(t, new JsonDeserializer<Map<Test,Integer>>(){\n\n    @Override\n    public Map<Test, Integer> deserialize(JsonElement arg0, Type arg1, JsonDeserializationContext arg2) throws JsonParseException {\n        Map<Test, Integer> res = new EnumMap<Test, Integer>(Test.class);\n        Entry<String, JsonElement> entry;\n        Test tVal;\n        Iterator<Entry<String,JsonElement>> it = arg0.getAsJsonObject().entrySet().iterator();\n        while (it.hasNext()) {\n            entry = it.next();\n            tVal = arg2.deserialize(new JsonPrimitive(entry.getKey()), Test.class);\n            res.put(tVal, entry.getValue().getAsInt());\n        }\n        return res;\n    }\n\n});\nGson gson = gb.create();\n\nMap<Test, Integer> testMap = new EnumMap<Test, Integer>(Test.class);\ntestMap.put(Test.A, 3);\ntestMap.put(Test.B, 2);\ntestMap.put(Test.C, 1);\nSystem.out.println(gson.toJson(testMap, t));\n\ntestMap = gson.fromJson(gson.toJson(testMap, t), t);\nSystem.out.println(testMap.get(Test.A));\nSystem.out.println(testMap.get(Test.B));\nSystem.out.println(testMap.get(Test.C));\n\nThe output now is:\n{\"aaa\":3,\"bbb\":2,\"ccc\":1}\n3\n2\n1\n```\n\nOriginal comment by `FernA...@gmail.com` on 22 Sep 2012 at 4:34\n =||= ```\nI am encountering similar issue, I am using Gson on android. \n\n    public enum Mode {\n        @SerializedName(\"no_account_creation\")\n        LOGIN, \n        @SerializedName(\"force_account_creation\")\n        REGISTER, \n        @SerializedName(\"auto\")\n        AUTO;\n    }\n\nOn 2.3.6 and above:\nMode.AUTO serializes to \"auto\"\n\nOn HTC explorer 2.3.5 \nMode.AUTO serializes to \"AUTO\"\n\nIs it possible that the fix of \nhttps://code.google.com/p/google-gson/issues/detail?id=347 \nbe somehow depended on the version of dvm?\n\n```\n\nOriginal comment by `Platinum...@gmail.com` on 18 Mar 2013 at 9:51\n =||= Use `GsonBuilder.enableComplexMapKeySerialization()` to avoid this problem.\n =||= ", 0], ["475", "jsonparser performance", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:05 PM", "```\nHello,\n\ni have look with interest google-gson as a way to serialize complex java object \nto webapp.\n\nnow, i have to get the output back (json) and convert into a standard plain DOM \nobject (or something like that) to be able to work with a generic json tree.\n\nWhat i have done so far is to use a \nJsonReader reader = new JsonReader(in)\nand then write a simple recursive function (taht is 90% equals to what you do \nwhen you use the jsonreader)\n to parse the three (do some peek, switch case, make it recursive and so on)\n\neverything work like a charm, and is quite fast.\n\ni have than take a look to json-smart v2 (newer ersion , used only as a parser, \nand is 20% fast than gson 2.2.2 (never version) parser\n\n\n\nhere are some example\ngsonParser 5009ms\njsonSMART 3633ms\n\nthis is done with a huge json, iterated 20000 times x 10 repetition each (to \nallow a bit of warmup)\nand this data are the avg except the first 2 iteration (leaved out to allow a \nwarmup, useful for this kind of \nmicrobenckmark imho)\n\nthe json is a nested root -> 10 child -> 10 subchild each node with 10 random \nattr (mixed)\n\nThe code that create my custom \"dom\" element (that is for my convenience \nsimilar to dom4j syntax due to migration issue) is a wrapper for both library, \nthen i use their internal obj to create my wrapper (creation costs is the same, \nthe 2 method generate the same output)\n\n\nHave you ever try some benchmarking with jsonSMART?\nObviusly gson is used to do other thinks, it's not only a parser for json, but \nin this case the save is pretty high.\nI also haven't digg to much on jsonSMART, but probably it can make do work \nbetter, as in your case i don't use your jsonElement, but directly the parser \n(on jsonSMART i use their convenient jsonElement, since is so fast)\n\nwarm regards\n\n```\n\nOriginal issue reported on code.google.com by `gippo...@gmail.com` on 27 Sep 2012 at 1:29", "```\nWe rewrite the parser for the next release.\nhttps://code.google.com/p/google-gson/source/detail?r=1184\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:30\n- Changed state: **Done**\n =||= ", 0], ["476", "Support exception handling much informative.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:06 PM", "```\nWhat steps will reproduce the problem?\nIf my response is very large then \"Caused by: java.lang.IllegalStateException: \nExpected BEGIN_ARRAY but was BEGIN_OBJECT\" should be with element key so that \ndevelopment time can be reduced because so much complex response can not be \ntraced by observing.\n\n```\n\nOriginal issue reported on code.google.com by `bhavesh4...@gmail.com` on 29 Sep 2012 at 6:55\n- Merged into: #395", "Original comment by `limpbizkit` on 4 Feb 2013 at 3:31\n- Changed state: **Duplicate**\n =||= ", 0], ["477", "DefaultDateTypeAdapter throws JsonSyntaxException on deserializing an empty string", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:07 PM", "```\nWhen you have JSON containing a field (mapped as Date) which is set to the \nempty string, e.g. {..., \"myDateField\":\"\", ...} the DefaultDateTypeAdapter \nthrows an JsonSyntaxException in the method \"deserializeToDate\" because an \nemtpy string value can not be parsed by DateFormat. \n\nWould it not make sense in the \"deserialize\" method to check for an emtpy \nstring before calling \"deserializeToDate\" and if an empty string is found to \nreturn null?\n\n    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n        if (!(json instanceof JsonPrimitive)) {\n            throw new JsonParseException(\"The date should be a string value\");\n        }\n        String value = json.getAsString();\n        if (value==null || \"\".equals(value)) {\n            return null;\n        }\n        Date date = deserializeToDate(json);\n...\n\n```\n\nOriginal issue reported on code.google.com by `ronald.p...@googlemail.com` on 9 Oct 2012 at 9:42", "```\nNull isn't an empty string. You can write your own TypeAdapter if you want this \nbehavior.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:32\n- Changed state: **WontFix**\n =||= ", 0], ["478", "Strange behavior on Map serialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:08 PM", "```\nI'm trying to serialize a generic typed map using gson.\nAs result of \"toJson(...)\" I get following string:\n\"{\"java.awt.Point[x\\u003d10,y\\u003d10]\":{\"x\":101,\"y\":101}}\"\n\nit seems that for key it just call \"toString()\" function instead of \nserialization.\n\nOn desirialization I get following exception:\n\nException in thread \"main\" com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 \ncolumn 39\n\ndue to the bad json format.\n\nIs there any workaround?\n\nThanks In Advance.\n\ngabber\n```\n\nOriginal issue reported on code.google.com by `i7gab...@googlemail.com` on 9 Oct 2012 at 3:57\n\nAttachments:\n- [MapSerialisation.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-478/comment-0/MapSerialisation.java)", "```\nProblem solved, my fault, sorry.\nThere is an option called ComplexMapKeySerialization.\nIt can be enabled using GsonBuilder.\n\nGsonBuilder builder = new GsonBuilder();\nbuilder.enableComplexMapKeySerialization();\nbuilder.create();\n\n\n```\n\nOriginal comment by `i7gab...@googlemail.com` on 16 Nov 2012 at 4:35\n =||= Original comment by `limpbizkit` on 4 Feb 2013 at 3:33\n- Changed state: **Invalid**\n =||= ", 0], ["480", "Multiple TypeAdapter issue..", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:09 PM", "```\nWhat steps will reproduce the problem?\n\"Details\":{\n\n       \"Role\":\"abc\",\n       \"Team\":\n          {\n             \"active\":\"yes\",\n             \"primary\":\"yes\",\n             \"content\":\"abc\"\n             \"Test\":\n             {\n                 \"key1\":\"value1\",\n                 \"key2\":\"value2\",\n                 \"key3\":\"value3\"\n             }\n          }\n}\n\n I am facing problem while my response is more dynamic..Team and Test can be JsonArray or JsonObject.. It really harassing me because sometime Test object may array when more data, may object when single data, string when no data. There is no consistency in response.\n\nLet me know how much Google Json is extensible?.\n\nWhat is the expected output? What do you see instead?\nIn very large response, One or more element can be dynamic(may be JsonObject, \nJsonArray, String) How can I register more TypeAdapter?\n\n\n\nWhat version of the product are you using? On what operating system?\nAnddroid 4.0+\n\nPlease provide any additional information below.\n```\n\nOriginal issue reported on code.google.com by `bhavesh4...@gmail.com` on 18 Oct 2012 at 7:41", "```\nWhat's the bug?\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:35\n- Changed state: **Invalid**\n =||= ", 0], ["481", "com.google.gson 2.2.2 - Uncompatible with appengine sdk 1.7", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:09 PM", "```\nWhat steps will reproduce the problem?\n1. import com.google.gson.Gson is valid with appengine sdk 1.4 but not with \n1.7. error observed as in point 2.\n2. with above import, Create object of Gson is error. NoClassDefFoundError can \nbe seen in appengine logs.\n4. If I allow eclipse to import \ncom.google.appengine.repackaged.com.google.gson.Gson; then its working fine. \nBut has a warning that app may break without warning.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\ncom.google.gson 2.2.2\nAppengine sdk 1.7\nEclipse Juno\nWindows 7\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `abhijits...@gmail.com` on 18 Oct 2012 at 11:31", "```\nThis is an appengine bug. Your best bet is to use jarjar to repackage Gson.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:35\n- Changed state: **WontFix**\n =||= ", 0], ["483", "Nullpointer exception on toJson();", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:11 PM", "```\nWhat steps will reproduce the problem?\npackage com.thundashop.app.banner;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class ATest {\n    class Test {\n        String test = \"test\";\n        Class something = null;\n    }\n\n    private void run() {\n        Test test = new Test();\n        System.out.println(test.test);\n\n        Gson gson = new GsonBuilder().serializeNulls().create();\n        String json = gson.toJson(test);\n        System.out.println(json);\n    }\n\n\n    public static void main(String[] args) {\n        ATest test = new ATest();\n        test.run();\n    }\n}\n\nWhat is the expected output? What do you see instead?\nI have no idea. a string?\nFails due to Class something = null;\n\nWhat version of the product are you using? On what operating system?\ngson 2.2, linux ubuntu 12.04\n\nPlease provide any additional information below.\n```\n\nOriginal issue reported on code.google.com by `boggib...@gmail.com` on 31 Oct 2012 at 6:46", "```\n\nForgot the stack trace:\n\nException in thread \"main\" java.lang.NullPointerException\n    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:64)\n    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:61)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)\n    at com.google.gson.Gson.toJson(Gson.java:586)\n    at com.google.gson.Gson.toJson(Gson.java:565)\n    at com.google.gson.Gson.toJson(Gson.java:520)\n    at com.google.gson.Gson.toJson(Gson.java:500)\n    at com.thundashop.app.banner.ATest.run(ATest.java:17)\n    at com.thundashop.app.banner.ATest.main(ATest.java:24)\nJava Result: 1\n\n\n```\n\nOriginal comment by `boggib...@gmail.com` on 31 Oct 2012 at 6:47\n =||= ```\nFixed with r1226.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:53\n- Changed state: **Done**\n =||= ", 0], ["486", "Mistype in JavaDoc", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:12 PM", "```\nJavaDoc for com.google.gson.stream.JsonReader#endObject reads:\n\n/**\n * Consumes the next token from the JSON stream and asserts that it is  the\n * end of the current array.\n */\n\nwhile I would expect something like\n\n/**\n * Consumes the next token from the JSON stream and asserts that it is  the\n * end of the current object.\n */\n\n\nversion: 2.1\n```\n\nOriginal issue reported on code.google.com by `kirill.s...@gmail.com` on 10 Nov 2012 at 9:51", "```\nThis was fixed. Thanks.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:16\n- Changed state: **Fixed**\n =||= ", 0], ["487", "gson not working when converting list<Class> where class contains JsonObject", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:13 PM", "```\nWhat steps will reproduce the problem?\n\n1. Create an Item class with getters and setters.\npublic class Item { private JsonObject param; }\n\n2. Create a string representation of a json and call it itemList\nString itemList = \"[{param:{color: 1,shape:1}, {param:{color: 2,shape:2}]\";\n\n3. Use gson to convert the itemList into a List<Item>\nList<Item> list = gson.fromJson(itemList, new \nTypeToken<List<Item>>(){}.getType());\n\nWhat is the expected output? What do you see instead?\n\nLoop through the list and print out param. It will show {}.\nI'm expecting to see \n{ color: 1, shape: 1}\n{ color: 2, shape: 2}\n\nWhat version of the product are you using? On what operating system?\nIm running gson 2.2.2 on windows 7.\n\nPlease provide any additional information below.\n\nTo get around this problem, I'm currently using a Map in place of a JsonObject.\n```\n\nOriginal issue reported on code.google.com by `ThaiTra...@gmail.com` on 12 Nov 2012 at 1:55", "```\nThe current behavior is correct. Why should we treat JsonObject as a map?\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:42\n- Changed state: **Invalid**\n =||= ", 0], ["488", "Stack Overflow", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:13 PM", "```\nWhat steps will reproduce the problem?\n1. Run the attached test\n\nWhat is the expected output? What do you see instead?\nA JSON document\n\n\nWhat version of the product are you using? On what operating system?\ngson-2.2.2 under Eclipse Indigo SR2 under Windows 7.\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `thomh...@gmail.com` on 20 Nov 2012 at 4:51\n\nAttachments:\n- [GsonTest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-488/comment-0/GsonTest.zip)", "```\nPlease isolate bugs when reporting them.\n```\n\nOriginal comment by `limpbizkit` on 21 Nov 2012 at 12:31\n- Changed state: **Invalid**\n =||= ```\nIt would be nice if GSON detected circular dependencies.\nOr gave some way to limit depth to, say, 2 levels.\n```\n\nOriginal comment by `dynaw...@gmail.com` on 23 Jan 2013 at 4:03\n =||= ```\nOr gave some means to limit which values are being serialized. such as to \nexclude something you know is a circular reference. Probably a piece of data \nthat doesn't explain the data you are looking at anyway.\n```\n\nOriginal comment by `Boneless1213@gmail.com` on 26 Feb 2013 at 7:23\n =||= ```\nDo you know what field(s) are causing the circular reference? If so, we can use \nan ExclusionStrategy and the .shouldSkipField() method to handle it.\nThe problem is, I can't figure out what part of the exception is causing the \ncircular reference.\n```\n\nOriginal comment by `bradyvid...@gmail.com` on 4 Mar 2014 at 8:17\n =||= ", 0], ["489", "Gson fails with Logger (log4j)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:15 PM", "```\nWhat steps will reproduce the problem?\n1. Create a POJO with a reference to Log4j Logger\n2. Convert this POJO using Gson \n3.\n\nWhat is the expected output? What do you see instead?\nSince Logger is not serializable it should throw an exception with the name of \nthe field saying that it is not serializable \n\nWhat version of the product are you using? On what operating system?\n2.0\n\nPlease provide any additional information below.\n\nTry to serialize below object:\n\npublic class TestBean {\n\n    private Logger LOG = Logger.getLogger(TestBean.class); \n    private int i;\n    public int getI() {\n        return i;\n    }\n    public void setI(int i) {\n        this.i = i;\n    }\n\n\n}\n\n```\n\nOriginal issue reported on code.google.com by `achatter...@gmail.com` on 26 Nov 2012 at 7:34", "```\nRegister a type adapter for this.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:56\n- Changed state: **WontFix**\n =||= ", 0], ["491", "Make source jar an OSGi source code bundle", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:16 PM", "```\nPlease add the following lines to the source jar to make it an OSGi source code \nbundle.\n\nBundle-ManifestVersion: 2\nBundle-SymbolicName:com.google.gson.source\nBundle-Version: 2.2.2\nEclipse-SourceBundle: com.google.gson;version=\"2.2.2\"\n\nThis can be achieved easily by adding this snippet to the maven-source-plugin.\n\n        <configuration>\n          <archive>\n            <manifestEntries>\n              <Eclipse-SourceBundle>com.google.gson;version=\"${project.version}\"</Eclipse-SourceBundle>\n              <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>\n              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n              <Bundle-Version>${project.version}</Bundle-Version>\n            </manifestEntries>\n          </archive>\n        </configuration>\n```\n\nOriginal issue reported on code.google.com by `adriaan....@gmail.com` on 20 Dec 2012 at 10:10", "```\nHas this issue been resolved yet?  Thanks!\n```\n\nOriginal comment by `MBah2...@gmail.com` on 26 Sep 2013 at 6:09\n =||= ```\n@MBah2... : yes :\n\nIf you download the last jar (ex. from \nhttp://mvnrepository.com/artifact/com.google.code.gson/gson/2.2.4 ) you should \nsee bundle informations into jar://META-INF/MANIFEST.MF :\n\n\nManifest-Version: 1.0\nExport-Package: com.google.gson;version=2.2.4, com.google.gson.annotat\n ions;version=2.2.4, com.google.gson.reflect;version=2.2.4, com.google\n .gson.stream;version=2.2.4, com.google.gson.internal;version=2.2.4, c\n om.google.gson.internal.bind;version=2.2.4\nBundle-ClassPath: .\nBuilt-By: inder\nBundle-Name: Gson\nCreated-By: Apache Maven 3.0.4\nBundle-RequiredExecutionEnvironment: J2SE-1.5\nBundle-Vendor: Google Gson Project\nBundle-ContactAddress: http://code.google.com/p/google-gson/\nBundle-Version: 2.2.4\nBuild-Jdk: 1.7.0_21\nBundle-ManifestVersion: 2\nBundle-Description: Google Gson library\nBundle-SymbolicName: com.google.gson\nArchiver-Version: Plexus Archiver\n\nI also load it with success onto OSGi fwk.\n\nMaybe this issue could be closed..\n```\n\nOriginal comment by `BVandepu...@gmail.com` on 16 Apr 2014 at 1:25\n =||= ```\nClosed as suggested by BVandeputte.\nThanks for the verification.\n```\n\nOriginal comment by `inder123` on 17 Apr 2014 at 9:44\n- Changed state: **Verified**\n =||= ", 0], ["492", "Security Exception Reflection Problem in an applet", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:17 PM", "```\nWhat steps will reproduce the problem?\n\nCreate a not signed applet with this code inside (for example init-method):\n--------------\n                String jsonString =\"{\"+\n                        \"'date' : '1.1.1955',\"+\n                        \"'numbers' :  [1,2,3,4,5,6,7,8,9],\"+\n                        \"}\";\n\n                GsonBuilder gb = new GsonBuilder();\n                gb.setDateFormat(\"dd.MM.yyyy\");\n                Gson gson = gb.create();\n\n                Data data = gson.fromJson(jsonString, Data.class);\n\n--------------\n                class Data {\n                    public Date date;\n                    public int [] numbers;\n                    public Data() {}\n                    ... getter and setter...\n                }\n--------------\n\n\nWhat is the expected output? \nNo security exceptions within an applet.\n\nWhat do you see instead?\nSecurity Exception, because reflection is used with \"setAccessible\".\n\n\nWhat version of the product are you using? On what operating system?\nGson 2.2.2., Applet Java 1.7, Applet using JNLP.\n\n\nPlease provide any additional information below.\nCode should work in an applet without any additional privilege.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `uhenni...@googlemail.com` on 27 Dec 2012 at 1:11", "```\nApplets are intentionally unsupported.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:57\n- Changed state: **WontFix**\n =||= ", 0], ["493", "minTemp is conveted in to mINTemp", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:17 PM", "```\nWhat steps will reproduce the problem?\nThis is the test case of mine\n\n String definition = \"{\" +\n                \"  'name':'org.wso2.esb.MediatorStatistics',\" +\n                \"  'version':'2.3.0',\" +\n                \"  'nickName': 'Stock Quote Information',\" +\n                \"  'description': 'Some Desc',\" +\n                \"  'tags':['foo', 'bar'],\" +\n                \"  'metaData':[\" +\n                \"          {'name':'ipAdd','type':'STRING'}\" +\n                \"  ],\" +\n                \"  'payloadData':[\" +\n                \"          {'name':'symbol','type':'string'},\" +\n                \"          {'name':'price','type':'double'},\" +\n                \"          {'name':'volume','type':'int'},\" +\n                \"          {'name':'maxTemp','type':'double'},\" +\n                \"          {'name':'minTemp','type':'double'}\" +\n                \"  ]\" +\n                \"}\";\n\n\n        StreamDefinition streamDefinition1 = EventDefinitionConverterUtils.convertFromJson(definition);\n        Assert.assertTrue(null != streamDefinition1.getStreamId());\n//        System.out.println(gson.toJson(streamDefinition1));\n\n        StreamDefinition streamDefinition2 =\n                new StreamDefinition(\"org.wso2.esb.MediatorStatistics\", \"2.3.0\");\n        List<Attribute> meta = new ArrayList<Attribute>(1);\n        meta.add(new Attribute(\"ipAdd\", AttributeType.STRING));\n        streamDefinition2.setMetaData(meta);\n        List<Attribute> payload = new ArrayList<Attribute>(5);\n        payload.add(new Attribute(\"symbol\", AttributeType.STRING));\n        payload.add(new Attribute(\"price\", AttributeType.DOUBLE));\n        payload.add(new Attribute(\"volume\", AttributeType.INT));\n        payload.add(new Attribute(\"maxTemp\", AttributeType.DOUBLE));\n        payload.add(new Attribute(\"minTemp\", AttributeType.DOUBLE));\n        streamDefinition2.setPayloadData(payload);\n\n        Assert.assertEquals(streamDefinition1, streamDefinition2);\n\n\nWhat is the expected output? What do you see instead?\n\njunit.framework.AssertionFailedError: \nExpected \n:StreamDefinition{streamId='org.wso2.esb.MediatorStatistics-2.3.0-a832ccaa-7379-\n4e37-81c8-3c7046a54a58', name='org.wso2.esb.MediatorStatistics', \nversion='2.3.0', nickName='Stock Quote Information', description='Some Desc', \ntags=[foo, bar], metaData=[Attribute{name='ipAdd', type=STRING}], \ncorrelationData=null, payloadData=[Attribute{name='symbol', type=STRING}, \nAttribute{name='price', type=DOUBLE}, Attribute{name='volume', type=INT}, \nAttribute{name='maxTemp', type=DOUBLE}, Attribute{name='mINTemp', type=DOUBLE}]}\nActual   \n:StreamDefinition{streamId='org.wso2.esb.MediatorStatistics-2.3.0-7415cfec-7821-\n4c8b-85dc-81ac40fdd1e8', name='org.wso2.esb.MediatorStatistics', \nversion='2.3.0', nickName='null', description='null', tags=null, \nmetaData=[Attribute{name='ipAdd', type=STRING}], correlationData=null, \npayloadData=[Attribute{name='symbol', type=STRING}, Attribute{name='price', \ntype=DOUBLE}, Attribute{name='volume', type=INT}, Attribute{name='maxTemp', \ntype=DOUBLE}, Attribute{name='minTemp', type=DOUBLE}]}\n\n\nWhat version of the product are you using? On what operating system?\ni tryed with 2.1 & 2.2.2\nUsing Ubuntu 12.04 java 1.6 \n\n\n\n```\n\nOriginal issue reported on code.google.com by `s...@wso2.com` on 5 Jan 2013 at 6:14", "```\nSorry this is a user bug \nsorry for the inconvenience.\n\n```\n\nOriginal comment by `s...@wso2.com` on 5 Jan 2013 at 6:16\n =||= Original comment by `limpbizkit` on 4 Feb 2013 at 3:57\n- Changed state: **Invalid**\n =||= ", 0], ["494", "Fix interpretation of trailing comma when setLenient() is true.", "Google Code Exporter", "GoogleCodeExporter", "10/10/18, 08:26:16 PM", "```\nThe following code exhibits the issue:\n\n    StringReader reader = new StringReader(\"{foo: ['bar', 'baz',]}\");\n    JsonReader jsonReader = new JsonReader(reader);\n    jsonReader.setLenient(true);\n    JsonParser parser = new JsonParser();\n    JsonElement root = parser.parse(jsonReader);\n    assertEquals(\n        \"Trailing comma should be ignored like in ECMAScript 5.\",\n        2,\n        root.getAsJsonObject().get(\"foo\").getAsJsonArray().size());\n\nCurrently, GSON returns an array that corresponds to:\n\n    [\"bar\", \"baz\", null]\n\nInstead of:\n\n    [\"bar\", \"baz\"]\n\nThis is atrocious. The current behavior is consistent with bad browser behavior \nfrom the last decade. The expected behavior is consistent with ECMAScript 5, as \nwell as any programmer who has ever wanted trailing commas to be ignored so \nthat it is easier to write lists of things. Here is more information on the \nbadness of the current JSON spec:\n\n    http://bolinfest.com/essays/json.html\n\nPlease, please fix this. Anyone who uses JSON for a config language wants to be \nable to write data like this:\n\n   [\n     \"foo\",\n     \"bar\",\n   ]\n\nsuch that it is possible to add something to the list without having to clean \nup the comma from the previous line. The current behavior is incredibly \ncounterintuitive.\n\nAlso, while we're on the subject, the trailing comma should also be supported \nfor map entries:\n\n  {\n    \"foo\": 42,\n    \"bar\": 24,\n  }\n\nAgain, this makes it considerably easier to maintain JSON data files.\n\n```\n\nOriginal issue reported on code.google.com by `bolinf...@gmail.com` on 6 Jan 2013 at 11:58", "```\nI'm worried about breaking others by making such a change. Our current behavior \nwas initially implemented to be consistent with the json.org reference \nimplementation.\n\nThat said, it would a good idea for a 3.0 release, where we can document that \nwe're breaking things in the name of forward progress.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 3:59\n- Added labels: **Type-Enhancement**, **Milestone-Release3.0**\n- Removed labels: **Type-Defect**\n =||= ```\nYes please. I just got burned by this. No parse error, but runtime error by the \nthing that consumed my JSON array because there was an unexpected null at the \nend.\n```\n\nOriginal comment by `bolinf...@gmail.com` on 21 Mar 2013 at 11:31\n =||= ```\nThis is the only issue that is tagged 3.0. Is 3.0 actually on the horizon?\n```\n\nOriginal comment by `bolinf...@gmail.com` on 19 Aug 2014 at 5:23\n =||= ```\nIMHO allowing the trailing comma should be separated from the lenient mode. I'd \nnever come to the idea of using lenient mode with features like \"Array elements \nseparated by ; instead of ,\" - that's plain awful. But trailing commas is \nsomething what happens all the time when editing, especially with maps.\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 27 Aug 2014 at 3:48\n =||= I've just been bitten by this.\r\nJust to clarify: I am not using `jsonReader.setLenient(true);` but don't get an exception while parsing files with trailing commas - is it expected behavior? =||= Wow I've just seen bug #401 and from what I understand, `jsonReader.setLenient` is simply ignored, and therefore (please correct me if I'm wrong),\r\n1/ trailing commas are always valid\r\n2/ they are interpreted as null items\r\n3/ there's no way to change this\r\n\r\n\ud83d\ude40   =||= \ud83d\ude40 =||= Just accidentally stumbled across this while writing tests for our Hadoop REST bindings. It was incredibly surprising and we were lucky to accidentally trigger the bug.\r\n\r\nPlease do correct this, it's not what anybody expects. =||= We will not support this behavior change by default. Write better JSON.\r\nWe could consider a GsonBuilder property ignoreTrailingCommas() but that looks hidious. =||= You mean more hideous than the current \"happily parse invalid JSON without a warning and result in a very surprising results that nobody should reasonably expect\" behavior?  =||= You can use `getAdapter().fromJson()` to work around our bad default of using lenient parsing. =||= ", 0], ["495", "Why Gson doesn't throw a JsonSyntaxException on wrong types", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:19 PM", "```\nWhat steps will reproduce the problem?\n1.have a JsonString like \nString json = \"{\"error\":\"something bad happened\"}\";\n\n2. have a Java class like\nclass Dummy{\n    private String foo;\n}\n\n3. calling Gson.fromJson(json, Dummy.class);\n\nWhat is the expected output? What do you see instead?\nI expect to get a JsonSyntaxException like stated in the docs:\n\"Throws:\n    JsonSyntaxException - if json is not a valid representation for an object of type classOfT\n\"\nbut recieve a Dummy where foo==null\n\n\n\nWhat version of the product are you using? On what operating system?\ngson 1.7.1, Android/Linux\n\nfor further information, see stackoverflow question:\nhttp://stackoverflow.com/questions/14242236/let-gson-throw-exceptions-on-wrong-t\nypes\n\n\n```\n\nOriginal issue reported on code.google.com by `Raf...@gmail.com` on 9 Jan 2013 at 5:11\n- Merged into: #188", "```\nDuplicate of 188, which I've bumped to \"Critical\" priority.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:01\n- Changed state: **Duplicate**\n =||= ", 0], ["496", "Android API 17 (4.2) Gson.fromJson throws java.lang.StackOverflowError", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:20 PM", "```\nWhat steps will reproduce the problem?\n1. Setup an AVD with the 4.2 Android OS (API 17).  I used a Nexus 7, as the \nuser crash reports for our app all came from Nexus 7 devices.\n2.  Attempt to parse our login json package using Gson 2.2.\n3.  StackOverflowError is thrown.\n\nWhat is the expected output? What do you see instead?\nThe expected output is the parsed representation of the login package json.\n\nWhat version of the product are you using? On what operating system?\nAndroid 4.2 (API 17), Gson 2.2.2 lib\n\nPlease provide any additional information below.\nOur json doesn't contain any complex types, just Boolean, String, BigDecimal, \nDate, and ArrayList<T> that hold collections of nested types. I have verified \nthat there are no circular references in the result class.  The gson parser \nworks perfectly fine in all Android OS versions from 2.2 (our minimum supported \nversion) through 4.1, but in 4.2 we are experiencing this errro.\n```\n\nOriginal issue reported on code.google.com by `androidd...@gmail.com` on 18 Jan 2013 at 8:13\n- Merged into: #440\n\nAttachments:\n- [StatckOverflowLogCat_out.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-496/comment-0/StatckOverflowLogCat_out.txt)", "```\n\"stack overflow on call to Lcom/google/gson/internal/$Gson$Types;.resolve:LLLL\" \non Nexus 4 running 4.2.1.\n\nExactly as reported, above. Shipping code runs fine on 2.2 through 4.1.2. Stack \noverflows on 4.2.x.\n```\n\nOriginal comment by `d...@aylanetworks.com` on 19 Jan 2013 at 11:22\n =||= ```\nSame defect here with Nexus 7 running android 4.2.1\nCan someone please provide a solution to that? Of course if i'll find a \nsolution i'll post it here suddenly :)\n\nLuca\n```\n\nOriginal comment by `luca.dim...@gmail.com` on 21 Jan 2013 at 9:09\n =||= ```\nI have the exact same issue. I solved it (for now) by using GSON 1.7.1 but it \nis a lot slower...\n```\n\nOriginal comment by `ferry.sp...@gmail.com` on 21 Jan 2013 at 9:13\n =||= ```\nI have confirmed that rolling back to the 1.7.1 gson release resolves the \nissue.  Here's hoping that someone on the gson team can provide a better \nresolution.  Hopefully this isn't the only course of action for us.  1.7.1 is \nquite a bit slower.\n```\n\nOriginal comment by `androidd...@gmail.com` on 21 Jan 2013 at 7:24\n =||= ```\nI have the same issue. Occurs when a class extends another.\n```\n\nOriginal comment by `juli...@gmail.com` on 22 Jan 2013 at 1:42\n =||= ```\nI get same error :(. Can anyone help?\n```\n\nOriginal comment by `gawronsk...@gmail.com` on 22 Jan 2013 at 5:11\n =||= ```\nSame issue here, app works fine with Android API 16 (4.1.2), on on nexus \ndevices gives FC.\n\nFor now I also went back to Gson v1.7.1 to make it works again..\n```\n\nOriginal comment by `rkat...@gmail.com` on 28 Jan 2013 at 9:17\n =||= ```\nAre you serializing a WeakReference or SoftReference?\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:03\n- Changed state: **Duplicate**\n =||= ```\nNo, my class structure doesn't contain any SoftReference or WeakReference \ndeclarations, just a basic map of String, BigDecimal, int, and ArrayList<T>.\n```\n\nOriginal comment by `peytonmc...@gmail.com` on 4 Feb 2013 at 5:27\n =||= ```\nme too getting same error...plz help anyone\n```\n\nOriginal comment by `jadhav.s...@gmail.com` on 31 Jul 2013 at 10:56\n =||= ```\nSame issue here. App works fine in normal debug mode(when you run your app from \nAndroid SDK to your emulator or phone). But when it's exported and built for \nrelease. It doesn't work.\n```\n\nOriginal comment by `nehalniy...@gmail.com` on 27 Jan 2015 at 9:50\n =||= ", 0], ["497", "Object with a byte[] attribute for storing images cannot be converted to Object from JSON", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:22 PM", "```\nWhat steps will reproduce the problem?\n1. Create this POJO (this is generated by Hibernate reverse engineering tool)\n\npackage com.alinean.network.orm.entities;\n// Generated Nov 29, 2012 4:41:16 PM by Hibernate Tools 3.2.1.GA\n\n\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.*;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n * Community generated by hbm2java\n */\n@Entity\n@Table(name=\"community\"\n    ,catalog=\"network\"\n)\npublic class Community  implements java.io.Serializable {\n\n\n     private String communityId;\n     private String name;\n     private byte status;\n     private boolean privateCommunity;\n     private String blacklist;\n     private String manager;\n     private String networkContact;\n     private boolean allowDisclosureLevel;\n     private String disclosureText;\n     private long createdTimestamp;\n     private Long modifiedTimestamp;\n     private Long expirationTimestamp;\n     private byte[] brandingLogo;\n     private Set<UserCommunityDisclosure> userCommunityDisclosures = new HashSet<UserCommunityDisclosure>(0);\n     private Set<CommunityRegistration> communityRegistrations = new HashSet<CommunityRegistration>(0);\n     private Set<CommunityActionResponse> communityActionResponses = new HashSet<CommunityActionResponse>(0);\n     private Set<UserCommunitySubscription> userCommunitySubscriptions = new HashSet<UserCommunitySubscription>(0);\n     private Set<CommunitySubscription> communitySubscriptions = new HashSet<CommunitySubscription>(0);\n     private Set<CommunityRole> communityRoles = new HashSet<CommunityRole>(0);\n     private Set<VignetteLibrary> vignetteLibraries = new HashSet<VignetteLibrary>(0);\n     private Set<Group> groups = new HashSet<Group>(0);\n\n    public Community() {\n    }\n\n\n    public Community(String communityId, String name, byte status, boolean privateCommunity, String manager, String networkContact, boolean allowDisclosureLevel, long createdTimestamp) {\n        this.communityId = communityId;\n        this.name = name;\n        this.status = status;\n        this.privateCommunity = privateCommunity;\n        this.manager = manager;\n        this.networkContact = networkContact;\n        this.allowDisclosureLevel = allowDisclosureLevel;\n        this.createdTimestamp = createdTimestamp;\n    }\n    public Community(String communityId, String name, byte status, boolean privateCommunity, String blacklist, String manager, String networkContact, boolean allowDisclosureLevel, String disclosureText, long createdTimestamp, Long modifiedTimestamp, Long expirationTimestamp, byte[] brandingLogo, Set<UserCommunityDisclosure> userCommunityDisclosures, Set<CommunityRegistration> communityRegistrations, Set<CommunityActionResponse> communityActionResponses, Set<UserCommunitySubscription> userCommunitySubscriptions, Set<CommunitySubscription> communitySubscriptions, Set<CommunityRole> communityRoles, Set<VignetteLibrary> vignetteLibraries, Set<Group> groups) {\n       this.communityId = communityId;\n       this.name = name;\n       this.status = status;\n       this.privateCommunity = privateCommunity;\n       this.blacklist = blacklist;\n       this.manager = manager;\n       this.networkContact = networkContact;\n       this.allowDisclosureLevel = allowDisclosureLevel;\n       this.disclosureText = disclosureText;\n       this.createdTimestamp = createdTimestamp;\n       this.modifiedTimestamp = modifiedTimestamp;\n       this.expirationTimestamp = expirationTimestamp;\n       this.brandingLogo = brandingLogo;\n       this.userCommunityDisclosures = userCommunityDisclosures;\n       this.communityRegistrations = communityRegistrations;\n       this.communityActionResponses = communityActionResponses;\n       this.userCommunitySubscriptions = userCommunitySubscriptions;\n       this.communitySubscriptions = communitySubscriptions;\n       this.communityRoles = communityRoles;\n       this.vignetteLibraries = vignetteLibraries;\n       this.groups = groups;\n    }\n\n    @Id \n    @GenericGenerator(name=\"id\", strategy=\"com.alinean.network.orm.generators.RandomUUIDGenerator\")\n    @GeneratedValue(generator=\"id\")\n    @Column(name=\"community_id\", unique=true, nullable=false, length=36)\n    public String getCommunityId() {\n        return this.communityId;\n    }\n\n    public void setCommunityId(String communityId) {\n        this.communityId = communityId;\n    }\n\n    @Column(name=\"name\", nullable=false, length=128)\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Column(name=\"status\", nullable=false)\n    public byte getStatus() {\n        return this.status;\n    }\n\n    public void setStatus(byte status) {\n        this.status = status;\n    }\n\n    @Column(name=\"private_community\", nullable=false)\n    public boolean isPrivateCommunity() {\n        return this.privateCommunity;\n    }\n\n    public void setPrivateCommunity(boolean privateCommunity) {\n        this.privateCommunity = privateCommunity;\n    }\n\n    @Column(name=\"blacklist\")\n    public String getBlacklist() {\n        return this.blacklist;\n    }\n\n    public void setBlacklist(String blacklist) {\n        this.blacklist = blacklist;\n    }\n\n    @Column(name=\"manager\", nullable=false, length=65535)\n    public String getManager() {\n        return this.manager;\n    }\n\n    public void setManager(String manager) {\n        this.manager = manager;\n    }\n\n    @Column(name=\"network_contact\", nullable=false, length=65535)\n    public String getNetworkContact() {\n        return this.networkContact;\n    }\n\n    public void setNetworkContact(String networkContact) {\n        this.networkContact = networkContact;\n    }\n\n    @Column(name=\"allow_disclosure_level\", nullable=false)\n    public boolean isAllowDisclosureLevel() {\n        return this.allowDisclosureLevel;\n    }\n\n    public void setAllowDisclosureLevel(boolean allowDisclosureLevel) {\n        this.allowDisclosureLevel = allowDisclosureLevel;\n    }\n\n    @Column(name=\"disclosure_text\")\n    public String getDisclosureText() {\n        return this.disclosureText;\n    }\n\n    public void setDisclosureText(String disclosureText) {\n        this.disclosureText = disclosureText;\n    }\n\n    @Column(name=\"created_timestamp\", nullable=false)\n    public long getCreatedTimestamp() {\n        return this.createdTimestamp;\n    }\n\n    public void setCreatedTimestamp(long createdTimestamp) {\n        this.createdTimestamp = createdTimestamp;\n    }\n\n    @Column(name=\"modified_timestamp\")\n    public Long getModifiedTimestamp() {\n        return this.modifiedTimestamp;\n    }\n\n    public void setModifiedTimestamp(Long modifiedTimestamp) {\n        this.modifiedTimestamp = modifiedTimestamp;\n    }\n\n    @Column(name=\"expiration_timestamp\")\n    public Long getExpirationTimestamp() {\n        return this.expirationTimestamp;\n    }\n\n    public void setExpirationTimestamp(Long expirationTimestamp) {\n        this.expirationTimestamp = expirationTimestamp;\n    }\n\n    @Column(name=\"branding_logo\")\n    public byte[] getBrandingLogo() {\n        return this.brandingLogo;\n    }\n\n    public void setBrandingLogo(byte[] brandingLogo) {\n        this.brandingLogo = brandingLogo;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<UserCommunityDisclosure> getUserCommunityDisclosures() {\n        return this.userCommunityDisclosures;\n    }\n\n    public void setUserCommunityDisclosures(Set<UserCommunityDisclosure> userCommunityDisclosures) {\n        this.userCommunityDisclosures = userCommunityDisclosures;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<CommunityRegistration> getCommunityRegistrations() {\n        return this.communityRegistrations;\n    }\n\n    public void setCommunityRegistrations(Set<CommunityRegistration> communityRegistrations) {\n        this.communityRegistrations = communityRegistrations;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<CommunityActionResponse> getCommunityActionResponses() {\n        return this.communityActionResponses;\n    }\n\n    public void setCommunityActionResponses(Set<CommunityActionResponse> communityActionResponses) {\n        this.communityActionResponses = communityActionResponses;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<UserCommunitySubscription> getUserCommunitySubscriptions() {\n        return this.userCommunitySubscriptions;\n    }\n\n    public void setUserCommunitySubscriptions(Set<UserCommunitySubscription> userCommunitySubscriptions) {\n        this.userCommunitySubscriptions = userCommunitySubscriptions;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<CommunitySubscription> getCommunitySubscriptions() {\n        return this.communitySubscriptions;\n    }\n\n    public void setCommunitySubscriptions(Set<CommunitySubscription> communitySubscriptions) {\n        this.communitySubscriptions = communitySubscriptions;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<CommunityRole> getCommunityRoles() {\n        return this.communityRoles;\n    }\n\n    public void setCommunityRoles(Set<CommunityRole> communityRoles) {\n        this.communityRoles = communityRoles;\n    }\n@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)\n    @JoinTable(name=\"community_vignette_library\", catalog=\"network\", uniqueConstraints=@UniqueConstraint(columnNames=\"vignette_library_id\"), joinColumns = { \n        @JoinColumn(name=\"community_id\", nullable=false, updatable=false) }, inverseJoinColumns = { \n        @JoinColumn(name=\"vignette_library_id\", unique=true, nullable=false, updatable=false) })\n    public Set<VignetteLibrary> getVignetteLibraries() {\n        return this.vignetteLibraries;\n    }\n\n    public void setVignetteLibraries(Set<VignetteLibrary> vignetteLibraries) {\n        this.vignetteLibraries = vignetteLibraries;\n    }\n@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"community\")\n    public Set<Group> getGroups() {\n        return this.groups;\n    }\n\n    public void setGroups(Set<Group> groups) {\n        this.groups = groups;\n    }\n\n    @Override\n    public String toString() {\n        return \"Community{\" + \n                \"communityId=\" + communityId + \n                \", name=\" + name + \n                \", status=\" + status + \n                \", privateCommunity=\" + privateCommunity + \n                \", manager=\" + manager + \n                \", networkContact=\" + networkContact + \n                \", allowDisclosureLevel=\" + allowDisclosureLevel + \n                \", createdTimestamp=\" + createdTimestamp + \n                \", modifiedTimestamp=\" + modifiedTimestamp + \n                \", expirationTimestamp=\" + expirationTimestamp + \n                '}';\n    }\n\n\n}\n\n\n2. Try to convert a Community object from a JSON text using:\n//Convert the JSON string to community\nGson gson = new Gson();\ncommunity = gson.fromJson(communityJSON, Community.class);\n\n3. This is the JSON:\n\"{\"communityId\":null,\"name\":\"Image6\",\"status\":1,\"privateCommunity\":false,\"blackl\nist\":null,\"manager\":\"avillalobos@alinean.com\",\"networkContact\":\"avillalobos@alin\nean.com\",\"allowDisclosureLevel\":false,\"disclosureText\":null,\"createdTimestamp\":0\n,\"modifiedTimestamp\":null,\"expirationTimestamp\":null,\"brandingLogo\":\"/9j/4AAQSkZ\nJRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAc\nHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAw\nMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAC2AcEDASIAAhEBAxEB/8QAHwAAAQUBAQE\nBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJ\nxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZ\nnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NX\nW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8Q\nAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOE\nl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpO\nUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn\n6/9oADAMBAAIRAxEAPwD9DKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig\nAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAq1odsl5rdnDIu6OWdEYZxkFgCKq1e8M\n/8jHp/wD18x/+hCrpq80n3Jn8LPqb/hmXwR/0BP8AycuP/i6+XPF1jFpfivU7aBNkFvdyxRrknaquQBk\n89B3r7fr4l8e/8j1rX/X/AD/+jGrFv30vJ/oaL4X/AF3PYf2cvg14a8efD577VtN+13Qu5Ig/2iWP5QF\nIGFYDue1d7/wzL4I/6An/AJOXH/xdZP7If/JKJP8Ar/l/9BSof2oviZrfw6j0U6Ne/Yzdmbzf3Mcm/bs\nx99TjqenrWtVpNfL8jOmm195uf8My+CP+gJ/5OXH/AMXWZ4l/ZL8Kaxb4sUvNJmVWCtDM0qsx6FhJuJA\nPZSueefTxr/hprxv/ANBv/wAk7f8A+Ir2/wDZ/wDjdJ8WLC6gvoYYNTscM/lAiOVDwGAJOCDwRn0PfAX\nLcblY+d/ib8MtR+FviE2N8A8bgvb3CD5LhPUehHcdvcYJ0PgF4T0/xr8TbPT9Tt/tNnLHKzR72TJCEjl\nSD1HrXuf7VfhyLWfhPcXTKPO0uVJ42xk4LBGH0w2fwFeO/ss/8lm0/wD65Tf+i2pUXdtPpf8AIdVWSa8\nvzPcP+GZfBH/QE/8AJy4/+Lo/4Zl8Ef8AQE/8nLj/AOLrp/HWpTaN4J1i8tn8u4tbKaaJ8A7WVCQcHg8\njvXzB/wANNeN/+g3/AOSdv/8AEUr62HbS57x/wzL4I/6An/k5cf8AxdI37M3ggKf+JJ2/5/Lj/wCLrwj\n/AIaa8b/9Bv8A8k7f/wCIoP7TPjcj/kN/+Sdv/wDEUSTaaQjhZlCTOB0DECm0rMXYk9ScmkoQ5NNtoKK\nKKYgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi\niigAooooAKKKKACiiigAooooAKKKKACr3hn/kY9P/AOvmP/0IVRq94Z/5GPT/APr5j/8AQhWlL416kVP\nhZ9xV8S+Pf+R61r/r/n/9GNX21XxL49/5HrWv+v8An/8ARjVzv416P9DZfC/l+p9Efsh/8kok/wCv+X/\n0FKyv2vPC2p+JYtA/s3Tr/UPJM/mfZrd5dmfLxnaDjOD+Vav7If8AySiT/r/l/wDQUr0PW/FOmeGhH/a\nWo2Gn+dny/tNwkW/GM43EZxkfnW1ZXkvl+RlSdk/mfHq/CrxQzAf8I5rvPHNhKP8A2WvfP2aPgzqHw3t\n72/1YLBe3yiJbdXD+UgJOWIyMk46E4HucDt/+Fp+GP+hj0H/wYRf/ABVY3ij9orwj4WRw2rRX0yoHWKy\nHnl+cYDD5AfYsP5UlKw3G5Q/am16PR/hFdwsQJNRljt4x6/MHP6Ka8Z/ZZ/5LNp//AFym/wDRbVj/ABd\n+LV78WdfW5nT7PaWwKW1sG3CIHqSe7HAyfYelbH7LP/JZtP8A+uU3/otqKC95t9b/AJBVfupLy/M+nvE\n+jf8ACR+G9Q0/zPJ+3W0lv5m3ds3qVzjIzjPTNeK/8MS/9TN/5Tv/ALbXtXifWf8AhHPDeoah5fnfYba\nS48vdt37FLYzg4zjrivFf+G2v+pZ/8qP/ANqqNL+ZetvIP+GJf+pm/wDKd/8AbaxfiL+yr/wgPgy+1f8\nAt77X9iVW8r7F5e/LBfveYcdfStr/AIba/wCpZ/8AKj/9qrF+Iv7VX/CfeDL7SP7B+yfbVVfN+2+Zsww\nb7vljPT1ole2go2urnkNFFFUIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi\niigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAr2b9mD4Z+HPiFoupPq2ni8u7K4Ta\nxmkQBGXgYVgDyp614zXcfAT4qL8LfGPnXIdtNvlENyFGSgzkOB3288ehPerh2Jnfc9G/au+GllpXhKw1\nDSNIsrNLWcrctaWyRfKwAUttA4yMc92968b+HGjS+IPH2j2kMbSPNdx5AGcKGBY/QAEn2FfZOl6tYeLN\nHW4tJ7a/sblSNyEOjjoQf5EH6GotF8HaR4bneXTtK02wlkXYz21skTMM5wSoGRUwvCV2OdpRsjRZgqkk\ngAck+lfD/AIqvV1PxRqVyhBS4upZFI7hnJ/rX0Z+0H8ebHwpod3o+m3EdzrF0jQyeW25bNTkMWI/j6gL\n1HU9s/MlZLWVzR6RsfT37If8AySiT/r/l/wDQUrm/21/9V4c+tx/7SrpP2Q/+SUSf9f8AL/6Clc3+2v8\nA6rw59bj/ANpVpX+KPy/Iih1+f6ngtFFFABXon7LP/JZtP/65Tf8Aotq87r0T9ln/AJLNp/8A1ym/9Ft\nWlPf5P8iKm3zX5n0h8Tf+Sb+IP+wdcf8Aotq+K6+8KKxtrc1vpY+D6K+8KKok+D6K2/iV/wAlE17/ALC\nE/wD6MasSpjK8UypKzaCiiiqJCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo\noooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAt6Nr994dujPp97d2MzLsMlvM0TFc\ng4ypBxwOParmo/EHX9YspLa71zV7q3lGHimvJHR+c8gnB5rIooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo\nooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//2Q==\",\"userCommunityDisclos\nures\":[],\"communityRegistrations\":[],\"communityActionResponses\":[],\"userCommunit\nySubscriptions\":[],\"communitySubscriptions\":[],\"communityRoles\":[],\"vignetteLibr\naries\":[],\"groups\":[]}\"\n\nWhat is the expected output? What do you see instead?\nThe expected output is the Community Object converted from that JSON, the JSON \nis generated by Spring Web Services like this:\n\nHttpEntity<Community> entity = new HttpEntity<>(community);\nResponseEntity<Community> response = \nrestTemplate.postForEntity(getSyncServiceURL(\"url.sync.community.create\"), \nentity, Community.class, userID);\n\nThe problem seems to be with the brandingLogo property, which is a byte[] type.\n\nThe output is:\ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected \nBEGIN_ARRAY but was STRING at line 1 column 5178\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:180)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:721)\n    at com.google.gson.Gson.fromJson(Gson.java:670)\n    at com.google.gson.Gson.fromJson(Gson.java:642)\n    at com.alinean.network.remote.CommunityNetworkWebService.createCommunity(CommunityNetworkWebService.java:120)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)\n    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)\n    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)\n    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)\n    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)\n    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)\n    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363)\n    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353)\nCaused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING \nat line 1 column 5178\n    at com.google.gson.stream.JsonReader.expect(JsonReader.java:339)\n    at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:306)\n    at com.google.gson.internal.bind.ArrayTypeAdapter.read(ArrayTypeAdapter.java:70)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:721)\n    at com.google.gson.Gson.fromJson(Gson.java:670)\n    at com.google.gson.Gson.fromJson(Gson.java:642)\n    at com.alinean.network.remote.CommunityNetworkWebService.createCommunity(CommunityNetworkWebService.java:120)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)\n    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)\n    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)\n    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)\n    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)\n    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)\n    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)\n\nWhat version of the product are you using? On what operating system?\nGson 2.1\nOperating System: OS X\nProcessor:2.2 Ghz Intel Core i7\nRAM: 8GB 1333 MHz DDR3\n\n\nPlease provide any additional information below.\nThe issue only happens when an image is sent in a byte[]\n```\n\nOriginal issue reported on code.google.com by `alevill...@gmail.com` on 22 Jan 2013 at 12:03", "```\nPlease be more concise and direct in bug reports! I'm not sure what the bug is \nhere.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:07\n- Changed state: **Invalid**\n =||= ", 0], ["498", "Wrong Exception message in case of Double.NaN serialization", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:23 PM", "```\nTry to serialize any of special double values {NaN, +Inf, -Inf} using only \ndefault Gson constructor.\n\n\nException is thrown but it specifies that method serializeSpecialDoubleValues \nsholud be used. This method (no longer?) exist inside GsonBuilder, exception \nshould inform user about serializeSpecialFloatingPointValues() method\n\ngson 2.2.2\nUbuntu 10.4\n\n\n```\n\nOriginal issue reported on code.google.com by `Erwi...@gmail.com` on 26 Jan 2013 at 1:08", "```\nThis issue was closed by revision r1227.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:05\n- Changed state: **Fixed**\n =||= ", 0], ["499", "Strict parsing not as strict as it should be", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:23 PM", "```\nAccording to the docs, in strict parsing \"Names that are unquoted\" should throw \nan error, however the following code parses the json perfectly fine, although \nlenient is false:\nnew JsonParser().parse(\"{invalid: 1}\");\n\nI am using gson-2.1.\n```\n\nOriginal issue reported on code.google.com by `rum...@google.com` on 29 Jan 2013 at 10:45", "```\nFor backwards compatibility, JsonParser is always lenient. Use JsonReader for \nstrict parsing.\n```\n\nOriginal comment by `limpbizkit` on 4 Feb 2013 at 4:06\n- Changed state: **WontFix**\n =||= ```\nWith JsonReader, it still works:\nJsonReader reader = new JsonReader(new StringReader(\"{invalid: 1}\"));\nreader.setLenient(false);\nnew JsonParser().parse(reader).getAsJsonObject().get(\"invalid\").getAsInt();\n\nOr did you mean something different?\n```\n\nOriginal comment by `rum...@google.com` on 5 Feb 2013 at 3:45\n =||= ```\nI agree, this issue should be re-opened as the JsonReader isLenient() is \nignored.\n\nThe fromJson(JsonReader reader, Type typeOfT) method has this code:\n\n    boolean oldLenient = reader.isLenient();\n    reader.setLenient(true);\n\nGson is overriding the reader's leniency.\n```\n\nOriginal comment by `craig.es...@gmail.com` on 18 Mar 2014 at 9:28\n =||= Here is a workaround from #1208 for Gson strict parsing with many details and extensive test case: https://stackoverflow.com/questions/43233898/how-to-check-if-json-is-valid-in-java-using-gson/47890960#47890960 =||= ", 0], ["509", "Handle EnumSet properly", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:29 PM", "```\nhttps://groups.google.com/d/msg/google-gson/1d7EtAcSly0/Lk9WW1LLcSsJ\n\n     EnumSet<Color> foo = EnumSet.of(Color.blue, Color.red);\n        String json = gson.toJson(foo);\n        EnumSet<Color> bar = (EnumSet<Color>)gson.fromJson(json, new TypeToken<EnumSet<Color>>() {}.getType());\n        System.out.printf(\"foo: \" + foo + \"\\nbar: \" + bar + '\\n');\n\nGson returns a LinkedHashSet that causes ClassCastException.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Mar 2013 at 2:22", "```\nFixed in r1228\n```\n\nOriginal comment by `inder123` on 4 Apr 2013 at 9:16\n- Changed state: **Fixed**\n =||= ", 0], ["511", "LazilyParsedNumber longValue not parsing consistently with Number documentation", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:29 PM", "```\nhttps://groups.google.com/d/msg/google-gson/5PVS0BIIWWs/1q2wwBK90QcJ\n```\n\nOriginal issue reported on code.google.com by `inder123` on 30 Apr 2013 at 9:16", "```\nFixed r1248.\n```\n\nOriginal comment by `joel.leitch@gmail.com` on 13 May 2013 at 8:44\n- Changed state: **Fixed**\n =||= ", 0], ["515", "serialize and deserialize simple enum", "Google Code Exporter", "GoogleCodeExporter", "09/06/15, 05:46:08 PM", "```\nHow can i serialize and deserialize a simple enum like this ?\n\n\npublic enum Color {\n\n    RED, BLUE, YELLOW;\n}\n\nThanks !\n```\n\nOriginal issue reported on code.google.com by `trabajoe...@gmail.com` on 24 May 2013 at 4:51", "```\nDuplicate of \nhttp://stackoverflow.com/questions/16740078/serialize-and-deserialize-enum-with-\ngson\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 12 Aug 2014 at 5:05\n =||= This should be closed because it is not an issue.\n =||= ", 0], ["516", "serialize and deserialize simple enum", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:32 PM", "```\nHow can i serialize and deserialize a simple enum like this ?\n\n\npublic enum Color {\n\n    RED, BLUE, YELLOW;\n}\n\nThanks !\n```\n\nOriginal issue reported on code.google.com by `trabajoe...@gmail.com` on 24 May 2013 at 4:51", "```\nDupe of issue 515.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:48\n- Changed state: **Invalid**\n =||= ", 0], ["526", "Support new Guava collections by default", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:36 PM", "```\nWhat steps will reproduce the problem?\n1. Create Guava collection as a member element of a class. Example:\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Multimap;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class GsonExample {\n    private final Multimap<String, String> map = HashMultimap.create();\n    private final Map<String, Collection<String>> asMap;\n    public GsonExample() {\n        map.put(\"a\", \"a\");\n        map.put(\"a\", \"b\");\n        map.put(\"b\", \"b\");\n        asMap = map.asMap();\n    }\n    public static void main(String[] args) {\n        GsonExample ex = new GsonExample();\n        Gson g = new GsonBuilder().setPrettyPrinting().create();\n        System.out.println(g.toJson(ex));\n    }\n}\n\nWhat is the expected output? What do you see instead?\nExpected:\n{\n  \"map\": {\n    \"b\": [\n      \"b\"\n    ],\n    \"a\": [\n      \"b\",\n      \"a\"\n    ]\n  },\n  \"asMap\": {\n    \"b\": [\n      \"b\"\n    ],\n    \"a\": [\n      \"b\",\n      \"a\"\n    ]\n  }\n}\n\nActual:\n{\n  \"map\": {},\n  \"asMap\": {\n    \"b\": [\n      \"b\"\n    ],\n    \"a\": [\n      \"b\",\n      \"a\"\n    ]\n  }\n}\n\nWhat version of the product are you using? On what operating system?\nI am using Gson 2.2.4 and Guava 14.0.1 on Windows 7 x64, Java 7u25.\n\nPlease provide any additional information below.\nThis is a feature enhancement, not a bug. Thanks!\n```\n\nOriginal issue reported on code.google.com by `martin.j...@gmail.com` on 24 Jun 2013 at 3:33", "```\nGson will not add a dependency to Guava. \nFeel free to provide Guava type adapters in \nhttps://github.com/google-gson/typeadapters or any other locations.\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:40\n- Changed state: **WontFix**\n =||= @inder123 I appreciate why Gson doesn't want to depend on Guava, but it's very surprising and error-prone that these objects serialize to an empty collection. Are there any options that could make the status quo better without directly adding that dependency?\r\n\r\nFor instance, could the collection types be special-cased in Gson and detected by reflection? Or could any better hints be included in Guava (without it in turn depending on Gson)?\r\n\r\nThere doesn't appear to be any such type adapters added to https://github.com/google-gson/typeadapters yet either. Does it make sense to leave this issue open until that's addressed, at least? =||= @dimo414 Not sure if Guava is used widely enough (for example on Android) to warrant special casing. It has gotten too bloated, and JDK 8 and 9 are providing good alternates.\r\n\r\nBut it does make sense to provide type adapters for Guava. Consider starting the effort by contributing partial support. Thanks. =||= To my knowledge JDK 8 and 9 don't introduce anything like Guava's collection types (`Multiset`, `Multimap`, `Table`, `BiMap`), and these types are fairly widely used (at least outside Android). A reflection-based solution would avoid any sort of bloat issues, as well.\r\n\r\nNevertheless, If you don't want to support them natively that's understandable. Is there any way to improve Guava to be more Gson-friendly? I can try to make that happen if it's possible.\r\n\r\nIf the only viable solution is to create a separate type adapter, could it at least be included in this project, rather than relegated to the google-gson/typeadapters project? That seems very hard to discover (e.g. not mentioned anywhere in the User Guide), and there appear to be other special type adapters in this project (e.g. [`proto`](https://github.com/google/gson/blob/master/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java)). [Guava](https://mvnrepository.com/artifact/com.google.guava) has much more usages than [protobuf](https://mvnrepository.com/artifact/com.google.protobuf) in Maven. =||= Do these classes extends List, Map? I think we support all subclasses of those natively. =||= No, that's the issue, these are [\"new\" collection types](https://github.com/google/guava/wiki/NewCollectionTypesExplained). They've been around since Guava was first released. =||= I see. If Guava was willing to have a dependency on Gson, then it can use a JsonAdapter annotation on each of these collections and customize the behavior.\r\n\r\nUntil then, it is best to just create sample type adapters.  =||= ", 0], ["531", "Extend to Include Other Formats Like XML, CSV", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:41 PM", "```\nProvide ability to serialise and de-serialise to other formats than just JSON.\n```\n\nOriginal issue reported on code.google.com by `sirinath...@gmail.com` on 24 Aug 2013 at 4:38", "```\nThis is a JSON Java library, not something else. I found this issue quite \nuseless.\n```\n\nOriginal comment by `alessand...@gmail.com` on 4 Oct 2013 at 6:59\n =||= ```\nThis is beyond the scope of this library. Additionally, different formats have \ndifferent semantics (e.g., how would you serialize a nested object into CSV?).\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:50\n- Changed state: **WontFix**\n =||= ", 0], ["533", "How to access multiple dimenation json array string value", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:42 PM", "```\nHi\n\nCan any one help me to parse the multiple dimenational json array string.\nMy json string as below\n\n{'result':{'jan8ignite':{'_id':'4e4b63e11d330000000051c8','website':{'websiteId'\n:'40','websiteName':'stagingwb.opencloudapi.com','website_style':'1_Column'},'co\nmpanyLogo':'','companyLogoWebsite':'','formEmailAddress':'ajay.vskm@gmail.com'}}\n}\n\nI want to get the websiteName from the above string, so i can achive this.\n\nPlease reply me ASAP.\n\nThanks\n\n```\n\nOriginal issue reported on code.google.com by `rajubish...@gmail.com` on 29 Aug 2013 at 12:38", "```\nclass Response {\n  Map<String, User> result;\n}\nclass User {\n  String _id;\n  Website website;\n  String companyLogo;\n  String companyLogoWebsite;\n  String formEmailAddress;\n}\nclass Website {\n  String websiteId;\n  String websiteName;\n  String website_style;\n}\n\nDeserialize the JSON as a Response.class. Then you can get the user from the \nresult Map and call user.website.websiteName to get the value.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:09\n- Changed state: **Invalid**\n =||= ", 0], ["536", "JsonReader: Support JSON intermixed with other content", "Google Code Exporter", "GoogleCodeExporter", "12/09/15, 03:35:49 AM", "```\nI have a fairly large HTML page that has several JSON objects & arrays in it. I \nuse a PushbackReader to read the file and handle any text I'm interested in \n(and determine when to start a JsonReader read). If I pass my Reader (or any \nreader) to JsonReader, it will read 1024 characters regardless of content. This \nmeans I may miss some JSON.\ni.e. I may miss myObject2 in the following example because it might remain \nunprocessed in the JsonReader buffer.\n\n<h1>some html</h1>\n<script language=javascript>\nvar myObject1={\"a\":1};\nalert(\"some non-JSON that may or may not exceed the JsonReader buffer size\");\nvar myObject2={\"b\":2};\n\nNOTE: This is a much simplified version of my problem. The JSON data is \nactually quiet large as is the HTML content.\n\nAs a temporary workaround, I've added the following method to JsonReader that \nallows me to push the unprocessed characters in the JsonReader buffer back into \nmy PushbackReader (so I can start searching for \"var myObject2=\").\n\n  public char[] getUnreadCharacters() {\n      char[] output = new char[limit - pos];\n      if (pos < limit) {\n          System.arraycopy(buffer, pos, output, 0, limit - pos);\n      }\n      return output;\n  }\n\nI also added a constructor that allows me to modify the buffer size.\n```\n\nOriginal issue reported on code.google.com by `christia...@gmail.com` on 6 Oct 2013 at 3:44", "+1\n\n`JsonReader` should not advance the underlying `Reader` past the end of the JSON that has been read.\n =||= We aren't going to do this in Gson. Doing so breaks buffering.\n =||= Can you explain how fixing this would break buffering? How exactly does it break?\n\nAlso, a separate question, why does JsonReader do its own buffering rather than delegating buffering to a buffered reader?\n =||= +1\n\nWhy not use mark/reset/read (if supported) to rewind the underlying Reader so it points to the next character after the consumed JSON object, rather than over-subscribe on the input?\n =||= If you'd like, create a `Reader` that returns one character at a time. That'll give you the behavior you want!\n =||= Not sure if that's a snipe or you are being serious, but that won't work.\n\nThe issue is that gson/stream/JsonReader.fillBuffer (line 1300) reads up to 1024 bytes ahead from the caller-supplied Reader (up to buffer.length), but unconsumed bytes are never returned to that Reader.  Unless I'm missing something, they are simply thrown away with the JsonReader, leaving the caller-supplied Reader in an unknown/unusable state.\n\nhttps://github.com/google/gson/blob/2b15334a4981d4e0bd4f2c2d34b8978a4167f36a/gson/src/main/java/com/google/gson/stream/JsonReader.java#L1300\n\nSupplying one byte at a time from the Reader still means up to 1024 bytes will get read from it and thrown away, leaving the Reader positioned some arbitrary number of characters past the consumed input.\n\nTherefore, the request here is to return unconsumed characters back to the caller-supplied Reader, so that the caller has access to the next byte following the consumed JSON object (presumably using reader.mark/.reset, if reader.markSupported() is true).\n =||= @jhugard it'll only put a single char in the buffer if that\u2019s what `read()` returns. It\u2019ll attempt up to 1024 chars, but it takes what it can get. If you create a reader that returns one character at a time, it won't read more than that.\n =||= Gotcha (my Java is rather rusty), but that's likely to impact performance.\n\nThis issue has also been [reported against Google/Protobuf's use of BSON](https://github.com/google/protobuf/issues/947), since that's where the issue is being encountered.  Sounds like the Protobuf contributors have a different solution in mind, plus we have a work-around.  Thanks for taking the time to answer.\n =||= @jhugard sorry to disturb u, I have encountered the same problem, Google bring me to here, I have read all your discussions but still don't know how to deal with this case, could u please give me some suggestion at your convenience ? Thanks very much =||= ", 0], ["538", "Date format is not respected when serializing map with Date as key", "Google Code Exporter", "GoogleCodeExporter", "04/03/17, 06:18:48 PM", "```\nWhat steps will reproduce the problem?\n1. Crete Map<Date,Object> and populate with random data\n2. Create Gson using GsonBuilder and setDateFormat(\"any format\")\n3. Serialize map to json.\n\nWhat is the expected output? What do you see instead?\nI expect keys to be serialized using date format, but I see that keys are \nconverted to strings using Date.toString() which uses generic \"EEE MMM dd \nHH:mm:ss z yyyy\" format\n\nWhat version of the product are you using? On what operating system?\n2.2.4 from Maven,Ubuntu Linux\n```\n\nOriginal issue reported on code.google.com by `mbrzezi...@gmail.com` on 28 Oct 2013 at 5:42", "```\ni got the same issue. if date is a field of the object, it will be fine. if it \nis inside a map, then only default date format. even customized date sterilizer \ndoesnt work.\n```\n\nOriginal comment by `sean...@gmail.com` on 27 May 2014 at 5:06\n =||= ```\nGot the same issue.\n\nEven when the Date is value in the map, it's serialized with the date format.\nBut when using Date as a key of the map, toString is used.\n```\n\nOriginal comment by `omickr...@gmail.com` on 5 Sep 2014 at 7:57\n =||= ```\nSame issue in Map<String, Object> when value is java.util.Date\nserialization is ok, deserialization returns a String.\ngson 2.2.4\n\n```\n\nOriginal comment by `ftoscano...@gmail.com` on 17 Sep 2014 at 10:56\n =||= Any Update or Workaround on this issue? Still experiencing this problem in 2.8.0. =||= same issue here - already tried implementing cusom deserializers, but no luck so far. Any chance this gets resolved? =||= Same here. Any GSON maintainer ever seen this thread? =||= ```java\r\npublic final class Test {\r\n  public static void main(String... args) {\r\n    Gson gson = new GsonBuilder()\r\n        .setDateFormat(\"yyyy\")\r\n        .enableComplexMapKeySerialization()\r\n        .create();\r\n    Map<Date, String> map = Collections.singletonMap(new Date(117, 1, 1), \"Hey\");\r\n    System.out.println(gson.toJson(map));\r\n  }\r\n}\r\n```\r\n```\r\n{\"2017\":\"Hey\"}\r\n``` =||= ", 0], ["540", "fromJson returns null for empty string", "Google Code Exporter", "GoogleCodeExporter", "04/13/16, 03:14:58 PM", "```\nWhat steps will reproduce the problem?\n\npublic void testCase() {\n        String json = \"\";\n        final Map<String, String> cachedMap = new Gson().fromJson(json, new TypeToken<Map<String, String>>() {}.getType());\n        assertNotNull(cachedMap);\n    }\n\nWhat is the expected output? What do you see instead?\n\nIt probably should throw an exception (JsonParseException or maybe a Syntax \none).\n\nWhat version of the product are you using? On what operating system?\n\n2.2.4, Ubuntu 12.10 and Android 4.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `da...@swiftkey.com` on 30 Oct 2013 at 4:39", "```\n[deleted comment]\n```\n =||= ```\nMight be duplicated : https://code.google.com/p/google-gson/issues/detail?id=457\n```\n\nOriginal comment by `yancheng...@gmail.com` on 9 Jan 2014 at 10:28\n =||= Is there a plan to fix this issue?\n =||= No. This is a side-effect of historical and bad behavior of the `Gson` object setting leniency by default. Changing this would be backwards-incompatible. \n\nYou can look up a `TypeAdapter` and use it directly to get Gson to behave sanely.\n\n```\nGson gson = new Gson();\nTypeAdapter<String> adapter = gson.getAdapter(String.class);\ntry {\n  String json = \"\";\n  String result = adapter.fromJson(json);\n  System.out.println(\"SUCCEEDED \" + result);\n} catch (IOException e) {\n  System.out.println(\"FAILED \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n}\n```\n\n```\nFAILED EOFException: End of input at line 1 column 1\n```\n =||= ", 0], ["544", "Serializable should be treated similar to Object", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:48 PM", "```\nI have a generic object field which is declared as Serializable. Using \nfromJson() throws an exception. Instead, it could be treated as an Object, and \nlater checked if the resulting type implements Serializable before throwing an \nexception.\n\n\n    public static class AttrData implements Serializable\n    {\n        IdDisplay id;\n        AttrDef def;\n        Serializable value;\n    }\n\n...\nCaused by: java.lang.RuntimeException: Unable to invoke no-args constructor for \ninterface java.io.Serializable. Register an InstanceCreator with Gson for this \ntype may fix this problem.\n    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:166)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:163)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:81)\n    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)\n    at com.google.gson.Gson.fromJson(Gson.java:755)\n    at com.google.gson.Gson.fromJson(Gson.java:721)\n    at com.google.gson.Gson.fromJson(Gson.java:670)\n    at com.google.gson.Gson.fromJson(Gson.java:642)\n\n```\n\nOriginal issue reported on code.google.com by `bors...@gmail.com` on 3 Dec 2013 at 1:07", "```\nYou can register a TypeAdapterFactory which forces Serializable types to be \ndeserialized as Objects:\n\n@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n  if (Serializable.class.equals(type.getRawType())) {\n    return (TypeAdapter<T>) gson.getAdapter(Object.class);\n  }\n  return null;\n}\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:00\n- Changed state: **WontFix**\n =||= ", 0], ["545", "Allow registering type adapters with an annotated name", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:49 PM", "```\nhttps://groups.google.com/forum/#!topic/google-gson/sRQwYIXBIy0\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 6 Dec 2013 at 6:41", "```\nA solution is implemented for this with the new @Adapt annotation.\nCheck it out at https://code.google.com/p/google-gson/source/detail?r=1274\n\n```\n\nOriginal comment by `inder123` on 11 Mar 2014 at 6:19\n- Changed state: **Fixed**\n =||= ", 0], ["546", "de java", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:49 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `moss...@hotmail.com` on 8 Dec 2013 at 4:01", "Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:41\n- Changed state: **Invalid**\n =||= ", 0], ["547", "Custom enum serializer does not work for enum with methods", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:50 PM", "```\nWhat steps will reproduce the problem?\nHere is the code to reproduce the problem:\npublic class App {\n    enum MyEnum {\n        A {\n            @Override\n            String toJson() {\n                return \"a\";\n            }\n        };\n\n        abstract String toJson();\n    }\n\n    public static void main(String[] args) {\n        Gson gson = new GsonBuilder()\n                .registerTypeAdapter(MyEnum.class, new MyEnumSerializer())\n                .create();\n        System.out.println(gson.toJson(MyEnum.A)); // Expected \"a\", but got \"A\"\n    }\n\n    static class MyEnumSerializer implements JsonSerializer<MyEnum> {\n        @Override\n        public JsonElement serialize(MyEnum src, Type typeOfSrc, JsonSerializationContext context) {\n            return new JsonPrimitive(src.toJson());\n        }\n    }\n}\n\n\n\nWhat is the expected output? What do you see instead?\nExpected \"a\", but got \"A\"\n\nWhat version of the product are you using? On what operating system?\ngson 2.2.4\njdk1.6.0_45_x64\nwin7 x64\n\nPlease provide any additional information below.\nMyEnumSerializer will be used if it is registered for every concrete Enum value:\n        Gson gson = new GsonBuilder()\n                .registerTypeAdapter(MyEnum.A.getClass(), new MyEnumSerializer())\n                .create();\n\n```\n\nOriginal issue reported on code.google.com by `vsorokin87@gmail.com` on 11 Dec 2013 at 11:15", "```\nYou'd need to `registerTypeHierarchyAdapter` instead. Any enum member declaring \nsome methods is a different subclass and `registerTypeAdapter` seems to require \nan exact match. To me it looks like a consistent behavior.\n\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 13 Dec 2013 at 8:06\n =||= ```\nI think you are right, `registerTypeHierarchyAdapter` works as expected.\nThis issue can be closed.\n```\n\nOriginal comment by `vsorokin87@gmail.com` on 16 Dec 2013 at 6:53\n =||= Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:01\n- Changed state: **Invalid**\n =||= ", 0], ["550", "LinkedTreeMap cannot be cast to", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:52 PM", "```\nWhat steps will reproduce the problem?\n1.run the code\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nprint every user in the list,but shows \"LinkedTreeMap cannot be cast to \ncom.he.common.User\"\n\nWhat version of the product are you using? On what operating system?\n2.2.4 win7\n\nPlease provide any additional information below.\n```\n\nOriginal issue reported on code.google.com by `hechangg...@yeah.net` on 17 Dec 2013 at 9:20\n\nAttachments:\n- [User.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-550/comment-0/User.java)\n- [CopyTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-550/comment-0/CopyTest.java)", "```\nIf you change your Type \nfrom -- Type typeOfHashMap=new \nTypeToken<Map<String,List<Object>>>(){}.getType(); \nto -- Type typeOfHashMap=new TypeToken<Map<String,List<User>>>(){}.getType();\nthe deserialization is successful. I believe your original code is incorrectly \nusing the Type class. If you have to set up a custom Type, you should be as \nspecific as possible.\n```\n\nOriginal comment by `jack.roy...@gmail.com` on 1 May 2014 at 11:10\n =||= ```\nDo what #1 said and it will fix your issue. If no type information is available \nGson will deserialize into a Map as the exception clearly outlines.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:48\n- Changed state: **Invalid**\n =||= ", 0], ["552", "JavaDoc: fromJson(..) should document when it returns null", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:53 PM", "```\nThe JavaDoc of Gson#fromJson(..)-methods should document the cases they return \nnull. Currently we have to look into to code to figure it out.\n\ncase 1: when a null Reader or String is passed\ncase 2: when a Reader or String is empty\n```\n\nOriginal issue reported on code.google.com by `Chris7...@gmail.com` on 13 Jan 2014 at 10:28", "```\nThis issue was closed by revision r1277.\n```\n\nOriginal comment by `inder123` on 29 Mar 2014 at 11:28\n- Changed state: **Fixed**\n =||= ", 0], ["554", "Gson 2.2.4 causing a stackoverflow on JellyBean but it work on 2.3.*", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:54 PM", "```\nWhat steps will reproduce the problem?\n1.http://stackoverflow.com/questions/16795492/gson-error-jellybean\n\n2.http://stackoverflow.com/questions/14565647/gson-2-2-2-causing-a-stackoverflow\n-on-4-2-1-only\n\n3.it's a histroy problem,it was reported on stackflow many times. but almost \nthe solution is downgrading gson to 1.7.1 . is it have a better way\nbut downgrading gson to 1.7.1.\n```\n\nOriginal issue reported on code.google.com by `pino...@gmail.com` on 24 Jan 2014 at 11:58\n- Merged into: #440", "Original comment by `inder123` on 29 Mar 2014 at 10:39\n- Changed state: **Duplicate**\n =||= ", 0], ["556", "Skyblock", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:55 PM", "```\nWhat steps will reproduce the problem?\n1.Logging into Minecraft\n2.Going to multiplayer\n3.Going on Skyblok and it not working\n\nWhat is the expected output? What do you see instead?\nI CAN GET ON!\n\nWhat version of the product are you using? On what operating system?\n\nMinecraft1.7.4 Windows 8\nPlease provide any additional information below.\nIT WONT LET ME ON\n```\n\nOriginal issue reported on code.google.com by `0Maddie....@gmail.com` on 25 Jan 2014 at 6:33", "```\nProbably a bug in minecraft. Please provide a specific bug report for Gson.\nps. Great to find that Minecraft uses Gson... Didn't know that before. Wow!\n```\n\nOriginal comment by `inder123` on 29 Mar 2014 at 10:49\n- Changed state: **Invalid**\n =||= ", 0], ["557", "javax.servlet.ServletException: java.lang.NoClassDefFoundError: com/google/gson/Gson", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:55 PM", "```\nHi When I added Gson reference in my Java service code for writing a RESTful \nservice. I am getting this error.\n\n```\n\nOriginal issue reported on code.google.com by `vsha...@gmail.com` on 30 Jan 2014 at 11:37", "```\nIt seems like you are missing Gson jar in your web-app, possibly in the libs \ndirectory.\n\nThis is NOT a Gson bug.\n```\n\nOriginal comment by `inder123` on 29 Mar 2014 at 11:06\n- Changed state: **Invalid**\n =||= ", 0], ["561", "Crash after running ProGuard with several libraries", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:58 PM", "```\nWhat steps will reproduce the problem?\n1. Use AndroidAnnotations with GSON as Converter. (Basically Spring REST)\n2. Run Proguard with the config I'm attaching.\n3. Run App.\n\nWhat is the expected output? What do you see instead?\nIt should work, but for some reason, the code is crashing with the following \nerror:\n\njava.lang.AssertionError\n        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(Unknown Source)\n        at com.google.gson.internal.bind.TypeAdapters$26.create(Unknown Source)\n        at com.google.gson.Gson.getAdapter(Unknown Source)\n\nThis is being run for Android.\n\n\nI created a post in SO though.\n\nAny tips are so appreciated.\n\nThanks.\n\nhttp://stackoverflow.com/questions/21864912/is-there-any-way-to-obfuscate-just-r\neal-code-and-not-ofuscate-libraries\n```\n\nOriginal issue reported on code.google.com by `sergiCas...@gmail.com` on 19 Feb 2014 at 12:58\n\nAttachments:\n- [proguard-project.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-561/comment-0/proguard-project.txt)", "```\nIf you are using ProGuard on these enums you cannot guarantee their value \ninside the JSON. You need to register a custom TypeAdapter (or \nTypeAdapterFactory) which uses a property other than the .name() so that you \ncan lookup the correct enum field based on the unobfuscated name inside the \nJSON.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:06\n- Changed state: **WontFix**\n =||= ", 0], ["562", "Serialization: Map<CustomEnum,XXX> -> @SerializedEnum is ignorred in enum's values", "Google Code Exporter", "GoogleCodeExporter", "09/06/15, 05:45:32 PM", "```\nWhat steps will reproduce the problem?\nclass Test{\n   Map<OS,String> natives = new HashMap<OS,String>();\npublic Test(){\nnatives.put(OS.Windows,\"1\");\nnatives.put(OS.MacOSX,\"1\");\n}\n}\n\nenum OS{\n@SerializedName(\"windows\")\nWindows,\n@SerializedName(\"unix\")\nLinux,\n@SerializedName(\"osx\")\nMacOSX\n}\n\nGson gson = new Gson();\ngson.toJson(new Test());\n\nWhat is the expected output? What do you see instead?\nExpected:\n{\nnatives{\n\"windows\":\"1\",\n\"osx\":\"2\"\n}\n}\n\nCurrent:\n{\nnatives{\n\"Windows\":\"1\",\n\"MacOSX\":\"2\"\n}\n}\n\nWhat version of the product are you using? On what operating system?\nMac OS X 10.9\ngoogle-gson-2.2\njava 1.6\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `yan.zait...@gmail.com` on 24 Feb 2014 at 9:32", "```\n@SerializedName is ignored only during serialization.\n\nNow, i'am fixing it by ovveriding toString() in Enum class (OS.name() is \nignored too)\n```\n\nOriginal comment by `yan.zait...@gmail.com` on 24 Feb 2014 at 9:34\n =||= Use `GsonBuilder.enableComplexMapKeySerialization()` to avoid this problem.\n =||= ", 0], ["564", "Allow a magic field in a class to specify the default type adapter", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:33:59 PM", "```\nI want to specify the JSON serialization/deserialization semantics within my \nclass itself, through a static field. \n\nclass A {\n  private static final TypeAdapter<A> GSON_TYPE_ADAPTER = .....\n}\n\nThe big value is that all users of my class get automatic benefit of type \nadapter, they don't need to remember to register it.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Mar 2014 at 8:17", "```\nFixed in https://code.google.com/p/google-gson/source/detail?r=1264\n```\n\nOriginal comment by `inder123` on 8 Mar 2014 at 8:17\n- Changed state: **Fixed**\n =||= ```\nGoogle group discussion at \nhttps://groups.google.com/forum/#!topic/google-gson/MQNmZyWoK-4\n```\n\nOriginal comment by `inder123` on 8 Mar 2014 at 9:30\n =||= ```\nWe are reverting these changes since @Adapt is a better solution than a magic \nfield.\n```\n\nOriginal comment by `inder123` on 11 Mar 2014 at 6:20\n- Changed state: **WontFix**\n =||= ", 0], ["565", "Fix javadoc quote on default Gson constructor.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:01 PM", "```\nWhat steps will reproduce the problem?\n1. Reading the javadoc for the default constructor of Gson(), it says, \" So, a \nJava class field versionNumber will be output as \"versionNumber@quot; in Json.\"\n2. The actual javadoc code which has the problem: \nwill be output as <code>&quot;versionNumber@quot;</code> in\n\nWhat is the expected output? What do you see instead?\nThe close quote in the javadoc needs to be changed to:\nwill be output as <code>&quot;versionNumber&quot;</code> in\n\nWhat version of the product are you using? On what operating system?\n2.2.4 - Ubuntu 13.04\n\nPlease provide any additional information below.\nNone.\n\n```\n\nOriginal issue reported on code.google.com by `dan.wiec...@gmail.com` on 10 Mar 2014 at 6:37", "```\nFixed in r1276\n```\n\nOriginal comment by `inder123` on 26 Mar 2014 at 6:08\n- Changed state: **Fixed**\n =||= ", 0], ["568", "Ty", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:02 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `JoshuaPi...@gmail.com` on 24 Mar 2014 at 1:02", "```\nClosing this bug as it seems to be incomplete\n```\n\nOriginal comment by `inder123` on 26 Mar 2014 at 6:03\n- Changed state: **Invalid**\n =||= ", 0], ["569", "Typo on the Docs Page.", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:03 PM", "```\nWhat steps will reproduce the problem?\n1. Read the docs.\n2. Notice typo.\n3. Submit issue.\n\nWhat is the expected output? What do you see instead?\nOn: \nhttps://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deseriali\nzing-Collection-with-Objects-of-Arbitrary-Types\n\nReplace occurrences of: excludeFieldsWithModifier\n\nWith: excludeFieldsWithModifiers\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `JoshuaPi...@gmail.com` on 24 Mar 2014 at 1:04", "Original comment by `inder123` on 26 Mar 2014 at 6:02\n- Changed state: **Fixed**\n =||= ```\n:thumbs_up:\n```\n\nOriginal comment by `supp...@insightemissions.com` on 26 Mar 2014 at 6:29\n =||= ", 0], ["571", "Gson 2.2.4 not recognized in Android Studio Editor (inline compile)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:04 PM", "```\nWhat steps will reproduce the problem?\n\n1. Create new Android Studio project\n2. add the 'com.google.code.gson:gson:2.2.3' dependency and sync project\n3. write some code that invokes the Gson library\n4. replace the gson 2.2.3 dependency with 'com.google.code.gson:gson:2.2.3' (or \n'com.google.code.gson:gson:2.2.+') and sync project\n\n\nWhat is the expected output? What do you see instead?\n\n- project should compile and show no errors after step 2 and after step 4\n- instead, after step 2 everything is OK, but after step 4 the project still \ncompiles and I'm able to deploy to device, but the Android Studio Editor shows \ncompile errors that the symbol gson cannot be found (see attachment) and there \nis no META-INF or classes shown under the External Libraries in the Project \nwindow on the left side\n\nWhat version of the product are you using? On what operating system?\n\n- Gson 2.4.4\n- Windows 8.1 N x64\n- Java 1.7\n- Android Studio 0.5.3\n- Android Api 19\n```\n\nOriginal issue reported on code.google.com by `sbi...@gmail.com` on 3 Apr 2014 at 11:09\n\nAttachments:\n- [gson-issue-screenshot.png](https://storage.googleapis.com/google-code-attachments/google-gson/issue-571/comment-0/gson-issue-screenshot.png)", "```\nSorry, in the above steps to reproduce, step 4, should be of course:\n4. replace the gson 2.2.3 dependency with 'com.google.code.gson:gson:2.2.4' (or \n'com.google.code.gson:gson:2.2.+') and sync project\n```\n\nOriginal comment by `sbi...@gmail.com` on 3 Apr 2014 at 11:11\n =||= ```\nI suspect that the dependency is being added in the wrong place. Can you show \nus the build.gradle file in the root of the project and also the build.gradle \ninside the app/ directory?\n\nI'm closing the issue because I can assure you the dependency is available. You \ncan see it here: \nhttp://search.maven.org/#search%7Cga%7C1%7Cg%3Acom.google.code.gson%20a%3Agson\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:42\n- Changed state: **Invalid**\n =||= ```\nThis happened to me after i updated the android studio to 1.0.1 but the reason \nwas that i had accidentally checked the offline in in gradle setting and then \nwas trying to sync. :( \n```\n\nOriginal comment by `uxyrat...@gmail.com` on 16 Dec 2014 at 5:01\n =||= ", 0], ["572", "App crashing when I run Proguard on GSON (which using enum)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:06 PM", "```\nI am using GSON in my Android app to parser the data. I have added an enum in \nmy Model object. After adding an enum my app started crashing. When I made \nrunProguard false everything works fine. I did everything I could find on \ninternet to fix the problem when program is true. But still no luck.\n\nI have already done following thing in Prodgrad-rule file\n\n-keep class com.google.** { *; }\n\n-keepattributes Annotation -keepattributes Signature\n\n-keepclassmembers enum * { public static **[] values(); public static ** \nvalueOf(java.lang.String); }\n\nEnum Stuff exmaple\n\npublic enum TypeX {\n@SerializedName(\"live\")\nLIVE,\n\n@SerializedName(\"upcoming\")\nUPCOMING,\n\n@SerializedName(\"replay\")\nREPLAY; }\nMy stack trace\n\njava.lang.AssertionError\n        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(Unknown Source)\n        at com.google.gson.internal.bind.TypeAdapters$26.create(Unknown Source)\n        at com.google.gson.Gson.getAdapter(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source)\n        at com.google.gson.Gson.getAdapter(Unknown Source)\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(Unknown Source)\n        at com.google.gson.Gson.getAdapter(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source)\n        at com.google.gson.Gson.getAdapter(Unknown Source)\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(Unknown Source)\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(Unknown Source)\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(Unknown Source)\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(Unknown Source)\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(Unknown Source)\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(Unknown Source)\n        at com.google.gson.Gson.toJson(Unknown Source)\n        at com.google.gson.Gson.toJson(Unknown Source)\n        at com.google.gson.Gson.toJson(Unknown Source)\n        at com.google.gson.Gson.toJson(Unknown Source)\n        at com.theice.gsonapp.app.MainActivity.a(Unknown Source)\n        at com.theice.gsonapp.app.MainActivity.onCreate(Unknown Source)\n        at android.app.Activity.performCreate(Activity.java:5231)\n        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1087)\n        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2159)\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2245)\n        at android.app.ActivityThread.access$800(ActivityThread.java:135)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)\n        at android.os.Handler.dispatchMessage(Handler.java:102)\n        at android.os.Looper.loop(Looper.java:136)\n        at android.app.ActivityThread.main(ActivityThread.java:5017)\n        at java.lang.reflect.Method.invokeNative(Native Method)\n        at java.lang.reflect.Method.invoke(Method.java:515)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)\n        at dalvik.system.NativeStart.main(Native Method)\n```\n\nOriginal issue reported on code.google.com by `amit.a.v...@gmail.com` on 18 Apr 2014 at 2:27", "```\nSee issue 561 for an explanation of what's happening and the fix. Basically, \nyou need to register a type adapter since the enum field names won't match the \nvalues in JSON after ProGuard and the mangling breaks normal enum conventions.\n\nFurthermore, this violates JLS 8.9.2: \nhttp://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2\n\n> In addition to the members that an enum type E inherits from Enum<E>, for \neach declared enum constant with the name n, the enum type has an implicitly \ndeclared public static final field named n of type E.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:25\n- Changed state: **WontFix**\n =||= ", 0], ["578", "Serialize dates as JavaScript Date constructor", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:08 PM", "```\nI want to use Gson to create a JSON string with dates represented as literal \nJavaScript Date constructors. For example \n\n  {v: new Date(2008, 1, 28, 0, 31, 26)}\n\nThis is how the Google Charts API's JavaScript literal data parameter can \nreceive dates. See \nhttps://developers.google.com/chart/interactive/docs/reference#dataparam\n\n```\n\nOriginal issue reported on code.google.com by `davidcwe...@gmail.com` on 5 May 2014 at 7:44", "```\nYou can use a custom TypeAdapter to accomplish this. Please see the \ndocumentation at \nhttps://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/\nTypeAdapter.html\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:45\n- Changed state: **Invalid**\n =||= ```\nI can see no way how to accomplish exactly this. You can get\n\n{v: \"new Date(2008, 1, 28, 0, 31, 26)\"}\n\nbut it's not the same. It's a string rather than constructor invocation. \nHowever, it's no valid JSON either.\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 12 Aug 2014 at 5:01\n =||= ", 0], ["579", "JsonReader#nextBoolean cannot consume quoted boolean values like nextDouble/Int/Long", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:11 PM", "```\nJsonReader#nextDouble, nextInt, and nextLong all consume quoted values (e.g., \nboth {x: 4} and {x: \"4\"} can be parsed).\n\nBut nextBoolean will throw an IllegalStateException: Expected a boolean but was \nSTRING at ...\n\nIs there a reason for this? Would it violate a spec to handle quoted \"true\" and \n\"false\" values in the nextBoolean method?\n```\n\nOriginal issue reported on code.google.com by `o...@fleaflicker.com` on 20 May 2014 at 9:43", "```\nThe quoted numbers are supported to defend against precision loss. In \nparticular, for double-precision floating point values in JavaScript. There's \nno equivalent problem with booleans.\n```\n\nOriginal comment by `limpbizkit` on 9 Aug 2014 at 10:30\n =||= ```\nAdditionally, you can do this with a custom TypeAdapter.\n\npublic final class BooleanAdapter extends TypeAdapter<Boolean> {\n    @Override\n    public void write(JsonWriter out, Boolean value) throws IOException {\n        if (value != null) {\n            out.value(value);\n        } else {\n            out.nullValue();\n        }\n    }\n\n    @Override\n    public Boolean read(JsonReader in) throws IOException {\n        JsonToken peek = in.peek();\n        switch (peek) {\n            case BOOLEAN:\n                return in.nextBoolean();\n            case STRING:\n                return Boolean.parseBoolean(in.nextString());\n            case NULL:\n                in.nextNull();\n                return null;\n            default:\n                throw new IllegalStateException(\"Expected BOOLEAN or STRING but was \" + peek);\n        }\n    }\n\n}\n```\n\nOriginal comment by `j...@squareup.com` on 10 Aug 2014 at 1:42\n- Changed state: **WontFix**\n =||= ", 0], ["580", "Json Sorting", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:12 PM", "```\nThere is not any example to sort a dynamic json, on the basis of a key\n```\n\nOriginal issue reported on code.google.com by `sumeet.b...@gmail.com` on 22 May 2014 at 12:45", "```\nCan you please ask this question on StackOverflow using the 'gson' tag?\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:36\n- Changed state: **Invalid**\n =||= ", 0], ["581", "please consider checksum in the maven repository", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:12 PM", "```\n\nHere is an example hash from mvnrepostiory.com:\n\nhttp://repo1.maven.org/maven2/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar\n\n# md5sum ...\n2f54fc24807a4cad7297012dd8cebf3d  lib/gson-2.2.4.jar\n1ff6437ccdf5a83f3596da78b7f6118e  lib/gson-2.2.4-sources.jar\n\n\nHere are the hashes I got from extracting: \nhttp://code.google.com/p/google-gson/downloads/detail?name=google-gson-2.2.4-rel\nease.zip\n\n$ md5sum lib/gson-2.2.4*\n232ea9ab7ec43b8b2ef36181ee7d693b  lib/gson-2.2.4.jar\nf8c28d344ebaaf750aaddee6c660e2a5  lib/gson-2.2.4-sources.jar\n\nThese are probably identical in functionality, but please consider using the \nsame build when updating maven so these will match.\n\n```\n\nOriginal issue reported on code.google.com by `ja...@jcalfee.info` on 10 Jun 2014 at 2:07", "```\nNice find. We will ensure that we do this for the upcoming 2.3 release.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:44\n- Changed state: **Accepted**\n =||= ```\nThis is no longer relevant since we dont host downloads on google code anymore.\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:33\n- Changed state: **WontFix**\n =||= ", 0], ["582", "Bundle-RequiredExecutionEnvironment", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:13 PM", "```\nCould you specify all the available execution environments for JDK6,7,8?\nOnly the pom.xml would need to be modified:\n\n<Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, \nJavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n\nor remove the whole required execution environment all together. \nWe're currently unable to load the library in our project because of this.\n\nWhen loading the library this is the message we get:\n\nUnsatisfied requirement(s): (|(ee=J2SE-1.5)) Gson \n(&(package=com.google.code.gson)(version>=2.2.4))\n\nWe're currently running JDK 7.0 update 60.\n\nWhat version of the product are you using? On what operating system?\n2.2.4\n\n```\n\nOriginal issue reported on code.google.com by `haltal...@gmail.com` on 15 Jul 2014 at 6:57", "```\nThis issue was closed by revision r1306.\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:35\n- Changed state: **Fixed**\n =||= ", 0], ["583", "JsonSyntaxException : Expected BEGIN_OBJECT but was STRING", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:14 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\ni want to get the account details from mailchimp, but i'm encountered with \nJsonSyntaxException.\n\nWhat version of the product are you using? On what operating system?\n\nMailChimpAPI 1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `sanakkay...@gmail.com` on 17 Jul 2014 at 10:37\n\nAttachments:\n- [AccountDetail.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-583/comment-0/AccountDetail.java)", "```\nThis exception means that Gson saw a '{' character when it was expecting a \nstring.\n\nFor instance,\n\nReceiving {\"user\": \"jake\"} when it was expecting {\"user\": {\"name\": \"jake\"}} \nwould cause this. Note how the 'user' type was an object rather than a string.\n\nYour example doesn't have any Gson use in it so it's hard to know what exactly \nis wrong. If you have more questions please ask on StackOverflow using the \n'gson' tag.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:39\n- Changed state: **Invalid**\n =||= ```\n@Project Member: your statements are contradictory. \n```\n\nOriginal comment by `sumithnp...@gmail.com` on 10 Oct 2014 at 10:52\n =||= ", 0], ["585", "TypeAdapterFactory Javadoc incorrectly references TypeAdapter.Factory", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:15 PM", "```\nhttps://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/\nTypeAdapterFactory.html\n\nBoth code examples incorrectly reference TypeAdapter.Factory.\n```\n\nOriginal issue reported on code.google.com by `jakewhar...@gmail.com` on 2 Aug 2014 at 9:42", "```\nFixed in r1292.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:36\n- Changed state: **Fixed**\n =||= ", 0], ["586", "UnsafeAllocator should use post-GB method before pre-GB", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:15 PM", "```\nGB is dying. We should optimize for the most likely case first (post-GB).\n```\n\nOriginal issue reported on code.google.com by `jakewhar...@gmail.com` on 2 Aug 2014 at 10:09", "```\nFixed in r1291.\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 5:34\n- Changed state: **Fixed**\n =||= ", 0], ["587", "DateTypeAdapter, others unnecessarily final", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:16 PM", "```\ncom.google.gson.internal.bind.DateTypeAdapter is final. Why?\n\nIt would be very useful to be able to subclass it. As it is, you're locked into \nusing the output format \"enUsFormat\". It's not even configurable. The only \noption is to rewrite the whole class from scratch.\n\nThere are lots of other \"final\" classes in the library. There might be cases \nwhere it's warranted but usually it's just a hindrance to usage.\n```\n\nOriginal issue reported on code.google.com by `nlev...@gmail.com` on 8 Aug 2014 at 12:40", "```\nThis is an internal class and prone to API breakage at any time. The right \napproach is just to copy the implementation to your project and modify as \nneeded.\n\nhttps://groups.google.com/d/msg/google-gson/5qJK9nUynPY/ge-nI7s-CHIJ\n```\n\nOriginal comment by `j...@squareup.com` on 9 Aug 2014 at 6:33\n- Changed state: **WontFix**\n =||= ", 0], ["588", "Invalid version range in Maven doclint-java8-disable profile with gson 2.3", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:16 PM", "```\nAccording to Maven 3.0.4 (maybe other versions) there is an invalid version \nrange in the 2.3 POM in the doclint-java8-disable profile.\n\n      <activation>\n        <jdk>[1.8,</jdk>\n      </activation>\n\nshould possibly be \n\n      <activation>\n        <jdk>[1.8,)</jdk>\n      </activation>\n\nWhat steps will reproduce the problem?\n1. Create a maven project that depends on gson 2.3\n2. Try and build\n\nWhat is the expected output? What do you see instead?\n\nIt should build. Instead I get errors like \"Invalid JDK version in profile \n'doclint-java8-disable': Unbounded range [1.8, for project \ncom.google.code.gson:gson [etc]\"\n\nWhat version of the product are you using? On what operating system?\n\ngson 2.3 with JDK 7 and Maven 3.0.4\n\nPlease provide any additional information below.\nSeems to be a common error, I'd guess copy and pasted from Stack Overflow.\nhttps://github.com/junit-team/junit/issues/965\nhttps://github.com/atteo/parent/issues/1\n\nhttp://maven.apache.org/enforcer/enforcer-rules/versionRanges.html implies it \nmust have the trailing parenthese.\n```\n\nOriginal issue reported on code.google.com by `chad.lee...@gmail.com` on 15 Aug 2014 at 9:32", "```\nFor now, I am switching back to Gson 2.2.4 until this defect is fixed. The POM \nfor 2.2.4 doesn't have the problem.\n```\n\nOriginal comment by `bibh...@gmail.com` on 20 Aug 2014 at 8:40\n =||= ```\nI've observed the same issue with version 2.3 and am also using version 2.2.4 \nfor the time being\n```\n\nOriginal comment by `palmerw...@gmail.com` on 8 Sep 2014 at 11:52\n =||= ```\nI have the same issue with maven 2.x. Maven 3.0.5 seem to work fine.\n```\n\nOriginal comment by `fschef...@felix-scheffer.de` on 12 Sep 2014 at 8:11\n =||= ```\nThis issue was closed by revision r1300.\n```\n\nOriginal comment by `limpbizkit` on 16 Sep 2014 at 2:40\n- Changed state: **Fixed**\n =||= ```\nI noticed there isn't a timeline set for the next release in the Roadmap, so, \nin the meantime, is there a snapshot repository to pick up this change?  \nChecking out the one listed here didn't help: \nhttps://code.google.com/p/google-gson/source/diff?spec=svn1300&r=1300&format=sid\ne&path=/trunk/gson/pom.xml\n```\n\nOriginal comment by `john.rod...@gmail.com` on 16 Sep 2014 at 5:21\n =||= ```\nI'm seeing this\n\n[INFO] Error building POM (may not be this project's POM).\n\n\nProject ID: com.google.code.gson:gson\n\nReason: Invalid JDK version in profile 'doclint-java8-disable': Unbounded \nrange: [1.8, for project com.google.code.gson:gson\n\n\nUsing\n\n$ mvn --version\nApache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)\nJava version: 1.7.0_51\nJava home: /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"mac os x\" version: \"10.9.5\" arch: \"x86_64\" Family: \"mac\"\n```\n\nOriginal comment by `tomkessl...@gmail.com` on 29 Oct 2014 at 12:08\n =||= ```\nI updated maven version to 3.1.1 and it worked.\n```\n\nOriginal comment by `dfrnasci...@gmail.com` on 7 Nov 2014 at 9:20\n =||= ```\nMaven 3.2.2 and 3.2.3 have the same issue and refuse to import the broken pom.\n\nWould it be possible to make a release fixing this issue, as it's been already \n2 months since it was fixed?\n```\n\nOriginal comment by `dumitru....@gmail.com` on 10 Nov 2014 at 1:45\n =||= ```\nHey Folks.  I'm still seeing this issue as well.  I am unable to reopen this \nmyself so will you please re-open it.  Here is what I see on my command line:\n\nUnable to resolve artifact: Unable to get dependency information: Unable to \nread the metadata file for artifact 'com.google.code.gson:gson:jar': Invalid \nJDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, for \nproject com.google.code.gson:gson\n  com.google.code.gson:gson:jar:2.3\n\nAnd here is what is in the POM file I am receiving \n(.m2/repository/com/google/code/gson/gson/2.3/gson-2.3.pom):\n\n    <profile>\n      <id>doclint-java8-disable</id>\n      <activation>\n        <jdk>[1.8,</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <configuration>\n              <additionalparam>-Xdoclint:none</additionalparam>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\nTried nuking local repo and re-downloading twice to no avail.\n```\n\nOriginal comment by `Andrew.S...@gmail.com` on 12 Jan 2015 at 6:34\n =||= ```\nShould also include my environment info:\n\n$ mvn -v\nApache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; \n2014-08-11T15:58:10-05:00)\nMaven home: /usr/local/Cellar/maven/3.2.3/libexec\nJava version: 1.7.0_60, vendor: Oracle Corporation\nJava home: /Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.10.1\", arch: \"x86_64\", family: \"mac\"\n\n[artifact:dependencies] from the specified remote repositories:\n[artifact:dependencies]   central (http://repo1.maven.org/maven2)\n```\n\nOriginal comment by `Andrew.S...@gmail.com` on 12 Jan 2015 at 6:37\n =||= ```\nThis bug report is against 2.3. It's only fixed in 2.3.1.\n```\n\nOriginal comment by `chad.lee...@gmail.com` on 13 Jan 2015 at 12:00\n =||= ```\nAhh... well that explains that.  Would you like me to file a new bug against \n2.3?\n```\n\nOriginal comment by `Andrew.S...@gmail.com` on 13 Jan 2015 at 1:37\n =||= ```\nI'm just a fellow user/bug reporter/internet citizen, but this is fixed in \n2.3.1 which is available in Maven central so you should try that. Unfortunately \ngoogle code is pretty crappy as an issue mgmt system so it's not obvious here \nwhich release it was fixed in.\n```\n\nOriginal comment by `chad.lee...@gmail.com` on 13 Jan 2015 at 2:02\n =||= ```\n> but this is fixed in 2.3.1 which is available in Maven central so you should \ntry that\n\nI wish it were that easy (and maybe it is and I am totally missing something) \nbut that won't work in my case.  The reason is gson 2.3 is a dependency of \nanother artifact I am trying to use (google-maps-services).  Now even if I use \ngson locally in my project (which I do) and I bump up the version of my local \nartifact to 2.3.1 (which I did), mvn will still grab the 2.3 artifact, process \nits pom file and explode.  So I would need to unfairly ask the maintainers of \nthe google-services-api to update their dependency (which I did in \nhttps://code.google.com/p/gmaps-api-issues/issues/detail?id=7525&thanks=7525&ts=\n1421186415) even though the issue is not with them, its with the gson code.  \nThat is not cool since this bug is not their problem nor does the resolution of \nthis bug in any way affect the functionality and feature set of Gson.  So IMHO \nthe maintainers of the project need to re-release this version with a fixed POM \nfile so the rest of us can move on.\n\nBut I am also young to maven and perhaps there are workaround that I am unaware \nof.  If you (or anyone else for that matter) happen to know of a better way PM \nme please.  I would love to know it or be shown where to look.  \n```\n\nOriginal comment by `Andrew.S...@gmail.com` on 13 Jan 2015 at 10:16\n =||= ```\n> But I am also young to maven and perhaps there are workaround that I am \nunaware of.\n\nUse <dependencyManagement> to set the version of gson pulled in as a transitive \ndependency  \nhttp://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism\n.html#Dependency_Management\n\n\n```\n\nOriginal comment by `cheis...@squareup.com` on 13 Jan 2015 at 10:20\n =||= ```\nIn any case, software versions are never re-released with the same version \nnumber. That would fundamentally break Maven version management (dependencies \nand POMs are cached locally and in proxied repos) as well as being extremely \nbad practice from a general software perspective. A POM is part of the artifact \nand coupled with the jar, its source etc. You'd essentially have two different \nartifacts of the same version number, which is supposed to be an artifact's \nunique identifier.\n\nAnyway, in addition to dependencyManagement, Maven dependencies should always \npull in a higher level version off the dependency tree in preference to a \ntransitive dependency at a deeper depth so normally this should work by default \nunless you have a complex structure or are using a very outdated Maven version \nwith bugs/weaknesses. The link in #15 notes this. Another alternative is to \nexclude the GSON dependency from google-services-api dependency with the \n<exclusions> section.\n\nThis bug may not be gmaps-api's fault, but the reality is that a library is \nresponsible for all its dependencies. If they add a dependency on another \nlibrary that has a bug affecting their users; they need to move that forward so \nyou're right to raise it with them; even though there are several workarounds \nyou can apply at your end.\n```\n\nOriginal comment by `chad.lee...@gmail.com` on 14 Jan 2015 at 12:57\n =||= ", 0], ["589", "toJson converts map's Integer key into a String", "Google Code Exporter", "GoogleCodeExporter", "12/04/17, 03:06:02 PM", "```\nWhat steps will reproduce the problem?\n1. Construct a Map with Integer key\n2. Put key/value pair into the map, making sure the key is an Integer\n3. Write JSON stream using toJson to convert the map to JSON\n4. Check the output file\n\nWhat is the expected output? What do you see instead?\nExpect to see the key represented as an Integer with no quotes. The key is \nrepresented as a String with double quotes.\n\nWhat version of the product are you using? On what operating system?\nGoobuntu. The latest in third_party/java.\n\nPlease provide any additional information below.\nMight have the same root cause as issue 524, but I'm seeing the problem in \ntoJson instead of fromJson.\n\nHere's some sample code to demonstrate the bug:\n\nprivate void writeJsonStreamTest(OutputStream out) throws IOException {\n  JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n  writer.setIndent(\"  \");\n  writer.beginArray();\n  Map<Integer, String> data = new HashMap<Integer, String>();\n  data.put(new Integer(4), \"Hello\");\n  new Gson().toJson(data, HashMap.class, writer);\n  writer.endArray();\n  writer.close();\n}\n\nHere's the actual output from calling that method:\n[\n  {\n    \"4\": \"Hello\"\n  }\n]\n\nExpected this instead:\n[\n  {\n    4: \"Hello\"\n  }\n]\n```\n\nOriginal issue reported on code.google.com by `vivienne...@google.com` on 19 Aug 2014 at 5:29", "```\nAs yonmost pointed out in issue 524, if the Integer is a value instead of key \nthen it works as expected. I swapped the Integer and String in the data map \nabove, and got this expected output:\n\n[\n  {\n    \"Hello\": 4\n  }\n]\n```\n\nOriginal comment by `vivienne...@google.com` on 19 Aug 2014 at 5:32\n =||= ```\nMy colleague pointed out that JSON keys have to be Strings. Would it be \npossible then to add documentation in toJson so the end user doesn't get \nconfused when trying to parse the JSON back into a Map?\n```\n\nOriginal comment by `vivienne...@google.com` on 19 Aug 2014 at 5:58\n =||= ```\nYou should use\n\nnew Gson().toJson(data, new TypeToken<Map<Integer, String>>() {}.getType())\n\nOtherwise, gson can't know what kind of map you want.\n\nhttp://google-gson.googlecode.com/svn/tags/1.1.1/docs/javadocs/com/google/gson/r\neflect/TypeToken.html\n```\n\nOriginal comment by `Maaarti...@gmail.com` on 27 Aug 2014 at 3:54\n =||= ```\n\"new Gson().toJson(data, new TypeToken<Map<Integer, String>>() {}.getType())\"\nThe above method is not work.\n\n```\n\nOriginal comment by `androida...@gmail.com` on 31 Dec 2014 at 4:15\n =||= For reference, [RFC4627](https://tools.ietf.org/html/rfc4627) makes clear:\r\n\r\n> An object is an unordered collection of zero or more name/value pairs, where a **name is a string** and a value is a string, number, boolean, null, object, or array.\r\n\r\n*(emphasis mine)* =||= ", 0], ["592", "JsonObject.add does not add, it sets/replaces/puts", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:21 PM", "```\nThe JsonObject.add() method name and JavaDoc suggest that it is an _additive_ \noperation, but it isn't.\n\nWhat steps will reproduce the problem?\n\n        JsonObject obj = new JsonObject();\n        obj.add(\"languages\", new JsonPrimitive(\"en\"));\n        obj.add(\"languages\", new JsonPrimitive(\"it\"));\n        System.out.println(obj.get(\"languages\"));\n\nWhat is the expected output? What do you see instead?\n\nA programmer with no access to the code (just API and Javadoc) would probably \nexpect [\"en\",\"it\"] to be printed. The actual result is \"it\".\n\nSuggested fix:\n\nDeprecate/remove ALL JsonObject.add() methods and call them \"set\" or \"put\".\n\nI know this won't happen because nothing can be removed from the API, but I \nstill had to vent ;-)\n```\n\nOriginal issue reported on code.google.com by `hussdl` on 22 Aug 2014 at 10:29", "```\n:) Yes, we should have named the methods better. And you are right that we will \nnot change it because of backward compatibility. \n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:37\n- Changed state: **WontFix**\n =||= ", 0], ["593", "when I'm writing the phone freezes", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:21 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? KgWhat do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `bertieda...@googlemail.com` on 25 Aug 2014 at 7:05", "```\ninsufficient details\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:34\n- Changed state: **Invalid**\n =||= ", 0], ["596", "Maven dependency issue for 2.3 - Invalid JDK version in profile 'doclint-java8-disable'", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:22 PM", "```\nWhat steps will reproduce the problem?\n1. use gson 2.3 as maven dependency\n2. include that project as a dependency in another project\n3. use IntelliJ\n\nUnable to get dependency information: Unable to read the metadata file for \nartifact 'com.google.code.gson:gson:jar': \nInvalid JDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, \nfor project com.google.code.gson:gson\n  com.google.code.gson:gson:jar:2.3\n\nLooks to me that it is a maven setup issue, as the issue was noted/discovered \nin a maven library.\n\nWhat is the expected output? What do you see instead?\nMaven itself works fine - i.e. ignores the issue.\nIntelliJ bombs out (yes it's their problem, but you are the cause)\n\nWhat version of the product are you using? On what operating system?\n2.3\n\nPlease provide any additional information below.\n\n-----\nPath to dependency: \n    1) com.bizfabrik:xcompiere:war:1.0-SNAPSHOT\n    2) com.bizfabrik:biz-base:jar:1.0-SNAPSHOT\n\n\njava.lang.RuntimeException: \norg.apache.maven.artifact.resolver.ArtifactResolutionException: Unable to get \ndependency information: Unable to read the metadata file for artifact \n'com.google.code.gson:gson:jar': Invalid JDK version in profile \n'doclint-java8-disable': Unbounded range: [1.8, for project \ncom.google.code.gson:gson\n  com.google.code.gson:gson:jar:2.3\n\nfrom the specified remote repositories:\n  public (http://rep.bizfabrik.com/nexus/content/groups/public),\n  central (http://repo1.maven.org/maven2),\n  releases (http://rep.bizfabrik.com/nexus/content/repositories/releases),\n  splunk-release (http://splunk.artifactoryonline.com/splunk/ext-releases-local),\n  snapshots (http://rep.bizfabrik.com/nexus/content/repositories/snapshots),\n  audaxis-snapshots (http://support.audaxis.com/m2-snapshots)\n\nPath to dependency: \n    1) com.bizfabrik:xcompiere:war:1.0-SNAPSHOT\n    2) com.bizfabrik:biz-base:jar:1.0-SNAPSHOT\n\n\n    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:430)\n    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:435)\n    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:74)\n    at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:316)\n    at org.jetbrains.maven.embedder.MavenEmbedder.resolveProject(MavenEmbedder.java:210)\n    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$2.execute(Maven2ServerEmbedderImpl.java:135)\n    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$2.execute(Maven2ServerEmbedderImpl.java:132)\n    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$6.run(Maven2ServerEmbedderImpl.java:532)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.RuntimeException: \norg.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException: Unable \nto read the metadata file for artifact 'com.google.code.gson:gson:jar': Invalid \nJDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, for \nproject com.google.code.gson:gson\n    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetadataSource.java:200)\n    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedArtifact(MavenMetadataSource.java:94)\n    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:387)\n    ... 12 more\nCaused by: java.lang.RuntimeException: \norg.apache.maven.project.ProjectBuildingException: Invalid JDK version in \nprofile 'doclint-java8-disable': Unbounded range: [1.8, for project \ncom.google.code.gson:gson\n    at org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfiles(DefaultMavenProjectBuilder.java:1502)\n    at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBuilder.java:1194)\n    at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:823)\n    at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:255)\n    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetadataSource.java:163)\n    ... 14 more\nCaused by: java.lang.RuntimeException: \norg.apache.maven.profiles.activation.ProfileActivationException: Invalid JDK \nversion in profile 'doclint-java8-disable': Unbounded range: [1.8,\n    at org.apache.maven.profiles.activation.JdkPrefixProfileActivator.isActive(JdkPrefixProfileActivator.java:57)\n    at org.apache.maven.profiles.DefaultProfileManager.isActive(DefaultProfileManager.java:273)\n    at org.apache.maven.profiles.DefaultProfileManager.getActiveProfiles(DefaultProfileManager.java:209)\n    at org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfiles(DefaultMavenProjectBuilder.java:1496)\n    ... 18 more\n\n```\n\nOriginal issue reported on code.google.com by `jorg.ja...@accorto.com` on 12 Sep 2014 at 11:36", "```\nuups ... duplicate of 588\n```\n\nOriginal comment by `jorg.ja...@accorto.com` on 12 Sep 2014 at 11:50\n =||= ```\nI am having the exact same issue with Maven 3.2.3, IntelliJ, and gson 2.3\n```\n\nOriginal comment by `ryanlan...@gmail.com` on 18 Sep 2014 at 2:00\n =||= ```\nas quick fix open the pom file at your local repository and add ')' and should \nlooks like\n\n 91         <jdk>[1.8,)</jdk>\n\nsave and execute again\n```\n\nOriginal comment by `arterza...@gmail.com` on 25 Sep 2014 at 3:39\n =||= ```\nFixed in https://code.google.com/p/google-gson/source/detail?r=1300\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 11:25\n- Changed state: **Fixed**\n =||= ", 0], ["602", "cant let me play in a server in minecraft", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:25 PM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jepbig...@gmail.com` on 26 Oct 2014 at 7:34", "```\nI am afraid you will need to give us a lot more details on how we fix Gson to \nfix the issue in Minecraft. \n\nOn the bright side, I am elated to note that Minecraft uses Gson. My kids love \nplaying Minecraft, and I now stand tall in front of them because of this. :)\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 10:18\n- Changed state: **Invalid**\n =||= ", 0], ["606", "Feature request: Add a JsonArray reverse method", "Google Code Exporter", "GoogleCodeExporter", "08/09/15, 09:50:52 AM", "```\nCan we get a JsonArray.reverse() function to simply reverse its backing List?\n\nRight now I have to manually iterate through the JsonArray in reverse and add \nthose elements to a new/temp JsonArray.\n\nI noticed that in an old revision of the JsonArray.java class \n(https://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/co\nm/google/gson/JsonArray.java?r=486) there used to be a reverse() method, \nhowever it was package private:\n\n  /**\n   * Reverses the elements of the array.\n   */\n  void reverse() {\n    Collections.reverse(elements);\n  }\n\nCan we reintroduce this method and make it public?\n```\n\nOriginal issue reported on code.google.com by `theother...@gmail.com` on 8 Nov 2014 at 8:48", "Not sure if usage is sufficient enough for this feature to place it in the Gson API.\n =||= A better solution will be to make JsonArray implement List, which will then allow Collections.reverse() method to be applied to it.\n =||= https://github.com/google/gson/pull/683\n =||= ", 0], ["607", "pathIndices not updated", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:26 PM", "```\nWhat steps will reproduce the problem?\n1. Create a new instance of JsonReader with this json: \"{\\\"array\\\" \n:[{\\\"test\\\":1},{\\\"test\\\":1},{\\\"test\\\":1}]}\"\n2. Let the reader read all items until the second object in the array with \nthese statements:\nreader.beginObject();\nreader.nextName();\nreader.beginArray();\nreader.beginObject();\nreader.nextName();\nreader.nextInt();\nreader.endObject();\nreader.beginObject();\n3. See that the JsonPath = $.array[0]. while the reader is in the second object \nof the array so the value should be $.array[1].\n\nWhat is the expected output? What do you see instead?\nWhen i close an object in an array i expect the JsonPath index of that array to \nbe increased. Instead it stays the same.\n\n\nWhat version of the product are you using? On what operating system?\n2.3 in an android gradle project on OSX\n\n\nPlease provide any additional information below.\nIn all the next.... methods of JsonReader the pathIndex of the top item of the \nstack is increased by 1. This does not happen in endObject or endArray.\n\n```\n\nOriginal issue reported on code.google.com by `remcomok...@gmail.com` on 10 Nov 2014 at 8:49", "```\nMy bug! Fix:\nhttps://code.google.com/p/google-gson/source/detail?r=1303\n```\n\nOriginal comment by `limpbizkit` on 11 Nov 2014 at 2:00\n- Changed state: **Fixed**\n =||= ", 0], ["608", "Enum serializes to null when nothing matches (instead of throwing IOException)", "Google Code Exporter", "GoogleCodeExporter", "03/19/15, 06:34:27 PM", "```\n> What steps will reproduce the problem?\n\n1. Implement a POJO that has an enum\n2. Attempt to deserialize the POJO using a bad string for the enum's value\n3. See that the enum's value is set to null\n\n> What is the expected output? What do you see instead?\n\nI expect to see an exception (probably IOException?), but instead the value is \ninitialized to null.\n\n> What version of the product are you using? On what operating system?\n\nGSON 2.3, Android 4.4.2\n\n> Please provide any additional information below.\n\nHere's the relevant part of TypeAdapters.EnumTypeAdapter\n\n    public T read(JsonReader in) throws IOException {\n      if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n      }\n      return nameToConstant.get(in.nextString());\n    }\n\n`nameToConstant.get()` gives null when nothing is found.\n```\n\nOriginal issue reported on code.google.com by `me@benjam.info` on 12 Nov 2014 at 2:17", "```\nIt is debatable what the correct behavior is. Gson in general ignores \nadditional fields or input.\n\nYou can easily write a custom type adapter for your enum to assert the correct \nbehavior.\n```\n\nOriginal comment by `inder123` on 12 Nov 2014 at 10:16\n- Changed state: **WontFix**\n =||= The problem is that the adapter makes no difference between an input value: null  and a invalid enum value (for example a typo in the enum value). Both return null. While the first is valid, the second is invalid. Thus the adapter returns the same kind of data for both valid and invalid input. It's not possible to know if the input was valid or invalid without performing an extra additional check if the input was null  in case the result is null. I don't think that is correct behavior and should not be solved by writing a custom adapter. Shouldn't it throw an IllegalArgumentException when an invalid enum value is given?\n =||= Throwing an exception will cause backward compatibility issues. If you introduce a new enum value, you dont want all existing clients to break.\n =||= Trying to understand. But how would  this cause backward compatibility issues? The case I can think of were there might be a problem is when json data (newer version) containing a new enum field, would be read by a java implementation (old version) using gson. In that case this will throw an exception and not be compatible. But from the java point of view. I would call this not being forward compatible. The question is if that should be a problem. Because one can not be expected to be prepared for the future. So that should not be a limitation to fix this.\nRegarding ignoring additional field, input. I would consider this more of a change of input type then an additional field. For changed fields it would also throw exceptions If a field name changes. Also what if the type changes in the json data. From String to double that would cause an exception. But what if the type changed from enum to string that should cause an exception if it gets an new value.... but it doesn't it will simply return null for all the unknown enum fields.\nIt also doesn't ignore the input in the case of a new/wrong enum value. It just reads it with a different value, the value null.\nIt can also be seen different from for example UUID reading. That would throw an IllegalArgumentException in case the UUID is incorrect. If it had the same behavior as the enum parsing it should then return null. One could argue that if UUID parsing could be a problem no UUID should be used. The same can be argued for enum field. If it might be a problem with new enum values. One should probably read strings and parse them in code, not let the gson library handle it.\nIn general the gson library should not make the decision to interpret the input different then expected, but let the user of the library handle it and thus throw an IllegalArgumentException in this case.\n =||= You can always install your custom type adapter for your enum that enforces this. Gson isn't going to support this, sorry.\n =||= Too bad that there are no option to decide to throw an exception in that case.\r\nIf someone add an extra enum value, there won't be an issue with the existing json which don't use those value. =||= I agree it would be great to make the behavior configurable - both globally and on enum level (via annotation).\r\n\r\nOn enum level there could be 3 options:\r\n\r\n- throw exception\r\n- parse as `null`\r\n- set a default value from the existing enum values =||= I also support this as a configurable behavior. =||= Ok, it has been on a todo list for me as well.\r\nplease present a concrete proposal if you can. thanks =||= How about something like this:\r\n\r\n@SerializedName(defaultValue = TrafficLight.RED)\r\npublic enum TrafficLight {\r\n   RED, ORANGE, GREEN\r\n}\r\n\r\n// defaultValue will also allowed to be null\r\n// if this annotation is not present, enum maintains current behavior.\r\n\r\nComments @JakeWharton @swankjesse @joel-leitch? =||= ^^ =||= ", 0], ["613", "Document that Gson instances are thread safe", "Google Code Exporter", "GoogleCodeExporter", "08/10/15, 02:06:23 PM", "```\nIssue #63 [1] and the gson mailing list [2] indicate that Gson instances are \nthread safe. It would be good to document that in the Gson class, either in the \nJavadoc or with a JSR-305 @ThreadSafe annotation.\n\nBackground for this request is that I recently found quite a few places in \nmulti-threaded code where Gson instances were unnecessarily created because the \ndevelopers didn't know that these instances are thread safe.\n\n[1] http://code.google.com/p/google-gson/issues/detail?id=63\n[2] https://groups.google.com/forum/#!topic/google-gson/Vju1HuJJUIE\n```\n\nOriginal issue reported on code.google.com by `st.fer...@gmail.com` on 28 Nov 2014 at 1:42", "```\nI created a patch that adds a JSR-305 @ThreadSafe annotation to the Gson class.\n\nI declared the dependency to the JSR-305 library as optional so that it doesn't \nget downloaded transitively when using google-gson. This is fine because the \n@ThreadSafe annotation has only a documentary purpose and it is not retained at \nruntime.\n```\n\nOriginal comment by `st.fer...@gmail.com` on 29 Nov 2014 at 11:16\n\nAttachments:\n- [issue-613.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-613/comment-1/issue-613.patch)\n =||= https://github.com/google/gson/pull/685\n =||= ", 0], ["623", "Correct JsonWriter class-level Javadoc", "Google Code Exporter", "GoogleCodeExporter", "09/27/15, 01:11:27 AM", "```\nThe JsonWriter class-level Javadoc has a reference to a non-existent method \n'setIndentSpaces'.\n\nI believe the statement on line 80 should be:\n\n    writer.setIndent(\"  \");\n\nrather than:\n\n    writer.setIndentSpaces(4);\n```\n\nOriginal issue reported on code.google.com by `jonathan...@gmail.com` on 27 Jan 2015 at 1:39", "NaN", 0], ["624", "Error desirialization of ConcurrentNavigableMap ", "Google Code Exporter", "GoogleCodeExporter", "11/05/15, 12:25:34 PM", "```\nWhat steps will reproduce the problem?\n1. Create POJO with filled ConcurrentNavigableMap field\n2. Sirialize to json string\n3. Desirialize from json string\n\nWhat is the expected output? What do you see instead?\nOriginal state is expected. IllegalArgumentException is thrown\n\nWhat version of the product are you using? On what operating system?\nGson 2.3.1, java 8, windows 7\n\nPlease provide any additional information below.\nGson works only with class type field such as ConcurrentSkipListMap.\nGood programming style is using interface type such as ConcurrentNavigableMap. \nSee attach for log and unit-test\n\n```\n\nOriginal issue reported on code.google.com by `dkhomya...@gmail.com` on 29 Jan 2015 at 8:34\n\nAttachments:\n- [gsonErrLog.TXT](https://storage.googleapis.com/google-code-attachments/google-gson/issue-624/comment-0/gsonErrLog.TXT)\n- [JsonUtilsTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-624/comment-0/JsonUtilsTest.java)", "ConcurrentNavigableMap was introduced in JDK 1.6.\n@swankjesse @JakeWharton @joel-leitch  Shall we abandon support for JDK 1.5?\n =||= I'm in favor. JVM users on Java 5 aren't likely going to be updating their Gson instances at any frequent pace. The stronger realization of this change is that it eliminates Android 2.2 and older. This accounts for 0.2% of the 1.some billion devices that talk to Google Play in the last 2 weeks. As far as I know, Google has stopped officially supporting it with their apps, and this was well behind others who have long since moved on from this far outdated platform.\n =||= Yeah, those users can continue to use earlier releases.\n =||= Ok. Agreed. Let's switch to Java 6 as the minimum version once we introduce support for ConcurrentNavigableMap and other Java 6 standard classes.\n =||= ", 0], ["627", "LazilyParsedNumber does not implement eqals and hashCode methods", "Google Code Exporter", "GoogleCodeExporter", "09/27/15, 09:25:05 PM", "```\ntest case to reproduce the issue\n\npackage com.google.gson.internal;\n\nimport junit.framework.TestCase;\n\npublic class LazilyParsedNumberTest extends TestCase {\n\n    public void testHashCode(){\n        LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n        LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n        assertEquals(n1.hashCode(), n1Another.hashCode());\n    }\n\n    public void testEquals(){\n        LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n        LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n        assertTrue(n1.equals(n1Another));\n    }\n\n\nWhat is the expected output? What do you see instead?\nAny class should implement hashCode and equals when implementing Number \ninterface.\n\nWhat version of the product are you using? On what operating system?\n2.3\n\nPlease provide any additional information below.\nhttps://code.google.com/p/google-gson/issues/detail?id=523\nSimilar one.\n\nI could work on these, but first I would like to know if there was any reason \nyou decided not to implement these methods? \n```\n\nOriginal issue reported on code.google.com by `vrab...@gmail.com` on 4 Feb 2015 at 12:06", "```\nThis was an oversight. We should fix this. Thanks for the bug report and a \nnicely written test.\n```\n\nOriginal comment by `inder123` on 12 Feb 2015 at 5:31\n- Changed state: **Accepted**\n =||= ```\nThanks.\nDo you have any plans with the 523?\n\nI am not sure what the comment in the 523 bug report means.\n\nDo you try implement equals to behave like in javascript?\n1.0 == 1 \n\nIn this case implementing equals and hashCode to fulfill the java contract \nwould need more work than just ask IDE to generate equals and hashCode methods.\n```\n\nOriginal comment by `vrab...@gmail.com` on 13 Feb 2015 at 8:18\n =||= ", 0], ["628", "private inheritance", "Google Code Exporter", "GoogleCodeExporter", "06/24/15, 12:56:27 AM", "```\n-What steps will reproduce the problem?\nWhen I run this code :\nimport com.google.gson.Gson;\n\n/**\n * Created by Razi on 2/12/2015.\n */\npublic class Main {\n\n    public static void main(String[] args)\n    {\n        Child child = new Child();\n        Gson gson = new Gson();\n        String json = gson.toJson(child);\n    }\n}\nclass Parent{\n    protected int a;\n    private int b;\n}\n\nclass Child extends Parent{\n    private float b;\n}\n\nI see this exception:\njava.lang.IllegalArgumentException: class messages.BlockData declares multiple \nJSON fields named other\n\n- What is the expected output? What do you see instead?\nignore parent private field\n\n\n- What version of the product are you using? On what operating system?\ngson-2.3.1\nwindows 7\njava version 1.8.0\n\n\n- Please provide any additional information below.\nTnx.\n\n```\n\nOriginal issue reported on code.google.com by `sm.raz...@gmail.com` on 12 Feb 2015 at 11:01", "The private modifier in java isn't ignored by the serialization process. I recommend that you add the transient modifier to the field.\n =||= ", 0], ["631", "phone", "Google Code Exporter", "GoogleCodeExporter", "10/04/15, 05:39:55 AM", "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `noahgarc...@gmail.com` on 6 Mar 2015 at 10:52", "NaN", 0], ["632", "UI ISSUE IN DROPDOWN LIST", "Google Code Exporter", "GoogleCodeExporter", "05/30/15, 07:32:58 PM", "```\nUI ISSUE IN DROPDOWN LIST\n\nThanks \nAnurag Dikshit\n```\n\nOriginal issue reported on code.google.com by `dixit.an...@gmail.com` on 12 Mar 2015 at 8:49\n\nAttachments:\n- [UI issue.png](https://storage.googleapis.com/google-code-attachments/google-gson/issue-632/comment-0/UI issue.png)", "Not relevant anymore, nor was even a Gson bug in the first place.\n =||= ", 0], ["633", "README file contains broken links", "Natasha Chernyavsky", "NatashaCh", "04/13/15, 04:40:22 PM", "For the Gson user guide and design.", "NaN", 0], ["634", "Correct 'user guide' and 'design document' Markdown links.", "Jake Wharton", "JakeWharton", "04/13/15, 04:40:22 PM", "Closes #633. ", "NaN", ["634", "Correct 'user guide' and 'design document' Markdown links.", "Jake Wharton", "JakeWharton", "04/13/15, 04:40:22 PM", "Closes #633. ", "NaN"], ["Jake Wharton", "Correct 'user guide' and 'design document' Markdown links.", "04/13/15, 04:22:11 PM", "Jake Wharton", "35bf3a9e03d16c043e3924a156243561e6694de3", ["README.md"], "@@ -16,9 +16,9 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n *Gson Documentation*\n   * Gson [API](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html): Javadocs for the current Gson release\n-  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide user guide): This guide contains examples on how to use Gson in your code.\n+  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://sites.google.com/site/gson/gson-roadmap): Details on upcoming releases \n-  * Gson [design document](https://sites.google.com/site/gson/gson-design-document design document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [design document](https://sites.google.com/site/gson/gson-design-document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n , ", 2, 2, "\"modified, \"", 4], 1], ["635", "Throw errors when essential field missing", "Qianliang Zhang", "zhangqianliang", "04/15/15, 06:09:42 AM", "I got a class, like:\n\nclass Resource {\n    private final String res;\n    public Resource(String res) {\n        if (res == null) {\n            throw new IllegalArgumentException(\"resource can not be null\");\n        }\n    }\n}\n\nGson gson = new Gson();\nResource res = gson.fromJson(json, Resource .class);\nHow can Gson throw error when \"res\" not given?", "You will need to write a custom type adapter for Gson to achieve this.\nSon currently doesn't provide a callback after an object is created.\n =||= ", 0], ["636", "add parse format for ISO8601 with millisecond", "Yeti Sno", "yetisno", "04/15/15, 03:23:51 PM", "format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= ", 0], ["637", "Add parse format for ISO8601 with millisecond and test case", "Yeti Sno", "yetisno", "04/16/15, 01:17:39 AM", "parse format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "NaN", 0], ["638", "reduce precision of millisecond to fit ISO8601", "Yeti Sno", "yetisno", "11/19/15, 11:55:09 PM", "make format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' fit yyyy-MM-dd'T'HH:mm:ss'Z'.\n\nSome api provide millisecond precision, but it'll throw exception. This change cut millisecond part to fit ISO8601 format.", "@swankjesse @JakeWharton What do you think about this one?\n =||= ISO 8601 specifies that you do can have fraction of seconds in your date format.\nFrom http://en.wikipedia.org/wiki/ISO_8601 : \"There is no limit on the number of decimal places for the decimal fraction.\"\nAnother quick fix would be to add another iso8601Format with milliseconds. :-1: \nOr, try using\n`return DatatypeConverter.parseDate(json.getAsString()).getTime();`\ninstead of \n`return iso8601Format.parse(json);`\nIt should be able to parse all of ISO8601 formats ;) :+1: \n =||= I'm not comfortable with this proposal. My recommendation is to use `UtcDateTypeAdapter`, which is smarter & faster than the built-in date formatting.\n =||= ", 0], ["639", "SerializedName should allow multiple names to be matched to a single name for input", "Inderjeet Singh", "inder123", "10/04/15, 05:40:57 AM", "NaN", "+1\n =||= @inder123 @ikkyu0319 Do you mean something like this (this isn't available yet) ?\n\n``` java\n@SerializedName({\"name\", \"firstName\", \"userName\"})\npublic String name;\n\n@SerializedName(\"id\")\npublic String id;\n```\n\nwhere the idea is to re-use a model for multiple API endpoints but the attribute returned has a different name?\n =||= Yes~ I need this~~ @JakeWharton @inder123 @fahimk \n =||= To maintain backward compatibility, I revised it to:\n\n@SerializedName(value=\"default_name\", alternate={\"name\", \"firstName\", \"userName\"})\npublic String name;\n\nLet me know if you see a problem with this.\n =||= This shipped in 2.4\n =||= @inder123 this is great, thanks for working on it.\n =||= @fahimk great. Looking forward to learning how it worked for you.\n =||= How can i use this in kotlin  ? \r\n @SerializedName(value=\"name\", alternate={\"person\", \"user\"})\r\nthis gives me unexpected token error =||= Use arrayOf\n\nOn Mon, Aug 7, 2017 at 11:55 PM GaniduAsh <notifications@github.com> wrote:\n\n> How can i use this in kotlin ?\n> @serializedname(value=\"name\", alternate={\"person\", \"user\"})\n> this gives me unexpected token error\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/639#issuecomment-320867508>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEWhHbwfZtXFbc8zp8jr8iunW36zOks5sWAZzgaJpZM4EFYUt>\n> .\n>\n =||= yes found it thanks  =||= Can we let the alternative or on of the alternatives get chosen when serializing object that will be sent to server ? =||= For Kotlin ` @SerializedName(value=\"firstName\", alternate= [\"userName\"])` =||= I am trying this, but it's not working.\r\n@SerializedName(value = \"text\", alternate = {\"text\", \"image\", \"document\", \"voice\", \"audio\", \"video\", \"location\", \"contacts\"})\r\n    private String content;\r\n\r\n@inder123, any suggestion ?\r\n =||= @sunil965 alternate should be an array not object. =||= What up? May i help u.?\n\n\nOn Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com>\nwrote:\n\n> @sunil965 <https://github.com/sunil965> alternate should be an array not\n> object.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/639#issuecomment-677819572>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ>\n> .\n>\n =||= Hi Google/Gson,\n\n\nI don't know why I am getting this message, can you please confirm.\n\nOn Thu, 20 Aug, 2020, 11:45 PM AungHtetKyawWho, <notifications@github.com>\nwrote:\n\n> What up? May i help u.?\n>\n>\n> On Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com>\n> wrote:\n>\n> > @sunil965 <https://github.com/sunil965> alternate should be an array not\n> > object.\n> >\n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/google/gson/issues/639#issuecomment-677819572>, or\n> > unsubscribe\n> > <\n> https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ\n> >\n> > .\n> >\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/639#issuecomment-677820577>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AGL6N5Z5DJMJVBWEEMY7LQLSBVR3FANCNFSM4BAVQUWQ>\n> .\n>\n =||= \ud83d\ude4f\ud83d\ude4f\n\nOn Sun, 23 Aug 2020, 7:47 am Sunil Kumar, <notifications@github.com> wrote:\n\n> Hi Google/Gson,\n>\n>\n> I don't know why I am getting this message, can you please confirm.\n>\n> On Thu, 20 Aug, 2020, 11:45 PM AungHtetKyawWho, <notifications@github.com>\n> wrote:\n>\n> > What up? May i help u.?\n> >\n> >\n> > On Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com\n> >\n> > wrote:\n> >\n> > > @sunil965 <https://github.com/sunil965> alternate should be an array\n> not\n> > > object.\n> > >\n> > > \u2014\n> > > You are receiving this because you are subscribed to this thread.\n> > > Reply to this email directly, view it on GitHub\n> > > <https://github.com/google/gson/issues/639#issuecomment-677819572>, or\n> > > unsubscribe\n> > > <\n> >\n> https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ\n> > >\n> > > .\n> > >\n> >\n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/google/gson/issues/639#issuecomment-677820577>, or\n> > unsubscribe\n> > <\n> https://github.com/notifications/unsubscribe-auth/AGL6N5Z5DJMJVBWEEMY7LQLSBVR3FANCNFSM4BAVQUWQ\n> >\n> > .\n> >\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/639#issuecomment-678716487>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AJJORCZ5ODZBKWAO36CAOZLSCBU4DANCNFSM4BAVQUWQ>\n> .\n>\n =||= ", 0], ["641", "RuntimeTypeAdapterFactory removes the type field during deserialization", "Darren Kennedy", "zaphod72", "04/22/15, 03:45:00 PM", "/trunk/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\nLine 202: JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);\n\nThis seems counter-intuitive.\nIf registered types have the typeFieldName as a field then it will not be deserialized as expected.", "This factory is designed to create a new fictitious field name. But I agree with you, in my usage, often I do want that field to be present as an enum.\nLook at the this test class:\nhttps://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java\n\nThe RuntimeTypeAdapterFactory in this test class implements the behavior you want.\n =||= ", 0], ["643", "Getters and setters", "Steven Wexler", "steaks", "07/09/15, 06:18:22 AM", "Hi Gson team,\n\nMy company ([Hurdlr](hurdlr.com)) uses gson extensively.  We really enjoy the library and appreciate all your work!\n\nThis pull request includes an attempt to implement support for getters and setters.  I realize you probably have deliberately chosen to not implement this feature.  However, the other day I stumbled across a problem where I really wanted to serialize a computed property.  So along the way I implemented support for getters and setters for my company.  (A full explanation of my use case is explained below.)\n\nAfter implementing this feature for my own purposes, I figured creating a pull request couldn't hurt.  And after seeing [others with similar requests](http://stackoverflow.com/questions/6203487/why-does-gson-use-fields-and-not-getters-setters) I hope this pull request will make it into the codebase or inspire ideas for getter/setter support.\n\nBefore I invest more effort into this feature, I'm curious to hear initial thoughts and reactions.  If you want to proceed with this feature, I'd be interested to learn what I can do for a next step.\n\n**Basic usage**\n\n```\nclass Foo {\n  private String bar;\n\n  @GsonGetter\n  public String getBar() {\n    return this.bar;\n  }\n\n  @GsonSetter\n  public String setBar(String value) {\n    this.bar = value;\n  }\n}\n\n//JSON\n{ \"bar\": \"baz\" }  //using getter and setter, not the private field\n\nGson gson = new GsonBuilder().allowGetterAndSetterMethods().create();\n```\n\n_More examples can be found in MethodTest.java_\n\n**API additions**\n- @GsonGetter\n- @GsonSetter\n- GsonBuilder.allowGettersAndSetterMethods\n- Excluder.allowGettersAndSetterMethods\n- MethodAndFieldNamingStrategy (new interface)\n- MethodAndFieldNamingPolicy (new enum)\n\n**Expected common use cases**\n- Computed properties via getters\n- Lazily evaluated properties via getters\n- Safer way to expose only public API\n  - Often private fields can mistakenly be serialized because we often overlook them when thinking about our exposed API\n- Data formatting via getters and/or setters\n- Data validation via getters and/or setters\n\n```\npublic void setFoo(String value) {\n  if (value < 0) { throw new IllegalArgumentException(); }\n  this.foo = value;\n}\n```\n\n**Positives**\n- Simple and readable annotations\n- Fully backwards compatible\n- Opt-in\n  - allowGetterAndSetterMethods is necessary on GsonBuilder\n  - @GsonGetter and @GsonSetter are required for gson to consider a method\n- Intuitive default naming \n  - e.g. getBar => \"bar\", setBar => \"bar\"\n- Handles collisions\n  - e.g. getBar/setBar take precedence over bar\n\n**Negatives**\n- Extra annotations added...more bloated API\n- Extra MethodAndFieldNamingStrategy interface and MethodAndFieldNamingPolicy policy make the API more bloated and confusing.\n\n**Implementation / Testing gaps**\n- No tests for naming\n- No performance testing\n- No Java support testing.  I'm pretty sure it works for Java 1.6+\n\n**Context for the use case that prompted me to implement @GsonGetter and @GsonSetter:**\n\nWe factored out functionality in class `Foo` into a separate helper class.  But we wanted to preserve the JSON API in order to not break backwards compatibility.\n\nThere are a few way so solve this problem.  Three include\n- Shadow fooHelper.bar in NewFoo\n- Create a custom serializer/deserializer\n- Use a GsonGetter for a computed property.  IMO this solution is the simplest and most elegant :)\n\n```\nclass Foo {\n  private String bar;\n}\n//JSON\n{  \"bar\": \"baz\" }\n```\n\n```\nclass NewFoo {\n   private FooHelper fooHelper;\n}\n//Current JSON\n{  \"fooHelper\": { \"bar\": \"baz\" } }\n//Desired JSON\n{ \"bar\": \"baz\" }\n```\n\n_Solution 3: Computed getter_\n\n```\nclass NewFoo {\n  private FooHelper fooHelper;\n\n  @ GsonGetter\n  public getBar() {\n    return this.fooHelper.bar;\n  }\n}\n```", "Personally I don't want this in the core. Have you considered implementing this using a custom `TypeAdapter`? They're very powerful.\n =||= I think a TypeAdapter would work for a one off case.  But being able to serialize/deserialize getters and setters easily in any class, not just one off cases, would be more valuable to me.  I could implement a TypeAdapterFactory.\n\nMaybe something like:\n\n```\nclass GettersAndSettersTypeAdapterFactory implements TypeAdapterFactory {\n  @Override\n  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n    GsonGettersAndSetters a = type.getClass().getAnnotation(GsonGettersAndSetters.class);\n    if (a != null) {\n      //Basically do everything I do in my modified ReflectiveTypeAdapterFactory\n      //...get bound methods, get bound fields, create Adapter\n    }\n    return null;\n  }\n}\n```\n\n```\n@GsonGettersAndSetters\nclass Foo { \n  @GsonGetter\n   public String getBaz() { }\n}\n\n@GsonGettersAndSetters\nclass Bar { \n @GsonGetter\n  public String getBaz() { }\n}\n```\n\nBut this solution doesn't seem great because I'm basically reimplementing ReflectiveTypeAdapterFactory and miss any improvements to ReflectiveTypeAdapterFactory when new commits are made.\n\nAre there other ways I'm missing?\n =||= Any updates here?\n =||= Nothing from me. I think a custom TypeAdapter is still the best option.\n =||= Yes, philosophically we haven't considered supporting getters and setters. Some users have asked for it, but majority seems fine without it. We wont add it to core Gson unless there was a greater need.\n\nAppreciate your effort in writing the type adapter. I think you should publish it for use with Gson. Would be great to see if people find it useful.\n =||= ", 0], ["644", "How can I change the indent of pretty output?", "Yiding Tian", "killa1218", "05/12/15, 11:23:33 AM", "I want to output formatted `JsonArray/JsonObject` using `\\t` as indent into a file. But the `PrettyPrint` of gson has an unchangable double space as indent. Currently I use `JsonWriter` to set indent, and use `new Gson().toJson(jsonArrayToBeOutput, jsonWriter)` to write. The problem is that the content of output file is not complete, just like the output progress was interrupted.\n![image](https://cloud.githubusercontent.com/assets/5045159/7581904/ed61bc64-f8ba-11e4-931c-b3759f5b3414.png)", "Please use stack overflow to ask why this is happening. This issue tracker is for bug reports and feature requests only. Thanks!\n =||= ", 0], ["645", "Convenience methods in JsonObject", "Vidar Wahlberg", "canidae", "06/21/15, 04:53:04 PM", "I've added several convenience methods to JsonObject. I find that whenever I use Gson for directly parsing JSON I end up creating similar convenience methods in my own project.\nSee second commit message for a simple example of the change.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= Signed the CLA thingy...\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Hi. Appreciate your efforts and the detailed tests for adding this.\nHowever, I am concerned about the code bloat. I am not sure about the value of primitive accessor methods in JsonObject.\n\nSimilarly, Not too sure about providing the getAsBooleanWrapper() either. We are not providing wrappers for anything else. So, why do it for boolean.\n =||= I would like to close this pull request in the next day or two. If any one has a strong preference for keeping it, please speak up.\n =||= Thank you for the feedback. I am however slightly confused by some of the points made:\n1. getBooleanAsWrapper(): I don't see the need for such methods myself, I added it only because it already exists for the parent class (JsonElement). JsonArray has methods for all \"getAs<something>()\" methods specified in JsonElement, except this one. Even if you disagree with adding the convenience methods in JsonObject, I would argue that you still should add this method to JsonArray for conformity (or remove \"getAsBooleanWrapper()\" from the other classes, but that breaks backwards compatability).\n2. Code bloat: I share the concern for code bloat. As of such, I'm curious why there are methods such as \"getAsString()\" and other data types for JsonArray that throws an unique exception if there are more than 1 element in the array.\n\nI do however not feel that adding these convenience methods are bloating the code. I would be surprised if I'm the only one who create a wrapper for Gson to avoid the extensive code you'll need whenever you're dealing with JSON input where some fields are optional.\n =||= 1. Get as BooleanWrapper is package private, not part of the public API. We can remove it if needed.\n2. If we were to redo the API, these methods will probably not make the cut. They did seem like a good idea at the time we created Gson.\n   With the newer releases of Gson, the DOM style API of JsonElement and subclasses is not really needed. \n\nI am curious, what kind of wrapper are you creating for Gson. \n =||= I did not see that getBooleanAsWrapper() was package private, that is a fair point.\n\nThe wrapper I'm creating do exactly the same as the convenience methods I added to JsonObject: Return a default value when the member I want doesn't exist in the JSON. In all the last three projects I've used Gson I've been in the situation that some data is optional (and if not present, a default value is to be used). All these projects have been work related and I don't have access to the code now (on vacation), but basically I create an utility class with methods for all getAs...() methods, like this:\n\n``` java\n    public static String getAsString(JsonObject object, String member, String defaultValue) {\n      JsonPrimitive primitive = object.getAsJsonPrimitive(member);\n      String value = null;\n      if (primitive != null)\n        value = primitive.getAsString(member);\n      return value != null ? value : defaultValue;\n    }\n```\n\n(I'm coding by head here, I could dig up the exact code in some days when I'm back at work, but I assume the above example shows well enough what the wrappers I'm creating do). In short terms: Methods just like the ones I added to JsonObject, in a utility class.\nAs such, the convenience methods I've added are by no means crucial, the problem can be solved by such wrapper methods. I'm however not the only developer in the project, other developers may very well overlook the utility class and create their own solutions, which in the long term will create messy code. This is less likely to happen when the library itself present these convenience methods.\n\nI did create a very simple example in one of the commit messages, here's a slightly larger example that hopefully shows that parsing even more complex JSON structure can lead to fairly unreadable code without convenience methods:\n\n``` json\n    {\n      \"optional1\": {\n        \"optional2\": {\n          \"optional3\": {\n            \"valueWanted\": \"FooBar\"\n          }\n        }\n      }\n    }\n```\n\nWith convenience methods:\n\n``` java\n    JsonObject defObject = new JsonObject();\n    String valueWanted = json.getAsJsonObject(\"optional1\", defObject)\n      .getAsJsonObject(\"optional2\", defObject)\n      .getAsJsonObject(\"optional3\", defObject)\n      .getAsString(\"valueWanted\", \"optionalDefaultValue\");\n```\n\nWithout convenience method, something like this:\n\n``` java\n    String valueWanted = null;\n    JsonObject jsonObj = json.getAsJsonObject(\"optional1\");\n    if (jsonObj != null) {\n      jsonObj = jsonObj.getAsJsonObject(\"optional2\");\n      if (jsonObj != null) {\n        jsonObj = jsonObj.getAsJsonObject(\"optional3\");\n        if (jsonObj != null) {\n          JsonPrimitive wanted = jsonObj.getAsJsonPrimitive(\"valueWanted\");\n          if (wanted != null)\n            valueWanted = wanted.getAsString();\n        }\n      }\n    }\n    // if we want a default value when member is missing:\n    if (valueWanted == null)\n      valueWanted = \"defaultValue\";\n```\n\nFrom my point of view it would be beneficial if these methods were within the library rather than creating a utility class in projects using Gson, but I do see your point about code bloating. I feel these methods would be within the gist of Gson and not actually bloat the code significantly, if you feel differently that's well understandable.\n =||= Thanks for the details. Yes, having a default object option for getters may be convenient and is similar to the pattern followed elsewhere (such as with Android preferences). Will keep an open mind in adding these.\n\nOverall, I would recommend that you use the binding to Java classes instead of dealing with JsonElement parse trees directly. Also, overall, Gson has moved towards TypeAdapters since they don't generate the parse tree and are more efficient in memory and performance.\n =||= ", 0], ["646", "toJson stops with work still to do", "Parker Young", "Parker8283", "06/21/15, 09:55:01 PM", "This is quite the interesting one, but I can't seem to figure out why this is happening...\n\nWhenever I try to serialize a List<${myCustomObject}>, it serializes just fine...to a point. At some point, it just stops, in the middle of a value:\n\n``` json\n    \"question\": \"CELEBRITY TWEET! 2:49 PM - 15 Nov 13 Richard Simmons\\u0027 Twitter handle @TheWeightSaint tweeted: \\\"At the airport ____ everyone.\\\"\",\n    \"truth\": \"Hugging\"\n  },\n  {\n    \"keyword\": \"Smuggle\",\n    \"question\": \"In 2010, Customs officers on the Morway-Sweden border intercepted a \n```\n\nThe file just ends there. I can't seem to figure out why.\n\nMy Gson object is created like so:\n\n``` java\n    public static final Gson GSON = new GsonBuilder().registerTypeAdapter(Question.class, new JsonQuestion()).setPrettyPrinting().create();\n```\n\nWhere JsonQuestion is a custom object implementing JsonDeserializer and JsonSerializer.\n\nI invoke it like so:\n\n``` java\nConstants.GSON.toJson(questionsToWrite, new FileWriter(jsonFile));\n```\n\nWhere jsonFile is a File object, and questionsToWrite is the List.\n\nAgain, it works fine, but stops randomly with a good 20-30 elements to go in the list.\n\nUsing Gson 2.3.1", "To isolate the problem, can you read your file in a String first, and then pass it through Gson?\n =||= I'm not sure I'm understanding what you're asking...\n =||= Sorry, I miswrote.\nSince you are serializing, can you do String json = toJson(questionsToWrite) and then see if the serialization produced correct output.\n =||= Ah, I see. Yes, I will try that next opportunity I get.\n =||= You're probably forgetting to close the JsonWriter or stream.\n =||= You mean the file writer that I construct upon calling toJson?\n =||= Yeah, that or whatever `JsonWriter`/`OutputStreamWriter` you're wrapping it with.\n =||= I'm not wrapping it with anything. I put all the gson code in the issue. The serializers work for all the elements prior to that one spot. And the one spot changes sometimes.\n =||= Yeah, you're doing it wrong. You need to do this:\n\n```\nFileWriter fileWriter = new FileWriter(jsonFile);\nConstants.GSON.toJson(questionsToWrite, fileWriter);\nfileWriter.close();\n```\n =||= ", 0], ["648", "Android M: Cannot make field constructor accessible", "Jake Wharton", "JakeWharton", "08/23/16, 07:46:28 PM", "```\nD/Retrofit\ufe55java.lang.SecurityException: Can't make field constructor accessible\n            at java.lang.reflect.Constructor.setAccessible(Constructor.java:334)\n            at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:97)\n            at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:79)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:82)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n            at com.google.gson.Gson.getAdapter(Gson.java:359)\n            at com.google.gson.Gson.fromJson(Gson.java:809)\n            at com.google.gson.Gson.fromJson(Gson.java:775)\n            at retrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)\n            at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:367)\n            at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)\n            at retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)\n            at retrofit.CallbackRunnable.run(CallbackRunnable.java:42)\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n            at retrofit.Platform$Android$2$1.run(Platform.java:142)\n            at java.lang.Thread.run(Thread.java:818)\n```\n\nOriginally filed at https://github.com/square/retrofit/issues/870.\n\nNote: this might be a bug in the preview OS runtime and not Gson, but it's definitely not a Retrofit problem.", "Maybe relevant: http://developer.android.com/preview/behavior-changes.html#behavior-art-runtime\n\nNot exactly the cause here, but not surprising that since it's in the same vein it might have been effected.\n =||= @JakeWharton I tried simulate this error without success. \nI used the android emulator with api version 22. Can you provide more information like device and the class that generated the problem?\n =||= Are we trying to deserialize an instance of `java.lang.reflect.Field` ? It's pretty reasonable that that doesn't work. Here's a snippet of `Constructor.java`:\n\n```\n    public void setAccessible(boolean flag) {\n        Class<?> declaringClass = getDeclaringClass();\n        if (declaringClass == Class.class) {\n            throw new SecurityException(\"Can't make class constructor accessible\");\n        } else if (declaringClass == Field.class) {\n            throw new SecurityException(\"Can't make field constructor accessible\");\n        } else if (declaringClass == Method.class) {\n            throw new SecurityException(\"Can't make method constructor accessible\");\n        }\n        super.setAccessible(flag);\n```\n =||= Seems a reasonable guess. This isn't my original bug, I was just moving it from a project I work on.\n =||= I get this with an app on a Nexus 6 running Android M.\n =||= just updated the Nexus 5 to the latest Android M preview and getting the same error. As it was working before, it seems to be only a problem with the most recent version of Android M (Build MPA44I)?\n =||= Hopefully Google will fix it before releasing Android M. Gson is used in a fairly large number of Android projects, and breaking them will be a big no no.\n =||= @cdreier are you using Gson on an instance of java.lang.reflect.Field? That's superweird. \n\nThe right fix for this is to write a type adapter for that class.\n =||= @swankjesse no, i'm using Retrofit for a few rest-calls. I think i figured out a bit more, perhaps something changed in the List interface?\n\nSimple Retrofit service:\n\n``` java\n    public interface SynchronisationService {\n        @GET(\"/rooms/all\")\n        public void getAll(Callback<List<Room>> rooms);\n    }\n```\n\n`Room` is a stupi POJO, but with a List of light-switches... \n\n``` java\n    public class Room {\n\n        private String name;\n        private int id;\n\n        private List<LightSwitch> switches;\n\n        /** ... **/\n    }\n```\n\nResponse is something like this:\n\n``` json\n    [\n        {\n            \"name\": \"livingroom\",\n            \"id\": \"1\",\n            \"switches\": [\n                {\n                    \"name\": \"big lamp\",\n                    \"id\": \"1\"\n                },\n                {\n                    \"name\": \"smaller lamp\",\n                    \"id\": \"2\"\n                }\n            ]\n        }\n    ]\n```\n\n**Without this switch-list in my room, everything is working fine!**\nIf i want Retrofit / gson to parse my switch-list directly in the room, im getting the stacktrace Jake Wharton posted.\n =||= You can try  adding GsonConverter \n\n``` java\nnew GsonConverter(new GsonBuilder()\n                .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n                .serializeNulls()\n                .create())\n```\n\nIn your RestAdapter.Builder()\n\n``` java\nRestAdapter.Builder()\n                .setConverter(new GsonConverter(new GsonBuilder()\n                        .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n                        .serializeNulls()\n                        .create()))\n                .setEndpoint(endPoint)\n                .build()\n```\n =||= I am using Retrofit and GSON in a project and only encountered this issue on Android M after replacing SugarORM with ActiveAndroid.\n =||= Is there any progress with this one? It is present with the official Android 6 release. \n =||= We experienced this same issue on our app on official Android 6 release. Adding this to our GsonBuilder as seen above seemed to resolve the issue.\n\n``` Java\nnew GsonBuilder()\n            .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n```\n =||= perhaps something changed with the reflection api in android 6? \nmy workaround was to declare these fields causing the error as transient.\n\n``` java\npublic class Switch {\n    public String name;\n    public Room room;\n    public int id;\n\n    private transient SwitchService switchService;\n\n}\n```\n =||= yeah @crowdcast-hk already resolve this issue. its work.\n =||= It seams  bug has been fixed in new version (2.4) .\n\"com.google.code.gson:gson:2.4\"\n =||= upgraded to 2.4 but app still crashes with the same exception on Marshmallow\n =||= Did you try to exclude fields with modifiers?\nnew GsonBuilder().excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n =||= @inisic if you need to add these lines, problem is not fixed :)\n\nIn my case, I don't use gson with retrofit (only gson) but i have the same problem.\nIf i only add\n\n``` java\n.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n```\n\nproblem is still here. To solve my problem, i have to set\n\n``` java\nexcludeFieldsWithoutExposeAnnotation()\n```\n\nBut i have to expose all fields i need ><. Is there a way to know where is the problem ? In the stacktrace, there is no reference to my code\n =||= This exclude(excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC) didn't help me. Class which extends Object is deserialized correctly, but classes which extends Model from ActiveAndroid throws exception. I found only one solution => write custom deserializer. I hope this is only temporary solution and this will be fix at GSON library.\n =||= The cause continues to seem like the use of Class or Field in the\nserialized object's fields without marking it transient. There is no reason\nto be serializing either of these types.\n\nOn Tue, Oct 27, 2015, 9:02 PM DavidKrybus notifications@github.com wrote:\n\n> This exclude(excludeFieldsWithModifiers(Modifier.FINAL,\n> Modifier.TRANSIENT, Modifier.STATIC) didn't help me. Class which extends\n> Object is deserialized correctly, but classes which extends Model from\n> ActiveAndroid throws exception. I found only one solution => write custom\n> deserializer. I hope this is only temporary solution and this will be fix\n> at GSON library.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/648#issuecomment-151687960.\n =||= I'm in the same boat. My tests pass running in API 22, but fail for API 23.\n =||= I had the same issue. I'm using Gson with Retrofit and ActiveAndroid. \n\nThe solution with\n\n```\nexcludeFieldsWithoutExposeAnnotation()\n```\n\nsuggested by @aat-antoine works for me.\n =||= Im using Retrofit + Gson so I used the excludeFIeldsWithouAnnotation() option and it worked.\n\n```\nRetrofit retrofit =\n        new Retrofit.Builder()\n                .baseUrl(Api.ENDPOINT)\n                .addConverterFactory(\n                        GsonConverterFactory.create(new GsonBuilder()\n                                .excludeFieldsWithoutExposeAnnotation()\n                                .create()))\n                .client(new OkHttpClient())\n                .build();\n```\n =||= @jirivrany Thanks `excludeFieldsWithoutExposeAnnotation()` worked for me.\n =||= I'm having this issue on Android M as well. Any idea what `Can't make field constructor accessible` refers to? I think setting _that_ to `transient` would be a better solution than using the `@Expose` property on every single member.\n =||= You\u2019re using `Gson` to encode an instance of `java.lang.reflect.Field`. Don\u2019t do that.\n =||= @swankjesse That's an log error I'm getting (along with everyone else using `Gson` in this thread) while using the default `Gson` instance  on Android 6.0.\n\nAnyone using ActiveAndroid having problems using the `.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)` workaround? Any data that is persisted using the default `GsonBuilder()` and then models deserialized with the new exclude rule causes some errors querying / storing models deserialized against this new rule.\n =||= @AeroEchelon I was trying to use ActiveAndroid and Gson and my workaround is fine for parsing the data with gson, but when I try to save fields that have relationships it doesnt work.\n =||= I use Gson's ExclusionStrategy to skip `java.lang.reflect.Field` and `java.lang.reflect.Method`, my simple demo.\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    String json = \"{\\\"name\\\": \\\"Ricky\\\", \\\"age\\\": 25}\";\n\n    ExclusionStrategy exclusionStrategy = new ExclusionStrategy() {\n\n        @Override\n        public boolean shouldSkipField(FieldAttributes fieldAttributes) {\n            return false;\n        }\n\n        @Override\n        public boolean shouldSkipClass(Class<?> clazz) {\n            return clazz == Field.class || clazz == Method.class;\n        }\n    };\n\n    Gson gson = new GsonBuilder()\n            .addSerializationExclusionStrategy(exclusionStrategy)\n            .addDeserializationExclusionStrategy(exclusionStrategy)\n            .create();\n\n    // Student is a simple class extends com.activeandroid.Model\n    Student student = gson.fromJson(json, Student.class);\n    student.save();\n\n    List<Student> students = new Select().from(Student.class).execute();\n    if (students != null && students.size() > 0) {\n        Student stu = students.get(0);\n        Log.d(\"zlx\", stu.name + \"'s age: \" + stu.age);\n    }\n}\n```\n =||= I  had the same problem when using Retrofit + Gson + ActiveAndroid, but when i insert this line excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\" in my GsonBuilder() it worked, but I do not understand what happened :(\n =||= :+1:  to `excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)`\n =||= @jirivrany  `excludeFieldsWithoutExposeAnnotation()`work for me\n =||= i tried this like   \n\nGson gson = new GsonBuilder().excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n                .excludeFieldsWithoutExposeAnnotation()\n                .create();\n\nretrofit = new Retrofit.Builder()\n               .baseUrl(BASE_URL)\n               .addConverterFactory(GsonConverterFactory.create(gson))\n               .client(httpClient)\n               .build();\n\nbut still getting same error. i am using retrofit + GSON+ Active Android.\nwhat should i do for this...\n =||= I'm using OkHttp + Gson + ActiveAndroid\n\n```\nGsonBuilder builder = new GsonBuilder();\nbuilder.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC);\nGson gson = builder.create();\n```\n\nwork for me\n =||= This continues to look like the serialization of `java.lang.reflect.Field` or `java.lang.reflect.Method`. No action to take.\n =||= I'm using Retrofit+ Gson + ActiveAndroid\n\nGsonBuilder builder = new GsonBuilder();\nbuilder.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC);\nGson gson = builder.create();\n\nworked for me\n =||= Mmm. Did you using extension of Kotlin language?\r\nI have same problem when using kotlin extension, details below:\r\n\r\nI've writen function exension for base model:\r\n\r\n`ModelExtension.kt`\r\n\r\n```kotlin\r\nfun Model.toJson(): String {\r\n   return try {\r\n      Gson().toJson(this@toJson, Model::class.java)\r\n   } catch(exception: Exception) {\r\n      \"{}\"\r\n   }\r\n}\r\n```\r\n\r\nI move it into `Model` class and it solve my problem... =||= > I use Gson's ExclusionStrategy to skip `java.lang.reflect.Field` and `java.lang.reflect.Method`, my simple demo.\r\n> \r\n> ```\r\n> @Override\r\n> protected void onCreate(Bundle savedInstanceState) {\r\n>     super.onCreate(savedInstanceState);\r\n> \r\n>     String json = \"{\\\"name\\\": \\\"Ricky\\\", \\\"age\\\": 25}\";\r\n> \r\n>     ExclusionStrategy exclusionStrategy = new ExclusionStrategy() {\r\n> \r\n>         @Override\r\n>         public boolean shouldSkipField(FieldAttributes fieldAttributes) {\r\n>             return false;\r\n>         }\r\n> \r\n>         @Override\r\n>         public boolean shouldSkipClass(Class<?> clazz) {\r\n>             return clazz == Field.class || clazz == Method.class;\r\n>         }\r\n>     };\r\n> \r\n>     Gson gson = new GsonBuilder()\r\n>             .addSerializationExclusionStrategy(exclusionStrategy)\r\n>             .addDeserializationExclusionStrategy(exclusionStrategy)\r\n>             .create();\r\n> \r\n>     // Student is a simple class extends com.activeandroid.Model\r\n>     Student student = gson.fromJson(json, Student.class);\r\n>     student.save();\r\n> \r\n>     List<Student> students = new Select().from(Student.class).execute();\r\n>     if (students != null && students.size() > 0) {\r\n>         Student stu = students.get(0);\r\n>         Log.d(\"zlx\", stu.name + \"'s age: \" + stu.age);\r\n>     }\r\n> }\r\n> ```\r\n\r\nThis worked for me, thanks @zhenglingxiao  =||= ", 0], ["649", "Added support for duplicate keys in Map while deserializing. The last\u2026", "Inderjeet Singh", "inder123", "08/31/21, 05:14:15 PM", "\u2026 value overrides any previous values.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it\n\nOn Sat, May 30, 2015 at 4:23 PM, googlebot notifications@github.com wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project, in which case you'll need to\n> sign a Contributor License Agreement (CLA).\n> \n> [image: :memo:] _Please visit https://cla.developers.google.com/\n> https://cla.developers.google.com/ to sign._\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> \n> ## verify. Thanks.\n> - If you've already signed a CLA, it's possible we don't have your\n>   GitHub username or you're using a different email address. Check your\n>   existing CLA data https://cla.developers.google.com/clas and verify\n>   that your email is set on your git commits\n>   https://help.github.com/articles/setting-your-email-in-git/.\n> - If you signed the CLA as a corporation, please let us know the\n>   company's name.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/649#issuecomment-107098777.\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= I think this is a bad idea. It should reject invalid JSON.\n =||= Jesse: Can you point me to the spec that says that it is invalid JSON?\nAlso, we do support it for objects. Why treat it differently for Maps?\n =||= @swankjesse I think Gson should be lenient in accepting JSON. Also, I can't seem to find spec that says that duplicate keys are not allowed.\n =||= From the [JSON RFC](https://tools.ietf.org/html/rfc7159):\n\n> An object whose names are all unique is interoperable in the sense\n> that all software implementations receiving that object will agree on\n> the name-value mappings.  When the names within an object are not\n> unique, the behavior of software that receives such an object is\n> unpredictable.  Many implementations report the last name/value pair\n> only.  Other implementations report an error or fail to parse the\n> object, and some implementations report all of the name/value pairs,\n> including duplicates.\n\nDuplicate keys is a potential security hole, and I'm against them. \n =||= @swankjesse The spec says \"The names within an object SHOULD be unique.\"  It is a SHOULD not a MUST. In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.\n\nCan you elaborate on the security hole specific to this case? Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.\n\nOverall, for Gson, we are generally lenient while receiving input. In fact, we already do that for duplicate keys in JsonObject. Applying a higher level of strictness to Map sounds a little arbitrary.\n =||= The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa. For example, you might write code like this:\n\n```\n  public boolean userHasLimitedPermissions(String json) {\n    JsonReader r = new JsonReader(...);\n    r.beginObject();\n    while (r.hasNext()) {\n      String key = r.nextKey();\n      String value = r.nextString();\n      if (key.equals(\"userid\")) return !value.equals(\"root\");\n    }\n    r.endObject();\n  }\n```\n\nBugs like this happen all the time. Most recently the Android code that checks signatures on `.apk` files failed on this.\n\nIt's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.\n\nHere's a better question: who wants this? Nobody sane should be using JSON that has duplicated keys.\n =||= What is status of this commit? Will Gson have ability to control duplicated key behavior?\n =||= @swankjesse Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: https://github.com/rabbitmq/rabbitmq-management/issues/278 This causes our deserialisation with GSON to fail. It has since been fixed, but we need to support all versions in our library.\n\nIn the real world, you can't always control what data you get, but might still need to be able to handle it somehow.\n\nIf GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with. So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.\n =||= @svetob you.can install your own TypeAdapter to workaround this I'd you like. It\u2019s a few lines of code to write the adapter and install it.\n =||= @svetob this is a terrible idea. If all JSON parsers behaved this way we would discover https://github.com/rabbitmq/rabbitmq-management/issues/278 much later. =||= If we were going to do this it would certainly be via a configurable option, as in #1884. I think we can close this old PR in favour of that one. =||= ", 0], ["651", "How to decode JsonObject in JsonObject?", null, "booker0108", "06/10/15, 03:18:50 PM", "Hi, all.\n\nI am a newbie to GSON and I would like to ask how can I decode below object into my custom class object.\n\n{\n        \"uid\": \"2\",\n        \"title\": \"TITLE_HERE\",\n        \"description\": \"DES_HERE\",\n        \"type\": \"1\",\n        \"message_type\": \"7\",\n        \"option_1\": [\n          {\n            \"option_1\": \"Q1\",\n            \"option_1_1\": \"Q11\",\n            \"option_1_2\": \"Q12\",\n            \"option_1_3\": \"Q13\"\n          }\n        ],\n        \"option_2\": [\n          {\n            \"option_2\": \"Q2\",\n            \"option_2_1\": \"Q21\",\n            \"option_2_2\": \"Q22\",\n            \"option_2_3\": \"Q23\"\n          }\n        ],\n        \"option_3\": [\n          {\n            \"option_3\": \"Q3\",\n            \"option_3_1\": \"Q31\",\n            \"option_3_2\": \"Q32\",\n            \"option_3_3\": \"Q33\"\n          }\n        ],\n        \"option_other\": \"\",\n        \"status\": \"3\",\n        \"read\": \"0\",\n        \"att_get\": \"0\",\n        \"attachment\": \"0\"\n      }\n\nHow can I decode those \"options\"?", "Please post questions like this to: https://groups.google.com/forum/#!forum/google-gson\n =||= ", 0], ["652", "Fix issues if runing in an environment with a Turkish locale", "Sebastian Chlan", "schlan", "08/08/15, 04:10:48 PM", "### Description\n\nWhen using `LOWER_CASE_WITH_DASHES` or `LOWER_CASE_WITH_UNDERSCORES` as FieldNamingPolicy it could happen that certain fields won't get serialized/deserialized. \nI've seen that behavior on devices with a turkish (`tr-TR`) locale. `toLowerCase()` uses the device's locale and converts an `I` into an `\u0131`. ([JavaDoc](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase%28%29))\n### Example\n\nA field with the name: \n\n```\n...\nint lowerId = 8;\n....\n```\n\nwill turn into:\n\n```\n{ ... 'lower-\u0131d':8 ... }\n```\n### Recreation steps\n\nCheck out the first commit (299ee89) and run the test with the following JVM flags:  `-Duser.language=tr -Duser.region=TR`\n### References\n\nhttps://code.google.com/p/google-gson/issues/detail?id=541\nhttp://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= :+1: \nThanks for the fix.\n =||= ", ["652", "Fix issues if runing in an environment with a Turkish locale", "Sebastian Chlan", "schlan", "08/08/15, 04:10:48 PM", "### Description\n\nWhen using `LOWER_CASE_WITH_DASHES` or `LOWER_CASE_WITH_UNDERSCORES` as FieldNamingPolicy it could happen that certain fields won't get serialized/deserialized. \nI've seen that behavior on devices with a turkish (`tr-TR`) locale. `toLowerCase()` uses the device's locale and converts an `I` into an `\u0131`. ([JavaDoc](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase%28%29))\n### Example\n\nA field with the name: \n\n```\n...\nint lowerId = 8;\n....\n```\n\nwill turn into:\n\n```\n{ ... 'lower-\u0131d':8 ... }\n```\n### Recreation steps\n\nCheck out the first commit (299ee89) and run the test with the following JVM flags:  `-Duser.language=tr -Duser.region=TR`\n### References\n\nhttps://code.google.com/p/google-gson/issues/detail?id=541\nhttp://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()", "NaN"], ["Sebastian Chlan", "FieldNamingPolicy: Use Locale.ENGLISH to be locale insensitive", "06/09/15, 02:17:08 PM", "Sebastian Chlan", "6e57df7e9648f4a48b500ac9a181a058829bcee1", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java"], "@@ -17,6 +17,7 @@\n package com.google.gson;\n \n import java.lang.reflect.Field;\n+import java.util.Locale;\n \n /**\n  * An enumeration that defines a few standard naming conventions for JSON field names.\n@@ -88,7 +89,7 @@ public String translateName(Field f) {\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"_\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"_\").toLowerCase(Locale.ENGLISH);\n     }\n   },\n \n@@ -111,7 +112,7 @@ public String translateName(Field f) {\n    */\n   LOWER_CASE_WITH_DASHES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"-\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n   };\n , ", 3, 2, "\"modified, \"", 5], 1], ["654", "Add the plain, basic visitor pattern to JsonElement and children", "Olivier Gr\u00e9goire", "ogregoire", "06/24/15, 03:46:15 AM", "I'm trying to develop several utilities to extend gson, mostly based on `JsonElement`, meaning that I don't parse directly to an object.\n\nI'm referring to the following kind of extensions: an xpath-like mechanism, a css-like selector, batch modifications (avoiding the cost of reflection), etc.\n\nTechnically I can do without, as I've made a 20+ lines external implementation using only the `JsonElement` and its four public children but still, I feel like it's something that misses as a hierarchical data structure.", "When we first wrote Gson, we did add a visitor pattern for it. It was quite unsatisfying though, so we removed it from the final release. Now, I am not sure what is a good design for it: is it a visitor, or an xpath like mechanism. If you have a proposal, please share. Thanks.\n =||= Well, the visitor pattern is, in my view, the very base for everything that uses a tree. A selection mechanism like xpath is interesting and might be more user friendly (that's why I'm implementing it) but to do so I need to be able to traverse the element tree.\n\nHow I would do it?\n\nThe base is rather clear: an interface `JsonTraverser`:\n\n``` Java\npublic interface JsonTraverser {\n  default public void visit(JsonObject jsonObject) { }\n  default public void visit(JsonArray jsonArray) { }\n  default public void visit(JsonPrimitive jsonPrimitive) { }\n  default public void visit(JsonNull jsonNull) { }\n}\n```\n\nThen in `JsonElement`, there'd exist the \"accept\" method: `visiting(JsonTraverser traverser)`.\n\n``` Java\npublic abstract class JsonElement {\n  ...\n  void visiting(JsonTraverser traverser) { throw new RuntimeException(\"Not implemented\"); }\n  ...\n}\n```\n\nThen each implementation extends the `visiting` method:\n\n`JsonObject`\n\n``` Java\n  @Override void visiting(JsonTraverser traverser) {\n    traverser.visit(this);\n    this.entrySet().forEach(e -> e.getValue().visiting(traverser));\n  }\n```\n\n`JsonArray`\n\n``` Java\n  @Override void visiting(JsonTraverser traverser) {\n    traverser.visit(this);\n    this.forEach(e -> e.visiting(traverser));\n  }\n```\n\n`JsonPrimitive`\n\n``` Java\n  @Override void visiting(JsonTraverser traverser) { traverser.visit(this); }\n```\n\n`JsonNull`\n\n``` Java\n  @Override void visiting(JsonTraverser traverser) { traverser.visit(this); }\n```\n\nNow the question of the entry point. That's a bit fuzzy. As you've seen the methods are package-private, that's to avoid showing too much. So I'd add the following:\n\n``` Java\npublic final class JsonTraversers {\n  private JsonTraversers () { }\n  public static void traverse(JsonElement element, JsonTraverser traverser) {\n    element.visiting(traverser);\n  }\n}\n```\n\nWith this approach and in terms of API, none of the 5 classes are impacted: only an interface and the entry point are added.\n\nThe only actual impact is if somehow there exist other `JsonElement` implementations (since the default constructor is public for some reason). In that case, making all the methods public as well isn't an issue (though, I'd reduce the visibility of the `JsonElement` constructor if it were up to me).\n\nWith such an implementation, it's become very easy to implement the functionalities I'm developing like the xpath selector, the batch modifications, etc.\n =||= Thanks for the detailed explanation. We had something similar to this. It was an unsatisfying approach. Adds too much API code for a minor use-case. We decided to let the third-parties write such a visitor themselves.\n =||= Thanks for considering, even though I'm not really sure I understand the reasons of refusal given the facts that none of the existing API is touched and that,  you said it yourself, each person has to write it him/herself. The pattern itself is quite discreet and isn't really a minor use-case given that `JsonElement` is exposed.\n\nAnyways, as I mentioned, I've already an implementation that uses the existing API so it's no big deal for me.\n =||= It adds some conceptual weight to the API. The names of class and methods are a little unsatisfying.\nAlso, when you talk about traversal, why support only Depth-first traversal? Why not breadth-first as well?\nActually, in your implementation, JsonTraverser needs only one method instead of four.\nvisit(JsonElement element);\nWhy did you consider one for each sub-class of JsonElement.\n =||= _Unsatisfying class names_: I'm not a native English speaker. If you have better names, I'm entirely open.\n\n_Depth-first vs. Breadth-first_: This was written quickly without any other consideration in order to answer your question.\n\n_One method per subclass_: That's the goal of the visitor pattern. A few known implementations in a hierarchical standard are perfect for it. You implement only the methods for what you want to visit. All the Primitives ? Ok, implmeent only one method. All the containers? Right, implement only the JsonArray and JsonObject methods. Future implementations come in? Well, there's only one default method to add instead of all implementation to adapt to make sure we're still compatible with everything without breaking the existing visitors.\n\nBut it seems you've made your mind a long time ago. So unless you're really thinking about doing it, I suggest to close this issue.\n =||= You are partly right: I made up my mind a long time ago, and was hoping that someone will come up with a much better rendition of the visitor pattern that I did. So far, it is elusive, though yours is somewhat better than mine.\n =||= ", 0], ["656", "Update ReflectiveTypeAdapterFactory.java", "DsWork", "skeychen", "06/17/15, 06:03:21 PM", "fit declares multiple JSON fields named", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||=  I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= I don't think we want this behavior change.\n =||= ", 0], ["657", "There is no I/O writing to a StringWriter.", "Jake Wharton", "JakeWharton", "06/18/15, 02:15:34 AM", "NaN", "Source incompatible!\n =||= ", ["657", "There is no I/O writing to a StringWriter.", "Jake Wharton", "JakeWharton", "06/18/15, 02:15:34 AM", "NaN", "NaN"], ["Jake Wharton", "There is no I/O writing to a StringWriter.", "06/18/15, 02:00:03 AM", "Jake Wharton", "032847976c0cba7c131e95aa6608882987f1eca8", ["gson/src/main/java/com/google/gson/TypeAdapter.java"], "@@ -211,9 +211,13 @@ public final void toJson(Writer out, T value) throws IOException {\n    * @param value the Java object to convert. May be null.\n    * @since 2.2\n    */\n-  public final String toJson(T value) throws IOException {\n+  public final String toJson(T value) {\n     StringWriter stringWriter = new StringWriter();\n-    toJson(stringWriter, value);\n+    try {\n+      toJson(stringWriter, value);\n+    } catch (IOException e) {\n+      throw new AssertionError(e); // No I/O writing to a StringWriter.\n+    }\n     return stringWriter.toString();\n   }\n , ", 6, 2, "\"modified, \"", 8], 1], ["658", "Add Travis CI build.", "Jake Wharton", "JakeWharton", "06/18/15, 02:48:27 AM", "NaN", "NaN", ["658", "Add Travis CI build.", "Jake Wharton", "JakeWharton", "06/18/15, 02:48:27 AM", "NaN", "NaN"], ["Jake Wharton", "Add Travis CI build.", "06/18/15, 02:10:06 AM", "Jake Wharton", "cd38056e1f18c0e06a5a58ee01eed39bb7c125e1", [".travis.yml"], "@@ -0,0 +1,21 @@\n+language: java\n+\n+jdk:\n+  - oraclejdk7\n+  - oraclejdk8\n+\n+install: mvn -f gson install -DskipTests=true\n+script: mvn -f gson test\n+\n+branches:\n+  except:\n+    - gh-pages\n+\n+notifications:\n+  email: false\n+\n+sudo: false\n+\n+cache:\n+  directories:\n+    - $HOME/.m2, ", 21, 0, "\"added, \"", 21], 1], ["659", "Add gitignore for Maven, Eclipse, IDEA, and OSX files.", "Jake Wharton", "JakeWharton", "06/18/15, 02:55:15 PM", "NaN", ":+1: \n =||= ", ["659", "Add gitignore for Maven, Eclipse, IDEA, and OSX files.", "Jake Wharton", "JakeWharton", "06/18/15, 02:55:15 PM", "NaN", "NaN"], ["Jake Wharton", "Add gitignore for Maven, Eclipse, IDEA, and OSX files.", "06/18/15, 02:32:15 PM", "Jake Wharton", "e914de082ba3305879d71864e1b69fe9c2f9c61d", [".gitignore"], "@@ -0,0 +1,16 @@\n+.classpath\n+.project\n+.settings\n+eclipsebin\n+\n+target\n+pom.xml.*\n+release.properties\n+\n+.idea\n+*.iml\n+*.ipr\n+*.iws\n+classes\n+\n+.DS_Store, ", 16, 0, "\"added, \"", 16], 1], ["660", "added a strategy to manage unknown fields during deserialization", null, "mcerina", "06/20/15, 07:30:54 AM", "See issue https://github.com/google/gson/issues/188\nWhile I understand the design choice of ignoring unknown fields during deserialization by default, I definitely think that there are use cases in which throwing an exception, or at least being able to log something is preferred.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Appreciate you taking the time to write this. However, I think the usecase for this is too infrequent to warrant inclusion in standard Gson. Also, the approach is too narrow (for just unknown properties). We have had many requests to provide ability to intercept and validate a Gson generated instance. We would like to see a simple elegant solution to the broader issue.\n =||= It is quite frequent. And I would reject solutions as not good enough only when there are other better alternatives presented. But it doesn't look like @inder123 is going to come up with any idea regarding this at all.\n =||= I would agree that this is a common problem. For instance, a client sends a JSON object with a field name misspelled.  If it is valid for that field to be omitted, you would never know that there was an issue.  It would simply get silently ignored.\n =||= I would like to have a choice to decide whether GSON should ignore unknown fields or should reject such requests. Sadly, I'm switching now to Jackson to get that.\n =||= @inder123 I see a comment from you from over a year ago where you mention many requests like this one to support validation ... can you point me to a discussion where you are working on a more general and elegant solution? If not, please reconsider this PR as it is a simple and elegant approach to the specific problem of receiving unexpected fields in the JSON.\n =||= I agree that the user should have the choice.\n =||= \"I think the usecase for this is too infrequent to warrant inclusion in standard Gson\"\n\nWe would like this use case - and from the looks of the comments so do many others.  Jackson has this feature and it seems fairly frequently used (do a search on tutorials and examples).\n\n\"Also, the approach is too narrow (for just unknown properties). We have had many requests to provide ability to intercept and validate a Gson generated instance. We would like to see a simple elegant solution to the broader issue.\"\n\nThat maybe the case, but we came here looking for this exact feature, and only this feature.  We want a way to be be able to detect/intercept additional fields in the JSON so that we can report/handle fields that we were not expecting.  We spent quite a while trying to shoe-horn this feature in, and there are no hooks available to us to provide this functionality without duplicating all of the core type adapter factory and its supporting classes - that seems a tad wasteful.\n\nWe took a quick review of the PR code, and it seems very simple, logical and well thought out.  Keep the default behavior as is, and existing users wont have to change any code.  Provide the builder option and everyone is happy/happier. :-)\n\n+1 for taking this PR.\n =||= Throwing Exception on encountering an unnknown fields seems weird. JSON is an extensible and flexible format: a client shouldn't be broken by adding a new property in JSON.\r\n\r\nWhat about missing fields? Wouldn't you want a similar action?\r\n\r\nA better way is to use https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java =||= @inder123 As @mcerina mentions in the first comment above, the UnknownFieldHandlingStrategy is extensible and could be used to just log unknown fields if throwing an exception doesn't suit your needs.\r\n\r\nI looked at PostConstructAdapterFactoryTest and see that your test throws an exception when the sandwich is too cheesy ... and I can see how that could also be used to take some action if a \"required\" field was missing (i.e. still null during post construct validation) ... but I can't figure out how to use the PostConstructAdapterFactory to catch when an unknown field was present in the original JSON. Can you provide a code example of how the PostConstructAdapterFactory could be used to solve the OP's issue about handling unknown fields? =||= Can you deserialize the JSON object to get your Java object, then serialize your Java object back to JSON and see if you get the same result (compare the original JSON object to the converted Java JSON)! if not...extra fields! Haven't tried, yet, but this is just a thought. =||= I am looking for this feature right now. Is the reason for its absence just adherence to dogma?  =||= Still no solution for this problem.  =||= ", 0], ["661", "Small error of documentation", "Ricardo Faria", "RicardoRFaria", "06/27/15, 02:50:17 PM", "Fixed name of class in JsonDeserializer.html as requested by the issue #626 ", "If you're going to fix the Javadocs, you should fix the original source code, not the generated output.\n =||= Sorry, my bad. I fixed in the class, it's a idiot fix, but only to close the issue.\n =||= Also, please http://rebaseandsqua.sh\n =||= ", 0], ["663", "fixed the error of printing new line for system that dont use '\\n'", "Guy Langford-Lee", "gazzdingo", "08/08/15, 04:09:10 PM", "I have changed it so that it will work on more OS when you are wanting to print a new line ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I don't think this makes sense. JSON doesn't care what OS it's being generated on.\n =||= But on windows the pretty mode does not do pretty mode\n\nOn Thu, 9 Jul 2015 3:06 AM Jesse Wilson notifications@github.com wrote:\n\n>  I don't think this makes sense. JSON doesn't care what OS it's being\n> generated on.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/663#issuecomment-119616780.\n =||= Because it will not do a new line\n\nOn Thu, 9 Jul 2015 8:17 AM Guy Langford-lee guy@langford-lee.com wrote:\n\n> But on windows the pretty mode does not do pretty mode\n> \n> On Thu, 9 Jul 2015 3:06 AM Jesse Wilson notifications@github.com wrote:\n> \n> >  I don't think this makes sense. JSON doesn't care what OS it's being\n> > generated on.\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/gson/pull/663#issuecomment-119616780.\n =||= I think this is a bug in Windows. Please consider sending them a Pull Request!\n =||= ", 0], ["664", "Add a JSR-305 @ThreadSafe annotation to the Gson class", "Stefan Ferstl", "ferstl", "07/13/15, 05:47:37 PM", "This PR solves Issue #613 that I submitted several months ago on Google Code.\n\nSummary:\n- Add an optional dependency to com.google.code.findbugs:jsr305.\n  The optional scope is used in order to avoid introducing a new\n  transitive dependency to the jsr305 library. This is fine because the \n  @ThreadSafe annotation has only a documentary purpose and it is not\n  retained at runtime.\n- Annotate the Gson class as @ThreadSafe", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed the CLA\n\nOn Mon, Jul 13, 2015 at 6:39 PM, googlebot notifications@github.com wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project, in which case you'll need to\n> sign a Contributor License Agreement (CLA).\n> \n> [image: :memo:] _Please visit https://cla.developers.google.com/\n> https://cla.developers.google.com/ to sign._\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> \n> ## verify. Thanks.\n> - If you've already signed a CLA, it's possible we don't have your\n>   GitHub username or you're using a different email address. Check your\n>   existing CLA data https://cla.developers.google.com/clas and verify\n>   that your email is set on your git commits\n>   https://help.github.com/articles/setting-your-email-in-git/.\n> - If you signed the CLA as a corporation, please let us know the\n>   company's name.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/664#issuecomment-120989107.\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= @swankjesse  I dont like this pull request. It adds an unncessary dependency to Gson. I am not sure the benefit is all that much. Can we revert this please?\n =||= @inder123 @swankjesse Since the dependency is declared as `optional`, it will neither be resolved nor downloaded when Gson is used as a dependency.\nThat was exactly my intention.\n =||= I don't feel strongly either way.\n =||= (Which is to say, if you want to rollback, I'll merge!)\n =||= If you revert this PR, please document at least in the Javadoc that the Gson class is thread-safe. Otherwise one has to assume that it is not (which makes things complicated and slow if you want to use Gson in a multi-threaded environment).\n =||= @ferstl  @swankjesse  I am not sure entirely how optional dependencies work. I thought they work fine when you use reflection to lookup code.\n\nSince Gson class has the ThreadSafe annotation added, the dependency will get forced, isn't it? Otherwise, we will have compilation error. Correct?\n =||= @inder123 @swankjesse [Here](https://maven.apache.org/pom.html#Dependencies) is a good description about optional dependencies.\n\nYou will have the new dependency when you are compiling Gson. But when you use Gson as a dependency, it will be ignored entirely. This also won't cause any errors at runtime because the `ThreadSafe` annotation's retention policy is `CLASS`.\n\nBtw, Guava does [exactly the same](https://github.com/google/guava/blob/master/guava/pom.xml#L25).\n =||= @ferstl  Thanks for the explanation.\nRetention policy class definition from Javadoc: Annotations are to be recorded in the class file by the compiler but need not be retained by the VM at run time.\n\nThis to me indicates that any library using Gson will probably need ThreadSafe while compiling, but it is possible that the compiler ignores annotations with missing classes. I will try it out and see what this leads to. \n =||= As we are readying for a new release, I am having second thoughts on this one.\nSo far Gson has avoided all external dependencies. So I would like to continue doing the same. I will update the Gson documentation to indicate Threadsafe. I will revert this change.\n =||= ", ["664", "Add a JSR-305 @ThreadSafe annotation to the Gson class", "Stefan Ferstl", "ferstl", "07/13/15, 05:47:37 PM", "This PR solves Issue #613 that I submitted several months ago on Google Code.\n\nSummary:\n- Add an optional dependency to com.google.code.findbugs:jsr305.\n  The optional scope is used in order to avoid introducing a new\n  transitive dependency to the jsr305 library. This is fine because the \n  @ThreadSafe annotation has only a documentary purpose and it is not\n  retained at runtime.\n- Annotate the Gson class as @ThreadSafe", "NaN"], ["Stefan Ferstl", "Add a JSR-305 @ThreadSafe annotation to the Gson class\n\n- Add an optional dependency to com.google.code.findbugs:jsr305.\n  The optional scope is used in order to avoid introducing a new\n  transitive dependency to the jsr305 library. This is fine because the \n  @ThreadSafe annotation has only a documentary purpose and it is not\n  retained at runtime.\n- Annotate the Gson class as @ThreadSafe\n\nFixes Issue #613", "07/13/15, 04:34:38 PM", "Stefan Ferstl", "82edd57205fe48015f81b2986f27856cb9f7fb29", ["gson/pom.xml", "gson/src/main/java/com/google/gson/Gson.java"], "@@ -49,6 +49,12 @@\n     <url>http://www.google.com</url>\n   </organization>\n   <dependencies>\n+    <dependency>\n+      <groupId>com.google.code.findbugs</groupId>\n+      <artifactId>jsr305</artifactId>\n+      <version>3.0.0</version>\n+      <optional>true</optional>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>, @@ -31,6 +31,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.annotation.concurrent.ThreadSafe;\n+\n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n import com.google.gson.internal.Primitives;\n@@ -96,6 +98,7 @@\n  * @author Joel Leitch\n  * @author Jesse Wilson\n  */\n+@ThreadSafe\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n , ", 9, 0, "\"modified, modified, \"", 9], 1], ["665", "Create a generalized serializer/deserializer that can interpret AutoValue types and do the right thing.", "Christian Edward Gruber", "cgruber", "07/14/15, 02:34:00 AM", "Autovalue is massively convenient, and GSON is very convenient.  Having some ways to ease integration between the two might prove quite powerful.\n\nSerialization is largely taken care of, since an AutoValue instance has its generated private fields which can be read and written out.  AutoValue ensures fields are in property-declaration-order in the generated subclass, so as long as Java keeps field order in reflection consistent, it's fine. \n\nThe more pertinent issue is creation/deserialization\n\nI see two approaches: \n\nWhat I have in mind right now is an automatic deserializer which would reflectively figure out the constructor based on field order (which is declaration order for AutoValue, and aligns with the constructor.  A variant could detect whether there was a builder and use that.\n\nAn alternative would be an autovalue plugin which generated a gson serializer/deserializer as it was generating the autovalue implementation. That might be better in several respects, but requires that autovalue support pluggable extensions.  Not sure if it is there yet. (@eamonnmcmanus ?)  ", "@rharter is currently working on AutoValue extensibility in https://github.com/google/auto/pull/237.\n =||= It's almost trivial to build a Gson TypeAdapterFactory that supports all AutoValue types. In fact, here it is:\n\n```\n    class AutoValueTypeAdapterFactory implements TypeAdapterFactory {\n      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n        TypeToken<?> autoValueClass = autoValueClass(type);\n        if (autoValueClass != null) {\n          return (TypeAdapter<T>) gson.getDelegateAdapter(this, autoValueClass);\n        }\n        return null; // Not an AutoValue type.\n      }\n\n      /** Returns the generated implementation type for {@code type} if it has one. */\n      private TypeToken<?> autoValueClass(TypeToken<?> type) {\n        // TODO: does AutoValue have an API for this or do I need to do it manually?\n      }\n    }\n```\n =||= Im sorry... How exactly does this adapter as written create the autovalue?\n\nOn Mon, Jul 13, 2015, 19:34 Jesse Wilson notifications@github.com wrote:\n\n> Closed #665 https://github.com/google/gson/issues/665.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/665#event-354969277.\n =||= Gson creates it reflectively. Here's a full-working copy from a year ago: https://gist.github.com/JakeWharton/0d67d01badcee0ae7bc9\n =||= If you don't want reflection, write your own annotation processor to code gen type adapters and/or a type adapter factory.\n =||= Sorry... I didn't actually realize that we were generating a no-args constructor in auto-value generated classes.  Otherwise, the above would have made total sense when I looked at it.   I'm slightly surprised that we do, actually. \n =||= Do you even need `@AutoGson` @JakeWharton?  Can't you just use `@JsonAdapter(YourAutoValueTypeAdapterFactory.class)` ?\n =||= And reflection is fine for my purposes. \n =||= Yeah that works too. I've never used the linked gist, just wrote it to stop people complaining that AutoValue / AutoParcel needed explicit Gson support.\n =||= @cgruber there's no no-args constructor. Gson is magic.\n =||= (Here's the [latest incarnation](https://github.com/square/moshi/blob/master/moshi/src/main/java/com/squareup/moshi/ClassFactory.java) of such magic, if you're curious)\n =||= So it'll basically make an instance using Unsafe.allocateInstance and then bang the values into the final fields using Field.setAccessible? I don't think that guarantees safe publication of the field values to other threads, does it? Also, since it doesn't execute the constructor logic, it doesn't verify that every field was actually present, which means that non-`@Nullable` fields could be null, violating their contract. And of course it won't work in environments where either Unsafe or Field.setAccessible are unavailable (App Engine, for one). So, it's way better than nothing, but not quite as good as what we might have with explicit support.\n\nI think one fairly simple way to make this work cleanly would be an adapter that constructs the builder for the AutoValue type and sets each of its properties. That can be done without any Unsafe nastiness and will correctly invoke validation logic, including user-written validation. It's a bit more work for the user because they have to write the abstract builder, but on the whole I think it would be better.\n =||= The threading is safe because the allocated instance is thread-confined. If you can show me a counterexample, I'll be impressed!\n =||= If I instantiate an AutoValue object and put a reference to it in a volatile field or an AtomicReference, then another thread can see it. That seems like a reasonable thing for a worker thread to do to communicate its results, for example. Then I am asking if there is any guarantee that the AutoValue's field values will be seen by the other thread.\n\nTo be clear, though, this is not what bothers me the most. The fact that the constructor isn't executed and therefore there can be missing properties is more concerning. Could an adapter verify that every non-`@Nullable` property is present?\n =||= ", 0], ["666", "Provide an annotation which can be used to register Serializer/Deserializers, instead of just adapters.", "Christian Edward Gruber", "cgruber", "07/14/15, 02:21:49 AM", "Allow @JsonAdapter to supply Serializer and Deserializers as well as TypeAdapters, or provide an alternative annotation, e.g. \n\n``` java\n@JsonSerializable(adapters = Foo.Deserializer.class, forHierarchy = true)\nclass Foo {\n    ...\n\n    static class Deserializer implements JsonDeserializer<Foo> {\n      @Override Foo deserialize(...) { ... }\n    }\n}\n```\n\nThis permits one to package a type, it's serializer, and all the configuration bits together and elides the need for `Gson.builder().registerTypeHierarchyAdapter(...)`, etc.\n\nRecommended that the `.registerTypehierarchyAdapter(...)` supercede any annotated configuration. ", "Oooh! I got the issue of the beast!\n =||= This exists.\n\n```\n @JsonAdapter(UserJsonAdapter.class)\n```\n =||= The beast!\n =||= How does this exist?  What I described doesn't exist - what the issue states is insufficient exists. \n\n`@JsonAdapter` lets you register a type adapter, not a serializer and/or deserializer.  Looking at TypeAdapter, I don't think I want one.  I don't get context in a TypeAdapter, which I need to deserialize bits of complex types.  I don't see how a JsonReader (what I do get) is sufficient to do nested complex types, without manually digging deep into the json message.   \n =||= It gives you a `TypeAdapterFactory`, which offers phenomenal cosmic power. It lets you compose a type adapter by delegation. And if you don't love that API because it's pretty reflective, I've been working on Moshi's adapter methods which are even better.\nhttps://github.com/square/moshi#custom-type-adapters\n =||= You can also do custom types easily by asking the Gson instance for a type adapter of whatever type you want and handing it the given reader.\n =||= I think I hadn't yet understood the full power of TypeAdapterFactory, as I\"m pretty new to Json.  Just TypeAdapter.  I see now a bit better how to do this (and both you and Jake did a good chunk of what I was intending to do in the other thread). \n\nI'll look at Moshi, but for my purposes, reflective creation and assignment is fine. \n =||= ", 0], ["667", "JsonWriter#value supports opaque JSON values.", "Adam Tanner", "admtnnr", "07/20/15, 06:21:23 PM", "Add a polymorphic version of `value(String value)` that takes an additional boolean argument (`encode`) that can be used to write the string directly to the underlying writer without modification, while maintaining the state of the `JsonWriter` so that it can continue to be written to.\n\nThe intended use case for this is when building JSON that contains a pre-serialized JSON string as a value in an object or array.\n\nAlternative API ideas/open questions:\n-  Should a separate method be used instead of a polymorphic version of `value(String)`? Maybe something like `rawValue(String)`?", "Rename to `jsonValue()` ?\n =||= ...and I don't think there's much value to sharing code between strings and raw JSON strings. I'd rather you copy&paste to make this separate.\n =||= Renamed to `jsonValue`, decoupled from `value(String)`, and squashed into a single commit.\n\nLet me know if there's anything else. :smile:\n\nThanks!\n =||= Brilliant. \n =||= ", ["667", "JsonWriter#value supports opaque JSON values.", "Adam Tanner", "admtnnr", "07/20/15, 06:21:23 PM", "Add a polymorphic version of `value(String value)` that takes an additional boolean argument (`encode`) that can be used to write the string directly to the underlying writer without modification, while maintaining the state of the `JsonWriter` so that it can continue to be written to.\n\nThe intended use case for this is when building JSON that contains a pre-serialized JSON string as a value in an object or array.\n\nAlternative API ideas/open questions:\n-  Should a separate method be used instead of a polymorphic version of `value(String)`? Maybe something like `rawValue(String)`?", "NaN"], ["Adam Tanner", "JsonWriter#jsonValue writes raw JSON values.\n\nAdd a jsonValue(String value) method that takes a raw JSON string that\ncan be used to write the string directly to the underlying writer\nwithout modification.\n\nThe intended use case for this is when building JSON that contains a\npre-serialized JSON string as a value in an object or array.", "07/19/15, 07:46:26 PM", "Adam Tanner", "f7abd59a3b349d5c926507705f439afff54ed301", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -420,6 +420,23 @@ public JsonWriter value(String value) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * Writes {@code value} directly to the writer without quoting or\n+   * escaping.\n+   *\n+   * @param value the literal string value, or null to encode a null literal.\n+   * @return this writer.\n+   */\n+  public JsonWriter jsonValue(String value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue(false);\n+    out.append(value);\n+    return this;\n+  }\n+\n   /**\n    * Encodes {@code null}.\n    *, @@ -126,6 +126,18 @@ public void testNullStringValue() throws IOException {\n     assertEquals(\"{\\\"a\\\":null}\", stringWriter.toString());\n   }\n \n+  public void testJsonValue() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginObject();\n+    jsonWriter.name(\"a\");\n+    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\n+    jsonWriter.name(\"c\");\n+    jsonWriter.value(1);\n+    jsonWriter.endObject();\n+    assertEquals(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\", stringWriter.toString());\n+  }\n+\n   public void testNonFiniteDoubles() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);, ", 29, 0, "\"modified, modified, \"", 29], 1], ["668", "Maven release?", "Adam Tanner", "admtnnr", "10/04/15, 01:00:43 AM", "Just wondering if you have any upcoming plans to do a Maven release. I'm happy to help if I can.\n\nThanks!", "Any specific feature/bug that you are looking forward to?\n =||= Yeah, we're looking to use the `jsonValue` feature I just added in #667 for a Java client we're writing for [Martian Proxy](https://www.github.com/google/martian). I was going to wait, but it seemed like releases are few and far between so I figured I'd ask. :smile:\n\nThanks!\n =||= Bump. Just wondering what your thoughts are on this. We want to release and I need to know if I should rework the library to work without this feature or wait a bit longer.\n =||= I do want to cut a release. @swankjesse @JakeWharton @joel-leitch \nShall we do a review of the proposed changes so far?\n =||= Looks like history was rewritten but the tags weren't updated?\n\nhttps://github.com/google/gson/compare/gson-2.3.1...master\n =||= Ok. Do you know what to do to update the tags? If so, go ahead. Thanks.\n =||= I too would like a new release to use this same change.\n =||= Haven't gotten around to updating the tags. Here's the commit list though: https://github.com/google/gson/compare/eba6825a...master\n =||= Let's get this done before October 1st?\n =||= Yes! @inder123 ready to sign off?\nhttps://github.com/google/gson/blob/master/CHANGELOG.md\n =||= I am comfortable with a new release. However, do we want to do a quick\nreview of pending pull requests and filed issues?\n\nOn Sat, Sep 26, 2015 at 4:48 PM, Jesse Wilson notifications@github.com\nwrote:\n\n> Yes! @inder123 https://github.com/inder123 ready to sign off?\n> https://github.com/google/gson/blob/master/CHANGELOG.md\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/668#issuecomment-143505867.\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= I did a few. Will try to get to more soon.\n\nOn Sat, Sep 26, 2015 at 8:41 PM inder123 notifications@github.com wrote:\n\n> I am comfortable with a new release. However, do we want to do a quick\n> review of pending pull requests and filed issues?\n> \n> On Sat, Sep 26, 2015 at 4:48 PM, Jesse Wilson notifications@github.com\n> wrote:\n> \n> > Yes! @inder123 https://github.com/inder123 ready to sign off?\n> > https://github.com/google/gson/blob/master/CHANGELOG.md\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/gson/issues/668#issuecomment-143505867.\n> \n> ## \n> \n> http://www.singhinderjeet.com/\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/668#issuecomment-143507252.\n =||= Just a +1 for another release.  We want a stable release for https://github.com/j2objc-contrib/j2objc-common-libs-e2e-test/issues/35#issuecomment-143769534, and some of the unit tests at tag 2.3.1 fail (which you have fixed in the mean time).\n\ncc @brunobowden\n =||= It will be this week, in all likelihood.\n\nOn Mon, Sep 28, 2015 at 3:20 PM Advay Mengle notifications@github.com\nwrote:\n\n> Just a +1 for another release. We want a stable release for j2objc-contrib/j2objc-common-libs-e2e-test#35\n> (comment)\n> https://github.com/j2objc-contrib/j2objc-common-libs-e2e-test/issues/35#issuecomment-143769534,\n> and some of the unit tests at tag 2.3.1 fail (which you have fixed in the\n> mean time).\n> \n> cc @brunobowden https://github.com/brunobowden\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/668#issuecomment-143848955.\n =||= @JakeWharton @swankjesse  Shall I go ahead and cut a new release?\n =||= Sounds good to me!\n\nOn Sat, Oct 3, 2015, 8:07 PM inder123 notifications@github.com wrote:\n\n> @JakeWharton https://github.com/JakeWharton @swankjesse\n> https://github.com/swankjesse Shall I go ahead and cut a new release?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/668#issuecomment-145300798.\n =||= Yes please!\n =||= Just cut and pushed a new release to Maven Central. Also, published Javadocs on GitHub pages.\n =||= will this populate to jcenter as well?\nhttps://bintray.com/inder123/maven/com.google.code.gson%3Agson/view\n\nit is the default for android builds.\n =||= It's published to Maven Central which JCenter (which is not what you\nlinked) proxies.\n\nOn Sun, Oct 4, 2015 at 6:48 AM Advay Mengle notifications@github.com\nwrote:\n\n> will this populate to jcenter as well?\n> https://bintray.com/inder123/maven/com.google.code.gson%3Agson/view\n> \n> it is the default for android builds.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/668#issuecomment-145336380.\n =||= ", 0], ["669", "Replace localhost lookup with static IP to fix test.", "Adam Tanner", "admtnnr", "07/26/15, 09:13:32 PM", "Calling InetAddress.getLocalHost() will cause a lookup to occur that may\nfail with a java.net.UnknownHostException if the system the test is\nrunning on is not configured correctly.\n\nThis is often fixed by echoing \"127.0.0.1 $HOSTNAME\" to /etc/hosts, but\nin this case it seems easier to pick a static IP string to avoid the\nlookup entirely and prevent false negatives in the test.", "Ok. Won't this force a network connection and DNS lookup?\n =||= Based on my understanding of the code from JDK 1.7 it looks like it won't make a network connection if the host is an IP address.\n\nsee: http://www.docjar.com/html/api/java/net/InetAddress.java.html#1081\n\nMay have missed something on my part though.\n =||= Ok, Thanks for checking. :+1: \n =||= ", ["669", "Replace localhost lookup with static IP to fix test.", "Adam Tanner", "admtnnr", "07/26/15, 09:13:32 PM", "Calling InetAddress.getLocalHost() will cause a lookup to occur that may\nfail with a java.net.UnknownHostException if the system the test is\nrunning on is not configured correctly.\n\nThis is often fixed by echoing \"127.0.0.1 $HOSTNAME\" to /etc/hosts, but\nin this case it seems easier to pick a static IP string to avoid the\nlookup entirely and prevent false negatives in the test.", "NaN"], ["Adam Tanner", "Replace localhost lookup with static IP to fix test.\n\nCalling InetAddress.getLocalHost() will cause a lookup to occur that may\nfail with a java.net.UnknownHostException if the system the test is\nrunning on is not configured correctly.\n\nThis is often fixed by echoing \"127.0.0.1 $HOSTNAME\" to /etc/hosts, but\nin this case it seems easier to pick a static IP string to avoid the\nlookup entirely and prevent false negatives in the test.", "07/20/15, 09:01:45 PM", "Adam Tanner", "457541611c0f95979ab6b9227fc688730439f2d6", ["gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java"], "@@ -35,11 +35,11 @@ protected void setUp() throws Exception {\n   }\n   \n   public void testInetAddressSerializationAndDeserialization() throws Exception {\n-    InetAddress localhost = InetAddress.getLocalHost();\n-    String localInetAddress = gson.toJson(localhost);\n-    assertEquals(\"\\\"\" + localhost.getHostAddress() + \"\\\"\", localInetAddress);\n+    InetAddress address = InetAddress.getByName(\"8.8.8.8\");\n+    String jsonAddress = gson.toJson(address);\n+    assertEquals(\"\\\"8.8.8.8\\\"\", jsonAddress);\n     \n-    InetAddress value = gson.fromJson(localInetAddress, InetAddress.class);\n-    assertEquals(localhost, value);\n+    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);\n+    assertEquals(value, address);\n   } \n }, ", 5, 5, "\"modified, \"", 10], 1], ["670", "Change references to Google Code to Github in pom.xml.", "Adam Tanner", "admtnnr", "07/21/15, 06:01:33 AM", "Not sure if this is entirely correct, but thought this might be blocking new releases so I figured I'd give it a shot. Let me know if this looks right.\n\nRelated: #668 ", ":+1: \n =||= ", ["670", "Change references to Google Code to Github in pom.xml.", "Adam Tanner", "admtnnr", "07/21/15, 06:01:33 AM", "Not sure if this is entirely correct, but thought this might be blocking new releases so I figured I'd give it a shot. Let me know if this looks right.\n\nRelated: #668 ", "NaN"], ["Adam Tanner", "Change references to Google Code to Github.", "07/20/15, 09:01:05 PM", "Adam Tanner", "2b67815808defd74e84195cb70e9ac2afac45664", ["gson/pom.xml"], "@@ -11,7 +11,7 @@\n     <artifactId>oss-parent</artifactId>\n     <version>9</version>\n   </parent>\n-  <url>http://code.google.com/p/google-gson/</url>\n+  <url>https://github.com/google/gson</url>\n   <description>Google Gson library</description>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n@@ -24,13 +24,14 @@\n     </license>\n   </licenses>\n   <scm>\n-    <connection>scm:svn:http://google-gson.googlecode.com/svn/trunk/gson</connection>\n-    <developerConnection>scm:svn:https://google-gson.googlecode.com/svn/trunk/gson</developerConnection>\n-    <url>http://google-gson.googlecode.com/svn/trunk/gson</url>\n+    <connection>scm:git:https://github.com/google/gson.git</connection>\n+    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n+    <url>https://github.com/google/gson</url>\n+    <tag>gson-${project.version}</tag>\n   </scm>\n   <issueManagement>\n-    <system>Google Code Issue Tracking</system>\n-    <url>http://code.google.com/p/google-gson/issues/list</url>\n+    <system>Github Issue Tracking</system>\n+    <url>https://github.com/google/gson/issues</url>\n   </issueManagement>\n   <distributionManagement>\n     <snapshotRepository>\n@@ -140,7 +141,7 @@\n               <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n               <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n               <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>http://code.google.com/p/google-gson/</Bundle-ContactAddress>\n+              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n               <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n               <Bundle-Name>${project.name}</Bundle-Name>\n               <Bundle-Description>${project.description}</Bundle-Description>\n@@ -220,7 +221,6 @@\n         <!-- version>2.5</version -->\n         <configuration>\n           <arguments>-DenableCiProfile=true</arguments>\n-          <tagBase>https://google-gson.googlecode.com/svn/tags</tagBase>\n         </configuration>\n       </plugin>\n       <plugin>\n@@ -249,4 +249,3 @@\n     </developer>\n   </developers>\n </project>\n-, ", 8, 9, "\"modified, \"", 17], 1], ["671", "Support for adding primitives directly to JsonArray instances", null, "ownaginatious", "07/26/15, 09:17:10 PM", "Overloaded the \"add(...)\" method in JsonArray to support directly putting in primitives as arguments.\n\nNow instead of inserting them in the old overly verbose way:\n\n``` java\nJsonArray array = new JsonArray();\narray.add(new JsonPrimitive(true));\narray.add(new JsonPrimitive(12));\narray.add(new JsonPrimitive(\"hello\"));\narray.add(new JsonPrimitive('c'));\n```\n\nYou can do:\n\n``` java\nJsonArray array = new JsonArray();\narray.add(true);\narray.add(12);\narray.add(\"hello\");\narray.add('c');\n```", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= I don't know the DOM API well because it's inefficient to use, but if this was determined as something merge-worthy it needs litmus tests verifying behavior of null and non-null arguments of each of these methods.\n =||= Sorry about that; I was too hasty on committing my changes and submitting a pull request. Dumb oversight on my part.\n\nEvery other Java JSON library I've used (org.json, Jackson. etc) supports inserting primitives directly into arrays, so I found it odd that this one doesn't. I find it looks a lot cleaner if you ever have to implement your own JSON serializers.\n\nI added a JUnit test for null/non-null tests as well as tests for other things.\n =||= If you have to implement your own serializers you would use `JsonReader` and `JsonWriter`, not the DOM-based `JsonObject` / `JsonElement` things.\n =||= Interesting. I don't think I've found any examples anywhere online of anyone using `JsonReader` and `JsonWriter` rather than the DOM elements in a (de)serializer.\n\nHere are all the top results when I search for how to make a Gson serializer/deserializer:\n- http://www.studytrails.com/java/json/java-google-json-custom-serializer-deserializer.jsp\n- http://www.javacreed.com/gson-serialiser-example/\n- http://www.programcreek.com/java-api-examples/index.php?api=com.google.gson.JsonSerializer\n\nI can see why `JsonReader` and `JsonWriter` would make more sense in a streaming API, but I guess for simple things where performance is not a high priority, many find it complicated or verbose to use as opposed to the DOM.\n\nDoesn't the API for JsonDeserializer kind of push you in the DOM direction, seeing as the method signature gives you a `JsonElement` rather than a `JsonReader` instance to work with?\n\nAnyway, would you say this is enough reason is enough to justify this pull request?\n =||= I defer to @inder123 .\n =||= I should also add that `JsonObject` does expose methods for adding primitives directly instead of only `JsonElement`. Oddly though, only for `Number` and `String` and not for `Boolean` or `Character`, which `JsonElement` also supports as primitives.\n\n``` java\npublic void add(String property, JsonElement value);\npublic void addProperty(String property, Number value);\npublic void addProperty(String property, String value);\n```\n\nSeems like it would make sense to also add these to `JsonObject` from a completeness standpoint.\n\n``` java\npublic void addProperty(String property, Boolean value);\npublic void addProperty(String property, Character value);\n```\n\nOf course, this is just my opinion.\n =||= @ownaginatious  Thanks for the changes. I am going to accept them.\nFeel free to send another pull request with addProperty changes.\n =||= :+1: \n =||= ", ["671", "Support for adding primitives directly to JsonArray instances", null, "ownaginatious", "07/26/15, 09:17:10 PM", "Overloaded the \"add(...)\" method in JsonArray to support directly putting in primitives as arguments.\n\nNow instead of inserting them in the old overly verbose way:\n\n``` java\nJsonArray array = new JsonArray();\narray.add(new JsonPrimitive(true));\narray.add(new JsonPrimitive(12));\narray.add(new JsonPrimitive(\"hello\"));\narray.add(new JsonPrimitive('c'));\n```\n\nYou can do:\n\n``` java\nJsonArray array = new JsonArray();\narray.add(true);\narray.add(12);\narray.add(\"hello\");\narray.add('c');\n```", "NaN"], ["Dillon Dixon", "Added test for nulls", "07/24/15, 06:02:46 AM", "Dillon Dixon", "5cf82a573f78e587f44c58ccd9b84679d531bfd6", ["gson/src/test/java/com/google/gson/functional/JsonArrayTest.java"], "@@ -127,6 +127,22 @@ public void testMixedPrimitiveAddition() {\n     assertEquals(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\", jsonArray.toString());\n   }\n \n+  public void testNullPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add((Character) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Integer) null);\n+    jsonArray.add((Double) null);\n+    jsonArray.add((Float) null);\n+    jsonArray.add((BigInteger) null);\n+    jsonArray.add((String) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Number) null);\n+\n+    assertEquals(\"[null,null,null,null,null,null,null,null,null]\", jsonArray.toString());\n+  }\n+\n   public void testSameAddition() {\n     JsonArray jsonArray = new JsonArray();\n , ", 16, 0, "\"modified, \"", 16], 1], ["673", "Passing JSONObject [from org.json] (not JsonObject [from com.google.gson]) to gson.toJson()", "Divyendu Singh", "divyenduz", "09/26/15, 11:43:16 PM", "Something like this \n\n```\nfileString = \"{\\\"name\\\":\\\"divyendu\\\", \\\"age\\\": \\\"23\\\"}\";\nJSONObject jsonObject = new JSONObject(fileString); \nGson gson = new Gson();\nSystem.out.println(jsonObject.toString());\nSystem.out.println(gson.toJson(jsonObject));\nSystem.out.println(jsonObject.toString().equals(gson.toJson(jsonObject)));\n```\n\nThe output of 1st S.O.P is {\"age\":\"23\",\"name\":\"divyendu\"}\nThe output of 2nd S.O.P is {\"map\":{\"age\":\"23\",\"name\":\"divyendu\"}} (it gets wrapped in a 'map' key)\nThe output of 3rd S.O.P is false\nHow can I avoid it being wrapped in S.O.P, without using StringBuilder which is called when I call `jsonObject.toString()` directly. It was causing a OutOfMemory error for me.", "You can write a `TypeAdapter<JSONObject>` which walks the tree structure of the `org.json` model objects and emits the tree into Gson's `JsonWriter`. Similarly, if you need to parse JSON into the `org.json` model from Gson (which is a really strange thing to do). You would do the same but with `JsonReader`.\n\nYou could also write a `JsonSerializer<JSONObject>` (and, again, if you wanted a `JsonDeserializer<JSONObject>`) to deal with Gson's DOM model instead of streaming model which, funny enough, is very similar to `org.json`'s API.\n\nThe scope of doing this is outside what I'm willing to write, and not something that's a bug or feature request on Gson. If you are unable to figure this out, I suggest you post on StackOverflow about how to write a `TypeAdapter` for `org.json.JSONObject` as that community is primed to help and serves as a much better place for storing the solution for future searchers.\n =||= Thanks\n =||= [org.json.JSONObject and org.json.JSONArray JsonSerializer and JsonDeserializer](https://github.com/google/gson/issues/782#issuecomment-419424521) =||= ", 0], ["674", "Readme points to the new homepage at Github", "Lars Vogel", "vogella", "07/29/15, 11:24:31 PM", "NaN", "NaN", ["674", "Readme points to the new homepage at Github", "Lars Vogel", "vogella", "07/29/15, 11:24:31 PM", "NaN", "NaN"], ["Lars Vogel", "Readme points to the new homepage at Github", "07/29/15, 04:45:24 PM", "Lars Vogel", "37d00c268d97b08c2e28cb0c4670733177729751", ["gson/README"], "@@ -4,4 +4,4 @@ equivalent Java object. Gson can work with arbitrary Java objects including\n pre-existing objects that you do not have source-code of.\n \n Complete Gson documentation is available at its project page \n-http://code.google.com/p/google-gson\n+https://github.com/google/gson, ", 1, 1, "\"modified, \"", 2], 1], ["675", "StackOverflowError in delegating TypeAdapterFactory", "Deleted user", "ghost", "08/25/16, 05:38:07 PM", "GSON Version: 2.3.1\nDescription: `gson.getDelegateAdapter(this, type)` causes inifinite recursion when used with a @JsonAdapter annotated type.\n\nMinimal example:\n\n``` java\npackage test.gson;\n\nimport com.google.gson.Gson;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.TypeAdapterFactory;\nimport com.google.gson.annotations.JsonAdapter;\nimport com.google.gson.reflect.TypeToken;\n\n/* @formatter:off */\npublic class GsonStackOverflowError {\n\n    public static void main(final String[] args) {\n        new Gson().fromJson(\"{}\", A.class);\n    }\n\n    @JsonAdapter(Adapter.class)\n    public static class A {}\n\n    public static class Adapter implements TypeAdapterFactory {\n        @Override\n        public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type)\n        {\n            gson.getDelegateAdapter(this, type);\n            throw new IllegalStateException(\"Not reproducible\");\n        }\n    }\n}\n```", "GSON 2.3 throws IllegalArgumentException instead, see http://stackoverflow.com/questions/29445165/\n =||= Yup, `getDelegateAdapter()` doesn't work with `@JsonAdapter`. Needs to be fixed.\n =||= Any updates on this issue?\n =||= I can confirm that the issue is resolved as of Gson 2.7. Should this issue be closed?\n =||= Thanks for following up\n =||= ", 0], ["678", "Merge Gson and JsonObject", "Vernon Lee", "VernonLee", "08/06/15, 05:29:30 AM", "I have Gson and JsonObject, such as:\n\nGson gson = new Gson();\nString deviceJson = gson.toJson(device); // device is a entity\n\ndeviceJson: {\n  \"id\": 1,\n  \"name\":\"JP-1\"\n}       \n\nJsonObject json = new JsonObject();\njson.addProperty(\"oid\", 12);\n\njson: {\n  \"oid\":12\n}\n\nI want to merge gson and json object together, result like this:\nnewJson: {\n   \"id\": 1,\n  \"name\":\"JP-1\",\n  \"oid\":12\n}\n\nDoes any way in Gson do this? Thanks.\nSorry for my English.", "``` java\n      JsonObject jsonObject = new JsonObject();\n      jsonObject.addProperty(\"old\", 12);\n\n      Object device = new Object();\n      JsonObject deviceJson = new Gson().toJsonTree(device).getAsJsonObject();\n\n      for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {\n          deviceJson.add(entry.getKey(), entry.getValue());\n      }\n```\n =||= ", 0], ["679", "Required annotation implement", "Anisov Aleksey", "AnisovAleksey", "08/08/15, 03:28:43 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Seems interesting, however I think we should have a more general way of validating an object post deserialization. @swankjesse  @JakeWharton @joel-leitch  Any thoughts?\n =||= sorry, my mistake. copied from fork\n =||= Yeah, if we're going to validate that all required fields are present, we probably also want to support arbitrary validation, and that will require careful & thoughtful API design. What do other JSON libraries do?\n =||= Closing this pull request, as we will opt for a more general validation design. Thank you for your work @threat70. Appreciate the fact that you took the time to write unit tests as well.\n =||= ", 0], ["680", "RuntimeTypeAdapterFactory not null-safe", "Lachlan Coote", "lcoote", "08/06/15, 09:49:19 PM", "`RuntimeTypeAdapterFactory` creates a `TypeAdapter` that is not null-safe. This shows up when the adapted-type is the property of another object. Test below:\n\n```\npublic void testSerializeWrappedNullValue() {\n  TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n      .registerSubtype(CreditCard.class)\n      .registerSubtype(BankTransfer.class);\n\n  Gson gson = new GsonBuilder()\n      .registerTypeAdapterFactory(billingAdapter)\n      .create();\n\n  // throws NullPointerException\n  gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\n}\n\nstatic class BillingInstrumentWrapper {\n  BillingInstrument instrument;\n  BillingInstrumentWrapper(BillingInstrument instrument) {\n    this.instrument = instrument;\n  }\n}\n```\n\nFails with the stacktrace:\n\n```\njava.lang.NullPointerException\nat com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.write(RuntimeTypeAdapterFactory.java:218)\nat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:99)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:219)\nat com.google.gson.Gson.toJson(Gson.java:600)\nat com.google.gson.Gson.toJson(Gson.java:579)\nat com.google.gson.Gson.toJson(Gson.java:534)\nat com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testSerializeWrappedNullValue(RuntimeTypeAdapterFactoryTest.java:180)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:483)\nat junit.framework.TestCase.runTest(TestCase.java:164)\nat junit.framework.TestCase.runBare(TestCase.java:130)\nat junit.framework.TestResult$1.protect(TestResult.java:106)\nat junit.framework.TestResult.runProtected(TestResult.java:124)\nat junit.framework.TestResult.run(TestResult.java:109)\nat junit.framework.TestCase.run(TestCase.java:120)\nat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:131)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n```", "NaN", 0], ["681", "fix #680 - make RuntimeTypeAdapterFactory null-safe", "Lachlan Coote", "lcoote", "08/06/15, 09:49:18 PM", "NaN", "Thanks! And sorry for the hold-up.\n =||= ", ["681", "fix #680 - make RuntimeTypeAdapterFactory null-safe", "Lachlan Coote", "lcoote", "08/06/15, 09:49:18 PM", "NaN", "NaN"], ["Lachlan Coote", "fix #680 - make RuntimeTypeAdapterFactory null-safe", "08/05/15, 11:27:18 PM", "Lachlan Coote", "1867457030d3c149566e95a019033cce4ff3cf90", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java", "extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java"], "@@ -235,6 +235,6 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n         }\n         Streams.write(clone, out);\n       }\n-    };\n+    }.nullSafe();\n   }\n }, @@ -167,6 +167,25 @@ public void testSerializeCollidingTypeFieldName() {\n     }\n   }\n \n+  public void testSerializeWrappedNullValue() {\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+        .registerSubtype(CreditCard.class)\n+        .registerSubtype(BankTransfer.class);    \n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapterFactory(billingAdapter)\n+        .create();    \n+    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\n+    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\n+    assertNull(deserialized.instrument);\n+  }\n+\n+  static class BillingInstrumentWrapper {\n+    BillingInstrument instrument;\n+    BillingInstrumentWrapper(BillingInstrument instrument) {\n+      this.instrument = instrument;\n+    }\n+  }\n+\n   static class BillingInstrument {\n     private final String ownerName;\n     BillingInstrument(String ownerName) {, ", 20, 1, "\"modified, modified, \"", 21], 1], ["683", "Made JsonArray implement the List interface.", "Inderjeet Singh", "inder123", "09/27/15, 11:13:09 PM", "NaN", "@swankjesse @JakeWharton Is this a good idea (to implement List instead of Iterable for JsonArray)? Bloats the API a little bit, but useful nonetheless.\n =||= It isn't a binary-compatible change.\n =||= Don't forget equals().\n =||= It don't feel strongly either way.\n\nIf we make this change we will need to figure out the binary compatibility problem.\n\nAlso if we make this change we should change JsonObject to implement Map for symmetry.\n =||= I agree we should keep binary compatibility. Closing the pull request.\n =||= ", 0], ["684", "Revert \"Add a JSR-305 @ThreadSafe annotation to the Gson class\"", "Inderjeet Singh", "inder123", "08/10/15, 02:02:00 PM", "Reverts google/gson#664", "@swankjesse \n =||= LGTM\n =||= ", ["684", "Revert \"Add a JSR-305 @ThreadSafe annotation to the Gson class\"", "Inderjeet Singh", "inder123", "08/10/15, 02:02:00 PM", "Reverts google/gson#664", "NaN"], ["inder123", "Revert \"Add a JSR-305 @ThreadSafe annotation to the Gson class\"", "08/10/15, 02:01:18 PM", "inder123", "2ee680a64529ac6f31306e06d43eae8cf53f7c55", ["gson/pom.xml", "gson/src/main/java/com/google/gson/Gson.java"], "@@ -50,12 +50,6 @@\n     <url>http://www.google.com</url>\n   </organization>\n   <dependencies>\n-    <dependency>\n-      <groupId>com.google.code.findbugs</groupId>\n-      <artifactId>jsr305</artifactId>\n-      <version>3.0.0</version>\n-      <optional>true</optional>\n-    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>, @@ -31,8 +31,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import javax.annotation.concurrent.ThreadSafe;\n-\n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n import com.google.gson.internal.Primitives;\n@@ -98,7 +96,6 @@\n  * @author Joel Leitch\n  * @author Jesse Wilson\n  */\n-@ThreadSafe\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n , ", 0, 9, "\"modified, modified, \"", 9], 1], ["685", "Updated Gson Javadoc to indicate thread-safety.", "Inderjeet Singh", "inder123", "08/10/15, 02:05:10 PM", "NaN", "@swankjesse for your optional review. I will go ahead and merge anyway.\n =||= LGTM\n =||= ", ["685", "Updated Gson Javadoc to indicate thread-safety.", "Inderjeet Singh", "inder123", "08/10/15, 02:05:10 PM", "NaN", "NaN"], ["Inderjeet Singh", "Updated Gson Javadoc to indicate thread-safety.", "08/10/15, 02:04:07 PM", "Inderjeet Singh", "0c4ae018361d4756123c82c2f67ad04385caec5b", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -56,7 +56,8 @@\n /**\n  * This is the main class for using Gson. Gson is typically used by first constructing a\n  * Gson instance and then invoking {@link #toJson(Object)} or {@link #fromJson(String, Class)}\n- * methods on it.\n+ * methods on it. Gson instances are Thread-safe so you can reuse them freely across multiple\n+ * threads.\n  *\n  * <p>You can create a Gson instance by invoking {@code new Gson()} if the default configuration\n  * is all you need. You can also use {@link GsonBuilder} to build a Gson instance with various, ", 2, 1, "\"modified, \"", 3], 1], ["686", "fromJson Json to String  JsonSyntaxException", "String", "KBCode", "08/14/15, 03:02:57 PM", "com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $\n    at com.google.gson.Gson.assertFullConsumption(Gson.java:786)\n    at com.google.gson.Gson.fromJson(Gson.java:776)\n    at com.google.gson.Gson.fromJson(Gson.java:724)\n    at com.inspeed.commons.tools.GsonTools.fromJson(GsonTools.java:19)\nCaused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $\n    at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1574)\n    at com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1424)\n    at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:547)\n    at com.google.gson.stream.JsonReader.peek(JsonReader.java:429)\n    at com.google.gson.Gson.assertFullConsumption(Gson.java:782)\n    ... 27 more\n\ntest code below\nString timeStr=GsonTools.fromJson(\"2015-08-14 10:30:20\",String.class);\n\n my view the source code of the STRING TypeAdapter is called found JsonReader nextString ( ) go to nextUnquotedValue() This method is positioned to see the case' ' : Will break, why?\n\nif Use JsonReader.setLenient(true)  the result is 2015-08-14,This is not the result I want.\n\nmy expect value is '2015-08-14 10:30:20'", "`2015-08-14 10:30:20` is not a JSON string. You want `\"2015-08-14 10:30:20\"` (note the quotes). In JSON the space character is a delimiter for a token which is why it stops.\n =||= @JakeWharton Should we disable GsonConverterFactory for requests that return Strings with colons or should we create a special deserializer for String return type? =||= ", 0], ["687", "Add METHOD Target to SerializedName attribute", "Ryan Harter", "rharter", "08/14/15, 10:58:18 PM", "I'm in the process of making an AutoValue extension that will generate a Gson TypeAdapterFactory for generated data types, and I'd like to support `@SerializedName`.  Currently, the attribute only targets `ElementType.FIELD`s, meaning users can't put it on the abstract property methods that AutoValue uses.  I'd like to have `ElementType.METHOD` added to the list of supported `ElementType`s so that I don't have to include a separate annotation for AutoValue users.\n\nHere is what the user's class would look like in this case:\n\n``` java\n@AutoValue public abstract class Foo {\n  @SerializedName(\"Baz\") public abstract String baz();\n}\n```", "NaN", 0], ["688", "Add METHOD target for use with AutoValue's abstract property methods", "Michael Evans", "MichaelEvans", "08/14/15, 10:58:18 PM", "Closes #687 ", "It's a pragmatic solution to the problem AutoValue users have. I don't think it obligates us to doing getters and setters, and I'm quite against doing that!\n =||= Details are here: https://github.com/google/gson/issues/687\n =||= Ok\n =||= ", ["688", "Add METHOD target for use with AutoValue's abstract property methods", "Michael Evans", "MichaelEvans", "08/14/15, 10:58:18 PM", "Closes #687 ", "NaN"], ["Michael Evans", "Add METHOD target for use with AutoValue's abstract property methods", "08/14/15, 06:08:56 PM", "Michael Evans", "64d74db8ae69f3dc37feb09df54e53ba0458edb7", ["gson/src/main/java/com/google/gson/annotations/SerializedName.java"], "@@ -64,7 +64,7 @@\n  * @author Joel Leitch\n  */\n @Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.FIELD)\n+@Target({ElementType.FIELD, ElementType.METHOD})\n public @interface SerializedName {\n \n   /**, ", 1, 1, "\"modified, \"", 2], 1], ["689", "Add unit tests for constructors from util classes", "Vladislav Bauer", "vbauer", "08/15/15, 12:42:31 AM", "I think that constructors from util classes should pass the following rules (best practices):\n1. Each util class should have only the one constructor without parameters.\n2. Constructor should be private.\n3. Code should not have possibility to instantiate this class even using reflection mechanism (UnsupportedOperationException)", "PR was updated, thank you for review.\n =||= Thanks!\n =||= Thank you!\n =||= ", ["689", "Add unit tests for constructors from util classes", "Vladislav Bauer", "vbauer", "08/15/15, 12:42:31 AM", "I think that constructors from util classes should pass the following rules (best practices):\n1. Each util class should have only the one constructor without parameters.\n2. Constructor should be private.\n3. Code should not have possibility to instantiate this class even using reflection mechanism (UnsupportedOperationException)", "NaN"], ["Vladislav Bauer", "Add unit tests for constructors from util classes", "08/14/15, 09:05:42 PM", "Vladislav Bauer", "eb79ec73f01d31853e411843f64172ee1c5703d0", ["gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/Primitives.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/common/MoreAsserts.java"], "@@ -30,6 +30,10 @@\n  * @author Joel Leitch\r\n  */\r\n public final class $Gson$Preconditions {\r\n+  private $Gson$Preconditions() {\r\n+    throw new UnsupportedOperationException();\r\n+  }\r\n+\r\n   public static <T> T checkNotNull(T obj) {\r\n     if (obj == null) {\r\n       throw new NullPointerException();\r, @@ -43,7 +43,9 @@\n public final class $Gson$Types {\n   static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};\n \n-  private $Gson$Types() {}\n+  private $Gson$Types() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   /**\n    * Returns a new parameterized type, applying {@code typeArguments} to, @@ -29,7 +29,9 @@\n  * @author Kevin Bourrillion\n  */\n public final class Primitives {\n-  private Primitives() {}\n+  private Primitives() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   /** A map from primitive types to their corresponding wrapper types. */\n   private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPE;, @@ -33,6 +33,10 @@\n  * Reads and writes GSON parse trees over streams.\n  */\n public final class Streams {\n+  private Streams() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n   /**\n    * Takes a reader in any state and returns the next value as a JsonElement.\n    */, @@ -55,7 +55,9 @@\n  * Type adapters for basic types.\n  */\n public final class TypeAdapters {\n-  private TypeAdapters() {}\n+  private TypeAdapters() {\n+    throw new UnsupportedOperationException();\n+  }\n \n   @SuppressWarnings(\"rawtypes\")\n   public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {, @@ -69,4 +69,5 @@ public static void assertEqualsAndHashCode(Object a, Object b) {\n     Assert.assertFalse(a.equals(null));\n     Assert.assertFalse(a.equals(new Object()));\n   }\n+\n }, ", 18, 3, "\"modified, modified, modified, modified, modified, modified, \"", 21], 1], ["690", "publish proto to Maven central?", "Bj\u00f8rn Borud", "borud", "08/23/15, 01:20:02 AM", "While waiting for protobuf version 3 to get support for JSON I've started using Gson to transform protobuffers into JSON and I found `ProtoTypeAdapter` written by Inderjeet Singh under the `proto` directory.  However this does not appear to be part of Gson proper (wouldn't hurt that much if it was) and it does not appear to be pushed to Maven central.\n\nIn my project I've just included the code in the source, but I'm not really comfortable with that.  I'd like to get it from somewhere that is being properly maintained.\n\nWould you consider moving this code into the `gson` proper or pushing this artifact to Maven central?  ", "Hi. Proto is not a very popular technology and will not make into Gson proper. We may publish an additional maven sub-project. However, I haven't maintained this version after writing it.\nI think you did the right thing by including the source code.\n =||= OK, thanks for the quick response @inder123!\n =||= com.google.code.gson.proto is needed in our project. Now we need to copy the source code to use and it would be much better if we can rely to the maven repo with compatible version. @borud @inder123  =||= ", 0], ["692", "Double cannot be casted to Integer.", "Adrian Antkowiak", "adiantek", "10/07/15, 08:14:23 PM", "Long cannot be casted to Integer, Integer cannot be casted to Short, etc. Could you fix it in https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java? When serializing Map&lt;String, Object&gt; and deserializing, it throws Exception. I can't edit this, because I can't edit Spigot/Bukkit. If JSON save Integer, it should read Integer, not make Double unnecessarily.\n\nI maked it in issue, because I had to download sources GSON and edit this:.\n\n```\n    case NUMBER:\n      try {\n        return in.nextInt();\n      } catch(NumberFormatException exception) {\n      }\n      try {\n        return in.nextLong();\n      } catch(NumberFormatException exception) {\n      }\n      return in.nextDouble();\n```", "@swankjesse In our original parser, I tried to convert any number to its smallest form first. So, first see if it fits in short, int and long, then try double.\nAny reason why we should convert it to double by default?\n =||= I wrote, that serializing and deserializing Object doesn't work correctly. Try serialize Integer number, then deserialize it as fromJson(..., Object.class). It will return double. Why double, not Integer?\n\nI think that it should convert it default to integer, no double. Integer can be casted to double, but double cannot be casted to Integer.\n =||= It may be because of routine, which converts all numbers to double.\ncase NUMBER:\n      return in.nextDouble();\n =||= Double by default is the best for simplicity. Things like equals() break if we use a mix of different types here.\n =||= @swankjesse It is definitely not the best. Crucial difference is double is a floating point. Right now gson is forcing any numerical value to have fractional part. There's no integers support. Which is ridiculous.\n =||= There's int support, as long as you provide the target type. When you ask Gson to decode an object without a target type, it needs a policy and Gson\u2019s policy is to be consistent with JavaScript.\n =||= (Arguing int vs. double is particularly awkward because there's no data loss.)\n =||= Double cannot be casted to Integer. I have Object in main app and plugin\nthat using Gson cannot modify it. It will throw Exception, so I can't use\nit in plugins.\n7 pa\u017a 2015 14:16 \"Jesse Wilson\" notifications@github.com napisa\u0142(a):\n\n> (Arguing int vs. double is particularly awkward because there's no data\n> loss.)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/692#issuecomment-146179250.\n =||= @swankjesse Why there's should be data loss? If value has \".\" (`{rating: 3.4}`) , it can be parsed to double, if not - into long (`{comments: 15}`).\n =||= @swankjesse I do understand you stand for simplicity. But treating numeric without floating point as a numeric with floating point has a serious impact on business logic. There's not much difference between Integer and Long from business logic point of view, but difference between Long and Double is huge. (`{comments: 15.0}`, anyone?). Current implementation is making things either unusable for serious tasks (having no proper integer support) or overly complicated (writing own IntegerAwareObjectAdapter). Serializing/deserializing Properties, for example, is a pain.\n =||= Why are you decoding it as `Object`?\n =||= Ie. if you want type safety, provide the types!\n =||= But I don't know, what's type is it. I need Object, which can be Integer.\n7 pa\u017a 2015 20:00 \"Jesse Wilson\" notifications@github.com napisa\u0142(a):\n\n> Ie. if you want type safety, provide the types!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/692#issuecomment-146278854.\n =||= @swankjesse  I'm deserializing it as a Map (and it is actually a map).\nAnd it is not about type safety, it is about using most specific type. Java was built that way - when dealing with polymorphism, most specific type is considered. \n =||= @swankjesse: I'm afraid you do not understand my problem with Properties. I'm providing the types when serializing it, and gson correctly serializes integers as integers. But when I'm deserializing my Properties back (let's say, from json received from server), all integers are becoming doubles, and that's breaking a lot of things. I have to check every entry which I expect to be integer and convert it from double to integer. This particular method we're talking about is meant to deserialize maps, and it is definitely broken, as it considers any number in map being a floating point. Using most specific type instead of most generic type is more correct, imho.\n =||= Could the convention be that anything missing a `.` is an integer and anything with a `.` is a double?\n =||= @oleersoy: yup, I'm using exactly that logic in my custom adapter.\n =||= I think you want to decode it as a `Map<String, Integer>`. No action to take here.\n =||= No. Some keys is String, some Double, some Float, some Map. Map is parsed\nby Bukkit for ItemStack, so I can't modify it.\n7 pa\u017a 2015 22:14 \"Jesse Wilson\" notifications@github.com napisa\u0142(a):\n\n> I think you want to decode it as a Map<String, Integer>. No action to\n> take here.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/692#issuecomment-146315171.\n =||= Values*\n =||= It may be check while converting string to number:\n\nif (number . contains( \".\" ) || number . contains( \"e\" ) || number . contains( \"E\" )) {\nreturn Double . valueOf(number);\n} else {\nreturn Long . valueOf(number);\n}\n =||= Or:\n\n```\n  try {\n    return in.nextInt();\n  } catch(NumberFormatException exception) {\n  }\n  try {\n    return in.nextLong();\n  } catch(NumberFormatException exception) {\n  }\n  return in.nextDouble();\n```\n =||= Is there a way to override this behavior?  =||= ", 0], ["693", "Added tests for deserialization of double array", "Inderjeet Singh", "inder123", "09/02/15, 02:57:01 AM", "NaN", "NaN", ["693", "Added tests for deserialization of double array", "Inderjeet Singh", "inder123", "09/02/15, 02:57:01 AM", "NaN", "NaN"], ["Inderjeet Singh", "Added tests for deserialization of double array", "09/02/15, 12:49:34 AM", "Inderjeet Singh", "fbb8696e83065cba8c2eb223371db5f650b9fbca", ["gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"], "@@ -198,6 +198,19 @@ public void testDoubleNoFractAsStringRepresentationDeserialization() {\n     assertEquals(expected.doubleValue(), actual1);\n   }\n \n+  public void testDoubleArrayDeserialization() {\n+      String json = \"[0.0, 0.004761904761904762, 3.4013606962703525E-4, 7.936508173034305E-4,\"\n+              + \"0.0011904761904761906, 0.0]\";\n+      double[] values = gson.fromJson(json, double[].class);\n+      assertEquals(6, values.length);\n+      assertEquals(0.0, values[0]);\n+      assertEquals(0.004761904761904762, values[1]);\n+      assertEquals(3.4013606962703525E-4, values[2]);\n+      assertEquals(7.936508173034305E-4, values[3]);\n+      assertEquals(0.0011904761904761906, values[4]);\n+      assertEquals(0.0, values[5]);\n+  }\n+\n   public void testLargeDoubleDeserialization() {\n     String doubleValue = \"1.234567899E8\";\n     Double expected = Double.valueOf(doubleValue);, ", 13, 0, "\"modified, \"", 13], 1], ["694", "getDelegateAdapter is order dependant and skips more than one typeAdapterFactory.", "Benjamin AUGUSTIN", "Dorvaryn", "09/04/15, 02:17:23 AM", "### Problem:\n\n`getDelegateAdapter` is not only skipping the passed in TypeAdapterFactory but all the previous one in the registered list. It seems unlikely that this is expected behaviour as this is not documented and makes this feature dependant on the order of the registration of the given factories.\n#### Example:\n\n``` java\nTypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()\nnew GsonBuilder()\n                .registerTypeAdapterFactory(factoryA)\n                .registerTypeAdapterFactory(new TypeAdapterFactoryB(factoryA))\n                .create()\n```\n\nIf TypeAdapterFactoryB calls `getDelegateAdapter(factoryA, ...)` and TypeAdapterFactoryA calls `getDelegateAdapter(this, ...) then TypeAdapterFactoryB is not invoked back.\n\nInverting order in creation makes the resolution work as expected.\n\n``` java\nTypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()\nTypeAdapterFactoryB factoryB = new TypeAdapterFactoryB(factoryA)\nnew GsonBuilder()\n                .registerTypeAdapterFactory(factoryB)\n                .registerTypeAdapterFactory(factoryA)\n                .create()\n```\n### Proposed solution (not working):\n\nOnly skipping the factory passed in parameter.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= Humm this behaviour seems to run deeper than I expected. I started poking around to understand This failing test, not sure I understand what the `testDeserializerForAbstractClass` is testing.\n\nAny ideas on how to fix this strange behaviour that would not compromise the rest of the Gson code structure ?\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= The implemented behavior is working as intended, and order of registration is significant. Otherwise you could get into trouble with multiple-delegation.\n =||= @swankjesse Thanks for the fast response. Maybe this should simply be more explicit in the documentation. I attached a proposed update to the javadoc.\n =||= ", ["694", "getDelegateAdapter is order dependant and skips more than one typeAdapterFactory.", "Benjamin AUGUSTIN", "Dorvaryn", "09/04/15, 02:17:23 AM", "### Problem:\n\n`getDelegateAdapter` is not only skipping the passed in TypeAdapterFactory but all the previous one in the registered list. It seems unlikely that this is expected behaviour as this is not documented and makes this feature dependant on the order of the registration of the given factories.\n#### Example:\n\n``` java\nTypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()\nnew GsonBuilder()\n                .registerTypeAdapterFactory(factoryA)\n                .registerTypeAdapterFactory(new TypeAdapterFactoryB(factoryA))\n                .create()\n```\n\nIf TypeAdapterFactoryB calls `getDelegateAdapter(factoryA, ...)` and TypeAdapterFactoryA calls `getDelegateAdapter(this, ...) then TypeAdapterFactoryB is not invoked back.\n\nInverting order in creation makes the resolution work as expected.\n\n``` java\nTypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()\nTypeAdapterFactoryB factoryB = new TypeAdapterFactoryB(factoryA)\nnew GsonBuilder()\n                .registerTypeAdapterFactory(factoryB)\n                .registerTypeAdapterFactory(factoryA)\n                .create()\n```\n### Proposed solution (not working):\n\nOnly skipping the factory passed in parameter.", "NaN"], ["Dorvaryn", "Clarify the fact that the behaviour of getDelegateAdapter depends on registration order.", "09/03/15, 01:43:34 PM", "Dorvaryn", "618343fd1bae998ac9ebfde37a56eb4f498a59d7", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -410,6 +410,10 @@ private void checkValidFloatingPoint(double value) {\n    *  System.out.println(\"Num JSON reads\" + stats.numReads);\n    *  System.out.println(\"Num JSON writes\" + stats.numWrites);\n    *  }</pre>\n+   *  Note that this call will skip all factories registered before {@code skipPast}. In case of\n+   *  multiple TypeAdapterFactories registered it is up to the caller of this function to insure\n+   *  that the order of registration does not prevent this method from reaching a factory they \n+   *  would expect to reply from this call.\n    *  Note that since you can not override type adapter factories for String and Java primitive\n    *  types, our stats factory will not count the number of String or primitives that will be\n    *  read or written., ", 4, 0, "\"modified, \"", 4], 1], ["695", "Documentation for strict/non-lenient mode", "Christian Zangl", "laktak", "11/08/15, 10:44:49 PM", "I was a bit surprised that Gson parses invalid JSON by default. The [user guide](https://sites.google.com/site/gson/gson-user-guide) does not mention this pitfall.\n\nI found `getAdapter` in #457 by accident. Is `new Gson().getAdapter(Map.class).fromJson(json)` the correct way to parse in strict mode? Could you update the documentation?", "Gson philosophy is to accept JSON leniently, but emit strictly. This is not a bug. If you want specific documentation edits, consider sending a pull request with changes.\n =||= ", 0], ["697", "Update EnumMap serialization logic to handle SerializedName annotatio\u2026", "Han Qiao", "sweatybridge", "09/06/15, 05:44:33 PM", "\u2026ns on enums - fix #473 and fix #562", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= This is not the right fix for the problem. The right solution is to use `enableComplexMapKeySerialization()` on your GsonBuilder.\n\n```\n  enum Bool {\n    @SerializedName(\"yes\") TRUE,\n    @SerializedName(\"no\") FALSE\n  }\n\n  public void testEnumSerializedName() {\n    Map<Bool, Integer> map = new LinkedHashMap<Bool, Integer>();\n    map.put(Bool.TRUE, 1);\n    map.put(Bool.FALSE, 2);\n\n    Gson gson = new GsonBuilder()\n        .enableComplexMapKeySerialization()\n        .create();\n\n    Type type = new TypeToken<Map<Bool, Integer>>() {}.getType();\n    String json = gson.toJson(map, type);\n    assertEquals(\"{\\\"yes\\\":1,\\\"no\\\":2}\", json);\n    assertEquals(map, gson.fromJson(json, type));\n  }\n```\n =||= I signed it!\n =||= Hi swankjesse, please build your library.\nI cant re-build it to jar :(\n =||= > This is not the right fix for the problem. The right solution is to use `enableComplexMapKeySerialization()` on your GsonBuilder.\r\n> \r\n> ```\r\n>   enum Bool {\r\n>     @SerializedName(\"yes\") TRUE,\r\n>     @SerializedName(\"no\") FALSE\r\n>   }\r\n> \r\n>   public void testEnumSerializedName() {\r\n>     Map<Bool, Integer> map = new LinkedHashMap<Bool, Integer>();\r\n>     map.put(Bool.TRUE, 1);\r\n>     map.put(Bool.FALSE, 2);\r\n> \r\n>     Gson gson = new GsonBuilder()\r\n>         .enableComplexMapKeySerialization()\r\n>         .create();\r\n> \r\n>     Type type = new TypeToken<Map<Bool, Integer>>() {}.getType();\r\n>     String json = gson.toJson(map, type);\r\n>     assertEquals(\"{\\\"yes\\\":1,\\\"no\\\":2}\", json);\r\n>     assertEquals(map, gson.fromJson(json, type));\r\n>   }\r\n> ```\r\n\r\nThis is not solving my problem with EnumMap. I am still facing com.google.gson.JsonSyntaxException: duplicate key: null.\r\n\r\njson \"orderDimension\": {\r\n          \"0\": 5,\r\n          \"1\": 10\r\n        }\r\nHere is orderDimension\r\n\r\npublic class Dimension {\r\n    private EnumMap<DimensionEnum,Integer> orderDimension;\r\n}\r\n\r\npublic enum DimensionEnum {\r\n    ORDER_CAPACITY,\r\n    CRATE_CAPACITY,\r\n    KG_CAPACITY\r\n} =||= ", 0], ["698", "updated maven plugin versions to latest", "Inderjeet Singh", "inder123", "09/07/15, 07:10:39 PM", "NaN", "NaN", ["698", "updated maven plugin versions to latest", "Inderjeet Singh", "inder123", "09/07/15, 07:10:39 PM", "NaN", "NaN"], ["Inderjeet Singh", "updated maven plugin versions to latest", "09/07/15, 07:02:45 PM", "Inderjeet Singh", "1bf62f02148216714e25ba72f8c1f431b43ac539", ["gson/pom.xml"], "@@ -110,7 +110,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.2</version>\n+        <version>3.3</version>\n         <configuration>\n           <source>1.5</source>\n           <target>1.5</target>\n@@ -119,7 +119,7 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.5</version>\n+        <version>2.6</version>\n         <executions>\n           <execution>\n             <phase>package</phase>\n@@ -175,7 +175,7 @@\n          <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.1</version>\n+         <version>2.10.3</version>\n          <executions>\n            <execution>\n              <id>attach-javadocs</id>\n@@ -197,7 +197,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.9</version>\n+         <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>\n@@ -219,7 +219,7 @@\n       </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.1</version>\n+        <version>2.5.5</version>\n         <configuration>\n           <descriptor>assembly-descriptor.xml</descriptor>\n           <finalName>google-gson-${project.version}</finalName>, ", 5, 5, "\"modified, \"", 10], 1], ["699", "Implemented support for multiple values for SerializedName annotation.", "Inderjeet Singh", "inder123", "10/03/15, 11:25:47 AM", "NaN", "@JakeWharton @joel-leitch @swankjesse Please review and comment on this new feature that I implemented. See https://github.com/google/gson/issues/639 for the original feature request.\n =||= Maybe just add another field for alternate names?\n =||= @JakeWharton @swankjesse Ok, I have revised this pull request to be binary-compatible by using an additional field to specify alternate values. Take another look.\n =||= This has ballooned into a pretty big feature. Do we really need it?\n =||= @swankjesse Look at the entire diff again. I have reduced it to be of relatively small size. Does that allay your concerns?\n =||= This is Gson's inner loop on encoding, so I'm anxious about doing extra work that makes that slower. In this case I think we should avoid doing an extra `String.equals()` call for every single field, whether or not it uses this new annotation!\n =||= Ok, all these changes have further shrunk the overall diff. Good stuff.\nPlease take another look.\n =||= LGTM\n\nPlease rebase and squash (http://rebaseandsqua.sh) so our git log has only one commit!\n =||= Rebased and squashed (learned something new today, neat!). Take another look.\n =||= Cool!\n =||= ", ["699", "Implemented support for multiple values for SerializedName annotation.", "Inderjeet Singh", "inder123", "10/03/15, 11:25:47 AM", "NaN", "NaN"], ["Inderjeet Singh", "Implemented support for multiple values for SerializedName annotation.", "10/03/15, 09:01:16 AM", "Inderjeet Singh", "109915d93a2b36c26b49c0fabb1947a5a892cb25", ["gson/pom.xml", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java"], "@@ -3,7 +3,7 @@\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n   <packaging>jar</packaging>\n-  <version>2.3.2-SNAPSHOT</version>\n+  <version>2.4-SNAPSHOT</version>\n   <inceptionYear>2008</inceptionYear>\n   <name>Gson</name>\n   <parent>, @@ -33,30 +33,43 @@\n  *\n  * <p>Here is an example of how this annotation is meant to be used:</p>\n  * <pre>\n- * public class SomeClassWithFields {\n- *   &#64SerializedName(\"name\") private final String someField;\n- *   private final String someOtherField;\n+ * public class MyClass {\n+ *   &#64SerializedName(\"name\") String a;\n+ *   &#64SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+ *   String c;\n  *\n- *   public SomeClassWithFields(String a, String b) {\n- *     this.someField = a;\n- *     this.someOtherField = b;\n+ *   public MyClass(String a, String b, String c) {\n+ *     this.a = a;\n+ *     this.b = b;\n+ *     this.c = c;\n  *   }\n  * }\n  * </pre>\n  *\n  * <p>The following shows the output that is generated when serializing an instance of the\n  * above example class:</p>\n  * <pre>\n- * SomeClassWithFields objectToSerialize = new SomeClassWithFields(\"a\", \"b\");\n+ * MyClass target = new MyClass(\"v1\", \"v2\", \"v3\");\n  * Gson gson = new Gson();\n- * String jsonRepresentation = gson.toJson(objectToSerialize);\n- * System.out.println(jsonRepresentation);\n+ * String json = gson.toJson(target);\n+ * System.out.println(json);\n  *\n  * ===== OUTPUT =====\n- * {\"name\":\"a\",\"someOtherField\":\"b\"}\n+ * {\"name\":\"v1\",\"name1\":\"v2\",\"c\":\"v3\"}\n  * </pre>\n  *\n  * <p>NOTE: The value you specify in this annotation must be a valid JSON field name.</p>\n+ * While deserializing, all values specified in the annotation will be deserialized into the field.\n+ * For example:\n+ * <pre>\n+ *   MyClass target = gson.fromJson(\"{'name1':'v1'}\", MyClass.class);\n+ *   assertEquals(\"v1\", target.b);\n+ *   target = gson.fromJson(\"{'name2':'v2'}\", MyClass.class);\n+ *   assertEquals(\"v2\", target.b);\n+ *   target = gson.fromJson(\"{'name3':'v3'}\", MyClass.class);\n+ *   assertEquals(\"v3\", target.b);\n+ * </pre>\n+ * Note that MyClass.b is now deserialized from either name1, name2 or name3.\n  *\n  * @see com.google.gson.FieldNamingPolicy\n  *\n@@ -68,7 +81,9 @@\n public @interface SerializedName {\n \n   /**\n-   * @return the desired name of the field when it is serialized\n+   * @return the desired names of the field when it is deserialized or serialized. All of the specified names will be deserialized from.\n+   *   The specified first name is what is used for serialization.\n    */\n   String value();\n+  String[] alternate() default {};\n }, @@ -16,6 +16,16 @@\n \n package com.google.gson.internal.bind;\n \n+import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n import com.google.gson.FieldNamingStrategy;\n import com.google.gson.Gson;\n import com.google.gson.JsonSyntaxException;\n@@ -32,13 +42,6 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n \n /**\n  * Type adapter that reflects over the fields and methods of a class.\n@@ -63,13 +66,24 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);\n   }\n \n-  private String getFieldName(Field f) {\n+  /** first element holds the default name */\n+  private List<String> getFieldNames(Field f) {\n     return getFieldName(fieldNamingPolicy, f);\n   }\n \n-  static String getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n+  /** first element holds the default name */\n+  static List<String> getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n     SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n+    List<String> fieldNames = new LinkedList<String>();\n+    if (serializedName == null) {\n+      fieldNames.add(fieldNamingPolicy.translateName(f));\n+    } else {\n+      fieldNames.add(serializedName.value());\n+      for (String alternate : serializedName.alternate()) {\n+        fieldNames.add(alternate);\n+      }\n+    }\n+    return fieldNames;\n   }\n \n   public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n@@ -139,9 +153,16 @@ public boolean writeField(Object value) throws IOException, IllegalAccessExcepti\n         }\n         field.setAccessible(true);\n         Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n-        BoundField boundField = createBoundField(context, field, getFieldName(field),\n-            TypeToken.get(fieldType), serialize, deserialize);\n-        BoundField previous = result.put(boundField.name, boundField);\n+        List<String> fieldNames = getFieldNames(field);\n+        BoundField previous = null;\n+        for (int i = 0; i < fieldNames.size(); ++i) {\n+          String name = fieldNames.get(i);\n+          if (i != 0) serialize = false; // only serialize the default name\n+          BoundField boundField = createBoundField(context, field, name,\n+              TypeToken.get(fieldType), serialize, deserialize);\n+          BoundField replaced = result.put(name, boundField);\n+          if (previous == null) previous = replaced;\n+        }\n         if (previous != null) {\n           throw new IllegalArgumentException(declaredType\n               + \" declares multiple JSON fields named \" + previous.name);, @@ -727,6 +727,9 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n           if (annotation != null) {\n             name = annotation.value();\n+            for (String alternate : annotation.alternate()) {\n+              nameToConstant.put(alternate, constant);\n+            }\n           }\n           nameToConstant.put(name, constant);\n           constantToName.put(constant, name);, @@ -0,0 +1,54 @@\n+/*\n+ * Copyright (C) 2015 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import junit.framework.TestCase;\n+\n+public final class SerializedNameTest extends TestCase {\n+  private final Gson gson = new Gson();\n+\n+  public void testFirstNameIsChosenForSerialization() {\n+    MyClass target = new MyClass(\"v1\", \"v2\");\n+    // Ensure name1 occurs exactly once, and name2 and name3 dont appear\n+    assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n+  }\n+\n+  public void testMultipleNamesDeserializedCorrectly() {\n+    assertEquals(\"v1\", gson.fromJson(\"{'name':'v1'}\", MyClass.class).a);\n+\n+    // Both name1 and name2 gets deserialized to b\n+    assertEquals(\"v11\", gson.fromJson(\"{'name1':'v11'}\", MyClass.class).b);\n+    assertEquals(\"v2\", gson.fromJson(\"{'name2':'v2'}\", MyClass.class).b);\n+    assertEquals(\"v3\", gson.fromJson(\"{'name3':'v3'}\", MyClass.class).b);\n+  }\n+\n+  public void testMultipleNamesInTheSameString() {\n+    // The last value takes precedence\n+    assertEquals(\"v3\", gson.fromJson(\"{'name1':'v1','name2':'v2','name3':'v3'}\", MyClass.class).b);\n+  }\n+\n+  private static final class MyClass {\n+    @SerializedName(\"name\") String a;\n+    @SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+    MyClass(String a, String b) {\n+      this.a = a;\n+      this.b = b;\n+    }\n+  }\n+}, ", 118, 25, "\"modified, modified, modified, modified, added, \"", 143], 1], ["700", "Expose serializeNulls with an accessor.", "Jesse Wilson", "swankjesse", "09/08/15, 02:44:05 AM", "Useful for frameworks that build on Gson.", "Your local copy is so old (how old is it?) that the SHA on which this branch is based didn't have a `.travis.yml`.\n =||= Yeah, something is unhappy here. Won't happen again!\n =||= ", ["700", "Expose serializeNulls with an accessor.", "Jesse Wilson", "swankjesse", "09/08/15, 02:44:05 AM", "Useful for frameworks that build on Gson.", "NaN"], ["jwilson", "Expose serializeNulls with an accessor.\n\nUseful for frameworks that build on Gson.", "09/08/15, 02:31:43 AM", "jwilson", "ff2c8f8e8b118278947755898cb6c75dfc7e90ff", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -246,6 +246,11 @@ public Gson() {\n     this.factories = Collections.unmodifiableList(factories);\n   }\n \n+  /** Returns true if this Gson instance writes fields with null values. */\n+  public boolean serializeNulls() {\n+    return serializeNulls;\n+  }\n+\n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n     if (serializeSpecialFloatingPointValues) {\n       return TypeAdapters.DOUBLE;, ", 5, 0, "\"modified, \"", 5], 1], ["703", "Prefer long(timestamp) for default date serialization/deserialization.", "Ravshan Samandarov", "ravshansbox", "09/26/15, 11:16:05 PM", "NaN", "Too late to change, sorry. You can plug in your own date adapters if you like.\n =||= ", 0], ["704", "Expose newJsonWriter wrapper instead of just options.", "Jake Wharton", "JakeWharton", "09/26/15, 11:26:16 PM", "This is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly.", "LGTM\n =||= @JakeWharton  When did we introduce serializeNulls()? I presume it hasn't been released yet.\n =||= I don't understand the use-case of newJsonWriter(writer)? What would programmers use it for? Why can't they just use the Gson instance to do the same?\n =||= When you cache `TypeAdapter` instances you have no way of creating a `JsonWriter` whose configuration matches that of what the `Gson` instance would create. Instead, it has unsatisfactory behaviors like serializing nulls by default. This allows those caching (or bringing their own) `TypeAdapter` instances to serialize with the same settings as if they had just called one of the convenience methods on `Gson`.\n =||= @JakeWharton Thanks for the explanation. Yes, I have run into that as well.\nAlso, checked that serializeNulls was recently introduced and hence can be safely removed.\n =||= Yeah Jesse added that method for this very same use-case. But it only\nencompasses one of a few options that can be configured.\n\nOn Sun, Sep 27, 2015 at 5:01 PM inder123 notifications@github.com wrote:\n\n> @JakeWharton https://github.com/JakeWharton Thanks for the explanation.\n> Yes, I have run into that as well.\n> Also, checked that serializeNulls was recently introduced and hence can be\n> safely removed.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/704#issuecomment-143594847.\n =||= ", ["704", "Expose newJsonWriter wrapper instead of just options.", "Jake Wharton", "JakeWharton", "09/26/15, 11:26:16 PM", "This is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly.", "NaN"], ["Jake Wharton", "Expose newJsonWriter wrapper instead of just options.\n\nThis is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly.", "09/26/15, 11:19:38 PM", "Jake Wharton", "e81f3eba2731bac5b7b5a50e7218f9847a170d83", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -247,11 +247,6 @@ public Gson() {\n     this.factories = Collections.unmodifiableList(factories);\n   }\n \n-  /** Returns true if this Gson instance writes fields with null values. */\n-  public boolean serializeNulls() {\n-    return serializeNulls;\n-  }\n-\n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n     if (serializeSpecialFloatingPointValues) {\n       return TypeAdapters.DOUBLE;\n@@ -648,10 +643,9 @@ public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOExce\n   }\n \n   /**\n-   * Returns a new JSON writer configured for this GSON and with the non-execute\n-   * prefix if that is configured.\n+   * Returns a new JSON writer configured for the settings on this Gson instance.\n    */\n-  private JsonWriter newJsonWriter(Writer writer) throws IOException {\n+  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n     if (generateNonExecutableJson) {\n       writer.write(JSON_NON_EXECUTABLE_PREFIX);\n     }, ", 2, 8, "\"modified, \"", 10], 1], ["705", "Implemented equals and hashcode for LazilyParsedNumber to fix", "Inderjeet Singh", "inder123", "09/27/15, 09:25:04 PM", "https://github.com/google/gson/issues/627", "LGTM with some nitpicks\n =||= Great comments! incorporated them in the pull request.\n =||= ", ["705", "Implemented equals and hashcode for LazilyParsedNumber to fix", "Inderjeet Singh", "inder123", "09/27/15, 09:25:04 PM", "https://github.com/google/gson/issues/627", "NaN"], ["Inderjeet Singh", "incorporated code review feedback: optimized LazilyParsedNumber.equals/hashcode() by utilizing the fact that value is never passed as null.", "09/27/15, 08:58:01 PM", "Inderjeet Singh", "96b2ada79aeaa44e4c572b345563d0ee90dde5b1", ["gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java"], "@@ -26,6 +26,7 @@\n public final class LazilyParsedNumber extends Number {\n   private final String value;\n \n+  /** @param value must not be null */\n   public LazilyParsedNumber(String value) {\n     this.value = value;\n   }\n@@ -78,23 +79,18 @@ private Object writeReplace() throws ObjectStreamException {\n \n   @Override\n   public int hashCode() {\n-    return value == null ? 0 : value.hashCode();\n+    return value.hashCode();\n   }\n \n   @Override\n   public boolean equals(Object obj) {\n     if (this == obj) {\n       return true;\n     }\n-    if (obj == null || !(obj instanceof LazilyParsedNumber)) {\n-      return false;\n+    if (obj instanceof LazilyParsedNumber) {\n+      LazilyParsedNumber other = (LazilyParsedNumber) obj;\n+      return value == other.value || value.equals(other.value);\n     }\n-    LazilyParsedNumber other = (LazilyParsedNumber) obj;\n-    return equals(value, other.value);\n-  }\n-\n-  private static boolean equals(Object obj1, Object obj2) {\n-    if (obj1 == null) return obj2 == null;\n-    return obj1 == obj2 || obj1.equals(obj2);\n+    return false;\n   }\n }, ", 6, 10, "\"modified, \"", 16], 1], ["706", "Fixed javadoc for JsonWriter as reported in", "Inderjeet Singh", "inder123", "09/27/15, 01:11:07 AM", "https://github.com/google/gson/issues/623", ":+1:\n =||= ", ["706", "Fixed javadoc for JsonWriter as reported in", "Inderjeet Singh", "inder123", "09/27/15, 01:11:07 AM", "https://github.com/google/gson/issues/623", "NaN"], ["Inderjeet Singh", "Fixed javadoc for JsonWriter as reported in\nhttps://github.com/google/gson/issues/623", "09/27/15, 01:10:00 AM", "Inderjeet Singh", "1e9004403c619729ad1c49f070ab61427bd462c5", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -77,7 +77,7 @@\n  * This code encodes the above structure: <pre>   {@code\n  *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n  *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n- *     writer.setIndentSpaces(4);\n+ *     writer.setIndent(\"    \");\n  *     writeMessagesArray(writer, messages);\n  *     writer.close();\n  *   }, ", 1, 1, "\"modified, \"", 2], 1], ["707", "typo", "Dushyant Mistry", "dushmis", "09/27/15, 02:51:25 PM", "s/subytpes/subtypes/g", "NaN", ["707", "typo", "Dushyant Mistry", "dushmis", "09/27/15, 02:51:25 PM", "s/subytpes/subtypes/g", "NaN"], ["dushyant", "typo", "09/27/15, 10:31:27 AM", "dushyant", "2ecce944948e63f703e10cd34f4e2f410a7f3921", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -122,7 +122,7 @@ public T construct() {\n \n   /**\n    * Constructors for common interface types like Map and List and their\n-   * subytpes.\n+   * subtypes.\n    */\n   @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is\n   private <T> ObjectConstructor<T> newDefaultImplementationConstructor(, ", 1, 1, "\"modified, \"", 2], 1], ["709", "Fix javadoc of SerializedName", "Roman Mazur", "roman-mazur", "10/04/15, 07:11:20 PM", "In #699 the approach was changed but docs were left for the first implementation.", "NaN", ["709", "Fix javadoc of SerializedName", "Roman Mazur", "roman-mazur", "10/04/15, 07:11:20 PM", "In #699 the approach was changed but docs were left for the first implementation.", "NaN"], ["Roman Mazur", "Fix javadoc of SerializedName\n\nIn #699 the approach was changed but docs were left for the first implementation.", "10/04/15, 04:53:02 PM", "Roman Mazur", "3b1671dde97a6d564b3f4c3210fbe777dc3aa3d4", ["gson/src/main/java/com/google/gson/annotations/SerializedName.java"], "@@ -81,9 +81,11 @@\n public @interface SerializedName {\n \n   /**\n-   * @return the desired names of the field when it is deserialized or serialized. All of the specified names will be deserialized from.\n-   *   The specified first name is what is used for serialization.\n+   * @return the desired name of the field when it is serialized or deserialized\n    */\n   String value();\n+  /**\n+   * @return the alternative names of the field when it is deserialized\n+   */\n   String[] alternate() default {};\n }, ", 4, 2, "\"modified, \"", 6], 1], ["710", "Updating the ProtoTypeAdapter to support custom field names/values annotations", null, "AllInOneMighty", "10/07/15, 06:10:24 AM", "The current ProtoTypeAdapter is quite old, doesn't work for a few things correctly (I don't remember what exactly but it had some failures when I tried to use it), so I decided to update it and to make it better.\n\nThis version of ProtoTypeAdapter now:\n- Lets you customize the proto field name serialization per field\n- Lets you use different cases for serialization (e.g. you could use UpperCamelCase for your proto field names and willing to serialize them using LowerHyphen)\n- Lets you choose to serialize enum values with their value (0, 1, 2, ...) instead of their name.\n\nWe've been using it in prod for a while, I added quite a few unit tests to make sure everything works properly.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= :+1: \n =||= ", ["710", "Updating the ProtoTypeAdapter to support custom field names/values annotations", null, "AllInOneMighty", "10/07/15, 06:10:24 AM", "The current ProtoTypeAdapter is quite old, doesn't work for a few things correctly (I don't remember what exactly but it had some failures when I tried to use it), so I decided to update it and to make it better.\n\nThis version of ProtoTypeAdapter now:\n- Lets you customize the proto field name serialization per field\n- Lets you use different cases for serialization (e.g. you could use UpperCamelCase for your proto field names and willing to serialize them using LowerHyphen)\n- Lets you choose to serialize enum values with their value (0, 1, 2, ...) instead of their name.\n\nWe've been using it in prod for a while, I added quite a few unit tests to make sure everything works properly.", "NaN"], ["Emmanuel Cron", "Updating Gson version to 2.4", "10/07/15, 05:52:01 AM", "Emmanuel Cron", "503a9e536aabdfbfddc0833244274a1f814e5edb", ["proto/pom.xml"], "@@ -55,7 +55,7 @@\n     <dependency>\r\n       <groupId>com.google.code.gson</groupId>\r\n       <artifactId>gson</artifactId>\r\n-      <version>2.3.1</version>\r\n+      <version>2.4</version>\r\n       <scope>compile</scope>\r\n     </dependency>\r\n \r, ", 1, 1, "\"modified, \"", 2], 1], ["711", "Change Json string format in java before deserializing it to POJO using GSON", null, "ruisousa10", "10/09/15, 02:32:15 AM", "I have the following Json string:\n\n{\n  \"Status\": \"true\",\n  \"Result\": {\n    \"rows\": {\n      \"row\": {\n        \"status\": true,\n        \"subareas\": [\n          {\n            \"nome\": \"Associacao Utente\",\n            \"id\": 9,\n            \"grafs\": {\n              \"rows\": {\n                \"row\": {\n                  \"id\": 6,\n                  \"nome\": \"Associacao Utente\",\n                  \"tipo\": \"PIE\",\n                  \"serv\": \"MV_AS_UTENTE_POR_NEGOCIO\",\n                  \"periodo\": \"ANO\"\n                }\n              }\n            }\n          },\n          {\n            \"nome\": \"Chaves\",\n            \"id\": 60,\n            \"grafs\": {\n              \"rows\": [\n                {\n                  \"id\": 35,\n                  \"nome\": \"Chaves Criados por ano\",\n                  \"tipo\": \"LINHA\",\n                  \"serv\": \"MV_ASSOC_TOTAL_CHAVES\",\n                  \"periodo\": \"ANO\"\n                },\n                {\n                  \"id\": 592,\n                  \"nome\": \"Chaves Associado Ao User Portal\",\n                  \"tipo\": \"BAR\",\n                  \"serv\": \"MV_ASSOC_USER_CHAVES\",\n                  \"periodo\": \"TODOS\"\n                },\n                {\n                  \"id\": 593,\n                  \"nome\": \"Chaves Associado Ao Negocios\",\n                  \"tipo\": \"BAR\",\n                  \"serv\": \"MV_ASSOC_CHAVES\",\n                  \"periodo\": \"TODOS\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\nI'm suppose to deserialize it using GSON but i have an issue. If you look at the first \"subarea\" you will notice it as a \"grafs\" key like this:\n\"grafs\": {\n              \"rows\": {\n                \"row\": {\nand the second \"suberarea\" have \"grafs\" this way:\n \"grafs\": {\n              \"rows\": [\ni.e one is an object and the second an array. The is valid but the data is inconsistent, so i need to change this string programmaticaly, without touching the raw string since it comes from a server.\nHow can i change the string before deserialize. I want to make both \"grafs\" arrays.\n\nthanks for your help!", "Something like:\n\n``` java\npublic final class ListFromObjectAdapter implements TypeAdapterFactory {\n  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n    if (List.class != type.getRawType()) {\n      throw new AssertionError(\"Adapter can only be set on List type.\");\n    }\n    final TypeAdapter<T> delegateAdapter = gson.getDelegateAdapter(this, type);\n\n    Type collectionType = $Gson$Types.getCollectionElementType(type.getType(), type.getRawType());\n    final TypeAdapter<?> elementAdapter = gson.getAdapter(TypeToken.get(collectionType));\n\n    return new TypeAdapter<T>() {\n      @Override public void write(JsonWriter out, T value) throws IOException {\n        delegateAdapter.write(out, value);\n      }\n\n      @Override public T read(JsonReader in) throws IOException {\n        if (in.peek() != JsonToken.BEGIN_ARRAY) {\n          Object value = elementAdapter.read(in);\n          //noinspection unchecked\n          return (T) Collections.singletonList(value);\n        }\n        return delegateAdapter.read(in);\n      }\n    };\n  }\n\n  public static void main(String... args) {\n    String jsonCorrect = \"{\\\"things\\\":[\\\"hey!\\\"]}\";\n    String jsonBroken = \"{\\\"things\\\":\\\"hey!\\\"}\";\n\n    Gson gson = new Gson();\n    Test testCorrect = gson.fromJson(jsonCorrect, Test.class);\n    System.out.println(\"Correct: \" + testCorrect.things);\n    Test testBroken = gson.fromJson(jsonBroken, Test.class);\n    System.out.println(\"Broken (but fixed!): \" + testBroken.things);\n  }\n\n  private static class Test {\n    @JsonAdapter(ListFromObjectAdapter.class)\n    List<String> things;\n  }\n}\n```\n\nNote: this uses Gson's internal `$Gson$Types` class which is subject to change, deletion, or general breakage at any time!\n =||= Output is:\n\n```\nCorrect: [hey!]\nBroken (but fixed!): [hey!]\n```\n =||= @JakeWharton  Using @JsonAdapter in my class it's giving me this error.\n\n![listfromobject](https://cloud.githubusercontent.com/assets/15041888/10394480/abc892ac-6e7e-11e5-8184-e4732ada5203.JPG)\n =||= Are you using Gson 2.4?\n\nOn Fri, Oct 9, 2015, 9:11 AM ruisousa10 notifications@github.com wrote:\n\n> Using @JsonAdapter in my class it's giving me this error.\n> \n> [image: listfromobject]\n> https://cloud.githubusercontent.com/assets/15041888/10394480/abc892ac-6e7e-11e5-8184-e4732ada5203.JPG\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/711#issuecomment-146867373.\n =||= @JakeWharton 2.2.4\n =||= Then you likely are importing the wrong versions of those classes. Both\nshould be coming from Gson's package. $Gson$Types comes from the 'internal'\npackage.\n\nOn Fri, Oct 9, 2015 at 10:20 AM ruisousa10 notifications@github.com wrote:\n\n> Yes\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/711#issuecomment-146884745.\n =||= @JakeWharton i've imported $Gson$Types and still gives me the error. Should i use Gson 2.4?\n =||= @JakeWharton it is working with Gson 2.4. The only issue i have now is the following. Those null are values, but it is showing as nulls in the output.\n\n![listfromobject](https://cloud.githubusercontent.com/assets/15041888/10397320/30c39f10-6e8e-11e5-9ee5-d99422d5b68a.JPG)\n\nI think i'm on the right way, almost there, thanks to you.\n =||= ", 0], ["713", "Pro-guard issue", "TonyTang", "TonyTangAndroid", "10/18/15, 05:21:33 PM", "I don't believe that the following code snippets should be added in the proguard.cfg.\n\n-keep public class \\* {\n    public protected *;\n}\n\nIt will cause all methods will included.", "Who told you to add it?\n =||= Sorry, I had thought that I added the link. The code is  from the following link between Line 66 to 68:\n\nhttps://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg\n\nAs it is from official example, it could be misleading for beginners. And I did not pay attention to it when I was copying the pro guard snippet.\n =||= Ah, ok. I looked in a few places but couldn't find it! Yeah we should get that changed.\n =||= Good to know that. Thank you very much for getting back to this issue so quickly. \n =||= ", 0], ["715", "Moved the .gitignore file to a more appropriate place", null, "AllInOneMighty", "10/21/15, 07:07:58 AM", "That will avoid committing the generated/ folder that is useless in the repository.", ":+1: \n =||= ", ["715", "Moved the .gitignore file to a more appropriate place", null, "AllInOneMighty", "10/21/15, 07:07:58 AM", "That will avoid committing the generated/ folder that is useless in the repository.", "NaN"], ["Emmanuel Cron", "Merge https://github.com/google/gson", "10/20/15, 07:09:17 PM", "Emmanuel Cron", "83aa8ca55548381c79f886d57fd8f4db863a84d3", ["examples/android-proguard-example/proguard.cfg"], "@@ -1,77 +1,3 @@\n-##---------------Begin: proguard configuration common for all Android apps ----------\n--optimizationpasses 5\n--dontusemixedcaseclassnames\n--dontskipnonpubliclibraryclasses\n--dontskipnonpubliclibraryclassmembers\n--dontpreverify\n--verbose\n--dump class_files.txt\n--printseeds seeds.txt\n--printusage unused.txt\n--printmapping mapping.txt\n--optimizations !code/simplification/arithmetic,!field/*,!class/merging/*\n-\n--allowaccessmodification\n--keepattributes *Annotation*\n--renamesourcefileattribute SourceFile\n--keepattributes SourceFile,LineNumberTable\n--repackageclasses ''\n-\n--keep public class * extends android.app.Activity\n--keep public class * extends android.app.Application\n--keep public class * extends android.app.Service\n--keep public class * extends android.content.BroadcastReceiver\n--keep public class * extends android.content.ContentProvider\n--keep public class * extends android.app.backup.BackupAgentHelper\n--keep public class * extends android.preference.Preference\n--keep public class com.android.vending.licensing.ILicensingService\n--dontnote com.android.vending.licensing.ILicensingService\n-\n-# Explicitly preserve all serialization members. The Serializable interface\n-# is only a marker interface, so it wouldn't save them.\n--keepclassmembers class * implements java.io.Serializable {\n-    static final long serialVersionUID;\n-    private static final java.io.ObjectStreamField[] serialPersistentFields;\n-    private void writeObject(java.io.ObjectOutputStream);\n-    private void readObject(java.io.ObjectInputStream);\n-    java.lang.Object writeReplace();\n-    java.lang.Object readResolve();\n-}\n-\n-# Preserve all native method names and the names of their classes.\n--keepclasseswithmembernames class * {\n-    native <methods>;\n-}\n-\n--keepclasseswithmembernames class * {\n-    public <init>(android.content.Context, android.util.AttributeSet);\n-}\n-\n--keepclasseswithmembernames class * {\n-    public <init>(android.content.Context, android.util.AttributeSet, int);\n-}\n-\n-# Preserve static fields of inner classes of R classes that might be accessed\n-# through introspection.\n--keepclassmembers class **.R$* {\n-  public static <fields>;\n-}\n-\n-# Preserve the special static methods that are required in all enumeration classes.\n--keepclassmembers enum * {\n-    public static **[] values();\n-    public static ** valueOf(java.lang.String);\n-}\n-\n--keep public class * {\n-    public protected *;\n-}\n-\n--keep class * implements android.os.Parcelable {\n-  public static final android.os.Parcelable$Creator *;\n-}\n-##---------------End: proguard configuration common for all Android apps ----------\n-\n ##---------------Begin: proguard configuration for Gson  ----------\n # Gson uses generic type information stored in a class file when working with fields. Proguard\n # removes such information by default, so configure it to keep all of it., ", 0, 74, "\"modified, \"", 74], 1], ["716", "Perf: Moving string length calculation to local variable.", "Chris Arriola", "arriolac", "10/21/15, 01:39:29 AM", "Performance improvement by moving string length calculation to local variable. Previous implementation calculated the string's length for each each loop iteration.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= This method is intrinsic.\n =||= Yikes. I thought `length()` was O(n). However, this is still a very minor pref improvement because of the cost of making a method call.\n =||= The cost of the method call is like, actually zero. You should send us performance improvements, but they should be based on performance problems, not speculation.\n =||= Thanks for the PR though. I want you to send me something that makes a measured improvement, with before/after benchmarks!\n =||= ", 0], ["717", "Support for anonymous class serialization", "Jedediah Smith", "jedediah", "10/22/15, 04:40:54 AM", "Add a flag to `GsonBuilder` that lets anonymous classes through the serialization pipeline. Among other things, this allows for convenient creation of ad-hoc documents e.g.:\n\n```\ngson.toJson(new Object() {\n    final int things = 17;\n    final String stuff = \"fun\";\n});\n```\n### Rationale\n\nCurrently, anonymous classes are silently dropped or replaced with null, unconditionally. This is needlessly restrictive, and likely to take developers by surprise. The Gson design document already says it best, though on a slightly different subject:\n\n> We could have chosen to restrict the serialization to support only generic collections, but chose not to. This is because often the user of the library are concerned with either serialization or deserialization, but not both. In such cases, there is no need to artificially restrict the serialization capabilities. ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I'm not a fan. If you want this, just embed the raw JSON.\n =||= Like this?\n\n`\"{\\\"things\\\":17,\\\"stuff\\\":\\\"fun\\\"}\"`\n\nPretty gross IMHO, particularly the manual string escaping. And if the values are anything non-trivial, you have to serialize them and splice them in, which is even more gross. And you get no syntax checking or anything else you might have in the serialization pipeline. And any serialization API layers you have on top of Gson have to accept raw strings as well as objects.\n\nBut the ad-hoc objects were just the simplest example I could think of. Here is the reason _we_ want this IRL: We use interfaces to define JSON messages, like this:\n\n``` java\ninterface NameChange {\n    String name();\n}\n\n```\n\nCustom serializers know to call the getter method. We use interfaces instead of classes because they are composable, and to avoid copying values, and to ensure that messages are complete. It's a nice system.\n\nIt would be much nicer though if we could implement messages inline, like this:\n\n``` java\nvoid changeName(User user) {\n    send(gson.toJson(new NameChange() {\n        @Override String name() { return user.getName(); }\n    }));\n}\n```\n\nUnfortunately, Gson makes it absolutely impossible to pass anonymous classes through the pipeline, no matter how much we are willing to customize it. There's no reason we shouldn't be able to opt-in to allow them.\n =||= How would you deserialize this?\n =||= Nothing per-se prevents Gson from deserializing an anonymous class. If it's also a non-static inner class, i.e. bound to an outer instance, then it can't be deserialized without a custom instance creator, but that is equally true for named inner classes, which Gson is happy to work with. An anonymous class from a static context can be deserialized just fine, as far as I know.\n\nRegardless, you would have to write some pretty strange looking code to even attempt to deserialize an anonymous class. If someone actually goes to the trouble of doing it, there's no reason for Gson to stand in their way.\n =||= I think you might have better luck with another framework. Gson is opinionated and the pattern you've invented that causes this requirement doesn't fit with the rest of the project.\n =||= ", 0], ["719", "Fix type hierarchy adapters to do a runtime check.", "Jesse Wilson", "swankjesse", "10/22/15, 04:29:01 PM", "Otherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.", ":+1: \n =||= ", ["719", "Fix type hierarchy adapters to do a runtime check.", "Jesse Wilson", "swankjesse", "10/22/15, 04:29:01 PM", "Otherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.", "NaN"], ["jwilson", "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.", "10/21/15, 03:40:24 PM", "jwilson", "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -16,6 +16,22 @@\n \n package com.google.gson.internal.bind;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.internal.LazilyParsedNumber;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -34,23 +50,6 @@\n import java.util.StringTokenizer;\n import java.util.UUID;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonIOException;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.JsonSyntaxException;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.TypeAdapterFactory;\n-import com.google.gson.annotations.SerializedName;\n-import com.google.gson.internal.LazilyParsedNumber;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n-import com.google.gson.stream.JsonWriter;\n-\n /**\n  * Type adapters for basic types.\n  */\n@@ -815,12 +814,33 @@ public void write(JsonWriter out, T value) throws IOException {\n     };\n   }\n \n-  public static <TT> TypeAdapterFactory newTypeHierarchyFactory(\n-      final Class<TT> clazz, final TypeAdapter<TT> typeAdapter) {\n+  /**\n+   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n+   * that the deserialized type matches the type requested.\n+   */\n+  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n+      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n     return new TypeAdapterFactory() {\n       @SuppressWarnings(\"unchecked\")\n-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n-        return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter<T>) typeAdapter : null;\n+      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n+        final Class<? super T2> requestedType = typeToken.getRawType();\n+        if (!clazz.isAssignableFrom(requestedType)) {\n+          return null;\n+        }\n+        return (TypeAdapter<T2>) new TypeAdapter<T1>() {\n+          @Override public void write(JsonWriter out, T1 value) throws IOException {\n+            typeAdapter.write(out, value);\n+          }\n+\n+          @Override public T1 read(JsonReader in) throws IOException {\n+            T1 result = typeAdapter.read(in);\n+            if (result != null && !requestedType.isInstance(result)) {\n+              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n+                  + \" but was \" + result.getClass().getName());\n+            }\n+            return result;\n+          }\n+        };\n       }\n       @Override public String toString() {\n         return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";, @@ -15,6 +15,21 @@\n  */\n package com.google.gson.functional;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Type;\n@@ -40,24 +55,8 @@\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n-\n import junit.framework.TestCase;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.TypeAdapter;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n-\n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n  * support is provided in Gson. The tests for Map types are available in {@link MapTest}.\n@@ -479,7 +478,8 @@ public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws E\n     Gson gson = new GsonBuilder()\n         .setDateFormat(pattern)\n         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n-          public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+          public Date deserialize(JsonElement json, Type typeOfT,\n+              JsonDeserializationContext context)\n               throws JsonParseException {\n             return new Date(1315806903103L);\n           }\n@@ -618,6 +618,16 @@ public void testJsonNullDeserialization() {\n     assertEquals(JsonNull.INSTANCE, gson.fromJson(\"null\", JsonNull.class));\n   }\n \n+  public void testJsonElementTypeMismatch() {\n+    try {\n+      gson.fromJson(\"\\\"abc\\\"\", JsonObject.class);\n+      fail();\n+    } catch (JsonSyntaxException expected) {\n+      assertEquals(\"Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive\",\n+          expected.getMessage());\n+    }\n+  }\n+\n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n     ClassWithBigDecimal(String value) {, ", 68, 38, "\"modified, modified, \"", 106], 1], ["721", "Publish version 2.4 to jcenter", "Sergey Chelombitko", "technoir42", "10/22/15, 07:35:52 PM", "Hi!\nCould you please upload the latest version to jcenter? Thanks!", "Why? It proxies maven central.\n =||= True. It turned out I just forgot to turn off the offline mode. Sorry.\n =||= ", 0], ["724", "Thread safe method cache", "Chris Conroy", "cconroy", "10/28/15, 11:59:23 PM", "NaN", "Is `MapMaker` major overkill? Would adding `synchronized` on the requesting method be sufficient?\n =||= Upon further inspection, this entire thing is doing things the Gson 1.x way which is slow and bad. The right long term fix is to migrate this to `TypeAdapterFactory` which would mean we'd look up the method once, rather than once per field being decoded.\n\nIn the interim, this seems reasonable enough.\n =||= If you and @dragonsinth wanna port this to `TypeAdapterFactory`, everything will be faster & we won't need this memory-hungry cache!\n =||= yeah, perhaps i'll tackle that during hackweek\n =||= ", ["724", "Thread safe method cache", "Chris Conroy", "cconroy", "10/28/15, 11:59:23 PM", "NaN", "NaN"], ["Chris Conroy", "Thread safe method cache", "10/28/15, 12:01:38 AM", "Chris Conroy", "7abeb1608064abd19129ef7bcaf781dbd3ed26e9", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -20,6 +20,7 @@\n \n import com.google.common.base.CaseFormat;\n import com.google.common.base.Converter;\n+import com.google.common.collect.MapMaker;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n@@ -44,10 +45,10 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentMap;\n \n /**\n  * GSON type adapter for protocol buffers that knows how to serialize enums either by using their\n@@ -190,6 +191,9 @@ public static Builder newBuilder() {\n   private static final com.google.protobuf.Descriptors.FieldDescriptor.Type ENUM_TYPE =\n       com.google.protobuf.Descriptors.FieldDescriptor.Type.ENUM;\n \n+  private static final ConcurrentMap<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n+      new MapMaker().makeMap();\n+\n   private final EnumSerialization enumSerialization;\n   private final Converter<String, String> fieldNameSerializationFormat;\n   private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n@@ -380,18 +384,23 @@ private EnumValueDescriptor findValueByNameAndExtension(EnumDescriptor desc,\n     }\n   }\n \n-  private static Method getCachedMethod(Class<?> clazz, String methodName)\n-      throws NoSuchMethodException {\n-    if (!mapOfMapOfMethods.containsKey(methodName)) {\n-      mapOfMapOfMethods.put(methodName, new HashMap<Class<?>, Method>());\n-    }\n+  private static Method getCachedMethod(Class<?> clazz, String methodName,\n+      Class<?>... methodParamTypes) throws NoSuchMethodException {\n     Map<Class<?>, Method> mapOfMethods = mapOfMapOfMethods.get(methodName);\n-    if (!mapOfMethods.containsKey(clazz)) {\n-      mapOfMethods.put(clazz, clazz.getMethod(methodName));\n+    if (mapOfMethods == null) {\n+      mapOfMethods = new MapMaker().makeMap();\n+      Map<Class<?>, Method> previous =\n+          mapOfMapOfMethods.putIfAbsent(methodName, mapOfMethods);\n+      mapOfMethods = previous == null ? mapOfMethods : previous;\n+    }\n+\n+    Method method = mapOfMethods.get(clazz);\n+    if (method == null) {\n+      method = clazz.getMethod(methodName, methodParamTypes);\n+      mapOfMethods.putIfAbsent(clazz, method);\n+      // NB: it doesn't matter which method we return in the event of a race.\n     }\n-    return mapOfMethods.get(clazz);\n+    return method;\n   }\n \n-  private static Map<String, Map<Class<?>, Method>> mapOfMapOfMethods =\n-      new HashMap<String, Map<Class<?>, Method>>();\n }, ", 20, 11, "\"modified, \"", 31], 1], ["726", "java.lang.IncompatibleClassChangeError", "Khalid Eldehairy", "kdehairy", "11/16/15, 11:55:55 PM", "I'm getting this crash lately. It complains about SerializedName class missing the \"value\" method.\n\nThis is the stacktrace:\n\n```\njava.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\nat libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\nat libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\nat libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\nat java.lang.reflect.Field.getAnnotation(Field.java:242)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\nat com.google.gson.Gson.getAdapter(Gson.java:359)\nat com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)\nat com.google.gson.Gson.getAdapter(Gson.java:359)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.(ReflectiveTypeAdapterFactory.java:92)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\nat com.google.gson.Gson.getAdapter(Gson.java:359)\nat com.google.gson.Gson.fromJson(Gson.java:809)\nat com.google.gson.Gson.fromJson(Gson.java:875)\nat com.google.gson.Gson.fromJson(Gson.java:848)\n```", "Any ideas how to fix/omit this problem. I have been reading about this issue and it looks it is realted to Annotations handling on Android 5+ devices (mostly Samsung). \nThe related issues are:\nhttps://code.google.com/p/android/issues/detail?id=172339\nhttp://developer.samsung.com/forum/board/thread/view.do?boardName=General&messageId=280930\n =||= Did you upgrade to Gson 2.4? Try downgrading to Gson 2.3.1 and see if that fixes the problem.\n =||= Actually I had version 2.2.4. Is it still a case?\n =||= No, in that case, it is some other issue.\n =||= No action for us to take here.\n =||= Any hints there?\nI changed JSON library from Gson to Jackson and the problem is the same. I get exceptions \njava.lang.IncompatibleClassChangeError: Couldn't find com.fasterxml.jackson.annotation.JsonProperty.value\n\nAny ideas how to omit this? Maybe different version of Android annotation from V4 library?\nIt looks like millions of apps across the world are affected because who doesn't use JSON with annotations processing?\n =||= That seems a stretch, our app uses Gson and annotation processing and does\nnot experience this problem.\n\nOn Mon, Nov 23, 2015 at 12:33 PM Dominik Tomczak notifications@github.com\nwrote:\n\n> Any hints there?\n> I changed JSON library from Gson to Jackson and the problem is the same. I\n> get exceptions\n> java.lang.IncompatibleClassChangeError: Couldn't find\n> com.fasterxml.jackson.annotation.JsonProperty.value\n> \n> Any ideas how to omit this? Maybe different version of Android annotation\n> from V4 library?\n> It looks like millions of apps across the world are affected because who\n> doesn't use JSON with annotations processing?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/726#issuecomment-159005293.\n =||= Really odd. I can see on my error console growing number of that exceptions.\nPreviously it was:\n(GSON)\njava.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\n\n(Jackson)\nNow it is:\njava.lang.IncompatibleClassChangeError: Couldn't find com.fasterxml.jackson.annotation.JsonProperty.value\n\nI use Eclipse, Android 23 (6.0 SDK) as build SDK and latest v4/v7 libraries. I don't add special proguard file, it is a default one.\nI can see this error being reported for Samsung 5.+ devices. \nAny ideas are highly appreciated.\n\nThanks\n =||= I digged into this issue. It happens with _any_ annotation class with a \"value\" method in it. SerializedName it is or other.\nIn the libcore code, it tries to grap the Method with the \"value\" name through reflection, and for some reason it fails to find it \"MethodNotFound\" exception which is re-thrown as what we see here.\nIt is not related to gson specifically as I can see.\n =||= I'm from Optimizely, and we have some clients who are seeing this issue as well.  Is this something that can be fixed?\n =||= We did some research and patched gson to make sure that the annotation would not use `value` and used a dedicated name for the annotation value. We basically we added a new annotation: `@SerializedNamePatched(json = 'foo')` vs `@SerializedName('foo')`. For reference code is available in https://github.com/potyl/gson/tree/booking/serialized-name-2.4 with unit tests changes too.\n\nTurns out that this ended up causing crashes too, so the problem is not with the annotation using `value`.\n\nThe new crash we get:\n\n```\njava.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedNamePatched.name\n  at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\n  at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\n  at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\n  at java.lang.reflect.Field.getAnnotation(Field.java:242)\n  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:79)\n  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:72)\n  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:167)\n  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:108)\n  at com.google.gson.Gson.getAdapter(Gson.java:360)\n  at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)\n  at com.google.gson.Gson.getAdapter(Gson.java:360)\n  at com.google.gson.Gson.fromJson(Gson.java:813)\n  at com.google.gson.Gson.fromJson(Gson.java:779)\n  at com.google.gson.Gson.fromJson(Gson.java:728)\n```\n\nTL;DR the problem is not with the annotation using `value` but with the loading of the annotation.\n =||= Likely a build tools problem. Using ProGuard or similar? Those tools wreck your code.\n =||= I turned off ProGuard but it's still a problem. It's all affected Samsung 5.0 Devices \n![untitled](https://cloud.githubusercontent.com/assets/867179/11953723/e2a99d80-a8d4-11e5-9c13-191774f77368.png)\n =||= It looks like only Samsung Android 5 devices have this issue indeed\n\n![screenshot from 2015-12-23 13 27 10](https://cloud.githubusercontent.com/assets/130584/11979244/e9ad814c-a978-11e5-8b8f-bcc2d3d8f956.png)\n =||= We are also seeing this crash with gson 2.3.1 on Android 5 on Samsung.\n\n![screen shot 2016-02-25 at 1 21 12 pm](https://cloud.githubusercontent.com/assets/1451634/13334810/af20eb50-dbc2-11e5-9923-94880fb23ae8.png)\n =||= Anyone got a fix for this? I am also facing this issue.\n =||= Im also getting this error in Samsung device when users update app from play store.\n\nPlease check below log.\n\n```\njava.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\n    at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\n    at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\n    at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\n    at java.lang.reflect.Field.getAnnotation(Field.java:242)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n    at com.google.gson.Gson.getAdapter(Gson.java:359)\n    at com.google.gson.Gson.fromJson(Gson.java:809)\n    at com.google.gson.Gson.fromJson(Gson.java:775)\n    at com.google.gson.Gson.fromJson(Gson.java:724)\n    at com.google.gson.Gson.fromJson(Gson.java:696)\n    at com.cubii.utils.SessionManager.getUserID(SessionManager.java:70)\n    at com.cubii.BluetoothLeService.broadcastUpdate(BluetoothLeService.java:188)\n    at com.cubii.BluetoothLeService.access$400(BluetoothLeService.java:47)\n    at com.cubii.BluetoothLeService$1.onCharacteristicChanged(BluetoothLeService.java:139)\n    at android.bluetooth.BluetoothGatt$1.onNotify(BluetoothGatt.java:443)\n    at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:399)\n    at android.os.Binder.execTransact(Binder.java:446)\n```\n =||= Is the same error?\n\n```\nFatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.a.c.a\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\n       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\n       at java.lang.reflect.Field.getAnnotation(Field.java:242)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(SourceFile:76)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(SourceFile:71)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(SourceFile:156)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(SourceFile:97)\n       at com.google.gson.Gson.getAdapter(SourceFile:407)\n       at com.google.gson.Gson.fromJson(SourceFile:860)\n       at com.google.gson.Gson.fromJson(SourceFile:826)\n       at com.google.gson.Gson.fromJson(SourceFile:775)\n       at com.google.gson.Gson.fromJson(SourceFile:747)\n       at com.anyapp.common.GsonUtil.parse(SourceFile:23)\n       at com.anyapp.dataprovider.network.UsersService$3$1.onDataChange(SourceFile:174)\n       at com.firebase.client.Query$1.onDataChange(SourceFile:144)\n       at com.firebase.client.core.ValueEventRegistration.fireEvent(SourceFile:53)\n       at com.firebase.client.core.view.DataEvent.fire(SourceFile:45)\n       at com.firebase.client.core.view.EventRaiser$1.run(SourceFile:38)\n       at android.os.Handler.handleCallback(Handler.java:739)\n       at android.os.Handler.dispatchMessage(Handler.java:95)\n       at android.os.Looper.loop(Looper.java:145)\n       at android.app.ActivityThread.main(ActivityThread.java:5938)\n       at java.lang.reflect.Method.invoke(Method.java)\n       at java.lang.reflect.Method.invoke(Method.java:372)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1400)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1195)\n```\n =||= I've got the same issue here and using 2.6.2. Again Samsung devices on Android 5:\n\n`Caused by java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\n       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\n       at java.lang.reflect.Field.getAnnotation(Field.java:242)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:75)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:70)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:155)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\n       at com.google.gson.Gson.fromJson(Gson.java:878)\n       at com.google.gson.Gson.fromJson(Gson.java:844)\n       at com.google.gson.Gson.fromJson(Gson.java:793)\n       at com.google.gson.Gson.fromJson(Gson.java:765)`\n =||= I just update to 2.2.4 ,then solve this problem , but I  don not know why ? =||= Why is this issue closed? Was the resolution to rename all \"value\" keys? =||= Still getting these crashed on Samsung Android 5.0.1 devices =||= Any workaround? =||= Using gson 2.8.0 and still have the problem =||= +1 =||= Same thing here. Has anyone found a workaround for this?\r\n\r\n<img width=\"756\" alt=\"samsung5\" src=\"https://user-images.githubusercontent.com/2055468/31886578-487c6fe6-b7cb-11e7-9523-c3d645358553.png\">\r\n =||= Did anyone find a workaround for this? =||= This is constantly crashing our clients apps. While it only happens on a limited set of devices, it still makes up for more than 90% of our crashes. \r\nIs there anything that can be done, beside moving away from gson? =||= We are also facing this issue for Android 5 only, did anyone find any solution for this ? \r\nGSON : 2.8.0\r\n\r\n<img width=\"1166\" alt=\"screen shot 2018-03-24 at 12 11 35 pm\" src=\"https://user-images.githubusercontent.com/7509084/37861274-975dfdec-2f5c-11e8-90b0-400b47449f7c.png\">\r\n =||= 3 years later and this still happening with our app on Android 5 Samsung devices also! =||= Using Gson 2.8.5 and still experiencing the issue for Samsung lollipop devices. that's ridiculous.\r\nhttp://crashes.to/s/57554ed9414\r\nIs there a workaround really? =||= +1 =||= +1 Also seeing on 5.0 Lollipop Samsung.\r\n\r\nSilly question, but I suppose removing the annotations and making the POJO field names match the JSON will make the bad man go away? =||= @davros1970 I no longer work in the project where we had this issue, but I remember that we tried absolutely everything to get rid of this bug. If this bug is really annoying you the best thing is to try to move to another JSON parsing library. =||= Any updates on this? =||= I'm keep getting crashes on Samsung Galaxy Note 3 - Android 5.0:\r\n\r\n```\r\nFatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\r\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\r\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\r\n       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\r\n       at java.lang.reflect.Field.getAnnotation(Field.java:242)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:74)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:161)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n       at com.google.gson.Gson.toJson(Gson.java:696)\r\n       at com.google.gson.Gson.toJson(Gson.java:683)\r\n       at com.google.gson.Gson.toJson(Gson.java:638)\r\n       at com.google.gson.Gson.toJson(Gson.java:618)\r\n```\r\n\r\nIt looks like it can't convert to String Json if the class contains List or Object.\r\n\r\nThis is how the parsing made:\r\n`String data = new Gson().toJson(product);`\r\n\r\nAnd this is the **Product** model object:\r\n\r\n```\r\npublic class Product {\r\n        private String id;\r\n        private String name;\r\n        \r\n        private User user;\r\n        \r\n        public Product() {\r\n            \r\n        }\r\n    }\r\n```\r\n\r\nAs I said, I think the exception is thrown because the class contains another reference to another object. In my case is **User** =||= I have too many crashes  with Gson 2.8.1 only on Android 5 Samsung devices. Isn't there any solution for this issue yet?? =||= I am also facing the same issue only on Samsung 5.0 devices.\r\n![Screenshot 2019-05-16 at 5 01 47 PM](https://user-images.githubusercontent.com/2102271/57850837-99f5d680-77fc-11e9-8ffe-012920c33697.png)\r\n =||= After 4 Years, We are still facing the same crash and the sad part is we haven't got the fix and the Issue is in Closed state. =||= @morerohit86 If we wait 3,4 years more maybe Android 5 gonna get outdated and the issue will fix itself \u00af\\_(\u30c4)_/\u00af  =||= > I'm keep getting crashes on Samsung Galaxy Note 3 - Android 5.0:\r\n> \r\n> ```\r\n> Fatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\r\n>        at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\r\n>        at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\r\n>        at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\r\n>        at java.lang.reflect.Field.getAnnotation(Field.java:242)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:74)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:161)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)\r\n>        at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)\r\n>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)\r\n>        at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n>        at com.google.gson.Gson.toJson(Gson.java:696)\r\n>        at com.google.gson.Gson.toJson(Gson.java:683)\r\n>        at com.google.gson.Gson.toJson(Gson.java:638)\r\n>        at com.google.gson.Gson.toJson(Gson.java:618)\r\n> ```\r\n> \r\n> It looks like it can't convert to String Json if the class contains List or Object.\r\n> \r\n> This is how the parsing made:\r\n> `String data = new Gson().toJson(product);`\r\n> \r\n> And this is the **Product** model object:\r\n> \r\n> ```\r\n> public class Product {\r\n>         private String id;\r\n>         private String name;\r\n>         \r\n>         private User user;\r\n>         \r\n>         public Product() {\r\n>             \r\n>         }\r\n>     }\r\n> ```\r\n> \r\n> As I said, I think the exception is thrown because the class contains another reference to another object. In my case is **User**\r\n\r\nIs there any workaround for this problem? =||= Hi also have such crash. Any workaround ?  =||= Still have this crash, waiting for 5 to deprecate, so, it must be the only way to fix it :`( =||= ", 0], ["727", "can use gson to convert json into nested map ?", "DongYe", "lytasky", "11/04/15, 09:12:50 AM", "like that:\n {\"result\": {\n      \"update\": {\n           \"title\": \"\u53cc11\u62a210\u4ebf\u73b0\u91d1\u5238\u5566\",\n            \"msg\": \"\u5cf0\u5cf0\u8bf4\uff0c\u5347\u7ea7\u65b0\u7248\u4e4b\u540e\u53cc\u5341\u4e00\u62a2\u8d2d\u6760\u6760\u7684\uff01\u65b0\u7248\u8fd8\u6709\u4e0d\u4e00\u6837\u7684\u5cf0\u5cf0\u5f69\u86cb\u54e6\",\n},\n     \"ts\": 1446446129,\n}\nMap<String,Object> resultMap = new  HashMap<>();\nMap<String,Object> map1 = new  HashMap<>();\nmap1.put(\"title\",\"\u53cc11\u62a210\u4ebf\u73b0\u91d1\u5238\u5566\");\nmap1.put(\"msg\",\"\u5cf0\u5cf0\u8bf4\uff0c\u5347\u7ea7\u65b0\u7248\u4e4b\u540e\u53cc\u5341\u4e00\u62a2\u8d2d\u6760\u6760\u7684\uff01\u65b0\u7248\u8fd8\u6709\u4e0d\u4e00\u6837\u7684\u5cf0\u5cf0\u5f69\u86cb\u54e6\");\nresultMap.put(\"update\",map1);\nresultMap.put(\"ts\",\"1446446129\");\n\ncan gson do it above directly\uff1f", "If your type is Map<String, Map<String, String>> I can't imagine why not.\nYou'd need to use a Type rather than a Class, obtained from TypeToken,\nsince you're tryign to deserialize a parameterized type.\n\n```\nType typeOfT = new TypeToken<Map<String, Map<String,\nString>>>(){}.getType();\nMap<String, Map<String, String>> map = gson.fromJson(jsonString, typeOfT);\n```\n\nOn Tue, 3 Nov 2015 at 17:31 lytasky notifications@github.com wrote:\n\n> like that:\n> {\"result\": {\n> \"update\": {\n> \"title\": \"\u53cc11\u62a210\u4ebf\u73b0\u91d1\u5238\u5566\",\n> \"msg\": \"\u5cf0\u5cf0\u8bf4\uff0c\u5347\u7ea7\u65b0\u7248\u4e4b\u540e\u53cc\u5341\u4e00\u62a2\u8d2d\u6760\u6760\u7684\uff01\u65b0\u7248\u8fd8\u6709\u4e0d\u4e00\u6837\u7684\u5cf0\u5cf0\u5f69\u86cb\u54e6\",\n> },\n> \"ts\": 1446446129,\n> }\n> Map resultMap = new HashMap<>();\n> Map map1 = new HashMap<>();\n> map1.put(\"title\",\"\u53cc11\u62a210\u4ebf\u73b0\u91d1\u5238\u5566\");\n> map1.put(\"msg\",\"\u5cf0\u5cf0\u8bf4\uff0c\u5347\u7ea7\u65b0\u7248\u4e4b\u540e\u53cc\u5341\u4e00\u62a2\u8d2d\u6760\u6760\u7684\uff01\u65b0\u7248\u8fd8\u6709\u4e0d\u4e00\u6837\u7684\u5cf0\u5cf0\u5f69\u86cb\u54e6\");\n> resultMap.put(\"update\",map1);\n> resultMap.put(\"ts\",\"1446446129\");\n> \n> can gson do it above directly\uff1f\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/727.\n =||= my type is  Map<String,Map<String,Map<String,Map<String,String>>>> , map in map, the level is  indefinitely \uff0conly the deepest map is Map<String,String > \uff0c can gson do this \uff1f\n =||= ", 0], ["728", "minor modification", null, "wildpeanut", "11/05/15, 03:26:13 AM", "for internal IOException throw correct mapping Exception(JsonIOException)", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Unfortunately, I don't think this is compatible with what callers currently expect.\n =||= ", 0], ["729", "updated minimum JDK version to 1.6.", "Inderjeet Singh", "inder123", "11/05/15, 03:24:05 AM", "Added Overrides for methods implementing an interface.", "`String.isEmpty()` !\n =||= ", ["729", "updated minimum JDK version to 1.6.", "Inderjeet Singh", "inder123", "11/05/15, 03:24:05 AM", "Added Overrides for methods implementing an interface.", "NaN"], ["Inderjeet Singh", "Linking to JDK 6 javadocs", "11/05/15, 02:55:23 AM", "Inderjeet Singh", "79e1c669ed8e02dcd645a701fc6afa7de12225db", ["gson/pom.xml"], "@@ -189,7 +189,7 @@\n            <includePackageNames>com.google.gson</includePackageNames>\n            <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n             <links>\n-             <link>http://docs.oracle.com/javase/1.5.0/docs/api/</link>\n+             <link>http://docs.oracle.com/javase/6/docs/api/</link>\n            </links>\n            <version>true</version>\n            <show>protected</show>, ", 1, 1, "\"modified, \"", 2], 1], ["730", "Added support to serialize/deserialize ConcurrentMap and ConcurrentNa\u2026", "Inderjeet Singh", "inder123", "11/05/15, 12:25:34 PM", "\u2026vigableMap. This fixes https://github.com/google/gson/issues/624", "Isn't this like, particularly sketchy? Because it might be changing as we encode?\n =||= @swankjesse Please explain what you mean by \"encode\". \nWe already do something similar for Maps (use LinkedHashMap), and List. This is just an extension to support additional java.util.concurrent classes.\n =||= It's very weird to serialize a value that's under active modification. When would you do this?\n =||= Where is it under active modification? Are you saying it because it is a concurrent map? \n =||= For that matter, ANY java object can be under active modification while Gson is serializing it.\n =||= Works for me. I still think code that does this is weird, but I can imagine non-weird use cases.\n =||= ", ["730", "Added support to serialize/deserialize ConcurrentMap and ConcurrentNa\u2026", "Inderjeet Singh", "inder123", "11/05/15, 12:25:34 PM", "\u2026vigableMap. This fixes https://github.com/google/gson/issues/624", "NaN"], ["Inderjeet Singh", "Added support to serialize/deserialize ConcurrentMap and ConcurrentNavigableMap.", "11/05/15, 05:25:15 AM", "Inderjeet Singh", "fef43b2aaa4fd7cb8f0dff395980c69f614635af", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java", "gson/src/test/java/com/google/gson/functional/MapTest.java"], "@@ -16,10 +16,6 @@\n \n package com.google.gson.internal;\n \n-import com.google.gson.InstanceCreator;\n-import com.google.gson.JsonIOException;\n-import com.google.gson.reflect.TypeToken;\n-\n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.ParameterizedType;\n@@ -37,6 +33,14 @@\n import java.util.SortedSet;\n import java.util.TreeMap;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Returns a function that can construct an instance of a requested type.\n@@ -58,7 +62,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n     final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);\n     if (typeCreator != null) {\n       return new ObjectConstructor<T>() {\n-        public T construct() {\n+        @Override public T construct() {\n           return typeCreator.createInstance(type);\n         }\n       };\n@@ -70,7 +74,7 @@ public T construct() {\n         (InstanceCreator<T>) instanceCreators.get(rawType);\n     if (rawTypeCreator != null) {\n       return new ObjectConstructor<T>() {\n-        public T construct() {\n+        @Override public T construct() {\n           return rawTypeCreator.createInstance(type);\n         }\n       };\n@@ -98,7 +102,7 @@ public T construct() {\n       }\n       return new ObjectConstructor<T>() {\n         @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\n-        public T construct() {\n+        @Override public T construct() {\n           try {\n             Object[] args = null;\n             return (T) constructor.newInstance(args);\n@@ -130,14 +134,14 @@ public T construct() {\n     if (Collection.class.isAssignableFrom(rawType)) {\n       if (SortedSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new TreeSet<Object>();\n           }\n         };\n       } else if (EnumSet.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n           @SuppressWarnings(\"rawtypes\")\n-          public T construct() {\n+          @Override public T construct() {\n             if (type instanceof ParameterizedType) {\n               Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0];\n               if (elementType instanceof Class) {\n@@ -152,42 +156,54 @@ public T construct() {\n         };\n       } else if (Set.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedHashSet<Object>();\n           }\n         };\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedList<Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new ArrayList<Object>();\n           }\n         };\n       }\n     }\n \n     if (Map.class.isAssignableFrom(rawType)) {\n-      if (SortedMap.class.isAssignableFrom(rawType)) {\n+      if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {\n+        return new ObjectConstructor<T>() {\n+          @Override public T construct() {\n+            return (T) new ConcurrentSkipListMap<Object, Object>();\n+          }\n+        };\n+      } else if (ConcurrentMap.class.isAssignableFrom(rawType)) {\n+        return new ObjectConstructor<T>() {\n+          @Override public T construct() {\n+            return (T) new ConcurrentHashMap<Object, Object>();\n+          }\n+        };\n+      } else if (SortedMap.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new TreeMap<Object, Object>();\n           }\n         };\n       } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(\n           TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedHashMap<Object, Object>();\n           }\n         };\n       } else {\n         return new ObjectConstructor<T>() {\n-          public T construct() {\n+          @Override public T construct() {\n             return (T) new LinkedTreeMap<String, Object>();\n           }\n         };\n@@ -202,7 +218,7 @@ public T construct() {\n     return new ObjectConstructor<T>() {\n       private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n       @SuppressWarnings(\"unchecked\")\n-      public T construct() {\n+      @Override public T construct() {\n         try {\n           Object newInstance = unsafeAllocator.newInstance(rawType);\n           return (T) newInstance;, @@ -16,6 +16,18 @@\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n@@ -33,14 +45,6 @@\n \n import junit.framework.TestCase;\n \n-import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-\n /**\n  * Functional test for Json serialization and deserialization for Maps\n  *\n@@ -179,6 +183,46 @@ public void testSortedMap() throws Exception {\n     assertEquals(\"456\", map.get(123));\n   }\n \n+  public void testConcurrentMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentMap<Integer, String>>() {}.getType();\n+    ConcurrentMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentHashMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentHashMap<Integer, String>>() {}.getType();\n+    ConcurrentHashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentNavigableMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentNavigableMap<Integer, String>>() {}.getType();\n+    ConcurrentNavigableMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n+  public void testConcurrentSkipListMap() throws Exception {\n+    Type typeOfMap = new TypeToken<ConcurrentSkipListMap<Integer, String>>() {}.getType();\n+    ConcurrentSkipListMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+    String json = gson.toJson(map);\n+    assertEquals(\"{\\\"123\\\":\\\"456\\\"}\", json);\n+  }\n+\n   public void testParameterizedMapSubclassSerialization() {\n     MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>(10);\n     map.put(\"a\", \"b\");, ", 85, 25, "\"modified, modified, \"", 110], 1], ["731", "Added support for AtomicInteger, AtomicBoolean, AtomicLong and Atomic\u2026", "Inderjeet Singh", "inder123", "11/06/15, 05:20:11 PM", "\u2026IntegerArray.", "LGTM\n =||= Self-merging since @swankjesse  LGTM'd it.\n =||= ", ["731", "Added support for AtomicInteger, AtomicBoolean, AtomicLong and Atomic\u2026", "Inderjeet Singh", "inder123", "11/06/15, 05:20:11 PM", "\u2026IntegerArray.", "NaN"], ["Inderjeet Singh", "fixed typos", "11/06/15, 05:43:10 AM", "Inderjeet Singh", "da4334b8dfcfa3efe6fba6b95afd0e5e6b272348", ["gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentLocksTest.java"], "@@ -29,7 +29,7 @@\n import junit.framework.TestCase;\n \n /**\n- * Functional test for Json serialization and deserialization for java.util.concurrent.locks classes\n+ * Functional test for Json serialization and deserialization for classes in java.util.concurrent.atomic\n  */\n public class JavaUtilConcurrentLocksTest extends TestCase {\n   private Gson gson;, ", 1, 1, "\"modified, \"", 2], 1], ["732", "renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest", "Inderjeet Singh", "inder123", "11/06/15, 11:24:53 PM", "NaN", "NaN", ["732", "renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest", "Inderjeet Singh", "inder123", "11/06/15, 11:24:53 PM", "NaN", "NaN"], ["Inderjeet Singh", "renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest", "11/06/15, 11:24:15 PM", "Inderjeet Singh", "457f53f08f38e3c6d154699ea00fa521f208882d", ["gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java"], "@@ -31,7 +31,7 @@\n /**\n  * Functional test for Json serialization and deserialization for classes in java.util.concurrent.atomic\n  */\n-public class JavaUtilConcurrentLocksTest extends TestCase {\n+public class JavaUtilConcurrentAtomicTest extends TestCase {\n   private Gson gson;\n \n   @Override, ", 1, 1, "\"renamed, \"", 2], 1], ["733", "Supported Currency and added additional tests for Vector, Stack and Properties.", "Inderjeet Singh", "inder123", "11/18/15, 01:57:59 AM", "NaN", "@swankjesse  review please?\n =||= LGTM, though I'm quite surprised that you're adding such a bogus type.\n\nAlso, please squash.\n =||= No one asking for it, but I noticed that the default serialization was not correct.\n =||= Got it. Slightly scary, this change is not interoperable to anyone (accidentally) relying on the current broken behavior. I like Moshi's behavior here, which is to throw an exception! `Platform class java.util.Vector annotated [] requires explicit JsonAdapter to be registered`\n =||= @swankjesse  I only added support for Currency, not vector.\nYes, it breaks with the current behavior, but I think this is what any normal user will expect. In the past, we have added default adapters for classes from java.util.\\* packages over time, technically breaking the serialization semantics.\n =||= merging based on earlier LGTM\n =||= ", ["733", "Supported Currency and added additional tests for Vector, Stack and Properties.", "Inderjeet Singh", "inder123", "11/18/15, 01:57:59 AM", "NaN", "NaN"], ["Inderjeet Singh", "added tests for Properties", "11/07/15, 12:17:47 AM", "Inderjeet Singh", "10cefa49d2ade8f1ba99693509916128c8786a6d", ["gson/src/test/java/com/google/gson/functional/JavaUtilTest.java"], "@@ -17,6 +17,7 @@\n package com.google.gson.functional;\n \n import java.util.Currency;\n+import java.util.Properties;\n \n import com.google.gson.Gson;\n \n@@ -49,4 +50,13 @@ public void testCurrency() throws Exception {\n   private static class CurrencyHolder {\n     Currency value;\n   }\n+\n+  public void testProperties() {\n+    Properties props = gson.fromJson(\"{'a':'v1','b':'v2'}\", Properties.class);\n+    assertEquals(\"v1\", props.getProperty(\"a\"));\n+    assertEquals(\"v2\", props.getProperty(\"b\"));\n+    String json = gson.toJson(props);\n+    assertTrue(json.contains(\"\\\"a\\\":\\\"v1\\\"\"));\n+    assertTrue(json.contains(\"\\\"b\\\":\\\"v2\\\"\"));\n+  }\n }, ", 10, 0, "\"modified, \"", 10], 1], ["734", "support contains(string),contains(int) in jsonarray class", "arung", "cloudbow", "11/10/15, 04:50:29 AM", "This change is to support searching string in JsonArray since a novice developer may not really know about JsonPrimitves", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= marginal value for this PR, adds 2 extra methods.\nSorry, I am inclined to ignore it.\n\nThank you for the effort nonetheless. Also, appreciate the fact that you wrote a test.\n =||= Agreed.\n =||= ", 0], ["736", "deserialize Map incorrectly", "Tsuki", "Tsuki", "11/12/15, 08:10:48 AM", "``` Java\nHashMultimap<String, templateVo> templateBag = HashMultimap.create();\ntemplateBag.put(templateVo.getId(), templateVo);\ngson.toJson(templateBag.asMap())\nMap<String, Collection<templateVo>> fromJson = null;\nfromJson = gson.fromJson(fileReader.toString(), \nnew TypeToken<Map<String,Collection<templateVo>>>() {\n}.getType());\n```\n\nIt show  \ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $", "Sorry for open issue,\n\nJust java.io.FileReader@1deeb40 problem in fileReader.toString()\n =||= ", 0], ["738", "Added details and causes while throwing AssertionError", "Inderjeet Singh", "inder123", "11/16/15, 10:27:50 PM", "NaN", "LGTM. Rebase & squash.\n =||= Rebase and squash script no longer works for me.\n =||= ", ["738", "Added details and causes while throwing AssertionError", "Inderjeet Singh", "inder123", "11/16/15, 10:27:50 PM", "NaN", "NaN"], ["Inderjeet Singh", "Added the cause to Assertions", "11/16/15, 05:16:23 PM", "Inderjeet Singh", "c935f89b23c69e7c9d6d98df87f81635b3eb3700", ["gson/src/main/java/com/google/gson/internal/Excluder.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"], "@@ -62,7 +62,7 @@\n     try {\n       return (Excluder) super.clone();\n     } catch (CloneNotSupportedException e) {\n-      throw new AssertionError();\n+      throw new AssertionError(e);\n     }\n   }\n , @@ -241,7 +241,7 @@ private Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundF\n           }\n         }\n       } catch (IllegalAccessException e) {\n-        throw new AssertionError();\n+        throw new AssertionError(e);\n       }\n       out.endObject();\n     }, ", 2, 2, "\"modified, modified, \"", 4], 1], ["740", "ISO8601 Date deserialization", null, "IgorMiller", "11/24/15, 03:06:51 AM", "Added support for all ISO8601 formats, including milliseconds. You already have `UtcDateTypeAdapter` in `gson-extras` project, which was using the code from https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java to parse dates. Therefore I did the same, I created an utils class in gson project with that code and made it used by `DateTypeAdapter` and `DefaultDateTypeAdapter`", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= :+1: \n =||= @JakeWharton @swankjesse I am merging this since this supports deserialization from lot more formats.\n\nThanks Igor.\n =||= ", ["740", "ISO8601 Date deserialization", null, "IgorMiller", "11/24/15, 03:06:51 AM", "Added support for all ISO8601 formats, including milliseconds. You already have `UtcDateTypeAdapter` in `gson-extras` project, which was using the code from https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java to parse dates. Therefore I did the same, I created an utils class in gson project with that code and made it used by `DateTypeAdapter` and `DefaultDateTypeAdapter`", "NaN"], ["Gorik", "Removed unused code in ISO8601Utils", "11/23/15, 06:21:41 AM", "Gorik", "d86dfdec7c18ceb002889d73f808a4be4ee7105f", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"], "@@ -345,42 +345,4 @@ private static int indexOfNonDigit(String string, int offset) {\n         return string.length();\n     }\n \n-    public static void main(String[] args)\n-    {\n-        final int REPS = 250000;\n-        while (true) {\n-            long start = System.currentTimeMillis();\n-            int resp = test1(REPS, 3);\n-            long msecs = System.currentTimeMillis() - start;\n-            System.out.println(\"Pow (\"+resp+\") -> \"+msecs+\" ms\");\n-\n-            start = System.currentTimeMillis();\n-            resp = test2(REPS, 3);\n-            msecs = System.currentTimeMillis() - start;\n-            System.out.println(\"Iter (\"+resp+\") -> \"+msecs+\" ms\");\n-        }\n-    }\n-\n-    static int test1(int reps, int pow)\n-    {\n-        int resp = 3;\n-        while (--reps >= 0) {\n-            resp = (int) Math.pow(10, pow);\n-        }\n-        return resp;\n-    }\n-\n-    static int test2(int reps, int pow)\n-    {\n-        int resp = 3;\n-        while (--reps >= 0) {\n-            resp = 10;\n-            int p = pow;\n-\n-            while (--p > 0) {\n-                resp *= 10;\n-            }\n-        }\n-        return resp;\n-    }\n }, ", 0, 38, "\"modified, \"", 38], 1], ["741", "Ability to ignore a property if value is already set (Deserialization).", "Joe Ginley", "gintechsystems", "11/24/15, 03:00:59 AM", "I have been using GSON for awhile and it is a great library, however I ran into one major issue for me. If I have an object in my application and I set its values from a JSON string, it is working as intended but if I pull in another JSON string with updated values but one of the values is missing from the string, it overwrites it and sets the value to null to a property that already had a value set beforehand. I found this from the GSON documentation but don't think there is an easy workaround.\n\nFrom the documentation of GSON:\nWhile deserialization, a missing entry in JSON results in setting the corresponding field in the object to null.", "It's a feature. A missing field indicates it is set to null.\nYour option is to define an InstanceCreator for your type and set it to whichever default value you want.\n =||= Can you give an example for this specific case please?\n =||= https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n =||= ", 0], ["742", "There is no gson 2.4 in jcenter", "Jiawen Geng", "gengjiawen", "11/26/15, 05:05:49 AM", "https://jcenter.bintray.com/com/google/code/gson/gson/\nthere is no folder for 2.4, through I can still download.", "2.4 and 2.5 are in Maven central: http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.google.code.gson%22%20AND%20a%3A%22gson%22\n =||= ", 0], ["743", "README: Update old Google Sites links to GitHub", "Pi Delport", "PiDelport", "11/26/15, 05:45:40 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it.\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= :+1: \n =||= ", ["743", "README: Update old Google Sites links to GitHub", "Pi Delport", "PiDelport", "11/26/15, 05:45:40 PM", "NaN", "NaN"], ["Pi\u00ebt Delport", "README: Update old Google Sites links to GitHub", "11/26/15, 10:22:42 AM", "Pi\u00ebt Delport", "05515adc8bf8794e8b89cee38b3184e43f447771", ["README.md"], "@@ -16,9 +16,9 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n *Gson Documentation*\n   * Gson [API](http://google.github.io/gson/apidocs/): Javadocs for the current Gson release\n-  * Gson [user guide](http://sites.google.com/site/gson/gson-user-guide): This guide contains examples on how to use Gson in your code.\n-  * Gson [Roadmap](https://sites.google.com/site/gson/gson-roadmap): Details on upcoming releases \n-  * Gson [design document](https://sites.google.com/site/gson/gson-design-document): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n+  * Gson [Roadmap](https://github.com/google/gson/blob/master/ReleaseProcess.md): Details on upcoming releases \n+  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n , ", 3, 3, "\"modified, \"", 6], 1], ["745", "Added code formatting; removed HTML tags.", "Misha Brukman", "mbrukman", "11/27/15, 09:27:25 PM", "Also fixed minor grammar issues.", "Thanks!!\n =||= ", ["745", "Added code formatting; removed HTML tags.", "Misha Brukman", "mbrukman", "11/27/15, 09:27:25 PM", "Also fixed minor grammar issues.", "NaN"], ["Misha Brukman", "Added code formatting; removed HTML tags.\n\nAlso fixed minor grammar issues.", "11/27/15, 08:45:21 PM", "Misha Brukman", "14e53cf7d4918e1a3f40084d6150831349d6efda", ["README.md", "UserGuide.md"], "@@ -5,7 +5,7 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n *Gson Goals*\n-  * Provide simple toJson() and fromJson() methods to convert Java objects to JSON and vice-versa\n+  * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects, @@ -52,17 +52,17 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [PerformanceTest](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n \n-*   Strings: Deserialized strings of over 25MB without any problems (see <span style=\"font-family:courier new,monospace\">disabled_testStringDeserializationPerformance</span> method in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n \n *   Large collections:\n \n-*   Serialized a collection of 1.4 million objects (see <span style=\"font-family:courier new,monospace\">disabled_testLargeCollectionSerialization</span> method in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n \n-*   Deserialized a collection of 87,000 objects (see <span style=\"font-family:courier new,monospace\">disabled_testLargeCollectionDeserialization</span> in <span style=\"font-family:courier new,monospace\">PerformanceTest</span>)\n+*   Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n \n *   Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n \n-Note: Delete the <span style=\"font-family:courier new,monospace\">disabled_</span> prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n+Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n \n ## <a name=\"TOC-Gson-Users\"></a>Gson Users\n \n@@ -211,20 +211,20 @@ Collection<Integer> ints2 = gson.fromJson(json, collectionType);\n ints2 is same as ints\n ```\n \n-Fairly hideous: note how we define the type of collection\n-Unfortunately, no way to get around this in Java</font></span>\n+Fairly hideous: note how we define the type of collection.\n+Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n *   Can serialize collection of arbitrary objects but can not deserialize from it\n *   Because there is no way for the user to indicate the type of the resulting object\n *   While deserializing, Collection must be of a specific generic type\n \n-All of this makes sense, and is rarely a problem when following good Java coding practices\n+All of this makes sense, and is rarely a problem when following good Java coding practices.\n \n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n \n-When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass <span style=\"font-family:courier new,monospace\">MyClass.class</span> object in the <span style=\"font-family:courier new,monospace\">fromJson(json, MyClass.class)</span> method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n+When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n ```\n class Foo<T> {\n   T value;\n@@ -236,9 +236,9 @@ gson.toJson(foo); // May not serialize foo.value correctly\n gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n ```\n \n-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, <span style=\"font-family:courier new,monospace\">Foo.class</span>. This means that Gson has no way of knowing that this is an object of type Foo<Bar>, and not just plain Foo.\n+The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n-You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [TypeToken](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n+You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n ```\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n gson.toJson(foo, fooType);\n@@ -348,22 +348,21 @@ Often you want to register a single handler for all generic types corresponding\n   *   Essentially write out the id value\n \n *   Deserialization is very similar but not exactly the same\n-  *   Need to call <span style=\"font-family:courier new,monospace\">\"new Id(Class<T>, String)\"</span> which returns an instance of Id<T>\n+  *   Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n \n-Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say <span style=\"font-family:courier new,monospace\">Id<RequiresSpecialHandling></span> needed special handling).\n-The <span style=\"font-family:courier new,monospace\">Type</span> parameter for the <span style=\"font-family:courier new,monospace\">toJson</span> and <span style=\"font-family:courier new,monospace\">fromJson</span> contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type\n+Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).\n+The `Type` parameter for the `toJson` and `fromJson` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n \n ### <a name=\"TOC-Writing-an-Instance-Creator\"></a>Writing an Instance Creator\n \n-While deserializing an Object, Gson needs to create a default instance of the class\n-Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor\n+While deserializing an Object, Gson needs to create a default instance of the class.\n+Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.\n \n *   Doesn't matter whether public or private\n \n Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor\n \n-**\n-Instance Creator Example**\n+**Instance Creator Example**\n \n ```\n private class MoneyInstanceCreator implements InstanceCreator<Money> {\n@@ -393,7 +392,7 @@ class MyListInstanceCreator implements InstanceCreator<MyList<?>> {\n   }\n }\n ```\n-However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the <span style=\"font-family:courier new,monospace\">createInstance</span> method. Here is an example:\n+However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:\n ```\n public class Id<T> {\n   private final Class<T> classOfId;\n@@ -413,15 +412,15 @@ class IdInstanceCreator implements InstanceCreator<Id<?>> {\n }\n ```\n \n-In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, <span style=\"font-family:courier new,monospace\">type</span>. The <span style=\"font-family:courier new,monospace\">type</span> object in this case is the Java parameterized type representation of <span style=\"font-family:courier new,monospace\">Id<Foo></span> where the actual instance should be bound to <span style=\"font-family:courier new,monospace\">Id<Foo></span>. Since <span style=\"font-family:courier new,monospace\">Id</span> class has just one parameterized type parameter, <span style=\"font-family:courier new,monospace\">T</span>, we use the zeroth element of the type array returned by <span style=\"font-family:courier new,monospace\">getActualTypeArgument()</span> which will hold <span style=\"font-family:courier new,monospace\">Foo.class</span> in this case.\n+In the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, `type`. The `type` object in this case is the Java parameterized type representation of `Id<Foo>` where the actual instance should be bound to `Id<Foo>`. Since `Id` class has just one parameterized type parameter, `T`, we use the zeroth element of the type array returned by `getActualTypeArgument()` which will hold `Foo.class` in this case.\n \n ### <a name=\"TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format\"></a>Compact Vs. Pretty Printing for JSON Output Format\n \n The default JSON output that is provide by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n \n-If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default <span style=\"font-family:courier new,monospace\">JsonPrintFormatter</span> that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n+If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n \n-The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the <span style=\"font-family:courier new,monospace\">JsonCompactFormatter</span>:\n+The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:\n ```\n Gson gson = new GsonBuilder().setPrettyPrinting().create();\n String jsonOutput = gson.toJson(someObject);\n@@ -465,7 +464,7 @@ null\n ```\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n-Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your <span style=\"font-family:courier new,monospace\">Gson</span> instance to ignore any field/object that is greater than some version number. If no version is set on the <span style=\"font-family:courier new,monospace\">Gson</span> instance then it will serialize and deserialize all fields and classes regardless of the version.\n+Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n ```\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n@@ -517,11 +516,11 @@ Gson gson = new GsonBuilder()\n \n #### <a name=\"TOC-Gson-s-Expose\"></a>Gson's @Expose\n \n-This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using <span style=\"font-family:courier new,monospace\">new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</span>. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n+This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [<span style=\"font-family:courier new,monospace\">ExclusionStrategy</span>](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific \"@Foo\" annotation and excludes top-level types (or declared field type) of class String.\n ```\n@@ -575,7 +574,7 @@ The following example shows how to exclude fields marked with a specific \"@Foo\"\n ```\n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n-Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e. camel cased names starting with lower case --- \"sampleFieldNameInJava\") to a Json field name (i.e. sample_field_name_in_java or SampleFieldNameInJava). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n+Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n , ", 25, 26, "\"modified, modified, \"", 51], 1], ["746", "Add full license text for Apache License 2.0", "Misha Brukman", "mbrukman", "11/27/15, 09:48:32 PM", "NaN", "Can you move the applied license (the previous contents of this file) to the bottom of the README?\n =||= @JakeWharton \u2014 done; please take a look.\n =||= Perfect. Thanks for spotting this.\n =||= ", ["746", "Add full license text for Apache License 2.0", "Misha Brukman", "mbrukman", "11/27/15, 09:48:32 PM", "NaN", "NaN"], ["Misha Brukman", "Add full license text for Apache License 2.0\n\nMoved the short-form license to README.", "11/27/15, 09:02:19 PM", "Misha Brukman", "95c5a7d57020c63e87e465832db9e74a5cd15ab5", ["LICENSE", "README.md"], "@@ -1,13 +1,202 @@\n-Copyright 2008 Google Inc. \n \n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-you may not use this file except in compliance with the License.\n-You may obtain a copy of the License at\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n \n-    http://www.apache.org/licenses/LICENSE-2.0\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n-Unless required by applicable law or agreed to in writing, software\n-distributed under the License is distributed on an \"AS IS\" BASIS,\n-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-See the License for the specific language governing permissions and\n-limitations under the License.\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License., @@ -24,3 +24,23 @@ Please use the [google-gson Google group](http://groups.google.com/group/google-\n \n *Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+\n+*License*\n+\n+Gson is released under the [Apache 2.0 license](LICENSE).\n+\n+```\n+Copyright 2008 Google Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+```, ", 219, 10, "\"modified, modified, \"", 229], 1], ["747", "Docs fixes: markdown, links, formatting.", "Misha Brukman", "mbrukman", "11/27/15, 10:27:00 PM", "- Removed extra spacing after bullets in list\n- Removed extra blank lines; fixed indentation\n- Fixed all links (including examples) to code.google.com to use github.com\n  instead; deep links to code.google.com redirect to top-level GitHub project\n  page, thus rendering them useless\n- Removed extra strings in Markdown link targets\n- Fixed capitalization and grammar\n- Added more code formatting", ":+1: \n =||= ", ["747", "Docs fixes: markdown, links, formatting.", "Misha Brukman", "mbrukman", "11/27/15, 10:27:00 PM", "- Removed extra spacing after bullets in list\n- Removed extra blank lines; fixed indentation\n- Fixed all links (including examples) to code.google.com to use github.com\n  instead; deep links to code.google.com redirect to top-level GitHub project\n  page, thus rendering them useless\n- Removed extra strings in Markdown link targets\n- Fixed capitalization and grammar\n- Added more code formatting", "NaN"], ["Misha Brukman", "Docs fixes: markdown, links, formatting.\n\n* Removed extra spacing after bullets in list\n* Removed extra blank lines; fixed indentation\n* Fixed all links (including examples) to code.google.com to use github.com\n  instead; deep links to code.google.com redirect to top-level GitHub project\n  page, thus rendering them useless\n* Removed extra strings in Markdown link targets\n* Fixed capitalization and grammar\n* Added more code formatting", "11/27/15, 09:56:59 PM", "Misha Brukman", "b4ca41aafe884f40beae3b1f5912aca24d080f5f", ["UserGuide.md"], "@@ -38,39 +38,35 @@\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n \n-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n+Gson can work with arbitrary Java objects including pre-existing objects that you do not have source code of.\n \n ## <a name=\"TOC-Goals-for-Gson\"></a>Goals for Gson\n \n-*   Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa\n-*   Allow pre-existing unmodifiable objects to be converted to and from JSON\n-*   Allow custom representations for objects\n-*   Support arbitrarily complex object\n-*   Generate compact and readability JSON output\n+* Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa\n+* Allow pre-existing unmodifiable objects to be converted to and from JSON\n+* Allow custom representations for objects\n+* Support arbitrarily complex objects\n+* Generate compact and readability JSON output\n \n ## <a name=\"TOC-Gson-Performance-and-Scalability\"></a>Gson Performance and Scalability\n \n-Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [PerformanceTest](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n+Here are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [`PerformanceTest`](gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n \n-*   Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n+* Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n+* Large collections:\n+  * Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n+  * Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n+* Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n \n-*   Large collections:\n-\n-*   Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n-\n-*   Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n-\n-*   Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n-\n-Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run junit tests.\n+Note: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run JUnit tests.\n \n ## <a name=\"TOC-Gson-Users\"></a>Gson Users\n \n Gson was originally created for use inside Google where it is currently used in a number of projects. It is now used by a number of public projects and companies. See details [here](https://sites.google.com/site/gson/gson-users).\n \n ## <a name=\"TOC-Using-Gson\"></a>Using Gson\n \n-The primary class to use is [Gson](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/Gson.java \"Gson\") which you can just create by calling new Gson(). There is also a class [GsonBuilder](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/GsonBuilder.java \"GsonBuilder\") available that can be used to create a Gson instance with various settings like version control and so on.\n+The primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `new Gson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.\n \n The Gson instance does not maintain any state while invoking Json operations. So, you are free to reuse the same object for multiple Json serialization and deserialization operations.\n \n@@ -135,14 +131,14 @@ BagOfPrimitives obj2 =gson.fromJson(json, BagOfPrimitives.class);\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n \n-*   It is perfectly fine (and recommended) to use private fields\n-*   There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n-*   If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n-*   This implementation handles nulls correctly\n-*   While serialization, a null field is skipped from the output\n-*   While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n-*   If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n-*   Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n+* It is perfectly fine (and recommended) to use private fields\n+* There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n+* If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n+* This implementation handles nulls correctly\n+* While serialization, a null field is skipped from the output\n+* While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n+* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n+* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n \n ### <a name=\"TOC-Nested-Classes-including-Inner-Classes-\"></a>Nested Classes (including Inner Classes)\n \n@@ -216,9 +212,9 @@ Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n-*   Can serialize collection of arbitrary objects but can not deserialize from it\n-*   Because there is no way for the user to indicate the type of the resulting object\n-*   While deserializing, Collection must be of a specific generic type\n+* Can serialize collection of arbitrary objects but can not deserialize from it\n+* Because there is no way for the user to indicate the type of the resulting object\n+* While deserializing, Collection must be of a specific generic type\n \n All of this makes sense, and is rarely a problem when following good Java coding practices.\n \n@@ -273,13 +269,13 @@ class Event {\n \n You can serialize the collection with Gson without doing anything specific: `toJson(collection)` would write out the desired output.\n \n-However, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in fromJson. So, you have three options:\n+However, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericised version of collection type in `fromJson()`. So, you have three options:\n \n-Option 1: Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use Gson.fromJson() on each of the array elements.This is the preferred approach. [Here is an example](http://code.google.com/p/google-gson/source/browse/trunk/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.\n+1. Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use `Gson.fromJson()` on each of the array elements.This is the preferred approach. [Here is an example](extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.\n \n-Option 2: Register a type adapter for Collection.class that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.\n+2. Register a type adapter for `Collection.class` that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.\n \n-Option 3: Register a type adapter for MyCollectionMemberType and use fromJson with Collection<MyCollectionMemberType>\n+3. Register a type adapter for `MyCollectionMemberType` and use `fromJson()` with `Collection<MyCollectionMemberType>`.\n \n This approach is practical only if the array appears as a top-level element or if you can change the field type holding the collection to be of type `Collection<MyCollectionMemberType>`.\n \n@@ -288,20 +284,20 @@ This approach is practical only if the array appears as a top-level element or i\n Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.\n Here is a list of such classes:\n \n-1.  `java.net.URL` to match it with strings like \"http://code.google.com/p/google-gson/\".\n-2.  `java.net.URI` to match it with strings like \"/p/google-gson/\".\n+1. `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n+2. `java.net.URI` to match it with strings like `\"/google/gson/\"`\n \n-You can also find source-code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n+You can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n \n ### <a name=\"TOC-Custom-Serialization-and-Deserialization\"></a>Custom Serialization and Deserialization\n \n Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).\n Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:\n \n-*   Json Serialiers: Need to define custom serialization for an object\n-*   Json Deserializers: Needed to define custom deserialization for a type\n+* Json Serialiers: Need to define custom serialization for an object\n+* Json Deserializers: Needed to define custom deserialization for a type\n \n-*   Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n+* Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n ```\n GsonBuilder gson = new GsonBuilder();\n gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\n@@ -343,22 +339,21 @@ Gson calls `deserialize` when it needs to deserialize a JSON string fragment int\n \n Often you want to register a single handler for all generic types corresponding to a raw type\n \n-*   For example, suppose you have an \"Id\" class for Id representation/translation (i.e. an internal vs. external representation).\n-*   `Id<T>` type that has same serialization for all generic types\n-  *   Essentially write out the id value\n-\n-*   Deserialization is very similar but not exactly the same\n-  *   Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n+* For example, suppose you have an `Id` class for id representation/translation (i.e. an internal vs. external representation).\n+* `Id<T>` type that has same serialization for all generic types\n+  * Essentially write out the id value\n+* Deserialization is very similar but not exactly the same\n+  * Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n \n Gson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).\n-The `Type` parameter for the `toJson` and `fromJson` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n+The `Type` parameter for the `toJson()` and `fromJson()` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n \n ### <a name=\"TOC-Writing-an-Instance-Creator\"></a>Writing an Instance Creator\n \n While deserializing an Object, Gson needs to create a default instance of the class.\n Well-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.\n \n-*   Doesn't matter whether public or private\n+* Doesn't matter whether public or private\n \n Typically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor\n \n@@ -374,8 +369,8 @@ private class MoneyInstanceCreator implements InstanceCreator<Money> {\n \n Type could be of a corresponding generic type\n \n-*   Very useful to invoke constructors which need specific generic type information\n-*   For example, if the `Id` class stores the class for which the Id is being created\n+* Very useful to invoke constructors which need specific generic type information\n+* For example, if the `Id` class stores the class for which the Id is being created\n \n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n@@ -464,7 +459,7 @@ null\n ```\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n-Multiple versions of the same object can be maintained by using [@Since](http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/google/gson/annotations/Since.java \"@Since\") annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n+Multiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n ```\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n@@ -520,9 +515,9 @@ This feature provides a way where you can mark certain fields of your objects to\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n-The following example shows how to exclude fields marked with a specific \"@Foo\" annotation and excludes top-level types (or declared field type) of class String.\n+The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n ```\n   @Retention(RetentionPolicy.RUNTIME)\n   @Target({ElementType.FIELD})\n@@ -605,9 +600,9 @@ If you have a need for custom naming policy ([see this discussion](http://groups\n \n Sometimes you need to share state across custom serializers/deserializers ([see this discussion](http://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb)). You can use the following three strategies to accomplish this:\n \n-1.  Store shared state in static fields\n-2.  Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state\n-3.  Use Java ThreadLocal\n+1. Store shared state in static fields\n+2. Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state\n+3. Use Java `ThreadLocal`\n \n 1 and 2 are not thread-safe options, but 3 is.\n \n@@ -621,4 +616,4 @@ See the [Gson design document](https://sites.google.com/site/gson/gson-design-do\n \n ## <a name=\"TOC-Future-Enhancements-to-Gson\"></a>Future Enhancements to Gson\n \n-For the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](http://code.google.com/p/google-gson/issues/list \"Issues section\") under the project website.\n+For the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](https://github.com/google/gson/issues) under the project website., ", 51, 56, "\"modified, \"", 107], 1], ["748", "Release process: cleanups and formatting fixes", "Misha Brukman", "mbrukman", "11/28/15, 12:31:32 AM", "- Formatted multi-line and complex commands via multi-line blocks and\n  line-wrapping for readability and ease of copy-pasting\n- Hid URLs behind text links for readability and brevity\n- Added missing code formatting, both inline and blocks\n\nYou can see what the new page looks like in its entirety via [my branch](https://github.com/mbrukman/gson/blob/docs-release-process/ReleaseProcess.md).", "NaN", ["748", "Release process: cleanups and formatting fixes", "Misha Brukman", "mbrukman", "11/28/15, 12:31:32 AM", "- Formatted multi-line and complex commands via multi-line blocks and\n  line-wrapping for readability and ease of copy-pasting\n- Hid URLs behind text links for readability and brevity\n- Added missing code formatting, both inline and blocks\n\nYou can see what the new page looks like in its entirety via [my branch](https://github.com/mbrukman/gson/blob/docs-release-process/ReleaseProcess.md).", "NaN"], ["Misha Brukman", "Cleanups and formatting fixes\n\n* Formatted multi-line and complex commands via multi-line blocks and\n  line-wrapping for readability and ease of copy-pasting\n* Hid URLs behind text links for readability and brevity\n* Added missing code formatting, both inline and blocks", "11/27/15, 10:39:05 PM", "Misha Brukman", "137100e2e2080639f59f90e5cc2c90e127863241", ["ReleaseProcess.md"], "@@ -3,54 +3,105 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-2. Edit pom.xml and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n+2. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 3. Ensure all changelists are code-reviewed and have +1\n-4. Ensure that your ~/.m2/settings.xml is configured properly (see steps below)\n-5. cd gson. Ensure there are no open files and all changes are committed. \n+4. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n+5. `cd gson`; ensure there are no open files and all changes are committed.\n 6. Run `mvn release:clean`\n 7. Do a dry run: `mvn release:prepare -DdryRun=true`\n 8. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine. \n-  * This will do a full build, change version from -SNAPSHOT to the released version, commit and create the tags. It will then change the version to -SNAPSHOT for the next release.\n-9. Ensure you have defined `sonatype-nexus-staging` in your maven `settings.xml` and run `mvn -s /home/<username>/.m2/settings.xml  release:perform`\n-10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and javadoc jars.\n-  * `cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2  /tmp; cd /tmp/1.7.2`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2-javadoc.jar -Dclassifier=javadoc`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2-sources.jar -Dclassifier=sources`\n-  * `mvn gpg:sign-and-deploy-file -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=sonatype-nexus-staging -DpomFile=gson-1.7.2.pom -Dfile=gson-1.7.2.jar`\n-11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+  * Answer questions: usually the defaults are fine.\n+  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+9. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n+\n+   ```bash\n+   mvn -s /home/<username>/.m2/settings.xml release:perform\n+   ```\n+\n+10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n+\n+  ```bash\n+  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n+  cd /tmp/1.7.2\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2-javadoc.jar \\\n+      -Dclassifier=javadoc\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2-sources.jar \\\n+      -Dclassifier=sources\n+\n+  mvn gpg:sign-and-deploy-file \\\n+      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n+      -DrepositoryId=sonatype-nexus-staging \\\n+      -DpomFile=gson-1.7.2.pom \\\n+      -Dfile=gson-1.7.2.jar\n+  ```\n+\n+11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 12. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n 13. Publishing Javadocs\n-  * Switch to the branch `gh-pages`\n-  * `jar xvf /tmp/2.5/gson-2.5-javadoc.jar`\n-  * `git commit -m 'updated javadocs to 2.5'`\n+\n+  ```bash\n+  # Switch to the branch `gh-pages`\n+  git checkout gh-pages\n+\n+  # Unpack the generated Javadoc\n+  jar xvf /tmp/2.5/gson-2.5-javadoc.jar\n+\n+  # Commit the new Javadoc\n+  git commit -m 'Updated Javadoc to 2.5'\n+\n+  # Push changes to GitHub\n+  git push\n+  ```\n+\n 14. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n 15. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n 16. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n 17. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n \n ## Configuring a machine for deployment to Sonatype Repository\n \n-(Borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease)).\n+This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n 2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n 3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n 4. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n-Based on Gson group thread: https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion\n \n-1. Signup for a Sonatype account following instructions under 2) at https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide\n+Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n+\n+1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n 2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n-Download vogar\n-Put `adb` on your `$PATH` and run:\n-`vogar --benchmark --classpath gson.jar path/to/Benchmark.java`\n \n-For example, here is how to run the CollectionsDeserializationBenchmark:\n+* Download vogar\n+* Put `adb` on your `$PATH` and run:\n+\n+  ```bash\n+  vogar --benchmark --classpath gson.jar path/to/Benchmark.java\n+  ```\n+\n+For example, here is how to run the [CollectionsDeserializationBenchmark](gson/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java):\n \n-`export ANDROID_HOME=~/apps/android-sdk-mac_x86\n+```bash\n+export ANDROID_HOME=~/apps/android-sdk-mac_x86\n export PATH=$PATH:$ANDROID_HOME/platform-tools/:$ANDROID_HOME/android-sdk-mac_x86/tools/\n-$VOGAR_HOME/bin/vogar  --benchmark --sourcepath ../gson/src/main/java/  src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java -- --vm \"app_process -Xgc:noconcurrent,app_process\"`\n+$VOGAR_HOME/bin/vogar \\\n+    --benchmark \\\n+    --sourcepath ../gson/src/main/java/ \\\n+    src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java \\\n+    -- \\\n+    --vm \"app_process -Xgc:noconcurrent,app_process\"\n+```, ", 75, 24, "\"modified, \"", 99], 1], ["749", "Added language annotations to code blocks.", "Misha Brukman", "mbrukman", "11/28/15, 12:31:10 AM", "This enables GitHub to do proper syntax highlighting, thus improving the\nreadability of multi-line code blocks. As a result, some changes were required\nto make the code blocks syntactically correct, since they're actually parsed by\nlanguage-aware parsers; primarily, this meant inserting comments.\n\nYou can see what this looks like via [my branch](https://github.com/mbrukman/gson/blob/docs-user-guide/UserGuide.md).", "NaN", ["749", "Added language annotations to code blocks.", "Misha Brukman", "mbrukman", "11/28/15, 12:31:10 AM", "This enables GitHub to do proper syntax highlighting, thus improving the\nreadability of multi-line code blocks. As a result, some changes were required\nto make the code blocks syntactically correct, since they're actually parsed by\nlanguage-aware parsers; primarily, this meant inserting comments.\n\nYou can see what this looks like via [my branch](https://github.com/mbrukman/gson/blob/docs-user-guide/UserGuide.md).", "NaN"], ["Misha Brukman", "Added language annotations to code blocks.\n\nThis enables GitHub to do proper syntax highlighting, thus improving the\nreadability of multi-line code blocks. As a result, some changes were required\nto make the code blocks syntactically correct, since they're actually parsed by\nlanguage-aware parsers; primarily, this meant inserting comments.", "11/27/15, 11:33:31 PM", "Misha Brukman", "883fbd0a160d2a7cc57bd0d02242cc8833c0fb67", ["UserGuide.md"], "@@ -26,7 +26,7 @@\n   * [Versioning Support](#TOC-Versioning-Support)\n   * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n     * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n-    * [Gson's @Expose](#TOC-Gson-s-Expose)\n+    * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n     * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n   * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n   * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n@@ -72,7 +72,8 @@ The Gson instance does not maintain any state while invoking Json operations. So\n \n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n To use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:\n-```\n+\n+```xml\n <dependencies>\n     <!--  Gson: Java to Json conversion -->\n     <dependency>\n@@ -83,19 +84,21 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     </dependency>\n </dependencies>\n ```\n+\n That is it, now your maven project is Gson enabled. \n \n ### <a name=\"TOC-Primitives-Examples\"></a>Primitives Examples\n-```\n-(Serialization)\n+\n+```java\n+// Serialization\n Gson gson = new Gson();\n-gson.toJson(1);            ==> prints 1\n-gson.toJson(\"abcd\");       ==> prints \"abcd\"\n-gson.toJson(new Long(10)); ==> prints 10\n+gson.toJson(1);            // ==> 1\n+gson.toJson(\"abcd\");       // ==> \"abcd\"\n+gson.toJson(new Long(10)); // ==> 10\n int[] values = { 1 };\n-gson.toJson(values);       ==> prints [1]\n+gson.toJson(values);       // ==> [1]\n \n-(Deserialization)\n+// Deserialization\n int one = gson.fromJson(\"1\", int.class);\n Integer one = gson.fromJson(\"1\", Integer.class);\n Long one = gson.fromJson(\"1\", Long.class);\n@@ -105,7 +108,8 @@ String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class);\n ```\n \n ### <a name=\"TOC-Object-Examples\"></a>Object Examples\n-```\n+\n+```java\n class BagOfPrimitives {\n   private int value1 = 1;\n   private String value2 = \"abc\";\n@@ -114,19 +118,21 @@ class BagOfPrimitives {\n     // no-args constructor\n   }\n }\n-(Serialization)\n+\n+// Serialization\n BagOfPrimitives obj = new BagOfPrimitives();\n Gson gson = new Gson();\n String json = gson.toJson(obj);  \n \n-==> json is {\"value1\":1,\"value2\":\"abc\"}\n+// ==> json is {\"value1\":1,\"value2\":\"abc\"}\n ```\n \n Note that you can not serialize objects with circular references since that will result in infinite recursion.\n-```\n-(Deserialization)\n-BagOfPrimitives obj2 =gson.fromJson(json, BagOfPrimitives.class);\n-==> obj2 is just like obj\n+\n+```java\n+// Deserialization\n+BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n+// ==> obj2 is just like obj\n ```\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n@@ -146,7 +152,7 @@ Gson can serialize static nested classes quite easily.\n \n Gson can also deserialize static nested classes. However, Gson can **not** automatically deserialize the **pure inner classes since their no-args constructor also need a reference to the containing Object** which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:\n \n-```\n+```java\n public class A { \n   public String a; \n \n@@ -160,11 +166,12 @@ public class A {\n   } \n }\n ```\n+\n **NOTE**: The above class B can not (by default) be serialized with Gson.\n \n Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. if it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n \n-```\n+```java\n public class InstanceCreatorForB implements InstanceCreator<A.B> {\n   private final A a;\n   public InstanceCreatorForB(A a)  {\n@@ -175,36 +182,40 @@ public class InstanceCreatorForB implements InstanceCreator<A.B> {\n   }\n }\n ```\n+\n The above is possible, but not recommended.\n \n ### <a name=\"TOC-Array-Examples\"></a>Array Examples\n-```\n+\n+```java\n Gson gson = new Gson();\n int[] ints = {1, 2, 3, 4, 5};\n String[] strings = {\"abc\", \"def\", \"ghi\"};\n \n-(Serialization)\n-gson.toJson(ints);     ==> prints [1,2,3,4,5]\n-gson.toJson(strings);  ==> prints [\"abc\", \"def\", \"ghi\"]\n+// Serialization\n+gson.toJson(ints);     // ==> [1,2,3,4,5]\n+gson.toJson(strings);  // ==> [\"abc\", \"def\", \"ghi\"]\n \n-(Deserialization)\n+// Deserialization\n int[] ints2 = gson.fromJson(\"[1,2,3,4,5]\", int[].class); \n-==> ints2 will be same as ints\n+// ==> ints2 will be same as ints\n ```\n+\n We also support multi-dimensional arrays, with arbitrarily complex element types.\n \n ### <a name=\"TOC-Collections-Examples\"></a>Collections Examples\n-```\n+\n+```java\n Gson gson = new Gson();\n Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);\n \n-(Serialization)\n-String json = gson.toJson(ints); ==> json is [1,2,3,4,5]\n+// Serialization\n+String json = gson.toJson(ints);  // ==> json is [1,2,3,4,5]\n \n-(Deserialization)\n+// Deserialization\n Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();\n Collection<Integer> ints2 = gson.fromJson(json, collectionType);\n-ints2 is same as ints\n+// ==> ints2 is same as ints\n ```\n \n Fairly hideous: note how we define the type of collection.\n@@ -221,7 +232,8 @@ All of this makes sense, and is rarely a problem when following good Java coding\n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n \n When you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n-```\n+\n+```java\n class Foo<T> {\n   T value;\n }\n@@ -235,7 +247,8 @@ gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](http://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n-```\n+\n+```java\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n gson.toJson(foo, fooType);\n \n@@ -248,15 +261,18 @@ The idiom used to get `fooType` actually defines an anonymous local inner class\n Sometimes you are dealing with JSON array that contains mixed types. For example:\n `['hello',5,{name:'GREETINGS',source:'guest'}]`\n \n-The equivalent Collection containing this is:\n-```\n+The equivalent `Collection` containing this is:\n+\n+```java\n Collection collection = new ArrayList();\n collection.add(\"hello\");\n collection.add(5);\n collection.add(new Event(\"GREETINGS\", \"guest\"));\n ```\n-Where the Event class is defined as:\n-```\n+\n+where the `Event` class is defined as:\n+\n+```java\n class Event {\n   private String name;\n   private String source;\n@@ -298,7 +314,8 @@ Gson allows you to register your own custom serializers and deserializers. This\n * Json Deserializers: Needed to define custom deserialization for a type\n \n * Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n-```\n+\n+```java\n GsonBuilder gson = new GsonBuilder();\n gson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\n gson.registerTypeAdapter(MyType.class, new MySerializer());\n@@ -311,7 +328,8 @@ gson.registerTypeAdapter(MyType.class, new MyInstanceCreator());\n #### <a name=\"TOC-Writing-a-Serializer\"></a>Writing a Serializer\n \n Here is an example of how to write a custom serializer for JodaTime `DateTime` class.\n-```\n+\n+```java\n private class DateTimeSerializer implements JsonSerializer<DateTime> {\n   public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {\n     return new JsonPrimitive(src.toString());\n@@ -324,7 +342,8 @@ Gson calls `serialize()` when it runs into a `DateTime` object during serializat\n #### <a name=\"TOC-Writing-a-Deserializer\"></a>Writing a Deserializer\n \n Here is an example of how to write a custom deserializer for JodaTime DateTime class.\n-```\n+\n+```java\n private class DateTimeDeserializer implements JsonDeserializer<DateTime> {\n   public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n       throws JsonParseException {\n@@ -359,7 +378,7 @@ Typically, Instance Creators are needed when you are dealing with a library clas\n \n **Instance Creator Example**\n \n-```\n+```java\n private class MoneyInstanceCreator implements InstanceCreator<Money> {\n   public Money createInstance(Type type) {\n     return new Money(\"1000000\", CurrencyCode.USD);\n@@ -375,7 +394,8 @@ Type could be of a corresponding generic type\n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n Sometimes that the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n-```\n+\n+```java\n class MyList<T> extends ArrayList<T> {\n }\n \n@@ -387,8 +407,10 @@ class MyListInstanceCreator implements InstanceCreator<MyList<?>> {\n   }\n }\n ```\n+\n However, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:\n-```\n+\n+```java\n public class Id<T> {\n   private final Class<T> classOfId;\n   private final long value;\n@@ -425,12 +447,16 @@ String jsonOutput = gson.toJson(someObject);\n The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java.\n \n Here's how you would configure a `Gson` instance to output null:\n-`Gson gson = new GsonBuilder().serializeNulls().create();`\n+\n+```java\n+Gson gson = new GsonBuilder().serializeNulls().create();\n+```\n \n NOTE: when serializing `null`s with Gson, it will add a `JsonNull` element to the `JsonElement` structure. Therefore, this object can be used in custom serialization/deserialization.\n \n Here's an example:\n-```\n+\n+```java\n public class Foo {\n   private final String s;\n   private final int i;\n@@ -452,15 +478,20 @@ System.out.println(json);\n \n json = gson.toJson(null);\n System.out.println(json);\n+```\n+\n+The output is:\n \n-======== OUTPUT ========\n+```\n {\"s\":null,\"i\":5}\n null\n ```\n+\n ### <a name=\"TOC-Versioning-Support\"></a>Versioning Support\n \n Multiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n-```\n+\n+```java\n public class VersionedClass {\n   @Since(1.1) private final String newerField;\n   @Since(1.0) private final String newField;\n@@ -482,8 +513,11 @@ System.out.println();\n gson = new Gson();\n jsonOutput = gson.toJson(someObject);\n System.out.println(jsonOutput);\n+```\n \n-======== OUTPUT ========\n+The output is:\n+\n+```\n {\"newField\":\"new\",\"field\":\"old\"}\n \n {\"newerField\":\"newer\",\"newField\":\"new\",\"field\":\"old\"}\n@@ -496,20 +530,23 @@ Gson supports numerous mechanisms for excluding top-level classes, fields and fi\n #### <a name=\"TOC-Java-Modifier-Exclusion\"></a>Java Modifier Exclusion\n \n By default, if you mark a field as `transient`, it will be excluded. As well, if a field is marked as `static` then by default it will be excluded. If you want to include some transient fields then you can do the following:\n-```\n+\n+```java\n import java.lang.reflect.Modifier;\n Gson gson = new GsonBuilder()\n     .excludeFieldsWithModifiers(Modifier.STATIC)\n     .create();\n ```\n+\n NOTE: you can use any number of the `Modifier` constants to `excludeFieldsWithModifiers` method. For example:\n-```\n+\n+```java\n Gson gson = new GsonBuilder()\n     .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)\n     .create();\n ```\n \n-#### <a name=\"TOC-Gson-s-Expose\"></a>Gson's @Expose\n+#### <a name=\"TOC-Gson-s-Expose\"></a>Gson's `@Expose`\n \n This feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n \n@@ -518,63 +555,69 @@ This feature provides a way where you can mark certain fields of your objects to\n If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](http://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n-```\n-  @Retention(RetentionPolicy.RUNTIME)\n-  @Target({ElementType.FIELD})\n-  public @interface Foo {\n-    // Field tag only annotation\n-  }\n \n-  public class SampleObjectForTest {\n-    @Foo private final int annotatedField;\n-    private final String stringField;\n-    private final long longField;\n-    private final Class<?> clazzField;\n+```java\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.FIELD})\n+public @interface Foo {\n+  // Field tag only annotation\n+}\n \n-    public SampleObjectForTest() {\n-      annotatedField = 5;\n-      stringField = \"someDefaultValue\";\n-      longField = 1234;\n-    }\n-  }\n+public class SampleObjectForTest {\n+  @Foo private final int annotatedField;\n+  private final String stringField;\n+  private final long longField;\n+  private final Class<?> clazzField;\n \n-  public class MyExclusionStrategy implements ExclusionStrategy {\n-    private final Class<?> typeToSkip;\n+  public SampleObjectForTest() {\n+    annotatedField = 5;\n+    stringField = \"someDefaultValue\";\n+    longField = 1234;\n+  }\n+}\n \n-    private MyExclusionStrategy(Class<?> typeToSkip) {\n-      this.typeToSkip = typeToSkip;\n-    }\n+public class MyExclusionStrategy implements ExclusionStrategy {\n+  private final Class<?> typeToSkip;\n \n-    public boolean shouldSkipClass(Class<?> clazz) {\n-      return (clazz == typeToSkip);\n-    }\n+  private MyExclusionStrategy(Class<?> typeToSkip) {\n+    this.typeToSkip = typeToSkip;\n+  }\n \n-    public boolean shouldSkipField(FieldAttributes f) {\n-      return f.getAnnotation(Foo.class) != null;\n-    }\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return (clazz == typeToSkip);\n   }\n \n-  public static void main(String[] args) {\n-    Gson gson = new GsonBuilder()\n-        .setExclusionStrategies(new MyExclusionStrategy(String.class))\n-        .serializeNulls()\n-        .create();\n-    SampleObjectForTest src = new SampleObjectForTest();\n-    String json = gson.toJson(src);\n-    System.out.println(json);\n+  public boolean shouldSkipField(FieldAttributes f) {\n+    return f.getAnnotation(Foo.class) != null;\n   }\n+}\n+\n+public static void main(String[] args) {\n+  Gson gson = new GsonBuilder()\n+      .setExclusionStrategies(new MyExclusionStrategy(String.class))\n+      .serializeNulls()\n+      .create();\n+  SampleObjectForTest src = new SampleObjectForTest();\n+  String json = gson.toJson(src);\n+  System.out.println(json);\n+}\n+```\n+\n+The output is:\n \n-======== OUTPUT ========\n+```\n {\"longField\":1234}\n ```\n+\n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](http://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n \n The following is an example of how to use both Gson naming policy features:\n-```\n+\n+```java\n private class SomeObject {\n   @SerializedName(\"custom_naming\") private final String someField;\n   private final String someOtherField;\n@@ -589,8 +632,11 @@ SomeObject someObject = new SomeObject(\"first\", \"second\");\n Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();\n String jsonRepresentation = gson.toJson(someObject);\n System.out.println(jsonRepresentation);\n+```\n \n-======== OUTPUT ========\n+The output is:\n+\n+```\n {\"custom_naming\":\"first\",\"SomeOtherField\":\"second\"}\n ```\n , ", 134, 88, "\"modified, \"", 222], 1], ["751", "Remove explicit step numbers; use autonumbering.", "Misha Brukman", "mbrukman", "11/28/15, 06:39:01 PM", "Markdown supports automatic list numbering; using this approach makes it easier\nto add or remove new items without having to update all the following entries.", "I think the current format reads better as plaintext.\n =||= Inder?\n =||= Thanks for checking with me, @swankjesse.\nAuto-numbering is fine by me. Thanks for the change @mbrukman \n =||= ", ["751", "Remove explicit step numbers; use autonumbering.", "Misha Brukman", "mbrukman", "11/28/15, 06:39:01 PM", "Markdown supports automatic list numbering; using this approach makes it easier\nto add or remove new items without having to update all the following entries.", "NaN"], ["Misha Brukman", "Remove explicit step numbers; use autonumbering.\n\nMarkdown supports automatic list numbering; using this approach makes it easier\nto add or remove new items without having to update all the following entries.", "11/28/15, 01:09:46 AM", "Misha Brukman", "994d589bcfe5bb6fbc7b2117d27c560ed2785b9a", ["ReleaseProcess.md"], "@@ -3,22 +3,22 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-2. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n-3. Ensure all changelists are code-reviewed and have +1\n-4. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n-5. `cd gson`; ensure there are no open files and all changes are committed.\n-6. Run `mvn release:clean`\n-7. Do a dry run: `mvn release:prepare -DdryRun=true`\n-8. Start the release: `mvn release:prepare`\n+1. Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n+1. Ensure all changelists are code-reviewed and have +1\n+1. Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n+1. `cd gson`; ensure there are no open files and all changes are committed.\n+1. Run `mvn release:clean`\n+1. Do a dry run: `mvn release:prepare -DdryRun=true`\n+1. Start the release: `mvn release:prepare`\n   * Answer questions: usually the defaults are fine.\n   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n-9. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n+1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n \n    ```bash\n    mvn -s /home/<username>/.m2/settings.xml release:perform\n    ```\n \n-10. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n+1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n \n   ```bash\n   cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n@@ -45,9 +45,9 @@ The following is a step-by-step procedure for releasing a new version of Google-\n       -Dfile=gson-1.7.2.jar\n   ```\n \n-11. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n-12. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n-13. Publishing Javadocs\n+1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n+1. Publishing Javadocs\n \n   ```bash\n   # Switch to the branch `gh-pages`\n@@ -63,10 +63,10 @@ The following is a step-by-step procedure for releasing a new version of Google-\n   git push\n   ```\n \n-14. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n-15. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n-16. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n-17. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n+1. Update the version in the [Using Gson with Maven2 page](https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2)\n+1. Update [Gson Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md). Also, look at all bugs that were fixed and add a few lines describing what changed in the release.\n+1. Create a post on the [Gson Discussion Forum](http://groups.google.com/group/google-gson)\n+1. Update the release version in [Wikipedia](http://en.wikipedia.org/wiki/GSON) and update the current \"stable\" release.\n \n ## Configuring a machine for deployment to Sonatype Repository\n , ", 16, 16, "\"modified, \"", 32], 1], ["753", "if I use the gson, how can I write the proguard-rules.pro? or nothing to do? ", "Subsidiary", "caixuejian", "12/01/15, 03:36:58 AM", "if I add the following proguard content , It will work well?\n\n-keepattributes Signature\n-keepattributes _Annotation_\n\n-keep class sun.misc.Unsafe { _; }\n-keep class com.google.gson.stream._\\* { *; }", "They're here: https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg\n =||= ", 0], ["755", "Added failing test for #722", "Kristen Kozak", "grayjay", "12/13/15, 02:10:09 AM", "This commit adds three test cases created from the examples in https://github.com/google/gson/issues/722#issuecomment-162139672, as suggested in https://github.com/google/gson/issues/722#issuecomment-162250053.  The test `testParameterizedTypeSubclassInstanceVariableSerialization` currently fails with `expected:<{\"optional\":{\"value\":\"string\"}}> but was:<{\"optional\":{}}>`\n\nThe tests use a simplified version of guava's `Optional` type to avoid a dependency on guava.  I noticed that all three tests pass when they use the `Optional` type from Java 8, because Java 8 implements `Optional` as one final class instead of a class hierarchy.", "Closing the pull request as it is reproduced in https://github.com/google/gson/pull/757\n =||= ", 0], ["757", "Using Raw class for serialization in case a parameterized type has no\u2026", "Inderjeet Singh", "inder123", "12/13/15, 02:10:43 AM", "\u2026 fields.", "This solution has performance overhead of counting of class fields.\nIt is also an edge case, so I am closing the pull request.\n =||= ", 0], ["758", "Would it be possible to return a JSON input stream when adding to an Appendable is not possible?", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "12/21/15, 02:02:58 PM", "Hi.\n\nI've recently asked this question on [Stack Overflow](http://stackoverflow.com/questions/34363974/serializing-an-object-to-a-json-input-stream-using-gson), but I still don't know if what I asked for was good. The reason of the question was an attempt to stream JSON as if it were a pure streaming implementation. Let's say, there are cases when `Appendable` cannot be used, so there's simply nothing to append to (in it's, I guess, simplest form):\n\n``` java\nfinal String json = gson.toJson(value);\nfinal byte[] bytes = json.getBytes(charset);\ntry ( final InputStream inputStream = new ByteArrayInputStream(bytes) ) {\n    inputStreamConsumer.accept(inputStream);\n}\n```\n\nIn the code snippet above, the whole JSON is referenced by the `json` variable not matter how big the JSON string is. And, what is more wasting: `json.getBytes(...)` actually creates a new byte array so that I could adapt the byte array to an `InputStream` and pass it to the `inputStreamConsumer`. Well, I guess, I can write a pure `String` to `InputStream` adapter without holding an intermediate byte array, but I still have to hold a reference to the whole JSON.\n\nWould it be possible to add a \"reverse\" `GSON.toJsonInputStream(...)` that could return an `InputStream` instance but not accept the `Appendable` instance, and not produce the whole JSON at once? Let's assume a single-thread application here, so we could be sure that the `value` object is not mutated while reading from the JSON input stream. Probably something like this:\n\n``` java\ntry ( final InputStream inputStream = gson.toJsonInputStream(value) ) {\n    inputStreamConsumer.accept(inputStream);\n}\n```\n\nSorry if this is a wrong place to ask questions or the feature request that doesn't meet GSON ideas, and if it isn't please feel free to close the issue.\n\nThanks.", "Take a look at JsonWriter and JsonReader.\n =||= @swankjesse I can't seem to use any of them. `JsonReader` is definitely not what I'm looking for -- I don't have intention to read a JSON from an external source and to deserialize manually -- I need to generate the JSON out of an object in a streaming manner as if I worked with `Appendable`. `JsonWriter` is not what I'm looking for too. If I'd use `toJson` with an `Appendable` overload -- I'd face with an `OutputStream->InputStream` problem that can be solved either using bufferization (actually, what I've described in the post), or use, let's say, two threads to combine `PipedInputStream` and `PipedOutputStream`. What am I missing?\n =||= You can make a `JsonWriter` write to an arbitrary `Appendable` by building your own subclass of `Writer` that delegates to the `Appendable`, and passing that to `new JsonWriter()`. You can then pass that to `toJson`.\n =||= I feel confused. Sorry if I can't see it right, but doesn't what you suggest works over instances with write-semantics only (writers, appendables, and so on)? I can't have any of them, but I have to provide an input stream (or a reader) that could be passed to an input stream consumer. What I'm looking for is reading JSON tokens while _serializing an object_, not reading/tokenizing a JSON string obtained from elsewhere. Let's say, I have a `Map<Integer, String>` built with `ImmutableMap.of(1, \"foo\", 2, \"bar\")`, which I'd like to adapt to an input stream, that could produce/generate on sequential `read()`ing: `{`, `\"`, `1`, `\"`, ..., `}`... That's it.\n =||= Ah, got it. That we don't have.\n =||= @swankjesse ok, I see. Thank you for clarification.\n =||= ", 0], ["761", "Remove synthetic accessors from being generated.", "Jake Wharton", "JakeWharton", "12/27/15, 07:08:23 PM", "Removes 14 methods being generated for trampolining to private members which brings the total to 1294 from 1308.\n\n```\n-rw-r--r--   1 jw  jw   176K Dec 27 01:39 after.dex\n-rw-r--r--   1 jw  jw   221K Dec 27 01:38 after.jar\n-rw-r--r--   1 jw  jw   177K Dec 27 01:39 before.dex\n-rw-r--r--   1 jw  jw   223K Dec 27 01:39 before.jar\n```", "Excellent, I have been meaning to do the same after seeing a similar pull request in Moshi.\nHow do we add a comment explaining why we are making things package private?\n =||= LGTM\n =||= How do you know these are the only culprits for synthetic methods? Did you use a tool to find this out?\n =||= I used IntelliJ's \"Private member access between outer and inner classes\" inspection.\n\nYou can also use the `dx` tool in the Android SDK to compile the .jar to .dex and then use `dexdump` to list all methods and match on ones which start with 'access$':\n\n```\n$ dexdump -f before.dex | grep 'access\\$' | wc -l\n      12\n\n$ dexdump -f after.dex | grep 'access\\$' | wc -l\n       0\n```\n =||= ", ["761", "Remove synthetic accessors from being generated.", "Jake Wharton", "JakeWharton", "12/27/15, 07:08:23 PM", "Removes 14 methods being generated for trampolining to private members which brings the total to 1294 from 1308.\n\n```\n-rw-r--r--   1 jw  jw   176K Dec 27 01:39 after.dex\n-rw-r--r--   1 jw  jw   221K Dec 27 01:38 after.jar\n-rw-r--r--   1 jw  jw   177K Dec 27 01:39 before.dex\n-rw-r--r--   1 jw  jw   223K Dec 27 01:39 before.jar\n```", "NaN"], ["Jake Wharton", "Remove synthetic accessors from being generated.", "12/27/15, 06:39:19 AM", "Jake Wharton", "7a1c94f9863bfc6915eaa56236dcef46876d4674", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/TreeTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java", "gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -120,7 +120,7 @@\n    * Converts the field name that uses camel-case define word separation into\n    * separate words that are separated by the provided {@code separatorString}.\n    */\n-  private static String separateCamelCase(String name, String separator) {\n+  static String separateCamelCase(String name, String separator) {\n     StringBuilder translation = new StringBuilder();\n     for (int i = 0; i < name.length(); i++) {\n       char character = name.charAt(i);\n@@ -135,7 +135,7 @@ private static String separateCamelCase(String name, String separator) {\n   /**\n    * Ensures the JSON field names begins with an upper case letter.\n    */\n-  private static String upperCaseFirstLetter(String name) {\n+  static String upperCaseFirstLetter(String name) {\n     StringBuilder fieldNameBuilder = new StringBuilder();\n     int index = 0;\n     char firstCharacter = name.charAt(index);, @@ -303,7 +303,7 @@ public Gson() {\n     };\n   }\n \n-  private void checkValidFloatingPoint(double value) {\n+  static void checkValidFloatingPoint(double value) {\n     if (Double.isNaN(value) || Double.isInfinite(value)) {\n       throw new IllegalArgumentException(value\n           + \" is not a valid double value as per JSON specification. To override this\"\n@@ -459,7 +459,7 @@ private void checkValidFloatingPoint(double value) {\n    *  }</pre>\n    *  Note that this call will skip all factories registered before {@code skipPast}. In case of\n    *  multiple TypeAdapterFactories registered it is up to the caller of this function to insure\n-   *  that the order of registration does not prevent this method from reaching a factory they \n+   *  that the order of registration does not prevent this method from reaching a factory they\n    *  would expect to reply from this call.\n    *  Note that since you can not override type adapter factories for String and Java primitive\n    *  types, our stats factory will not count the number of String or primitives that will be, @@ -38,7 +38,7 @@\n   /** The delegate is lazily created because it may not be needed, and creating it may fail. */\n   private TypeAdapter<T> delegate;\n \n-  private TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n+  TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n       Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\n     this.serializer = serializer;\n     this.deserializer = deserializer;\n@@ -112,7 +112,7 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n     private final JsonSerializer<?> serializer;\n     private final JsonDeserializer<?> deserializer;\n \n-    private SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,\n+    SingleTypeFactory(Object typeAdapter, TypeToken<?> exactType, boolean matchRawType,\n         Class<?> hierarchyType) {\n       serializer = typeAdapter instanceof JsonSerializer\n           ? (JsonSerializer<?>) typeAdapter, @@ -16,9 +16,6 @@\n \n package com.google.gson.internal;\n \n-import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n-import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n-\n import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.GenericArrayType;\n@@ -34,6 +31,9 @@\n import java.util.NoSuchElementException;\n import java.util.Properties;\n \n+import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n+import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n+\n /**\n  * Static methods for working with types.\n  *\n@@ -212,7 +212,7 @@ public static boolean equals(Type a, Type b) {\n     }\n   }\n \n-  private static int hashCodeOrZero(Object o) {\n+  static int hashCodeOrZero(Object o) {\n     return o != null ? o.hashCode() : 0;\n   }\n \n@@ -430,7 +430,7 @@ private static int indexOf(Object[] array, Object toFind) {\n         : null;\n   }\n \n-  private static void checkNotPrimitive(Type type) {\n+  static void checkNotPrimitive(Type type) {\n     checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());\n   }\n , @@ -762,6 +762,9 @@ void add(Node<K, V> node) {\n     Node<K, V> lastReturned = null;\n     int expectedModCount = modCount;\n \n+    LinkedTreeMapIterator() {\n+    }\n+\n     public final boolean hasNext() {\n       return next != header;\n     }, @@ -528,6 +528,9 @@ public V setValue(V value) {\n     Node<K, V> lastReturned = null;\n     int expectedModCount = modCount;\n \n+    LinkedTreeMapIterator() {\n+    }\n+\n     public final boolean hasNext() {\n       return next != header;\n     }\n@@ -624,4 +627,4 @@ public K next() {\n   private Object writeReplace() throws ObjectStreamException {\n     return new LinkedHashMap<K, V>(this);\n   }\n-}\n\\ No newline at end of file\n+}, @@ -85,7 +85,7 @@ public static Writer writerForAppendable(Appendable appendable) {\n     private final Appendable appendable;\n     private final CurrentWrite currentWrite = new CurrentWrite();\n \n-    private AppendableWriter(Appendable appendable) {\n+    AppendableWriter(Appendable appendable) {\n       this.appendable = appendable;\n     }\n , @@ -104,7 +104,7 @@\n  */\n public final class MapTypeAdapterFactory implements TypeAdapterFactory {\n   private final ConstructorConstructor constructorConstructor;\n-  private final boolean complexMapKeySerialization;\n+  final boolean complexMapKeySerialization;\n \n   public MapTypeAdapterFactory(ConstructorConstructor constructorConstructor,\n       boolean complexMapKeySerialization) {, @@ -47,7 +47,7 @@\n \n   private final Gson gson;\n \n-  private ObjectTypeAdapter(Gson gson) {\n+  ObjectTypeAdapter(Gson gson) {\n     this.gson = gson;\n   }\n , @@ -16,16 +16,6 @@\n \n package com.google.gson.internal.bind;\n \n-import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n-\n-import java.io.IOException;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Type;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-\n import com.google.gson.FieldNamingStrategy;\n import com.google.gson.Gson;\n import com.google.gson.JsonSyntaxException;\n@@ -42,6 +32,15 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter;\n \n /**\n  * Type adapter that reflects over the fields and methods of a class.\n@@ -127,7 +126,7 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     };\n   }\n \n-  private TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n+  TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n     if (annotation != null) {\n       TypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n@@ -193,7 +192,7 @@ protected BoundField(String name, boolean serialized, boolean deserialized) {\n     private final ObjectConstructor<T> constructor;\n     private final Map<String, BoundField> boundFields;\n \n-    private Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\n+    Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\n       this.constructor = constructor;\n       this.boundFields = boundFields;\n     }, @@ -242,7 +242,7 @@\n   private int lineNumber = 0;\n   private int lineStart = 0;\n \n-  private int peeked = PEEKED_NONE;\n+  int peeked = PEEKED_NONE;\n \n   /**\n    * A peeked value that was composed entirely of digits with an optional\n@@ -462,7 +462,7 @@ public JsonToken peek() throws IOException {\n     }\n   }\n \n-  private int doPeek() throws IOException {\n+  int doPeek() throws IOException {\n     int peekStack = stack[stackSize - 1];\n     if (peekStack == JsonScope.EMPTY_ARRAY) {\n       stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;\n@@ -1314,11 +1314,11 @@ private boolean fillBuffer(int minimum) throws IOException {\n     return false;\n   }\n \n-  private int getLineNumber() {\n+  int getLineNumber() {\n     return lineNumber + 1;\n   }\n \n-  private int getColumnNumber() {\n+  int getColumnNumber() {\n     return pos - lineStart + 1;\n   }\n , ", 36, 31, "\"modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, \"", 67], 1], ["762", "Anonymous Map initialization does not serialize correctly.", "Prateek Srivastava", "f2prateek", "12/30/15, 08:30:13 AM", "Here's a sample to demonstrate the issue:\n\n``` java\nHashMap<String, String> context = new HashMap<String, String>() {{\n  put(\"city\", \"Toronto\");\n}};\nGson gson = new Gson();\nSystem.out.println(\"context - \" + context);\nSystem.out.println(\"JSON - \" + gson.toJson(context));\n```\n\nOutput:\n\n```\ncontext - {City=Toronto}\nJSON - null\n```\n\nInitializing the map with the code below works fine:\n\n``` java\nHashMap<String, String> context = new HashMap<String, String>();\ncontext.put(\"city\", \"Toronto\");\n```\n\nWhile the first method is obviously a wasteful way to initialize a map, is this serialization behaviour for anonymous initialization expected? If so, can you clarify why?\n\nThe closest reference I could find to this was https://github.com/google/gson/issues/298, which is about fields in anonymous classes.", "This is working as designed. Anonymous classes cannot be deserialized & for symmetry we forbid serialization also. You should get the expected result if you hint the actual Map.class type.\n =||= Ah so serialization is forbidden for anonymous classes in general, not just fields declared in anonymous classes!\n =||= ", 0], ["766", "Provide a way to deserialize null values", "Pollo", "spacitron", "01/05/16, 08:22:10 PM", "I have the following json object: \n\n``` javascript\n\"elements\":[{\n    {\n        \"read_only\": false, \n        \"required\": true, \n        \"id\": \"12\", \n        \"type\": \"TimeDay\", \n        \"options\": [\n          {\n            \"name\": \"Peter\", \n            \"value\": 11\n          }, \n          {\n            \"name\": \"George\", \n            \"value\": 13\n          }, \n          {\n            \"name\": \"Laura\", \n            \"value\": 14\n          }\n        ]\n      }]\n    }\n```\n\nWhich is correctly maps to the following class:\n\n``` java\n public class Response{\n\n     List<Element> elements\n     public class Element {\n\n        boolean read_only;\n        boolean required;\n        String id;\n        String type;\n        List<Option> options;\n\n        class Option {\n            String name;\n            int value;\n        }\n    }\n}\n```\n\nThe problem however starts when I meet the following: \n\n``` javascript\n\"elements\":[{\n{\n    \"read_only\": false, \n    \"required\": true, \n    \"id\": \"12\", \n    \"type\": \"TimeDay\", \n    \"options\": null\n  }]\n}\n```\n\nHere Gson complaints that there is a String where it expects to find an Array, indicating that it is parsing the null value as a String with the value of \"null\" rather than setting my list to null. I searched everywhere for a way around this and all I found was to write my custom deserializer. So I did this:\n\n``` java\n         class NullCollectionDeserializer implements JsonDeserializer<List> {\n            @Override\n            public List deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n\n                if (json.isJsonNull()) {\n                    return null;\n                }\n                return new Gson().fromJson(json, typeOfT);\n            }\n        }\n```\n\nNot only I find it odd that I have to write a custom solution to provide what should be standard functionality but - due to the fact that the \"options\" list is nested within another list - the above code does not even work. This is because the deserialize method will be called when Gson meets the \"elements\" list, asking the new Gson instance at the end of the method to parse its contents, which in turn may contain the null list. Because this instance does not know how to handle null lists, the result is that Gson again complaints about finding a String where it expected to find an Array.", "I am surprised at the behavior, we have plenty of tests that ensure that null behavior is correct in Gson.\nhttps://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional\n\nCan you send a pull request with a test that replicates this behavior?\n =||= Wrote a test and it passed. After further investigation I finally realised that the problem was with my api as in some cases the options array would be mistakenly wrapped in double quotes, thereby turning it into a string. Thank you for your help. I'll close this issue.\n =||= ", 0], ["768", "ISO8601 is not fully implemented", "Dan Souza", "paniko0", "02/03/16, 04:23:52 AM", "Hi guys,\n\nI'm working on a project where I have to parse `2016-01-11T11:06:14.000-02` to java.util.Date which is a valid date according to [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) on page 12.\n\nBut I got an Exception trying to archive it\n\n```\nCaused by: com.google.gson.JsonSyntaxException: 2016-01-11T11:06:14.000-02\n        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)\n        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)\n        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:38)\n        at com.google.gson.TreeTypeAdapter.read(TreeTypeAdapter.java:58)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)\n        at com.google.gson.Gson.fromJson(Gson.java:861)\n        at com.google.gson.Gson.fromJson(Gson.java:926)\n        at com.google.gson.Gson.fromJson(Gson.java:899)\n        at ...\nCaused by: java.text.ParseException: Failed to parse date [\"2016-01-11T11:06:14.000-02']: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00\n        at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:270)\n        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:105)\n        ... 31 more\nCaused by: java.lang.IndexOutOfBoundsException: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00\n        at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:236)\n        ... 32 more\n```\n\nI'm able to fix this if it sounds reasonable.", "Does using the `UtcDateTypeAdapter` work? https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n =||= It doesn't seem to work:\n\n``` java\npublic class Bla {\n        private Date createdAt;\n\n        public Date getCreatedAt() {\n            return createdAt;\n        }\n\n        public void setCreatedAt(Date createdAt) {\n            this.createdAt = createdAt;\n        }\n    }\n```\n\nregistering adapter:\n\n``` java\npublic class GsonFactory {\n\n    public Gson getGson(){\n\n        GsonBuilder gsonBuilder = new GsonBuilder();\n\n        return gsonBuilder.registerTypeAdapter(Date.class, new UtcDateTypeAdapter()).create();\n    }\n}\n```\n\ntest case:\n\n``` java\npublic class GsonFactoryTest {\n\n    @Test\n    public void dateShouldBeParsed() throws Exception {\n        GsonFactory gsonFactory = new GsonFactory();\n        Gson gson = gsonFactory.getGson();\n\n        Bla bla = gson.fromJson(\"{\\\"createdAt\\\": \\\"2016-01-08T17:29:05.730-02\\\"}\", Bla.class);\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(bla.getCreatedAt());\n\n        assertEquals(2016, calendar.get(Calendar.YEAR));\n    }\n}\n```\n\nand the return:\n\n```\ncom.google.gson.JsonParseException: java.text.ParseException: Failed to parse date [\"2016-01-08T17:29:05.730-02']: null\n    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:60)\n    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:33)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)\n    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)\n    at com.google.gson.Gson.fromJson(Gson.java:861)\n    at com.google.gson.Gson.fromJson(Gson.java:826)\n    at com.google.gson.Gson.fromJson(Gson.java:775)\n    at com.google.gson.Gson.fromJson(Gson.java:747)\n    at notificador.domain.config.factory.GsonFactoryTest.dateShouldBeParsed(GsonFactoryTest.java:18)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\nCaused by: java.text.ParseException: Failed to parse date [\"2016-01-08T17:29:05.730-02']: null\n    at notificador.domain.config.factory.UtcDateTypeAdapter.parse(UtcDateTypeAdapter.java:234)\n    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:57)\n    ... 37 more\n```\n\nAm I doing something wrong?\n =||= ", 0], ["769", "timezones without minutes should be valid according RFC3339", "Dan Souza", "paniko0", "02/03/16, 04:23:52 AM", "According to RFC, the format is:\n\ntime-numoffset    = (\"+\" / \"-\") time-hour [[\":\"] time-minute]\n\nit fixes #768 ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= @swankjesse @JakeWharton I am going to merge this, as this is additional support with seemingly no backward incompatibility.\n =||= ", ["769", "timezones without minutes should be valid according RFC3339", "Dan Souza", "paniko0", "02/03/16, 04:23:52 AM", "According to RFC, the format is:\n\ntime-numoffset    = (\"+\" / \"-\") time-hour [[\":\"] time-minute]\n\nit fixes #768 ", "NaN"], ["Danillo Souza", "timezones without minutes should are valid according RFC3339", "01/11/16, 05:33:55 PM", "Danillo Souza", "ed6298c98a35ccef795caa6cb39bcef01b64e274", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -113,7 +113,7 @@ public static String format(Date date, boolean millis, TimeZone tz) {\n \n     /**\n      * Parse a date from ISO-8601 formatted string. It expects a format\n-     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]]\n+     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n      * \n      * @param date ISO string to parse in the appropriate format.\n      * @param pos The position to start parsing from, updated to where parsing stopped.\n@@ -209,6 +209,10 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {\n                 offset += 1;\n             } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                 String timezoneOffset = date.substring(offset);\n+\n+                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00\n+                timezoneOffset = timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + \"00\";\n+\n                 offset += timezoneOffset.length();\n                 // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n                 if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {, @@ -130,6 +130,7 @@ public void testDateDeserializationISO8601() throws Exception {\n     assertParsed(\"1970-01-01T00:00Z\", adapter);\n     assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n     assertParsed(\"1970-01-01T01:00:00+01:00\", adapter);\n+    assertParsed(\"1970-01-01T01:00:00+01\", adapter);\n   }\n   \n   public void testDateSerialization() throws Exception {, ", 6, 1, "\"modified, modified, \"", 7], 1], ["770", "Fix typo in JsonArray docs", "Gabriel Borges", "Psidium", "01/12/16, 03:16:19 PM", "Hey, sorry to bother you guys with such an small pull request, but I saw this typo in the documentation and I couldn't let it go.\n\n:stuck_out_tongue_closed_eyes: \nthankss", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= @Psidium Thanks for the typo fix. Small pull requests like these are perfect.\n =||= ", ["770", "Fix typo in JsonArray docs", "Gabriel Borges", "Psidium", "01/12/16, 03:16:19 PM", "Hey, sorry to bother you guys with such an small pull request, but I saw this typo in the documentation and I couldn't let it go.\n\n:stuck_out_tongue_closed_eyes: \nthankss", "NaN"], ["Psidium", "fix typo in JsonArray docs", "01/12/16, 01:02:42 PM", "Psidium", "61f58baaf926d3e6b16a52305537b3495f155ca8", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -162,7 +162,7 @@ public int size() {\n   }\n \n   /**\n-   * Returns an iterator to navigate the elemetns of the array. Since the array is an ordered list,\n+   * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,\n    * the iterator navigates the elements in the order they were inserted.\n    *\n    * @return an iterator to navigate the elements of the array., ", 1, 1, "\"modified, \"", 2], 1], ["771", "Add setting for leniency on Gson instance.", "Jake Wharton", "JakeWharton", "01/18/16, 07:03:23 PM", "Add a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.", "This is good. It\u2019s a bit unfortunate that by default `Gson` is actually lenient in some cases and not-lenient in others. Oh well.\n =||= LGTM. @inder123 any thoughts?\n =||= > It\u2019s a bit unfortunate that by default Gson is actually lenient in some cases and not-lenient in others. Oh well.\n\nAgree! Too late to change. Just trying to make the best of that unfortunate situation. \n =||= LGTM!\n =||= ", ["771", "Add setting for leniency on Gson instance.", "Jake Wharton", "JakeWharton", "01/18/16, 07:03:23 PM", "Add a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.", "NaN"], ["Jake Wharton", "Add setting for leniency on Gson instance.\n\nAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.", "01/17/16, 08:03:04 AM", "Jake Wharton", "3360c93a76a74d1182b912052973e08ffa868b43", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/functional/LeniencyTest.java"], "@@ -101,6 +101,12 @@\n  */\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n+  static final boolean DEFAULT_LENIENT = false;\n+  static final boolean DEFAULT_PRETTY_PRINT = false;\n+  static final boolean DEFAULT_ESCAPE_HTML = true;\n+  static final boolean DEFAULT_SERIALIZE_NULLS = false;\n+  static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n+  static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n@@ -124,6 +130,7 @@\n   private final boolean htmlSafe;\n   private final boolean generateNonExecutableJson;\n   private final boolean prettyPrinting;\n+  private final boolean lenient;\n \n   final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n     @SuppressWarnings(\"unchecked\")\n@@ -177,22 +184,24 @@\n    */\n   public Gson() {\n     this(Excluder.DEFAULT, FieldNamingPolicy.IDENTITY,\n-        Collections.<Type, InstanceCreator<?>>emptyMap(), false, false, DEFAULT_JSON_NON_EXECUTABLE,\n-        true, false, false, LongSerializationPolicy.DEFAULT,\n-        Collections.<TypeAdapterFactory>emptyList());\n+        Collections.<Type, InstanceCreator<?>>emptyMap(), DEFAULT_SERIALIZE_NULLS,\n+        DEFAULT_COMPLEX_MAP_KEYS, DEFAULT_JSON_NON_EXECUTABLE, DEFAULT_ESCAPE_HTML,\n+        DEFAULT_PRETTY_PRINT, DEFAULT_LENIENT, DEFAULT_SPECIALIZE_FLOAT_VALUES,\n+        LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());\n   }\n \n   Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingPolicy,\n       final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n-      boolean prettyPrinting, boolean serializeSpecialFloatingPointValues,\n+      boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy,\n       List<TypeAdapterFactory> typeAdapterFactories) {\n     this.constructorConstructor = new ConstructorConstructor(instanceCreators);\n     this.serializeNulls = serializeNulls;\n     this.generateNonExecutableJson = generateNonExecutableGson;\n     this.htmlSafe = htmlSafe;\n     this.prettyPrinting = prettyPrinting;\n+    this.lenient = lenient;\n \n     List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();\n \n@@ -704,6 +713,15 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {\n     return jsonWriter;\n   }\n \n+  /**\n+   * Returns a new JSON writer configured for the settings on this Gson instance.\n+   */\n+  public JsonReader newJsonReader(Reader reader) {\n+    JsonReader jsonReader = new JsonReader(reader);\n+    jsonReader.setLenient(lenient);\n+    return jsonReader;\n+  }\n+\n   /**\n    * Writes the JSON for {@code jsonElement} to {@code writer}.\n    * @throws JsonIOException if there was a problem writing to the writer\n@@ -795,7 +813,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * @since 1.2\n    */\n   public <T> T fromJson(Reader json, Class<T> classOfT) throws JsonSyntaxException, JsonIOException {\n-    JsonReader jsonReader = new JsonReader(json);\n+    JsonReader jsonReader = newJsonReader(json);\n     Object object = fromJson(jsonReader, classOfT);\n     assertFullConsumption(object, jsonReader);\n     return Primitives.wrap(classOfT).cast(object);\n@@ -822,7 +840,7 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n-    JsonReader jsonReader = new JsonReader(json);\n+    JsonReader jsonReader = newJsonReader(json);\n     T object = (T) fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;, @@ -16,6 +16,7 @@\n \n package com.google.gson;\n \n+import com.google.gson.stream.JsonReader;\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n@@ -31,6 +32,14 @@\n import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.reflect.TypeToken;\n \n+import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;\n+import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;\n+import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;\n+import static com.google.gson.Gson.DEFAULT_LENIENT;\n+import static com.google.gson.Gson.DEFAULT_PRETTY_PRINT;\n+import static com.google.gson.Gson.DEFAULT_SERIALIZE_NULLS;\n+import static com.google.gson.Gson.DEFAULT_SPECIALIZE_FLOAT_VALUES;\n+\n /**\n  * <p>Use this builder to construct a {@link Gson} instance when you need to set configuration\n  * options other than the default. For {@link Gson} with default configuration, it is simpler to\n@@ -74,15 +83,16 @@\n   private final List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>();\n   /** tree-style hierarchy factories. These come after factories for backwards compatibility. */\n   private final List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>();\n-  private boolean serializeNulls;\n+  private boolean serializeNulls = DEFAULT_SERIALIZE_NULLS;\n   private String datePattern;\n   private int dateStyle = DateFormat.DEFAULT;\n   private int timeStyle = DateFormat.DEFAULT;\n-  private boolean complexMapKeySerialization;\n-  private boolean serializeSpecialFloatingPointValues;\n-  private boolean escapeHtmlChars = true;\n-  private boolean prettyPrinting;\n-  private boolean generateNonExecutableJson;\n+  private boolean complexMapKeySerialization = DEFAULT_COMPLEX_MAP_KEYS;\n+  private boolean serializeSpecialFloatingPointValues = DEFAULT_SPECIALIZE_FLOAT_VALUES;\n+  private boolean escapeHtmlChars = DEFAULT_ESCAPE_HTML;\n+  private boolean prettyPrinting = DEFAULT_PRETTY_PRINT;\n+  private boolean generateNonExecutableJson = DEFAULT_JSON_NON_EXECUTABLE;\n+  private boolean lenient = DEFAULT_LENIENT;\n \n   /**\n    * Creates a GsonBuilder instance that can be used to build Gson with various configuration\n@@ -351,6 +361,19 @@ public GsonBuilder setPrettyPrinting() {\n     return this;\n   }\n \n+  /**\n+   * By default, Gson is strict and only accepts JSON as specified by\n+   * <a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. This option makes the parser\n+   * liberal in what it accepts.\n+   *\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   * @see JsonReader#setLenient(boolean)\n+   */\n+  public GsonBuilder setLenient() {\n+    lenient = true;\n+    return this;\n+  }\n+\n   /**\n    * By default, Gson escapes HTML characters such as &lt; &gt; etc. Use this option to configure\n    * Gson to pass-through HTML characters as is.\n@@ -544,7 +567,7 @@ public Gson create() {\n \n     return new Gson(excluder, fieldNamingPolicy, instanceCreators,\n         serializeNulls, complexMapKeySerialization,\n-        generateNonExecutableJson, escapeHtmlChars, prettyPrinting,\n+        generateNonExecutableJson, escapeHtmlChars, prettyPrinting, lenient,\n         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);\n   }\n , @@ -294,7 +294,7 @@ public JsonReader(Reader in) {\n   }\n \n   /**\n-   * Configure this parser to be  be liberal in what it accepts. By default,\n+   * Configure this parser to be liberal in what it accepts. By default,\n    * this parser is strict and only accepts JSON as specified by <a\n    * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the\n    * parser to lenient causes it to ignore the following syntax errors:, @@ -0,0 +1,46 @@\n+/*\n+ * Copyright (C) 2016 The Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import java.util.List;\n+import junit.framework.TestCase;\n+\n+import static java.util.Collections.singletonList;\n+\n+/**\n+ * Functional tests for leniency option.\n+ */\n+public class LeniencyTest extends TestCase {\n+\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder().setLenient().create();\n+  }\n+\n+  public void testLenientFromJson() {\n+    List<String> json = gson.fromJson(\"\"\n+        + \"[ # One!\\n\"\n+        + \"  'Hi' #Element!\\n\"\n+        + \"] # Array!\", new TypeToken<List<String>>() {}.getType());\n+    assertEquals(singletonList(\"Hi\"), json);\n+  }\n+}, ", 101, 14, "\"modified, modified, modified, added, \"", 115], 1], ["772", "Add nullsafe option to JsonAdapter annotation", "Jerzy Cha\u0142upski", "chalup", "01/18/16, 04:56:14 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= CLA signed.\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= I think this is a weird API. Should we just do null safety automatically with `@JsonAdapter`?\n =||= That would be reasonable, but strictly speaking it's a backward\nincompatible change. Not sure what's the project's policy.\nOn Jan 17, 2016 18:23, \"Jesse Wilson\" notifications@github.com wrote:\n\n> I think this is a weird API. Should we just do null safety automatically\n> with @JsonAdapter?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/772#issuecomment-172354642.\n =||= @inder123  ?\n =||= @JakeWharton ?\n =||= > Should we just do null safety automatically with `@JsonAdapter`?\n\nYeah this is probably best since it's in line with the behavior without being annotated. Or at least for fields it is. Not sure about classes in that case.\n =||= Nits fixed.\n\nSo we really have two questions: should nullsafe wrap be configurable and what should be the default behavior. I can't think of the non-contrived use case for not nullsafe adapter, so I'd be fine with making it non-configurable default.\n\nLet me know what you think, and I'll update my PR.\n =||= Not configurable by default is my preference.\n =||= So please update your PR!\n =||= Updated.\n =||= LGTM\n =||= ", ["772", "Add nullsafe option to JsonAdapter annotation", "Jerzy Cha\u0142upski", "chalup", "01/18/16, 04:56:14 PM", "NaN", "NaN"], ["Jerzy Chalupski", "Make TypeAdapters created by @JsonAdapter null-safe", "01/18/16, 03:41:07 PM", "Jerzy Chalupski", "23e2916947940864f828505531aa130fba6d8743", ["gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -51,18 +51,20 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,\n       TypeToken<?> fieldType, JsonAdapter annotation) {\n     Class<?> value = annotation.value();\n+    final TypeAdapter<?> typeAdapter;\n     if (TypeAdapter.class.isAssignableFrom(value)) {\n-          Class<TypeAdapter<?>> typeAdapter = (Class<TypeAdapter<?>>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n-    }\n-    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n-          Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n-      return constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n+      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n+    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;\n+      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))\n           .construct()\n           .create(gson, fieldType);\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n     }\n \n-    throw new IllegalArgumentException(\n-        \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n+    return typeAdapter.nullSafe();\n   }\n }, @@ -133,6 +133,12 @@ public void testSuperclassTypeAdapterNotInvoked() {\n     assertFalse(json.contains(\"jsonAdapter\"));\n   }\n \n+  public void testNullSafeObjectFromJson() {\n+    Gson gson = new Gson();\n+    NullableClass fromJson = gson.fromJson(\"null\", NullableClass.class);\n+    assertNull(fromJson);\n+  }\n+\n   @JsonAdapter(A.JsonAdapter.class)\n   private static class A {\n     final String value;\n@@ -215,6 +221,23 @@ public void testSuperclassTypeAdapterNotInvoked() {\n     }\n   }\n \n+  @JsonAdapter(value = NullableClassJsonAdapter.class)\n+  private static class NullableClass {\n+  }\n+\n+  private static class NullableClassJsonAdapter extends TypeAdapter<NullableClass> {\n+    @Override\n+    public void write(JsonWriter out, NullableClass value) throws IOException {\n+      out.value(\"nullable\");\n+    }\n+\n+    @Override\n+    public NullableClass read(JsonReader in) throws IOException {\n+      in.nextString();\n+      return new NullableClass();\n+    }\n+  }\n+\n   @JsonAdapter(FooJsonAdapter.class)\n   private static enum Foo { BAR, BAZ }\n   private static class FooJsonAdapter extends TypeAdapter<Foo> {, @@ -200,4 +200,24 @@ public void testJsonAdapterInvokedOnlyForAnnotatedFields() {\n       this.part2 = part2;\n     }\n   }\n+\n+  public void testJsonAdapterWrappedInNullSafeAsRequested() {\n+    Gson gson = new Gson();\n+    String fromJson = \"{'part':null}\";\n+\n+    GadgetWithOptionalPart gadget = gson.fromJson(fromJson, GadgetWithOptionalPart.class);\n+    assertNull(gadget.part);\n+\n+    String toJson = gson.toJson(gadget);\n+    assertFalse(toJson.contains(\"PartJsonFieldAnnotationAdapter\"));\n+  }\n+\n+  private static final class GadgetWithOptionalPart {\n+    @JsonAdapter(value = PartJsonFieldAnnotationAdapter.class)\n+    final Part part;\n+\n+    private GadgetWithOptionalPart(Part part) {\n+      this.part = part;\n+    }\n+  }\n }, ", 53, 8, "\"modified, modified, modified, \"", 61], 1], ["773", "Update reader and writer for RFC 7159.", "Jake Wharton", "JakeWharton", "01/18/16, 08:16:01 PM", "This allows for top-level value types without the requirement of leniency.", "NaN", ["773", "Update reader and writer for RFC 7159.", "Jake Wharton", "JakeWharton", "01/18/16, 08:16:01 PM", "This allows for top-level value types without the requirement of leniency.", "NaN"], ["Jake Wharton", "Update reader and writer for RFC 7159.", "01/18/16, 08:07:33 PM", "Jake Wharton", "c8627c8ab831dec86eeb52fc02600b22c81ba858", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -24,7 +24,7 @@\n import java.io.Reader;\n \n /**\n- * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n+ * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n  * encoded value as a stream of tokens. This stream includes both literal\n  * values (strings, numbers, booleans, and nulls) as well as the begin and\n  * end delimiters of objects and arrays. The tokens are traversed in\n@@ -571,9 +571,6 @@ int doPeek() throws IOException {\n       checkLenient();\n       return peeked = PEEKED_SINGLE_QUOTED;\n     case '\"':\n-      if (stackSize == 1) {\n-        checkLenient();\n-      }\n       return peeked = PEEKED_DOUBLE_QUOTED;\n     case '[':\n       return peeked = PEEKED_BEGIN_ARRAY;\n@@ -583,10 +580,6 @@ int doPeek() throws IOException {\n       pos--; // Don't consume the first character in a literal value.\n     }\n \n-    if (stackSize == 1) {\n-      checkLenient(); // Top-level value isn't an array or an object.\n-    }\n-\n     int result = peekKeyword();\n     if (result != PEEKED_NONE) {\n       return result;, @@ -30,7 +30,7 @@\n import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT;\n \n /**\n- * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>)\n+ * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n  * encoded value to a stream, one token at a time. The stream includes both\n  * literal values (strings, numbers, booleans and nulls) as well as the begin\n  * and end delimiters of objects and arrays.\n@@ -130,7 +130,7 @@\n public class JsonWriter implements Closeable, Flushable {\n \n   /*\n-   * From RFC 4627, \"All Unicode characters may be placed within the\n+   * From RFC 7159, \"All Unicode characters may be placed within the\n    * quotation marks except for the characters that must be escaped:\n    * quotation mark, reverse solidus, and the control characters\n    * (U+0000 through U+001F).\"\n@@ -222,7 +222,7 @@ public final void setIndent(String indent) {\n   /**\n    * Configure this writer to relax its syntax rules. By default, this writer\n    * only emits well-formed JSON as specified by <a\n-   * href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>. Setting the writer\n+   * href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>. Setting the writer\n    * to lenient permits the following:\n    * <ul>\n    *   <li>Top-level values of any type. With strict writing, the top-level\n@@ -322,7 +322,7 @@ public JsonWriter endObject() throws IOException {\n    * bracket.\n    */\n   private JsonWriter open(int empty, String openBracket) throws IOException {\n-    beforeValue(true);\n+    beforeValue();\n     push(empty);\n     out.write(openBracket);\n     return this;\n@@ -415,7 +415,7 @@ public JsonWriter value(String value) throws IOException {\n       return nullValue();\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     string(value);\n     return this;\n   }\n@@ -432,7 +432,7 @@ public JsonWriter jsonValue(String value) throws IOException {\n       return nullValue();\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.append(value);\n     return this;\n   }\n@@ -451,7 +451,7 @@ public JsonWriter nullValue() throws IOException {\n         return this; // skip the name and the value\n       }\n     }\n-    beforeValue(false);\n+    beforeValue();\n     out.write(\"null\");\n     return this;\n   }\n@@ -463,7 +463,7 @@ public JsonWriter nullValue() throws IOException {\n    */\n   public JsonWriter value(boolean value) throws IOException {\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.write(value ? \"true\" : \"false\");\n     return this;\n   }\n@@ -480,7 +480,7 @@ public JsonWriter value(double value) throws IOException {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.append(Double.toString(value));\n     return this;\n   }\n@@ -492,7 +492,7 @@ public JsonWriter value(double value) throws IOException {\n    */\n   public JsonWriter value(long value) throws IOException {\n     writeDeferredName();\n-    beforeValue(false);\n+    beforeValue();\n     out.write(Long.toString(value));\n     return this;\n   }\n@@ -515,7 +515,7 @@ public JsonWriter value(Number value) throws IOException {\n         && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    beforeValue(false);\n+    beforeValue();\n     out.append(string);\n     return this;\n   }\n@@ -608,12 +608,9 @@ private void beforeName() throws IOException {\n    * Inserts any necessary separators and whitespace before a literal value,\n    * inline array, or inline object. Also adjusts the stack to expect either a\n    * closing bracket or another element.\n-   *\n-   * @param root true if the value is a new array or object, the two values\n-   *     permitted as top-level elements.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private void beforeValue(boolean root) throws IOException {\n+  private void beforeValue() throws IOException {\n     switch (peek()) {\n     case NONEMPTY_DOCUMENT:\n       if (!lenient) {\n@@ -622,10 +619,6 @@ private void beforeValue(boolean root) throws IOException {\n       }\n       // fall-through\n     case EMPTY_DOCUMENT: // first in document\n-      if (!lenient && !root) {\n-        throw new IllegalStateException(\n-            \"JSON must start with an array or an object.\");\n-      }\n       replaceTop(NONEMPTY_DOCUMENT);\n       break;\n , @@ -195,14 +195,6 @@ public void testEmptyString() {\n     }\n   }\n \n-  public void testNoTopLevelObject() {\n-    try {\n-      new JsonReader(reader(\"true\")).nextBoolean();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n-\n   public void testCharacterUnescaping() throws IOException {\n     String json = \"[\\\"a\\\",\"\n         + \"\\\"a\\\\\\\"\\\",\"\n@@ -1227,44 +1219,37 @@ public void testStrictMultipleTopLevelValuesWithSkipValue() throws IOException {\n     }\n   }\n \n-  public void testStrictTopLevelString() {\n-    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n-    try {\n-      reader.nextString();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n+  public void testTopLevelValueTypes() throws IOException {\n+    JsonReader reader1 = new JsonReader(reader(\"true\"));\n+    assertTrue(reader1.nextBoolean());\n+    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());\n \n-  public void testLenientTopLevelString() throws IOException {\n-    JsonReader reader = new JsonReader(reader(\"\\\"a\\\"\"));\n-    reader.setLenient(true);\n-    assertEquals(\"a\", reader.nextString());\n-    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n-  }\n+    JsonReader reader2 = new JsonReader(reader(\"false\"));\n+    assertFalse(reader2.nextBoolean());\n+    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());\n \n-  public void testStrictTopLevelValueType() {\n-    JsonReader reader = new JsonReader(reader(\"true\"));\n-    try {\n-      reader.nextBoolean();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n-  }\n+    JsonReader reader3 = new JsonReader(reader(\"null\"));\n+    assertEquals(JsonToken.NULL, reader3.peek());\n+    reader3.nextNull();\n+    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());\n \n-  public void testLenientTopLevelValueType() throws IOException {\n-    JsonReader reader = new JsonReader(reader(\"true\"));\n-    reader.setLenient(true);\n-    assertEquals(true, reader.nextBoolean());\n+    JsonReader reader4 = new JsonReader(reader(\"123\"));\n+    assertEquals(123, reader4.nextInt());\n+    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());\n+\n+    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n+    assertEquals(123.4, reader5.nextDouble());\n+    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());\n+\n+    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n+    assertEquals(\"a\", reader6.nextString());\n+    assertEquals(JsonToken.END_DOCUMENT, reader6.peek());\n   }\n \n-  public void testStrictTopLevelValueTypeWithSkipValue() {\n+  public void testTopLevelValueTypeWithSkipValue() throws IOException {\n     JsonReader reader = new JsonReader(reader(\"true\"));\n-    try {\n-      reader.skipValue();\n-      fail();\n-    } catch (IOException expected) {\n-    }\n+    reader.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n   public void testStrictNonExecutePrefix() {\n@@ -1524,7 +1509,7 @@ public void testUnterminatedObject() throws IOException {\n     } catch (MalformedJsonException expected) {\n     }\n   }\n-  \n+\n   public void testVeryLongQuotedString() throws IOException {\n     char[] stringChars = new char[1024 * 16];\n     Arrays.fill(stringChars, 'x');, @@ -25,11 +25,44 @@\n @SuppressWarnings(\"resource\")\n public final class JsonWriterTest extends TestCase {\n \n-  public void testWrongTopLevelType() throws IOException {\n+  public void testTopLevelValueTypes() throws IOException {\n+    StringWriter string1 = new StringWriter();\n+    JsonWriter writer1 = new JsonWriter(string1);\n+    writer1.value(true);\n+    writer1.close();\n+    assertEquals(\"true\", string1.toString());\n+\n+    StringWriter string2 = new StringWriter();\n+    JsonWriter writer2 = new JsonWriter(string2);\n+    writer2.nullValue();\n+    writer2.close();\n+    assertEquals(\"null\", string2.toString());\n+\n+    StringWriter string3 = new StringWriter();\n+    JsonWriter writer3 = new JsonWriter(string3);\n+    writer3.value(123);\n+    writer3.close();\n+    assertEquals(\"123\", string3.toString());\n+\n+    StringWriter string4 = new StringWriter();\n+    JsonWriter writer4 = new JsonWriter(string4);\n+    writer4.value(123.4);\n+    writer4.close();\n+    assertEquals(\"123.4\", string4.toString());\n+\n+    StringWriter string5 = new StringWriter();\n+    JsonWriter writert = new JsonWriter(string5);\n+    writert.value(\"a\");\n+    writert.close();\n+    assertEquals(\"\\\"a\\\"\", string5.toString());\n+  }\n+\n+  public void testInvalidTopLevelTypes() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.name(\"hello\");\n     try {\n-      jsonWriter.value(\"a\");\n+      jsonWriter.value(\"world\");\n       fail();\n     } catch (IllegalStateException expected) {\n     }, ", 74, 70, "\"modified, modified, modified, modified, \"", 144], 1], ["774", "Convert integer 1 & 0 to the boolean true & false when parsing", "Maheshwar Ligade", "maheshwarLigade", "01/21/16, 01:51:54 PM", "I have JSON response which contains the object of user, which also  has the status as 1 & 0 which says that the value is true or false. please let me know how to parse the integer value to boolean.\n\nI have the Custom object Users. From API I am getting the {\"status\":1}, I need to convert it into the boolean i.e true, But I am not interested to serialise  all the other fields, they are as it is, I just need the solution for only boolean.", "You can write a type adapter. See the part about `@ToJson` on the readme for an example.\n =||= ", 0], ["775", "Fix for jdk 8: add Override annotation", "Alain Vitry", "avitry", "01/22/16, 11:52:41 AM", "Cosmetic only", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= ", 0], ["777", "HI", "Tom", "ikkyu0319", "01/28/16, 05:02:23 PM", "> {\n>   \"id\": 234,\n>   \"users\": [\n>     {\n>       \"age\": 11,\n>       \"name\": \"ddd\"\n>     },\n>     {\n>       \"age\": 22,\n>       \"name\": \"ccc\"\n>     }\n>   ]\n> } \n\nI want Bean is \n\n> String id\uff1b\n>    String users\uff1b\n\nbut \n\n> java.lang.IllegalArgumentException: field com.qyer.android.plan.bean.Bean xxxx  has type java.lang.String, got java.util.ArrayList \n\nhow do about it\uff1f please help\uff01\uff01", "@willnorris @adamtanner @vogella \n =||= The `users` key is an array in the JSON, not a string. You need to use the type `List<User>` for the `users` field and create a `User` object which has both `age` and `name` fields.\n\nFor more help in the future, please ask a questions on StackOverflow with the 'gson' tag. There's a lot of helpful people over there and it usually results in a much faster answer.\n =||= Yes \uff0cI know List<User> is OK\uff0cbut I want Use string  and save the string\uff0cCan I do that?\n =||= As in, you want the JSON array to be stored as a raw String?\n =||= yes~~ so i use \"string users\"\n =||= Gson does not support that. You can use `JsonArray` as the type which will represent the array in a simple object model form.\n =||= ", 0], ["778", "Setting lenient in Retrofit-2", "Maxim", "maxblumental", "01/28/16, 09:35:39 PM", "How about make this setting through providing an optional argument to the factory. I can't see a short way to that now. Here's a more detailed description of my problem and attempt to solve it: http://stackoverflow.com/questions/35072287/gsonconverterfactory-for-retrofit2-lenient-setting", "Leniency has been added to `GsonBuilder` for the next release (https://github.com/google/gson/pull/771) and will be supported in Retrofit once available (https://github.com/square/retrofit/issues/1465).\n =||= ", 0], ["779", "json conversion error in retrofit 2", "abhishekgargg", "abhishekgargg", "02/01/16, 02:39:57 PM", "I am facing problem in fetching json data from a GET request using retrofit.\nBelow is the stack trace to the problem. How do I get rid of this error?\n\njava.io.EOFException: End of input at line 1 column 1\n                                                                                           at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:1414)\n                                                                                           at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:553)\n                                                                                           at com.google.gson.stream.JsonReader.peek(JsonReader.java:429)\n                                                                                           at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:202)\n                                                                                           at com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:260)\n                                                                                           at retrofit2.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:33)\n                                                                                           at retrofit2.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:23)\n                                                                                           at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:154)\n                                                                                           at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:92)\n                                                                                           at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)\n                                                                                           at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:33)\n                                                                                           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n                                                                                           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n                                                                                           at java.lang.Thread.run(Thread.java:818)", "I am using these libraries..\ncompile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'\ncompile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'\n =||= This happens because you told Gson to deserialize data from a stream into some object and the stream is empty. If there is no data, Gson should not be called (and you can return null or however you want to indicate to the calling code that there's no data).\n =||= ", 0], ["780", "not able to manage cookies in android using retrofit2 and okhttp3", "abhishekgargg", "abhishekgargg", "02/02/16, 03:18:31 PM", "I am sending a POST login request which gets me a jSessionId, and I want to add this jSessionId in my consecutive requests to fetch logged in data.\n\nI think this kind of task is handled by cookies in android, and I have found a couple of solutions for the same, but most of the solutions are either not compatible with okhttp3 OR don't work.\n\nCan anyone please help me out with any suggestions or a small working sample that works with okhttp3 and retrofit2?", "Gson is a JSON serializer and has nothing to do with cookies or either of these libraries. This type of question is best suited for StackOverflow using tags of the libraries you mention.\n =||= ", 0], ["781", "Gson converts \\/ to \\\\/", "Haider", "ZkHaider", "02/03/16, 04:05:18 AM", "How can I fix this? I am trying to pass a request with `Retrofit`, something like this:\n\n```\nhttp:\\/\\/something.com\\/something\\/else.json\n```\n\nBut `Gson` converts this into:\n\n```\nhttp:\\\\/\\\\/something.com\\\\/something\\\\/else.json\n```", "The JSON RFC dictates this in section 7: https://tools.ietf.org/html/rfc7159#section-7, emphasis added.\n\n> All Unicode characters may be placed within the quotation marks, **except for the characters that must be escaped**: quotation mark, **reverse solidus**, and the control characters (U+0000 through U+001F).\n\nThe reverse solidus is the `\\` character and must be escaped inside strings.\n =||= ", 0], ["782", "JSONObject  transforms to nameValuePair", "Nick Unuchek", "Kolyall", "02/03/16, 03:09:36 PM", "Example:\n\n```\nclass Example {\n @SerializedName(\"exampleField\")\n    public JSONObject exampleField = new JSONObject(\"{\\\"name\\\":\\\"Nick\\\"}\");\n}\n```\n\n`Log.e(TAG,gson.toJson(new Example()))`\n\nresult:\n\n```\n\"exampleField\": {\n  \"nameValuePairs\": {\n   \"name\": \"Nick\"\n  }\n }\n\n```\n\nexpected Result:\n\n```\n\"exampleField\": {\n   \"name\": \"Nick\"\n   }\n```", "Use `com.google.gson.JsonObject` not `org.json.JSONObject`.\n =||= Or write a `TypeAdapterFactory` that can handle `org.json*` types, but using Gson's own types seems a lot easier.\n =||= with JsonObject my result is\r\n\r\n\"exampleField\": {\r\n  \"members\": {\r\n   \"name\": \"Nick\"\r\n  }\r\n }\r\n\r\ninstead of the expected result.\r\n\r\nCan I create a JsonObject without any LinkedTreeMap or similar? =||= GsonBuilder registerTypeAdapter\r\n\r\n```\r\nnew GsonBuilder()\r\n.registerTypeAdapter(JSONObject.class, JSONObjectAdapter.sInstance)\r\n.registerTypeAdapter(JSONArray.class, JSONArrayAdapter.sInstance)\r\n```\r\n\r\n``` \r\n    static class JSONObjectAdapter implements JsonSerializer<JSONObject>, JsonDeserializer<JSONObject> {\r\n\r\n        public static JSONObjectAdapter sInstance = new JSONObjectAdapter();\r\n\r\n        @Override\r\n        public JsonElement serialize(JSONObject src, Type typeOfSrc, JsonSerializationContext context) {\r\n            if (src == null) {\r\n                return null;\r\n            }\r\n\r\n            JsonObject jsonObject = new JsonObject();\r\n            Iterator<String> keys = src.keys();\r\n            while (keys.hasNext()) {\r\n                String key = keys.next();\r\n                Object value = src.opt(key);\r\n\r\n                JsonElement jsonElement = context.serialize(value, value.getClass());\r\n                jsonObject.add(key, jsonElement);\r\n            }\r\n            return jsonObject;\r\n        }\r\n\r\n        @Override\r\n        public JSONObject deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            if (json == null) {\r\n                return null;\r\n            }\r\n            try {\r\n                return new JSONObject(json.toString());\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n                throw new JsonParseException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    static class JSONArrayAdapter implements JsonSerializer<JSONArray>, JsonDeserializer<JSONArray> {\r\n\r\n        public static final JSONArrayAdapter sInstance = new JSONArrayAdapter();\r\n\r\n        @Override\r\n        public JsonElement serialize(JSONArray src, Type typeOfSrc, JsonSerializationContext context) {\r\n            if (src == null) {\r\n                return null;\r\n            }\r\n            JsonArray jsonArray = new JsonArray();\r\n            for (int i = 0; i < src.length(); i++) {\r\n                Object object = src.opt(i);\r\n                JsonElement jsonElement = context.serialize(object, object.getClass());\r\n                jsonArray.add(jsonElement);\r\n            }\r\n            return jsonArray;\r\n        }\r\n\r\n        @Override\r\n        public JSONArray deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n            if (json == null) {\r\n                return null;\r\n            }\r\n            try {\r\n                return new JSONArray(json.toString());\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n                throw new JsonParseException(e);\r\n            }\r\n        }\r\n    }\r\n\r\n```\r\n =||= > GsonBuilder registerTypeAdapter\r\n> \r\n> ```\r\n> new GsonBuilder()\r\n> .registerTypeAdapter(JSONObject.class, JSONObjectAdapter.sInstance)\r\n> .registerTypeAdapter(JSONArray.class, JSONArrayAdapter.sInstance)\r\n> ```\r\n> \r\n> ```\r\n>     static class JSONObjectAdapter implements JsonSerializer<JSONObject>, JsonDeserializer<JSONObject> {\r\n> \r\n>         public static JSONObjectAdapter sInstance = new JSONObjectAdapter();\r\n> \r\n>         @Override\r\n>         public JsonElement serialize(JSONObject src, Type typeOfSrc, JsonSerializationContext context) {\r\n>             if (src == null) {\r\n>                 return null;\r\n>             }\r\n> \r\n>             JsonObject jsonObject = new JsonObject();\r\n>             Iterator<String> keys = src.keys();\r\n>             while (keys.hasNext()) {\r\n>                 String key = keys.next();\r\n>                 Object value = src.opt(key);\r\n> \r\n>                 JsonElement jsonElement = context.serialize(value, value.getClass());\r\n>                 jsonObject.add(key, jsonElement);\r\n>             }\r\n>             return jsonObject;\r\n>         }\r\n> \r\n>         @Override\r\n>         public JSONObject deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n>             if (json == null) {\r\n>                 return null;\r\n>             }\r\n>             try {\r\n>                 return new JSONObject(json.toString());\r\n>             } catch (JSONException e) {\r\n>                 e.printStackTrace();\r\n>                 throw new JsonParseException(e);\r\n>             }\r\n>         }\r\n>     }\r\n> \r\n> \r\n>     static class JSONArrayAdapter implements JsonSerializer<JSONArray>, JsonDeserializer<JSONArray> {\r\n> \r\n>         public static final JSONArrayAdapter sInstance = new JSONArrayAdapter();\r\n> \r\n>         @Override\r\n>         public JsonElement serialize(JSONArray src, Type typeOfSrc, JsonSerializationContext context) {\r\n>             if (src == null) {\r\n>                 return null;\r\n>             }\r\n>             JsonArray jsonArray = new JsonArray();\r\n>             for (int i = 0; i < src.length(); i++) {\r\n>                 Object object = src.opt(i);\r\n>                 JsonElement jsonElement = context.serialize(object, object.getClass());\r\n>                 jsonArray.add(jsonElement);\r\n>             }\r\n>             return jsonArray;\r\n>         }\r\n> \r\n>         @Override\r\n>         public JSONArray deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\r\n>             if (json == null) {\r\n>                 return null;\r\n>             }\r\n>             try {\r\n>                 return new JSONArray(json.toString());\r\n>             } catch (JSONException e) {\r\n>                 e.printStackTrace();\r\n>                 throw new JsonParseException(e);\r\n>             }\r\n>         }\r\n>     }\r\n> ```\r\n\r\nNB =||= ", 0], ["785", "Simple Gson Java sample yields null", null, "bruce-osnexus", "02/09/16, 03:15:48 AM", "The simplest sample code, as shown on several sites, doesn't seem to work as shown. Disclaimer - I am very new to Java. Scratching my head, it looks like I'm doing it exactly as shown in the simplest of simple examples.\nHere is what I am trying:\n\n```\n   class BagOfPrimitives {\n          private int value1 = 1;\n          private String value2 = \"abc\";\n          private transient int value3 = 3;\n          BagOfPrimitives() {\n              // no-args constructor\n          }\n    }\n    BagOfPrimitives obj = new BagOfPrimitives();\n    Gson gson1 = new Gson();\n    String jsonStr = gson1.toJson(obj);   \n    System.out.println( \"jsonStr = \" + jsonStr );\n```\n\nAnd it prints: \n    jsonStr = \n\nSimilarly, trying to go the other way:\n\n```\n class testClass {\n        public String vendorId = \"foo\";\n        public String productId = \"bar\";\n        testClass() {}\n    }\n    testClass myInst2 = new testClass();    // Could or should be \"null\"?\n    String inpStr = \"{\\\"vendorId\\\": \\\"Acme\\\",\\\"productId\\\": \\\"WhizBang\\\"}\";\n    myInst2 = gson.fromJson( inpStr, testClass.class );\n    System.out.println( \"    vendorId = \" + myInst2.vendorId );\n    System.out.println( \"    productId = \" + myInst2.productId );\n```\n\nAnd it prints:\n    vendorId = null\n    productId = null", "All of these examples should work as long as BagOfPrimitives and testClass are not inner classes.\nStatic inner classes are just fine.\n\nLook at these tests for examples of what works:\nhttps://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional\n =||= Thanks for the quick reply.> BagOfPrimitives and testClass are not inner classesThat was it. I had those classes defined inside my test method. Putting those outside as \"public\" (still inside the main test class) made it work.Thanks!!-bBruce LoweOS NEXUS Engineeringbruce.lowe@osnexus.comhttp://www.osnexus.com\n\n-------- Original Message --------\nSubject: Re: [gson] Simple Gson Java sample yields null (#785)\nFrom: inder123 notifications@github.com\nDate: Mon, February 08, 2016 8:16 pm\nTo: google/gson gson@noreply.github.com\nCc: bruce-osnexus bruce.lowe@osnexus.com\n\nAll of these examples should work as long as BagOfPrimitives and testClass are not inner classes. Static inner classes are just fine. Look at these tests for examples of what works: https://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional \u2014Reply to this email directly or view it on GitHub.\n =||= ", 0], ["786", "new JsonElement() constructor not compile", "Vasiliy", "basvas", "02/11/16, 02:16:13 PM", "IDE say that error and not compile code\nJsonElement je = new JsonElement();\n\"Cannot instantiate the type JsonElement\"", "`JsonElement` is an abstract class. `JsonObject` and `JsonArray` are the implementations that you can instantiate.\n =||= ", 0], ["787", "Simplify Gson poms.", "Jesse Wilson", "swankjesse", "02/11/16, 05:58:53 PM", "A lot of the configuration in these poms has been taken over by improvements\nto the Maven release plugin.", "LGTM. I would do a `mvn clean javadoc:jar sources:jar` to verify those tasks do what you expect and generate the output we expect.\n =||= ", ["787", "Simplify Gson poms.", "Jesse Wilson", "swankjesse", "02/11/16, 05:58:53 PM", "A lot of the configuration in these poms has been taken over by improvements\nto the Maven release plugin.", "NaN"], ["jwilson", "Simplify Gson poms.\n\nA lot of the configuration in these poms has been taken over by improvements\nto the Maven release plugin.", "02/11/16, 05:47:25 PM", "jwilson", "2016e9553eb946a09a9e70d83d31f4e8da675805", ["gson/pom.xml", "pom.xml"], "@@ -1,246 +1,36 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>com.google.code.gson</groupId>\n-  <artifactId>gson</artifactId>\n-  <packaging>jar</packaging>\n-  <version>2.6-SNAPSHOT</version>\n-  <inceptionYear>2008</inceptionYear>\n-  <name>Gson</name>\n+\n   <parent>\n-    <groupId>org.sonatype.oss</groupId>\n-    <artifactId>oss-parent</artifactId>\n-    <version>9</version>\n-    <relativePath />\n+    <groupId>com.google.code.gson</groupId>\n+    <artifactId>gson-parent</artifactId>\n+    <version>2.6-SNAPSHOT</version>\n   </parent>\n-  <url>https://github.com/google/gson</url>\n-  <description>Google Gson: Java to JSON conversion library</description>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <licenses>\n-    <license>\n-      <name>The Apache Software License, Version 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-      <distribution>repo</distribution>\n-    </license>\n-  </licenses>\n-  <scm>\n-    <connection>scm:git:https://github.com/google/gson.git</connection>\n-    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n-    <url>https://github.com/google/gson</url>\n-    <tag>gson-${project.version}</tag>\n-  </scm>\n-  <issueManagement>\n-    <system>Github Issue Tracking</system>\n-    <url>https://github.com/google/gson/issues</url>\n-  </issueManagement>\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <name>Sonatype Nexus Snapshots</name>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <name>Nexus Release Repository</name>\n-      <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n-  <organization>\n-    <name>Google, Inc.</name>\n-    <url>http://www.google.com</url>\n-  </organization>\n+\n+  <artifactId>gson</artifactId>\n+  <name>Gson</name>\n+\n   <dependencies>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n-  <profiles>\n-    <!-- Activate PGP signing only when performing a release -->\n-    <profile>\n-      <id>release-sign-artifacts</id>\n-      <activation>\n-        <property>\n-          <name>performRelease</name>\n-          <value>true</value>\n-        </property>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-gpg-plugin</artifactId>\n-            <version>1.5</version>\n-            <executions>\n-              <execution>\n-                <id>sign-artifacts</id>\n-                <phase>verify</phase>\n-                <goals>\n-                  <goal>sign</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-    <profile>\n-      <id>doclint-java8-disable</id>\n-      <activation>\n-        <jdk>[1.8,)</jdk>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-javadoc-plugin</artifactId>\n-            <configuration>\n-              <additionalparam>-Xdoclint:none</additionalparam>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n+\n   <build>\n-    <defaultGoal>package</defaultGoal>\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.3</version>\n-        <configuration>\n-          <source>1.6</source>\n-          <target>1.6</target>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.6</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>jar</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <archive>\n-            <addMavenDescriptor>false</addMavenDescriptor>\n-            <manifestEntries>\n-              <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n-              <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n-              <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n-              <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n-              <Bundle-Name>${project.name}</Bundle-Name>\n-              <Bundle-Description>${project.description}</Bundle-Description>\n-              <Bundle-ClassPath>.</Bundle-ClassPath>\n-              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-              <Bundle-SymbolicName>com.google.gson</Bundle-SymbolicName>\n-            </manifestEntries>\n-          </archive>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-       <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n-         <executions>\n-           <execution>\n-             <id>attach-sources</id>\n-             <phase>verify</phase>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <archive>\n-             <manifestEntries>\n-               <Eclipse-SourceBundle>com.google.gson;version=\"${project.version}\"</Eclipse-SourceBundle>\n-               <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>\n-               <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-               <Bundle-Version>${project.version}</Bundle-Version>\n-             </manifestEntries>\n-           </archive>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.3</version>\n-         <executions>\n-           <execution>\n-             <id>attach-javadocs</id>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <includePackageNames>com.google.gson</includePackageNames>\n-           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n-            <links>\n-             <link>http://docs.oracle.com/javase/6/docs/api/</link>\n-           </links>\n-           <version>true</version>\n-           <show>protected</show>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.10</version>\n-         <configuration>\n-           <downloadSources>true</downloadSources>\n-           <downloadJavadocs>true</downloadJavadocs>\n-           <workspace>\n-             ../eclipse-ws/\n-           </workspace>\n-           <workspaceCodeStylesURL>\n-             file:///${basedir}/../lib/gson-formatting-styles.xml\n-           </workspaceCodeStylesURL>\n-         </configuration>\n-       </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-release-plugin</artifactId>\n-        <!-- version>2.5</version -->\n-        <configuration>\n-          <arguments>-DenableCiProfile=true</arguments>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.5</version>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n         <configuration>\n-          <descriptor>assembly-descriptor.xml</descriptor>\n-          <finalName>google-gson-${project.version}</finalName>\n-          <outputDirectory>target/dist</outputDirectory>\n-          <workDirectory>target/assembly/work</workDirectory>\n+          <includePackageNames>com.google.gson</includePackageNames>\n+          <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n+          <links>\n+            <link>http://docs.oracle.com/javase/6/docs/api/</link>\n+          </links>\n         </configuration>\n       </plugin>\n     </plugins>\n   </build>\n-  <developers>\n-    <developer>\n-      <name>Inderjeet Singh</name>\n-    </developer>\n-    <developer>\n-      <name>Joel Leitch</name>\n-      <organization>Google Inc.</organization>\n-    </developer>\n-    <developer>\n-      <name>Jesse Wilson</name>\n-      <organization>Square Inc.</organization>\n-    </developer>\n-  </developers>\n </project>, @@ -1,249 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n-  <groupId>com.google.code.gson</groupId>\n-  <artifactId>gson-parent</artifactId>\n-  <packaging>pom</packaging>\n-  <version>2.6-SNAPSHOT</version>\n-  <inceptionYear>2008</inceptionYear>\n-  <name>Gson Parent</name>\n+\n   <parent>\n     <groupId>org.sonatype.oss</groupId>\n     <artifactId>oss-parent</artifactId>\n-    <version>9</version>\n-    <relativePath />\n+    <version>7</version>\n   </parent>\n+\n+  <groupId>com.google.code.gson</groupId>\n+  <artifactId>gson-parent</artifactId>\n+  <version>2.6-SNAPSHOT</version>\n+  <packaging>pom</packaging>\n+\n+  <name>Gson Parent</name>\n+  <description>Gson JSON library</description>\n   <url>https://github.com/google/gson</url>\n-  <description>Google Gson library</description>\n+\n+  <modules>\n+    <module>gson</module>\n+  </modules>\n+\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <java.version>1.7</java.version>\n   </properties>\n-  <licenses>\n-    <license>\n-      <name>The Apache Software License, Version 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n-      <distribution>repo</distribution>\n-    </license>\n-  </licenses>\n+\n   <scm>\n+    <url>https://github.com/google/gson/</url>\n     <connection>scm:git:https://github.com/google/gson.git</connection>\n-    <developerConnection>scm:git:https://github.com/google/gson.git</developerConnection>\n-    <url>https://github.com/google/gson</url>\n-    <tag>gson-${project.version}</tag>\n+    <developerConnection>scm:git:git@github.com:google/gson.git</developerConnection>\n+    <tag>HEAD</tag>\n   </scm>\n+\n   <issueManagement>\n-    <system>Github Issue Tracking</system>\n+    <system>GitHub Issues</system>\n     <url>https://github.com/google/gson/issues</url>\n   </issueManagement>\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <name>Sonatype Nexus Snapshots</name>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <name>Nexus Release Repository</name>\n-      <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n-  <organization>\n-    <name>Google, Inc.</name>\n-    <url>http://www.google.com</url>\n-  </organization>\n-  <dependencies>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n-      <scope>test</scope>\n-    </dependency>\n-  </dependencies>\n-  <modules>\n-    <module>gson</module>\n-  </modules>\n-  <profiles>\n-    <!-- Activate PGP signing only when performing a release -->\n-    <profile>\n-      <id>release-sign-artifacts</id>\n-      <activation>\n-        <property>\n-          <name>performRelease</name>\n-          <value>true</value>\n-        </property>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-gpg-plugin</artifactId>\n-            <version>1.5</version>\n-            <executions>\n-              <execution>\n-                <id>sign-artifacts</id>\n-                <phase>verify</phase>\n-                <goals>\n-                  <goal>sign</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-    <profile>\n-      <id>doclint-java8-disable</id>\n-      <activation>\n-        <jdk>[1.8,)</jdk>\n-      </activation>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-javadoc-plugin</artifactId>\n-            <configuration>\n-              <additionalparam>-Xdoclint:none</additionalparam>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n+\n+  <licenses>\n+    <license>\n+      <name>Apache 2.0</name>\n+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+    </license>\n+  </licenses>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>junit</groupId>\n+        <artifactId>junit</artifactId>\n+        <version>3.8.2</version>\n+        <scope>test</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n   <build>\n-    <defaultGoal>package</defaultGoal>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-compiler-plugin</artifactId>\n+          <version>3.0</version>\n+          <configuration>\n+            <source>${java.version}</source>\n+            <target>${java.version}</target>\n+          </configuration>\n+        </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-javadoc-plugin</artifactId>\n+          <version>2.10.3</version>\n+        </plugin>\n+      </plugins>\n+    </pluginManagement>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.3</version>\n-        <configuration>\n-          <source>1.5</source>\n-          <target>1.5</target>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.6</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>jar</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <archive>\n-            <addMavenDescriptor>false</addMavenDescriptor>\n-            <manifestEntries>\n-              <Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8</Bundle-RequiredExecutionEnvironment>\n-              <Export-Package><![CDATA[com.google.gson;version=${project.version}, com.google.gson.annotations;version=${project.version}, com.google.gson.reflect;version=${project.version}, com.google.gson.stream;version=${project.version}, com.google.gson.internal;version=${project.version}, com.google.gson.internal.bind;version=${project.version}]]></Export-Package>\n-              <Bundle-Version>${project.version}</Bundle-Version>\n-              <Bundle-ContactAddress>https://github.com/google/gson</Bundle-ContactAddress>\n-              <Bundle-Vendor>Google Gson Project</Bundle-Vendor>\n-              <Bundle-Name>${project.name}</Bundle-Name>\n-              <Bundle-Description>${project.description}</Bundle-Description>\n-              <Bundle-ClassPath>.</Bundle-ClassPath>\n-              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-              <Bundle-SymbolicName>com.google.gson</Bundle-SymbolicName>\n-            </manifestEntries>\n-          </archive>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-       <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n-         <executions>\n-           <execution>\n-             <id>attach-sources</id>\n-             <phase>verify</phase>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <archive>\n-             <manifestEntries>\n-               <Eclipse-SourceBundle>com.google.gson;version=\"${project.version}\"</Eclipse-SourceBundle>\n-               <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>\n-               <Bundle-ManifestVersion>2</Bundle-ManifestVersion>\n-               <Bundle-Version>${project.version}</Bundle-Version>\n-             </manifestEntries>\n-           </archive>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <!-- TODO(inder): add manifest entry for maven group, artifact, and classifier ids -->\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.3</version>\n-         <executions>\n-           <execution>\n-             <id>attach-javadocs</id>\n-             <goals>\n-               <goal>jar</goal>\n-             </goals>\n-           </execution>\n-         </executions>\n-         <configuration>\n-           <includePackageNames>com.google.gson</includePackageNames>\n-           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n-            <links>\n-             <link>http://docs.oracle.com/javase/1.5.0/docs/api/</link>\n-           </links>\n-           <version>true</version>\n-           <show>protected</show>\n-         </configuration>\n-       </plugin>\n-       <plugin>\n-         <groupId>org.apache.maven.plugins</groupId>\n-         <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.10</version>\n-         <configuration>\n-           <downloadSources>true</downloadSources>\n-           <downloadJavadocs>true</downloadJavadocs>\n-           <workspace>\n-             ../eclipse-ws/\n-           </workspace>\n-           <workspaceCodeStylesURL>\n-             file:///${basedir}/../lib/gson-formatting-styles.xml\n-           </workspaceCodeStylesURL>\n-         </configuration>\n-       </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-release-plugin</artifactId>\n-        <!-- version>2.5</version -->\n-        <configuration>\n-          <arguments>-DenableCiProfile=true</arguments>\n-        </configuration>\n-      </plugin>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <version>2.5.5</version>\n+        <version>2.4.2</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>org.apache.maven.scm</groupId>\n+            <artifactId>maven-scm-provider-gitexe</artifactId>\n+            <version>1.9</version>\n+          </dependency>\n+        </dependencies>\n         <configuration>\n-          <descriptor>assembly-descriptor.xml</descriptor>\n-          <finalName>google-gson-${project.version}</finalName>\n-          <outputDirectory>target/dist</outputDirectory>\n-          <workDirectory>target/assembly/work</workDirectory>\n+          <autoVersionSubmodules>true</autoVersionSubmodules>\n         </configuration>\n       </plugin>\n     </plugins>\n   </build>\n-  <developers>\n-    <developer>\n-      <name>Inderjeet Singh</name>\n-    </developer>\n-    <developer>\n-      <name>Joel Leitch</name>\n-      <organization>Google Inc.</organization>\n-    </developer>\n-    <developer>\n-      <name>Jesse Wilson</name>\n-      <organization>Square Inc.</organization>\n-    </developer>\n-  </developers>\n </project>, ", 85, 447, "\"modified, modified, \"", 532], 1], ["789", "Use the Java 7 language but limit to Java 6 APIs.", "Jesse Wilson", "swankjesse", "02/12/16, 03:42:56 AM", "This way we get nice features like ARM blocks and diamonds, but still work\non Android.", "https://github.com/google/gson/pull/790\n =||= ", 0], ["790", "Build Gson for Java 1.6.", "Jesse Wilson", "swankjesse", "02/12/16, 03:52:16 AM", "The upgrade to Java 1.7 was a clumsy bug.", "LGTM\n =||= ", ["790", "Build Gson for Java 1.6.", "Jesse Wilson", "swankjesse", "02/12/16, 03:52:16 AM", "The upgrade to Java 1.7 was a clumsy bug.", "NaN"], ["jwilson", "Build Gson for Java 1.6.\n\nThe upgrade to Java 1.7 was a clumsy bug.", "02/12/16, 03:42:41 AM", "jwilson", "11d89f39c963f8efb6440add80328dbcf53b74ed", ["pom.xml"], "@@ -24,7 +24,7 @@\n \n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <java.version>1.7</java.version>\n+    <java.version>1.6</java.version>\n   </properties>\n \n   <scm>, ", 1, 1, "\"modified, \"", 2], 1], ["791", "Fixed code style to remove explicit casting op.", "Marcelo Camargo", "haskellcamargo", "02/14/16, 11:56:35 PM", "\u00b7 Separated binary operator\n\nThis is a very, very, **very** small change, but that unnecessary explicit `(double)` casting with joined expressions on binary operator was affecting my OCD.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= ", ["791", "Fixed code style to remove explicit casting op.", "Marcelo Camargo", "haskellcamargo", "02/14/16, 11:56:35 PM", "\u00b7 Separated binary operator\n\nThis is a very, very, **very** small change, but that unnecessary explicit `(double)` casting with joined expressions on binary operator was affecting my OCD.", "NaN"], ["Marcelo Camargo", "Fixed code style to remove explicit casting op.\n\n\u00b7 Separated binary operators", "02/14/16, 05:47:05 AM", "Marcelo Camargo", "bddc1a9ed385595ab8ec75aa0ac9be586f55a68f", ["examples/android-proguard-example/src/com/google/gson/examples/android/model/LineItem.java"], "@@ -52,6 +52,6 @@ public String getCurrencyCode() {\n   @Override\n   public String toString() {\n     return String.format(\"(item: %s, qty: %s, price: %.2f %s)\",\n-        name, quantity, priceInMicros/(double)1000000, currencyCode);\n+        name, quantity, priceInMicros / 1000000d, currencyCode);\n   }\n }, ", 1, 1, "\"modified, \"", 2], 1], ["792", "Fix some typos in gson comments.", "Dongjoon Hyun", "dongjoon-hyun", "02/15/16, 10:15:46 PM", "NaN", "Thank you, @JakeWharton .\n =||= ", ["792", "Fix some typos in gson comments.", "Dongjoon Hyun", "dongjoon-hyun", "02/15/16, 10:15:46 PM", "NaN", "NaN"], ["Dongjoon Hyun", "Fix some typos in gson comments.", "02/15/16, 10:11:23 PM", "Dongjoon Hyun", "aa209fa2555271215a89fe382a4b9078102e6abd", ["gson/src/main/java/com/google/gson/FieldAttributes.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/test/java/com/google/gson/ParameterizedTypeTest.java", "gson/src/test/java/com/google/gson/functional/SerializedNameTest.java"], "@@ -68,7 +68,7 @@ public String getName() {\n    *   private List&lt;String&gt; red;\n    * }\n    *\n-   * Type listParmeterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n+   * Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n    * </pre>\n    *\n    * <p>This method would return {@code String.class} for the {@code bar} field and, @@ -78,7 +78,7 @@\n  * <p>If the object that your are serializing/deserializing is a {@code ParameterizedType}\n  * (i.e. contains at least one type parameter and may be an array) then you must use the\n  * {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method.  Here is an\n- * example for serializing and deserialing a {@code ParameterizedType}:\n+ * example for serializing and deserializing a {@code ParameterizedType}:\n  *\n  * <pre>\n  * Type listType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();, @@ -303,7 +303,7 @@ public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrateg\n    * Configures Gson to apply a set of exclusion strategies during both serialization and\n    * deserialization. Each of the {@code strategies} will be applied as a disjunction rule.\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during serializaiton/deserialization.\n+   * skipped then that field (or object) is skipped during serialization/deserialization.\n    *\n    * @param strategies the set of strategy object to apply during object (de)serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern, @@ -26,7 +26,7 @@\n import java.util.List;\n \n /**\n- * Unit tests for {@code ParamterizedType}s created by the {@link $Gson$Types} class.\n+ * Unit tests for {@code ParameterizedType}s created by the {@link $Gson$Types} class.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch, @@ -25,7 +25,7 @@\n \n   public void testFirstNameIsChosenForSerialization() {\n     MyClass target = new MyClass(\"v1\", \"v2\");\n-    // Ensure name1 occurs exactly once, and name2 and name3 dont appear\n+    // Ensure name1 occurs exactly once, and name2 and name3 don't appear\n     assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n   }\n , ", 5, 5, "\"modified, modified, modified, modified, modified, \"", 10], 1], ["793", "Fix RuntimeTypeAdapterFactory javadoc", "Egor Neliuba", "egor-n", "02/19/16, 02:55:24 PM", "NaN", "Thanks\n =||= ", ["793", "Fix RuntimeTypeAdapterFactory javadoc", "Egor Neliuba", "egor-n", "02/19/16, 02:55:24 PM", "NaN", "NaN"], ["Egor N", "Fix RuntimeTypeAdapterFactory javadoc", "02/19/16, 02:14:55 PM", "Egor N", "edaf59e178301fc2cdc5523cd703121cfcd4c009", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -94,11 +94,11 @@\n  * \"Rectangle\"}) are configurable.\n  *\n  * <h3>Registering Types</h3>\n- * Create a {@code RuntimeTypeAdapter} by passing the base type and type field\n+ * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter\n- *       = RuntimeTypeAdapter.of(Shape.class, \"type\");\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n  * registered. This protects your application from injection attacks. If you\n@@ -115,7 +115,7 @@\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapter<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);, ", 4, 4, "\"modified, \"", 8], 1], ["794", "Collapse bullets into a paragraph", "Jonathan Paugh", "jpaugh", "02/23/16, 01:32:16 AM", "The section entitled \"Collections Limitations\" contains 3 bullets, but one semantic point, which is confusing.\n\nMake this point in a paragraph instead of a bullet list.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= ", ["794", "Collapse bullets into a paragraph", "Jonathan Paugh", "jpaugh", "02/23/16, 01:32:16 AM", "The section entitled \"Collections Limitations\" contains 3 bullets, but one semantic point, which is confusing.\n\nMake this point in a paragraph instead of a bullet list.", "NaN"], ["Jonathan Paugh", "Collapse bullets into a paragraph\n\nThe section entitled \"Collections Limitations\" contains 3 bullets, but one semantic point.\r\n\r\nMake this point in a paragraph instead of a bullet list.", "02/22/16, 09:30:29 PM", "Jonathan Paugh", "bad5cc804733d7f439e3e32822aa4436be28360c", ["UserGuide.md"], "@@ -223,11 +223,8 @@ Unfortunately, there is no way to get around this in Java.\n \n #### <a name=\"TOC-Collections-Limitations\"></a>Collections Limitations\n \n-* Can serialize collection of arbitrary objects but can not deserialize from it\n-* Because there is no way for the user to indicate the type of the resulting object\n-* While deserializing, Collection must be of a specific generic type\n-\n-All of this makes sense, and is rarely a problem when following good Java coding practices.\n+Gson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type.\n+This makes sense, and is rarely a problem when following good Java coding practices.\n \n ### <a name=\"TOC-Serializing-and-Deserializing-Generic-Types\"></a>Serializing and Deserializing Generic Types\n , ", 2, 5, "\"modified, \"", 7], 1], ["795", "Gson.fromJson methods now respect the lenient flag", "Scott Brown", "sgbrown", "02/23/16, 01:03:28 PM", "Gson.fromJson(JsonReader, Type) would previously override the lenient flag in the JsonReader to always be true while being used from here.  This would cause all instances of Gson to act as though the lenient flag is set to true regardless of the actual state in the Gson object.  I have corrected this to respect the lenient flag.\n\nalso updated JsonReader.nextDouble() method to deserialize infinite values, following the comments\nin GsonBuilder.serializeSpecialFloatingPointValues() method which claims:\n\"Gson always accepts these special values during deserialization\"\n\nThese fixes should also address issue #372", "Unfortunately, as the tests suggest, this is massively incompatible. If you'd like this behavior in your own code, avoid toJson/fromJson and use a TypeAdapter instead.\n =||= I think Gson.lenient flag probably does more harm than good in the current state.  The comments on the GsonBuilder.setLenient() method say \n\n> By default, Gson is strict and only accepts JSON as specified by <a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>.\n\nThe comments on Gson.setLenient() also references the JsonReader.setLenient(boolean) method which has a great explanation of what should and shouldn't be considered when using the lenient flag.\n\nThe unfortunate fact here is that due to the Gson.fromJson(JsonReader, Type) method always setting the lenient flag to true when parsing, almost none of what is commented in GsonBuilder about the default behavior of Gson is true.  The only affect that setting the lenient flag on Gson will do is to allow comments to be at the end of your json buffer when calling Gson.fromJson(Reader, Type) since the assertFullConsumption(Object, JsonReader) method will be called from here and only checks for data at the end of the buffer having not been consumed (e.g. comments at the end).\n\nConsider, for example, the test in com.google.gson.functional.LeniencyTest\n\n```\n    @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new GsonBuilder().setLenient().create();\n   }\n\n   public void testLenientFromJson() {\n     List<String> json = gson.fromJson(\"\"\n         + \"[ # One!\\n\"\n         + \"  'Hi' #Element!\\n\"\n         + \"] # Array!\", new TypeToken<List<String>>() {}.getType());\n     assertEquals(singletonList(\"Hi\"), json);\n   }\n```\n\nIf you were to remove the comment at the end of the String (\"# Array!\"), then it would not make any difference at all whether or not the lenient flag had been set.  The following would also pass:\n\n```\n     List<String> json = new GsonBuilder().create().fromJson(\"\"\n         + \"[ # One!\\n\"\n         + \"  'Hi' #Element!\\n\"\n         + \"]\", new TypeToken<List<String>>() {}.getType());\n     assertEquals(singletonList(\"Hi\"), json);\n```\n\nIt seems counterintuitive that with the lenient flag unset, comments in the middle of the JSON data would be ignored but comments at the end would cause a failure when the Gson parser is supposed to be \"strict\".\n\nIf it is considered undesirable to change the default behavior (to the behavior that is documented) by actually respecting a default lenient flag being set to false (i.e. default to strict), then perhaps the correct answer is to respect the lenient flag, default Gson to have the lenient flag set to true, and update the javadocs to reflect that Gson by default is lenient.\n\nDo you have any thoughts on this alternate approach?\n =||= ", 0], ["796", "OSGi manifest headers removed?", "Sean Bright", "seanbright", "02/25/16, 05:08:20 AM", "The OSGi headers were removed as part of https://github.com/google/gson/commit/2016e9553eb946a09a9e70d83d31f4e8da675805\n\nThese should be restored", "NaN", 0], ["797", "Restore OSGi manifest headers", "Sean Bright", "seanbright", "02/25/16, 05:08:20 AM", "Commit 2016e95 removed the necessary MANIFEST.MF headers for Gson to\nresolve in an OSGi environment. This patch restores them.\n\nFixes #796", "Thanks!\n =||= The 2.5 bundle exported the `com.google.gson.internal.*` packages, so for backwards compatibility I was doing the same here. I've updated the PR to exclude them.\n =||= Awesome, thanks!\n =||= (I like this approach much better than the OSGi plugins I\u2019ve encountered elsewhere)\n =||= ", ["797", "Restore OSGi manifest headers", "Sean Bright", "seanbright", "02/25/16, 05:08:20 AM", "Commit 2016e95 removed the necessary MANIFEST.MF headers for Gson to\nresolve in an OSGi environment. This patch restores them.\n\nFixes #796", "NaN"], ["Sean Bright", "Restore OSGi manifest headers\n\nCommit 2016e95 removed the necessary MANIFEST.MF headers for Gson to\nresolve in an OSGi environment. This patch restores them.", "02/23/16, 04:25:21 PM", "Sean Bright", "4eff1a855f342f1b36117535218762f3257ae78c", ["gson/bnd.bnd", "gson/pom.xml", "pom.xml"], "@@ -0,0 +1,14 @@\n+Bundle-SymbolicName: com.google.gson\n+Bundle-Name: ${project.name}\n+Bundle-Description: ${project.description}\n+Bundle-Vendor: Google Gson Project\n+Bundle-ContactAddress: ${project.parent.url}\n+Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n+\n+-removeheaders: Private-Package\n+\n+-exportcontents:\\\n+    com.google.gson,\\\n+    com.google.gson.annotations,\\\n+    com.google.gson.reflect,\\\n+    com.google.gson.stream, @@ -31,6 +31,18 @@\n           </links>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>biz.aQute.bnd</groupId>\n+        <artifactId>bnd-maven-plugin</artifactId>\n+        <version>3.1.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>bnd-process</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -74,6 +74,13 @@\n           <artifactId>maven-javadoc-plugin</artifactId>\n           <version>2.10.3</version>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-jar-plugin</artifactId>\n+          <configuration>\n+            <useDefaultManifestFile>true</useDefaultManifestFile>\n+          </configuration>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n     <plugins>, ", 33, 0, "\"added, modified, modified, \"", 33], 1], ["798", "Minor readability edit", "Daniel Debert", "ghandhikus", "02/25/16, 05:06:41 AM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= ", ["798", "Minor readability edit", "Daniel Debert", "ghandhikus", "02/25/16, 05:06:41 AM", "NaN", "NaN"], ["ghandhikus", "Minor readability edit", "02/24/16, 06:50:07 PM", "ghandhikus", "0ef365969292fb63a5911ab36f7000b1e3c0ef82", ["README.md"], "@@ -7,28 +7,29 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n-*Gson Goals*\n+###*Gson Goals*\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-*Gson Downloads*\n+###*Gson Download and Maven*\n   * [Gson 2.6.1 Download](http://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.6.1%7Cjar) downloads at Maven Central\n+  * For Maven check \"Dependency Information\" tab, on the left side.\n \n-*Gson Documentation*\n+###*Gson Documentation*\n   * Gson [API](http://google.github.io/gson/apidocs/): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n   * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n \n-*Gson-related Content Created by Third Parties*\n+###*Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n \n-*License*\n+###*License*\n \n Gson is released under the [Apache 2.0 license](LICENSE).\n , ", 6, 5, "\"modified, \"", 11], 1], ["800", "Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapt\u2026", "Inderjeet Singh", "inder123", "02/26/16, 06:35:59 PM", "\u2026erFactory.create() returned null.", "I would like to cut Gson 2.6.2 with this change. Let me know if you have any concerns @swankjesse and @JakeWharton \n =||= Fix looks reasonable but the test case looks like you just pulled it from another codebase. Could you write a targeted test case instead?\n =||= Done, take another look.\n =||= I still don\u2019t really understand this test. Would end users use ThreadLocals ?\n =||= @swankjesse  This is production code written by me for a specific use-case.\nI was interacting with a REST service that, unfortunately, stored JSON as s String in a field. To support that with JSON, I wrote this adapter class. I didn't start with ThreadLocals, but the recursive invocation from JsonAdapterFactory forced my hand.\n =||= Rather than starting with the test you used to trigger this in your application, can you build a test case from scratch specifically to reproduce this bug?\n =||= (I don't imagine that parsing JSON as a string is necessary for the fix made here.)\n =||= Erm, you shouldn't need to convert a string from JSON within another type adapter. \n =||= Ok, revised the test to eliminate string to JSON conversion.\n =||= Yeah, that's more obvious. Thanks!\n =||= ", ["800", "Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapt\u2026", "Inderjeet Singh", "inder123", "02/26/16, 06:35:59 PM", "\u2026erFactory.create() returned null.", "NaN"], ["Inderjeet Singh", "incorporated code review feedback by eliminating the stringified type adapter.", "02/26/16, 05:25:23 PM", "Inderjeet Singh", "1ab73ffd21d8c08bbe734154921a936e4a8cb091", ["gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java"], "@@ -15,54 +15,37 @@\n  */\n package com.google.gson.regression;\n \n-import java.io.IOException;\n-import java.util.Objects;\n-\n import com.google.gson.Gson;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonParser;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonWriter;\n \n import junit.framework.TestCase;\n \n public class JsonAdapterNullSafeTest extends TestCase {\n-  // The recursiveCall in {@link Device.JsonAdapterFactory} is the source of this bug\n-  // because it returns a null type adapter.\n-\n   private final Gson gson = new Gson();\n \n   public void testNullSafeBugSerialize() throws Exception {\n-    Device device = new Device(\"ec57803e\", 2);\n+    Device device = new Device(\"ec57803e\");\n     gson.toJson(device);\n   }\n \n   public void testNullSafeBugDeserialize() throws Exception {\n-    String json = \"\\\"{\\\\\\\"id\\\\\\\":\\\\\\\"ec57803e2\\\\\\\",\\\\\\\"category\\\\\\\":2}\\\"\";\n-    Device device = gson.fromJson(json, Device.class);\n+    Device device = gson.fromJson(\"{'id':'ec57803e2'}\", Device.class);\n     assertEquals(\"ec57803e2\", device.id);\n-    assertEquals(2, device.category);\n   }\n \n   @JsonAdapter(Device.JsonAdapterFactory.class)\n   private static final class Device {\n     String id;\n-    int category;\n-    Device(String id, int category) {\n+    Device(String id) {\n       this.id = id;\n-      this.category = category;\n     }\n \n-    /**\n-     * Write the value as a String, not JSON.\n-     */\n     static final class JsonAdapterFactory implements TypeAdapterFactory {\n+      // The recursiveCall in {@link Device.JsonAdapterFactory} is the source of this bug\n+      // because we use it to return a null type adapter on a recursive call.\n       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();\n \n       @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@@ -72,31 +55,7 @@ public void testNullSafeBugDeserialize() throws Exception {\n           return null;\n         }\n         recursiveCall.set(Boolean.TRUE);\n-        final TypeAdapter<Device> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);\n-        return (TypeAdapter) new TypeAdapter<Device>() {\n-          @Override public void write(JsonWriter out, Device value) throws IOException {\n-            delegate.write(out, value);\n-          }\n-          @Override public Device read(JsonReader in) throws IOException {\n-            String json = in.nextString();\n-            JsonParser parser = new JsonParser();\n-            JsonElement root = parseString(parser, json, null);\n-            return root == null ? null : delegate.fromJsonTree(root);\n-          }\n-          private JsonElement parseString(JsonParser parser, String json, String prevJson)\n-              throws IOException { // called recursively\n-            JsonElement root = parser.parse(json);\n-            if (root instanceof JsonPrimitive) {\n-              prevJson = json;\n-              json = root.getAsString();\n-              if (Objects.equals(json, prevJson)) {\n-                throw new JsonSyntaxException(\"Unexpected Json: \" + json);\n-              }\n-              return parseString(parser, json, prevJson);\n-            }\n-            return root;\n-          }\n-        };\n+        return (TypeAdapter) gson.getDelegateAdapter(this, type);\n       }\n     }\n   }, ", 6, 47, "\"modified, \"", 53], 1], ["801", "Added JDK 8 doclint exclusion section", "Inderjeet Singh", "inder123", "02/27/16, 02:14:08 AM", "NaN", "LGTM!\n =||= ", ["801", "Added JDK 8 doclint exclusion section", "Inderjeet Singh", "inder123", "02/27/16, 02:14:08 AM", "NaN", "NaN"], ["Inderjeet Singh", "Added JDK 8 doclint exclusion section", "02/27/16, 02:13:43 AM", "Inderjeet Singh", "42276de76323114f79b08c671611d6db10e537b9", ["pom.xml"], "@@ -101,4 +101,23 @@\n       </plugin>\n     </plugins>\n   </build>\n+  <profiles>\n+    <profile>\n+      <id>doclint-java8-disable</id>\n+      <activation>\n+        <jdk>[1.8,</jdk>\n+      </activation>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-javadoc-plugin</artifactId>\n+            <configuration>\n+              <additionalparam>-Xdoclint:none</additionalparam>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n </project>, ", 19, 0, "\"modified, \"", 19], 1], ["802", "previous mvn release:prepare failed but updated GitHub anyway. Fixing\u2026", "Inderjeet Singh", "inder123", "02/27/16, 02:21:38 AM", "\u2026 that.", "LGTM\n =||= ", ["802", "previous mvn release:prepare failed but updated GitHub anyway. Fixing\u2026", "Inderjeet Singh", "inder123", "02/27/16, 02:21:38 AM", "\u2026 that.", "NaN"], ["Inderjeet Singh", "previous mvn release:prepare failed but updated GitHub anyway. Fixing that.", "02/27/16, 02:19:41 AM", "Inderjeet Singh", "0dfa28ac3ec9dc0d9a2f4c9d5e14a6a0a470f69c", ["gson/pom.xml", "pom.xml"], "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.6.3-SNAPSHOT</version>\n+    <version>2.6.2-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.6.3-SNAPSHOT</version>\n+  <version>2.6.2-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>, ", 2, 2, "\"modified, modified, \"", 4], 1], ["803", "How can I custom deserialize some fields only?", null, "burakkilic", "02/28/16, 09:21:16 PM", "   My shop json is:\n\n```\n \"shop\":{\n\"name\" : {\n    \"en\" : \"My Shop\",\n    \"es\" : \"Mi Tienda\" \n}, \n\"order\" : 0\n}\n```\n\nAnd shop model is:\n\n```\nclass Shop{\n    public String name;\n   public int order\n}\n```\n\nSo how can I deserialize that kind of Json to this model? Can I write a custom serializer for only \"name\" field?", "You can use the [`@JsonAdapter`](https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/annotations/JsonAdapter.html) annotation on the first for which you want to deserialize using custom logic. In your example, you would write a `TypeAdapter` or `TypeAdapterFactory` which handled selecting the correct language from the object and return the string value.\n =||= Thank you,\n\n```\npublic class MultilingualStringAdapter extends TypeAdapter<String> {\n\n\n@Override\npublic void write(JsonWriter out, String value) throws IOException {\n    Log.d(\"multilingual test\", value);\n}\n\n@Override\npublic String read(JsonReader in) throws IOException {\n    String value = null;\n    in.beginObject();\n    while(in.hasNext()){\n        String name = in.nextName();\n        if(name.equals(Global.getAppLanguage().code)){\n            value = in.nextString();\n        }\n        else {\n            in.skipValue();\n        }\n    }\n    in.endObject();\n    return value;\n}\n}\n```\n\nsolved my issue.\n =||= ", 0], ["805", "List of Tuples is parsed as LinkedTreeMap", "Ben", "bes1002t", "03/06/16, 12:07:49 AM", "I have a Nested construct named Tuple<String, Object>(String left, Object right). So it has a left side and a right side. In my Application this structure looks like:\nTuple(left=1, right=List(Tuple(left=2, right=Tuple(left=3, right=\"test\")), Tuple(left=4, right=\"test2\"))))\n\nIt's just an example but you get the idea. It's a random nested structure of Tuples and the right var at the bottom of the structure is everytime a String. \n\nNow the Problem: Encoding and Decoding with Gson works. The first layer of the structure is accessable as Tuple. I can also access the List of Tuples by casting it to a List of Objects.  BUT if I try to cast one of the List entries to Tuple I get an java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.my.package.name.Tuple.\n\nI can not explain this behavior except that Gson internally creates a map structur with that list of tuples (because a map is nothing else than a list of tuples). But why do I get an error by casting the list entries and not by casting the list? And is there a way to avoid this behavior? My Tuple already implements Serializable but this fact has no effect.", "Write an appropriate InstanceCreator?\n =||= Thanks for your quick reply, but an instance creator changed nothing. The reason for this is, that before I encode my structure, the Tuple is (String, Object) so while decoding it, gson will just see the object at this place, even if it's actually a Tuple. I need to do this, because the right side of my Tuple could be another Tuple, a List of Tuples or a String. \n =||= If the types on the right are finite you can annotate the field with\n@JsonAdapter(TupleRightTypeAdapter.class) and write a type adapter which\ndeserializes one of the three types you expect based on whether the JSON\nindicates a scalar string, list, or Tuple object.\n\nOn Thu, Mar 3, 2016 at 5:03 PM Ben notifications@github.com wrote:\n\n> Thanks for your quick reply, but an instance creator changed nothing. The\n> reason for this is, that before I encode my structure, the Tuple is\n> (String, Object) so while decoding it, gson will just see the object at\n> this place, even if it's actually a Tuple. I need to do this, because the\n> right side of my Tuple could be another Tuple, a List of Tuples or a\n> String.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/805#issuecomment-191985575.\n =||= Thanks for your suggestions, I tried both but finally I used the JsonDeserializer<Tuple> and it worked really good.\n =||= ", 0], ["806", "Gson synchronized map replaced with concurrent hash map", "Vsevolod Tolstopyatov", "qwwdfsad", "03/05/16, 09:54:12 PM", "Internally Gson class uses Collections#synchronizedMap as a thread-safe map for typeTokenCache.\nIn a highly-contended environment I'm experiencing unpredictable latency spikes, \nwhile the performance of Gson#toJson degrades significantly even for simple objects. \nIt's typical for an application thread to hang on typeTokenCache#get average 3-15 ms in such situations.\nSee [this](https://gist.github.com/qwwdfsad/a72692ab56a1a946a5fb) benchmark results to observe this problem (results for patch included).\n\nFor a more or less generic serialization code it's impossible to use TypeAdapter directly. One of the solutions might be to use thread-local Gson instances, but from programmer's perspective it makes code more obfuscated, requires an additional explanation on why this was done and floods the heap with duplicate objects. Gson is declared as thread-safe, so it seems reasonable to expect fine-grained concurrency level internally.  Moreover, after initial application warmup typeTokenCache becomes a mostly read-only structure (in fact, read-only), so allowing non-blocking reads looks like a perfect fit. \n\nProvided patch replaces synchronized map with j.u.c.ConcurrentHashMap. The main difference between synchronized map and CHM is null keys prohibition, so implicit code-path for null is added. \nAs you can see in benchmark results, even despite of additional code path for null keys, overall throughput increases even in single-threaded case due to absence of explicit synchronization (though JVM optimizes uncontended locks, some overhead is still present), so there is no risks or performance degradation associated with this patch.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= What happens if you extract a TypeAdapter and keep a reference to it? There\u2019s not reason to go through that cache when you can just keep the TypeAdapter you need in a field.\n =||= As I said before, I can't: I'm serializing complex objects which contain maps/collections of other objects, and for every such object custom type adapter is registered (~50 adapters in total), so I need this cache. Otherwise I should write whole Gson class myself to use this adapters directly. There\u2019s not reason to keep obvious performance bottleneck in Gson either :)\n =||= Its a mistake to call into the Gson instance multiple times if you can avoid it. What's your top-level object? You want to lookup the adapter for that exactly once, which will recursively fetch all of its dependent adapters.\n\nIn other words, rather than removing contention while reading from the map I think your best fix is to not read from the map at all.\n =||= I'm trying to keep Gson usage as simple as I can, so I call Gson#fromJson(object, clazz), which should be very common and obvious use case of Gson. I don't want adapters and other json-related classes leak to my code (at least I want to limit such places). What you are offering is nothing but hack solving problem on wrong level which limits gson usage and forces me to write more duplicate code (which is already written inside of Gson) for reader creation, lenitent check, exception handling and whatever-else-happens-in-fromJson-method (in fact when I got multiple top-level objects in different places I will end up with my own wrapper with gson and concurrent map of adapters inside) and write additional explanation of why I've done this instead of plain gson#fromJson call. Suggestion to rewrite part of gson implementation is not the way such problems should be solved. And my solution just solves the problem in the right place without any performance degradation at all (even for single-threaded case) or incompatible API changes, so everyone will benefit: performance of overall gson usage increases, old code isn't broken, problem solved.\n\nIn other words, rather than rewriting gson and propagating it's model classes to my code I think best fix is to remove synchronizedMap usage and replace it with something modern with the same contract.\n =||= I agree, if synchronized map is not performing well, we should look at alternatives.\nMy question is what do we lose? Does the performance degrade in normal operations?\n =||= @swankjesse What is the advantage of using synchronizedMap over ConcurrentMap?\nI think we should accept this change.\n =||= As with many optimizations, this one is about tradeoffs. Here we have two options:\n- The synchronized map has a small memory footprint. It\u2019s best for mobile.\n- The `ConcurrentHashMap` has low contention under heavy load. This is best on servers.\n\nAnd there\u2019s actually a third option that makes everyone happy. Avoid using the cache altogether. Lookup a type adapter instance from the Gson instance once, and avoid all contention. This keeps the memory low for mobile & makes servers even faster than the `ConcurrentHashMap`.\n\nI think TypeAdapter\u2019s `toJson()` and `fromJson()` methods have _better_ behavior than similar methods on `Gson`; these don\u2019t do weird things for backwards compatibility like force leniency or hide exceptions.\n =||= @swankjesse Gson.toJson()/fromJson() work really well for most use-cases. Getting an adapter and using it is cumbersome, and sometimes doesn't produce correct results (I have had issues in the past where it will serialize nulls incorrectly, or not pretty print). We should not impose our programming style on others.\n\nHow real is the memory overhead? Gson creates a lot of maps internally (and anonymous inner classes with specific type adapters for various java.\\* types), this specific ConcurrentMap can't be all that big. From what I read, ConcurrentHashMaps perform really well:\nhttp://crunchify.com/hashmap-vs-concurrenthashmap-vs-synchronizedmap-how-a-hashmap-can-be-synchronized-in-java/\nhttp://stackoverflow.com/questions/510632/whats-the-difference-between-concurrenthashmap-and-collections-synchronizedmap\n\nI think we should accept this PR.\n =||= Works for me.\n =||= Thanks @qwwdfsad for the pull request and @swankjesse for accommodating it. \n:+1: \n =||= @qwwdfsad  Also love the detailed write up PR. I am assuming you ran all the tests and they passed.\nIdeally, in the PR you should cut-n-paste command-line print to show that. Something like:\n\n```\nResults :\n\nTests run: 986, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] \n[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ gson ---\n[INFO] Adding existing MANIFEST to archive. Found under: /Users/inder/tmp/gson/gson/target/classes/META-INF/MANIFEST.MF\n[INFO] Building jar: /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar\n[INFO] \n[INFO] --- maven-install-plugin:2.4:install (default-install) @ gson ---\n[INFO] Installing /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.jar\n[INFO] Installing /Users/inder/tmp/gson/gson/pom.xml to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.pom\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Gson Parent ........................................ SUCCESS [  1.671 s]\n[INFO] Gson ............................................... SUCCESS [  5.048 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n```\n =||= Travis CI runs all the tests. You'll see a big red X if they fail.\n\nOn Sat, Mar 5, 2016, 4:57 PM inder123 notifications@github.com wrote:\n\n> @qwwdfsad https://github.com/qwwdfsad Also love the detailed write up\n> PR. I am assuming you ran all the tests and they passed.\n> Ideally, in the PR you should cut-n-paste command-line print to show that.\n> Something like:\n> \n> Results :\n> \n> Tests run: 986, Failures: 0, Errors: 0, Skipped: 0\n> \n> [INFO]\n> [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ gson ---\n> [INFO] Adding existing MANIFEST to archive. Found under: /Users/inder/tmp/gson/gson/target/classes/META-INF/MANIFEST.MF\n> [INFO] Building jar: /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar\n> [INFO]\n> [INFO] --- maven-install-plugin:2.4:install (default-install) @ gson ---\n> [INFO] Installing /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.jar\n> [INFO] Installing /Users/inder/tmp/gson/gson/pom.xml to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.pom\n> [INFO] ------------------------------------------------------------------------\n> [INFO] Reactor Summary:\n> [INFO]\n> [INFO] Gson Parent ........................................ SUCCESS [  1.671 s]\n> [INFO] Gson ............................................... SUCCESS [  5.048 s]\n> [INFO] ------------------------------------------------------------------------\n> [INFO] BUILD SUCCESS\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/806#issuecomment-192748978.\n =||= @JakeWharton  Good point, so yes, not needed.\n =||= Thank you!\nAny chances there will be 2.6.3 soon?\n =||= ", ["806", "Gson synchronized map replaced with concurrent hash map", "Vsevolod Tolstopyatov", "qwwdfsad", "03/05/16, 09:54:12 PM", "Internally Gson class uses Collections#synchronizedMap as a thread-safe map for typeTokenCache.\nIn a highly-contended environment I'm experiencing unpredictable latency spikes, \nwhile the performance of Gson#toJson degrades significantly even for simple objects. \nIt's typical for an application thread to hang on typeTokenCache#get average 3-15 ms in such situations.\nSee [this](https://gist.github.com/qwwdfsad/a72692ab56a1a946a5fb) benchmark results to observe this problem (results for patch included).\n\nFor a more or less generic serialization code it's impossible to use TypeAdapter directly. One of the solutions might be to use thread-local Gson instances, but from programmer's perspective it makes code more obfuscated, requires an additional explanation on why this was done and floods the heap with duplicate objects. Gson is declared as thread-safe, so it seems reasonable to expect fine-grained concurrency level internally.  Moreover, after initial application warmup typeTokenCache becomes a mostly read-only structure (in fact, read-only), so allowing non-blocking reads looks like a perfect fit. \n\nProvided patch replaces synchronized map with j.u.c.ConcurrentHashMap. The main difference between synchronized map and CHM is null keys prohibition, so implicit code-path for null is added. \nAs you can see in benchmark results, even despite of additional code path for null keys, overall throughput increases even in single-threaded case due to absence of explicit synchronization (though JVM optimizes uncontended locks, some overhead is still present), so there is no risks or performance degradation associated with this patch.", "NaN"], ["qwwdfsad", "More appropriate usage of null key surrogate in Gson#getAdapter for backward compatibility", "03/04/16, 11:08:26 PM", "qwwdfsad", "31dcfa3ad6fff0ee64f0fc5b8a1712c3ef3dcf95", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -390,10 +390,7 @@ static void checkValidFloatingPoint(double value) {\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n-    if (type == null) {\n-      type = (TypeToken<T>) NULL_KEY_SURROGATE;\n-    }\n-    TypeAdapter<?> cached = typeTokenCache.get(type);\n+    TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;\n     }, ", 1, 4, "\"modified, \"", 5], 1], ["807", "Request For Comments: How about annotation processing?", "FUJI Goro", "gfx", "03/20/16, 03:37:47 PM", "I'm writing a Gson extension, which uses annotation processing to generate type adapter factories: \n- https://github.com/gfx/StaticGson\n\nThis is faster than the reflection based adapters which gson has. In fact, even faster than Moshi.\n\nAnd here is a question: should I develop this extension as a standalone library? Or should I make a pull-request to Gson as a `processor` module?\n\nP.S. here is a benchmark result. \"dynamic gson\" is the original reflection based with Gson 2.6.2, \"static gson\" is StaticGson, and moshi is Moshi v1.1.0:\n\n```\nD/XXX : start benchmarking dynamic gson\nD/XXX : dynamic gson in serialization: 318ms\nD/XXX : dynamic gson in deserialization: 298ms\n\nD/XXX : start benchmarking static gson\nD/XXX : static gson in serialization: 141ms\nD/XXX : static gson in deserialization: 177ms\n\nD/XXX : start benchmarking moshi\nD/XXX : moshi in serialization: 204ms\nD/XXX : moshi in deserialization: 449ms\n```", "Sounds similar to [Logan Square](https://github.com/bluelinelabs/LoganSquare). My preference is as a standalone project.\n =||= I will developing this project as a standalone. Thanks.\n\nBTW, Logan Square is great. It seems fastest in serialization.\n\nInterestingly, however, static gson is faster than Logan Square in deserialization. \n\nAdded LoganSquare benchmark to the StaticGson with the same JSON data:\n\n```\nD/XXX: start benchmarking LoganSquare\nD/XXX: LoganSquare in serialization: 82ms\nD/XXX: LoganSquare in deserialization: 243ms\n```\n =||= @gfx Yes, makes sense to develop as a standalone project, and as it matures, we can consider borrowing some features in Gson core.\n\nGreat idea, BTW. I wasn't familiar with Logan Square either. Looking forward to more documentation/tutorial on your project page and trying it out.\n =||= @gfx Wow, this is pretty crazy timing. I was looking for a project that did this over a week ago.\n\nSince you hadn't posted this at the time, I have also started working on a very similar project:\n- https://github.com/lachlanm/gsonpath\n\nMy project generates type adapters as well. I have also added a very basic json path generator as part of the project.\n\ne.g. \"Parent.Child\" would create nested loops within the type adapter which can help flatten the POJO\n\nDid you have any plans to implement something similar? Or is the main focus to keep it fairly simplistic?\n =||= @lachlanm OMG. If I knew your project, I wouldn't make Static Gson. lol.\n\nJSON path style seems interesting although I didn't have a plan yet. My first aim is to use Static Gson in my projects with least effort. JSON path will be the second milestone.\n =||= StaticGson starts is released as an independent artifact: https://bintray.com/gfx/maven/static-gson/\n\nThanks.\n =||= ", 0], ["809", "allow unquoted long and integer keys", "Scott Brown", "sgbrown", "03/12/16, 08:51:22 PM", "Fixes a bug in JsonReader.nextInt() and JsonReader.nextLong() whereby PEEKED_UNQUOTED is not handled.  This bug caused failure to deserialize maps with Long or Integer keys when the key is unquoted.\n\nThis fixes issues #604 and #524 ", "Nice find!\n =||= ", ["809", "allow unquoted long and integer keys", "Scott Brown", "sgbrown", "03/12/16, 08:51:22 PM", "Fixes a bug in JsonReader.nextInt() and JsonReader.nextLong() whereby PEEKED_UNQUOTED is not handled.  This bug caused failure to deserialize maps with Long or Integer keys when the key is unquoted.\n\nThis fixes issues #604 and #524 ", "NaN"], ["Scott Brown", "allow unquoted long and integer keys", "03/12/16, 06:52:13 PM", "Scott Brown", "0669ff7fd16c26521b924a58c7dd64ab2dc1a46d", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"], "@@ -951,8 +951,12 @@ public long nextLong() throws IOException {\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         long result = Long.parseLong(peekedString);\n         peeked = PEEKED_NONE;\n@@ -1179,8 +1183,12 @@ public int nextInt() throws IOException {\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         result = Integer.parseInt(peekedString);\n         peeked = PEEKED_NONE;, @@ -167,6 +167,34 @@ public void testMapDeserializationWithIntegerKeys() {\n     assertEquals(\"456\", map.get(123));\n   }\n \n+  public void testMapDeserializationWithUnquotedIntegerKeys() {\n+    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n+    Map<Integer, String> map = gson.fromJson(\"{123:\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+  }\n+\n+  public void testMapDeserializationWithLongKeys() {\n+    long longValue = 9876543210L;\n+    String json = String.format(\"{\\\"%d\\\":\\\"456\\\"}\", longValue);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longValue));\n+    assertEquals(\"456\", map.get(longValue));\n+  }\n+\n+  public void testMapDeserializationWithUnquotedLongKeys() {\n+    long longKey = 9876543210L;\n+    String json = String.format(\"{%d:\\\"456\\\"}\", longKey);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longKey));\n+    assertEquals(\"456\", map.get(longKey));\n+  }\n+\n   public void testHashMapDeserialization() throws Exception {\n     Type typeOfMap = new TypeToken<HashMap<Integer, String>>() {}.getType();\n     HashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);, @@ -501,7 +501,7 @@ public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException\n     try {\n       reader.nextInt();\n       fail();\n-    } catch (IllegalStateException expected) {\n+    } catch (NumberFormatException expected) {\n     }\n     assertEquals(\"12.34e5x\", reader.nextString());\n   }, ", 41, 5, "\"modified, modified, modified, \"", 46], 1], ["810", "Allow the non-execute prefix to be terminated by non-Unix line endings", "Sebastian Schuberth", "sschuberth", "06/27/19, 09:41:03 AM", "Allowing non-Unix line endings for the non-execute prefix is particularly useful when running unit tests against committed JSON files that may have platform-specific line endings in the working tree.", "@inder123 @JakeWharton @enhdless @swankjesse Now that 2.7 is released, is there any interest in this PR?\n =||= @JakeWharton @swankjesse @inder123 Could we please get *any* feedback on whether this has a chance to get merged any time soon, or whether it makes sense to close it unmerged? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= ", 0], ["813", "Improving InterceptorFactory to allow usage without Intercept annotation.", "Bart\u0142omiej \u017barnowski", "thetoster", "03/24/16, 11:11:58 AM", "I wan't to use Intercept functionality in my project, however it requires usage of annotation. In fact this is not something which I want to put into my code, this will break my abstraction. So I decided to extend current solution to allow developer \"inject\" binding without need to annotate classes.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n =||= I signed it!\n =||= ", 0], ["815", "Garbage collection pressure for escaped html", "Vsevolod Tolstopyatov", "qwwdfsad", "04/01/16, 02:55:50 AM", "Currently JsonWriter#string uses String#format to escape html characters one by one. \nIt is extremely costly due to format method internals (because it's general purpose mechanism for formatting): it creates at least Formatter object, Matcher object (for large regexp, see formatSpecifier + usages of this matcher), multiple new StringBuilder+toString() inside of FormatSpecifier (methods justify and print), not well-sized ArrayLists (with expanding and array cloning) and finally new StringBuilder+toString as a result. For one symbol encoding it's way too much, in my case this is one of the biggest garbage sources at all. Guess format method is not very fast either (it is one of the hottest method in my application profile, but profiler is sampling and calls are near IO code so this can be imprecise).\n\nFormat method call can be replaced from this \n\n``` java\n out.write(String.format(\"\\\\u%04x\", (int) c));\n```\n\nwith something like this: \n\n``` java\nout.write(\"\\\\u\");\nout.write(HEX_DIGITS[(c >> 12) & 15]);\nout.write(HEX_DIGITS[(c >> 8) & 15]);\nout.write(HEX_DIGITS[(c >> 4) & 15]);\nout.write(HEX_DIGITS[c & 15]);\n```\n\nIf my arguments seem reasonable I'm ready to create pull request with proper tests+benchmarks", "Please send a PR!\n =||= Sorry, I've got overlapped older version of GSON due to my mistake. In current version this issue was fixed, so issue could be closed.\n =||= ", 0], ["816", "Add some useful badges with automatic version detection: Maven and Javadoc", "valery1707", "valery1707", "03/25/16, 04:20:28 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Thanks. This helps. Like the Javadoc link, I will switch to that.\n =||= ", ["816", "Add some useful badges with automatic version detection: Maven and Javadoc", "valery1707", "valery1707", "03/25/16, 04:20:28 PM", "NaN", "NaN"], ["Valeriy.Vyrva", "Add some useful badges with automatic version detection: Maven and Javadoc", "03/25/16, 10:16:19 AM", "Valeriy.Vyrva", "4fdef155ce2824b3761116ebccb1aeaa9514d4cb", ["README.md"], "@@ -1,6 +1,8 @@\n # google-gson\n \n [![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n+[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson)\n+[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. , ", 2, 0, "\"modified, \"", 2], 1], ["818", "moved the JsonSerializationContext/JsonDeserializationContext fields \u2026", "Inderjeet Singh", "inder123", "03/28/16, 11:20:02 PM", "\u2026to where they are used.\n\nAlso moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory.", "NaN", ["818", "moved the JsonSerializationContext/JsonDeserializationContext fields \u2026", "Inderjeet Singh", "inder123", "03/28/16, 11:20:02 PM", "\u2026to where they are used.\n\nAlso moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory.", "NaN"], ["Inderjeet Singh", "moved the JsonSerializationContext/JsonDeserializationContext fields to where they are used.\nAlso moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory.", "03/28/16, 09:46:02 PM", "Inderjeet Singh", "34d7521d9581b025c23bd5e4880a1b3a687b3da0", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"], "@@ -133,22 +133,6 @@\n   private final boolean prettyPrinting;\n   private final boolean lenient;\n \n-  final JsonDeserializationContext deserializationContext = new JsonDeserializationContext() {\n-    @SuppressWarnings(\"unchecked\")\n-    @Override public <T> T deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n-      return (T) fromJson(json, typeOfT);\n-    }\n-  };\n-\n-  final JsonSerializationContext serializationContext = new JsonSerializationContext() {\n-    @Override public JsonElement serialize(Object src) {\n-      return toJsonTree(src);\n-    }\n-    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n-      return toJsonTree(src, typeOfSrc);\n-    }\n-  };\n-\n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n    * following settings:, @@ -29,6 +29,7 @@\n \n import com.google.gson.internal.$Gson$Preconditions;\n import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.bind.TreeTypeAdapter;\n import com.google.gson.internal.bind.TypeAdapters;\n import com.google.gson.reflect.TypeToken;\n , @@ -14,31 +14,42 @@\n  * limitations under the License.\n  */\n \n-package com.google.gson;\n+package com.google.gson.internal.bind;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n import com.google.gson.internal.$Gson$Preconditions;\n import com.google.gson.internal.Streams;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n /**\n  * Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter. Since the\n  * tree adapter may be serialization-only or deserialization-only, this class\n  * has a facility to lookup a delegate type adapter on demand.\n  */\n-final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n+public final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n   private final JsonSerializer<T> serializer;\n   private final JsonDeserializer<T> deserializer;\n   private final Gson gson;\n   private final TypeToken<T> typeToken;\n   private final TypeAdapterFactory skipPast;\n+  private final GsonContextImpl context = new GsonContextImpl();\n \n   /** The delegate is lazily created because it may not be needed, and creating it may fail. */\n   private TypeAdapter<T> delegate;\n \n-  TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n+  public TreeTypeAdapter(JsonSerializer<T> serializer, JsonDeserializer<T> deserializer,\n       Gson gson, TypeToken<T> typeToken, TypeAdapterFactory skipPast) {\n     this.serializer = serializer;\n     this.deserializer = deserializer;\n@@ -55,7 +66,7 @@\n     if (value.isJsonNull()) {\n       return null;\n     }\n-    return deserializer.deserialize(value, typeToken.getType(), gson.deserializationContext);\n+    return deserializer.deserialize(value, typeToken.getType(), context);\n   }\n \n   @Override public void write(JsonWriter out, T value) throws IOException {\n@@ -67,7 +78,7 @@\n       out.nullValue();\n       return;\n     }\n-    JsonElement tree = serializer.serialize(value, typeToken.getType(), gson.serializationContext);\n+    JsonElement tree = serializer.serialize(value, typeToken.getType(), context);\n     Streams.write(tree, out);\n   }\n \n@@ -105,7 +116,7 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n     return new SingleTypeFactory(typeAdapter, null, false, hierarchyType);\n   }\n \n-  private static class SingleTypeFactory implements TypeAdapterFactory {\n+  private static final class SingleTypeFactory implements TypeAdapterFactory {\n     private final TypeToken<?> exactType;\n     private final boolean matchRawType;\n     private final Class<?> hierarchyType;\n@@ -138,4 +149,17 @@ public static TypeAdapterFactory newTypeHierarchyFactory(\n           : null;\n     }\n   }\n+\n+  private final class GsonContextImpl implements JsonSerializationContext, JsonDeserializationContext {\n+    @Override public JsonElement serialize(Object src) {\n+      return gson.toJsonTree(src);\n+    }\n+    @Override public JsonElement serialize(Object src, Type typeOfSrc) {\n+      return gson.toJsonTree(src, typeOfSrc);\n+    }\n+    @SuppressWarnings(\"unchecked\")\n+    @Override public <R> R deserialize(JsonElement json, Type typeOfT) throws JsonParseException {\n+      return (R) gson.fromJson(json, typeOfT);\n+    }\n+  };\n }, ", 31, 22, "\"modified, modified, renamed, \"", 53], 1], ["820", "Fixed unbound range bug issue# 819", "Inderjeet Singh", "inder123", "03/30/16, 11:31:57 AM", "NaN", "NaN", ["820", "Fixed unbound range bug issue# 819", "Inderjeet Singh", "inder123", "03/30/16, 11:31:57 AM", "NaN", "NaN"], ["Inderjeet Singh", "Fixed unbound range bug issue# 819", "03/30/16, 08:02:24 AM", "Inderjeet Singh", "93414608afba1cf92f660199f1bbdf6c9aaaf1ea", ["pom.xml"], "@@ -105,7 +105,7 @@\n     <profile>\n       <id>doclint-java8-disable</id>\n       <activation>\n-        <jdk>[1.8,</jdk>\n+        <jdk>[1.8,)</jdk>\n       </activation>\n       <build>\n         <plugins>, ", 1, 1, "\"modified, \"", 2], 1], ["821", "Refactoring: Keep track of registered JsonAdapters in ThreadLocals.", "Inderjeet Singh", "inder123", "06/14/16, 11:41:04 PM", "NaN", "This is a big complicated change with no motivating test case.\n =||= @swankjesse @JakeWharton I have revised this pull request to support JsonSerializer and JsonDeserializer in JsonAdapter. Please take a look.\n =||= What\u2019s the motivation? ThreadLocals make me nervous.\n =||= Threadlocal for TypeAdapter is not really needed here, it just provide caching for reusing a JsonAdapter.\n\nIt is needed for a TypeAdapterFactory to support skipPast.\n\nWhat's your concern with ThreadLocals.\n =||= I don\u2019t see why the ThreadLocals are necessary to solve this problem. Which is the test case that needs it?\n =||= JsonAdapterNullSafeTest.testNullSafeBugSerialize will fail if we remove the TypeAdapterFactory ThreadLocal.\n =||= @swankjesse  Please review (note the test that fails if we remove ThreadLocal for the factory. I can remove the other threadlocal, but it may have a performance benefit).\n =||= I looked at this and it\u2019s a bit difficult to trace. It\u2019s unfortunate that the test that fails seems particularly contrived. A simpler test would just fail with a StackOverflowError rather than using a thread local to try to defeat the recursion.\n\nWhat should the precedence rules be with `@JsonAdapter` ? That is, if I say `@JsonAdapter` on a type that also has a user-configured adapter, does that adapter get used with `getDelegateAdapter()` ? Or does it always delegate to the reflective implementation?\n\nOne thing that\u2019s potentially surprising is that `getDelegateAdapter()` can yield different results for different `Gson` instances. That\u2019s probably okay, but it\u2019s awkward to spread the configuration in both the callsite code (at field declaration) and also in the GsonBuilder.\n\nI think it\u2019s pretty straightforward to avoid either of the new ThreadLocals by making a tweak to `getDelegateAdapter()` like this:\n\n```\n    if (!factories.contains(skipPast)) {\n      skipPast = jsonAdapterFactory;\n    }\n```\n\nBut that impacts the precedence of the delegate adapter. It also causes potentially surprising behavior in the non-`@JsonAdapter` case because an unknown `skipPast` is treated as a sentinel value.\n =||= @swankjesse \nprecedence rules. I think with GsonBuilder setting should always take precedence since that allows a user to override a pre-configured behavior. Obviously, JsonAdapter on a field is NOT overridable in GsonBuilder, but the user has the option of attaching a TypeAdapter to the enclosing class.\n\nI think you are saying that you don't want me to use your solution of avoid threadlocals. Anything else that needs to be done for this pull request?\n =||= BTW, those precedence rules are asserted in JsonAdapterAnnotationOnClassesTest\n =||= @swankjesse  Once this is merged, I would like to cut a new Gson release.\n =||= I think avoiding ThreadLocals would be great. At least for me they\u2019re difficult to reason about.\n =||= Ok. Removed one of the ThreadLocals. Can't remove the other ThreadLocal without breaking (admittedly convoluted, but from real production code) JsonAdapterNullSafeTest.testNullSafeBugSerialize test.\n\nSince this line of code is only invoked when JsonAdapter annotation is present, I think it is OK to leave it as is. If you are worried about performance impact, I can make instantiation of ThreadLocal conditional.\n =||= @swankjesse I don't see any further enhancements in this PR. Please complete this review, or provide alternate code that I can use the ThreadLocal with.\n =||= Here\u2019s a branch that shows one approach to solving this problem without a ThreadLocal.\nhttps://github.com/google/gson/compare/master...jwilson.0601.get_delegate_adapter?expand=1#files_bucket\n =||= This approach looks good to me. Let me issue a pull request to you from\nthis branch.\n\nOn Wed, Jun 1, 2016 at 9:34 PM, Jesse Wilson notifications@github.com\nwrote:\n\n> Here\u2019s a branch that shows one approach to solving this problem without a\n> ThreadLocal.\n> \n> https://github.com/google/gson/compare/master...jwilson.0601.get_delegate_adapter?expand=1#files_bucket\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/pull/821#issuecomment-223193208, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABCwypOrLi3LQj_033Prly-pht_DOueAks5qHl1XgaJpZM4H8Wzm\n> .\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= As #873 has been merged and is a duplicate of this, closing this.\n =||= ", 0], ["822", "Parsing SparseArray return empty result", "Pavel Sukhoterin", "PaulProject", "04/04/16, 01:45:02 PM", "I trying parse SparseArray, but gson return empty SparseArray, not null, just empty. What am I doing wrong?", "You need to write a custom TypeAdapter / JsonDeserializer for SparseArray since it is a collection type that Gson doesn't know about. There are some details on how to do this here: https://github.com/google/gson/blob/master/UserGuide.md#TOC-Custom-Serialization-and-Deserialization.\n =||= ", 0], ["823", "UserGuide Grammar Corrections", "Ryan Scheidter", "rs017991", "04/05/16, 04:45:18 PM", "Also fixed a broken link", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Thanks.\n =||= ", ["823", "UserGuide Grammar Corrections", "Ryan Scheidter", "rs017991", "04/05/16, 04:45:18 PM", "Also fixed a broken link", "NaN"], ["Ryan Scheidter", "UserGuide Grammar Corrections", "04/05/16, 02:20:14 PM", "Ryan Scheidter", "4f031a4e78643db1b82bef5ab89d6c5912e1f128", ["UserGuide.md"], "@@ -46,7 +46,7 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n * Allow pre-existing unmodifiable objects to be converted to and from JSON\n * Allow custom representations for objects\n * Support arbitrarily complex objects\n-* Generate compact and readability JSON output\n+* Generate compact and readable JSON output\n \n ## <a name=\"TOC-Gson-Performance-and-Scalability\"></a>Gson Performance and Scalability\n \n@@ -141,8 +141,8 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n * This implementation handles nulls correctly\n-* While serialization, a null field is skipped from the output\n-* While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null\n+* While serializing, a null field is skipped from the output\n+* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null\n * If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n * Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n \n@@ -169,7 +169,7 @@ public class A {\n \n **NOTE**: The above class B can not (by default) be serialized with Gson.\n \n-Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. if it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n+Gson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. If it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B. \n \n ```java\n public class InstanceCreatorForB implements InstanceCreator<A.B> {\n@@ -390,7 +390,7 @@ Type could be of a corresponding generic type\n \n #### <a name=\"TOC-InstanceCreator-for-a-Parameterized-Type\"></a>InstanceCreator for a Parameterized Type\n \n-Sometimes that the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n+Sometimes the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n \n ```java\n class MyList<T> extends ArrayList<T> {\n@@ -430,9 +430,9 @@ In the above example, an instance of the Id class can not be created without act\n \n ### <a name=\"TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format\"></a>Compact Vs. Pretty Printing for JSON Output Format\n \n-The default JSON output that is provide by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n+The default JSON output that is provided by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#TOC-Null-Object-Support) section for information on configure Gson to output all null values.\n \n-If you like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n+If you would like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n \n The following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:\n ```\n@@ -441,7 +441,7 @@ String jsonOutput = gson.toJson(someObject);\n ```\n ### <a name=\"TOC-Null-Object-Support\"></a>Null Object Support\n \n-The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java.\n+The default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java form.\n \n Here's how you would configure a `Gson` instance to output null:\n \n@@ -522,7 +522,7 @@ The output is:\n \n ### <a name=\"TOC-Excluding-Fields-From-Serialization-and-Deserialization\"></a>Excluding Fields From Serialization and Deserialization\n \n-Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanism that allow field and class exclusion. If none of the below mechanism satisfy your needs then you can always use [custom serializers and deserializers](#TOC-Custom-Serialization-and-Deserializ).\n+Gson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanisms that allow field and class exclusion. If none of the below mechanisms satisfy your needs then you can always use [custom serializers and deserializers](#TOC-Custom-Serialization-and-Deserialization).\n \n #### <a name=\"TOC-Java-Modifier-Exclusion\"></a>Java Modifier Exclusion\n \n@@ -535,7 +535,7 @@ Gson gson = new GsonBuilder()\n     .create();\n ```\n \n-NOTE: you can use any number of the `Modifier` constants to `excludeFieldsWithModifiers` method. For example:\n+NOTE: you can give any number of the `Modifier` constants to the `excludeFieldsWithModifiers` method. For example:\n \n ```java\n Gson gson = new GsonBuilder(), ", 10, 10, "\"modified, \"", 20], 1], ["825", "Lint: unused declarations", null, "frakc", "05/04/16, 05:46:10 PM", "If  `@SerializedName(\"id\") @Expose private Integer id;` is assigned only via gson.fromJson Lint will warn, that field id is never assigned.\nHow to make lint know about such assignment or specificly ignore all checks if field is ever assigned, if field is annotated with `@SerializedName` ?", "If you're using Android Studio, _Alt+Enter_ on the field warning, you'll find among other options \"Suppress for fields annotated with `com.google.gson.annotations.SerializedName`\".\nYou only need to do this once, but you'll have to export some of your Studio settings to the version control system for the rest of your team to adopt it automatically if necessary.\n =||= You can also use @SuppressWarnings(\"unused\") on the class or the field.\n =||= ", 0], ["826", "minor javadoc @code block cleanup", "Scott Brown", "sgbrown", "04/09/16, 07:28:44 AM", "Fix for minor error on javadoc for <a href=\"http://static.javadoc.io/com.google.code.gson/gson/2.6.2/com/google/gson/Gson.html#getDelegateAdapter-com.google.gson.TypeAdapterFactory-com.google.gson.reflect.TypeToken-\">Gson.getDelegateAdapter()</a> method\n\ntext in <a href=\"http://docs.oracle.com/javase/1.5.0/docs/guide/javadoc/whatsnew-1.5.0.html#{@code}\">@code</a> blocks is not treated as html when javadoc is compiled", "NaN", ["826", "minor javadoc @code block cleanup", "Scott Brown", "sgbrown", "04/09/16, 07:28:44 AM", "Fix for minor error on javadoc for <a href=\"http://static.javadoc.io/com.google.code.gson/gson/2.6.2/com/google/gson/Gson.html#getDelegateAdapter-com.google.gson.TypeAdapterFactory-com.google.gson.reflect.TypeToken-\">Gson.getDelegateAdapter()</a> method\n\ntext in <a href=\"http://docs.oracle.com/javase/1.5.0/docs/guide/javadoc/whatsnew-1.5.0.html#{@code}\">@code</a> blocks is not treated as html when javadoc is compiled", "NaN"], ["Scott Brown", "minor javadoc fix ... @code block not treated as html", "04/09/16, 01:34:05 AM", "Scott Brown", "9c4f3523206468746ef5ee135f2bced4e45b33b5", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -428,9 +428,9 @@ static void checkValidFloatingPoint(double value) {\n    *  class StatsTypeAdapterFactory implements TypeAdapterFactory {\n    *    public int numReads = 0;\n    *    public int numWrites = 0;\n-   *    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {\n-   *      final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);\n-   *      return new TypeAdapter&lt;T&gt;() {\n+   *    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+   *      final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n+   *      return new TypeAdapter<T>() {\n    *        public void write(JsonWriter out, T value) throws IOException {\n    *          ++numWrites;\n    *          delegate.write(out, value);, ", 3, 3, "\"modified, \"", 6], 1], ["827", "Add the interface, GsonInterface, to the Gson object to enable cleaner unit testing", "Arthur Naseef", "artnaseef", "04/11/16, 02:57:49 AM", "Since the Gson object is final, it is not possible to mock it, making unit testing more difficult for users of the class.\n\nAdding an interface to the class eliminates the problem as users of the Gson object can operate on the interface instead, and thereby enable mocks to be injected for testing purposes.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= Thanks for taking the time to write a pull request. Such concrete feedback is much more helpful than just a feature request.\nUnfortunately, however, we are not yet ready to expand Gson API. Can you use a mocking library instead? \n =||= Mocking libraries cannot mock final classes, thus the benefit and purpose of this pull request.\n\nNote that the changes in this pull request do not change the API itself.  It simple adds an interface with the same API (method signatures are exactly the same) so that users can choose to make accesses through the interface rather than directly against the class.  Doing so makes mocking possible.\n\nLike this:\n\n```\n// ORIGINAL \npublic final class MyUtil {\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n```\n\n# \n\n```\n// UPDATED\npublic final class MyUtil implements MyUtilInterface {\n    @Override\n    public int add(int x, int y) {\n        return x + y;\n    }\n}\n\npublic interface MyUtilInterface {\n    int add(int x, int y);\n}\n```\n\nWould you please reconsider?  Without this, unit testing code that use Gson become significantly harder.\n =||= Why are you mocking Gson? Seems like a huge anti-pattern.\n\nOn Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef notifications@github.com\nwrote:\n\n> Mocking libraries cannot mock final classes, thus the benefit and purpose\n> of this pull request.\n> \n> Note that the changes in this pull request do not change the API itself.\n> It simple adds an interface with the same API (method signatures are\n> exactly the same) so that users can choose to make accesses through the\n> interface rather than directly against the class. Doing so makes mocking\n> possible.\n> \n> Like this:\n> \n> // ORIGINAL\n> public final class MyUtil {\n>     public int add(int x, int y) {\n>         return x + y;\n>     }\n> }\n> \n> // UPDATED\n> public final class MyUtil implements MyUtilInterface {\n>     @Override\n>     public int add(int x, int y) {\n>         return x + y;\n>     }\n> }\n> \n> public interface MyUtilInterface {\n>     int add(int x, int y);\n> }\n> \n> Would you please reconsider? Without this, unit testing code that use Gson\n> become significantly harder.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/827#issuecomment-208161571\n =||= Hey Jake - mocking is a unit testing technique that allows one to limit all\ntest interactions to the class-under-test.  In order for that to work\nproperly, all other objects with which that class operates need to be\nmocked.  Without mocking, those classes are being tested too, which leads\nto more complicated tests that are more brittle (i.e. break more easily),\nand making it far harder to track down bugs as bugs manifest themselves\nacross multiple unit tests instead of only showing up in the one for the\nclass that introduced the bug.\n\nI can clarify and provide examples if that helps.\n\nThere's a lot of good information on mocking out there.\n\nIf you can explain the concern and why it feels like an anti-pattern, I'll\naddress the same.\n\nArt\n\nOn Sun, Apr 10, 2016 at 9:52 PM, Jake Wharton notifications@github.com\nwrote:\n\n> Why are you mocking Gson? Seems like a huge anti-pattern.\n> \n> On Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef notifications@github.com\n> wrote:\n> \n> > Mocking libraries cannot mock final classes, thus the benefit and purpose\n> > of this pull request.\n> > \n> > Note that the changes in this pull request do not change the API itself.\n> > It simple adds an interface with the same API (method signatures are\n> > exactly the same) so that users can choose to make accesses through the\n> > interface rather than directly against the class. Doing so makes mocking\n> > possible.\n> > \n> > Like this:\n> > \n> > // ORIGINAL\n> > public final class MyUtil {\n> > public int add(int x, int y) {\n> > return x + y;\n> > }\n> > }\n> > \n> > // UPDATED\n> > public final class MyUtil implements MyUtilInterface {\n> > @Override\n> > public int add(int x, int y) {\n> > return x + y;\n> > }\n> > }\n> > \n> > public interface MyUtilInterface {\n> > int add(int x, int y);\n> > }\n> > \n> > Would you please reconsider? Without this, unit testing code that use\n> > Gson\n> > become significantly harder.\n> > \n> > \u2014\n> > You are receiving this because you are subscribed to this thread.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/gson/pull/827#issuecomment-208161571\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/827#issuecomment-208162522\n =||= I know what mocking is. Why are you wanting to mock the Gson object instead\nof just letting it serialize?\n\nOn Mon, Apr 11, 2016 at 12:59 AM Arthur Naseef notifications@github.com\nwrote:\n\n> Hey Jake - mocking is a unit testing technique that allows one to limit all\n> test interactions to the class-under-test. In order for that to work\n> properly, all other objects with which that class operates need to be\n> mocked. Without mocking, those classes are being tested too, which leads\n> to more complicated tests that are more brittle (i.e. break more easily),\n> and making it far harder to track down bugs as bugs manifest themselves\n> across multiple unit tests instead of only showing up in the one for the\n> class that introduced the bug.\n> \n> I can clarify and provide examples if that helps.\n> \n> There's a lot of good information on mocking out there.\n> \n> If you can explain the concern and why it feels like an anti-pattern, I'll\n> address the same.\n> \n> Art\n> \n> On Sun, Apr 10, 2016 at 9:52 PM, Jake Wharton notifications@github.com\n> wrote:\n> \n> > Why are you mocking Gson? Seems like a huge anti-pattern.\n> > \n> > On Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef <notifications@github.com\n> > \n> > wrote:\n> > \n> > > Mocking libraries cannot mock final classes, thus the benefit and\n> > > purpose\n> > > of this pull request.\n> > > \n> > > Note that the changes in this pull request do not change the API\n> > > itself.\n> > > It simple adds an interface with the same API (method signatures are\n> > > exactly the same) so that users can choose to make accesses through the\n> > > interface rather than directly against the class. Doing so makes\n> > > mocking\n> > > possible.\n> > > \n> > > Like this:\n> > > \n> > > // ORIGINAL\n> > > public final class MyUtil {\n> > > public int add(int x, int y) {\n> > > return x + y;\n> > > }\n> > > }\n> > > \n> > > // UPDATED\n> > > public final class MyUtil implements MyUtilInterface {\n> > > @Override\n> > > public int add(int x, int y) {\n> > > return x + y;\n> > > }\n> > > }\n> > > \n> > > public interface MyUtilInterface {\n> > > int add(int x, int y);\n> > > }\n> > > \n> > > Would you please reconsider? Without this, unit testing code that use\n> > > Gson\n> > > become significantly harder.\n> > > \n> > > \u2014\n> > > You are receiving this because you are subscribed to this thread.\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/google/gson/pull/827#issuecomment-208161571\n> > \n> > \u2014\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/gson/pull/827#issuecomment-208162522\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/827#issuecomment-208163241\n =||= Jake - it sounds like you and I have a different approach to unit testing.\n\nIn the approach I use and advocate, letting Gson \"serialize\" (or perform any of the other operations for which we us it) during unit testing of our own classes is not appropriate.  Perhaps some day we'll have the opportunity to grab a beer and discuss our various approaches.\n =||= In that case you should be completely abstracting your serialization\nlibrary in an application-defined type. It's not the library's\nresponsibility to provide that abstraction.\n\nOn Mon, Apr 11, 2016 at 1:31 AM Arthur Naseef notifications@github.com\nwrote:\n\n> Jake - it sounds like you and I have a different approach to unit testing.\n> \n> In the approach I use and advocate, letting Gson \"serialize\" (or perform\n> any of the other operations for which we us it) during unit testing of our\n> own classes is not appropriate. Perhaps some day we'll have the opportunity\n> to grab a beer and discuss our various approaches.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/827#issuecomment-208169200\n =||= That is true - the library doesn't have to do so.  I was hoping it would,\nthough, as this is a very simple and minimal update.  Making a thin layer\nin my own code increases the amount of code to solve the problem (compared\nwith this solution), and the complexity of the same, by a fair amount.\nAnd, on every product on which I work, I need to repeat the same exercise\n(i.e. the complexity is distributed).\n\nHonestly, I was at first discouraged to see that all the Gson classes are\nmarked as final, but when I read that the reason is to prevent extending of\nclasses by users of the library - i.e. that the classes are \"final\" in\norder to create the contract \"we don't support extending this class,\" I\nrealized that's a great approach.  So then I thought about how I could make\nthe code easy-to-mock and this hit me:\n1. The new interface does not affect anybody that does not use it.\n2. All that is needed from the library is to add the interface and\n   maintain the list of methods.\n3. Folks that want \"mockable\" use can then easily transition to the use\n   of \"GsonInterface\" in place of \"Gson\" where needed.\n4. As the API of Gson changes across versions, the GsonInterface would\n   track along quite simply as well.\n\nThis increased ease-of-use will increase my adoption of the library as\nwell.  So, win/win for very little effort.  Writing a layer in-between my\napplication and third-party libraries that is nothing more than a\npass-through to the third-party library is not a practice that I want to\nadopt.  Creating code that's easy to unit test already leads to too much\nboiler-plate code.  Honestly, I keep wishing the JVM offered a \"test mode\"\nin which interactions with all classes could easily be mocked - especially\nbuilt-in classes interacting with system resources (such as files and\nsockets).\n\nArt\n\nOn Sun, Apr 10, 2016 at 10:49 PM, Jake Wharton notifications@github.com\nwrote:\n\n> In that case you should be completely abstracting your serialization\n> library in an application-defined type. It's not the library's\n> responsibility to provide that abstraction.\n> \n> On Mon, Apr 11, 2016 at 1:31 AM Arthur Naseef notifications@github.com\n> wrote:\n> \n> > Jake - it sounds like you and I have a different approach to unit\n> > testing.\n> > \n> > In the approach I use and advocate, letting Gson \"serialize\" (or perform\n> > any of the other operations for which we us it) during unit testing of\n> > our\n> > own classes is not appropriate. Perhaps some day we'll have the\n> > opportunity\n> > to grab a beer and discuss our various approaches.\n> > \n> > \u2014\n> > You are receiving this because you commented.\n> > \n> > Reply to this email directly or view it on GitHub\n> > https://github.com/google/gson/pull/827#issuecomment-208169200\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/827#issuecomment-208173467\n =||= Adding this interface actively hurts the public API. What happens when we need to add a new method to `Gson` in the future? Adding methods to interfaces is not source or binary compatible so some hypothetical (and illogical) user which created another implementation of this interface would have their application break.\n\nYou also haven't justified the need for mocking. `Gson` is deterministic and side-effect free type so there's no reason tests should avoid calling it. If anything, providing a fake or mock implementation is likely to cause _more_ problems than it solves. You may inadvertently create behavior differences between what your tests code against and what actually happens at runtime. This is usually a sign of overly-white box tests that should actually be seeking more black box behavior. You're testing _how_ the code interacts with the library instead of testing _what_ the code does (e.g., what outputs certain inputs create).\n\nI would have been :-1: on this change even if it wasn't closed.\n =||= ", 0], ["828", "Converted object in List<Image> isn't the right type", "Running man!", "Aspsine", "04/12/16, 01:58:56 PM", "E/AndroidRuntime: FATAL EXCEPTION: main\njava.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.aspsine.irecyclerview.demo.model.Image\n\n``` java\nprivate void loadImages() {\n        NetworkAPI.requestImages(new NetworkAPI.Callback<List<Image>>() {\n            @Override\n            public void onSuccess(List<Image> images) {\n                if (!ListUtils.isEmpty(images)) {\n\n                    // Exception is throwed here\n                    Image image = mImages.get(0);\n\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n```\n\nImage class is very simple java pojo\n\n``` java\npublic class Image {\n    public String image;\n    public String title;\n}\n```\n\n``` java\npublic class NetworkAPI {\n    public static void requestImages(final Callback<List<Image>> callback) {\n        String url = Constants.BannerAPI;\n        final Request request = new Request.Builder().get().url(url).build();\n        OkHttp.getOkHttpClient().newCall(request).enqueue(new GsonCallbackWrapper<List<Image>>(callback));\n    }\n\n    public interface Callback<T> {\n        void onSuccess(T t);\n\n        void onFailure(Exception e);\n    }\n}\n```\n\n``` java\npublic class GsonCallbackWrapper<T> implements okhttp3.Callback {\n\n    private static final Handler sHandler = new Handler(Looper.getMainLooper());\n\n    private static final Gson sGson = new Gson();\n\n    private NetworkAPI.Callback<T> mCallback;\n\n    public GsonCallbackWrapper(NetworkAPI.Callback<T> callback) {\n        this.mCallback = callback;\n    }\n\n    @Override\n    public void onResponse(Call call, Response response) throws IOException {\n        if (response.isSuccessful()) {\n            ResponseBody responseBody = response.body();\n            TypeToken<T> typeToken = new TypeToken<T>() {\n            };\n            final T t = sGson.getAdapter(typeToken).fromJson(responseBody.charStream());\n            deliverToMainThread(new Runnable() {\n                @Override\n                public void run() {\n                    mCallback.onSuccess(t);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void onFailure(Call call, final IOException e) {\n        deliverToMainThread(new Runnable() {\n            @Override\n            public void run() {\n                mCallback.onFailure(e);\n            }\n        });\n    }\n\n    public void deliverToMainThread(Runnable runnable) {\n        sHandler.post(runnable);\n    }\n}\n```", "Generics (and thus `T`) are erased to `Object` at runtime. `TypeToken<T>` is effectively `TypeToken<Object>` at runtime and when the you tell Gson to create `Object` it creates a `Map`.\n =||= Awesome! Thanks for clear answer.\n =||= @JakeWharton could you please help me to solve the question at stackoverflow, [here](http://stackoverflow.com/questions/42666100/java-lang-classcastexception-com-google-gson-internal-linkedtreemap-cannot-be-c) =||= ", 0], ["829", "Check if class can be instantiated based on class modifiers. Fix for #817", "Ugljesa Jovanovic", "ionspin", "04/22/16, 04:47:08 PM", "If class can't be instantiated throw an unsupported operation exception. On different android devices attempt to instantiate interface or abstract class would crash the VM sometimes with only a segmentation fault message and no other useful logs (Issue #817). Checking for interface or abstract class modifiers before trying to allocate instance and throwing an exception will help debugging.", "Looks good but I\u2019ve got some comments\n =||= @swankjesse Should I squash this into one commit?\n =||= LGTM!\n =||= Yes, please squash into one commit.\n =||= @swankjesse Done! Thanks for the comments!\n =||= Thanks!\n =||= ", ["829", "Check if class can be instantiated based on class modifiers. Fix for #817", "Ugljesa Jovanovic", "ionspin", "04/22/16, 04:47:08 PM", "If class can't be instantiated throw an unsupported operation exception. On different android devices attempt to instantiate interface or abstract class would crash the VM sometimes with only a segmentation fault message and no other useful logs (Issue #817). Checking for interface or abstract class modifiers before trying to allocate instance and throwing an exception will help debugging.", "NaN"], ["Ugljesa Jovanovic", "Check if class can be instantiated based on class modifiers. If not throw an unsupported operation exception.", "04/12/16, 08:34:16 PM", "Ugljesa Jovanovic", "ab40462cc76f6708e3ce2e981f5c6b485347702b", ["gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java", "gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java"], "@@ -20,6 +20,7 @@\n import java.io.ObjectStreamClass;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n /**\n  * Do sneaky things to allocate objects without invoking their constructors.\n@@ -45,6 +46,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) allocateInstance.invoke(unsafe, c);\n         }\n       };\n@@ -68,6 +70,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, constructorId);\n         }\n       };\n@@ -87,6 +90,7 @@ public static UnsafeAllocator create() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, Object.class);\n         }\n       };\n@@ -101,4 +105,19 @@ public static UnsafeAllocator create() {\n       }\n     };\n   }\n+\n+  /**\n+   * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\n+   * throw an {@link java.lang.UnsupportedOperationException}\n+   * @param c instance of the class to be checked\n+   */\n+  private static void assertInstantiable(Class<?> c) {\n+    int modifiers = c.getModifiers();\n+    if (Modifier.isInterface(modifiers)) {\n+      throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\n+    }\n+    if (Modifier.isAbstract(modifiers)) {\n+      throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\n+    }\n+  }\n }, @@ -0,0 +1,74 @@\n+/*\n+ * Copyright (C) 2016 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test unsafe allocator instantiation\n+ * @author Ugljesa Jovanovic\n+ */\n+public final class UnsafeAllocatorInstantiationTest extends TestCase {\n+\n+  public interface Interface {\n+  }\n+\n+  public static abstract class AbstractClass {\n+  }\n+\n+  public static class ConcreteClass {\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an interface\n+   */\n+  public void testInterfaceInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(Interface.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an abstract class\n+   */\n+  public void testAbstractClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(AbstractClass.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that no exception is thrown when trying to instantiate a concrete class\n+   */\n+  public void testConcreteClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(ConcreteClass.class);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+}, ", 93, 0, "\"modified, added, \"", 93], 1], ["830", "fixed throwing RuntimeException instead of JsonIOException", "Arthur Gavlyukovskiy", "gavlyukovskiy", "04/16/16, 05:31:31 AM", "Javadoc says that JsonIOException will be thrown if any problem happened, but actually I'm getting RuntimeException only in that method.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= ", ["830", "fixed throwing RuntimeException instead of JsonIOException", "Arthur Gavlyukovskiy", "gavlyukovskiy", "04/16/16, 05:31:31 AM", "Javadoc says that JsonIOException will be thrown if any problem happened, but actually I'm getting RuntimeException only in that method.", "NaN"], ["gavlyukovskiy", "fixed throwing RuntimeException instead of JsonIOException", "04/15/16, 06:00:59 PM", "gavlyukovskiy", "966de9e60dd6a828cb52548dd8de77adc86bd319", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -679,7 +679,7 @@ public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOExce\n       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));\n       toJson(jsonElement, jsonWriter);\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n+      throw new JsonIOException(e);\n     }\n   }\n , ", 1, 1, "\"modified, \"", 2], 1], ["831", "JsonAdapter annotation ignored for primitive fields", "Brandon Mintern", "mintern", "05/20/16, 05:29:10 PM", "`ReflectiveTypeAdapterFactory` correctly detects the `@JsonAdapter` annotation and registers the custom adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133)), but its `write` method wraps that type adapter in a `TypeAdapterRuntimeTypeWrapper` ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111)), which overrides the adapter with the default Gson adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65)).\n\nHere's a test that demonstrates the behavior:\n\n``` diff\ndiff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest\nindex 4c745ec..8cae980 100644\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {\n       this.part = part;\n     }\n   }\n+\n+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithPrimitivePart(42));\n+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\n+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\n+    assertEquals(42, gadget.part);\n+  }\n+\n+  private static final class GadgetWithPrimitivePart {\n+    @JsonAdapter(LongToStringTypeAdapterFactory.class)\n+    final long part;\n+\n+    private GadgetWithPrimitivePart(long part) {\n+      this.part = part;\n+    }\n+  }\n+\n+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {\n+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {\n+      @Override public void write(JsonWriter out, Long value) throws IOException {\n+        out.value(value.toString());\n+      }\n+      @SuppressWarnings(\"unchecked\")\n+      @Override public Long read(JsonReader in) throws IOException {\n+        return in.nextLong();\n+      }\n+    };\n+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+      Class<?> cls = type.getRawType();\n+      if (Long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      } else if (long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      }\n+      throw new IllegalStateException(\"Non-long field of type \" + type\n+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");\n+    }\n+  }\n }\n```\n\nAnd here's the result of running it:\n\n```\n[snip]\nRunning com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest\nTests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!\n[snip]\nResults :\n\nFailed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{\"part\":[\"42\"]}> but was:<{\"part\":[42]}>\n\nTests run: 990, Failures: 1, Errors: 0, Skipped: 0\n```\n\nIs this the intended behavior? If so, `JsonAdapter`'s documentation is a bit misleading.\n\nIf it's not, I unfortunately do not have a suggested fix. I was actually a bit surprised to see that a new `TypeAdapterRuntimeTypeWrapper` object is constructed for each field that is serialized, on every serialization.\n\nIn case you would like to incorporate my test into Gson, I hereby assign copyright of that test to Google.\n\nThanks!", "Looks like a bug, indeed.\n\nOn Tue, Apr 19, 2016 at 7:03 PM Brandon Mintern notifications@github.com\nwrote:\n\n> ReflectiveTypeAdapterFactory correctly detects the @JsonAdapter\n> annotation and registers the custom adapter (source\n> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133),\n> but its write method wraps that type adapter in a\n> TypeAdapterRuntimeTypeWrapper (source\n> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111),\n> which overrides the adapter with the default Gson adapter (source\n> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65\n> ).\n> \n> Here's a test that displays the behavior:\n> \n> diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest\n> index 4c745ec..8cae980 100644--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {\n>        this.part = part;\n>      }\n>    }++  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {+    Gson gson = new Gson();+    String json = gson.toJson(new GadgetWithPrimitivePart(42));+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);+    assertEquals(42, gadget.part);+  }++  private static final class GadgetWithPrimitivePart {+    @JsonAdapter(LongToStringTypeAdapterFactory.class)+    final long part;++    private GadgetWithPrimitivePart(long part) {+      this.part = part;+    }+  }++  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {+      @Override public void write(JsonWriter out, Long value) throws IOException {+        out.value(value.toString());+      }+      @SuppressWarnings(\"unchecked\")+      @Override public Long read(JsonReader in) throws IOException {+        return in.nextLong();+      }+    };+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {+      Class<?> cls = type.getRawType();+      if (Long.class.isAssignableFrom(cls)) {+        return (TypeAdapter<T>) ADAPTER;+      } else if (long.class.isAssignableFrom(cls)) {+        return (TypeAdapter<T>) ADAPTER;+      }+      throw new IllegalStateException(\"Non-long field of type \" + type+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");+    }+  }\n>  }\n> \n> And here's the result of running it:\n> \n> [snip]\n> Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest\n> Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!\n> [snip]\n> Results :\n> \n> Failed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{\"part\":[\"42\"]}> but was:<{\"part\":[42]}>\n> \n> Tests run: 990, Failures: 1, Errors: 0, Skipped: 0\n> \n> Is this the intended behavior? If so, JsonAdapter's documentation is a\n> bit misleading.\n> \n> If it's not, I unfortunately do not have a suggested fix. I was actually a\n> bit surprised to see that a new TypeAdapterRuntimeTypeWrapper object is\n> constructed for each field that is serialized, on every serialization.\n> \n> In case you would like to incorporate my test into Gson, I hereby assign\n> copyright of that test to Google.\n> \n> Thanks!\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/831\n =||= Fixed in https://github.com/google/gson/pull/832\n =||= That was a fast fix! Thank you very much!\n =||= I'm happy for you to close this if you like. I'm only leaving it open in case you prefer to close issues after merging the fix, after releasing it, or according to some other policy.\n =||= Yes, I prefer to close issue only after the fix has been merged. Thanks for reporting it with a test to reproduce, @mintern \n =||= Should this be closed?\n =||= yes\n =||= ", 0], ["832", "Ensuring that JsonAdapter annotation works correctly for primitive fi\u2026", "Inderjeet Singh", "inder123", "05/17/16, 09:26:53 PM", "\u2026elds.", "Fix for https://github.com/google/gson/issues/831\n =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= @swankjesse I have revised the code per feedback. Now if JsonAdapter annotation is present, we ignore  the run-time type specific adapter.\n\nAlso, rebased and squashed. Please review.\n =||= @swankjesse  Ok. I have removed that check. Please review.\n =||= Thumbs up\n =||= ", ["832", "Ensuring that JsonAdapter annotation works correctly for primitive fi\u2026", "Inderjeet Singh", "inder123", "05/17/16, 09:26:53 PM", "\u2026elds.", "NaN"], ["Inderjeet Singh", "Don't use a runtime wrapper if a JsonAdapter annotation is present on a field.\n\nThis ensures that JsonAdapter annotation works correctly on a primitive field.\nThis is a potentially backward incompatible change.", "05/17/16, 08:30:59 PM", "Inderjeet Singh", "3ff16c30dbcd2a66209935a3e71a5f21f696d896", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/Streams.java", "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -24,7 +24,6 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Locale;\n-import java.util.TimeZone;\n \n import com.google.gson.internal.bind.util.ISO8601Utils;\n , @@ -72,7 +72,6 @@ public static void write(JsonElement element, JsonWriter writer) throws IOExcept\n     TypeAdapters.JSON_ELEMENT.write(writer, element);\n   }\n \n-  @SuppressWarnings(\"resource\")\n   public static Writer writerForAppendable(Appendable appendable) {\n     return appendable instanceof Writer ? (Writer) appendable : new AppendableWriter(appendable);\n   }, @@ -32,6 +32,7 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n+\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n@@ -104,14 +105,22 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n     // special casing primitives here saves ~5% on Android...\n+    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n+    TypeAdapter<?> mapped = null;\n+    if (annotation != null) {\n+      mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n+    }\n+    final boolean jsonAdapterPresent = mapped != null;\n+    if (mapped == null) mapped = context.getAdapter(fieldType);\n+\n+    final TypeAdapter<?> typeAdapter = mapped;\n     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n-      final TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n       @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n       @Override void write(JsonWriter writer, Object value)\n           throws IOException, IllegalAccessException {\n         Object fieldValue = field.get(value);\n-        TypeAdapter t =\n-          new TypeAdapterRuntimeTypeWrapper(context, this.typeAdapter, fieldType.getType());\n+        TypeAdapter t = jsonAdapterPresent ? typeAdapter\n+            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n         t.write(writer, fieldValue);\n       }\n       @Override void read(JsonReader reader, Object value)\n@@ -129,15 +138,6 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n     };\n   }\n \n-  TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n-    JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n-    if (annotation != null) {\n-      TypeAdapter<?> adapter = getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n-      if (adapter != null) return adapter;\n-    }\n-    return gson.getAdapter(fieldType);\n-  }\n-\n   private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw) {\n     Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();\n     if (raw.isInterface()) {, @@ -15,14 +15,15 @@\n  */\r\n package com.google.gson.internal.bind;\r\n \r\n+import java.io.IOException;\r\n+import java.lang.reflect.Type;\r\n+import java.lang.reflect.TypeVariable;\r\n+\r\n import com.google.gson.Gson;\r\n import com.google.gson.TypeAdapter;\r\n import com.google.gson.reflect.TypeToken;\r\n import com.google.gson.stream.JsonReader;\r\n import com.google.gson.stream.JsonWriter;\r\n-import java.io.IOException;\r\n-import java.lang.reflect.Type;\r\n-import java.lang.reflect.TypeVariable;\r\n \r\n final class TypeAdapterRuntimeTypeWrapper<T> extends TypeAdapter<T> {\r\n   private final Gson context;\r, @@ -63,7 +63,6 @@ public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter() {\n         @Override public void write(JsonWriter out, Part part) throws IOException {\n           throw new AssertionError();\n         }\n-\n         @Override public Part read(JsonReader in) throws IOException {\n           throw new AssertionError();\n         }\n@@ -220,4 +219,53 @@ private GadgetWithOptionalPart(Part part) {\n       this.part = part;\n     }\n   }\n+\n+  /** Regression test contributed through https://github.com/google/gson/issues/831 */\n+  public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithOptionalPart(new Part(\"foo\")));\n+    assertEquals(\"{\\\"part\\\":\\\"PartJsonFieldAnnotationAdapter\\\"}\", json);\n+    GadgetWithOptionalPart gadget = gson.fromJson(\"{'part':'foo'}\", GadgetWithOptionalPart.class);\n+    assertEquals(\"PartJsonFieldAnnotationAdapter\", gadget.part.name);\n+  }\n+\n+  /** Regression test contributed through https://github.com/google/gson/issues/831 */\n+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new GadgetWithPrimitivePart(42));\n+    assertEquals(\"{\\\"part\\\":\\\"42\\\"}\", json);\n+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);\n+    assertEquals(42, gadget.part);\n+  }\n+\n+  private static final class GadgetWithPrimitivePart {\n+    @JsonAdapter(LongToStringTypeAdapterFactory.class)\n+    final long part;\n+\n+    private GadgetWithPrimitivePart(long part) {\n+      this.part = part;\n+    }\n+  }\n+\n+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {\n+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {\n+      @Override public void write(JsonWriter out, Long value) throws IOException {\n+        out.value(value.toString());\n+      }\n+      @Override public Long read(JsonReader in) throws IOException {\n+        return in.nextLong();\n+      }\n+    };\n+    @SuppressWarnings(\"unchecked\")\n+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n+      Class<?> cls = type.getRawType();\n+      if (Long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      } else if (long.class.isAssignableFrom(cls)) {\n+        return (TypeAdapter<T>) ADAPTER;\n+      }\n+      throw new IllegalStateException(\"Non-long field of type \" + type\n+          + \" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)\");\n+    }\n+  }\n }, ", 65, 18, "\"modified, modified, modified, modified, modified, \"", 83], 1], ["833", "Add annotation that enables null serialization per field", "Markus Pfeiffer", "markuspfeiffer", "04/21/16, 12:55:47 AM", "This adds the ability to specify whether to serialize a `null` value on a per-field basis, using the new `@Serialize` annotation.\n\nIf the `@Serialize` annotation is not specified, or its value is set to `Inclusion.DEFAULT` the behavior of Gson remains unchanged. A class member's value will be included in the JSON if it has a value other than `null`. If Gson has been configured to always include null values the member's value will be included even if it's `null`.\n\nBy adding `@Serialize(Inclusion.ALWAYS)` to a class member, it will always be included in the JSON even if its value is `null`. Basically this annotation makes it possible to enable inclusion of nulls on a per-field basis. If Gson has been configured to always include null values adding the annotation in this form does nothing.\n\nBy adding `@Serialize(Inclusion.NON_NULL)` to a class member, it will always be excluded from the JSON if its value is `null`. Normally this matches Gson's default behavior, unless Gson has been configured to include null values. In this case the annotation allows to exclude nulls on a per-field basis.\n\n**Be aware** that this does not change any other of Gson's rules. If a member is excluded for any other reason, for example if it has a `transient` modifier, this annotation will not change this. Also if Gson has been configured to exclude fields that do not have an `@Expose` annotation you will still need to add @Expose to class members that should be serialized. In other words the `@Serialize` annotation only works on members that are serialized under normal circumstances and only changes the behavior of Gson in regards to `null`.\n\n**Examples**\n\n```\npublic class Main {\n\n    public static class Example {\n\n        @Serialize(Inclusion.ALWAYS)\n        public String field1 = null;\n\n         @Serialize(Inclusion.NON_NULL)\n        public String field2 = null;\n\n         //@Serialize(Inclusion.DEFAULT)\n         public String field3 = null;\n\n        public String field4 = \"Field 4\";\n    }\n\n    public static void main(final String[] args) {\n\n        final Gson gson1 = new GsonBuilder().create();\n        final Gson gson2 = new GsonBuilder().serializeNulls().create();\n\n        final Example example1 = new Example();\n\n        final String json1 = gson1.toJson(example1);\n        System.out.println(json1);\n\n        final String json2 = gson2.toJson(example1);\n        System.out.println(json2);\n    }\n}\n```\n\nWithout support for `@Serialize` the output of Gson would be:\n\n```\n// Output for gson1 (don't serialize nulls)\n{ \"field4\": \"Field 4\" }\n\n// Output for gson2 (serialize nulls)\n{ \"field1\": null, \"field2\": null, \"field3\": null, \"field4\": \"Field 4\" }\n```\n\n**With** support for `@Serialize` its output instead becomes:\n\n```\n// Output for gson1 (don't serialize nulls)\n{ \"field1\": null, \"field4\": \"Field 4\" }\n\n// Output for gson2 (serialize nulls)\n{ \"field1\": null, \"field3\": null, \"field4\": \"Field 4\" }\n```", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= This is a very heavyweight solution to a problem I have trouble understanding. When would you need such granular control vs. always emitting or always omitting `null` literals?\n =||= Agree with Jake. Can there be a much lighter-weight solution to this problem. Something that extends the existing annotations (such as SerializedName), for example.\n =||= BTW, appreciate the detailed tests and the pull request. \n =||= > This is a very heavyweight solution to a problem I have trouble understanding. When would you need such granular control vs. always emitting or always omitting `null` literals?\n\nExample: You want to omit `null` in general to keep the size of your JSON to the minimum. However there are some fields where `null` and _not-present_ are treated differently.\n\nWhen you send a value to the server, the server will update its field to that value. When you send `null` to the server, the server will clear its field. When you do not send a value, the server will leave its field as it is.\n\nSo in general you want to omit `null` for reasons of size, but for some models you require `null` values to be able to reset fields.\n\nInstead of a separate annotation this could probably be added to either `SerializedName` or `Expose`. Using `SerializedName` feels just wrong to me, because its name suggests no functionality of such kind. `Expose` on the other hand already controls serialize/deserialize, so adding a more fine-grained control for serialize makes sense to me (e.g. serialize=[true|false], deserialize=[true|false], serializeNulls=[default, always, never]).\n =||= @markuspfeiffer  Agree. This is the partial updates problem for JSON/REST services. However, not sure if you solution solves that problem.\nI think what you want is to pass this information at the time of invoking toJson().\nMoreover, I am not clear how this information is obtained in fromJson() since the field could be null because it was absent, or because it was explicitly set to null.\n\nOutline of a solution:\nWe can have a map of JsonPath expressions referring to fields that are explicitly set to null. This map is passed at toJson time by the caller, and returned by Gson after fromJson is called. Not sure how we will structure the code to support this.\n =||= ", 0], ["835", "JsonReader not strict about JSON document consumption", "Eric Cochran", "NightlyNexus", "04/22/16, 08:20:39 PM", "Say I have a class:\n`final class MyType {}`\n\nand a `TypeAdapter`:\n\n```\nfinal class MyTypeAdapter extends TypeAdapter<MyType> {\n  // ...\n  @Override public MyType read(JsonReader in) throws IOException {\n    in.beginObject();\n    return new MyType();\n    }\n}\n```\n\nNote the missing `in.endObject()` call.\n\nMy calling code:\n\n```\nString json = \"{}\";\nGson gson = new GsonBuilder().registerTypeAdapter(MyType.class, new MyTypeAdapter()).create();\nStringReader stringReader = new StringReader(json);\nMyType myType = gson.fromJson(stringReader, MyType.class);\n```\n\nThe above will correctly fail (`JsonIOException: JSON document was not fully consumed.`).\n\nHowever, using a `JsonReader` instead (`gson.fromJson(new JsonReader(stringReader), MyType.class)`) will not fail.\nIs this working as intended?", "If you are passing a `JsonReader` instance then it's your responsibility to do the assertion.\n\nThe implementation of `fromJson(String, Class<?>)` is:\n\n``` java\nJsonReader jsonReader = newJsonReader(json);\nObject object = fromJson(jsonReader, classOfT);\nassertFullConsumption(object, jsonReader);\nreturn object;\n```\n\nIn the case where you are the one creating the `JsonReader` there's no opportunity to assert completion since you may just be deserializing part of the whole document.\n =||= Oh, yes, I should have dug one step deeper into that. Thanks. Makes sense.\n =||= ", 0], ["836", "Add boxed boolean value() overload.", "Jake Wharton", "JakeWharton", "04/23/16, 12:54:25 AM", "When calling value() with a Boolean, overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.\n\nProof this happens: https://github.com/bugsnag/bugsnag-android/pull/42", "Sigh.\n =||= ", ["836", "Add boxed boolean value() overload.", "Jake Wharton", "JakeWharton", "04/23/16, 12:54:25 AM", "When calling value() with a Boolean, overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.\n\nProof this happens: https://github.com/bugsnag/bugsnag-android/pull/42", "NaN"], ["Jake Wharton", "Add boxed boolean value() overload.\n\nWhen calling value() with a Boolean overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.", "04/22/16, 11:50:10 PM", "Jake Wharton", "59edfc1caf2bb30e30f523f8502f23e8f8edc38e", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/main/java/com/google/gson/stream/JsonWriter.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -159,6 +159,14 @@ private void put(JsonElement value) {\n     return this;\n   }\n \n+  @Override public JsonWriter value(Boolean value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n   @Override public JsonWriter value(double value) throws IOException {\n     if (!isLenient() && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"JSON forbids NaN and infinities: \" + value);, @@ -162,10 +162,6 @@ public Boolean read(JsonReader in) throws IOException {\n     }\n     @Override\n     public void write(JsonWriter out, Boolean value) throws IOException {\n-      if (value == null) {\n-        out.nullValue();\n-        return;\n-      }\n       out.value(value);\n     }\n   };, @@ -468,6 +468,21 @@ public JsonWriter value(boolean value) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * Encodes {@code value}.\n+   *\n+   * @return this writer.\n+   */\n+  public JsonWriter value(Boolean value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue();\n+    out.write(value ? \"true\" : \"false\");\n+    return this;\n+  }\n+\n   /**\n    * Encodes {@code value}.\n    *, @@ -283,6 +283,17 @@ public void testBooleans() throws IOException {\n     assertEquals(\"[true,false]\", stringWriter.toString());\n   }\n \n+  public void testBoxedBooleans() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginArray();\n+    jsonWriter.value((Boolean) true);\n+    jsonWriter.value((Boolean) false);\n+    jsonWriter.value((Boolean) null);\n+    jsonWriter.endArray();\n+    assertEquals(\"[true,false,null]\", stringWriter.toString());\n+  }\n+\n   public void testNulls() throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);, ", 34, 4, "\"modified, modified, modified, modified, \"", 38], 1], ["837", " Documentation Error", "\u8f7b\u5fae", "zzz40500", "04/23/16, 05:40:53 PM", "String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class); => String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= Thanks!\n =||= ", ["837", " Documentation Error", "\u8f7b\u5fae", "zzz40500", "04/23/16, 05:40:53 PM", "String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class); => String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);", "NaN"], ["zzz40500", " Documentation Error\n\nString anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class); => String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);", "04/23/16, 05:36:52 PM", "zzz40500", "71ee0e3759c7aafa849871443a47bdd001faaf1b", ["UserGuide.md"], "@@ -104,7 +104,7 @@ Integer one = gson.fromJson(\"1\", Integer.class);\n Long one = gson.fromJson(\"1\", Long.class);\n Boolean false = gson.fromJson(\"false\", Boolean.class);\n String str = gson.fromJson(\"\\\"abc\\\"\", String.class);\n-String anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String.class);\n+String[] anotherStr = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);\n ```\n \n ### <a name=\"TOC-Object-Examples\"></a>Object Examples, ", 1, 1, "\"modified, \"", 2], 1], ["838", "Adds getters for config fields.", "Ryan Harter", "rharter", "04/26/16, 07:30:58 PM", "This adds simple getters for certain config fields that would be helpful in custom `TypeAdapter`s to deal with situations like this: https://github.com/rharter/auto-value-gson/issues/18", "Merged manually. I updated your copyright header!\n =||= Merged commit is a851569ab916b5f9466949ed106d2abff1d1650c\n =||= Hah, I just copied that from another file and didn't pay attention.  I didn't actually write this in 2008 :)\n =||= ", 0], ["839", "Optimize list allocation for every reflective field.", "Jake Wharton", "JakeWharton", "04/27/16, 04:32:02 AM", "The common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.\n\nThis is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.", "\ud83d\udc4d \n =||= ", ["839", "Optimize list allocation for every reflective field.", "Jake Wharton", "JakeWharton", "04/27/16, 04:32:02 AM", "The common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.\n\nThis is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.", "NaN"], ["Jake Wharton", "Optimize list allocation for every reflective field.\n\nThe common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.\n\nThis is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.", "04/27/16, 04:28:51 AM", "Jake Wharton", "8537c8932f0d9bd3338a5048fb65a8506c7a8247", ["gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"], "@@ -35,8 +35,9 @@\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n@@ -67,20 +68,22 @@ static boolean excludeField(Field f, boolean serialize, Excluder excluder) {\n \n   /** first element holds the default name */\n   private List<String> getFieldNames(Field f) {\n-    return getFieldName(fieldNamingPolicy, f);\n-  }\n+    SerializedName annotation = f.getAnnotation(SerializedName.class);\n+    if (annotation == null) {\n+      String name = fieldNamingPolicy.translateName(f);\n+      return Collections.singletonList(name);\n+    }\n \n-  /** first element holds the default name */\n-  static List<String> getFieldName(FieldNamingStrategy fieldNamingPolicy, Field f) {\n-    SerializedName serializedName = f.getAnnotation(SerializedName.class);\n-    List<String> fieldNames = new LinkedList<String>();\n-    if (serializedName == null) {\n-      fieldNames.add(fieldNamingPolicy.translateName(f));\n-    } else {\n-      fieldNames.add(serializedName.value());\n-      for (String alternate : serializedName.alternate()) {\n-        fieldNames.add(alternate);\n-      }\n+    String serializedName = annotation.value();\n+    String[] alternates = annotation.alternate();\n+    if (alternates.length == 0) {\n+      return Collections.singletonList(serializedName);\n+    }\n+\n+    List<String> fieldNames = new ArrayList<String>(alternates.length + 1);\n+    fieldNames.add(serializedName);\n+    for (String alternate : alternates) {\n+      fieldNames.add(alternate);\n     }\n     return fieldNames;\n   }, ", 17, 14, "\"modified, \"", 31], 1], ["840", "Switch default Queue implementation to ArrayDeque.", "Jake Wharton", "JakeWharton", "04/27/16, 04:40:58 AM", "Now that we require Java 1.6 or newer this much more efficient implementation can be used as the default.", "NaN", ["840", "Switch default Queue implementation to ArrayDeque.", "Jake Wharton", "JakeWharton", "04/27/16, 04:40:58 AM", "Now that we require Java 1.6 or newer this much more efficient implementation can be used as the default.", "NaN"], ["Jake Wharton", "Switch default Queue implementation to ArrayDeque.\n\nNow that we require Java 1.6 or newer this much more efficient implementation can be used as the default.", "04/27/16, 04:37:28 AM", "Jake Wharton", "371aff7ce4fb73ed997cbf6aa08706f272cef0c6", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -20,12 +20,12 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n+import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n@@ -163,7 +163,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n       } else if (Queue.class.isAssignableFrom(rawType)) {\n         return new ObjectConstructor<T>() {\n           @Override public T construct() {\n-            return (T) new LinkedList<Object>();\n+            return (T) new ArrayDeque<Object>();\n           }\n         };\n       } else {, ", 2, 2, "\"modified, \"", 4], 1], ["841", "json-sanitizer", "Andres Pontt", "andrespontt", "05/02/16, 06:23:39 PM", "Hi,\nThis is not a bug, is a question. Sorry if this is not the right place to put it.\n\nI was requested to include the OWASP json sanitizer to gson.fromJson function, anybody knows if GSON sanitize the string out of the box or this is something that I should include manually?\n\nhttps://www.owasp.org/index.php/OWASP_JSON_Sanitizer\n\nThanks in advance.", "NaN", 0], ["842", "Serialising \"Bundle\" in Android", null, "kushaldr", "05/03/16, 07:14:33 AM", "When tried to serialise a Model which contains Bundle as a member, Serialisation fails and run out of memory.\n\nCode Snippet below:\n\n[TempModel.java.zip](https://github.com/google/gson/files/246375/TempModel.java.zip)\n\nTempModel t = new TempModel();\n\n```\n        Bundle b = new Bundle();\n        b.putString(\"A\", \"a\");\n\n        t.setDataBundle(b);\n        t.setId(\"A\");\n\n        Gson gs = new Gson();\n\n        String jsonContent = gs.toJson(t, TempModel.class);\n        Log.i(\"DF\", \"Temp Model -> New JSON : \" + jsonContent);\n```", "You need to use a BundleTypeAdapterFactory. Something like this: \nhttps://github.com/google-gson/typeadapters/blob/master/android/src/main/java/BundleTypeAdapterFactory.java\n =||= ", 0], ["843", "How to deserialize the complex Nested Generic Type like below?", "GuangGuang", "Guang1234567", "05/03/16, 02:02:54 PM", "Hello @GsonDev:\n\nI hava a complex POJO like below, How to deserialize?  Thanks.\n\n``` ruby\n{\"id\":-9876543,\"result\":{\"username\":\"user01\",\"name\":\"john\",\"status\":\"normal\",\"tenemnetIds\":[\"77777\", \"8888\"],\"tenementId\":\"77777\"},\"jsonrpc\":\"2.0\"}\n```\n\n``` java\n// I have  tried this, but not work for me!  But FastJson work!\nGson gson = new GsonBuilder().create();\n        Type fooType = new TypeToken<\n                JsonRpcResponse<\n                        PreLoginResult,\n                        PreLoginError>\n                >() {}.getType();\n        GzbApisService.JsonRpcResponse<\n                PreLoginResult,\n                PreLoginError> rpcResponse2 = gson.fromJson(jsonString, fooType);\n```\n\n``` java\n final public static class JsonRpcResponse<RESULT extends IRpcResult, ERROR extends IRpcError> {\n        protected String mJsonrpc;\n        protected int mId;\n        protected RESULT mResult;\n        protected ERROR mError;\n\n        public JsonRpcResponse() {\n        }\n\n        public boolean isSuccessful() {\n            return mResult != null ? true : false;\n        }\n\n        public String getJsonrpc() {\n            return mJsonrpc;\n        }\n\n        public void setJsonrpc(String jsonrpc) {\n            this.mJsonrpc = jsonrpc;\n        }\n\n        public int getId() {\n            return mId;\n        }\n\n        public void setId(int id) {\n            mId = id;\n        }\n\n        public RESULT getResult() {\n            return mResult;\n        }\n\n        public void setResult(RESULT result) {\n            mResult = result;\n        }\n\n        public ERROR getError() {\n            return mError;\n        }\n\n        public void setError(ERROR error) {\n            mError = error;\n        }\n    }\n\n    public static interface IRpcResult {\n    }\n\n    public static interface IRpcError {\n    }\n\n\n        public static class PreLoginResult implements IRpcResult {\n            private String username;\n            private String name;\n            private String status;\n            private String tenementId;\n            @SerializedName(\"tenemnetIds\")\n            @Expose\n            @JSONField(name=\"tenemnetIds\")\n            private List<String> tenementIds = new ArrayList<>();\n            private Installation installation;\n\n            public String getUsername() {\n                return username;\n            }\n\n            public void setUsername(String username) {\n                this.username = username;\n            }\n\n            public String getName() {\n                return name;\n            }\n\n            public void setName(String name) {\n                this.name = name;\n            }\n\n            public String getStatus() {\n                return status;\n            }\n\n            public void setStatus(String status) {\n                this.status = status;\n            }\n\n            public String getTenementId() {\n                return tenementId;\n            }\n\n            public void setTenementId(String tenementId) {\n                this.tenementId = tenementId;\n            }\n\n            public List<String> getTenementIds() {\n                return tenementIds;\n            }\n\n            public void setTenementIds(List<String> tenementIds) {\n                this.tenementIds = tenementIds;\n            }\n\n            public Installation getInstallation() {\n                return installation;\n            }\n\n            public void setInstallation(Installation installation) {\n                this.installation = installation;\n            }\n\npublic static class Installation {\n\n                private String version;\n                private String downloadURL;\n                private String extControl;\n                private List<String> versionLog = new ArrayList<>();\n\n                public String getVersion() {\n                    return version;\n                }\n\n                public void setVersion(String version) {\n                    this.version = version;\n                }\n\n                public String getDownloadURL() {\n                    return downloadURL;\n                }\n\n                public void setDownloadURL(String downloadURL) {\n                    this.downloadURL = downloadURL;\n                }\n\n                public String getExtControl() {\n                    return extControl;\n                }\n\n                public void setExtControl(String extControl) {\n                    this.extControl = extControl;\n                }\n\n                public List<String> getVersionLog() {\n                    return versionLog;\n                }\n\n                public void setVersionLog(List<String> versionLog) {\n                    this.versionLog = versionLog;\n                }\n            }\n        }\n\n        public static class PreLoginError implements IRpcError {\n            private Integer code;\n            private String message;\n\n            public Integer getCode() {\n                return code;\n            }\n\n            public void setCode(Integer code) {\n                this.code = code;\n            }\n\n            public String getMessage() {\n                return message;\n            }\n\n            public void setMessage(String message) {\n                this.message = message;\n            }\n        }\n```", "You need to use `@SerializedName` on your `m`-prefixed fields or they won't match.\n\nPlease ask general usage questions on StackOverflow with the 'gson' tag. We tend to reserve GitHub issues for bugs and feature requests only as it is an extremely poor support system otherwise.\n =||= Thanks a lot, you are right.\n\nIn addition, why Gson doesnt auto match the **m-prefixed fields**  that has the standard **getter and setter**?\n\nI find the answer in  [GsonDesignDocument](https://github.com/google/gson/blob/master/GsonDesignDocument.md) (**Gson is fields-based**)\n\n> Using fields vs getters to indicate Json elements\n> \n> Some Json libraries use the getters of a type to deduce the Json elements. We chose to use all fields (up the inheritance hierarchy) that are not transient, static, or synthetic. We did this because not all classes are written with suitably named getters. Moreover, getXXX or isXXX might be semantic rather than indicating properties.\n> \n> However, there are good arguments to support properties as well. We intend to enhance Gson in a latter version to support properties as an alternate mapping for indicating Json fields. For now, Gson is fields-based.\n =||= ", 0], ["844", "Deserialization aware", "Manish Goyal", "manishgo", "05/04/16, 03:51:13 AM", "This feature will enable the user to provide hook in Java object to perform additional steps after that object is deserialized from JSON.", "You can do this already with a `TypeAdapter.Factory` and your own callback interface. Why should it be added to Gson?\n =||= Wouldn't it be easier to just implement this interface and write the required code in the class' method itself rather than writing it in another class (TypeAdapter) in which case user has to deal with TypeAdapter syntax. Also user needs to write additional logic for performing default deserialization in the adapter and then calling interface method which can be hidden in GSON library.\n =||= You can have the exact same behavior as this PR by checking for an\ninterface and calling a method on the type though.\n\nOn Tue, May 3, 2016 at 11:29 PM Manish Goyal notifications@github.com\nwrote:\n\n> Wouldn't it be easier to just implement this interface and write the\n> required code in the class' method itself rather than writing it in another\n> class (TypeAdapter) in which case user has to deal with TypeAdapter syntax.\n> Also user needs to write additional logic for performing default\n> deserialization in the adapter and then calling interface method which can\n> be hidden in GSON library.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/844#issuecomment-216733276\n =||= Agreed. But doesn't it make sense to provide a convenient feature to the user so that he can just implement this interface and thats it!\n =||= Not unless there's a clear value proposition desired by large chunks of\nusers and even then it needs a well-designed and thought out API that we\nare comfortable maintaining. It only takes 2 seconds to send a PR but we\nhave to live with the ramifications and compatibility concerns for years.\n\nOn Tue, May 3, 2016 at 11:36 PM Manish Goyal notifications@github.com\nwrote:\n\n> Agreed. But doesn't it make sense to provide a convenient feature to the\n> user so that he can just implement this interface and thats it!\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/pull/844#issuecomment-216733796\n =||= ", 0], ["845", "gson-extras not available in The Central Repository", "Mark Fulton", "mfulton26", "05/05/16, 06:16:16 PM", "Searching [The Central Repository](http://search.maven.org/) for [g:com.google.code.gson a:gson-extras](http://search.maven.org/#search%7Cga%7C1%7Cg%3Acom.google.code.gson%20a%3Agson-extras) reveals no results.\n\nIs/will `gson-extras` be published? I'd like to be able to use the `UtcDateTypeAdapter` along with other extras.\n\nThank you.", "It's intentionally not published because we make not guarantees about API stability or compatibility. It exists so that you can copy them into your project and adapt as needed.\n =||= Okay. Thanks @JakeWharton for the explanation.\n =||= ", 0], ["846", "adding @DateFormat annotation to accept date formats", "Prateek", "jainsahab", "05/12/16, 07:04:30 AM", "this field annotation will allow passing date formats to GSON in order to parse/format\ndate strings while deserialization/serialization. It will work for `java.util.Date` and `java.sql.Date` type fields.\n\n```\npublic class Trip {\n    @DateFormat(\"yyyy-MM-dd\")\n    private Date startDate;\n\n    @DateFormat(\"yyyy/MM/dd\")\n    private Date endDate;\n\n    public Trip(Date startDate, Date endDate) {\n      this.startDate = startDate;\n      this.endDate = endDate;\n    }\n}\n```\n\nthat's how we can pass date formats for different fields to Gson.", "Thanks for the concrete proposal.\nThere is no need for a new annotation. You can write a TypeAdapter with this format, and use the JsonAdapter annotation. Overall, we set a very high bar to expand the Gson API. Simple short APIs have a smaller conceptual weight and appreciated by user.\n =||= Apologies for the late reply.\r\nI thought this change could be of generic use like in our case an external vendor develops the API and those guys don't really care about the date format in the JSON response. Different API's have different date formats. So we thought instead of writing different TypeAdapter for different date formats, we can just write a GSON annotation that can tell the expected date format for a field. =||= I need this feature. I use Gson not because it's quick library or for his \"simple short APIs\"; I use Gson because it save development time and it make code really clean. Writing a TypeAdapter each time a backend dev use a different date format take time, add a lot of boilerplate code and it's very frustrating. \r\n\r\nPlease, consider this feature.   =||= ", 0], ["848", "Typo in the user guide.", "David Hwang", "hwangist", "05/08/16, 04:00:52 AM", "Changed \"Serialiers\" to \"Serializers\"", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it.\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Thanks\n =||= ", ["848", "Typo in the user guide.", "David Hwang", "hwangist", "05/08/16, 04:00:52 AM", "Changed \"Serialiers\" to \"Serializers\"", "NaN"], ["Nth Circle", "Typo\n\nChanged \"Serialiers\" to \"Serializers\"", "05/08/16, 03:48:54 AM", "Nth Circle", "1bffde09edd228db162fc1f13502fb9654e21d06", ["UserGuide.md"], "@@ -307,7 +307,7 @@ You can also find source code for some commonly used classes such as JodaTime at\n Sometimes default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc).\n Gson allows you to register your own custom serializers and deserializers. This is done by defining two parts:\n \n-* Json Serialiers: Need to define custom serialization for an object\n+* Json Serializers: Need to define custom serialization for an object\n * Json Deserializers: Needed to define custom deserialization for a type\n \n * Instance Creators: Not needed if no-args constructor is available or a deserializer is registered, ", 1, 1, "\"modified, \"", 2], 1], ["849", "Bug: (De)Serialization of java.io.File", null, "StephanPraetsch", "05/09/16, 03:10:56 PM", "Hi there,\n\nyou have a bug while (de)serialization of java.io.File. There is a flag prefixLength that is not deserialized. For absolute files it must be greater than 0. Erroneously an absolute file that was serialized and deserialized is recognized as a relative file.\n\nEasily reproducable with\n\ngson(new File(\"/tmp/foo.txt\"));\n\non\n\n private static void gson(File file) {\n        System.out.println(\"++++++++++++ gson ++++++++++++\");\n        Gson gson = new Gson();\n        System.out.println(\"file = \" + file + \" (absolute = \" + file.getAbsoluteFile() + \")\");\n        String serialization = gson.toJson(file);\n        File deserialization = gson.fromJson(serialization, File.class);\n        System.out.println(\"deserialization = \" + deserialization + \" (absolute = \"\n                + deserialization.getAbsoluteFile() + \")\");\n    }\n\n> ++++++++++++ gson ++++++++++++\n> file = /tmp/foo.txt (absolute = /tmp/foo.txt)\n> deserialization = /tmp/foo.txt (absolute = /home/stephan/zTest.Art.Id/tmp/foo.txt)\n\nRegards\nStephan", "Java platform types should not be serialized like this since you are relying on their internals which are implementation details. Register a TypeAdapter which writes out `File.toString()` when serializing a `File` and reads the string an invokes `new File(String)` when deserializing.\n =||= Well, I don't agree. File implements Serializable thus I expect GSON to be able to serialize it, too. But ok... \n\nWhich java platform types are supported by GSON? At least it's String. Something else? E.g. java.lang.Integer.\n\nBy the way: On Unix serialize(new File(...).toString()) and on Windows new File(deserialize(...)) won't work because of the different file separator: '/' vs '\\'.\n =||= Serializable has nothing to do with JSON nor Gson. It's Java's native\n(terrible) binary format.\n\nAs far as which platform types are supported, the answer is far too many.\nThere's a bunch of historical weakness in the types that contain native\nadapters which needlessly bloats Gson and creates an endless stream of\npeople wanting more types added.\n\nYou'll want to stick to int, long, double, Integer, Long, Double, and\nString as well as List and arrays of those types. These are the primitives\nof JSON and thus those which map easily and directly. For anything else,\nregister your own type adapter to provide a sane, stable format which can\nbe dictated by your application requirements.\n\nOn Tue, May 10, 2016 at 1:50 AM SteppXXL notifications@github.com wrote:\n\n> Well, I don't agree. File implements Serializable thus I expect GSON to be\n> able to serialize it, too. But ok...\n> \n> Which java platform types are supported by GSON? At least it's String.\n> Something else? E.g. java.lang.Integer.\n> \n> By the way: On Unix serialize(new File(...).toString()) and on Windows new\n> File(deserialize(...)) won't work because of the different file separator:\n> '/' vs '\\'.\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> \n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/849#issuecomment-218065056\n =||= Alright. Thanx for your reply.\n =||= ", 0], ["850", "made nullSafe wrapper of JsonAdapter optional", "Lucas", "testcenter", "05/10/16, 08:32:12 AM", "as there could be the need of handling `null` values within a custom adapter (which is added via the `@JsonAdapter` annotation), the `nullSafe` wrapper is made optional now.\n\nas the annotation has a default value, it is no problem to specify the adapter as before\n`@JsonAdapter(MyCustomAdapter.class)`\n\nto remove the nullSafe wrapper, call\n`@JsonAdapter(value = MyCustomAdapter.class, nullSafe = false);", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n =||= ", 0], ["851", "made nullSafe wrapper of JsonAdapter optional", "Lucas", "testcenter", "06/28/16, 07:11:39 AM", "as there could be the need of handling `null` values within a custom adapter (which is added via the `@JsonAdapter` annotation), the `nullSafe` wrapper is made optional now.\n\nas the annotation has a default value, it is no problem to specify the adapter as before\n`@JsonAdapter(MyCustomAdapter.class)`\n\nto remove the nullSafe wrapper, call\n`@JsonAdapter(value = MyCustomAdapter.class, nullSafe = false);", "Doesn't seem like an important enough usecase. \n =||= @inder123 an important use case would be to be compatible with the JSON-API:\n\nJSON API specifies setting a value like this:\n- if any value is set it will be set / updated on the server\n- if any value is `null` it will be deleted on the server\n- if any value is not serialized (excluded from the request), it will not be updated on the server (stays as it is)\n\nso how should i realize following scenario:\ni have a very complex object, which means the object contains some other objects and a lot of primitive values. all in all about 40-50 elements.\none of these primitive values is a `Long` value: `deletedAt`.\n\non the one hand, i want to deserialize the timestamp `deletedAt`, because i have to delete a database entry on the phone if this timestamp is set.\n\non the other hand i am only allowed to serialize valid values (so the server entry gets deleted).\nif i serialize null, the server throws an error (because the server tries to undelete the value).\n-> so if i want to update this entry, i am not allowed to serialize this value\n\nin this scenario i would add a special adapter to the given `deletedAt` value via the annotation `@JsonAdapter`.\nthis adapter does simply not serialize the value if set to `null`.\nbut this will not work, if the `nullSafe` wrapper is wrapping my adapter.\n\nin this case, i would have to create an adapter for the whole complex object, handling 40-50 primitives, just because of one value...\nthe way better solution would be, to simply set a `@JsonAdapter` to this one specific value.\n\n**by the way**: this was the behaviour before you upgraded to version 2.6. which means passing `null` values to a `@JsonAdapter` adapter worked on versions <= 2.5\n =||= Can you do this without @JsonAdapter? It's a relatively recent addition and it should be possible to accomplish your goals without it.\n =||= @swankjesse it would be possible, but i would have to write a custom serializer for several complex objects which all have about 20-50 members.... which is really a pain in the a... :smile: \nother than that, our structure would not be easily extendable.\n\ni already saw, that this addition is relatively new (if i can recall correctly, the change was made this february).\nthis new behaviour breaks our system since the upgrade to the version 2.6 (which contains this change).\nthe solution i propose in this pull request does not affect the new behaviour at all.\nbut if the developer does set the additional `nullSafe` flag in the annotation the \"old\" behaviour is recreated.\n =||= I defer to Inder on this, @JsonAdapter is his API.\n =||= @inder123 any updates on this after the conversation with @swankjesse ?\n =||= @testcenter ok, let me think it through more. \n =||= @swankjesse I am fine with this change. Never quite liked the fact that we wrapped the adapter with nullSafe() to guard against sloppy code. \nAny thoughts?\n =||= Works for me.\n =||= If you want this merged, please update pull request to enable merging.\nAlso do http://rebaseandsqua.sh\n =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\n\n<!-- need_author_cla -->\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Can you do http://rebaseandsqua.sh ?\n =||= The pull request has changes from other branches. You probably forgot to pull master correctly.\nCan you clone gson git repository directly, create a branch and make changes in it directly? I can then help you do rebase and squash if needed. Thanks.\n =||= @inder123 i am sorry for the inconvenience. it seems as i am too stupid for github (rebase and squash)... :P\n\ni accidentally closed this pull request by force pushing the current state of the upstream/master branch to the master of my fork.\nso i created a new pull request:\n\nsee pull request #881 \n =||= ", 0], ["853", "Corrected documentation, copy&paste error", "Sebastian Bischoff", "Baschdl", "05/12/16, 03:57:34 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Thanks!\n =||= ", ["853", "Corrected documentation, copy&paste error", "Sebastian Bischoff", "Baschdl", "05/12/16, 03:57:34 PM", "NaN", "NaN"], ["Baschdl", "Corrected documentation, copy&paste error", "05/12/16, 12:47:03 PM", "Baschdl", "c414b368e120a6240ceb238f4e0abce821a9f7cd", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -719,7 +719,7 @@ public JsonWriter newJsonWriter(Writer writer) throws IOException {\n   }\n \n   /**\n-   * Returns a new JSON writer configured for the settings on this Gson instance.\n+   * Returns a new JSON reader configured for the settings on this Gson instance.\n    */\n   public JsonReader newJsonReader(Reader reader) {\n     JsonReader jsonReader = new JsonReader(reader);, ", 1, 1, "\"modified, \"", 2], 1], ["854", "issue#672.add IterableTypeAdapterFactory", null, "ianate", "05/14/16, 02:46:56 PM", "add IterableTypeAdapterFactory for Iterable. no enough testcase.some exceptions unhandled", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= please write tests as well.\n =||= I see many issues related to IterableTypeAdapterFactory: #672 #691 #428 \r\n\r\nIn recent version of Gson 2.8.0, I still don't see the IterableTypeAdapterFactory class. So whats is the status of it. Is it implemented in master or not ? =||= ", 0], ["855", "No autocomplete with Eclipse", null, "nyg", "05/14/16, 03:56:56 PM", "Hello all,\n\nI've made a very simple maven project in Eclipse, adding only one dependency, gson. For some reason I can't get any autocompletion for gson and Eclipse's Organize imports feature doesn't seem to be aware of the gson library. If I manually write the `import` statements and create a `Gson` using `GsonBuilder` then doing a `mvn clean package` from the command line will compile everything. It seems I have this problem only with gson.\n\nHere's my POM:\n\n``` xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>edu.self.gson</groupId>\n    <artifactId>gson-test</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.6.2</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n``` java\npackage edu.self.gson.test;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Gson gson = new GsonBuilder().create();\n    }\n}\n```\n\nThanks for your help.\n\njava 1.8.0_66\nmvn 3.3.9\nEclipse Mars.2 JEE edition\nOS X 10.11.4", "Please don't ask questions like this on GitHub. StackOverflow is the right place.\n\nYour local maven repo could be screwed up.\n =||= ", 0], ["856", "a little question while use Retrofi2 with gsonconvet", "bianzi", "jiaruiz", "08/27/16, 07:08:28 PM", "hi, android big big ~ I have a little question while i use **retrofit2** with **Gson** .here two kind repsones\nOne is\ndata : {\"**response**\":{\"sex\":\"\",\"phone\":\"\",\"account_id\":122,\"status\":0,\n     \"session_timeout\":\"\",\"account_reg_type\":1,\"nick_name\":\"\",\"time\":\"20160510174922\",\n      \"weixin\":\"\",\"address\":\"\",\"email\":\"\",\"session\":\"\",\n      \"name\":\"\",\"head\":\"\",\"weibo\":\"\"},\"time\":\"20160510174922\"}\n\nanthor is\n\"data\":{\"**response**\":\"\",\"time\":\"20160517104147\"} \n\nyou konw,it will Expected BEGIN_OBJECT but was STRING at line 1 column 54 path.\ni wish ,maybe gson can atuo ingore the type of responese while is empty string.or how fix it just in android not modify response format\nexcuse me, my engilish is poor", "You can use @JsonAdapter to write a TypeAdapterFactory which conditionally\ndeserializes the response either as an object or as a string.\n\nOn Mon, May 16, 2016 at 8:19 PM bianzi notifications@github.com wrote:\n\n> hi, android big big ~ I have a little question while i use _retrofit2_\n> with _Gson_ .here two kind repsones\n> One is\n> data : {\"_response_\":{\"sex\":\"\",\"phone\":\"\",\"account_id\":122,\"status\":0,\n> \n> \"session_timeout\":\"\",\"account_reg_type\":1,\"nick_name\":\"\",\"time\":\"20160510174922\",\n> \"weixin\":\"\",\"address\":\"\",\"email\":\"\",\"session\":\"\",\n> \"name\":\"\",\"head\":\"\",\"weibo\":\"\"},\"time\":\"20160510174922\"}\n> \n> anthor is\n> \"data\":{\"_response_\":\"\",\"time\":\"20160517104147\"}\n> \n> you konw,it will Expected BEGIN_OBJECT but was STRING at line 1 column 54\n> path.\n> i wish ,maybe gson can atuo ingore the type of responese while is empty\n> string.or how fix it just in android not modify response format\n> excuse me, my engilish is poor\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/google/gson/issues/856\n =||= ", 0], ["857", "Replaced a JDK 1.7 specific method with its JDK 1.6 equivalent.", "Inderjeet Singh", "inder123", "05/17/16, 11:38:51 AM", "NaN", "NaN", ["857", "Replaced a JDK 1.7 specific method with its JDK 1.6 equivalent.", "Inderjeet Singh", "inder123", "05/17/16, 11:38:51 AM", "NaN", "NaN"], ["Inderjeet Singh", "Replaced a JDK 1.7 specific method with its JDK 1.6 equivalent.", "05/17/16, 08:03:00 AM", "Inderjeet Singh", "61f83d630935eec742f66346389fa3d2a13c0874", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"], "@@ -805,7 +805,7 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           constantToName.put(constant, name);\n         }\n       } catch (NoSuchFieldException e) {\n-        throw new AssertionError(\"Missing field in \" + classOfT.getName(), e);\n+        throw new AssertionError(e);\n       }\n     }\n     @Override public T read(JsonReader in) throws IOException {, ", 1, 1, "\"modified, \"", 2], 1], ["859", "Complex JSON deserialization", "Deleted user", "ghost", "05/19/16, 01:24:09 AM", "> How can I deserialize this complex JSON . \n> I want to access all Strings, objects. \n> For example SelectionId and AdditionalPriceInfo fields by indexing. \n> get(0).getSelectionId() --> d51d38c9-6e51-473c-b843-f24fef632f89\n\n```\n{\n    \"Status\": 0,\n    \"Message\": \"\",\n    \"Result\": {\n        \"HasMore\": \"False\",\n        \"Itineraries\": [{\n            \"SelectionId\": \"d51d38c9-6e51-473c-b843-f24fef632f89\",\n            \"AdditionalPriceInfo\": null\n\n        }, {\n            \"SelectionId\": \"dda40b80-d8e4-4b76-9f78-83297b52afe9\",\n            \"AdditionalPriceInfo\": null\n        }]\n    }\n}\n```", "Ask this question on stackoverflow or on https://groups.google.com/forum/#!forum/google-gson\n =||= ", 0], ["861", "Gson.toJson problem with Map when Map is initialised with double brace", "Max Lam", "maxlam79", "05/21/16, 04:45:07 AM", "I've discovered that Gson could not serialize a Map to json if the Map is initialized in the double brace way.\n\nI'm running on:\nMac OSX El Capitan\nGson 2.6.2\njava version \"1.8.0_92\"\nJava(TM) SE Runtime Environment (build 1.8.0_92-b14)\n\nSteps to reproduce, just run the following and you'll see the result:\n\n``` java\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class GsonTest {\n\n    public static void main( String[] args ) {\n        Map<String, String> map1 = new HashMap();\n        map1.put( \"test\", \"123\" );\n\n        Map<String, String> map2 = new HashMap() {\n            {\n                put( \"test\", \"123\" );\n            }\n        };\n\n        Gson gson = new GsonBuilder().create();\n        System.out.println( gson.toJson( map1 ) );    // Will print correctly\n        System.out.println( gson.toJson( map2 ) );    // Will only print null\n    }\n}\n```", "Dupe of #762. Please see reasoning (and workaround) there.\n =||= Thanks for the pointers.\n =||= ", 0], ["862", "Enhancing the json reader, adding corresponding test case for it; #824", "Archit Dey", "deyboy90", "06/02/16, 01:31:15 PM", "As discussed in the issue #824, when invalid escape sequences are provided the parse is still successful.\n\neg. \" \\\"h\\ello\\\": true\",  the parser never used to complain; but after making the below enhancement when ever an unknown escape is encountered then the code will throw syntax error and rightfully inform the user rather than making assumptions.\n\nAlso added a test case to demonstrate this. Have executed all the existing tests to avoid any regression bugs.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= LGTM. Some small style issues.\n =||= Have made the necessary changes. Hope the indentation is fine now.\n =||= Merged manually!\n =||= ", 0], ["863", "handle explicit null values in JSON", "Nykolas Laurentino de Lima", "nykolaslima", "05/24/16, 06:17:54 AM", "Fix error when trying deserialize JSON with explicit `NULL` value.\n\n```\n{msg:'foo', count:null}\n```", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= ", ["863", "handle explicit null values in JSON", "Nykolas Laurentino de Lima", "nykolaslima", "05/24/16, 06:17:54 AM", "Fix error when trying deserialize JSON with explicit `NULL` value.\n\n```\n{msg:'foo', count:null}\n```", "NaN"], ["Nykolas Lima", "handle explicit null values in JSON", "05/23/16, 07:44:30 PM", "Nykolas Lima", "2928b3ef978a619a5433a6f3c9209e2968497904", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"], "@@ -262,8 +262,8 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n           String jsonFieldName =\n               getCustSerializedName(fieldDescriptor.getOptions(), fieldDescriptor.getName());\n \n-          if (jsonObject.has(jsonFieldName)) {\n-            JsonElement jsonElement = jsonObject.get(jsonFieldName);\n+          JsonElement jsonElement = jsonObject.get(jsonFieldName);\n+          if (jsonElement != null && !jsonElement.isJsonNull()) {\n             // Do not reuse jsonFieldName here, it might have a custom value\n             Object fieldValue;\n             if (fieldDescriptor.getType() == ENUM_TYPE) {, @@ -66,4 +66,11 @@ public void testDeserializeProto() {\n     assertEquals(\"foo\", proto.getMsg());\n     assertEquals(3, proto.getCount());\n   }\n+\n+  public void testDeserializeWithExplicitNullValue() {\n+    SimpleProto proto = gson.fromJson(\"{msg:'foo',count:null}\", SimpleProto.class);\n+    assertEquals(\"foo\", proto.getMsg());\n+    assertEquals(0, proto.getCount());\n+  }\n+\n }, ", 9, 2, "\"modified, modified, \"", 11], 1], ["864", "Minor documentation fix on RuntimeTypeAdapterFactory", "Juan Andr\u00e9s", "juandiana", "05/24/16, 08:58:21 PM", "Instances of classes that implement `RuntimeTypeAdapterFactory` should be registered using the `registerTypeAdapterFactory` method instead of `registerTypeAdapter` method on `GsonBuilder`.\n\nNote that since `registerTypeAdapter(Type type, Object typeAdapter)` accepts an `Object`. Therefore, users of this class might not notice this until runtime.", "NaN", ["864", "Minor documentation fix on RuntimeTypeAdapterFactory", "Juan Andr\u00e9s", "juandiana", "05/24/16, 08:58:21 PM", "Instances of classes that implement `RuntimeTypeAdapterFactory` should be registered using the `registerTypeAdapterFactory` method instead of `registerTypeAdapter` method on `GsonBuilder`.\n\nNote that since `registerTypeAdapter(Type type, Object typeAdapter)` accepts an `Object`. Therefore, users of this class might not notice this until runtime.", "NaN"], ["Juan Andre\u0301s Diana", "Docs fix for the RuntimeTypeAdapterFactory class.\nInstances of classes that implement RuntimeTypeAdapterFactory should be registered using the registerTypeAdapterFactory method instead of registerTypeAdapter.", "05/24/16, 07:45:55 PM", "Juan Andre\u0301s Diana", "d4a9eb4e7bcbf0fa9e9e76c81fc86ff669f7c8ea", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -97,7 +97,7 @@\n  * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field\n  * name to the {@link #of} factory method. If you don't supply an explicit type\n  * field name, {@code \"type\"} will be used. <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory\n  *       = RuntimeTypeAdapterFactory.of(Shape.class, \"type\");\n  * }</pre>\n  * Next register all of your subtypes. Every subtype must be explicitly\n@@ -108,14 +108,14 @@\n  *   shapeAdapter.registerSubtype(Circle.class, \"Circle\");\n  *   shapeAdapter.registerSubtype(Diamond.class, \"Diamond\");\n  * }</pre>\n- * Finally, register the type adapter in your application's GSON builder:\n+ * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code\n  *   Gson gson = new GsonBuilder()\n- *       .registerTypeAdapter(Shape.class, shapeAdapter)\n+ *       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code\n- *   RuntimeTypeAdapterFactory<Shape> shapeAdapter = RuntimeTypeAdapterFactory.of(Shape.class)\n+ *   RuntimeTypeAdapterFactory<Shape> shapeAdapterFactory = RuntimeTypeAdapterFactory.of(Shape.class)\n  *       .registerSubtype(Rectangle.class)\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);, ", 4, 4, "\"modified, \"", 8], 1], ["865", "Fix registerTypeAdapterFactory method usage", "Juan Andr\u00e9s", "juandiana", "05/25/16, 07:10:18 PM", "See @JakeWharton's comment on #864.", "Thanks!\n =||= ", ["865", "Fix registerTypeAdapterFactory method usage", "Juan Andr\u00e9s", "juandiana", "05/25/16, 07:10:18 PM", "See @JakeWharton's comment on #864.", "NaN"], ["Juan Andre\u0301s Diana", "The method registerTypeAdapterFactory accepts a TypeAdapterFactory instance only.", "05/25/16, 06:49:39 PM", "Juan Andre\u0301s Diana", "86d88c32cf6a6b7a6e0bbc855d76e4ccf6f120bb", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -111,7 +111,7 @@\n  * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code\n  *   Gson gson = new GsonBuilder()\n- *       .registerTypeAdapterFactory(Shape.class, shapeAdapterFactory)\n+ *       .registerTypeAdapterFactory(shapeAdapterFactory)\n  *       .create();\n  * }</pre>\n  * Like {@code GsonBuilder}, this API supports chaining: <pre>   {@code, ", 1, 1, "\"modified, \"", 2], 1], ["866", "a bug at android phone(moto xt1085,android 5.1) about date", null, "zgmf0757", "07/28/16, 04:28:18 PM", "`String json = \"{\\\"icon\\\":\\\"icon_warning_0201\\\",\\\"title1\\\":\\\"\u66b4\u96e8\u84dd\u8272\u9884\u8b66\u4fe1\u53f7\\\",\\\"title2\\\":\\\"\u9632\u5fa1\u6307\u5357\\\",\\\"content\\\":\\\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\",\\\"content2\\\":\\\"1.\u653f\u5e9c\u53ca\u76f8\u5173\u90e8\u95e8\u6309\u7167\u804c\u8d23\u505a\u597d\u9632\u66b4\u96e8\u51c6\u5907\u5de5\u4f5c\uff1b2.\u5b66\u6821\u3001\u5e7c\u513f\u56ed\u91c7\u53d6\u9002\u5f53\u63aa\u65bd\uff0c\u4fdd\u8bc1\u5b66\u751f\u548c\u5e7c\u513f\u5b89\u5168\uff1b3.\u9a7e\u9a76\u4eba\u5458\u5e94\u5f53\u6ce8\u610f\u9053\u8def\u79ef\u6c34\u548c\u4ea4\u901a\u963b\u585e\uff0c\u786e\u4fdd\u5b89\u5168\uff1b4.\u68c0\u67e5\u57ce\u5e02\u3001\u519c\u7530\u3001\u9c7c\u5858\u6392\u6c34\u7cfb\u7edf\uff0c\u505a\u597d\u6392\u6d9d\u51c6\u5907\u3002\\\",\\\"valid\\\":\\\"May 29, 2016 6:17:13 PM\\\",\\\"video\\\":\\\"rain.mp4\\\"}\";`\n`java.lang.reflect.Type type1 = new TypeToken<Warning>() {}.getType();`\n`Warning w = (Warning) new Gson().fromJson(json, type1);`\n`System.out.println(w.getValid());`\n\nIn JSON String the date \"May 29, 2016 6:17:13 PM\" to java oject would be decoded as \"May 29, 2016 6:17:13 AM\"\n\nIt seems works good at which phone' system version lower then 5.0", "Solve by this...\n`Gson gson = new GsonBuilder().setDateFormat(\"MMM d,yyyy h:m:s a\").create();`\n =||= @zgmf0757 since the issue was solved by forcing the date format, can you close the issue?\n =||= ", 0], ["867", "Deserializing a Map<String, String> returns null", "Zoroark", "utybo", "05/31/16, 07:20:36 PM", "The following code\n\n``` java\nType t = new TypeToken<Map<String, String>>(){}.getClass();\nString s = \"{\\\"somestring\\\":\\\"someotherstring\\\"}\";\nMap<String, String>  map = new Gson().fromJson(s, t);\nif(map == null)\n    System.out.println(\"Null map\");\n```\n\nalways returns a null map (and thus \"Null map\" is sent to System.out)", "Use `getType()`, not `getClass()`. Calling `getClass()` returns `TypeToken.class`.\n =||= ", 0], ["868", "java.lang.StackOverflowError  com.google.gson.internal.$Gson$Types.resolve() @ Line: 372 in $Gson$Types.java", null, "jikun2008", "03/30/17, 10:02:14 AM", "android:  gson 1.7.1 do not have this bug,. but the higher have.   look at this log\n\ncom.google.gson.internal    $Gson$Types.java line 372 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal    $Gson$Types.java line 356 in com.google.gson.internal.$Gson$Types.resolve()\ncom.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 141 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields()\ncom.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 83 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create()\ncom.google.gson Gson.java line 359 in com.google.gson.Gson.getAdapter()\ncom.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 122 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(", "What type are you serializing?\n\nOn Tue, May 31, 2016 at 10:32 PM jikun2008 notifications@github.com wrote:\n\n> android: gson 1.7.1 do not have this bug,. but the higher have. look at\n> this log\n> \n> com.google.gson.internal $Gson$Types.java line 372 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 381 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 376 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal $Gson$Types.java line 356 in\n> com.google.gson.internal.$Gson$Types.resolve()\n> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 141\n> in\n> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields()\n> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 83 in\n> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create()\n> com.google.gson Gson.java line 359 in com.google.gson.Gson.getAdapter()\n> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 122\n> in\n> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/868, or mute the thread\n> https://github.com/notifications/unsubscribe/AAEEESCy0aeX54b3ZxKvZ0Xd4jXBIY01ks5qHO8jgaJpZM4IrIdm\n> .\n =||= ", 0], ["869", "Add support to look ahead / go backward / polymorphic JSON", "Daniele Segato", "danielesegato", "06/03/16, 03:49:12 PM", "## The issue\n\nThe Gson parser only allow parsing the json if you know before you are parsing it which object each field contain.\n\nIf a field contains polymorphic data it can't be parsed with GSon.\n\nAs by JSON specificaiton: _\"An object is an **unordered** set of name/value pairs.\"_\nThus being forced to know the order of the fields to parse the JSON becames a problem.\n### Examples:\n\n1) you have a _type_ field and you need to change the object type to of the Object (and thus the parser) given that field value\n2) you need to adapt the way you parse the object given some field of the JSon within the data itself.\n## Possible solutions? (what would work for me)\n\nThe choice of parsing the object with **a cursor is extremely efficient**, I agree with that, but I think we, developer, should have a way of also handling polymorphic data. Even if I have to give away some performance for that portion of the JSON.\n\nCurrently I'm forced to parse the object into a Map and then manually create my objects, which is really bad in performance and Object allocation anyway.\n\nI still like GSon better then alternatives and I would love if it could implement one or more of these features (in order or preference):\n### A) Go Backward\n\nAllow placing marks in the JSonParser:\n\n```\nin.mark(\"name\");\n// do stuff (beginObject(), next() etc..)\nin.resetTo(\"name\");\n```\n### B) natively support parsing into an org.json JsonObject / JsonArray\n\nAdd\n\n`in.nextJsonObject();`\n\nand\n\n`in.nextJsonArray();`\n\nto consume a value.\n\nthis is far for optimum but at least gives a way of handling cases like this with a custom TypeAdapter.\n\nThis require to keep some kind of buffer or use an InputStream / Reader that support marking.\n### C) Look Ahead\n\nUsing JSON Path getting a specific value inside the JSON\nThis gives away the performance inside that particular portion of the JSON of course because it has to be parsed completely into a JSON object and then the JsonParser will just visit an already parsed object.", "Gson already has its own DOM API with `JsonObject`, no need to use that org.json.\\* filth. You can use that to pull out any properties in a type adapter and then delegate to another TypeAdapter to \"rasterize\" it back into a proper Java type.\n =||= Do you mean JsonElement and JsonDeserializer?\nI honestly completely missed this two :-/\nUsing a TypeAdapterFactory and having to return a TypeAdapter I completely missed it.\n\nAnd now feel stupid for asking :-)\n =||= Mind giving a short example / reference?\n =||= Here's a full example of polymorphic array deserialization I helped with: http://stackoverflow.com/a/36784255/132047\n =||= Something like this?\n\n```\npublic BaseObj deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    JsonObject obj = json.getAsJsonObject();\n    if (checkIsTypeA(obj)) {\n         return context.deserialize(json, A.class);\n    } else {\n         return context.deserialize(json, B.class);\n    }\n}\n```\n\ncouldn't find much documentation about this.\n =||= Oh I see thank you!\n =||= ", 0], ["870", "Consolidate location and path rendering for exceptions.", "Jake Wharton", "JakeWharton", "06/09/16, 10:26:10 PM", "NaN", "NaN", ["870", "Consolidate location and path rendering for exceptions.", "Jake Wharton", "JakeWharton", "06/09/16, 10:26:10 PM", "NaN", "NaN"], ["Jake Wharton", "Consolidate location and path rendering for exceptions.", "06/09/16, 10:02:36 PM", "Jake Wharton", "ecaa57114f3cc51e091d6699c0d82cd2c84a3a7f", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -347,8 +347,7 @@ public void beginArray() throws IOException {\n       pathIndices[stackSize - 1] = 0;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n@@ -366,8 +365,7 @@ public void endArray() throws IOException {\n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek() + locationString());\n     }\n   }\n \n@@ -384,8 +382,7 @@ public void beginObject() throws IOException {\n       push(JsonScope.EMPTY_OBJECT);\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n@@ -404,8 +401,7 @@ public void endObject() throws IOException {\n       pathIndices[stackSize - 1]++;\n       peeked = PEEKED_NONE;\n     } else {\n-      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek() + locationString());\n     }\n   }\n \n@@ -790,8 +786,7 @@ public String nextName() throws IOException {\n     } else if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n       result = nextQuotedValue('\"');\n     } else {\n-      throw new IllegalStateException(\"Expected a name but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a name but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathNames[stackSize - 1] = result;\n@@ -827,8 +822,7 @@ public String nextString() throws IOException {\n       result = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n     } else {\n-      throw new IllegalStateException(\"Expected a string but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a string but was \" + peek() + locationString());\n     }\n     peeked = PEEKED_NONE;\n     pathIndices[stackSize - 1]++;\n@@ -856,8 +850,7 @@ public boolean nextBoolean() throws IOException {\n       pathIndices[stackSize - 1]++;\n       return false;\n     }\n-    throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new IllegalStateException(\"Expected a boolean but was \" + peek() + locationString());\n   }\n \n   /**\n@@ -876,8 +869,7 @@ public void nextNull() throws IOException {\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n     } else {\n-      throw new IllegalStateException(\"Expected null but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected null but was \" + peek() + locationString());\n     }\n   }\n \n@@ -910,15 +902,14 @@ public double nextDouble() throws IOException {\n     } else if (p == PEEKED_UNQUOTED) {\n       peekedString = nextUnquotedValue();\n     } else if (p != PEEKED_BUFFERED) {\n-      throw new IllegalStateException(\"Expected a double but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a double but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double result = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     if (!lenient && (Double.isNaN(result) || Double.isInfinite(result))) {\n-      throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new MalformedJsonException(\n+          \"JSON forbids NaN and infinities: \" + result + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -966,16 +957,14 @@ public long nextLong() throws IOException {\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected a long but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected a long but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     long result = (long) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'long'.\n-      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected a long but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -1172,8 +1161,7 @@ public int nextInt() throws IOException {\n     if (p == PEEKED_LONG) {\n       result = (int) peekedLong;\n       if (peekedLong != result) { // Make sure no precision was lost casting to 'int'.\n-        throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n-            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+        throw new NumberFormatException(\"Expected an int but was \" + peekedLong + locationString());\n       }\n       peeked = PEEKED_NONE;\n       pathIndices[stackSize - 1]++;\n@@ -1198,16 +1186,14 @@ public int nextInt() throws IOException {\n         // Fall back to parse as a double below.\n       }\n     } else {\n-      throw new IllegalStateException(\"Expected an int but was \" + peek()\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new IllegalStateException(\"Expected an int but was \" + peek() + locationString());\n     }\n \n     peeked = PEEKED_BUFFERED;\n     double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n     result = (int) asDouble;\n     if (result != asDouble) { // Make sure no precision was lost casting to 'int'.\n-      throw new NumberFormatException(\"Expected an int but was \" + peekedString\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+      throw new NumberFormatException(\"Expected an int but was \" + peekedString + locationString());\n     }\n     peekedString = null;\n     peeked = PEEKED_NONE;\n@@ -1315,14 +1301,6 @@ private boolean fillBuffer(int minimum) throws IOException {\n     return false;\n   }\n \n-  int getLineNumber() {\n-    return lineNumber + 1;\n-  }\n-\n-  int getColumnNumber() {\n-    return pos - lineStart + 1;\n-  }\n-\n   /**\n    * Returns the next character in the stream that is neither whitespace nor a\n    * part of a comment. When this returns, the returned character is always at\n@@ -1412,8 +1390,7 @@ private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n       }\n     }\n     if (throwOnEof) {\n-      throw new EOFException(\"End of input\"\n-          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n+      throw new EOFException(\"End of input\" + locationString());\n     } else {\n       return -1;\n     }\n@@ -1465,8 +1442,13 @@ private boolean skipTo(String toFind) throws IOException {\n   }\n \n   @Override public String toString() {\n-    return getClass().getSimpleName()\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();\n+    return getClass().getSimpleName() + locationString();\n+  }\n+\n+  private String locationString() {\n+    int line = lineNumber + 1;\n+    int column = pos - lineStart + 1;\n+    return \" at line \" + line + \" column \" + column + \" path \" + getPath();\n   }\n \n   /**\n@@ -1571,8 +1553,7 @@ private char readEscapeCharacter() throws IOException {\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new MalformedJsonException(message\n-        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n+    throw new MalformedJsonException(message + locationString());\n   }\n \n   /**\n@@ -1615,9 +1596,8 @@ private void consumeNonExecutePrefix() throws IOException {\n         } else if (p == PEEKED_UNQUOTED_NAME) {\n           reader.peeked = PEEKED_UNQUOTED;\n         } else {\n-          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n-              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n-              + \" path \" + reader.getPath());\n+          throw new IllegalStateException(\n+              \"Expected a name but was \" + reader.peek() + reader.locationString());\n         }\n       }\n     };, ", 27, 47, "\"modified, \"", 74], 1], ["871", "Implement JSON Path for JsonTreeReader.", "Jake Wharton", "JakeWharton", "06/10/16, 06:32:24 AM", "Since @swankjesse did the JSON Path for `JsonReader`, please review this for correctness (although it passes your tests!).", "NaN", ["871", "Implement JSON Path for JsonTreeReader.", "Jake Wharton", "JakeWharton", "06/10/16, 06:32:24 AM", "Since @swankjesse did the JSON Path for `JsonReader`, please review this for correctness (although it passes your tests!).", "NaN"], ["Jake Wharton", "Implement JSON Path for JsonTreeReader.", "06/10/16, 04:08:33 AM", "Jake Wharton", "c2fae85a9f71d478d1153112e09dbc45ef31259a", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java", "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java", "pom.xml"], "@@ -25,9 +25,7 @@\n import com.google.gson.stream.JsonToken;\n import java.io.IOException;\n import java.io.Reader;\n-import java.util.ArrayList;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Map;\n \n /**\n@@ -47,35 +45,57 @@\n   };\n   private static final Object SENTINEL_CLOSED = new Object();\n \n-  private final List<Object> stack = new ArrayList<Object>();\n+  /*\n+   * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\n+   */\n+  private Object[] stack = new Object[32];\n+  private int stackSize = 0;\n+\n+  /*\n+   * The path members. It corresponds directly to stack: At indices where the\n+   * stack contains an object (EMPTY_OBJECT, DANGLING_NAME or NONEMPTY_OBJECT),\n+   * pathNames contains the name at this scope. Where it contains an array\n+   * (EMPTY_ARRAY, NONEMPTY_ARRAY) pathIndices contains the current index in\n+   * that array. Otherwise the value is undefined, and we take advantage of that\n+   * by incrementing pathIndices when doing so isn't useful.\n+   */\n+  private String[] pathNames = new String[32];\n+  private int[] pathIndices = new int[32];\n \n   public JsonTreeReader(JsonElement element) {\n     super(UNREADABLE_READER);\n-    stack.add(element);\n+    push(element);\n   }\n \n   @Override public void beginArray() throws IOException {\n     expect(JsonToken.BEGIN_ARRAY);\n     JsonArray array = (JsonArray) peekStack();\n-    stack.add(array.iterator());\n+    push(array.iterator());\n+    pathIndices[stackSize - 1] = 0;\n   }\n \n   @Override public void endArray() throws IOException {\n     expect(JsonToken.END_ARRAY);\n     popStack(); // empty iterator\n     popStack(); // array\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public void beginObject() throws IOException {\n     expect(JsonToken.BEGIN_OBJECT);\n     JsonObject object = (JsonObject) peekStack();\n-    stack.add(object.entrySet().iterator());\n+    push(object.entrySet().iterator());\n   }\n \n   @Override public void endObject() throws IOException {\n     expect(JsonToken.END_OBJECT);\n     popStack(); // empty iterator\n     popStack(); // object\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public boolean hasNext() throws IOException {\n@@ -84,19 +104,19 @@ public JsonTreeReader(JsonElement element) {\n   }\n \n   @Override public JsonToken peek() throws IOException {\n-    if (stack.isEmpty()) {\n+    if (stackSize == 0) {\n       return JsonToken.END_DOCUMENT;\n     }\n \n     Object o = peekStack();\n     if (o instanceof Iterator) {\n-      boolean isObject = stack.get(stack.size() - 2) instanceof JsonObject;\n+      boolean isObject = stack[stackSize - 2] instanceof JsonObject;\n       Iterator<?> iterator = (Iterator<?>) o;\n       if (iterator.hasNext()) {\n         if (isObject) {\n           return JsonToken.NAME;\n         } else {\n-          stack.add(iterator.next());\n+          push(iterator.next());\n           return peek();\n         }\n       } else {\n@@ -127,89 +147,121 @@ public JsonTreeReader(JsonElement element) {\n   }\n \n   private Object peekStack() {\n-    return stack.get(stack.size() - 1);\n+    return stack[stackSize - 1];\n   }\n \n   private Object popStack() {\n-    return stack.remove(stack.size() - 1);\n+    Object result = stack[--stackSize];\n+    stack[stackSize] = null;\n+    return result;\n   }\n \n   private void expect(JsonToken expected) throws IOException {\n     if (peek() != expected) {\n-      throw new IllegalStateException(\"Expected \" + expected + \" but was \" + peek());\n+      throw new IllegalStateException(\n+          \"Expected \" + expected + \" but was \" + peek() + locationString());\n     }\n   }\n \n   @Override public String nextName() throws IOException {\n     expect(JsonToken.NAME);\n     Iterator<?> i = (Iterator<?>) peekStack();\n     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n-    stack.add(entry.getValue());\n-    return (String) entry.getKey();\n+    String result = (String) entry.getKey();\n+    pathNames[stackSize - 1] = result;\n+    push(entry.getValue());\n+    return result;\n   }\n \n   @Override public String nextString() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.STRING + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n+    }\n+    String result = ((JsonPrimitive) popStack()).getAsString();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n     }\n-    return ((JsonPrimitive) popStack()).getAsString();\n+    return result;\n   }\n \n   @Override public boolean nextBoolean() throws IOException {\n     expect(JsonToken.BOOLEAN);\n-    return ((JsonPrimitive) popStack()).getAsBoolean();\n+    boolean result = ((JsonPrimitive) popStack()).getAsBoolean();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n+    return result;\n   }\n \n   @Override public void nextNull() throws IOException {\n     expect(JsonToken.NULL);\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n   }\n \n   @Override public double nextDouble() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     double result = ((JsonPrimitive) peekStack()).getAsDouble();\n     if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n       throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result);\n     }\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public long nextLong() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     long result = ((JsonPrimitive) peekStack()).getAsLong();\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public int nextInt() throws IOException {\n     JsonToken token = peek();\n     if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n-      throw new IllegalStateException(\"Expected \" + JsonToken.NUMBER + \" but was \" + token);\n+      throw new IllegalStateException(\n+          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n     }\n     int result = ((JsonPrimitive) peekStack()).getAsInt();\n     popStack();\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n+    }\n     return result;\n   }\n \n   @Override public void close() throws IOException {\n-    stack.clear();\n-    stack.add(SENTINEL_CLOSED);\n+    stack = new Object[] { SENTINEL_CLOSED };\n+    stackSize = 1;\n   }\n \n   @Override public void skipValue() throws IOException {\n     if (peek() == JsonToken.NAME) {\n       nextName();\n+      pathNames[stackSize - 2] = \"null\";\n     } else {\n       popStack();\n+      pathNames[stackSize - 1] = \"null\";\n     }\n+    pathIndices[stackSize - 1]++;\n   }\n \n   @Override public String toString() {\n@@ -220,7 +272,45 @@ public void promoteNameToValue() throws IOException {\n     expect(JsonToken.NAME);\n     Iterator<?> i = (Iterator<?>) peekStack();\n     Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();\n-    stack.add(entry.getValue());\n-    stack.add(new JsonPrimitive((String)entry.getKey()));\n+    push(entry.getValue());\n+    push(new JsonPrimitive((String) entry.getKey()));\n+  }\n+\n+  private void push(Object newTop) {\n+    if (stackSize == stack.length) {\n+      Object[] newStack = new Object[stackSize * 2];\n+      int[] newPathIndices = new int[stackSize * 2];\n+      String[] newPathNames = new String[stackSize * 2];\n+      System.arraycopy(stack, 0, newStack, 0, stackSize);\n+      System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);\n+      System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);\n+      stack = newStack;\n+      pathIndices = newPathIndices;\n+      pathNames = newPathNames;\n+    }\n+    stack[stackSize++] = newTop;\n+  }\n+\n+  @Override public String getPath() {\n+    StringBuilder result = new StringBuilder().append('$');\n+    for (int i = 0; i < stackSize; i++) {\n+      if (stack[i] instanceof JsonArray) {\n+        if (stack[++i] instanceof Iterator) {\n+          result.append('[').append(pathIndices[i]).append(']');\n+        }\n+      } else if (stack[i] instanceof JsonObject) {\n+        if (stack[++i] instanceof Iterator) {\n+          result.append('.');\n+          if (pathNames[i] != null) {\n+            result.append(pathNames[i]);\n+          }\n+        }\n+      }\n+    }\n+    return result.toString();\n+  }\n+\n+  private String locationString() {\n+    return \" at path \" + getPath();\n   }\n }, @@ -16,15 +16,35 @@\n \n package com.google.gson.stream;\n \n+import com.google.gson.JsonElement;\n+import com.google.gson.internal.Streams;\n+import com.google.gson.internal.bind.JsonTreeReader;\n import java.io.IOException;\n import java.io.StringReader;\n-import junit.framework.TestCase;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n-@SuppressWarnings(\"resource\")\n-public class JsonReaderPathTest extends TestCase {\n-  public void testPath() throws IOException {\n-    JsonReader reader = new JsonReader(\n-        new StringReader(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\"));\n+import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(Parameterized.class)\n+public class JsonReaderPathTest {\n+  @Parameterized.Parameters(name = \"{0}\")\n+  public static List<Object[]> parameters() {\n+    return Arrays.asList(\n+        new Object[] { Factory.STRING_READER },\n+        new Object[] { Factory.OBJECT_READER }\n+    );\n+  }\n+\n+  @Parameterized.Parameter\n+  public Factory factory;\n+\n+  @Test public void path() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":[2,true,false,null,\\\"b\\\",{\\\"c\\\":\\\"d\\\"},[3]]}\");\n     assertEquals(\"$\", reader.getPath());\n     reader.beginObject();\n     assertEquals(\"$.\", reader.getPath());\n@@ -62,8 +82,8 @@ public void testPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testObjectPath() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n+  @Test public void objectPath() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\n     assertEquals(\"$\", reader.getPath());\n \n     reader.peek();\n@@ -102,8 +122,8 @@ public void testObjectPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testArrayPath() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1,2]\"));\n+  @Test public void arrayPath() throws IOException {\n+    JsonReader reader = factory.create(\"[1,2]\");\n     assertEquals(\"$\", reader.getPath());\n \n     reader.peek();\n@@ -132,8 +152,10 @@ public void testArrayPath() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testMultipleTopLevelValuesInOneDocument() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[][]\"));\n+  @Test public void multipleTopLevelValuesInOneDocument() throws IOException {\n+    assumeTrue(factory == Factory.STRING_READER);\n+\n+    JsonReader reader = factory.create(\"[][]\");\n     reader.setLenient(true);\n     reader.beginArray();\n     reader.endArray();\n@@ -143,40 +165,41 @@ public void testMultipleTopLevelValuesInOneDocument() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testSkipArrayElements() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[1,2,3]\"));\n+  @Test public void skipArrayElements() throws IOException {\n+    JsonReader reader = factory.create(\"[1,2,3]\");\n     reader.beginArray();\n     reader.skipValue();\n     reader.skipValue();\n     assertEquals(\"$[2]\", reader.getPath());\n   }\n \n-  public void testSkipObjectNames() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1}\"));\n+  @Test public void skipObjectNames() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1}\");\n     reader.beginObject();\n     reader.skipValue();\n     assertEquals(\"$.null\", reader.getPath());\n   }\n \n-  public void testSkipObjectValues() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"{\\\"a\\\":1,\\\"b\\\":2}\"));\n+  @Test public void skipObjectValues() throws IOException {\n+    JsonReader reader = factory.create(\"{\\\"a\\\":1,\\\"b\\\":2}\");\n     reader.beginObject();\n+    assertEquals(\"$.\", reader.getPath());\n     reader.nextName();\n     reader.skipValue();\n     assertEquals(\"$.null\", reader.getPath());\n     reader.nextName();\n     assertEquals(\"$.b\", reader.getPath());\n   }\n \n-  public void testSkipNestedStructures() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[[1,2,3],4]\"));\n+  @Test public void skipNestedStructures() throws IOException {\n+    JsonReader reader = factory.create(\"[[1,2,3],4]\");\n     reader.beginArray();\n     reader.skipValue();\n     assertEquals(\"$[1]\", reader.getPath());\n   }\n \n-  public void testArrayOfObjects() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[{},{},{}]\"));\n+  @Test public void arrayOfObjects() throws IOException {\n+    JsonReader reader = factory.create(\"[{},{},{}]\");\n     reader.beginArray();\n     assertEquals(\"$[0]\", reader.getPath());\n     reader.beginObject();\n@@ -195,8 +218,8 @@ public void testArrayOfObjects() throws IOException {\n     assertEquals(\"$\", reader.getPath());\n   }\n \n-  public void testArrayOfArrays() throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(\"[[],[],[]]\"));\n+  @Test public void arrayOfArrays() throws IOException {\n+    JsonReader reader = factory.create(\"[[],[],[]]\");\n     reader.beginArray();\n     assertEquals(\"$[0]\", reader.getPath());\n     reader.beginArray();\n@@ -214,4 +237,20 @@ public void testArrayOfArrays() throws IOException {\n     reader.endArray();\n     assertEquals(\"$\", reader.getPath());\n   }\n+\n+  enum Factory {\n+    STRING_READER {\n+      @Override public JsonReader create(String data) {\n+        return new JsonReader(new StringReader(data));\n+      }\n+    },\n+    OBJECT_READER {\n+      @Override public JsonReader create(String data) {\n+        JsonElement element = Streams.parse(new JsonReader(new StringReader(data)));\n+        return new JsonTreeReader(element);\n+      }\n+    };\n+\n+    abstract JsonReader create(String data);\n+  }\n }, @@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>3.8.2</version>\n+        <version>4.12</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>, ", 178, 49, "\"modified, modified, modified, \"", 227], 1], ["872", "Expose JsonObject size.", "Jake Wharton", "JakeWharton", "06/10/16, 06:06:51 AM", "I ran into this being absent when attempting to pre-size a collection based on the contents of a `JsonObject`.", "NaN", ["872", "Expose JsonObject size.", "Jake Wharton", "JakeWharton", "06/10/16, 06:06:51 AM", "I ran into this being absent when attempting to pre-size a collection based on the contents of a `JsonObject`.", "NaN"], ["Jake Wharton", "Expose JsonObject size.", "06/10/16, 04:46:32 AM", "Jake Wharton", "c16be41e77bb53a4b639cb864c9a6e4d0f8df7c2", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/test/java/com/google/gson/JsonObjectTest.java"], "@@ -132,6 +132,15 @@ private JsonElement createJsonElement(Object value) {\n     return members.entrySet();\n   }\n \n+  /**\n+   * Returns the number of key/value pairs in the object.\n+   *\n+   * @return the number of key/value pairs in the object.\n+   */\n+  public int size() {\n+    return members.size();\n+  }\n+\n   /**\n    * Convenience method to check if a member with the specified name is present in this object.\n    *, @@ -158,6 +158,20 @@ public void testEqualsNonEmptyObject() {\n     assertFalse(b.equals(a));\n   }\n \n+  public void testSize() {\n+    JsonObject o = new JsonObject();\n+    assertEquals(0, o.size());\n+\n+    o.add(\"Hello\", new JsonPrimitive(1));\n+    assertEquals(1, o.size());\n+\n+    o.add(\"Hi\", new JsonPrimitive(1));\n+    assertEquals(2, o.size());\n+\n+    o.remove(\"Hello\");\n+    assertEquals(1, o.size());\n+  }\n+\n   public void testDeepCopy() {\n     JsonObject original = new JsonObject();\n     JsonArray firstEntry = new JsonArray();, ", 23, 0, "\"modified, modified, \"", 23], 1], ["873", "Add support for JsonSerializer/JsonDeserializer in the JsonAdapter annotation", "Inderjeet Singh", "inder123", "06/14/16, 11:37:14 PM", "NaN", "We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n<!-- need_author_consent -->\n =||= This pull request is a carry forward from https://github.com/google/gson/pull/821\n =||= confirmed\n =||= confirmed\n\nOn Fri, Jun 10, 2016 at 5:44 PM, googlebot notifications@github.com wrote:\n\n> We found a Contributor License Agreement for you (the sender of this pull\n> request) and all commit authors, but as best as we can tell these commits\n> were authored by someone else. If that's the case, please add them to this\n> pull request and have them confirm that they're okay with these commits\n> being contributed to Google. If we're mistaken and you did author these\n> commits, just reply here to confirm.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/pull/873#issuecomment-225326396, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ABCwyhUFLHY4Vt5A7TaOluE0ykmybrnSks5qKgUBgaJpZM4Izbo3\n> .\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= @googlebot these commits are mine; I approve.\n =||= LGTM\n =||= merging per LGTM.\nGreat feedback overall, guys! Tiresome but rigorous process. \ud83d\udc4d \n =||= ", ["873", "Add support for JsonSerializer/JsonDeserializer in the JsonAdapter annotation", "Inderjeet Singh", "inder123", "06/14/16, 11:37:14 PM", "NaN", "NaN"], ["Inderjeet Singh", "addressed code review comments.", "06/14/16, 11:34:34 PM", "Inderjeet Singh", "1f859ec769ed3a220bf8adf2423ba29b44db94e2", ["gson/src/main/java/com/google/gson/Gson.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java"], "@@ -134,7 +134,7 @@\n   private final boolean generateNonExecutableJson;\n   private final boolean prettyPrinting;\n   private final boolean lenient;\n-  private JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\n+  private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\n \n   /**\n    * Constructs a Gson object with default configuration. The default configuration has the\n@@ -488,14 +488,13 @@ static void checkValidFloatingPoint(double value) {\n    * @since 2.2\n    */\n   public <T> TypeAdapter<T> getDelegateAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\n-    boolean skipPastFound = false;\n-\n     // Hack. If the skipPast factory isn't registered, assume the factory is being requested via\n     // our @JsonAdapter annotation.\n     if (!factories.contains(skipPast)) {\n       skipPast = jsonAdapterFactory;\n     }\n \n+    boolean skipPastFound = false;\n     for (TypeAdapterFactory factory : factories) {\n       if (!skipPastFound) {\n         if (factory == skipPast) {, @@ -274,20 +274,20 @@ private GadgetWithPrimitivePart(long part) {\n   }\n \n   public void testFieldAnnotationWorksForParameterizedType() {\n-      Gson gson = new Gson();\n-      String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\n-      assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n-      Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\n-      assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.get(0).name);\n-    }\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new Gizmo2(Arrays.asList(new Part(\"Part\"))));\n+    assertEquals(\"{\\\"part\\\":\\\"GizmoPartTypeAdapterFactory\\\"}\", json);\n+    Gizmo2 computer = gson.fromJson(\"{'part':'Part'}\", Gizmo2.class);\n+    assertEquals(\"GizmoPartTypeAdapterFactory\", computer.part.get(0).name);\n+  }\n \n   private static final class Gizmo2 {\n-      @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)\n-      List<Part> part;\n-      Gizmo2(List<Part> part) {\n-        this.part = part;\n-      }\n+    @JsonAdapter(Gizmo2PartTypeAdapterFactory.class)\n+    List<Part> part;\n+    Gizmo2(List<Part> part) {\n+      this.part = part;\n     }\n+  }\n \n   private static class Gizmo2PartTypeAdapterFactory implements TypeAdapterFactory {\n     @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {, ", 13, 14, "\"modified, modified, \"", 27], 1], ["874", "Brief Question About Google Gson Internal Interface", "Aline Brito", "alinebrito", "06/13/16, 12:00:34 AM", "Dear\u00a0Google Gson\u00a0developers,\n\nI am a master student at UFMG, Brazil. Currently, I am researching the use of internal interfaces by client projects. I mean, public interfaces for use only by internal modules (e.g.,\u00a0com.google.gson.internal.Streams).\n\nIn my research, I found\u00a054\u00a0internal interfaces in\u00a0Google Gson\u00a0(see the list at:\u00a0[Internal Interfaces Google Gson](https://www.dropbox.com/s/3yap9k2nnsysjm6/)). By mining data provided by the [Boa Language and Infrastructure](http://boa.cs.iastate.edu/), I also found\u00a0147\u00a0client projects that are using these internal interfaces. Therefore, these internal interfaces are usual in other projects.\n1. Did you know that internal interfaces are used by clients?\n2. From the presented interfaces, there is some interface that is a candidate to be promoted to the public one?", "Interesting info about the use of internal APIs, Aline.\nI didn't quite know this, but am not very surprised.\n\nNone of these are candidates for promotion to public APIs.\n =||= Hi @inder123 \n\nThanks for the answer! It is very useful for my research.\n =||= ", 0], ["875", "Preparing 2.7-SNAPSHOT to cut the 2.7 release.", "Inderjeet Singh", "inder123", "06/14/16, 11:46:57 PM", "NaN", "I intend to cut 2.7 today, after merging this.\n =||= lgtm :+1:\n =||= ", ["875", "Preparing 2.7-SNAPSHOT to cut the 2.7 release.", "Inderjeet Singh", "inder123", "06/14/16, 11:46:57 PM", "NaN", "NaN"], ["Inderjeet Singh", "Preparing 2.7-SNAPSHOT to cut the 2.7 release.", "06/14/16, 11:39:19 PM", "Inderjeet Singh", "687ddb319e452d93cac1f83a2e850140b5dc49e7", ["gson/pom.xml", "pom.xml"], "@@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.6.3-SNAPSHOT</version>\n+    <version>2.7-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.6.3-SNAPSHOT</version>\n+  <version>2.7-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>, ", 2, 2, "\"modified, modified, \"", 4], 1], ["876", "JsonArray.contains checking for a String which has a single digit numeric.", "Arun Ramakrishnan", "RamakrishnanArun", "06/15/16, 01:41:03 AM", "I've got a Json array something like this as an example\n\n``` json\n[\"a\", \"2\", \"3\"]\n```\n\nand I'm trying to check for the existence of the values in the array using code like so:\n\n``` java\n    public static void main(String[] args)\n    {\n        String json = \"[\\\"a\\\", \\\"2\\\", \\\"3\\\"]\";\n        JsonElement element = new JsonParser().parse(json);\n        Assert.assertTrue(element.isJsonArray());\n        JsonArray array = element.getAsJsonArray();\n\n        JsonElement idA = new JsonParser().parse(\"a\");\n        Assert.assertTrue(array.contains(idA.getAsJsonPrimitive())); // Passes\n\n        JsonElement id2 = new JsonParser().parse(\"2\");\n        Assert.assertTrue(array.contains(id2.getAsJsonPrimitive())); // Fails\n    }\n```\n\nThe first contains assertion passes checking for the string \"a\" however the second fails when I check for the string \"2\". It is still a string even though it has a numeric. Shouldn't the second assertion also pass?", "God I feel daft. My mistake, not enough sleep.\n\n``` java\nJsonElement id2 = new JsonParser().parse(\"2\");\n```\n\nshould have been\n\n``` java\nJsonElement id2 = new JsonParser().parse(\"\\\"2\\\"\");\n```\n =||= ", 0], ["877", "GSON flagging Json Object as String", null, "xelarmutz", "06/23/16, 04:21:28 PM", "This is my Json {\"success\"=1} but I am getting this error : com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $.\n\nI don't get it.", "Please provide an executable test case that shows the problem. You omitted your model object so it's impossible to know what you're doing.\n =||= Note that = is not valid JSON, you should use \":\"\n\nThis question is not appropriate as a GitHub issue. Post on StackOverflow or on Gson Google Group.\n =||= My bad. Thanks though, Got it to work. Cheers.\n =||= ", 0], ["878", "gson-joda-time and gson-jsr310", "Christophe Bornet", "cbornet", "06/27/16, 06:56:22 AM", "Jackson has jackson-datatype-jsr310 and jackson-datatype-joda artifacts to provide support of truely usable date types.\nI am willing to do the same kind of modules for gson with type adapters. I think this has more value to make it as maven sub-modules to this project (like gson-extras) but I can also do it as a personal project.\nWhat do you prefer ?", "It's your choice. \nYou can also issue a pull request to https://github.com/google-gson/typeadapters\n(note that some JodaTime type adapters are already present there).\n =||= @inder123 is that an official gson repo ? It doesn't seem very lively nor popular...\n =||= @inder123 It seems maintained by you. Don't you think it would have more visibility if it were hosted in the main repo ? Or if there was some documentation pointing to it ?\nAnyway, I will PR on it. Thx for notifying.\n =||= Agreed, it makes sense to move it to Gson extras.\n\nFeel free to issue a PR to move it there.\n =||= OK. I'll move it here.\nSince joda pulls an external library and jsr310 requires java8, they should have their own pom.xml.\nSo I propose to make 3 modules in extras directory: gson-extras, gson-extras-joda-time, gson-extras-jsr-310. OK with that ?\n =||= ", 0], ["879", "Added flush() to toJson() method when using Appendable writer", "G\u00e1bor Antal", "gaborantal", "07/05/17, 10:28:33 AM", "If you use Appendable writer (e.g.: FileWriter), it can happen that the Appendable object never gets flushed. Example:\n\n```\nList<MyClassType> current = /* */;\nGson gson = /* */;\ngson.toJson(current, new FileWriter(\"MYFILE.JSON\"));\n```\n\nIf you do something like this, it can happen, that the created file is empty. It is not the best solution, as the opened file never gets closed, and so, but  if you create some really simple app to the work for you, maybe a fast solution.  After adding an extra flush() call, after write finished, all the contents will must be in the file.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Since `JsonWriter` doesn't buffer I'm tempted to say that Gson has no obligation here. Any reason you're not using something like this?\n\n``` java\ntry (Writer writer = new FileWriter(\"MYFILE.JSON\")) {\n  gson.toJson(current, writer);\n}\n```\n =||= True point, i can live with it. =||= ", 0], ["880", "Make JsonPrimitive setValue public", "Valerie", "valerieTurlington", "06/28/16, 05:16:27 PM", "Why is this method class protected?\n\nI've been working with unpredictable json, so I can't put it into specific Java objects. I'm working with basic JsonElement objects and such. Everything was working fine up to the point where I tried to modify the primitive, so I could then deserialize it again later...but I can't directly modify primitive values. Simply having access to this method would let my program work perfectly, or even extending JsonPrimitive to make it public myself, but the class is final so I can't even do that.", "`JsonPrimitive` is immutable. If you need to change the value, create a new instance with the new value and replace it in the parent object.\n =||= @JakeWharton @swankjesse Well, JsonObject and JsonArray are not immutable, so we should consider this request.\n =||= Those are collection types equivalent to `Map` and `List` though. `JsonPrimitive` is like `String` or `Long`.\n =||= Gotcha. It's a bit of a pain to keep track of the parent each primitive is\npart of rather than the way I had a reference to each primitive stored, but\nI can see the reasoning behind it if Primitive is meant to be like String.\n\nOn Wed, Jun 29, 2016 at 9:04 AM Jake Wharton notifications@github.com\nwrote:\n\n> Those are collection types equivalent to Map and List though.\n> JsonPrimitive is like String or Long.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/880#issuecomment-229404326, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/ADIuJBQrVcNEtEfp3thC5cir9S4etULuks5qQpeXgaJpZM4I_oZi\n> .\n =||= ", 0], ["881", "made nullSafe wrapper of JsonAdapter optional", "Lucas", "testcenter", "07/03/16, 08:53:19 AM", "see pull request #851 ", "NaN", ["881", "made nullSafe wrapper of JsonAdapter optional", "Lucas", "testcenter", "07/03/16, 08:53:19 AM", "see pull request #851 ", "NaN"], ["testcenter", "made nullSafe wrapper of JsonAdapter optional", "06/28/16, 07:18:03 AM", "testcenter", "193349f4aa7eecf43cc6ebf104e218e704db21d9", ["gson/src/main/java/com/google/gson/annotations/JsonAdapter.java", "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java"], "@@ -94,4 +94,7 @@\n   /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}. */\n   Class<?> value();\n \n+  /** false, to be able to handle {@code null} values within the adapter, default value is true. */\n+  boolean nullSafe() default true;\n+\n }, @@ -73,7 +73,7 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n               + \"JsonSerializer or JsonDeserializer reference.\");\n     }\n \n-    if (typeAdapter != null) {\n+    if (typeAdapter != null && annotation.nullSafe()) {\n       typeAdapter = typeAdapter.nullSafe();\n     }\n , ", 4, 1, "\"modified, modified, \"", 5], 1], ["883", "Add JsonElement.getAsDate", "Izz Abudaka", "izzabudaka", "07/03/16, 08:41:17 AM", "See #714\n\nAdded convenience method `public Date getAsDate(String pattern)` to get JsonPrimitive Date Strings as java.util.Date and corresponding JsonArray implementation.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= This is a strange thing to specialize, and the asymmetry of the\nimplementation makes me even less excited about the prospect of its\naddition.\n\nOn Sat, Jul 2, 2016, 12:27 PM googlebot notifications@github.com wrote:\n\n> CLAs look good, thanks!\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/pull/883#issuecomment-230110092, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/AAEEEYW8bOVxHa_Cq2EqqfBYB5ETVqSCks5qRpF7gaJpZM4JDtLw\n> .\n =||= Please indicate why this must be done inside Gson.\n =||= Using Gson in multiple projects, I have found myself implementing similar Date parsing/validation functionality. I believe this change would offer greater convenience to the users. Any comments on how to make it more symmetric are welcomed :)\n =||= ", 0], ["886", "Implement NullObject pattern for JsonObject, JsonArray, JsonPrimitive", "Samuel Urbanowicz", "samiuelson", "07/11/16, 02:24:14 PM", "There is `JsonNull` class extending JsonElement. But I'd find it very useful if the null object pattern was applied to JsonObject, JsonArray, JsonPrimitive classes as well. \n1. It'd introduce classes: `JsonObject.Empty` extending `JsonObject`, `JsonArray.Empty` extending `JsonObject` and `JsonPrimitive.Empty` extending `JsonPrimitive`. \n2. Create `isEmpty()` methods for JsonObject, JsonArray, JsonPrimitive\n\nWhat do you think?", "Aside from the fact that this would be a major behavior change that\ncouldn't happen until a hypothetical Gson v3, these types are meant to\nmodel the JSON data that's was parsed. Thischange  would make it impossible\nto distinguish from an absent value and one that was present but empty (in\nthe case of array/object).\n\nOn Mon, Jul 11, 2016 at 6:12 AM Samuel Urbanowicz notifications@github.com\nwrote:\n\n> There is JsonNull class extending JsonElement. But I'd find it very\n> useful if the null object pattern was applied to JsonObject, JsonArray,\n> JsonPrimitive classes as well.\n> 1. It'd introduce classes: JsonObject.Empty extending JsonObject,\n> JsonArray.Empty extending JsonObject and JsonPrimitive.Empty extending\n> JsonPrimitive.\n> 2. Create isEmpty() methods for JsonObject, JsonArray, JsonPrimitive\n> \n> What do you think?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/886, or mute the thread\n> https://github.com/notifications/unsubscribe/AAEEETevKQ2qpD9Af6TfpG-kd9omZt9tks5qUhcBgaJpZM4JJN9B\n> .\n =||= Ok, I see.\n =||= ", 0], ["887", "Exception on Android M", "Mudavath Srinivas", "srinivas3120", "08/27/16, 07:09:40 PM", "java.lang.SecurityException: Can't make field constructor accessible\n                                                                       at java.lang.reflect.Constructor.setAccessible(Constructor.java:334)\n                                                                       at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:97)\n                                                                       at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:79)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:71)\n                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)\n                                                                       at com.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter(MapTypeAdapterFactory.java:140)\n                                                                       at com.google.gson.internal.bind.MapTypeAdapterFactory.create(MapTypeAdapterFactory.java:125)\n                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)\n                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)\n                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)\n                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)\n                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)\n                                                                       at com.google.gson.Gson.toJson(Gson.java:585)\n                                                                       at com.google.gson.Gson.toJson(Gson.java:572)\n                                                                       at com.google.gson.Gson.toJson(Gson.java:527)\n                                                                       at com.google.gson.Gson.toJson(Gson.java:507)", "Maybe #648 will be useful.\n =||= Your model contains a `java.lang.reflect.Field` which is not a serializable type. Mark it as `transient` or exclude it from serialization using other means.\n =||= ", 0], ["890", "Use json element tree directly in type adapters", "Todd", "todoooo", "11/11/16, 03:39:05 AM", "The Tree type adapter and Runtime type adapter use a json element to perform serialization/deserialization. Parsing a json reader into a tree structure and then back into a reader for consumption by other adapters is inefficient. e.g the RuntimeTypeAdapter uses the tree structure to find the class \"type\" and then finds another registered (possibly the Tree type) adapter to serialize/deserialize the descendant class. \n\nThese changes allow the tree structure to be consumed directly by a type adapter.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it.\n\nOn Tue, Jul 19, 2016 at 5:25 PM, googlebot notifications@github.com wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project. Before we can look at your\n> pull request, you'll need to sign a Contributor License Agreement (CLA).\n> \n> \ud83d\udcdd _Please visit https://cla.developers.google.com/\n> https://cla.developers.google.com/ to sign._\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> \n> ## verify. Thanks.\n> - If you've already signed a CLA, it's possible we don't have your\n>   GitHub username or you're using a different email address. Check your\n>   existing CLA data https://cla.developers.google.com/clas and verify\n>   that your email is set on your git commits\n>   https://help.github.com/articles/setting-your-email-in-git/.\n> - If you signed the CLA as a corporation, please let us know the\n>   company's name.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/pull/890#issuecomment-233535393, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AObwKUEP0toG30lR0l5y6SsNOTLuVin2ks5qXF_FgaJpZM4JPYlv\n> .\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Not sure I really follow this. JsonTreeReader is pretty efficient because it doesn\u2019t actually decode anything. Currently fromJsonTree() delegates to read(); this flips the order of delegation which could be problematic.\n =||= @swankjesse \nNothing has changed for TypeAdapters that read/write from the reader/writer objects. \n\nI'm considering the situation where an adapter (i.e. RunTimeTypeAdapter) specifically converts the Reader/Writer into json elements and then calls a delegate jsonFromTree/jsonToTree method. When a developer uses custom JsonSerializer/JsonDeserializer classes they are wrapped by TreeTypeAdapters which convert the json reader/writer into json elements for processing. In this case the RunTimeTypeAdapter would convert a reader/writer into json elements and then its call to \"delegate.to/fromJsonTree()\" would convert them back into a reader/writer for a TreeTypeAdapter to convert them back into json elements. Inefficient!\n =||= Have you looked at how JsonTreeReader works?\n =||= Yes. It wraps the json elements which is fine. However, the TreeTypeAdapter then converts that reader/writer back into a new tree of json elements for serializing/deserializing.\n\nIt is unfortunate that some adapters (RunTimeTypeAdapter, TreeTypeAdapter) have to specifically use a tree of json elements, to perform their operations, instead of accessing the stream directly. Generating it twice makes no sense. Not to mention the additional memory consumption.\n =||= One more question \u2013 what happens if the type adapter mutates the JsonObject? I believe the current implementation gets a copy, and your change makes it so that there\u2019s a single instance that\u2019s shared. That could be surprising?\n =||=  I can't think of a reason for not wanting to mutate the shared tree instance, but at least the new implementation gives the developer a choice. Either mutate the existing tree or clone it, as the RunTimeTypeAdapter does during serialization. (Although I'm not sure why, since it doesn't clone the tree during deserialisation.)\n =||= We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.\n\n<!-- need_author_consent -->\n =||= ", 0], ["891", "Help~Please tell me how to change.Thanks", null, "LunYing", "07/20/16, 03:59:18 AM", "```\npublic static <T> PackageModel<T> getData(Class<T> cls) {\n    String json = \"{\\\"code\\\":0,\\\"data\\\":{\\\"account\\\":\\\"test009\\\",\\\"createdBy\\\":\\\"\\\",\\\"email\\\":\\\"123@qq.com\\\",\\\"enabledFlag\\\":1,\\\"id\\\":\\\"8735\\\",\\\"language\\\":\\\"zh\\\",\\\"name\\\":\\\"test123\\\",\\\"phone\\\":\\\"18566219120\\\",\\\"timeZones\\\":\\\"77\\\",\\\"type\\\":\\\"8\\\"},\\\"ok\\\":true}\";\n    Gson gson = new Gson();\n    PackageModel<T> vPackageModel = gson.fromJson(json, new TypeToken<PackageModel<T>>() {\n    }.getType());\n    return vPackageModel;\n}\n```\n\nerro:java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.jimi.app.entitys.UserInfo", "Generics are erased so that `T` becomes `Object` and therefore Gson creates a `Map` instead of whatever `T` was supposed to be. You need to wrap `cls` in the `PackageModel` parameterized type and there's no good API to do that.\n\nCan you ask your question on StackOverflow since it's a usage problem not a bug with the library? Use the 'gson' tag, and also feel free to link it here.\n =||= ", 0], ["892", "Prevent deserializing null values", "Robin Singh", "robinsingh-bw", "07/26/16, 01:47:21 AM", "Hi,\n\nI have a pojo like this:\npublic class User implements Serializable {\n@SerializedName(\"name\")\npublic String name;\n@SerializedName(\"favorites\")\npublic ArrayList favorites = new ArrayList<>;\n}\n\nSometimes the server can respond with json such as: { \"name\": \"my name\", \"favorites\": null }\n\nIn such cases I want to keep the default initialized array instead of setting it to null. I had a similar issue with strings but I solved that by registering a custom type adapter. I dont want to keep registering custom adapters for all different objects though. Is there any way to force retrofit to just ignore 'null' values?\n\nRegards.", "Use @JsonAdapter annotation on favorites.\n\nPlease don't ask questions on issues. Ask them on StackOverflow.\n =||= ", 0], ["893", "Added a GsonBuilder method to register a post deserialization annotat\u2026", "Inderjeet Singh", "inder123", "09/27/16, 12:48:51 AM", "\u2026ion.", "This addresses Issue https://github.com/google/gson/issues/269\n =||= This is similar to what https://github.com/google/gson/pull/844 wanted.\n\nYou can currently write and register a delegating TypeAdapterFactory which checked for annotated methods post-deserialization without needing support in Gson itself. Is that enough?\n =||= @JakeWharton  I don't understand the delegating TypeAdapterFactory solution. Can you illustrate? Thanks.\n =||= This specific solution is good in one specific way: You can just map the javax.annotation.PostConstruct annotation and that will benefit users of frameworks such as JPA.\n =||= Can you suggest a better name for the GsonBuilder method, or even a different signature?\nFor example, should this method apply the annotation to All classes or match them with a regular expression?\nAre there actions beyond post-deserialization where we could look for annotation? For example, pre/post serialization.\n =||= Here\u2019s an example that does it standalone:\nhttps://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a\n =||= One other difference with this PR vs the gist above \u2013 this only applies to field bindings; that applies to any type.\n =||= Nice @swankjesse. That's exactly what I was thinking. \n =||= Thanks @swankjesse for writing this up. I will try it out.\nI think overall something like this needs to be part of Gson. We have talked about it for a very long time but without acting.\n =||= Closing this PR since the specified GIST is a workaround.\n =||= ", 0], ["894", "Gson interprets number as String", "Dmitriy Zharikhin", "dzharikhin", "07/28/16, 04:27:24 PM", "public class User {\n    public String department;\n}\nUser user = new Gson().fromJson(\"{\\\"department\\\": 123}\", User.class); //user.department = \"123\";\n\nand it should throw JsonSyntaxException", "Use a TypeAdapter which is not lenient by default.\n\n```\ngson.getAdapter(User.class).read(...);\n```\n =||= Nope\n =||= This is by design. Many Gson users prefer lenient behavior.\n =||= ", 0], ["896", "Support omitting default values", "Sebastian Schuberth", "sschuberth", "06/27/19, 09:41:31 AM", "Functionality is based on\n\nhttps://groups.google.com/forum/#!msg/google-gson/pk2vAcUk5rQ/SUCK2C4DY10J\nhttps://groups.google.com/forum/#!msg/google-gson/pk2vAcUk5rQ/q6Pet53qgjIJ\n\nFixes #459.", "Can this be merged? =||= @JakeWharton @swankjesse @inder123 Could we please get *any* feedback on whether this has a chance to get merged any time soon, or whether it makes sense to close it unmerged? =||= I\u2019m not in favor of adding this feature at this time. =||= why not? =||= And why not \"at this time\"? I.e., what could make you chance your opinion over time? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= ", 0], ["897", "Add complex parametrized type handling", "Sebastian Schuberth", "sschuberth", "06/27/19, 09:41:56 AM", "NaN", "This doesn't support types with multiple generics like `Map`.\n =||= @mmarcon @spaltis Could you maybe comment on this?\n =||= @JakeWharton can you please provide an example JSON and Java class for which deserialization would not work? \n =||= What will it take for this to be merged? =||= This exists; it\u2019s called getParameterized(). =||= Apparently getParameterized() was [added in version 2.8](https://github.com/google/gson/blob/41e48f7aa3a686778e95328693b830856538e9e3/CHANGELOG.md#L10) after this PR was created.\r\n\r\n@spaltis Would the existing getParameterized() feature work for you? =||= @swankjesse Is there example of handling complex parameterized type using getParameterized()? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= ", 0], ["898", "Unable to parse below JSON using GSON.", "Sumit Soni", "bloggersumitsoni", "08/10/16, 12:45:31 PM", "I need to parse this json string and want to map it with my bean class.\nAlso I don't need to parse it via key index as index of the key might change.\n\n{\"keyobject\": {\"keyarray\": [\"key1\", \"key2\", \"key3\"]},\n\"valueobject\": [{\"valuearray\": [\"arr1_val1\", \"arr1_val2\",\"arr1_val3\"]},\n{\"valuearray\": [\"arr2_val1\", \"arr2_val2\",\"arr2_val3\"]}]}\n\nPlease suggest.", "Please use StackOverflow for usage questions.\n =||= I have first tried stackoverflow then on google gson group but no response from anyone.\nFinally I have to try it here.\n =||= You'll need to study the Gson documentation and source code!\n =||= I tried to read the gson documentation but I didn't found a way to parse the above json format using GSON in which keys are all together and array of values are all together.\nAny hint or suggestion will be highly appreciated.\n =||= point us to the StackOverflow thread and we will try to answer there.\n =||= The question has marked as duplicate on stackoverflow. Though I have posted a new one.\nhttp://stackoverflow.com/questions/38877535/unable-to-parse-different-json-format-string-via-gson\n\nAlso find the similar question on google gson group through this link-\nhttps://groups.google.com/forum/#!topic/google-gson/5P7H8GP1nfw\n =||= ", 0], ["899", " Couldn't find com.google.gson.annotations.SerializedName.value", null, "vaibhavjaiswal9", "08/11/16, 09:11:05 PM", "I am getting this crash.\n\nFatal Exception: java.lang.RuntimeException: An error occured while executing doInBackground()\n       at android.os.AsyncTask$3.done(AsyncTask.java:300)\n       at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:355)\n       at java.util.concurrent.FutureTask.setException(FutureTask.java:222)\n       at java.util.concurrent.FutureTask.run(FutureTask.java:242)\n       at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n       at java.lang.Thread.run(Thread.java:818)\nCaused by java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\n       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\n       at java.lang.reflect.Field.getAnnotation(Field.java:242)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n       at com.google.gson.Gson.getAdapter(Gson.java:359)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)\n       at com.google.gson.Gson.getAdapter(Gson.java:359)\n       at com.google.gson.Gson.fromJson(Gson.java:809)\n       at com.google.gson.Gson.fromJson(Gson.java:775)\n       at com.google.gson.Gson.fromJson(Gson.java:724)\n       at com.google.gson.Gson.fromJson(Gson.java:696)", "Dupe of #726. This isn't caused by Gson, but by the (likely broken) OS the phone is using.\n =||= Can u pls assist me how to resolve it??\n\nThanks.\n\nOn 12-Aug-2016 2:41 AM, \"Jake Wharton\" notifications@github.com wrote:\n\n> Dupe of #726 https://github.com/google/gson/issues/726. This isn't\n> caused by Gson, but by the (likely broken) OS the phone is using.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/899#issuecomment-239293838, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ALb35p2XC4V6u6xJZWfHkL2vAKVnoBfQks5qe4_7gaJpZM4JijLk\n> .\n =||= Yes this happens in most of Samsung's phones. I also got same issue.\r\n\r\nI got the solution of it. \r\n\r\nAt first all phone's company was ignoring comments ( //  or  /* */ ) in .json File.\r\n\r\nBut now Samsung developers are not ignoring it. \r\n\r\nSo The best Solution is that you have to remove all comments ( // or /* */ ) lines in your .json file =||= ", 0], ["900", "Add static factories for array and parameterized type tokens.", "Jake Wharton", "JakeWharton", "08/12/16, 04:58:55 PM", "These are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.\n\nEquivalent methods are exposed on Moshi's `Types` utility.\n\nSome examples of where these are needed:\n- Writing a Retrofit `Converter.Factory` which automatically wraps your model object type in an envelope type (like JSON-RPC). For example, `TypeToken.getParameterized(JsonRpcRequest.class, userType)`.\n- When doing compile-time code generation of `TypeAdapter` implementations that support generics. To handle `T[]` you need to generate code that combines the statically known type with the runtime generic type. For example, `TypeToken.getArray(runtimeType)`.", "Looks good to me. \n =||= ", ["900", "Add static factories for array and parameterized type tokens.", "Jake Wharton", "JakeWharton", "08/12/16, 04:58:55 PM", "These are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.\n\nEquivalent methods are exposed on Moshi's `Types` utility.\n\nSome examples of where these are needed:\n- Writing a Retrofit `Converter.Factory` which automatically wraps your model object type in an envelope type (like JSON-RPC). For example, `TypeToken.getParameterized(JsonRpcRequest.class, userType)`.\n- When doing compile-time code generation of `TypeAdapter` implementations that support generics. To handle `T[]` you need to generate code that combines the statically known type with the runtime generic type. For example, `TypeToken.getArray(runtimeType)`.", "NaN"], ["Jake Wharton", "Add static factories for array and parameterized type tokens.\n\nThese are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.", "08/12/16, 04:11:57 PM", "Jake Wharton", "9414b9b3b61d59474a274aab21193391e5b97e52", ["gson/src/main/java/com/google/gson/reflect/TypeToken.java", "gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"], "@@ -302,4 +302,19 @@ private static boolean matches(Type from, Type to, Map<String, Type> typeMap) {\n   public static <T> TypeToken<T> get(Class<T> type) {\n     return new TypeToken<T>(type);\n   }\n+\n+  /**\n+   * Gets type literal for the parameterized type represented by applying {@code typeArguments} to\n+   * {@code rawType}.\n+   */\n+  public static TypeToken<?> getParameterized(Type rawType, Type... typeArguments) {\n+    return new TypeToken<Object>($Gson$Types.newParameterizedTypeWithOwner(null, rawType, typeArguments));\n+  }\n+\n+  /**\n+   * Gets type literal for the array type whose elements are all instances of {@code componentType}.\n+   */\n+  public static TypeToken<?> getArray(Type componentType) {\n+    return new TypeToken<Object>($Gson$Types.arrayOf(componentType));\n+  }\n }, @@ -19,6 +19,7 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.RandomAccess;\n import java.util.Set;\n import junit.framework.TestCase;\n@@ -79,4 +80,26 @@ public void testIsAssignableFromWithNestedWildcards() throws Exception {\n     // listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false\n     assertFalse(TypeToken.get(b).isAssignableFrom(a));\n   }\n+\n+  public void testArrayFactory() {\n+    TypeToken<?> expectedStringArray = new TypeToken<String[]>() {};\n+    assertEquals(expectedStringArray, TypeToken.getArray(String.class));\n+\n+    TypeToken<?> expectedListOfStringArray = new TypeToken<List<String>[]>() {};\n+    Type listOfString = new TypeToken<List<String>>() {}.getType();\n+    assertEquals(expectedListOfStringArray, TypeToken.getArray(listOfString));\n+  }\n+\n+  public void testParameterizedFactory() {\n+    TypeToken<?> expectedListOfString = new TypeToken<List<String>>() {};\n+    assertEquals(expectedListOfString, TypeToken.getParameterized(List.class, String.class));\n+\n+    TypeToken<?> expectedMapOfStringToString = new TypeToken<Map<String, String>>() {};\n+    assertEquals(expectedMapOfStringToString, TypeToken.getParameterized(Map.class, String.class, String.class));\n+\n+    TypeToken<?> expectedListOfListOfListOfString = new TypeToken<List<List<List<String>>>>() {};\n+    Type listOfString = TypeToken.getParameterized(List.class, String.class).getType();\n+    Type listOfListOfString = TypeToken.getParameterized(List.class, listOfString).getType();\n+    assertEquals(expectedListOfListOfListOfString, TypeToken.getParameterized(List.class, listOfListOfString));\n+  }\n }, ", 38, 0, "\"modified, modified, \"", 38], 1], ["901", "Enable subclassing of ReflectiveTypeAdapterFactory", null, "F43nd1r", "08/14/16, 04:29:41 PM", "Usecase: I need to serialize a subclass of a collection which adds additional fields, see https://github.com/F43nd1r/Multitool/blob/master/app/src/main/java/com/google/gson/internal/bind/CollectionReflectiveTypeAdapter.java .\nAs you can see, this requires a lot of duplicated code from ReflectiveTypeAdapter.\nTo prevent this, it would be nice to be able to access this method and inner class from subclasses.\n(ReflectiveTypeAdapterFactory requires a ConstructorConstructor in its constructor, which is why it is necessary that gson exposes its ConstructorConstructor.)", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= You can accomplish this with delegation rather than inheritance. Look at TypeAdapterFactory and its APIs to compose adapters from other adapters.\n =||= @swankjesse That is not possible in this case, as Gson will always return a `CollectionTypeAdapterFactory.Adapter` if i try to access a delegate adapter for a type extending collection.\nBut I need a `CollectionTypeAdapterFactory.Adapter` and a `ReflectiveTypeAdapterFactory.Adapter` _for the same type_ if I would solve this with composition.\n =||= If there is a way to enable compostion in this case I'd happily use it, but I could not think of a way of doing that without seriously messing with the existing API.\n =||= Got it. What you're doing is pretty weird! I don\u2019t think it's a good idea to depend on Gson\u2019s internal package. In this case your best bet is probably to change your JSON or Java models to be less weird!\n =||= I found that suggestion on [stackoverflow](http://stackoverflow.com/questions/27506989/how-do-i-gson-serialize-an-object-extending-a-collection) too. \nHowever, my datamodel is enforced by the connected view.\nThis is why I'm trying to simulate composition on the JSON model, while my Java model uses inheritance. (As Gson/Json does not support properties on an array.)\n =||= I just thought of an alternative:\nA method like this in `Gson` would do it too: \n\n``` java\n  public <C, T extends TypeAdapter<C>>  T getAdapterOfType(Class<? super T> adapterClass, TypeToken<C> forType){\n    for (TypeAdapterFactory factory : factories) {\n      TypeAdapter<C> candidate = factory.create(this, forType);\n      if (candidate != null && adapterClass.isAssignableFrom(candidate.getClass())) {\n        //noinspection unchecked\n        return (T) candidate;\n      }\n    }\n    throw new IllegalArgumentException(\"GSON cannot find adapter of class \" + adapterClass + \" for type \" + forType);\n  }\n```\n\nDoes that look better?\n =||= The Stack Overflow answer with the checkmark is what you want. Your value should have a list, not be a list.\n =||= > However, my datamodel is enforced by the connected view.\n\nI'd need to create a deep copy of my datastructure each time I want to persist it, as changing the datamodel in usage is not an option.\n =||= Got it. Too bad. In that case I recommend copying the code you need into your project. I don\u2019t want to encourage anyone to pull code from Gson\u2019s `internal` package.\n =||= Oh well, not what I wanted. But I understand the notion to keep internals hidden. \n =||= ", 0], ["905", "BigInteger equals bugfix", null, "ybank", "08/22/16, 11:58:50 PM", "The BigInteger conversion may lose precision so when compare with a small integer it can incorrectly regard them as equal to each other. This fix removes this bug and updated tests to prevent regression.", "Sorry, duplicate to #903 ! \n =||= ", 0], ["908", "Gson.toJson(PropertyChangeSupport) cause SecurityException in Android N", "JQ", "niorgai", "08/04/17, 08:32:05 AM", "It only happen in Android N.\n\nHere is the test code(with `compileSdkVersion` 24):\n\n```\nPropertyChangeSupport support = new PropertyChangeSupport(this);\nnew Gson().toJson(support);\n```\n\nAnd here is some exception stack:\n\n```\njava.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible\n                                                     at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133)\n                                                     at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119)\n                                                     at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)\n                                                     at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:99)\n                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\n                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)\n                                                     at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)\n                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\n                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\n                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)\n```", "NaN", 0], ["909", "Customize InstanceCreator for hierarchies", "Fabian Zeindl", "fab1an", "12/30/17, 07:11:18 AM", "I want to deserialise a widget-hierarchy, where each object in the tree get's a reference to the root.\n\nI don't need complex graph, what I want to tell Gson is essentially that if a class implements some interface AND has a constructor that accepts a single type `TreeRoot`, than create the object using this constructor and a `TreeRoot` that I supply.\n\nOther than that I want to keep default serialization.\n\nI haven't found any way to do this because I can't register a generic `InstanceCreator` for an interface.", "Followup question: Is it possible to return an `InstanceCreator` from a `TypeAdapterFactory`? \n =||= ", 0], ["910", "TypeAdapterFactory.getDelegate return wrong TypeAdapters", "Fabian Zeindl", "fab1an", "12/30/17, 07:11:13 AM", "I've registered a `TypeAdapterFactory` and some custom `JsonSerializers` for interfaces.\n\nWhen I call `getDelegateAdapter` in my factory, it doesn't give me the custom Serializer, but a generic one. When I remove the factory it works. ", "I solved this by converting my `JsonSerializer` into a `TypeAdapter`.\n\nJust for the record: Apparently TypeAdapters overwrite Serializers, am I right?\n =||= ", 0], ["911", "not response ", "\u6768\u6625", "ijustyce", "08/30/16, 06:54:29 AM", "json string is \n`{\n    \"result\": 1,\n    \"error\": \"\u64cd\u4f5c\u6210\u529f\uff01\",\n    \"logistics\": [{\n        \"logisticsId\": \"105_882222020797337064\",\n        \"logisticsCode\": \"882222020797337064\",\n        \"logisticsType\": 5,\n        \"logisticsName\": \"\u5706\u901a\",\n        \"state\": 3,\n        \"traceJSON\": \"[{\\\"AcceptStation\\\":\\\"\u3010\u5e7f\u4e1c\u7701\u6df1\u5733\u5e02\u5b9d\u5b89\u533a\u9f99\u534e\u516c\u53f8\u3011 \u5df2\u6253\u5305\\\",\\\"AcceptTime\\\":\\\"2016-07-06 22:37:03\\\"},{\\\"AcceptStation\\\":\\\"\u3010\u5e7f\u4e1c\u7701\u6df1\u5733\u5e02\u5b9d\u5b89\u533a\u9f99\u534e\u516c\u53f8\u3011 \u5df2\u6536\u4ef6\\\",\\\"AcceptTime\\\":\\\"2016-07-06 22:37:03\\\"},{\\\"AcceptStation\\\":\\\"\u3010\u676d\u5dde\u8f6c\u8fd0\u4e2d\u5fc3\u3011 \u5df2\u53d1\u51fa \u4e0b\u4e00\u7ad9 \u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011\\\",\\\"AcceptTime\\\":\\\"2016-07-08 01:58:14\\\"},{\\\"AcceptStation\\\":\\\"\u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011 \u5df2\u6536\u5165\\\",\\\"AcceptTime\\\":\\\"2016-07-08 05:56:35\\\"},{\\\"AcceptStation\\\":\\\"\u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011 \u6d3e\u4ef6\u4eba : \u4faf\u7406\u60f3 \u6d3e\u4ef6\u4e2d \u6d3e\u4ef6\u5458\u7535\u8bdd18058708397\\\",\\\"AcceptTime\\\":\\\"2016-07-08 08:33:54\\\"},{\\\"AcceptStation\\\":\\\"\u5ba2\u6237 \u7b7e\u6536\u4eba : \u90ae\u4ef6\u6536\u53d1\u7ae0 \u5df2\u7b7e\u6536 \u611f\u8c22\u4f7f\u7528\u5706\u901a\u901f\u9012\uff0c\u671f\u5f85\u518d\u6b21\u4e3a\u60a8\u670d\u52a1\\\",\\\"AcceptTime\\\":\\\"2016-07-08 13:32:30\\\"}]\",\n        \"createtime\": 1471920974000,\n        \"updatetime\": 1467955950000,\n        \"remark\": \"hahahahahhah\",\n        \"traces\": [{\n            \"acceptTime\": \"2016-07-06 22:37:03\",\n            \"acceptStation\": \"\u3010\u5e7f\u4e1c\u7701\u6df1\u5733\u5e02\u5b9d\u5b89\u533a\u9f99\u534e\u516c\u53f8\u3011 \u5df2\u6253\u5305\",\n            \"remark\": null\n        }, {\n            \"acceptTime\": \"2016-07-06 22:37:03\",\n            \"acceptStation\": \"\u3010\u5e7f\u4e1c\u7701\u6df1\u5733\u5e02\u5b9d\u5b89\u533a\u9f99\u534e\u516c\u53f8\u3011 \u5df2\u6536\u4ef6\",\n            \"remark\": null\n        }, {\n            \"acceptTime\": \"2016-07-08 01:58:14\",\n            \"acceptStation\": \"\u3010\u676d\u5dde\u8f6c\u8fd0\u4e2d\u5fc3\u3011 \u5df2\u53d1\u51fa \u4e0b\u4e00\u7ad9 \u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011\",\n            \"remark\": null\n        }, {\n            \"acceptTime\": \"2016-07-08 05:56:35\",\n            \"acceptStation\": \"\u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011 \u5df2\u6536\u5165\",\n            \"remark\": null\n        }, {\n            \"acceptTime\": \"2016-07-08 08:33:54\",\n            \"acceptStation\": \"\u3010\u6d59\u6c5f\u7701\u676d\u5dde\u5e02\u4f59\u676d\u533a\u95f2\u6797\u516c\u53f8\u3011 \u6d3e\u4ef6\u4eba : \u4faf\u7406\u60f3 \u6d3e\u4ef6\u4e2d \u6d3e\u4ef6\u5458\u7535\u8bdd18058708397\",\n            \"remark\": null\n        }, {\n            \"acceptTime\": \"2016-07-08 13:32:30\",\n            \"acceptStation\": \"\u5ba2\u6237 \u7b7e\u6536\u4eba : \u90ae\u4ef6\u6536\u53d1\u7ae0 \u5df2\u7b7e\u6536 \u611f\u8c22\u4f7f\u7528\u5706\u901a\u901f\u9012\uff0c\u671f\u5f85\u518d\u6b21\u4e3a\u60a8\u670d\u52a1\",\n            \"remark\": null\n        }]\n    }]\n}`\nwhen i call fromJson, Gson not response, not return value for a long long time, then app crash", "I use it on android\n =||= ", 0], ["914", "Enums", null, "l3eta", "08/29/16, 04:54:10 PM", "Enums always return null. \n\n`public static class EnumDeserial implements JsonDeserializer<Enum> {\n\n```\n@Override\npublic Enum deserialize(JsonElement je, Type type, JsonDeserializationContext jdc) throws JsonParseException {\n    try {\n        return Enum.valueOf((Class<Enum>) Class.forName(type.getTypeName()), je.getAsString());\n    } catch (Exception ex) {\n        throw new JsonParseException(ex.getMessage());\n    }\n}\n```\n\n}`\n\nAlong with this of course \n`\nb.registerTypeHierarchyAdapter(Enum.class, new EnumDeserial());\n`\n\nExample of why they don't work\n\nI believe Java 1.5 is around your support target so this would be the patch to fix, I would figure out where this would go on your side but not my job :)", "We have tests proving that enums work: https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/EnumTest.java. If you believe there is a bug, please provide a failing test case.\n =||= How do I get code mark up to work?\n =||= https://help.github.com/articles/getting-started-with-writing-and-formatting-on-github/\n\nOn Sat, Aug 27, 2016 at 3:08 PM l3eta notifications@github.com wrote:\n\n> How do I get code mark up to work?\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/914#issuecomment-242935086, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEZ6HKljezf2EMNQ0F_Gu5nRV-WSiks5qkIswgaJpZM4Juwtq\n> .\n =||= The problem came from incoming json was \"val: upper\" instead of \"val: UPPER\" I do believe returning null should be a JsonParseException\n =||= ", 0], ["915", "Gson.instance", "piegames", "piegamesde", "08/29/16, 05:57:53 PM", "I often use `new Gson().xxx();` for quick serialization. How about a `Gson.instance` or a `Gson.instance()` to re-use that object easily? \nPeople are [doing it already](http://stackoverflow.com/questions/21709219/should-gson-be-declared-as-static-final) so I think the Gson class should add the line\n\n```\n public static final Gson GSON= new Gson();\n```\n\nsomewhere. I did not create a pull request since a) a pull request for only one line? and b) someone familiar to the API should say how to implement it exactly.", "The difference between projects declaring their own instance and Gson exposing a singleton instance is that when it's done in individual projects the user can choose the configuration options that they want.\n =||= But many times the Gson is used without any special configuration. Could adding this line do any damage elsewhere?\n =||= We have plenty of usecases where we use multiple instances of Gson. Having a single Gson.instance() method sets incorrect expectations and will cause confusion. You are not even typing more characters by using new Gson() instead of Gson.getInstance()\n =||= ", 0], ["916", "Add the exports for the internal packages for backwards compatibility", "Ignasi Barrera", "nacx", "08/30/16, 03:30:10 PM", "Exports for the `com.google.gson.internal.*` packages where not added back in https://github.com/google/gson/pull/797.\n\nApache jclouds heavily relies on Gson and does many complex (de)serialization stuff at its core to leverage clean interfaces for the supported providers. It relies on [some classes in the internal packages](https://github.com/jclouds/jclouds/search?utf8=%E2%9C%93&q=%22com.google.gson.internal%22&type=Code) and it is now broken in OSGi, which is a real blocker to upgrade Apache jclouds to the latest version of Gson.\n\nThe classes and methods being used are all public, so I'm wondering whether they are really internal (as they provide some features that could be used by downstream consumers). Could the internal packages be added back again to the OSGi exports, to keep backwards compatibility? ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= I don't get it. What\u2019s the point of OSGi if not to strongly encapsulate implementation details?\n =||= Absolutely.\n\nThe problem here is the deprecation path and the inconsistencies between regular apps and OSGI deployed ones. Those packages were _explicitly_ exported in previous versions and have been removed directly, without a reference in the changelog or release notes. There is also no deprecation warning or migration path for the downstream users so they can upgrade Gson and their apps. In one release, those packages literally _disappeared_ in OSGi without any warning or alternative.\n\nI agree that internal classes should not be exposed, but with the current setup, a standalone Java app can use those classes, apps deployed in servlet containers can use them too, but apps deployed in OSGi containers can't. And that is not consistent. Visibility and scope of internal classes shouldn't be enforced by a package name, but the visibility of their constructors and methods, and those internal classes are all public. Otherwise one should expect downstream users to be using them (just like people uses `sun.misc.Unsafe`).\n\nI'd suggest a friendly upgrade path, so users of old Gson versions affected by this can upgrade without issues:\n1. Add the exports back, and add a warning in the release notes that those packages won't be exported in future releases, and cut a bugfix release exporting those packages.\n2. Make all internal classes constructors package-private and limit the visibility of their methods so they can't be instantiated/used from the outside.\n3. Consider providing a public interface to leverage the functionality that will be hidden, so users have an upgrade path.\n\nI think this makes sense. There is no actual impact on Gson itself for adding the exports back and helps users upgrade properly.\n =||= > In one release, those packages literally disappeared in OSGi without any warning or alternative.\n\nBut they were not part of the public API. This is exactly what normal Java users experience when they depend on `internal` packages and upgrade to find that they changed.\n\n> Visibility and scope of internal classes shouldn't be enforced by a package name, but the visibility of their constructors and methods, and those internal classes are all public.\n\nJava has no mechanism of sharing internal classes among different packages before Jigsaw so that's not really a viable option.\n =||= This is sensible, as in the end it is all enforced by naming, and this leads to interpretations.\n\nThe `com.google.gson.internal` package is explicitly exported since Gson 1.7, and that means that it is _explicitly_ made part of the public API in OSGi environments. \n\nI'm not arguing about the need to hide those classes, but highlighting the fact that if they were internal, they weren't properly tagged as such (at least in OSGi). Someone seeing an explicit export of a package may think that package is OK to be used (why exporting it if not?).\n\nSince it's been there for 15 releases, I'm just asking for a proper deprecation path. From an OSGi perspective, removing an export is like removing an entire package of a public API, and that has a big impact if not advertised properly or a deprecation path is provided.\n =||= > The com.google.gson.internal package is explicitly exported since Gson 1.7\n\n@JakeWharton @swankjesse Just to clarify: if I'm reading the thread correctly, the export was inadvertent rather than intentional?\n\nFrom an Apache jclouds perspective (just echoing Ignasi's point here) I think we're in full agreement that using internal classes is not \"the right thing to do\". The question is whether it's possible to provide a deprecation path that would allow us to use the latest minor whilst preparing for an upgrade to the next major by removing use of those classes.\n =||= I'm betting someone external contributed the required bits for OSGi and exposed everything. Since none of us use OSGi, it was likely merged without a close enough inspection or understanding as to what the implications were.\n =||= > I'm betting someone external contributed the required bits for OSGi and exposed everything.\n\n@JakeWharton Ah, OK, thanks for clarifying. Would it be possible to consider restoring those exports in 2.6.x only, assuming there are plans for another minor release there?\n\nThat would leave master \"clean\" but allow us and potentially other consumers to at least use the latest 2.6.x version - it would be great if we could at least get up to 2.6.\n =||= Can somebody just fix jclouds? Maybe send a PR that copy-pastes the relevant `internal` classes from Gson into that project?\n =||= > Maybe send a PR that copy-pastes the relevant internal classes from Gson into that project?\n\nThis is definitely one of the options being considered - see thread [here](http://markmail.org/message/olgebygfgdy3hwtm). The concern is that that's more of a patch than a real fix, since we obviously would rather use Gson cleanly and depend only on public and recommended classes.\n\n@swankjesse Any input on that thread, and especially any suggestions as to what the right way would be to access the needed functionality, would be very much appreciated.\n\n@nacx is probably in a better position to comment on why we'd like to avoid copying the classes if possible, but that's a discussion perhaps better taken to the thread? Of course, also happy to continue here if preferred.\n =||= Thanks for all the feedback. I'll just file an issue in jclouds to stop relying on the internal packages and discard this PR.\nI don't have enough knowledge of gson to safely replace that code, but I agree this is the right path. Let's work on removing the offending bits from jclouds.\n\nThanks!\n =||= ", 0], ["917", "Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?", "Vyshnav Ramesh", "vyshnavkr", "08/31/16, 02:37:34 PM", "This is regarding the StackOverflow question http://stackoverflow.com/q/39232330/6737655\nThe request is being done, but the response data seems empty. I guess it's due to an empty string fetched. Am I wrong?", "Answered on StackOverflow\n =||= ", 0], ["918", "Prepare a Gson 2.7.1 release.", "Jake Wharton", "JakeWharton", "02/07/17, 03:47:10 PM", "Two minor changes: https://github.com/google/gson/compare/gson-parent-2.7...master\n\nIncoming changes have slowed so it'd be nice to get these out since they were driven by actual use cases of users. Anything else we want to include?\n\n@inder123 @swankjesse ", "Ship it!\n =||= Because this adds new APIs I\u2019d be tempted to call this Gson 2.8. (In that it\u2019s not safe to run code compiled against 2.7.1 with 2.7. I gotta go read what semver says)\n =||= I would like to introduce a new feature: Ability to map unknown JSON values\nto a default enum value. This has been the biggest reason why I stopped\nusing Enums in Gson.\n\nLet me think about how I will implement it today, and if it can't be done\nquickly, it can be done in a later version.\n\nOn Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com\nwrote:\n\n> Because this adds new APIs I\u2019d be tempted to call this Gson 2.8. (In that\n> it\u2019s not safe to run code compiled against 2.7.1 with 2.7. I gotta go read\n> what semver says)\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/918#issuecomment-243786641, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl\n> .\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= @inder123 punt that to 2.8? That sounds like something that make take some time to get exactly right.\n =||= That should be able to be done with a TypeAdapterFactory that delegates to\nthe built-in enum adapter. Does it need to be built-in?\n\nOn Wed, Aug 31, 2016 at 10:51 AM inder123 notifications@github.com wrote:\n\n> I would like to introduce a new feature: Ability to map unknown JSON values\n> to a default enum value. This has been the biggest reason why I stopped\n> using Enums in Gson.\n> \n> Let me think about how I will implement it today, and if it can't be done\n> quickly, it can be done in a later version.\n> \n> On Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com\n> wrote:\n> \n> > Because this adds new APIs I\u2019d be tempted to call this Gson 2.8. (In that\n> > it\u2019s not safe to run code compiled against 2.7.1 with 2.7. I gotta go\n> > read\n> > what semver says)\n> > \n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/google/gson/issues/918#issuecomment-243786641, or\n> > mute\n> > the thread\n> > <\n> > https://github.com/notifications/unsubscribe-auth/ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl\n> > \n> > .\n> \n> ## \n> \n> http://www.singhinderjeet.com/\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/918#issuecomment-243789549, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEeDfFuBcpqwUYCI3eO5RpRyZJL0Wks5qlZUGgaJpZM4JxsLl\n> .\n =||= I think it should be built in. The current version shouldn't be used to\ndeseralize enum because an future addition of enum breaks all existing\nclients. Unsuspecting users won't realize this until it's too late.\n\nOn Aug 31, 2016 8:43 AM, \"Jake Wharton\" notifications@github.com wrote:\n\n> That should be able to be done with a TypeAdapterFactory that delegates to\n> the built-in enum adapter. Does it need to be built-in?\n> \n> On Wed, Aug 31, 2016 at 10:51 AM inder123 notifications@github.com\n> wrote:\n> \n> > I would like to introduce a new feature: Ability to map unknown JSON\n> > values\n> > to a default enum value. This has been the biggest reason why I stopped\n> > using Enums in Gson.\n> > \n> > Let me think about how I will implement it today, and if it can't be done\n> > quickly, it can be done in a later version.\n> > \n> > On Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com\n> > wrote:\n> > \n> > > Because this adds new APIs I\u2019d be tempted to call this Gson 2.8. (In\n> > > that\n> > > it\u2019s not safe to run code compiled against 2.7.1 with 2.7. I gotta go\n> > > read\n> > > what semver says)\n> > > \n> > > \u2014\n> > > You are receiving this because you were mentioned.\n> > > Reply to this email directly, view it on GitHub\n> > > https://github.com/google/gson/issues/918#issuecomment-243786641, or\n> > > mute\n> > > the thread\n> > > <\n> > > https://github.com/notifications/unsubscribe-auth/\n> > > ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl\n> > > \n> > > .\n> > \n> > ## \n> > \n> > http://www.singhinderjeet.com/\n> > \n> > \u2014\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/google/gson/issues/918#issuecomment-243789549, or\n> > mute\n> > the thread\n> > <https://github.com/notifications/unsubscribe-auth/\n> > AAEEEeDfFuBcpqwUYCI3eO5RpRyZJL0Wks5qlZUGgaJpZM4JxsLl>\n> > .\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/918#issuecomment-243790725, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABCwyjorJMWzS-oM3hBL4gAZaxGQVB6xks5qlZXVgaJpZM4JxsLl\n> .\n =||= I prefer time pressure of having to release quickly. Otherwise hard to find\ntime.\n\nOn Aug 31, 2016 8:16 AM, \"Jesse Wilson\" notifications@github.com wrote:\n\n> @inder123 https://github.com/inder123 punt that to 2.8? That sounds\n> like something that make take some time to get exactly right.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/918#issuecomment-243790291, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/ABCwyrLpp_SoMGPiWocm7_TzUq7c2wAKks5qlZWLgaJpZM4JxsLl\n> .\n =||= https://github.com/google/gson/pull/919 implements regular expressions\npatterns for SerializedName for enums.\n\nIf you like this approach, I can expand it to fields of regular Java\nobjects.\n\nOn Wed, Aug 31, 2016 at 9:29 AM, Inderjeet Singh inder123@gmail.com wrote:\n\n> I prefer time pressure of having to release quickly. Otherwise hard to\n> find time.\n> \n> On Aug 31, 2016 8:16 AM, \"Jesse Wilson\" notifications@github.com wrote:\n> \n> > @inder123 https://github.com/inder123 punt that to 2.8? That sounds\n> > like something that make take some time to get exactly right.\n> > \n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > https://github.com/google/gson/issues/918#issuecomment-243790291, or mute\n> > the thread\n> > https://github.com/notifications/unsubscribe-auth/ABCwyrLpp_SoMGPiWocm7_TzUq7c2wAKks5qlZWLgaJpZM4JxsLl\n> > .\n\n## \n\nhttp://www.singhinderjeet.com/\n =||= ", 0], ["921", "Add @Documented annotation to @SerializedName to help with generating javadoc", "Amiruddin Nagri", "anagri", "09/16/16, 01:44:34 AM", "All the retrofit methods have `@Documented` annotation, so they are documented when a javadoc is generated. It will be useful if we have `@Documented` annotation for `@SerializedName`, `@Expose`, `@Since`, `@Until` annotations in gson.", "Yes, this is a good idea\n =||= https://github.com/google/gson/pull/922\n =||= ", 0], ["922", "Added @Documented to Gson annotations.", "Inderjeet Singh", "inder123", "09/16/16, 01:25:59 AM", "This is useful since it shows the JSON format for a class which the user of that class should typically know.", "lgtm\n =||= Removed Documented from JsonAdapter.\n =||= Merging since got LGTM\n =||= ", ["922", "Added @Documented to Gson annotations.", "Inderjeet Singh", "inder123", "09/16/16, 01:25:59 AM", "This is useful since it shows the JSON format for a class which the user of that class should typically know.", "NaN"], ["Inderjeet Singh", "Added @Documented to Gson annotations.\n\nThis is useful since it shows the JSON format for a class which the user of that class should typically know.", "09/16/16, 01:24:21 AM", "Inderjeet Singh", "688f918a353e57f11405fab17d82d506a4e7dc4c", ["gson/src/main/java/com/google/gson/annotations/Expose.java", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/annotations/Since.java", "gson/src/main/java/com/google/gson/annotations/Until.java"], "@@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -57,6 +58,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.FIELD)\n public @interface Expose {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -76,6 +77,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.METHOD})\n public @interface SerializedName {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -50,6 +51,7 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.TYPE})\n public @interface Since {, @@ -16,6 +16,7 @@\n \n package com.google.gson.annotations;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n@@ -54,6 +55,7 @@\n  * @author Joel Leitch\n  * @since 1.3\n  */\n+@Documented\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ElementType.FIELD, ElementType.TYPE})\n public @interface Until {, ", 8, 0, "\"modified, modified, modified, modified, \"", 8], 1], ["924", "NoSuchFieldException when serializing objects with an enumeration field on Samsung devices running Android 5.0.x", null, "angelocoiro", "09/06/16, 02:37:47 PM", "## Stack trace\n\n```\njava.lang.AssertionError: java.lang.NoSuchFieldException: ENUM_CONSTANT_NAME\nat com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter#<init>(808)\nat com.google.gson.internal.bind.TypeAdapters$30#create(834)\nat com.google.gson.Gson#getAdapter(423)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#createBoundField(115)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#getBoundFields(164)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#create(100)\nat com.google.gson.Gson#getAdapter(423)\nat com.google.gson.Gson#toJson(661)\nat com.google.gson.Gson#toJson(648)\nat com.google.gson.Gson#toJson(603)\nat com.google.gson.Gson#toJson(583)\nat com.myapp.mypackage.MyClass#myMethod()\n```\n## Crash Descriprion\n\nI can see this crash on Samsung devices running Android 5.0.x only.\nI'm using gson-2.7 and I'm not usin ProGurad.\n\nThe crash occurs when I try to serialize an object of a specific type that contains a field of type enumeration.\nHowever, it does not occur sistematically but rather randomly.\n\nAs fas as I understand, such an exception cannot be caused by my app's code.\nMoreover, by inspecting gson code, I cannot understand why this exception is generated. It seems to me that this should never happen:\n\n```\nfor (T constant : classOfT.getEnumConstants()) {\n          String name = constant.name();\n          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n...\n}\n```\n\nThe NoSuchFieldException exception is thrown when the `Class.getField(String name)` method is called (line 797)\n\nAny idea on why this exception is thrown? \nWhat could be the reason that causes a similar crash?", "This is a bug in Samsung's version of Android. I don't think there's anything you can do and there's certainly nothing we can do.\n =||= Thanks for your support @JakeWharton. That is exactly what I suspected.\n =||= this is not a bug in samsungs version of android. i get the same thing on a nexus5x running android 8.1.0.  its more lily a pro guard issue. See: https://stackoverflow.com/questions/15543607/assertionerror-in-gson-enumtypeadapter-when-using-proguard-obfuscation =||= @bpappin as described in the issue pro guard was not used  =||= I also got same exception but problem was i extending model with facebook native ad i just make that field transient and it worked fine. =||= Anyone resolved this ? I am getting this issue on all my devices  =||= > Anyone resolved this ? I am getting this issue on all my devices\r\n\r\nTry method from this article:\r\nhttps://medium.com/@hanru.yeh/gson-will-crash-at-enum-fields-in-custom-class-with-proguard-bbcf5ad1b623\r\nIt helped me =||= ", 0], ["925", "Prevent Proguard from stripping interface info from TypeAdapterFactory implementations", "Chaitanya Pramod", "ChaitanyaPramod", "09/14/16, 11:54:11 PM", "Proguard strips away interface information from `TypeAdapterFactory` implementations. This leaves `@JsonAdapter(MyTypeAdapterFactory.class)` useless as `JsonAdapterAnnotationTypeAdapterFactory` doesn't detect the class to be a `TypeAdapterFactory` instance. See https://github.com/google/gson/blob/193349f4aa7eecf43cc6ebf104e218e704db21d9/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java#L60\n\nThe solution would involve updating the proguard snippet to keep all `TypeAdapterFactory` implementations", "Now that I think about it, this applies to `JsonSerializer` and `JsonDeserializer` instances as well\n =||= Ok. Can you send another PR? Thanks.\n =||= The merged PR #926 already keeps `JsonSerializer` and `JsonDeserializer` implementations.\nCheers! \ud83d\ude0a\n =||= ", 0], ["926", "Prevent Proguard from stripping interface info from @JsonAdapter classes", "Chaitanya Pramod", "ChaitanyaPramod", "09/14/16, 11:54:11 PM", "Previously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.\n\nFixes #925", "NaN", ["926", "Prevent Proguard from stripping interface info from @JsonAdapter classes", "Chaitanya Pramod", "ChaitanyaPramod", "09/14/16, 11:54:11 PM", "Previously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.\n\nFixes #925", "NaN"], ["Chaitanya Pramod", "Prevent Proguard from stripping interface info from @JsonAdapter classes\n\nPreviously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.\r\n\r\nFixes #925", "09/14/16, 01:27:35 PM", "GitHub", "74f4f74b8b752d13c14aef448a883a297fe3f764", ["examples/android-proguard-example/proguard.cfg"], "@@ -13,4 +13,10 @@\n # Application classes that will be serialized/deserialized over Gson\n -keep class com.google.gson.examples.android.model.** { *; }\n \n+# Prevent proguard from stripping interface information from TypeAdapterFactory,\n+# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n+-keep class * implements com.google.gson.TypeAdapterFactory\n+-keep class * implements com.google.gson.JsonSerializer\n+-keep class * implements com.google.gson.JsonDeserializer\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 6, 0, "\"modified, \"", 6], 1], ["927", "Self-reference tests are inconsistent", "Matteo Francia", "w4bo", "10/25/16, 07:20:20 PM", "Self-reference is not supported by gson serialization (see [CircularReferenceTest.java](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java)). However, it is required in gson-extras (see [GraphAdapterBuilderTest.java](https://github.com/google/gson/blob/ee8d6be59ff6f2466d65be746b96ccf07ddb9ddf/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java)).\n\nTest \"testSerializationDirectSelfReference\" in [GraphAdapterBuilderTest.java](https://github.com/google/gson/blob/ee8d6be59ff6f2466d65be746b96ccf07ddb9ddf/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java) is inconsistent with \"testSelfReferenceIgnoredInSerialization\" in [CircularReferenceTest.java](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java). Fixing the former breaks the latter.", "How do both sets of tests pass?\n =||= That is the fact. They do not pass together as they are complementary, so why keeping both? \n\nI try to give a better explanation: gson-extras depends on gson. The former has a test which asserts that _direct self-reference_ serialization works (_testSerializationDirectSelfReference_). The latter has a test which asserts that self-reference is not supported (_testSelfReferenceIgnoredInSerialization_). If _testSelfReferenceIgnoredInSerialization_ passes, then _testSerializationDirectSelfReference_ must fail.\n\nIs it useful to open a pull request to make gson-extras support direct self-serialization? This solution may impact the gson main project.\n =||= They _do_ both pass.\n =||= :+1: \n =||= gson-extra's version works because it registers a custom adapter (see GraphAdapterBuilder), which does support limited self-references in the reigistered types ('Roshambo.class' in the test). Without that adapter, the test would fail.\nSo, it all works as expected.\n =||= ", 0], ["928", "useDefaultManifestFile deprecated in Maven JAR Plugin", "Heidi Dong", "heidid", "09/23/16, 12:32:16 AM", "[Maven JAR Plugin 3.0](https://maven.apache.org/plugins/maven-jar-plugin/) removes useDefaultManifestFile, which is currently used in [pom.xml](https://github.com/google/gson/blob/master/pom.xml). The file should be updated or a version number should be added.", "Thanks. Can you send a pull request to fix?\n =||= ", 0], ["929", "Problems with Gson library. Passing Info in Intent", "Jose Gonzalez", "jose920405", "09/16/16, 04:19:48 PM", "Have a bug with `Gson` when call `fromJson` func the object come bad. \n\nI'm passing `toJson`a `Video` object, model from youtube. \n\n**Code:**\n\nWhen pass:\n\n```\nGson gson = new Gson();\nString myJson = gson.toJson(ytVideo); //ytvideo ==> com.google.api.services.youtube.model.Video\ni.putExtra(\"youtubeVideo\", myJson);\n```\n\nWhen Receive:\n\n```\nGson gson = new Gson();\nyoutubeVideo = gson.fromJson(getIntent().getStringExtra(\"youtubeVideo\"), Video.class);\n```\n\nThe error is\n\n> field `com.google.api.services.youtube.model.Video.contentDetails` has type `com.google.api.services.youtube.model.VideoContentDetails`, got `com.google.gson.internal.LinkedTreeMap` .\n\n I suppose that `Gson` fails when trying to repair my object Video.\n\nhttp://stackoverflow.com/questions/39535222/problems-with-gson-library-passing-info-in-intent", "StackOverflow is the right place for usage questions. This isn't a bug with the library. This happens when you have a generic type (presumably `Video`) and are not passing generic information with a `TypeToken`.\n =||= ", 0], ["930", "Added PostConstruct Factory sample in Extras.", "Inderjeet Singh", "inder123", "10/03/16, 11:46:58 PM", "NaN", ":100: \n =||= ", ["930", "Added PostConstruct Factory sample in Extras.", "Inderjeet Singh", "inder123", "10/03/16, 11:46:58 PM", "NaN", "NaN"], ["Inderjeet Singh", "Added PostConstruct Factory sample in Extras.", "09/17/16, 12:35:34 AM", "Inderjeet Singh", "4512f31c698d41cdd97144187fb3ed3b94102768", ["extras/pom.xml", "extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java", "extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java"], "@@ -40,9 +40,14 @@\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.3.1</version>\n+      <version>2.7</version>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>javax.annotation</groupId>\n+      <artifactId>jsr250-api</artifactId>\n+      <version>1.0</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n@@ -86,16 +91,16 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-compiler-plugin</artifactId>\n-        <version>3.2</version>\n+        <version>3.5.1</version>\n         <configuration>\n-          <source>1.5</source>\n-          <target>1.5</target>\n+          <source>1.6</source>\n+          <target>1.6</target>\n         </configuration>\n       </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n-        <version>2.5</version>\n+        <version>3.0.2</version>\n         <executions>\n           <execution>\n             <phase>package</phase>\n@@ -113,7 +118,7 @@\n       <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-source-plugin</artifactId>\n-         <version>2.4</version>\n+         <version>3.0.1</version>\n          <executions>\n            <execution>\n              <id>attach-sources</id>\n@@ -127,7 +132,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n-         <version>2.10.1</version>\n+         <version>2.10.4</version>\n          <executions>\n            <execution>\n              <id>attach-javadocs</id>\n@@ -147,7 +152,7 @@\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-eclipse-plugin</artifactId>\n-         <version>2.9</version>\n+         <version>2.10</version>\n          <configuration>\n            <downloadSources>true</downloadSources>\n            <downloadJavadocs>true</downloadJavadocs>, @@ -0,0 +1,76 @@\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+public class PostConstructAdapterFactory implements TypeAdapterFactory {\n+    // copied from https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a\n+    @Override\n+    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\n+        for (Class<?> t = type.getRawType(); t != Object.class; t = t.getSuperclass()) {\n+            for (Method m : t.getDeclaredMethods()) {\n+                if (m.isAnnotationPresent(PostConstruct.class)) {\n+                    m.setAccessible(true);\n+                    TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\n+                    return new PostConstructAdapter<T>(delegate, m);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    final static class PostConstructAdapter<T> extends TypeAdapter<T> {\n+        private final TypeAdapter<T> delegate;\n+        private final Method method;\n+\n+        public PostConstructAdapter(TypeAdapter<T> delegate, Method method) {\n+            this.delegate = delegate;\n+            this.method = method;\n+        }\n+\n+        @Override public T read(JsonReader in) throws IOException {\n+            T result = delegate.read(in);\n+            if (result != null) {\n+                try {\n+                    method.invoke(result);\n+                } catch (IllegalAccessException e) {\n+                    throw new AssertionError();\n+                } catch (InvocationTargetException e) {\n+                    if (e.getCause() instanceof RuntimeException) throw (RuntimeException) e.getCause();\n+                    throw new RuntimeException(e.getCause());\n+                }\n+            }\n+            return result;\n+        }\n+\n+        @Override public void write(JsonWriter out, T value) throws IOException {\n+            delegate.write(out, value);\n+        }\n+    }\n+}\n\\ No newline at end of file, @@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2016 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+import junit.framework.TestCase;\n+\n+public class PostConstructAdapterFactoryTest extends TestCase {\n+    public void test() throws Exception {\n+        Gson gson = new GsonBuilder()\n+                .registerTypeAdapterFactory(new PostConstructAdapterFactory())\n+                .create();\n+        gson.fromJson(\"{\\\"bread\\\": \\\"white\\\", \\\"cheese\\\": \\\"cheddar\\\"}\", Sandwich.class);\n+        try {\n+            gson.fromJson(\"{\\\"bread\\\": \\\"cheesey bread\\\", \\\"cheese\\\": \\\"swiss\\\"}\", Sandwich.class);\n+            fail();\n+        } catch (IllegalArgumentException expected) {\n+            assertEquals(\"too cheesey\", expected.getMessage());\n+        }\n+    }\n+\n+    static class Sandwich {\n+        String bread;\n+        String cheese;\n+\n+        @PostConstruct void validate() {\n+            if (bread.equals(\"cheesey bread\") && cheese != null) {\n+                throw new IllegalArgumentException(\"too cheesey\");\n+            }\n+        }\n+    }\n+}, ", 139, 8, "\"modified, added, added, \"", 147], 1], ["931", "Remove deprecated useDefaultManifestFile for jar plugin", "Heidi Dong", "heidid", "09/19/16, 05:44:19 AM", "Addresses #928 ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it!\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Thanks\n =||= ", ["931", "Remove deprecated useDefaultManifestFile for jar plugin", "Heidi Dong", "heidid", "09/19/16, 05:44:19 AM", "Addresses #928 ", "NaN"], ["Heidi Dong", "Remove deprecated useDefaultManifestFile for jar plugin", "09/17/16, 07:23:49 AM", "Heidi Dong", "e10442714e4ffbc7caaab08bbe4fa83e9ecdcde3", ["pom.xml"], "@@ -77,9 +77,6 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-jar-plugin</artifactId>\n-          <configuration>\n-            <useDefaultManifestFile>true</useDefaultManifestFile>\n-          </configuration>\n         </plugin>\n       </plugins>\n     </pluginManagement>, ", 0, 3, "\"modified, \"", 3], 1], ["932", "JsonPrimitive equals() Class<?> comparison", "Carter Hudson", "carterhudson", "09/20/16, 12:04:00 AM", "NaN", "NaN", 0], ["933", "Security scan reported problem with com.google.gson.internal.StringMap", null, "venusjain10", "02/07/17, 03:46:57 PM", "We are using GSON APIs in our project and security scan on our code has reported following problem. Could you please let me know if this is of any concern or it can be fixed in new version of this API.\n\n**Problem:** Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\n**Recommendations (Generated by tool)**\nIf this random number is used where security is a concern, such as generating a session identifier or cryptographic key, use a trusted cryptographic random number generator instead\n\ncom.google.gson.internal.StringMap", "This type no longer exists.\n =||= Does that mean switching to the latest API version would resolve the issue?\n =||= It means whatever issue you purport to have found doesn't exist in the\nlatest version and thus is hard to access.\n\nOn Mon, Sep 26, 2016, 8:05 PM abhisheksharma43 notifications@github.com\nwrote:\n\n> Does that mean switching to the latest API version would resolve the issue?\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/933#issuecomment-249732492, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEckv201gCIg-u3n-GzPZfYZ9zf8qks5quF3QgaJpZM4KHDYE\n> .\n =||= ", 0], ["934", "Security scan reported problem with com.google.gson.stream.JsonReader ", null, "venusjain10", "09/27/16, 02:45:47 AM", "We are using GSON APIs in our project and security scan on our code has reported following problem. Could you please let me know if this is of any concern or it can be fixed in new version of this API.\n\n**Problem:** Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.\n\n**Recommendations (Generated by tool)**\nUse the equals() method to compare strings, not the '==' or '!=' operator\n\n**Class:**\n com.google.gson.stream.JsonReader", "There are no string comparisons. Only char or int.\n =||= ", 0], ["937", "Json primitive lru cache", "Deleted user", "ghost", "12/15/16, 06:04:22 AM", "This addresses performance problems found in our message passing system daemon that uses Gson for JSON serialization.  The pattern followed is the same as in the Java VM for string interning or StringPool by using an LRU cache to reduce allocations of the same immutable objects.  \n\nIn this particular use case, we are processing multiple concurrent requests with large JSON payloads.  The process was crashing with the exception: \u201cjava.lang.OutOfMemoryError: GC overhead limit exceeded\u201d.  We found by use of a profiler that Gson JsonPrimitive object creation was overloading the GC with allocations.   After these changes this use case is successful.   \n\nBy adding a small, optionally enabled, LRU Cache we found that for strings we get 100:1 hit to miss ratio resulting in significantly fewer allocations by reusing the same immutable JsonPrimitive objects.  JsonPrimitive of Numbers type are less reused, though our system is strongly weighted towards using strings.\n\nThe JsonPrimitive of type Boolean is cached in static objects given there are only two permutations.\n\nPreferably I wanted to make the JsonPrimitive fully immutable but didn\u2019t want to break the backwards compatibility for those not wanting to enable the cache.\n\nThe cache:\n1.  Can be optionally enabled/disabled\nvoid JsonPrimitive.setCacheEnabled(boolean enableCache)\n2.  Has a settable max size for caches for String and Number types\nvoid JsonPrimitive.setCacheSizes(boolean string, boolean number)\n3.  Has settable max size of JsonPrimitive of type String to be cached\nvoid setMaxStringCacheSize(int maxStringSize)\n4.  Get statistics for hit/miss ratio\nCacheStats getCacheStats()", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= If you are concerned about memory consumption, you should not use Gson to parse into a DOM of JsonElements. \n =||= @inder123 The LRU cache is less about overall memory consumption and more about the fact that small objects are created and destroyed quickly.  The Java Object to JSON String format conversion introduces many small short lived objects.  The creation of these can outpace the garbage collector's ability to clean them up.  Making the JsonPrimitive objects (the key contributor) to use a cache makes it such that the same JsonPrimitive for a String or Number can be reused and just referenced instead of allocated and de-allocated in the heap.  This presumes that your object model has some repetition in it, the cache would not be useful if all your JSON name/values were all unique in every use.  For example, we have a reference field our object model called \"selfLink\".  When users access our REST API the same cached JsonPrimitive(\"selfLink\") can be referenced over and over again by different requests without adding any allocation / de-allocation beyond the initial one that gets cached.\n\nThe trade-offs here are memory consumed by the cache vs CPU usage in allocation / de-allocation.  This is disabled by default (existing behavior), each consumer of Gson would need to make the choice to enable this new feature or not and tune for their program's and environment.\n =||= Thanks for the details @speters-f5 \nIn general, we much prefer Pull Requests with no new APIs. Is there a way to do smaller scale version of this PR that interns the repeated objects?\n =||= Also, note that Gson internally doesn't use JsonElement based DOM anymore for toJson() calls. So, the memory consumption is there only when you explicitly ask Gson to parse to a DOM.\n =||= @inder123 I wasn't aware of the shift to no longer use JsonElements internally when going from Java object to JSON string in toJson().  That will likely make this pull request irrelevant.  Please disregard this pull request for now.  We will need to re-factor our code and profile it with the latest Gson to see if a cache is even still necessary and keep performance where we need it.  Can you confirm that fromJson() also bypasses JsonElement objects now when going from string to Java Object?\n\nThank you.\n =||= Yes, fromJson also bypasses JsonElements. =||= ", 0], ["938", "Make GsonBuilder non-final", "Martin von Gagern", "gagern", "10/04/16, 04:57:34 PM", "This allows for projects to store common project-specific settings in the constructor of a derived class, which in some scenarios feels more natural than a static method which creates a new builder instance.\n\nOr is there a reason the builder has to be final? Unfortunately the public history doesn't extend that far into the past, so the git log doesn't help answering that question.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= As a design principle, Gson doesn't support extension through inheritence. The reason is to avoid unforseen API commitments that we will need to continue supporting in future.\n\nYou will need to indicate a substantial benefit before we will accept this.\n =||= ", 0], ["939", "Serialization randomly hangs with Retrofit", null, "NoHarmDan", "10/19/16, 12:05:12 PM", "Hello,\n\nWhen using Retrofit's Gson Converter, the serialization sometimes randomly hangs as [described in this StackOverflow question](http://stackoverflow.com/questions/34735639/retrofit-realmlist-gson-stuck-in-a-loop-until-out-of-memory). With the only difference that it doesn't run out of memory but ultimately after several minutes (3-7) sends the request and gets response normally.\n\nI blamed it on Realm, [as described in this Retrofit issue thread](https://github.com/square/retrofit/issues/2040), but it turns out the same issue happens with the simplest POJOs as well. There are no circular references and I wouldn't expect lists, inheritance and object attributes to be the cause (happens also with objects that only have the simplest attribute types, for example integers and strings).\n\nI'm using Retrofit v2.1.0, build tools v23.0.3, target SDK v23 and compile SDK v24. I have tried older versions of Gson Converter and other SDK combinations to no effect - although it seems this problem didn't start happening until about a week ago, after a release of an SDK update (I'm uncertain about that though, because we started noticing the problem very slowly and can't really tell the circumstances of when it started to happen.)", "Please provide a test case\n\nOn Thu, Oct 6, 2016 at 10:47 AM NoHarmDan notifications@github.com wrote:\n\n> Hello,\n> \n> When using Retrofit's Gson Converter, the serialization sometimes randomly\n> hangs as described in this StackOverflow question\n> http://stackoverflow.com/questions/34735639/retrofit-realmlist-gson-stuck-in-a-loop-until-out-of-memory.\n> With the only difference that it doesn't run out of memory but ultimately\n> after several minutes (3-7) sends the request and gets response normally.\n> \n> I blamed it on Realm, as described in this Retrofit issue thread\n> https://github.com/square/retrofit/issues/2040, but it turns out the\n> same issue happens with the simplest POJOs as well. There are no circular\n> references and I wouldn't expect lists, inheritance and object attributes\n> to be the cause (happens also with objects that only have the simplest\n> attribute types, for example integers and strings).\n> \n> I'm using Retrofit v2.1.0, build tools v23.0.3, target SDK v23 and compile\n> SDK v24. I have tried older versions of Gson Converter and other SDK\n> combinations to no effect - although it seems this problem didn't start\n> happening until about a week ago, after a release of an SDK update (I'm\n> uncertain about that though, because we started noticing the problem very\n> slowly and can't really tell the circumstances of when it started to\n> happen.)\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/939, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEfrzU5p5_EXQlalaUv6rQxhn6tDFks5qxQnygaJpZM4KQB7J\n> .\n =||= When using Retrofit 2.1.1 snapshot and not trying to convert RealmObjects, all works just fine. It was probably a combination of issues with Realm and Retrofit not closing all connections. (Curiously trying to convert Json into a RealmObject works with no issues whatsoever.)\n =||= I have seen that the current InputStreamReader hangs if the response is too big.\nRetrofit should consider wrapping it in BufferedReader, @JakeWharton.\n =||= Retrofit uses Okio not java.io. There's already a layer of buffering\nbeneath the Reader we pass to Gson.\n\nOn Wed, Oct 26, 2016, 2:03 AM inder123 notifications@github.com wrote:\n\n> I have seen that the current InputStreamReader hangs if the response is\n> too big.\n> Retrofit should consider wrapping it in BufferedReader, @JakeWharton\n> https://github.com/JakeWharton.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/939#issuecomment-256222049, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEETMtgvNJy8wLb_-_oJPxSKh6BAIZks5q3qbLgaJpZM4KQB7J\n> .\n =||= ", 0], ["940", "\"type\" field in RuntimeTypeAdapterFactory is getting removed from JSON", "Aravind Santhanam", "aravinds03", "10/07/16, 09:33:15 PM", "Hi,\nIn https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java#L202, I see that \"type\" field is getting removed while reading JSON. \n\nHence, I am not able to identify exact subType without using this field now. Instead, I have to use \"instanceof\" to identify what exact sub-class is de-serialized from gson lib.\n\nIs there any reason why you are altering the JSON?\nIf yes, what is the best way to identify the exact sub-class after retrieving the object ?", "Look at the class RuntimeTypeAdapterFactory in \nhttps://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java that does what you are asking for.\n =||= Are you saying that I should copy-paste the RuntimeTypeAdapterFactory class defined in FunctionalTest file?\n\nShouldn't be fixed in extras package itself?\n =||= ", 0], ["941", "Get JsonObject Keys?", "Mark Hess", "hessmjr", "12/14/16, 06:46:34 AM", "Is there specific reason a JsonObject doesn't return a set of keys as Strings such as Java's Map data structure?  Seems like a simple and useful method especially considering the similarities between the two data structures.", "Submitted a PR for this since its fairly simple. #942 \n =||= This is done. =||= ", 0], ["942", "Add keySet method and test", "Mark Hess", "hessmjr", "12/14/16, 06:15:49 AM", "# Overview\n\nAdds keySet method similar to that of Java Map.  Since all Map.entries utilize strings as a key.  Test method also included.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= This addresses the issue I opened, #941 .\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= \ud83d\udc4d  =||= ", ["942", "Add keySet method and test", "Mark Hess", "hessmjr", "12/14/16, 06:15:49 AM", "# Overview\n\nAdds keySet method similar to that of Java Map.  Since all Map.entries utilize strings as a key.  Test method also included.", "NaN"], ["mark", "Add keySet method and test", "10/07/16, 10:35:07 PM", "mark", "8570ffab75cc370bebb4fa5f593c40356fe89842", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/test/java/com/google/gson/JsonObjectTest.java"], "@@ -132,6 +132,15 @@ private JsonElement createJsonElement(Object value) {\n     return members.entrySet();\n   }\n \n+  /**\n+   * Returns a set of members key values.\n+   *\n+   * @return a set of member keys as Strings\n+   */\n+  public Set<String> keySet() {\n+    return members.keySet();\n+  }\n+\n   /**\n    * Returns the number of key/value pairs in the object.\n    *, @@ -183,4 +183,19 @@ public void testDeepCopy() {\n     assertEquals(1, original.get(\"key\").getAsJsonArray().size());\n     assertEquals(0, copy.get(\"key\").getAsJsonArray().size());\n   }\n+\n+  /**\n+   * From issue 941\n+   */\n+  public void testKeySet() {\n+    JsonObject a = new JsonObject();\n+\n+    a.add(\"foo\", new JsonArray());\n+    a.add(\"bar\", new JsonObject());\n+\n+    assertEquals(2, a.size());\n+    assertEquals(2, a.keySet().size());\n+    assertTrue(a.keySet().contains(\"foo\"));\n+    assertTrue(a.keySet().contains(\"bar\"));\n+  }\n }, ", 24, 0, "\"modified, modified, \"", 24], 1], ["943", "README.md Add a 2nd third party tutorial resource", "Norman Peitek", "peitek", "10/26/16, 01:23:43 AM", "[Future Studio](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) has published over 20 tutorials on Gson with some more to come soon. Developers interested in Gson would benefit from practical introductions to this amazing library.", "NaN", ["943", "README.md Add a 2nd third party tutorial resource", "Norman Peitek", "peitek", "10/26/16, 01:23:43 AM", "[Future Studio](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) has published over 20 tutorials on Gson with some more to come soon. Developers interested in Gson would benefit from practical introductions to this amazing library.", "NaN"], ["Norman Peitek", "README.md Add a 2nd third party tutorial resource", "10/07/16, 08:40:45 PM", "GitHub", "61d46cb971717951da2b80983a129a249d70969d", ["README.md"], "@@ -30,6 +30,7 @@ Please use the [google-gson Google group](http://groups.google.com/group/google-\n \n ###*Gson-related Content Created by Third Parties*\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+  * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n \n ###*License*\n , ", 1, 0, "\"modified, \"", 1], 1], ["945", "Added support for customising non-executable prefix for json ", "Yash Srivastav", "yashsriv", "12/05/16, 01:20:36 PM", "This adds support for setting a custom non-executable prefix, during generation of JSON as well as during parsing.\n\nFixes #551 \n\nP.S. Criticisms and suggestions welcome.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it! @googlebot \n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= This has been pending for a long time. Is there anything I can do to get this to merge? =||= No. If you need this, consume the prefix before creating your JsonReader. =||= GsonBuilder already removes one of the (semi?) standard prefix - `)]}'\\n`, this PR adds an option to customize the prefix. \r\n\r\nI originally sent in this P.R. while working with Retrofit on Android. They expect a `GsonBuilder` instance for parsing JSON. Now, we wanted to consume the prefix and I thought - wow it already has support for a prefix - `)]}'\\n`. So I don't need to do anything. Turns out the default prefix supported by Angular2 is `)]}',\\n` (an additional comma before newline -- another semi-standard?). This simple change must have been easy to set using Gson settings.\r\n\r\nUnfortunately there was no way to do that and we had to copy another Retrofit class and change it in just one place before sending it to json for parsing. Changes - `+122 -3`. If this feature was available `+1 -1`.\r\n\r\nNow its debatable that it is not the responsibility of the json parser to handle this extra prefix but rather the job of the client code before sending it to the parser. But, there's an issue already filed to do it in Gson repository, so its not an isolated requirement and no one has sent a PR to it as yet. Its convenient to expose the api to configure the prefix so that more such 'standard' prefixes can be taken care of in future.\r\n\r\nAs a friend of mine suggested, changing the base constructor of `Gson` might break the api for some other clients. I'm willing to add an overloaded constructor in case that is needed.\r\n\r\nRequest you to please consider #551 again =||= +1 =||= ", 0], ["948", "Gson skip call of specified TypeAdapter if value is null", null, "StanisVS", "11/27/16, 11:24:08 PM", "reproduced on 2.7 version\n\nHere is some test.\n\n``` java\n public static class A {\n        @JsonAdapter(NullTolerantStringAdapter.class)\n        String nonNullString = \"\";\n\n        public static class NullTolerantStringAdapter extends TypeAdapter<String> {\n\n            @Override\n            public void write(JsonWriter out, String value) throws IOException {\n                out.value(value);\n            }\n\n            @Override\n            public String read(JsonReader in) throws IOException {\n                String val = in.nextString();\n                return val != null ? val : \"\";\n            }\n        }\n    }\n\n    @Test\n    public void testNullDeserialization () {\n        A a = new A();\n        a.nonNullString = null;\n\n        Gson gson = new GsonBuilder().create();\n        String json = gson.toJson(a);\n        A deserialized = gson.fromJson(json, A.class);\n\n        assertThat(deserialized.nonNullString).isNotNull();\n\n        Gson gsonWithNull = new GsonBuilder().serializeNulls().create();\n        String jsonWithNull = gson.toJson(a);\n        A deserializedWithNull = gsonWithNull.fromJson(jsonWithNull, A.class);\n\n        assertThat(deserializedWithNull.nonNullString).isNotNull();\n    }\n```\n\nFirst assert is passed (with no value for field custom read method is also not called but ok)\n\nSecond assert is not passed because custom read never called.\n\nSo I can't see how to guarantee non nullability for field without custom TypeAdapter for the whole class. ", "This is the default behavior of Gson. Null values don't invoke type adapters. =||= > This is the default behavior of Gson. Null values don't invoke type adapters.\r\n\r\nSeriously? Null values do not invoke type adapters. Null values do not invoke custom deserializers... Does it mean it's impossible to override null deserialization in Gson? \r\n\r\nSucks if it's true. =||= If this is the default behavior, then is there a way to override it? =||= ", 0], ["953", "How can I open .json file and add JsonObject to exists JSONArray?", null, "akhorevich", "01/02/17, 08:29:11 PM", "Please help me! I tryed to create new .json file and append to JsonArray new JsonObject? Thank you!", "Please ask usage questions on StackOverflow with the 'gson' tag. This tracker is for bugs and feature requests only. =||= ", 0], ["954", "Allow existing type field name if it serializes to the same value", "Stefan Kersten", "kaoskorobase", "11/16/17, 09:18:13 PM", "Instead of failing in `RuntimeTypeAdapterFactory` when there is an existing `type` field name, only fail if its value differs from the computed value. This allows to store the type name in the serialized object's type field.\r", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= Signed.\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= Assigned to @swankjesse, the author of this feature. =||= I need the `type` field to be included in deserialization; AFAIU `transient` excludes the field from both serialization and deserialization, doesn't it?\r\n\r\nWhat makes you think it's not a good idea? I've just noticed that an additional check is required before calling `getAsString()`, I can adapt the PR if needed.\r\n =||= ", 0], ["955", "Update gson version to 2.8 in Maven example", "Greg", "melquiadess", "11/08/16, 04:16:33 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= ", ["955", "Update gson version to 2.8 in Maven example", "Greg", "melquiadess", "11/08/16, 04:16:33 PM", "NaN", "NaN"], ["Greg Koblanski (melquiades)", "Update gson version used in the Maven example", "11/08/16, 04:13:31 PM", "Greg Koblanski (melquiades)", "9a2d8a20a460d5d5fd3936e6789fb82525459312", ["UserGuide.md"], "@@ -79,7 +79,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.7</version>\n+      <version>2.8</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["958", "Design Document links to old site, which links back to Github", "Christen Gottschlich", "gatchi", "11/15/16, 05:21:30 AM", "The link to the Design Document on the User Guide on github links to an old site for this project (https://sites.google.com/site/gson/gson-design-document), which links to the same github the User Guide is hosted on (https://github.com/google/gson/blob/master/GsonDesignDocument.md).  Might as well link directly instead using a beautiful, giant \"**THIS PAGE HAS BEEN MOVED TO GITHUB AT**:\" indirect redirect.", "Thanks for the bug report.\n =||= ", 0], ["959", "null-valued properties are not serialized", "Andy Edwards", "jedwards1211", "11/16/16, 05:02:39 AM", "```java\r\nJsonObject obj = new JsonObject();\r\nobj.add(\"hello\", JsonNull.INSTANCE);\r\nSystem.out.println(new Gson().toJson(obj));\r\n```\r\nExpected output: `{\"hello\": null}`\r\nActual output: `{}`\r\nGSON 2.8.0", "By default, `null` fields are ignored.\nSee https://github.com/google/gson/blob/master/UserGuide.md#TOC-Null-Object-Support\n =||= Oh, okay, thanks for the link.  Is this the default for any other JSON libraries?  I know it's not the default for `JSON.stringify` in JS.\n =||= It's the default for all of the big ones for Java for surem\n\nOn Wed, Nov 16, 2016, 8:14 AM Andy Edwards notifications@github.com wrote:\n\n> Oh, okay, thanks for letting me know. Is this the default for any other\n> JSON libraries? I know it's not the default for JSON.stringify in JS.\n> \n> \u2014\n> You are receiving this because you modified the open/close state.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/959#issuecomment-260989341, or mute\n> the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEQwyE54TTfC8_mvyVAODvEbGPtoCks5q-yuegaJpZM4KzVZH\n> .\n =||= ", 0], ["960", "Escaping throws exception when escaping a non special character", "Gyula Lakatos", "laxika", "11/18/16, 02:09:23 PM", "Escaping throws a MalformedJsonException when trying to escape a character that's not special and doesn't require escaping.\r\n\r\nExample:\r\n`\r\n{\r\n  \"property\": \"123456\\!@\"\r\n}\r\n`\r\n\r\nAs far as I know the [RFC ](https://tools.ietf.org/html/rfc7159#section-7)says that:\r\n\r\n> \"Any character may be escaped.\"\r\n\r\nIt's broke first in 2.7 in the https://github.com/google/gson/commit/3f8726ecafe9c40498255eed1d1893fd665e237b commit.\r\n\r\nThis is a problem for us because we have a huge amount of json files to read and can't replace the occurrence of this ambiguous escaping because it happens a LOT of times.\r", "When the spec says \u201cany character may be escaped\u201d it means that any character may be replaced with a `\\u0000` escape. It doesn\u2019t mean that any character can be preceded by a `\\`. \n =||= ", 0], ["961", "Stackoverflow Exception", "ly_one", "pinkApple", "11/22/16, 05:06:22 AM", "this is my code:\r\n```    \r\npublic <T> T strToObj(String jsonText, Class<T> clazz) {\r\n\r\ntry {\r\n             ...\r\n              ...\r\n               ...\r\n            return gson.fromJson(otherText, clazz);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n```\r\n\r\nand I get this error:\r\n    `\r\n\r\n\r\n\r\n`\r\n            \r\n\r\n\r\n\r\n\r", "Please provide a failing test case or full sample that demonstrates the\nproblem.\n\nOn Fri, Nov 18, 2016, 10:18 PM \u5218\u5c27 notifications@github.com wrote:\n\n> this is my code:\n> public <T> T strToObj(String jsonText, Class<T> clazz) { try { ... ... ...\n> return gson.fromJson(otherText, clazz); } catch (Exception e) { return\n> null; } }\n> \n> and I get this error:\n> `\n> \n> `\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/google/gson/issues/961, or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAEEEWSaumYPYe2SMl6rARiLg5oe8r84ks5q_mpngaJpZM4K3JUG\n> .\n =||= @JakeWharton \nmaybe I find out what cause the problem : too many threads all start!\nthe more threads , the slower the gson be.\nbecause I have many requests when app start -- > sync data from server;\n requests callback commonly in main thread, and i should to use gson to deal with it.\nso my app stuck, and the logcat like this:\n\n```\n7:01:01.640 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 31.135ms\n11-19 17:01:01.680 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 196373(4MB) AllocSpace objects, 63(1512KB) LOS objects, 11% free, 50MB/56MB, paused 28.821ms total 266.507ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:02.540 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 99.532ms\n11-19 17:01:02.610 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 175180(4MB) AllocSpace objects, 57(1368KB) LOS objects, 9% free, 51MB/56MB, paused 22.182ms total 246.153ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:02.610 3880-3900/com.angding.smartnote I/art: WaitForGcToComplete blocked for 130.090ms for cause HeapTrim\n11-19 17:01:03.450 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 7.613ms\n11-19 17:01:03.490 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 169932(4MB) AllocSpace objects, 54(1296KB) LOS objects, 8% free, 52MB/56MB, paused 27.245ms total 209.410ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:03.500 3880-3901/com.angding.smartnote W/art: Suspending all threads took: 6.016ms\n11-19 17:01:03.950 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 5.420ms\n11-19 17:01:04.210 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 94.489ms\n11-19 17:01:04.260 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 135096(3MB) AllocSpace objects, 47(1128KB) LOS objects, 7% free, 52MB/56MB, paused 23.050ms total 191.522ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:04.990 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 130048(3MB) AllocSpace objects, 38(912KB) LOS objects, 5% free, 53MB/56MB, paused 26.509ms total 206.805ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:06.200 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 752.960ms\n11-19 17:01:06.270 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 25.067ms\n11-19 17:01:06.320 3880-3901/com.angding.smartnote I/art: Background partial concurrent mark sweep GC freed 135880(3MB) AllocSpace objects, 38(912KB) LOS objects, 23% free, 53MB/69MB, paused 22.769ms total 926.133ms at GCDaemon thread CareAboutPauseTimes 1\n11-19 17:01:06.410 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 6.861ms\n11-19 17:01:06.640 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 6.576ms\n11-19 17:01:07.970 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 5.436ms\n11-19 17:01:08.500 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 29.346ms\n11-19 17:01:08.550 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 460108(11MB) AllocSpace objects, 142(3MB) LOS objects, 12% free, 55MB/63MB, paused 28.407ms total 257.707ms at GCDaemon thread CareAboutPauseTimes 1\nc11-19 17:01:09.580 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 109.908ms\n11-19 17:01:09.660 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 22.475ms\n```\n\nbut using gson 1.7 do not have this problem.\nwhat's diff to use 2.8?\n =||= something new I found , the circular reference causes this problem,\r\nit happened in this situation:\r\n      tag\r\n---------- tag\r\n     tag\r\n---------tag   tag  tag\r\n\r\n  so , one partner made this fool design,   tag --> filed , List\\<tag\\>\r\nit finally crashed with StackOverflowError~\r\n\r\nand this not happened in version 1.7, when updated to 2.8, this problem occurred. \r\n\r\nthis issue resolved -- closed it. =||= ", 0], ["962", "Add a convenience builder method to register a collection of TypeAdapterFactories", "Zac Sweers", "ZacSweers", "03/28/20, 12:35:11 AM", "To use us as an example: We have cases where we hand down a set of factories (via Dagger 2's multibindings) downstream, so this is a nice convenience.\r\n\r\nNote that I didn't see where the appropriate place to add tests for this were, as `GsonBuilderTest` seems more focused on its construction semantics rather than verifying that its builder methods behave correctly. Let me know if there's a place where I should add any.", "I don't find it much useful. Build a stronger case please. =||= It's a convenience method on a builder. While it might not be personally useful to you, it would be useful to others, and comes at no real cost. Dagger multibindings seem like a fair enough example, it comes in handy if you have multiple modules supplying their own factories into a multibinding.\r\n\r\nWhat usefulness bar do you think it needs to meet your requirements? =||= The cost is bloating of GsonBuilder API, we don't add methods just because it is a minor convenience to some.\r\nDagger multibinding seems interesting but I have never used something like that (I haven't used Dagger). May be @JakeWharton or @swankjesse can opine?  =||= ", 0], ["963", "#957 Added maven-bundle-plugin and changed packaging to 'bundle'.", "Rakesh.A", "iamrakesh", "09/20/17, 01:22:43 AM", "Fix for #957 ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit https://cla.developers.google.com/ to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla -->\n =||= I signed it\n =||= CLAs look good, thanks!\n\n<!-- ok -->\n =||= When we did this in OkHttp it broke our users.\r\nhttps://github.com/square/okhttp/issues/2243 =||= @swankjesse - Issue you mentioned (ClassNotFoundException for OkHostnameVerifier) is due to usage of class from 'okhttp3.internal.tls' package, which seems internal and was not supposed to be directly used (if I've to go by package name); Same case with gson as well, 'internal' package is not supposed to be directly used, it is not exported by default, and is not available in an OSGI environment. =||= It seems [this](https://github.com/google/gson/commit/08c7bffba0e93611162cadfaf2ee03e3d143e7d1#diff-b870e20e5600e8e051854b3fa6a8a1b5) check-in tries to solve this in a different way.\r\n\r\nThough I have one observation on the generated MANIFEST.MF -\r\n'Import-Package' manifest entry with value 'com.google.gson.annotations' is not correct. =||= Hi All,\r\n\r\nchanging the packaging to bundle may have other side effects on the .class packaged inside the final jar.\r\n\r\nI instead suggest that the maven-bundle-plugin is used in it form that does not change the \"packaging\" like it is described [here](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#adding-osgi-metadata-to-existing-projects-without-changing-the-packaging-type). In synthesis, it is required the manifest goal bound to the process-classes phase, and configure the maven-jar-plugin to package the processed manifest:\r\n\r\n```\r\n<plugin>\r\n  <artifactId>maven-jar-plugin</artifactId>\r\n  <configuration>\r\n    <archive>  \r\n      <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\r\n    </archive> \r\n  </configuration>\r\n</plugin>  \r\n<plugin>   \r\n  <groupId>org.apache.felix</groupId>\r\n  <artifactId>maven-bundle-plugin</artifactId>\r\n  <executions>\r\n    <execution>\r\n      <id>bundle-manifest</id>\r\n      <phase>process-classes</phase>\r\n      <goals>    \r\n        <goal>manifest</goal>\r\n      </goals>\r\n    </execution>\r\n  </executions>\r\n</plugin>\r\n```\r\n\r\n =||= Another note:\r\nI suggest to use a more recent version of the, [maven-bundle-plugin](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.felix%22%20AND%20a%3A%22maven-bundle-plugin%22) \r\n\r\nlast release is the one month old 3.3.0.\r\n =||= > changing the packaging to bundle may have other side effects on the .class packaged inside the final jar.\r\n\r\nCould you please elaborate or provide a link that I can refer ? =||= Finally, \r\nthe <Export-Package> should be specified explicitly so to export also packages `com.google.gson.internal` and `com.google.gson.internal.bind`, which are excluded by the [maven-bundle-plugin defaults](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#default-behavior)\r\n\r\nGSON 2.5 was exporting these packages:\r\n![image](https://cloud.githubusercontent.com/assets/2135798/25282654/6f3f8fec-26b1-11e7-97a4-355466a6b62f.png)\r\n(and I used these packages to develop a TypeAdapter that supports polymorphism)\r\n\r\nIn GSON 2.6 and 2.7 these <Export-Package> are disappeared:\r\n![image](https://cloud.githubusercontent.com/assets/2135798/25282623/55a171b8-26b1-11e7-9e61-5e5526d77ab8.png)\r\n(and my TypeAdapter does not work anymore)\r\n =||= Hi @iamrakesh \r\n\r\n> Could you please elaborate or provide a link that I can refer ?\r\n\r\ncheck the [instructions of Export-Package](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#instructions):\r\n\r\n> _...These packages are copied into the resulting bundle JAR file from the available classes (i.e., project classes, dependencies, and class path); thus, it is possible to include classes into your bundle that are not associated with source files in your project..._\r\n\r\nThis, as far as I remember, only happens if you change the packaging type to bundle, and it could potentially change the contents of the final Jar as it is different from what it happen using the jar packaging.\r\n\r\nWith the plugin defaults this side effect of  **including classes from dependencies** won't happen, but for this reason, when I develop general purpose libraries used also outside of OSGi context, I always prefer to keep the packaging of type \"jar\" and add OSGi headers with the configuration described in the previous message.  =||= Excluding internal is intended. You shouldn't have used those types since\nthey're clearly marked internal.\n\nOn Fri, Apr 21, 2017, 9:56 AM Cristiano <notifications@github.com> wrote:\n\n> Hi @iamrakesh <https://github.com/iamrakesh>\n>\n> Could you please elaborate or provide a link that I can refer ?\n>\n> check the instructions of Export-Package\n> <http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#instructions>\n> :\n>\n> *...These packages are copied into the resulting bundle JAR file from the\n> available classes (i.e., project classes, dependencies, and class path);\n> thus, it is possible to include classes into your bundle that are not\n> associated with source files in your project...*\n>\n> with the plugin defaults this *inclusion of classes from dependencies*\n> won't happen, but for this reason, when developing general purpose\n> libraries used also outside of OSGi context, I always prefer to keep the\n> packaging of type \"jar\" and include OSGi headers as described in the\n> previous message.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/963#issuecomment-296214126>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEXMEVpuQUrLyvlLS8q17Xt1B08Qnks5ryMOugaJpZM4K3iZ9>\n> .\n>\n =||= I don't think using the bundle packaging will cause issues in this case, especially if you use the plugin's default settings (which work for most cases).  Also, the plugin will *not* (by default) export any packages with \"impl\" or \"internal\" in them.  This is by design as these are typically classes not meant for folks to use outside the bundle.  \r\n =||= > Excluding internal is intended. You shouldn't have used those types since\r\nthey're clearly marked internal.\r\n\r\nThere is difference between \"I shouldn't use\" and \"I can't use\": for an open source project, an internal package is discouraged to be used. For an OSGi project it is different prohibited.\r\nAs a result, my library works with GSON 2.6 and 2.7 everywhere except inside OSGi...\r\n\r\nGSON is not designed as bundle and it won't be maintained as such. Also, in the recent history of GSON, OSGi headers have been removed and re-added many times, probably by people unaware of OSGi technology. \r\n\r\nI think a less intrusive approach (packaging of type **jar** AND exporting all packages including **com.google.gson.internal** and  **com.google.gson.internal.bind**) would have avoided these problems and made GSON more stable for OSGi users.\r\n =||= It's easy to export the other packages, but the packaging type really doesn't make a difference (in this case).  If folks are terribly paranoid about the maven-bundle-plugin including extra classes in the jar file, then switch the packaging type to \"jar\" and let's move on.  If the GSON folks want to export the \"internal\" packages, that's pretty easy too.  Just add the following instruction line to the plugin:\r\n```xml\r\n<Export-Package>{local-packages},com.google.gson.internal.*</Export-Package>\r\n```\r\n\r\nAll we're really interested in is a proper MANIFEST.MF file with the appropriate exports/imports.  @iamrakesh do you want to modify your PR with these settings so we can get this thing moving forward?    =||= By choosing to use OSGi you are at the mercy of the project owners creating\nthe bundle, and since it's us and since the internal package isn't for\npublic use, marking it as not exposed seems like a good thing.\n\nOn Fri, Apr 21, 2017, 12:16 PM James Carman <notifications@github.com>\nwrote:\n\n> It's easy to export the other packages, but the packaging type really\n> doesn't make a difference\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/963#issuecomment-296250571>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZvKURN8q67Jnhb5vF6lT72zChJWks5ryORPgaJpZM4K3iZ9>\n> .\n>\n =||= @JakeWharton totally agree with you.  I'd rather not expose the \"internal\" stuff.  With OSGi, you have the opportunity to make sure folks don't use the classes they're not supposed to be using.  If it were me, I'd take advantage of that fine-grained control that OSGi provides you. =||= @JakeWharton since you and @swankjesse are the two GSON contributors who have commented on this issue, how do you guys propose we move forward?  Would you like to see this PR changed?  Would you like us to provide an alternative approach?  Our team loves GSON and we're an OSGi shop, so we've been stuck with 2.6.2 for a while now.  This prevents us from upgrading to security patches if they come out, so we would really like to see OSGi support come back.   =||= I would love to get it fixed for 2.8 so that it just works for OSGi users\nand we don't have to think about it. None of us are experts here, we just\nknow what our intent is. So if this affords you a working library in OSGi\nand it represents our intent with 'internal' than I'm very supportive.\n\nOn Fri, Apr 21, 2017, 1:58 PM James Carman <notifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/JakeWharton> since you and @swankjesse\n> <https://github.com/swankjesse> are the two GSON contributors who have\n> commented on this issue, how do you guys propose we move forward? Would you\n> like to see this PR changed? Would you like us to provide an alternative\n> approach? Our team loves GSON and we're an OSGi shop, so we've been stuck\n> with 2.6.2 for a while now. This prevents us from upgrading to security\n> patches if they come out, so we would really like to see OSGi support come\n> back.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/963#issuecomment-296277577>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEET2V5ynpcSRglYUcVWck6hfBoIGjks5ryPxsgaJpZM4K3iZ9>\n> .\n>\n =||= I too agree that 'internal' package not exported, this also gives flexibility for authors to change implementation when required even if it is kind of API break (in classes/methods of 'internal' package).\r\n\r\n> @iamrakesh do you want to modify your PR with these settings so we can get this thing moving forward?\r\n\r\nLatest master already has fix, which uses 'maven-jar-plugin', see [this commit](https://github.com/google/gson/commit/08c7bffba0e93611162cadfaf2ee03e3d143e7d1#diff-b870e20e5600e8e051854b3fa6a8a1b5)\r\n'mave-jar-plugin' solution does the required job, any one is fine as long as it works.\r\n =||= Since this hasn't been resolved so far, I am just going to close this for now. =||= ", 0], ["964", "Allow deserialization of a Number represented as a String", "Egor Neliuba", "egor-n", "11/26/16, 07:40:14 AM", "This works:\r\n```\r\ngson.fromJson(\"\\\"15\\\"\", int.class)\r\n```\r\n\r\nThis doesn't:\r\n```\r\ngson.fromJson(\"\\\"15\\\"\", Number.class)\r\n```\r\n\r\nThis PR makes it so the second case works too.", "\ud83d\udc4d  =||= ", ["964", "Allow deserialization of a Number represented as a String", "Egor Neliuba", "egor-n", "11/26/16, 07:40:14 AM", "This works:\n```\ngson.fromJson(\"\\\"15\\\"\", int.class)\n```\n\nThis doesn't:\n```\ngson.fromJson(\"\\\"15\\\"\", Number.class)\n```\n\nThis PR makes it so the second case works too.", "NaN"], ["Egor Neliuba", "Allow deserialization of a Number represented as a String", "11/24/16, 02:36:44 PM", "Egor Neliuba", "1eb677195e8129324e4bbbdb39d04099d2d039bd", ["gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"], "@@ -368,6 +368,7 @@ public Number read(JsonReader in) throws IOException {\n         in.nextNull();\n         return null;\n       case NUMBER:\n+      case STRING:\n         return new LazilyParsedNumber(in.nextString());\n       default:\n         throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);, @@ -158,6 +158,11 @@ public void testNumberDeserialization() {\n     assertEquals(1L, actual.longValue());\n   }\n \n+  public void testNumberAsStringDeserialization() {\n+    Number value = gson.fromJson(\"\\\"18\\\"\", Number.class);\n+    assertEquals(18, value.intValue());\n+  }\n+\n   public void testPrimitiveDoubleAutoboxedSerialization() {\n     assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));\n     assertEquals(\"122.08112002\", gson.toJson(new Double(122.08112002)));, ", 6, 0, "\"modified, modified, \"", 6], 1], ["965", "Expected BEGIN_OBJECT but was STRING", "Dennis Lee", "lby1992", "11/26/16, 01:05:08 PM", "I'm using Gson lib to deserialize the json stirng into Java object, but there is a error occurs.<br>\r\nbelow is the json string:\r\n<pre>\r\n<code>\r\n{\r\n    \"pageInfo\": [\r\n      {\r\n        \"detail\": \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\",\r\n        \"id\": 4,\r\n        \"type\": 0\r\n      }]\r\n}\r\n</code>\r\n</pre>\r\nand the java class:\r\n<pre>\r\n<code>\r\npublic java.util.List<CreditDetailItem> pageInfo;\r\nclass CreditDetailItem {\r\n    public String id;\r\n    public int type;\r\n    public String detail;\r\n}\r\n</code>\r\n</pre>\r\nAnd then an exception thrown: \u2018Expected BEGIN_OBJECT but was STRING\u2019 on the 'detail' property.\r\n<p>\r\nIs there any one can help me?", "Sorry, I didn't build the project after, it runs fine when I rebuild the project. =||= ", 0], ["966", "Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $", null, "LucianWang", "11/27/16, 06:49:30 PM", "com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n\tat com.google.gson.Gson.fromJson(Gson.java:826)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:779)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:728)\r\n\tat readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)\r\n\tat readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)\r\n\tat android.os.Handler.handleCallback(Handler.java:733)\r\n\tat android.os.Handler.dispatchMessage(Handler.java:95)\r\n\tat android.os.Looper.loop(Looper.java:136)\r\n\tat android.app.ActivityThread.main(ActivityThread.java:5013)\r\n\tat java.lang.reflect.Method.invokeNative(Native Method)\r\n\tat java.lang.reflect.Method.invoke(Method.java:515)\r\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)\r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)\r\nCaused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n\tat com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:814)\r\n\t... 12 more\r\njava.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n\tat com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:814)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:779)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:728)\r\n\tat readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)\r\n\tat readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)\r\n\tat android.os.Handler.handleCallback(Handler.java:733)\r\n\tat android.os.Handler.dispatchMessage(Handler.java:95)\r\n\tat android.os.Looper.loop(Looper.java:136)\r\n\tat android.app.ActivityThread.main(ActivityThread.java:5013)\r\n\tat java.lang.reflect.Method.invokeNative(Native Method)\r\n\tat java.lang.reflect.Method.invoke(Method.java:515)\r\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)\r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)\r\n\r\n\r\nOften this kind of problem, I hope you can tell me how to deal with the simple. Or where it is. I don't think it's our problem.", "The exception indicates the problem. The type you asked Gson to deserialize\nwas a list or array but the JSON contained a string or wasn't JSON at all\n(and thus appeared like a string).\n\nOn Sun, Nov 27, 2016, 3:04 AM LucianWang <notifications@github.com> wrote:\n\n> com.google.gson.JsonSyntaxException: java.lang.IllegalStateException:\n> Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\n> at com.google.gson.Gson.fromJson(Gson.java:826)\n> at com.google.gson.Gson.fromJson(Gson.java:779)\n> at com.google.gson.Gson.fromJson(Gson.java:728)\n> at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)\n> at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)\n> at android.os.Handler.handleCallback(Handler.java:733)\n> at android.os.Handler.dispatchMessage(Handler.java:95)\n> at android.os.Looper.loop(Looper.java:136)\n> at android.app.ActivityThread.main(ActivityThread.java:5013)\n> at java.lang.reflect.Method.invokeNative(Native Method)\n> at java.lang.reflect.Method.invoke(Method.java:515)\n> at\n> com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)\n> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)\n> Caused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was\n> STRING at line 1 column 1 path $\n> at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)\n> at\n> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)\n> at\n> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)\n> at com.google.gson.Gson.fromJson(Gson.java:814)\n> ... 12 more\n> java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at\n> line 1 column 1 path $\n> at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)\n> at\n> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)\n> at\n> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)\n> at com.google.gson.Gson.fromJson(Gson.java:814)\n> at com.google.gson.Gson.fromJson(Gson.java:779)\n> at com.google.gson.Gson.fromJson(Gson.java:728)\n> at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)\n> at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)\n> at android.os.Handler.handleCallback(Handler.java:733)\n> at android.os.Handler.dispatchMessage(Handler.java:95)\n> at android.os.Looper.loop(Looper.java:136)\n> at android.app.ActivityThread.main(ActivityThread.java:5013)\n> at java.lang.reflect.Method.invokeNative(Native Method)\n> at java.lang.reflect.Method.invoke(Method.java:515)\n> at\n> com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)\n> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)\n>\n> Often this kind of problem, I hope you can tell me how to deal with the\n> simple. Or where it is. I don't think it's our problem.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/966>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZ7Q9ENsJiHfxUpQMEVlZRWlsbk6ks5rCTmhgaJpZM4K9FyN>\n> .\n>\n =||= Thank you. =||= Hi I have the same problem and this happened all of a sudden previously it was working fine,i'm having a real hard time analyzing what has changed that led to this problem,can someone please have a look at this and help me out,\r\n\r\nif the formatting here is not clear, i have posted in stackoverflow\r\nhttps://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line\r\n\r\n I have this Json Response coming from server:\r\n\r\n\r\n`[{\r\n\t\t\"disposal_type_category\": {\r\n\t\t\t\"category_entry_total\": \"21\"\r\n\t\t},\r\n\t\t\"disposal_types\": [{\r\n\t\t\t\t\"ID\": \"78\",\r\n\t\t\t\t\"entries\": [{\r\n\t\t\t\t\t\t\"ID\": 2584,\r\n\t\t\t\t\t\t\"entry_tally\": \"1\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"ID\": 2578,\r\n\t\t\t\t\t\t\"entry_tally\": \"1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"ID\": \"1323\",\r\n\t\t\t\t\"entries\": [{\r\n\t\t\t\t\t\t\"ID\": 2583,\r\n\t\t\t\t\t\t\"entry_tally\": \"1\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"ID\": 2579,\r\n\t\t\t\t\t\t\"entry_tally\": \"1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"disposal_type_category\": {\r\n\t\t\t\"category_entry_total\": \"25.2\"\r\n\t\t},\r\n\t\t\"disposal_types\": [{\r\n\t\t\t\t\"ID\": \"80\",\r\n\t\t\t\t\"entries\": []\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"ID\": \"84\",\r\n\t\t\t\t\"entries\": []\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]\r\n`\r\n\r\nThis is in my ApiClient.java:\r\n\r\n`public static Retrofit getClient() {\r\n        if (retrofit==null) {\r\n            Gson gson = new GsonBuilder().setLenient().create();\r\n            retrofit = new Retrofit.Builder()\r\n                    .baseUrl(BASE_URL)\r\n                    .addConverterFactory(ScalarsConverterFactory.create())\r\n                    .addConverterFactory(GsonConverterFactory.create(gson))\r\n                    .build();\r\n        }\r\n        return retrofit;\r\n    }`\r\n\r\nThis is in ApiInterface.java:\r\n\r\n`Call<List<Disposal>> getCollection(@Header(\"Authorization\") String token);`\r\n\r\nDisposal.java:\r\n\r\n`public class Disposal {\r\n    @SerializedName(\"disposal_type_category\")\r\n    @Expose\r\n    public DisposalTypeCategory disposalTypeCategory;\r\n    @SerializedName(\"disposal_types\")\r\n    @Expose\r\n    public List<DisposalType> disposalTypes = null;\r\n}\r\n`\r\n\r\nDisposalTypeCategory.java:\r\n\r\n`public class DisposalTypeCategory {\r\n@SerializedName(\"category_entry_total\")\r\n    @Expose\r\n    public String categoryEntryTotal;\r\n}`\r\n\r\nDisposalType.java:\r\n\r\n`public class DisposalType {\r\n@SerializedName(\"ID\")\r\n    @Expose\r\n    public String iD;\r\n@SerializedName(\"entries\")\r\n    @Expose\r\n    public List<Entries> entries = null;\r\n}`\r\n\r\nEntries.java:\r\n\r\n`\r\npublic class Entries {\r\n@SerializedName(\"ID\")\r\n    @Expose\r\n    private int iD;\r\n}`\r\n\r\nI have set setLineant(true) for Gson because if i remove it i will get malformed json exception, even this issue started recently previously was fine, not sure if its related.\r\nThe issue started after 2-3 new fields were added to API and the base url was changed but still the core remains same.\r\n\r\n\r\n =||= how do you solve this problem =||= @kalyakiplangat for me checking everything again with the backend developer and seeing if any API response is returning something not as expected by the app. There were changes made in return format of the API response by backend Dev which I wasn't aware of..so I was expecting string in app but API was sending array =||= I have not declared JSON or Gson anywhere , but why I'm getting error =||= @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked =||= Cleaning the project worked for me =||= Cleaning the project worked for me as well =||= Clean the Project \r\n =||= java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n\r\n\r\nI got a similar error message but cleaning the app did the trick for me  =||= it worked for me too.. =||= cleaning and rebuilding the project helped me to solve this problem... =||= for me too.  =||= for me too =||= For me the problem was this one -> java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 12 column 11 path $.items[0].id\r\n\r\nChanging  `@SerializedName(\"id\")  val id: Id `\r\nto  ` @SerializedName(\"id\")  val id: String `\r\nworked.\r\n =||= If someone is getting this error in AndroidStudio :\r\nTry two things:\r\n1. Roll back to last working conditions. (Revert if you use VCS).\r\n2. In build options Clean project and rebuild. (Worked for me.)\r\n\r\nI'm fairly new to android. Excuse any mistakes if committed.\r\nSuggestions are welcome :) =||= Please go to Build, then clean. This option worked for me. =||= > Please go to Build, then clean. This option worked for me.\r\n\r\nHappy learning :) =||= After cleaning project and rebuilding, still I'm having issue with the same error. Don' t know how to resolve as i already checked all parameter naming conventions not once but thrice. =||= Thanks bro, cleaning project worked for me  =||= > @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked\r\n\r\nwhoa it worked thanks for sharing. =||= Rebuilding the project will fix the issue. =||= cleaning and rebuilding did the trick =||= thanks alot cleaning the project is remedy for the error =||= i got this: \r\nExpected BEGIN_OBJECT but was STRING at line 1 column 2\r\n\r\ni solve by:\r\nyou need an object \"Class\", but you got List<\"Class\"> \r\nso your API need to return response using $data: Class::find()->first();\r\ndont use get() or all(); =||= I got this problem when making some changes to square calendar widget.\r\nBut thankfully, I solved it by **cleaning and rebuilding** the project! \r\nI hate these errors that come out of blue without reason ;/\r\n =||= cleaning project and rebuilding worked for me as well =||= Cleaning the project worked for me\r\n =||= gradlew clean worked for me. =||= * What went wrong:\r\nExecution failed for task ':app:mergeDexDebug'.\r\n> java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n\r\n\r\nplz suggest the solution of the error =||= Here are two answer on stack overflow for the same type of issue. Plz,  have a look once.\r\n\r\nhttps://stackoverflow.com/questions/28418662/expected-begin-object-but-was-string-at-line-1-column-1\r\n\r\nhttps://stackoverflow.com/questions/31424372/json-error-java-lang-illegalstateexception-expected-begin-object-but-was-strin/31425418 =||= clean project and rebuild project doesn't work for my issue\r\nhttps://stackoverflow.com/questions/60568620/retrofit2-get-method-failure-response =||= It's weird but I am still getting this error even did everything listed on the web. What my case is I am trying to update the app over the existing one. They both separately working well without error but when I try to update latest version over the previous one I am receiving the following exception;\r\n\r\n`java.lang.IllegalStateException: Expected an int but was BEGIN_ARRAY at line 1 column 99 path $[0].e`\r\n\r\nThere is no error in the retrieved Json file. The funny thing is when I revert my code all working well. And in that code I am using sorting like comparable and comparator over serialized class. =||= Cleaning and rebuiding the project didnt work for me! iam getting the same exception again and again\r\n =||= ### First :- clean and rebuild \r\n**if it not worked then** \r\n### Second:- Just delete previous release apk folder\r\n =||= Cleaning the app did it for me =||= Thanks\n\nOn Wed, 24 Jun 2020, 8:21 pm Adebisi Adetoba, <notifications@github.com>\nwrote:\n\n> Cleaning the app did it for me\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/966#issuecomment-648869280>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AGK3TMPFS464OKZPIQBNTILRYIHF7ANCNFSM4CXULSGQ>\n> .\n>\n =||= > @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked\r\n\r\ni am not getting option of clean project in build dropdown? How to enable it =||= > ### First :- clean and rebuild\r\n> **if it not worked then**\r\n> \r\n> ### Second:- Just delete previous release apk folder\r\n\r\ni am not getting option of clean project in build dropdown? How to enable it =||= > ### First :- clean and rebuild\r\n> **if it not worked then**\r\n> \r\n> ### Second:- Just delete previous release apk folder\r\ni am not getting option of clean project in build dropdown? How to enable it =||= > java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $\r\n> \r\n> I got a similar error message but cleaning the app did the trick for me\r\n\r\nhow to clean the app? =||= Updating the version of Gradle I target fixed this for me when clean/rebuild would not when receiving this as a project build error in Android Studio. =||= Clear the project and rebuild\r\n![tmp-cam-7806164340706841378](https://user-images.githubusercontent.com/75389770/109183777-98f22700-778e-11eb-89fb-5273dd230cd5.jpg)\r\n =||= not resolve issue after cleaning project =||= still getting Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $\r\n\r\n =||= Google should deprecate or abandon this gson structure. It is a time stealer. Developers waste alot of precious time on this bug or error or design flaw. My opinion. We should work best with json. =||= ", 0], ["970", "Reflection access to field in custom TypeAdapters", "Fabian Zeindl", "fab1an", "12/30/17, 07:11:03 AM", "In custom adapters: Is it possible to get access to the `Field` being reflectively set, so that one can add it to logging, or change serialization based on reflective properties?", "Any ideas for this? =||= this would be a great idea =||= ", 0], ["973", "hope show error field not \"Expected an int but was BEGIN_OBJECT at line 1 column 1151\"", "zhangls", "ihrthk", "12/07/16, 02:36:17 PM", "NaN", "Use the latest version and the JSON path to the offending field will be included in the message.  =||= ", 0], ["974", "[Crash] IncompatibleClassChangeError: Couldn't find com.google.b.a.c.a", "Felipe S. Pereira", "feludens", "01/02/17, 08:28:25 PM", "My application got some crashes because of this. \r\nSimilarly to other IncompatibleClassChangeError, it only happens to Samsung devices (Os 5 and 6).\r\n\r\nDoes anybody know what causes this and how it should be fixed?\r\n\r\nHere's the stack trace:\r\n\r\n```\r\nFatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.b.a.c.a\r\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)\r\n       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)\r\n       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)\r\n       at java.lang.reflect.Field.getAnnotation(Field.java:242)\r\n       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:72)\r\n       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:159)\r\n       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:100)\r\n       at com.google.b.k.a(Gson.java:423)\r\n       at com.google.b.k.a(Gson.java:886)\r\n       at com.google.b.k.a(Gson.java:852)\r\n       at com.google.b.k.a(Gson.java:801)\r\n       at com.google.b.k.a(Gson.java:773)\r\n       at com.mypackage.android.sdk.core.setup.ConfigurationAPI.loadApplicationConfiguration(ConfigurationAPI.java:62)\r\n       at com.mypackage.android.sdk.core.setup.ConfigurationManager.loadApplicationConfiguration(ConfigurationManager.java:58)\r\n       at com.mypackage.loader.ConfigurationLoadTask.executeTask(ConfigurationLoadTask.java:39)\r\n       at com.mypackage.loader.ApplicationLoaderTask.run(ApplicationLoaderTask.java:28)\r\n       at com.mypackage.loader.ApplicationLoader.setup(ApplicationLoader.java:42)\r\n       at com.mypackage.loader.ApplicationLoaderService.onHandleIntent(ApplicationLoaderService.java:74)\r\n       at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)\r\n       at android.os.Handler.dispatchMessage(Handler.java:102)\r\n       at android.os.Looper.loop(Looper.java:145)\r\n       at android.os.HandlerThread.run(HandlerThread.java:61)\r\n```\r\n\r\nThanks", "This is likely due to ProGuard and your configuration of ProGuard in your build. It is not a problem with Gson itself and thus unsuited for this issue tracker which is only for Gson bugs and feature requests. Perhaps try StackOverflow? =||= ", 0], ["975", "@JsonAdapter's documentation does not mention support for JsonSerializer and JsonDeserializer", "Kevin Most", "kevinmost", "02/07/17, 03:43:24 PM", "The documentation [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java#L79) and further down the page [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java#L94) only mentions that `TypeAdapter` and `TypeAdapterFactory` are supported at the moment. \r\n\r\nHowever, according to the [changelog](https://github.com/google/gson/blob/master/CHANGELOG.md#version-27), as of version 2.7, `JsonSerializer` and `JsonDeserializer` are also supported. \r\n\r\nI'm happy to submit a pull request and add this documentation if it's useful.", "Yes, please send a PR. Thanks. =||= @inder123 #976  =||= ", 0], ["976", "Update JsonAdapter documentation", "Kevin Most", "kevinmost", "12/12/16, 06:37:55 AM", "Include mention of JsonDeserializer and JsonSerializer as valid JsonAdapter classes.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= \ud83d\udc4d  =||= Thanks =||= ", ["976", "Update JsonAdapter documentation", "Kevin Most", "kevinmost", "12/12/16, 06:37:55 AM", "Include mention of JsonDeserializer and JsonSerializer as valid JsonAdapter classes.", "NaN"], ["Kevin Most", "Update JsonAdapter documentation\n\nInclude mention of JsonDeserializer and JsonSerializer.", "12/12/16, 02:04:10 AM", "GitHub", "7a8b3906025eab290d2a8b4936c9c03d8159d6e1", ["gson/src/main/java/com/google/gson/annotations/JsonAdapter.java"], "@@ -16,6 +16,8 @@\n \n package com.google.gson.annotations;\n \n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonSerializer;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n import java.lang.annotation.ElementType;\n@@ -77,8 +79,10 @@\n  * adapters, which in turn take precedence over annotated types.\n  *\n  * <p>The class referenced by this annotation must be either a {@link\n- * TypeAdapter} or a {@link TypeAdapterFactory}. Using the factory interface\n- * makes it possible to delegate to the enclosing {@code Gson} instance.\n+ * TypeAdapter} or a {@link TypeAdapterFactory}, or must implement one\n+ * or both of {@link JsonDeserializer} or {@link JsonSerializer}. \n+ * Using {@link TypeAdapterFactory} makes it possible to delegate \n+ * to the enclosing {@code Gson} instance.\n  *\n  * @since 2.3\n  *\n@@ -91,7 +95,7 @@\n @Target({ElementType.TYPE, ElementType.FIELD})\n public @interface JsonAdapter {\n \n-  /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}. */\n+  /** Either a {@link TypeAdapter} or {@link TypeAdapterFactory}, or one or both of {@link JsonDeserializer} or {@link JsonSerializer}. */\n   Class<?> value();\n \n   /** false, to be able to handle {@code null} values within the adapter, default value is true. */, ", 7, 3, "\"modified, \"", 10], 1], ["982", "Add missing comma in toString()", "Yutaro Iino", "ytRino", "12/20/16, 03:21:11 PM", "I noticed `Gson#toString()` prints  a bit unreadable string.\r\nThough I don't know why `toString()` is printing such 3 fields only, this PR fixes missing comma only.", "NaN", ["982", "Add missing comma in toString()", "Yutaro Iino", "ytRino", "12/20/16, 03:21:11 PM", "I noticed `Gson#toString()` prints  a bit unreadable string.\nThough I don't know why `toString()` is printing such 3 fields only, this PR fixes missing comma only.", "NaN"], ["Yutaro Iino", "Add missing comma in toString()", "12/20/16, 03:00:33 PM", "Yutaro Iino", "9e5e4ac630d6785b3a764a1c523a91605935d61d", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -981,7 +981,7 @@ public void setDelegate(TypeAdapter<T> typeAdapter) {\n   public String toString() {\n     return new StringBuilder(\"{serializeNulls:\")\n         .append(serializeNulls)\n-        .append(\"factories:\").append(factories)\n+        .append(\",factories:\").append(factories)\n         .append(\",instanceCreators:\").append(constructorConstructor)\n         .append(\"}\")\n         .toString();, ", 1, 1, "\"modified, \"", 2], 1], ["984", "$Gson$Types.canonicalize", "\u5305\u5b50\u541b", "shuangqingfeng", "12/23/16, 08:06:52 AM", " FATAL EXCEPTION: OkHttp Dispatcher\r\n                                                                 Process: com.fengunion.scf, PID: 9971\r\n                                                                 java.lang.StackOverflowError: stack size 1038KB\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)\r\n                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)\r\n                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)\r\n                                                                 \tat com.google.gson.intern", "NaN", 0], ["985", "not initialize int fields with zero", "megadmini", "mahermeg17", "12/26/16, 05:29:11 PM", "Hi,\r\n\r\nI have an int field in my object but not defined into the json string.\r\nwhen Gson create objects from the json, it initiate the int field by zero even it's initiated into the class definition [ int x= -1; ]\r\nI need to initiate it with (-1).\r\n\r\nany way to do that ? (without setting the field by a setter after parsing)\r\n\r\nThanks in advance,", "Add a no-args constructor to the type.\n\nOn Mon, Dec 26, 2016, 12:24 PM megadmini <notifications@github.com> wrote:\n\n> Hi,\n>\n> I have an int field in my object but not defined into the json string.\n> when Gson create objects from the json, it initiate the int field by zero\n> even it's initiated into the class definition [ int x= -1; ]\n> I need to initiate it with (-1).\n>\n> any way to do that ? (without setting the field by a setter after parsing)\n>\n> Thanks in advance,\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/985>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEUHmVaCZnRCQrBVkww-5bk-uUJQsks5rL_gwgaJpZM4LV23p>\n> .\n>\n =||= thanks. it works. =||= ", 0], ["987", "Gson date format to parse/output unix-timestamps", "Anis Lounis", "AnixPasBesoin", "03/15/17, 07:27:48 AM", "\r\nI am using Gson to serialize/deserialize my pojos and currently looking for a clean way to tell Gson to parse/output date attributes as unix-timestamps. Here's my attempt:\r\n\r\n`    Gson gson = new GsonBuilder().setDateFormat(\"U\").create();`\r\n\r\nComming from PHP where \"U\" is the dateformat used to parse/output date as unix-timestamps, when running my attempt code, I am getting this RuntimeException:\r\n\r\n>     Unknown pattern character 'U'\r\n\r\nI am assuming that Gson uses SimpleDateformat under the hood which doesn't define the letter \"U\".\r\n\r\nI could write a DateTypeAdapter and pass it the GsonBuilder but I am looking for a cleaner way to achieve that. Simply changing the dateformat would be great.\r\n\r\nI have asked this same question [here ](http://stackoverflow.com/questions/41348055/gson-date-format-to-parse-output-unix-timestamps)at stackoverflow. No answers so far.", "NaN", 0], ["989", "enhance ObjectTypeBinder to works with number type 'int'", "BK", "BK-Choi", "12/29/17, 07:50:18 PM", "- number double or integer #525\r\n- integer values of array become a float values #559\r\n\r\n### the reason I pr this:\r\n- Spring's `@RequestBody` parses integer params to double values\r\n- this behavior is not right when you parse HTTP request body parameters. \r\n  - Web App never knows whether the parameter type is wrong or not\r\n  - `int` should be parsed `int`, not `double`\r\n- [RFC-4627](http://www.ietf.org/rfc/rfc4627.txt) and [JSON](http://json.org) defines type `int`,\r\nso I hope this PR does not violate any rules.\r\n\r\n### related issues\r\n- number double or integer #525\r\n- integer values of array become a float values #559\r", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= CLA signed (individual) =||= CLAs look good, thanks!\n\n<!-- ok --> =||= A few issues. Most importantly, check for integer overflow (NumberFormatException), and exponent notation (\"e\" in addition to \".\"). Maybe use Long instead of Integer?\r\n\r\nNow, even Long and Double may overflow, in the latter case losing precision. Also, doubles typically lose precision when converting from decimal, even if not overflowing. I think the best option would be to return BigDecimal instead of Double, and BigInteger instead of Integer. Opinions? =||= When it will be merged to muster and released? =||= @jobh \r\nmy opinion is,\r\n- integer should be ok with common number use\r\n- Long sounds good to me\r\n- BigDecimal sounds not good\r\n  - waste of memory and time for some people; performance issue\r\n  - maybe what we need is an option for BigDecimal parsing.\r\n- exponential expression\r\n  - oh nice pointing out. thank you.\r\n\r\nI can change the \"integer\" code to \"long\" one anytime,\r\nhowever one GSON contributor said GSON is never going to support integer(or long).\r\n(couldn't find the reference, short-term-memory :( )\r\nSo, the contributors' affirmitive opinion first, then I can use my time to fix codes. =||= I believe not only me wait for this fix... =||= @swankjesse  Looks like a reasonable change to me. I plan to merge it in the next few days unless I hear a concern from you. =||= Changing the type of a thing is extremely incompatible. If we merge this, nobody will be able to upgrade safely. =||= @swankjesse does it mean that in gson int will be never converted to correct type if it is not specified in end object directly? =||= > RFC-4627 and JSON defines type int,\r\nso I hope this PR does not violate any rules.\r\n\r\nThough the label `int` is used to describe the number type, an `int` is not a standalone value. That\u2019s `number` and JSON doesn\u2019t offer different types depending on whether a `.0` is in the encoded form.\r\n\r\n```\r\n value = false / null / true / object / array / number / string \r\n```\r\n\r\nMaking `.0` significant would be not unlike making whitespace significant. =||= @swankjesse but with current implementation if we deserialize json and serialize it back we will get different jsons. I believe it is not an expected behavior. =||= This class looks like it was designed for the purpose - \r\n\r\n[com.google.gson.internal.LazilyParsedNumber](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java\r\n)\r\n\r\n- it is an abstract number (like JSON), not a specific type\r\n- it roundtrips perfectly, since the string rep is stored\r\n- converts to whatever is needed, even BigDecimal etc\r\n =||= @swankjesse \r\nIn GSON world, you said that `0` and `0.0` are the same.\r\nSo no need to fix this.\r\nplease close this PR (or should I?)\r\n\r\n@jobh\r\nthank you! =||= ", 0], ["990", "Caused by: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT", "\u7a0b\u5e8f\u5458\u5f90\u516c", "gdutxiaoxu", "01/02/17, 04:48:38 PM", "\r\n\r\n\r\nWhen I use Gson,I'm trying to parse a JSON string like this one\r\n\r\n```\r\n{\"showapi_res_code\": 0,\r\n  \"showapi_res_error\": \"1\",\r\n  \"showapi_res_body\": {\r\n    \"totalNum\": 44,\r\n    \"ret_code\": 0\r\n   }\r\n }\r\n```\r\n\r\nWhen I use this like below,it is ok\r\n\r\nBean bean = gson.fromJson(stringFromSource, \r\n\t\t\t\tBean.class);\r\n\r\n\r\n```\r\npublic class Bean{\r\n    int showapi_res_code;\r\n    String showapi_res_error;\r\n    Body showapi_res_body;\r\n    \r\n    public static class Body{\r\n        int totalNum;\r\n        int ret_code;\r\n    }\r\n}\r\n```\r\n\r\n\r\nBut when I use this like follow\r\n\r\n\tBean1 bean1 = gson.fromJson(stringFromSource, Bean1.class);\r\n\r\n```\r\npublic class Bean1 {\r\n\tint showapi_res_code;\r\n    String showapi_res_error;\r\n    String showapi_res_body;\r\n    \r\n   \r\n}\r\n```\r\n\r\n\r\nIt is error\r\n\r\n> Caused by: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 3 column 24 path $.showapi_res_body\r\n\r\nWhat should I to to suppport this style for Gson? Tanke you very mush.\r\n\r", "Why are you trying to use the second version? `showapi_res_body` is clearly not a string in the response, it's an object with two key/value pairs?\r\n\r\nPlease ask usage questions on StackOverflow using the 'gson' tag. This issue tracker is for bugs and feature requests only. =||= ", 0], ["991", "serialize UsbDevice", "Mohammad", "mneckoee", "01/02/17, 08:26:25 PM", "I can serialize UsbDevice with Gson  (too slowly) but cannot deserialize it !", "`UsbDevice` is a platform type from Android. There's no guarantee that its fields can be serialized or that it can be deserialized. You should not try to serialize it directly, but instead use an alternate representation that you control.\r\n\r\nUnfortunately it's far too late to prevent serializing `java.*` and `android.*` types with Gson, but ideally that's what you should be doing. =||= ", 0], ["994", "#957 OSGi headers from the bnd.bnd will be included in the jar", "Martin Lind", "spegelref", "01/11/17, 06:38:34 PM", "This would ensure that the headers created by the bnd maven plugin where included in the jar (as per the documentation found here https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin#important-note).", "\ud83d\udc4d  Thanks =||= ", ["994", "#957 OSGi headers from the bnd.bnd will be included in the jar", "Martin Lind", "spegelref", "01/11/17, 06:38:34 PM", "This would ensure that the headers created by the bnd maven plugin where included in the jar (as per the documentation found here https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin#important-note).", "NaN"], ["Martin Lind", "Fix for #957", "01/11/17, 04:32:23 PM", "Martin Lind", "180ad3263f55248ca96579512816aab53fe71da4", ["gson/pom.xml"], "@@ -43,6 +43,15 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <configuration>\n+          <archive>\n+            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n+          </archive>\n+        </configuration>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, ", 9, 0, "\"modified, \"", 9], 1], ["995", "Gson Design Question", "Michael King", "rgkjhshi", "01/12/17, 07:17:38 AM", "Why there is no  a `@Ignore` annotation that indicates a member should not be serialization or deserialization?", "The `transient` keyword in Java can be used for that. =||= I know `transient` is useful. But how can I do if I want to deserialize a member from a json and not to serialize the member to a json  just like `@Expose`? =||= ", 0], ["998", "I user gson to generate json data\uff0cthere are some prolem", "\u674e\u6d9b\u6c5f", "ltaoj", "01/18/17, 10:07:19 PM", "java.lang.ClassNotFoundException: com.google.gson.Gson\r\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1332)\r\n\tat org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1166)\r\n\tat com.ltj.transmission.UsersServlet.doPost(UsersServlet.java:63)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:648)\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\r\n\tat org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528)\r\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099)\r\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:670)\r\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2508)\r\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2497)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.lang.Thread.run(Unknown Source)", "Are you using a tool like Proguard? Something's removing your Gson class.\r\nGitHub issues are better with a reproducible test case for a bug report.\r\nFor usage questions and errors, use StackOverflow with the Gson tag. More people can help there. =||= Thank you for your advice.I have solved my problem.I placed the .jar at a wrong place. =||= ", 0], ["999", "Fixed typo", "twlkyao", "twlkyao", "01/22/17, 05:05:56 PM", "Fixed typo", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["999", "Fixed typo", "twlkyao", "twlkyao", "01/22/17, 05:05:56 PM", "Fixed typo", "NaN"], ["Shiyao Qi", "Fixed typo\n\nFixed typo", "01/22/17, 10:00:33 AM", "GitHub", "614e735992ae4d3d7366a036e2ced17a78d0ba69", ["CHANGELOG.md"], "@@ -73,7 +73,7 @@ _2015-10-04_\n \n ## Version 2.3.1\n \n-__2014-11-20_\n+_2014-11-20_\n \n  * Added support to serialize objects with self-referential fields. The self-referential field is set to null in JSON. Previous version of Gson threw a StackOverflowException on encountering any self-referential fields.\n    * The most visible impact of this is that Gson can now serialize Throwable (Exception and Error), ", 1, 1, "\"modified, \"", 2], 1], ["1000", "JsonElement casting methods don't all tell the user what actual type is when cast fails", "Kevin Most", "kevinmost", "02/08/17, 12:17:40 AM", "`JsonElement.getAsJsonObject()` [shows the user the JSON in the exception when it fails to cast](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86). The other 3 `getAsJson___` methods do not. It would be nice if this style of exception message was adopted for the other 3 as well.\r\n\r\nI can send a PR if this is a desired change.", "A PR would be great. =||= ", 0], ["1004", "It's only a testing!", "dh", "dhjmjava", "01/26/17, 02:42:32 AM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= ", 0], ["1010", "Support to omit deserializing empty String just like null value", "UsherBaby", "UsherBaby", "02/07/17, 06:02:49 AM", "GsonBuild can config to omit empty String just like null value", "You can write your own TypeAdapter for String which behaves this way and add it to your Gson instances. Adding this to Gson is unreasonable since those two values are not equivalent and you're much better off correcting whomever is posting such JSON. =||= ", 0], ["1012", "All JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's message", "Jo\u00e3o Vitor Verona Biazibetti", "JoaaoVerona", "02/08/17, 12:17:29 AM", "As noted in https://github.com/google/gson/issues/1000, this change aims to symmetrize the message of thrown exceptions on methods [getAsJsonObject](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86), [getAsJsonArray](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L102), [getAsJsonPrimitive](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L118), [getAsJsonNull](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L135), by appending the JSON information ([toString](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L319)) to the messages.", "NaN", ["1012", "All JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's message", "Jo\u00e3o Vitor Verona Biazibetti", "JoaaoVerona", "02/08/17, 12:17:29 AM", "As noted in https://github.com/google/gson/issues/1000, this change aims to symmetrize the message of thrown exceptions on methods [getAsJsonObject](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86), [getAsJsonArray](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L102), [getAsJsonPrimitive](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L118), [getAsJsonNull](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L135), by appending the JSON information ([toString](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L319)) to the messages.", "NaN"], ["BloodShura", "All JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's message", "02/08/17, 12:04:22 AM", "BloodShura", "9d8d7a43e1335005dbaea0f96c1f1c5d33a61531", ["gson/src/main/java/com/google/gson/JsonElement.java"], "@@ -103,7 +103,7 @@ public JsonArray getAsJsonArray() {\n     if (isJsonArray()) {\n       return (JsonArray) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Array.\");\n+    throw new IllegalStateException(\"Not a JSON Array: \" + this);\n   }\n \n   /**\n@@ -119,7 +119,7 @@ public JsonPrimitive getAsJsonPrimitive() {\n     if (isJsonPrimitive()) {\n       return (JsonPrimitive) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Primitive.\");\n+    throw new IllegalStateException(\"Not a JSON Primitive: \" + this);\n   }\n \n   /**\n@@ -136,7 +136,7 @@ public JsonNull getAsJsonNull() {\n     if (isJsonNull()) {\n       return (JsonNull) this;\n     }\n-    throw new IllegalStateException(\"This is not a JSON Null.\");\n+    throw new IllegalStateException(\"Not a JSON Null: \" + this);\n   }\n \n   /**, ", 3, 3, "\"modified, \"", 6], 1], ["1013", "Bug when skipping a value while using the JsonTreeReader", "Andr\u00e9 Rou\u00e9l", "arouel", "02/18/17, 04:52:44 PM", "When using a `JsonReader` to read a JSON object, `skipValue()` skips the structure successfully.\r\n```Java\r\n@Test\r\npublic void testSkipValue_JsonReader() throws IOException {\r\n  try (JsonReader in = new JsonReader(new StringReader(\"{}\"))) {\r\n    in.skipValue();\r\n  }\r\n}\r\n```\r\nBut when using a `JsonTreeReader` to read a JSON object, `skipValue()` throws a `ArrayIndexOutOfBoundsException`.\r\n```Java\r\n@Test\r\npublic void testSkipValue_JsonTreeReader() throws IOException {\r\n  try (JsonTreeReader in = new JsonTreeReader(new JsonObject())) {\r\n    in.skipValue();\r\n  }\r\n}\r\n```\r\nStacktrace\r\n```\r\njava.lang.ArrayIndexOutOfBoundsException: -1\r\n\tat com.google.gson.internal.bind.JsonTreeReader.skipValue(JsonTreeReader.java:262)\r\n```\r\nThe method `popStack()` is being called on line 261 with a `stackSize` of `1` and afterwards the `stackSize` is `0` and the call on line 262 must result in an `ArrayIndexOutOfBoundsException`.", "NaN", 0], ["1014", "Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTre\u2026", "Andr\u00e9 Rou\u00e9l", "arouel", "02/16/17, 02:41:40 AM", "\u2026eReader #1013", "\ud83d\udc4d  Thanks for the PR and the tests.  =||= ", ["1014", "Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTre\u2026", "Andr\u00e9 Rou\u00e9l", "arouel", "02/16/17, 02:41:40 AM", "\u2026eReader #1013", "NaN"], ["Andr\u00e9 Rou\u00e9l", "Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTreeReader #1013", "02/08/17, 12:34:35 PM", "Andr\u00e9 Rou\u00e9l", "b06e23d09e75ebf2ca6701cac82f0bb137bb5674", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java", "gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java"], "@@ -259,9 +259,13 @@ private void expect(JsonToken expected) throws IOException {\n       pathNames[stackSize - 2] = \"null\";\n     } else {\n       popStack();\n-      pathNames[stackSize - 1] = \"null\";\n+      if (stackSize > 0) {\n+        pathNames[stackSize - 1] = \"null\";\n+      }\n+    }\n+    if (stackSize > 0) {\n+      pathIndices[stackSize - 1]++;\n     }\n-    pathIndices[stackSize - 1]++;\n   }\n \n   @Override public String toString() {, @@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2017 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.bind;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.stream.JsonToken;\n+import java.io.IOException;\n+import junit.framework.TestCase;\n+\n+@SuppressWarnings(\"resource\")\n+public class JsonTreeReaderTest extends TestCase {\n+  public void testSkipValue_emptyJsonObject() throws IOException {\n+    JsonTreeReader in = new JsonTreeReader(new JsonObject());\n+    in.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, in.peek());\n+  }\n+\n+  public void testSkipValue_filledJsonObject() throws IOException {\n+    JsonObject jsonObject = new JsonObject();\n+    JsonArray jsonArray = new JsonArray();\n+    jsonArray.add('c');\n+    jsonArray.add(\"text\");\n+    jsonObject.add(\"a\", jsonArray);\n+    jsonObject.addProperty(\"b\", true);\n+    jsonObject.addProperty(\"i\", 1);\n+    jsonObject.add(\"n\", JsonNull.INSTANCE);\n+    JsonObject jsonObject2 = new JsonObject();\n+    jsonObject2.addProperty(\"n\", 2L);\n+    jsonObject.add(\"o\", jsonObject2);\n+    jsonObject.addProperty(\"s\", \"text\");\n+    JsonTreeReader in = new JsonTreeReader(jsonObject);\n+    in.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, in.peek());\n+  }\n+}, ", 56, 2, "\"modified, added, \"", 58], 1], ["1015", "Memory optimisation in JsonReader", "Mohammad Yasir", "yasirmhd", "02/17/17, 03:58:17 AM", "The default constructor of StringReader gives a capacity of 16. It expands and does an array copy in the event of the capacity being exceeded while appending characters.\r\n\r\nJsonReader.nextQuotedValue was initializing the default constructor. If the entire string was in buffer and there were no characters to be escaped then we can directly create a string object and return it back (based on the profiling for our sample JSON payload this was the flow this code goes into for 90% of the times).\r\n\r\n\r\nIn the event of it going into other code paths trying to estimate a length to be the double of the current length and ensure it is not less than 16. ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= Looks good to me. But @swankjesse  and @JakeWharton understand the implications better. =||= @JakeWharton Thank you for the review. I have made the changes requested  =||= ", ["1015", "Memory optimisation in JsonReader", "Mohammad Yasir", "yasirmhd", "02/17/17, 03:58:17 AM", "The default constructor of StringReader gives a capacity of 16. It expands and does an array copy in the event of the capacity being exceeded while appending characters.\n\nJsonReader.nextQuotedValue was initializing the default constructor. If the entire string was in buffer and there were no characters to be escaped then we can directly create a string object and return it back (based on the profiling for our sample JSON payload this was the flow this code goes into for 90% of the times).\n\n\nIn the event of it going into other code paths trying to estimate a length to be the double of the current length and ensure it is not less than 16. ", "NaN"], ["Mohammad Yasir", "Incorporating code review suggestions", "02/17/17, 01:55:23 AM", "Mohammad Yasir", "9c30b0e20389dfce7baf897685677a7ed42e42f3", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -997,7 +997,7 @@ private String nextQuotedValue(char quote) throws IOException {\n         if (c == quote) {\n           pos = p;\n           int len = p - start - 1;\n-          if(null == builder) {\n+          if (builder == null) {\n             return new String(buffer, start, len);\n           } else {\n             builder.append(buffer, start, len);\n@@ -1007,9 +1007,9 @@ private String nextQuotedValue(char quote) throws IOException {\n           pos = p;\n           int len = p - start - 1;\n           char escapeChar = readEscapeCharacter();\n-          if(null == builder) {\n+          if (builder == null) {\n             int estimatedLength = (len + pos - p) * 2;\n-            builder = new StringBuilder(estimatedLength < 16 ? 16 : estimatedLength);\n+            builder = new StringBuilder(Math.max(estimatedLength, 16));\n           }\n           builder.append(buffer, start, len);\n           builder.append(escapeChar);\n@@ -1022,9 +1022,9 @@ private String nextQuotedValue(char quote) throws IOException {\n         }\n       }\n \n-      if(null == builder) {\n-        int len = (p - start) * 2;\n-        builder = new StringBuilder(len < 16 ? 16 : len);\n+      if (builder == null) {\n+        int estimatedLength = (p - start) * 2;\n+        builder = new StringBuilder(Math.max(estimatedLength, 16));\n       }\n       builder.append(buffer, start, p - start);\n       pos = p;, ", 6, 6, "\"modified, \"", 12], 1], ["1016", "Incorporating the review comments in #1015", "Mohammad Yasir", "yasirmhd", "02/17/17, 03:09:16 PM", "Incorporating the review comments in #1015. \r\n\r\nWhile readEscapeCharacter might read more than one character from the buffer it will also write 1 to the output. So the right thing to do is len+1", "@swankjesse Thanks for catching this in #1015 . This should fix that issue. =||= ", ["1016", "Incorporating the review comments in #1015", "Mohammad Yasir", "yasirmhd", "02/17/17, 03:09:16 PM", "Incorporating the review comments in #1015. \n\nWhile readEscapeCharacter might read more than one character from the buffer it will also write 1 to the output. So the right thing to do is len+1", "NaN"], ["Mohammad Yasir", "Incorporating the review comments. While more than 1 charachter might be read from the buffer the output will have only one escaped charachter.", "02/17/17, 06:24:30 AM", "Mohammad Yasir", "4644837207fba089f73ca0dd0b05a7750b960b38", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -1006,13 +1006,12 @@ private String nextQuotedValue(char quote) throws IOException {\n         } else if (c == '\\\\') {\n           pos = p;\n           int len = p - start - 1;\n-          char escapeChar = readEscapeCharacter();\n           if (builder == null) {\n-            int estimatedLength = (len + pos - p) * 2;\n+            int estimatedLength = (len + 1) * 2;\n             builder = new StringBuilder(Math.max(estimatedLength, 16));\n           }\n           builder.append(buffer, start, len);\n-          builder.append(escapeChar);\n+          builder.append(readEscapeCharacter());\n           p = pos;\n           l = limit;\n           start = p;, ", 2, 3, "\"modified, \"", 5], 1], ["1017", "GsonBuilder Perf optimization", "sourabh gupta", "guptasourabh", "02/18/17, 11:19:28 AM", "In HierarchFactories we are keep inserting the items at first position due to all the pointers in the list have to be moved up one position to before the new one can be inserted into the list.\r\n\r\nWith collection.reverse it will only run for the one time , rather than keep moving pointer every time whenver a insert is happening.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= @JakeWharton Please review\r\n =||= ", 0], ["1018", "JsonPrimitive code correction and Perf changes", "sourabh gupta", "guptasourabh", "02/18/17, 03:56:35 PM", "Changes done -:\r\n1) FieldNamingPolicy -: Validating the condition before starting while loop.\r\n2) GsonBuilder -: Instead of keep adding item at first position in hierarchyList , its more performance efficient to add all the items in last and then reverse at once while adding them all in the factories. As reversing a list is 15-16 times more faster than adding the item at first position and moving all the pointers when ever a new insert happens.\r\nAlong with that datePattern.trim.length() is much faster to check as compare to equal which will check if both objects are instanceof String then check length and then iterate over while loop.\r\n3) JsonArray -: While making deepCopy of array , we know the size of the array that needs to be copy.\r\n4) JsonNull = Unnecessary check is added in equal condition , only the check of other instance is instanceof JsonNull is needed.\r\n5) JsonPrimitve -: we are calling getAsString when the object is not a number , which again checks whether the object is number or not which results in redundant checks.\r\nApart from it getAsString is creating new instance of LazilyParsedNumber which is not needed , if we want to only access the string.\r\n\r\n\r", "@JakeWharton @swankjesse for review\r\n =||= ", 0], ["1019", "gson builder perf improvement and code corrections", "sourabh gupta", "guptasourabh", "03/01/17, 08:11:07 PM", "**Changes done** -:\r\n**FieldNamingPolicy** -: Validating the condition before starting while loop.\r\n**GsonBuilder** -: Instead of keep adding item at first position in hierarchyList , its more performance efficient to add all the items in last and then reverse at once while adding them all in the factories. As reversing a list is 15-16 times more faster than adding the item at first position and moving all the pointers when ever a new insert happens.\r\nAlong with that datePattern.trim.length() is much faster to check as compare to equal which will check if both objects are instanceof String then check length and then iterate over while loop.\r\n**JsonArray/JsonObject** -: While making deepCopy of array , we know the size of the array that needs to be copy.\r\n**JsonElement** -: No closure of JsonWriter.\r\n**JsonPrimitve** -: getAsString is creating new instance of LazilyParsedNumber which is not needed , if we want to only access the string.", "@JakeWharton @swankjesse for review\r\n =||= ", 0], ["1021", "Gson parser able to parse illegal json", "Devang", "celeritas9", "02/21/17, 08:28:25 PM", "I am using the gson in my code and it's able to parse an invalid json.\r\n\r\nJson simply is:\r\n{ dummy : \"abc\"}\r\n\r\nWhereas, I think the valid json should be:\r\n{ \"dummy\" : \"abc\"}\r\n\r\nIs it really an issue?\r\n\r\nAlso, why JsonParser sets the leniency of JsonReader to true every time? Shouldn't it read the leniency value from the JsonReader supplied?", "It's legacy, broken behavior we can't change unfortunately.\r\n\r\nTo work around it you can use the `getAdapter` method to look up a `TypeAdapter` for the type you want to serialize/deserialize. Then use its `fromJson` / `toJson` methods instead of those on the `Gson` object which will provide strict behavior. =||= ", 0], ["1024", "Gson polymorphism: request similar feature like Json.Net's TypeNameHandling.Auto", null, "zenglian", "05/22/20, 04:06:09 AM", "( I'm not sure this is a duplicate one as there were issues raised for \"polymorphism\")\r\n\r\nThe main idea is to **automatically** add an extra \"@type\" field if the actual instance's type is not the same as (should be a direct or **indirect** subclass of) the declaring type.\r\n\r\nsee [**Json.Net's TypeNameHandling.Auto**](http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm)\r\n\r\n[Edit]\r\n Json.Net's approach is more generic and simpler than [RuntimeTypeAdapterFactory](https://github.com/google/gson/blob/e0f0854ac23c07658cce5877b1fc9bc5995b1688/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java). It holds the full class name so you do not need to register type adapter. Everything is automatic.\r\n\r\nIt will be good if gson has similar feature. Thanks.\r", "Will this do what you want?\r\nhttps://github.com/google/gson/blob/e0f0854ac23c07658cce5877b1fc9bc5995b1688/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java =||= I think Json.Net's approach is more generic and simpler.  It holds the full class name so you do not need to register type adapter. Everything is automatic. \r\n \r\nE.g., a List<Object> contains any objects can be deseriazlied, including nested collections. Not sure if RuntimeTypeAdapterFactory can do the same thing yet. =||= @NightlyNexus Also, there is no official release (on Maven Central) for gson-extras, is there? =||= Personally I am not that convinced because deserializing based on class names can easily make you vulnerable to deserialization exploits, see [ysoserial](https://github.com/frohoff/ysoserial).\r\nHaving this as separate library is fine if you know what you are doing, but having it in Gson might lead to incautious usage just because it is \"easier\".\r\n\r\nThough in the end the maintainers of this project decide of course. =||= ", 0], ["1025", "cam", null, "camcam1993", "02/24/17, 04:21:54 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= ", 0], ["1026", "Eliminating Code Overhead", "Anirudh Ramanan", "anirudhramanan", "03/01/17, 04:13:56 PM", "* Calculating length and size beforehand in cases of for loops\r\n* Avoid creation of StringBuilder object if type argument's length is 0 ($Gson$Types.java : 485)\r\n* Removed boilerplate null checks from TypeAdapter, and replaced with nullSafe()", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= Thanks! =||= ", ["1026", "Eliminating Code Overhead", "Anirudh Ramanan", "anirudhramanan", "03/01/17, 04:13:56 PM", "* Calculating length and size beforehand in cases of for loops\n* Avoid creation of StringBuilder object if type argument's length is 0 ($Gson$Types.java : 485)\n* Removed boilerplate null checks from TypeAdapter, and replaced with nullSafe()", "NaN"], ["anirudh.r", "build fix, missed braces", "03/01/17, 07:04:21 AM", "anirudh.r", "8e6d34ae11a6118c6144e71e7b30fcc393f41274", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -483,7 +483,9 @@ public Type getOwnerType() {\n \n     @Override public String toString() {\n       int length = typeArguments.length;\n-      if length == 0 return typeToString(rawType);\n+      if (length == 0) {\n+        return typeToString(rawType);\n+      }\n \n       StringBuilder stringBuilder = new StringBuilder(30 * (length + 1));\n       stringBuilder.append(typeToString(rawType)).append(\"<\").append(typeToString(typeArguments[0]));, ", 3, 1, "\"modified, \"", 4], 1], ["1027", "code correction", "sourabh gupta", "guptasourabh", "03/12/17, 06:53:39 PM", "code correction + setting of array size.", "Please minimize all avoidable changes such as reordering of imports, or even inlining statements. \r\n\r\nI see that the primary change you want is JsonArray constructor with a capacity parameter. Is that correct? Please edit the PR title accordingly.\r\n\r\nThank you for your contributions. =||= @inder123  changes done in PR https://github.com/google/gson/pull/1033 =||= ", 0], ["1030", "When is the next release /snapshot version being planned ?", "Anirudh Ramanan", "anirudhramanan", "06/20/17, 05:07:40 PM", "We did some benchmarking on the data sets, and have noticed around 25 % gain with the changes that went in #1015 \r\n\r\n<img width=\"404\" alt=\"screen shot 2017-03-04 at 1 05 09 am\" src=\"https://cloud.githubusercontent.com/assets/16556984/23566545/51d6d4e2-0078-11e7-924a-11e518888b51.png\">\r", "We don't really plan releases. Ideally Gson development would slowly come to a stop and it would just stay stable.\r\n\r\nThat said, there's some fixes on master that could go into a 2.8.1 in the coming weeks: https://github.com/google/gson/compare/gson-parent-2.8.0...master =||= Ok. Thanks! =||= Nice gains. Let's plan a cut @JakeWharton  @swankjesse in the coming weeks.\r\n =||= @swankjesse , @inder123  : any updates on the next release? =||= @swankjesse @JakeWharton  Let's do a release now. I will go ahead and do the needful. =||= @inder123 : gentle reminder for this. Please do let us know if we can be of any help with this. =||= For anyone interested, I saw similar reading speed improvements - https://github.com/hzsweers/json-serialization-benchmarking/pull/1 =||= @hzsweers  Thanks for the benchmarks links. Great to see a real performance improvement. Keep such suggestions coming. =||= ", 0], ["1031", "Fluent interface for the `add*` methods", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "03/07/17, 06:35:20 PM", "Not sure if it was asked before, but would it be possible to let the `add*` method family work in fluent interface style? Say, the following JSON\r\n\r\n```json\r\n{\"key\":\"whatever\",\"value\":[\"foo\",\"bar\"]}\r\n```\r\n\r\ncan be easily built as a `JsonObject` with\r\n\r\n```java\r\nfinal JsonObject jsonObject = new JsonObject();\r\njsonObject.addProperty(\"key\", \"whatever\");\r\nfinal JsonArray jsonArray = new JsonArray();\r\njsonArray.add(\"foo\");\r\njsonArray.add(\"bar\");\r\njsonObject.add(\"value\", jsonArray);\r\n```\r\n\r\nHowever, if the `add*` methods family would be non-`void` and return their respective instances, it could be done with:\r\n\r\n```java\r\nfinal JsonElement root = new JsonObject()\r\n\t.addProperty(\"key\", \"whatever\")\r\n\t.addProperty(\"value\", new JsonArray()\r\n\t\t.add(\"foo\")\r\n\t\t.add(\"bar\")\r\n\t);\r\n```\r\n\r\nAs the pros I can see eliminating redundant variables; \"tree-shaped\" code; should not break if the `add*` methods are used without any \"hacks\". As the cons: probably would break if someone analyzes the return type for the `add*` methods via reflection or byte-code processing. I believe you also had such a scenario in mind before, but I'm wondering: what would you say for pros and cons? Thanks.", "This would be a great change but it's backward incompatible and we have no plans to ever do a Gson 3.0. =||= @JakeWharton thanks for the reply. I have a few more questions: could you please clarify more on the backwards compatibility? (I seem to have some misunderstanding here) And, would adding a \"satellite\" `addFluently*` (or whatever it could be called) methods family be considered some kind of code bloat and something that should never be a part of Gson? Thanks. =||= Yep. We could add new methods but I'm not sure that we should because it\nadds API surface for very little benefit.\n\nOn Tue, Mar 7, 2017, 1:13 PM Lyubomyr Shaydariv <notifications@github.com>\nwrote:\n\n> @JakeWharton <https://github.com/JakeWharton> thanks for the reply. I\n> have a few more questions: could you please clarify more on the backwards\n> compatibility? (I seem to have some misunderstanding here) And, would\n> adding a \"satellite\" addFluently* (or whatever it could be called)\n> methods family be considered some kind of code bloat and something that\n> should never be a part of Gson? Thanks.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1031#issuecomment-284808108>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEETpp3iBuE945Y9EDVFf0KzpSjJi1ks5rjZ5OgaJpZM4MVQ01>\n> .\n>\n =||= @JakeWharton Ok, got it, so the issue can be closed. Thanks for your time. =||= ", 0], ["1033", "JsonArray with capacity support in constructor", "sourabh gupta", "guptasourabh", "03/13/17, 02:59:41 AM", "JsonArray with capacity support in constructor", "@inder123 changes done =||= Thanks. \ud83d\udc4d  =||= ", ["1033", "JsonArray with capacity support in constructor", "sourabh gupta", "guptasourabh", "03/13/17, 02:59:41 AM", "JsonArray with capacity support in constructor", "NaN"], ["guptasourabh", "JsonArray with capacity in constructor\n\nJsonArray with capacity in constructor", "03/12/17, 06:49:29 PM", "GitHub", "952171e329db262c742a5d0fd8aa6868e0a80511", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -39,14 +39,21 @@\n   public JsonArray() {\n     elements = new ArrayList<JsonElement>();\n   }\n+  \n+  public JsonArray(int capacity) {\n+    elements = new ArrayList<JsonElement>(capacity);\n+  }\n \n   @Override\n   JsonArray deepCopy() {\n-    JsonArray result = new JsonArray();\n-    for (JsonElement element : elements) {\n-      result.add(element.deepCopy());\n+    if (!elements.isEmpty()) {\n+      JsonArray result = new JsonArray(elements.size());\n+      for (JsonElement element : elements) {\n+        result.add(element.deepCopy());\n+      }\n+      return result;\n     }\n-    return result;\n+    return new JsonArray();\n   }\n \n   /**, ", 11, 4, "\"modified, \"", 15], 1], ["1034", "Nested Objects that require custom JsonSerializers not working if the parent object is requires a custom JsonSerializer", null, "sreejithraman", "03/15/17, 12:07:20 PM", "I have a json object that looks like this:\r\n````json\r\n    {\r\n        \"user\": {\r\n            \"id\": 1234\r\n            ... \r\n            \"photos\": {\r\n                \"abc\": {\r\n                    \"url\": \"http://.....\"\r\n                    ...\r\n                }\r\n            }\r\n        }\r\n    }\r\n````\r\nI want to write a custom deserializer for both `user` and `photos`. \r\n\r\nso I have:\r\n\r\n````java\r\n    public class User {\r\n        private long id;\r\n        private ArrayList<Photo> photos;\r\n        ... \r\n\r\n        public static class Deserializer implements JsonDeserializer<User> {\r\n            ... // does the custom serialization of the User object \r\n        }  \r\n    }\r\n\r\n    public class Photo {\r\n        private String url;\r\n        ... \r\n\r\n        public static class Deserializer implements JsonDeserializer<Photos> {\r\n            ... // does the custom serialization of the Photo object \r\n        }  \r\n    }\r\n````\r\n\r\nand when initializing I do this:\r\n````java\r\n    new GsonBuilder()\r\n       .registerTypeAdapter(User.class, new User.Deserializer());\r\n       .registerTypeAdapter(Photos.class, new Photos.Deserializer());\r\n````\r\nHowever, when i deserialize the `User` class, it hits the `User`'s deserializer but never hits the `Photo`'s deserializer. But if i get a json with the photo object not nested in the user json object like this:\r\n````json\r\n    {\r\n        \"photos\": {\r\n             \"abc\": {\r\n                 \"url\": \"http://.....\"\r\n                  ...\r\n             }\r\n             \"bcd\": {\r\n                 \"url\": \"http://.....\"\r\n                  ...\r\n             }\r\n             \"cde\": {\r\n                 \"url\": \"http://.....\"\r\n                  ...\r\n             }\r\n    }\r\n````\r\nit will properly hit the `Photo`'s deserializer\r\n\r\nSO question: http://stackoverflow.com/questions/42772466/jsonserializer-not-working-for-nested-objects-using-gson", "Can you create a pull request with a JUnit test that reproduces this problem? =||= ", 0], ["1036", "Github has this repository marked as HTML in search results", "Stuart Watt", "morungos", "03/15/17, 06:26:58 PM", "Just a tiny meta-issue, I was doing some Github API tests and found that this repository is tagged as language `HTML`, which doesn't seem right. It might be worth amending that, not that it is especially visible, except to search results.  ", "We don't really control this. It's based on the contents of the repo. =||= Hmm, you're right, although there are overrides: https://github.com/github/linguist#overrides. The generated code (i.e., the Javadocs) should be tagged, and in theory that's possible through one of these overrides, but it isn't 100% clear how. Vendored components can be tagged easily enough. \r\n\r\nI think it might still be an open Github issue: https://github.com/github/linguist/issues/2206.\r\n\r\nI'll close as it's patently not fixable here (yet!) =||= This issue has a duplicate #1348 and an attempt to fix in #1349. =||= ", 0], ["1037", "elimiating code overhead", "sourabh gupta", "guptasourabh", "03/18/17, 07:34:10 PM", "Changes are -:\r\n1) Calculating length and size beforehand in cases of for loops.\r\n2) index can never be equal to length in FieldNamingPolicy.\r\n\r", "@inder123 for review\r\n =||= @JakeWharton for review =||= ", ["1037", "elimiating code overhead", "sourabh gupta", "guptasourabh", "03/18/17, 07:34:10 PM", "Changes are -:\n1) Calculating length and size beforehand in cases of for loops.\n2) index can never be equal to length in FieldNamingPolicy.\n", "NaN"], ["Sourabh Gupta", "elimiating code overhead", "03/15/17, 05:11:42 PM", "Sourabh Gupta", "d0e70bcdbf15aab8b03a05c88da4a4b4f60222dc", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"], "@@ -150,10 +150,6 @@ static String upperCaseFirstLetter(String name) {\n       firstCharacter = name.charAt(++index);\n     }\n \n-    if (index == length) {\n-      return fieldNameBuilder.toString();\n-    }\n-\n     if (!Character.isUpperCase(firstCharacter)) {\n       String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);\n       return fieldNameBuilder.append(modifiedTarget).toString();, @@ -224,7 +224,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\n \n       if (hasComplexKeys) {\n         out.beginArray();\n-        for (int i = 0; i < keys.size(); i++) {\n+        for (int i = 0, size = keys.size(); i < size; i++) {\n           out.beginArray(); // entry array\n           Streams.write(keys.get(i), out);\n           valueTypeAdapter.write(out, values.get(i));\n@@ -233,7 +233,7 @@ public Adapter(Gson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\n         out.endArray();\n       } else {\n         out.beginObject();\n-        for (int i = 0; i < keys.size(); i++) {\n+        for (int i = 0, size = keys.size(); i < size; i++) {\n           JsonElement keyElement = keys.get(i);\n           out.name(keyToString(keyElement));\n           valueTypeAdapter.write(out, values.get(i));, ", 2, 6, "\"modified, modified, \"", 8], 1], ["1038", "list addition optimization", "sourabh gupta", "guptasourabh", "03/17/17, 04:16:39 AM", "Changes -:\r\n1) Instead of always adding item at 0th position and then shifting the list every time with the new addition, add the item in the last and then reverse the complete list.\r\n2) Correctly allocation of array sizes.\r", "Thanks for the explanation. \ud83d\udc4d  =||= ", ["1038", "list addition optimization", "sourabh gupta", "guptasourabh", "03/17/17, 04:16:39 AM", "Changes -:\n1) Instead of always adding item at 0th position and then shifting the list every time with the new addition, add the item in the last and then reverse the complete list.\n2) Correctly allocation of array sizes.", "NaN"], ["guptasourabh", "Optimized imports\n\nOptimized imports", "03/16/17, 06:24:35 PM", "GitHub", "5a6c85daaec12df92caf0394728fc61b2a72d2ec", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -16,13 +16,6 @@\n \n package com.google.gson;\n \n-import com.google.gson.internal.$Gson$Preconditions;\n-import com.google.gson.internal.Excluder;\n-import com.google.gson.internal.bind.TreeTypeAdapter;\n-import com.google.gson.internal.bind.TypeAdapters;\n-import com.google.gson.reflect.TypeToken;\n-import com.google.gson.stream.JsonReader;\n-\n import java.lang.reflect.Type;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n@@ -33,6 +26,13 @@\n import java.util.List;\n import java.util.Map;\n \n+import com.google.gson.internal.$Gson$Preconditions;\n+import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.bind.TreeTypeAdapter;\n+import com.google.gson.internal.bind.TypeAdapters;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+\n import static com.google.gson.Gson.DEFAULT_COMPLEX_MAP_KEYS;\n import static com.google.gson.Gson.DEFAULT_ESCAPE_HTML;\n import static com.google.gson.Gson.DEFAULT_JSON_NON_EXECUTABLE;, ", 7, 7, "\"modified, \"", 14], 1], ["1039", "optimized Redundant isNumber() instance checks.", "sourabh gupta", "guptasourabh", "03/18/17, 07:36:34 PM", "In JsonPrimitive getAsString getting called when its not a number , but inside that also its again checking if it's a number or not which is redundant", "@inder123 for review\r\n =||= Overall, I don't know if this really improves anything. Probably the resulting code is a little less readable. =||= @inder123 yes but when we knew its a instanceof Number then calling getAsNumber and then checking if it's instance of String doesn't make sense .\r\n =||= Yeah, I don\u2019t think this is an improvement. =||= ", 0], ["1040", "gson concurrent problems if I have static hashMap", "Lino Oscar Garc\u00eda Garc\u00eda", "LinoOscar", "03/20/17, 01:32:18 PM", "Hi friends!\r\n\r\nThanks for your work! I will going to open this issue, but it is the typical problem that is in the frontier of products, and is the fault of one or another according to the eyes that you are using for study it :-)\r\n\r\nThis is my stack trace:\r\n\r\njava.util.ConcurrentModificationException\r\n\tat java.util.HashMap$AbstractMapIterator.checkConcurrentMod(HashMap.java:197)\r\n\tat java.util.HashMap$AbstractMapIterator.makeNext(HashMap.java:202)\r\n\tat java.util.HashMap$EntryIterator.next(HashMap.java:263)\r\n\tat java.util.HashMap$EntryIterator.next(HashMap.java:256)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.Gson.toJson(Gson.java:669)\r\n\tat com.google.gson.Gson.toJson(Gson.java:648)\r\n\tat com.google.gson.Gson.toJson(Gson.java:603)\r\n\tat com.google.gson.Gson.toJson(Gson.java:583)\r\n\tat es.isban.portlets.util.JSONUtils.toJson(JSONUtils.java:41)\r\n\r\nI review your code and i discover that the problem is that you are using one iterator over the same map that i am sending to you.... and I obtain one problem in your code due that there are more than one thread over my Hashmap\r\n\r\nObsiously, if i use concurrentHashMap or hastTable I avoid the problem but... really you aren't thread-safe in this case, at least, theorically...\r\n\r\nSo, i open this issue only for inform you... are this one bug, maybe must you clone income map for avoid problems? Who knows!!!\r\n\r\nThanks for your great product!!\r\n\r\nRegards,\r\nLino", "What would you expect Gson to do in this case? Even if we try and make a\ndefensive copy (which would be crazy slow), it still uses an Iterator to\ncopy the data.\n\nOn Sun, Mar 19, 2017 at 10:18 PM LinoOscar <notifications@github.com> wrote:\n\n> Hi friends!\n>\n> Thanks for your work! I will going to open this issue, but it is the\n> typical problem that is in the frontier of products, and is the fault of\n> one or another according to the eyes that you are using for study it :-)\n>\n> This is my stack trace:\n>\n> java.util.ConcurrentModificationException\n> at\n> java.util.HashMap$AbstractMapIterator.checkConcurrentMod(HashMap.java:197)\n> at java.util.HashMap$AbstractMapIterator.makeNext(HashMap.java:202)\n> at java.util.HashMap$EntryIterator.next(HashMap.java:263)\n> at java.util.HashMap$EntryIterator.next(HashMap.java:256)\n> at\n> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)\n> at\n> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n> at\n> com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n> at\n> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\n> at\n> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n> at com.google.gson.Gson.toJson(Gson.java:669)\n> at com.google.gson.Gson.toJson(Gson.java:648)\n> at com.google.gson.Gson.toJson(Gson.java:603)\n> at com.google.gson.Gson.toJson(Gson.java:583)\n> at es.isban.portlets.util.JSONUtils.toJson(JSONUtils.java:41)\n>\n> I review your code and i discover that the problem is that you are using\n> one iterator over the same map that i am sending to you.... and I obtain\n> one problem in your code due that there are more than one thread over my\n> Hashmap\n>\n> Obsiously, if i use concurrentHashMap or hastTable I avoid the problem\n> but... really you aren't thread-safe in this case, at least, theorically...\n>\n> So, i open this issue only for inform you... are this one bug, maybe must\n> you clone income map for avoid problems? Who knows!!!\n>\n> Thanks for your great product!!\n>\n> Regards,\n> Lino\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1040>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEfY6u7uiczPxAJyoRSApdkC5tQk3ks5rneHjgaJpZM4Mh-MP>\n> .\n>\n =||= Hi Jake\r\n\r\nI'm agree with you that any change in this case is unacceptable in performance terms; i will change my code, but I have considered important collaborate in your great work; if anyone in the future have this problem, he will be able to read this thread and discover that the same instance map  of this code is the printted map, and he must solved in own code concurrent problem. =||= ", 0], ["1041", "Fix headers format in the README.md", "Egor Neliuba", "egor-n", "03/20/17, 12:40:50 PM", "NaN", "NaN", ["1041", "Fix headers format in the README.md", "Egor Neliuba", "egor-n", "03/20/17, 12:40:50 PM", "NaN", "NaN"], ["Egor Neliuba", "Fix headers format in the README.md", "03/20/17, 11:11:18 AM", "GitHub", "f16a769853638f507bc166c43e46cb9e05f58c5c", ["README.md"], "@@ -9,30 +9,30 @@ Gson can work with arbitrary Java objects including pre-existing objects that yo\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n \n-###*Gson Goals*\n+### Gson Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-###*Gson Download and Maven*\n+### Gson Download and Maven\n   * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n   * For Maven check \"Dependency Information\" tab, on the left side.\n \n-###*Gson Documentation*\n+### Gson Documentation\n   * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n   * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n \n Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n \n-###*Gson-related Content Created by Third Parties*\n+### Gson-related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n \n-###*License*\n+### License\n \n Gson is released under the [Apache 2.0 license](LICENSE).\n , ", 5, 5, "\"modified, \"", 10], 1], ["1042", "Simplified access of getSimpleName", "sourabh gupta", "guptasourabh", "03/20/17, 09:25:53 PM", "instead of calling getClass.getSimpleName() that will check too many conditions inside , we can make it as final String and use it directly.", "@inder123 for review\r\n =||= @JakeWharton requested changes done\r\n =||= \ud83d\udc4d  =||= ", ["1042", "Simplified access of getSimpleName", "sourabh gupta", "guptasourabh", "03/20/17, 09:25:53 PM", "instead of calling getClass.getSimpleName() that will check too many conditions inside , we can make it as final String and use it directly.", "NaN"], ["sourabh gupta", "Simplified access of getSimpleName\n\nCode Review changes", "03/20/17, 06:11:38 PM", "GitHub", "c6a3ce644855c07b4a23020f66bd15032271bbe6", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java"], "@@ -37,11 +37,12 @@\n final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n \n   // TODO: migrate to streaming adapter\n-\n+  \n+  private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n+  \n   private final DateFormat enUsFormat;\n   private final DateFormat localFormat;\n-  private final static String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n-\n+  \n   DefaultDateTypeAdapter() {\n     this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));, ", 4, 3, "\"modified, \"", 7], 1], ["1043", "Optimized no of iterations for copying values.", "sourabh gupta", "guptasourabh", "03/21/17, 03:09:48 AM", "For copying the values we are iterating 3 times over the stackSize with the use of arrayCopy individually for stack,patchIndices and pathNames instead of that we can run a single for loop that will iterate till stackSize and copy all the values of stack,pathIndixes and pathNames in new array.", "Please don\u2019t contribute micro-optimizations without motivating benchmarks. In this case it might be a pessimization because arraycopy is intrinsic. =||= ", 0], ["1044", "t resolve symbol N android studio", null, "ZionQ", "03/21/17, 10:25:37 AM", "NaN", "NaN", 0], ["1045", "UserGuide formatting fix", "Matthew Haughton", "3flex", "03/21/17, 06:14:47 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1045", "UserGuide formatting fix", "Matthew Haughton", "3flex", "03/21/17, 06:14:47 PM", "NaN", "NaN"], ["Matthew Haughton", "UserGuide formatting fixes", "03/21/17, 05:37:22 PM", "GitHub", "74c938523f55aba728e86e602e328f6898052345", ["UserGuide.md"], "@@ -5,32 +5,32 @@\n 3. [Gson Performance and Scalability](#TOC-Gson-Performance-and-Scalability)\n 4. [Gson Users](#TOC-Gson-Users)\n 5. [Using Gson](#TOC-Using-Gson)\n-  * [Using Gson with Maven](#TOC-Gson-With-Maven)\n-  * [Primitives Examples](#TOC-Primitives-Examples)\n-  * [Object Examples](#TOC-Object-Examples)\n-  * [Finer Points with Objects](#TOC-Finer-Points-with-Objects)\n-  * [Nested Classes (including Inner Classes)](#TOC-Nested-Classes-including-Inner-Classes-)\n-  * [Array Examples](#TOC-Array-Examples)\n-  * [Collections Examples](#TOC-Collections-Examples)\n-    * [Collections Limitations](#TOC-Collections-Limitations)\n-  * [Serializing and Deserializing Generic Types](#TOC-Serializing-and-Deserializing-Generic-Types)\n-  * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types)\n-  * [Built-in Serializers and Deserializers](#TOC-Built-in-Serializers-and-Deserializers)\n-  * [Custom Serialization and Deserialization](#TOC-Custom-Serialization-and-Deserialization)\n-    * [Writing a Serializer](#TOC-Writing-a-Serializer)\n-    * [Writing a Deserializer](#TOC-Writing-a-Deserializer)\n-  * [Writing an Instance Creator](#TOC-Writing-an-Instance-Creator)\n-    * [InstanceCreator for a Parameterized Type](#TOC-InstanceCreator-for-a-Parameterized-Type)\n-  * [Compact Vs. Pretty Printing for JSON Output Format](#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format)\n-  * [Null Object Support](#TOC-Null-Object-Support)\n-  * [Versioning Support](#TOC-Versioning-Support)\n-  * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n-    * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n-    * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n-    * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n-  * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n-  * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n-  * [Streaming](#TOC-Streaming)\n+   * [Using Gson with Maven](#TOC-Gson-With-Maven)\n+   * [Primitives Examples](#TOC-Primitives-Examples)\n+   * [Object Examples](#TOC-Object-Examples)\n+   * [Finer Points with Objects](#TOC-Finer-Points-with-Objects)\n+   * [Nested Classes (including Inner Classes)](#TOC-Nested-Classes-including-Inner-Classes-)\n+   * [Array Examples](#TOC-Array-Examples)\n+   * [Collections Examples](#TOC-Collections-Examples)\n+     * [Collections Limitations](#TOC-Collections-Limitations)\n+   * [Serializing and Deserializing Generic Types](#TOC-Serializing-and-Deserializing-Generic-Types)\n+   * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#TOC-Serializing-and-Deserializing-Collection-with-Objects-of-Arbitrary-Types)\n+   * [Built-in Serializers and Deserializers](#TOC-Built-in-Serializers-and-Deserializers)\n+   * [Custom Serialization and Deserialization](#TOC-Custom-Serialization-and-Deserialization)\n+     * [Writing a Serializer](#TOC-Writing-a-Serializer)\n+     * [Writing a Deserializer](#TOC-Writing-a-Deserializer)\n+   * [Writing an Instance Creator](#TOC-Writing-an-Instance-Creator)\n+     * [InstanceCreator for a Parameterized Type](#TOC-InstanceCreator-for-a-Parameterized-Type)\n+   * [Compact Vs. Pretty Printing for JSON Output Format](#TOC-Compact-Vs.-Pretty-Printing-for-JSON-Output-Format)\n+   * [Null Object Support](#TOC-Null-Object-Support)\n+   * [Versioning Support](#TOC-Versioning-Support)\n+   * [Excluding Fields From Serialization and Deserialization](#TOC-Excluding-Fields-From-Serialization-and-Deserialization)\n+     * [Java Modifier Exclusion](#TOC-Java-Modifier-Exclusion)\n+     * [Gson's `@Expose`](#TOC-Gson-s-Expose)\n+     * [User Defined Exclusion Strategies](#TOC-User-Defined-Exclusion-Strategies)\n+   * [JSON Field Naming Support](#TOC-JSON-Field-Naming-Support)\n+   * [Sharing State Across Custom Serializers and Deserializers](#TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers)\n+   * [Streaming](#TOC-Streaming)\n 6. [Issues in Designing Gson](#TOC-Issues-in-Designing-Gson)\n 7. [Future Enhancements to Gson](#TOC-Future-Enhancements-to-Gson)\n , ", 26, 26, "\"modified, \"", 52], 1], ["1046", "Processing non-standard JSON", null, "SteinerOkay", "03/22/17, 04:18:02 PM", "Good day, I have a non-standard JSON, here it is:\r\n```\r\n{\r\n  \"0\": {\r\n    \"case\": {\r\n      \"case_id\": 6724565,\r\n      \"case_number\": \"316-862565\",\r\n      \"labels\": []\r\n    }\r\n  },\r\n  \"1\": {\r\n    \"case\": {\r\n      \"case_id\": 6724094,\r\n      \"case_number\": \"766-765118\",\r\n      \"labels\": [\r\n        13244\r\n      ]\r\n    }\r\n  },\r\n  \"3\": {\r\n    \"case\": {\r\n      \"case_id\": 6724091,\r\n      \"case_number\": \"766-765232328\",\r\n      \"labels\": [\r\n        13243\r\n      ]\r\n    }\r\n  },\r\n  \"total_count\": 5\r\n}\r\n```\r\nIs there any adequate way to process this JSON?", "Please ask usage questions on StackOverflow. Also I don't see anything non-standard about that JSON. =||= ", 0], ["1047", "Size allocation of StringBuilder", "sourabh gupta", "guptasourabh", "05/24/17, 10:49:09 PM", "Size allocation of StringBuilder", "@inder123 for review\r\n =||= ", ["1047", "Size allocation of StringBuilder", "sourabh gupta", "guptasourabh", "05/24/17, 10:49:09 PM", "Size allocation of StringBuilder", "NaN"], ["sourabh gupta", "Size allocation of StringBuilder\n\nSize allocation of StringBuilder", "03/23/17, 02:24:13 AM", "GitHub", "7daa7aff28d3005f5844fb36b7e080a3c15c2b35", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -1077,7 +1077,7 @@ private String nextUnquotedValue() throws IOException {\n \n       // use a StringBuilder when the value is too long. This is too long to be a number!\n       if (builder == null) {\n-        builder = new StringBuilder();\n+        builder = new StringBuilder(Math.max(i,16));\n       }\n       builder.append(buffer, pos, i);\n       pos += i;\n@@ -1086,14 +1086,8 @@ private String nextUnquotedValue() throws IOException {\n         break;\n       }\n     }\n-\n-    String result;\n-    if (builder == null) {\n-      result = new String(buffer, pos, i);\n-    } else {\n-      builder.append(buffer, pos, i);\n-      result = builder.toString();\n-    }\n+   \n+    String result = (null == builder) ? new String(buffer, pos, i) : builder.append(buffer, pos, i).toString();\n     pos += i;\n     return result;\n   }\n@@ -1438,14 +1432,15 @@ private void skipToEndOfLine() throws IOException {\n    * @param toFind a string to search for. Must not contain a newline.\n    */\n   private boolean skipTo(String toFind) throws IOException {\n+    int length = toFind.length();\n     outer:\n-    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n+    for (; pos + length <= limit || fillBuffer(length); pos++) {\n       if (buffer[pos] == '\\n') {\n         lineNumber++;\n         lineStart = pos + 1;\n         continue;\n       }\n-      for (int c = 0; c < toFind.length(); c++) {\n+      for (int c = 0; c < length; c++) {\n         if (buffer[pos + c] != toFind.charAt(c)) {\n           continue outer;\n         }, ", 6, 11, "\"modified, \"", 17], 1], ["1050", "Accessing FieldType single time", "sourabh gupta", "guptasourabh", "03/23/17, 02:57:08 PM", "Presently we are creating FieldType every time in the for loop , we can create the single instance before starting for loop.", "NaN", 0], ["1051", "Optimization of TypeToken Generation", "sourabh gupta", "guptasourabh", "03/23/17, 06:57:26 PM", "in createBoundFiled , while creating new TypeToken we are generating type , rawType and hashCode every time , instead of that we can generate it once and use the same.", "NaN", 0], ["1052", "Update GsonDesignDocument.md", "Timmy Villaluz", "tvillaluz", "03/23/17, 10:15:43 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1052", "Update GsonDesignDocument.md", "Timmy Villaluz", "tvillaluz", "03/23/17, 10:15:43 PM", "NaN", "NaN"], ["Timmy Villaluz", "Update GsonDesignDocument.md", "03/23/17, 09:58:52 PM", "GitHub", "4274e359567814ddb2859c1dbdb78af0a1ad476a", ["GsonDesignDocument.md"], "@@ -1,4 +1,4 @@\n-#Gson Design Document\n+# Gson Design Document\n \n This document presents issues that we faced while designing Gson. It is meant for advanced users or developers working on Gson. If you are interested in learning how to use Gson, see its user guide. \n , ", 1, 1, "\"modified, \"", 2], 1], ["1053", "Negative zero", "Michele Vivoda", "eleumik", "04/19/17, 09:26:52 PM", "Hi,\r\n\r\nI have been cross testing various json parsers looking for those that expose the lexical of json numbers and not only their bound java.lang.Number. Because of the lazy parsing done by gson with `LazilyParsedNumber`,  that keeps the lexical, all my roundtrip tests pass apart one: the lexical  `-0` that is treated as it were `0`\r\n\r\nI read some threads about negative zero: \r\nhttps://www.ietf.org/mail-archive/web/json/current/msg03668.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01520.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01523.html\r\nhttps://www.ietf.org/mail-archive/web/json/current/msg01525.html\r\n\r\nI created this issue thinking that `-0` is a float, the same as `-0.0`, since a signed zero makes sense only in floating point numbers and also because in Java only Double/Float preserve sign of zero.  This would have the implication that `-0` could not be validated by jsonschema `type` `integer` , and that a jsonschema implementation would have the need to know if a `-0` is present in json data, but probably this is not the case.\r\n\r\nAfter I started to (re)consider that `-0` could be an integer, only that seems that in no programming language there is an integer that preserves sign for zero.\r\n\r\nIn any case, differentiating between `0` and `-0`  at lexical level would allow a client of gson to be able to refuse the value `-0`.\r\n\r\nGson could easily support differentiating between `0` and `-0`: in code `-0` is [treated as an integer (PEEKED_LONG) in JsonReader](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731) so its value is stored in a Java `long` that cannot represent negative zero. I noted that `-0.0` roundtrips correctly because is treated as a PEEKED_NUMBER that is kept as a Java String. So the case of `-0` could be trapped and treated as `-0.0`, as a PEEKED_NUMBER, in this way the `toString()` method of `LazilyParsedNumber` will return `-0` and gson will be able to roundtrip any valid number value found in source, only clients using `Number.toString()` will notice any difference.\r\n\r\nMy proposal is to change [this code](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731)  from\r\n\r\n          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\r\n    \r\nto \r\n\r\n          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {\r\n    \r\n\r\nThanks,\r\nMichele\r", "@swankjesse Any concerns if we accept this change? \r\n\r\n@eleumik Thank you for taking time to write the issue with considerable detail. It would be great if you can also send a pull request that we can just merge. Please include a test-case for negative zero as well. =||= If somebody knows if `-0` is an integer with no representation in any language or a float same as `-0.0` or other, please let me know.\r\n\r\nThanks for merging, happy you liked it\r\n =||= all languages that use Two's complement can not represent -0 as ints. =||= @eleumik  Did the test that you write fail without your fix?  =||= yes, I wrote first the test.  I double checked now. =||= Thanks. Yes, TDD for bug fixes is awesome. =||= ", 0], ["1054", "Please expose JsonReader/JsonWriter stack state and provide JsonReader.skipToken() method", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/01/18, 10:26:29 AM", "Hi,\r\n\r\nFirst of all, apologies for reporting two issues as one, however they are really relevant to each other. Please consider the following scenario. Suppose there is a service that produces valid JSON documents that the documents have design flaws. For example\r\n\r\n```json\r\n[\r\n\t{\"foo\": 1,\"bar\": 2},\r\n\t{\"foo\": 1,\"bar\": \"bar\"}\r\n]\r\n```\r\n\r\nThe mapping is as follows:\r\n\r\n```java\r\nfinal class Dto {\r\n\tfinal Integer foo = null;\r\n\tfinal Integer bar = null;\r\n\t@Override public String toString() { return \"(\" + foo + ',' + bar + ')'; }\r\n}\r\n```\r\n\r\nAs you can see, Gson will fail at `$[1].bar`:\r\n\r\n>java.lang.NumberFormatException: For input string: \"bar\"\r\n\r\nSuppose I would like to skip invalid array elements:\r\n\r\n```java\r\nfinal class IgnoreInvalidElementsTypeAdapterFactory\r\n\t\timplements TypeAdapterFactory {\r\n\r\n\tprivate static final TypeAdapterFactory ignoreInvalidElementsTypeAdapterFactory = new IgnoreInvalidElementsTypeAdapterFactory();\r\n\r\n\tprivate IgnoreInvalidElementsTypeAdapterFactory() {\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory getIgnoreInvalidElementsTypeAdapterFactory() {\r\n\t\treturn ignoreInvalidElementsTypeAdapterFactory;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\tif ( List.class.isAssignableFrom(typeToken.getRawType()) ) {\r\n\t\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\t\t\tfinal TypeAdapter<?> typeAdapter = new IgnoreInvalidElementsTypeAdapter<>(\r\n\t\t\t\t\t(TypeAdapter<Object>) gson.getDelegateAdapter(this, TypeToken.get(getElementType(typeToken.getType()))),\r\n\t\t\t\t\t(TypeAdapter<List<Object>>) gson.getDelegateAdapter(this, typeToken)\r\n\t\t\t);\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\tfinal TypeAdapter<T> castTypeAdapter = (TypeAdapter<T>) typeAdapter;\r\n\t\t\treturn castTypeAdapter;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate static Type getElementType(final Type type) {\r\n\t\tif ( !(type instanceof ParameterizedType) ) {\r\n\t\t\treturn Object.class;\r\n\t\t}\r\n\t\tfinal ParameterizedType parameterizedType = (ParameterizedType) type;\r\n\t\treturn parameterizedType.getActualTypeArguments()[0];\r\n\t}\r\n\r\n\tprivate static final class IgnoreInvalidElementsTypeAdapter<E>\r\n\t\t\textends TypeAdapter<List<E>> {\r\n\r\n\t\tprivate final TypeAdapter<E> elementTypeAdapter;\r\n\t\tprivate final TypeAdapter<List<E>> originalListTypeAdapter;\r\n\r\n\t\tprivate IgnoreInvalidElementsTypeAdapter(final TypeAdapter<E> elementTypeAdapter, final TypeAdapter<List<E>> originalListTypeAdapter) {\r\n\t\t\tthis.elementTypeAdapter = elementTypeAdapter;\r\n\t\t\tthis.originalListTypeAdapter = originalListTypeAdapter;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(final JsonWriter out, final List<E> value)\r\n\t\t\t\tthrows IOException {\r\n\t\t\toriginalListTypeAdapter.write(out, value);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic List<E> read(final JsonReader in)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tif ( in.peek() == NULL ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tfinal List<E> list = new ArrayList<>();\r\n\t\t\tin.beginArray();\r\n\t\t\twhile ( in.hasNext() ) {\r\n\t\t\t\tfinal int oldStackSize = getStackSize(in);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlist.add(elementTypeAdapter.read(in));\r\n\t\t\t\t} catch ( final Exception ignored ) {\r\n\t\t\t\t\tskipBack(in, oldStackSize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tin.endArray();\r\n\t\t\treturn list;\r\n\t\t}\r\n\r\n\t\tprivate static void skipBack(final JsonReader in, final int oldStackSize)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tfinal int newStackSize = getStackSize(in);\r\n\t\t\tif ( newStackSize == oldStackSize ) {\r\n\t\t\t\tskipToken(in);\r\n\t\t\t} else if ( newStackSize > oldStackSize ) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\tskipToken(in);\r\n\t\t\t\t} while ( getStackSize(in) > oldStackSize );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void skipToken(final JsonReader in)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tfinal JsonToken token = in.peek();\r\n\t\t\tswitch ( token ) {\r\n\t\t\tcase BEGIN_ARRAY:\r\n\t\t\t\tin.beginArray();\r\n\t\t\t\tbreak;\r\n\t\t\tcase END_ARRAY:\r\n\t\t\t\tin.endArray();\r\n\t\t\t\tbreak;\r\n\t\t\tcase BEGIN_OBJECT:\r\n\t\t\t\tin.beginObject();\r\n\t\t\t\tbreak;\r\n\t\t\tcase END_OBJECT:\r\n\t\t\t\tin.endObject();\r\n\t\t\t\tbreak;\r\n\t\t\tcase NAME:\r\n\t\t\t\tin.nextName();\r\n\t\t\t\tbreak;\r\n\t\t\tcase STRING:\r\n\t\t\tcase NUMBER:\r\n\t\t\tcase BOOLEAN:\r\n\t\t\tcase NULL:\r\n\t\t\t\tin.skipValue();\r\n\t\t\t\tbreak;\r\n\t\t\tcase END_DOCUMENT:\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new AssertionError(token);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static final Field stackSizeField = getAccessibleDeclaredField(JsonReader.class, \"stackSize\");\r\n\r\n\t\tprivate static int getStackSize(final JsonReader in) {\r\n\t\t\treturn getFieldValue(in, stackSizeField);\r\n\t\t}\r\n\r\n\t\tprivate static Field getAccessibleDeclaredField(final Class<?> clazz, final String name) {\r\n\t\t\ttry {\r\n\t\t\t\tfinal Field field = clazz.getDeclaredField(name);\r\n\t\t\t\tfield.setAccessible(true);\r\n\t\t\t\treturn field;\r\n\t\t\t} catch ( final NoSuchFieldException ex ) {\r\n\t\t\t\tthrow new RuntimeException(ex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static <T> T getFieldValue(final Object object, final Field field) {\r\n\t\t\ttry {\r\n\t\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t\tfinal T castValue = (T) field.get(object);\r\n\t\t\t\treturn castValue;\r\n\t\t\t} catch ( final IllegalAccessException ex ) {\r\n\t\t\t\tthrow new RuntimeException(ex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNow if adding the type adapter factory above, I can skip invalid array elements in Gson 2.8.0. The output is as follows (there is no the element in the result list):\r\n\r\n>[(1,2)]\r\n\r\nHowever, there are two points I would like to outline:\r\n\r\n* `JsonReader` does not provide any information on its internal parsing stack like stack itself, stack size, current node, etc. So, since I'm working with Gson 2.8.0, implemented a dirty hack using reflection in order to get the `JsonReader.stackSize` field value.\r\n* From time to time I re-impement the `skipToken` method not bothering to create a custom Gson extensions library for internal use.\r\n\r\nMy questions are:\r\n\r\n* Would you let both `JsonReader` and `JsonWriter` expose their current stack or at least its top state information?\r\n* What if `JsonReader` could also have something like `JsonReader.skipToken()` along with `skipValue()` to let `JsonReader` do exactly what the static `skipToken()` does above?\r\n\r\nThank you.", "NaN", 0], ["1056", "Add constructor to UtcDateTypeAdapter", "Greg Pendlebury", "greg-pendlebury", "03/28/17, 12:00:06 AM", "\u2026  to allow setting of the boolean 'millis' flag that was present in the format() method.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= Oh well, sorry, but I can't agree to the CLA: \"Grant of Copyright License.\"\r\n\r\nThe apache license it seriously not enough? =||= You should probably also check the source code for that class. I think there's clear references there to code lifted from the Jackson libraries which may not comply with the way that CLA is written. =||= Yes, Apache is not enough.\n\nOn Mon, Mar 27, 2017, 8:30 PM Greg Pendlebury <notifications@github.com>\nwrote:\n\n> You should probably also check the source code for that class. I think\n> there's clear references there to code lifted from the Jackson libraries\n> which may not comply with the way that CLA is written.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1056#issuecomment-289622010>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEUZEraew9-asmN0tm0lLsH6N_FQlks5rqE5bgaJpZM4Mq-VP>\n> .\n>\n =||= ", 0], ["1057", "Why Gson fromJson get List is null ?", null, "letie", "03/28/17, 03:59:48 PM", "Hi ,guys\r\n**1. Json String is like this:**\r\n{\r\n    \"mac\":\"56:78:90:12:34:56\",\r\n    \"pin\":\"[\r\n        {\\\"pin\\\":\\\"0\\\",\\\"status\\\":\\\"0\\\"},    \r\n        {\\\"pin\\\":\\\"1\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"2\\\",\\\"status\\\":\\\"1\\\"},\r\n        {\\\"pin\\\":\\\"3\\\",\\\"status\\\":\\\"1\\\"},\r\n        {\\\"pin\\\":\\\"4\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"5\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"6\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"7\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"8\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"9\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"10\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"11\\\",\\\"status\\\":\\\"0\\\"},\r\n        {\\\"pin\\\":\\\"12\\\",\\\"status\\\":\\\"0\\\"}\r\n    ]\r\n\"} \r\n\r\n**2. Class is :**\r\n\r\nimport java.util.List;\r\n\r\n\r\npublic class ESP8266 {\r\n\r\n\tpublic String mac;\r\n\tpublic List<pin> pins;\r\n\t\r\n\tpublic class pin {\r\n\t\tint pin;\r\n\t\tint status;\r\n\t\t\r\n\t\tpublic int getPin() {\r\n\t\t\treturn pin;\r\n\t\t}\r\n\t\tpublic void setPin(int pin) {\r\n\t\t\tthis.pin = pin;\r\n\t\t}\r\n\t\tpublic int getStatus() {\r\n\t\t\treturn status;\r\n\t\t}\r\n\t\tpublic void setStatus(int status) {\r\n\t\t\tthis.status = status;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic String getMac() {\r\n\t\treturn mac;\r\n\t}\r\n\r\n\tpublic void setMac(String mac) {\r\n\t\tthis.mac = mac;\r\n\t}\r\n\r\n\tpublic List<pin> getPins() {\r\n\t\treturn pins;\r\n\t}\r\n\r\n\tpublic void setPins(List<pin> pins) {\r\n\t\tthis.pins = pins;\r\n\t}\r\n\r\n}\r\n\r\n**3. Gson vesion is 2.8.0 Use like this :**\r\n\r\nGson gson = new Gson();\r\nESP8266 esp = gson.fromJson(data,ESP8266.class);\r\nSystem.out.println(\"json:\"+esp.pins);                        //out   json:null\r\n\r\nWhy esp.mac is ok , just the list esp.pins is null ?\r\nIs anybody help me , thanks very much!", "- Your  json structure has problem.  In your structure you have an array of  pin as \r\n`\"pin\":\"[]\"`\r\nInstead it should be `\"pin\" :  []`\r\n\r\n- Your POJO class has this property : `public List<pin> pins;`\r\nyou have to initialize that list, change it to:  `public List<pin> pins = new ArrayList<pin>();`\r\n\r\n- Please use stackoverflow for this kind of issues. =||= **Hi , gajeralalji .\r\nThank you !**\r\nMy json String is ESP8266(nodeMCU) lua created:\r\n    the lua code is :\r\n   json={}\r\n    pins=\"[\"\r\n    for pin=0,12,1 do\r\n        pins=pins..'{\"pin\":\"'..pin..'\",\"status\":\"'..gpio.read(pin)..'\"},'\r\n    end\r\n    \r\n    pins=string.sub(pins,1,string.len(pins)-1)..\"]\"\r\n    json.mac=wifi.sta.getmac()\r\n    json.pin=pins\r\n  \r\n    ok,data = pcall(cjson.encode, json)\r\n    print(data)\r\n\r\nI can't change it !\r\nI changed the pojo just you say\r\n\r\nit  result :json []\r\n\r\nI think the error is json type.  =||= it's running\r\none place changed the json string name must be same as class,like:public List<pin> `pins` = new ArrayList<pin>();\r\n\r\nthank you ! =||= Yes , i get it.\nthank you !\n\nAt 2017-03-28 17:57:44, \"Lalji Gajera\" <notifications@github.com> wrote:\n\n\nYour json structure has problem. In your structure you have an array of pin as\n\"pin\":\"[]\"\nInstead it should be \"pin\" : []\n\nYour POJO class has this property : public List<pin> pins;\nyou have to initialize that list, change it to: public List<pin> pins = new ArrayList<pin>();\n\nPlease use stackoverflow for this kind of issues.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread. =||= ", 0], ["1058", "SerializedName should allow regex names to be matched to a single name for input ", "Tomas Carrillo", "NotengoID", "04/07/17, 10:53:09 PM", "NaN", "You can use alternate tag instead. https://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html\r\n\r\nIf you have a proposal on how this will work, please send it out. A PR is even better. =||= ", 0], ["1060", "Serialize class name with objects", "piegames", "piegamesde", "04/11/17, 11:44:14 AM", "I'd like to use GSON as a replacement for the java default Serialization API. The only thing missing is to serialize the class of an object instance along with the object to allow full serialization.\r\n\r\nIn Genson, [this is possible](http://stackoverflow.com/a/19132243/6094756):\r\n\r\n>     Genson genson = new Genson.Builder().setWithClassMetadata(true).create();\r\n>     String json = genson.serialize(yourNode);\r\n\r\nHow difficult would it be to implement such a thing into GSON?\r\n\r\nI tried it with custom TypeAdapters, but because I don't have enough access to the API, I'm stuck with an StackOverflowError.", "Using [Gson on Fire](https://github.com/julman99/gson-fire) fixed my problem fixed my problem using the following preprocesssors:\r\n\r\n\tprivate static <T> TypeSelector getTypeSelector(Class<T> clazz) {\r\n\t\treturn new TypeSelector<T>() {\r\n\t\t\t@Override\r\n\t\t\tpublic Class<? extends T> getClassForElement(JsonElement readElement) {\r\n\t\t\t\tString kind = readElement.getAsJsonObject().get(\"kind\").getAsString();\r\n\t\t\t\ttry {\r\n\t\t\t\t\treturn (Class<? extends T>) Class.forName(kind);\r\n\t\t\t\t} catch (ClassNotFoundException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tprivate static <T> PostProcessor getPostProcessor(Class<T> clazz) {\r\n\t\treturn new PostProcessor<T>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void postDeserialize(T result, JsonElement src, Gson gson) {\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void postSerialize(JsonElement result, T src, Gson gson) {\r\n\t\t\t\tresult.getAsJsonObject().add(\"kind\", new JsonPrimitive(src.getClass().getName()));\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\nAnd calling them with\r\n\r\n\t\tnew GsonFireBuilder()\r\n\t\t\t\t.registerTypeSelector(MyClass.class, getTypeSelector(MyClass.class))\r\n\t\t\t\t.registerPostProcessor(MyClass.class, getPostProcessor(MyClass.class))\r\n\t\t\t\t[...]\r\n\r\nfor each class that should be serialized with its class name. =||= ", 0], ["1061", "java.util.ConcurrentModificationException         at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)", "MajorMud", "mrudangit", "04/11/17, 11:07:35 PM", "Getting java.util.ConcurrentModificationException from time to time. \r\n\r\nI had multiple threads doing :+1: \r\n\r\n  String json = objectToJSON.toJson(payload);\r\n\r\npayload is HashMap<String,Object>\r\n\r\nObject in the HashMap is simple \r\n\r\nObject of type is this class\r\npublic class PriceLevel {\r\n\r\n    private double px;\r\n    @Expose private long bs;\r\n    @Expose private long as;\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"PriceLevel{\" +\r\n                \"px=\" + px +\r\n                \", bs=\" + bs +\r\n                \", as=\" + as +\r\n                '}';\r\n    }\r\n\r\n    public PriceLevel(double price, long bidSize, long askSize){\r\n        this.px = price;\r\n        this.bs = bidSize;\r\n        this.as = askSize;\r\n    }\r\n\r\n\r\n    public String getDecimalPx(){\r\n        return  BigDecimal.valueOf(px).setScale(10,BigDecimal.ROUND_HALF_EVEN).stripTrailingZeros().toPlainString();\r\n    }\r\n\r\n    public Double getPx() {\r\n        return px;\r\n    }\r\n\r\n    public void setPx(Double px){\r\n        this.px = px;\r\n    }\r\n\r\n    public long getBs() {\r\n        return bs;\r\n    }\r\n\r\n    public void setBs(long bs) {\r\n        this.bs = bs;\r\n    }\r\n\r\n    public long getAs() {\r\n        return as;\r\n    }\r\n\r\n    public void setAs(long as) {\r\n        this.as = as;\r\n    }\r\n\r\n\r\n}\r\n\r\nI even made the method doing   String json = objectToJSON.toJson(payload);  synchronized\r\n\r\nstill i get the exception \r\n\r\n\r\njava.util.ConcurrentModificationException\r\n        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1463)\r\n        at java.util.HashMap$EntryIterator.next(HashMap.java:1461)\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\r\n        at com.google.gson.Gson.toJson(Gson.java:669)\r\n        at com.google.gson.Gson.toJson(Gson.java:648)\r\n        at com.google.gson.Gson.toJson(Gson.java:603)\r\n        at com.google.gson.Gson.toJson(Gson.java:583)\r\n\r\n\r", "Please write it as a JUnit test that reproduces the problem. Thanks. =||= Thanks. Never mind . it was application issue. I had 2 threads working on same HashMap while in thread 1 gson was iterating over hashmap to convert to JSON , thread 2 tried to update the same hashMap\r\n\r\nit wasn't concurrent hashmap\r\n\r\n =||= ", 0], ["1063", "Gson static initialisation takes close to 27 ms on a Nexus 5 device", "Mohammad Yasir", "yasirmhd", "04/12/17, 08:13:57 PM", "![image](https://cloud.githubusercontent.com/assets/13655724/24973102/3209df38-1fdb-11e7-98cf-3f1310a334f1.png)\r\n\r\nThis is because of the static initialisation of **NULL_KEY_SURROGATE** in Gson class. \r\nGiven this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)", "NaN", 0], ["1064", "Performance fix to do lazy initialization of null key surrogate", "Mohammad Yasir", "yasirmhd", "04/12/17, 08:11:21 PM", "Fixes issue #1063\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13655724/24973945/41484432-1fde-11e7-835b-2451c8478a16.png)\r\n\r\nThis is because of the static initialisation of NULL_KEY_SURROGATE in Gson class.\r\nGiven this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)", "I suspect a measurement error. What\u2019s the latency to parse a value before and after this change? =||= @swankjesse This is the cost that was being paid by the app just to create an instance of the Gson =||= btw, this was on a 4.4 Nexus 5 device =||= The complete call stack : \r\n\r\n![image](https://cloud.githubusercontent.com/assets/13655724/24974476/e3a84e88-1fdf-11e7-857b-f3ee5e4a0e3e.png)\r\n =||= This should use `TypeToken.get(Object.class)`. There's no need for the subclass and reflection hacks. =||= @JakeWharton : Agreed. Will make the changes in a bit. =||= Thanks @JakeWharton . It will be great if we get a SNAPSHOT version of the library with the changes done for this as well as #1015.  =||= I don't have the bits to push a SNAPSHOT. Perhaps @swankjesse can. =||= ", ["1064", "Performance fix to do lazy initialization of null key surrogate", "Mohammad Yasir", "yasirmhd", "04/12/17, 08:11:21 PM", "Fixes issue #1063\n\n![image](https://cloud.githubusercontent.com/assets/13655724/24973945/41484432-1fde-11e7-835b-2451c8478a16.png)\n\nThis is because of the static initialisation of NULL_KEY_SURROGATE in Gson class.\nGiven this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)", "NaN"], ["Mohammad Yasir", "Implementing code review changes", "04/12/17, 07:31:07 PM", "Mohammad Yasir", "29435b8d8834229d052b392903f22c66230b1402", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -109,6 +109,7 @@\n   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n+  private static final TypeToken<?> NULL_KEY_SURROGATE = TypeToken.get(Object.class);\n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   /**\n@@ -395,7 +396,7 @@ static void checkValidFloatingPoint(double value) {\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n-    TypeAdapter<?> cached = typeTokenCache.get(type == null ? TypeToken.get(Object.class) : type);\n+    TypeAdapter<?> cached = typeTokenCache.get(type == null ? NULL_KEY_SURROGATE : type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;\n     }, ", 2, 1, "\"modified, \"", 3], 1], ["1067", "JsonAdapterAnnotationTypeAdapterFactory exception when wrong type is used for @JsonAdapter could be more helpful", "Kevin Most", "kevinmost", "04/20/17, 12:08:32 AM", "The exception thrown [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java#L71) when you pass an invalid type to `@JsonAdapter` doesn't tell you what the invalid type was that was registered. It might be nice if it also included `instance.getClass().getName()` in the exception message.\r\n\r\nCan submit a PR if this is something of interest.", "Might also be nice to include the `type` that was targeted by the `@JsonAdapter` annotation? Having both of these pieces of info in the exception message would make it very easy to track down where the error is. =||= Good suggestion. Fixed in https://github.com/google/gson/pull/1068 =||= Great, thanks for the quick fix! =||= ", 0], ["1068", "Printing more debugging information to help track an invalid JsonAdap\u2026", "Inderjeet Singh", "inder123", "04/20/17, 12:08:21 AM", "\u2026ter.\r\n\r\nNow the thrown exception carries this information:\r\njava.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer.", "@JakeWharton please review when you get a chance. I am going to merge this now. =||= ", ["1068", "Printing more debugging information to help track an invalid JsonAdap\u2026", "Inderjeet Singh", "inder123", "04/20/17, 12:08:21 AM", "\u2026ter.\n\nNow the thrown exception carries this information:\njava.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer.", "NaN"], ["Inderjeet Singh", "Printing more debugging information to help track an invalid JsonAdapter.\n\nNow the thrown exception carries this information:\njava.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer.", "04/18/17, 06:54:27 PM", "Inderjeet Singh", "c3b9c0daa8c49e985983ff6d74ebc522a4396955", ["gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java", "gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java"], "@@ -136,6 +136,7 @@ private JsonElement createJsonElement(Object value) {\n    * Returns a set of members key values.\n    *\n    * @return a set of member keys as Strings\n+   * @since 2.8.1\n    */\n   public Set<String> keySet() {\n     return members.keySet();, @@ -68,9 +68,10 @@ public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructo\n           : null;\n       typeAdapter = new TreeTypeAdapter(serializer, deserializer, gson, type, null);\n     } else {\n-      throw new IllegalArgumentException(\n-          \"@JsonAdapter value must be TypeAdapter, TypeAdapterFactory, \"\n-              + \"JsonSerializer or JsonDeserializer reference.\");\n+      throw new IllegalArgumentException(\"Invalid attempt to bind an instance of \"\n+          + instance.getClass().getName() + \" as a @JsonAdapter for \" + type.toString()\n+          + \". @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory,\"\n+          + \" JsonSerializer or JsonDeserializer.\");\n     }\n \n     if (typeAdapter != null && annotation.nullSafe()) {, @@ -249,4 +249,15 @@ public NullableClass read(JsonReader in) throws IOException {\n       return Foo.valueOf(in.nextString().toUpperCase(Locale.US));\n     }\n   }\n+\n+  public void testIncorrectJsonAdapterType() {\n+    try {\n+      new Gson().toJson(new D());\n+      fail();\n+    } catch (IllegalArgumentException expected) {}\n+  }\n+  @JsonAdapter(Integer.class)\n+  private static final class D {\n+    @SuppressWarnings(\"unused\") final String value = \"a\";\n+  }\n }, ", 16, 3, "\"modified, modified, modified, \"", 19], 1], ["1069", "negative zero test and fix", "Michele Vivoda", "eleumik", "04/19/17, 09:26:37 PM", "For issue #1053 ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= Thank you. \ud83d\udc4d  =||= Thanks ! =||= ", ["1069", "negative zero test and fix", "Michele Vivoda", "eleumik", "04/19/17, 09:26:37 PM", "For issue #1053 ", "NaN"], ["Michele Vivoda", "negative zero test and fix", "04/19/17, 04:03:51 PM", "Michele Vivoda", "60c977a706763bf6a27b7b79afcb710f96665090", ["gson/src/main/java/com/google/gson/stream/JsonReader.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"], "@@ -728,7 +728,7 @@ private int peekNumber() throws IOException {\n     }\n \n     // We've read a complete number. Decide if it's a PEEKED_LONG or a PEEKED_NUMBER.\n-    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n+    if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {\n       peekedLong = negative ? value : -value;\n       pos += i;\n       return peeked = PEEKED_LONG;, @@ -560,6 +560,18 @@ public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\n     } catch (NumberFormatException expected) {\n     }\n   }\n+  \n+  /**\n+   * Issue 1053, negative zero.\n+   * @throws Exception\n+   */\n+  public void testNegativeZero() throws Exception {\n+\t  \tJsonReader reader = new JsonReader(reader(\"[-0]\"));\n+\t    reader.setLenient(false);\n+\t    reader.beginArray();\n+\t    assertEquals(NUMBER, reader.peek());\n+\t    assertEquals(\"-0\", reader.nextString());\n+  }\n \n   /**\n    * This test fails because there's no double for 9223372036854775808, and our, ", 13, 1, "\"modified, modified, \"", 14], 1], ["1070", "Migrate DefaultDateTypeAdapter to streaming adapter", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/31/17, 01:12:50 AM", "* Migrated `DefaultDateTypeAdapter` to streaming adapter, removing one item from the in-source TODO list.\r\n* `DefaultDateTypeAdapter` does not introduce its own type parameter like `<T extends Date>` in order to keep compatiblity.\r\n* `DefaultDateTypeAdapter` now requires a `Class<? extends Date>` to be passed to the primary constructor: all package-protected constructors always accept the `dateType` parameter; however, there was one public constructor accepting no `dateType`, so now there are two constructors and another one accepts `dataType` in order not to break public interface.\r\n* `dateType` default value is `java.util.Date.class`.\r\n* `dateType` must be one of: `java.util.Date.class`, `java.sql.Timestamp.class`, or `java.sql.Date.class`. Otherwise a fail-fast `IllegalArgumentException` that is migrated from the former `deserialize` method (`AssertionError` is thrown instead) and now thrown in the new constructor. I hope this is acceptable however I cannot recall fail-fast constructors in Gson (factory methods only).\r", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I signed it. Please verify. =||= CLAs look good, thanks!\n\n<!-- ok --> =||= Thank you! \ud83d\udc4d  =||= ", ["1070", "Migrate DefaultDateTypeAdapter to streaming adapter", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/31/17, 01:12:50 AM", "* Migrated `DefaultDateTypeAdapter` to streaming adapter, removing one item from the in-source TODO list.\n* `DefaultDateTypeAdapter` does not introduce its own type parameter like `<T extends Date>` in order to keep compatiblity.\n* `DefaultDateTypeAdapter` now requires a `Class<? extends Date>` to be passed to the primary constructor: all package-protected constructors always accept the `dateType` parameter; however, there was one public constructor accepting no `dateType`, so now there are two constructors and another one accepts `dataType` in order not to break public interface.\n* `dateType` default value is `java.util.Date.class`.\n* `dateType` must be one of: `java.util.Date.class`, `java.sql.Timestamp.class`, or `java.sql.Date.class`. Otherwise a fail-fast `IllegalArgumentException` that is migrated from the former `deserialize` method (`AssertionError` is thrown instead) and now thrown in the new constructor. I hope this is acceptable however I cannot recall fail-fast constructors in Gson (factory methods only).", "NaN"], ["Lyubomyr Shaydariv", "Migrate DefaultDateTypeAdapter to streaming adapter", "04/21/17, 10:13:31 AM", "Lyubomyr Shaydariv", "40addce96ffe9e6546aa9952dd709306f7a39370", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -16,7 +16,7 @@\n \n package com.google.gson;\n \n-import java.lang.reflect.Type;\n+import java.io.IOException;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n@@ -26,6 +26,9 @@\n import java.util.Locale;\n \n import com.google.gson.internal.bind.util.ISO8601Utils;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and\n@@ -34,78 +37,89 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-final class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n+final class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n \n-  // TODO: migrate to streaming adapter\n-  \n   private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n-  \n+\n+  private final Class<? extends Date> dateType;\n   private final DateFormat enUsFormat;\n   private final DateFormat localFormat;\n   \n-  DefaultDateTypeAdapter() {\n-    this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType) {\n+    this(dateType,\n+        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n         DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n   }\n \n-  DefaultDateTypeAdapter(String datePattern) {\n-    this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {\n+    this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));\n   }\n \n-  DefaultDateTypeAdapter(int style) {\n-    this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));\n+  DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {\n+    this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));\n   }\n \n   public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n-    this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n+    this(Date.class,\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n         DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n   }\n \n-  DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n+  public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {\n+    this(dateType,\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n+        DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n+  }\n+\n+  DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {\n+    if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {\n+      throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType);\n+    }\n+    this.dateType = dateType;\n     this.enUsFormat = enUsFormat;\n     this.localFormat = localFormat;\n   }\n \n   // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n   // See issue 162\n   @Override\n-  public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n+  public void write(JsonWriter out, Date value) throws IOException {\n     synchronized (localFormat) {\n-      String dateFormatAsString = enUsFormat.format(src);\n-      return new JsonPrimitive(dateFormatAsString);\n+      String dateFormatAsString = enUsFormat.format(value);\n+      out.value(dateFormatAsString);\n     }\n   }\n \n   @Override\n-  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-      throws JsonParseException {\n-    if (!(json instanceof JsonPrimitive)) {\n+  public Date read(JsonReader in) throws IOException {\n+    if (in.peek() != JsonToken.STRING) {\n       throw new JsonParseException(\"The date should be a string value\");\n     }\n-    Date date = deserializeToDate(json);\n-    if (typeOfT == Date.class) {\n+    Date date = deserializeToDate(in.nextString());\n+    if (dateType == Date.class) {\n       return date;\n-    } else if (typeOfT == Timestamp.class) {\n+    } else if (dateType == Timestamp.class) {\n       return new Timestamp(date.getTime());\n-    } else if (typeOfT == java.sql.Date.class) {\n+    } else if (dateType == java.sql.Date.class) {\n       return new java.sql.Date(date.getTime());\n     } else {\n-      throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n+      // This must never happen: dateType is guarded in the primary constructor\n+      throw new AssertionError();\n     }\n   }\n \n-  private Date deserializeToDate(JsonElement json) {\n+  private Date deserializeToDate(String s) {\n     synchronized (localFormat) {\n       try {\n-      \treturn localFormat.parse(json.getAsString());\n+        return localFormat.parse(s);\n       } catch (ParseException ignored) {}\n       try {\n-        return enUsFormat.parse(json.getAsString());\n+        return enUsFormat.parse(s);\n       } catch (ParseException ignored) {}\n       try {\n-        return ISO8601Utils.parse(json.getAsString(), new ParsePosition(0));\n+        return ISO8601Utils.parse(s, new ParsePosition(0));\n       } catch (ParseException e) {\n-        throw new JsonSyntaxException(json.getAsString(), e);\n+        throw new JsonSyntaxException(s, e);\n       }\n     }\n   }, @@ -572,19 +572,26 @@ public Gson create() {\n         serializeSpecialFloatingPointValues, longSerializationPolicy, factories);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,\n       List<TypeAdapterFactory> factories) {\n     DefaultDateTypeAdapter dateTypeAdapter;\n+    TypeAdapter<Timestamp> timestampTypeAdapter;\n+    TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;\n     if (datePattern != null && !\"\".equals(datePattern.trim())) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);\n+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);\n+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);\n+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);\n     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle, timeStyle);\n+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);\n+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);\n+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);\n     } else {\n       return;\n     }\n \n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Date.class), dateTypeAdapter));\n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(Timestamp.class), dateTypeAdapter));\n-    factories.add(TreeTypeAdapter.newFactory(TypeToken.get(java.sql.Date.class), dateTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(Date.class, dateTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(Timestamp.class, timestampTypeAdapter));\n+    factories.add(TypeAdapters.newFactory(java.sql.Date.class, javaSqlDateTypeAdapter));\n   }\n }, @@ -16,6 +16,7 @@\n \n package com.google.gson;\n \n+import java.io.IOException;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n@@ -44,10 +45,10 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(locale);\n     try {\n-      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter());\n-      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n+      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertFormatted(\"1/1/70 12:00 AM\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n@@ -62,16 +63,16 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     }\n   }\n \n-  public void testParsingDatesFormattedWithSystemLocale() {\n+  public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.FRANCE);\n     try {\n-      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter());\n-      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertParsed(\"01/01/70 00:00\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(\"1 janv. 1970 00:00:00\",\n@@ -86,16 +87,16 @@ public void testParsingDatesFormattedWithSystemLocale() {\n     }\n   }\n \n-  public void testParsingDatesFormattedWithUsLocale() {\n+  public void testParsingDatesFormattedWithUsLocale() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter());\n-      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n-      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n-      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n+      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n+      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n       assertParsed(\"1/1/70 0:00 AM\",\n           new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(\"Jan 1, 1970 0:00:00 AM\",\n@@ -110,22 +111,22 @@ public void testParsingDatesFormattedWithUsLocale() {\n     }\n   }\n \n-  public void testFormatUsesDefaultTimezone() {\n+  public void testFormatUsesDefaultTimezone() throws Exception {\n     TimeZone defaultTimeZone = TimeZone.getDefault();\n     TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n-      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n+      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));\n+      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n     }\n   }\n \n   public void testDateDeserializationISO8601() throws Exception {\n-  \tDefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();\n+    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n     assertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\n     assertParsed(\"1970-01-01T00:00Z\", adapter);\n     assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n@@ -135,38 +136,41 @@ public void testDateDeserializationISO8601() throws Exception {\n   \n   public void testDateSerialization() throws Exception {\n     int dateStyle = DateFormat.LONG;\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(dateStyle);\n+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle);\n     DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);\n     Date currentDate = new Date();\n \n-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n-    assertEquals(formatter.format(currentDate), dateString);\n+    String dateString = dateTypeAdapter.toJson(currentDate);\n+    assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n   public void testDatePattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(pattern);\n+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, pattern);\n     DateFormat formatter = new SimpleDateFormat(pattern);\n     Date currentDate = new Date();\n \n-    String dateString = dateTypeAdapter.serialize(currentDate, Date.class, null).getAsString();\n-    assertEquals(formatter.format(currentDate), dateString);\n+    String dateString = dateTypeAdapter.toJson(currentDate);\n+    assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n   public void testInvalidDatePattern() throws Exception {\n     try {\n-      new DefaultDateTypeAdapter(\"I am a bad Date pattern....\");\n+      new DefaultDateTypeAdapter(Date.class, \"I am a bad Date pattern....\");\n       fail(\"Invalid date pattern should fail.\");\n     } catch (IllegalArgumentException expected) { }\n   }\n \n   private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n-    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());\n+    assertEquals(toLiteral(formatted), adapter.toJson(new Date(0)));\n   }\n \n-  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {\n-    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));\n-    assertEquals(\"ISO 8601\", new Date(0), adapter.deserialize(\n-        new JsonPrimitive(\"1970-01-01T00:00:00Z\"), Date.class, null));\n+  private void assertParsed(String date, DefaultDateTypeAdapter adapter) throws IOException {\n+    assertEquals(date, new Date(0), adapter.fromJson(toLiteral(date)));\n+    assertEquals(\"ISO 8601\", new Date(0), adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\")));\n+  }\n+\n+  private static String toLiteral(String s) {\n+    return '\"' + s + '\"';\n   }\n }, ", 89, 64, "\"modified, modified, modified, \"", 153], 1], ["1071", "Adding maven-bundle-plugin.", "James Carman", "jwcarman", "05/24/17, 10:25:50 PM", "This patch adds OSGi support to GSON, without changing the packaging type to \"bundle\".  It also uses a more recent version of the maven-bundle-plugin, 3.2.0 (3.3.0 is having some issues right now with CDNs or something).", "@JakeWharton I have provided a patch that avoids changing the packaging type.  I don't really think it matters, but it seemed to be controversial, so I removed it.   =||= By the way, if you want to check out what is happening in the jar/MANIFEST.MF file, just add this plugin to the build:\r\n\r\n```xml\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-antrun-plugin</artifactId>\r\n        <version>1.8</version>\r\n        <configuration>\r\n          <target>\r\n            <echo message=\"--------------------------------------------------\"/>\r\n            <echo message=\"Manifest File Contents\"/>\r\n            <echo message=\"--------------------------------------------------\"/>\r\n            <echo message=\"${line.separator}\"/>\r\n            <exec executable=\"cat\">\r\n              <arg value=\"${project.build.outputDirectory}/META-INF/MANIFEST.MF\"/>\r\n            </exec>\r\n            <echo message=\"${line.separator}\"/>\r\n            <echo message=\"--------------------------------------------------\"/>\r\n            <echo message=\"Jar File Contents\"/>\r\n            <echo message=\"--------------------------------------------------\"/>\r\n            <echo message=\"${line.separator}\"/>\r\n            <exec executable=\"jar\">\r\n              <arg value=\"-tf\"/>\r\n              <arg value=\"${project.basedir}/target/${project.build.finalName}.jar\"/>\r\n            </exec>\r\n            <echo message=\"${line.separator}\"/>\r\n          </target>\r\n        </configuration>\r\n        <executions>\r\n          <execution>\r\n            <phase>verify</phase>\r\n            <goals>\r\n              <goal>run</goal>\r\n            </goals>\r\n          </execution>\r\n        </executions>\r\n      </plugin>\r\n``` =||= Thank you! =||= ", ["1071", "Adding maven-bundle-plugin.", "James Carman", "jwcarman", "05/24/17, 10:25:50 PM", "This patch adds OSGi support to GSON, without changing the packaging type to \"bundle\".  It also uses a more recent version of the maven-bundle-plugin, 3.2.0 (3.3.0 is having some issues right now with CDNs or something).", "NaN"], ["James Carman", "Adding maven-bundle-plugin.", "04/21/17, 07:26:27 PM", "James Carman", "1f6b1cd663fce6aa6bbca240e2dc89de033b13d7", ["gson/pom.xml", "pom.xml"], "@@ -52,6 +52,10 @@\n           </archive>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.felix</groupId>\n+        <artifactId>maven-bundle-plugin</artifactId>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -78,6 +78,12 @@\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-jar-plugin</artifactId>\n         </plugin>\n+        <plugin>\n+          <groupId>org.apache.felix</groupId>\n+          <artifactId>maven-bundle-plugin</artifactId>\n+          <version>3.2.0</version>\n+          <inherited>true</inherited>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n     <plugins>, ", 10, 0, "\"modified, modified, \"", 10], 1], ["1072", "Remove need for synthetic accessor methods.", "Eric Cochran", "NightlyNexus", "04/23/17, 01:44:27 AM", "NaN", "NaN", ["1072", "Remove need for synthetic accessor methods.", "Eric Cochran", "NightlyNexus", "04/23/17, 01:44:27 AM", "NaN", "NaN"], ["Eric Cochran", "Remove need for synthetic accessor methods.", "04/23/17, 12:32:59 AM", "Eric Cochran", "3270e8d97259665cad9b66011993044de97c26db", ["gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java", "gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -111,7 +111,7 @@ public static UnsafeAllocator create() {\n    * throw an {@link java.lang.UnsupportedOperationException}\n    * @param c instance of the class to be checked\n    */\n-  private static void assertInstantiable(Class<?> c) {\n+  static void assertInstantiable(Class<?> c) {\n     int modifiers = c.getModifiers();\n     if (Modifier.isInterface(modifiers)) {\n       throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());, @@ -41,7 +41,7 @@\n public final class TreeTypeAdapter<T> extends TypeAdapter<T> {\n   private final JsonSerializer<T> serializer;\n   private final JsonDeserializer<T> deserializer;\n-  private final Gson gson;\n+  final Gson gson;\n   private final TypeToken<T> typeToken;\n   private final TypeAdapterFactory skipPast;\n   private final GsonContextImpl context = new GsonContextImpl();, @@ -1459,7 +1459,7 @@ private boolean skipTo(String toFind) throws IOException {\n     return getClass().getSimpleName() + locationString();\n   }\n \n-  private String locationString() {\n+  String locationString() {\n     int line = lineNumber + 1;\n     int column = pos - lineStart + 1;\n     return \" at line \" + line + \" column \" + column + \" path \" + getPath();, ", 3, 3, "\"modified, modified, modified, \"", 6], 1], ["1073", "Remove helper methods mentioned in the TODO list", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/02/17, 02:37:11 PM", "NaN", "(trying to kick @googlebot) =||= Ah, we're good. I guess it doesn't do tags anymore. =||= ", ["1073", "Remove helper methods mentioned in the TODO list", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/02/17, 02:37:11 PM", "NaN", "NaN"], ["Lyubomyr Shaydariv", "Remove helper methods mentioned in the TODO list", "04/23/17, 12:38:39 PM", "Lyubomyr Shaydariv", "eb27d55f497a5bb292c020e255415677e0b646fc", ["gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java"], "@@ -27,8 +27,6 @@\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import java.io.IOException;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -43,59 +41,59 @@\n   private TypeAdapter<Map<String, Double>> mapAdapter\n       = miniGson.getAdapter(new TypeToken<Map<String, Double>>() {});\n \n-  public void testSerialize() throws IOException {\n+  public void testSerialize() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     truck.horsePower = 300;\n \n     assertEquals(\"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserialize() throws IOException {\n     String json = \"{'horsePower':300.0,\"\n         + \"'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}\";\n-    Truck truck = fromJson(truckAdapter, json);\n+    Truck truck = truckAdapter.fromJson(json.replace('\\'', '\\\"'));\n     assertEquals(300.0, truck.horsePower);\n     assertEquals(Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29)), truck.passengers);\n   }\n \n-  public void testSerializeNullField() throws IOException {\n+  public void testSerializeNullField() {\n     Truck truck = new Truck();\n     truck.passengers = null;\n     assertEquals(\"{'horsePower':0.0,'passengers':null}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullField() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':null}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':null}\".replace('\\'', '\\\"'));\n     assertNull(truck.passengers);\n   }\n \n-  public void testSerializeNullObject() throws IOException {\n+  public void testSerializeNullObject() {\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList((Person) null);\n     assertEquals(\"{'horsePower':0.0,'passengers':[null]}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeNullObject() throws IOException {\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':[null]}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':[null]}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList((Person) null), truck.passengers);\n   }\n \n-  public void testSerializeWithCustomTypeAdapter() throws IOException {\n+  public void testSerializeWithCustomTypeAdapter() {\n     usePersonNameAdapter();\n     Truck truck = new Truck();\n     truck.passengers = Arrays.asList(new Person(\"Jesse\", 29), new Person(\"Jodie\", 29));\n     assertEquals(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\",\n-        toJson(truckAdapter, truck).replace('\\\"', '\\''));\n+        truckAdapter.toJson(truck).replace('\\\"', '\\''));\n   }\n \n   public void testDeserializeWithCustomTypeAdapter() throws IOException {\n     usePersonNameAdapter();\n-    Truck truck = fromJson(truckAdapter, \"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\");\n+    Truck truck = truckAdapter.fromJson(\"{'horsePower':0.0,'passengers':['Jesse','Jodie']}\".replace('\\'', '\\\"'));\n     assertEquals(Arrays.asList(new Person(\"Jesse\", -1), new Person(\"Jodie\", -1)), truck.passengers);\n   }\n \n@@ -113,40 +111,40 @@ private void usePersonNameAdapter() {\n     truckAdapter = miniGson.getAdapter(Truck.class);\n   }\n \n-  public void testSerializeMap() throws IOException {\n+  public void testSerializeMap() {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(\"{'a':5.0,'b':10.0}\", toJson(mapAdapter, map).replace('\"', '\\''));\n+    assertEquals(\"{'a':5.0,'b':10.0}\", mapAdapter.toJson(map).replace('\"', '\\''));\n   }\n \n   public void testDeserializeMap() throws IOException {\n     Map<String, Double> map = new LinkedHashMap<String, Double>();\n     map.put(\"a\", 5.0);\n     map.put(\"b\", 10.0);\n-    assertEquals(map, fromJson(mapAdapter, \"{'a':5.0,'b':10.0}\"));\n+    assertEquals(map, mapAdapter.fromJson(\"{'a':5.0,'b':10.0}\".replace('\\'', '\\\"')));\n   }\n \n-  public void testSerialize1dArray() throws IOException {\n+  public void testSerialize1dArray() {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    assertEquals(\"[1.0,2.0,3.0]\", toJson(arrayAdapter, new double[]{1.0, 2.0, 3.0}));\n+    assertEquals(\"[1.0,2.0,3.0]\", arrayAdapter.toJson(new double[]{ 1.0, 2.0, 3.0 }));\n   }\n \n   public void testDeserialize1dArray() throws IOException {\n     TypeAdapter<double[]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[]>() {});\n-    double[] array = fromJson(arrayAdapter, \"[1.0,2.0,3.0]\");\n+    double[] array = arrayAdapter.fromJson(\"[1.0,2.0,3.0]\");\n     assertTrue(Arrays.toString(array), Arrays.equals(new double[]{1.0, 2.0, 3.0}, array));\n   }\n \n-  public void testSerialize2dArray() throws IOException {\n+  public void testSerialize2dArray() {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n     double[][] array = { {1.0, 2.0 }, { 3.0 } };\n-    assertEquals(\"[[1.0,2.0],[3.0]]\", toJson(arrayAdapter, array));\n+    assertEquals(\"[[1.0,2.0],[3.0]]\", arrayAdapter.toJson(array));\n   }\n \n   public void testDeserialize2dArray() throws IOException {\n     TypeAdapter<double[][]> arrayAdapter = miniGson.getAdapter(new TypeToken<double[][]>() {});\n-    double[][] array = fromJson(arrayAdapter, \"[[1.0,2.0],[3.0]]\");\n+    double[][] array = arrayAdapter.fromJson(\"[[1.0,2.0],[3.0]]\");\n     double[][] expected = { {1.0, 2.0 }, { 3.0 } };\n     assertTrue(Arrays.toString(array), Arrays.deepEquals(expected, array));\n   }\n@@ -186,15 +184,15 @@ public void write(JsonWriter out, Person person) throws IOException {\n     assertEquals(\"jesse\", truck.passengers.get(1).name);\n   }\n \n-  public void testSerializeRecursive() throws IOException {\n+  public void testSerializeRecursive() {\n     TypeAdapter<Node> nodeAdapter = miniGson.getAdapter(Node.class);\n     Node root = new Node(\"root\");\n     root.left = new Node(\"left\");\n     root.right = new Node(\"right\");\n     assertEquals(\"{'label':'root',\"\n         + \"'left':{'label':'left','left':null,'right':null},\"\n         + \"'right':{'label':'right','left':null,'right':null}}\",\n-        toJson(nodeAdapter, root).replace('\"', '\\''));\n+        nodeAdapter.toJson(root).replace('\"', '\\''));\n   }\n   \n   public void testFromJsonTree() {\n@@ -243,19 +241,4 @@ public void testFromJsonTree() {\n       this.label = label;\n     }\n   }\n-\n-  // TODO: remove this when TypeAdapter.toJson() is public\n-  private static <T> String toJson(TypeAdapter<T> typeAdapter, T value) throws IOException {\n-    StringWriter stringWriter = new StringWriter();\n-    JsonWriter writer = new JsonWriter(stringWriter);\n-    typeAdapter.write(writer, value);\n-    return stringWriter.toString();\n-  }\n-\n-  // TODO: remove this when TypeAdapter.fromJson() is public\n-  private <T> T fromJson(TypeAdapter<T> typeAdapter, String json) throws IOException {\n-    JsonReader reader = new JsonReader(new StringReader(json));\n-    reader.setLenient(true); // TODO: non-lenient?\n-    return typeAdapter.read(reader);\n-  }\n }, ", 23, 40, "\"modified, \"", 63], 1], ["1074", "$Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError", "Andrey Mogilev", "amogilev", "02/04/19, 04:54:45 PM", "While resolving recursive generic types, $Gson$Types.resolve() sometimes starts to generate chains of type bounds like  \"super ? extends ? .... ? extends A\" , causing infinite recursion and thus StackOverflowError's like \r\n`java.lang.StackOverflowError\r\n\tat com.google.gson.internal.$Gson$Types.resolveTypeVariable($Gson$Types.java:407)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:330)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379)\r\n\tat com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)\r\n...\r\n`\r\nThis can be reproduced on the following simple ccde:\r\n```java\r\n  private static class Foo1<A> {\r\n    Foo2<? extends A> foo2;\r\n  }\r\n  private static class Foo2<B> {\r\n    Foo1<? super B> foo1;\r\n  }\r\n  public void testRecursiveResolveSimple() {\r\n    new Gson().getAdapter(Foo1.class);\r\n  }\r\n```\r\n\r\nThis is the root cause of StackOverflowError's described in Issue #440 and Issue #603.\r\n\r\nIn order to fix them, such chains need to be collapsed using the following rules:\r\n- supertypeOf(supertypeOf(X)) == supertypeOf(X)\r\n- subtypeOf(subtypeOf(X)) == subtypeOf(X)\r\n- supertypeOf(subtypeOf(X)) == subtypeOf(Object.class)\r\n- subtypeOf(supertypeOf(X)) == subtypeOf(Object.class)", "The proposed change is implemented in the pull request above =||= ", 0], ["1075", "Fix StackOverflowError on resolving recursive types by collapsing chains of type bounds", "Andrey Mogilev", "amogilev", "05/31/17, 12:47:04 AM", "As described in Issue #1074, $Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError on attempts to serialize objects of such types or just obtain the type adapter.\r\n\r\nThe suggested change fixes StackOverflowError's in a number of issues, including Issue #440 and Issue #603.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= Signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*\n\n<!-- need_author_consent --> =||= Looks good to me. \ud83d\udc4d  Thanks =||= ", ["1075", "Fix StackOverflowError on resolving recursive types by collapsing chains of type bounds", "Andrey Mogilev", "amogilev", "05/31/17, 12:47:04 AM", "As described in Issue #1074, $Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError on attempts to serialize objects of such types or just obtain the type adapter.\n\nThe suggested change fixes StackOverflowError's in a number of issues, including Issue #440 and Issue #603.", "NaN"], ["inder123", "added copyright header", "05/31/17, 12:45:50 AM", "GitHub", "06f96e561933ad9cd74eb4cfd095e1d7481546b1", ["gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java"], "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright (C) 2017 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package com.google.gson.internal.bind;\n \n import com.google.gson.Gson;, ", 16, 0, "\"modified, \"", 16], 1], ["1076", "Persist gson", "Tudor Dragan", "tudorgk", "05/03/17, 01:26:17 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= ", 0], ["1077", "NullPointerException on toJsonTree()", null, "gauravtyagi77", "01/02/19, 11:58:48 AM", "Hi,\r\n\r\nI am getting below error but not every time it comes once in a month while running. Not able to reach exact root cause so please help.\r\n\r\n2017-05-08 08:51:02,228 ERROR [pool-36-thread-5] c.n.f.t.p.t.m.FormattedMessage [FormattedMessage.java:252] Message generation in formatted message class -->java.lang.NullPointerException\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:353)\r\n\tat com.google.gson.Gson.toJson(Gson.java:578)\r\n\tat com.google.gson.Gson.toJsonTree(Gson.java:479)\r\n\tat com.google.gson.Gson.toJsonTree(Gson.java:458)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n\r\nLibrary version i am using is gson-2.2.2 .\r", "Gson 2.2.2 has been released [5 years ago](https://github.com/google/gson/releases/tag/gson-2.2.2). Can you reproduce the issue on the latest version? =||= I know it's an old version but I am unable to change it as it is in my production environment on which this issue is coming and can not change version in production . I need to know if this was issue in existing version and changed in newer versions than I may try. =||= Thanks for such an immediate response. =||= I saw the same behavior on 2.1 only once in 5000 attempts and I can not reproduce it. Yes I can upgrade it but I am not if this is problem with my application or GSON. Does anyone know the root cause for this?  =||= If we use and initialize shared GSON object in multi threading environment then this exception occurs randomly. \r\nPlease use below code in synchronized manner and make sure only one thread initialize this object once.\r\nGsonBuilder gsonBuilder = new GsonBuilder();\r\nGson gson = gsonBuilder.create(); =||= I have a static gson builder from which every thread creates its Gson object. Did you have a similar setup? It has failed only twice for me and I can reproduce it. Which makes it even more hard to debug. =||= ", 0], ["1078", "Gson keep parse my Double value to Long value", "Do Hong Hai", "seatkgames", "05/25/17, 05:58:55 PM", "Hi GSON team,\r\n\r\nI used GSON 2.8.0 and today i faced a problem when trying to parse a JSON String into Map<String, Object>. GSON keep parse my Double value into Long value and i don't know why.\r\n\r\nMy json to test\r\n`String testJson = \"{\\\"dropLatitude\\\":10.801679,\\\"dropLongitude\\\":-106.5986286}\";`\r\n\r\nMy parsing code:\r\n```\r\n        GsonBuilder gsonBuilder = new GsonBuilder();\r\n        gsonBuilder.registerTypeAdapter(new TypeToken<Map<String, Object>>() {\r\n        }.getType(), new GsonMapDeserializer());\r\n\r\n        son = gsonBuilder.create();\r\n\r\n        Type type = new TypeToken<Map<String, Object>>() {\r\n        }.getType();\r\n\r\n        Map<String, Object> myMap = son.fromJson(testJson, type);\r\n        Console.gI().log(\"Test json \" + testJson + \" parse \" + myMap.size());\r\n        for (Map.Entry<String, Object> entry : myMap.entrySet()) {\r\n            String key = entry.getKey();\r\n            Object value = entry.getValue();\r\n            String valueString = value.toString();\r\n\r\n            System.out.println(\"\" + key + \"(\" + key.getClass() + \")\" + \"=>\" + valueString + \"(\" + value.getClass() + \")\");\r\n        }\r\n```\r\n\r\nAnd the result logs:\r\n```\r\ndropLatitude(class java.lang.String)=>10.801679(class java.lang.Double) \r\ndropLongitude(class java.lang.String)=>-106(class java.lang.Long)\r\n```\r\n\r\nBut when i try to parse like this, the value return right\r\n`String testJson = \"{\\\"dropLatitude\\\":10.801679,\\\"dropLongitude\\\":106.5986286}\";`\r\n\r\n```\r\ndropLatitude(class java.lang.String)=>10.801679(class java.lang.Double)\r\ndropLongitude(class java.lang.String)=>106.5986286(class java.lang.Double)\r\n```\r\n\r\nI don't know if this is a bug. When i try to parse a Double value that < 0, GSON parse wrong.", "Can anyone support me please? Point me if i do something wrong, thank you very much :) =||= Ask this question on Stackoverflow... =||= Map of String,Object is not a very smart idea.\r\nUse, String,Double? =||= ", 0], ["1080", "how should i convert a map to json String with gson", "wykCN", "wykCN", "06/22/17, 04:27:44 PM", "My code likes:\r\n```\r\n\r\n    @Test\r\n    public void testGsonTransferMap(){\r\n        HashMap<String, Object> map = new HashMap<String, Object>() {{\r\n            put(\"Request\", new HashMap<String ,Object>(){{\r\n                put(\"Data\",new HashMap<String,Object>(){{\r\n                    put(\"NWExID\", \"7019\");\r\n                    put(\"OrgOrderNo\", \"123\");\r\n                    put(\"OrgTransDate\", \"20170518\");\r\n                }});\r\n            }});\r\n        }};\r\n        Gson gson = new Gson();\r\n        Type gsonType = new TypeToken<HashMap<String ,Object>>(){}.getType();\r\n        String gsonString = gson.toJson(map,gsonType);\r\n        System.out.println(gsonString);\r\n    } \r\n\r\n```\r\n\r\nand the output is : \"{}\"\r\nso,what's wrong with my code , how should i do.", "You are trying to serialize an anonymous inner class. Don't. =||= All other json implementations I can find seems to handle this well, while `new Gson().toJson()` returns null when I give it an one-liner map:\r\n\r\n    Map map = new HashMap() {{ put(\"hei\", \"sann\"); }};\r\n    new Gson().toJson(map);  // returns null!\r\n\r\nOther implementations works as expected:\r\n\r\n    new JSONObject(map).toString();             // returns {\"hei\":\"sann\"}\r\n    JsonOutput.toJson(map);                     // returns {\"hei\":\"sann\"}\r\n    new ObjectMapper().writeValueAsString(map); // returns {\"hei\":\"sann\"}\r\n\r\nIt works if I wrap the map:\r\n\r\n    new Gson().toJson(new HashMap(map));  // returns {\"hei\":\"sann\"}\r\n\r\nA regular map works too:\r\n\r\n    map = new HashMap();\r\n    map.put(\"hei\", \"sann\");\r\n    new Gson().toJson(map);  // returns {\"hei\":\"sann\"}\r\n\r\nIs this an expected Gson feature, @NightlyNexus ?\r\n\r\nI've created a test project at https://github.com/henrik242/map2json\r\n \r\n\r\n =||= Yes. This is working as intended. =||= This has been fixed in Gson new version, tested with gson-2.8.5.jar  =||= what about to throw exception if anonymous inner class? (instead of returning just ``\"null\"``) =||= Running @wykCN's code with gson-2.8.5.jar (under openjdk-1.8) still returns \"{}\".\r\nUsing anonymous inner class is convinent and elegant, why gson doesn't support it? =||= > Running @wykCN's code with gson-2.8.5.jar (under openjdk-1.8) still returns \"{}\".\r\n> Using anonymous inner class is convinent and elegant, why gson doesn't support it?\r\n\r\nIn my case it still returns null with version 2.8.6 =||= ", 0], ["1081", "exclude NULL from JsonArray while de-serializing json", "harsh", "harsh-mittal", "02/10/20, 10:35:48 AM", "I receive an invalid json (extra comma in the end of the list) in request body, which is being successfully deserialized by GSON library. On inspection I see that GSON is inserting a NULL object in the end.\r\n\r\n    {\r\n\t    \"content\": \"Test 2\",\r\n\t    \"timestamp\": 1494311947530,\r\n\t    \"entities\": [\r\n\t\t    {\"name\": \"entity1\"},\r\n\t\t    {\"name\": \"entity2\"},\r\n\t\t    {\"name\": \"entity3\"},\r\n\t\t    {\"name\": \"entity4\"},\r\n\t\t    {\"name\": \"entity5\"},\r\n\t    ]\r\n    }\r\n\r\nIs there a way by which I can either instruct GSON not to accept invalid json or remove NULL objects from JsonArray.\r\n\r\nI have tried registering type adapter for Set.class but I can't proceed further with this solution as it is not possible to get `Type` of the parameterized object.\r\n\r\n    public class RemoveNullCollectionSerializer<T> implements JsonDeserializer<Set<T>> {\r\n        @Override\r\n        public Set<T> deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext context) throws JsonParseException {\r\n            JsonArray elements = jsonElement.getAsJsonArray();\r\n\r\n            Set<T> result = new HashSet();\r\n            for (JsonElement element : elements) {\r\n                if (element.isJsonNull()) continue;\r\n\r\n                T value = (T) context.deserialize(element, Object.class);\r\n                result.add(value);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r", "Is there any solution to solve this problem?  =||= check out [this](https://stackoverflow.com/a/44066592/2225648) answer by @lyubomyr-shaydariv  =||= ", 0], ["1083", "kotlin's default value don't work ", "benli.shi", "beilly", "05/23/17, 02:30:59 AM", "when i deserialize json without the \u201cage\u201d\uff0c it give \u201c0\u201d not the default value(\"18\")\r\n![qq 20170523102034](https://cloud.githubusercontent.com/assets/7353956/26335936/d8923d88-3fa1-11e7-80ce-13239f244326.png)\r", "This is also true in Java. You need a zero-arg constructor for it to work. Add default values to all properties and add `@JvmOverloads` to the constructor =||= Or write a reflection-based type adapter using kotlin-reflect. You can copy the Moshi one for inspiration. =||= Thanks\uff0cAdd default values to all properties\uff0cit work. =||= ", 0], ["1086", "Convert a map initialized by inner class to JSON is null?", null, "xho22", "05/25/17, 02:22:34 PM", "        Map<String, Integer> overviewData1 = new ConcurrentHashMap<String, Integer>() {\r\n            {\r\n                put(\"1\", 44);\r\n                put(\"2\", 44);\r\n            }\r\n        };\r\n        Map<String, Integer> overviewData2 = new ConcurrentHashMap<>();\r\n        overviewData2.put(\"1\", 44);\r\n        overviewData2.put(\"2\", 44);\r\n\r\n        System.out.println(GSON.toJson(overviewData1)); // output null\r\n        System.out.println(GSON.toJson(overviewData2)); // correct\r\n\r\nThe Fastjson in this place is all right.", "Gson doesn't not serialize anonymous classes as it has no way to deserialize them. =||= ", 0], ["1088", "Gson when used in a javaagent premain makes the JVM very unstable ", "Cody Laeder", "valarauca", "05/30/17, 09:29:31 PM", "### Usecase:\r\n\r\nI was using gson within a javaagent premain to load configuration for how to modify the byte code of other classes. Effectively `gson` was loading a list of `class.methods`, and within this method the user would declare `LocalIndex + Method` in order to get a debug output _of_ that variable before that method call.\r\n\r\nThis was being done via JavaAgent -> Premain -> ClassLoader\r\n\r\n### Expected Result:\r\n\r\n- [x] Data from `gson` would be loaded properly\r\n- [x] Class loader would be passed to the JVM with data from `gson` to filter classes by user specification.\r\n- [x] ClassLoader debug output would dump matching classes names in `stdout`\r\n- [ ] ClassLoader would then dump matching method names + locals into `stdout`.\r\n\r\n### Actual Result:\r\n\r\nThe JVM crashes. Because it cannot load `java.lang.invoke.MethodHandleNatives`. This happens within `gson` deserialize call I'm making this is roughly.\r\n\r\n[CrashLog](https://pastebin.com/jVnuDmiV)\r\n\r\n```java\r\npublic static void premain(String agentArgs, Instrumentation inst) {\r\n   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string\r\n   LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);\r\n   inst.addTransformer(new TransformEntry(data), true);\r\n}\r\n```\r\n\r\n### Work Around: (kind of)\r\n\r\n```java\r\npublic static void premain(String agentArgs, Instrumentation inst) {\r\n   ClassLoader cl = ClassLoader.getSystemClassLoader();\r\n   cl.loadClass(\"java.lang.invoke.MethodHandleImpl\");\r\n   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string\r\n   LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);\r\n   inst.addTransformer(new TransformEntry(data), true);\r\n}\r\n```\r\n\r\nExcept this doesn't work. *and down the rabbit hole we go*.\r\n\r\nWithin `TransformEntry` I'm using [ASM](http://asm.ow2.org/) to manage my bytecode transformations. Even with the `ClassReader.append(new MyVisitorClass(), ClassReader.EXPAND_FRAMES)` set I'll never see that classes have **ANY** methods except `<init>()V`. \r\n\r\nIf I just do\r\n\r\n```java\r\npublic static void premain(String agentArgs, Instrumentation inst) {\r\n  ClassLoader cl = ClassLoader.getSystemClassLoader();\r\n  cl.loadClass(\"java.lang.invoke.MethodHandleImpl\");\r\n   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string\r\n   //LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);\r\n   inst.addTransformer(new TransformEntry(), true);\r\n}\r\n```\r\n\r\nNow ASM works properly. So I'm really confused. Even with the above fix and ASM acting _slightly_ unstable I'll see random crashes periodically elsewhere within even the core app or premain.\r\n\r\n### Platform Data\r\n\r\n```\r\n$ java -version\r\nopenjdk version \"1.8.0_131\"\r\nOpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)\r\nOpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\n$ uname -a\r\nLinux cody-x1 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n$ uname -r\r\n4.4.0-78-generic\r\n```\r", "I've done some deeper digging it isn't actually `gson` this deals with how the JVM `premain` semantics of startup. =||= ", 0], ["1089", "crash", null, "Myeongwon-Kang", "05/29/17, 03:27:02 PM", "Error while using gson 2.8.\r\n\r\n\r\nFatal Exception: java.lang.NoClassDefFoundError: Failed resolution of: Lcom/google/gson/internal/\r\n       at com.google.gso.<clinit>(TypeAdapters.java:426)\r\n       at com.google.gson.Gson.<init>(Gson.java:199)\r\n       at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)\r\n\r\ndevice : Galaxy Note5", "This is either a problem with your packaging of the APK or a problem with\nthe OS on the device. There's no action to take on our part.\n\nOn Mon, May 29, 2017, 4:09 AM Myeongwon-Kang <notifications@github.com>\nwrote:\n\n> Error while using gson 2.8.\n>\n> Fatal Exception: java.lang.NoClassDefFoundError: Failed resolution of:\n> Lcom/google/gson/internal/\n> at com.google.gso.(TypeAdapters.java:426)\n> at com.google.gson.Gson.(Gson.java:199)\n> at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)\n>\n> device : Galaxy Note5\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1089>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEcMPQ3WOqimzVCLc608HedDniwk4ks5r-n0ggaJpZM4NpBC5>\n> .\n>\n =||= ", 0], ["1090", "JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,", "Mike", "Miha-x64", "05/31/17, 04:50:45 PM", "In lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like `NaN`, `Infinity`, `-Infinity`:\r\n```java\r\n    if (!lenient\r\n        && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nBut JsonWriter#value(double) behaves in different way: \r\n```java\r\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\r\n      throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\r\n    }\r\n```\r\n\r\nSo, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. `out.value((Number) Double.valueOf(Double.NaN))`).\r\n\r\nI think, this should be possible, because boxing gives worse performance.", "Can you create a Pull Request with a JUnit test that fails? Even better would be a fix that makes the test pass. Thanks. =||= ", 0], ["1091", "Made deepCopy public", "Inderjeet Singh", "inder123", "05/31/17, 05:33:38 PM", "NaN", "NaN", ["1091", "Made deepCopy public", "Inderjeet Singh", "inder123", "05/31/17, 05:33:38 PM", "NaN", "NaN"], ["Inderjeet Singh", "since 2.8.2", "05/31/17, 05:29:29 PM", "Inderjeet Singh", "e467a48683744a2ac1eae60249382b853c244502", ["gson/src/main/java/com/google/gson/JsonArray.java", "gson/src/main/java/com/google/gson/JsonElement.java", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonObject.java", "gson/src/main/java/com/google/gson/JsonPrimitive.java"], "@@ -46,7 +46,7 @@ public JsonArray(int capacity) {\n \n   /**\n    * Creates a deep copy of this element and all its children\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonArray deepCopy() {, @@ -34,7 +34,7 @@\n   /**\n    * Returns a deep copy of this element. Immutable elements like primitives\n    * and nulls are not copied.\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   public abstract JsonElement deepCopy();\n , @@ -42,7 +42,7 @@ public JsonNull() {\n \r\n   /**\r\n    * Returns the same instance since it is an immutable value\r\n-   * @since 2.8.1\r\n+   * @since 2.8.2\r\n    */\r\n   @Override\r\n   public JsonNull deepCopy() {\r, @@ -35,7 +35,7 @@\n \n   /**\n    * Creates a deep copy of this element and all its children\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonObject deepCopy() {, @@ -87,7 +87,7 @@ public JsonPrimitive(Character c) {\n \n   /**\n    * Returns the same value as primitives are immutable.\n-   * @since 2.8.1\n+   * @since 2.8.2\n    */\n   @Override\n   public JsonPrimitive deepCopy() {, ", 5, 5, "\"modified, modified, modified, modified, modified, \"", 10], 1], ["1092", "Deserialize JSON non-fp literals to Long by default", "Andrey Mogilev", "amogilev", "06/03/17, 04:47:02 AM", "See issue #1084.\r\n\r\nBefore this fix, ObjectTypeAdapter deserialized both fp and non-fp\r\nliterals to Double. In case of very big numbers, it caused undesired\r\nrounding, as Double cannot fit large integers without loosing precision.\r\n\r\nFrom now on, a JSON integer literal (without a decimal point) is mapped\r\nto Long if it fits into Long ranges. The JSON literals with decimal\r\npoint, and out-of-range integer literals are still mapped to Double.", "Doesn't it break backwards compatibility? =||= In practice, there are two changes which may affect backward compatibility:\r\n\r\n1) Some numbers de-serialized as Objects (i.e. by ObjectTypeAdapter) may change the resulting type from Double to Long. That is exactly what fixes the issue, so I guess it is fine. Although toString() may change (e.g. from \"5.0\" to \"5\"), I cannot imagine a reason to compare this other than in Unit tests. \r\n\r\n2) Numbers de-serialized as Number (by TypeAdapters.NUMBER) change from LazilyParsedNumber to Long or Double. This part is optional, but made for consistency. And I guess nobody would really cast to LazilyParsedNumber in their code.\r\n =||= This is not backwards compatible and I\u2019m not willing to burden Gson\u2019s userbase with the costs of this change. =||= Sorry, we can't break backward compatibility =||= ", 0], ["1093", "value(double) can write NaN and infinite values when lenient, as value(Number) does", "Mike", "Miha-x64", "05/31/17, 04:50:45 PM", "Fixes #1090.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If you signed the CLA as a corporation, please let us know the company's name.\n\n<!-- need_sender_cla --> =||= I've signed it. =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1093", "value(double) can write NaN and infinite values when lenient, as value(Number) does", "Mike", "Miha-x64", "05/31/17, 04:50:45 PM", "Fixes #1090.", "NaN"], ["mike", "Fixed JsonWriter#value(double) to write infinite and NaN values when lenient, as JsonWriter#value(Number) does. (fixes #1090)", "05/31/17, 08:19:57 AM", "mike", "9963a477d667a6cf2a978c50d1d0c270d160508b", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -491,10 +491,10 @@ public JsonWriter value(Boolean value) throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter value(double value) throws IOException {\n-    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+    writeDeferredName();\n+    if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {\n       throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    writeDeferredName();\n     beforeValue();\n     out.append(Double.toString(value));\n     return this;, ", 2, 2, "\"modified, \"", 4], 1], ["1096", "2.8.1 can't serialize and deserialize date null (2.8.0 works fine)", "Alessandro Scarozza", "xanscale", "10/10/17, 02:30:49 PM", "```\r\nW/System.err: com.google.gson.JsonParseException: The date should be a string value\r\nW/System.err:     at com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:96)\r\nW/System.err:     at com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:40)\r\nW/System.err:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)\r\nW/System.err:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)\r\nW/System.err:     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)\r\nW/System.err:     at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)\r\nW/System.err:     at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)\r\n```\r\n\r\nhttps://github.com/google/gson/blob/b8f616c939c652b8540c95fa2b377b8c628ef3ff/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java#L95\r\n\r\nthis will trows JsonParseException\r\n```\r\n    if (in.peek() != JsonToken.STRING) {\r\n      throw new JsonParseException(\"The date should be a string value\");\r\n    }\r\n```\r\n\r\nthis is my conf\r\n`new GsonBuilder().serializeNulls().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").create()`", "Can you create a PR with a failing test? Thanks. =||= Having similar issue in serialization.\r\n```\r\nGson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\").create()\r\ngson.toJson(myObjectWhoContainsNullDates)\r\n```\r\nthrows `NullPointerException` from Gson 2.8.1\r\n2.8.0 works fine.\r\n\r\nif you remove `setDateFormat` serialization works  \r\n```\r\nGson gson = new GsonBuilder().create()\r\ngson.toJson(myObjectWhoContainsNullDates)\r\n``` =||= Faced the same issue with 2.8.1.\r\n2.8.0 works well. =||= Hi,\r\n\r\nThis is my workaround for this bug, waiting for 2.8.2:\r\n\r\n    private Gson getGson() {\r\n        // Trick to get the DefaultDateTypeAdatpter instance\r\n        // Create a first instance a Gson\r\n        Gson gson = new GsonBuilder()\r\n                .setDateFormat(DATE_FORMAT_COMPLETE)\r\n                .create();\r\n\r\n        // Get the date adapter\r\n        TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);\r\n\r\n        // Ensure the DateTypeAdapter is null safe\r\n        TypeAdapter<Date> safeDateTypeAdapter = dateTypeAdapter.nullSafe();\r\n\r\n        // Build the definitive safe Gson instance\r\n        return new GsonBuilder()\r\n                .registerTypeAdapter(Date.class, safeDateTypeAdapter)\r\n                .create();\r\n    }\r\n\r\nHope it will help\r\n\r\nBR =||= Nice @bmarty . \r\nI get the impression the last `.setDateFormat(DATE_FORMAT_COMPLETE)` is not needed. You actually defined within the safeDateTypeAdapter all the details to parse the date. =||= @rafa0809 yes, indeed! =||= Facing the same .\r\nEdit: @bmarty solution worked for me. And also the 2.8.0 worked fine. =||= >  TypeAdapter<Date> safeDateTypeAdapter = dateTypeAdapter.nullSafe();\r\n\r\nit worked for me @bmarty \r\nthank you =||= ", 0], ["1098", "Gson 2.8.1 DefaultDateTypeAdapter is not null safe.", "Eric Cochran", "NightlyNexus", "07/19/17, 01:37:52 PM", "```java\r\npublic void testNullSafe() throws IOException {\r\n  TypeAdapter<Date> date =\r\n    new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss Z\").create().getAdapter(Date.class);\r\n  assertNull(date.fromJson(\"null\"));\r\n}\r\n```\r\nfails.\r\nThe recent change to the streaming adapter unfortunately broke some backwards compatibility for some of my projects.", "Dupe of #1096 =||= ", 0], ["1099", "Add failing DefaultDateTypeAdapterTest case.", "Eric Cochran", "NightlyNexus", "06/08/17, 06:18:40 PM", "referencing #1096 and #1098.\r\nI'm not sure where the correct place to fix the problem is. In GsonBuilder or in the DefaultDateTypeAdapter itself?", ">I'm not sure where the correct place to fix the problem is. In GsonBuilder or in the DefaultDateTypeAdapter itself?\r\n\r\nIt looks like the `DefaultDateTypeAdapter` itself.  All internal type adapters in `com.google.gson.internal.bind.TypeAdapters` use the nullability check. However, the nullability case was not tested in older pre-stream tests, therefore I missed the nullability point in b8f616c939c652b8540c95fa2b377b8c628ef3ff.\r\n\r\nI think this PR can be closed since I have fixed the issue in #1100. =||= Great! Thank you! =||= ", 0], ["1100", "Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contract", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "09/18/17, 06:49:14 AM", "Regression in:\r\n\r\n* b8f616c939c652b8540c95fa2b377b8c628ef3ff - Migrate DefaultDateTypeAdapter to streaming adapter (#1070)\r\n\r\nBug reports:\r\n\r\n* #1096 - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)\r\n* #1098 - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.\r\n* #1095 - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?", "What about writing null values?\r\n\r\nAs I alluded to earlier, I'd be tempted to say use `TypeAdapter.nullSafe()`, but, like you said, the other internal TypeAdapters do the null check themselves. So, it's probably worth being consistent.\r\n \ud83d\udc4d  =||= @NightlyNexus  Thanks for spotting another issue! Pushed 435cc9f05ad2cd159be22b17ba160a7d2851cdac. =||= #1095 =||= #1145 =||= \ud83e\udd26\u200d\u2642\ufe0f  ^ forgive my gaffe above.\r\n\r\nIs this something that can be merged soon? =||= \ud83d\udc4d  =||= ", ["1100", "Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contract", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "09/18/17, 06:49:14 AM", "Regression in:\n\n* b8f616c939c652b8540c95fa2b377b8c628ef3ff - Migrate DefaultDateTypeAdapter to streaming adapter (#1070)\n\nBug reports:\n\n* #1096 - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)\n* #1098 - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.\n* #1095 - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?", "NaN"], ["Lyubomyr Shaydariv", "Fixed DefaultDateTypeAdapter nullability on write", "06/08/17, 06:42:17 PM", "Lyubomyr Shaydariv", "435cc9f05ad2cd159be22b17ba160a7d2851cdac", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -84,6 +84,10 @@ public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int\n   // See issue 162\n   @Override\n   public void write(JsonWriter out, Date value) throws IOException {\n+    if (value == null) {\n+      out.nullValue();\n+      return;\n+    }\n     synchronized (localFormat) {\n       String dateFormatAsString = enUsFormat.format(value);\n       out.value(dateFormatAsString);, @@ -164,6 +164,7 @@ public void testInvalidDatePattern() throws Exception {\n   public void testNullValue() throws Exception {\n     DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n     assertNull(adapter.fromJson(\"null\"));\n+    assertEquals(\"null\", adapter.toJson(null));\n   }\n \n   public void testUnexpectedToken() throws Exception {, ", 5, 0, "\"modified, modified, \"", 5], 1], ["1101", "Kotlin var does not save generic type (deserialized to LinkedTreeMap instead)", "Egor Neliuba", "egor-n", "06/26/17, 06:55:29 AM", "```kotlin\r\ndata class BigClass(var inBig: Map<String, List<SmallClass>>? = null)\r\ndata class SmallClass(var inSmall: String? = null)\r\n\r\nfun main(args: Array<String>) {\r\n    val json = \"\"\"\r\n{\r\n    \"inBig\": {\r\n        \"key\": [\r\n            { \"inSmall\": \"hello\" }\r\n        ]\r\n    }\r\n}\r\n\"\"\"\r\n\r\n    val deserialized = Gson().fromJson(json, BigClass::class.java)\r\n    println(deserialized.inBig!![\"key\"]!![0].inSmall) // should print \"hello\" but throws instead\r\n}\r\n```\r\n\r\nExecuting the code above will lead to the following Exception:\r\n\r\n```\r\nException in thread \"main\" java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to SmallClass\r\n\tat MyClass.main(MyClass.kt:18)\r\n```\r\n\r\nThe `List<SmallClass>` is actually deserialized to `List<LinkedTreeMap>`.\r\n\r\nHowever, if I changed the definition of `inBig ` variable to be a constant, then it deserializes just fine:\r\n\r\n```\r\ndata class BigClass(val inBig: Map<String, List<SmallClass>>? = null)\r\n```\r\n\r\nI changed `var` to `val` and the code prints \"hello\" as expected.\r\n\r\nKotlin 1.1.1 and Gson 2.8.1.", "I have run `javap` on both cases and here are the results:\r\n\r\n```\r\n// `BigClass` with `val inBig` is compiled to\r\npublic final class BigClass {\r\n  private final java.util.Map<java.lang.String, java.util.List<SmallClass>> inBig;\r\n  public final java.util.Map<java.lang.String, java.util.List<SmallClass>> getInBig();\r\n  // ...\r\n}\r\n\r\n// `BigClass` with `var inBig` is compiled to\r\npublic final class BigClass {\r\n  private java.util.Map<java.lang.String, ? extends java.util.List<SmallClass>> inBig;\r\n  public final java.util.Map<java.lang.String, java.util.List<SmallClass>> getInBig();\r\n  // ...\r\n}\r\n```\r\n\r\nThe `var` case adds `? extends` in front of the `java.util.List<SmallClass>`. =||= Yes, I have same problem, but this issue reproduce only in some devices =||= yep, you probably want `@JvmSuppressWildcards`.\r\nhttps://github.com/google/dagger/issues/668#issuecomment-289713497 =||= Yes, looks like annotating the `List` with `@JvmSuppressWildcards` helps:\r\n\r\n```kotlin\r\ndata class BigClass(var inBig: Map<String, @JvmSuppressWildcards List<SmallClass>>? = null)\r\n``` =||= Seems like Gson supports wildcard types, though \u2013 see #39 and [this test](https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java#L271). =||= Also, when using Jackson, it works just fine without an annotation. =||= I have done some more research and it seems like Kotlin is not at fault. Gson fails with the same exception for the following Java class (which is similar to the Kotlin one in the issue description):\r\n\r\n```java\r\nclass BigClass {\r\n    Map<String, ? extends List<SmallClass>> inBig;\r\n}\r\n\r\n// ...\r\n\r\nclass SmallClass {\r\n    String inSmall;\r\n}\r\n``` =||= Closed in favor of #1107. =||= after adding in data class ```@JvmSuppressWildcards(suppress = true)``` to problematic field I still get ```LinkedTreeMap```\r\n\r\n```\r\n@JvmSuppressWildcards(suppress = true)\r\n    @SerializedName(\"patient\")\r\n    @Expose\r\n    var patient: Any? = null\r\n``` =||= as not worked so and not works, why the problem is considered solved? @egor-n  =||= @abbath0767 this is a duplicate of #1107. =||= ", 0], ["1103", "Avoid NPE in PostConstructAdapterFactory", "Niv Singer", "nivs", "06/20/17, 01:04:20 AM", "The RawType's Superclass might be null. This happens, for example, when the type is a collection.", "Can you include a test case that demonstrates the bug? =||= Test case added. Without the fix it causes a NPE.\r\n\r\n```\r\njava.lang.NullPointerException\r\n\tat com.google.gson.typeadapters.PostConstructAdapterFactory.create(PostConstructAdapterFactory.java:36)\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:423)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:423)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:886)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:852)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:801)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:773)\r\n\tat com.google.gson.typeadapters.PostConstructAdapterFactoryTest.testList(PostConstructAdapterFactoryTest.java:45)\r\n\r\n``` =||= \ud83d\udc4d  =||= ", ["1103", "Avoid NPE in PostConstructAdapterFactory", "Niv Singer", "nivs", "06/20/17, 01:04:20 AM", "The RawType's Superclass might be null. This happens, for example, when the type is a collection.", "NaN"], ["Niv Singer", "Improve the code quality of PostConstructAdapterFactoryTest", "06/19/17, 07:22:57 PM", "GitHub", "9aed8cb6cf084727ffbc2d3dd76154a2dbc63135", ["extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java"], "@@ -50,8 +50,7 @@ public void testList() {\n \n         // Throws NullPointerException without the fix in https://github.com/google/gson/pull/1103\n         String json = gson.toJson(sandwiches);\n-        Assert.assertEquals(\n-            \"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n+        Assert.assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n \n         MultipleSandwiches sandwichesFromJson = gson.fromJson(json, MultipleSandwiches.class);\n         Assert.assertEquals(sandwiches, sandwichesFromJson);, ", 1, 2, "\"modified, \"", 3], 1], ["1104", "gson-extras is not available as a Maven artifact", "Niv Singer", "nivs", "06/19/17, 09:44:08 PM", "`gson-extras` is not distributed as part of the main artifact, and there is no independent artifact for it.\r\nThis leads to either including the source code, or relying on [3rd party artifacts](https://mvnrepository.com/artifact/org.danilopianini/gson-extras) (outdated).", "That is by design. We have no intention of maintaining backward compatibility on extras. You should include source-code. =||= It seems there is now a `gson-extras` artifact available. Is it an official artifact? Was the decision mentioned in @inder123's comment changed? \r\n\r\nhttps://mvnrepository.com/artifact/com.google.code.gson/gson-extras/2.8.5 =||= It is not an official artifact. Not sure how it got there. =||= The link: https://mvnrepository.com/artifact/com.google.code.gson/gson-extras/2.8.5\r\n\r\nIt's not on Maven Central. The page says:\r\n\r\n```\r\nNote: this artifact it located at CronApp repository (https://artifactory.cronapp.io/public-release/)\r\n``` =||= I am currently maintaining a build of gson-extras and shipping it to Central.\r\nhttps://search.maven.org/artifact/org.danilopianini/gson-extras/ =||= ", 0], ["1105", "Fix well formed exception", "Stefan M.", "StefMa", "06/23/17, 04:32:04 PM", "The previous exception was styled in the following way:\r\n... [\"DATE']...\r\nThis commit will fix the different quote marks and replace the \" with '", "\ud83d\udc4d  =||= ", ["1105", "Fix well formed exception", "Stefan M.", "StefMa", "06/23/17, 04:32:04 PM", "The previous exception was styled in the following way:\n... [\"DATE']...\nThis commit will fix the different quote marks and replace the \" with '", "NaN"], ["StefMa", "Fix well formed exception\n\nThe previous exception was styled in the following way:\n... [\"DATE']...\nThis commit will fix the different quote marks and replace the \" with '", "06/23/17, 01:20:21 PM", "StefMa", "30cfe03c45c03f73a007145e7f048c8b7566df11", ["extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java", "extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java", "extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java"], "@@ -229,7 +229,7 @@ private static Date parse(String date, ParsePosition pos) throws ParseException\n     } catch (IllegalArgumentException e) {\n       fail = e;\n     }\n-    String input = (date == null) ? null : ('\"' + date + \"'\");\n+    String input = (date == null) ? null : (\"'\" + date + \"'\");\n     throw new ParseException(\"Failed to parse date [\" + input + \"]: \" + fail.getMessage(), pos.getIndex());\n   }\n , @@ -22,7 +22,6 @@\n import com.google.gson.GsonBuilder;\n \n import junit.framework.TestCase;\n-import org.junit.Assert;\n \n import java.util.Arrays;\n import java.util.List;\n@@ -50,10 +49,10 @@ public void testList() {\n \n         // Throws NullPointerException without the fix in https://github.com/google/gson/pull/1103\n         String json = gson.toJson(sandwiches);\n-        Assert.assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n+        assertEquals(\"{\\\"sandwiches\\\":[{\\\"bread\\\":\\\"white\\\",\\\"cheese\\\":\\\"cheddar\\\"},{\\\"bread\\\":\\\"whole wheat\\\",\\\"cheese\\\":\\\"swiss\\\"}]}\", json);\n \n         MultipleSandwiches sandwichesFromJson = gson.fromJson(json, MultipleSandwiches.class);\n-        Assert.assertEquals(sandwiches, sandwichesFromJson);\n+        assertEquals(sandwiches, sandwichesFromJson);\n     }\n \n     static class Sandwich {, @@ -22,6 +22,7 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import com.google.gson.JsonParseException;\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n@@ -76,4 +77,13 @@ public void testNullDateSerialization() {\n     String json = gson.toJson(null, Date.class);\n     assertEquals(\"null\", json);\n   }\n+\n+  public void testWellFormedParseException() {\n+    try {\n+      gson.fromJson(\"2017-06-20T14:32:30\", Date.class);\n+      fail(\"No exception\");\n+    } catch (JsonParseException exe) {\n+      assertEquals(exe.getMessage(), \"java.text.ParseException: Failed to parse date ['2017-06-20T14']: 2017-06-20T14\");\n+    }\n+  }\n }, ", 13, 4, "\"modified, modified, modified, \"", 17], 1], ["1106", "Unable to deserialize a map of generic objects", null, "lauradP", "12/29/17, 07:43:00 PM", "Hi, I'm trying to deserialize the following json map:\r\n```\r\n{\r\n   \"result\":true,\r\n   \"duration\":\"3603.312\",\r\n   \"output-json\":\"smb://usr:pwd@172.17.0.8/secured/file.json\",\r\n   \"success\":true,\r\n   \"isValid\":\"true\",\r\n   \"output-xml\":\"smb://usr:pwd@172.17.0.8/secured/file.xml\"\r\n}\r\n```\r\nbut I get the following result:\r\n\r\n- result => java.lang.Object@202d8fd4;\r\n- duration => java.lang.Object@241d929c;\r\n- output-json => java.lang.Object@3e16d488;\r\n- success => java.lang.Object@5f916590;\r\n- isValid => java.lang.Object@138e0299;\r\n- output-xml => java.lang.Object@5bcfeb06\r\n\r\n\r\nI use the following code to deserialize maps:\r\n```\r\npublic Map<String, Object> deserializeMapOfObj(String jsonString) {\r\n\t\tGson gson = new Gson();\r\n\t\tMap<String, Object> result = gson.fromJson(jsonString, new TypeToken<Map<String, Object>>() {}.getType());\r\n\t\treturn result;\r\n\t}\r\n```\r\n\r\nIs there any error? Can you help me deserializing this map?\r\n\r\nThanks, \r\nLaura\r\n\r", "using your code above:\r\n```java\r\nString json = \"{\\n\"\r\n    + \"   \\\"result\\\":true,\\n\"\r\n    + \"   \\\"duration\\\":\\\"3603.312\\\",\\n\"\r\n    + \"   \\\"output-json\\\":\\\"smb://usr:pwd@172.17.0.8/secured/file.json\\\",\\n\"\r\n    + \"   \\\"success\\\":true,\\n\"\r\n    + \"   \\\"isValid\\\":\\\"true\\\",\\n\"\r\n    + \"   \\\"output-xml\\\":\\\"smb://usr:pwd@172.17.0.8/secured/file.xml\\\"\\n\"\r\n    + \"}\";\r\nSystem.out.println(deserializeMapOfObj(json));\r\n```\r\nprints\r\n`{result=true, duration=3603.312, output-json=smb://usr:pwd@172.17.0.8/secured/file.json, success=true, isValid=true, output-xml=smb://usr:pwd@172.17.0.8/secured/file.xml}`\r\n\r\nDo you have a reproducible test case to show the problem? =||= ", 0], ["1109", "Reflected TypeAdapter does not respect Gson FieldNamingPolicy", "Francisco Salda\u00f1a", "FrankSalad", "07/04/17, 01:32:09 AM", "Initially reported https://github.com/square/retrofit/issues/2383\r\n\r\nThe adapter returned by `gson.getAdapter(TypeToken)` creates its `boundFields` mapping using  camelCased field names instead of field names determined by the `FieldNamingPolicy` used to configure the Gson instance. \r\n\r\nWhen this adapter [is then used](https://github.com/square/retrofit/blob/master/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java) to read an object, underscore_cased field names are not resolved to a field using the [lookup](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L216) so their deserialization is skipped. ", "Sorry! It was my mistake. This is not broken, it totally works. My fields were actually camelCased and I was using the wrong `FieldNamingPolicy` \ud83e\udd47 \r\n\r\n![image](https://confessionsofa20somethingklutz.files.wordpress.com/2014/04/sleepy-homer_lurking.gif)\r\n =||= ", 0], ["1111", "gson 2.8.1 toJson NullPointerException bug ", null, "magicbest", "07/05/17, 03:56:36 AM", "Using gson2.8.1, set \"Gson gson = new GsonBuilder().setDateFormat(\"yyyyMMddHHmmss\").create();\".\r\nWhen the object which needs to be serialized into Json has Date type attribute, and the value of that attribute is null, using method \"toJson\" will throw NullPointerException. gson2.8.0 does not have this problem under same situation.", "Dupe #1098 =||= ", 0], ["1113", "  compile 'com.google.code.gson:gson:2.4'\uff0cwill happen ANR(anroid 4.42,but 7.0 is ok).", "white_or_black", "lucklyperson", "07/19/17, 01:38:32 PM", "this issue happened the Android 4.4.2.But the 7.0 is ok.This is the build gradle.\r\n compile fileTree(include: ['*.jar'], dir: 'libs')\r\n    testCompile 'junit:junit:4.12'\r\n    compile 'com.android.support:appcompat-v7:24.2.1'\r\n    compile 'com.android.support:support-v4:24.2.1'\r\n    compile project(':easeui')\r\n    compile project(':pulltorefresh_library')\r\n    compile files('libs/butterknife-7.0.1.jar')\r\n    compile files('libs/umeng-analytics-v6.0.9.jar')\r\n    compile files('libs/eventbus-3.0.0.jar')\r\n    compile files('libs/alipaySdk-20161222.jar')\r\n    compile files('libs/wechat-sdk-android-with-mta-1.0.2.jar')\r\n    compile 'com.youth.banner:banner:1.4.9'\r\n    compile 'com.android.support:recyclerview-v7:24.2.1'\r\n    compile 'com.meiqia:meiqiasdk:3.4.0@aar'\r\n    compile 'com.squareup.okhttp3:okhttp:3.5.0'\r\n    compile 'com.android.support:multidex:1.0.1'\r\n    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\r\n    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\r\n    compile 'com.google.code.gson:gson:2.4'", "It's not clear why you think Gson causes this. =||= ok,i have handler it.thank you. =||= ", 0], ["1114", "Getting more done in GitHub with ZenHub", "Sylvie BERTRAND", "sylvie19791", "07/10/17, 10:10:40 PM", "Hola! @sylvie19791 has created a [ZenHub](http://www.zenhub.com) account for the **google** organization. ZenHub is the only project management tool integrated natively in GitHub \u2013 created specifically for fast-moving, software-driven teams.\n\n----\n\n#### How do I use ZenHub?\n\nTo get set up with ZenHub, all you have to do is **[download the browser extension](https://www.zenhub.com?utm_source=ZHOnboarding)** and log in with your GitHub account. Once you do, you\u2019ll get access to ZenHub\u2019s complete feature-set immediately.\n\n#### What can ZenHub do?\n\nZenHub adds a series of enhancements directly inside the GitHub UI:\n\n- Real-time, customizable task boards for GitHub issues;\n- Multi-Repository burndown charts, estimates, and velocity tracking based on GitHub Milestones;\n- Personal to-do lists and task prioritization;\n- Time-saving shortcuts \u2013 like a quick repo switcher, a \u201cMove issue\u201d button, and much more.\n\n### [Add ZenHub to GitHub](https://www.zenhub.com?utm_source=ZHOnboarding)\n\n_Still curious? See [more ZenHub features](https://www.zenhub.com/features?utm_source=ZHOnboarding) or read [user reviews](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd/reviews). This issue was written by your friendly ZenHub bot, posted by request from @sylvie19791._\n\n![ZenHub Board](https://cloud.githubusercontent.com/assets/8771909/11153956/233ac4a8-89f1-11e5-94b1-1569d3f38b4d.png)", "NaN", 0], ["1115", "How to skip the field when the exception \u201cjava.lang.IllegalStateException\u201d occurred\uff1f", "\u674e\u5fd7\u654f", "AndSync", "07/12/17, 01:40:57 PM", "Model\r\n```\r\npublic class Result<User> {\r\n    private String code;\r\n    private String msg;\r\n    private User data;\r\n\r\n    public String getCode() {\r\n        return code;\r\n    }\r\n\r\n    public void setCode(String code) {\r\n        this.code = code;\r\n    }\r\n\r\n    public String getMsg() {\r\n        return msg;\r\n    }\r\n\r\n    public void setMsg(String msg) {\r\n        this.msg = msg;\r\n    }\r\n\r\n    public User getData() {\r\n        return data;\r\n    }\r\n\r\n    public void setData(User data) {\r\n        this.data = data;\r\n    }\r\n}\r\n```\r\nApi result\r\n\r\nSuccess\r\n\r\n```\r\n{\r\n    \"code\":200,\r\n    \"msg\":\"success\",\r\n    \"data\":{\r\n               \"name\":\"zhangsan\",\r\n                \"age\":18\r\n             }\r\n}\r\n```\r\n\r\nFailure\r\n```\r\n{\r\n    \"code\":401,\r\n    \"msg\":\"success\",\r\n    \"data\":[]\r\n}\r\n```\r\nor\r\n```\r\n{\r\n    \"code\":401,\r\n    \"msg\":\"success\",\r\n    \"data\":\"\"\r\n}\r\n```\r\nWhen the result  is Failure the The exception occurred\r\n```\r\njava.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 23 path $.data\r\n```\r\nI just want to skip the field \"data\" because it is unused when the failure result,\r\nAnd keep the other fields. not an exception\r\n\r\nhow can I do???", "Annotate the `data` field with `@JsonAdapter` and write a `TypeAdapter` for `User` which checks for a string or array and turns them into whatever `User` value you want in that case (like `null`).\r\n\r\nThis is a usage question and so best asked on StackOverflow. Issues are for feature requests and bugs with test cases only. =||= `data` maybe is a string,list and so on,can use `TypeAdapter` to skip` data`? =||= @JakeWharton How did you solve this problem? User class is a generic. =||= @FlyInTheSkyToMe \r\n\u597d\u5bb6\u4f19\uff0c\u8fd9\u4e48\u4e45\u4e86\u8fd8\u95ee\r\n```Kotlin\r\ninterface TAny\r\n```\r\n```Kotlin\r\nclass EmptyCheckTypeAdapterFactory : TypeAdapterFactory {\r\n\r\n    override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {\r\n        // We filter out the EmptyCheckTypeAdapter as we need to check this for emptiness!\r\n        if (TAny::class.java.isAssignableFrom(type.rawType)) {\r\n            val delegate = gson.getDelegateAdapter(this, type)\r\n            val elementAdapter = gson.getAdapter(JsonElement::class.java)\r\n            return EmptyCheckTypeAdapter(delegate, elementAdapter).nullSafe()\r\n        }\r\n        return null\r\n    }\r\n\r\n    class EmptyCheckTypeAdapter<T>(\r\n        private val delegate: TypeAdapter<T>,\r\n        private val elementAdapter: TypeAdapter<JsonElement>\r\n    ) : TypeAdapter<T>() {\r\n\r\n        @Throws(IOException::class)\r\n        override fun write(out: JsonWriter, value: T) {\r\n            this.delegate.write(out, value)\r\n        }\r\n\r\n        @Throws(IOException::class)\r\n        override fun read(reader: JsonReader): T? {\r\n            val jsonElement = elementAdapter.read(reader)\r\n            if (jsonElement == null || jsonElement.isJsonNull)\r\n                return null\r\n            val jstring = jsonElement.toString()\r\n            if (TextUtils.isEmpty(jstring) || \"\\\"\\\"\" == jstring)\r\n                return null\r\n            val asJsonObject = jsonElement.asJsonObject\r\n            return if (asJsonObject.entrySet().isEmpty()) null else this.delegate.fromJsonTree(\r\n                asJsonObject\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n```Kotlin\r\nGsonBuilder().registerTypeAdapterFactory(EmptyCheckTypeAdapterFactory()).create()\r\n```\r\n\u8981\u8df3\u8fc7\u7684\u5b9e\u4f53\u7c7b\u7ee7\u627fTAny\u5c31\u53ef\u4ee5\u4e86 =||= @JakeWoki \u597d\u7684\uff0c\u8c22\u8c22\uff01 \u6211\u5e26\u4f1a\u513f\u53bb\u5b66\u4e60\u5b66\u4e60\u3002 =||= ", 0], ["1116", "Update GsonBuilder.java", "Ayo", "AyoPrez", "12/29/17, 07:41:34 PM", "A small improvement in readability", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= ", 0], ["1118", "Gson parse json,double value loss precision", "iamzj", "iamzj", "07/15/17, 08:47:36 PM", "my json contains double value like 5.00,but gson parse it to 5.0,how to deal with this problem?", "Numbers represent values and not display formats. 5.00 and 5.0 are\nnumerically equivalent. If you want something like 5.00 it should be\nrepresented as a string.\n\nOn Fri, Jul 14, 2017 at 11:57 PM iamzj <notifications@github.com> wrote:\n\n> my json contails double value like 5.00,but gson parse it to 5.0,how to\n> deal with this problem?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1118>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEQf8WnilOfDAC-8sXWtbujOANrOFks5sODiPgaJpZM4OY6Es>\n> .\n>\n =||= ", 0], ["1119", "ProtoTypeAdapter uses wrong case format to find repeated field's generic type via reflection", "Ori Schwartz", "orischwartz", "09/18/17, 06:46:53 AM", "`fieldNameSerializationFormat` is a converter from protobuf case format -> json case format.\r\n\r\nWhen deserializing json -> protobuf, `ProtoTypeAdapter` uses reflection to determine the Java field name of a repeated protobuf field (to obtain its generic type).\r\n\r\nThe Java protobuf implementation always uses lower camel case for its field names, but `ProtoTypeAdapter` was using the caller-specified proto->json converter. \r\n\r\nBefore this PR, if the JSON case format didn't produce the same name as lower camel, deserialization would fail.\r\n\r\nThis PR:\r\n* Removes the `Converter` and instead stores both proto and json `CaseFormat`s so the json `CaseFormat` can be referenced.\r\n* Fixes the field name translation used in reflection so it always converts to lower camel.\r\n* Adds deserialization and serialization unit tests on a protobuf with a repeated field name that exposes the error.", "Anything I can do to help get this merged/reviewed? Thanks! =||= \ud83d\udc4d  =||= ", ["1119", "ProtoTypeAdapter uses wrong case format to find repeated field's generic type via reflection", "Ori Schwartz", "orischwartz", "09/18/17, 06:46:53 AM", "`fieldNameSerializationFormat` is a converter from protobuf case format -> json case format.\n\nWhen deserializing json -> protobuf, `ProtoTypeAdapter` uses reflection to determine the Java field name of a repeated protobuf field (to obtain its generic type).\n\nThe Java protobuf implementation always uses lower camel case for its field names, but `ProtoTypeAdapter` was using the caller-specified proto->json converter. \n\nBefore this PR, if the JSON case format didn't produce the same name as lower camel, deserialization would fail.\n\nThis PR:\n* Removes the `Converter` and instead stores both proto and json `CaseFormat`s so the json `CaseFormat` can be referenced.\n* Fixes the field name translation used in reflection so it always converts to lower camel.\n* Adds deserialization and serialization unit tests on a protobuf with a repeated field name that exposes the error.", "NaN"], ["Ori Schwartz", "Java protobuf uses lower camel for all field names. When using reflection to find the generic type of repeated fields, can't use the user specified formats for field name conversion.", "07/19/17, 02:13:25 PM", "Ori Schwartz", "5a91259b09d5a57bba1a1ddfb046415c6a922d40", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java", "proto/src/main/protobuf/bag.proto", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java"], "@@ -19,7 +19,6 @@\n import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.base.CaseFormat;\n-import com.google.common.base.Converter;\n import com.google.common.collect.MapMaker;\n import com.google.gson.JsonArray;\n import com.google.gson.JsonDeserializationContext;\n@@ -94,7 +93,8 @@\n     private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n     private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;\n     private EnumSerialization enumSerialization;\n-    private Converter<String, String> fieldNameSerializationFormat;\n+    private CaseFormat protoFormat;\n+    private CaseFormat jsonFormat;\n \n     private Builder(EnumSerialization enumSerialization, CaseFormat fromFieldNameFormat,\n         CaseFormat toFieldNameFormat) {\n@@ -126,7 +126,8 @@ public Builder setEnumSerialization(EnumSerialization enumSerialization) {\n      */\n     public Builder setFieldNameSerializationFormat(CaseFormat fromFieldNameFormat,\n         CaseFormat toFieldNameFormat) {\n-      fieldNameSerializationFormat = fromFieldNameFormat.converterTo(toFieldNameFormat);\n+      this.protoFormat = fromFieldNameFormat;\n+      this.jsonFormat = toFieldNameFormat;\n       return this;\n     }\n \n@@ -174,7 +175,7 @@ public Builder addSerializedEnumValueExtension(\n     }\n \n     public ProtoTypeAdapter build() {\n-      return new ProtoTypeAdapter(enumSerialization, fieldNameSerializationFormat,\n+      return new ProtoTypeAdapter(enumSerialization, protoFormat, jsonFormat,\n           serializedNameExtensions, serializedEnumValueExtensions);\n     }\n   }\n@@ -195,16 +196,19 @@ public static Builder newBuilder() {\n       new MapMaker().makeMap();\n \n   private final EnumSerialization enumSerialization;\n-  private final Converter<String, String> fieldNameSerializationFormat;\n+  private final CaseFormat protoFormat;\n+  private final CaseFormat jsonFormat;\n   private final Set<Extension<FieldOptions, String>> serializedNameExtensions;\n   private final Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions;\n \n   private ProtoTypeAdapter(EnumSerialization enumSerialization,\n-      Converter<String, String> fieldNameSerializationFormat,\n+      CaseFormat protoFormat,\n+      CaseFormat jsonFormat,\n       Set<Extension<FieldOptions, String>> serializedNameExtensions,\n       Set<Extension<EnumValueOptions, String>> serializedEnumValueExtensions) {\n     this.enumSerialization = enumSerialization;\n-    this.fieldNameSerializationFormat = fieldNameSerializationFormat;\n+    this.protoFormat = protoFormat;\n+    this.jsonFormat = jsonFormat;\n     this.serializedNameExtensions = serializedNameExtensions;\n     this.serializedEnumValueExtensions = serializedEnumValueExtensions;\n   }\n@@ -284,8 +288,9 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             } else if (fieldDescriptor.isRepeated()) {\n               // If the type is an array, then we have to grab the type from the class.\n+              // protobuf java field names are always lower camel case\n               String protoArrayFieldName =\n-                  fieldNameSerializationFormat.convert(fieldDescriptor.getName()) + \"_\";\n+                  protoFormat.to(CaseFormat.LOWER_CAMEL, fieldDescriptor.getName()) + \"_\";\n               Field protoArrayField = protoClass.getDeclaredField(protoArrayFieldName);\n               Type protoArrayFieldType = protoArrayField.getGenericType();\n               fieldValue = context.deserialize(jsonElement, protoArrayFieldType);\n@@ -325,7 +330,7 @@ private String getCustSerializedName(FieldOptions options, String defaultName) {\n         return options.getExtension(extension);\n       }\n     }\n-    return fieldNameSerializationFormat.convert(defaultName);\n+    return protoFormat.to(jsonFormat, defaultName);\n   }\n \n   /**, @@ -24,6 +24,11 @@ message SimpleProto {\n   optional int32 count = 2;\n }\n \n+message ProtoWithDifferentCaseFormat {\n+  repeated string name_that_tests_case_format = 1;\n+  optional string another_field = 2;\n+}\n+\n message ProtoWithRepeatedFields {\n   repeated int64 numbers = 1;\n   repeated SimpleProto simples = 2;, @@ -15,10 +15,13 @@\n  */\n package com.google.gson.protobuf.functional;\n \n+import com.google.common.base.CaseFormat;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n import com.google.gson.protobuf.ProtoTypeAdapter;\n import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;\n+import com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat;\n import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n import com.google.protobuf.GeneratedMessage;\n@@ -32,6 +35,7 @@\n  */\n public class ProtosWithComplexAndRepeatedFieldsTest extends TestCase {\n   private Gson gson;\n+  private Gson upperCamelGson;\n \n   @Override\n   protected void setUp() throws Exception {\n@@ -43,6 +47,14 @@ protected void setUp() throws Exception {\n                     .setEnumSerialization(EnumSerialization.NUMBER)\n                     .build())\n             .create();\n+    upperCamelGson =\n+        new GsonBuilder()\n+            .registerTypeHierarchyAdapter(\n+                GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+                    .setFieldNameSerializationFormat(\n+                        CaseFormat.LOWER_UNDERSCORE, CaseFormat.UPPER_CAMEL)\n+                    .build())\n+            .create();\n   }\n \n   public void testSerializeRepeatedFields() {\n@@ -67,4 +79,23 @@ public void testDeserializeRepeatedFieldsProto() {\n     assertEquals(\"bar\", proto.getSimples(0).getMsg());\n     assertEquals(7, proto.getSimples(1).getCount());\n   }\n+\n+  public void testSerializeDifferentCaseFormat() {\n+    final ProtoWithDifferentCaseFormat proto =\n+      ProtoWithDifferentCaseFormat.newBuilder()\n+        .setAnotherField(\"foo\")\n+        .addNameThatTestsCaseFormat(\"bar\")\n+        .build();\n+    final JsonObject json = upperCamelGson.toJsonTree(proto).getAsJsonObject();\n+    assertEquals(\"foo\", json.get(\"AnotherField\").getAsString());\n+    assertEquals(\"bar\", json.get(\"NameThatTestsCaseFormat\").getAsJsonArray().get(0).getAsString());\n+  }\n+\n+  public void testDeserializeDifferentCaseFormat() {\n+    final String json = \"{NameThatTestsCaseFormat:['bar'],AnotherField:'foo'}\";\n+    ProtoWithDifferentCaseFormat proto =\n+      upperCamelGson.fromJson(json, ProtoWithDifferentCaseFormat.class);\n+    assertEquals(\"foo\", proto.getAnotherField());\n+    assertEquals(\"bar\", proto.getNameThatTestsCaseFormat(0));\n+  }\n }, ", 50, 9, "\"modified, modified, modified, \"", 59], 1], ["1120", "DefaultDateTypeAdapter does not serialize null values", null, "kbudaeus", "07/19/17, 01:38:04 PM", "The following code gives a NPE:\r\n\r\n```\r\nclass WrapperObject {\r\n        Date date = null;\r\n        WrapperObject() {};\r\n    }\r\n        \r\nGson parser = new GsonBuilder().serializeNulls().setDateFormat(DateFormat.LONG, DateFormat.LONG).create();\r\nWrapperObject wrapper = new WrapperObject();\r\nString jsonString = parser.toJson(wrapper);\r\nSystem.out.println(jsonString);\r\n```\r\n\r\nWith the following stack trace:\r\n\r\n```\r\n        java.lang.NullPointerException\r\n\tat java.util.Calendar.setTime(Calendar.java:1770)\r\n\tat java.text.SimpleDateFormat.format(SimpleDateFormat.java:943)\r\n\tat java.text.SimpleDateFormat.format(SimpleDateFormat.java:936)\r\n\tat java.text.DateFormat.format(DateFormat.java:345)\r\n\tat com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)\r\n\tat com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)\r\n```\r\n\r\nThe DefaultDateTypeAdapter should handle null values. E.g.:\r\n\r\n```\r\n    public void write(JsonWriter out, Date value) throws IOException {\r\n        synchronized (localFormat) {\r\n            // Fix to deal with null values.\r\n            if (value == null) {\r\n                out.nullValue();\r\n            }\r\n            else {\r\n                String dateFormatAsString = enUsFormat.format(value);\r\n                out.value(dateFormatAsString);\r\n            }\r\n        }\r\n    }\r\n```\r", "Dupe of #1096 =||= ", 0], ["1121", "fix javaDoc", "Igor Mysak", "imysak", "07/20/17, 10:49:51 PM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_author_cla --> =||= ", 0], ["1122", "fix javaDoc", "Igor Mysak", "imysak", "07/21/17, 05:12:25 PM", "NaN", "Thanks =||= ", ["1122", "fix javaDoc", "Igor Mysak", "imysak", "07/21/17, 05:12:25 PM", "NaN", "NaN"], ["Igor Mysak", "fix javaDoc", "07/20/17, 10:45:46 PM", "Igor Mysak", "8728fd941dfc7724565b09a337f6160f42aa7184", ["gson/src/main/java/com/google/gson/FieldAttributes.java"], "@@ -136,9 +136,13 @@ public boolean hasModifier(int modifier) {\n   }\n \n   /**\n-   * This is exposed internally only for the removing synthetic fields from the JSON output.\n+   * Returns the value of the field represented by this {@code Field}, on\n+   * the specified object. The value is automatically wrapped in an\n+   * object if it has a primitive type.\n    *\n-   * @return true if the field is synthetic; otherwise false\n+   * @return the value of the represented field in object\n+   * {@code obj}; primitive values are wrapped in an appropriate\n+   * object before being returned\n    * @throws IllegalAccessException\n    * @throws IllegalArgumentException\n    */, ", 6, 2, "\"modified, \"", 8], 1], ["1123", "Export extra folder to maven central", "Yonni Chen", "cheninator", "09/09/21, 08:37:03 PM", "Currently, only https://github.com/google/gson/tree/master/gson is available on maven central and it would be nice to have https://github.com/google/gson/tree/master/extras also available. Thus, we can reuse the type adapters for deserializing nested interfaces", "The classes in there are not versioned nor have API stability guarantees.\n\nOn Fri, Jul 21, 2017, 12:43 PM Yonni CHEN <notifications@github.com> wrote:\n\n> Currently, only https://github.com/google/gson/tree/master/gson is\n> available on maven central and it would be nice to have\n> https://github.com/google/gson/tree/master/extras also available. Thus,\n> we can reuse the type adapters for deserializing nested interfaces\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1123>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZTp0C7X7bJVU1-Kaud_X2jkbHZGks5sQNU0gaJpZM4Ofow_>\n> .\n>\n =||= If you need them, you can use this package: https://search.maven.org/artifact/org.danilopianini/gson-extras/ =||= See also https://github.com/google/gson/issues/1104\r\n\r\nIs the fact that there are no compat guarantees a blocker for publishing an artifact? Version 0.x would be pretty clear that it's not stable. + A documentation in Readme.md that it exists, but use at your own. =||= @TWiStErRob, I know it's not the same as having google publishing the package themselves, but I am keeping the artifact mentioned before aligned with the mainline. I also intend (and help is welcome) to automate the pull / release. =||= We don't have plans to publish new Gson-related artifacts to Maven Central. (We will continue to publish updated versions of existing ones.) =||= ", 0], ["1125", "Request - Annotation for specific fields to not print as \"Pretty\"?", "Deleted user", "ghost", "07/26/17, 11:22:48 PM", "**Example class:**\r\n```\r\npublic class Example {\r\n    @Expose int a;\r\n    @Expose boolean b;\r\n    @Expose String c;\r\n    @Expose int[] d; //Would be nice if we could get something like.. @Compact, which would bypass the pretty formatting.\r\n}\r\n```\r\n\r\n**Pretty Output:**\r\n\r\n> {\r\n>   \"a\": 999,\r\n>   \"b\": false,\r\n>   \"c\": \"Lalalala\",\r\n>   \"d\": [\r\n>     0,\r\n>     1,\r\n>     2,\r\n>     3,\r\n>     4\r\n>   ]\r\n> }\r\n\r\n**Desired Output:** (Mostly pretty formatting, except for array \"d\")\r\n\r\n> {\r\n>   \"a\": 999,\r\n>   \"b\": false,\r\n>   \"c\": \"Lalalala\",\r\n>   \"d\": [0,1,2,3,4]\r\n> }\r\n\r\nIs this already possible? If not, I'd like to suggest adding a new custom annotation which would indicate that the field does not want to be formatted \"pretty\".. such as an annotation called Compact \r", "This is not supported. If you need a custom formatter you'll have to supply it yourself iterating over a JsonObject model representation. Gson doesn't want to be in the business of formatting JSON and dealing with all the crazy customizations therein. =||= ", 0], ["1126", "Kotlin Support :)", "Marcin", "marcinOz", "07/28/17, 01:15:15 PM", "Kotlin Data Classes and default values support pls :)", "This isn't going to happen. A third-party project can provide support or\nyou can take a look at Moshi which supports this.\n\nOn Fri, Jul 28, 2017, 2:03 PM marcinOz <notifications@github.com> wrote:\n\n> Kotlin Data Classes and default values support pls :)\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1126>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEVHP2oouGjGCWzhLNk5fsWca0fCyks5sSc4UgaJpZM4OmhZv>\n> .\n>\n =||= Also, provide a no-args constructor and this already works.\n\nOn Fri, Jul 28, 2017, 3:14 PM Jake Wharton <jakewharton@gmail.com> wrote:\n\n> This isn't going to happen. A third-party project can provide support or\n> you can take a look at Moshi which supports this.\n>\n> On Fri, Jul 28, 2017, 2:03 PM marcinOz <notifications@github.com> wrote:\n>\n>> Kotlin Data Classes and default values support pls :)\n>>\n>> \u2014\n>> You are receiving this because you are subscribed to this thread.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/google/gson/issues/1126>, or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AAEEEVHP2oouGjGCWzhLNk5fsWca0fCyks5sSc4UgaJpZM4OmhZv>\n>> .\n>>\n>\n =||= ", 0], ["1128", "Fix StackOverflowError on resolving types with TypeVariable recursion", "Andrey Mogilev", "amogilev", "07/31/17, 05:50:30 PM", "Sample failing code:\r\n  private static class TestType<X> {\r\n    TestType<? super X> superType;\r\n  }\r\n  ...\r\n  new Gson().getAdapter(TestType.class);", "\ud83d\udc4d  =||= Thank you for a test that demonstrates the problem! =||= ", ["1128", "Fix StackOverflowError on resolving types with TypeVariable recursion", "Andrey Mogilev", "amogilev", "07/31/17, 05:50:30 PM", "Sample failing code:\n  private static class TestType<X> {\n    TestType<? super X> superType;\n  }\n  ...\n  new Gson().getAdapter(TestType.class);", "NaN"], ["Andrey Mogilev", "fix build errors", "07/31/17, 05:16:34 PM", "Andrey Mogilev", "ef9a3f6d79cfb9e54ccc0fd1157c0a53c05f975d", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -25,11 +25,7 @@\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Properties;\n+import java.util.*;\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;, ", 1, 5, "\"modified, \"", 6], 1], ["1129", "Stream Base64-String to JsonWriter", "Fabian Zeindl", "fab1an", "12/29/17, 07:38:40 PM", "When using a `JsonWriter`, is it possible to directly output a base64 String loaded from the file-system without having to construct the entire String in memory first?", "Sure. use JsonWriter(Writer) constructor? =||= No, I mean I'm somewhere deep in a hierarchy using a `JsonWriter` to construct a stream.\r\n\r\nThen I want to add a `String` with using `.value(str)` but rather stream it directly into the `JsonWriter`.  =||= ", 0], ["1130", "support hidden fields, fix IllegalArgumentException \"... declares multiple JSON fields named ...\"", "Andrey Mogilev", "amogilev", "12/28/17, 12:45:21 AM", "Before this fix, an attempt to serialize a class with a hidden field\r\n(e.g. class C2 defined as below:\r\n  class C1 { String f; }\r\n  class C2 extends C1 { String f; }\r\n)\r\nfailed with IllegalArgumentException with a message like \"C2 declares multiple JSON fields named f\".\r\n\r\nThis is fixed by mangling the hidden fields with a \"^i\" suffix, where i is the number of the field-declaring class in the chain of super-classes, e.g. \"f^1\" stands for the hidden field \"f\" declared in the first super-class of the class being serialized.\r\n\r\nSo, JSON for C2 now may look like {\"f\":\"c2Field\", \"f^1\":\"c1Field\"}", "This seems like a non-standard convention. We wouldn't want to support it unless it was accepted practice in some JSON standard. =||= ", 0], ["1132", "Gson conversion error", "zhaoyunxing", "zhaoyunxing92", "08/02/17, 03:48:04 AM", "```java\r\n @Override\r\n    public Map<String, Object> getProjectByUserUuId(ProjectForm form) {\r\n        Map<String, Object> map = new HashMap<>();\r\n        List<ProjectVo> pros = projectMapper.selectProjectByUserUuId(form);\r\n        int count = projectMapper.selectProjectCountByUserUuId(form);\r\n        \r\n        //Here's the problem        \r\n        map.put(\"pros\", pros);\r\n        map.put(\"count\", count);\r\n        return map;\r\n    }\r\n```\r\nwhen you put a list in a map, it's wrong to use gson\r\nwhat should I do\r\n\r\n>error:\r\nclass com.sunny.bugmanage.project.model.vo.ProjectVo declares multiple JSON fields named serialVersionUID\r\n\r", "NaN", 0], ["1134", "fix typo in ConstructorConstructor exception", "Tom Magnusson", "tommagnusson", "08/03/17, 02:56:25 PM", "Simple typo fix in `com.google.internal.ConstructorConstructor` exception message.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= I signed the CLA agreement. =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1134", "fix typo in ConstructorConstructor exception", "Tom Magnusson", "tommagnusson", "08/03/17, 02:56:25 PM", "Simple typo fix in `com.google.internal.ConstructorConstructor` exception message.", "NaN"], ["Tom Magnusson", "fix typo in ConstructorConstructor exception", "08/03/17, 01:28:31 PM", "GitHub", "68cf8fdc9576815e313ffbae2d9e2604dc2f16fa", ["gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"], "@@ -224,7 +224,7 @@ public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n           return (T) newInstance;\n         } catch (Exception e) {\n           throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \"\n-              + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n+              + \"Registering an InstanceCreator with Gson for this type may fix this problem.\"), e);\n         }\n       }\n     };, ", 1, 1, "\"modified, \"", 2], 1], ["1139", "newBuilder() API", "Warren Smith", "naturalwarren", "07/20/18, 12:47:54 AM", "For the pour souls that aren't on Moshi would a PR be welcomed that adds a `newBuilder` API to `Gson`?", "Sure, good idea. =||= Shouldn't this be closed since #1142 was merged and released already? =||= ", 0], ["1140", "fromJson() hangs and silently crashes with graphics Path", "denis", "djdance", "08/14/17, 04:30:10 AM", "I need to serialize Path object and faced with weird impossibility. App just stops.\r\n\r\nLet's place a simple test right in onCreate()\r\n\r\n```\r\n    import com.google.gson.Gson;\r\n    import android.graphics.Path;\r\n\r\n    ...\r\n\r\n    Gson g=new Gson();\r\n    Path p=new Path();\r\n    p.addRect(0,0,100,100, Path.Direction.CCW);\r\n    String s=g.toJson(p).toString(); \r\n    p = g.fromJson(s, Path.class); //(1)\r\n\r\n```\r\nrun the app and wait ~5-15 sec. First it hangs, then will silently crash. If you comment the string (1), it will work. If you change (1)'s Path.class to p.getClass() or new TypeToken&lt;Path>(){}.getType() - it will not help. So the reason is in fromJson.\r\n\r\nI tried 4 devices with SDK from 17 to 25, and behavior is the same. What's wrong, how to store Path to JSON? my assumption is infinite Path's loop, which is confusing GSON.", "You should never serialize an object that is outside of your control and which weren't explicitly designed for serialization. In this example, the internals of Path are an implementation detail. The correct way to serialize this would be to register a TypeAdapter for the type and use its public API to decide what representation you want in JSON.\r\n\r\nIn Moshi, the spiritual successor to Gson, we actually forbid serializing anything in the android.* package by default unless you register a manual adapter to define the JSON format. Unfortunately it's too late to change Gson to do the same.\r\n\r\nAs to the actual cause here, your guess of a reference cycle in the implementation details of Path is the cause. =||= thank you for the detailed answer.\r\nI've spent >2 hours trying to store Path, thus let this issue helps another men.\r\n\r\nThe simple solution of such a task is some workaround with creating parallel ArrayList to store changes in path, i.e. you leave path for fast drawing, but use array for serializing. =||= ", 0], ["1141", "Make GsonBuilder.create() factory order idempotent.", "Warren Smith", "naturalwarren", "08/14/17, 03:56:16 PM", "Calling `GsonBuilder.create()` multiple times results in the builder's underlying hierarchy factory list being reversed.\r\n\r\nThis change copies hierarchy factories to a new local list when `GsonBuilder.create()` is called so subsequently calls don't result in a change in factory ordering.", "NaN", ["1141", "Make GsonBuilder.create() factory order idempotent.", "Warren Smith", "naturalwarren", "08/14/17, 03:56:16 PM", "Calling `GsonBuilder.create()` multiple times results in the builder's underlying hierarchy factory list being reversed.\n\nThis change copies hierarchy factories to a new local list when `GsonBuilder.create()` is called so subsequently calls don't result in a change in factory ordering.", "NaN"], ["Warren Smith", "Use better initializer.", "08/14/17, 03:21:33 PM", "Warren Smith", "a0edf14c7025fde807c2e85385f1259ee091d6ec", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -563,8 +563,7 @@ public Gson create() {\n     factories.addAll(this.factories);\n     Collections.reverse(factories);\n \n-    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories.size());\n-    hierarchyFactories.addAll(this.hierarchyFactories);\n+    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories);\n     Collections.reverse(hierarchyFactories);\n     factories.addAll(hierarchyFactories);\n , ", 1, 2, "\"modified, \"", 3], 1], ["1142", "Add newBuilder() API", "Warren Smith", "naturalwarren", "09/21/17, 01:53:10 AM", "Addresses #1139 \r\n\r\n`Gson.newBuilder()` returns `GsonBuilder`\r\n\r\nFew changes here:\r\n- Increases visibility of `Gson` member variables so they can be seen by `GsonBuilder`\r\n- Adds additional member variables to `Gson` to save state required to transform `Gson` back to `GsonBuilder`", "@inder123 What do you think about this? =||= @inder123 @swankjesse Is there interest in this? We'd find it particularly useful in our stack for sharing Gson instances but if there isn't I can abandon.  =||= This built fine locally, CI is having trouble:\r\n\r\n```\r\n0.01s$ mvn -f gson install -DskipTests=true\r\nError: JAVA_HOME is not defined correctly.\r\n  We cannot execute /usr/lib/jvm/java-7-oracle/bin/java\r\nThe command \"mvn -f gson install -DskipTests=true\" failed and exited with 1 during .\r\n``` =||= @JakeWharton  This looks interesting. I am inclined to accept, what do you think? =||= I'm fine with it, yes.\n\nOn Mon, Sep 18, 2017 at 2:52 AM inder123 <notifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/jakewharton> This looks interesting. I\n> am inclined to accept, what do you think?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1142#issuecomment-330140542>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEESTjC8aingVr3qhW30ruwN4O7Asaks5sjhNGgaJpZM4O2pvA>\n> .\n>\n =||= \ud83d\udc4d  =||= ", ["1142", "Add newBuilder() API", "Warren Smith", "naturalwarren", "09/21/17, 01:53:10 AM", "Addresses #1139 \n\n`Gson.newBuilder()` returns `GsonBuilder`\n\nFew changes here:\n- Increases visibility of `Gson` member variables so they can be seen by `GsonBuilder`\n- Adds additional member variables to `Gson` to save state required to transform `Gson` back to `GsonBuilder`", "NaN"], ["Warren Smith", "Reduce visibility of GsonBuilder constructor.", "09/12/17, 12:35:10 AM", "Warren Smith", "8058ab7672509842241dc2a5ac647accc425546b", ["gson/src/main/java/com/google/gson/GsonBuilder.java"], "@@ -110,7 +110,7 @@ public GsonBuilder() {\n    *\n    * @param gson the gson instance whose configuration should by applied to a new GsonBuilder.\n    */\n-  public GsonBuilder(Gson gson) {\n+  GsonBuilder(Gson gson) {\n     this.excluder = gson.excluder;\n     this.fieldNamingPolicy = gson.fieldNamingStrategy;\n     this.instanceCreators.putAll(gson.instanceCreators);, ", 1, 1, "\"modified, \"", 2], 1], ["1144", "GSON deserialize value of JSON property to Null", null, "sidswnt", "08/17/17, 02:12:58 AM", "I have json String userJson = {\"id\" : \"2221\", \"name\" : \"xyz\" }\r\n\r\nI am using following code to deserialize it to User class :\r\n\r\n```\r\nGson gson = new Gson();\r\nUser user  = gson.fromJson(userJson, User.class}\r\n```\r\n\r\nAnd I am getting User class with id : null and name : null.\r\n\r\nCan someone tell me where I am making mistake ?\r", "Works fine for me:\r\n```java\r\npublic class Blah {\r\n  public static void main(String[] args) {\r\n    String json = \"{\\\"id\\\" : \\\"2221\\\", \\\"name\\\" : \\\"xyz\\\" }\";\r\n    User user = new Gson().fromJson(json, User.class);\r\n    System.out.println(user.id);\r\n    System.out.println(user.name);\r\n  }\r\n}\r\n\r\nclass User {\r\n  public final String id;\r\n  public final String name;\r\n\r\n  User(String id, String name) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}\r\n```\r\n```\r\n2221\r\nxyz\r\n```\r\nIf you think you have a bug please provide a failing test case like above. Otherwise for usage questions StackOverflow and the 'gson' tag is your best bet. =||= ", 0], ["1145", "call new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create().toJson exception.[2.8.1]", null, "yuli13244", "08/23/17, 04:58:25 AM", "when a pojo object with null-value field and use \"GsonBuilder().setDateFormat(\"yyyy-MM-dd\")\",will throw exception.\r\n\r\ncode:\r\n//data class\r\nclass Person{\r\n  private Date age;\r\n  //getter setter\r\n}\r\n\r\n//demo\r\nGson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd\").create();\r\nPerson p = new Person(); //age is null\r\nSystem.out.println(gson.toJson(p));\r\n\r\n//exception\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat java.util.Calendar.setTime(Calendar.java:1770)\r\n\tat java.text.SimpleDateFormat.format(SimpleDateFormat.java:943)\r\n\tat java.text.SimpleDateFormat.format(SimpleDateFormat.java:936)\r\n\tat java.text.DateFormat.format(DateFormat.java:345)\r\n\tat com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)\r\n\tat com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)\r\n\tat com.google.gson.Gson.toJson(Gson.java:669)\r\n\tat com.google.gson.Gson.toJson(Gson.java:648)\r\n\tat com.google.gson.Gson.toJson(Gson.java:603)\r\n\tat com.google.gson.Gson.toJson(Gson.java:583)\r\n\r", "@lyubomyr-shaydariv  I get it , thank you. =||= ", 0], ["1146", "fix issue #1107: resolve element type in wildcard collection types", "Andrey Mogilev", "amogilev", "09/22/17, 12:50:42 AM", "This change fixes of detecting element types by method $Gson$Types.getCollectionElementType() when the generic collection type is declared using wildcards. For example, for the collection type \"? extends List&lt;Something&gt;\" it shall extract \"Something\" as the element type. \r\n\r\nThis change fixes issue #1107.\r", "\ud83d\udc4d  =||= ", ["1146", "fix issue #1107: resolve element type in wildcard collection types", "Andrey Mogilev", "amogilev", "09/22/17, 12:50:42 AM", "This change fixes of detecting element types by method $Gson$Types.getCollectionElementType() when the generic collection type is declared using wildcards. For example, for the collection type \"? extends List&lt;Something&gt;\" it shall extract \"Something\" as the element type. \n\nThis change fixes issue #1107.", "NaN"], ["Andrey Mogilev", "fix Codacy warnings", "08/19/17, 09:26:00 AM", "Andrey Mogilev", "4f582bc558db104311c2bd2a1e6b79af4264e833", ["gson/src/test/java/com/google/gson/functional/CollectionTest.java"], "@@ -394,9 +394,9 @@ public void testSetDeserialization() {\n     }\n   }\n \n-  private class BigClass { Map<String, ? extends List<SmallClass>> inBig; }\n+  private class BigClass { private Map<String, ? extends List<SmallClass>> inBig; }\n \n-  private class SmallClass { String inSmall; }\n+  private class SmallClass { private String inSmall; }\n \n   public void testIssue1107() {\n     String json = \"{\\n\" +, ", 2, 2, "\"modified, \"", 4], 1], ["1148", "Kotlin null safety", "Volodymyr Kropyvko", "vkropivko", "09/06/17, 12:17:27 PM", "Hi, \r\nWhen there is a field with a null value, it is written to the notnull field in the Kotlin object. How to make sure that the default value is not overwritten by null", "You would need to write a custom `TypeAdapter` which used Kotlin's reflection library to call the primary constructor and set values via properties. Moshi has an adapter you can port to Gson if you want: https://github.com/square/moshi/blob/master/kotlin/src/main/java/com/squareup/moshi/KotlinJsonAdapter.kt, but we won't be adding one to Gson. =||= Thank you =||= Hi, does anybody know about solution for Gson? I found https://github.com/sargunv/gson-kotlin but it seems to have some flaws with primitive types (see [issue 3](https://github.com/sargunv/gson-kotlin/issues/3)), also, reusing full reflection seems quite heavy. Or is it better to switch to other library? =||= Try https://github.com/ansman/kotshi =||= Hi, just curious what's the reason behind not supporting/planning to support it in Gson? does it require a huge refactoring or something? =||= ", 0], ["1149", "Run Unit and Instrumentation Test in Fastlane with Emulotor", null, "MuthukathiravanMurugasan", "09/06/17, 12:15:58 PM", "How to integrate the instrumentation and unit test in FastLane ", "Please ask usage questions on StackOverflow with the 'gson' tag. =||= ", 0], ["1150", "[FEATURE-REQUEST] Make com.google.gson.Gson non-final", null, "llech", "09/08/17, 02:00:43 PM", "The issue: class com.google.gson.Gson has 'final' classifier. I see no rationale behind it, but very strong rationale against: this makes Gson extremely unfriendly to use in service-oriented architecture.\r\n\r\nFor example, I've tried to export Gson instance as Service in OSGi container and failed to do that, because framework was not able to create proxy for class with 'final' modifier (It's what that modifier is meant for). Of course it's possible to create wrapping interfaces or factories, but it requires creating extra layers and dependencies, which could be easily avoided by removing that classifier. ", "The class is not designed for inheritance is the rationale.\n\nOn Thu, Sep 7, 2017 at 4:18 AM llech <notifications@github.com> wrote:\n\n> The issue: class com.google.gson.Gson has 'final' classifier. I see no\n> rationale behind it, but very strong rationale against: this makes Gson\n> extremely unfriendly to use in service-oriented architecture.\n>\n> For example, I've tried to export Gson instance as Service in OSGi\n> container and failed to do that, because framework was not able to create\n> proxy for class with 'final' modifier (It's what that modifier is meant\n> for). Of course it's possible to create wrapping interfaces or factories,\n> but it requires creating extra layers and dependencies, which could be\n> easily avoided by removing that classifier.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1150>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEESfc068Jl3TlqP6DhOas56BLS-Ewks5sf6btgaJpZM4PPdA0>\n> .\n>\n =||= And what is the rationale behind designing class that way? I've heard claims that the code runs a few percent faster, but at the cost of being incompatibile with any modern Java framework. \r\nIf there were some tests prooving any significant performance impact, maybe they should be re-run under java 8? =||= It has nothing to do with performance. It's a design decision. All classes\nshould be final by default unless they're explicitly designed for\ninheritance.\n\nConsidering Gson's widespread adoption it would seem almost all modern Java\nframeworks (a group in which I would not put OSGi) are doing just fine.\n\nOn Thu, Sep 7, 2017 at 10:01 AM llech <notifications@github.com> wrote:\n\n> And what is the rationale behind designing class that way? I've heard\n> claims that the code runs a few percent faster, but at the cost of being\n> incompatibile with any modern Java framework.\n> If there were some tests prooving any significant performance impact,\n> maybe they should be re-run under java 8?\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1150#issuecomment-327808668>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEeEvntLie-UVbuJ6rnjVJdcNdqYPks5sf_c6gaJpZM4PPdA0>\n> .\n>\n =||= I understand your point of view, but it represents a paradigma, which is no longer valid. The whole development of java in at least last 10 years has gone in opposite direction. \r\nMaking classes final without really good reason is a big anti-pattern because practically any enterprise java framework uses proxies, so any final class that could otherwise be used as a service, for example, is a big pain that must be dealt with wrapper classes. \r\nThat design decisions were made in times before spring, blueprint or CDI have practically monopolized java world, so it's the high time to review them. It would not affect people who do not use such frameworks, all other would profit. =||= Well except the opposite of everything you said is what's true. 10 years\nago people weren't making things final and now we know better. No one from\nthe libraries you list has come asking for non-final types in any of the\nprojects we manage. And you haven't addressed the fact that we're opening\nup the class to inheritance despite it not being designed for it which\nlimits our options in the future.\n\nOn Thu, Sep 7, 2017 at 10:23 AM llech <notifications@github.com> wrote:\n\n> I understand your point of view, but it represents a paradigma, which is\n> no longer valid. The whole development of java in at least last 10 years\n> has gone in opposite direction.\n> Making classes final without really good reason is a big anti-pattern\n> because practically any enterprise java framework uses proxies, so any\n> final class that could otherwise be used as a service, for example, is a\n> big pain that must be dealt with wrapper classes.\n> That design decisions were made in times before spring, blueprint or CDI\n> have practically monopolized java world, so it's the high time to review\n> them. It would not affect people who do not use such frameworks, all other\n> would profit.\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1150#issuecomment-327815305>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEXIpSqQjNRgyfrgZlyi-TZ06fSGaks5sf_x1gaJpZM4PPdA0>\n> .\n>\n =||= I'm very confused by your remark about not addressing the opening up the class to inheritance because it's exactly the starting point of the discussion...  Or you're addressing only a first part of my request, because the second one is exactly the explanation. \r\n\r\nOr should I understand, that you've made a design decision that should prevent directly using Gson as a service in service oriented architecture not possible? Or you consider that every moder framework should be able to remove final modifier runtime? (how would this work in OSGi? the service consumer would get a modified class from registry, but non-modified class from package import...)\r\n\r\nI've created a wrapper class in separate bundle. I have one project extra. I fail to see any benefit of being forced to do that... =||= The starting point was to enable proxies, not inheritance, and they're not\nthe same thing. One is very damaging to our control to compile-time usage\nand the other is a side-effect of a runtime requirement.\n\nNothing about Gson prevents using it in service-oriented architecture\nbecause it's an architecture. The final bit prevents its use directly in\nyour implementation of said architecture because of the choices of that\nimplementation. And now you're trying to leak that implementation's\nrestrictions to all your libraries. This is not adequate justification for\nus to remove the final bit (ignoring the fact you haven't addressed the\ninheritance problem).\n\nYou can investigate a javaagent to remove the final bit at classload time\nto enable proxying. This allows every library to retain the final bit and\nprevent inheritance at compile time but have it removed such that you can\nproxy it at runtime. Libraries like Mockito 2 do this. Otherwise, wrapping\nis a logic approach.\n\nOn Fri, Sep 8, 2017 at 4:58 AM llech <notifications@github.com> wrote:\n\n> I'm very confused by your remark about not addressing the opening up the\n> class to inheritance because it's exactly the starting point of the\n> discussion... Or you're addressing only a first part of my request, because\n> the second one is exactly the explanation.\n>\n> Or should I understand, that you've made a design decision that should\n> prevent directly using Gson as a service in service oriented architecture\n> not possible? Or you consider that every moder framework should be able to\n> remove final modifier runtime? (how would this work in OSGi? the service\n> consumer would get a modified class from registry, but non-modified class\n> from package import...)\n>\n> I've created a wrapper class in separate bundle. I have one project extra.\n> I fail to see any benefit of being forced to do that...\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1150#issuecomment-328045524>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEVAx4SWzMM4MBMByyPYaD5QN_qPeks5sgQGugaJpZM4PPdA0>\n> .\n>\n =||= ", 0], ["1151", "Update fromJson Javadoc.", "Nels Beckman", "nbeckman", "09/18/17, 07:08:23 AM", "For the string-based fromJson() method, mention that the result will be null if the given string is empty.", "NaN", ["1151", "Update fromJson Javadoc.", "Nels Beckman", "nbeckman", "09/18/17, 07:08:23 AM", "For the string-based fromJson() method, mention that the result will be null if the given string is empty.", "NaN"], ["Nels Beckman", "Update fromJson Javadoc.\n\nFor the string-based fromJson() method, mention that the result will be null if the given string is empty.", "09/08/17, 05:02:56 PM", "GitHub", "4fffebc14850a3957063b2e41bfb21c10f647138", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -765,7 +765,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * @param <T> the type of the desired object\n    * @param json the string from which the object is to be deserialized\n    * @param classOfT the class of T\n-   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    * classOfT\n    */, ", 2, 1, "\"modified, \"", 3], 1], ["1152", "java.lang.securityException", null, "kailandrewhamili", "09/09/17, 01:43:50 PM", "Caused by: java.lang.SecurityException: Can not make a java.lang.reflect.Field constructor accessible\r\n\r\nI am experiencing this runtime error when deserializing JSON to Java object.\r\n\r\nThat error does not show up on Android API 17 up to API 21 (API 22 not tested). It show on API 23 and up.", "You should not have a Field in your model. Either move it outside or mark it transient. =||= What do you mean?\r\n\r\nThis is my Model:\r\n\r\n`public class ProductList extends Model {\r\n\r\n    @Column(name=\"productId\")\r\n    public Integer productId;\r\n\r\n    @Column(name=\"productName\")\r\n    public String productName;\r\n\r\n    @Column(name=\"productTypeId\")\r\n    public Integer productTypeId;\r\n\r\n    @Column(name=\"amount\")\r\n    public double amount;` =||= Then it's in Model or the subclass that whatever library you are using is\ngenerating.\n\nOn Sat, Sep 9, 2017, 10:03 AM kailandrewhamili <notifications@github.com>\nwrote:\n\n> What do you mean?\n>\n> This is my Model:\n>\n> `public class ProductList extends Model {\n>\n> @Column(name=\"productId\")\n> public Integer productId;\n>\n> @Column(name=\"productName\")\n> public String productName;\n>\n> @Column(name=\"productTypeId\")\n> public Integer productTypeId;\n>\n> @Column(name=\"amount\")\n> public double amount;`\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1152#issuecomment-328279215>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEX4NLdYH4op-AsxGvnk0MjRLBj7Uks5sgpqrgaJpZM4PR_S8>\n> .\n>\n =||= Can you please check my repository 'SmarAirportApp' i have an assumption that Gson does not work on Nougat and up. =||= Gson is used by tens or maybe hundreds of thousands of apps which run on\nNougat and above. Something is putting a java.lang.reflect.Field into an\nobject that you are passing to Gson. It's probably another library or tool\nwhich is rewriting your classes. Based on your @Column annotation I'll take\na wild guess that it's either Realm or ObjectBox, and you should consult\nthe authors of that library as to the best way to deal with what they're\ndoing in order to use Gson.\n\nOn Sat, Sep 9, 2017 at 8:55 PM kailandrewhamili <notifications@github.com>\nwrote:\n\n> Can you please check my repository 'SmarAirportApp' i have an assumption\n> that Gson does not work on Nougat and up.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1152#issuecomment-328312558>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEeicEhdfd4715AgNQv5m1TrppCsfks5sgzNtgaJpZM4PR_S8>\n> .\n>\n =||= Okay. I'll try to remove those annotations and I'll see if it works. =||= I use Gson together with ActiveAndroid. =||= ", 0], ["1153", "2.8.2 release?", "\u00c9amonn McManus", "eamonnmcmanus", "09/20/17, 02:06:29 AM", "Any chance of a 2.8.2 release? We're running into #1128, which was fixed by https://github.com/google/gson/commit/03a72e752ef68269990f984c9fd613cfd59224bc.", "Let's do it this week. Thanks. =||= Maybe we cut this as 2.9 if #1142 makes it into the release? =||= Done http://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.2/ =||= ", 0], ["1154", "mismatch size of array response if we have comma after last item in array", "Ivan", "ivk1800", "09/15/17, 02:58:26 AM", "example json response: \r\n\r\n> {\r\n>   \"items\": [\r\n>     {\r\n>       \"id\": 1\r\n>     },\r\n>     {\r\n>       \"id\": 2\r\n>     }**,**\r\n>   ]\r\n> }\r\n> \r\n\r\nitems is array. so if we have comma after last item in array, we have issue here:\r\nsize of ArrayList after json parsing via Gson library is 3, but in fact item at index 2 is null.\r\nis it correct? \r\nif we check our example  via online validator(http://json.parser.online.fr/ , https://jsonlint.com/), we will see that our json is incorrect.\r\n\r\nMay be it will be better to throw JsonSyntaxException\r\n\r\nversion gson 2.8.1", "This is the behavior when in lenient mode, which is tragically the Gson default. You can get strict behavior by using `gson.typeAdapter(typeToken).fromJson(gson.newJsonReader(json))` instead of `gson.fromJson(json, typeToken)`. =||= ", 0], ["1155", "Gson Proguard Config ", "Warren Smith", "naturalwarren", "09/15/17, 04:05:08 PM", "The sample proguard config specifies to keep `sun.misc`. This seems really strange since that package ships with the runtime. \r\n\r\nhttps://github.com/google/gson/blob/d9cc7bc60b492664fe9f328d1bab9f9ae873f4d4/examples/android-proguard-example/proguard.cfg#L10\r\n\r\nShould we update the proguard config to use don't warn? This seems to the precedent:\r\n\r\nRxJava: https://github.com/ReactiveX/RxJava/issues/1415\r\nPlayServices: https://github.com/krschultz/android-proguard-snippets/issues/116\r\n\r", "The 'android-proguard-snippets' repo is a tragedy of the commons and should never be used to justify correct rules.\r\n\r\nBut yeah, this should be `-dontwarn`. Want to PR? =||= Will do, thanks Jake. =||= ", 0], ["1156", "gson:2.8.0 proguard issue", null, "phanthoa", "09/15/17, 02:56:01 AM", "File proguard-rules.pro\r\n-keepattributes Signature\r\n\r\n# For using GSON @Expose annotation\r\n-keepattributes *Annotation*\r\n\r\n# Gson specific classes\r\n-keep class sun.misc.Unsafe { *; }\r\n#-keep class com.google.gson.stream.** { *; }\r\n\r\n# Application classes that will be serialized/deserialized over Gson\r\n-keep class com.google.gson.examples.android.model.** { *; }\r\n\r\n# Prevent proguard from stripping interface information from TypeAdapterFactory,\r\n# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\r\n-keep class * implements com.google.gson.TypeAdapterFactory\r\n-keep class * implements com.google.gson.JsonSerializer\r\n-keep class * implements com.google.gson.JsonDeserializer\r", "It's unclear to me what the ask is here. =||= ", 0], ["1157", "problem serializing null Date in version 2.8.1", "David", "chinhub2001", "09/15/17, 01:35:32 PM", "Hello,\r\n\r\nI was using gson 2.8.0 in my project and I had no problem at all, but after updating to 2.8.1 an exception is thrown serializing to json an object which has a null Date field.\r\n\r\nthis is the class code where the problem is:\r\n\r\n```\r\npublic class CollectionAdapterGson implements JsonSerializer<Collection<?>> {\r\n\r\n    @Override\r\n    public JsonElement serialize(Collection<?> src, Type typeOfSrc, JsonSerializationContext context) {\r\n        if (src == null || src.isEmpty()) // exclusion is made here\r\n            return null;\r\n\r\n        JsonArray array = new JsonArray();\r\n\r\n        for (Object child : src) {\r\n            JsonElement element = context.serialize(child);\r\n            array.add(element);\r\n        }\r\n\r\n        return array;\r\n    }\r\n}\r\n```\r\n\r\n\r\nIf the \"child\" object is something like this\r\n```\r\nclass MyClass{\r\n   Date myDate = null;\r\n  ...\r\n}\r\n```\r\n\r\nI've got following exception:\r\n`java.lang.NullPointerException: Attempt to invoke virtual method 'long java.util.Date.getTime()' on a null object reference\r\n                                                                  at java.util.Calendar.setTime(Calendar.java:1195)\r\n                                                                  at java.text.SimpleDateFormat.formatImpl(SimpleDateFormat.java:518)\r\n                                                                  at java.text.SimpleDateFormat.format(SimpleDateFormat.java:820)\r\n                                                                  at java.text.DateFormat.format(DateFormat.java:314)\r\n                                                                  at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)\r\n                                                                  at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)\r\n                                                                  at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n                                                                  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)\r\n                                                                  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)\r\n                                                                  at com.google.gson.Gson.toJson(Gson.java:669)\r\n                                                                  at com.google.gson.Gson.toJsonTree(Gson.java:562)\r\n                                                                  at com.google.gson.Gson.toJsonTree(Gson.java:541)\r\n                                                                  at com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)\r\n                                                                  at com.asdf.services.serialize.CollectionAdapterGson.serialize(CollectionAdapterGson.java:25)`\r\n\r\nAny ideas what's going on?\r\n\r\nThanks!!!", "Dupe of #1096 =||= ", 0], ["1158", "Update proguard rules to not warn on sun.misc package.", "Warren Smith", "naturalwarren", "09/15/17, 04:04:29 PM", "Addresses #1155.", "NaN", ["1158", "Update proguard rules to not warn on sun.misc package.", "Warren Smith", "naturalwarren", "09/15/17, 04:04:29 PM", "Addresses #1155.", "NaN"], ["Warren Smith", "Dont warn on sun.misc package.", "09/15/17, 03:18:32 PM", "Warren Smith", "9f8ace9ac4c56b82eba1bbd8b44f80e042bda7e0", ["examples/android-proguard-example/proguard.cfg"], "@@ -7,7 +7,7 @@\n -keepattributes *Annotation*\n \n # Gson specific classes\n--keep class sun.misc.Unsafe { *; }\n+-dontwarn sun.misc.**\n #-keep class com.google.gson.stream.** { *; }\n \n # Application classes that will be serialized/deserialized over Gson, ", 1, 1, "\"modified, \"", 2], 1], ["1159", "ConcurrentModificationException in CollectionTypeAdapterFactory$Adapter", "Phillip", "Loki-Afro", "09/19/17, 01:15:45 PM", "Hi,\r\naccording to https://groups.google.com/forum/#!topic/google-gson/Vju1HuJJUIE gson is thread safe however I am facing the following exception from time to time with gson 2.8.0\r\n\r\n```\r\n Exception in thread \"Thread-17\" java.util.ConcurrentModificationException\r\n\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)\r\n\tat java.util.ArrayList$Itr.next(ArrayList.java:851)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:96)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)\r\n\tat com.google.gson.Gson.toJson(Gson.java:669)\r\n\tat com.google.gson.Gson.toJson(Gson.java:648)\r\n\tat com.google.gson.Gson.toJson(Gson.java:603)\r\n```", "The Gson object is threadsafe, yes, but serialization of user objects is not. You should either make a defensive copy or use a lock when an object needs serialized but can also be manipulated from other threads concurrently. =||= ", 0], ["1160", "How to add FieldAttributes in JsonDeserializer interface?", "yc", "yc256", "01/26/18, 02:25:58 AM", "    public static Date convertDateFromJson(String json) throws ParseException {\r\n\t\t\tif (json == null || json == \"\") {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (!json.contains(\"Date\")) {\r\n\t\t\t\tSimpleDateFormat dataFormat = new SimpleDateFormat(receiveDateFormat);\r\n\t\t\t\treturn dataFormat.parse(json);\r\n\t\t\t}\r\n\t\t\tjson = json.replace(\"Date\", \"\").replace(\"+0800\", \"\").replace('\\\\',\r\n\t\t\t\t\t' ').replace('/', ' ').replace('(', ' ').replace(')', ' ')\r\n\t\t\t\t\t.trim();\r\n\t\t\treturn new Date(Long.parseLong(json));\r\n\t\t}`\r\nI want custom 'receiveDateFormat' through @interface value.", "NaN", 0], ["1161", "Upgraded plugin versions", "Inderjeet Singh", "inder123", "09/20/17, 01:37:00 AM", "NaN", "NaN", ["1161", "Upgraded plugin versions", "Inderjeet Singh", "inder123", "09/20/17, 01:37:00 AM", "NaN", "NaN"], ["Inderjeet Singh", "Upgraded plugin versions", "09/20/17, 01:16:13 AM", "Inderjeet Singh", "221fbd09b1dcdd2b4a4523e268075b0cdebcd612", ["pom.xml"], "@@ -63,7 +63,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n-          <version>3.0</version>\n+          <version>3.7.0</version>\n           <configuration>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n@@ -72,7 +72,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.3</version>\n+          <version>2.10.4</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -81,7 +81,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.2.0</version>\n+          <version>3.3.0</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>\n@@ -90,12 +90,12 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-release-plugin</artifactId>\n-        <version>2.4.2</version>\n+        <version>2.5.3</version>\n         <dependencies>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9</version>\n+            <version>1.9.5</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 5, 5, "\"modified, \"", 10], 1], ["1162", "Proguard configs", null, "mohammadzzz", "09/23/17, 04:44:18 PM", "Hi. I looked into documents and didn't find anything about proguard. Is there any thing related to Gson to add in our proguard file?\r\n\r\nthanks in advance", "ProGuard rules are under examples/\r\n\r\nhttps://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg =||= ", 0], ["1163", "No user guide section on how to add library using Gradle ", "Talha Hasan Zia", "talhahasanzia", "09/29/17, 10:44:36 PM", "No section in [user guide](https://github.com/google/gson/blob/master/UserGuide.md) to show how we can add this library using gradle.\r\n\r\nAn [answer ](https://stackoverflow.com/questions/29549421/is-there-an-easier-way-to-add-gson-to-my-project)at Stack Overflow discusses that and provides a package link for gradle.\r\n\r\n```\r\ndependencies {\r\n    compile 'com.google.code.gson:gson:2.8.2'\r\n}\r\n```\r\n\r\nShouldnt be this mentioned in the user guides or somewhere for a noob developer like me?\r\n\r\nRegards,\r\nMe.\r", "Good point. Added it to readme\r\nhttps://github.com/google/gson/blob/master/README.md =||= ", 0], ["1164", "I want to parse array but the value in json string is \"\"", "Joy Whale", "Joy-Whale", "09/28/17, 01:49:35 PM", "json:\r\n```\r\n{\r\n  \"user\":[\r\n    {\r\n      \"name\": \"a\",\r\n      \"interest\": [\r\n        \"game\",\r\n        \"music\"\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"b\",\r\n      \"interest\": \"\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nbean:\r\n```\r\nclass User{\r\n  String name;\r\n  List<String> interest;\r\n}\r\n```\r\n\r\nI want parse the json String to User list, but the 'interest' value of 'b' is \"\", so the Gson will not work, how should I do to parse the empty string value as a empty list", "Please ask general usage questions on StackOverflow with the 'gson' tag. This issue tracker is for bug reports and feature requests only. =||= ", 0], ["1165", "Invalid LOC header (bad signature)", null, "pushbit", "09/28/17, 12:57:36 PM", "I'm using Eclipse Neon.3 and the m2e plugin.  When depending on Gson 2.8.2, the `Gson` class cannot be resolved.  If I try to open it in Eclipse (Maven Dependencies > gson-2.8.2.jar > com.google.gson > Gson.class), I get an error, `java.util.zip.ZipException: invalid LOC header (bad signature)`.  Other files, like JsonArray.class, open fine.  Depending on 2.8.1 resolves this.  Just maybe something to watch out for in the next release.", "Seems I just had a corrupt download.  Deleting my `.m2/repository/com/google/code/gson/gson/2.8.2` directory and updating the Maven project resolved it. =||= Hi, i have the same problem, but i dont know how to delete that .m2 file and dont know how to find it. can u help me?\r\n =||= ", 0], ["1166", "User Guide: primitive missing entries in JSON ", "Elliotte Rusty Harold", "elharo", "10/08/17, 05:12:10 PM", "The user guide states, \"While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null.\"\r\n\r\nThis is incomplete. What happens when the missing entry in the JSON is a primitive type such as boolean or int that cannot be null?\r", "Right, those are set to default values. Feel free to send a PR with edits. Thanks =||= I can send a PR but this issue should be reopened until the PR is committed.  =||= ", 0], ["1167", "API report for Gson", "Andrey P.", "lvc", "12/29/17, 07:35:39 PM", "Hi,\r\n\r\nI'd like to share report on API changes and backward binary compatibility for the Gson library with the community: https://abi-laboratory.pro/java/tracker/timeline/gson/\r\n\r\nThe report is generated by the https://github.com/lvc/japi-tracker tool, which I've created recently. The basic https://github.com/lvc/japi-compliance-checker tool verifies changes in all public API methods and classes according to the article https://wiki.eclipse.org/Evolving_Java-based_APIs_2.\r\n\r\nHope it will be helpful for users and maintainers of the library to be aware of past and future API changes.\r\n\r\nThank you.\r\n\r\n![gson-2](https://user-images.githubusercontent.com/1517837/31372734-df0b6ed4-ad9f-11e7-9197-d756235ab961.png)\r\n\r\n![gson-1](https://user-images.githubusercontent.com/1517837/31372735-df277a70-ad9f-11e7-80df-3cf484d7bc43.png)\r", "Good info. Added it to the README.md\r\nThanks. =||= ", 0], ["1168", "Gson change default Boolean Value to false if the field doesn't exist in json", "Faraz Khonsari", "farazbern", "10/11/17, 02:04:44 PM", "I have  model like  this \r\n\r\n  ```\r\n  public class testModel {\r\n    \r\n        public boolean a = true;\r\n        public Test2 test2 = new Test2();\r\n    \r\n        public class Test2 {\r\n            public boolean b = true;\r\n        }\r\n    }\r\n```\r\n\r\nand a  json like this\r\n\r\n  ```\r\n  {\r\n    \"test2\":{}\r\n    }\r\n\r\n```\r\nwhen i parse this json with Gson \r\n\r\n```\r\n    testModel testModel = new Gson().fromJson(\"{ \\\"test2\\\":{}}\", testModel.class);\r\n        Log.e(\"test\", testModel.a + \" \" + testModel.test2.b);\r\n      \r\n```\r\nand the log is:\r\n \r\n\r\n`    E/test: true false `\r\n\r\ntestModel.a is 'true'  but testmodel.test2.b is 'false' \r\nwhy Gson changed the default value of b while b is not exist in json?\r\nwhat is the difference between b and a ?\r\n\r\nis it a Gson bug?\r\ni used 2.8.1 version of Gson\r\n\r\n\r", "TestModel has a no-arg constructor while Test2 implicitly has one that\ntakes an instance of TestModel. Mark Test2 as a static class and it will\nwork.\n\nOn Wed, Oct 11, 2017, 6:34 AM Faraz Khonsari <notifications@github.com>\nwrote:\n\n> I have model like this\n>\n> public class testModel {\n>\n>       public boolean a = true;\n>       public Test2 test2 = new Test2();\n>\n>       public class Test2 {\n>           public boolean b = true;\n>       }\n>   }\n>\n> and a json like this\n>\n> {\n>   \"test2\":{}\n>   }\n>\n>\n> when i parse this json with Gson\n>\n>     testModel testModel = new Gson().fromJson(\"{ \\\"test2\\\":{}}\", testModel.class);\n>         Log.e(\"test\", testModel.a + \" \" + testModel.test2.b);\n>\n>\n> and the log is:\n>\n> E/test: true false\n>\n> testModel.a is 'true' but testmodel.test2.b is 'false'\n> why Gson changed the default value of b while b is not exist in json?\n> what is the difference between b and a?\n>\n> is it a Gson bug?\n> i used 2.8.1 version of Gson\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1168>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEd2zgxqixFQpMmwvRZWARalYrR7Hks5srJm1gaJpZM4P1QcE>\n> .\n>\n =||= @JakeWharton  yes it  solved my problem . thank you for quick answer =||= ", 0], ["1169", "Clarify handling of non-object omitted fields", "Elliotte Rusty Harold", "elharo", "10/28/17, 11:41:26 PM", "fix ##1166\r\n\r\n@inder123 While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\r\n\r\nAlso added some missing periods and corrected one word. ", "Looks like there's a flaky test. Someone with commit rights may need to restart it. =||= Thank you! =||= ", ["1169", "Clarify handling of non-object omitted fields", "Elliotte Rusty Harold", "elharo", "10/28/17, 11:41:26 PM", "fix ##1166\n\n@inder123 While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n\nAlso added some missing periods and corrected one word. ", "NaN"], ["Elliotte Rusty Harold", "Clarify handling of non-object omitted fields\n\nWhile deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.", "10/11/17, 08:14:38 PM", "GitHub", "56b84c242235389c759bf7b8e62569ca18960bb7", ["UserGuide.md"], "@@ -144,14 +144,14 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n \n #### <a name=\"TOC-Finer-Points-with-Objects\"></a>**Finer Points with Objects**\n \n-* It is perfectly fine (and recommended) to use private fields\n+* It is perfectly fine (and recommended) to use private fields.\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n-* This implementation handles nulls correctly\n-* While serializing, a null field is skipped from the output\n-* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null\n-* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization\n-* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization\n+* This implementation handles nulls correctly.\n+* While serializing, a null field is omitted from the output.\n+* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n+* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization.\n+* Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.\n \n ### <a name=\"TOC-Nested-Classes-including-Inner-Classes-\"></a>Nested Classes (including Inner Classes)\n , ", 6, 6, "\"modified, \"", 12], 1], ["1170", "can't analyze \"=\" in the object value", "pinker", "pinker-god", "10/12/17, 08:06:48 PM", "```\r\n String expected = \"{\\\"driver\\\":\\\"com.mysql.jdbc.Driver\\\", \\\"password\\\":\\\"password123456\\\",\\\"url\\\":\\\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\\\", \\\"username\\\":\\\"username123456\\\", \\\"port\\\":\\\"0\\\"}\";\r\n    String actual = new Gson().toJson(result);\r\n    System.out.println(actual);\r\n    System.out.println(expected);\r\n```\r\n**output**\r\n```\r\n{\"driver\":\"com.mysql.jdbc.Driver\",\"password\":\"password123456\",\"url\":\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\\u003dUTF-8\",\"username\":\"username123456\",\"port\":\"0\"}\r\n{\"driver\":\"com.mysql.jdbc.Driver\",\"password\":\"password123456\",\"url\":\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\",\"username\":\"username123456,\"port\":\"0\"}\r\n```\r\nwe can find the value of url is analyse incorrectly and in which \"=\" is parsed \"\\u003d\"\r", "`\\u0036` is the character `6`. If you think you have a bug, please provide a failing test case that reproduces the problem. =||= Of course\r\n```\r\n@Test\r\n  public void test() throws Exception {\r\n    DataSourceConfig result = new DataSourceConfig(\"com.mysql.jdbc.Driver\", \"password123456\", \"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\", \"username123456\", \"0\");\r\n    String expected = \"{\\\"driver\\\":\\\"com.mysql.jdbc.Driver\\\",\\\"password\\\":\\\"password123456\\\",\\\"url\\\":\\\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\\\",\\\"username\\\":\\\"username123456\\\",\\\"port\\\":\\\"0\\\"}\";\r\n    String unexpected = \"{\\\"driver\\\":\\\"com.mysql.jdbc.Driver\\\",\\\"password\\\":\\\"password123456\\\",\\\"url\\\":\\\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\\\\u003dUTF-8\\\",\\\"username\\\":\\\"username123456\\\",\\\"port\\\":\\\"0\\\"}\";\r\n    assertNotEquals(expected, new Gson().toJson(result));\r\n    assertEquals(unexpected, new Gson().toJson(result));\r\n  }\r\n``` =||= What is DataSourceConfig and are you sure that it isn't encoding the string\nyou pass in?\n\nOn Thu, Oct 12, 2017 at 12:08 AM pinker <notifications@github.com> wrote:\n\n> Of course\n>\n> @Test\n>   public void test() throws Exception {\n>     DataSourceConfig result = new DataSourceConfig(\"com.mysql.jdbc.Driver\", \"password123456\", \"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\", \"username123456\", \"0\");\n>     String expected = \"{\\\"driver\\\":\\\"com.mysql.jdbc.Driver\\\",\\\"password\\\":\\\"password123456\\\",\\\"url\\\":\\\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\\\",\\\"username\\\":\\\"username123456\\\",\\\"port\\\":\\\"0\\\"}\";\n>     String unexpected = \"{\\\"driver\\\":\\\"com.mysql.jdbc.Driver\\\",\\\"password\\\":\\\"password123456\\\",\\\"url\\\":\\\"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\\\\u003dUTF-8\\\",\\\"username\\\":\\\"username123456\\\",\\\"port\\\":\\\"0\\\"}\";\n>     assertNotEquals(expected, new Gson().toJson(result));\n>     assertEquals(unexpected, new Gson().toJson(result));\n>   }\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1170#issuecomment-336015258>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZ_lluvG7DIvFHrCHAXYygXRzfz1ks5srZCqgaJpZM4P2bX6>\n> .\n>\n =||= ```\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class DataSourceConfig implements Serializable {\r\n  private static final long serialVersionUID = 3178620210804628886L;\r\n  private String driver;\r\n  private String password;\r\n  private String url;\r\n  private String username;\r\n  private String port;\r\n}\r\n```\r\nand you must add dependency in pom.xml \r\n```\r\n<dependency>\r\n      <groupId>org.projectlombok</groupId>\r\n      <artifactId>lombok</artifactId>\r\n      <version>1.16.10</version>\r\n    </dependency>\r\n```\r\ni'm sure i hope `\"url\": \"jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\"` should be parsed itself , but in which \"=\" parsed \"\\u003d\".\r\n\r\n =||= https://groups.google.com/forum/#!topic/google-gson/JDHUo9DWyyM =||= Yep. That's it. It's existing behavior that we now cannot change. =||= Looks like `.disableHtmlEscaping()` on `GsonBuilder` disables this. =||= thanks! it really can be solved like this. =||= ", 0], ["1172", "Add module-info.java", "hrchu", "hrchu", "12/27/17, 12:41:06 AM", "So that projects depend on this can be published to a public artifact repository.\r\nNote that this is not breaking backward compatibility. All codes except this file can be still compiled in Java 6.", "https://github.com/google/gson/pull/1179\r\n\r\n![resize](https://user-images.githubusercontent.com/24902181/32078727-00475198-ba76-11e7-83f3-f2af7f3ac496.jpeg) =||= Any update on this? :confused:  =||= @hrchu The pull request has now been merged. I suggest closing this as done. \u2705 =||= Is there any plans for when this will be released? =||= Is there going to be a 2.9 or 3.0 release that has a module-info.class file in it? =||= No, there will probably never be a module-info.class. We can merge an automatic module name. =||= Is there something I am missing about modules then? Automatic modules seem like glorified backwards compatibility hacks and maven builds introduce a big fat warning to not publish your module in a public repo if it depends on an automatic module. Unless I am missing something about modules, wouldn't this mean that now project that wants to properly move forward with Java 9+ cannot depend on GSON? =||= ", 0], ["1173", "parse error that parse the 0 to 0-E8 ", "niebin", "nb312", "10/27/17, 03:08:24 PM", "As the title, when I parse the network JSON string to model, the parse error occurs changing 0 to 0-E8.", "Please provide a failing test case that demonstrates your problem.\n\nOn Thu, Oct 19, 2017, 3:23 AM niebin <notifications@github.com> wrote:\n\n> As the title, when I parse the network JSON string to model, the parse\n> error occurs changing 0 to 0-E8.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1173>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEETnAM5OXXgdXYIb8Vs5_RSLrsH7Pks5stvjvgaJpZM4P-zMv>\n> .\n>\n =||= example as this: \r\n{\"age\":0} change to a Java model Person with field age. \r\n`\r\npublic class Person{\r\nprivate String age;\r\npublic void setAge(String age){\r\nthis.age=age;\r\n}\r\npublic String getAge(){\r\n  return this.age;\r\n}\r\n} \r\n` \r\nthen the age person.age have became to \"0-E8\". =||= which version of gson in your case?  i can't see the problem with 2.8.x  @nb312  =||= this is should be closed, I found that this error is about the fast JSON. Sorry about this.  =||= ", 0], ["1175", "Fix README.md grammatical error", "Michael Edward", "mtotowamkwe", "10/20/17, 05:25:36 AM", "NaN", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= I have signed the CLA agreement. =||= I have signed it!\n\nOn 19 October 2017 at 21:06, googlebot <notifications@github.com> wrote:\n\n> Thanks for your pull request. It looks like this may be your first\n> contribution to a Google open source project. Before we can look at your\n> pull request, you'll need to sign a Contributor License Agreement (CLA).\n>\n> \ud83d\udcdd *Please visit https://cla.developers.google.com/\n> <https://cla.developers.google.com/> to sign.*\n>\n> Once you've signed, please reply here (e.g. I signed it!) and we'll\n> verify. Thanks.\n> ------------------------------\n>\n>    - If you've already signed a CLA, it's possible we don't have your\n>    GitHub username or you're using a different email address. Check your\n>    existing CLA data <https://cla.developers.google.com/clas> and verify\n>    that your email is set on your git commits\n>    <https://help.github.com/articles/setting-your-email-in-git/>.\n>    - If your company signed a CLA, they designated a Point of Contact who\n>    decides which employees are authorized to participate. You may need to\n>    contact the Point of Contact for your company and ask to be added to the\n>    group of authorized contributors. If you don't know who your Point of\n>    Contact is, direct the project maintainer to go/cla#troubleshoot.\n>    - In order to pass this check, please resolve this problem and have\n>    the pull request author add another comment and the bot will run again.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1175#issuecomment-338100703>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/APED2zCPr8qU0Kdo50szotkkvkV6E0aSks5suBw_gaJpZM4QAKcx>\n> .\n>\n =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_author_cla --> =||= Issue resolved!\n\nOn 19 October 2017 at 21:54, googlebot <notifications@github.com> wrote:\n\n> We found a Contributor License Agreement for you (the sender of this pull\n> request), but were unable to find agreements for the commit author(s). If\n> you authored these, maybe you used a different email address in the git\n> commits than was used to sign the CLA (login here\n> <https://cla.developers.google.com/> to double check)? If these were\n> authored by someone else, then they will need to sign a CLA as well, and\n> confirm that they're okay with these being contributed to Google.\n> In order to pass this check, please resolve this problem and have the pull\n> request author add another comment and the bot will run again.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1175#issuecomment-338105830>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/APED24PEW0w86i1sF0HY00UNDoAORlo6ks5suCeNgaJpZM4QAKcx>\n> .\n>\n =||= ", ["1175", "Fix README.md grammatical error", "Michael Edward", "mtotowamkwe", "10/20/17, 05:25:36 AM", "NaN", "NaN"], ["michaelmkwelele", "Fix README.md grammatical error", "10/20/17, 03:57:39 AM", "michaelmkwelele", "f473251d83a86b2f60d3b5939dfa585b9bbb69ab", ["README.md"], "@@ -5,9 +5,9 @@\n [![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n-Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of. \n+Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n \n-There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals. \n+There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n \n ### Gson Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n@@ -31,9 +31,9 @@ dependencies {\n   * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n   * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n   * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n-  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also include a comparison of Gson with other Java libraries that can be used for Json conversion\n+  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n \n-Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions. \n+Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions.\n \n ### Gson-related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`, ", 4, 4, "\"modified, \"", 8], 1], ["1176", "Converting a large java object to String containing json format", "Ashok", "coded9", "10/24/17, 10:04:22 AM", "```\r\n               Gson gson = null;\r\n\t\tGsonBuilder gsonBuilder = new GsonBuilder();\r\n\t\tgson = gsonBuilder.serializeNulls().create();\r\n\t\treturn gson.toJson(this);\r\n```\r\nthis refers to a large java object,I get out of memory exception while converting,also our heap size is 1 GB.Any workaround for this ?", "There are overloads of `toJson` which take destination streams that you can write directly to. This saves having to create an intermediate `String` object and will work better on low-memory environments and with extremely large JSON objects. =||= I did use this method in the below mentioned code,but it seems to use more memory compared to (gson.toJson(this))\r\n```\r\nGsonBuilder gsonBuilder = new GsonBuilder();\r\n\t\tgson = gsonBuilder.serializeNulls().create();\r\n\t\t//return gson.toJson(this);\r\n\t\t// OutputStream out = new ByteArrayOutputStream();\r\n\t\t ByteArrayOutputStream outt = new ByteArrayOutputStream();\r\n\t\tJsonWriter writer = new JsonWriter(new OutputStreamWriter(outt, \"UTF-8\"));\r\n        writer.beginArray();\r\n       \r\n            gson.toJson(this, this.getClass(), writer);\r\n        \r\n        writer.endArray();\r\n        writer.close();\r\n``` =||= That still buffers the entire payload in memory as bytes. The stream should\nbe hooked up to your destination such as a file or socket.\n\nOn Tue, Oct 24, 2017, 12:01 PM Ashok Borra <notifications@github.com> wrote:\n\n> I did use this method in the below mentioned code,but it seems to use more\n> memory compared to (gson.toJson(this))\n>\n> GsonBuilder gsonBuilder = new GsonBuilder();\n> \t\tgson = gsonBuilder.serializeNulls().create();\n> \t\t//return gson.toJson(this);\n> \t\t// OutputStream out = new ByteArrayOutputStream();\n> \t\t ByteArrayOutputStream outt = new ByteArrayOutputStream();\n> \t\tJsonWriter writer = new JsonWriter(new OutputStreamWriter(outt, \"UTF-8\"));\n>         writer.beginArray();\n>\n>             gson.toJson(this, this.getClass(), writer);\n>\n>         writer.endArray();\n>         writer.close();\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1176#issuecomment-338953741>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEQS5H8nqjvmcOV36p3IiteTNT6Llks5svcN0gaJpZM4QCsMU>\n> .\n>\n =||= In the end state we need it as a String,what approach do you suggest ? =||= There's no magic fix. You either need a larger heap or a smaller object.\n\nOn Tue, Oct 24, 2017, 1:05 PM Ashok Borra <notifications@github.com> wrote:\n\n> In the end state we need it as a String,what approach do you suggest ?\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1176#issuecomment-338967882>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEWhvmPTTtvQWIUu8O4dWVgcUGRZZks5svdKJgaJpZM4QCsMU>\n> .\n>\n =||= ", 0], ["1179", "Java 9 module", null, "michaelsavich", "12/26/17, 04:28:20 PM", "I've added a module-info.java file. Right now it's disabled by default-- I'm no maven wizard, so I didn't want to mess with the pom more than absolutely necessary. To try compiling the GSON as a jigsaw module, delete `<excludes>**/module-info.java</excludes>` and set java.version to 1.9, then run mvn compile.", "Hey, can someone check what's going on with Travis CI? It seems like everybody's builds are failing\u2026 =||= Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= I signed it!\n\nSent from my Mac\n\n> On Oct 26, 2017, at 5:58 PM, googlebot <notifications@github.com> wrote:\n> \n> Thanks for your pull request. It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n> \n> \ud83d\udcdd Please visit https://cla.developers.google.com/ <https://cla.developers.google.com/> to sign.\n> \n> Once you've signed, please reply here (e.g. I signed it!) and we'll verify. Thanks.\n> \n> If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.\n> If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n> In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub <https://github.com/google/gson/pull/1179#issuecomment-339813192>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AXv6JeyirheQQco7n2iUAAaFUhy4ykk5ks5swQChgaJpZM4QIQGl>.\n> \n\n =||= CLAs look good, thanks!\n\n<!-- ok --> =||= Can Travish be re-run? It looks like the error is with the CI system (JAVA_HOME not set) rather than with this pull request. =||= ", ["1179", "Java 9 module", null, "michaelsavich", "12/26/17, 04:28:20 PM", "I've added a module-info.java file. Right now it's disabled by default-- I'm no maven wizard, so I didn't want to mess with the pom more than absolutely necessary. To try compiling the GSON as a jigsaw module, delete `<excludes>**/module-info.java</excludes>` and set java.version to 1.9, then run mvn compile.", "NaN"], ["michaelsavich", "Exclude module-info.java by default", "10/26/17, 09:32:39 PM", "michaelsavich", "eefb9b5e6c63bc46626082101326155fa53ac1b1", ["pom.xml"], "@@ -65,6 +65,7 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n+            <excludes>**/module-info.java</excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, ", 1, 0, "\"modified, \"", 1], 1], ["1181", "parse error", "zhen", "zhengoogle", "10/30/17, 02:57:12 AM", "{\"mAllOutputFormats\":{\"mKeys\":[32,33,34,35,0,0,0,0,0,0,0],\"mSize\":4,\"mValues\":[1,11,21,21,0,0,0,0,0,0,0]},\"mConfigurations\":[{\"mFormat\":32,\"mHeight\":3456,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":33,\"mHeight\":480,\"mInput\":false,\"mWidth\":640},{\"mFormat\":33,\"mHeight\":240,\"mInput\":false,\"mWidth\":320},{\"mFormat\":33,\"mHeight\":720,\"mInput\":false,\"mWidth\":1280},{\"mFormat\":33,\"mHeight\":1080,\"mInput\":false,\"mWidth\":1920},{\"mFormat\":33,\"mHeight\":2448,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":33,\"mHeight\":3456,\"mInput\":false,\"mWidth\":3456},{\"mFormat\":33,\"mHeight\":3456,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":33,\"mHeight\":1536,\"mInput\":false,\"mWidth\":2048},{\"mFormat\":33,\"mHeight\":1952,\"mInput\":false,\"mWidth\":2592},{\"mFormat\":33,\"mHeight\":1840,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":33,\"mHeight\":2592,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":34,\"mHeight\":3456,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":34,\"mHeight\":2592,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":34,\"mHeight\":3456,\"mInput\":false,\"mWidth\":3456},{\"mFormat\":34,\"mHeight\":2448,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":34,\"mHeight\":1840,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":34,\"mHeight\":1952,\"mInput\":false,\"mWidth\":2592},{\"mFormat\":34,\"mHeight\":1536,\"mInput\":false,\"mWidth\":2048},{\"mFormat\":34,\"mHeight\":1080,\"mInput\":false,\"mWidth\":1920},{\"mFormat\":34,\"mHeight\":1080,\"mInput\":false,\"mWidth\":1440},{\"mFormat\":34,\"mHeight\":960,\"mInput\":false,\"mWidth\":1280},{\"mFormat\":34,\"mHeight\":720,\"mInput\":false,\"mWidth\":1280},{\"mFormat\":34,\"mHeight\":720,\"mInput\":false,\"mWidth\":960},{\"mFormat\":34,\"mHeight\":720,\"mInput\":false,\"mWidth\":720},{\"mFormat\":34,\"mHeight\":414,\"mInput\":false,\"mWidth\":736},{\"mFormat\":34,\"mHeight\":480,\"mInput\":false,\"mWidth\":640},{\"mFormat\":34,\"mHeight\":408,\"mInput\":false,\"mWidth\":544},{\"mFormat\":34,\"mHeight\":400,\"mInput\":false,\"mWidth\":400},{\"mFormat\":34,\"mHeight\":288,\"mInput\":false,\"mWidth\":352},{\"mFormat\":34,\"mHeight\":240,\"mInput\":false,\"mWidth\":320},{\"mFormat\":34,\"mHeight\":144,\"mInput\":false,\"mWidth\":208},{\"mFormat\":34,\"mHeight\":144,\"mInput\":false,\"mWidth\":176},{\"mFormat\":35,\"mHeight\":3456,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":35,\"mHeight\":2592,\"mInput\":false,\"mWidth\":4608},{\"mFormat\":35,\"mHeight\":3456,\"mInput\":false,\"mWidth\":3456},{\"mFormat\":35,\"mHeight\":2448,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":35,\"mHeight\":1840,\"mInput\":false,\"mWidth\":3264},{\"mFormat\":35,\"mHeight\":1952,\"mInput\":false,\"mWidth\":2592},{\"mFormat\":35,\"mHeight\":1536,\"mInput\":false,\"mWidth\":2048},{\"mFormat\":35,\"mHeight\":1080,\"mInput\":false,\"mWidth\":1920},{\"mFormat\":35,\"mHeight\":1080,\"mInput\":false,\"mWidth\":1440},{\"mFormat\":35,\"mHeight\":960,\"mInput\":false,\"mWidth\":1280},{\"mFormat\":35,\"mHeight\":720,\"mInput\":false,\"mWidth\":1280},{\"mFormat\":35,\"mHeight\":720,\"mInput\":false,\"mWidth\":960},{\"mFormat\":35,\"mHeight\":720,\"mInput\":false,\"mWidth\":720},{\"mFormat\":35,\"mHeight\":414,\"mInput\":false,\"mWidth\":736},{\"mFormat\":35,\"mHeight\":480,\"mInput\":false,\"mWidth\":640},{\"mFormat\":35,\"mHeight\":408,\"mInput\":false,\"mWidth\":544},{\"mFormat\":35,\"mHeight\":400,\"mInput\":false,\"mWidth\":400},{\"mFormat\":35,\"mHeight\":288,\"mInput\":false,\"mWidth\":352},{\"mFormat\":35,\"mHeight\":240,\"mInput\":false,\"mWidth\":320},{\"mFormat\":35,\"mHeight\":144,\"mInput\":false,\"mWidth\":208},{\"mFormat\":35,\"mHeight\":144,\"mInput\":false,\"mWidth\":176}],\"mDepthConfigurations\":[],\"mDepthMinFrameDurations\":[],\"mDepthOutputFormats\":{\"mKeys\":[0,0,0,0,0,0,0,0,0,0,0],\"mSize\":0,\"mValues\":[0,0,0,0,0,0,0,0,0,0,0]},\"mDepthStallDurations\":[],\"mHighResOutputFormats\":{\"mKeys\":[0,0,0,0,0,0,0,0,0,0,0],\"mSize\":0,\"mValues\":[0,0,0,0,0,0,0,0,0,0,0]},\"mHighSpeedVideoConfigurations\":[{\"mBatchSizeMax\":1,\"mFpsMax\":120,\"mFpsMin\":30,\"mFpsRange\":{\"mLower\":30,\"mUpper\":120},\"mHeight\":720,\"mSize\":{\"mHeight\":720,\"mWidth\":1280},\"mWidth\":1280},{\"mBatchSizeMax\":1,\"mFpsMax\":120,\"mFpsMin\":120,\"mFpsRange\":{\"mLower\":120,\"mUpper\":120},\"mHeight\":720,\"mSize\":{\"mHeight\":720,\"mWidth\":1280},\"mWidth\":1280}],\"mHighSpeedVideoFpsRangeMap\":{\"[30, 120]\":1,\"[120, 120]\":1},\"mHighSpeedVideoSizeMap\":{\"1280x720\":2},\"mInputFormats\":{\"mKeys\":[0,0,0,0,0,0,0,0,0,0,0],\"mSize\":0,\"mValues\":[0,0,0,0,0,0,0,0,0,0,0]},\"mInputOutputFormatsMap\":{\"mEntry\":[],\"mInputCount\":0},\"mListHighResolution\":false,\"mMinFrameDurations\":[{\"mDurationNs\":33331760,\"mFormat\":32,\"mHeight\":3456,\"mWidth\":4608},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":480,\"mWidth\":640},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":240,\"mWidth\":320},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":720,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":1080,\"mWidth\":1920},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":2448,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":3456,\"mWidth\":3456},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":3456,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":1536,\"mWidth\":2048},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":1952,\"mWidth\":2592},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":1840,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":33,\"mHeight\":2592,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":3456,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":2592,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":3456,\"mWidth\":3456},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":2448,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":1840,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":1952,\"mWidth\":2592},{\"mDurationNs\":50000000,\"mFormat\":34,\"mHeight\":1536,\"mWidth\":2048},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":1080,\"mWidth\":1920},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":1080,\"mWidth\":1440},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":960,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":720,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":720,\"mWidth\":960},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":720,\"mWidth\":720},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":414,\"mWidth\":736},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":480,\"mWidth\":640},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":408,\"mWidth\":544},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":400,\"mWidth\":400},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":288,\"mWidth\":352},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":240,\"mWidth\":320},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":144,\"mWidth\":208},{\"mDurationNs\":33331760,\"mFormat\":34,\"mHeight\":144,\"mWidth\":176},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":3456,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":2592,\"mWidth\":4608},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":3456,\"mWidth\":3456},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":2448,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":1840,\"mWidth\":3264},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":1952,\"mWidth\":2592},{\"mDurationNs\":50000000,\"mFormat\":35,\"mHeight\":1536,\"mWidth\":2048},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":1080,\"mWidth\":1920},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":1080,\"mWidth\":1440},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":960,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":720,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":720,\"mWidth\":960},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":720,\"mWidth\":720},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":414,\"mWidth\":736},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":480,\"mWidth\":640},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":408,\"mWidth\":544},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":400,\"mWidth\":400},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":288,\"mWidth\":352},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":240,\"mWidth\":320},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":144,\"mWidth\":208},{\"mDurationNs\":33331760,\"mFormat\":35,\"mHeight\":144,\"mWidth\":176}],\"mOutputFormats\":{\"mKeys\":[32,33,34,35,0,0,0,0,0,0,0],\"mSize\":4,\"mValues\":[1,11,21,21,0,0,0,0,0,0,0]},\"mStallDurations\":[{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":480,\"mWidth\":640},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":240,\"mWidth\":320},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":720,\"mWidth\":1280},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":1080,\"mWidth\":1920},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":2448,\"mWidth\":3264},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":3456,\"mWidth\":3456},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":3456,\"mWidth\":4608},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":1536,\"mWidth\":2048},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":1952,\"mWidth\":2592},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":1840,\"mWidth\":3264},{\"mDurationNs\":33331760,\"mFormat\":33,\"mHeight\":2592,\"mWidth\":4608}]}\r\n\r\ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 3918 path $.mHighSpeedVideoFpsRangeMap.", "This is a disagreement between your Java model and the supplied JSON, not a bug in the library. =||= ", 0], ["1182", "GSON `fromJson` can't parse JSON without quotes!", null, "SwayChen", "09/28/18, 02:26:26 PM", "For example:\r\n```json\r\n{\r\n   name : Google Company,\r\n   age:19\r\n}\r\n```\r\nThat's OK following codes, I can get correct value:\r\n```java\r\nJsonObject jsonObject = new JsonParser().parse(jsonSt).getAsJsonObject();\r\nString name = jsonObject.get(\"name\").getAsString();\r\nint age = jsonObject.get(\"age\").getAsInt();\r\n```\r\nbut it can't parse into a bean class using `fromJson`\r\n\r\nwill cause Exception like this:\r\n```\r\njava.lang.RuntimeException: \r\ncom.google.gson.JsonSyntaxException: \r\ncom.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 15 path $.name\r\n```", "This is correct behavior.\r\nYour example is not valid JSON.\r\nSee https://www.json.org/ =||= @danorton2 Hi, I know it's a invalid JSON. My puzzle is why I can parse it into a JsonObject and get value correctly, but can't parse it into a bean. :)\r\n\r\nIn my opinion, it should do parse into a bean because it can get value from a JsonObject. =||= @SwayChen Just to be clear, you want `fromJson` try to parse invalid Json into a bean?  Why?  =||= @rafritts @danorton2 \r\n\r\nDon't make misunderstanding :)\r\n\r\nWhat make me puzzle is why JsonObject can parse that invalid JSON at the same time the valid JSON can't be parse into a bean.\r\n\r\nThe point is \"Why JsonObject can recognize that invalid JSON\", I know JSON must be with quotes mark after I meet program. Now JSON without quotes can be parsed. -_- =||= How to reproduce?\r\n```java\r\n        String invalidJson = \"\"\r\n                + \"{\\n\"\r\n                + \"   name : Google Company,\\n\"\r\n                + \"   age:19\\n\"\r\n                + \"}\";\r\n        new JsonParser().parse(invalidJson);\r\n```\r\nThis will (correctly) throw `com.google.gson.stream.MalformedJsonException`... =||= I also have like issue but my case seem like have **space**, please see https://github.com/thinkerou/karate-grpc/issues/3 thanks! =||= > I also have like issue but my case seem like have **space**, please see [thinkerou/karate-grpc#3](https://github.com/thinkerou/karate-grpc/issues/3) thanks!\r\n\r\nThe author have marked as a bug. =||= One follow-up question, still: why does `JsonParser.parse(...)` accept content that does not enclose Object keys in double-quotes? I have seen test code that seems to rely on this behavior, but Javadocs:\r\n\r\nhttps://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/JsonParser.html#parse-java.io.Reader-\r\n\r\ndo not really mention anything about more lenient handling. So it would seem like this SHOULD indicate exception, too. But apparently it does not. Would that part be considered a bug, or perhaps missing documentation if more lenient handling is intentional?\r\n\r\n =||= > One follow-up question, still: why does `JsonParser.parse(...)` accept content that does not enclose Object keys in double-quotes? \r\n\r\nSee #41, #372 and #1208 on current lenient situation.\r\n\r\n =||= Hola, he citado recientemente una duda en: `https://stackoverflow.com/questions/43412261/make-gson-accept-single-objects-where-it-expects-arrays/58943838#58943838`\r\n\r\nCon respecto al mismo problema pero ya encontr\u00e9 el origen del problema, no s\u00e9 c\u00f3mo solucionarlo.\r\n\r\nGracias =||= ", 0], ["1183", "Fix a small typo", null, "chinhodado", "10/31/17, 06:43:25 PM", "The quotes were mismatched", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.\n\n<!-- need_sender_cla --> =||= ", ["1183", "Fix a small typo", null, "chinhodado", "10/31/17, 06:43:25 PM", "The quotes were mismatched", "NaN"], ["Trung Do", "Fix a small typo", "10/31/17, 03:18:45 PM", "GitHub", "0647f73948d17e22e3453327f6c9b6cdab8f41d7", ["gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"], "@@ -266,7 +266,7 @@ public static Date parse(String date, ParsePosition pos) throws ParseException {\n         } catch (IllegalArgumentException e) {\n             fail = e;\n         }\n-        String input = (date == null) ? null : ('\"' + date + \"'\");\n+        String input = (date == null) ? null : ('\"' + date + '\"');\n         String msg = fail.getMessage();\n         if (msg == null || msg.isEmpty()) {\n             msg = \"(\"+fail.getClass().getName()+\")\";, ", 1, 1, "\"modified, \"", 2], 1], ["1184", "Replaced oracle JDK 7 with openJDK 7 to fix broken build.", "Inderjeet Singh", "inder123", "10/31/17, 06:42:50 PM", "NaN", "NaN", ["1184", "Replaced oracle JDK 7 with openJDK 7 to fix broken build.", "Inderjeet Singh", "inder123", "10/31/17, 06:42:50 PM", "NaN", "NaN"], ["Inderjeet Singh", "Replaced oracle JDK 7 with openJDK 7 to fix broken build.", "10/31/17, 06:40:29 PM", "Inderjeet Singh", "23d2056228f6d360ec9cc8ac1d0aad9e6137ee29", [".travis.yml"], "@@ -1,7 +1,7 @@\n language: java\n \n jdk:\n-  - oraclejdk7\n+  - openjdk7\n   - oraclejdk8\n \n install: mvn -f gson install -DskipTests=true, ", 1, 1, "\"modified, \"", 2], 1], ["1187", "Why does registerTypeAdapter for Object not work?", null, "onriv", "11/04/17, 08:33:19 PM", "just tried to custom deserializer for object, and wrote the following code but it dosn't work:\r\n\r\n```\r\nJsonDeserializer<Object> objectJsonDeserializer = new JsonDeserializer<Object>() {\r\n\r\n    @Override\r\n    public Object deserialize(JsonElement json,\r\n                              Type typeOfT,\r\n                              JsonDeserializationContext context) throws JsonParseException {\r\n        // can't reach this statement\r\n        return null;\r\n    }\r\n};\r\ngsonBuilder.registerTypeAdapter(Object.class, objectJsonDeserializer);\r\n```\r\n\r\nand all other deserializers for other types like map, list, and custom class work fine.", "found the reason at\r\n\r\nhttps://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/gson/src/main/java/com/google/gson/Gson.java#L224\r\n\r\nso it seems just impossible to override the builtin deserializer for object.\r\n\r\nBut I want to deserialize decimal as BigDecimal, interger as Long, array as ImmutableList, object as ImmutableMap when wirting something like\r\n\r\n```\r\ngsonBuilder.create().fromJson(\"string\", Object.class);\r\n```\r\n =||= duplicate of #1177. =||= ", 0], ["1190", "Warning with 2.8.2 with Java 9", null, "JThomp2000", "03/22/18, 01:49:01 PM", "Recently changed to java 9 from java 8 and now this warning is popping up\r\n\r\nWARNING: An illegal reflective access operation has occurred\r\nWARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/C:/Users/JThompson/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field java.time.LocalDate.year\r\nWARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\r\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\nWARNING: All illegal access operations will be denied in a future release", "As a temporary fix: add this as a VM option: --add-opens java.base/java.time=gson =||= Does not works for me. It gives me the message:\r\n\r\n> Error: Could not find or load main class java.base.java.time=gson\r\n\r\nAny advice?  =||= @FabianPerl You seem to be reporting an entirely different issue. If you're sure it's related to Gson (and not your development environment), please post a new issue at https://github.com/google/gson/issues =||= @danorton2 Thanks for your fast comment! I should write it a little bit more about my Problem. When I start my project, I get this warnings:\r\n\r\n> WARNING: An illegal reflective access operation has occurred\r\nWARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/...../repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field javafx.beans.property.SimpleStringProperty.bean\r\nWARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\r\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\nWARNING: All illegal access operations will be denied in a future release\r\n\r\nI tried @jfbenckhuijsen suggestion with his temporary fix, but unfortunately I received the message up below.  =||= @FabianPerl You seem to be putting the option in the wrong place.  It should be before `-jar`. Please post the full java command line you are using. =||= @danorton2 \r\n\r\nHere's my command line: \r\n> /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/bin/java\r\n --add-opens java.base/java.time=gson \"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52288:/Applications/IntelliJ IDEA.app/Contents/bin\" -Dfile.encoding=UTF-8 -classpath /Users/FabianPerl/Desktop/Project/thurn-und-taxis/target/classes:/Users/FabianPerl/.m2/repository/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.jar:/Users/FabianPerl/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar:/Users/FabianPerl/.m2/repository/org/jetbrains/annotations/15.0/annotations-15.0.jar de.oceans.tut.Main\r\n\r\n\r\n\r\nand after all\r\n\r\n> WARNING: Unknown module: gson specified to --add-opens\r\nWARNING: An illegal reflective access operation has occurred\r\nWARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/Users/FabianPerl/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field javafx.beans.property.SimpleStringProperty.bean\r\nWARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory\r\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\nWARNING: All illegal access operations will be denied in a future release =||= What is the plan for a permanent fix? Is this a difficult one? =||= is there a plan to fix this for JDK9? =||= No. You should not be serializing types you don't control with reflection as you cannot guarantee their internals are stable. Register a TypeAdpater for platform types and serialize/deserialize them using their public APIs. =||= Thanks Jake, a project I am contributing to was serialising Void. I'll register a TypeAdapter and should be sorted. =||= Yeah unfortunately it's too late to change Gson's default behavior here so it's easy to fall into this trap. Moshi prevents all serialization of things inside `java.*` (and `kotlin.*`, `scala.*`, `android.*`, etc.) for the same reasons unless you explicitly specify a custom adapter.\r\n\r\nYou can register a custom TypeAdapter which logs when types in `java.*` are being requested (ignoring List, Set, etc.) and then just `return null` to let the real one handle it to audit your code bases. And then once you migrate everything away, change that adapter to throw! =||= >You can register a custom TypeAdapter which logs when types in java.* are being requested (ignoring List, Set, etc.) and then just return null to let the real one handle it to audit your code bases. And then once you migrate everything away, change that adapter to throw!\r\n\r\nExcellent idea!\r\n\r\nMy stuff all working now, needed to register a custom `TypeAdapterFactory` to handle fields in serialized objects. =||= ", 0], ["1191", "Use Message instead of GeneratedMessage which is specific to protobuf v2", "Ori Schwartz", "orischwartz", "11/28/17, 02:13:40 AM", "This change allows `ProtoTypeAdapter` to work with both protobuf 2.x and 3.x.\r\n\r\nThe pom currently requires [version 2.6.1](https://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/proto/pom.xml#L65). But because this artifact is not published on Maven central, most users will [copy it into their project](https://github.com/google/gson/issues/690#issuecomment-133768886).\r\n\r\n`Message` is a common superclass of both `GeneratedMessage` and `GeneratedMessageV3` so after this change `ProtoTypeAdapter` can be used with either.\r\n\r\n### Changes\r\n* Use `com.google.protobuf.Message` instead of v2-specific `com.google.protobuf.GeneratedMessage`.\r\n* Throw an exception if adapter is ever called on a subclass of `com.google.protobuf.DynamicMessage`, which was probably the original intent of using `GeneratedMessage`.", "NaN", ["1191", "Use Message instead of GeneratedMessage which is specific to protobuf v2", "Ori Schwartz", "orischwartz", "11/28/17, 02:13:40 AM", "This change allows `ProtoTypeAdapter` to work with both protobuf 2.x and 3.x.\n\nThe pom currently requires [version 2.6.1](https://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/proto/pom.xml#L65). But because this artifact is not published on Maven central, most users will [copy it into their project](https://github.com/google/gson/issues/690#issuecomment-133768886).\n\n`Message` is a common superclass of both `GeneratedMessage` and `GeneratedMessageV3` so after this change `ProtoTypeAdapter` can be used with either.\n\n### Changes\n* Use `com.google.protobuf.Message` instead of v2-specific `com.google.protobuf.GeneratedMessage`.\n* Throw an exception if adapter is ever called on a subclass of `com.google.protobuf.DynamicMessage`, which was probably the original intent of using `GeneratedMessage`.", "NaN"], ["Ori Schwartz", "Use Message instead of GeneratedMessage which is specific to protobuf v2. Message is a common superclass of both GeneratedMessage and GeneratedMessageV3. Also throw an exception to notify caller that DynamicMessage is not supprorted.", "11/15/17, 03:30:19 PM", "Ori Schwartz", "b19ef12e8bf0e0f9a3c0508a3364fa00a8e29d8f", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -34,8 +34,8 @@\n import com.google.protobuf.Descriptors.EnumDescriptor;\n import com.google.protobuf.Descriptors.EnumValueDescriptor;\n import com.google.protobuf.Descriptors.FieldDescriptor;\n+import com.google.protobuf.DynamicMessage;\n import com.google.protobuf.Extension;\n-import com.google.protobuf.GeneratedMessage;\n import com.google.protobuf.Message;\n \n import java.lang.reflect.Field;\n@@ -72,7 +72,7 @@\n  * @author Stanley Wang\n  */\n public class ProtoTypeAdapter\n-    implements JsonSerializer<GeneratedMessage>, JsonDeserializer<GeneratedMessage> {\n+    implements JsonSerializer<Message>, JsonDeserializer<Message> {\n   /**\n    * Determines how enum <u>values</u> should be serialized.\n    */\n@@ -214,7 +214,7 @@ private ProtoTypeAdapter(EnumSerialization enumSerialization,\n   }\n \n   @Override\n-  public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,\n+  public JsonElement serialize(Message src, Type typeOfSrc,\n       JsonSerializationContext context) {\n     JsonObject ret = new JsonObject();\n     final Map<FieldDescriptor, Object> fields = src.getAllFields();\n@@ -247,17 +247,21 @@ public JsonElement serialize(GeneratedMessage src, Type typeOfSrc,\n   }\n \n   @Override\n-  public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n+  public Message deserialize(JsonElement json, Type typeOfT,\n       JsonDeserializationContext context) throws JsonParseException {\n     try {\n       JsonObject jsonObject = json.getAsJsonObject();\n       @SuppressWarnings(\"unchecked\")\n-      Class<? extends GeneratedMessage> protoClass = (Class<? extends GeneratedMessage>) typeOfT;\n+      Class<? extends Message> protoClass = (Class<? extends Message>) typeOfT;\n+\n+      if (DynamicMessage.class.isAssignableFrom(protoClass)) {\n+        throw new IllegalStateException(\"only generated messages are supported\");\n+      }\n \n       try {\n         // Invoke the ProtoClass.newBuilder() method\n-        GeneratedMessage.Builder<?> protoBuilder =\n-            (GeneratedMessage.Builder<?>) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n+        Message.Builder protoBuilder =\n+            (Message.Builder) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n \n         Descriptor protoDescriptor =\n             (Descriptor) getCachedMethod(protoClass, \"getDescriptor\").invoke(null);\n@@ -303,7 +307,7 @@ public GeneratedMessage deserialize(JsonElement json, Type typeOfT,\n             }\n           }\n         }\n-        return (GeneratedMessage) protoBuilder.build();\n+        return (Message) protoBuilder.build();\n       } catch (SecurityException e) {\n         throw new JsonParseException(e);\n       } catch (NoSuchMethodException e) {, ", 12, 8, "\"modified, \"", 20], 1], ["1192", "No documentation on creating java object from arbitrary json", "Philip Rego", "7--", "11/19/17, 05:45:30 AM", "Given some JSON like this. How would I know what object to create so gson can desalinize to it. \r\n\r\nFor example JSON:\r\nhttps://poloniex.com/public?command=returnOrderBook&currencyPair=BTC_LTC\r\n\r\nThis Java works, but List<double[]> doesnt describe the data enough :\r\n```\r\npublic OrderBook(List<double[]> asks, List<double[]> bids, String isFrozen, long seq){\r\n        this.asks = asks;\r\n        this.bids = bids;\r\n        this.isFrozen = isFrozen;\r\n        this.seq = seq;\r\n    }\r\n```\r\nThis didnt work. So how do I describe my data better like this?\r\n```\r\n   public OrderBook(List<Ask> asks, List<Bid> bids, String isFrozen, long seq){\r\n        this.asks = asks;\r\n        this.bids = bids;\r\n        this.isFrozen = isFrozen;\r\n        this.seq = seq;\r\n    }\r\n\r\n    public static final class Ask {\r\n    \tdouble price;\r\n    \tdouble quantity;\r\n    \t\r\n        public Ask(double[] ask){\r\n            this.price = ask[0];\r\n            this.quantity = ask[1];\r\n        }\r\n    }\r\n```", "You'll want to use the [TypeAdapter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/TypeAdapter.java) API.\r\nCheck StackOverflow for countless examples of its usage. =||= Thanks =||= ", 0], ["1194", "Support for ISO 8601 Calendar format", "Saifur Rahman Mohsin", "mohsin", "12/05/17, 12:28:57 AM", "I'm using an ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZ) in one of my Android apps and gson keeps throwing this error:\r\n\r\n```\r\njava.lang.NumberFormatException: For input string: \"2017-11-23 19:30:26.000000\"\r\nat java.lang.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1306)\r\n```\r\n\r\nI used [this](https://stackoverflow.com/a/10621553/997147) to perform the conversions. I realize that the problem lies with the TypeAdapters and one solution might be to write my own custom converter but wouldn't it be better if this library supports it out of the box? I can see that the current adapter is [written here](https://github.com/google/gson/blob/9e44d60b83d667d96150eeff4e3f04cd4f157e9a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L592-L655) and I guess the solution would be to adapt that StackOverflow answer's code into it or using Calendar class' timezone field in to achieve it?", "You specify the ISO-8601 format with a \"T\" separator, but you show an example for a slightly different format, without the \"T\".\r\n\r\nCan you provide the actual JSON string that is failing, with surrounding components, if any? Does it include the quotation marks? (Do not include quotation marks if they are not in the actual input.) =||= I finally figured out the issue. I thought that something was going wrong on my app and then I realized that the server was returning the object json for every successful request and gson was converting it back to the original object format. The server messed up and was returning a non-ISO8601 complaint json output as shown in my initial comment which was the reason the app was crashing. Anyway, I've fixed it now so it solves the issue. My apologies for the trouble and thank you for your time. =||= Does GSON still require the incoming data to be formatted as an object like `{year:2017,month:1,dayOfMonth:13,hourOfDay:2,minute:20,second:23}`. I tried returning the data as an ISO 8601 format string from the server but it gave me a **JsonSyntaxException: Expected BEGIN_OBJECT but was STRING** exception. [Looking at the code](https://github.com/google/gson/blob/9e44d60b83d667d96150eeff4e3f04cd4f157e9a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L592-L655) it appears to be parsing an object of the abovesaid format but wouldn't it be better if it parses a proper ISO 8601 format string by default? I also noticed that there's yet another confusion this introduces i.e. when it deserializes the month needs to be 0-indexed so looks like the ISO 8601 format would solve this issue too. =||= ", 0], ["1196", "Push Android to use gson as the default JSON parser...", null, "zenglian", "11/28/17, 02:04:07 PM", "Push Android team to use gson as default JSON parser...", "We have no control over this and it's not clear as to what you want it to be the default for. =||= currently android use org.json which is apprently not so good as gson. since both both you are googlers, maybe you can contact them to to make gson available on android ootb.  =||= I'll try to get org.json deprecated, but adding Gson to the platform doesn't seem like a good idea to me. =||= ", 0], ["1197", "Getting this issue while using GSON Api", null, "MM00360815", "11/28/17, 11:30:38 PM", "S:Fault \txmlns:ns4=\"http://www.w3.org/2003/05/soap-envelope\">\r\n<faultcode>S:Server</faultcode>\r\n<faultstring>\r\nEJB Exception: : java.lang.StackOverflowError\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)\r\n at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)", "#1128 fixes this. Use Gson 2.8.2. =||= ", 0], ["1198", "Optimised the create() call for Excluder TypeAdapterFactory", "Anirudh Ramanan", "anirudhramanan", "11/30/17, 12:06:09 PM", "excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.\r\n\r\n<img width=\"646\" alt=\"screen shot 2017-11-30 at 2 51 22 pm\" src=\"https://user-images.githubusercontent.com/16556984/33423326-7818ca34-d5de-11e7-97dd-32b101f1d764.png\">\r\n\r\nWith this change, we only check once and return if the class has to be excluded.", "Closing this, breaking test cases. Will raise a new one =||= ", 0], ["1199", "Optimised the create() call for Excluder TypeAdapterFactory", "Anirudh Ramanan", "anirudhramanan", "12/28/17, 12:33:45 AM", "excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.\r\n\r\n<img width=\"646\" alt=\"screen shot 2017-11-30 at 2 51 22 pm\" src=\"https://user-images.githubusercontent.com/16556984/33430061-2b37aa3e-d5f5-11e7-85fb-54882606579e.png\">\r\n\r\nWith this change, we only check once and return if the class has to be excluded.", "@inder123 kindly review this. \r\n\r\nThis has given us good gains as the number of times this gets called is high.  =||= @inder123 Shall I break this into 2 separate PR's ? =||= ", ["1199", "Optimised the create() call for Excluder TypeAdapterFactory", "Anirudh Ramanan", "anirudhramanan", "12/28/17, 12:33:45 AM", "excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.\n\n<img width=\"646\" alt=\"screen shot 2017-11-30 at 2 51 22 pm\" src=\"https://user-images.githubusercontent.com/16556984/33430061-2b37aa3e-d5f5-11e7-85fb-54882606579e.png\">\n\nWith this change, we only check once and return if the class has to be excluded.", "NaN"], ["anirudhramanan", "removed the method, will raise it as a separate PR", "12/07/17, 08:49:01 AM", "anirudhramanan", "d461136c31f29761325b999df20a0724ad17d8d6", ["gson/src/main/java/com/google/gson/GsonBuilder.java", "gson/src/main/java/com/google/gson/internal/Excluder.java"], "@@ -286,17 +286,6 @@ public GsonBuilder disableInnerClassSerialization() {\n     return this;\n   }\n \n-  /**\n-   * Configures Gson to include anonymous and local classes during serialization.\n-   *\n-   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n-   * @since 2.8.2\n-   */\n-  public GsonBuilder enableAnonymousAndLocalClassSerialization() {\n-    excluder = excluder.enableAnonymousAndLocalClassSerialization();\n-    return this;\n-  }\n-\n   /**\n    * Configures Gson to apply a specific serialization policy for {@code Long} and {@code long}\n    * objects., @@ -54,7 +54,6 @@\n   private double version = IGNORE_VERSIONS;\n   private int modifiers = Modifier.TRANSIENT | Modifier.STATIC;\n   private boolean serializeInnerClasses = true;\n-  private boolean serializeAnonymousAndLocalClasses = false;\n   private boolean requireExpose;\n   private List<ExclusionStrategy> serializationStrategies = Collections.emptyList();\n   private List<ExclusionStrategy> deserializationStrategies = Collections.emptyList();\n@@ -88,12 +87,6 @@ public Excluder disableInnerClassSerialization() {\n     return result;\n   }\n \n-  public com.google.gson.internal.Excluder enableAnonymousAndLocalClassSerialization() {\n-    com.google.gson.internal.Excluder result = clone();\n-    result.serializeAnonymousAndLocalClasses = true;\n-    return result;\n-  }\n-\n   public Excluder excludeFieldsWithoutExposeAnnotation() {\n     Excluder result = clone();\n     result.requireExpose = true;\n@@ -180,7 +173,7 @@ public boolean excludeField(Field field, boolean serialize) {\n       return true;\n     }\n \n-    if (!serializeAnonymousAndLocalClasses && isAnonymousOrLocal(field.getType())) {\n+    if (isAnonymousOrLocal(field.getType())) {\n       return true;\n     }\n \n@@ -206,7 +199,7 @@ private boolean excludeClassChecks(Class<?> clazz) {\n           return true;\n       }\n \n-      if (!serializeAnonymousAndLocalClasses && isAnonymousOrLocal(clazz)) {\n+      if (isAnonymousOrLocal(clazz)) {\n           return true;\n       }\n , ", 2, 20, "\"modified, modified, \"", 22], 1], ["1204", "Include maven dependency snippet on README", "Lucas Bleme", "andreybleme", "12/13/17, 03:15:11 AM", "As many java developers are using Maven, would be quite convenient to add to the readme file, the Maven Central dependency snippet. \r\n\r\nIf there's no restriction on doing it, I can create a PR including a new README with the snippet just below the Gradle one.", "Absolutely! Please send a PR =||= Fixed on PR 1205 =||= ", 0], ["1205", "Including Maven snippet on README.md", "Lucas Bleme", "andreybleme", "12/13/17, 02:13:54 AM", "Adding maven dependency to readme file.\r\nFixes issue #1204.\r\n\r\n:white_check_mark:  I have signed the CLA agreement.", "So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*\n\n<!-- need_author_consent --> =||= ", ["1205", "Including Maven snippet on README.md", "Lucas Bleme", "andreybleme", "12/13/17, 02:13:54 AM", "Adding maven dependency to readme file.\nFixes issue #1204.\n\n:white_check_mark:  I have signed the CLA agreement.", "NaN"], ["inder123", "incorporated feedback", "12/13/17, 02:12:31 AM", "GitHub", "f2f7979da2dc24681e371067851563d474735d62", ["README.md"], "@@ -18,15 +18,15 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n \n ### Gson Download and Maven\n   * To use Gson in Android\n-```\n+```gradle\n dependencies {\n     compile 'com.google.code.gson:gson:2.8.2'\n }\n ```\n \n   * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n   * To use Gson with Maven\n-  ```\n+  ```xml\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>, ", 2, 2, "\"modified, \"", 4], 1], ["1206", "Flatten Json Structure when keys and values have the same name", "Kalle Eidhagen", "rythmic", "12/13/17, 05:14:00 PM", "Example:\r\n\r\n```Java\r\nclass A {\r\n private B value = new B(5);\r\n}\r\n\r\nclass B {\r\n  private int value;\r\n  public B(int v) {\r\n    this.value = v;\r\n  }\r\n  \r\n}\r\n\r\nA a = new A();\r\nnew Gson().toJson(a); // returns {value:{value:5}}\r\n```\r\nMaybe there could be a GsonBuilder option to compress the json output to ```{value: 5}``` in such cases. If value would be a collection, the output would be ```{value:[{},{}...]}```", "You can use `@JsonAdapter` on the `B value` field declaration to control how it's serialized. We don't want to bake in options like this because they tend to not be generally applicable. Having an extension mechanism which allows you to control serialization, like `@JsonAdapter`, means we can prevent Gson from becoming more complex than it needs to be. =||= ", 0], ["1207", "How to handle \"null\" JSON fields with custom Deserializer?", "Marko Gajic", "gajicm93", "12/14/17, 09:02:18 PM", "I want to deserialize JsonNull objects as pure Java null? How do I do that, since the only way I can see right now is to do \"instance of\" check on the object whether it's JsonNull or not, and then just ignore it if it is?\r\n\r\nIs there any smarter way for this? I tried digging through your code to see how you handle it, but didn't find anything much useful, you could also just point me to the part of code where you check for existing but \"null\" fields.\r\n\r\nThanks.", "Can you rephrase your question in the context of this code snippet?\r\n```Java\r\n  JsonObject obj;\r\n  ... // populate obj\r\n  if (obj.has(\"myfield\")) {\r\n    JsonElement e = obj.get(\"myfield\");\r\n    if (e.isJsonNull()) {\r\n      // stuff to do if e is null\r\n    } else {\r\n      // stuff to do if e is not null\r\n    }\r\n  } else {\r\n    // stuff to do if \"myfield\" is not present\r\n  }\r\n``` =||= The question is, most simply put, do I have to do \"if (e.isJsonNull())\", or I can just get null value somehow directly from JsonNull object..\r\n\r\nMost specifically, I'd like for e.g. \"getAsString()\" to return null when invoked on JsonNull object instead of throwing exception.\r\n\r\nCan you please tell me where you got this code snippet from? Cause anyway, if this is the way you do it, then there's probably no better way. =||= https://github.com/google/gson/blob/6b20e3aaec0b3280f01c7785b5dd391ab6de9cc7/gson/src/main/java/com/google/gson/JsonElement.java#L192\r\n\r\nI'd just change the default JsonElement implementation above to return null instead of throwing exception.. That would solve my \"problem\" completely.. Would it be a breaking change in any way? =||= Yes, that would be a breaking change, as it changes the functionality and, more generally, the overall concept of the meaning of a null value. =||= You seem to be asking for this snippet to not throw an exception:\r\n```Java\r\nJsonNull.INSTANCE.getAsString();\r\n``` =||= @danorton2 Well yeah you could say it that way too, I would like that snippet to just return null. But if it's not possible, I'll just do an instance of check.. \ud83d\ude03  =||= Alternatively, if you get the field from an object, `get()` will return `null` if the field is not present or `JsonNull.INSTANCE` if the field value is null. =||= Yeah great thanks, I just wanted to check if there's a better way to do this, but will handle it easily \ud83d\ude03  =||= ", 0], ["1210", "Java9 DateFormat changes", "Andrey Mogilev", "amogilev", "01/21/18, 09:06:21 AM", "The default formats used in DateFormat has changes in Java 9. For example:\r\n\r\n- Java8 (and below): \"Jan 1, 1970 12:00:00 AM\"\r\n- Java9: \"Jan 1, 1970, 12:00:00 AM\"\r\n- Java8 (and below): \"Thursday, January 1, 1970 12:00:00 AM UTC\"\r\n- Java9: \"Thursday, January 1, 1970 at 12:00:00 AM Coordinated Universal Time\"\r\n\r\nAs a result, a number of Gson unit tests currently fail when run on Java 9. Additionally, this causes some sort of a backward incompatibility: a date written by Gson in Java 8 cannot be parsed back in Java 9. \r\n\r\nIn order to fix it, I suggest the following changes:\r\n- provide a way for Gson to read default \"old\" formats. As Gson by default uses only US date formats, it is possible;\r\n- change \"write\" unit tests so that they check the results depending on the current Java version. If run on Java 9 or later, expect the new formats to be used; otherwise, expect the \"old\" results", "NaN", 0], ["1211", "fix Java9 DateFormat changes", "Andrey Mogilev", "amogilev", "12/29/17, 07:14:44 PM", "Adopts Gson for Java9 DateFormat changes, as described in issue #1210 ", "When do you plan to release a new version which includes this fix? =||= ", ["1211", "fix Java9 DateFormat changes", "Andrey Mogilev", "amogilev", "12/29/17, 07:14:44 PM", "Adopts Gson for Java9 DateFormat changes, as described in issue #1210 ", "NaN"], ["Andrey Mogilev", "fix Codacy warnings", "12/20/17, 05:36:40 AM", "Andrey Mogilev", "ba732e3a72dbc6d5d78014ba055a4241d31a08a3", ["gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java"], "@@ -56,7 +56,8 @@\n    * The first of them (default US format) is used for serialization as well.\n    */\n   private final List<DateFormat> dateFormats = new ArrayList<DateFormat>();\n-  {\n+\n+  public DateTypeAdapter() {\n     dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US));\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));, ", 2, 1, "\"modified, \"", 3], 1], ["1212", "Dynamic JSON structure", "Denis", "redradist", "12/26/17, 04:29:32 PM", "Hello guys,\r\n\r\nI need to create model with dynamic structure, something like this:\r\n\r\n    class DataInfo {\r\n        @SerializedName(\"status\")\r\n        public String status;\r\n        @SerializedName(\"id\")\r\n        public long id;\r\n        @SerializedName(\"type\")\r\n        public String type;\r\n        @SerializedName(value=\"dynamicData0\",\r\n                        alternate={\"Data\", \"Name\"}) // Depends on requests parameters\r\n        public String dynamicData0;\r\n        @SerializedName(value=\"dynamicData1\",\r\n                        alternate={\"Name\", \"Data\"}) // Depends on requests parameters\r\n        public String dynamicData1;\r\n    }\r\n\r\nThe issue is that **dynamicData0** and **dynamicData1** have dynamic names in json and alternatives does not work because dynamicData0 and dynamicData1 could have similar alternative names like \"Name\" == \"Name\" depending on arguments, but in different requests.\r\nHow to handle such case ? the above model does not compile because the similar alternates in dynamicData0 and dynamicData1.\r\n\r\nFor example, for first request model is:\r\n\r\n    class DataInfo {\r\n        @SerializedName(\"status\")\r\n        public String status;\r\n        @SerializedName(\"id\")\r\n        public long id;\r\n        @SerializedName(\"type\")\r\n        public String type;\r\n        @SerializedName(**\"Name\"**) // Depends on requests parameters\r\n        public String dynamicData0;\r\n        @SerializedName(**\"Data\"**) // Depends on requests parameters\r\n        public String dynamicData1;\r\n    }\r\n\r\nFor second request:\r\n\r\n    class DataInfo {\r\n        @SerializedName(\"status\")\r\n        public String status;\r\n        @SerializedName(\"id\")\r\n        public long id;\r\n        @SerializedName(\"type\")\r\n        public String type;\r\n        @SerializedName(**\"Data\"**) // Depends on requests parameters\r\n        public String dynamicData0;\r\n        @SerializedName(**\"Name\"**) // Depends on requests parameters\r\n        public String dynamicData1;\r\n    }\r\n\r\nIs there a solution for such cases ?", "Write a type adapter for DataInfo? \r\nAlso, please post questions like this on StackOverflow. The GitHub issues is already way too cluttered =||= ", 0], ["1215", "Avoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstance", "Ori Schwartz", "orischwartz", "12/28/17, 03:14:17 AM", "Before this PR, a protobuf message was being built and then discarded for every field.\r\n\r\nUsing the instance returned via `getDefaultInstance()` avoids creating unused objects. ", "NaN", ["1215", "Avoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstance", "Ori Schwartz", "orischwartz", "12/28/17, 03:14:17 AM", "Before this PR, a protobuf message was being built and then discarded for every field.\n\nUsing the instance returned via `getDefaultInstance()` avoids creating unused objects. ", "NaN"], ["Ori Schwartz", "avoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstance", "12/28/17, 01:47:07 AM", "Ori Schwartz", "c91e3270900c835cd11b3f931d33deaba58b943f", ["proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java"], "@@ -263,6 +263,9 @@ public Message deserialize(JsonElement json, Type typeOfT,\n         Message.Builder protoBuilder =\n             (Message.Builder) getCachedMethod(protoClass, \"newBuilder\").invoke(null);\n \n+        Message defaultInstance =\n+            (Message) getCachedMethod(protoClass, \"getDefaultInstance\").invoke(null);\n+\n         Descriptor protoDescriptor =\n             (Descriptor) getCachedMethod(protoClass, \"getDescriptor\").invoke(null);\n         // Call setters on all of the available fields\n@@ -300,8 +303,7 @@ public Message deserialize(JsonElement json, Type typeOfT,\n               fieldValue = context.deserialize(jsonElement, protoArrayFieldType);\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             } else {\n-              Message prototype = protoBuilder.build();\n-              Object field = prototype.getField(fieldDescriptor);\n+              Object field = defaultInstance.getField(fieldDescriptor);\n               fieldValue = context.deserialize(jsonElement, field.getClass());\n               protoBuilder.setField(fieldDescriptor, fieldValue);\n             }, ", 4, 2, "\"modified, \"", 6], 1], ["1216", "JSON-serialization causes \"Illegal reflective access\" warning on JDK 9", null, "emulov", "04/30/18, 09:44:36 PM", "Hi,\r\n\r\nSince upgrading to JDK 9 (Gson v2.8.1), we keep getting warning messages like the following when doing JSON-serialization using Gson: \r\n\r\nWARNING: An illegal reflective access operation has occurred\r\nWARNING: Illegal reflective access by com.google.gson.internal.ConstructorConstructor (./lib/gson-2.8.1.jar) to constructor java.text.NumberFormat()\r\nWARNING: Please consider reporting this to the maintainers of com.google.gson.internal.ConstructorConstructor\r\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\nWARNING: All illegal access operations will be denied in a future release\r\n\r\nIt seems that with the introduction of modularization in Java 9, reflective access is only permitted to classes within the same module. However, Gson apparently accesses classes in the module java.base (in this example java.text.NumberFormat) which causes above warning message (by default, it is only displayed once on the first illegal reflective access). Since illegal access of this form will be prohibited in future releases (probably in Java 10), and because of this annoying warning message, this should be fixed as soon as possible.\r\n\r\nThanks!", "Can you propose a solution, or may be send a PR? Thanks. =||= Don't serialize types in java.*. Write a custom type adapter which converts\nthem to JSON primitives rather than serializing internals of the JDK which\nare not guaranteed across versions.\n\nOn Fri, Dec 29, 2017 at 1:37 PM inder123 <notifications@github.com> wrote:\n\n> Can you propose a solution, or may be send a PR? Thanks.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1216#issuecomment-354483760>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEV4WKeTuQC18xdCNu_oQdjndLgh-ks5tFTFUgaJpZM4RO_XR>\n> .\n>\n =||= @JakeWharton Do we do that somewhere in Gson? If so, we should fix that. =||= Gson allows users to include types from java.* in their models and Gson\nhappily serializes their internal contents. In this case, NumberFormat,\nwhich should never be in your model without a custom serializer to convert\nit to some other representation (like a String).\n\nOn Fri, Dec 29, 2017 at 2:00 PM inder123 <notifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/jakewharton> Do we do that somewhere in\n> Gson? If so, we should fix that.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1216#issuecomment-354486696>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZPdSFPu8N5CTUUTQJesIpr23qJXks5tFTbEgaJpZM4RO_XR>\n> .\n>\n =||= I see. One solution will be to explicitly add type-adapters for each of the java.* classes in Gson. \r\nBut we will only be able to do that for classes up to JDK 6 (since we can't include classes for JDK 7+ given JDK 6 being the minimally supported version).\r\n\r\nYour suggestion to @emulov is right: don't serialize java.* classes without writing an explicit type-adapter.\r\n\r\n@emulov if you do write type adapters for java.* classes (especially JDK 9), feel free to contribute them back in the extras package for the benefit of others.  =||= I would rather see an option to prevent the serialization. Sadly we'll\nnever be able to turn it on by default.\n\nOn Fri, Dec 29, 2017 at 2:08 PM inder123 <notifications@github.com> wrote:\n\n> I see. One solution will be to explicitly add type-adapters for each of\n> the java.* classes in Gson.\n> But we will only be able to do that for classes up to JDK 6 (since we\n> can't include classes for JDK 7+ given JDK 6 being the minimally supported\n> version).\n>\n> Your suggestion to @emulov <https://github.com/emulov> is right: don't\n> serialize java.* classes without writing an explicit type-adapter.\n>\n> @emulov <https://github.com/emulov> if you do write type adapters for\n> java.* classes (especially JDK 9), feel free to contribute them back in the\n> extras package for the benefit of others.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1216#issuecomment-354487723>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEETIMJdeOGqigdOAYwG__qaiB-Q1Kks5tFTizgaJpZM4RO_XR>\n> .\n>\n =||= The current trend for avoiding \"illegal reflective access\" warnings and errors is using Unsafe for setting \"accessible\" flag. See https://github.com/amogilev/j9-reflection-utils for details. \r\nIf you are interested, I can make a pull request with changes similar to https://github.com/amogilev/yagson/commit/471352264e04e6fb97a4c2b2fca80e3915138ba0 =||= @amogilev Yes, that would work. \r\n1. Please don't add a maven dependency to j9-reflection-utils, just copy over the minimal set of classes.\r\n2. Please ensure compatibility with JDk 6 onwards\r\nThanks =||= Thanks for all replies.\r\n\r\n@JakeWharton @inder123 Your are right when you stated that developers should not serialize internal java.* classes. However, I don't think it is a good idea to prevent such serialization in the future for the following reasons:\r\n\r\n- This policy should have been enforced right away from the beginning, when introducing Gson. I am sure that now, many developers already have code serializing internal java.* classes and strictly preventing this in a future version of Gson might break their code (even though you would do this for the greater good). It is the responsibility of the developers who have this practice to keep an eye on the compatibility of their serialized java.* classes and adjustments must be made on their side when java.* classes do in fact change.\r\n\r\n- Also, we use Gson many times to quickly serialize an object in memory to perform some analysis on the data (e. g. using JSON path), or converting it to other formats (e. g. to XML using org.json.XML) without persisting or deserializing the data at all. In such cases, I think it very much makes sense to perform the serialization of java.* classes, just as it was done till now. Strictly preventing in the current state would be counter-productive imo.\r\n\r\n@amogilev @inder123 That seems be a good fix and also guarantees backwards-compatibility and the same semantics Gson had till now. Please let us know when it has been implemented.\r\n\r\nThanks a lot for your effort! =||= @emulov The pull request with the fix is ready, so there is a chance that it will be in the next Gson release.\r\nHowever, I am not quite sure that you example would work with it. At first, `NumberFormat` is an abstract class, so one cannot deserialize to it. Secondly, if your actual instance is `DecimalFormat`, that class cannot be serialized because of multiple fields named `maximumIntegerDigits` (and my fix which supported multiple fields with the same name was rejected recently) =||= @amogilev Thanks for the fix, looking forward to use the new version!\r\n\r\nI understand what you're saying and the mentioned case with NumberFormat actually corresponds to the second use case I mentioned in my last post, so deserialization does never take place. It probably wasn't the best example for triggering the warning message. The object just needs to be serialized to analyze some actual data fields of the class and this worked well without any warning message till now. In general, I was rather referring before to classes like LocalDate, LocalDateTime, etc., which might change in the future (but probably won't) and should be allowed to be serialized and deserialized, at the risk of the developer. In case the classes are changed, deserialization should take an eager approach by eagerly deserializing the matching fields and not initializing non-matching fields. I do think that this is how Gson currently works anyways, but correct me if I'm wrong.\r\n\r\nThanks again! =||= As I said, preventing java.* would be an option and we'd rely on module\nencapsulation to be the slow enforcement.\n\nOn Mon, Jan 1, 2018, 7:25 AM emulov <notifications@github.com> wrote:\n\n> @amogilev <https://github.com/amogilev> Thanks for the fix, looking\n> forward to use the new version!\n>\n> I completely understand what you're saying and the mentioned case with\n> NumberFormat actually corresponds to the second use case I mentioned in my\n> last post, so deserialization does never take place. The object just needs\n> to be serialized to analyze some actual data fields of the class and this\n> worked well without any warning message till now. In general, I was rather\n> referring before to classes like LocalDate, LocalDateTime, etc., which\n> might change in the future (but probably won't) and should be allowed to be\n> serialized and deserialized, at the risk of the developer. In case the\n> classes are changed, deserialization should take an eager approach by just\n> deserializing the matching fields and not initializing non-matching fields.\n> I do think that this is how Gson currently works anyways, but correct me if\n> I'm wrong.\n>\n> Thanks again!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1216#issuecomment-354650720>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEVbHXaP_MslQmyRa6sGIGe120enaks5tGM6cgaJpZM4RO_XR>\n> .\n>\n =||= ", 0], ["1218", "Java 9 support: use Unsafe-based reflection in Java 9+", "Andrey Mogilev", "amogilev", "01/03/18, 07:08:51 PM", "Fixes \"illegal reflective access\" warnings and exceptions, like one in #1216 ", "Thanks for the PR =||= All of these classes should be in `internal`. They're not public API. =||= @inder123 Thanks for the review, I have changed the code according to your comments.\r\n@JakeWharton Do you mean that the code shall be moved to the package 'com.google.gson.internal.reflect'? Guess it makes sense... =||= Thanks for patiently incorporating all the feedback =||= So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*\n\n<!-- need_author_consent --> =||= I think this might be the wrong solution to the problem. Unfortunately, the right solution to this problem is a lot of work.\r\n\r\nInstead of using a bigger, more powerful weapon to read & write platform types, I think Gson should have a new java-platform-typeadapters module.\r\n\r\nWherever Gson\u2019s users are relying on reflection to read+write a platform type like java.util.UUID, we should handwrite a type adapter. That way we avoid getting into an arms race with the JDK maintainers who really don\u2019t want their fields to be reflected upon. =||= ... anyone who wants to use Gson with Java 9 to read+write platform types would need this module. And the Gson-using community would have to built the module to cover as many types as is reasonable. =||= Strongly agree https://github.com/google/gson/issues/1216#issuecomment-354657771. The module system is the opportunity to enforce something which never should have been allowed! =||= @swankjesse Agree with you. We can start on adding some of these type adapters, and build upon it gradually. =||= ", ["1218", "Java 9 support: use Unsafe-based reflection in Java 9+", "Andrey Mogilev", "amogilev", "01/03/18, 07:08:51 PM", "Fixes \"illegal reflective access\" warnings and exceptions, like one in #1216 ", "NaN"], ["inder123", "inlined createReflectionAccessor method", "01/03/18, 06:52:38 PM", "GitHub", "c74fa568b84ee99e6c6dface1d41be8f141ea280", ["gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java"], "@@ -33,7 +33,7 @@\n public abstract class ReflectionAccessor {\n \n   // the singleton instance, use getInstance() to obtain\n-  private static final ReflectionAccessor instance = createReflectionAccessor();\n+  private static final ReflectionAccessor instance = VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n \n   /**\n    * Does the same as {@code ao.setAccessible(true)}, but never throws\n@@ -51,8 +51,4 @@\n   public static ReflectionAccessor getInstance() {\n     return instance;\n   }\n-\n-  private static ReflectionAccessor createReflectionAccessor() {\n-    return VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n-  }\n }, ", 1, 5, "\"modified, \"", 6], 1], ["1220", "can not make a java.lang.reflect.method constructor accessible", null, "danponce", "01/02/18, 08:02:00 PM", "Everything in my code was fine a few days ago till this error started to happened on every conversion I do on the different classes I have. (APi version 24) This is the error stack trace:\r\n\r\n`Fatal Exception: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible\r\n       at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133)\r\n       at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119)\r\n       at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)\r\n       at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:95)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:416)\r\n       at com.google.gson.Gson.fromJson(Gson.java:878)\r\n       at com.google.gson.Gson.fromJson(Gson.java:844)\r\n       at com.google.gson.Gson.fromJson(Gson.java:793)\r\n       at com.moviit.pbbchile_android.sync.ProducerGroupSyncer$DataReceivedHandler.OnSuccess(ProducerGroupSyncer.java:80)\r\n       at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:321)\r\n       at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:309)\r\n       at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:60)\r\n       at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:30)`", "You are trying to serialize a type that has a field whose type is `java.lang.reflect.Method`. This either needs marked `transient` or you need to write a custom type adapter for it. =||= Can you explain a little bit more? It may be because I have a list inside my object? =||= No. One of your objects or or one of the types it extends from has a field\nwhose type is Method.\n\nOn Tue, Jan 2, 2018 at 3:06 PM danponce <notifications@github.com> wrote:\n\n> Can you explain a little bit more? It may be because I have a list inside\n> my object?\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1220#issuecomment-354862712>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEER6VUJKKpF68CvFoM-1uaGKVwMBvks5tGow1gaJpZM4RQ_PO>\n> .\n>\n =||= I'm having this same issue only on Samsung Galazy 8 and up and some Huawei. It runs on most other android phones. Any reason for the inconsistancy on devices? =||= I'm having the same issue on the Samsung device. Could anyone help me with this? =||= You need to use transient on the properties you don't want to serialize in your object. =||= > Everything in my code was fine a few days ago till this error started to happened on every conversion I do on the different classes I have. (APi version 24) This is the error stack trace:\r\n> \r\n> `Fatal Exception: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133) at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119) at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101) at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:95) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.Gson.fromJson(Gson.java:878) at com.google.gson.Gson.fromJson(Gson.java:844) at com.google.gson.Gson.fromJson(Gson.java:793) at com.moviit.pbbchile_android.sync.ProducerGroupSyncer$DataReceivedHandler.OnSuccess(ProducerGroupSyncer.java:80) at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:321) at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:309) at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:60) at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:30)`\r\n\r\nCan you tell me how did you fix it? Please. =||= > I'm having this same issue only on Samsung Galazy 8 and up and some Huawei. It runs on most other android phones. Any reason for the inconsistancy on devices?\r\n\r\nI am having the same issue on a huawei p20. Is there any solution for this? =||= ", 0], ["1222", "Added a check for use of type variable to TypeToken constructor.", "Jorn Vernee", "JornVernee", "09/10/20, 07:54:07 PM", "A pull request that addresses my earlier issue #1219.\r\n\r\nThis adds a check to the protected `TypeToken` constructor that will now throw a runtime exception if the `TypeToken` uses a type variable. So that this design time error produces a more clear error earlier during execution.", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n<!-- ok --> =||= I've used a `RuntimeException`  because `getSuperclassTypeParameter` does the same for missing type parameters. So I think that issue can be ignored?\r\n\r\nI've also made the accessibility of the `usesTypeVariable` method the same as `getSuperclassTypeParameter`. That could also be made `private` not sure what to do there.\r\n\r\nI also haven't added any javadoc yet. I see you are not using javadoc annotations, so I'm not entirely sure  what to do there either. I also haven't added myself as an author in the javadoc yet, not sure if that's ok? Or if it starts at a certain level of contribution.\r\n  \r\n  \r\n   =||= Closing old PR =||= ", 0], ["1223", "TypeAdapterFactory only for serialization / deserialization", "Martin Mlostek", "mlostekk", "01/09/18, 02:26:10 AM", "Is it possible to register a TypeAdapterFactory that is used only for serialization (toJson), not for deserialization('fromJson') or vice versa with the same Gson instance?\r\n  ", "Look up the next adapter for the same type and delegate to it for whichever\nmethod you don't want to change.\n\nOn Mon, Jan 8, 2018, 6:55 AM Martin Mlostek <notifications@github.com>\nwrote:\n\n> Is it possible to register a TypeAdapterFactory that is used only for\n> serialization (toJson), not for deserialization('fromJson') or vice versa?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1223>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEYmVmTT9HAVRlHvH4c25Hv-tLnVXks5tIgIpgaJpZM4RWRQo>\n> .\n>\n =||= ```java\r\npublic final class OnlySerializeOrDeserialize implements TypeAdapterFactory {\r\n  final TypeToken<?> type;\r\n  final boolean serialize;\r\n\r\n  public static TypeAdapterFactory onlySerializeType(TypeToken<?> type) {\r\n    return new OnlySerializeOrDeserialize(type, true);\r\n  }\r\n\r\n  public static TypeAdapterFactory onlyDeserializeType(TypeToken<?> type) {\r\n    return new OnlySerializeOrDeserialize(type, false);\r\n  }\r\n\r\n  OnlySerializeOrDeserialize(TypeToken<?> type, boolean serialize) {\r\n    this.type = type;\r\n    this.serialize = serialize;\r\n  }\r\n\r\n  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n    if (!this.type.equals(type)) {\r\n      return null;\r\n    }\r\n    final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);\r\n    return new TypeAdapter<T>() {\r\n      @Override public void write(JsonWriter out, T value) throws IOException {\r\n        if (!serialize) throw new UnsupportedOperationException(\"Don't serialize \" + type);\r\n        delegate.write(out, value);\r\n      }\r\n\r\n      @Override public T read(JsonReader in) throws IOException {\r\n        if (serialize) throw new UnsupportedOperationException(\"Don't deserialize \" + type);\r\n        return delegate.read(in);\r\n      }\r\n    };\r\n  }\r\n}\r\n```\r\n\r\nSomething like this should work. [Stack Overflow might be able to help.](https://stackoverflow.com/questions/tagged/gson) =||= I think he wants custom behavior for `read` or `write` and then to delegate otherwise. =||= But yes, let's go to StackOverflow for this usage question. =||= ", 0], ["1226", "A collection of strings json turn null", "zhiyuan", "zzy1147", "01/10/18, 02:33:58 PM", "`public static void main(String[] args) {\r\n\t\t List<String> list=new ArrayList<String>() {\r\n\t\t\t{\r\n\t\t\t\tadd(\"1\");\r\n\t\t\t\tadd(\"2\");\r\n\t\t\t\tadd(\"3\");\r\n\t\t\t}\r\n\t\t\r\n\t};\r\n\t\t\r\n\t\tGson gson=new Gson();\r\n                String jsonStr=gson.toJson(list);\r\n\t\tSystem.out.println(json);\r\n\t\t\r\n\t}`\r\nthe jsonStr is null,\r\nWhy is this, thank you\r\n  ", "Don't make an anonymous inner class subtype of ArrayList.\r\nGson has no way to deserialization them. =||= ", 0], ["1227", "illegalAccessError", null, "wangkuiazq", "01/11/18, 10:43:32 PM", "Hi,\r\n When I try to deserialize a List from json string, some time will occur IllgealAccessError. The error code as follow:\r\n\r\n`Exception in thread \"gamePool-2\" java.lang.IllegalAccessError: tried to access class com.jgame.job.net.role.RoleViewDataJob$1 from class com.jgame.job.net.role.RoleViewDataJob`\r\n\r\nAnd my java code as follow:\r\n\r\n`GSONUtils.fromJson(jsonStr,new TypeToken<List<WeaponData>>(){}.getType());`\r\n\r\nAny Idea in gson to handle this kind of situation??", "looks like you have an anonymous inner class within `RoleViewDataJob`. Gson has no way of serializing anonymous inner classes. Consider making it a static or top-level class.\r\n\r\nIf you can provide a minimum failing test case to demonstrate the problem, somebody on [Stack Overflow](stackoverflow.com/questions/tagged/gson) might be able to help. =||= ", 0], ["1228", "How to deserialize this format with ", null, "tksiaokia", "01/14/18, 04:55:30 AM", "{\r\n  \"status\": 0,\r\n  \"result\": true,\r\n  \"accounts\": [{\r\n    \"bank_name\": \"xx\",\r\n    \"id\": 1,\r\n    \"account_id\": \"xxx\"\r\n  }]\r\n}\r\ni Just want the Account Array\r\nOption:\r\n1. Create class ResponseAccount{\r\nint status;\r\nboolean result;\r\nList<Account> accounts;\r\n}\r\nResponseAccount model = new Gson().fromJson(response,ResponseAccount.class);\r\nList<Account> accounts = model.account\r\n\r\n2.\r\nTypedValue typedValue = xxx;\r\nList<Account> accounts = new Gson().fromJson(response.getJsonObject(\"accounts\",typedValue);\r\n\r\nWhat i want is \r\nList<Account> accounts = new Gson().fromJson(response,Account.class);\r\nwhich can ignore the first layer and straight go to \"accounts\"\r\n ", "Please ask generate usage questions on StackOverflow with the 'gson' tag. This issue tracked is for bugs and feature requests only. Thanks. =||= ", 0], ["1231", "Serializer/Deserializer Annotation", "Julian Ostarek", "jlnstrk", "01/16/18, 09:17:09 PM", "I'd like to see the possibility of annotating classes with something like an @Serializer annotation in the following way:\r\n\r\n```java\r\n@Serializer(FooSerializer.class)\r\n@Deserializer(FooDeserializer.class)\r\npublic class Foo {\r\n    ...\r\n}\r\n```\r\n\r\nThis would tell Gson to use an instance of the denoted class (default constructor being a requirement) for (De-)Serialization of the annotated type. \r\nAs we're messing with Gson-specific annotations in our model classes anyway, I feel like this shouldn't be too much of a complication/overhead. Thoughts?", "This already exists. You can use `@JsonAdapter` with a `TypeAdapterFactory`, `TypeAdapter`, `JsonSerializer`, or `JsonDeserializer` to provide custom logic for a type or member. =||= ", 0], ["1232", "Create a GsonBuilder from Gson", "Bojan Tomi\u0107", "kaqqao", "01/17/18, 03:53:45 PM", "I'd like to request a feature that would allow obtaining a `GsonBuilder`instance from an existing `Gson` instance, similar to what Jackson enables via its `ObjectMapper#copy` method.\r\n\r\nThe rationale is that it would allow reusing existing configuration. E.g. frameworks often include a preconfigured `Gson`  instance and this way other libraries using Gson would be able to inherit the same configurations, but still override/add what they need.", "Dupe of #1139 added by #1142. =||= ", 0], ["1237", "Edit MalformedJsonException.java avoid mistake", "montlikadani", "montlikadani", "03/03/18, 02:21:35 PM", "Welcome!\r\nThere would be a problem with **MalformedJsonException.java**. When I start a server, sometimes this error is present:\r\n**I think this is just a mistake I've transcribed.**\r\n> [14:29:10] [Server thread/WARN]:    at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)\r\n> [14:29:10] [Server thread/WARN]:    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n> [14:29:10] [Server thread/WARN]: Caused by: com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 60\r\n> [14:29:10] [Server thread/WARN]: Caused by: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 60\r\n> [14:29:10] [Server thread/WARN]:    ... 18 more", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_sender_cla --> =||= This PR is invalid. =||= ", 0], ["1239", "move module-info.java to the correct location", "Riley Park", "kashike", "12/15/18, 07:04:08 PM", "http://openjdk.java.net/projects/jigsaw/quick-start", "Seems to be already in place:\r\nhttps://github.com/google/gson/commit/5bbc768fa6cd3e8a3a7bebf52b0ac1e4c6e0bd12 =||= ", 0], ["1240", "Unable to add gson library to maven", null, "shruthikakwe", "01/30/18, 10:38:55 PM", "Build fails with this error:\r\n---------------------------------------------------------------------\r\n------------------------------------------------------------------------\r\nBuilding helloworld-web 1.0-SNAPSHOT\r\n------------------------------------------------------------------------\r\nThe POM for com.google.code.gson:gson:jar:2.8.0 is missing, no dependency information available\r\n------------------------------------------------------------------------\r\n\r\nFailed to execute goal on project helloworld-web: Could not resolve dependencies for project com.twitter:helloworld-web:war:1.0-SNAPSHOT: Failure to find com.google.code.gson:gson:jar:2.8.0 in http://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]\r\n\r\nTo see the full stack trace of the errors, re-run Maven with the -e switch.\r\nRe-run Maven using the -X switch to enable full debug logging.\r", "It's definitely there: http://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.0/. This is likely a hiccup with your internet connection. =||= Yes, I can see it there. But when I build my project after adding the jar\nfile I get this error.\n\nCan you give me the pom.xml details for this library?\n\nRegards,\nShruthi\n\nOn Tue, Jan 30, 2018 at 5:39 PM Jake Wharton <notifications@github.com>\nwrote:\n\n> Closed #1240 <https://github.com/google/gson/issues/1240>.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1240#event-1449634179>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AHfk__BgmACYdYJrGLYW6tv6tjEvTd7Nks5tP5oQgaJpZM4RzHxh>\n> .\n>\n =||= They're available at the link above to browse.\n\nOn Tue, Jan 30, 2018 at 5:41 PM shruthikakwe <notifications@github.com>\nwrote:\n\n> Yes, I can see it there. But when I build my project after adding the jar\n> file I get this error.\n>\n> Can you give me the pom.xml details for this library?\n>\n> Regards,\n> Shruthi\n>\n> On Tue, Jan 30, 2018 at 5:39 PM Jake Wharton <notifications@github.com>\n> wrote:\n>\n> > Closed #1240 <https://github.com/google/gson/issues/1240>.\n> >\n> > \u2014\n> > You are receiving this because you authored the thread.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/google/gson/issues/1240#event-1449634179>, or mute\n> > the thread\n> > <\n> https://github.com/notifications/unsubscribe-auth/AHfk__BgmACYdYJrGLYW6tv6tjEvTd7Nks5tP5oQgaJpZM4RzHxh\n> >\n> > .\n> >\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1240#issuecomment-361759547>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEdqkbB4jmpsjFuZRZvGZjdhUMZTKks5tP5qkgaJpZM4RzHxh>\n> .\n>\n =||= ", 0], ["1245", "how to format  two date attributes in one object as different ?", "\u6728\u6728\u5927\u53d4", "HongKing", "02/03/18, 08:29:37 PM", "the class like this:\r\n```\r\nclass User {\r\n  private Date serviceBgn;\r\n  private Date serviceEnd;\r\n  private Date createTime;\r\n}\r\n```\r\nto json string like :\r\n```\r\n{\r\n  serviceBgn : \"2017-10-01\",\r\n  serviceEnd : \"2018-09-30\",\r\n  createTime : \"2017-09-10 10:50:55\",\r\n}\r\n```\r\nI can register a type adapter to deserializer, but I can't serializer. I think can I create an annotations do this like :\r\n```\r\nclass User {\r\n  @DateFormat(\"yyyy-mm-dd\")\r\n  private Date serviceBgn;\r\n\r\n  @DateFormat(\"yyyy-mm-dd\")\r\n  private Date serviceEnd;\r\n\r\n  @DateFormat(\"yyyy-mm-dd hh:mm:ss\")\r\n  private Date createTime;\r\n}\r\n```\r\nbut I try it as failed, how can I do it? It would be better if gson supports custom annotations.", "Please ask general usage questions on StackOverflow. This issue tracker is for bug reports and feature requests only. =||= ", 0], ["1248", "How to convert ArrayListMultimap to json use Gson?", "passionofvc", "passionofvc", "02/05/18, 01:17:41 PM", "I use below code to convert map to json,\r\nhow to resolved my problem?\r\n```\r\nfinal Multimap<String, String> data = ArrayListMultimap.create();\r\ndata.put(\"addr1\", \"20.44\");\r\ndata.put(\"addr2\", \"10.44\");\r\ndata.put(\"addr2\", \"40.44\");\r\nGson gson = new Gson();  \r\nString json = gson.toJson(data.asMap()); \r\nSystem.out.printf( \"JSON: %s\", json.toString() );\r\n```\r\nthe result is\r\n`JSON: {\"addr2\":[\"10.44\",\"40.44\"],\"addr1\":[\"20.44\"]}\r\n`\r\nbut I want the below result[key:value], not [key:list].\r\n`JSON: {\"addr2\":\"10.44\",\"addr2\":\"40.44\",\"addr1\":\"20.44\"}`\r", "You can write a TypeAdapter for this, although the latter is not valid JSON and might be mangled by other tools. If you need assistance please ask on StackOverflow. =||= ", 0], ["1249", "Serialize a HashMap, result is null", "Jiang Yucheng", "fatjyc", "02/05/18, 01:16:41 PM", "the code is\r\n```java\r\nMap map1 = new HashMap() {{\r\n    put(\"a\", \"1\");\r\n    put(\"b\", \"2\");\r\n    put(\"c\", \"3\");\r\n}};\r\n\r\nString json1 = new Gson().toJson(map1);\r\n\r\nMap map2 = new HashMap();\r\nmap2.put(\"a\", \"1\");\r\nmap2.put(\"b\", \"2\");\r\nmap2.put(\"c\", \"3\");\r\n\r\nString json2 = new Gson().toJson(map2);\r\n\r\nSystem.out.println(\"json1 = \" + json1); // null\r\nSystem.out.println(\"json2 = \" + json2); // {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"}\r\nSystem.out.println(\"Is Equals: \" + map1.equals(map2)); // true\r\n```\r\n\r\nthe result is \r\n```\r\njson1 = null\r\njson2 = {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"}\r\nIs Equals: true\r\n```\r\n\r\nWhy the json1 is null ?", "Gson doesn't serialize anonymous classes. Use `Map.of` to create maps, not subclasses. =||= \r\nhttp://www.softwaregeek.net/2012/12/double-brace-initialization-in-java.html\r\n\r\n =||= @JakeWharton @Dhirajpandit  THX =||= ", 0], ["1251", "Gson Version : 2.8.2, java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible", "Amit Siddhpura", "siddhpuraamitr", "02/13/18, 01:35:44 PM", "I am using Gson version 2.8.2\r\n\r\nI have used below code \r\n\r\n```\r\npublic void saveObject(View view){\r\n        SharedPreferences prefs = this.getSharedPreferences(\r\n                \"com.example.app\", Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = prefs.edit();\r\n        Gson gson = new Gson();\r\n        String str = gson.toJson(view, View.class);\r\n        editor.putString(\"text\", str);\r\n        editor.commit();\r\n    }\r\n```\r\nbut I am getting an error like below\r\n\r\n```\r\nProcess: com.example.amitsiddhpura.paperview, PID: 17252\r\n                                                                                     java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.amitsiddhpura.paperview/com.example.amitsiddhpura.paperview.MainActivity}: **java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible**\r\n                                                                                         at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2778)\r\n                                                                                         at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856)\r\n                                                                                         at android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n                                                                                         at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589)\r\n                                                                                         at android.os.Handler.dispatchMessage(Handler.java:106)\r\n                                                                                         at android.os.Looper.loop(Looper.java:164)\r\n                                                                                         at android.app.ActivityThread.main(ActivityThread.java:6494)\r\n                                                                                         at java.lang.reflect.Method.invoke(Native Method)\r\n                                                                                         at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n                                                                                         at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\r\n                                                                                      Caused by: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible\r\n                                                                                         at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:131)\r\n                                                                                         at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:115)\r\n                                                                                         at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)\r\n                                                                                         at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:99)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n                                                                                         at com.google.gson.Gson.toJson(Gson.java:661)\r\n                                                                                         at com.google.gson.Gson.toJson(Gson.java:648)\r\n                                                                                         at com.google.gson.Gson.toJson(Gson.java:603)\r\n                                                                                         at com.example.amitsiddhpura.paperview.MainActivity.saveObject(MainActivity.java:34)\r\n                                                                                         at com.example.amitsiddhpura.paperview.MainActivity.onCreate(MainActivity.java:23)\r\n                                                                                         at android.app.Activity.performCreate(Activity.java:6999)\r\n                                                                                         at android.app.Activity.performCreate(Activity.java:6990)\r\n                                                                                         at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1214)\r\n                                                                                         at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2731)\r\n                                                                                         at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856)\u00a0\r\n                                                                                         at android.app.ActivityThread.-wrap11(Unknown Source:0)\u00a0\r\n                                                                                         at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589)\u00a0\r\n                                                                                         at android.os.Handler.dispatchMessage(Handler.java:106)\u00a0\r\n                                                                                         at android.os.Looper.loop(Looper.java:164)\u00a0\r\n                                                                                         at android.app.ActivityThread.main(ActivityThread.java:6494)\u00a0\r\n                                                                                         at java.lang.reflect.Method.invoke(Native Method)\u00a0\r\n                                                                                         at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\u00a0\r\n                                                                                         at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\u00a0\r\n\r\n\r\n```", "Gson cannot serialize types which have fields of type java.lang.reflect.Method. Either remove the field, mark it as transient, or define a custom TypeAdapter to perform serialization. =||= Open =||= > Gson cannot serialize types which have fields of type java.lang.reflect.Method. Either remove the field, mark it as transient, or define a custom TypeAdapter to perform serialization.\r\n\r\nThis worked for me. The problem is that I used CharSequence instead of String. =||= ", 0], ["1252", "Possible dereference of a null value in JsonWriter.java from static analysis tool.", "Ashish Rana", "ashishrana160796", "02/16/18, 06:14:52 PM", "While doing a static code analysis from CheckerFramework tool, field `stack` might lead to possible null dereference. Here is comparison of suggested code and original code. \r\nCode change suggestion for `push` method when it called from anonymous block. Here is original code:\r\n```\r\n  private void push(int newTop) {\r\n    if (stackSize == stack.length) {\r\n```\r\nSuggested changes based on class instance still being in under-initialization state. Hence, dereferencing  of `stack` can be problematic.\r\nError message :\r\n```\r\nJsonWriter.java:360: error: [dereference.of.nullable] dereference of possibly-null reference stack\r\n    if (stackSize == stack.length) {    // Annotation added from nullness checker analysis.\r\n```\r\nSuggested Changes :\r\n```\r\n  private void push(/*>>>@UnknownInitialization(java.lang.Object.class) JsonWriter this,*/ int newTop) {\r\n    if (stack!=null && stackSize == stack.length) {    // Annotation added from nullness checker analysis.\r\n``` \r\nIf this issue is needed to be considered a `pr` can be made for update.\r\nHere annotated file is also attached in reference to this issue with txt extension.\r\n[JsonWriter.txt](https://github.com/google/gson/files/1727619/JsonWriter.txt)\r\n\r\n\r", "Good  =||= Looks like a bug in the tool. This can never be null. What is its justification? =||= Yes @JakeWharton  your analysis from `pr` comment is right and I have raised an issue for this regarding this problem. Considering a justification for such behavior is this following case :\r\n\r\n@NonNull @UnderInitialization C b; | b | @NonNull\r\n-- | -- | --\r\n\u00a0 | b.f | @MonotonicNonNull\r\n---\r\nWhere b is class instance and f can be stack field. Hence, it gets treated as null type object when under initialization.  \r\nThanks. =||= ", 0], ["1253", "USE GETTER AND SETTER", "android.israel", "dtingz", "02/16/18, 02:25:25 PM", "HI GUYS PLEASE ADD OPTION TO USE IT.\r", "Dupe #232. =||= ", 0], ["1255", "JsonWriter null dereference issue #1252 resolved.", "Ashish Rana", "ashishrana160796", "02/16/18, 02:23:52 PM", "Based on static tool analysis of Issue #1252. ", "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.\n\n---\n\n- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.\n- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= This variable can never be null. It's initialized upon construction and only overwritten with `newStack` which also is never null. This class is not thread safe so there's no issues with cross-thread visibility. =||= ", 0], ["1256", "Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $ ", "Siddarth G", "SiddarthG", "02/17/18, 04:35:47 PM", "Hi onFailure in retrofit is throwing this exception mentioned in title and this happened all of a sudden previously it was working fine,i'm having a real hard time analyzing what has changed that led to this problem,can someone please have a look at this and help me out,\r\n\r\nif the formatting here is not clear, i have posted in stackoverflow\r\n[https://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line](https://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line)\r\n\r\nI have this Json Response coming from server:\r\n\r\n[{ \"disposal_type_category\": { \"category_entry_total\": \"21\" }, \"disposal_types\": [{ \"ID\": \"78\", \"entries\": [{ \"ID\": 2584, \"entry_tally\": \"1\" }, { \"ID\": 2578, \"entry_tally\": \"1\" } ] }, { \"ID\": \"1323\", \"entries\": [{ \"ID\": 2583, \"entry_tally\": \"1\" }, { \"ID\": 2579, \"entry_tally\": \"1\" } ] } ] }, { \"disposal_type_category\": { \"category_entry_total\": \"25.2\" }, \"disposal_types\": [{ \"ID\": \"80\", \"entries\": [] }, { \"ID\": \"84\", \"entries\": [] } ] } ]\r\n\r\nThis is in my ApiClient.java:\r\n\r\npublic static Retrofit getClient() { if (retrofit==null) { Gson gson = new GsonBuilder().setLenient().create(); retrofit = new Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(ScalarsConverterFactory.create()) .addConverterFactory(GsonConverterFactory.create(gson)) .build(); } return retrofit; }\r\n\r\nThis is in ApiInterface.java:\r\n\r\n`Call<List<Disposal>> getCollection(@Header(\"Authorization\") String token);`\r\n\r\nDisposal.java:\r\n\r\npublic class Disposal { @SerializedName(\"disposal_type_category\") @Expose public DisposalTypeCategory disposalTypeCategory; @SerializedName(\"disposal_types\") @Expose public List<DisposalType> disposalTypes = null; }\r\n\r\nDisposalTypeCategory.java:\r\n\r\npublic class DisposalTypeCategory { @SerializedName(\"category_entry_total\") @Expose public String categoryEntryTotal; }\r\n\r\nDisposalType.java:\r\n\r\npublic class DisposalType { @SerializedName(\"ID\") @Expose public String iD; @SerializedName(\"entries\") @Expose public List<Entries> entries = null; }\r\n\r\nEntries.java:\r\n\r\npublic class Entries { @SerializedName(\"ID\") @Expose private int iD; }\r\n\r\nI have set setLineant(true) for Gson because if i remove it i will get malformed json exception, even this issue started recently previously was fine, not sure if its related.\r\nThe issue started after 2-3 new fields were added to API and the base url was changed but still the core remains same.", "StackOverflow is the correct place for this question. It's not a Gson feature or bug. =||= ", 0], ["1260", "Serializing object created by Spring AOP", null, "zenglian", "02/26/18, 04:39:05 AM", "See https://stackoverflow.com/questions/48961551/how-to-make-gson-ignore-the-fields-added-by-spring-aop.\r\n\r\nIn below code, `student` is created via Spring AOP which is a proxy, \r\nWith the below exclusion `toJson(student)` returns \"{}\". Without it it throw exception.\r\n\r\n\r\n```\r\npublic class ExcludeAspects implements ExclusionStrategy {\r\n    @Override\r\n    public boolean shouldSkipField(FieldAttributes f) {\r\n        if(f.getName().startsWith(\"CGLIB$\"))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldSkipClass(Class<?> clazz) {\r\n        return false;\r\n    }\r\n}\r\n\r\n@Data @NoArgsConstructor @AllArgsConstructor\r\npublic class Student {\r\n    private Integer age;\r\n    private String name;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n   Gson gson = new GsonBuilder().setPrettyPrinting().addSerializationExclusionStrategy(new ExcludeAspects()).create();\r\n   ApplicationContext context = new ClassPathXmlApplicationContext(\"aop.xml\");\r\n\r\n   //return \"{}\"\r\n   Student student = (Student) context.getBean(\"student\");\r\n   gson.toJson(student);       \r\n\r\n   //works fine\r\n   Student student2 = new Student(11,\"Zara\");\r\n   gson.toJson(student2);       \r\n}\r\n\r\n<aop:config>\r\n    <aop:aspect id=\"log\" ref=\"logging\">\r\n        <aop:pointcut id=\"selectAll\" expression=\"execution(* com.tutorial.Student.getName(..))\"/>\r\n        <aop:before pointcut-ref=\"selectAll\" method=\"beforeAdvice\"/>\r\n        <aop:after pointcut-ref=\"selectAll\" method=\"afterAdvice\"/>\r\n    </aop:aspect>\r\n</aop:config>\r\n<bean id=\"student\" class=\"com.tutorial.Student\">\r\n    <property name=\"name\"  value=\"Zara\" />\r\n    <property name=\"age\"  value=\"11\"/>\r\n</bean>\r\n```\r\n\r", "It's rare to add aspect to a POJO, closing it. =||= ", 0], ["1263", "return Long instead of Double if number has no dot", null, "zenglian", "03/03/18, 03:19:50 PM", "e.g., \"1.0\" is parsed as Double while \"1\" is parsed as Long.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to `go/cla#troubleshoot`.\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= tests fail =||= ", 0], ["1264", "Parse number to Integer, Long, BigInteger and Double respectively", null, "zenglian", "04/16/18, 10:19:12 AM", "e.g., \"1.0\" and \"1e6\" is parsed as Double,  \"1\" is parsed as int, \"9223372036854775807\" is parsed as long.", "IMHO it requires more logic to be added. Instead of just processing `case NUMBER`, it could be better to introduce new JsonToken parameter, say separate `NUMBER` into `DOUBLE_NUMBER` and `LONG_NUMBER`, and then process more straight. =||= I think it will be better than using Double for all. But I think it's a good idea of `DOUBLE_NUMBER` and `LONG_NUMBER`. =||= \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n<!-- ok --> =||= I do not understand the reason for adding BigInteger, without adding BigDecimal as well... =||= I think Double is able to hold arbitrary big decimal, but Long is limited to MAX_LONG. =||= see #1288 =||= ", 0], ["1265", "Gradle config snippet to use `implementation`", null, "serv-inc", "05/16/18, 01:45:56 PM", "As of https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation, \r\n\r\n> The `compile` configuration still exists but should not be used as it will not offer the guarantees that the `api` and `implementation` configurations provide.\r\n\r\nSee also https://stackoverflow.com/questions/44493378/whats-the-difference-between-implementation-and-compile-in-gradle and https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html.", "Another PR was merged for this. =||= ", 0], ["1266", "Added in Type Adapters to be able to deal with LocalDate and LocalDat\u2026", "Raihaan", "reegz", "09/18/19, 05:35:53 PM", "Added in Type Adapters to be able to deal with serialization and deserialization of LocalDate and LocalDateTime objects.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to `go/cla#troubleshoot`.\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= This will not work on JDK 6 =||= Any update on this, would be an urgent feature. =||= > Any update on this, would be an urgent feature.\r\n\r\nKinda forgot about this. I'll try making the requested fixes asap and resubmit for review. =||= > I signed it!\r\n\r\nI signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_author_cla --> =||= Let's spin into a separate library for JDK 8 type adapters for Gson. =||= Please contribute these in https://github.com/google/gson/tree/master/extras/src =||= > Please contribute these in https://github.com/google/gson/tree/master/extras/src\r\n\r\nBeing new to this - can I get clarification on what you're requesting please?\r\n\r\nDo I need to submit this PR to the referenced repository? =||= @reegz I am suggesting that we provide these as sample type adapters instead of the main Gson distribution.  Our extras directory holds such sample code, so you can move these classes there.\r\n\r\nProbably a better location would be a java8 specific sub-directory where we add providers for Java 8. But that isn't setup yet. =||= ", 0], ["1268", "JsonWriter#jsonValue(String) throws AssertionError", "Miroslav Vasilev", "HaedHutner", "03/19/18, 06:09:55 PM", "Relevant code:\r\n\r\nhttps://github.com/Atherys-Horizons/AtherysCore/blob/master/src/main/java/com/atherys/core/gson/AbstractConfigurateAdapter.java#L39\r\n\r\nWithout getting into the details of it, `logger.info(json)` outputs the proper Json string. However, JsonWriter#jsonValue(String) right after it throws an AssertionError. Here is the relevant error:\r\n\r\n`[19:35:59] [Server thread/INFO] [atheryscore]: Write: {\"ContentVersion\":1,\"ItemType\":\"minecraft:anvil\",\"Count\":1,\"UnsafeDamage\":0,\"UnsafeData\":{\"display\":{\"Name\":\"The Magical Anvil\"}}}\r\n\r\n[19:35:59] [Server thread/ERROR] [Sponge]: Could not pass FMLServerStartedEvent to Plugin{id=atherysquests, name=A'therys Quests, version=1.0.0b, description=A quest plugin written for the A'therys Horizons server., source=D:\\Sponge1122\\Server\\mods\\AtherysQuests-all.jar}\r\njava.lang.AssertionError: null\r\n        at com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36) ~[JsonTreeWriter$1.class:?]\r\n        at java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]\r\n        at java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]\r\n        at java.io.Writer.append(Unknown Source) ~[?:1.8.0_161]\r\n        at com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436) ~[JsonWriter.class:?]\r\n        at com.atherys.core.gson.AbstractConfigurateAdapter.write(AbstractConfigurateAdapter.java:44) ~[AbstractConfigurateAdapter.class:?]\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]\r\n        at com.google.gson.TypeAdapter.toJsonTree(TypeAdapter.java:234) ~[TypeAdapter.class:?]\r\n        at com.atherys.core.utils.RuntimeTypeAdapterFactory$1.write(RuntimeTypeAdapterFactory.java:222) ~[RuntimeTypeAdapterFactory$1.class:?]\r\n        at com.google.gson.TypeAdapter$1.write(TypeAdapter.java:191) ~[TypeAdapter$1.class:?]\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]\r\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[CollectionTypeAdapterFactory$Adapter.class:?]\r\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[CollectionTypeAdapterFactory$Adapter.class:?]\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]\r\n        at com.google.gson.Gson.toJson(Gson.java:669) ~[Gson.class:?]\r\n        at com.google.gson.Gson.toJson(Gson.java:648) ~[Gson.class:?]\r\n        at com.google.gson.Gson.toJson(Gson.java:603) ~[Gson.class:?]\r\n        at com.atherys.quests.AtherysQuests.start(AtherysQuests.java:120) ~[AtherysQuests.class:?]\r\n        at com.atherys.quests.AtherysQuests.onStart(AtherysQuests.java:141) ~[AtherysQuests.class:?]\r\n        at org.spongepowered.common.event.listener.GameStartedServerEventListener_AtherysQuests_onStart5.handle(Unknown Source) ~[?:?]\r\n        at org.spongepowered.common.event.RegisteredListener.handle(RegisteredListener.java:95) ~[RegisteredListener.class:1.12.2-2611-7.1.0-BETA-2970]\r\n        at org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:335) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]\r\n        at org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:368) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]\r\n        at org.spongepowered.common.SpongeImpl.postEvent(SpongeImpl.java:213) [SpongeImpl.class:1.12.2-2611-7.1.0-BETA-2970]\r\n        at org.spongepowered.mod.SpongeMod.onStateEvent(SpongeMod.java:240) [SpongeMod.class:1.12.2-2611-7.1.0-BETA-2970]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]\r\n        at net.minecraftforge.fml.common.LoadController.sendEventToModContainer(LoadController.java:278) [LoadController.class:?]\r\n        at net.minecraftforge.fml.common.LoadController.propogateStateMessage(LoadController.java:256) [LoadController.class:?]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]\r\n        at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]\r\n        at com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]\r\n        at net.minecraftforge.fml.common.LoadController.redirect$onPost$zza000(LoadController.java:560) [LoadController.class:?]\r\n        at net.minecraftforge.fml.common.LoadController.distributeStateMessage(LoadController.java:148) [LoadController.class:?]\r\n        at net.minecraftforge.fml.common.Loader.serverStarted(Loader.java:784) [Loader.class:?]\r\n        at net.minecraftforge.fml.common.FMLCommonHandler.handleServerStarted(FMLCommonHandler.java:301) [FMLCommonHandler.class:?]\r\n        at net.minecraft.server.MinecraftServer.run(MinecraftServer.java:486) [MinecraftServer.class:?]\r\n        at java.lang.Thread.run(Unknown Source) [?:1.8.0_161]`", "Not a Gson-related error. Please ignore. =||= This is in part actually a valid Gson issue, see #1651. In general using `jsonValue(String)` should be avoided if you cannot know for sure that the JsonWriter is not actually a JsonTreeWriter at runtime. =||= ", 0], ["1269", "How to deal with false values instead of object", "Paulo Coutinho", "paulo-coutinho", "03/20/18, 08:57:39 PM", "Hi,\r\n\r\nIm using an old API that come with a false value instead of object. The structure is:\r\n\r\n```\r\n{\r\n    \"customer\": {\r\n          \"subscription\": {  }\r\n     }\r\n}\r\n```\r\n\r\nBut sometime it come:\r\n\r\n```\r\n{\r\n    \"customer\": {\r\n          \"subscription\": false\r\n     }\r\n}\r\n```\r\n\r\nBut gson throw exception because the expected object come as false value.\r\n\r\nThere is any easy way to deal with it?\r\n\r\nThanks for any help.", "You can write a TypeAdapter for this. Please ask this question on StackOverflow. =||= ", 0], ["1270", "String vonvert to Date exception", "Nothingismao", "nothingismao", "03/21/18, 12:53:54 PM", "```\r\n@Test\r\n    public void testDateBug() {\r\n        Gson gson = new GsonBuilder()\r\n            .setDateFormat(\"yyyy-MM-dd HH:mm:ss:SSS\").create();\r\n        try {\r\n            Date\r\n                newDate = gson.fromJson(\"2018-03-21 17:43:32:562\", Date.class);\r\n            System.out.println(newDate);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n```\r\nSystem throw exception when convert \"2018-03-21 17:43:32:562\" to Date by me.\r\n\r\n\r\n```\r\ncom.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $\r\n\tat com.google.gson.Gson.assertFullConsumption(Gson.java:864)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:854)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:802)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:774)\r\n\tat com.alibaba.butterfly.core.invoke.GsonTest.testDateBug(GsonTest.java:33)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\nCaused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $\r\n\tat com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568)\r\n\tat com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1409)\r\n\tat com.google.gson.stream.JsonReader.doPeek(JsonReader.java:542)\r\n\tat com.google.gson.stream.JsonReader.peek(JsonReader.java:425)\r\n\tat com.google.gson.Gson.assertFullConsumption(Gson.java:860)\r\n\t... 26 more\r\n```", "That string is not valid JSON. Perhaps you meant to surround it with quotes? =||= ", 0], ["1271", "Issue with mapping empty array Expected BEGIN_ARRAY but was BEGIN_OBJECT", "Suresh", "SureshSc", "03/22/18, 12:32:58 PM", "Hi \r\n\r\nI have json structure line \r\n\r\n```\r\n { \"data\" : [ {\"name\":\"Suresh\", \"Age\":26}, {\"name\":\"Nat\", \"Age\":27}]\r\n }\r\n```\r\n\r\nwhen i map above JSON with Gson i dont get any exception.\r\n\r\nWhen i parse my response when there is no data (refer below JSON)\r\n\r\n```\r\n { \"data\" : [ ]\r\n }\r\n```\r\ni am getting below exception.\r\n`java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $`\r\n\r\nHow to parse Array of objects when array is empty?", "NaN", 0], ["1276", "Unexpected error when using gson", "Deleted user", "ghost", "04/02/18, 08:57:54 AM", "- I have wrote a JsonWebToken class like below:\r\n` \r\n   public class JsonWebToken {\r\n\r\n     public static class Header{} //with some properties\r\n\r\n     public static class Payload{}//with some properties\r\n\r\n     public static class Crypto{}// with some peroperties\r\n\r\n  }\r\n`\r\nwhen I use **toJson**,everything is ok,\r\nbut when i want to parse the Json String to Object, a error like this occurs:\r\n java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:224)\r\n\r\ncan u give me some instructions?\r\nThanks ", "sorry ,i solved it just now. =||= ", 0], ["1277", "How to solve the problem when i use parameter with Any type?", "Plus", "jiahao-shen", "04/02/18, 12:47:28 PM", "I write a class like this:\r\n```kotlin\r\ndata class SocketResponse(val msg: Int,\r\n                          val info: Any?)\r\n\r\ndata class AddFriendRequest(val fromTelephone: String,\r\n                            val fromUserName: String,\r\n                            val toTelephone: String,\r\n                            val message: String?)\r\n@RunWith(AndroidJUnit4::class)\r\nclass ExampleInstrumentedTest {\r\n    @Test\r\n    fun useAppContext() {\r\n        // Context of the app under test.\r\n        Logger.addLogAdapter(AndroidLogAdapter())\r\n        val text = Gson().toJson(SocketResponse(10, AddFriendRequest(\"123456\", \"sam\", \"435789\", \"\r\nHello World\")))\r\n\r\n        val temp = Gson().fromJson(text, SocketResponse::class.java)\r\n\r\n        val info = temp.info as AddFriendRequest\r\n\r\n    }\r\n\r\n}\r\n```\r\nAndroid Studio tell me the error:java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.sam.letsrun.Model.AddFriendRequest,why Gson cannot deal with the data of \"Any\" type", "Please ask general usage questions on StackOverflow. These issues are for tracking bugs and feature requests only. =||= ", 0], ["1278", "Add FieldNamingPolicy.LOWER_CASE_WITH_DOTS", null, "zenglian", "04/28/18, 01:50:09 AM", "Dot separated property naming is one of the most common field naming policies, used in many products like Spark, hadoop, log4j etc, e.g., `spark.executors.memory`, which is mapped to `sparkExecutorsMemory` as class field name.\r\nThis is very similar to LOWER_CASE_WITH_DASHES, the only difference is using `.` instead of `-`.", "An example\r\n\r\n```\r\n{\r\n  \"monitor.interval\": 120,\r\n  \"monitor.max.retries\": 100,\r\n  \"monitor.emails\": \"\",\r\n  \"server.address\": \"0.0.0.0\",\r\n  \"server.port\": 8091,\r\n  \"server.max.connections\": 10,\r\n  \"jdbc.driver\": \"org.h2.Driver\",\r\n  \"jdbc.url\": \"jdbc:h2:tcp://slc09woc:19092/h2-db\",\r\n  \"jdbc.auth\": {\r\n    \"user\": \"user\",\r\n    \"password\": \"password\"\r\n  }\r\n}\r\n``` =||= ", ["1278", "Add FieldNamingPolicy.LOWER_CASE_WITH_DOTS", null, "zenglian", "04/28/18, 01:50:09 AM", "Dot separated property naming is one of the most common field naming policies, used in many products like Spark, hadoop, log4j etc, e.g., `spark.executors.memory`, which is mapped to `sparkExecutorsMemory` as class field name.\nThis is very similar to LOWER_CASE_WITH_DASHES, the only difference is using `.` instead of `-`.", "NaN"], ["Leon", "add FieldNamingPolicy.LOWER_CASE_WITH_DOTS", "04/02/18, 12:36:36 PM", "Leon", "9884edae51dc7d197b8512476c55c992df0c5c69", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"], "@@ -114,6 +114,29 @@\n     @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n+  },\n+\n+  /**\n+   * Using this naming policy with Gson will modify the Java Field name from its camel cased\n+   * form to a lower case field name where each word is separated by a dot (.).\n+   *\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <ul>\n+   *   <li>someFieldName ---> some.field.name</li>\n+   *   <li>_someFieldName ---> _some.field.name</li>\n+   *   <li>aStringField ---> a.string.field</li>\n+   *   <li>aURL ---> a.u.r.l</li>\n+   * </ul>\n+   * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n+   * expressions. This requires that a field named with dots is always accessed as a quoted\n+   * property like {@code myobject['my.field']}. Accessing it as an object field\n+   * {@code myobject.my.field} will result in an unintended javascript expression.\n+   * @since 2.8\n+   */\n+  LOWER_CASE_WITH_DOTS() {\n+    @Override public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \".\").toLowerCase(Locale.ENGLISH);\n+    }\n   };\n \n   /**, @@ -63,6 +63,14 @@ public void testGsonWithLowerCaseDashPolicySerialization() {\n         + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicySerialization() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    StringWrapper target = new StringWrapper(\"blah\");\n+    assertEquals(\"{\\\"some.constant.string.instance.field\\\":\\\"\"\n+          + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n+  }\n+\n+\n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n     String target = \"{\\\"some-constant-string-instance-field\\\":\\\"someValue\\\"}\";, ", 31, 0, "\"modified, modified, \"", 31], 1], ["1279", "Add custom indent for pretty printing", "Vasyl Franchuk", "WasylF", "06/09/21, 06:17:15 PM", "It would be great if we can specify custom indent while call pretty printing. Currently pretty printing always use 2 spaces for indent. This customization also allows to reduce size of resulting json. \r\nComparison table and code for generating json below:\r\n\r\n| Indent \\ setsCount | 100 | 2000 |\r\n| --- | --- | --- |\r\n| 2 spaces |  99,7 kb |  50,9 MB |\r\n| 1 tab |  79,5 kb | 42,9 MB |\r\n| nothing | 59,3 kb | 34,9 MB |\r\n\r\n\r\n```\r\n        List<Set<Integer>> sets = new ArrayList<Set<Integer>>();\r\n        int setsCount = 2000;\r\n        for (int setN = 0; setN < setsCount; setN++) {\r\n            TreeSet<Integer> set = new TreeSet<Integer>();\r\n            for (int i = 0; i < setsCount; i++) {\r\n                set.add(setN * setsCount + i);\r\n            }\r\n            sets.add(set);\r\n        }\r\n\r\n        String json = gsonManager.getGson().toJson(sets);\r\n\r\n```", "What's the motivation? If you care about size you aren't using pretty printing. =||= My team's project stores some large configuration data in the git repository as JSON. If I don't use pretty option the resulting file contains a single line with the whole JSON, so git couldn't show a difference between different versions. Currently, I use pretty JSON, but in my case, it increases the size of the JSON from 30 - 40 MB up to 100+ MB. Bigger resulting JSON also requires more RAM for converting. So, I suppose it would be cool to have such feature as a custom indent.\r\nAnd the other reason is that war between people using tabs and spaces is endless:) So, it is great to have both options. =||= I agree, if you are appending to an existing Json with either 2, 4 spaces or tab indent, it would be nice to have such a feature. I'm actually suprised there isn't. =||= +1 for configurable indent size\r\n\r\n@JakeWharton , my motivation is being able to compare jsons generated with gson against json files formatted in other tools, in my case IntelliJ Idea.  =||= +1 for configurability! =||= Already implemented in 2.8.7 release. \r\n\r\nClass `com.google.gson.stream.JsonWriter` has `public final void setIndent\u200b(String indent);` which:\r\n\r\n> Sets the indentation string to be repeated for each level of indentation in the encoded document. If `indent.isEmpty()` the encoded document will be compact. Otherwise the encoded document will be more human-readable.\r\n\r\nThis implementation indents with tab and appends final newline:\r\n\r\n\tvoid run(final File file, final JsonElement element) {\r\n\t\tfinal Gson gsonPrettyPrinting = new GsonBuilder().setPrettyPrinting().create();\r\n\t\ttry (final PrintWriter pWriter = new PrintWriter(file)) {\r\n\t\t\tfinal JsonWriter jWriter = gsonPrettyPrinting.newJsonWriter(pWriter);\r\n\t\t\tjWriter.setIndent(\"\\t\");\r\n\t\t\tgsonPrettyPrinting.toJson(element, jWriter);\r\n\t\t\tpWriter.println();\r\n\t\t} catch (final IOException e) {\r\n\t\t}\r\n\t}\r\n\r\nBest regards! =||= I believe @Conrad-T-Pino is right that this feature has been implemented, so the issue can be closed. =||= Untested `JasonElement` to `String` case:\r\n\r\n\tString run(final JsonElement element) {\r\n\t\tfinal Gson gsonPrettyPrinting = new GsonBuilder().setPrettyPrinting().create();\r\n\t\ttry (final StringWriter sWriter = new StringWriter(file)) {\r\n\t\t\tfinal JsonWriter jWriter = gsonPrettyPrinting.newJsonWriter(sWriter);\r\n\t\t\tjWriter.setIndent(\"\\t\");\r\n\t\t\tgsonPrettyPrinting.toJson(element, jWriter);\r\n\t\t\tsWriter.write(System.lineSeparator());\r\n\t\t\treturn sWriter.toString();\r\n\t\t} catch (final IOException e) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\nBest regards. =||= ", 0], ["1280", "Add custom indent for pretty printing #1279", "Vasyl Franchuk", "WasylF", "10/04/19, 08:31:54 PM", "Implementation for issue #1279 ", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n<!-- ok --> =||= I think this is a pretty useful feature to have in `GsonBuilder`. By the way, did you consider something like `.setPrettyPrintingByTabs(int count)` and `.setPrettyPrintingBySpaces(int count)` rather than allowing a user to specify an arbitrary indent string? I know that `JsonWriter` allows arbitrary indent strings, but it looks more of a design issue allowing to emit illegal JSON. Your thoughts? =||= @lyubomyr-shaydariv, Thanks for your review! Your proposal looks good. I could implement it. But what about just add check for indent string? smth like:\r\n\r\n```\r\n    if (indent != null && !indent.matches(\"\\\\s*\")) {\r\n        throw new IllegalArgumentException(\"Indent could contains ONLY whitespaces\");\r\n    }\r\n\r\n```\r\n =||= @WslF The `\\s` pattern also accepts CR, LF, FF and VT. I hardly imagine any of these as an indent character, so the `matches` can be improved:\r\n\r\n* the `^(?: *|\\t*)$` is more strict and it does not allow a mixture of spaces and tabs (e.g. `\\t \\t`);\r\n* extracting the regex to a static field of `java.util.regex.Pattern` might slightly increase the performance having the regex already-compiled and ready to use).\r\n\r\nBut if I'd design a new API, I'd probably would go with methods that do not allow to add characters other than ` ` and `\\t`, but accept non-negative `count`. Additionally, checking for a non-negative value, `count < 0`, is just cheaper than matching against the pattern: I saw a lot of cases at StackOverflow where people create a new `GsonBuilder` every time they need it even if the `GsonBuilder` requires no dynamic arguments.\r\n\r\nHowever, my idea has at lease on disadvantage and would complicate things for indent strings that are stored elsewhere, let's say, as configuration. This would require a user to store both indent character and indent character count or have some defaults to these + and dynamically dispatch to either to `setPrettyPrintingByTabs` or to `setPrettyPrintingBySpaces`. From other perspective, instead of having the latter two, there could be another overload: `setPrettyPrinting(char indent, int count)`. This would require no a regex at all and would never go into a tab/spaces mixture + it might be aligned with indentation settings stored elsewhere. So, in general, three methods perhaps something like:\r\n\r\n* `setPrettyPrinting(char indent, int count)` with `indent != ' ' && indent != '\\t'` and `count < 0` invariants;\r\n* `setPrettyPrintingByTabs(count)` with just a call to `setPrettyPrinting('\\t', count)` (will never throw an 'Invalid indent character' exception);\r\n* and `setPrettyPrintingBySpaces` with a call to `setPrettyPrinting(' ', count)` (will never throw an `Invalid indent character ` as well).\r\n\r\nAnyway, the final decisions always go to the Gson development team. =||= I'd love to see this PR merged (or some variation), this is pretty old now. Any possibility it will get merged? =||= We would like to see a more general solution. For example, something that supplies a formatter that walks through a DOM tree and prints it.  =||= @inder123 but does it really need to be such complicated, and doesn't this PR merely implement a minor tweak for an existing currently poorly customizable indentation feature (that's pretty old itself) rather than implementing a neat well-designed formatter from scratch? =||= @lyubomyr-shaydariv It's not a minor tweak if you are introducing a new API.  =||= ", 0], ["1281", "updated README to use implementation instead of compile", "Yaakov", "greatjack1", "05/16/18, 01:39:33 PM", "As of io 17, google reccomends using implementation when adding gradle dependencies instead of compile as compile is now depreciated.\r\n\r\nI updated the readme to use implementation instead of compile.\r\n\r\nSee https://youtu.be/7ll-rkLCtyk?t=22m20s for more details.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it!\n\n> On Apr 3, 2018, at 3:21 PM, googlebot <notifications@github.com> wrote:\n> \n> Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n> \n> \ud83d\udcdd Please visit https://cla.developers.google.com/ <https://cla.developers.google.com/> to sign.\n> \n> Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.\n> \n> What to do if you already signed the CLA\n> \n> Individual signers\n> \n> It's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.\n> Corporate signers\n> \n> Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot <x-msg://2/go/cla#troubleshoot> (Public version <https://opensource.google.com/docs/cla/#troubleshoot>).\n> The email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.\n> The email used to register you as an authorized contributor must also be attached to your GitHub account <https://github.com/settings/emails>.\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub <https://github.com/google/gson/pull/1281#issuecomment-378366111>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AV53pa1vUzrkYNGhNhk8yt-3UEibhCwzks5tk8utgaJpZM4TFo2r>.\n> \n\n =||= CLAs look good, thanks!\n\n<!-- ok --> =||= So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*\n\n<!-- need_author_consent --> =||= I confirm I am ok with the pull request =||= ", ["1281", "updated README to use implementation instead of compile", "Yaakov", "greatjack1", "05/16/18, 01:39:33 PM", "As of io 17, google reccomends using implementation when adding gradle dependencies instead of compile as compile is now depreciated.\n\nI updated the readme to use implementation instead of compile.\n\nSee https://youtu.be/7ll-rkLCtyk?t=22m20s for more details.", "NaN"], ["inder123", "Merge branch 'master' into master", "05/09/18, 08:11:43 PM", "GitHub", "354742088597d78a14672c56325ddb66589f37ad", [".gitignore", "CHANGELOG.md", "README.md", "ReleaseProcess.md", "UserGuide.md", "build.gradle", "examples/android-proguard-example/AndroidManifest.xml", "gradle/wrapper/gradle-wrapper.jar", "gradle/wrapper/gradle-wrapper.properties", "gradlew", "gradlew.bat", "gson/build.gradle", "gson/pom.xml", "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonParser.java", "gson/src/main/java/com/google/gson/internal/JavaVersion.java", "gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/main/java/com/google/gson/util/VersionUtils.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/GsonBuilderTest.java", "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java", "gson/src/test/java/com/google/gson/functional/ObjectTest.java", "gson/src/test/java/com/google/gson/internal/JavaVersionTest.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java", "pom.xml", "settings.gradle"], "@@ -13,4 +13,8 @@ release.properties\n *.iws\n classes\n \n+.gradle\n+local.properties\n+build\n+\n .DS_Store, @@ -1,6 +1,17 @@\n Change Log\n ==========\n \n+## Version 2.8.4\n+_2018-05-01_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.3...gson-parent-2.8.4)\n+ * Added a new FieldNamingPolicy, `LOWER_CASE_WITH_DOTS` that mapps JSON name `someFieldName` to `some.field.name`\n+ * Fixed issue https://github.com/google/gson/issues/1305 by removing compile/runtime dependency on `sun.misc.Unsafe`\n+\n+## Version 2.8.3\n+_2018-04-27_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.2...gson-parent-2.8.3)\n+ * Added a new API, `GsonBuilder.newBuilder()` that clones the current builder\n+ * Preserving DateFormatter behavior on JDK 9\n+ * Numerous other bugfixes\n+\n ## Version 2.8.2\n _2017-09-19_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.1...gson-parent-2.8.2)\n  * Introduced a new API, `JsonElement.deepCopy()`, @@ -20,7 +20,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n   * To use Gson in Android\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.2'\n+    implementation 'com.google.code.gson:gson:2.8.4'\n }\n ```\n \n@@ -30,7 +30,7 @@ dependencies {\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>\n-    <version>2.8.2</version>\n+    <version>2.8.4</version>\n </dependency>\n ```\n , @@ -1,51 +1,19 @@\n-#Gson Release Process\n+# Gson Release Process\n \n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n 1. (obsolete step) Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 1. Ensure all changelists are code-reviewed and have +1\n-1. (obsolete step) Ensure that your `~/.m2/settings.xml` is configured properly (see steps below)\n 1. `cd gson` to the parent directory; ensure there are no open files and all changes are committed.\n 1. Run `mvn release:clean`\n 1. Do a dry run: `mvn release:prepare -DdryRun=true`\n 1. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine.\n-  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n-1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n-\n-   ```bash\n-   mvn -s /home/<username>/.m2/settings.xml release:perform\n-   ```\n-\n-1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n-\n-  ```bash\n-  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n-  cd /tmp/1.7.2\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2-javadoc.jar \\\n-      -Dclassifier=javadoc\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2-sources.jar \\\n-      -Dclassifier=sources\n-\n-  mvn gpg:sign-and-deploy-file \\\n-      -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n-      -DrepositoryId=sonatype-nexus-staging \\\n-      -DpomFile=gson-1.7.2.pom \\\n-      -Dfile=gson-1.7.2.jar\n-  ```\n-\n-1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n+   * Answer questions: usually the defaults are fine.\n+   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+1. Complete the release: `mvn release:perform`\n+1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson.\n+1. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n \n 1. Update the version in the [Using Gson with Maven2 page](https://github.com/google/gson/blob/master/UserGuide.md#TOC-Gson-With-Maven)\n@@ -58,16 +26,16 @@ The following is a step-by-step procedure for releasing a new version of Google-\n This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n-2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n-3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n-4. Now for deploying a snapshot repository, use `mvn deploy`.\n+1. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n+1. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n+1. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n \n Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n \n 1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n-2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n+1. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n , @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    compile 'com.google.code.gson:gson:2.8.2'\n+    compile 'com.google.code.gson:gson:2.8.4'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.2</version>\n+      <version>2.8.4</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, @@ -0,0 +1,12 @@\n+buildscript {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+, None, None, @@ -0,0 +1,6 @@\n+#Fri Apr 27 17:41:01 PDT 2018\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip, @@ -0,0 +1,172 @@\n+#!/usr/bin/env sh\n+\n+##############################################################################\n+##\n+##  Gradle start up script for UN*X\n+##\n+##############################################################################\n+\n+# Attempt to set APP_HOME\n+# Resolve links: $0 may be a link\n+PRG=\"$0\"\n+# Need this for relative symlinks.\n+while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+        PRG=\"$link\"\n+    else\n+        PRG=`dirname \"$PRG\"`\"/$link\"\n+    fi\n+done\n+SAVED=\"`pwd`\"\n+cd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\n+APP_HOME=\"`pwd -P`\"\n+cd \"$SAVED\" >/dev/null\n+\n+APP_NAME=\"Gradle\"\n+APP_BASE_NAME=`basename \"$0\"`\n+\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS=\"\"\n+\n+# Use the maximum available, or set MAX_FD != -1 to use that value.\n+MAX_FD=\"maximum\"\n+\n+warn () {\n+    echo \"$*\"\n+}\n+\n+die () {\n+    echo\n+    echo \"$*\"\n+    echo\n+    exit 1\n+}\n+\n+# OS specific support (must be 'true' or 'false').\n+cygwin=false\n+msys=false\n+darwin=false\n+nonstop=false\n+case \"`uname`\" in\n+  CYGWIN* )\n+    cygwin=true\n+    ;;\n+  Darwin* )\n+    darwin=true\n+    ;;\n+  MINGW* )\n+    msys=true\n+    ;;\n+  NONSTOP* )\n+    nonstop=true\n+    ;;\n+esac\n+\n+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n+\n+# Determine the Java command to use to start the JVM.\n+if [ -n \"$JAVA_HOME\" ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+        # IBM's JDK on AIX uses strange locations for the executables\n+        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+        JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+    if [ ! -x \"$JAVACMD\" ] ; then\n+        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+    fi\n+else\n+    JAVACMD=\"java\"\n+    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+fi\n+\n+# Increase the maximum file descriptors if we can.\n+if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n+    MAX_FD_LIMIT=`ulimit -H -n`\n+    if [ $? -eq 0 ] ; then\n+        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n+            MAX_FD=\"$MAX_FD_LIMIT\"\n+        fi\n+        ulimit -n $MAX_FD\n+        if [ $? -ne 0 ] ; then\n+            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n+        fi\n+    else\n+        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n+    fi\n+fi\n+\n+# For Darwin, add options to specify how the application appears in the dock\n+if $darwin; then\n+    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin ; then\n+    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n+    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n+\n+    # We build the pattern for arguments to be converted via cygpath\n+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n+    SEP=\"\"\n+    for dir in $ROOTDIRSRAW ; do\n+        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n+        SEP=\"|\"\n+    done\n+    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n+    # Add a user-defined pattern to the cygpath arguments\n+    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n+        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n+    fi\n+    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n+    i=0\n+    for arg in \"$@\" ; do\n+        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n+        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n+\n+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n+            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n+        else\n+            eval `echo args$i`=\"\\\"$arg\\\"\"\n+        fi\n+        i=$((i+1))\n+    done\n+    case $i in\n+        (0) set -- ;;\n+        (1) set -- \"$args0\" ;;\n+        (2) set -- \"$args0\" \"$args1\" ;;\n+        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+    esac\n+fi\n+\n+# Escape application args\n+save () {\n+    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n+    echo \" \"\n+}\n+APP_ARGS=$(save \"$@\")\n+\n+# Collect all arguments for the java command, following the shell quoting and substitution rules\n+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n+\n+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\n+if [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n+  cd \"$(dirname \"$0\")\"\n+fi\n+\n+exec \"$JAVACMD\" \"$@\", @@ -0,0 +1,84 @@\n+@if \"%DEBUG%\" == \"\" @echo off\n+@rem ##########################################################################\n+@rem\n+@rem  Gradle startup script for Windows\n+@rem\n+@rem ##########################################################################\n+\n+@rem Set local scope for the variables with windows NT shell\n+if \"%OS%\"==\"Windows_NT\" setlocal\n+\n+set DIRNAME=%~dp0\n+if \"%DIRNAME%\" == \"\" set DIRNAME=.\n+set APP_BASE_NAME=%~n0\n+set APP_HOME=%DIRNAME%\n+\n+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+set DEFAULT_JVM_OPTS=\n+\n+@rem Find java.exe\n+if defined JAVA_HOME goto findJavaFromJavaHome\n+\n+set JAVA_EXE=java.exe\n+%JAVA_EXE% -version >NUL 2>&1\n+if \"%ERRORLEVEL%\" == \"0\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:findJavaFromJavaHome\n+set JAVA_HOME=%JAVA_HOME:\"=%\n+set JAVA_EXE=%JAVA_HOME%/bin/java.exe\n+\n+if exist \"%JAVA_EXE%\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:init\n+@rem Get command-line arguments, handling Windows variants\n+\n+if not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n+\n+:win9xME_args\n+@rem Slurp the command line arguments.\n+set CMD_LINE_ARGS=\n+set _SKIP=2\n+\n+:win9xME_args_slurp\n+if \"x%~1\" == \"x\" goto execute\n+\n+set CMD_LINE_ARGS=%*\n+\n+:execute\n+@rem Setup the command line\n+\n+set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n+\n+@rem Execute Gradle\n+\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n+\n+:end\n+@rem End local scope for the variables with windows NT shell\n+if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n+\n+:fail\n+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\n+rem the _cmd.exe /c_ return code!\n+if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\n+exit /b 1\n+\n+:mainEnd\n+if \"%OS%\"==\"Windows_NT\" endlocal\n+\n+:omega, @@ -0,0 +1,13 @@\n+apply plugin: 'java'\n+apply plugin: 'maven'\n+\n+group = 'com.google.code.gson'\n+version = '2.8.4-SNAPSHOT'\n+\n+sourceCompatibility = 1.6\n+targetCompatibility = 1.6\n+\n+sourceSets.main.java.exclude(\"**/module-info.java\")\n+dependencies {\n+    testCompile \"junit:junit:4.12\"\n+}, @@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.8.3-SNAPSHOT</version>\n+    <version>2.8.5-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>, @@ -27,12 +27,12 @@\n import java.util.List;\n import java.util.Locale;\n \n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.VersionUtils;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and\n@@ -59,7 +59,7 @@\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n   }\n@@ -78,7 +78,7 @@\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateInstance(style));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateFormat(style));\n     }\n   }\n@@ -93,7 +93,7 @@ public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(dateStyle, timeStyle));\n     }\n   }, @@ -114,6 +114,29 @@\n     @Override public String translateName(Field f) {\n       return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n+  },\n+\n+  /**\n+   * Using this naming policy with Gson will modify the Java Field name from its camel cased\n+   * form to a lower case field name where each word is separated by a dot (.).\n+   *\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <ul>\n+   *   <li>someFieldName ---> some.field.name</li>\n+   *   <li>_someFieldName ---> _some.field.name</li>\n+   *   <li>aStringField ---> a.string.field</li>\n+   *   <li>aURL ---> a.u.r.l</li>\n+   * </ul>\n+   * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n+   * expressions. This requires that a field named with dots is always accessed as a quoted\n+   * property like {@code myobject['my.field']}. Accessing it as an object field\n+   * {@code myobject.my.field} will result in an unintended javascript expression.\n+   * @since 2.8\n+   */\n+  LOWER_CASE_WITH_DOTS() {\n+    @Override public String translateName(Field f) {\n+      return separateCamelCase(f.getName(), \".\").toLowerCase(Locale.ENGLISH);\n+    }\n   };\n \n   /**, None, None, @@ -0,0 +1,90 @@\n+/*\n+ * Copyright (C) 2017 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal;\n+\n+/**\n+ * Utility to check the major Java version of the current JVM.\n+ */\n+public final class JavaVersion {\n+  // Oracle defines naming conventions at http://www.oracle.com/technetwork/java/javase/versioning-naming-139433.html\n+  // However, many alternate implementations differ. For example, Debian used 9-debian as the version string\n+\n+  private static final int majorJavaVersion = determineMajorJavaVersion();\n+\n+  private static int determineMajorJavaVersion() {\n+    String javaVersion = System.getProperty(\"java.version\");\n+    return getMajorJavaVersion(javaVersion);\n+  }\n+\n+  // Visible for testing only\n+  static int getMajorJavaVersion(String javaVersion) {\n+    int version = parseDotted(javaVersion);\n+    if (version == -1) {\n+      version = extractBeginningInt(javaVersion);\n+    }\n+    if (version == -1) {\n+      return 6;  // Choose minimum supported JDK version as default\n+    }\n+    return version;\n+  }\n+\n+  // Parses both legacy 1.8 style and newer 9.0.4 style \n+  private static int parseDotted(String javaVersion) {\n+    try {\n+      String[] parts = javaVersion.split(\"[._]\");\n+      int firstVer = Integer.parseInt(parts[0]);\n+      if (firstVer == 1 && parts.length > 1) {\n+        return Integer.parseInt(parts[1]);\n+      } else {\n+        return firstVer;\n+      }\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  private static int extractBeginningInt(String javaVersion) {\n+    try {\n+      StringBuilder num = new StringBuilder();\n+      for (int i = 0; i < javaVersion.length(); ++i) {\n+        char c = javaVersion.charAt(i);\n+        if (Character.isDigit(c)) {\n+          num.append(c);\n+        } else {\n+          break;\n+        }\n+      }\n+      return Integer.parseInt(num.toString());\n+    } catch (NumberFormatException e) {\n+      return -1;\n+    }\n+  }\n+\n+  /**\n+   * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\n+   */\n+  public static int getMajorJavaVersion() {\n+    return majorJavaVersion;\n+  }\n+\n+  /**\n+   * @return {@code true} if the application is running on Java 9 or later; and {@code false} otherwise.\n+   */\n+  public static boolean isJava9OrLater() {\n+    return majorJavaVersion >= 9;\n+  }\n+}, @@ -20,13 +20,13 @@\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.VersionUtils;\n \n import java.io.IOException;\n import java.text.DateFormat;\n@@ -62,7 +62,7 @@ public DateTypeAdapter() {\n     if (!Locale.getDefault().equals(Locale.US)) {\n       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));\n     }\n   }, @@ -25,12 +25,9 @@\n  */\n final class PreJava9ReflectionAccessor extends ReflectionAccessor {\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n     ao.setAccessible(true);\n   }\n-\n }, @@ -15,10 +15,10 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import com.google.gson.util.VersionUtils;\n-\n import java.lang.reflect.AccessibleObject;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Provides a replacement for {@link AccessibleObject#setAccessible(boolean)}, which may be used to\n  * avoid reflective access issues appeared in Java 9, like {@link java.lang.reflect.InaccessibleObjectException}\n@@ -33,7 +33,7 @@\n public abstract class ReflectionAccessor {\n \n   // the singleton instance, use getInstance() to obtain\n-  private static final ReflectionAccessor instance = VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n+  private static final ReflectionAccessor instance = JavaVersion.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();\n \n   /**\n    * Does the same as {@code ao.setAccessible(true)}, but never throws, @@ -15,40 +15,63 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import sun.misc.Unsafe;\n-\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import com.google.gson.JsonIOException;\n \n /**\n  * An implementation of {@link ReflectionAccessor} based on {@link Unsafe}.\n  * <p>\n  * NOTE: This implementation is designed for Java 9. Although it should work with earlier Java releases, it is better to\n  * use {@link PreJava9ReflectionAccessor} for them.\n  */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n final class UnsafeReflectionAccessor extends ReflectionAccessor {\n \n-  private final Unsafe theUnsafe = getUnsafeInstance();\n+  private static Class unsafeClass;\n+  private final Object theUnsafe = getUnsafeInstance();\n   private final Field overrideField = getOverrideField();\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n+    boolean success = makeAccessibleWithUnsafe(ao);\n+    if (!success) {\n+      try {\n+        // unsafe couldn't be found, so try using accessible anyway\n+        ao.setAccessible(true);\n+      } catch (SecurityException e) {\n+        throw new JsonIOException(\"Gson couldn't modify fields for \" + ao\n+          + \"\\nand sun.misc.Unsafe not found.\\nEither write a custom type adapter,\"\n+          + \" or make fields accessible, or include sun.misc.Unsafe.\", e);\n+      }\n+    }\n+  }\n+\n+  // Visible for testing only\n+  boolean makeAccessibleWithUnsafe(AccessibleObject ao) {\n     if (theUnsafe != null && overrideField != null) {\n-      long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n-      theUnsafe.putBoolean(ao, overrideOffset, true);\n+      try {\n+        Method method = unsafeClass.getMethod(\"objectFieldOffset\", Field.class);\n+        long overrideOffset = (Long) method.invoke(theUnsafe, overrideField);  // long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n+        Method putBooleanMethod = unsafeClass.getMethod(\"putBoolean\",  Object.class, long.class, boolean.class);\n+        putBooleanMethod.invoke(theUnsafe, ao, overrideOffset, true); // theUnsafe.putBoolean(ao, overrideOffset, true);\n+        return true;\n+      } catch (Exception ignored) { // do nothing\n+      }\n     }\n+    return false;\n   }\n \n-  private static Unsafe getUnsafeInstance() {\n+  private static Object getUnsafeInstance() {\n     try {\n-      Field unsafeField = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+      unsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+      Field unsafeField = unsafeClass.getDeclaredField(\"theUnsafe\");\n       unsafeField.setAccessible(true);\n-      return (Unsafe) unsafeField.get(null);\n+      return unsafeField.get(null);\n     } catch (Exception e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }\n@@ -57,7 +80,6 @@ private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n     } catch (NoSuchFieldException e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }, @@ -1,49 +0,0 @@\n-/*\n- * Copyright (C) 2017 The Gson authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.gson.util;\n-\n-/**\n- * Utility to check the major Java version of the current JVM.\n- */\n-public class VersionUtils {\n-\n-  private static final int majorJavaVersion = determineMajorJavaVersion();\n-\n-  private static int determineMajorJavaVersion() {\n-    String[] parts = System.getProperty(\"java.version\").split(\"[._]\");\n-    int firstVer = Integer.parseInt(parts[0]);\n-    if (firstVer == 1 && parts.length > 1) {\n-      return Integer.parseInt(parts[1]);\n-    } else {\n-      return firstVer;\n-    }\n-  }\n-\n-  /**\n-   * @return the major Java version, i.e. '8' for Java 1.8, '9' for Java 9 etc.\n-   */\n-  public static int getMajorJavaVersion() {\n-    return majorJavaVersion;\n-  }\n-\n-  /**\n-   * @return {@code true} if the application is running on Java 9 or later; and {@code false} otherwise.\n-   */\n-  public static boolean isJava9OrLater() {\n-    return majorJavaVersion >= 9;\n-  }\n-}, @@ -23,7 +23,8 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import com.google.gson.util.VersionUtils;\n+import com.google.gson.internal.JavaVersion;\n+\n import junit.framework.TestCase;\n \n /**\n@@ -47,9 +48,9 @@ private void assertFormattingAlwaysEmitsUsLocale(Locale locale) {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(locale);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \", \" : \" \";\n-      String afterYearLongSep = VersionUtils.isJava9OrLater() ? \" at \" : \" \";\n-      String utcFull = VersionUtils.isJava9OrLater() ? \"Coordinated Universal Time\" : \"UTC\";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \", \" : \" \";\n+      String afterYearLongSep = JavaVersion.isJava9OrLater() ? \" at \" : \" \";\n+      String utcFull = JavaVersion.isJava9OrLater() ? \"Coordinated Universal Time\" : \"UTC\";\n       assertFormatted(String.format(\"Jan 1, 1970%s12:00:00 AM\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n@@ -75,7 +76,7 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.FRANCE);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \" \u00e0 \" : \" \";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \" \u00e0 \" : \" \";\n       assertParsed(String.format(\"1 janv. 1970%s00:00:00\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n@@ -87,7 +88,7 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n-      assertParsed(VersionUtils.isJava9OrLater() ?\n+      assertParsed(JavaVersion.isJava9OrLater() ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n@@ -127,7 +128,7 @@ public void testFormatUsesDefaultTimezone() throws Exception {\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      String afterYearSep = VersionUtils.isJava9OrLater() ? \", \" : \" \";\n+      String afterYearSep = JavaVersion.isJava9OrLater() ? \", \" : \" \";\n       assertFormatted(String.format(\"Dec 31, 1969%s4:00:00 PM\", afterYearSep),\n               new DefaultDateTypeAdapter(Date.class));\n       assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));, None, None, @@ -27,6 +27,7 @@\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n@@ -56,7 +57,6 @@\n import java.util.TreeSet;\n import java.util.UUID;\n \n-import com.google.gson.util.VersionUtils;\n import junit.framework.TestCase;\n \n /**\n@@ -330,7 +330,7 @@ public void testBitSetDeserialization() throws Exception {\n   public void testDefaultDateSerialization() {\n     Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Sep 11, 2011, 10:55:03 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n@@ -375,7 +375,7 @@ public void testDefaultJavaSqlDateDeserialization() {\n   public void testDefaultJavaSqlTimestampSerialization() {\n     Timestamp now = new java.sql.Timestamp(1259875082000L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Dec 3, 2009, 1:18:02 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Dec 3, 2009 1:18:02 PM\\\"\", json);\n@@ -405,7 +405,7 @@ public void testDefaultDateSerializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n     Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"\\\"Sep 11, 2011, 10:55:03 PM\\\"\", json);\n     } else {\n       assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);, None, @@ -63,6 +63,20 @@ public void testGsonWithLowerCaseDashPolicySerialization() {\n         + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicySerialization() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    StringWrapper target = new StringWrapper(\"blah\");\n+    assertEquals(\"{\\\"some.constant.string.instance.field\\\":\\\"\"\n+          + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n+  }\n+\n+  public void testGsonWithLowerCaseDotPolicyDeserialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    String target = \"{\\\"some.constant.string.instance.field\\\":\\\"someValue\\\"}\";\n+    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n+    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n+  }\n+\n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();\n     String target = \"{\\\"some-constant-string-instance-field\\\":\\\"someValue\\\"}\";, None, @@ -33,6 +33,7 @@\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-import com.google.gson.util.VersionUtils;\n import junit.framework.TestCase;\n \n /**\n@@ -484,7 +484,7 @@ public void testSingletonLists() {\n   public void testDateAsMapObjectField() {\n     HasObjectMap a = new HasObjectMap();\n     a.map.put(\"date\", new Date(0));\n-    if (VersionUtils.isJava9OrLater()) {\n+    if (JavaVersion.isJava9OrLater()) {\n       assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969, 4:00:00 PM\\\"}}\", gson.toJson(a));\n     } else {\n       assertEquals(\"{\\\"map\\\":{\\\"date\\\":\\\"Dec 31, 1969 4:00:00 PM\\\"}}\", gson.toJson(a));, @@ -0,0 +1,81 @@\n+/*\n+ * Copyright (C) 2017 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.google.gson.internal.JavaVersion;\n+\n+/**\n+ * Unit and functional tests for {@link JavaVersion}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class JavaVersionTest {\n+  // Borrowed some of test strings from https://github.com/prestodb/presto/blob/master/presto-main/src/test/java/com/facebook/presto/server/TestJavaVersion.java\n+\n+  @Test\n+  public void testGetMajorJavaVersion() {\n+    JavaVersion.getMajorJavaVersion();\n+  }\n+\n+  @Test\n+  public void testJava6() {\n+    assertEquals(6, JavaVersion.getMajorJavaVersion(\"1.6.0\")); // http://www.oracle.com/technetwork/java/javase/version-6-141920.html\n+  }\n+\n+  @Test\n+  public void testJava7() {\n+    assertEquals(7, JavaVersion.getMajorJavaVersion(\"1.7.0\")); // http://www.oracle.com/technetwork/java/javase/jdk7-naming-418744.html\n+  }\n+\n+  @Test\n+  public void testJava8() {\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_131\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_60-ea\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_111-internal\"));\n+\n+    // openjdk8 per https://github.com/AdoptOpenJDK/openjdk-build/issues/93\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0-internal\"));\n+    assertEquals(8, JavaVersion.getMajorJavaVersion(\"1.8.0_131-adoptopenjdk\"));\n+  }\n+\n+  @Test\n+  public void testJava9() {\n+    // Legacy style\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.0.4\")); // Oracle JDK 9\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9-Debian\")); // Debian as reported in https://github.com/google/gson/issues/1310\n+    // New style\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9-ea+19\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9+100\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.0.1+20\"));\n+    assertEquals(9, JavaVersion.getMajorJavaVersion(\"9.1.1+20\"));\n+  }\n+\n+  @Test\n+  public void testJava10() {\n+    assertEquals(10, JavaVersion.getMajorJavaVersion(\"10.0.1\")); // Oracle JDK 10.0.1\n+  }\n+\n+  @Test\n+  public void testUnknownVersionFormat() {\n+    assertEquals(6, JavaVersion.getMajorJavaVersion(\"Java9\")); // unknown format\n+  }\n+}, @@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.reflect;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link UnsafeReflectionAccessor}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class UnsafeReflectionAccessorTest {\n+\n+  @Test\n+  public void testMakeAccessibleWithUnsafe() throws Exception {\n+    UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+    Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+    try {\n+      boolean success = accessor.makeAccessibleWithUnsafe(field);\n+      assertTrue(success);\n+    } catch (Exception e) {\n+      fail(\"Unsafe didn't work on the JDK\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithPrivateFinalFields {\n+    private final String a;\n+    public ClassWithPrivateFinalFields(String a) {\n+      this.a = a;\n+    }\n+  }\n+}, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.8.3-SNAPSHOT</version>\n+  <version>2.8.5-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>\n@@ -65,7 +65,9 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n-            <excludes>**/module-info.java</excludes>\n+            <excludes>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, @@ -0,0 +1 @@\n+include ':gson', ", 640, 137, "\"modified, modified, modified, modified, modified, added, modified, added, added, added, added, added, modified, modified, modified, modified, modified, added, modified, modified, modified, modified, removed, modified, modified, modified, modified, modified, modified, modified, modified, added, added, modified, added, \"", 777], 1], ["1282", "Invalid number: Dec trying to parse date", "SAldous", "saldous", "04/06/18, 11:55:47 PM", "If I have a date of: **Dec 22, 2014 12:00:00 PM**\r\n\r\nand I set the gson format like below:\r\n\r\n`val gson = GsonBuilder().setDateFormat(\"MMM d, yyyy HH:mm:ss a\").create() `\r\n`val json = gson.toJson(input)`\r\n\r\nWhen I read back the date the app crashes.\r\n\r\n```\r\nval caseType = object : TypeToken<ArrayList<MyCase>>() {}.type\r\nreturn gson.fromJson<ArrayList<MyCase>>(json, caseType)\r\n```\r\n\r\n`java.lang.NumberFormatException: Invalid number: Dec at com.google.gson.internal.bind.util.ISO8601Utils.parseInt(ISO8601Utils.java:311)`\r\n\r\nAny ideas why / how to fix?\r\n\r\nthank you.", "```\r\nGson gson = new GsonBuilder().setDateFormat(\"MMM d, yyyy HH:mm:ss a\").create();\r\ngson.toJson(\"Dec 22, 2014 12:00:00 PM\"));\r\n```\r\nworks for me.\r\nDo you have a failing test case?\r\nI'd also be interested in seeing the full stack trace. =||= sorry, I think I found the issue, it was in a different file, my bad. =||= could you specify where the problem originated? I'm finding a similar error =||= ", 0], ["1283", "Remove final from public classes such as Gson", "David Hoffer", "dhoffer", "04/12/18, 08:02:37 PM", "Remove final from public classes such as Gson so Gson can be mocked in unit testing.  How can Gson be used in unit testing with final classes?  We use EasyMock for our mocking framework.", "There's no reason to mock Gson or any of its types. You should only mock types that you control so if you have an abstraction for serialization you could mock that, but if not, just call into Gson and let it do normal serialization. =||= That is not the case, one often needs to mock 3rd party objects just like any other.  In my case I will need to mock Gson#fromJson().  I don't want to have to wrap the Gson API with another layer just to be able to mock.\r\n\r\nIn my case I have used PowerMock to get around this problem.\r\n\r\n@RunWith(PowerMockRunner.class)\r\n@PrepareForTest({Gson.class}) =||= ", 0], ["1284", "Format ReleaseProcess.md using GFM", "JoonHo Park", "pjhjohn", "04/28/18, 01:42:54 AM", "### Changes\r\n\r\n- Space in `h1` header\r\n- Indent code block & nested bullets properly with 3 spaces\r\n- Unify numbered list indicator to `1.`\r\n\r\nSince markdown automatically converts `1.` to `<li>` under `<ol>`, bullet numbers are automatically assigned in increment manner. Therefore there is no need to use other than `1.` for numbered list. So, I converted `2.` `3.` ... to `1.` for consistency.\r\nMoreover, using only `1.` makes document easy to change: no number arrangement is required when adding / removing items in the ordered list", "NaN", ["1284", "Format ReleaseProcess.md using GFM", "JoonHo Park", "pjhjohn", "04/28/18, 01:42:54 AM", "### Changes\n\n- Space in `h1` header\n- Indent code block & nested bullets properly with 3 spaces\n- Unify numbered list indicator to `1.`\n\nSince markdown automatically converts `1.` to `<li>` under `<ol>`, bullet numbers are automatically assigned in increment manner. Therefore there is no need to use other than `1.` for numbered list. So, I converted `2.` `3.` ... to `1.` for consistency.\nMoreover, using only `1.` makes document easy to change: no number arrangement is required when adding / removing items in the ordered list", "NaN"], ["JoonHo Park", "Format ReleaseProcess.md using GFM\n\nChanges\n- Space in `h1` header\n- Indent code block & nested bullets properly with 3 spaces\n- Unify numbered list indicator to `1.`", "04/13/18, 04:45:33 AM", "JoonHo Park", "33a29816f44fe83af62a654ff99ce6a60a6eb3ac", ["ReleaseProcess.md"], "@@ -1,4 +1,4 @@\n-#Gson Release Process\n+# Gson Release Process\n \n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n@@ -10,8 +10,8 @@ The following is a step-by-step procedure for releasing a new version of Google-\n 1. Run `mvn release:clean`\n 1. Do a dry run: `mvn release:prepare -DdryRun=true`\n 1. Start the release: `mvn release:prepare`\n-  * Answer questions: usually the defaults are fine.\n-  * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n+   * Answer questions: usually the defaults are fine.\n+   * This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n 1. Ensure you have defined `sonatype-nexus-staging` in your Maven `settings.xml` and run:\n \n    ```bash\n@@ -20,30 +20,30 @@ The following is a step-by-step procedure for releasing a new version of Google-\n \n 1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson. If you run into an error regarding missing signatures, you need to manually upload the artifacts using `mvn gpg:sign-and-deploy-file` for Gson binary, source and Javadoc jars.\n \n-  ```bash\n-  cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n-  cd /tmp/1.7.2\n+   ```bash\n+   cp -r ~/.m2/repository/com/google/code/gson/gson/1.7.2 /tmp\n+   cd /tmp/1.7.2\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2-javadoc.jar \\\n       -Dclassifier=javadoc\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2-sources.jar \\\n       -Dclassifier=sources\n \n-  mvn gpg:sign-and-deploy-file \\\n+   mvn gpg:sign-and-deploy-file \\\n       -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n       -DrepositoryId=sonatype-nexus-staging \\\n       -DpomFile=gson-1.7.2.pom \\\n       -Dfile=gson-1.7.2.jar\n-  ```\n+   ```\n \n 1. Close the Gson repository. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n 1. Release the staging repository for Gson. Gson will now get synced to Maven central with-in the next hour. For issues consult [Sonatype Guide](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8.ReleaseIt).\n@@ -58,16 +58,16 @@ The following is a step-by-step procedure for releasing a new version of Google-\n This section was borrowed heavily from [Doclava release process](http://code.google.com/p/doclava/wiki/ProcessRelease).\n \n 1. Install/Configure GPG following this [guide](http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/).\n-2. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n-3. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n-4. Now for deploying a snapshot repository, use `mvn deploy`.\n+1. [Create encrypted passwords](http://maven.apache.org/guides/mini/guide-encryption.html).\n+1. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n+1. Now for deploying a snapshot repository, use `mvn deploy`.\n \n ## Getting Maven Publishing Privileges\n \n Based on [Gson group thread](https://groups.google.com/d/topic/google-gson/DHWJHVFpIBg/discussion):\n \n 1. [Sign up for a Sonatype account](https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide) following instructions under (2) on that page\n-2. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n+1. Ask one of the existing members of the repository to create a JIRA ticket (Step 3 of above document) to add you to the publisher list.\n \n ## Running Benchmarks or Tests on Android\n , ", 14, 14, "\"modified, \"", 28], 1], ["1285", "Solve the robot legs problem", null, "schernic", "04/13/18, 07:51:04 AM", "Sorry, posted to the wrong repository. Please delete.", "NaN", 0], ["1286", "JsonParser stops parsing at first whitespace", "Hansgeorg Schwibbe", "hgschwibbe", "04/13/18, 01:35:56 PM", "The JsonParser stops parsing at the first whitespace. \r\n\r\nThe following unit test describes the problem\r\n\r\n```\r\nimport java.io.StringReader;\r\n\r\nimport org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\nimport com.google.gson.JsonElement;\r\nimport com.google.gson.JsonParser;\r\nimport com.google.gson.stream.JsonReader;\r\n\r\npublic class JsonParserTest {\r\n    @Test\r\n    public void whitespaceTest() {\r\n        StringReader stringReader = new StringReader(\"ABC_DEF GHI\");\r\n        JsonReader jsonReader = new JsonReader(stringReader);\r\n        final JsonParser jsonParser = new JsonParser();\r\n        JsonElement parsed = jsonParser.parse(jsonReader);\r\n        Assert.assertEquals(\"ABC_DEF GHI\", parsed.getAsString());\r\n    }\r\n}\r\n```\r\n\r\nThe unit test results with the following error: \r\n`org.junit.ComparisonFailure: expected:<ABC_DEF[ GHI]> but was:<ABC_DEF[]>`\r", "Escaping the string with doulbe quotes works: `new StringReader(\"\\\"ABC_DEF GHI\\\"\")`\r\n\r\nBut why do I have to quote the strings?\r\nWhen I pass a `StringReader` to the `JsonReader` it should be clear that I want to parse a string literal.\r\nIf I want to parse an integer I would pass an `IntegerReader` to the `JsonReader`. =||= Reopened because from my opinion this is a big pitfall. \r\nThe unit test should work as it is (regardles of double quoting input strings or not). =||= > But why do I have to quote the strings?\r\n\r\nBecause [RFC 7159](https://tools.ietf.org/html/rfc7159) says so.\r\n`ABC_DEF GHI` is not valid JSON, while `\"ABC_DEF GHI\"` is. =||= ", 0], ["1287", "Gson causes Project structure in IntelliJ not to open", null, "Silfalion", "04/14/18, 02:51:39 PM", "Hi everyone,\r\n\r\nI'm reporting an issue that causes the project structure in intelliJ to not open after adding the Gson library to the global libraries. The problem disappears after disabling it.\r\n\r\nThanks for reading.", "Please report this to JetBrains. Nothing about the library should affect this and we have no control over this behavior from the library. =||= ", 0], ["1289", "Gson serialization from JsonSerializationContext triggers an exception if a typeadapter uses jsonValue", "Laurent", "Crystark", "04/23/18, 04:18:17 PM", "Hi,\r\n\r\nI'm having trouble combining a JsonSerializer with a TypeAdapter that uses `JsonWriter ::jsonValue`\r\n\r\nHere is the TypeAdapter for BigDecimals that I created:\r\n\r\n```java\r\n\tpublic class BigDecimalTypeAdapter extends TypeAdapter<BigDecimal> {\r\n\t\tpublic static final BigDecimalTypeAdapter INSTANCE = new BigDecimalTypeAdapter();\r\n\r\n\t\t@Override\r\n\t\tpublic void write(JsonWriter out, BigDecimal value) throws IOException {\r\n\t\t\tif (value == null) {\r\n\t\t\t\tout.nullValue();\r\n\t\t\t} else {\r\n\t\t\t\tout.jsonValue(value.stripTrailingZeros().toPlainString());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic BigDecimal read(JsonReader in) throws IOException {\r\n\t\t\treturn TypeAdapters.BIG_DECIMAL.read(in);\r\n\t\t}\r\n\t}\r\n```\r\nAnd that is a generic serializer for one of my interfaces:\r\n\r\n```java\r\n\tpublic class MyInterfaceJsonSerializer implements JsonSerializer<IMyInterface> {\r\n\t\t@Override\r\n\t\tpublic JsonElement serialize(IMyInterface src, Type typeOfSrc, JsonSerializationContext context) {\r\n\t\t\tMap<String, Object> map = new TreeMap<>();\r\n\t\t\t\r\n\t\t\tMap<String, Object> map = new TreeMap<>();\r\n\t\t\tMap<String, Object> failed = new TreeMap<>();\r\n\t\t\tMethod[] methods = IMyInterface.class.getMethods();\r\n\r\n\t\t\tfor (int i = 0; i < methods.length; i++) {\r\n\t\t\t\tMethod method = methods[i];\r\n\t\t\t\tString key = makePropertyName(method.getName());\r\n\t\t\t\ttry {\r\n\t\t\t\t\tObject result = method.invoke(src);\r\n\t\t\t\t\tmap.put(key, result);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\tfailed.put(key, e.getMessage());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!failed.isEmpty())\r\n\t\t\t\tmap.put(\"__failed\", failed);\r\n\r\n\t\t\treturn context.serialize(map); // Here that will call the BigDecimalTypeAdapter if any value is BigDecimal\r\n\t\t}\r\n\t}\r\n```\r\nWhen I try to serialize an instance of `IMyInterface`\r\n```\r\njava.lang.AssertionError\r\n\tat com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36)\r\n\tat java.io.Writer.write(Writer.java:192)\r\n\tat java.io.Writer.write(Writer.java:157)\r\n\tat java.io.Writer.append(Writer.java:227)\r\n\tat com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436)\r\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:22)\r\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:1)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.Gson.toJson(Gson.java:669)\r\n\tat com.google.gson.Gson.toJsonTree(Gson.java:562)\r\n\tat com.google.gson.Gson.toJsonTree(Gson.java:541)\r\n\tat com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)\r\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:37)\r\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:1)\r\n\tat com.google.gson.internal.bind.TreeTypeAdapter.write(TreeTypeAdapter.java:81)\r\n\tat com.google.gson.Gson.toJson(Gson.java:669)\r\n\tat com.google.gson.Gson.toJson(Gson.java:648)\r\n\tat com.google.gson.Gson.toJson(Gson.java:603)\r\n\tat com.google.gson.Gson.toJson(Gson.java:583)\r\n\tat my.service.ib.MyHandlerTest.test_gson(MyHandlerTest.java:26)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n```\r\nThis error comes from `JsonTreeWriter.UNWRITABLE_WRITER::write`.\r\n\r\nI'm not sure if i'm doing something wrong here. If I change `jsonValue` to `value` it works nice except that I get double quotes around my BigDecimal values which i'd like to avoid.\r\n\r\nHere is how i create my Gson object:\r\n```java\r\n\tpublic static final Gson\t\t\t\tGSON\t= new GsonBuilder()\r\n\t\t.registerTypeHierarchyAdapter(IMyInterface.class, new MyInterfaceJsonSerializer())\r\n\t\t.registerTypeAdapter(BigDecimal.class, BigDecimalTypeAdapter.INSTANCE)\r\n\t\t.create();\r\n```\r\nAm I missing something here ?", "Not an issue. If you take a look at what the documentation says on `jsonValue`, you see that it's a low-level method not to be used in high-level manner:\r\n\r\n> Writes `value` directly to the writer without quoting or escaping.\r\n\r\nThis method is also not overridden in `JsonTreeWriter` (does it make any sense?) causing the `AssertionError` that's mostly ever an indicator that something is going totally wrong. Just replace the `jsonValue` method with the `value` method, and it will dispatch to the string overload that will properly escape and accumulate the the value into the internal JSON tree collected by `JsonTreeWriter`. =||= Thanks @lyubomyr-shaydariv!  =||= ", 0], ["1292", "Please make JsonObject not final", null, "faissaloo", "04/17/18, 01:49:26 PM", "I want to be able to create derived classes of it, this is somewhat related to #1291.", "This class is not designed for inheritance and wanting to add helper methods to it is not a sufficient enough use case to abandon `final`. Static methods are your friend here, or use a language like Kotlin where you can define extension methods. =||= ", 0], ["1293", "pass json to sugar orm", "Sha_Ra", "emashara", "04/18/18, 12:48:09 PM", "how to pass Json object to sugar Orm database\r\n\r\n Gson gson = new Gson();\r\n        Product baseWatch = gson.fromJson(jsonString, Product.class);", "Please ask general usage questions on StackOverflow with the 'gson' tag. =||= ", 0], ["1294", "List of Object having Nested HashMap,String,ArrayList & HashMap converting to JSON is incorrect", null, "swapnil0504", "04/19/18, 04:08:16 AM", "I have a List<Object> and that list has nested hashmaps,json,maps,array and string, whenever I am converting  into JSON, GSON library  is skipping few hashmaps.", "Provide a failing test case. =||= I have got the problem my implementation was incorrect.\r\nThanks =||= ", 0], ["1295", "How i Remove Field from Json which values is Empty and Null?", "Nikunj paradva", "nikunjparadva", "04/21/18, 04:12:10 PM", "NaN", "Please ask general usage questions on StackOverflow with the 'gson' tag or the Gson mailing list. This issue tracker is for bugs and feature requests only. =||= ", 0], ["1296", "gson.toJson(obj,writer) function; Conversion object write file does not have all conversion", "Aaron", "WanXinTao", "04/22/18, 03:20:41 PM", "`Gson gson = new Gson();\r\nBufferedWriter writer = new BufferedWriter(new FileWriter(new File(filePath)));\r\ngson.toJson(spectrum,writer);`\r\nI found that this object is not completely converted to json and saved in a .json file\r\nThis is the display of the last line of the converted json file\r\n{\"x\":1774.0,\"y\":0.401832277657573},{\"x\":1775.0,\"y\":0.400960027494681},{\"x\":1776\r\nThe last line of the object I want to convert is\r\n { \"x\": 1799.0,\"y\": 0.386117120263839}, { \"x\": 1800.0,\"y\": 0.385834181003457}]\r\nI don't know if there is a problem with my function usage or this is a bug\r\nBecause I used the gson.toJson(obj) method to see the return value I found to be normally converted.\r\nHope to get help Thanks", "You have to call `close()` on the buffered writer. =||= ", 0], ["1297", "Invalid time zone indicator ' '", null, "libsgh", "07/02/18, 02:56:19 AM", "This my Gson code:\r\n```\r\nprotected Object fromJson(String json, Type t) {\r\ntry {\r\n\t\t\tGson g = new Gson();\r\n\t\t\tObject o = g.fromJson(json, t);\r\n\t\t\treturn o;\r\n\t\t} catch (Exception e) {\r\n\t\t\tlogger.error(e.getMessage(), e);\r\n\t\t\treturn null;\r\n  }\r\n}\r\n```\r\nI have an object which have a 2 Timestamp fields and I want to consume a json response using Gson but I have got an Invalid time zone indicator ' '**.But this is not always happening. I don't know why**.\r\nSo this is out put :\r\n```\r\nCaused by: java.text.ParseException: Failed to parse date [\"2018-04-12 18:38:02']: Invalid time zone indicator ' '\r\n\tat com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:274) ~[gson-2.8.2.jar!/:?]\r\n\tat com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:72) ~[gson-2.8.2.jar!/:?]\r\n\t... 106 more\r\nCaused by: java.lang.IndexOutOfBoundsException: Invalid time zone indicator ' '\r\n\tat com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:245) ~[gson-2.8.2.jar!/:?]\r\n\tat com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:72) ~[gson-2.8.2.jar!/:?]\r\n\t... 106 more\r\n```\r\nThis my Gson data:\r\n```\r\n[\r\n    {\r\n        \"id\": 2267,\r\n        \"code\": \"2100130106335294543080001\",\r\n        \"name\": \"ly123\",\r\n        \"servicetype\": \"VOD\",\r\n        \"showname\": \"ly123\",\r\n        \"type1\": 1,\r\n        \"pictureurl1\": \"\",\r\n        \"pictureurl2\": \"\",\r\n        \"status\": 1,\r\n        \"isdelete\": false,\r\n        \"checkstatus1\": 10,\r\n        \"createtime\": \"2018-04-12 18:38:02\",\r\n        \"updatetime\": \"2018-04-12 18:38:15\",\r\n        \"description\": \"\",\r\n        \"sgs\": [],\r\n        \"sgCodes\": [],\r\n        \"isPool\": false\r\n    }\r\n]\r\n```\r", "\u6211\u4e5f\u78b0\u5230\u4e86 =||= Same issue here, did you get a solution? =||= \u540c\u95ee\uff0c\u6c42\u89e3\u51b3\u529e\u6cd5\u5462 =||= @duyanhan1995 \u9700\u8981\u8bbe\u7f6e\u65f6\u95f4\u683c\u5f0f\u624d\u80fd\u7528\uff0c\u9ed8\u8ba4\u7684\u4e0d\u662f\u6807\u51c6\u683c\u5f0f\u3002 new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\") =||= @fradrick Need to set the time format to use, the default is not the standard format. new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\") =||= @7788jay \u591a\u8c22\uff01\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3 =||= @7788jay  \u6211\u54ed\u8fbd =||= ", 0], ["1298", "NullPointerException during parsing object", null, "imakhalova", "04/27/18, 04:53:44 PM", "I'm getting some blob from network and trying to parse it. Like that:\r\nGson gson = new Gson();\r\n            if (!TextUtils.isEmpty(header)) {\r\n                JWSHeader jwsHeader = gson.fromJson(header, JWSHeader.class);\r\n            }\r\n\r\nMost of the time it works well, but for some users it crashes. My guess is that data was corrupted ( I don't have sample of corrupted data). But shouldn't gson handle gracefully any wrong data and return null object instead?\r\n\r\nStack trace:\r\njava.lang.NullPointerException: Attempt to invoke virtual method 'int java.lang.Object.hashCode()' on a null object reference\r\n              at libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)\r\n              at com.google.gson.reflect.TypeToken.<init>(TypeToken.java:74)\r\n              at com.google.gson.reflect.TypeToken.get(TypeToken.java:296)\r\n              at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)\r\n              at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)\r\n              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)\r\n              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)\r\n              at com.google.gson.Gson.getAdapter(Gson.java:423)\r\n              at com.google.gson.Gson.fromJson(Gson.java:886)\r\n              at com.google.gson.Gson.fromJson(Gson.java:852)\r\n              at com.google.gson.Gson.fromJson(Gson.java:801)\r\n              at com.google.gson.Gson.fromJson(Gson.java:773)\r", "If the top-level String is null, Gson returns null.\r\nIf the JSON is corrupted, it's a good idea to surface it to the client code, instead of silently ignoring it. That is what Gson does. =||= Should this be surfaced with JSONException but not NullPointerException? =||= @imakhalova possibly... would love a specific proposal with a PR =||= @inder123 @imakhalova Can you give example of corrupt json which can cause above exception?If below is the sample json which is send inside fromJson() and which works fine,then what possible change I can make to this so that it generates above exception?The exception logs doesn't explain what is making it corrupt..and i just want to recreate the exception so that i can get an idea that which key or value is getting corrupt.\r\n{\"A\":{\"B\":0.0,\"C\":1542198709727,\"D\":0.0}} =||= @bhuvnesh123 \r\nI don't really think it's a Gson-related issue, and I believe it has nothing to do with probably corrupted JSON documents: according to the exception, [here](https://android.googlesource.com/platform/libcore/+/5d930ca/luni/src/main/java/libcore/reflect/TypeVariableImpl.java#47), it may be thrown:\r\n\r\n* either at `getName().hashCode()`\r\n* or at `getGenericDeclaration().hashCode()`\r\n\r\nI guess, that something causes the `Type` instance to get into a wrong state, and I guess something gets erased (let's say with Proguarding (similar [example](https://github.com/orhanobut/hawk/issues/143)); not sure how it deals with \"some users\" though). Make sure your type passed to `fromJson` and whatever types that might play in deserialization are well-wormed. =||= ```\r\njava.lang.NullPointerException\r\nAttempt to invoke virtual method 'int java.lang.Object.hashCode()' on a null object reference\r\n1\u00a0libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)\r\n2\u00a0java.util.HashMap.hash(HashMap.java:338)\r\n3\u00a0java.util.HashMap.containsKey(HashMap.java:595)\r\n4\u00a0java.util.HashSet.contains(HashSet.java:203)\r\n5\u00a0com.google.gson.internal.$Gson$Types.resolve(Unknown Source:16)\r\n6\u00a0com.google.gson.internal.$Gson$Types.resolve(Unknown Source:188)\r\n7\u00a0com.google.gson.internal.$Gson$Types.resolve(Unknown Source:5)\r\n8\u00a0com.google.gson.internal.$Gson$Types.getSupertype(Unknown Source:24)\r\n9\u00a0com.google.gson.internal.$Gson$Types.getCollectionElementType(Unknown Source:3)\r\n10\u00a0com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(Unknown Source:18)\r\n11\u00a0com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)\r\n12\u00a0com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:32)\r\n13\u00a0com.google.gson.Gson.getAdapter(Unknown Source:75)\r\n14\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source:38)\r\n15\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source:117)\r\n16\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source:22)\r\n17\u00a0com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)\r\n18\u00a0com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:162)\r\n19\u00a0com.google.gson.Gson.getAdapter(Unknown Source:75)\r\n20\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source:38)\r\n21\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source:117)\r\n22\u00a0com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source:22)\r\n23\u00a0com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)\r\n24\u00a0com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:162)\r\n25\u00a0com.google.gson.Gson.getAdapter(Unknown Source:75)\r\n26\u00a0com.google.gson.Gson.fromJson(Unknown Source:17)\r\n27\u00a0com.google.gson.Gson.fromJson(Unknown Source:4)\r\n28\u00a0com.google.gson.Gson.fromJson(Unknown Source:9)\r\n```\r\n =||= Please provide a solution to this exception if the issue is resolved or Reopen it please. =||= same problem for some users =||= @lll-01  Has this problem been resolved? It happens to me on version Gson 2.8.5  =||= I got this problem too.\r\n\r\nI'm sure that top-level String is not null, and the data was not corrupted.I just want to get an object from a specific json file which would not be changed.\r\n\r\nThis problem occurred occasionally. Is there any solutions or suggestions?\r\n@inder123  =||= I got the same problem too. It happens to me on version Gson 2.9.0 =||= ", 0], ["1300", "Removed the executable flag from clearly text files", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "04/26/18, 12:34:32 PM", "Removed the `x` flag from the text files:\r\n\r\n```shell\r\ngit ls-files \\\r\n    | xargs -I {} find {} -executable \\\r\n    | xargs chmod -x\r\n```", "NaN", ["1300", "Removed the executable flag from clearly text files", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "04/26/18, 12:34:32 PM", "Removed the `x` flag from the text files:\n\n```shell\ngit ls-files \\\n    | xargs -I {} find {} -executable \\\n    | xargs chmod -x\n```", "NaN"], ["Lyubomyr Shaydariv", "Removed the executable flag from clearly text files", "04/26/18, 07:23:15 AM", "Lyubomyr Shaydariv", "bdea5b9e99012eacf1a7f35f5f23733c9caf8a89", ["examples/android-proguard-example/AndroidManifest.xml", "gson/src/main/java/com/google/gson/JsonNull.java", "gson/src/main/java/com/google/gson/JsonParser.java", "gson/src/test/java/com/google/gson/GsonBuilderTest.java", "gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java"], "None, None, None, None, None, None, None, ", 0, 0, "\"modified, modified, modified, modified, modified, modified, modified, \"", 0], 1], ["1301", "Fixed excludes section in maven-compiler-plugin", "Inderjeet Singh", "inder123", "04/27/18, 10:30:36 PM", "NaN", "NaN", ["1301", "Fixed excludes section in maven-compiler-plugin", "Inderjeet Singh", "inder123", "04/27/18, 10:30:36 PM", "NaN", "NaN"], ["Inderjeet Singh", "Fixed excludes section in maven-compiler-plugin", "04/27/18, 10:29:53 PM", "Inderjeet Singh", "8f68101979309d50d0b3aeb6106d282be17ea740", ["pom.xml"], "@@ -65,7 +65,9 @@\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.7.0</version>\n           <configuration>\n-            <excludes>**/module-info.java</excludes>\n+            <excludes>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n             <source>${java.version}</source>\n             <target>${java.version}</target>\n           </configuration>, ", 3, 1, "\"modified, \"", 4], 1], ["1302", "Added gradle/Idea support", "Inderjeet Singh", "inder123", "04/30/18, 04:54:25 PM", "NaN", "NaN", ["1302", "Added gradle/Idea support", "Inderjeet Singh", "inder123", "04/30/18, 04:54:25 PM", "NaN", "NaN"], ["Inderjeet Singh", "Added gradle/Idea support", "04/28/18, 01:08:23 AM", "Inderjeet Singh", "a5d6683171c05ea8db1f80b268100d78614f4aa2", [".gitignore", "build.gradle", "gradle/wrapper/gradle-wrapper.jar", "gradle/wrapper/gradle-wrapper.properties", "gradlew", "gradlew.bat", "gson/build.gradle", "settings.gradle"], "@@ -13,4 +13,8 @@ release.properties\n *.iws\n classes\n \n+.gradle\n+local.properties\n+build\n+\n .DS_Store, @@ -0,0 +1,12 @@\n+buildscript {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+    }\n+}\n+, None, @@ -0,0 +1,6 @@\n+#Fri Apr 27 17:41:01 PDT 2018\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip, @@ -0,0 +1,172 @@\n+#!/usr/bin/env sh\n+\n+##############################################################################\n+##\n+##  Gradle start up script for UN*X\n+##\n+##############################################################################\n+\n+# Attempt to set APP_HOME\n+# Resolve links: $0 may be a link\n+PRG=\"$0\"\n+# Need this for relative symlinks.\n+while [ -h \"$PRG\" ] ; do\n+    ls=`ls -ld \"$PRG\"`\n+    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n+    if expr \"$link\" : '/.*' > /dev/null; then\n+        PRG=\"$link\"\n+    else\n+        PRG=`dirname \"$PRG\"`\"/$link\"\n+    fi\n+done\n+SAVED=\"`pwd`\"\n+cd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\n+APP_HOME=\"`pwd -P`\"\n+cd \"$SAVED\" >/dev/null\n+\n+APP_NAME=\"Gradle\"\n+APP_BASE_NAME=`basename \"$0\"`\n+\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS=\"\"\n+\n+# Use the maximum available, or set MAX_FD != -1 to use that value.\n+MAX_FD=\"maximum\"\n+\n+warn () {\n+    echo \"$*\"\n+}\n+\n+die () {\n+    echo\n+    echo \"$*\"\n+    echo\n+    exit 1\n+}\n+\n+# OS specific support (must be 'true' or 'false').\n+cygwin=false\n+msys=false\n+darwin=false\n+nonstop=false\n+case \"`uname`\" in\n+  CYGWIN* )\n+    cygwin=true\n+    ;;\n+  Darwin* )\n+    darwin=true\n+    ;;\n+  MINGW* )\n+    msys=true\n+    ;;\n+  NONSTOP* )\n+    nonstop=true\n+    ;;\n+esac\n+\n+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n+\n+# Determine the Java command to use to start the JVM.\n+if [ -n \"$JAVA_HOME\" ] ; then\n+    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+        # IBM's JDK on AIX uses strange locations for the executables\n+        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+    else\n+        JAVACMD=\"$JAVA_HOME/bin/java\"\n+    fi\n+    if [ ! -x \"$JAVACMD\" ] ; then\n+        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+    fi\n+else\n+    JAVACMD=\"java\"\n+    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+\n+Please set the JAVA_HOME variable in your environment to match the\n+location of your Java installation.\"\n+fi\n+\n+# Increase the maximum file descriptors if we can.\n+if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n+    MAX_FD_LIMIT=`ulimit -H -n`\n+    if [ $? -eq 0 ] ; then\n+        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n+            MAX_FD=\"$MAX_FD_LIMIT\"\n+        fi\n+        ulimit -n $MAX_FD\n+        if [ $? -ne 0 ] ; then\n+            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n+        fi\n+    else\n+        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n+    fi\n+fi\n+\n+# For Darwin, add options to specify how the application appears in the dock\n+if $darwin; then\n+    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin ; then\n+    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n+    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n+    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n+\n+    # We build the pattern for arguments to be converted via cygpath\n+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n+    SEP=\"\"\n+    for dir in $ROOTDIRSRAW ; do\n+        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n+        SEP=\"|\"\n+    done\n+    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n+    # Add a user-defined pattern to the cygpath arguments\n+    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n+        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n+    fi\n+    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n+    i=0\n+    for arg in \"$@\" ; do\n+        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n+        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n+\n+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n+            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n+        else\n+            eval `echo args$i`=\"\\\"$arg\\\"\"\n+        fi\n+        i=$((i+1))\n+    done\n+    case $i in\n+        (0) set -- ;;\n+        (1) set -- \"$args0\" ;;\n+        (2) set -- \"$args0\" \"$args1\" ;;\n+        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n+        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n+        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n+        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n+        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n+        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n+        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n+    esac\n+fi\n+\n+# Escape application args\n+save () {\n+    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n+    echo \" \"\n+}\n+APP_ARGS=$(save \"$@\")\n+\n+# Collect all arguments for the java command, following the shell quoting and substitution rules\n+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n+\n+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\n+if [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n+  cd \"$(dirname \"$0\")\"\n+fi\n+\n+exec \"$JAVACMD\" \"$@\", @@ -0,0 +1,84 @@\n+@if \"%DEBUG%\" == \"\" @echo off\n+@rem ##########################################################################\n+@rem\n+@rem  Gradle startup script for Windows\n+@rem\n+@rem ##########################################################################\n+\n+@rem Set local scope for the variables with windows NT shell\n+if \"%OS%\"==\"Windows_NT\" setlocal\n+\n+set DIRNAME=%~dp0\n+if \"%DIRNAME%\" == \"\" set DIRNAME=.\n+set APP_BASE_NAME=%~n0\n+set APP_HOME=%DIRNAME%\n+\n+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+set DEFAULT_JVM_OPTS=\n+\n+@rem Find java.exe\n+if defined JAVA_HOME goto findJavaFromJavaHome\n+\n+set JAVA_EXE=java.exe\n+%JAVA_EXE% -version >NUL 2>&1\n+if \"%ERRORLEVEL%\" == \"0\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:findJavaFromJavaHome\n+set JAVA_HOME=%JAVA_HOME:\"=%\n+set JAVA_EXE=%JAVA_HOME%/bin/java.exe\n+\n+if exist \"%JAVA_EXE%\" goto init\n+\n+echo.\n+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\n+echo.\n+echo Please set the JAVA_HOME variable in your environment to match the\n+echo location of your Java installation.\n+\n+goto fail\n+\n+:init\n+@rem Get command-line arguments, handling Windows variants\n+\n+if not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n+\n+:win9xME_args\n+@rem Slurp the command line arguments.\n+set CMD_LINE_ARGS=\n+set _SKIP=2\n+\n+:win9xME_args_slurp\n+if \"x%~1\" == \"x\" goto execute\n+\n+set CMD_LINE_ARGS=%*\n+\n+:execute\n+@rem Setup the command line\n+\n+set CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n+\n+@rem Execute Gradle\n+\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n+\n+:end\n+@rem End local scope for the variables with windows NT shell\n+if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n+\n+:fail\n+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\n+rem the _cmd.exe /c_ return code!\n+if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\n+exit /b 1\n+\n+:mainEnd\n+if \"%OS%\"==\"Windows_NT\" endlocal\n+\n+:omega, @@ -0,0 +1,13 @@\n+apply plugin: 'java'\n+apply plugin: 'maven'\n+\n+group = 'com.google.code.gson'\n+version = '2.8.4-SNAPSHOT'\n+\n+sourceCompatibility = 1.6\n+targetCompatibility = 1.6\n+\n+sourceSets.main.java.exclude(\"**/module-info.java\")\n+dependencies {\n+    testCompile \"junit:junit:4.12\"\n+}, @@ -0,0 +1 @@\n+include ':gson', ", 292, 0, "\"modified, added, added, added, added, added, added, added, \"", 292], 1], ["1303", "Added a test for deserialization of fields using lowercase-dot naming\u2026", "Inderjeet Singh", "inder123", "04/28/18, 01:54:49 AM", "\u2026 policy", "NaN", ["1303", "Added a test for deserialization of fields using lowercase-dot naming\u2026", "Inderjeet Singh", "inder123", "04/28/18, 01:54:49 AM", "\u2026 policy", "NaN"], ["Inderjeet Singh", "Added a test for deserialization of fields using lowercase-dot naming policy", "04/28/18, 01:54:07 AM", "Inderjeet Singh", "9664a3a2f0907fc2a1673817b91667b771d31f34", ["gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"], "@@ -70,6 +70,12 @@ public void testGsonWithLowerCaseDotPolicySerialization() {\n           + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n   }\n \n+  public void testGsonWithLowerCaseDotPolicyDeserialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DOTS).create();\n+    String target = \"{\\\"some.constant.string.instance.field\\\":\\\"someValue\\\"}\";\n+    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n+    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n+  }\n \n   public void testGsonWithLowerCaseDashPolicyDeserialiation() {\n     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();, ", 6, 0, "\"modified, \"", 6], 1], ["1305", "NoClassDefFoundError: sun.misc.Unsafe since version 2.8.3", "\u256d\u2229\u256e (\u00f2\u00d3,) \u256d\u2229\u256e", "cnsgithub", "05/01/18, 06:22:54 PM", "After upgrading gson to version 2.8.3 I receive a NoClassDefFoundError when starting up my WildFly 12 server.\r\n\r\n**Reproducer:**\r\n```java\r\npublic class Foo {\r\n   private static final Gson gson = new GsonBuilder().create();\r\n}\r\n```\r\n\r\n**Stacktrace:**\r\n```\r\nCaused by: java.lang.NoClassDefFoundError: sun/misc/Unsafe\r\n\tat com.google.gson//com.google.gson.internal.reflect.UnsafeReflectionAccessor.getUnsafeInstance(UnsafeReflectionAccessor.java:47)\r\n\tat com.google.gson//com.google.gson.internal.reflect.UnsafeReflectionAccessor.<init>(UnsafeReflectionAccessor.java:31)\r\n\tat com.google.gson//com.google.gson.internal.reflect.ReflectionAccessor.<clinit>(ReflectionAccessor.java:36)\r\n\tat com.google.gson//com.google.gson.internal.ConstructorConstructor.<init>(ConstructorConstructor.java:51)\r\n\tat com.google.gson//com.google.gson.Gson.<init>(Gson.java:205)\r\n\tat com.google.gson//com.google.gson.GsonBuilder.create(GsonBuilder.java:597)\r\n\tat deployment.Foo.ear//Foo.<clinit>(Foo.java:24)\r\n...\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:488)\r\n\tat java.base/java.lang.Class.newInstance(Class.java:558)\r\n\tat org.jboss.as.weld.common//org.jboss.as.weld.deployment.WeldPortableExtensions.tryRegisterExtension(WeldPortableExtensions.java:53)\r\n\tat org.jboss.as.weld//org.jboss.as.weld.deployment.processors.WeldPortableExtensionProcessor.loadAttachments(WeldPortableExtensionProcessor.java:119)\r\n\tat org.jboss.as.weld//org.jboss.as.weld.deployment.processors.WeldPortableExtensionProcessor.deploy(WeldPortableExtensionProcessor.java:79)\r\n\tat org.jboss.as.server@4.0.0.Final//org.jboss.as.server.deployment.DeploymentUnitPhaseService.start(DeploymentUnitPhaseService.java:144)\r\n\t... 8 more\r\n```\r\n\r\n**Workaround in WildFly 12 module.xml:**\r\n```xml\r\n<module xmlns=\"urn:jboss:module:1.1\" name=\"com.google.gson\">\r\n    <resources>\r\n        <resource-root path=\"gson-2.8.3.jar\"/>\r\n    </resources>\r\n    <dependencies>\r\n        <module name=\"sun.jdk\" export=\"true\" >\r\n            <imports>\r\n                <include path=\"sun/misc/Unsafe\" />\r\n            </imports>\r\n        </module>\r\n    </dependencies>   \r\n</module>\r\n```\r\n\r\n**Question:**\r\nWhy did gson introduce this weird dependency?\r", "Are you using Java 9? This code path gets exercised only for Java 9.\r\nThis stacktrace is harmless as we check whether Sun's Unsafe allocator is available. If unsafe allocator is not available, we use something else. \r\n\r\nI will remove this spurious stacktrace in the next release. =||= Fixed in Gson 2.8.4 through https://github.com/google/gson/pull/1306. \r\nPlease try it out and let me know if you still need the sun.misc.Unsafe dependency. =||= Yes, I am using Java 9.\r\n\r\nAnd I am not getting this stacktrace any longer with gson 2.8.4. Thanks for fixing and releasing it so quickly. =||= ", 0], ["1306", "If sun.misc.Unsafe not found on Java 9, try field.setAccessible", "Inderjeet Singh", "inder123", "05/01/18, 04:57:46 PM", "Also using Unsafe using reflection\r\nAlso removed exception traces when sun.misc.Unsafe or override are not found", "https://github.com/google/gson/issues/1305 =||= https://github.com/google/gson/issues/1216 =||= ", ["1306", "If sun.misc.Unsafe not found on Java 9, try field.setAccessible", "Inderjeet Singh", "inder123", "05/01/18, 04:57:46 PM", "Also using Unsafe using reflection\nAlso removed exception traces when sun.misc.Unsafe or override are not found", "NaN"], ["Inderjeet Singh", "Using sun.misc.Unsafe only through reflection to avoid binary dependency\n\nIf sun.misc.Unsafe not found on Java 9, try field.setAccessible\nAlso removed exception traces when sun.misc.Unsafe or override are not found", "04/30/18, 10:23:28 PM", "Inderjeet Singh", "ce4ab63bd960c79ec6529cba446fbb5d7773d6d7", ["gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java"], "@@ -25,12 +25,9 @@\n  */\n final class PreJava9ReflectionAccessor extends ReflectionAccessor {\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n     ao.setAccessible(true);\n   }\n-\n }, @@ -15,40 +15,63 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import sun.misc.Unsafe;\n-\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import com.google.gson.JsonIOException;\n \n /**\n  * An implementation of {@link ReflectionAccessor} based on {@link Unsafe}.\n  * <p>\n  * NOTE: This implementation is designed for Java 9. Although it should work with earlier Java releases, it is better to\n  * use {@link PreJava9ReflectionAccessor} for them.\n  */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n final class UnsafeReflectionAccessor extends ReflectionAccessor {\n \n-  private final Unsafe theUnsafe = getUnsafeInstance();\n+  private static Class unsafeClass;\n+  private final Object theUnsafe = getUnsafeInstance();\n   private final Field overrideField = getOverrideField();\n \n-  /**\n-   * {@inheritDoc}\n-   */\n+  /** {@inheritDoc} */\n   @Override\n   public void makeAccessible(AccessibleObject ao) {\n+    boolean success = makeAccessibleWithUnsafe(ao);\n+    if (!success) {\n+      try {\n+        // unsafe couldn't be found, so try using accessible anyway\n+        ao.setAccessible(true);\n+      } catch (SecurityException e) {\n+        throw new JsonIOException(\"Gson couldn't modify fields for \" + ao\n+          + \"\\nand sun.misc.Unsafe not found.\\nEither write a custom type adapter,\"\n+          + \" or make fields accessible, or include sun.misc.Unsafe.\", e);\n+      }\n+    }\n+  }\n+\n+  // Visible for testing only\n+  boolean makeAccessibleWithUnsafe(AccessibleObject ao) {\n     if (theUnsafe != null && overrideField != null) {\n-      long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n-      theUnsafe.putBoolean(ao, overrideOffset, true);\n+      try {\n+        Method method = unsafeClass.getMethod(\"objectFieldOffset\", Field.class);\n+        long overrideOffset = (Long) method.invoke(theUnsafe, overrideField);  // long overrideOffset = theUnsafe.objectFieldOffset(overrideField);\n+        Method putBooleanMethod = unsafeClass.getMethod(\"putBoolean\",  Object.class, long.class, boolean.class);\n+        putBooleanMethod.invoke(theUnsafe, ao, overrideOffset, true); // theUnsafe.putBoolean(ao, overrideOffset, true);\n+        return true;\n+      } catch (Exception ignored) { // do nothing\n+      }\n     }\n+    return false;\n   }\n \n-  private static Unsafe getUnsafeInstance() {\n+  private static Object getUnsafeInstance() {\n     try {\n-      Field unsafeField = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+      unsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+      Field unsafeField = unsafeClass.getDeclaredField(\"theUnsafe\");\n       unsafeField.setAccessible(true);\n-      return (Unsafe) unsafeField.get(null);\n+      return unsafeField.get(null);\n     } catch (Exception e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }\n@@ -57,7 +80,6 @@ private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n     } catch (NoSuchFieldException e) {\n-      e.printStackTrace();\n       return null;\n     }\n   }, @@ -0,0 +1,51 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal.reflect;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@link UnsafeReflectionAccessor}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class UnsafeReflectionAccessorTest {\n+\n+  @Test\n+  public void testMakeAccessibleWithUnsafe() throws Exception {\n+    UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+    Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+    try {\n+      boolean success = accessor.makeAccessibleWithUnsafe(field);\n+      assertTrue(success);\n+    } catch (Exception e) {\n+      fail(\"Unsafe didn't work on the JDK\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithPrivateFinalFields {\n+    private final String a;\n+    public ClassWithPrivateFinalFields(String a) {\n+      this.a = a;\n+    }\n+  }\n+}, ", 87, 17, "\"modified, modified, added, \"", 104], 1], ["1308", "HO to handle &, $, + Special characters in GSON", null, "AdityaBendre", "05/02/18, 01:54:42 PM", "Please suggest me how can we handle &, $, + Special characters in GSON API", "Please ask general usage questions on StackOverflow with the 'gson' tag. This issue tracker is for bug reports and feature requests. =||= ", 0], ["1309", "Deserialization of java.time.OffsetDateTime with zero time offset", null, "smile18", "05/03/18, 01:10:42 AM", "When serializing / deserializing an object with the java.time.OffsetDateTime  API, the results are diferent from expected if zero sec are given.\r\n\r\nFor excample, here's a  java.time.OffsetDateTime serialized with gson (using version 2.8.0):\r\n @SerializedName(\"orderTime\")\r\n private OffsetDateTime orderTime = null;\r\n\r\n\r\n\"orderTime\":\"2018-05-02T14:23:00Z\" \r\n\r\nbut I get the value as 2018-05-02T14:23Z where I should get the value as 2018-05-02T14:23:00Z", "`java.time` APIs are not supported by Gson's built-in date format configuration. We generally regard that as a mistake. For all types in `java.time` you should register your own type adapter which uses the type's public API to serialize to and from the JSON primitives. =||= @smile18 we would love to have your contribution for java.time TypeAdapter in gson-extras project =||= ", 0], ["1310", "ExceptionInInitializerError when using Java 9 on Debian", "Andy Wilkinson", "wilkinsona", "05/09/18, 08:10:26 PM", "`VersionUtils`, introduced in [this commit](https://github.com/google/gson/commit/0aaf5ff408a54eb7dc238d3569b5d1cef9273047), makes some assumptions about the format of the `java.version` system property that do not always hold true. For example, when using Java 9 on Debian, the following failure occurs:\r\n\r\n```\r\njava.lang.ExceptionInInitializerError\r\n\tat com.google.gson.internal.reflect.ReflectionAccessor.<clinit>(ReflectionAccessor.java:36)\r\n\tat com.google.gson.internal.ConstructorConstructor.<init>(ConstructorConstructor.java:51)\r\n\tat com.google.gson.Gson.<init>(Gson.java:205)\r\n\tat com.google.gson.GsonBuilder.create(GsonBuilder.java:597)\r\n\tat org.springframework.boot.json.GsonJsonParser.<init>(GsonJsonParser.java:40)\r\n\tat org.springframework.boot.json.GsonJsonParserTests.getParser(GsonJsonParserTests.java:28)\r\n\tat org.springframework.boot.json.AbstractJsonParserTests.<init>(AbstractJsonParserTests.java:40)\r\n\tat org.springframework.boot.json.GsonJsonParserTests.<init>(GsonJsonParserTests.java:24)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:488)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)\r\nCaused by: java.lang.NumberFormatException: For input string: \"9-Debian\"\r\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\r\n\tat java.base/java.lang.Integer.parseInt(Integer.java:652)\r\n\tat java.base/java.lang.Integer.parseInt(Integer.java:770)\r\n\tat com.google.gson.util.VersionUtils.determineMajorJavaVersion(VersionUtils.java:28)\r\n\tat com.google.gson.util.VersionUtils.<clinit>(VersionUtils.java:24)\r\n\t... 32 more\r\n```", "Thanks for the bug report. If you have a proposed solution, please share or send a PR. \r\nOtherwise, we will figure out how to address it.  =||= Fixed in https://github.com/google/gson/pull/1311 =||= ", 0], ["1311", "Fixed https://github.com/google/gson/issues/1310", "Inderjeet Singh", "inder123", "05/09/18, 08:10:09 PM", "Also renamed VersionUtils to more readable abstraction JavaVersion\r\nAdded support for debian naming convention\r\nUsing min supported version (6) as the default if JDK version can't be figured out", "@JakeWharton  can you take another look?  =||= @JakeWharton merging. Please review and send me feedback, and I will incorporate it in another PR =||= ", ["1311", "Fixed https://github.com/google/gson/issues/1310", "Inderjeet Singh", "inder123", "05/09/18, 08:10:09 PM", "Also renamed VersionUtils to more readable abstraction JavaVersion\nAdded support for debian naming convention\nUsing min supported version (6) as the default if JDK version can't be figured out", "NaN"], ["Inderjeet Singh", "Moved JavaVersion to an internal package", "05/07/18, 09:17:35 PM", "Inderjeet Singh", "15965c278bd54ab8d207bef5b57761873d89649e", ["gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/JavaVersion.java", "gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java", "gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java", "gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/ObjectTest.java", "gson/src/test/java/com/google/gson/internal/JavaVersionTest.java"], "@@ -27,12 +27,12 @@\n import java.util.List;\n import java.util.Locale;\n \n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.JavaVersion;\n \n /**\n  * This type adapter supports three subclasses of date: Date, Timestamp, and, @@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package com.google.gson.util;\n+package com.google.gson.internal;\n \n /**\n  * Utility to check the major Java version of the current JVM., @@ -20,13 +20,13 @@\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.TypeAdapterFactory;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.internal.PreJava9DateFormatProvider;\n import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import com.google.gson.util.JavaVersion;\n \n import java.io.IOException;\n import java.text.DateFormat;, @@ -15,10 +15,10 @@\n  */\n package com.google.gson.internal.reflect;\n \n-import com.google.gson.util.JavaVersion;\n-\n import java.lang.reflect.AccessibleObject;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Provides a replacement for {@link AccessibleObject#setAccessible(boolean)}, which may be used to\n  * avoid reflective access issues appeared in Java 9, like {@link java.lang.reflect.InaccessibleObjectException}, @@ -23,7 +23,8 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import com.google.gson.util.JavaVersion;\n+import com.google.gson.internal.JavaVersion;\n+\n import junit.framework.TestCase;\n \n /**, @@ -27,6 +27,7 @@\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n@@ -56,7 +57,6 @@\n import java.util.TreeSet;\n import java.util.UUID;\n \n-import com.google.gson.util.JavaVersion;\n import junit.framework.TestCase;\n \n /**, @@ -33,6 +33,7 @@\n import com.google.gson.common.TestTypes.ClassWithTransientFields;\n import com.google.gson.common.TestTypes.Nested;\n import com.google.gson.common.TestTypes.PrimitiveArray;\n+import com.google.gson.internal.JavaVersion;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n@@ -44,7 +45,6 @@\n import java.util.Map;\n import java.util.TimeZone;\n \n-import com.google.gson.util.JavaVersion;\n import junit.framework.TestCase;\n \n /**, @@ -13,12 +13,14 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package com.google.gson.util;\n+package com.google.gson.internal;\n \n import static org.junit.Assert.*;\n \n import org.junit.Test;\n \n+import com.google.gson.internal.JavaVersion;\n+\n /**\n  * Unit and functional tests for {@link JavaVersion}\n  *, ", 12, 9, "\"modified, renamed, modified, modified, modified, modified, modified, renamed, \"", 21], 1], ["1312", "Expected BEGIN_OBJECT but was NUMBER", null, "jingchangfa", "05/08/18, 06:01:01 PM", "![image](https://user-images.githubusercontent.com/19325158/39755912-1d94df1e-52fa-11e8-9acf-4f41a72e975b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/19325158/39755958-3f76b120-52fa-11e8-840c-5e9a85be3f0d.png)", "This is not a bug in Gson but a data mismatch between your JSON and your model object. Your model expects an object but the JSON had a number. =||= ", 0], ["1314", "Hibernate", null, "airtonct", "05/09/18, 05:39:25 PM", "Does gson already have support for hibernate?", "You can use Gson with Hibernate but there's no specific integration. =||= ", 0], ["1315", "Move module-info.java to /src/main/java", null, "cayhorstmann", "10/18/18, 03:49:27 PM", "To build gson as a JPMS module, the `module-info.java` file needs to be in `src/main/java`, not in `src/main/java/com.google.gson`. \r\n\r\nI checked [https://guides.gradle.org/building-java-9-modules/](https://guides.gradle.org/building-java-9-modules/) for confirmation.\r\n\r\nWith that change, and with these changes in build.gradle, the JAR builds fine as a modular JAR.\r\n\r\n```\r\nsourceCompatibility = 9\r\ntargetCompatibility = 9\r\n// sourceSets.main.java.exclude(\"**/module-info.java\")\r\n```", "Yeah, today I lost some time to figure out why I had to `require gson` instead of `require com.google.gson` (as specified in the module-info.java file). \r\n\r\nAs it stands right now, I don't believe the [module-info.java](https://github.com/google/gson/blob/master/gson/src/main/java/com.google.gson/module-info.java) file is actually used. =||= That's normal--_you_ don't use the module-info.java. But if _I_ want to use gson as a modular JAR because my app is modular, it needs to be in the right place.  =||= @cayhorstmann you are almost right I think, except for the Gradle part, since this project seems to use both Maven and Gradle for build automation.\r\n\r\nI made this work locally by doing the following:\r\n\r\n- Move `module-info.java` to `src/main/java` (in the `gson` module directory)\r\n- Set the `java.version` property for the `gson-parent` pom from `1.6` to `9`.\r\n- Set the `biz.aQute.bnd` plugin's version from `3.1.0` to `4.0.0`.\r\n\r\nThen after running\r\n\r\n```bash\r\nmvn clean install -DskipTests=true\r\n```\r\n\r\nfrom the root of the project I could require the `requires com.google.gson` module in my project. For gson to work, you also need to open up your module, so gson's reflection magic can do its work:\r\n\r\n```java\r\nmodule com.internetofdrums.api.web {\r\n\r\n    requires com.google.gson;\r\n\r\n    opens com.internetofdrums.api.web.view to com.google.gson;\r\n}\r\n```\r\n\r\nI can now even use `jlink` to make a trimmed image of my app, which was my goal in the first place.\r\n\r\nI'm gonna find out how to make a pull request for this. =||= I've create a pull request: https://github.com/google/gson/pull/1401 =||= This solution targets Java 9 and up, I'll come up with a fix to support 1.6 and up later. =||= It's possible to target an older version of Java (e.g. 1.6) while also providing module information: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html =||= Okay, another pull request, this time ensuring backwards compatibility up until Java 1.6: https://github.com/google/gson/pull/1402 =||= Will this fix be released soon? I had to update my JavaFX projects to Java 11 because of the removal of FX out of the JDK and the old program therefore no longer executing on the newer JDK. But now I'm unable to package it using jlink because Gson 2.8.5 isn't modular yet. =||= \ud83d\udc4b Does anyone know when this fix is anticipated to be available in a release? =||= So will it be a thing one day or not?\r\nStill no modular jar on maven. =||= You could build it yourself... I waited for it for like 6 months, and I needed it because of jlink. =||= This was resolved almost 1 year ago yet there is still no release. Considering we're on a stable Java 12 release and some running Java 14 pre-builds and modularity should have been completely adopted by Java 11, can we please at least get a release addressing this issue? Even if it's a minor release, 2.8.5.1. For projects where automatic modules aren't an option (jlink for instance), it's an inconvenience. =||= The solution is easy. Do not use Gson, or anything else from Google. =||= The problem is current, jlink + Java 11 =||= @microwin7 , I've just tested and version `2.8.8` works for me. The module name is `com.google.gson`.\r\n\r\npom.xml:\r\n```\r\n...\r\n<dependencies>\r\n    <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->\r\n    <dependency>\r\n      <groupId>com.google.code.gson</groupId>\r\n      <artifactId>gson</artifactId>\r\n      <version>2.8.8</version>\r\n    </dependency>\r\n</dependencies>\r\n...\r\n```\r\n\r\nmodule-info.java:\r\n```\r\nmodule my_module {\r\n  requires com.google.gson;\r\n}\r\n``` =||= ", 0], ["1318", "Expose a FieldNamingPolicy renaming method", "Matthew Haughton", "3flex", "01/11/20, 07:43:40 AM", "I'm working on an enhancement for auto-value-gson (https://github.com/rharter/auto-value-gson/pull/124) which adds the feature of allowing FieldNamingStrategy to be set to a FieldNamingPolicy and taking care of renaming the field within a generated TypeAdapter. Right now setting a FieldNamingStrategy on GsonBuilder has no effect when auto-value-gson is used.\r\n\r\nThe methods used to rename fields in FieldNamingPolicy are package-private so I've reimplemented those methods in auto-value-gson. To avoid using reflection the FieldNamingPolicy methods are copied into every TypeAdapter, then FieldNamingStrategy is checked to see if FieldNamingPolicy was used, then the reimplemented methods are called to rename the fields in the TypeAdapter.\r\n\r\nProblems with this approach:\r\n* methods are copied to every TypeAdapter, even though they may not be used, since we don't know at compile time which FieldNamingStrategy will be used (could be avoided by having a runtime dependency on a new auto-value-gson runtime artifact like dagger does with dagger & dagger-compiler, but that could be a disruptive change)\r\n* any behaviour change within Gson has to be reimplemented in auto-value-gson\r\n* new built-in field naming policies like FieldNamingPolicy.LOWER_CASE_WITH_DOTS have to be manually reimplemented in auto-value-gson\r\n\r\nIf a method in Gson were exposed allowing Gson's FieldNamingPolicy to be used directly this would remove the need to replicate the code in auto-value-gson, as well as every generated TypeAdapter.", "I am not sure I understand fully. May be share an example, or send a PR that will make the change?  =||= When UPPER_CAMEL_CASE is the FieldNamingPolicy being used, the field is renamed from \"lowerCamel\" in Java to \"LowerCamel\" in JSON.\r\n\r\nauto-value-gson (a-v-g) creates type adapters to avoid using reflection. When the code generation step occurs, a-v-g looks at the Java class and creates a type adapter that supports this renaming. Because the FieldNamingPolicy can be chosen at runtime, the type adapter has to support all of the same renaming methods that Gson supports, and allow any of them to be used at runtime.\r\n\r\nBecause the methods are private in Gson, all the methods have to be reimplemented in the generated typeadapter itself - see this block from the tests (it's checking the required methods are included in the generated type adapter): https://github.com/rharter/auto-value-gson/pull/124/files#diff-8e4502416b2612f664d2027e125a54f6R512 =||= ", 0], ["1319", "change the field value 7 to 7%", "EHappy", "LennyYi", "05/14/18, 01:37:38 PM", "[\r\n{\r\n.......\r\n\"prTaxCode\":\"TH_I_SID_DOM_S\"\r\n\"prTaxRate\":\"7\",\r\n...\r\n}\r\n].\r\nI build a class named  \"IbuySystem\"   for this json. This class has 30-40 fields,but I just want change prTaxRate value  to 7%,Please tell me how can I code \uff1f", "I\u2018m try   (IbuySystemAdapter)TypeAdapter but\uff0cothers field I don\u2018t want write one by one\uff0cbecause others fields I don\u2019t want change\u3002  =||= This issue tracker is for bug reports and feature requests only. For general usage questions, please as on StackOverflow with the 'gson' tag or on Gson's mailing list. =||= ", 0], ["1321", "Issue 1242: Printing Gson version when throwing AssertionError and Il\u2026", "Inderjeet Singh", "inder123", "05/17/18, 04:41:21 PM", "\u2026legalArgumentException\r\n\r\nOn some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.\r\nFor those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue.", "@swankjesse @JakeWharton @joel-leitch \r\nI would like to include this PR into the new build 2.8.5. This will help us isolate problems in specific versions of Gson. =||= ", ["1321", "Issue 1242: Printing Gson version when throwing AssertionError and Il\u2026", "Inderjeet Singh", "inder123", "05/17/18, 04:41:21 PM", "\u2026legalArgumentException\n\nOn some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.\nFor those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue.", "NaN"], ["Inderjeet Singh", "Issue 1242: Printing Gson version when throwing AssertionError and IllegalArgumentException\n\nOn some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.\nFor those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue.", "05/15/18, 10:28:00 PM", "Inderjeet Singh", "6df4c824bfcf63686d8c9505aeea945ad9879e51", ["gson/pom.xml", "gson/src/main/java-templates/com/google/gson/internal/GsonBuildConfig.java", "gson/src/main/java/com/google/gson/Gson.java", "gson/src/test/java/com/google/gson/functional/GsonVersionDiagnosticsTest.java", "gson/src/test/java/com/google/gson/internal/GsonBuildConfigTest.java"], "@@ -17,7 +17,7 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n-\n+ \n   <build>\n     <plugins>\n       <plugin>\n@@ -56,6 +56,23 @@\n         <groupId>org.apache.felix</groupId>\n         <artifactId>maven-bundle-plugin</artifactId>\n       </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>templating-maven-plugin</artifactId>\n+        <version>1.0.0</version>\n+        <executions>\n+          <execution>\n+            <id>filtering-java-templates</id>\n+            <goals>\n+              <goal>filter-sources</goal>\n+            </goals>\n+            <configuration>\n+              <sourceDirectory>${basedir}/src/main/java-templates</sourceDirectory>\n+              <outputDirectory>${project.build.directory}/generated-sources/java-templates</outputDirectory>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -0,0 +1,30 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal;\n+\n+/**\n+ * Build configuration for Gson. This file is automatically populated by\n+ * templating-maven-plugin and .java/.class files are generated for use in Gson.\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class GsonBuildConfig {\n+  // Based on https://stackoverflow.com/questions/2469922/generate-a-version-java-file-in-maven\n+\n+  /** This field is automatically populated by Maven when a build is triggered */\n+  public static final String VERSION = \"${project.version}\";\n+}, @@ -37,6 +37,7 @@\n \n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n+import com.google.gson.internal.GsonBuildConfig;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.Streams;\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n@@ -461,7 +462,7 @@ static void checkValidFloatingPoint(double value) {\n           return candidate;\n         }\n       }\n-      throw new IllegalArgumentException(\"GSON cannot handle \" + type);\n+      throw new IllegalArgumentException(\"GSON (\" + GsonBuildConfig.VERSION + \") cannot handle \" + type);\n     } finally {\n       threadCalls.remove(type);\n \n@@ -703,6 +704,8 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE\n       ((TypeAdapter<Object>) adapter).write(writer, src);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -779,6 +782,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n       Streams.write(jsonElement, writer);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -935,6 +940,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n     } catch (IOException e) {\n       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n+    } catch (AssertionError e) {\n+      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage(), e);\n     } finally {\n       reader.setLenient(oldLenient);\n     }, @@ -0,0 +1,96 @@\n+/*\n+ * Copyright (C) 2018 Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.functional;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests to validate printing of Gson version on AssertionErrors\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class GsonVersionDiagnosticsTest extends TestCase {\n+  private static final Pattern GSON_VERSION_PATTERN = Pattern.compile(\"(\\\\(GSON \\\\d\\\\.\\\\d\\\\.\\\\d)(?:[-.][A-Z]+)?\\\\)$\");\n+\n+  private Gson gson;\n+\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().registerTypeAdapter(TestType.class, new TypeAdapter<TestType>() {\n+      @Override public void write(JsonWriter out, TestType value) {\n+        throw new AssertionError(\"Expected during serialization\");\n+      }\n+      @Override public TestType read(JsonReader in) throws IOException {\n+        throw new AssertionError(\"Expected during deserialization\");\n+      }\n+    }).create();\n+  }\n+\n+  @Test\n+  public void testVersionPattern() {\n+    assertTrue(GSON_VERSION_PATTERN.matcher(\"(GSON 2.8.5)\").matches());\n+    assertTrue(GSON_VERSION_PATTERN.matcher(\"(GSON 2.8.5-SNAPSHOT)\").matches());\n+  }\n+\n+  @Test\n+  public void testAssertionErrorInSerializationPrintsVersion() {\n+    try {\n+      gson.toJson(new TestType());\n+      fail();\n+    } catch (AssertionError expected) {\n+      ensureAssertionErrorPrintsGsonVersion(expected);\n+    }\n+  }\n+\n+  @Test\n+  public void testAssertionErrorInDeserializationPrintsVersion() {\n+    try {\n+      gson.fromJson(\"{'a':'abc'}\", TestType.class);\n+      fail();\n+    } catch (AssertionError expected) {\n+      ensureAssertionErrorPrintsGsonVersion(expected);\n+    }\n+  }\n+\n+  private void ensureAssertionErrorPrintsGsonVersion(AssertionError expected) {\n+    String msg = expected.getMessage();\n+    // System.err.println(msg);\n+    int start = msg.indexOf(\"(GSON\");\n+    assertTrue(start > 0);\n+    int end = msg.indexOf(\"):\") + 1;\n+    assertTrue(end > 0 && end > start + 6);\n+    String version = msg.substring(start, end);\n+    // System.err.println(version);\n+    assertTrue(GSON_VERSION_PATTERN.matcher(version).matches());\n+  }\n+\n+  private static final class TestType {\n+    @SuppressWarnings(\"unused\")\n+    String a;\n+  }\n+}, @@ -0,0 +1,33 @@\n+/*\n+ * Copyright (C) 2018 The Gson authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Unit tests for {@code GsonBuildConfig}\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public class GsonBuildConfigTest {\n+\n+  @Test\n+  public void testEnsureGsonBuildConfigGetsUpdatedToMavenVersion() {\n+    assertFalse(\"${project.version}\".equals(GsonBuildConfig.VERSION));\n+  }\n+}, ", 185, 2, "\"modified, added, modified, added, added, \"", 187], 1], ["1322", "Use java.class.version to detect Java version (#1316)", "Kai Burjack", "httpdigest", "05/16/18, 05:52:22 PM", "It has a much more consistent format compared to java.version and\r\ntherefore does not require to handle all corner cases of JVMs reporting\r\nthe Java version in any arbitrary way they want.\r\n\r\nThis also makes the JavaVersionTest somewhat obsolete, since no\r\nactual parsing is necessary anymore.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= > We should use multi-release jars to check Runtime.Version on Java 9 or newer which is the only actually supported mechanism for doing this.\r\n\r\nAlright. Fine by me. Closing then. =||= ", 0], ["1324", "Private constructor", "Joel Leitch", "joel-leitch", "05/22/18, 03:04:23 AM", "Add private constructors to utility classes and update the release process.", "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_author_cla --> =||= ", ["1324", "Private constructor", "Joel Leitch", "joel-leitch", "05/22/18, 03:04:23 AM", "Add private constructors to utility classes and update the release process.", "NaN"], ["Joel Leitch", "Remove obsolete step", "05/22/18, 03:00:15 AM", "Joel Leitch", "d7db0abf2c244b092de7bd41923f91ca19165eda", ["ReleaseProcess.md"], "@@ -3,7 +3,6 @@\n The following is a step-by-step procedure for releasing a new version of Google-Gson.\n \n 1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n-1. (obsolete step) Edit [`pom.xml`](pom.xml) and update the versions listed for Export-Package to the target version. Also add any new Java packages that have been introduced in Gson.\n 1. Ensure all changelists are code-reviewed and have +1\n 1. `cd gson` to the parent directory; ensure there are no open files and all changes are committed.\n 1. Run `mvn release:clean`, ", 0, 1, "\"modified, \"", 1], 1], ["1325", "Non-blocking JsonReader", "Jason Pickens", "steinybot", "05/24/18, 03:43:05 AM", "It would be really nice if there was a non-blocking reader which would return a result that either contains a valid token or some information about what happened (e.g. underflow). [CharsetDecoder](https://docs.oracle.com/javase/8/docs/api/java/nio/charset/CharsetDecoder.html) is a good example of the desired semantics.\r\n\r\nI want to use this with an implementation of JEP-266 (akka-streams) which means I need to backpressure when there are not enough characters rather than block in the Reader.", "Never mind I'm not sure there is much point having this in gson. I'm probably better off just using Jackson instead since it has async support and the low level tokens I would need. =||= What about Kotlin Coroutine support with cancellation benefit? =||= ", 0], ["1327", "Parse empty JSON array, the result is null when generating signed APK.", "\uc8fc\uc7ac\ud638", "JaehoJu", "05/24/18, 01:51:50 PM", "I use Kotlin, Android.\r\n\r\n```\r\nval dataString = GsonBuilder().create().fromJson(\"\"\"\r\n{\"friends\":[],\"money\":null}\r\n\"\"\", Animal::class.java)\r\nLog.d(\"ABC\", \"log=$dataString\")\r\n```\r\n\r\nResult from above code:\r\nrelease APK - Animal(friends=null, money=null)\r\nRun - Animal(firends=[], money=null)\r\n\r\nWhy this behavior is different. I can't find reasons or clues.\r", "Behavior differences between variants means that your build configuration is causing a problem. This isn't a problem with Gson itself. Since we know nothing about your build system or its configuration we are ill-suited to help. I would suggest asking your question on StackOverflow with the 'gson' tag and including more information about your build system configuration since that is where the behavioral difference is being created. =||= ", 0], ["1328", "Invalid date format when using a date as a mapping key", "\u0421\u0442\u0430\u043d\u0438\u0441\u043b\u0430\u0432 \u0410\u0433\u0430\u0440\u043a\u043e\u0432", "agarkoff", "05/27/18, 08:15:55 AM", "    public static void main(String[] args) {\r\n        Date d = new Date();\r\n        Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssz\").create();\r\n        System.out.println(gson.toJson(d));\r\n        Map<Date, String> map = new LinkedHashMap<>();\r\n        map.put(new Date(), \"Hello\");\r\n        System.out.println(gson.toJson(map));\r\n    }\r\n\r\n\"2018-05-27T10:09:46MSK\"\r\n{\r\n  \"Sun May 27 10:09:46 MSK 2018\": \"Hello\"\r\n}", "Duplicate #538 \r\nIt is solved using the method enableComplexMapKeySerialization. =||= ", 0], ["1329", "NoSuchMethodException on Android 4.2.2", "Gaurav Arora", "gauravarora90", "05/28/18, 03:59:46 PM", "[Here is my complete question. \r\n](https://stackoverflow.com/questions/50565875/gson-nosuchmethodexception-for-android-4-2-2-devices)\r\n\r\nI am using latest gson library version", "No need to cross post =||= @JakeWharton. Can you pls update ? Why my issue is closed. ? =||= We are now experiencing the exact same problem.\r\nHere are crash reports on Crashlytics:\r\n[http://crashes.to/s/c226c112c6b](http://crashes.to/s/c226c112c6b)\r\n[http://crashes.to/s/c226c112c6b](http://crashes.to/s/591ae5372f4)\r\nNeed to mention that all of the models are using empty constructors as:\r\n\r\n    public class MessageNotification {\r\n        public MessageNotification() {}\r\n    }\r\n\r\nAny help would be appreciated. =||= ", 0], ["1330", "README.md Updated dependency examples to version 2.8.5", "Christian Schwarz", "ChristianSchwarz", "06/07/18, 01:14:47 AM", "NaN", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= CLA: I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1330", "README.md Updated dependency examples to version 2.8.5", "Christian Schwarz", "ChristianSchwarz", "06/07/18, 01:14:47 AM", "NaN", "NaN"], ["Christian Schwarz", "Updated dependency examples to version 2.8.5", "06/06/18, 01:29:56 PM", "GitHub", "9c4c7d26287fa44d5d12910e0529553d6107c11d", ["README.md"], "@@ -20,7 +20,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n   * To use Gson in Android\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.4'\n+    implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n \n@@ -30,7 +30,7 @@ dependencies {\n <dependency>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson</artifactId>\n-    <version>2.8.4</version>\n+    <version>2.8.5</version>\n </dependency>\n ```\n , ", 2, 2, "\"modified, \"", 4], 1], ["1332", "Get member value as a string - helper method", "Philip Whitehouse", "philipwhiuk", "06/06/18, 07:28:49 PM", "This is a proposal for adding helper methods that remove boiler plate when getting values from objects.\r\n\r\nObviously it needs tests and probably other similar helpers for other value types, but I'm interested in feedback on the approach.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= This would then open the door for more convenience methods like getAsInt, getAsBoolean, etc.\r\nThat's too much overhead for little benefit. =||= Let's keep the discussion in #1291  =||= ", 0], ["1333", "[Question] [Performance?] JSONPrimitive constructor performance", "Lucas Nelaupe", "lucas34", "06/23/18, 10:13:45 AM", "Hi\r\n\r\nShort question\r\n---\r\n Why `JsonPrimitive(true)` is calling `setValue()` method instead of assigning directly the value to the instance variable `value ` ?\r\n\r\nDescription\r\n---\r\nI'm reading `JsonPrimitive` code and I'm a bit confuse with the implementation.\r\nIf I call `JsonPrimitive(true)`, it will call the first constructor and immediately delegate to `setValue(Object primitive)` method.\r\nThen `setValue` will do a series of `instanceOf` such as `primitive instanceof Character` and `primitive instanceof Number` then call isPrimitiveOrString() and so on.\r\n\r\nIs there any specific reason why you don't do:\r\n```\r\n  public JsonPrimitive(Boolean bool) {\r\n    value = bool;\r\n  }\r\n```\r", "NaN", 0], ["1334", "Extract getContainerElementType() method in $Gson$Types", "Tomasz Linkowski", "tlinkowski", "07/20/18, 09:44:32 PM", "Currently, `$Gson$Types` class contains the following public method:\r\n```\r\npublic static Type getCollectionElementType(Type context, Class<?> contextRawType)\r\n```\r\n\r\nThis method works like a charm for all kind of `Collection`s but it is unnecessarily fixed to work only on `Collection`s, and it cannot be applied to work on other `Iterable`s (e.g. on `Stream`s, or any other type of containers that do not implement `Collection`).\r\n\r\nI suggest extracting from this method a method like:\r\n```\r\npublic static Type getContainerElementType(Type context, Class<?> contextRawType, Class<?> containerSupertype) {\r\n  Type containerType = getSupertype(context, contextRawType, containerSupertype);\r\n\r\n  if (containerType instanceof WildcardType) {\r\n    containerType = ((WildcardType) containerType).getUpperBounds()[0];\r\n  }\r\n  if (containerType instanceof ParameterizedType) {\r\n    return ((ParameterizedType) containerType).getActualTypeArguments()[0];\r\n  }\r\n  return Object.class;\r\n}\r\n```\r\nand rewrite `getCollectionElementType` as:\r\n```\r\npublic static Type getCollectionElementType(Type context, Class<?> contextRawType) {\r\n  return getContainerElementType(context, contextRawType, Collection.class);\r\n}\r\n```\r\n\r\nPS. I came upon this issue when trying to implement a `TypeAdapterFactory` for `Stream`s - see https://stackoverflow.com/questions/50881488/is-it-possible-to-pass-a-java-util-stream-to-gson/50895699#50895699", "This method isn't for public use though. =||= I understand - the package with the \"internal\" keyword (`com.google.gson.internal`) and the class name with dollar signs (`$Gson$Types`) clearly tells it's not an API that you want your users to rely on (or even use at all). I guess that if the library were modularized, this entire package wouldn't be exported.\r\n\r\nOn the other hand, when you look at #1335, you'll see that it's not possible to implement a reliable generic interface-based `TypeAdapterFactory` without resorting to this class. So maybe you could consider providing this one method (`getContainerElementType`) in a public API?\r\n\r\nOr you could simply provide such public method in `$Gson$Types` (as I proposed in this issue) which would mean: \"This is internal API. It may change anytime without prior notice. Use at your own risk if you must.\" =||= @tlinkowski  We don't want you to use an internal class as a binary dependency. Please copy it over and change it to suit your needs.  =||= Fair enough.\r\n\r\nI wonder, however, what you are going to do about the `Multiset` example in `TypeAdapterFactory`s JavaDoc (#1335) because I cannot see a way to make it work without resorting to `$Gson$Types.getCollectionElementType`. =||= ", 0], ["1336", "Java 8 time jsr310 support", "Andrea Santi", "thedarkdestructor", "06/20/18, 12:51:21 PM", "Gson do **NOT** support jsr310 out of the box. To the best of my knowledge there is no ufficial support for the new Java 8 API.\r\n\r\nI am well awere that there are already two similiar tickets (#878 and #739) however they are old and not \"really\" solved. \r\n\r\nJackson has its [dedicated serializer and de-serializer](https://github.com/FasterXML/jackson-modules-java8), I know that for Gson we have serveral community-driven projects that do the same (e.g. [this one](https://github.com/gkopff/gson-javatime-serialisers))\r\n\r\n**I'm sincerly really frustrated that a library like gson do not have yet an official support for deadling with stardard Java 8 date and time object**s. For me is a key feature: in almost all applications there is the need to deal with a date or a datetime, so I expect the serialzier/deserializers to be there...\r\n\r\nAm I missing something here?\r\n\r", "#739 is still open so you should voice your support there. =||= ", 0], ["1337", "Add possibility to maintain type variable in created pojo", "Luca Taddeo", "lucalas", "06/28/18, 07:59:26 AM", "Instead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.", "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_author_cla --> =||= Used wrong account to commit.\r\nI'll recheck and add new pull request. =||= ", 0], ["1340", "Exception while using fromJson(String json, Class<T> classOfT). I'm using gson library 2.8.5 ", "Ashutosh Kumar Gupta", "ashutoshcp", "07/01/18, 07:06:28 AM", "com.google.gson.JsonSyntaxException: duplicate key: null\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:190)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:927)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:892)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:841)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:813)\r\nex.getMessage(): duplicate key: null\r\nex.getCause(): null", "I resolved this.  =||= ", 0], ["1341", "Less Fields than JSON", "viper111", "viper619", "07/01/18, 12:58:32 PM", "Hi,\r\n    I'm using GSON to convert JSON to JAVA POJO. But I want to have less number of fields than it is in JSON. so if it is possible how will it be converted? Or do I need same number of fields in POJO as well?", "Thanks for your question. This issue tracker is only for bug reports with test cases and feature requests. Please ask usage questions on Stack Overflow.\r\nhttps://stackoverflow.com/questions/tagged/gson =||= ", 0], ["1342", "Add possibility to maintain type variable in created pojo", "Luca Taddeo", "lucalas", "07/20/18, 09:34:46 PM", "Instead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.", "NaN", ["1342", "Add possibility to maintain type variable in created pojo", "Luca Taddeo", "lucalas", "07/20/18, 09:34:46 PM", "Instead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.", "NaN"], ["lucalas", "Add possibility to maintain type variable in created pojo\n\nInstead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.", "07/03/18, 10:11:38 AM", "lucalas", "420ab1f04c894dcb0402c0117bbc5d35ad1136eb", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -126,29 +126,40 @@\n   private final String typeFieldName;\n   private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();\n   private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();\n+  private final boolean maintainType;\n \n-  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n+  private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boolean maintainType) {\n     if (typeFieldName == null || baseType == null) {\n       throw new NullPointerException();\n     }\n     this.baseType = baseType;\n     this.typeFieldName = typeFieldName;\n+    this.maintainType = maintainType;\n   }\n \n+  /**\n+   * Creates a new runtime type adapter using for {@code baseType} using {@code\n+   * typeFieldName} as the type field name. Type field names are case sensitive.\n+   * {@code maintainType} flag decide if the type will be stored in pojo or not.\n+   */\n+  public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName, boolean maintainType) {\n+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, maintainType);\n+  }\n+  \n   /**\n    * Creates a new runtime type adapter using for {@code baseType} using {@code\n    * typeFieldName} as the type field name. Type field names are case sensitive.\n    */\n   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType, String typeFieldName) {\n-    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName);\n+    return new RuntimeTypeAdapterFactory<T>(baseType, typeFieldName, false);\n   }\n \n   /**\n    * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as\n    * the type field name.\n    */\n   public static <T> RuntimeTypeAdapterFactory<T> of(Class<T> baseType) {\n-    return new RuntimeTypeAdapterFactory<T>(baseType, \"type\");\n+    return new RuntimeTypeAdapterFactory<T>(baseType, \"type\", false);\n   }\n \n   /**\n@@ -199,7 +210,13 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n     return new TypeAdapter<R>() {\n       @Override public R read(JsonReader in) throws IOException {\n         JsonElement jsonElement = Streams.parse(in);\n-        JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);\n+        JsonElement labelJsonElement;\n+        if (maintainType) {\n+            labelJsonElement = jsonElement.getAsJsonObject().get(typeFieldName);\n+        } else {\n+            labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);\n+        }\n+        \n         if (labelJsonElement == null) {\n           throw new JsonParseException(\"cannot deserialize \" + baseType\n               + \" because it does not define a field named \" + typeFieldName);\n@@ -224,12 +241,16 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName) {\n               + \"; did you forget to register a subtype?\");\n         }\n         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n-        if (jsonObject.has(typeFieldName)) {\n-          throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n-              + \" because it already defines a field named \" + typeFieldName);\n-        }\n         JsonObject clone = new JsonObject();\n-        clone.add(typeFieldName, new JsonPrimitive(label));\n+        \n+        if (!maintainType) {\n+            if (jsonObject.has(typeFieldName)) {\n+              throw new JsonParseException(\"cannot serialize \" + srcType.getName()\n+                  + \" because it already defines a field named \" + typeFieldName);\n+            }\n+            clone.add(typeFieldName, new JsonPrimitive(label));\n+        }\n+        \n         for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n           clone.add(e.getKey(), e.getValue());\n         }, ", 30, 9, "\"modified, \"", 39], 1], ["1344", "Android - JSON to List<object> cast issue \u201cExpected BEGIN_ARRAY\u201d", "Abhishek Tomar", "ImAbhishekTomar", "07/08/18, 07:51:36 PM", "Hello,\r\nPlease help on this issue.\r\n\r\nI am new with android and java development. I am trying to cast JOSN to List in Android but i ma facing issue. Can you please help in this issue ?\r\n\r\n> Error : java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $\r\n\r\nConvert Code\r\n```\r\nGson gson = new Gson();\r\nString jsonOutput = githubSearchResults;\r\nType listType = new TypeToken<List<GitRepo>>(){}.getType();\r\nList<GitRepo> oData = gson.fromJson(jsonOutput, listType);\r\n```\r\n\r\nObject Git Repo Class\r\n\r\n```\r\npublic class GitRepo {\r\n    private String total_count;\r\n    private String incomplete_results;\r\n    private List<items> items;\r\n}\r\n\r\nclass  items{\r\n    private  String id;\r\n    private String name;\r\n    private String full_name;\r\n    private String html_url;\r\n    private List<owner> owner;\r\n    private List<license> license;\r\n}\r\n\r\nclass owner{\r\n    private String login;\r\n    private String id;\r\n    private String avatar_url;\r\n}\r\n\r\nclass  license{\r\n    private String key;\r\n    private String name;\r\n}\r\n```\r\n\r\nMy JSON String DATA\r\n\r\n```\r\n\r\n{\r\n  \"total_count\": 68,\r\n  \"incomplete_results\": false,\r\n  \"items\": [\r\n    {\r\n      \"id\": 1604375,\r\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNjA0Mzc1\",\r\n      \"name\": \"w2ui\",\r\n      \"full_name\": \"vitmalina/w2ui\",\r\n      \"owner\": {\r\n        \"login\": \"vitmalina\",\r\n        \"id\": 561995,\r\n        \"node_id\": \"MDQ6VXNlcjU2MTk5NQ==\",\r\n        \"avatar_url\": \"https://avatars0.githubusercontent.com/u/561995?v=4\",\r\n        \"gravatar_id\": \"\",\r\n        \"url\": \"https://api.github.com/users/vitmalina\",\r\n        \"html_url\": \"https://github.com/vitmalina\",\r\n        \"followers_url\": \"https://api.github.com/users/vitmalina/followers\",\r\n        \"following_url\": \"https://api.github.com/users/vitmalina/following{/other_user}\",\r\n        \"gists_url\": \"https://api.github.com/users/vitmalina/gists{/gist_id}\",\r\n        \"starred_url\": \"https://api.github.com/users/vitmalina/starred{/owner}{/repo}\",\r\n        \"subscriptions_url\": \"https://api.github.com/users/vitmalina/subscriptions\",\r\n        \"organizations_url\": \"https://api.github.com/users/vitmalina/orgs\",\r\n        \"repos_url\": \"https://api.github.com/users/vitmalina/repos\",\r\n        \"events_url\": \"https://api.github.com/users/vitmalina/events{/privacy}\",\r\n        \"received_events_url\": \"https://api.github.com/users/vitmalina/received_events\",\r\n        \"type\": \"User\",\r\n        \"site_admin\": false\r\n      },\r\n      \"private\": false,\r\n      \"html_url\": \"https://github.com/vitmalina/w2ui\",\r\n      \"description\": \"JavaScript UI library for data-driven web applications\",\r\n      \"fork\": false,\r\n      \"url\": \"https://api.github.com/repos/vitmalina/w2ui\",\r\n      \"forks_url\": \"https://api.github.com/repos/vitmalina/w2ui/forks\",\r\n      \"keys_url\": \"https://api.github.com/repos/vitmalina/w2ui/keys{/key_id}\",\r\n      \"collaborators_url\": \"https://api.github.com/repos/vitmalina/w2ui/collaborators{/collaborator}\",\r\n      \"teams_url\": \"https://api.github.com/repos/vitmalina/w2ui/teams\",\r\n      \"hooks_url\": \"https://api.github.com/repos/vitmalina/w2ui/hooks\",\r\n      \"issue_events_url\": \"https://api.github.com/repos/vitmalina/w2ui/issues/events{/number}\",\r\n      \"events_url\": \"https://api.github.com/repos/vitmalina/w2ui/events\",\r\n      \"assignees_url\": \"https://api.github.com/repos/vitmalina/w2ui/assignees{/user}\",\r\n      \"branches_url\": \"https://api.github.com/repos/vitmalina/w2ui/branches{/branch}\",\r\n      \"tags_url\": \"https://api.github.com/repos/vitmalina/w2ui/tags\",\r\n      \"blobs_url\": \"https://api.github.com/repos/vitmalina/w2ui/git/blobs{/sha}\",\r\n      \"git_tags_url\": \"https://api.github.com/repos/vitmalina/w2ui/git/tags{/sha}\",\r\n      \"git_refs_url\": \"https://api.github.com/repos/vitmalina/w2ui/git/refs{/sha}\",\r\n      \"trees_url\": \"https://api.github.com/repos/vitmalina/w2ui/git/trees{/sha}\",\r\n      \"statuses_url\": \"https://api.github.com/repos/vitmalina/w2ui/statuses/{sha}\",\r\n      \"languages_url\": \"https://api.github.com/repos/vitmalina/w2ui/languages\",\r\n      \"stargazers_url\": \"https://api.github.com/repos/vitmalina/w2ui/stargazers\",\r\n      \"contributors_url\": \"https://api.github.com/repos/vitmalina/w2ui/contributors\",\r\n      \"subscribers_url\": \"https://api.github.com/repos/vitmalina/w2ui/subscribers\",\r\n      \"subscription_url\": \"https://api.github.com/repos/vitmalina/w2ui/subscription\",\r\n      \"commits_url\": \"https://api.github.com/repos/vitmalina/w2ui/commits{/sha}\",\r\n      \"git_commits_url\": \"https://api.github.com/repos/vitmalina/w2ui/git/commits{/sha}\",\r\n      \"comments_url\": \"https://api.github.com/repos/vitmalina/w2ui/comments{/number}\",\r\n      \"issue_comment_url\": \"https://api.github.com/repos/vitmalina/w2ui/issues/comments{/number}\",\r\n      \"contents_url\": \"https://api.github.com/repos/vitmalina/w2ui/contents/{+path}\",\r\n      \"compare_url\": \"https://api.github.com/repos/vitmalina/w2ui/compare/{base}...{head}\",\r\n      \"merges_url\": \"https://api.github.com/repos/vitmalina/w2ui/merges\",\r\n      \"archive_url\": \"https://api.github.com/repos/vitmalina/w2ui/{archive_format}{/ref}\",\r\n      \"downloads_url\": \"https://api.github.com/repos/vitmalina/w2ui/downloads\",\r\n      \"issues_url\": \"https://api.github.com/repos/vitmalina/w2ui/issues{/number}\",\r\n      \"pulls_url\": \"https://api.github.com/repos/vitmalina/w2ui/pulls{/number}\",\r\n      \"milestones_url\": \"https://api.github.com/repos/vitmalina/w2ui/milestones{/number}\",\r\n      \"notifications_url\": \"https://api.github.com/repos/vitmalina/w2ui/notifications{?since,all,participating}\",\r\n      \"labels_url\": \"https://api.github.com/repos/vitmalina/w2ui/labels{/name}\",\r\n      \"releases_url\": \"https://api.github.com/repos/vitmalina/w2ui/releases{/id}\",\r\n      \"deployments_url\": \"https://api.github.com/repos/vitmalina/w2ui/deployments\",\r\n      \"created_at\": \"2011-04-12T14:26:20Z\",\r\n      \"updated_at\": \"2018-07-02T20:33:42Z\",\r\n      \"pushed_at\": \"2018-06-11T02:02:49Z\",\r\n      \"git_url\": \"git://github.com/vitmalina/w2ui.git\",\r\n      \"ssh_url\": \"git@github.com:vitmalina/w2ui.git\",\r\n      \"clone_url\": \"https://github.com/vitmalina/w2ui.git\",\r\n      \"svn_url\": \"https://github.com/vitmalina/w2ui\",\r\n      \"homepage\": \"http://w2ui.com\",\r\n      \"size\": 38068,\r\n      \"stargazers_count\": 1612,\r\n      \"watchers_count\": 1612,\r\n      \"language\": \"JavaScript\",\r\n      \"has_issues\": true,\r\n      \"has_projects\": true,\r\n      \"has_downloads\": true,\r\n      \"has_wiki\": true,\r\n      \"has_pages\": false,\r\n      \"forks_count\": 562,\r\n      \"mirror_url\": null,\r\n      \"archived\": false,\r\n      \"open_issues_count\": 309,\r\n      \"license\": {\r\n        \"key\": \"mit\",\r\n        \"name\": \"MIT License\",\r\n        \"spdx_id\": \"MIT\",\r\n        \"url\": \"https://api.github.com/licenses/mit\",\r\n        \"node_id\": \"MDc6TGljZW5zZTEz\"\r\n      },\r\n      \"forks\": 562,\r\n      \"open_issues\": 309,\r\n      \"watchers\": 1612,\r\n      \"default_branch\": \"master\",\r\n      \"score\": 150.9138\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nIssue stack url : https://stackoverflow.com/questions/51235236/android-json-to-listobject-cast-issue-expected-begin-array\r\n\r\nJSON URL : https://api.github.com/search/repositories?q=w2ui\r", "Issue Resolved....\r\nSolution URL\r\n\r\nhttps://stackoverflow.com/questions/51235236/android-json-to-listobject-cast-issue-expected-begin-array/51235256#51235256 =||= ", 0], ["1347", "One key to multiple fields", "Francisco Contreras", "fcontreras", "07/12/18, 05:00:52 PM", "First of all, thanks for the awesome job you do. I have a question regarding the following specific situation:\r\n\r\nI have a field that comes with a value that I need to split into various fields, a simplistic example below\r\n\r\n```\r\npublic class User {\r\n    public int userId;\r\n    public String username;\r\n}\r\n```\r\nthe json will be something like this\r\n\r\n`{ \"userinfo\": \"001:myusername\" }`\r\n\r\nIn this example, I need to take the value, split them and the first will be the \"userId\" and the second the \"username\". Any ideas on how to do this? Thanks in advance.\r", "This can be achieved using a TypeAdapter through a `@JsonAdapter` annotation on the type.\r\n\r\nSince this is a usage question and not a bug or feature request for the library, can you ask on the mailing list or on StackOverflow with the 'gson' tag? =||= Will do. Thanks =||= ", 0], ["1348", "HTML library ??? ", "Alex Alexandrovich", "jf17", "07/20/18, 09:33:25 PM", "Please add in the \".gitattributes\"\r\n  line \"*.html linguist-language = Java\" !\r\nThank you)\r", "open new pull request #1350 =||= ", 0], ["1349", "add .gitattributes", "Alex Alexandrovich", "jf17", "07/17/18, 10:08:19 AM", "is not HTML library .", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= @lyubomyr-shaydariv look good, thanks! =||= By the way,\r\n\r\n* You don't need to have both 4790307eef5be79eff0bc7517754a4b4916134b2 and a6e6c61de10f15ed2272c2bfdcec7a38ddc74f79 commits. Could you please simply combine both commits into a single one (by amending the initial commit or rebasing the two using ```fixup```/```squash```)?\r\n* I would preserve the commit message from the second commit. I think that its ```Use the linguist-documentation attribute to mark paths as documentation.``` is much more accurate. =||= ", 0], ["1350", "add .gitattributes", "Alex Alexandrovich", "jf17", "07/20/18, 09:18:19 PM", "Use the linguist-documentation attribute to mark paths as documentation.", "(This PR obsoletes #1349) =||= @lyubomyr-shaydariv Thank you very much for your help !!! =||= Yay, ```Java 100.0%```! :) =||= ", ["1350", "add .gitattributes", "Alex Alexandrovich", "jf17", "07/20/18, 09:18:19 PM", "Use the linguist-documentation attribute to mark paths as documentation.", "NaN"], ["Alexey Alexandrovich", "add .gitattributes \n\nUse the linguist-documentation attribute to mark paths as documentation.", "07/17/18, 10:09:55 AM", "GitHub", "0a10047fd3ab56ee93a367fdcfdb374f97876c3e", [".gitattributes"], "@@ -0,0 +1 @@\n+gson/docs/javadocs/* linguist-documentation, ", 1, 0, "\"added, \"", 1], 1], ["1351", "reading json file integer values as double values in ObjectTypeAdapter", null, "prem-jason", "07/20/18, 09:17:25 PM", "Hi,\r\n\r\nMy sample json is as following:\r\n{\r\n   \"myevents\": [1234, 4567]\r\n}\r\n\r\nString path = \"src//main//resources/sample.json\";\t\t\r\nFileReader fileReader = new FileReader(path);\r\nJsonReader jsonReader = new JsonReader(fileReader);\r\nMap<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();\r\nGson gson = new Gson();\r\nMap<String, ArrayList<Integer>> map1 =gson.fromJson(jsonReader, map.getClass());\r\n\r\nSystem.out.println(map1.get(\"myevents\").toString());\r\n\r\nPrints:  [1234.0, 5678.0]\r\n\r\n**Reason**:\r\ncom.google.gson.internal.bind.ObjectTypeAdapter's read method reads jsons numbers as double values, can you introduce integers, floats or double as case types? instead of treating all numbers as double values.  Thanks \r\n\r\n@Override public Object read(JsonReader in) throws IOException {\r\n    JsonToken token = in.peek();\r\n    switch (token) {\r\n    case BEGIN_ARRAY:\r\n      List<Object> list = new ArrayList<Object>();\r\n      in.beginArray();\r\n      while (in.hasNext()) {\r\n        list.add(read(in));\r\n      }\r\n      in.endArray();\r\n      return list;\r\n\r\n    case BEGIN_OBJECT:\r\n      Map<String, Object> map = new LinkedTreeMap<String, Object>();\r\n      in.beginObject();\r\n      while (in.hasNext()) {\r\n        map.put(in.nextName(), read(in));\r\n      }\r\n      in.endObject();\r\n      return map;\r\n\r\n    case STRING:\r\n      return in.nextString();\r\n\r\n    case NUMBER:\r\n      return in.nextDouble();\r\n\r\n    case BOOLEAN:\r\n      return in.nextBoolean();\r\n\r\n    case NULL:\r\n      in.nextNull();\r\n      return null;\r\n\r\n    default:\r\n      throw new IllegalStateException();\r\n    }\r\n  }\r", "Changing the types will break backward compatibility =||= ", 0], ["1353", "Verifier rejected class com.google.gson.Gson", "Rob Mans", "RobMans426", "09/24/18, 02:56:41 PM", "Hi, I am developing Android app and I faced wired issue recently.\r\nMy app worked smoothly before, then it broke down few days ago.\r\nWhen I run my app, I got this error.\r\n`    java.lang.VerifyError: Verifier rejected class com.google.gson.Gson due to bad method void com.google.gson.Gson.<clinit>() (declaration of 'com.google.gson.Gson' appears in /data/app/com.xxx.xx-1/base.apk)\r\n`\r\n\r\nI tried many ways, but I still did not fix this error.\r\nCould someone help me for this error?\r\n\r\nBest Regards.\r", "I am also facing the same issue. \r\nPlay store sending prelaunch report with errors.\r\nIssue: java.lang.NoSuchMethodError: No virtual method a(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; in class Lcom/google/gson/d; or its super classes (declaration of 'com.google.gson.d' appears in /data/app/com.google.android.apps.mtaas.crawler-1/base.apk)\r\n\r\njava.lang.IllegalAccessError: Illegal class access: <my_package>.Network.e' attempting to access 'com.google.gson.d' (declaration of '<my_package>.Network.e' appears in /data/app/<my_package>-1/base.apk)\r\n\r\nAny quick work around for this issue. =||= Hi, @Iavkush\r\n\r\nThis is not related with this gson library.\r\nThis is related with other 3rd part libraries that you used in your app level gradle.\r\nSome libraries include gson inside.\r\nYou need to exclude gson from other libraries.\r\n\r\nPlease add following code in the app level gradle.\r\n\r\n`configurations.all{\r\n    exclude group: 'com.google.code.gson', module: 'gson'\r\n}`\r\n\r\nHope this will help you! =||= @RobMans426 \r\nMy App module uses the GSON library extensively. \r\nI have tried your solution but now getting compilation issues with errors as below --\r\n` error: package com.google.gson.annotations does not exist\r\nimport com.google.gson.annotations.Expose;`\r\n`error: package com.google.gson.annotations does not exist\r\nimport com.google.gson.annotations.SerializedName;`\r\n\r\nIf I do not add below line in my app/build.gradle file, compilation is success. But when I upload my app to playstore, it gives me errors which I have mentioned in previous comment [These errors I am getting in latest release to my app, previously no errors]. \r\n> configurations.all{ exclude group: 'com.google.code.gson', module: 'gson' }\r\n\r\nPlease help.  =||= @lavkush-verma \r\nCan you run your app in your device with release mode without any issues?\r\n\r\nplease exclude gson from all libraries.\r\nAnd add gson module like this.\r\n`implementation 'com.google.code.gson:gson:2.8.5`\r\n\r\n =||= Yes, I am able to run on Release mode in my device set running on L, M, N\nand O variant.\n\nOn Wed, Jul 25, 2018 at 19:28 RobMans426 <notifications@github.com> wrote:\n\n> @lavkush-verma <https://github.com/lavkush-verma>\n> Can you run your app in your device with release mode?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1353#issuecomment-407763377>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/ACK414XJJ6i3lP92kmbl4xG6qBxet-czks5uKHl-gaJpZM4VVtud>\n> .\n>\n-- \n-----\n =||= Could  u copy your app level gradle file here? =||= Hi, \r\nI'm getting the same thing in Google's Pre-Launch report. \r\nThe strange thing is that I haven't changed a thing regarding the JSON library from the previous version and that version passed Pre-Launch without any errors\r\n\r\n`Issue: java.lang.VerifyError: Verifier rejected class com.google.gson.Gson: void com.google.gson.Gson.<clinit>() failed to verify: void com.google.gson.Gson.<clinit>(): [0x5] register v0 has type Precise Reference: com.google.gson.Gson$1 but expected Reference: com.google.gson.reflect.TypeToken (declaration of 'com.google.gson.Gson' appears in /data/app/com.bluegate.app-TXgbYn54WvvOMWt27q0CxQ==/base.apk)`\r\n\r\nOccurs on Pixel w/Android 8.0 and Pixel 2 w/Android P Preview =||= @RobMans426  \r\nDependencies are add in this way ...\r\nWith GSON version = 2.8.2 or 2.8.5 (same issues)\r\n\r\ndependencies {\r\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\r\n    implementation project(':volley')\r\n    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {\r\n        transitive = true\r\n        exclude group: 'com.android.support', module: 'support-annotations'\r\n    }\r\n\r\n    implementation \"com.android.support:support-v4:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support:appcompat-v7:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support:design:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support:cardview-v7:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support:support-vector-drawable:$rootProject.supportLibraryVersion\"\r\n    implementation \"com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion\"\r\n\r\n    implementation \"com.google.code.gson:gson:$rootProject.gsonVersion\"\r\n    implementation \"com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion\"\r\n    implementation \"com.google.firebase:firebase-messaging:$rootProject.firebaseMessagingVersion\"\r\n\r\n    implementation \"com.facebook.android:facebook-android-sdk:$rootProject.facebookSDKVersion\"\r\n    implementation \"com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion\"\r\n\r\n    implementation \"com.github.bumptech.glide:glide:$rootProject.glideVersion\"\r\n    implementation \"com.github.chrisbanes:PhotoView:$rootProject.photoViewVersion\"\r\n\r\n    implementation \"com.jakewharton:butterknife:$rootProject.butterKnifeVersion\"\r\n    annotationProcessor \"com.jakewharton:butterknife-compiler:$rootProject.butterKnifeVersion\"\r\n    implementation \"org.greenrobot:eventbus:$rootProject.eventBusVersion\"\r\n} =||= I have the same problem with @tomerpetel . \r\nEverything is fine until yesterday...\r\nDo you have any idea about this problem? =||= I have the same problem with @tomerpetel @nostel \r\nEverything is fine until yesterday...\r\nDo you have any idea about this problem?\r\n\r\nDependencies are added in this way ...\r\n\r\ndependencies {\r\n    implementation 'com.android.support.constraint:constraint-layout:1.1.2'\r\n    compile fileTree(include: ['*.jar'], dir: 'libs')\r\n    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {\r\n        exclude group: 'com.android.support', module: 'support-annotations'\r\n    })\r\n\r\n    compile 'com.android.support:cardview-v7:26.1.0'\r\n    compile 'com.android.support:appcompat-v7:26.1.0'\r\n    compile 'com.android.support:design:26.1.0'\r\n    compile 'com.github.bumptech.glide:glide:3.7.0'\r\n    compile 'com.android.support:recyclerview-v7:26.1.0'\r\n    compile 'com.github.badoualy:stepper-indicator:1.0.6'\r\n    compile 'com.google.android.gms:play-services-analytics:11.2.2'\r\n    compile 'com.google.android.gms:play-services-ads:11.2.2'\r\n    compile 'com.google.android.gms:play-services-location:11.2.2'\r\n    compile 'com.google.android.gms:play-services-gcm:11.2.2'\r\n    compile 'com.google.android.gms:play-services-auth:11.2.2'\r\n    compile 'com.facebook.android:audience-network-sdk:4.27.1'\r\n    compile 'com.github.nguyenhoanglam:ImagePicker:1.1.3'\r\n    compile 'com.squareup.retrofit:retrofit:1.9.0'\r\n    compile 'com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0'\r\n    compile 'com.squareup.okhttp3:okhttp:3.2.0'\r\n    compile 'com.google.code.gson:gson:2.7'\r\n    compile 'org.greenrobot:eventbus:3.0.0'\r\n    compile 'com.onesignal:OneSignal:3.6.2'\r\n    compile 'com.getkeepsafe.relinker:relinker:1.2.3'\r\n    compile 'com.android.support:multidex:1.0.1'\r\n    compile 'io.huq:sourcekit:1.1.19'\r\n    compile 'com.writingminds:FFmpegAndroid:0.3.2'\r\n    compile 'org.bytedeco:javacv:1.2'\r\n    compile 'org.bytedeco:javacpp:1.2.3'\r\n    testCompile 'junit:junit:4.12'\r\n    compile project(':colorselector')\r\n    compile files('libs/jar_sans.jar')\r\n\r\n\r\n =||= Hi, guy. I'm sure this is a bug from Firebase Testlab. And I found the steps to reproduce it and a quick fix: \r\n\r\nSteps to reproduce:\r\n- Create an empty android application\r\n- Add gson library dependency into app graddle: compile 'com.google.code.gson:gson:2.8.0'\r\n- In MainActivity file, add below lines to OnCreate function\r\nfinal Handler handler = new Handler();\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                Gson gson = new Gson();\r\n            }\r\n        }, 5000);\r\n- Build the app and run a test on Firebase Testlab. Select device google pixel/ google pixel2. API version 26,27,28.\r\n- Wait for the report for Crashes\r\n\r\nHere is a quick Cheat:\r\n- In MainActivity file, OnCreate function:\r\n\r\nReplace:\r\nfinal Handler handler = new Handler();\r\n        handler.postDelayed(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                Gson gson = new Gson();\r\n            }\r\n        }, 5000);\r\nWith:\r\nGson gson = new Gson();\r\n\r\nSo basically, create a new Gson () instance immeadiately when app launch will prevent the crashes on Firebase test lab.\r\n\r\nHope that help you! =||= I think this is related to this: https://github.com/googlesamples/google-services/issues/358 =||= @ispam Why do you think it's related?\r\n@nostel So do you think it's the pre-launch report bug? I was about to upload a version to production but I'm not sure now... =||= @tomerpetel Because Im experiencing the same issue only in production. Tested on 4 Real devices from API 19-23. Plus im not rlly using GSON but i know some other libraries rely big on it. =||= @ispam thanks for the answer. So if I'm understanding it right the fix was pushed to 100% of Android users (version v12.8.74) 3 days ago. So why I'm still seeing it in a report from 2 days ago? =||= @tomerpetel Its been rolling out, but currently not update on my phones yet. =||= @ispam Thanks mate \ud83d\udc4d  =||= Hey,\r\n\r\nI am getting this issue all of a sudden. Is there anything which should be fixed. Everything seemed to work fine until today. I have rolled out a build which was not at all related to this, but it started crashing. \r\n\r\nFatal Exception: java.lang.VerifyError: Verifier rejected class com.google.gson.Gson: void com.google.gson.Gson.<clinit>() failed to verify: void com.google.gson.Gson.<clinit>(): [0x5] register v0 has type Precise Reference: com.google.gson.Gson$1 but expected Reference: com.google.gson.reflect.TypeToken (declaration of 'com.google.gson.Gson' appears in /data/app/com.appname-aj6tBqViZ3DxYl_xUqAW_g==/base.apk:classes2.dex)\r\n       at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)\r\n\r\nHow can I fix this? It seems like this error came only on the pixel device.  =||= @anudeepreddygopu see @ispam answer, fix has been released but it'll take time until propagated to all devices =||= For me it was a pre-launch update on Google Publish. Once I opted out for pre-signing, everything passed. Go to the settings under pre-launch reports, go down to \"Pre-launch report version\", and select to opt-out so your app doesn't get recompiled. =||= ", 0], ["1355", "JsonElement#getAsCharacter()", "increment", "iinc", "07/30/18, 05:44:22 PM", "JsonElement \r\npublic char getAsCharacter()\r\n\u201cconvenience method to get this element as a primitive character value.\u201d\r\n\r\nI expected calling getAsCharacter would convert an integer to its character value. Instead, it returns the first character of the toString().\r\n\r\n```\r\nJsonPrimitive jp = new JsonPrimitive(100);\r\nSystem.out.println(jp.getAsCharacter());     Output: 1\r\nSystem.out.println((char) jp.getAsInt());    Output: d\r\n```\r\n\r\nPerhaps the documentation should be more descriptive.\r", "PR welcome.\r\n\r\nI would probably deprecate the entire method\u2026 =||= ", 0], ["1358", "No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes ", "Shyak Das", "shyakdas", "07/30/18, 05:07:58 PM", "Crashing in Huawei, Samsung ", "I have the same error in test production apk\r\n`FATAL EXCEPTION: AsyncTask #2\r\nProcess: taxiplus.passenger, PID: 14524\r\njava.lang.RuntimeException: An error occurred while executing doInBackground()\r\n\tat android.os.AsyncTask$3.done(AsyncTask.java:330)\r\n\tat java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:354)\r\n\tat java.util.concurrent.FutureTask.setException(FutureTask.java:223)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:242)\r\n\tat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:255)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n\tat java.lang.Thread.run(Thread.java:776)\r\nCaused by: java.lang.NoSuchMethodError: No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes (declaration of 'com.google.gson.Gson$1' appears in /data/app/com.google.android.apps.mtaas.crawler-1/base.apk)\r\n\tat com.google.gson.Gson.doubleAdapter(Gson.java:313)\r\n\tat com.google.gson.Gson.<init>(Gson.java:242)\r\n\tat com.google.gson.Gson.<init>(Gson.java:186)\r\n\tat myapp.passenger.SplashActivity1$BackgroundTaskGetAboutUs.doInBackground(SplashActivity1.java:127)\r\n\tat myapp.passenger.SplashActivity1$BackgroundTaskGetAboutUs.doInBackground(SplashActivity1.java:81)\r\n\tat android.os.AsyncTask$2.call(AsyncTask.java:316)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:237)\r\n\t... 4 more` =||= Yes, I got them same crash in Huawei and Samsung too:\r\n\r\n```\r\nFatal Exception: java.lang.NoSuchMethodError: No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes (declaration of 'com.google.gson.Gson$1'\r\n``` =||= Same as #1354  =||= ", 0], ["1359", "Impossible to retrieve nested Objects with same key without overwriting or throw an exception", null, "marco-levantesi", "07/31/18, 10:07:59 AM", "Even if having json files with more than one key field named the same is wrong by definition, thirdy party servers and programs (as Wireshark concerning the SIP protocol) actually use them. It should be possible to insert all fields with same keys in an array rather than just throwing them in the trash or overwriting the same object. ", "You can use the streaming API to handle this. I don't see why or how one would support this in the object binding API though. =||= This is a part of the file i am trying to parse:\r\n\r\n, `  \"sip.contact.uri_tree\": {\r\n                \"sip.contact.user\": \"24b26efe-da16-4688-a383-2a76bfcb3b91\",\r\n                \"sip.contact.host\": \"192.168.116.131\",\r\n                \"sip.contact.port\": \"41494\"\r\n              },\r\n              \"sip.contact.parameter\": \"expires=0\",\r\n              \"sip.contact.parameter\": \"reg-id=1\",\r\n              \"sip.contact.parameter\": \"+sip.instance=\\\"<urn:gsma:imei:00440245-885095-0>\\\"\",\r\n              \"sip.contact.parameter\": \"audio\",\r\n              \"sip.contact.parameter\": \"+g.3gpp.accesstype=\\\"cellular2\\\"\",\r\n              \"sip.contact.parameter\": \"+g.3gpp.icsi-ref=\\\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\\\"\\r\\n\"\r\n            },`\r\n\r\nAs one can notice, this file is to big to generate custom classes, a much more quick workaround would be the one i have suggested. I don't think that using streaming API would make the work easier.  =||= Your suggested behavior change is backwards incompatible. You would have to write your own TypeAdapter for that behavior. Or write a JSON pre-processor using the streaming API to turn multiple keys into a list of values prior to sending it to the object binder. =||= A custom TypeAdapter would not be the most feasible solution due to the very high degree of nested objects inside the json.  Maybe the solution including the json preprocessor would be acceptable but also, it would require a lot of coding in my opinion. Again there isn't a simple workaround to this method. I have tried modifying the \"put\" method in the LinkedTreeMap class but it does not seem a very clear solution. I have also tried to modify ObjectTypeAdapter class but does not seem to work either. Any idea? =||= You can have a generic type adapter not modifying the Gson source code. It's not the best from the performance perspective, but it can give you an idea on going further.\r\n\r\n```java\r\nfinal class MultiValuesTypeAdapterFactory\r\n\t\timplements TypeAdapterFactory {\r\n\r\n\tprivate static final TypeAdapterFactory instance = new MultiValuesTypeAdapterFactory();\r\n\r\n\tprivate MultiValuesTypeAdapterFactory() {\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory getInstance() {\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\tfinal TypeAdapter<T> delegateTypeAdapter = gson.getDelegateAdapter(this, typeToken);\r\n\t\t// ReflectiveTypeAdapterFactory is the thing we'll override\r\n\t\tif ( !(delegateTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn new MultiValuesTypeAdapter<>(delegateTypeAdapter);\r\n\t}\r\n\r\n\tprivate static final class MultiValuesTypeAdapter<T>\r\n\t\t\textends TypeAdapter<T> {\r\n\r\n\t\tprivate final TypeAdapter<T> delegateTypeAdapter;\r\n\r\n\t\tprivate MultiValuesTypeAdapter(final TypeAdapter<T> delegateTypeAdapter) {\r\n\t\t\tthis.delegateTypeAdapter = delegateTypeAdapter;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(final JsonWriter out, final T value) {\r\n\t\t\tthrow new UnsupportedOperationException(\"TODO\");\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic T read(final JsonReader in)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tfinal JsonToken jsonToken = in.peek();\r\n\t\t\t// If the current token is not an object begin, {\r\n\t\t\tif ( jsonToken != JsonToken.BEGIN_OBJECT ) {\r\n\t\t\t\t// ... then we cannot handle it and there can be a more sophisticated deserialization in use\r\n\t\t\t\t// Or it's just a null.\r\n\t\t\t\treturn delegateTypeAdapter.read(in);\r\n\t\t\t}\r\n\t\t\t// Open the object, {\r\n\t\t\tin.beginObject();\r\n\t\t\tfinal JsonObject buffer = new JsonObject();\r\n\t\t\t// Holding names of multi-properties to transform the tree\r\n\t\t\tfinal Collection<String> multiProperties = new HashSet<>();\r\n\t\t\t// For each key/value in the object\r\n\t\t\twhile ( in.hasNext() ) {\r\n\t\t\t\tfinal String property = in.nextName();\r\n\t\t\t\tfinal JsonElement value = Streams.parse(in);\r\n\t\t\t\t// Check if the buffer already contains the property name\r\n\t\t\t\tif ( !buffer.has(property) ) {\r\n\t\t\t\t\t// If it does not, then just add the read value\r\n\t\t\t\t\tbuffer.add(property, value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Otherwise, there should be an array holder and a value to be added to it\r\n\t\t\t\t\tfinal JsonArray multiValuesHolder;\r\n\t\t\t\t\tfinal JsonElement singleValue;\r\n\t\t\t\t\t// If it's the very first duplicate property\r\n\t\t\t\t\tif ( !multiProperties.contains(property) ) {\r\n\t\t\t\t\t\t// Then evict the current single property\r\n\t\t\t\t\t\tfinal JsonElement evictedValue = buffer.remove(property);\r\n\t\t\t\t\t\t// Create an array buffer to store multiple values\r\n\t\t\t\t\t\tfinal JsonArray multiValuesHolder = new JsonArray();\r\n\t\t\t\t\t\t// Replace the original single property by the multiple values array\r\n\t\t\t\t\t\tbuffer.add(property, multiValuesHolder);\r\n\t\t\t\t\t\t// Append the original value\r\n\t\t\t\t\t\tmultiValuesHolder.add(evictedValue);\r\n\t\t\t\t\t\t// And the current one\r\n\t\t\t\t\t\tmultiValuesHolder.add(value);\r\n\t\t\t\t\t\t// Remembering that this property now holds multiple values already\r\n\t\t\t\t\t\tmultiProperties.add(property);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Otherwise just append the current value to the previously created array\r\n\t\t\t\t\t\tfinal JsonArray multiValuesHolder = buffer.getAsJsonArray(property);\r\n\t\t\t\t\t\tmultiValuesHolder.add(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// \"Close\" the object\r\n\t\t\tin.endObject();\r\n\t\t\t// And now deserialize the entire, probably transformed buffer, to an object \r\n\t\t\treturn delegateTypeAdapter.fromJsonTree(buffer);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nprivate static final Gson gson = new GsonBuilder()\r\n\t\t.registerTypeAdapterFactory(MultiValuesTypeAdapterFactory.getInstance())\r\n\t\t.create();\r\n```\r\n\r\n```java\r\nfinal class Doc {\r\n\r\n\t@SerializedName(\"sip.contact.parameter\")\r\n\tfinal List<String> parameters = null;\r\n\r\n}\r\n```\r\n\r\nSo now\r\n\r\n```java\r\ndoc.parameters.forEach(System.out::println);\r\n```\r\n\r\nwould output the following:\r\n\r\n```\r\nexpires=0\r\nreg-id=1\r\n+sip.instance=\"<urn:gsma:imei:00440245-885095-0>\"\r\naudio\r\n+g.3gpp.accesstype=\"cellular2\"\r\n+g.3gpp.icsi-ref=\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\"\r\n```\r\n\r\nI hope it can help you. =||= In the end i have developed a workaround acting in the put() method in the LinkedTreeMap source code. I know it is not the most elegant solution but time is stringent and i didn't have enought time to develop a custom type adapter class; indeed most of all the original file is much more bigger than the one i published (which is just a sample) so the read() method would have required a total and time consuming rewriting. \r\n\r\nIssue is however closed since it is avoidable, even if it is not the most efficient solution. =||= ", 0], ["1360", "MapTypeAdapter does not serialize into Date objects", null, "johnernest02", "07/30/18, 12:57:07 PM", "I have a use case where I get the object as  a json string and consecutively needs to transform it into a HashMap<String, Object>. My code is as follows:\r\n\r\n```\r\npublic Map<String, Object> toMap(String jsonString) {\r\n        Gson gson = new Gson();\r\n\r\n        Type type = new TypeToken<Map<String, Object>>() {\r\n        }.getType();\r\n        Map<String, Object> mapped = gson.fromJson(jsonString, type);\r\n        return mapped;\r\n    }\r\n```\r\nThe date value I get from jsonString is `\"date\": \"2018-07-29T23:52:35.814Z\"` but upon serialization into HashMap, the \"date\" value is a String and not a Date object. Is there a way around it?\r", "How is Gson supposed to know that? Without a proper model with type information all it can do is deserialize to the types that are declared in the JSON which is a string. The fix is to define a proper class with fields and types corresponding to the properties in the JSON. =||= ", 0], ["1362", "Simplify maintainType logic.", "Eric Cochran", "NightlyNexus", "07/30/18, 05:43:53 PM", "When we maintain the label value, we do not need to make a new JsonObject and copy over the keys and values when writing. The ordering will change, though. Before this change, it always put the label first.", "NaN", ["1362", "Simplify maintainType logic.", "Eric Cochran", "NightlyNexus", "07/30/18, 05:43:53 PM", "When we maintain the label value, we do not need to make a new JsonObject and copy over the keys and values when writing. The ordering will change, though. Before this change, it always put the label first.", "NaN"], ["Eric Cochran", "Fix return.", "07/30/18, 05:32:01 PM", "GitHub", "0df2fea59496200bdfaa70a18f8b73586b55c8b8", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -243,7 +243,8 @@ private RuntimeTypeAdapterFactory(Class<?> baseType, String typeFieldName, boole\n         JsonObject jsonObject = delegate.toJsonTree(value).getAsJsonObject();\n \n         if (maintainType) {\n-          return jsonObject;\n+          Streams.write(jsonObject, out);\n+          return;\n         }\n \n         JsonObject clone = new JsonObject();, ", 2, 1, "\"modified, \"", 3], 1], ["1363", "Deprecate JsonElement.getAsCharacter.", "Eric Cochran", "NightlyNexus", "07/30/18, 05:44:22 PM", "Closes #1355.", "NaN", ["1363", "Deprecate JsonElement.getAsCharacter.", "Eric Cochran", "NightlyNexus", "07/30/18, 05:44:22 PM", "Closes #1355.", "NaN"], ["Eric Cochran", "Add Deprecated annotation.", "07/30/18, 05:34:02 PM", "GitHub", "60d7950c32c5a3aa880c60f7fb7ea150822843df", ["gson/src/main/java/com/google/gson/JsonElement.java"], "@@ -271,6 +271,7 @@ public byte getAsByte() {\n    * @deprecated This method is misleading, as it does not get this element as a char but rather as\n    * a string's first character.\n    */\n+  @Deprecated\n   public char getAsCharacter() {\n     throw new UnsupportedOperationException(getClass().getSimpleName());\n   }, ", 1, 0, "\"modified, \"", 1], 1], ["1371", "Java 11 Compatibility check: gson", null, "KryniuPL", "08/16/18, 01:21:29 PM", "Hi,\r\nWe are reaching out to you to check Java 11 compatibility of the library: gson.\r\n\r\nCould you help us by answering the following questions:\r\n\r\n1. Library Name: <library name.=\"\" e.g:=\"\" activation=\"\">\r\n2. Latest version: <latest 1.1.1=\"\" eg:=\"\" version.=\"\">\r\n3. Latest version Is the library compatible with Java 11 Compatible? (Y/N)\r\n4. Is the library supported with Java 11? (Y/N)\r\n5. (If \u201cN\u201d in compatibility or support) What is the versions that would be compatible and Supported?\r\n6. Date of support availability?</latest></library>\r\n\r\nAppreciate your response by 19.08.2018.\r\n\r\nThanks,\r\nKrzysztof Dragan,\r\nPTC Inc. Contractor\r", "1. Gson\r\n2. 2.8.5\r\n3. Don't know\r\n4. This is an open source project. It offers no support whatsoever.\r\n5. If it works, the latest. If it doesn't, we welcome any PRs to fix.\r\n6. No official support will ever be offered ever.\r\n\r\nIf you have any problems with Java 11, please file bugs or better yet send PRs to fix them! =||= ", 0], ["1372", "Change the obsolete 'compile' to 'implementation'", " Karan Kumar", "knjk04", "08/21/18, 09:40:00 PM", "In your \"[Using Gson with Gradle/Android](https://github.com/google/gson/blob/master/UserGuide.md#using-gson-with-gradleandroid)\" section within your user guide, you have ```compile``` instead of ```implementation```. Since this will be removed at the end of 2018, perhaps it will be better to advise programmers to use 'implementation'?", "send a PR? =||= Will do, thanks.\r\n\r\nEdit: submitted PR. =||= ", 0], ["1373", "Change 'compile' to 'implementation'", " Karan Kumar", "knjk04", "08/21/18, 09:39:52 PM", "Fix for issue https://github.com/google/gson/issues/1372.\r\n\r\nSummarised here again:\r\nChanged the obsolete 'compile' to 'implementation' in the Gradle dependency section", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1373", "Change 'compile' to 'implementation'", " Karan Kumar", "knjk04", "08/21/18, 09:39:52 PM", "Fix for issue https://github.com/google/gson/issues/1372.\n\nSummarised here again:\nChanged the obsolete 'compile' to 'implementation' in the Gradle dependency section", "NaN"], ["Karan Kumar", "Change 'compile' to 'implementation'", "08/21/18, 08:12:12 PM", "Karan Kumar", "86ade21078b656506c47d51933af6df921ab5161", ["UserGuide.md"], "@@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    compile 'com.google.code.gson:gson:2.8.5'\n+    implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven, ", 1, 1, "\"modified, \"", 2], 1], ["1375", "Field,  parameter,  and  variable  could  be  final", null, "reudismam", "08/23/18, 01:55:27 AM", "The final modifier can be used in fields, parameters, and local variablesto indicate they cannot be reassigned. This edit improves clarity and it helps with debugging since it shows what values will change at runtime.", "NaN", 0], ["1376", "Clean up the README a bit", "Jake Wharton", "JakeWharton", "08/23/18, 03:55:32 PM", "* Remove a lot of \"Gson\" as it's implied nearly everywhere.\r\n* Remove broken Javadoc badge. Move other badges to be near the content to which they apply\r\n* Not an official Google product\r\n* Make download section more general. People other than Android developers use Gradle, for example.", "NaN", ["1376", "Clean up the README a bit", "Jake Wharton", "JakeWharton", "08/23/18, 03:55:32 PM", "* Remove a lot of \"Gson\" as it's implied nearly everywhere.\n* Remove broken Javadoc badge. Move other badges to be near the content to which they apply\n* Not an official Google product\n* Make download section more general. People other than Android developers use Gradle, for example.", "NaN"], ["Jake Wharton", "Clean up the README a bit\n\n* Remove a lot of \"Gson\" as it's implied nearly everywhere.\r\n* Remove broken Javadoc badge. Move other badges to be near the content to which they apply\r\n* Not an official Google product\r\n* Make download section more general. People other than Android developers use Gradle, for example.", "08/23/18, 03:08:20 PM", "GitHub", "7a77eb91e74ba730429682f50cb41aadc3741fc0", ["README.md"], "@@ -1,48 +1,48 @@\n-# google-gson\n-\n-[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n-[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson)\n-[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg)](http://www.javadoc.io/doc/com.google.code.gson/gson)\n+# Gson\n \n Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n Gson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n \n There are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n \n-### Gson Goals\n+### Goals\n   * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n   * Allow pre-existing unmodifiable objects to be converted to and from JSON\n   * Extensive support of Java Generics\n   * Allow custom representations for objects\n   * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n \n-### Gson Download and Maven\n-  * To use Gson in Android\n+### Download\n+\n+Gradle:\n ```gradle\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.5'\n+  implementation 'com.google.code.gson:gson:2.8.5'\n }\n ```\n \n-  * [Gson Download](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) downloads at Maven Central\n-  * To use Gson with Maven\n-  ```xml\n+Maven:\n+```xml\n <dependency>\n-    <groupId>com.google.code.gson</groupId>\n-    <artifactId>gson</artifactId>\n-    <version>2.8.5</version>\n+  <groupId>com.google.code.gson</groupId>\n+  <artifactId>gson</artifactId>\n+  <version>2.8.5</version>\n </dependency>\n ```\n \n-### Gson Documentation\n-  * Gson [API](http://www.javadoc.io/doc/com.google.code.gson/gson): Javadocs for the current Gson release\n-  * Gson [user guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n-  * Gson [Roadmap](https://github.com/google/gson/blob/master/CHANGELOG.md): Details of changes in the recent versions\n-  * Gson [design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n+[Gson jar downloads](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) are available from Maven Central.\n+\n+[![Build Status](https://travis-ci.org/google/gson.svg?branch=master)](https://travis-ci.org/google/gson)\n+\n+### Documentation\n+  * [API Javadoc](http://www.javadoc.io/doc/com.google.code.gson/gson): Documentation for the current release\n+  * [User guide](https://github.com/google/gson/blob/master/UserGuide.md): This guide contains examples on how to use Gson in your code.\n+  * [Change log](https://github.com/google/gson/blob/master/CHANGELOG.md): Changes in the recent versions\n+  * [Design document](https://github.com/google/gson/blob/master/GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n \n-Please use the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson, or to post questions.\n+Please use the 'gson' tag on StackOverflow or the [google-gson Google group](http://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n \n-### Gson-related Content Created by Third Parties\n+### Related Content Created by Third Parties\n   * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n   * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n@@ -66,3 +66,7 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ```\n+\n+### Disclaimer\n+\n+This is not an officially supported Google product., ", 26, 22, "\"modified, \"", 48], 1], ["1380", "Boolean literal validation", "Shawn", "shawn712", "08/21/19, 08:44:05 PM", "For Boolean type it appears that gson de-serializes any literals not \"true\" to \"false\". A json document such as:\r\n```\r\n{\r\n   \"a\": wat,\r\n   \"b\": trrue\r\n}\r\n```\r\nand both `a` and `b` would be de-serialized to false despite this not being a valid json document.\r\n\r\n```\r\n{\r\n   \"c\": true\"\r\n}\r\n```\r\nIn this document c will also be de-serialized to `false` the end double quote is probably parsed as part of the literal. I think gson should at least log a MalformedJsonException. It does that if I move the double quote to the beginning (`\"true` )\r", "NaN", 0], ["1382", "Error in Gradle Build", null, "rkarimi88", "09/11/18, 04:54:31 AM", "Hi.\r\nI always use your lib to serialize my objects, it's really easy to handle. Thank You.\r\n\r\nThe problem is in adding your lib to my new project. I've got this error after adding gson 2.8.5 as a module (zip file) to project:\r\n**Error: cannot find symbol variable GsonBuildConfig**\r\nwhat is this for?\r\n\r\nI didn't have this problem until i upgraded my android studio.", "I used the github link to import the module:\r\n`implementation 'com.github.google:gson:1.7'`\r\n\r\n(and of course adding `maven { url 'https://jitpack.io' }` in repositories of allprojects)\r\nThank you. =||= ", 0], ["1383", "com.google.gson.LruCache causing stuck thread with com.google.code.gson version 1.5", null, "parthapratimpradhan", "09/12/18, 04:45:22 PM", "Version:\r\n<groupId>com.google.code.gson</groupId>\r\n  <artifactId>gson</artifactId>\r\n  <version>1.5</version>\r\nIssue details:\r\n[STUCK] ExecuteThread: '355' for queue: 'weblogic.kernel.Default (self-tuning)'\" daemon prio=10 tid=0x00007f128c081800 nid=0xd95 runnable [0x00007f11eecaa000]\r\n   java.lang.Thread.State: RUNNABLE\r\n\tat java.util.HashMap.getEntry(HashMap.java:469)\r\n\tat java.util.LinkedHashMap.get(LinkedHashMap.java:301)\r\n\tat com.google.gson.LruCache.getElement(LruCache.java:49)\r\n\tat com.google.gson.FieldAttributes.getAnnotations(FieldAttributes.java:150)\r\n\tat com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:138)\r\n\tat com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:44)\r\n\tat com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)\r\n\tat com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)\r\n\tat com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)\r\n\tat com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\r\n\tat com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\r\n\tat com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:495)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:444)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:396)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:372)\r", "This version of Gson is no longer supported. We only work on the 2.x version. =||= Hi can you please at least confirm that in the latest version of com.google.code.gson we are not using Lru cache which was the primary cause of the issue? =||= LruCache doesn't exist anymore, yes. =||= ", 0], ["1384", "proguard null pointer ", null, "PascalTang", "09/13/18, 06:53:59 PM", "hi\r\nI have Crashlytics on my user .\r\nAll about NullPointerException with network.\r\n\r\n`Fatal Exception: java.lang.RuntimeException\r\nUnable to start activity ComponentInfo{com.ilulutv.lulu/com.ilulutv.lulu.main.MainActivity}: java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String com.ilulutv.lulu.e.a.a.a$a.a()' on a null object reference`\r\n\r\nI set my json string to object by gson when volley callback.\r\n\r\nThen I cant copy this issue , its not always happen.\r\nI follow the solution from google .\r\nBut not work . \r\nPlz help\r\n\r\n<img width=\"1017\" alt=\"2018-09-13 10 32 45\" src=\"https://user-images.githubusercontent.com/12624322/45495971-feaced00-b7a6-11e8-9f9d-1e6046306f26.png\">\r\n<img width=\"1111\" alt=\"2018-09-13 10 57 48\" src=\"https://user-images.githubusercontent.com/12624322/45496770-cc03f400-b7a8-11e8-82fb-a3110db70a7c.png\">\r\n<img width=\"765\" alt=\"2018-09-13 8 48 18\" src=\"https://user-images.githubusercontent.com/12624322/45495968-fe145680-b7a6-11e8-82b8-074562f177da.png\">\r\n<img width=\"320\" alt=\"2018-09-13 8 48 42\" src=\"https://user-images.githubusercontent.com/12624322/45495969-feaced00-b7a6-11e8-8181-ffe436b68a83.png\">\r\n<img width=\"806\" alt=\"2018-09-13 8 49 04\" src=\"https://user-images.githubusercontent.com/12624322/45495970-feaced00-b7a6-11e8-9ba9-10f96865179b.png\">\r\n\r\n\r", "Seems like your JSON contained null and you didn't check for it? Or your serialized name annotation was being removed and so the property wasn't being matched?\r\n\r\nIn either case, this isn't a problem with Gson itself. If it works with ProGuard disabled then Gson is behaving correctly. You'll have to consult assistance for using the ProGuard tool from its documentation such that you configure it correctly. Code obfuscation is designed to mangle your code so you'll need to figure out how to keep around what Gson requires. =||= ", 0], ["1385", "Deserisation fails with when using null numeric primitives as map keys", "Audrius Butkevicius", "AudriusButkevicius", "09/14/18, 01:21:15 AM", "**What did you do:**\r\n\r\nRan:\r\n```java\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Test {\r\n    static class MyType {\r\n        public Map<Integer, Integer> map = new HashMap<>();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MyType instance = new MyType();\r\n        instance.map.put(null, 1);\r\n\r\n        Gson serialiser = new GsonBuilder()\r\n                .enableComplexMapKeySerialization()\r\n                .serializeNulls()\r\n                .setPrettyPrinting()\r\n                .create();\r\n\r\n        String data = serialiser.toJson(instance);\r\n        System.out.println(data);\r\n\r\n        try {\r\n            MyType newInstance = serialiser.fromJson(data, MyType.class);\r\n            System.out.println(\"Success\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace(System.out);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**What happened**\r\n\r\nDeserialisation fails:\r\n\r\n```java\r\n{\r\n  \"map\": {\r\n    \"null\": 1\r\n  }\r\n}\r\ncom.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input string: \"null\"\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:228)\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:218)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:927)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:892)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:841)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:813)\r\n\tat Test.main(Test.java:27)\r\nCaused by: java.lang.NumberFormatException: For input string: \"null\"\r\n\tat java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2054)\r\n\tat java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\r\n\tat java.base/java.lang.Double.parseDouble(Double.java:543)\r\n\tat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1201)\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:226)\r\n\t... 11 more\r\n```\r\n\r\n**What did you expect to happen:**\r\n\r\nEither both serialisation and deserilisation to either succeed or fail (making the handling consistent between the two modes).\r\n\r\nIt seems that only one mode does not handle this case.\r\nI know that `null` is an invalid json map key, but perhaps the library should handle a special \"null\" key when the type is a nullable primitive.\r\n\r\nIt seems that this is also broken for strings, as you can serialise a `null`, and  get `\"null\"` back after deserilisation.\r\n\r\n\r\n**_Note_**\r\n\r\nStrangely it works okay if you serialise a simple map (not embedded in an object).\r", "Ask these questions on StackOverflow please.\r\n\r\nYour Map has Integer keys. So, Gson is trying to convert \"null\" to integer and failing. You shouldn't be surprised. \r\nDefine the Map to be Map<String, Integer> =||= This issue is not really a question, I understand loud and clear what's happening. I am asserting that the behaviour is incorrect and that this should be fixed.\r\n\r\nI do expect it to convert the keys to integers, I also expect it to eat it's own dog food and be able to deserialise a value it produced on serilisation.\r\n\r\n\r\nThe library should either refuse to serialise null primitive keys (as it cannot deserialise them), or be fixed to deserialise the values it produced when serialising.\r\n\r\nThe test works ok when using a map that is not embedded in an object, and fails when map is embedded in an object, which further shows inconsistencies in the behaviour, implying an issue. =||= While there may be some merit in your argument, we can't break backwards compatibility by changing behavior. =||= What exactly would you be breaking? Preventing null key serialisation? What about deserialising \"null\" strings into nulls for boxed primitives (other than string I guess) =||= I also think it is an issue, here is the code: \r\n\r\nScenario 1: \r\n```\r\nGson gson = new GsonBuilder().serializeNulls().create();\r\nMap<String, Integer> mapData = new HashMap<>();\r\nmapData.put(\"abc\", null);\r\nString data = gson.toJson(mapData);\r\nSystem.out.println(data);\r\nType type = TypeToken.getParameterized(HashMap.class, String.class, Integer.class).getType();\r\nObject obj = gson.fromJson(data, type);\r\nSystem.out.println(obj);\r\n```\r\nThe code runs well and got the result\r\n```\r\n{\"abc\":null}\r\n{abc=null}\r\n```\r\nScenario 2:\r\n```\r\nGson gson = new GsonBuilder().serializeNulls().create();\r\nMap<Integer, String> mapData = new HashMap<>();\r\nmapData.put(null, \"abc\");\r\nString data = gson.toJson(mapData);\r\nSystem.out.println(data);\r\nType type = TypeToken.getParameterized(HashMap.class, Integer.class, String.class).getType();\r\nObject obj = gson.fromJson(data, type);\r\nSystem.out.println(obj);\r\n```\r\nThe  code runs failed, and get an exception:\r\n```\r\nException in thread \"main\" com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input string: \"null\"\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:227)\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:217)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)\r\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:888)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:853)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:802)\r\n\tat com.delta.cornerstone.common.serialization.gson.user.UserSerializationByGson.main(UserSerializationByGson.java:41)\r\nCaused by: java.lang.NumberFormatException: For input string: \"null\"\r\n\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)\r\n\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\r\n\tat java.lang.Double.parseDouble(Double.java:538)\r\n\tat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1201)\r\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:225)\r\n\t... 8 more\r\n```\r\n\r\nSo it seems Gson can only handle the \"NULL\" when it is the value of the map.  =||= ", 0], ["1386", "Iterable<> object return a empty json \"{}\"", "Wangchen", "jadedrip", "09/17/18, 01:00:20 PM", "This is a bug?", "can you please provide more information? =||= Dupe of #672  =||= ", 0], ["1388", "@Transient breaks Kotlin's non-null guarantees", "Benjamin Hill", "salamanders", "09/20/18, 11:57:19 PM", "Annotating a field with `@Transient` correctly skips saving that field to the JSON representation.  \r\n\r\nHowever, when deserializing back to a class, it skips the in-class and in-constructor defaults, leaving the value = null, which breaks Kotlin's promises about not-null values.\r\n\r\nI couldn't work around it using `@delegate:Transient val myVal:Double by lazy { 0.0 }` either, it seems to think it is initialized, but to null.  (again, not something that should ever happen in Kotlin)\r\n\r\n```\r\nclass Temp(@Transient val myVal1:Double = 0.0) {\r\n    @Transient val myVal2:Double = 0.0\r\n}\r\n```\r\nboth myVal1 and myVal2 are missing when saved to disk (which is correct) and null when reloaded `GSON.fromJson(it, this::class.java)` (which is unexpected.)\r\n\r\n**Expected behavior:** Values are set to their default if they are not included in the deserialized value.\r", "This also happens in Java because Gson skips calling the constructor. You need to provide a default constructor either explicitly or in the bytecode with `@JvmOverloads` if you want class initializers to run.\r\n\r\nOr, give Moshi and its first-party Kotlin support a try! =||= ", 0], ["1389", "Added java.lang.Iterable support", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "05/24/20, 08:10:24 PM", "NaN", "Related tickets: #428, #672, #691, #1386. =||= I'm new at this am I suppose to download or this  =||= I'm new at this am I suppose to download or this\r\nOr just the ones like this should fix 672 =||= > Maybe there should be a warning somewhere because Iterable is not guaranteed to support calling iterator() multiple times (see DirectoryStream), so it might be surprising why after serializing an object, it suddenly behaves differently.\r\n\r\nI agree to some extent, but that interface has been added since 1.7 whereas Gson is still strongly 1.6-oriented, so even if that stream behaves surprisingly, let's just consider that implementation (and those like that) poorly designed violating the LSP. Why: calling the `Iterable.iterator()` method contract is not declared or documented to throw exceptions. I have never used that stream, but it looks like it has to be an iterator, not iterable as it violates the LSP for being \"iterable\", with closeable capabilities. By the way, later in Java 1.8 `Stream` is closeable and I find it done right. Also, even if anyone supplies such one-time-only iterables (with a special iterable type adapter on their own -- so adding the built-in won't break), they must have seen the illegal state exception and collect its result to a truly iterable collection, as the surprising behavior is described as a bold waning right in the Java 1.7 Javadoc. And finally, people, as StackOverflow tells, tend to misuse Gson in many cases and get runtime exceptions: for example, there are dozens questions of why a JavaFX object/property cannot be serialized (duplicate names on serializing) or why de/serializing an Android parcelable results in totally different behavior on different Android versions (obviosly, in both cases the `ReflectiveTypeAdapterFactory` works perfect only with classes they can control in full). So I wouldn't add warnings or Javadocs. =||= > Additionally doesn't com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter have to be adjusted as well by this pull request?\r\n\r\nI was thinking of this too, and I'm not sure but it's probably better to leave the current \"collection-only\" implementation as is and only mix the iterable support into it. The collection type adapter factory is declared public, and it might be used externally, not via Gson indirectly. =||= Ah nevermind, I am rather certain that you **definitely have to adjust `CollectionTypeAdapterFactory.Adapter`** . It currently only works due to Java's type erasure and **only** for `Iterable`s which are also instances of `Collection`. I am pretty sure that this code would throw `ClassCastException`s once you try to serialize Iterables which do not extend Collection (note also that this should have a separate test method). =||= > I am pretty sure that this code would throw `ClassCastException`s once you try to serialize Iterables which do not extend Collection (note also that this should have a separate test method).\r\n\r\nHm, a good point. I definitely missed that it and going to check it again. Thanks for pointing that out! =||= @Marcono1234 \r\nI'll most likely close this PR due to my poor design and my wrong assumptions. Once I patched the collection type adapter factory for `Iterable`, I realized that now it can be serialized, but cannot be deserialized without a custom deserializer: there is no way to add elements to the iterable that is not a collection. In the force-pushed commit, there is a test that serializes `Chars implements Iterable<Character>`, but cannot be deserialize into a `Chars` instance properly causing a class cast exception since the default `Iterable` constructor is configured to `ArrayList` that obviously cannot be cast to `Chars` (that is effectively a generator, not a \"plain\" collection of elements).\r\n\r\nI believe this is the biggest \"why\" why Gson does not support it out of box due to the symmetry issues and I feel ashamed to be blind not seeing it earlier. =||= ```patch\r\nFrom 86a605c4b33a9fb18ff76b9101b25d65e7e7f3d1 Mon Sep 17 00:00:00 2001\r\nFrom: Lyubomyr Shaydariv <lyubomyr-shaydariv@users.noreply.github.com>\r\nDate: Sun, 23 Sep 2018 12:11:24 +0300\r\nSubject: [PATCH] Added java.lang.Iterable support\r\n\r\n---\r\n gson/src/main/java/com/google/gson/Gson.java  |  1 +\r\n .../com/google/gson/internal/$Gson$Types.java | 16 ++++++\r\n .../gson/internal/ConstructorConstructor.java |  8 +++\r\n .../bind/CollectionTypeAdapterFactory.java    | 32 +++++++++---\r\n .../gson/functional/CollectionTest.java       | 49 +++++++++++++++++++\r\n 5 files changed, 100 insertions(+), 6 deletions(-)\r\n\r\ndiff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java\r\nindex 27f3ee92..30498ffc 100644\r\n--- a/gson/src/main/java/com/google/gson/Gson.java\r\n+++ b/gson/src/main/java/com/google/gson/Gson.java\r\n@@ -270,6 +270,7 @@ public final class Gson {\r\n \r\n     // type adapters for composite and user-defined types\r\n     factories.add(new CollectionTypeAdapterFactory(constructorConstructor));\r\n+    factories.add(new CollectionTypeAdapterFactory(constructorConstructor, true));\r\n     factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\r\n     this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);\r\n     factories.add(jsonAdapterFactory);\r\ndiff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\r\nindex adea605f..5a38adfa 100644\r\n--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\r\n+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java\r\n@@ -294,6 +294,22 @@ public final class $Gson$Types {\r\n         : ((Class<?>) array).getComponentType();\r\n   }\r\n \r\n+  /**\r\n+   * Returns the element type of this iterable type.\r\n+   * @throws IllegalArgumentException if this type is not an iterable.\r\n+   */\r\n+  public static Type getIterableElementType(Type context, Class<?> contextRawType) {\r\n+    Type iterableType = getSupertype(context, contextRawType, Iterable.class);\r\n+\r\n+    if (iterableType instanceof WildcardType) {\r\n+      iterableType = ((WildcardType)iterableType).getUpperBounds()[0];\r\n+    }\r\n+    if (iterableType instanceof ParameterizedType) {\r\n+      return ((ParameterizedType) iterableType).getActualTypeArguments()[0];\r\n+    }\r\n+    return Object.class;\r\n+  }\r\n+\r\n   /**\r\n    * Returns the element type of this collection type.\r\n    * @throws IllegalArgumentException if this type is not a collection.\r\ndiff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\r\nindex 5fab4601..8d3aedd6 100644\r\n--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\r\n+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\r\n@@ -177,6 +177,14 @@ public final class ConstructorConstructor {\r\n       }\r\n     }\r\n \r\n+    if (Iterable.class.isAssignableFrom(rawType)) {\r\n+      return new ObjectConstructor<T>() {\r\n+        @Override public T construct() {\r\n+          return (T) new ArrayList<Object>();\r\n+        }\r\n+      };\r\n+    }\r\n+\r\n     if (Map.class.isAssignableFrom(rawType)) {\r\n       if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {\r\n         return new ObjectConstructor<T>() {\r\ndiff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java\r\nindex 1d57844a..5d79b56d 100644\r\n--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java\r\n+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java\r\n@@ -35,9 +35,15 @@ import java.util.Collection;\r\n  */\r\n public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {\r\n   private final ConstructorConstructor constructorConstructor;\r\n+  private final boolean supportIterable;\r\n \r\n   public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {\r\n+    this(constructorConstructor, false);\r\n+  }\r\n+\r\n+  public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor, boolean supportIterable) {\r\n     this.constructorConstructor = constructorConstructor;\r\n+    this.supportIterable = supportIterable;\r\n   }\r\n \r\n   @Override\r\n@@ -45,11 +51,11 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {\r\n     Type type = typeToken.getType();\r\n \r\n     Class<? super T> rawType = typeToken.getRawType();\r\n-    if (!Collection.class.isAssignableFrom(rawType)) {\r\n+    if (!isRawTypeSupported(rawType)) {\r\n       return null;\r\n     }\r\n \r\n-    Type elementType = $Gson$Types.getCollectionElementType(type, rawType);\r\n+    Type elementType = getElementType(type, rawType);\r\n     TypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));\r\n     ObjectConstructor<T> constructor = constructorConstructor.get(typeToken);\r\n \r\n@@ -58,7 +64,21 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {\r\n     return result;\r\n   }\r\n \r\n-  private static final class Adapter<E> extends TypeAdapter<Collection<E>> {\r\n+  private boolean isRawTypeSupported(Class<?> rawType) {\r\n+    if (supportIterable) {\r\n+      return Iterable.class.isAssignableFrom(rawType);\r\n+    }\r\n+    return Collection.class.isAssignableFrom(rawType);\r\n+  }\r\n+\r\n+  private Type getElementType(Type type, Class<?> rawType) {\r\n+    if (supportIterable) {\r\n+      return $Gson$Types.getIterableElementType(type, rawType);\r\n+    }\r\n+    return $Gson$Types.getCollectionElementType(type, rawType);\r\n+  }\r\n+\r\n+  private static final class Adapter<E> extends TypeAdapter<Iterable<E>> {\r\n     private final TypeAdapter<E> elementTypeAdapter;\r\n     private final ObjectConstructor<? extends Collection<E>> constructor;\r\n \r\n@@ -86,14 +106,14 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {\r\n       return collection;\r\n     }\r\n \r\n-    @Override public void write(JsonWriter out, Collection<E> collection) throws IOException {\r\n-      if (collection == null) {\r\n+    @Override public void write(JsonWriter out, Iterable<E> iterable) throws IOException {\r\n+      if (iterable == null) {\r\n         out.nullValue();\r\n         return;\r\n       }\r\n \r\n       out.beginArray();\r\n-      for (E element : collection) {\r\n+      for (E element : iterable) {\r\n         elementTypeAdapter.write(out, element);\r\n       }\r\n       out.endArray();\r\ndiff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\r\nindex 8aa36e21..85bef1b2 100644\r\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\r\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\r\n@@ -25,6 +25,7 @@ import java.util.Iterator;\r\n import java.util.LinkedList;\r\n import java.util.List;\r\n import java.util.Map;\r\n+import java.util.NoSuchElementException;\r\n import java.util.PriorityQueue;\r\n import java.util.Queue;\r\n import java.util.Set;\r\n@@ -59,6 +60,27 @@ public class CollectionTest extends TestCase {\r\n     gson = new Gson();\r\n   }\r\n \r\n+  public void testCollectionSubstitutesIterable() {\r\n+    BagOfPrimitives foo = new BagOfPrimitives(1L, 2, true, \"foo\");\r\n+    BagOfPrimitives bar = new BagOfPrimitives(3L, 4, false, \"bar\");\r\n+    Iterable<BagOfPrimitives> before = Arrays.asList(foo, bar);\r\n+    Type iterableType = new TypeToken<Iterable<BagOfPrimitives>>() {}.getType();\r\n+    Type collectionType = new TypeToken<Collection<BagOfPrimitives>>() {}.getType();\r\n+    String actualJson = gson.toJson(before, iterableType);\r\n+    String expectedJson = gson.toJson(before, collectionType);\r\n+    assertEquals(expectedJson, actualJson);\r\n+    Iterable<BagOfPrimitives> after = gson.fromJson(actualJson, iterableType);\r\n+    assertTrue(after instanceof Collection);\r\n+    assertEquals(before, after);\r\n+  }\r\n+\r\n+  public void testIterableThatIsNotACollection() {\r\n+    Iterable<Character> charsBefore = new Chars('0', '9');\r\n+    String json = gson.toJson(charsBefore, Chars.class);\r\n+    assertEquals(\"[\\\"0\\\",\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"4\\\",\\\"5\\\",\\\"6\\\",\\\"7\\\",\\\"8\\\",\\\"9\\\"]\", json);\r\n+    Chars charsAfter = gson.fromJson(json, Chars.class);\r\n+  }\r\n+\r\n   public void testTopLevelCollectionOfIntegersSerialization() {\r\n     Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n     Type targetType = new TypeToken<Collection<Integer>>() {}.getType();\r\n@@ -413,4 +435,31 @@ public class CollectionTest extends TestCase {\r\n     assertEquals(\"hello\", small.inSmall);\r\n   }\r\n \r\n+  private static final class Chars implements Iterable<Character> {\r\n+\r\n+    private final char from;\r\n+    private final char to;\r\n+\r\n+    private Chars(char from, char to) {\r\n+      this.from = from;\r\n+      this.to = to;\r\n+    }\r\n+\r\n+    @Override public Iterator<Character> iterator() {\r\n+      return new Iterator<Character>() {\r\n+        private char i = from;\r\n+        @Override public boolean hasNext() {\r\n+          return i <= to;\r\n+        }\r\n+        @Override public Character next() {\r\n+          if ( !hasNext() ) {\r\n+            throw new NoSuchElementException();\r\n+          }\r\n+          return i++;\r\n+        }\r\n+        @Override public void remove() { throw new UnsupportedOperationException(); }\r\n+      };\r\n+    }\r\n+  }\r\n+\r\n }\r\n-- \r\n2.26.2\r\n```\r\n =||= @lyubomyr-shaydariv, actually breaking symmetry is not only a problem for your pull request, but a general one, see #1708.\r\nI have created #1709 now which only adds (de-)serialization support for `Iterable`, but not for any subtypes, which is therefore not affected by the symmetry problems.\r\n =||= @Marcono1234 \r\nWell... I dropped the PR because the symmetry cannot be guaranteed by the _simple_ Gson core patching. I see two ways:\r\n\r\n* **(1)** The `Iterable` problem should be both documented explaining why it is not supported out of box and why the user should prefer `Collection` (actually just explaining why Gson works like that now: collections can be added to), and a bidirectional type adapter factory with subtype support might be added to the gson-extras (like the polymorphic type adapter is a part of the extras package, not the core). I still think that serialization should be bi-directional and support subtypes with no exceptions.\r\n* **(2)** OR maybe implement the _full_ `Iterable` support by adding a new \"adding\" interface to conform the \"adding problem\". For example, Gson provides `InstanceCreator` to instantiate types that cannot be easily instantiated by Gson itself (like interfaces). What if add something like \"`IterableAdder`\"? This would bloat the Gson API a little, but most likely it is not worth it (i.e., why not use `Collection`?). I think this way does not have enough strength too, and I don't see the way of supporting \"addable\" iterables this way.\r\n\r\nIn short, I don't think Gson should support `Iterable`. =||= > I still think that serialization should be bi-directional and support subtypes with no exceptions.\r\n\r\nYes, that is why the pull request I created only supports `Iterable` and not any sub types. This preserves symmetry because it allows the deserialization to freely choose any `Iterable` sub type it wants (in this case `ArrayList`). I assume that should cover some use cases where support for `Iterable` (de-)serialization was requested (see also the example on that pull request), though probably not all. =||= ", 0], ["1390", "Recursive TypeVariable resolution results in ClassCastException when type var is referenced multiple times", "Mike Cumings", "mcumings", "08/02/21, 11:43:19 PM", "The recursive type variable resolution protections put into place in Gson 2.8.2 to fix #1128 does not work if a TypeVariable is referenced multiple times.\r\n\r\nExample failing code:\r\n```\r\n    enum TestEnum { ONE, TWO, THREE }\r\n\r\n    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\r\n\r\n    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\r\n\r\n    private static class BaseCollection<U, C extends Collection<U>>\r\n    {\r\n        public C collection;\r\n    }\r\n```\r\n\r\nWhen used with the following code to unmarshal\r\n```\r\nTestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\r\n```\r\nThe enum values are unmarshaled as `String` instances instead of as `TestEnum` instances, causing `ClassCastException` to be raised at runtime.  This is due to the fact that the `visitedTypeVariables` map receives an entry for `T`, resolves it properly, and then upon subsequent attempt to resolve `T` fails, since the `visitedTypeVariables` set indicates that `T` has already been resolved.", "NaN", 0], ["1391", "Fix issue with recursive type variable protections to fix #1390", "Mike Cumings", "mcumings", "08/02/21, 11:43:19 PM", "When a type variable is referenced multiple times it needs to resolve to the same value.  Previously, the second attempt would abort resolution early in order to protect against infinite recursion.\r\n\r\nNOTE: I could use some scrutiny on this as I don't fully understand the implications of all the code branches.  This commit does resolve the issue but stylistically I'm not really sold on breaking out of the while loop in order to capture the final result for subsequent resolution attempts.\r\n\r\nFixes #1390 \r", "The Codacy check is flagging existing code with a legitimate `==` check.  Not sure how I should respond to that... =||= > The Codacy check is flagging existing code with a legitimate `==` check. Not sure how I should respond to that...\r\n\r\nNeither `componentType` nor `newComponentType` are declared as `java.lang.Class` instances, hence `==` is not guaranteed to work properly. My IntelliJ IDEA code analisys reports a lot of `==`/`equals` issues for `$Gson$Type` too, and I think you should simply rewrite it using `equals()` (the old code is dated 2010, most likely prior to Codacy). Codacy seems to analyze the modified code, so that's probably why it reports your change only. =||= Fair point.  There were a couple points in the `resolve` method where instance equality checks were sufficient (i.e., it was checking to see if the original value was being returned, etc.).  I updated the others to use the `equal` method.  I didn't want to spread this too broadly however, so I stopped there.\r\n\r\nCadacy is now happy. \ud83d\ude03  =||= Could you please edit the description and include:\r\n> Fixes #1390\r\n\r\nIt appears otherwise GitHub does not understand that this pull request and the issue are related. =||= Done.  Hopefully this PR isn't too old as to be useless at this point. =||= Thanks! There haven't been any other changes to `$Gson$Types` since then so this PR is still useful.\r\nHopefully the maintainers have a look at all the open pull requests soon. =||= ", ["1391", "Fix issue with recursive type variable protections to fix #1390", "Mike Cumings", "mcumings", "08/02/21, 11:43:19 PM", "When a type variable is referenced multiple times it needs to resolve to the same value.  Previously, the second attempt would abort resolution early in order to protect against infinite recursion.\n\nNOTE: I could use some scrutiny on this as I don't fully understand the implications of all the code branches.  This commit does resolve the issue but stylistically I'm not really sold on breaking out of the while loop in order to capture the final result for subsequent resolution attempts.\n\nFixes #1390 ", "NaN"], ["Mike Cumings", "Replace instance equality checks in $Gson$Types#resolve", "09/27/18, 05:38:53 AM", "Mike Cumings", "69f7c4e243c385b318ed63205817347e4bbe379e", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java"], "@@ -370,7 +370,7 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         Class<?> original = (Class<?>) toResolve;\n         Type componentType = original.getComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        toResolve = componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n         break;\n@@ -379,7 +379,7 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         GenericArrayType original = (GenericArrayType) toResolve;\n         Type componentType = original.getGenericComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        toResolve = componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n         break;\n@@ -388,12 +388,12 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = newOwnerType != ownerType;\n+        boolean changed = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n-          if (resolvedTypeArgument != args[t]) {\n+          if (!equal(resolvedTypeArgument, args[t])) {\n             if (!changed) {\n               args = args.clone();\n               changed = true;, ", 4, 4, "\"modified, \"", 8], 1], ["1392", "Deserialize JSON to nested objects with default values", null, "kraskkrz", "10/01/18, 07:48:31 AM", "```\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@ToString\r\npublic class Destination {\r\n    @Getter\r\n    @Setter\r\n    @NoArgsConstructor\r\n    @ToString\r\n    public class Inner {\r\n        private Integer e1 = 200; \r\n        private String  e2 = \"...\";\r\n        private Integer e3 = 500;\r\n    }\r\n\r\n    private int p1 = 100;\r\n    private Inner[ ] p2;\r\n}\r\n\r\n@Getter\r\n@Setter\r\n@NoArgsConstructor\r\n@ToString\r\npublic class Source {\r\n    private int p1;\r\n    private Destination.Inner[ ] p2;\r\n}\r\n\r\npublic class Main {\r\n   private static final String JSON = \"{ `p1`: `100`, `p2`: [ { `e1`:`300` } ] }\".replaceAll( \"`\", \"\\\"\" );\r\n   \r\n   public static void main(String...args)  {\r\n        Source source = new GsonBuilder( ).create( ).fromJson( JSON, Source.class );\r\n        System.out.println( source );\r\n    }\r\n}\r\n```\r\nThe output is:\r\n\r\n`Source(p1=100, p2=[Destination.Inner(e1=300, e2=null, e3=null)]) `\r\n\r\nI expected default values for the Inner nested objects, i.e.:\r\n\r\n`Source(p1=100, p2=[Destination.Inner(e1=300, e2=..., e3=500)])`\r\n\r\nbut nested objects don't have them. What is a problem?", "Once you make the `Inner` class `static`, it will work as you're expecting. =||= I'm aware that Gson works correctly for static nested classes. In my real code it's not possible to convert a non-static inner class to a static nested class.\r\nI also know the following solution (registering a custom InstanceCreator):\r\n\r\n```\r\npublic class Main {\r\n   private static final String JSON = \"{ `p1`: `100`, `p2`: [ { `e1`:`300` } ] }\".replaceAll( \"`\", \"\\\"\" );\r\n   \r\n   public static void main(String...args)  {\r\n        Source source = new GsonBuilder()\r\n                .registerTypeAdapter(Destination.Inner.class, (InstanceCreator<Destination.Inner>) (type) -> new Destination().new Inner())\r\n                .create().fromJson(JSON, Source.class);\r\n        System.out.println( source );\r\n    }\r\n}\r\n```\r\n\r\n\r\nBut I wonder if there is a more concise (maybe more elegant) solution to this problem? After all, without the custom InstanceCreator, GSON creates new instances of the Inner class, but doesn't give them default values for fields. =||= @kraskkrz \r\nI don't think it's possible to find a better way than registering a custom instance creator in your case. The reason of your issue is that Gson omits invoking constructors while instantiating classes that do not have default constructors, with `UnsafeAllocator`. Since the fields default values are assigned in constructors, creating an inner class instance using `UnsafeAllocator` makes the created object unconstructed with the fields left uninitialized. Here is an example output for `java -p -c Destination\\$Inner.class` of what is constructed under the hood:\r\n\r\n```\r\n  public i1392.Destination$Inner(i1392.Destination);\r\n    Code:\r\n       0: aload_0\r\n       1: aload_1\r\n       2: putfield      #4                  // Field this$0:Li1392/Destination;\r\n       5: aload_0\r\n       6: invokespecial #5                  // Method java/lang/Object.\"<init>\":()V\r\n       9: aload_0\r\n      10: sipush        200\r\n      13: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\r\n      16: putfield      #1                  // Field e1:Ljava/lang/Integer;\r\n      19: aload_0\r\n      20: ldc           #7                  // String ...\r\n      22: putfield      #2                  // Field e2:Ljava/lang/String;\r\n      25: aload_0\r\n      26: sipush        500\r\n      29: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\r\n      32: putfield      #3                  // Field e3:Ljava/lang/Integer;\r\n      35: return\r\n```\r\n\r\nIf inner class implicit constructors would not have the only parameter referencing its enclosed class, Gson would use regular Reflection API `outerClass.newInstance()` therefore all fields would be initialized. So, registering an instance creator is a hint to Gson for a way how an particular instance can be created and properly constructed. I don't think you can make it all more concise, sorry. =||= To all of you that took time and patience I m sorry I'm  just know responding to you .please accept my apology.\r\nBut I dont understand how things work on your website. For instance did you make the changes that was requested or do I.\r\nI diffently understand all the string line stuff\r\nThe was 2 that said this issue when I tried I cannot do.\r\nAll these issues are on zte Grand X4 Z956 Android smartphone.\r\nIt was even hard for me to tell which messages where mine.\r\nI'm sorry I wasted your time.\r\nIf someone could explain things to me what I'm suppose to or not, explain how to I give up \r\nI can't any response from what help center\r\nOne scan thank you & I'm sorry I wasted your time\r\nCritterloversrv\r\n\r\n =||= @lyubomyr-shaydariv Thank you for your help. The `UnsafeAllocator `source code explains how Gson works. =||= ", 0], ["1393", "Add Diffblue Deeptest tests", "Diffblue Assistant", "diffblue-assistant", "04/10/19, 10:41:27 AM", "The test cases contained in this PR were automatically generated by [Diffblue](http://www.diffblue.com/)'s [Deeptest](http://www.diffblue.com/papers/overview.pdf) software.\r\n\r\nDiffblue is an Oxford-based start-up that aims to automate traditional coding tasks to increase developer productivity. One of our missions is to provide useful tests to open source projects. In return we would appreciate your feedback on our tests to help us further improve our tool.\r\n\r\nThese tests are part of a batch of 479 in total, providing an increase of approximately 18% in line coverage.\r\nWe would be happy to provide the remaining tests via a subsequent PR.\r\n\r\nResults for various open source projects can be viewed at:\r\n\r\n[http://diff.blue/demo](http://diff.blue/demo)\r\n\r\nWe welcome any feedback you have on these tests.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", 0], ["1396", "refactor similar test cases", "Jun", "yannickzj", "10/09/18, 01:25:53 AM", "Hi!\r\n\r\nAs part of our research, we have developed a tool to suggest refactorings for test cases that appear to be similar. For Gson, it suggested these refactorings. We believe that they can improve test maintainability going forward and hope that you will accept this pull request. Please contact me or Patrick Lam <patrick.lam@uwaterloo.ca> if you have any questions.", "PS this research was supported in part by a Google Faculty Research Award (thanks!) =||= Sorry, the PR doesn't create more readable/maintainable code from my perspective =||= ", 0], ["1399", "Strange issue between release and debug build variants", "Niels v/d Spek", "nielsnl68", "10/10/18, 02:14:03 PM", "I just found out that the result is different between my release and debug build's\r\nWhen i use the debug version all data is loaded properly but when i switch to the release build the data is empty.\r\n---\r\n`public class SearchItem implements Serializable {\r\n    private long   id;\r\n    private String title =\"\";\r\n\r\n    private String url =\"\";\r\n    private int rating =0;\r\n    private String description =\"\";\r\n    private String twitter =\"\";\r\n    private String facebook =\"\";\r\n    private String other =\"\";\r\n    private String schedule =\"\";\r\n    private String genres =\"\";\r\n    private String banner =\"\";\r\n    private int active =0;\r\n\r\n    public SearchItem() {\r\n    }\r\n\r\n    public long getID() {  return id; }\r\n    public String getTitle() {  return title; }\r\n    public int getRating() {  return rating; }\r\n    public String getUrl() {     return url; }\r\n    public String getDescription() {    return description;   }\r\n    public String getTwitter()  {  return twitter; }\r\n    public String getFacebook() {  return facebook; }\r\n    public String getOther()    {    return other;   }\r\n    public String getSchedule() {  return schedule; }\r\n    public String getGenres()   {  return genres; }\r\n    public String getBanner()   {    return banner;   }\r\n    public int getActive()      { return active; }\r\n}\r\n`\r\n\r\n`loadjson() {\r\nString response = '[{\"id\":488,\r\n                                \"title\":\"\\\"Avibus\\\"\",\r\n                                \"url\":\"http:\\/\\/topwebcomics.com\\/twcout\\/22197\",\r\n                                \"description\":\"After bringing home a strange homeless girl named 'Scarlet,' Kelley Russo discovers a fascinating hidden world of cryptids and legends. \\r\\nBut she is far from welcome.\",\r\n                                \"twitter\":\"https:\\/\\/twitter.com\\/LotMinx\",\r\n                                \"facebook\":\"https:\\/\\/www.facebook.com\\/LotMinx\\/\",\r\n                                \"other\":\"http:\\/\\/avibus.thewebcomic.com\",\"schedule\":\"Friday\",\"genres\":\"Adventure, Fantasy\",\r\n                                \"banner\":\"https:\\/\\/s3-us-west-2.amazonaws.com\\/twc.images\\/images\\/comicbanner\\/22197_468 x 60 banner ad avi 2.jpg\",\r\n                                \"active\":\"1\",\r\n                                \"rating\":\"2\"},\r\n                               {\"id\":7282,\r\n                                \"title\":\"\\\"Curing Cancer\\\"\",\r\n                                \"url\":\"http:\\/\\/topwebcomics.com\\/twcout\\/15443\",\r\n                                \"description\":\"A webcomic that does much. Except cure your cancer.\",\r\n                                \"twitter\":\"\",\r\n                                \"facebook\":\"\",\r\n                                \"other\":\"http:\\/\\/www.curingcancercomics.com\",\r\n                                \"schedule\":\"\",\r\n                                \"genres\":\"\",\r\n                                \"banner\":\"\",\r\n                                \"active\":\"1\",\r\n                                \"rating\":\"3\"}];\r\n                            Type listType = new TypeToken<List<SearchItem>>() {}.getType();\r\n                            List<SearchItem> items = new Gson().fromJson(response,  listType);\r\n}\r\n`\r\n\r\nThe list is created with all the SearchItems but the SearchItems objects are empty.", "This is a build configuration problem and not a problem with Gson, likely as the result of the use of ProGuard. Since it's not a Gson problem, we are not equipped to assist. You'll have better luck on StackOverflow provided you can supply more detail about your build configuration and the tool which is (presumably) obfuscating your code. =||= I'm using the default Android studio settings. So i dont get why this should not be an GSON issue.  =||= Gson doesn't know anything about build types. The fact that it works in one and not the other means there's no problem with Gson. =||= You can fix this adding a line like this: \"-keep class com.example.project.models.device.** { *; }\" in proguard-rules file to avoid obfuscation for the field variables and that are sent outside the app via OkHttpClient or similar. =||= ", 0], ["1400", "Typo in JavaDoc example", "Samyak Bakliwal", "hmble", "10/10/18, 03:09:11 PM", "NaN", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1400", "Typo in JavaDoc example", "Samyak Bakliwal", "hmble", "10/10/18, 03:09:11 PM", "NaN", "NaN"], ["hmble", "Typo in JavaDoc example", "10/10/18, 02:58:10 PM", "GitHub", "b046ea28eeb819ecc30c3a39cb6912dc84fae015", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -104,9 +104,9 @@\n  * registered. This protects your application from injection attacks. If you\n  * don't supply an explicit type label, the type's simple name will be used.\n  * <pre>   {@code\n- *   shapeAdapter.registerSubtype(Rectangle.class, \"Rectangle\");\n- *   shapeAdapter.registerSubtype(Circle.class, \"Circle\");\n- *   shapeAdapter.registerSubtype(Diamond.class, \"Diamond\");\n+ *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");\n+ *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");\n+ *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");\n  * }</pre>\n  * Finally, register the type adapter factory in your application's GSON builder:\n  * <pre>   {@code, ", 3, 3, "\"modified, \"", 6], 1], ["1401", "Fix JPMS module setup (fixes #1315)", "Piet van Dongen", "pietvandongen", "10/10/18, 08:22:49 PM", "NaN", "We need to maintain compatibility all the way to Java 6. =||= Aw, right, I'll do a new one that targets 1.6 and up then. Thanks! =||= ", 0], ["1402", "Fix JPMS module setup (fixes #1315)", "Piet van Dongen", "pietvandongen", "10/18/18, 03:49:09 PM", "I've followed the instructions from the Apache Maven Compiler Plugin team here: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html\r\n\r\nThis should ensure compatibility with Java 6+ while providing module info for Java 9+.\r\n\r\nAlso, in `gson/src/main/java/com/google/gson/Gson.java` I've removed calls to a constructor only introduced in Java 1.7, which broke backwards compatibility.", "NaN", ["1402", "Fix JPMS module setup (fixes #1315)", "Piet van Dongen", "pietvandongen", "10/18/18, 03:49:09 PM", "I've followed the instructions from the Apache Maven Compiler Plugin team here: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html\n\nThis should ensure compatibility with Java 6+ while providing module info for Java 9+.\n\nAlso, in `gson/src/main/java/com/google/gson/Gson.java` I've removed calls to a constructor only introduced in Java 1.7, which broke backwards compatibility.", "NaN"], ["Piet van Dongen", "Re-added cause to AssertionErrors", "10/18/18, 07:57:16 AM", "Piet van Dongen", "22877d67ba44299e8d77eb841ab20c2087d46752", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -705,7 +705,9 @@ public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOE\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -783,7 +785,9 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       writer.setLenient(oldLenient);\n       writer.setHtmlSafe(oldHtmlSafe);\n@@ -941,7 +945,9 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n       // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n       throw new JsonSyntaxException(e);\n     } catch (AssertionError e) {\n-      throw new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      AssertionError error = new AssertionError(\"AssertionError (GSON \" + GsonBuildConfig.VERSION + \"): \" + e.getMessage());\n+      error.initCause(e);\n+      throw error;\n     } finally {\n       reader.setLenient(oldLenient);\n     }, ", 9, 3, "\"modified, \"", 12], 1], ["1403", "GsonResponseBodyConverter - java.lang.OutOfMemoryError ", "Thanh Le", "chuoichien", "10/18/18, 04:26:21 AM", "Hi,\r\n\r\nRecently, i got this exception from my application, may not be due to source code or my data.\r\n\r\nCaused by java.lang.OutOfMemoryError: Failed to allocate a 30536292 byte allocation with 4194304 free bytes and 28MB until OOM\r\n       at java.util.ArrayList.add(ArrayList.java:118)\r\n       at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(SourceFile:1083)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(SourceFile:129)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(SourceFile:220)\r\n       at retrofit2.converter.gson.GsonResponseBodyConverter.convert(SourceFile:37)\r\n       at retrofit2.converter.gson.GsonResponseBodyConverter.convert(SourceFile:25)\r\n       at retrofit2.ServiceMethod.toResponse(SourceFile:118)\r\n       at retrofit2.OkHttpCall.parseResponse(SourceFile:212)\r\n       at retrofit2.OkHttpCall.execute(SourceFile:174)\r\n       at retrofit2.adapter.rxjava.CallExecuteOnSubscribe.call(SourceFile:40)\r\n       at retrofit2.adapter.rxjava.CallExecuteOnSubscribe.call(SourceFile:24)\r\n       at retrofit2.adapter.rxjava.BodyOnSubscribe.call(SourceFile:33)\r\n       at retrofit2.adapter.rxjava.BodyOnSubscribe.call(SourceFile:25)\r\n       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)\r\n       at rx.Observable.unsafeSubscribe(SourceFile:10151)\r\n       at rx.internal.operators.OnSubscribeMap.call(SourceFile:1048)\r\n       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)\r\n       at rx.Observable.unsafeSubscribe(SourceFile:10151)\r\n       at rx.internal.operators.OnSubscribeMap.call(SourceFile:1048)\r\n       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)\r\n       at rx.Observable.unsafeSubscribe(SourceFile:10151)\r\n       at rx.internal.operators.OperatorSubscribeOn$1.call(SourceFile:94)\r\n       at rx.internal.schedulers.ScheduledAction.run(SourceFile:55)\r\n       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:422)\r\n       at java.util.concurrent.FutureTask.run(FutureTask.java:237)\r\n       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:152)\r\n       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:265)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\r\n       at java.lang.Thread.run(Thread.java:818)\r\n\r\nPlease help me resolve this!\r\n\r\nThanks.\r\n`com.google.code.gson:gson:2.8.2`", "OOMs are never caused directly by the stacktrace which they contain. There is usually a build-up of events which lead to them. This is a combination of leaks (intentional or not) or producers which outrun their consumers or any number of other causes.\r\n\r\nSuffice to say, Gson is doing what you told it. Trying to allocate a 30MB something which your JSON and model dictated was required. The OOM comes from the JVM being unable to provide Gson with what it requested, and not from Gson itself. =||= ", 0], ["1409", "Should MapTypeAdapterFactory.Adapter throw an exception while reading objects with duplicate keys?", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "12/05/18, 07:45:35 PM", "Today I came across an interesting [question](https://stackoverflow.com/questions/52855391/javajson-to-map-using-gson) on StackOverflow. The author asks why the following JSON document cannot be deserialized:\r\n\r\n```json\r\n{\r\n\t\"K1\": \"V1\",\r\n\t\"K2\": \"V2\",\r\n\t\"K1\": \"V3\"\r\n}\r\n```\r\n\r\nIf deserializing the above document with `gson.fromJson(..., Map.class)`, the following exception is thrown:\r\n\r\n```\r\nJsonSyntaxException: duplicate key: key0\r\n```\r\n\r\nHowever, if the document is deserialized with `gson.fromJson(..., Object.class)`, as found by another user, the deserialized map is as follows:\r\n\r\n```\r\n{K1=V3, K2=V2}\r\n```\r\n\r\nThis is obviously an inconsistent behavior, but I find the \"`Object`\" implementation more useful. As far as I know, JSON [does not prohibit](https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object) use of duplicate keys simply describing its grammar.\r\n\r\nShould `ObjectTypeAdapter` throw an exception on duplicate keys, or should `MapTypeAdapterFactory.Adapter` not check duplicate keys (however, the check was added by a clear intention in a98d6eae472df67317d58d34f13438bb958668b1)?\r\n\r\n----\r\n\r\nRelated: #386, #649", "Closed as a duplicate of #649. =||= ", 0], ["1411", "Updated copyright year in readme file", null, "hansblafoo", "10/23/18, 02:13:20 PM", "updated the copyright information in this central readme file because an outdated copyright year imposes license issues in using this software correctly", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= We are advised to not update this number =||= ", 0], ["1412", "toString vs asString behavior for string types in java", null, "jmiodownik", "10/23/18, 06:32:42 PM", "TO WHOM IT MAY CONCERN, I AM VERY UNHAPPY WITH TOSTRING(). MY GRANDSON KEEPS RUNNING IT ON THE COMPUTER AND IT PULLS UP WORDS WITH EXTRA QUOTES. PLEASE FIX THIS AS I NEED TO PRINT OUT MY COUPONS FOR THE CRACKER BARGAL EARLY BIRD SPECIAL. ALL THE BEST HAROLD. XXX", "NaN", 0], ["1413", "Display null-handling details as sublist", "Jeremy W. Sherman", "jeremy-w", "10/26/18, 03:57:13 PM", "Indent the details of null handling.\r\n\r\nComparing against the [old, Google Sites user guide][gsites] shows that the two items following the \"handles nulls correctly\" item are intended as a sublist under that item.\r\n\r\n[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1413", "Display null-handling details as sublist", "Jeremy W. Sherman", "jeremy-w", "10/26/18, 03:57:13 PM", "Indent the details of null handling.\n\nComparing against the [old, Google Sites user guide][gsites] shows that the two items following the \"handles nulls correctly\" item are intended as a sublist under that item.\n\n[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects", "NaN"], ["Jeremy W. Sherman", "Display null-handling details as sublist\n\nIndent the details of null handling.\r\n\r\nComparing against the [old, Google Sites user guide][gsites] shows that the two items following the \"handles nulls correctly\" item are intended as a sublist under that item.\r\n\r\n[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects", "10/26/18, 03:12:00 PM", "GitHub", "aa1a34eb5e1f0070b2b5697434a358059a4d7267", ["UserGuide.md"], "@@ -148,8 +148,8 @@ BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n * There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n * If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n * This implementation handles nulls correctly.\n-* While serializing, a null field is omitted from the output.\n-* While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n+  * While serializing, a null field is omitted from the output.\n+  * While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n * If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization.\n * Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.\n , ", 2, 2, "\"modified, \"", 4], 1], ["1414", "Question: Replacing TypeToken from Guava with Gson ?", "Olivier Roger", "oroger", "03/07/19, 07:54:11 AM", "I am currently trying to refactor a project to avoid having to use guava as a dependency.\r\nI was using it mainly for reflection related features, but in most case I could find an altenative.\r\n\r\nHowever, there is one case left I cannot fix for now:\r\nI try to retrieve the class of a generic parameter of the current class.\r\n\r\nIt works fine using Guava since the Type returned by TokenType can be casted to Class<I>.\r\n\r\nGuava:\r\n`(Class<I>) new com.google.common.reflect.TypeToken<I>(getClass()) {}.getType();`\r\n\r\nI attempted to substitute this call using the TypeToken from Gson instead, but apparently the information about I is lost and there result of this call is a TypeVariable than is kept as a Class<Object> after executing:\r\n\r\nGson:\r\n`(Class<I>) com.google.gson.reflect.TypeToken<I>() {}.getType();\t`\r\n\r\nAs far as I can tell the getClass() parameter is a clue to why context is not kept.\r\nWhen I use Guava with the same signature:\r\n\r\n`(Class<I>) com.google.gson.reflect.TypeToken<I>() {}.getType();\t`\r\n\r\nI get this error message:\r\n\r\n> java.lang.IllegalStateException: Cannot construct a TypeToken for a type variable.\r\n> You probably meant to call new TypeToken<I>(getClass()) that can resolve the type variable for you.\r\n> If you do need to create a TypeToken of a type variable, please use TypeToken.of() instead.\r\n\r\nI see Gson also as a (package protected) constructor using a Type as argument.\r\n\r\nIs there a way to obtain the class of a Generic Parameter using Gson only ?", "I also asked the question on [StackOverflow](https://stackoverflow.com/q/53060057/957103)  =||= Do you really need type tokens? It looks like the use of type tokens here is a bit of an overkill, since you still  only need the type it _can_ hold. =||= You are right, it does seems overkill.\r\n\r\nI just have not found a better way to go from generic Type parameter to its corresponding class right now.\r\nI would be interested in your idea to do that. =||= @oroger \r\nYou should merely bound to `java.lang.reflect.Type` and not `java.lang.Class`, if possible. Types represent classes, parameterized classes, wildcards, arrays, etc, whilst `Class` is a special case of a type that represents a class and not parameterization (by design; please also see the `java.lang.reflect.ParameterizedType` interface) -- this is why a type parameter cannot be cast to a class because javac merely does not have any clue on that. If you want to have your code to be more type-safe, you might want to bound to `TypeToken<T>`, not `Type`, but you'll need to cast its `.getType()` to `Class` if possible and necessary (note that type tokens are a bit tricky because they rely on a fact that Java preserves super classes/interfaces parameterization, therefore requiring a new anonymous classe for each type token declaration; but if you're fine with `Type`s, you can simply construct your `ParameterizedType` instances).\r\n =||= I missed that point 3 months ago, but:\r\n\r\n> Is there a way to obtain the class of a Generic Parameter using Gson only ?\r\n\r\n(IF I understood your question 100% clear) You can't do this in _your_ case, because you're trying to obtain the actual class while can obtain a type variable only (at least this is what I can see in your original question). For example, suppose you want to have your code play nice with generics and type safety, and you're deciding to get rid of Gson `TypeToken` completely, then you could implement a simple type-safe wrapper:\r\n\r\n```java\r\nabstract class T<TYPE>\r\n\t\timplements Supplier<Type> {\r\n\r\n\tprivate final Type type;\r\n\r\n\tprotected T() {\r\n\t\ttype = resolveType();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic final Type get() {\r\n\t\treturn type;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic final boolean equals(final Object o) {\r\n\t\tif ( this == o ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif ( o == null || getClass() != o.getClass() ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfinal T<?> that = (T<?>) o;\r\n\t\treturn type.equals(that.type);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic final int hashCode() {\r\n\t\treturn type.hashCode();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic final String toString() {\r\n\t\treturn type.toString();\r\n\t}\r\n\r\n\tprivate Type resolveType() {\r\n\t\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\n\t\tfinal Class<T<TYPE>> superclass = (Class) T.class;\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal Class<? extends T<TYPE>> thisClass = (Class<T<TYPE>>) getClass();\r\n\t\tfinal Class<?> actualSuperclass = thisClass.getSuperclass();\r\n\t\tif ( actualSuperclass != superclass ) {\r\n\t\t\tthrow new IllegalArgumentException(thisClass + \" must extend \" + superclass + \" directly but it extends \" + actualSuperclass);\r\n\t\t}\r\n\t\tfinal Type genericSuperclass = thisClass.getGenericSuperclass();\r\n\t\tif ( !(genericSuperclass instanceof ParameterizedType) ) {\r\n\t\t\tthrow new IllegalArgumentException(thisClass + \" must parameterize its superclass \" + genericSuperclass);\r\n\t\t}\r\n\t\tfinal ParameterizedType parameterizedGenericSuperclass = (ParameterizedType) genericSuperclass;\r\n\t\tfinal Type[] actualTypeArguments = parameterizedGenericSuperclass.getActualTypeArguments();\r\n\t\tif ( actualTypeArguments.length != 1 ) {\r\n\t\t\tthrow new AssertionError(actualTypeArguments.length);\r\n\t\t}\r\n\t\treturn actualTypeArguments[0];\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNow suppose you have a quick test like this:\r\n\r\n```java\r\npublic static <ANY> void main(final String... args) {\r\n\tSystem.out.println(new T<Integer>() {}.get());\r\n\tSystem.out.println(new T<Map<Integer, List<String>>>() {}.get());\r\n\tSystem.out.println(new T<ANY>() {}.get());\r\n}\r\n```\r\n\r\nThe code above produces\r\n\r\n```\r\nclass java.lang.Integer\r\njava.util.Map<java.lang.Integer, java.util.List<java.lang.String>>\r\nANY\r\n```\r\n\r\nwhose classes are `class java.lang.Class`, `class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl`, and `class sun.reflect.generics.reflectiveObjects.TypeVariableImpl` (for example). Note that each of them are implemented differently therefore have different classes. In the case of `<ANY>` you can't have an actual type when invoking the method with different type parameters. It won't work unless you let it know the actual type somehow. For example:\r\n\r\n```java\r\npublic static void main(final String... args) {\r\n\t// ...\r\n\tfinal Integer i1 = thisCanWork(new T<Integer>() {});\r\n\tfinal Map<Integer, List<String>> m1 = thisCanWork(new T<Map<Integer, List<String>>>() {});\r\n\t// ...\r\n\tfinal Integer i2 = thisCannotWork();\r\n\tfinal Map<Integer, List<String>> m2 = thisCannotWork();\r\n}\r\n\r\nprivate static <ANY> ANY thisCanWork(final T<ANY> type) {\r\n\tSystem.out.println(type);\r\n\treturn null; // pretend\r\n}\r\n\r\nprivate static <ANY> ANY thisCannotWork() {\r\n\tSystem.out.println(new T<ANY>() {});\r\n\treturn null; // pretend\r\n}\r\n```\r\n\r\nThis results in\r\n\r\n```\r\nclass java.lang.Integer\r\njava.util.Map<java.lang.Integer, java.util.List<java.lang.String>>\r\nANY\r\nANY\r\n```\r\n\r\nThe `T` implementation is a simple wrapper demonstrating why type tokens can work and how they obtain the type information. Additionally, `Class<I>` cannot work here because `Class` only represents a class loaded by a class loader in JVM, these classes cannot be _actually_ parameterized (but can can extend parameterized classes and this makes the type tokens work + and can hold _type variable_ being not able to work as well as the `thisCannotWork()` method can't).\r\n\r\nConsider type tokens only as a type safe alternative for holding types your application work with (this makes methods like `thisCanWork()` control what types are used as \"in\" and \"out\"), however this is just a wrapper around a `Type` instance that actually represents a type, not class. In my comment above I marked that `Type` is the essential part here, and it does not really matter where you can obtain it from: either construct it yourself just implementing proper interfaces, or ask `javac` to put type information into the subclass' superclass metadata and then use type token mechanism.\r\n\r\nSorry for a long and vague answer, I hope it can shed some more light on how types and type tokens work. =||= Thank you for the detailed explanation. This is actually clearer in my mind. =||= ", 0], ["1415", "Fast finder", "\u0e2a\u0e38\u0e18\u0e35\u0e23\u0e4c \u0e27\u0e23\u0e23\u0e13\u0e28\u0e34\u0e23\u0e34\u0e01\u0e38\u0e25", "deninzane", "11/04/18, 04:44:46 AM", "NaN", "NaN", 0], ["1416", "Deserialization using generics", "Matej", "matejhacin", "11/07/18, 04:26:12 PM", "I'm trying to implement a generic abstract class (in Kotlin) which support deserialization using Gson.\r\n\r\nTo simplify, the code is something like this:\r\n\r\n    abstract class Callback<T> {\r\n\r\n        ...\r\n\r\n        init {\r\n\r\n            value = gson.fromJson<T>(json, object : TypeToken<T>() {}.type)\r\n\r\n        }\r\n\r\n        ...\r\n\r\n    }\r\n\r\nOn the `init` line, the `type` is underlined and the error says _Type inference failed: Not enough information to infer parameter T_\r\n\r\nNow I understand why this error is happening, but I wonder if there's a workaround that works. I am guessing there is, because Retrofit also works using generics and it has no problem deserializing response using Gson.\r\n\r\nAny help greatly appreciated.", "`T` is `Object` an runtime. Gson needs to know the type to look up the correct type adapter. You'll need to pass in the type or the type adapter. =||= Thanks. Since this is not possible, I'll just close the issue then. For now, I solved it by passing `Type` as a parameter. Still not a fan of the solution though, since now I always have to create Type by doing `object : TypeToken<MyObject>() {}.type` every time and it makes code a bit more messy.\r\n\r\nI still wonder how Retrofit does it though, since it works using generics and gson. If anyone can explain that, it will be appreciated. =||= Retrofit uses reflection to see the type and looks up a Converter for the type. =||= ", 0], ["1419", "Delete LICENSE", null, "Lukety88", "11/07/18, 06:50:29 PM", "NaN", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= Why do we want to delete this? I understand that the license is available in GitHub anyway, but having an explicit LICENSE file is not a bad idea. =||= Sorry I was trying to figure out how to delete api put on my phone by my gf\nwhile I was sleeping.\n\nOn Nov 7, 2018 12:51 PM, \"inder123\" <notifications@github.com> wrote:\n\n> Closed #1419 <https://github.com/google/gson/pull/1419>.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1419#event-1952444527>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/Aqw9L25YRwhf5dA6pnJsXED0E8tjl_Vxks5usyuagaJpZM4YSmyG>\n> .\n>\n =||= ", 0], ["1422", "Infer type in generic instance creation.", null, "reudismam", "11/10/18, 06:54:11 PM", "This edit replaces type parameters to invoke the constructor of a generic class with an empty set (<>), diamond operator and allow inference of type parameters by the context. This edit ensures the use of generic instead of the deprecated raw types.", "This projects builds with JDK 6 (or `-release 6`) which does not allow the diamond operator. =||= ", 0], ["1424", "toJson() fails when trying to serialize an object of DoublyLinkedList<Record>", "Muddi Walid", "Muddz", "11/29/18, 05:49:53 PM", "I have a `DoublyLinkedList<Record>` object I want to jsonify with Gson, but when doing so I get this common infinite loop error even when I have done everything by the books: \r\n\r\n    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n\r\n\r\n\r\n\r\n**Record.java**\r\n\r\n    class Record {\r\n\r\n    private String objectName;\r\n    private Object object;\r\n\r\n    Record(String objectName, Object object) {\r\n        this.objectName = objectName;\r\n        this.object = object;\r\n    }\r\n\r\n    Object getObject() {\r\n        return object;\r\n    }\r\n    String getObjectName() {\r\n        return objectName;\r\n      }\r\n    }\r\n\r\n**Gson Deserializing:**\r\n\r\n      Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();\r\n      DoublyLinkedList<Record> linkedList = new Gson().fromJson(json, classType);\r\n\r\n**Gson Serializing:**\r\n\r\n      Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();\r\n      String json = gson.toJson(list,classType);\r\n\r\n\r", "Please provide the full exception trace.\n\nOn Sun, Nov 11, 2018, 6:53 AM Muddi Walid <notifications@github.com wrote:\n\n> I have a DoublyLinkedList<Record> object I want to jsonify with Gson, but\n> when doing so I get this common infinite loop error even when I have done\n> everything by the books:\n>\n> at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\n>     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\n>     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\n>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\n>\n> *Record.java*\n>\n> class Record {\n>\n> private String objectName;\n> private Object object;\n>\n> Record(String objectName, Object object) {\n>     this.objectName = objectName;\n>     this.object = object;\n> }\n>\n> Object getObject() {\n>     return object;\n> }\n> String getObjectName() {\n>     return objectName;\n>   }\n> }\n>\n> *Gson Serializing:*\n>\n>   Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();\n>   DoublyLinkedList<Record> linkedList = new Gson().fromJson(json, classType);\n>\n> *Gson Deserializing:*\n>\n>   Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();\n>   String json = gson.toJson(list,classType);\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1424>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZ1UVS9vjdBdAgbews5ALHvXPy9Iks5uuA-sgaJpZM4YYckO>\n> .\n>\n =||= Here you go @JakeWharton \r\n\r\nGson version: 2.8.5\r\nGradle version: 3.2.0\r\n\r\n```\r\n    java.lang.StackOverflowError: stack size 8MB\r\n        at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:946)\r\n        at com.google.gson.Gson.getAdapter(Gson.java:434)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:56)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.internal.bind.ObjectTypeAdapter.write(ObjectTypeAdapter.java:107)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n2018-11-11 15:08:55.594 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) 2018-11-11 15:08:55.731 17647-17658/com.muddzdev.regret.demo I/zygote64: Background                         concurrent copying GC freed 71214(1859KB) AllocSpace objects, 4(6MB) LOS objects, 42% free,                 33MB/57MB, paused 105.092ms total 246.181ms\r\n        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo I/chatty: uid=11187(u0_a1187)         com.muddzdev.regret.demo identical 2276 lines\r\n        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at         com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n        at         com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n        at com.google.gson.Gson.toJson(Gson.java:704)\r\n        at com.google.gson.Gson.toJson(Gson.java:683)\r\n        at com.google.gson.Gson.toJson(Gson.java:638)\r\n        at com.muddzdev.regret.Session.saveList(Session.java:49)\r\n        at com.muddzdev.regret.Session.setList(Session.java:26)\r\n        at com.muddzdev.regret.RegretHandler.save(RegretHandler.java:17)\r\n        2018-11-11 15:08:56.228 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at         com.muddzdev.regret.Regret.add(Regret.java:17)\r\n        at com.muddzdev.regret.demo.MainActivity.onCreate(MainActivity.java:62)\r\n        at android.app.Activity.performCreate(Activity.java:7183)\r\n        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)\r\n        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2910)\r\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3032)\r\n        at android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1696)\r\n        at android.os.Handler.dispatchMessage(Handler.java:105)\r\n        at android.os.Looper.loop(Looper.java:164)\r\n        at android.app.ActivityThread.main(ActivityThread.java:6944)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)\r\n``` =||= I can't tell if you have a really deeply nested tree or a cyclic reference (or both). Can you provide an executable sample that demonstrates the problem? =||= @JakeWharton Here is a simple sample projekt https://github.com/Muddz/GsonDoublyLinkedListSample/blob/master/app/src/main/java/com/muddzdev/gsondoublylinkedlistsample/MainActivity.java\r\n\r\nWhile doing the sample projekt I figured out that `toJson()` only fails when `DoublyLinkedList` has nodes. If `DoublyLinkedList` is empty then it works. Further more the `DoublyLinkedList.java` is a my own implementation with a private inner class of `Node`  =||= @JakeWharton It seem to be a problem with my own implementation of `DoublyLinkedList`. I tried use `Gson` on the default java `LinkedList` class and it worked. The problem lies in the `Node` inner class of my `DoublyLinkedList\r\n` =||= Hi again @JakeWharton. I haven't been able to fix the problem and I'm not sure where the problem is. When I try to parse an instance of `LinkedList<Integer>` with `toJson()` of the original implementation by Java it works fine. But with this [DoublyLinkedList](https://github.com/Muddz/Regret/blob/master/regret/src/main/java/com/muddzdev/regret/DoublyLinkedList.java) it will just cause the same error as mentioned above.  =||= Your object graph conntains cycles. You need to register a custom type\nadapter that delegates to the adapter for a regular List. Or just specify\nyour fields as List instead of the concrete DoublyLinkedList type so that\nwill be done automatically.\n\nOn Wed, Nov 28, 2018, 8:57 AM Muddi Walid <notifications@github.com wrote:\n\n> Hi again @JakeWharton <https://github.com/JakeWharton>. I haven't been\n> able to fix the problem and I'm not sure where the problem is. When I try\n> to parse an instance of LinkedList<Integer> with toJson() of the original\n> implementation by Java it works fine. But with this DoublyLinkedList\n> <https://github.com/Muddz/Regret/blob/master/regret/src/main/java/com/muddzdev/regret/DoublyLinkedList.java>\n> it will just cause the same error as mentioned above.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1424#issuecomment-442455337>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEdh2Qf0m79OA0va0QAeRYOa2M6muks5uzpY4gaJpZM4YYckO>\n> .\n>\n =||= I tried to look at `TypeAdapter` but as I can see, this will only support primitive types of data. \r\nWhen using the `out` and `in` objects.\r\n\r\nThe DoublyLinkedList should be able to contain native Android objects such as `Paint`\r\nMaybe Gson isn't acutally suited for my use case, I'm right here?\r\n\r\n\r\nCan you provide me with more information on this part _\" just specify\r\nyour fields as List instead of the concrete DoublyLinkedList type so that\r\nwill be done automatically.\"_ =||= Type adapters are for any type. I think you should ask your question on\nStackOverflow since it's not a bug or feature request.\n\nOn Wed, Nov 28, 2018, 11:07 AM Muddi Walid <notifications@github.com wrote:\n\n> I tried to look at TypeAdapter but as I can see, this will only support\n> primitive types of data.\n> When using the out and in objects.\n>\n> The DoublyLinkedList should be able to contain native Android objects such\n> as Paint\n> Maybe Gson isn't acutally suited for my use case, I'm right here?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1424#issuecomment-442502830>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEfhfqPa8ufEdpoaF1ARPuQJgk1SWks5uzrS9gaJpZM4YYckO>\n> .\n>\n =||= @JakeWharton Yes. Thank you for your time.  =||= ", 0], ["1428", "Refactor JsonParser to use static access", "Degubi", "Degubi", "11/18/18, 12:17:28 AM", "Deprecate the default and only constructor of the JsonParser class and make the parser methods statically accessible. Because the constructor is only deprecated, no code change is required. The constructor is marked \"forRemoval\", although it is not a requirement to keep the \"forRemoval\" marked as true.\r\nEdit: Removed forRemoval because of Java8", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= While this may be a good idea, we don't accept breaking changes in this project. =||= Is this a breaking change at the bytecode level? Because at source level it works the old way and the new way too. =||= ", 0], ["1430", "Add static method alternatives to JsonParser", "Degubi", "Degubi", "03/29/19, 10:28:54 PM", "Alternative request to add static methods to JsonParser. This way no bytecode changes. I didn't mark the constructor as deprecated this time to avoid warnings.  The PR adds 3 new static methods to JsonParser and refactors the existing 3 instance methods to use the static ones.", "ok =||= What is the key issue you are trying to solve? \r\nIs it the creation of the JsonParser object that is bothering you? Or is it a deeper philosophical issue. =||= I just don't like the look of it. And the need to create a new parser object every time. Also, the method names \"parse\" vs \"parseString\" I can see that I'm parsing the Json from a string, not from a Reader. =||= @Degubi why did you close this pull request?\r\n\r\nYou were definitely not the only one with this opinion, see [this StackOverflow comment](https://stackoverflow.com/questions/4110664/gson-directly-convert-string-to-jsonobject-no-pojo#comment30505372_4527044) =||= @Marcono1234 I reopened it with better deprecations, see #1513 . I really think it they should be statics, but I'm not sure about others thinking the same... (See the discussion in #1513) =||= ", 0], ["1431", "JSON API Support", "Tayn\u00e3 Bonaldo", "taynanbonaldo", "11/21/18, 12:04:27 AM", "Are [JSON API](https://jsonapi.org) specification supported by GSON?\r\n\r\nIf it's not supported, why?", "Gson doesn't care about the format of your JSON so you're free to model that if you like, but there's no built-in support or anything. =||= Thank you so much @JakeWharton! \r\n\r\nBut can I handle an array of \"included\" objects that represents all type of relations in JSON API specification? ie.:\r\n\r\n``` json\r\n{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"2\",\r\n            \"type\": \"my_type\",\r\n            \"attributes\": {\r\n                \"a\": \"\",\r\n                \"b\": 1\r\n            },\r\n            \"relationships\": {\r\n                \"type_as\": {\r\n                    \"data\": {\r\n                        \"id\": \"21\",\r\n                        \"type\": \"type_a\"\r\n                    }\r\n                }\r\n                \"type_bs\": {\r\n                    \"data\": [\r\n                        {\r\n                            \"id\": \"40\",\r\n                            \"type\": \"type_b\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"included\": [\r\n        {\r\n            \"id\": \"21\",\r\n            \"type\": \"type_a\",\r\n            \"attributes\": {\r\n                \"updated_at\": \"2018-11-19 18:07:30 -0200\",\r\n                \"url\": \"https://...\"\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"40\",\r\n            \"type\": \"type_b\",\r\n            \"attributes\": {\r\n                \"name\": \"\",\r\n                \"address\": \"\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n``` \r\n\r\nGiven this format where \"included\" is an array of multiple types, how can I solve this parse? =||= You would have to interpret those at a higher layer of abstraction than\nGson which is only concerned with the raw conversion to the JSON format.\n\nOn Tue, Nov 20, 2018, 7:22 PM Tayn\u00e3 Bonaldo <notifications@github.com wrote:\n\n> Thank you so much @JakeWharton <https://github.com/JakeWharton>!\n>\n> But can I handle an array of \"included\" objects that represents all type\n> of relations in JSON API specification? ie.:\n>\n> { \"data\": [ { \"id\": \"2\", \"type\": \"my_type\", \"attributes\": { \"a\": \"\", \"b\":\n> 1 }, \"relationships\": { \"type_as\": { \"data\": { \"id\": \"21\", \"type\": \"type_a\"\n> } } \"type_bs\": { \"data\": [ { \"id\": \"40\", \"type\": \"type_b\" } ] } } } ],\n> \"included\": [ { \"id\": \"21\", \"type\": \"type_a\", \"attributes\": { \"updated_at\":\n> \"2018-11-19 18:07:30 -0200\", \"url\": \"https://...\" } }, { \"id\": \"40\",\n> \"type\": \"type_b\", \"attributes\": { \"name\": \"\", \"address\": \"\" } } ] }\n>\n> Given this format where \"included\" is an array of multiple types, how can\n> I solve this parse?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1431#issuecomment-440479005>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEXUW0J209GZF1k_bYWSP3qWn1H-xks5uxJzOgaJpZM4YsJkD>\n> .\n>\n =||= ", 0], ["1433", "fromJson() ObjectId bug", "valia", "Val9000", "11/23/18, 10:36:29 AM", "I've no idea why but somehow the gson.fromJson() method changes the ObjectId... I even have tried multiple versions of GSON still the same bug.\r\n\r\nside note : Using MongoDB (mlab)\r\n![image](https://user-images.githubusercontent.com/30831748/48937684-322a9700-ef0f-11e8-9a8c-0439dddb6c8d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/30831748/48937417-428e4200-ef0e-11e8-9ac7-88032dc11e87.png)\r\n\r\nId changes from : \r\n\r\n5bf7368be3ee7f3bd05c98d1\r\n to \r\n5bf73bdce3ee7f2678544c2a\r\n\r\n\r\n`public class Car {\r\n\r\n    private ObjectId _id;\r\n    private String name, description;\r\n    private int hp, year;\r\n\r\n    public Car(String name, String description, int hp, int year) {\r\n        this.name = name;\r\n        this.description = description;\r\n        this.hp = hp;\r\n        this.year = year;\r\n    }\r\n\r\n    public Car(ObjectId _id, String name, String description, int hp, int year) {\r\n        this._id = _id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.hp = hp;\r\n        this.year = year;\r\n    }\r\n\r\n    public ObjectId getId() {\r\n        return _id;\r\n    }\r\n\r\n    public void setId(ObjectId _id) {\r\n        this._id = _id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public int getHp() {\r\n        return hp;\r\n    }\r\n\r\n    public void setHp(int hp) {\r\n        this.hp = hp;\r\n    }\r\n\r\n    public int getYear() {\r\n        return year;\r\n    }\r\n\r\n    public void setYear(int year) {\r\n        this.year = year;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"\" + name + \", \" + year + \", \" + hp + \", \" + description;  \r\n    }\r\n\r\n}`", "Found out you need to write an \"Adapter\" because GSON doesn't support that.\r\n =||= ", 0], ["1434", "Bug in JsonDeserializer?", "Tracy Snell", "tjsnell", "11/29/18, 08:24:37 PM", "When you have a list<someBaseClass> with a custom deserializer it works fine except when you have nested cases. Example attached. Used version 2.8.5\r\n\r\n```\r\n\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport com.google.gson.JsonDeserializationContext\r\nimport com.google.gson.JsonDeserializer\r\nimport com.google.gson.JsonElement\r\nimport com.google.gson.JsonParseException\r\nimport java.lang.reflect.Type\r\n\r\n\r\nopen class BaseClass {\r\n    var myType: String? = null\r\n    var myList = mutableListOf<BaseClass>()\r\n    var dep: BaseClass? = null\r\n}\r\n\r\nopen class ClassA : BaseClass() {\r\n    val astuff: String? = null\r\n}\r\n\r\nopen class ClassB : BaseClass() {\r\n    val bstuff: String? = null\r\n}\r\n\r\nopen class Resources {\r\n    val myList = mutableListOf<BaseClass>()\r\n}\r\n\r\n\r\nval json1 = \"\"\"\r\n{\r\n  \"myList\": [\r\n    {\r\n      \"myType\": \"ClassA\",\r\n      \"astuff\": \"a stuff\"\r\n    },\r\n    {\r\n      \"myType\" : \"ClassB\",\r\n      \"bstuff\" : \"things b needs\"\r\n    }\r\n  ]\r\n}\r\n\"\"\".trimIndent()\r\n\r\nval json2 = \"\"\"\r\n          {\r\n            \"myType\" : \"ClassA\",\r\n            \"astuff\" : \"a stuff\",\r\n            \"myList\" : [\r\n              {\r\n                \"myType\" : \"ClassB\",\r\n                \"bstuff\" : \"things b needs\"\r\n              }\r\n            ]\r\n          }\r\n\"\"\".trimIndent()\r\n\r\nval json3 = \"\"\"\r\n          {\r\n            \"myType\" : \"ClassA\",\r\n            \"astuff\" : \"a stuff\",\r\n            \"dep\" :               {\r\n                \"myType\" : \"ClassB\",\r\n                \"bstuff\" : \"things b needs\"\r\n              },\r\n            \"myList\" : [\r\n              {\r\n                \"myType\" : \"ClassB\",\r\n                \"bstuff\" : \"things b needs\"\r\n              }\r\n            ]\r\n          }\r\n\"\"\".trimIndent()\r\n\r\n\r\nfun main(args: Array<String>) {\r\n\r\n    val gson = getGson()\r\n\r\n    // working example\r\n    val test1 = gson.fromJson(json1, Resources::class.java)\r\n    if (!(test1.myList[0] is ClassA)) {\r\n        println(\"Test1 Error: first array entry should be ClassA but is ${test1.myList[0]::class.java}\")\r\n    }\r\n\r\n    if (!(test1.myList[1] is ClassB)) {\r\n        println(\"Test1 Error: first array entry should be ClassB but is ${test1.myList[1]::class.java}\")\r\n    }\r\n\r\n    // broken examples\r\n    val test2 = gson.fromJson(json2, BaseClass::class.java)\r\n    if (!(test2.myList[0] is ClassA)) {\r\n        println(\"Test3 Error: first array entry should be ClassA but is ${test2.myList[0]::class.java}\")\r\n    }\r\n\r\n    val test3 = gson.fromJson(json3, BaseClass::class.java)\r\n\r\n}\r\n\r\nfun getGson(): Gson {\r\n    return GsonBuilder()\r\n            .registerTypeAdapter(BaseClass::class.java, ClassDeserializerAdapter1<BaseClass>(\"myType\"))\r\n            .create()\r\n}\r\n\r\nclass ClassDeserializerAdapter1<T> internal constructor(private val typeName: String) : JsonDeserializer<T> {\r\n    private val gson: Gson\r\n\r\n    init {\r\n        gson = GsonBuilder()\r\n                .create()\r\n    }\r\n\r\n    @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): T {\r\n        val jsonObject = json.asJsonObject\r\n        val typeElement = jsonObject.get(typeName)\r\n        val method = typeElement.asString\r\n        val classType = Class.forName(\"com.juicelabs.fhir.base.$method\") as Class<out T>\r\n        return gson.fromJson(json, classType)\r\n    }\r\n}\r\n```", "Pending writeup on my learnings and the right way to do this. =||= ", 0], ["1441", "The JavaDoc is now more accurate about the type adapter serialization and deserialization", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "10/28/19, 11:11:16 PM", "This should fix `RuntimeTypeAdapterFactory` JavaDoc missing information for proper serialization and deserialization, originally raised in #1440.", "NaN", ["1441", "The JavaDoc is now more accurate about the type adapter serialization and deserialization", "Lyubomyr Shaydariv", "lyubomyr-shaydariv", "10/28/19, 11:11:16 PM", "This should fix `RuntimeTypeAdapterFactory` JavaDoc missing information for proper serialization and deserialization, originally raised in #1440.", "NaN"], ["Lyubomyr Shaydariv", "The JavaDoc is now more accurate about the type adapter serialization and deserialization", "12/08/18, 11:42:38 AM", "Lyubomyr Shaydariv", "383f7bdcdf980eca8a7de26d795c5061f767f31b", ["extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"], "@@ -120,6 +120,18 @@\n  *       .registerSubtype(Circle.class)\n  *       .registerSubtype(Diamond.class);\n  * }</pre>\n+ *\n+ * <h3>Serialization and deserialization</h3>\n+ * In order to serialize and deserialize a polymorphic object,\n+ * you must specify the base type explicitly.\n+ * <pre>   {@code\n+ *   Diamond diamond = new Diamond();\n+ *   String json = gson.toJson(diamond, Shape.class);\n+ * }</pre>\n+ * And then:\n+ * <pre>   {@code\n+ *   Shape shape = gson.fromJson(json, Shape.class);\n+ * }</pre>\n  */\n public final class RuntimeTypeAdapterFactory<T> implements TypeAdapterFactory {\n   private final Class<?> baseType;, ", 12, 0, "\"modified, \"", 12], 1], ["1442", "Add j2objc annotations to fix memory leak in transpiled objective-c ", null, "iousin", "12/17/18, 06:34:21 AM", "The issue has been discussed on j2objc page here, j2objc team recommended to create a PR to be merged into mainstream gson codebase. \r\nhttps://github.com/google/j2objc/issues/921\r\n\r\nThe guava project already has j2objc annotations. \r\nThese annotations will fix memory leak related to LinkedTreeMap when transpiled to objective-c code using j2objc. \r\n\r\nThanks.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n<!-- need_author_cla --> =||= We don't accept any dependency on external jars =||= @inder123  I just wonder if this kind memory leak is fixed in latest Gson version? I also meet the leak in 2.8.0 =||= ", 0], ["1445", "Parsing HATEOAS HAL has an issue.", "Deleted user", "ghost", "12/12/18, 10:30:11 AM", "I am using Swagger CodeGen on rest-assured which is using Gson for deserializing JSON to DTOs, but the Gson has an issue to parse this JSON because of HAL format (_links).", "You haven't provided any information about what the issue is or how we can reproduce it. Without this there's no action to take as it's not clear whether there's an actual problem or whether the library is just being used incorrectly. =||= ", 0], ["1454", "Implemented Fixes suggested by #1432", "Paul Kassianik", "paulkass", "10/04/19, 06:29:14 PM", "Implemented some fixes suggested by @fridrich in issue #1432.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it. =||= CLAs look good, thanks!\n\n<!-- ok --> =||= ", ["1454", "Implemented Fixes suggested by #1432", "Paul Kassianik", "paulkass", "10/04/19, 06:29:14 PM", "Implemented some fixes suggested by @fridrich in issue #1432.", "NaN"], ["Paul Kassianik", "Fixed tests for java 11", "01/11/19, 12:49:50 AM", "Paul Kassianik", "b52e1aca99a701292b4d4492a3579e3eca31dc3b", ["gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java"], "@@ -88,8 +88,9 @@ public void testParsingDatesFormattedWithSystemLocale() throws Exception {\n           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n-      assertParsed(JavaVersion.isJava9OrLater() ?\n+      assertParsed(JavaVersion.isJava9OrLater() ? (JavaVersion.getMajorJavaVersion() <11 ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n+                      \"jeudi 1 janvier 1970 \u00e0 00:00:00 Temps universel coordonn\u00e9\") :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {, ", 2, 1, "\"modified, \"", 3], 1], ["1457", "GSON deserialization breaks java.util.regex.Pattern", "\u0421\u0435\u0440\u0433\u0435\u0439 \u0426\u044b\u043f\u0430\u043d\u043e\u0432", "stsypanov", "01/21/19, 11:27:58 AM", "1. Checkout https://github.com/stsypanov/gson_bug_example\r\n2. Run `GsonTest` (test is green)\r\n3. Switch JDK to 11 (jdk-11.0.1)\r\n4. Run `GsonTest` (test is red)\r\n\r\nI think the reason here is usage of Unsafe in `UnsafeAllocator`", "Gson does not have any special support for the `Pattern` class. You should not serialize and deserialize classes you don't control having no proper type adapters. In general, you should always have something like this for such classes:\r\n\r\n```java\r\n.registerTypeAdapter(Pattern.class, (JsonSerializer<Pattern>) (pattern, type, context) -> {\r\n\tfinal JsonObject jsonObject = new JsonObject();\r\n\tjsonObject.addProperty(\"pattern\", pattern.pattern());\r\n\tjsonObject.addProperty(\"flags\", pattern.flags());\r\n\treturn jsonObject;\r\n})\r\n.registerTypeAdapter(Pattern.class, (JsonDeserializer<Pattern>) (jsonElement, type, context) -> {\r\n\tfinal JsonObject jsonObject = jsonElement.getAsJsonObject();\r\n\tfinal String pattern = jsonObject.get(\"pattern\").getAsString();\r\n\tif ( !jsonObject.has(\"flags\") ) {\r\n\t\treturn Pattern.compile(pattern);\r\n\t}\r\n\treturn Pattern.compile(pattern, jsonObject.get(\"flags\").getAsInt());\r\n})\r\n```\r\n\r\nNow all test become green and the types you work with are well-controlled. I guess this one can be closed? =||= Indeed, test doesn't fail now, thanks!\r\n\r\nHowever I still wonder why there's a difference between behaviour on different JDKs. =||= ", 0], ["1459", "Unable to parse \u0161 character (\\u009a) from JSON.", "Jake Lee", "JakeSteam", "01/24/19, 04:29:06 PM", "Whilst parsing JSON data from NASA's APOD API ([this in particular](https://api.nasa.gov/planetary/apod?date=2019-01-23&api_key=DEMO_KEY)), the following is returned: `\"Luk\\u00e1\\u009a Vesel\\u00fd\"`.\r\n\r\nI would expect this to be parsed as `Luk\u00e1\u0161 Vesel\u00fd`, instead `Luk\u00e1\u009a Vesel\u00fd` comes out. Interestingly, Postman also manages to parse the 2 other characters, but fails on the [\\u009a](http://www.fileformat.info/info/unicode/char/9a/index.htm) (\u0161) too.\r\n\r\nIt's entirely possible this isn't a GSON issue, but the 2nd and 3rd screenshots below *do* imply that.\r\n\r\nPostman, Gson parsing, raw string:\r\n![image](https://user-images.githubusercontent.com/12380876/51641158-634e3480-1f5d-11e9-9a96-9b7e71f4dd36.png)\r", "As per the [Unicode Latin-1 supplement](https://www.unicode.org/charts/PDF/U0080.pdf) code point \\u009A stands for _Single Character Introducer_ and it is a control character thus having no graphical representation.\r\n\r\nThe character you are looking for is _LATIN SMALL LETTER S WITH CARON_, code point \\u0161 as per the [Latin Extended-A](https://www.unicode.org/charts/PDF/U0100.pdf).\r\n\r\nAlso tested your text changing the character and it worked without any error. =||= Hmm, so essentially the NASA API is returning the wrong character, or using the wrong unicode definition, and the reference site I listed is too?\r\n\r\nI couldn't see a way to change the unicode version GSON uses, so this API's response is unusable without using some third party conversion, right? =||= @JakeSteam \r\nThe demo API call seems to return a wrong character that looks more of a typo. If you decode the \"s with caron\" in your issue title, you'll get `\\u0161` that is what you're actually expecting from the response, not `\\u009A`. =||= Fair enough, I'll take it up with NASA then! Thanks. =||= ", 0], ["1460", "Incredibly HUGE bug", "Antonio Sorrentini", "ansorre", "01/29/19, 02:05:35 PM", "Gson version 2.8.5.\r\nI think this is so bad and huge and eloquent that no other comment is necessary than showing the code:\r\n\r\nimport com.google.gson.Gson;\r\n\r\npublic class Gson_HUGE_Bug\r\n{\r\n public String fieldOne;\r\n public String fieldTwo;\r\n\r\n public static void main(String args[])\r\n {\r\n  Gson_HUGE_Bug workingOk=new Gson_HUGE_Bug();\r\n  workingOk.fieldOne=\"ok value one\";\r\n  workingOk.fieldTwo=\"ok value two\";\r\n  System.out.println(new Gson().toJson(workingOk));\r\n\r\n  Gson_HUGE_Bug notWorkingAtAll=new Gson_HUGE_Bug(){{fieldOne=\"so bad value one\";fieldTwo=\"so bad value two\";}};\r\n  System.out.println(new Gson().toJson(notWorkingAtAll));\r\n\r\n  System.out.println(\r\n   \"Infact notWorkingAtAll.fieldOne=\\\"\"+notWorkingAtAll.fieldOne+\r\n    \"\\\" as well notWorkingAtAll.fieldTwo=\\\"\"+notWorkingAtAll.fieldTwo+\r\n    \"\\\" and of course notWorkingAtAll is not null at all!\");\r\n }\r\n\r\n /*\r\n Expected result:\r\n    {\"fieldOne\":\"ok value one\",\"fieldTwo\":\"ok value two\"}\r\n    {\"fieldOne\":\"so bad value one\",\"fieldTwo\":\"so bad value two\"}\r\n    Infact notWorkingAtAll.fieldOne=\"so bad value one\" as well notWorkingAtAll.fieldTwo=\"so bad value two\" and of course notWorkingAtAll is not null at all!\r\n\r\n What instead it produces:\r\n    {\"fieldOne\":\"ok value one\",\"fieldTwo\":\"ok value two\"}\r\n    null\r\n    Infact notWorkingAtAll.fieldOne=\"so bad value one\" as well notWorkingAtAll.fieldTwo=\"so bad value two\" and of course notWorkingAtAll is not null at all!\r\n\r\n  */\r\n\r\n}\r", "the gson  ingnore Anonymous Class!\r\nplease see\r\ncom.google.gson.internal.Excluder\r\n\r\n```java\r\nprivate boolean excludeClassChecks(Class<?> clazz) {\r\n      if (version != Excluder.IGNORE_VERSIONS && !isValidVersion(clazz.getAnnotation(Since.class), clazz.getAnnotation(Until.class))) {\r\n          return true;\r\n      }\r\n\r\n      if (!serializeInnerClasses && isInnerClass(clazz)) {\r\n          return true;\r\n      }\r\n\r\n      if (isAnonymousOrLocal(clazz)) {\r\n          return true;\r\n      }\r\n\r\n      return false;\r\n  }\r\n```\r\n\r\n@Ansorre  =||= This is working as intended. Gson doesn't support anonymous classes because they cannot be symmetrically deserialized. =||= Thank you all for your replays. :-)  =||= ", 0], ["1461", "Deserialize JSON with references $id, $ref from JsonNet C#", null, "LucaGabi", "01/31/19, 03:32:22 PM", "How to deserialize json string that contains $ref, $id ? ", "There is no automatic handling of this. You will have to write a layer on top of Gson's deserialization in order to perform linking of JSON references. =||= ", 0], ["1462", "java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $", "Ay\u015fenur G\u00f6kdemir", "AysenurGokdemir", "01/31/19, 09:16:48 PM", "why am I getting this error ? I'm working on it since two days. Please Help Me !\r\n\r\njava.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 colum \r\n\r\n\r\npublic interface BorsaApi {\r\n    @GET(\"json/all_prices.json?=1548332164791\")\r\n    Call<List<Example>> getResult();\r\n\r\n}\r\n\r\nExample.java\r\n\r\npublic class Example {\r\n    @SerializedName(\"altin\")\r\n\r\n    public List<BorsaResult> altin=new ArrayList<>();\r\n\r\n    public List<BorsaResult> getAltin() {\r\n        return altin;\r\n    }\r\n\r\n    public void setAltin(List<BorsaResult> altin) {\r\n        this.altin = altin;\r\n    }\r\n}\r\n\r\nOncekiKapanis.java class\r\n\r\npublic class OncekiKapanis {\r\n    @SerializedName(\"alis\")\r\n\r\n    public String alis;\r\n    @SerializedName(\"satis\")\r\n\r\n    public String satis;\r\n    @SerializedName(\"tarih\")\r\n\r\n    public String tarih;\r\n\r\n    public OncekiKapanis(String alis, String satis, String tarih) {\r\n        this.alis = alis;\r\n        this.satis = satis;\r\n        this.tarih = tarih;\r\n    }\r\n\r\n    public String getAlis() {\r\n        return alis;\r\n    }\r\n\r\n    public void setAlis(String alis) {\r\n        this.alis = alis;\r\n    }\r\n\r\n    public String getSatis() {\r\n        return satis;\r\n    }\r\n\r\n    public void setSatis(String satis) {\r\n        this.satis = satis;\r\n    }\r\n\r\n    public String getTarih() {\r\n        return tarih;\r\n    }\r\n\r\n    public void setTarih(String tarih) {\r\n        this.tarih = tarih;\r\n    }\r\n}\r\npublic class BorsaResult{\r\n @SerializedName(\"alis\")\r\n    public String alis;\r\n    @SerializedName(\"satis\")\r\n    public String satis;\r\n    @SerializedName(\"tarih\")\r\n\r\n    public String tarih;\r\n    @SerializedName(\"onceki_kapanis\")\r\n\r\n    public List<OncekiKapanis> onceki_kapanis;\r\n\r\n\r\n    public BorsaResult(String alis, String satis, String tarih,List<OncekiKapanis> onceki_kapanis) {\r\n\r\n        this.alis = alis;\r\n        this.satis = satis;\r\n        this.tarih = tarih;\r\n        this.onceki_kapanis = onceki_kapanis;\r\n\r\n        /*onceki_kapanis.alis=o_alis;\r\n        onceki_kapanis.satis=o_satis;\r\n        onceki_kapanis.tarih=o_tarih;*/\r\n    }\r\n\r\n\r\n    public String getAlis() {\r\n        return alis;\r\n    }\r\n\r\n    public void setAlis(String alis) {\r\n        this.alis = alis;\r\n    }\r\n\r\n    public String getSatis() {\r\n        return satis;\r\n    }\r\n\r\n    public void setSatis(String satis) {\r\n        this.satis = satis;\r\n    }\r\n\r\n    public String getTarih() {\r\n        return tarih;\r\n    }\r\n\r\n    public void setTarih(String tarih) {\r\n        this.tarih = tarih;\r\n    }\r\n\r\n    public List<OncekiKapanis> getOnceki_kapanis() {\r\n        return onceki_kapanis;\r\n    }\r\n\r\n    public void setOnceki_kapanis(List<OncekiKapanis> onceki_kapanis) {\r\n        this.onceki_kapanis = onceki_kapanis;\r\n    }\r\n}\r\nFragmentResult .java\r\n\r\npublic class FragmentResult extends Fragment {\r\n    public static final Object TAG=\"\";\r\n    LinearLayoutManager layoutManager;\r\n    List<Example> borsaResultList=new ArrayList<>();\r\n\r\n    BorsaAdapter borsaAdapter;\r\n    RecyclerView recyclerView;\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n      View view=inflater.inflate(R.layout.fragment_result, container, false);\r\n\r\n        recyclerView = view.findViewById(R.id.rv_result);\r\n        layoutManager = new LinearLayoutManager(this.getActivity());\r\n\r\n        borsaAdapter = new BorsaAdapter(getActivity(),borsaResultList);\r\n\r\n\r\n        BorsaApi apiService= ClientApi.getRetrofit().create(BorsaApi.class);\r\n        Call<List<Example>> call=apiService.getResult();\r\n        call.enqueue(new Callback<List<Example>>() {\r\n            @Override\r\n            public void onResponse(Call<List<Example>> call, Response<List<Example>> response) {\r\n                List<Example>models=response.body();\r\n                BorsaAdapter shopAdap = new BorsaAdapter((Example) models, R.layout.fragment_result,getActivity());\r\n\r\n                recyclerView.setLayoutManager(layoutManager);\r\n                recyclerView.setHasFixedSize(true);\r\n                recyclerView.setAdapter(shopAdap);\r\n\r\n                int x=0;\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<List<Example>> call, Throwable t) {\r\n                int x=0;\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }}\r\n\r\nAdapter class\r\n\r\npublic class BorsaAdapter extends RecyclerView.Adapter<BorsaAdapter.MyHolder>implements ListAdapter {\r\n\r\n    private Context context;\r\n    public List<Example> borsa_result=new ArrayList<Example>();\r\n\r\n    public BorsaAdapter(Context context, List<Example> borsa_result) {\r\n        this.context = context;\r\n        this.borsa_result=borsa_result;\r\n\r\n\r\n    }\r\n    public BorsaAdapter(Example models, int fragment_result, FragmentActivity activity) {\r\n        this.borsa_result= (List<Example>) models;\r\n    }\r\n\r\n\r\n    @NonNull\r\n    @Override\r\n    public BorsaAdapter.MyHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.result_recyclerview_items,null,false);\r\n        view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT,RecyclerView.LayoutParams.WRAP_CONTENT));\r\n        MyHolder myHolder=new MyHolder(view);\r\n        return myHolder;\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull BorsaAdapter.MyHolder holder, int position) {\r\n                holder.onceki_kapanis_tarih.setText((CharSequence) borsa_result.get(position).getAltin());\r\n    }\r\n    public static  class  MyHolder extends  RecyclerView.ViewHolder{\r\n        TextView tv_altin,alis,satis,tarih,onceki_kapanis,onceki_kapanis_alis,onceki_kapanis_satis,onceki_kapanis_tarih;\r\n\r\n        public MyHolder(View itemView) {\r\n            super(itemView);\r\n            tv_altin=itemView.findViewById(R.id.altin);\r\n            alis=itemView.findViewById(R.id.alis);\r\n            satis=itemView.findViewById(R.id.satis);\r\n            tarih=itemView.findViewById(R.id.tarih);\r\n            onceki_kapanis=itemView.findViewById(R.id.onceki_kapanis);\r\n            onceki_kapanis_alis=itemView.findViewById(R.id.onceki_kapanis_alis);\r\n            onceki_kapanis_satis=itemView.findViewById(R.id.onceki_kapanis_satis);\r\n            onceki_kapanis_tarih=itemView.findViewById(R.id.onceki_kapanis_tarih);\r\n\r\n        }\r\n    }\r\n\r", "Your JSON does not match the model you asked Gson to bind. This is fairly common and is a usage question which has been written about a lot on blogs, mailing lists, and StackOverflow. I would suggest you consult StackOverflow questions of similar nature. =||= Thank you for answer.\r\nproblem is solved .  =||= You have solved the problem, I need help =||= how did you solve the problem? =||= > problem\r\n\r\n\r\n\r\n\r\n\r\n I was explained in my website.\r\nhttp://aysenurgokdemir.com/2020/03/16/solution-of-the-java-lang-illegalstate-exception/\r\n =||= thank you =||= > Thank you for answer.\r\n> problem is solved .\r\n\r\nhow you can solve your problem?\r\nplease answer me because i have a same problem. =||= I was explained in my website.\r\nhttp://aysenurgokdemir.com/2020/03/16/solution-of-the-java-lang-illegalstate-exception/ =||= ", 0], ["1464", "Update Gson.java documentation to explicitly state behavior for empty strings", "M\u00e1rton Braun", "zsmb13", "02/17/19, 08:32:44 AM", "Empty strings result in `null` being returned, but this is only stated for `null` strings in the documentation.", "NaN", ["1464", "Update Gson.java documentation to explicitly state behavior for empty strings", "M\u00e1rton Braun", "zsmb13", "02/17/19, 08:32:44 AM", "Empty strings result in `null` being returned, but this is only stated for `null` strings in the documentation.", "NaN"], ["M\u00e1rton Braun", "Update Gson.java documentation to explicitly state behavior for empty strings", "02/04/19, 12:54:51 PM", "GitHub", "ffb315ef692b17b0d2b02915d7ee3eb4b30e46af", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -832,7 +832,8 @@ public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOExce\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type\n    */\n@@ -965,7 +966,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n    * @param json the root of the parse tree of {@link JsonElement}s from which the object is to\n    * be deserialized\n    * @param classOfT The class of T\n-   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n@@ -988,7 +990,8 @@ private static void assertFullConsumption(Object obj, JsonReader reader) {\n    * <pre>\n    * Type typeOfT = new TypeToken&lt;Collection&lt;Foo&gt;&gt;(){}.getType();\n    * </pre>\n-   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}.\n+   * @return an object of type T from the json. Returns {@code null} if {@code json} is {@code null}\n+   * or if {@code json} is empty.\n    * @throws JsonSyntaxException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */, ", 6, 3, "\"modified, \"", 9], 1], ["1465", "k", null, "kirtan227", "02/05/19, 02:12:04 PM", "k\r\n\r\n_Originally posted by @kirtan227 in https://github.com/google/github-issue-mover/issues/140#issuecomment-460625342_", "NaN", 0], ["1466", "Gson cannot handle equals as per documentation", null, "mmanna-sapfgl", "02/06/19, 08:50:54 PM", "In GSON documentation, the following is mentioned\r\n\r\nhttps://sites.google.com/site/gson/gson-user-guide#TOC-Object-\r\n\r\n> **Collections Examples**\r\n> Gson gson = new Gson();\r\n> Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);\r\n> \r\n> (Serialization)\r\n> String json = gson.toJson(ints); ==> json is [1,2,3,4,5]\r\n> \r\n> (Deserialization)\r\n> Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();\r\n> Collection<Integer> ints2 = gson.fromJson(json, collectionType);\r\n> **ints2 is same as ints**\r\n\r\nbut this is not correct. If you do a JUnit test and do assertEquals(ints, ints2) it always fails. \r\nPlease provide a fix or update documentation to suggest that a \"Deep\" equals should be tested when dealing with nested/custom/primitive inner types in a List.", "NaN", 0], ["1468", "Updated readme with dynamic versioning", "Talha Hasan Zia", "talhahasanzia", "02/07/19, 01:48:09 PM", "Hi,\r\n\r\nAs many libraries do this, I updated readme with dynamic versioning, with links to release versions, this make sure users check latest release version when using gson in their project.\r\n\r\nPreviously:\r\n\r\n```gradle\r\ndependencies {\r\n  implementation 'com.google.code.gson:gson:2.8.5'\t \r\n}\r\n```\r\n\r\nNow,\r\n\r\nSee [releases](https://github.com/google/gson/releases) for latest version.\r\n\r\n```gradle\r\ndependencies {\r\n  implementation 'com.google.code.gson:gson:2.x.x'\t \r\n}\r\n```\r\n\r\n\r\nSimilarly Maven dependency,\r\n\r\nPreviously,\r\n\r\n```\r\n<dependency>\r\n  <groupId>com.google.code.gson</groupId>\r\n  <artifactId>gson</artifactId>\r\n  <version>2.8.5</version>\r\n</dependency>\r\n```\r\n\r\nNow,\r\n```\r\n<dependency>\r\n  <groupId>com.google.code.gson</groupId>\r\n  <artifactId>gson</artifactId>\r\n  <version>2.x.x</version>\r\n</dependency>\r\n```\r", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n<!-- ok --> =||= I find the previous version,\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.google.code.gson</groupId>\r\n  <artifactId>gson</artifactId>\r\n  <version>2.8.5</version>\r\n</dependency>\r\n```\r\n\r\nmuch easier to copy/paste. :smiley:  =||= > I find the previous version,\r\n> \r\n> ```\r\n> <dependency>\r\n>   <groupId>com.google.code.gson</groupId>\r\n>   <artifactId>gson</artifactId>\r\n>   <version>2.8.5</version>\r\n> </dependency>\r\n> ```\r\n> \r\n> much easier to copy/paste. \ud83d\ude03\r\n\r\nIt is just a matter of opinion, lets see what general public has to say, it is easier yes, what if in some cases update is always good? like a critical bug fix, so this approach will allow user to always check for the latest version :-) =||= Part of the release process is to update this so it doesn't get out of date. We too prefer the ability to directly copy/paste. =||= ", 0], ["1469", "java.lang.NumberFormatException: For input string: \"11-ea\"", "Reza Farrahi M", "imriss", "04/04/21, 11:18:00 PM", "It seems that the fix for \"9-Debian\" Java version does not work for \"11-ea\" like string:\r\n```\r\nCaused by: java.lang.NumberFormatException: For input string: \"11-ea\"\r\n    at java.lang.NumberFormatException.forInputString (NumberFormatException.java:65)\r\n    at java.lang.Integer.parseInt (Integer.java:652)\r\n    at java.lang.Integer.parseInt (Integer.java:770)\r\n    at com.google.gson.util.VersionUtils.determineMajorJavaVersion (VersionUtils.java:28)\r\n    at com.google.gson.util.VersionUtils.<clinit> (VersionUtils.java:24)\r\n    at com.google.gson.internal.reflect.ReflectionAccessor.<clinit> (ReflectionAccessor.java:36)\r\n    at com.google.gson.internal.ConstructorConstructor.<init> (ConstructorConstructor.java:51)\r\n    at com.google.gson.Gson.<init> (Gson.java:205)\r\n    at com.google.gson.Gson.<init> (Gson.java:185)\r\n    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.listInstalledPlugins (ScannerPluginInstaller.java:108)\r\n    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.loadPlugins (ScannerPluginInstaller.java:78)\r\n    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.installRemotes (ScannerPluginInstaller.java:62)\r\n    at org.sonar.scanner.bootstrap.ScannerPluginRepository.start (ScannerPluginRepository.java:59\r\n```\r\n\r\nIt seems to be called from here via `Gson().fromJson`:\r\nhttps://github.com/SonarSource/sonarqube/blob/138171d657c57fe015c4dcc4be996973f87f5365/sonar-scanner-engine/src/main/java/org/sonar/scanner/bootstrap/ScannerPluginInstaller.java#L103\r\n\r\nThanks\r\n\r\n[1] - Fix for \"9-Debian\" Java version string: https://github.com/google/gson/pull/1311/files\r\n[2] - [Report of \"9-Debian\" Java version issue: ](https://github.com/google/gson/issues/1310)", "Ugh. We should just create a multi-release jar so that we can use `Runtime.Version` on 9+. =||= Hi, is there any way to work around the issue until a patch is available ? =||= Ok, Updating to 2.8.5 solved the issue for me. =||= ", 0], ["1471", "Added Adapter Layering Feature", "Paul Kassianik", "paulkass", "02/20/19, 01:25:19 AM", "**Why this is useful:** Suppose you have a class with a lot of fields. Most of them can be easily interpreted by the Gson reader, possibly with a field naming strategy. But some have such weird names that the field naming strategy might not necessarily properly match them to the target properties. Especially if the JSON comes from a third party (like an API), the best course of action as of today is to create your own `TypeAdapter` and manually map *all* of the fields, including the ones that GSON could map on it's own. This is why I added the \"Fill-In\" feature. The `registerTypeAdapterWithFillIn` method allows you to manually define only the fields that Gson can not map properly, while not having to map trivial mappings.\r\n\r\n**Implementation Details:** The way to register a custom adapter with Fill-in is through the `GsonBuilder#registerTypeAdapterWithFillIn` method. This method wraps the adapter into a constructor object that is then passed to an instance of the `ReflectiveTypeAdapterFactory.Adapter` class. In other words, when the `read` method is called on a `ReflectiveTypeAdapterFactory.Adapter` instance, the `ObjectContstructor` object calls the custom adapter and generates an instance of the target class whose fields are written to or overwritten (see the Conditions section).\r\n\r\nWhen calling the `create` method on the `ReflectiveTypeAdapterFactory` responsible for producing a fill-in adapter, it will only return the adapter when the target type is or is a subclass of the desired target class. This is unlike the usual `ReflectiveTypeAdapterFactory` instances which serve to create a catch-all type adapter for non-standard classes.\r\n\r\nIn order to support the construction of instances while reading from the input `JsonReader`, the `InstanceCreator` and `ObjectConstructor` have methods that accept a `JsonReader` object. If not overridden by the implementation, they default to the normal `construct` method (for backwards compatibility). \r\n\r\nI wrote some tests in the `test/.../gson/internal/bind/LayeredAdapterTest.java` class to demonstrate and test some common use cases that I thought of for this feature.\r\n\r\n**Notes:** \r\n* The outside adapter field will overwrite any field values previously written to in the instance returned by the user-defined Adapter. To avoid this, add the `@Expose` annotation to the fields that you want to be protected from overwriting. \r\n* Due to the use of `default` methods in interfaces, this only supports java versions of 8+, and **will fail the travis-ci check**. I would really appreciate if someone pointed out a way to achieve the same thing in a backwards-compatible way without relying on Java 8 features. Also, if there is going to be a multi-release jar as suggested in #1469, this can go in the java 8+ jar.", "Java 6 compatibility fixed in #1473  =||= ", 0], ["1472", "Adapt gson/gson/README to match with gson/README.md", "Lorenz Nickel", "LorenzNickel", "03/03/19, 07:28:01 PM", "Adapt [README](https://github.com/google/gson/blob/master/gson/README) to match exactly with the beginning of [README.md](https://github.com/google/gson/blob/master/README.md)", "NaN", ["1472", "Adapt gson/gson/README to match with gson/README.md", "Lorenz Nickel", "LorenzNickel", "03/03/19, 07:28:01 PM", "Adapt [README](https://github.com/google/gson/blob/master/gson/README) to match exactly with the beginning of [README.md](https://github.com/google/gson/blob/master/README.md)", "NaN"], ["BlockLab", "Adapt gson/gson/README to match with gson/README.md", "02/19/19, 10:53:23 PM", "BlockLab", "b31450fc81be042d3cd1c5f2a260dde92ec99070", ["gson/README"], "@@ -1,5 +1,5 @@\n-Gson is a Java library that can be used to convert a Java object into its \n-JSON representation. It can also be used to convert a JSON string into an \n+Gson is a Java library that can be used to convert Java Objects into their \n+JSON representation. It can also be used to convert a JSON string to an \n equivalent Java object. Gson can work with arbitrary Java objects including \n pre-existing objects that you do not have source-code of.\n , ", 2, 2, "\"modified, \"", 4], 1], ["1474", "Code cleanup (Removed spaces)", "Lorenz Nickel", "LorenzNickel", "03/03/19, 07:18:07 PM", "I removed one space in many comments, where double spaces were used improperly, unified comments and removed spaces in code where they were more confusing than helpful.", "NaN", ["1474", "Code cleanup (Removed spaces)", "Lorenz Nickel", "LorenzNickel", "03/03/19, 07:18:07 PM", "I removed one space in many comments, where double spaces were used improperly, unified comments and removed spaces in code where they were more confusing than helpful.", "NaN"], ["BlockLab", "Removed spaces in code", "02/21/19, 12:49:02 AM", "BlockLab", "954f9f6c3e9d396b116cd9b0c175e005995fc010", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "gson/src/test/java/com/google/gson/functional/InheritanceTest.java", "gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java", "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java", "gson/src/test/java/com/google/gson/metrics/PerformanceTest.java"], "@@ -87,20 +87,20 @@ protected void tearDown() throws Exception {\n \n   public void testClassSerialization() {\n     try {\n-      gson.toJson(String.class);  \n+      gson.toJson(String.class);\n     } catch (UnsupportedOperationException expected) {}\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n-    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));  \n+    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));\n   }\n \n   public void testClassDeserialization() {\n     try {\n-      gson.fromJson(\"String.class\", String.class.getClass());  \n+      gson.fromJson(\"String.class\", String.class.getClass());\n     } catch (UnsupportedOperationException expected) {}\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n-    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));  \n+    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));\n   }\n \n   public void testUrlSerialization() throws Exception {, @@ -217,7 +217,7 @@ boolean queueContains(long... values) {\n           return false;\n         }\n       }\n-      return true;      \n+      return true;\n     }\n     \n     boolean setContains(float... values) {\n@@ -235,7 +235,7 @@ boolean sortedSetContains(char... values) {\n           return false;\n         }\n       }\n-      return true;      \n+      return true;\n     }\n     \n     public String getExpectedJson() {, @@ -163,7 +163,7 @@ public void testAbsentJsonElementsAreSetToNull() {\n     assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec\r\n   }\r\n \r\n-  public static class ClassWithInitializedMembers  {\r\n+  public static class ClassWithInitializedMembers {\r\n     // Using a mix of no-args constructor and field initializers\r\n     // Also, some fields are intialized and some are not (so initialized per JVM spec)\r\n     public static final String MY_STRING_DEFAULT = \"string\";\r\n@@ -204,7 +204,7 @@ public void testExplicitNullSetsFieldToNullDuringDeserialization() {\n     Gson gson = new Gson();\r\n     String json = \"{value:null}\";\r\n     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);\r\n-    assertNull(obj.value);    \r\n+    assertNull(obj.value);\r\n   }\r\n \r\n   public void testCustomTypeAdapterPassesNullSerialization() {\r, @@ -472,11 +472,11 @@ public boolean equals(Object obj) {\n     @SuppressWarnings(\"unused\")\n     int q2 = 20;\n   }\n-  private interface Measurable<T> {    \n+  private interface Measurable<T> {\n   }\n-  private interface Field<T> {    \n+  private interface Field<T> {\n   }\n-  private interface Immutable {    \n+  private interface Immutable {\n   }\n   \n   public static final class Amount<Q extends Quantity> \n@@ -490,12 +490,12 @@ public void testDeepParameterizedTypeSerialization() {\n     Amount<MyQuantity> amount = new Amount<MyQuantity>();\n     String json = gson.toJson(amount);\n     assertTrue(json.contains(\"value\"));\n-    assertTrue(json.contains(\"30\"));    \n+    assertTrue(json.contains(\"30\"));\n   }\n   \n   public void testDeepParameterizedTypeDeserialization() {\n     String json = \"{value:30}\";\n-    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();    \n+    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();\n     Amount<MyQuantity> amount = gson.fromJson(json, type);\n     assertEquals(30, amount.value);\n   }, @@ -50,11 +50,11 @@ protected void setUp() throws Exception {\n     gson = new Gson();\n   }\n   \n-  public void testDummy() {    \n+  public void testDummy() {\n     // This is here to prevent Junit for complaining when we disable all tests.\n-  }  \n+  }\n \n-  public void disabled_testStringDeserialization() {    \n+  public void disabled_testStringDeserialization() {\n     StringBuilder sb = new StringBuilder(8096);\n     sb.append(\"Error Yippie\");\n \n@@ -138,8 +138,8 @@ public void disabled_testLargeCollectionDeserialization() {\n     }    \n     sb.append(']');\n     String json = sb.toString();\n-    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    \n-    List<CollectionEntry> list = gson.fromJson(json, collectionType);       \n+    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();\n+    List<CollectionEntry> list = gson.fromJson(json, collectionType);\n     assertEquals(count, list.size());\n   }\n \n@@ -203,7 +203,7 @@ public void disabled_testSerializeClasses() {\n     } \n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testDeserializeClasses() {\n@@ -215,7 +215,7 @@ public void disabled_testDeserializeClasses() {\n     }\n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);\n   }\n   \n   public void disable_testLargeObjectSerializationAndDeserialization() {\n@@ -249,7 +249,7 @@ public void disabled_testSerializeExposedClasses() {\n     } \n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testDeserializeExposedClasses() {\n@@ -261,7 +261,7 @@ public void disabled_testDeserializeExposedClasses() {\n     }\n     long t2 = System.currentTimeMillis(); \n     long avg = (t2 - t1) / NUM_ITERATIONS;\n-    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);     \n+    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);\n   }\n \n   public void disabled_testLargeGsonMapRoundTrip() throws Exception {, ", 22, 22, "\"modified, modified, modified, modified, modified, \"", 44], 1], ["1476", "Gson Nested classes are null while using proguard", "Kushaal Singla", "kksingla", "09/02/21, 05:12:18 PM", "Warning: class 'com.google.gson.internal.bind.ReflectiveTypeAdapterFactory' is calling Class.getDeclaredFields on class.\r\n\r\nAfter enabling proguard found some issues mentioned below:\r\n1. Nested static classes are null.\r\n2. List of a custom object in a class is null", "What is Gson supposed to do here? This sounds like you've failed to configure ProGuard correctly for use of Gson. =||= ", 0], ["1477", "java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $", null, "NodeGIS", "02/27/19, 01:31:27 PM", "code is:\r\n`\r\n String userInfoStr = new Gson().fromJson(\"{\\\"name\\\":\\\"admin\\\"}\", String.class);\r\n`\r", "This is not a bug in the library. Your JSON contains an object but you asked it to deserialize as a string. There are many questions on StackOverflow which explain this error. I would also recommend going through the Gson documentation about binding to objects which talks about how you create objects which represent JSON. =||= ", 0], ["1478", "Failed to invoke public com.amazonaws.services.s3.model.lifecycle.LifecycleFilterPredicate() with no args", null, "dharmeshmehta", "03/02/19, 04:11:46 PM", "I am trying to apply Lifecycle Configurations on S3 bucket. Trying to apply using following JSON:\r\n\r\n\t[{\r\n\t\"id\": \"tmpdelete\",\r\n\t\"status\": \"Enabled\",\r\n\t\"filter\": {\r\n\t\t\"predicate\": {\r\n\t\t\t\"prefix\": \"tmp\"\r\n\t\t}\r\n\t},\r\n\t\"transitions\": [{\r\n\t\t\"days\": \"1\",\r\n\t\t\"storageClass\": \"GLACIER\"\r\n\t}],\r\n\t\"noncurrentVersionTransitions\": [{\r\n\t\t\"days\": \"1\",\r\n\t\t\"storageClass\": \"GLACIER\"\r\n\t}],\r\n\t\"expirationInDays\": \"2\",\r\n\t\"noncurrentVersionExpirationInDays\": \"2\",\r\n\t\"expiredObjectDeleteMarker\": \"true\"\r\n\t}]\r\n\r\nWhen i am trying to map it with Rule[].class it is not working. I am using following code:\r\n\r\n    String json = above_json;\r\n    Rule[] rules = null;\r\n\r\n    Gson gson = new GsonBuilder().serializeNulls().excludeFieldsWithModifiers(Modifier.FINAL,\r\n\t\t\t\tModifier.TRANSIENT, Modifier.STATIC, Modifier.ABSTRACT).create();\r\n    rules = gson.fromJson(json, Rule[].class);\r\n\r\n    try {\r\n\r\n        amazonS3.setBucketLifecycleConfiguration(bucketName, new BucketLifecycleConfiguration().withRules(rules));\r\n    } catch (Exception e) {\r\n        throw e;\r\n    }\r\n\r\nLifecycleFilterPredicate is an abstract class which implements Serializable and it doesn't have no-args contructor\r\n\r\nHow to solve this problem.?", "You need to write an instance creator which knows how to create instances of this abstract class: https://github.com/google/gson/blob/master/UserGuide.md#writing-an-instance-creator =||= I got the solution I was pointing to parent class i should have point the class which doesn't have no-arg. Only change is Gson gson = new GsonBuilder().registerTypeAdapter(LifecycleFilterPredicate.class, new RuleInstanceCreator()).create();  But now  I have one problem that LifecycleFilterPredicate is extended by Three class the one which i want to use is LifecyclePrefixPredicate in that i have one constructor with String argument as prefix. So from json that prefix value must be read. But it my RuleInstanceCreator is making it empty value. So what i did is i harded the value in it like this: \r\n\r\n\r\n    public class RuleInstanceCreator implements InstanceCreator<LifecycleFilterPredicate> {\r\n\r\n\t@Override\r\n\tpublic LifecycleFilterPredicate createInstance(Type type) {\r\n\r\n\t\treturn new LifecycleFilterPredicate() {\r\n\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void accept(LifecyclePredicateVisitor lifecyclePredicateVisitor) {\r\n\t\t\t\tlifecyclePredicateVisitor.visit(new LifecyclePrefixPredicate(\"temp\"));\r\n\t\t\t}\r\n\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\n\r\nSo how to have dynamic values in prefix from json (\"filter\": {\"predicate\": {\"prefix\": \"tmp\"}}) because this value can be different\r\n =||= Found solution of that too. Used TypeAdapter instead of InstanceCreator =||= ", 0], ["1479", "Arraycopy optimization", "Degubi", "Degubi", "03/05/19, 05:12:34 PM", "Optimize array copies inside JsonTreeReader, JsonReader and JsonWriter. Faster & nicer.\r\n\r\nBenchmark code: https://pastebin.com/80ztCuVx\r\nBenchmark run: https://pastebin.com/RwfGAmnh", "Squashed, fixed whitespace, and merged as bac26b8e429150d4cbf807e8692f207b7ce7d40d. Thanks! =||= ", 0], ["1480", "App crashes as Json element is empty String (\u201c\u201d) and not Object", "Avinash Kumar", "avikr22", "03/06/19, 05:27:44 AM", "I am working on an android project and using RxAndroid, Retrofit to make API call and retrieve json. The json looks something like following :\r\n\r\n```\r\n{\r\n    \"result\": [\r\n        {\r\n            \"parent\": \"jhasj\",\r\n            \"u_deviation\": \"skasks\",\r\n            \"caused_by\": \"ksks\",\r\n            \"u_owner_mi\": {\r\n                \"link\": \"https://gddhdd.service-now.com/api/now/v1/table/sys_user/ghtytu\",\r\n                \"value\": \"ghtytu\"\r\n            },\r\n            \"impact\": \"\",  \r\n}\r\n]\r\n}\r\n```\r\n\r\nI am using gson to parse the Json. The problem is \"u_owner_mi\" sometimes reruns empty string \"\" when there is no value assigned to it. This is making my app crash as I am expecting an object here. I get the following error : Expected BEGIN_OBJECT but was STRING", "Please ask this question on StackOverflow with the 'gson' tag so that the answer helps future travelers looking for similar solutions.\r\n\r\nThis basically requires registering a type adapter factory for all object types which wraps the built-in type adapter for that type, checks for an empty string to replace with null, or else delegates to the built-in adapter. =||= ", 0], ["1481", "Deal with UTF-8 BOM", "Franklin Yu", "FranklinYu", "03/24/19, 10:41:01 PM", "I see that currently BOM (Byte Order Mark) for UTF-16 is dealt with properly:\r\n\r\nhttps://github.com/google/gson/blob/bac26b8e429150d4cbf807e8692f207b7ce7d40d/gson/src/main/java/com/google/gson/stream/JsonReader.java#L1294-L1299\r\n\r\nIt would be awesome if BOM for UTF-8 (`EF BB BF`) is also dealt with. Currently Gson cannot decode JSON with UTF-8 BOM.", "Send us a PR? =||= Gson really shouldn't deal with BOMs because it deals with characters, not\nbytes. That existing BOM handling is some unfortunate old baggage. If\nyou're consuming bytes you should handle the BOM yourself to determine how\nto interpret those bytes as characters before passing to Gson.\n\nAdditionally, BOMs are a document-level construct whereas Gson happily\nworks on subsets of data where you likely will never have a BOM. For\nexample, OkHttp parses BOMs because a response is a full, byte-based\ndocument which may have a BOM (ignoring the fact that it shouldn't because\nof the Content-Type's charset parameter). When you ask for a character\nstream or string from an OkHttp response it interprets the bytes according\nto the BOM to create the characters. Responses are fundamentally a\ndocument, but I might be using Gson to parse individual lines of a file\nwhere BOMs don't exist.\n\nOn Thu, Mar 7, 2019, 3:27 AM inder123 <notifications@github.com wrote:\n\n> Send us a PR?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1481#issuecomment-470431927>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEQ6a3aJMJE5nxYWodA6mQf5bkqDlks5vUM1ogaJpZM4bfefV>\n> .\n>\n =||= In case anyone's interested, Apache Commons IO includes a `BOMInputStream` which makes it a bit easier to consume/stream a string with a BOM:\r\n\r\nhttps://commons.apache.org/proper/commons-io/javadocs/api-2.6/org/apache/commons/io/input/BOMInputStream.html =||= Closing this since there are already 300+ issues. We\u2019ll try to solve it ourselves. Thanks! =||= ", 0], ["1482", "Fix wrong reference in Versioning Support example", "Tomy Jaya", "TomyJaya", "03/07/19, 08:26:23 AM", "Just a minor fix of wrong object being referenced. ", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1482) for more info**.\n\n<!-- need_sender_cla --> =||= I signed it! =||= ", ["1482", "Fix wrong reference in Versioning Support example", "Tomy Jaya", "TomyJaya", "03/07/19, 08:26:23 AM", "Just a minor fix of wrong object being referenced. ", "NaN"], ["Tomy Jaya", "Fix wrong reference in Versioning Support example", "03/06/19, 12:03:13 PM", "GitHub", "194daa1cd869f6c0a5c954836ba5edd8f4d0c4e4", ["UserGuide.md"], "@@ -510,12 +510,12 @@ public class VersionedClass {\n \n VersionedClass versionedObject = new VersionedClass();\n Gson gson = new GsonBuilder().setVersion(1.0).create();\n-String jsonOutput = gson.toJson(someObject);\n+String jsonOutput = gson.toJson(versionedObject);\n System.out.println(jsonOutput);\n System.out.println();\n \n gson = new Gson();\n-jsonOutput = gson.toJson(someObject);\n+jsonOutput = gson.toJson(versionedObject);\n System.out.println(jsonOutput);\n ```\n , ", 2, 2, "\"modified, \"", 4], 1], ["1484", "Read json file using Gson in Kotlin", null, "anonym24", "03/07/19, 07:39:37 AM", "I'm trying to read a json file (its root object is array) with Gson\r\n\r\n\r\n    val gson = Gson()\r\n    val reader = JsonReader(FileReader(file))\r\n    val data = gson.fromJson(reader, JsonArray::javaClass)\r\n    // also tried JsonArray::class and JsonArray::class.java\r\n\r\n[![enter image description here][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/JOS3H.png\r\n\r\nnext constructors are available\r\n\r\n    public <T> T fromJson(JsonReader reader, Type typeOfT)\r\n\r\n    public <T> T fromJson(Reader json, Class<T> classOfT)", "Solved: `val data: JsonArray = gson.fromJson(reader, JsonArray::class.java)` =||= ", 0], ["1485", "JsonObject/JsonArray not extendable", null, "jredfox", "03/07/19, 02:58:16 PM", "I wanted to expand the library and add more features via my own code like java libraries are suppose to do. I wanted the ability to have methods called add that are overloaded for various objects and convert them to string if not valid before entering them.\r\n\r\nI also had reason to add more utility methods like add a static array > converts to json array then puts it into the json object/array many other utilities I had written for another json library but, wanted to use this one as the others appear to be broken.\r\n\r\nCannot do this as the classes are all freaken final. Undo the final on these objects as people want to expand upon them. I realize this would include on adding the ability to change the json classes in the gjson builder for json obj and json arrays. ", "These are value types. There's no reason to extend them with inheritance. You can use composition to mix in behavior and/or use a language like Kotlin which allows defining extension methods on types you don't control. =||= Right and some people want to extend this behavior and add their own logic there are lots of reasons to extend class lookup object orientation. Using a wrapper would create a weird json as you also don't have control now what said json looks like this is now unacceptiable behavior.\r\n\r\nEither provide alot more methods so people can lazy load this crap or allow this to be extended. Some objects like minecraft resource location you don't always want to append .toString() to them you want it if it's not a valid json object to always be .toString() if it's not null and if it's not a static or dynamic array. =||= Inheritance isn't a good way to accomplish this. You don't extend String\nwhen you want to add functionality around something represented as a\nstring. You encapsulate and expose a semantic API because it composes.\n\nOn Thu, Mar 7, 2019 at 1:14 PM jredfox <notifications@github.com> wrote:\n\n> Right and some people want to extend this behavior and add their own logic\n> there are lots of reasons to extend class lookup object orientation. Using\n> a wrapper would create a weird json as you also don't have control now what\n> said json looks like this is now unacceptiable behavior.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1485#issuecomment-470635522>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEVOFtCSDdc_oRr3L-lZfwiOqJX3-ks5vUVb8gaJpZM4bisbD>\n> .\n>\n =||= When you use composition as a wrapper class at least you have control over what the string now looks like. With your gson system there is no no way of controlling what the json string looks like besides using gson.toJSon(wrapperObject) which not looks very ugly especially with inner json objects. =||= If you want to control the JSON representation you should use a normal\nobject with fields and annotate it with @JsonAdapter pointing at a\nTypeAdapter, TypeAdapter.Factory, or JsonSerializer\n\nOn Thu, Mar 7, 2019 at 1:20 PM jredfox <notifications@github.com> wrote:\n\n> When you use composition as a wrapper class at least you have control over\n> what the string now looks like. With your gson system there is no no way of\n> controlling what the json string looks like besides using\n> gson.toJSon(wrapperObject())\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1485#issuecomment-470637559>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEER7fndtjD2HcWnQmlrosnr_itzxrks5vUVhfgaJpZM4bisbD>\n> .\n>\n =||= how about a pr directly to the json object that adds lazy methods for modern versions? And for minecraft and older gson versions I simply do what you said above?\r\n\r\n I will have to look into controlling the output of said json as gson is the only thing that seems to work out there fully with pretty print and parsing.\r\n\r\nThank you you have been helpful.  =||= Possibly. You haven't explained what's missing in any detail yet.\n\nOn Thu, Mar 7, 2019, 1:26 PM jredfox <notifications@github.com wrote:\n\n> how about a pr directly to the json object that adds lazy methods for\n> modern versions? And for minecraft and older gson versions I simply do what\n> you said above?\n>\n> I will have to look into controlling the output of said json as gson is\n> the only thing that seems to work out there fully with pretty print and\n> parsing.\n>\n> Thank you you have been helpful.\n>\n> \u2014\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1485#issuecomment-470639780>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEERMVv1C4C01BxjcL-WNMW-kMKKOmks5vUVnmgaJpZM4bisbD>\n> .\n>\n =||= ", 0], ["1487", "Optimize UnsafeReflectionAccessor with MethodHandles", "Degubi", "Degubi", "03/17/19, 11:14:43 PM", "Replace reflection invocation with MethodHandles. Avoids boxing, allows better inlining. Afaik all of the MethodHandle methods used in the code are available since java 7. Needs more investigating. Code may need formatting.\r\n\r\nBenchmark Code: https://pastebin.com/cqPTUc7i\r\nJMH Output: https://pastebin.com/RcyZ3C05", "NaN", 0], ["1488", "Remove object parameterized methods in JsonObject & JsonPrimitive", "Degubi", "Degubi", "03/11/19, 02:55:45 PM", "-Refactor JsonPrimitive.value to be final\r\n-Remove JsonPrimitive object parameterized constructor\r\n-Remove some unnecessary helper methods", "There was missing test coverage around null which this regresses. Tests added in a817604a417349af15df0daf1589319282565f22 and I've manually merged this as 8bf2949c2934cf9a168df24d0d2a29c702556a91 with a necessary fix to retain behavior. =||= ", 0], ["1490", "Add Json Bodyhandlers for new Http Client (Java 11)", "Degubi", "Degubi", "05/15/19, 08:21:39 AM", "-Add class for creating custom Json parsing BodyHandlers for the new HttpClient added in Java11.\r\n-Only the 5 static methods are public, everything else in the class is implementation detail.\r\n-At the moment everybody needs to create a class like this, or use BodyHandlers.ofString() as a bodyhandler to then parse it.\r\n\r\nExample code: https://pastebin.com/ZeHGdkwL\r", "Closing this, solvable with a simple method:\r\n```\r\npublic static BodyHandler<JsonObject> ofJsonObject(){\r\n\t\treturn info -> BodySubscribers.mapping(BodySubscribers.ofString(StandardCharsets.ISO_8859_1), data -> parser.parse(data).getAsJsonObject());\r\n\t}\r\n``` =||= ", 0], ["1491", "proguard", "Zaaach", "zaaach", "03/14/19, 07:34:59 AM", "NaN", "NaN", 0], ["1492", "Remove getter in Gson exposing internal class", "Degubi", "Degubi", "03/27/19, 09:43:09 PM", "-Remove getter for Excluder. Excluder is an internal class, it should not get returned to user code.\r\n-Move DefaultDateTypeAdapter into ...internal/bind package.\r\n-Presize factories list in Gson constructor\r\n-Make the last 2 private TypeAdapter factories static in Gson class\r\n-Refactor Gson toString\r\n-Fix tests for changes", "Closing this, might split into smaller requests. =||= ", 0], ["1494", "SerializedName annotation workaround for obfuscated enums by ProGuard", "YOUNG HO CHA (aka ganachoco)", "ganadist", "03/22/19, 08:30:31 AM", "SerializedName annotation cannot be applied on enums when obfuscated by\r\nproguard.\r\nBecause EnumTypeAdapter cannot find obfuscated enum constant field\r\nwith its name.\r\nSo, EnumTypeAdapter should load annotation from DeclaredFields, not EnumConstants", "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1494) for more info**.\n\n<!-- need_author_cla --> =||= ", 0], ["1495", "Make EnumTypeAdapter friendly with obfuscation", "YOUNG HO CHA (aka ganachoco)", "ganadist", "08/04/21, 01:58:15 PM", "When enum value was obfuscated by proguard, EnumTypeAdapter raise NoSuchFieldException, even if apply SerializedName annotation.\r\nBecause EnumTypeAdapter cannot find obfuscated enum constant field with its name.\r\nBut without this workaround, there is no way to obfuscate enum name.", "Test case? =||= I tried to integrate proguard obfuscation on testcase like this.\r\n\r\nhttps://github.com/ganadist/gson/commit/251ec476aa49fbb4653b164c67d22e17445625c4\r\n\r\nAnd intent of this mvn rule are this order.\r\n* copy-resources (pre-obfuscate-class)\r\n* proguard (default)\r\n* copy-resources (post-obfuscate-class)\r\n\r\nBut order of plugin execution does not work as intended.\r\n* copy-resources (pre-obfuscate-class)\r\n* copy-resources (post-obfuscate-class)\r\n* proguard (default)\r\n\r\nCan I get any idea? =||= You don't need to integrate ProGuard. Just specify a different name and\nensure it's honored in the JSON output.\nOn Fri, Mar 22, 2019 at 3:37 PM YOUNG HO CHA (aka ganachoco) <\nnotifications@github.com> wrote:\n\n> I tried to integrate proguard obfuscation on testcase like this.\n>\n> ganadist@251ec47\n> <https://github.com/ganadist/gson/commit/251ec476aa49fbb4653b164c67d22e17445625c4>\n>\n> And intent of this mvn rule are this order.\n>\n>    - copy-resources (pre-obfuscate-class)\n>    - proguard (default)\n>    - copy-resources (post-obfuscate-class)\n>\n> But order of plugin execution does not work as intended.\n>\n>    - copy-resources (pre-obfuscate-class)\n>    - copy-resources (post-obfuscate-class)\n>    - proguard (default)\n>\n> Can I get any idea?\n>\n> \u2014\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1495#issuecomment-475754232>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEabvLIMEqbJOJAtqlKXYhGQvUzj4ks5vZTEVgaJpZM4cDGDK>\n> .\n>\n =||= > Just specify a different name and ensure it's honored in the JSON output.\r\n\r\nGson has already [com.google.gson.functional.testEnumCaseMapping()](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/EnumTest.java#L147) testcase.\r\n\r\n =||= I updated first conversation comment of this PR. because it could be misleading.\r\n =||= I ran into this problem as well. This is a good fix. Let's add a testcase. =||= To verify this change, enum class in testcase must be obfuscated by proguard.\r\nAnd I updated testcase on https://github.com/ganadist/gson/commit/1b65e3aae9f549c7a6adaf4dc533263cb7e1be4c , added to check enum class is obfuscated.\r\n\r\nBut it still has a problem to integrate proguard. :( =||= Proguard integration on Maven testcase is pretty dirty, but.\r\n```\r\nRunning com.google.gson.functional.EnumWithObfuscatedTest\r\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec\r\n```\r\n\r\n``` \r\n$ cat gson/target/proguard_map.txt\r\ncom.google.gson.functional.EnumWithObfuscatedTest -> com.google.gson.functional.EnumWithObfuscatedTest:\r\n    com.google.gson.Gson gson -> a\r\n    void <init>() -> <init>\r\n    void setUp() -> setUp\r\n    void testEnumClassWithObfuscated() -> testEnumClassWithObfuscated\r\ncom.google.gson.functional.EnumWithObfuscatedTest$Gender -> com.google.gson.functional.EnumWithObfuscatedTest$Gender:\r\n    com.google.gson.functional.EnumWithObfuscatedTest$Gender MALE -> a\r\n    com.google.gson.functional.EnumWithObfuscatedTest$Gender FEMALE -> b\r\n    com.google.gson.functional.EnumWithObfuscatedTest$Gender[] $VALUES -> c\r\n    com.google.gson.functional.EnumWithObfuscatedTest$Gender[] values() -> values\r\n    com.google.gson.functional.EnumWithObfuscatedTest$Gender valueOf(java.lang.String) -> valueOf\r\n    void <init>(java.lang.String,int) -> <init>\r\n    void <clinit>() -> <clinit>\r\n```\r\n\r\n\r\n =||= This pull request would fix #924 and #1776 =||= ", ["1495", "Make EnumTypeAdapter friendly with obfuscation", "YOUNG HO CHA (aka ganachoco)", "ganadist", "08/04/21, 01:58:15 PM", "When enum value was obfuscated by proguard, EnumTypeAdapter raise NoSuchFieldException, even if apply SerializedName annotation.\nBecause EnumTypeAdapter cannot find obfuscated enum constant field with its name.\nBut without this workaround, there is no way to obfuscate enum name.", "NaN"], ["YOUNG HO CHA", "Fix indentation of EnumWithObfuscatedTest", "08/04/21, 03:30:07 AM", "YOUNG HO CHA", "d8c5fcf00bdd3170365e92e43880021031c7d005", ["gson/src/test/java/com/google/gson/functional/EnumWithObfuscatedTest.java"], "@@ -45,11 +45,11 @@ protected void setUp() throws Exception {\n \n   public void testEnumClassWithObfuscated() {\n     for (Gender enumConstant: Gender.class.getEnumConstants()) {\n-        try {\n-            Gender.class.getField(enumConstant.name());\n-            fail(\"Enum is not obfuscated\");\n-        } catch (NoSuchFieldException ignore) {\n-        }\n+      try {\n+        Gender.class.getField(enumConstant.name());\n+        fail(\"Enum is not obfuscated\");\n+      } catch (NoSuchFieldException ignore) {\n+      }\n     }\n \n     assertEquals(Gender.MALE, gson.fromJson(\"\\\"MAIL\\\"\", Gender.class));, ", 5, 5, "\"modified, \"", 10], 1], ["1496", "Include adding operation in a specified index", "Daniel Campos Olivares", "dacamposol", "03/22/19, 03:08:18 PM", "Includes the adding operation to the List implementation of the JsonArray.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1496) for more info**.\n\n<!-- need_sender_cla --> =||= I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1496) for more info**.\n\n<!-- need_author_cla --> =||= ", 0], ["1497", "Implement add operation into an specified position", "Daniel Campos Olivares", "dacamposol", "03/22/19, 03:27:06 PM", "Includes the add(index, element) operation to the List implementation for the JsonArray.", "Tests? =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1497) for more info**.\n\n<!-- need_author_cla --> =||= I will fix the CLA with my two users and I will reopen after. =||= ", 0], ["1498", "Implement add with index wrapper for JsonElement and primitive types", "Daniel Campos Olivares", "dacamposol", "11/08/20, 02:33:56 PM", "- Implementation for the add method in an specifies position of the List to the wrapper.\r\n- Unit tests for the different primitives.\r\n\r\nSolves: Issue #1486", "It might also be good to document the `IndexOutOfBoundsException` these methods can throw.\r\nNote that #1486 also requests `set(int, ...)` overloads apparently which this pull request does not add, though maybe at some point this bloats the API of the class too much. =||= ", 0], ["1499", "Primitives refactor", "Degubi", "Degubi", "04/15/19, 03:10:00 PM", "Refactor & Clean up the Primitives class to use array lookup instead of HashMap lookup. There's no need to use a HashMap for 9 elements.\r\nBenchmark code: https://pastebin.com/cG8w2pyy\r\nBenchmark output: https://pastebin.com/dCKfacCy", "I was thinking about that, I will update to use normal if-s instead of array lookup. =||= I think this looks good now. =||= Reformatted, squashed, and merged as 477b3f77e159d15531fd30f41688d4b732a8b042. Thanks! =||= ", 0], ["1500", "Make \"requires java.sql\" transitive", "Degubi", "Degubi", "03/29/19, 04:34:13 PM", "Make the \"java.sql\" dependency transitive in the module-info.java file. It's not transitive, so every module that requires the \"gson\" module also needs to explicitly require the \"java.sql\" module. Without requiring it application startups fails with a \"java.lang.NoClassDefFoundError: java/sql/Time\" exception every time.", "NaN", ["1500", "Make \"requires java.sql\" transitive", "Degubi", "Degubi", "03/29/19, 04:34:13 PM", "Make the \"java.sql\" dependency transitive in the module-info.java file. It's not transitive, so every module that requires the \"gson\" module also needs to explicitly require the \"java.sql\" module. Without requiring it application startups fails with a \"java.lang.NoClassDefFoundError: java/sql/Time\" exception every time.", "NaN"], ["Degubi", "Make sql module dependency transitive", "03/14/19, 10:26:46 AM", "Degubi", "95b36afcb96930f4e675fa4313721f8521372e93", ["gson/src/main/java/module-info.java"], "@@ -4,5 +4,5 @@\n \texports com.google.gson.reflect;\n \texports com.google.gson.stream;\n \n-\trequires java.sql;\n+\trequires transitive java.sql;\n }, ", 1, 1, "\"modified, \"", 2], 1], ["1501", "Removing unnecessary 'final' access modifier from constructor", "Manuel Kollus", "manuelkollus", "03/28/19, 04:22:37 PM", "Hello Dear, Google Developers!\r\n\r\nI have removed the 'final' access modifier from the constructor because they are not necessary.\r\n\r\nYours sincerely,\r\nManuel Kollus", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1501) for more info**.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1501) for more info**.\n\n<!-- ok --> =||= ", ["1501", "Removing unnecessary 'final' access modifier from constructor", "Manuel Kollus", "manuelkollus", "03/28/19, 04:22:37 PM", "Hello Dear, Google Developers!\n\nI have removed the 'final' access modifier from the constructor because they are not necessary.\n\nYours sincerely,\nManuel Kollus", "NaN"], ["Manuel Kollus", "Removing 'final' accessor from constructor", "03/28/19, 03:47:15 PM", "Manuel Kollus", "3e7669ce835ae000dfc7d1806b4f84a1dedc3e89", ["gson/src/main/java/com/google/gson/Gson.java"], "@@ -192,8 +192,8 @@ public Gson() {\n         Collections.<TypeAdapterFactory>emptyList());\n   }\n \n-  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,\n-      final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n+  Gson(Excluder excluder, FieldNamingStrategy fieldNamingStrategy,\n+      Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy, String datePattern, int dateStyle,, ", 2, 2, "\"modified, \"", 4], 1], ["1502", "Compatible versions", null, "quzhongrensan", "03/29/19, 01:04:15 PM", "What is the lowest compatible version of android", "API 14 =||= Ok, thank you =||= ", 0], ["1503", "\u2014\u2014", "\u6f29\u6da1\u5c0f\u5f3a", "coolxiao", "03/29/19, 01:03:41 PM", "NaN", "NaN", 0], ["1505", "Refactor JsonReader's consumeNonExecutePrefix method", "Degubi", "Degubi", "10/04/19, 08:45:07 PM", "- Remove static array in JsonReader.\r\n- Replace loop if-s with 5 explicit if statements, each checking 1 character at a time.", "NaN", ["1505", "Refactor JsonReader's consumeNonExecutePrefix method", "Degubi", "Degubi", "10/04/19, 08:45:07 PM", "- Remove static array in JsonReader.\n- Replace loop if-s with 5 explicit if statements, each checking 1 character at a time.", "NaN"], ["Degubi", "Refactor prefix array & loop logic, use if-s instead", "03/31/19, 04:03:33 PM", "Degubi", "ef2def39d3612fa718917c68a894098c1f8e6ef0", ["gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -189,8 +189,6 @@\n  * @since 1.6\n  */\n public class JsonReader implements Closeable {\n-  /** The only non-execute prefix this parser permits */\n-  private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n   private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n \n   private static final int PEEKED_NONE = 0;\n@@ -1572,18 +1570,18 @@ private void consumeNonExecutePrefix() throws IOException {\n     nextNonWhitespace(true);\n     pos--;\n \n-    if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {\n+    int p = pos;\n+    if (p + 5 > limit && !fillBuffer(5)) {\n       return;\n     }\n \n-    for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {\n-      if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {\n-        return; // not a security token!\n-      }\n+    char[] buf = buffer;\n+    if(buf[p] != ')' || buf[p + 1] != ']' || buf[p + 2] != '}' || buf[p + 3] != '\\'' || buf[p + 4] != '\\n') {\n+      return; // not a security token!\n     }\n \n     // we consumed a security token!\n-    pos += NON_EXECUTE_PREFIX.length;\n+    pos += 5;\n   }\n \n   static {, ", 6, 8, "\"modified, \"", 14], 1], ["1507", "Java 11 LocalDateTime problem", null, "colesico", "04/05/19, 01:34:31 PM", "When deserialize an object with LocalDateTime field an error occurring:\r\n\r\nInaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not \"opens java.time\" to module gson\r\njava.lang.RuntimeException: java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not \"opens java.time\" to module gson", "I fixed this with custom converter. Close pls. =||= > I fixed this with custom converter. Close pls.\r\n\r\nCan you provide the custom code implementation ? \r\n =||= > > I fixed this with custom converter. Close pls.\r\n> \r\n> Can you provide the custom code implementation ?\r\n\r\nhere is package with code\r\n\r\nhttps://github.com/colesico/colesico-framework/tree/master/modules/colesico-restlet/src/main/java/colesico/framework/restlet/internal/gsonconv\r\n\r\ncustom handler is registered in GsonConverter.java\r\n =||= ", 0], ["1508", "Gson 3.0?", "Degubi", "Degubi", "04/17/19, 07:44:13 PM", "Hi, I just wanted to ask if there are any plans to release a new gson version for newer java versions, like 11, removing unsafe usages and providing some api-s for functional paradigms.?", "No.\n\nWhat functional paradigms are you referring to specifically?\n\nOn Sun, Apr 7, 2019, 10:38 AM Degubi <notifications@github.com> wrote:\n\n> Hi, I just wanted to ask if there are any plans to release a new gson\n> version for newer java versions, like 11, removing unsafe usages and\n> providing some api-s for functional paradigms.?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1508>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEQqxmYBguC9oH5G7dLWkaqLfh5nRks5vegLOgaJpZM4cgzJA>\n> .\n>\n\nOn Sun, Apr 7, 2019, 10:38 AM Degubi <notifications@github.com> wrote:\n\n> Hi, I just wanted to ask if there are any plans to release a new gson\n> version for newer java versions, like 11, removing unsafe usages and\n> providing some api-s for functional paradigms.?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1508>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEQqxmYBguC9oH5G7dLWkaqLfh5nRks5vegLOgaJpZM4cgzJA>\n> .\n>\n =||= Sorry I worded it wrong, I meant functional Api-s like stream methods for containers etc. =||= Do you mean for JsonArray and JsonObject?\n\nOn Sun, Apr 7, 2019 at 1:33 PM Degubi <notifications@github.com> wrote:\n\n> Sorry I worded it wrong, I meant functional Api-s like stream methods for\n> containers etc.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/issues/1508#issuecomment-480612727>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEERFTweN-UVRwMZdGrsAFd_R1mjlYks5veivmgaJpZM4cgzJA>\n> .\n>\n =||= Yes. =||= ", 0], ["1512", "Remove package private helpers in JsonElement & JsonPrimitive", "Degubi", "Degubi", "04/14/19, 09:58:42 PM", "-Remove documentation & code for \"getAsBooleanWrapper\" in JsonElement.\r\n-Remove uses of \"getAsBooleanWrapper\" in JsonPrimitive.\r\n-Inline \"getAsBooleanWrapper\" into methods where it was used.\r\n\r\n-Not breaking backwards compatibility, because the methods were package private.", "\ud83d\udc4d  =||= ", ["1512", "Remove package private helpers in JsonElement & JsonPrimitive", "Degubi", "Degubi", "04/14/19, 09:58:42 PM", "-Remove documentation & code for \"getAsBooleanWrapper\" in JsonElement.\n-Remove uses of \"getAsBooleanWrapper\" in JsonPrimitive.\n-Inline \"getAsBooleanWrapper\" into methods where it was used.\n\n-Not breaking backwards compatibility, because the methods were package private.", "NaN"], ["Degubi", "Remove unnecessary explicit else statement", "04/05/19, 02:20:06 PM", "Degubi", "46d0f58d1266c17a9fe6354344e9b1b7145fcb3d", ["gson/src/main/java/com/google/gson/JsonPrimitive.java"], "@@ -100,10 +100,9 @@ public boolean isBoolean() {\n   public boolean getAsBoolean() {\n     if (isBoolean()) {\n       return ((Boolean) value).booleanValue();\n-    } else {\n-      // Check to see if the value as a String is \"true\" in any case.\n-      return Boolean.parseBoolean(getAsString());\n     }\n+\t// Check to see if the value as a String is \"true\" in any case.\n+    return Boolean.parseBoolean(getAsString());\n   }\n \n   /**, ", 2, 3, "\"modified, \"", 5], 1], ["1513", "Add static methods to JsonParser", "Degubi", "Degubi", "04/16/19, 02:46:36 AM", "-Add static parser method alternatives to JsonParser.class.\r\n-Mark the default constructor of JsonParser as deprecated.\r\n-Point of this pr is to stop forcing people to create a JsonParser instance per parsing.\r\n-People usually store a JsonParser instance as a global somewhere in their projects, and call the parser methods on that instance. With this pr, all these globals could be removed.\r\n-No deprecations or warnings on parser method calls, single deprecation warning on JsonParser constructor.\r\n-No breaking changes, the old solution works just like before.\r\n-Fixed all tests to use the new static methods.", "Merged as c5a3f21fbad3828deba1deb88168e1f76829f807. Thanks! =||= Do we really need new static methods @JakeWharton \r\nWe could instead just provide a singleton instance. \r\nThat would have aligned a little better with the existing design. =||= The existing design was the problem though. These methods are stateless and should never have been instance methods. =||= @JakeWharton Yes, it can be argued that way. A counter-argument will be that making them instance-methods allowed for more testability. \r\n\r\nIn general, my philosophy is to NOT try to fix APIs unless they are really bad, or the alternate is substantially better. \r\n\r\nThis didn't pass that test. In fact, we have made it worse for the developers as now they will be confused on whether to use static method or the instance method.\r\n\r\nPlease consider reverting this change. Thanks. =||= More testability how? Static stateless methods are far easier to test than instance methods.\r\n\r\nThe deprecation makes it clear which to use. =||= Better testability by allowing fake JsonParser, instead of having to mock static methods.\r\n\r\nRegarding deprecations: I don't like deprecations much for stylistic changes. If it was a bad bug or broken interface, deprecation is acceptable. \r\nGson has had a philosophy of keeping a minimal stable API. Every change has to fight to get in. \r\nPlease help us keep it that way.  =||= Except you never need a fake JsonParser because it's stateless so that argument doesn't work.\r\n\r\nSure I'll help keep it stable. Consider me retired from Gson. =||= @JakeWharton It will be a big loss for Gson if you retire. So, I certainly wouldn't want that. Let's talk off-line. \r\n\r\nI don't have a strong use-case. Best I can come up with is a from a Gson user's perspective:\r\nThink of a user who is writing a Java test for code that uses JsonParser. That user may want to install a different JsonParser than may be transforms input before processing. \r\n =||= The type was already final so you couldn't replace its functionality in any way. If you need parsing behavior that can be configured then you would have already needed to build your own abstraction (like `Function<String, JsonElement>`) where one of them can be backed by this type (using `new JsonParser()::parse` or the new `JsonParser::parseString`). =||= @JakeWharton If need be, we can lift the final from the class. That is a much smaller change than new methods. \r\n\r\nOverall, this is a solution in search of a problem.  =||= No! That would be so much worse! Gson isn't your abstraction. It's an\nimplementation.\n\nThis change is how good API's are designed. Stateless wherever possible.\n\nOn Tue, Apr 16, 2019, 7:38 PM inder123 <notifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/JakeWharton> If need be, we can lift the\n> final from the class. That is a much smaller change than new methods.\n>\n> Overall, this is a solution in search of a problem.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/google/gson/pull/1513#issuecomment-483882214>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEeYGWFMCF7HgM4RXZphIx6vJ50lYks5vhl8QgaJpZM4cw7VH>\n> .\n>\n =||= @JakeWharton I agree with generally designing APIs to be stateless.\r\nWe possibly have an inferior design in JsonParser. However, I remain unconvinced that this feature addition is good. I prefer our APIs to be small and solve a burning problem. This doesn't achieve either. =||= ", 0], ["1515", "Refactor FieldNamingPolicy.upperCaseFirstLetter", "Degubi", "Degubi", "04/26/19, 10:49:23 PM", "-Refactor upperCaseFirstLetter in FieldNamingPolicy.\r\n-Add some comments for special case handling\r\n-Add additional test field to keep 100% coverage (branch in loop for checking to not go out of bounds).\r\n-Shorter, faster. Except for the newly added case. I hope no one writes fields without letters.\r\n\r\nBenchmark code: https://pastebin.com/63VJWF03\r\nBenchmark run: https://pastebin.com/su29iePu", "NaN", ["1515", "Refactor FieldNamingPolicy.upperCaseFirstLetter", "Degubi", "Degubi", "04/26/19, 10:49:23 PM", "-Refactor upperCaseFirstLetter in FieldNamingPolicy.\n-Add some comments for special case handling\n-Add additional test field to keep 100% coverage (branch in loop for checking to not go out of bounds).\n-Shorter, faster. Except for the newly added case. I hope no one writes fields without letters.\n\nBenchmark code: https://pastebin.com/63VJWF03\nBenchmark run: https://pastebin.com/su29iePu", "NaN"], ["Degubi", "Refactor uppercaseFirstLetter, add additional field to test", "04/17/19, 10:05:15 PM", "Degubi", "8eb2ffc85a1ec2fce2cfedb7ef5bfda7e163eb61", ["gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/test/java/com/google/gson/functional/FieldNamingTest.java"], "@@ -159,31 +159,20 @@ static String separateCamelCase(String name, String separator) {\n    * Ensures the JSON field names begins with an upper case letter.\n    */\n   static String upperCaseFirstLetter(String name) {\n-    StringBuilder fieldNameBuilder = new StringBuilder();\n-    int index = 0;\n-    char firstCharacter = name.charAt(index);\n-    int length = name.length();\n+    int firstLetterIndex = 0;\n+    int limit = name.length() - 1;\n+    for(; !Character.isLetter(name.charAt(firstLetterIndex)) && firstLetterIndex < limit; ++firstLetterIndex);\n \n-    while (index < length - 1) {\n-      if (Character.isLetter(firstCharacter)) {\n-        break;\n-      }\n-\n-      fieldNameBuilder.append(firstCharacter);\n-      firstCharacter = name.charAt(++index);\n+    char firstLetter = name.charAt(firstLetterIndex);\n+    if(Character.isUpperCase(firstLetter)) { //The letter is already uppercased, return the original\n+      return name;\n     }\n \n-    if (!Character.isUpperCase(firstCharacter)) {\n-      String modifiedTarget = modifyString(Character.toUpperCase(firstCharacter), name, ++index);\n-      return fieldNameBuilder.append(modifiedTarget).toString();\n-    } else {\n-      return name;\n+    char uppercased = Character.toUpperCase(firstLetter);\n+    if(firstLetterIndex == 0) { //First character in the string is the first letter, saves 1 substring\n+      return uppercased + name.substring(1);\n     }\n-  }\n \n-  private static String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {\n-    return (indexOfSubstring < srcString.length())\n-        ? firstCharacter + srcString.substring(indexOfSubstring)\n-        : String.valueOf(firstCharacter);\n+    return name.substring(0, firstLetterIndex) + uppercased + name.substring(firstLetterIndex + 1);\n   }\n }, @@ -33,39 +33,39 @@ public void testIdentity() {\n     Gson gson = getGsonWithNamingPolicy(IDENTITY);\n     assertEquals(\"{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7,'lowerId':8}\",\n+        \"'annotatedName':7,'lowerId':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCase() {\n     Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE);\n     assertEquals(\"{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7,'LowerId':8}\",\n+        \"'annotatedName':7,'LowerId':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCaseWithSpaces() {\n     Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);\n     assertEquals(\"{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,\" +\n         \"'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,\" +\n-        \"'annotatedName':7,'Lower Id':8}\",\n+        \"'annotatedName':7,'Lower Id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithUnderscores() {\n     Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);\n     assertEquals(\"{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,\" +\n         \"'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,\" +\n-        \"'annotatedName':7,'lower_id':8}\",\n+        \"'annotatedName':7,'lower_id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithDashes() {\n     Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);\n     assertEquals(\"{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,\" +\n         \"'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,\" +\n-        \"'annotatedName':7,'lower-id':8}\",\n+        \"'annotatedName':7,'lower-id':8,'_9':9}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n@@ -85,5 +85,6 @@ private Gson getGsonWithNamingPolicy(FieldNamingPolicy fieldNamingPolicy){\n     int UPPER_WORDS = 6;\n     @SerializedName(\"annotatedName\") int annotated = 7;\n     int lowerId = 8;\n+    int _9 = 9;\n   }\n }, ", 16, 26, "\"modified, modified, \"", 42], 1], ["1520", "Update https://google.github.io/gson/apidocs/ or take it down", null, "Marcono1234", "05/07/19, 10:23:29 PM", "The documentation on https://google.github.io/gson/apidocs/ appears to be outdated (is for 2.6.2 while the current version is 2.8.5). It appears the doc is now hosted on http://www.javadoc.io/doc/com.google.code.gson/gson.\r\n\r\nCould you therefore please either update the docs on https://google.github.io/gson/apidocs/, or take it down and remove the links to it from https://github.com/google/gson/blob/master/UserGuide.md\r\n\r\nOtherwise it might be confusing for new users.", "Deleted gh-pages branch to stop publishing github.io javadocs =||= ", 0], ["1521", "Change URLs from http to https", null, "Marcono1234", "05/07/19, 11:27:45 PM", "NaN", "So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the `cla` label to `yes` (if enabled on your project), and then merge this pull request when appropriate.*\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1521) for more info**.\n\n<!-- need_author_consent --> =||= ", ["1521", "Change URLs from http to https", null, "Marcono1234", "05/07/19, 11:27:45 PM", "NaN", "NaN"], ["inder123", "Changed github.io to javadoc", "05/07/19, 10:48:14 PM", "GitHub", "d10df8b8b15252a0ad5594eddfe3b72198a91a65", ["UserGuide.md"], "@@ -250,7 +250,7 @@ gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n \n The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n-You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://google.github.io/gson/apidocs/com/google/gson/reflect/TypeToken.html) class.\n+You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/reflect/TypeToken.html) class.\n \n ```java\n Type fooType = new TypeToken<Foo<Bar>>() {}.getType();\n@@ -556,7 +556,7 @@ This feature provides a way where you can mark certain fields of your objects to\n \n #### <a name=\"TOC-User-Defined-Exclusion-Strategies\"></a>User Defined Exclusion Strategies\n \n-If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](https://google.github.io/gson/apidocs/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n+If the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n \n The following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n \n@@ -615,7 +615,7 @@ The output is:\n \n ### <a name=\"TOC-JSON-Field-Naming-Support\"></a>JSON Field Naming Support\n \n-Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](https://google.github.io/gson/apidocs/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n+Gson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a Json field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n \n It also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n \n@@ -644,7 +644,7 @@ The output is:\n {\"custom_naming\":\"first\",\"SomeOtherField\":\"second\"}\n ```\n \n-If you have a need for custom naming policy ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](https://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html) annotation.\n+If you have a need for custom naming policy ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/annotations/SerializedName.html) annotation.\n \n ### <a name=\"TOC-Sharing-State-Across-Custom-Serializers-and-Deserializers\"></a>Sharing State Across Custom Serializers and Deserializers\n , ", 4, 4, "\"modified, \"", 8], 1], ["1522", "Clean up some deprecations & warnings in tests", "Degubi", "Degubi", "10/03/19, 10:49:25 PM", "- Add some SuppressWarnings(\"unused\") to some fields & classes that are used in reflection code.\r\n- Replace MoreAsserts.assertEquals with Assert.assertArrayEquals.\r\n- Replace primitive wrapper constructor calls with autoboxing or explicit valueOf calls. (Wrapper class constructors deprecated after j9)\r\n- Fix wrong assert imports in MoreAsserts & JsonReaderPathTest.\r\n- Noticed that one of the test methods are failing when using newer java versions in DefaultDateTypeAdapterTest.java, there's already a pr for that: #1454\r\n- Was thinking about refactoring all the test methods to use the Junit4 @Test annotations instead of using the TestCase class", "NaN", ["1522", "Clean up some deprecations & warnings in tests", "Degubi", "Degubi", "10/03/19, 10:49:25 PM", "- Add some SuppressWarnings(\"unused\") to some fields & classes that are used in reflection code.\n- Replace MoreAsserts.assertEquals with Assert.assertArrayEquals.\n- Replace primitive wrapper constructor calls with autoboxing or explicit valueOf calls. (Wrapper class constructors deprecated after j9)\n- Fix wrong assert imports in MoreAsserts & JsonReaderPathTest.\n- Noticed that one of the test methods are failing when using newer java versions in DefaultDateTypeAdapterTest.java, there's already a pr for that: #1454\n- Was thinking about refactoring all the test methods to use the Junit4 @Test annotations instead of using the TestCase class", "NaN"], ["Degubi", "Minor cleanups in deprecations and other warnings", "04/27/19, 06:27:11 PM", "Degubi", "ea22bf7159107e7a96b238a8db5c4eef162ef028", ["gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java", "gson/src/test/java/com/google/gson/FieldAttributesTest.java", "gson/src/test/java/com/google/gson/JsonPrimitiveTest.java", "gson/src/test/java/com/google/gson/common/MoreAsserts.java", "gson/src/test/java/com/google/gson/functional/ArrayTest.java", "gson/src/test/java/com/google/gson/functional/CollectionTest.java", "gson/src/test/java/com/google/gson/functional/JsonParserTest.java", "gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java", "gson/src/test/java/com/google/gson/functional/MapTest.java", "gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java", "gson/src/test/java/com/google/gson/functional/PrimitiveTest.java", "gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java", "gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java", "gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java", "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java", "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"], "@@ -167,6 +167,7 @@ public void testDatePattern() throws Exception {\n     assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n+  @SuppressWarnings(\"unused\")\n   public void testInvalidDatePattern() throws Exception {\n     try {\n       new DefaultDateTypeAdapter(Date.class, \"I am a bad Date pattern....\");, @@ -39,6 +39,7 @@ protected void setUp() throws Exception {\n     fieldAttributes = new FieldAttributes(Foo.class.getField(\"bar\"));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   public void testNullField() throws Exception {\n     try {\n       new FieldAttributes(null);, @@ -30,6 +30,7 @@\n  */\n public class JsonPrimitiveTest extends TestCase {\n \n+  @SuppressWarnings(\"unused\")\n   public void testNulls() {\n     try {\n       new JsonPrimitive((Boolean) null);\n@@ -113,8 +114,8 @@ public void testExponential() throws Exception {\n     JsonPrimitive json = new JsonPrimitive(\"1E+7\");\n \n     assertEquals(new BigDecimal(\"1E+7\"), json.getAsBigDecimal());\n-    assertEquals(new Double(\"1E+7\"), json.getAsDouble(), 0.00001);\n-    assertEquals(new Float(\"1E+7\"), json.getAsDouble(), 0.00001);\n+    assertEquals(1E+7, json.getAsDouble(), 0.00001);\n+    assertEquals(1E+7, json.getAsDouble(), 0.00001);\n \n     try {\n       json.getAsInt();\n@@ -123,91 +124,91 @@ public void testExponential() throws Exception {\n   }\n \n   public void testByteEqualsShort() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Short.valueOf((short)10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Integer.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10L));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testByteEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Byte((byte)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Byte.valueOf((byte)10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Integer.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testShortEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Short((short)10));\n+    JsonPrimitive p1 = new JsonPrimitive(Short.valueOf((short)10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testIntegerEqualsLong() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n-    JsonPrimitive p2 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Integer.valueOf(10));\n+    JsonPrimitive p2 = new JsonPrimitive(Long.valueOf(10L));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testIntegerEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Integer(10));\n+    JsonPrimitive p1 = new JsonPrimitive(Integer.valueOf(10));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testLongEqualsBigInteger() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Long(10L));\n+    JsonPrimitive p1 = new JsonPrimitive(Long.valueOf(10L));\n     JsonPrimitive p2 = new JsonPrimitive(new BigInteger(\"10\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testFloatEqualsDouble() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n-    JsonPrimitive p2 = new JsonPrimitive(new Double(10.25D));\n+    JsonPrimitive p1 = new JsonPrimitive(Float.valueOf(10.25F));\n+    JsonPrimitive p2 = new JsonPrimitive(Double.valueOf(10.25D));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testFloatEqualsBigDecimal() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Float(10.25F));\n+    JsonPrimitive p1 = new JsonPrimitive(Float.valueOf(10.25F));\n     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());\n   }\n \n   public void testDoubleEqualsBigDecimal() {\n-    JsonPrimitive p1 = new JsonPrimitive(new Double(10.25D));\n+    JsonPrimitive p1 = new JsonPrimitive(Double.valueOf(10.25D));\n     JsonPrimitive p2 = new JsonPrimitive(new BigDecimal(\"10.25\"));\n     assertEquals(p1, p2);\n     assertEquals(p1.hashCode(), p2.hashCode());, @@ -16,7 +16,7 @@\n \n package com.google.gson.common;\n \n-import junit.framework.Assert;\n+import org.junit.Assert;\n \n import java.util.Collection;\n \n@@ -28,26 +28,6 @@\n  */\n public class MoreAsserts {\n \n-  public static void assertEquals(int[] expected, int[] target) {\n-    if (expected == null) {\n-      Assert.assertNull(target);\n-    }\n-    Assert.assertEquals(expected.length, target.length);\n-    for (int i = 0; i < expected.length; ++i) {\n-      Assert.assertEquals(expected[i], target[i]);\n-    }\n-  }\n-\n-  public static void assertEquals(Integer[] expected, Integer[] target) {\n-    if (expected == null) {\n-      Assert.assertNull(target);\n-    }\n-    Assert.assertEquals(expected.length, target.length);\n-    for (int i = 0; i < expected.length; ++i) {\n-      Assert.assertEquals(expected[i], target[i]);\n-    }\n-  }\n-\n   /**\n    * Asserts that the specified {@code value} is not present in {@code collection}\n    * @param collection the collection to look into\n@@ -69,5 +49,4 @@ public static void assertEqualsAndHashCode(Object a, Object b) {\n     Assert.assertFalse(a.equals(null));\n     Assert.assertFalse(a.equals(new Object()));\n   }\n-\n }, @@ -19,12 +19,12 @@\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonParseException;\n-import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.common.TestTypes.ClassWithObjects;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+import static org.junit.Assert.assertArrayEquals;\n \n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n@@ -53,7 +53,7 @@ public void testTopLevelArrayOfIntsSerialization() {\n   public void testTopLevelArrayOfIntsDeserialization() {\n     int[] expected = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n     int[] actual = gson.fromJson(\"[1,2,3,4,5,6,7,8,9]\", int[].class);\n-    MoreAsserts.assertEquals(expected, actual);\n+    assertArrayEquals(expected, actual);\n   }\n \n   public void testInvalidArrayDeserialization() {\n@@ -173,8 +173,8 @@ public void testArrayOfCollectionDeserialization() throws Exception {\n     Collection<Integer>[] target = gson.fromJson(json, type);\n \n     assertEquals(2, target.length);\n-    MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n-    MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n+    assertArrayEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0]));\n+    assertArrayEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n   }\n \n   public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {, @@ -42,6 +42,7 @@\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n+import static org.junit.Assert.assertArrayEquals;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n@@ -70,7 +71,7 @@ public void testTopLevelCollectionOfIntegersDeserialization() {\n     Type collectionType = new TypeToken<Collection<Integer>>() { }.getType();\n     Collection<Integer> target = gson.fromJson(json, collectionType);\n     int[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n-    MoreAsserts.assertEquals(expected, toIntArray(target));\n+    assertArrayEquals(expected, toIntArray(target));\n   }\n \n   public void testTopLevelListOfIntegerCollectionsDeserialization() throws Exception {\n@@ -86,7 +87,7 @@ public void testTopLevelListOfIntegerCollectionsDeserialization() throws Excepti\n     }\n \n     for (int i = 0; i < 3; i++) {\n-      MoreAsserts.assertEquals(expected[i], toIntArray(target.get(i)));\n+      assertArrayEquals(expected[i], toIntArray(target.get(i)));\n     }\n   }\n , @@ -123,9 +123,9 @@ public void testChangingCustomTreeAndDeserializing() {\n \n   public void testExtraCommasInArrays() {\n     Type type = new TypeToken<List<String>>() {}.getType();\n-    assertEquals(list(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n-    assertEquals(list(null, null), gson.fromJson(\"[,]\", type));\n-    assertEquals(list(\"a\", null), gson.fromJson(\"[a,]\", type));\n+    assertEquals(Arrays.asList(\"a\", null, \"b\", null, null), gson.fromJson(\"[a,,b,,]\", type));\n+    assertEquals(Arrays.asList(null, null), gson.fromJson(\"[,]\", type));\n+    assertEquals(Arrays.asList(\"a\", null), gson.fromJson(\"[a,]\", type));\n   }\n \n   public void testExtraCommasInMaps() {\n@@ -136,8 +136,4 @@ public void testExtraCommasInMaps() {\n     } catch (JsonSyntaxException expected) {\n     }\n   }\n-\n-  private <T> List<T> list(T... elements) {\n-    return Arrays.asList(elements);\n-  }\n }, @@ -59,8 +59,8 @@ public void disabled_testTwoTypesCollapseToOneSerialize() {\n         .create();\n \n     Map<Number, String> original = new LinkedHashMap<Number, String>();\n-    original.put(new Double(1.0), \"a\");\n-    original.put(new Float(1.0), \"b\");\n+    original.put(1.0D, \"a\");\n+    original.put(1.0F, \"b\");\n     try {\n       gson.toJson(original, new TypeToken<Map<Number, String>>() {}.getType());\n       fail(); // we no longer hash keys at serialization time, @@ -364,7 +364,7 @@ public void testMapDeserializationWithWildcardValues() {\n     Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() {}.getType();\n     Map<String, ? extends Long> map = gson.fromJson(\"{\\\"test\\\":123}\", typeOfMap);\n     assertEquals(1, map.size());\n-    assertEquals(new Long(123L), map.get(\"test\"));\n+    assertEquals(Long.valueOf(123L), map.get(\"test\"));\n   }\n \n , @@ -121,7 +121,7 @@ public void testParameterizedTypesWithCustomDeserializer() {\n         .registerTypeAdapter(ptStringType, new MyParameterizedTypeAdapter<String>())\n         .registerTypeAdapter(ptStringType, new MyParameterizedTypeInstanceCreator<String>(\"\"))\n         .registerTypeAdapter(ptIntegerType,\n-            new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0)))\n+            new MyParameterizedTypeInstanceCreator<Integer>(0))\n         .create();\n \n     MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);, @@ -144,12 +144,12 @@ public void testNumberSerialization() {\n \n   public void testNumberDeserialization() {\n     String json = \"1\";\n-    Number expected = new Integer(json);\n+    Number expected = Integer.valueOf(json);\n     Number actual = gson.fromJson(json, Number.class);\n     assertEquals(expected.intValue(), actual.intValue());\n \n     json = String.valueOf(Long.MAX_VALUE);\n-    expected = new Long(json);\n+    expected = Long.valueOf(json);\n     actual = gson.fromJson(json, Number.class);\n     assertEquals(expected.longValue(), actual.longValue());\n \n@@ -164,16 +164,16 @@ public void testNumberAsStringDeserialization() {\n   }\n \n   public void testPrimitiveDoubleAutoboxedSerialization() {\n-    assertEquals(\"-122.08234335\", gson.toJson(-122.08234335));\n-    assertEquals(\"122.08112002\", gson.toJson(new Double(122.08112002)));\n+    assertEquals(\"-122.08234335\", gson.toJson(-122.08234335D));\n+    assertEquals(\"122.08112002\", gson.toJson(122.08112002D));\n   }\n \n   public void testPrimitiveDoubleAutoboxedDeserialization() {\n     double actual = gson.fromJson(\"-122.08858585\", double.class);\n-    assertEquals(-122.08858585, actual);\n+    assertEquals(-122.08858585D, actual);\n \n     actual = gson.fromJson(\"122.023900008000\", Double.class);\n-    assertEquals(122.023900008, actual);\n+    assertEquals(122.023900008D, actual);\n   }\n \n   public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization() {, @@ -157,17 +157,17 @@ public void testStrictBoxedNansAndInfinities() throws IOException {\n     writer.setLenient(false);\n     writer.beginArray();\n     try {\n-      writer.value(new Double(Double.NaN));\n+      writer.value(Double.valueOf(Double.NaN));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      writer.value(new Double(Double.NEGATIVE_INFINITY));\n+      writer.value(Double.valueOf(Double.NEGATIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      writer.value(new Double(Double.POSITIVE_INFINITY));\n+      writer.value(Double.valueOf(Double.POSITIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }, @@ -34,10 +34,11 @@\n  */\n public class RecursiveTypesResolveTest extends TestCase {\n \n+  @SuppressWarnings(\"unused\")\n   private static class Foo1<A> {\n-    public Foo2<? extends A> foo2;\n+\tpublic Foo2<? extends A> foo2;\n   }\n-\n+  @SuppressWarnings(\"unused\")\n   private static class Foo2<B> {\n     public Foo1<? super B> foo1;\n   }\n@@ -93,10 +94,12 @@ public void testSubSupertype() {\n    * Tests for recursion while resolving type variables.\n    */\n \n+  @SuppressWarnings(\"unused\")\n   private static class TestType<X> {\n     TestType<? super X> superType;\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class TestType2<X, Y> {\n     TestType2<? super Y, ? super X> superReversedType;\n   }\n@@ -111,6 +114,3 @@ public void testRecursiveTypeVariablesResolve12() throws Exception {\n     assertNotNull(adapter);\n   }\n }\n-\n-\n-, @@ -48,14 +48,13 @@ public void testNullSafeBugDeserialize() throws Exception {\n       // because we use it to return a null type adapter on a recursive call.\n       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();\n \n-      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n       @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {\n         if (type.getRawType() != Device.class || recursiveCall.get() != null) {\n           recursiveCall.set(null); // clear for subsequent use\n           return null;\n         }\n         recursiveCall.set(Boolean.TRUE);\n-        return (TypeAdapter) gson.getDelegateAdapter(this, type);\n+        return gson.getDelegateAdapter(this, type);\n       }\n     }\n   }, @@ -27,9 +27,10 @@\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n-import static junit.framework.Assert.assertEquals;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assume.assumeTrue;\n \n+@SuppressWarnings(\"resource\")\n @RunWith(Parameterized.class)\n public class JsonReaderPathTest {\n   @Parameterized.Parameters(name = \"{0}\"), @@ -189,6 +189,7 @@ public void testInvalidJsonInput() throws IOException {\n     }\n   }\n   \n+  @SuppressWarnings(\"unused\")\n   public void testNulls() {\n     try {\n       new JsonReader(null);, @@ -198,17 +198,17 @@ public void testNonFiniteBoxedDoubles() throws IOException {\n     JsonWriter jsonWriter = new JsonWriter(stringWriter);\n     jsonWriter.beginArray();\n     try {\n-      jsonWriter.value(new Double(Double.NaN));\n+      jsonWriter.value(Double.valueOf(Double.NaN));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));\n+      jsonWriter.value(Double.valueOf(Double.NEGATIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }\n     try {\n-      jsonWriter.value(new Double(Double.POSITIVE_INFINITY));\n+      jsonWriter.value(Double.valueOf(Double.POSITIVE_INFINITY));\n       fail();\n     } catch (IllegalArgumentException expected) {\n     }, ", 61, 81, "\"modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, \"", 142], 1], ["1523", "Android studio 3.4\u7248\u672c\u95ee\u9898", null, "ydl00", "09/05/19, 03:58:37 AM", "\u5728 \u6700\u65b0\u7248 Android studio 3.4 \u65f6  \u4f7f\u7528 \u63a8\u8350\u7684 gradle:3.4.0  \r\n\u5982\u679c \u5f00\u542f \u6df7\u6dc6( minifyEnabled true) \u90a3\u4e48\r\n \u5728\u4f7f\u7528 Gson \u65f6  \u8c03\u7528\u6b64\u65b9\u6cd5 \u9519\u8bef,\u4f46\u662f \u4ee5\u524d\u7248\u672cgradle \u65e0\u6b64\u95ee\u9898\r\n\r\n    private <T> Map<String, T> parse(String json) {\r\n        Map<String, T> map = null;\r\n        try {\r\n            map = new GsonBuilder().create().fromJson(json, new TypeToken<Map<String, T>>() {\r\n            }.getType());\r\n        } catch (JsonSyntaxException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return map;\r\n        \r\n    }\r\n\r\n\u5c1d\u8bd5 \u4fee\u6539\u6cdb\u578b \u4e3a Object  \u65e0\u95ee\u9898\r\n\r\nError info:\r\n\r\njava.lang.AssertionError: illegal type variable reference  \r\n\tat libcore.reflect.TypeVariableImpl.resolve(TypeVariableImpl.java:111)  \r\n\tat libcore.reflect.TypeVariableImpl.getGenericDeclaration(TypeVariableImpl.java:125)  \r\n\tat libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)  \r\n\tat java.util.Arrays.hashCode(Arrays.java:4074)  \r\n\tat Tb$b.hashCode($Gson$Types.java:502)  \r\n\tat Md.<init>(TypeToken.java:64)  \r\n\tat Pa.<init>(Unknown Source:0)  \r\n\tat Qa.a(Unknown Source:8)  \r\n\tat ------------hide------------.onViewClicked(RegActivity.java:182)  \r\n\tat ja.a(RegActivity_ViewBinding.java:67)  \r\n\tat I.onClick(DebouncingOnClickListener.java:18)  \r\n\tat android.view.View.performClick(View.java:6266)  \r\n\tat android.view.View$PerformClick.run(View.java:24730)  \r\n\tat android.os.Handler.handleCallback(Handler.java:793)  \r\n\tat android.os.Handler.dispatchMessage(Handler.java:98)  \r\n\tat android.os.Looper.loop(Looper.java:176)  \r\n\tat android.app.ActivityThread.main(ActivityThread.java:6701)  \r\n\tat java.lang.reflect.Method.invoke(Native Method)  \r\n\tat com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:249)  \r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:783)  \r", "\u53ef\u80fd\u662f Android Studio 3.4 \u9ed8\u8ba4\u5f00\u542f R8 \u5bfc\u81f4\u7684\u3002\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8f91 gradle.properties \u5173\u95ed R8\r\n\r\n```\r\n# Disables R8 for Android Library modules only.\r\nandroid.enableR8.libraries = false\r\n# Disables R8 for all modules.\r\nandroid.enableR8 = false\r\n``` =||= > \u53ef\u80fd\u662fAndroid Studio 3.4\u9ed8\u8ba4\u5f00\u542fR8\u5bfc\u81f4\u7684\u3002\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8f91gradle.properties\u5173\u95edR8\r\n> \r\n> ```\r\n> # Disables R8 for Android Library modules only.\r\n> android.enableR8.libraries = false\r\n> # Disables R8 for all modules.\r\n> android.enableR8 = false\r\n> ```\r\n\r\n\u8c22\u8c22,\u5173\u95edR8 \u7684\u786e \u53ef\u4ee5\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898, =||= \u6de1\u817e\u4e86\uff0c\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5173\u95edR8\u91cd\u65b0\u8fd0\u884c\u597d\u50cf\u4e5f\u4e0d\u751f\u6548\uff0c\u4f9d\u7136\u7206\u8fd9\u4e2a\u5f02\u5e38 =||= > \u6de1\u817e\u4e86\uff0c\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5173\u95edR8\u91cd\u65b0\u8fd0\u884c\u597d\u50cf\u4e5f\u4e0d\u751f\u6548\uff0c\u4f9d\u7136\u7206\u8fd9\u4e2a\u5f02\u5e38\r\n\r\n\u6211\u662f\u6539\u6210Object \u4e86,   \r\n \u540c\u65f6\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898  \u5185\u90e8\u9759\u6001\u7c7b \u4e5f\u4f1a\u62a5\u9519 =||= > > \u6de1\u817e\u4e86\uff0c\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5173\u95edR8\u91cd\u65b0\u8fd0\u884c\u597d\u50cf\u4e5f\u4e0d\u751f\u6548\uff0c\u4f9d\u7136\u7206\u8fd9\u4e2a\u5f02\u5e38\r\n> \r\n> \u6211\u662f\u6539\u6210Object \u4e86,\r\n> \u540c\u65f6\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898 \u5185\u90e8\u9759\u6001\u7c7b \u4e5f\u4f1a\u62a5\u9519\r\n\r\n\u662f\u7684\uff0c\u6211\u4e5f\u662f\u628aT\u7c7b\u578b\u53bb\u6389\u4e86\uff0c\u6bd5\u7adf\u5373\u4f7f\u4f20\u4e86T\u7c7b\u578b\uff0c\u4e5f\u89e3\u6790\u4e0d\u5230\u6b63\u786e\u7684\u7c7b\u578b\uff0c\u8fd8\u662f\u9700\u8981\u8f6c\u6362\u4e00\u6b21 =||= > > > \u6de1\u817e\u4e86\uff0c\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\uff0c\u5173\u95edR8\u91cd\u65b0\u8fd0\u884c\u597d\u50cf\u4e5f\u4e0d\u751f\u6548\uff0c\u4f9d\u7136\u7206\u8fd9\u4e2a\u5f02\u5e38\r\n> > \r\n> > \r\n> > \u6211\u662f\u6539\u6210Object \u4e86,\r\n> > \u540c\u65f6\u8fd8\u5b58\u5728\u4e00\u4e2a\u95ee\u9898 \u5185\u90e8\u9759\u6001\u7c7b \u4e5f\u4f1a\u62a5\u9519\r\n> \r\n> \u662f\u7684\uff0c\u6211\u4e5f\u662f\u628aT\u7c7b\u578b\u53bb\u6389\u4e86\uff0c\u6bd5\u7adf\u5373\u4f7f\u4f20\u4e86T\u7c7b\u578b\uff0c\u4e5f\u89e3\u6790\u4e0d\u5230\u6b63\u786e\u7684\u7c7b\u578b\uff0c\u8fd8\u662f\u9700\u8981\u8f6c\u6362\u4e00\u6b21\r\n\r\n\r\n\u627e\u5230\u539f\u56e0\u4e86,\u5e94\u8be5 \u662f gson \u6df7\u6dc6\u914d\u7f6e \u95ee\u9898 \r\n\r\n[ Prevent R8 from leaving Data object members always null](https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg) =||= ", 0], ["1524", "Kotlin inline classes not correctly serialised in HashMap", "Geert Berkers", "geertberkers", "05/02/19, 12:32:20 PM", "I am using the following code:\r\n\r\n    inline class Identifier(val value: String)\r\n\r\n    data class FormInstance(\r\n        var formId: Identifier,\r\n        var createdAt: Date = Date(),\r\n        var modifiedAt: Date = Date(),\r\n        var fieldValues: HashMap<Identifier, String> = hashMapOf()\r\n    )\r\n\r\nAnd the result is serialized as:\r\n\r\n    {\r\n        \"formId\": \"ADDISON_DIARY\",\r\n        \"modifiedAt\": \"2019-05-01T23:44:22.703+0200\"\r\n        \"createdAt\": \"2019-04-30T23:44:22.701+0200\",\r\n        \"fieldValues\": {\r\n          \"Identifier(value\\u003dfrustration)\": \"VERYMUCH\",\r\n          \"Identifier(value\\u003dstress)\": \"NONE\",\r\n          \"Identifier(value\\u003dlimitations)\": \"ALITTLE\",\r\n          \"Identifier(value\\u003dsleep)\": \"ALOT\",\r\n          \"Identifier(value\\u003dnegative_effect_partner)\": \"ALITTLE\",\r\n          \"Identifier(value\\u003dsomber_feelings)\": \"VERYLITTLE\",\r\n    }\r\n\r\n\r\nSo the problem is that the Identifier gets it value when its parsed itself, but when parsing the hashmap, it uses the following code: (screenshot line 207)\r\n<img width=\"993\" alt=\"Screenshot 2019-05-01 23 48 31\" src=\"https://user-images.githubusercontent.com/8653723/57044698-afe79100-6c6b-11e9-91f5-7f9bef469449.png\">\r\n\r\n\r\nI think the code needs to check for inline classes if this is possible, because these are experimental in kotlin 1.3, and the library is written in java.\r", "I don't believe Gson should support Kotlin or its experimental features. It's _probably_ a design problem that the `Map` type adapter uses static `String.valueOf` instead of a key-to-string strategy (and not rejecting non-String-keyed maps), but I would consider implementing a `FormInstance` to `FormInstanceDto` (having a map with true `String` keys, not inline classes) converter and vice versa.\r\n =||= You can write a TypeAdapter which unwraps the class yourself or just override `toString()` and write out the wrapped property value. Gson won't be seeing updates for Kotlin. =||= Relates to #1722 =||= ", 0], ["1525", "Json response with hyphen", "Tim Hansen", "willc0de4food", "05/03/19, 10:32:46 PM", "I have some JSON that is formatted as such:\r\n```\r\n{\r\n  \"meta\": {\r\n    \"token-type\": \"type\",\r\n    \"access-token\": \"token\"\r\n  }\r\n}\r\n```\r\nHow can I map the keys with hyphens to variables? I've tried camel casing the variables, concatenating the words (i.e. tokentype), and using underscores. Neither option worked :(\r\n```\r\ndata class Meta(var token_type: String, val access_token: String) {\r\n\r\n    class Deserializer: ResponseDeserializable<Meta> {\r\n        override fun deserialize(content: String): Meta? = Gson().fromJson(content, Meta::class.java)\r\n    }\r\n}\r\n```\r\n\r\nThanks!", "Figured it out. In case anyone else comes across this, I just needed to setup custom field names with @SerializedName()\r\n```\r\ndata class Meta(@SerializedName(\"token-type\") var token_type: String, @SerializedName(\"access-token\") val access_token: String) {\r\n\r\n    class Deserializer: ResponseDeserializable<Meta> {\r\n        override fun deserialize(content: String): Meta? = Gson().fromJson(content, Meta::class.java)\r\n    }\r\n}\r\n``` =||= ", 0], ["1527", "update proguard to fix R8 compatibility issue", "Farid Forootan Shad", "faridfor", "05/07/19, 10:19:00 PM", "[described here](https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always)", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1527) for more info**.\n\n<!-- need_sender_cla --> =||= I signed it! :) =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1527) for more info**.\n\n<!-- ok --> =||= ", ["1527", "update proguard to fix R8 compatibility issue", "Farid Forootan Shad", "faridfor", "05/07/19, 10:19:00 PM", "[described here](https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always)", "NaN"], ["Farid Forootan Shad", "update proguard to fix R8 compatibility issue\n\nhttps://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always", "05/05/19, 10:28:29 AM", "GitHub", "920301ec7f453377b7457c353ceb3db92fd3f21b", ["examples/android-proguard-example/proguard.cfg"], "@@ -19,4 +19,9 @@\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer\n \n+# Prevent R8 from leaving Data object members always null\n+-keepclassmembers,allowobfuscation class * {\n+  @com.google.gson.annotations.SerializedName <fields>;\n+}\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 5, 0, "\"modified, \"", 5], 1], ["1530", "Update sample ProGuard config to mark fields instead of all members.", null, "donaldchai", "05/08/19, 10:44:18 PM", "GSON only needs to reflect based on fields:\r\nhttps://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152\r\n\r\nThere's no reason to disallow optimizing methods.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1530) for more info**.\n\n<!-- need_sender_cla --> =||= ", 0], ["1531", "Update sample ProGuard config to mark fields instead of all members.", null, "donaldchai", "05/09/19, 06:23:54 AM", "GSON only needs to reflect based on fields:\r\nhttps://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152\r\n\r\nThere's no reason to disallow optimizing methods.", "NaN", ["1531", "Update sample ProGuard config to mark fields instead of all members.", null, "donaldchai", "05/09/19, 06:23:54 AM", "GSON only needs to reflect based on fields:\nhttps://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152\n\nThere's no reason to disallow optimizing methods.", "NaN"], ["Donald Chai", "Update sample ProGuard config to mark fields instead of all members.\n\nGSON only needs to reflect based on fields:\nhttps://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152\n\nThere's no reason to disallow optimizing methods.", "05/08/19, 10:31:47 PM", "Donald Chai", "2d560268ae4b5d379957e4a50b30348c60b8c0e8", ["examples/android-proguard-example/proguard.cfg"], "@@ -11,7 +11,7 @@\n #-keep class com.google.gson.stream.** { *; }\n \n # Application classes that will be serialized/deserialized over Gson\n--keep class com.google.gson.examples.android.model.** { *; }\n+-keep class com.google.gson.examples.android.model.** { <fields>; }\n \n # Prevent proguard from stripping interface information from TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter), ", 1, 1, "\"modified, \"", 2], 1], ["1533", "Convert key value to lowercase", "Lucas Alves", "lucalves", "07/17/19, 05:56:19 PM", "Hello sirs,\r\n\r\nI have a problem with convert json key value to lowercase, using gson. I have this json:\r\n\r\n`{\"CODIBEG\":2704302,\"CODESTADO\":27,\"CEP\":\"57072\",\"LOGRADOURO\":\"Rua E\",\"COMPLEMENTO\":\"(Cj Eust\u00e1quio Gomes)\",\"BAIRRO\":\"Eslov\u00eania\",\"CIDADE\":\"Barreiras\",\"ESTADO\":\"AL\"};`\r\n\r\nUsing gson, how I convert this key's (ex, to: codibge, codestado, cep, logradouro)?\r\n\r\nI develop to Android, using Java.", "using annotations? =||= I have solved the problem using the RetroFit library. Thanks! @guptaaditya13  =||= ", 0], ["1534", "Refactor CostructorConstructor to be stateless", "Degubi", "Degubi", "12/03/20, 10:54:59 AM", "- Remove ConstructorConstructor.java constructor, make all methods static\r\n- Remove CostructorConstructor field from gson, pass the instanceCreator map to adapters\r\n- Remove ReflectionAccessor fields, no need to store them in fields, avoids loading some classes when not used(Reflection classes)", "why is this preferred over existing implementation @Degubi ? =||= > why is this preferred over existing implementation @Degubi ?\r\n\r\n- Remove some unnecessary constructors and state.\r\n- Avoid loading some classes.\r\nNothing special, just to remove some unnecessary code bloat. =||= ", 0], ["1535", "Add docs to module-info.java", "Degubi", "Degubi", "10/03/19, 10:51:19 PM", "- Add javadocs to module-info.java", "NaN", ["1535", "Add docs to module-info.java", "Degubi", "Degubi", "10/03/19, 10:51:19 PM", "- Add javadocs to module-info.java", "NaN"], ["Degubi", "Add docs to module-info.java", "05/26/19, 02:49:54 PM", "Degubi", "d95634b613c72a097947ca7dee14d84302751446", ["gson/src/main/java/module-info.java"], "@@ -1,3 +1,7 @@\n+/**\n+ * Defines the Gson serialization/deserialization API.\n+ * @since 2.8.6\n+ */\n module com.google.gson {\n \texports com.google.gson;\n \texports com.google.gson.annotations;, ", 4, 0, "\"modified, \"", 4], 1], ["1538", "Add IDEA generated classes folder to gitignore", "William Collishaw", "WilliamCollishaw", "10/04/19, 08:37:41 PM", "Intellij IDEA generates a few classes during build that should be ignored\r\n<img width=\"492\" alt=\"Screen Shot 2019-06-02 at 3 04 07 PM\" src=\"https://user-images.githubusercontent.com/16943514/58767437-37b10b80-8548-11e9-98b6-7881f7f3a781.png\">\r", "NaN", ["1538", "Add IDEA generated classes folder to gitignore", "William Collishaw", "WilliamCollishaw", "10/04/19, 08:37:41 PM", "Intellij IDEA generates a few classes during build that should be ignored\n<img width=\"492\" alt=\"Screen Shot 2019-06-02 at 3 04 07 PM\" src=\"https://user-images.githubusercontent.com/16943514/58767437-37b10b80-8548-11e9-98b6-7881f7f3a781.png\">", "NaN"], ["William Collishaw", "Add IDEA generated classes folder to gitignore", "06/02/19, 09:05:45 PM", "William Collishaw", "e63ae88a349163554f32eff749bca520faf91c68", [".gitignore"], "@@ -18,3 +18,5 @@ local.properties\n build\n \n .DS_Store\n+\n+examples/android-proguard-example/gen, ", 2, 0, "\"modified, \"", 2], 1], ["1539", "Simplify BagOfPrimitives if statement", "William Collishaw", "WilliamCollishaw", "06/04/19, 06:03:45 PM", "Removes some redundant if statements", "So there's good news and bad news.\n\n:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.\n\n:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.\n\n*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the `cla` label to `yes` (if enabled on your project), and then merge this pull request when appropriate.*\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1539) for more info**.\n\n<!-- need_author_consent --> =||= ", ["1539", "Simplify BagOfPrimitives if statement", "William Collishaw", "WilliamCollishaw", "06/04/19, 06:03:45 PM", "Removes some redundant if statements", "NaN"], ["inder123", "formatting", "06/04/19, 06:03:26 PM", "GitHub", "ddb9729260e6dee18d95db2397c0f0f30e7bac7f", ["metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java"], "@@ -66,22 +66,18 @@ public int hashCode() {\n \n   @Override\n   public boolean equals(Object obj) {\n-    if (this == obj)\n-      return true;\n-    if (obj == null)\n-      return false;\n-    if (getClass() != obj.getClass())\n-      return false;\n+    if (this == obj) return true;\n+    if (obj == null) return false;\n+    if (getClass() != obj.getClass()) return false;\n     BagOfPrimitives other = (BagOfPrimitives) obj;\n-    if (booleanValue != other.booleanValue)\n-      return false;\n-    if (intValue != other.intValue)\n-      return false;\n-    if (longValue != other.longValue)\n-      return false;\n+    if (booleanValue != other.booleanValue) return false;\n+    if (intValue != other.intValue) return false;\n+    if (longValue != other.longValue) return false;\n     if (stringValue == null) {\n       return other.stringValue == null;\n-    } else return stringValue.equals(other.stringValue);\n+    } else {\n+      return stringValue.equals(other.stringValue);\n+    }\n   }\n \n   @Override, ", 9, 13, "\"modified, \"", 22], 1], ["1542", "GSON not deserialising nested JSON", "Aman Pratap Singh", "apsknight", "06/13/19, 09:18:42 AM", "I'm trying to deserialise a following JSON String:\r\n```json\r\n{\r\n    \"Hello\" : {\"S\" : \"World\"},\r\n    \"Foo\" : {\"S\": \"Bar\"}\r\n}\r\n```\r\nto `Map<String, AttributeValue>` where [`AttributeValue`](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/dynamodbv2/model/AttributeValue.html)  is a Class of DynamoDB Model.\r\n\r\nI've wrote this code to achieve the same:\r\n```java\r\nMap<String, AttributeValue> outputMap = new Gson().fromJson(jsonString,\r\n                new TypeToken<Map<String, AttributeValue>>() {}.getType());\r\n\r\nSystem.out.println(outputMap);\r\n```\r\nbut I'm getting the following as output:\r\n```\r\n{Hello={}, Foo={}}\r\n```\r\n\r\nHowever, when I deserialise the following JSON String:\r\n```json\r\n{\r\n    \"Hello\": {\"S\": \"World\"}\r\n}\r\n```\r\nusing the same code, I get the correct output, i.e. \r\n```\r\n{Hello={S: World,}}\r\n```\r\n\r\nGSON is not deserialising the nested JSON when it has more than one key, value pair.", "It turns out that the error was occurring because I was using uppercase \"S\". \r\n\r\nThe conversion works fine when using lowecase \"s\" instead. =||= ", 0], ["1546", "Keep `TypeAdapter`s from being stripped", null, "hqzxzwb", "10/03/19, 10:50:22 PM", "`TypeAdapter` implementations used in JsonAdapter annotation sometimes are never instantiated explicitly without reflection, causing R8 to strip their instance methods.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1546) for more info**.\n\n<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1546) for more info**.\n\n<!-- ok --> =||= Do I need to do anything more for this getting reviewed? =||= ", ["1546", "Keep `TypeAdapter`s from being stripped", null, "hqzxzwb", "10/03/19, 10:50:22 PM", "`TypeAdapter` implementations used in JsonAdapter annotation sometimes are never instantiated explicitly without reflection, causing R8 to strip their instance methods.", "NaN"], ["hqzxzwb", "Keep `TypeAdapter`s from being stripped", "07/01/19, 04:09:18 AM", "GitHub", "22f77117d3ececd0d7e6c4246b2ba76bd705a649", ["examples/android-proguard-example/proguard.cfg"], "@@ -13,8 +13,9 @@\n # Application classes that will be serialized/deserialized over Gson\n -keep class com.google.gson.examples.android.model.** { <fields>; }\n \n-# Prevent proguard from stripping interface information from TypeAdapterFactory,\n+# Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n+-keep class * implements com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer, ", 2, 1, "\"modified, \"", 3], 1], ["1547", "After Proguard: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.h", "vinod", "vinodvarghese", "07/09/19, 03:09:23 PM", "My app is crashing in the update scenario .below code breaks.\r\n\r\n**Gson aGson = new Gson();\r\nString json = sharedPreferences.getString(START_UP_DETAILS, \"\");\r\nreturn aGson.fromJson(json, **StartupDetails.class);**\r\n\r\n\r\njava.lang.RuntimeException: Unable to resume activity : com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.h\r\n        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3672)\r\n        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3712)\r\n        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2949)\r\n        at android.app.ActivityThread.-wrap11(Unknown Source:0)\r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1630)\r\n        at android.os.Handler.dispatchMessage(Handler.java:106)\r\n        at android.os.Looper.loop(Looper.java:164)\r\n        at android.app.ActivityThread.main(ActivityThread.java:6626)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)\r\n     Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.h\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)\r\n        at com.google.gson.Gson.fromJson(Gson.java:927)\r\n        at com.google.gson.Gson.fromJson(Gson.java:892)\r\n        at com.google.gson.Gson.fromJson(Gson.java:841)\r\n\r\nplease help.", "NaN", 0], ["1549", "Long class hashcode function returning different hashcode for same values when objects are created using gson serialization", "Kiran Mohan", "kiranmohantp", "07/15/19, 04:15:04 AM", "When  gson is used for serialization  Long fields are returning different hash codes for same values.\r\nThis usually happens in java when we use constructor (ex new Long(1l) ) for creating an instance of the Long .\r\nplease have a look at this issue.\r\nthanks", "Sounds as something impossible :) Could you please provide a test case and I will take a look? =||= ", 0], ["1550", "[bug] Default properties are null even after initialization", "Deleted user", "ghost", "07/08/20, 07:44:38 PM", "I made a data class and it has all the objects of json to be serialized and deserialized. I created an additional field called `id` and initialized it as `var id: Int? = 20`. Now when I populate the object with json and get the `data.id`. It is null.\r\n\r\nIf I use a non nullable property like `var id: Int = 20`, then the value becomes 0. This has to be externally handled by adding a `get()` block to the data class. ", "This might be expected behaviour. Gson has [versioning support](https://sites.google.com/site/gson/gson-user-guide#TOC-Versioning-Support). =||= See #1444. =||= In short, not a bug.\r\n\r\nGson does not provide any Kotlin-specific support. Even more, it does not yet have any special support for Java 8, and probably there are no any plans of doing this, but Gson is pretty extensible to implement such a thing. I don't write in Kotlin at all, but yesterday I digged into how Kotlin default constructors are implemented (using [`cfr`](https://github.com/leibnitz27/cfr) to decompile data classes). This explains why my previous answer to #1444 was not sufficient enough.\r\n\r\nSuppose, your data class is declared as follows:\r\n\r\n```kotlin\r\ndata class Whatever(\r\n        val id: Int = 20,\r\n        val name: String = \"(unknown)\"\r\n);\r\n```\r\n\r\n`cfr` decompiles it successfully, and its default constructor would look like this if it'd be written in Java:\r\n\r\n```java\r\npublic /* synthetic */ Whatever(int n, String string, int n2, DefaultConstructorMarker defaultConstructorMarker) {\r\n    if ((n2 & 1) != 0) {\r\n        n = 20;\r\n    }\r\n    if ((n2 & 2) != 0) {\r\n        string = \"(unknown)\";\r\n    }\r\n    this(n, string);\r\n}\r\n```\r\n\r\n`n2` is clearly a bitset of what's supposed to be filled with default values. So, an attempt of making Gson work with Kotlin default classes would look like this (not sure how robust it is anyway):\r\n\r\n```java\r\nfinal class KotlinSupport {\r\n\r\n\tprivate static final int MAX_PARAMETERS_SUPPORTED = 32;\r\n\tprivate static final int ALL_DEFAULTS_MASK = 0xFFFFFFFF;\r\n\r\n\tprivate static final Class<?> defaultConstructorMarkerClass;\r\n\tprivate static final Object defaultConstructorMarker;\r\n\tprivate static final Map<Class<?>, Object> defaultPrimitives;\r\n\r\n\tstatic {\r\n\t\ttry {\r\n\t\t\tdefaultConstructorMarkerClass = Class.forName(\"kotlin.jvm.internal.DefaultConstructorMarker\");\r\n\t\t\tfinal Constructor<?> declaredConstructor = defaultConstructorMarkerClass.getDeclaredConstructor();\r\n\t\t\tdeclaredConstructor.setAccessible(true);\r\n\t\t\tdefaultConstructorMarker = declaredConstructor.newInstance();\r\n\t\t\tdefaultPrimitives = new HashMap<>();\r\n\t\t\tdefaultPrimitives.put(boolean.class, false);\r\n\t\t\tdefaultPrimitives.put(byte.class, (byte) 0);\r\n\t\t\tdefaultPrimitives.put(short.class, (short) 0);\r\n\t\t\tdefaultPrimitives.put(int.class, 0);\r\n\t\t\tdefaultPrimitives.put(long.class, 0L);\r\n\t\t\tdefaultPrimitives.put(char.class, '\\u0000');\r\n\t\t\tdefaultPrimitives.put(float.class, 0F);\r\n\t\t\tdefaultPrimitives.put(double.class, 0D);\r\n\t\t} catch ( final ClassNotFoundException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException ex ) {\r\n\t\t\tthrow new RuntimeException(ex);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate KotlinSupport() {\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory getDefaultsTypeAdapterFactory() {\r\n\t\treturn DefaultsTypeAdapterFactory.instance;\r\n\t}\r\n\r\n\tprivate static final class DefaultsTypeAdapterFactory\r\n\t\t\timplements TypeAdapterFactory {\r\n\r\n\t\tprivate static final TypeAdapterFactory instance = new DefaultsTypeAdapterFactory();\r\n\r\n\t\t@Override\r\n\t\t@Nullable\r\n\t\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\t\tfinal Class<? super T> clazz = typeToken.getRawType();\r\n\t\t\t@Nullable\r\n\t\t\tfinal Constructor<? super T> defaultConstructor = findDefaultConstructor(clazz);\r\n\t\t\tif ( defaultConstructor == null ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\tfinal TypeAdapter<T> typeAdapter = (TypeAdapter<T>) new DefaultsTypeAdapter<>(gson.getDelegateAdapter(this, TypeToken.get(clazz)), defaultConstructor, ConstructorParameter.scan(clazz, this, gson))\r\n\t\t\t\t\t.nullSafe();\r\n\t\t\treturn typeAdapter;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate static final class DefaultsTypeAdapter<T>\r\n\t\t\textends TypeAdapter<T> {\r\n\r\n\t\tprivate final TypeAdapter<? super T> delegateTypeAdapter;\r\n\t\tprivate final Constructor<? super T> constructor;\r\n\t\tprivate final ConstructorParameter[] parameters;\r\n\t\tprivate final Map<String, ConstructorParameter> parametersByName;\r\n\r\n\t\tprivate DefaultsTypeAdapter(final TypeAdapter<? super T> delegateTypeAdapter, final Constructor<? super T> constructor,\r\n\t\t\t\tfinal ConstructorParameter[] parameters) {\r\n\t\t\tthis.delegateTypeAdapter = delegateTypeAdapter;\r\n\t\t\tthis.constructor = constructor;\r\n\t\t\tthis.parameters = parameters;\r\n\t\t\tparametersByName = new HashMap<>();\r\n\t\t\tfor ( final ConstructorParameter constructorParameter : parameters ) {\r\n\t\t\t\tparametersByName.put(constructorParameter.name, constructorParameter);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(final JsonWriter out, final T value)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tdelegateTypeAdapter.write(out, value);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic T read(final JsonReader in)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tin.beginObject();\r\n\t\t\tfinal int parameterLength = parameters.length;\r\n\t\t\tfinal Object[] arguments = new Object[parameterLength + 2]; // TODO consider thread-local storage\r\n\t\t\tfor ( int i = 0; i < parameterLength; i++ ) {\r\n\t\t\t\targuments[i] = parameters[i].defaultValue;\r\n\t\t\t}\r\n\t\t\t// consider there can be an empty object, so each parameter would use its default value\r\n\t\t\tint useDefaults = ALL_DEFAULTS_MASK;\r\n\t\t\twhile ( in.hasNext() ) {\r\n\t\t\t\tfinal String name = in.nextName();\r\n\t\t\t\t@Nullable\r\n\t\t\t\tfinal ConstructorParameter constructorParameter = parametersByName.get(name);\r\n\t\t\t\t// if the current JSON object entry name is unknown\r\n\t\t\t\tif ( constructorParameter == null ) {\r\n\t\t\t\t\t// then just skip it\r\n\t\t\t\t\tin.skipValue();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// TODO handle duplicate keys somehow\r\n\t\t\t\t\t@Nullable\r\n\t\t\t\t\tfinal Object argument = constructorParameter.typeAdapter.read(in);\r\n\t\t\t\t\t// if the current JSON object has a non-null value defined, consider no its default value is required\r\n\t\t\t\t\tif ( argument != null ) {\r\n\t\t\t\t\t\t// then use the current JSON object entry value\r\n\t\t\t\t\t\targuments[constructorParameter.position] = argument;\r\n\t\t\t\t\t\t// and tell the constructor not use the defaults by clearing the respective bit\r\n\t\t\t\t\t\tuseDefaults &= ~(1 << constructorParameter.position);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tin.endObject();\r\n\t\t\targuments[arguments.length - 2] = useDefaults;\r\n\t\t\targuments[arguments.length - 1] = defaultConstructorMarker; // TODO is using defaultConstructorMarker useless and passing a null is safe?\r\n\t\t\ttry {\r\n\t\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t\tfinal T object = (T) constructor.newInstance(arguments);\r\n\t\t\t\treturn object;\r\n\t\t\t} catch ( final InstantiationException | IllegalAccessException | InvocationTargetException ex ) {\r\n\t\t\t\tthrow new RuntimeException(ex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Nullable\r\n\tprivate static <T> Constructor<? super T> findDefaultConstructor(final Class<T> clazz)\r\n\t\t\tthrows UnsupportedOperationException {\r\n\t\tif ( !clazz.isAnnotationPresent(Metadata.class) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal Constructor<T>[] declaredConstructors = (Constructor<T>[]) clazz.getDeclaredConstructors();\r\n\t\tfor ( final Constructor<T> declaredConstructor : declaredConstructors ) {\r\n\t\t\tif ( declaredConstructor.isSynthetic() ) {\r\n\t\t\t\tfinal Parameter[] parameters = declaredConstructor.getParameters();\r\n\t\t\t\tfinal int parameterCount = parameters.length;\r\n\t\t\t\tif ( parameterCount > 0 && parameters[parameterCount - 1].getType() == defaultConstructorMarkerClass ) {\r\n\t\t\t\t\tif ( parameterCount - 2 > MAX_PARAMETERS_SUPPORTED ) {\r\n\t\t\t\t\t\tthrow new UnsupportedOperationException(declaredConstructor + \" has too many parameters: \" + parameterCount);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn declaredConstructor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate static final class ConstructorParameter {\r\n\r\n\t\tprivate final int position;\r\n\t\tprivate final String name;\r\n\t\t@Nullable\r\n\t\tprivate final Object defaultValue;\r\n\t\tprivate final TypeAdapter<?> typeAdapter;\r\n\r\n\t\tprivate ConstructorParameter(final int position, final String name, @Nullable final Object defaultValue, final TypeAdapter<?> typeAdapter) {\r\n\t\t\tthis.position = position;\r\n\t\t\tthis.name = name;\r\n\t\t\tthis.defaultValue = defaultValue;\r\n\t\t\tthis.typeAdapter = typeAdapter;\r\n\t\t}\r\n\r\n\t\tprivate static ConstructorParameter[] scan(final Class<?> clazz, final TypeAdapterFactory typeAdapterFactoryToSkip, final Gson gson) {\r\n\t\t\tfinal Field[] declaredFields = clazz.getDeclaredFields();\r\n\t\t\tfinal int length = declaredFields.length;\r\n\t\t\tfinal ConstructorParameter[] constructorParameters = new ConstructorParameter[length];\r\n\t\t\tfor ( int i = 0; i < length; i++ ) {\r\n\t\t\t\tfinal Field field = declaredFields[i];\r\n\t\t\t\tfield.setAccessible(true);\r\n\t\t\t\t@Nullable\r\n\t\t\t\tfinal Object defaultValue;\r\n\t\t\t\tfinal Class<?> fieldClass = field.getType();\r\n\t\t\t\tif ( !fieldClass.isPrimitive() ) {\r\n\t\t\t\t\tdefaultValue = null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdefaultValue = defaultPrimitives.get(fieldClass);\r\n\t\t\t\t\tif ( defaultValue == null ) {\r\n\t\t\t\t\t\tthrow new AssertionError(fieldClass + \" is not registered\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconstructorParameters[i] = new ConstructorParameter(i, field.getName(), defaultValue, gson.getDelegateAdapter(typeAdapterFactoryToSkip, TypeToken.get(field.getGenericType())));\r\n\t\t\t}\r\n\t\t\treturn constructorParameters;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nprivate static final Gson[] gsons = {\r\n\t\tnew GsonBuilder()\r\n\t\t\t\t.disableHtmlEscaping()\r\n\t\t\t\t.create(),\r\n\t\tnew GsonBuilder()\r\n\t\t\t\t.disableHtmlEscaping()\r\n\t\t\t\t.registerTypeAdapterFactory(KotlinSupport.getDefaultsTypeAdapterFactory())\r\n\t\t\t\t.create()\r\n};\r\n\r\nprivate static final String[] jsons = {\r\n\t\t\"{}\",\r\n\t\t\"{name:null}\",\r\n\t\t\"{id:3,name:\\\"foo\\\"}\"\r\n};\r\n\r\npublic static void main(final String... args) {\r\n\tfor ( final Gson gson : gsons ) {\r\n\t\tfor ( final String json : jsons ) {\r\n\t\t\tSystem.out.println(gson.fromJson(json, Whatever.class));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nwould produce the following result:\r\n\r\n```\r\nWhatever(id=20, name=(unknown))\r\nWhatever(id=20, name=null)\r\nWhatever(id=3, name=foo)\r\nWhatever(id=20, name=(unknown))\r\nWhatever(id=20, name=(unknown)) <---- reset to default since the type adapter marks null values are required to be default\r\nWhatever(id=3, name=foo)\r\n``` =||= Thanks @lyubomyr-shaydariv. Closing it. =||= ", 0], ["1557", "Gson serialization doesn't work with classes defined within methods", "Abhirama Mallela", "kauphylover", "07/28/19, 12:38:51 AM", "I have a class defined within a method. Gson serializes it to null. Here's what I'm talking about:\r\n\r\n```\r\npublic class GsonTestWithClassInsideMethod {\r\n    public static void main(String[] args) {\r\n        final class ABC {\r\n            String a;\r\n            int i;\r\n\r\n            public ABC(String a, int i) {\r\n                this.a = a;\r\n                this.i = i;\r\n            }\r\n\r\n            @Override public String toString() {\r\n                final StringBuilder sb = new StringBuilder(\"ABC{\");\r\n                sb.append(\"a='\").append(a).append('\\'');\r\n                sb.append(\", i=\").append(i);\r\n                sb.append('}');\r\n                return sb.toString();\r\n            }\r\n        }\r\n\r\n        ABC abc = new ABC(\"aaa\", 200);\r\n\r\n        System.out.println(new Gson().toJson(abc, ABC.class)); // prints null\r\n\r\n        XYZ xyz = new XYZ(\"bbb\", 400);\r\n\r\n        System.out.println(new Gson().toJson(xyz, XYZ.class)); // prints {\"x\":\"bbb\",\"y\":400}\r\n    }\r\n\r\n    private static class XYZ {\r\n        String x;\r\n        int y;\r\n\r\n        public XYZ(String x, int y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n\r\n        @Override public String toString() {\r\n            final StringBuilder sb = new StringBuilder(\"XYZ{\");\r\n            sb.append(\"x='\").append(x).append('\\'');\r\n            sb.append(\", y=\").append(y);\r\n            sb.append('}');\r\n            return sb.toString();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAm I doing something wrong or is Gson unable to serialize these classes by design? If this is by design, is there a way I can still continue to have the class be defined within the method and make it work? Or is the only solution to move the definition to outside the method?", "Gson does not support local and anonymous classes [by design](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/Excluder.java#L202) due to how these classes work in Java. You should prefer either package-level classes, or nested static ones (that don't have implicit references to their respective outer classes) like `XYZ`. =||= Thank you @lyubomyr-shaydariv. Closing. =||= ", 0], ["1572", "Fix typo in UserGuide", "Prempal Singh", "prempalsingh", "09/18/19, 05:39:14 PM", "NaN", "NaN", ["1572", "Fix typo in UserGuide", "Prempal Singh", "prempalsingh", "09/18/19, 05:39:14 PM", "NaN", "NaN"], ["Prempal Singh", "Fix typo in UserGuide", "08/27/19, 05:41:35 PM", "GitHub", "4ef06d6f1d5faa26446bf2f49054d5e5b11324a2", ["UserGuide.md"], "@@ -248,7 +248,7 @@ gson.toJson(foo); // May not serialize foo.value correctly\n gson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n ```\n \n-The above code fails to interpret value as type Bar because Gson invokes `list.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n+The above code fails to interpret value as type Bar because Gson invokes `foo.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n \n You can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/reflect/TypeToken.html) class.\n , ", 1, 1, "\"modified, \"", 2], 1], ["1573", "Gson fails to convert ContentValues with Android 10", "Trey Ethridge", "tethridge", "09/17/19, 01:48:33 PM", "The internal implementation of ContentValues changed from using a Hashmap to using an ArrayMap in Android 10.  I've included some sample code below to demonstrate how it fails now.\r\n\r\n```\r\nContentValues values = new ContentValues();\r\nvalues.put(\"Key 1\", \"Key 1 value\");\r\nvalues.put(\"Key 2\", \"Key 2 value\");\r\nvalues.put(\"Key 3\", \"Key 3 value\");\r\nString json = new Gson().toJson(values);\r\nLog.d(\"XXX\", String.format(\"Content values json: '%s'\", json));\r\n```\r\n\r\nOn Android 10 the output looks like:\r\nOutput: XXX: Content values json: '{}'\r\n\r\nOn Android 9 the output looks like:\r\nOutput: XXX: Content values json: {\"mValues\":{\"Key 1\":\"Key 1 value\",\"Key 2\":\"Key 2 value\",\"Key 3\":\"Key 3 value\"}}\r", "Not a bug: 1) you should not (de)serialize classes you don't control (do you really have your content values stored under the `mValues` property key in your JSON documents?); 2) ... unless you implement a custom type adapter that might use, I guess, the built-in `Map` type adapter. =||= 1) Good point.  However, in this case, Gson was just used to pass a lot of information to an instance of a worker with the new WorkManager JetPack library.  The data you pass to it must be Parcelable.  Using ContentValues with Gson to serialize was an easy hack that used to work.  The JSON that was output didn't matter as long as the worker could deserialize it and pull the values from the ContentValues instance.\r\n2) That's the interesting part to me.  I wrote my own serialization/deserialization code to fix the issue.  I'm still unsure as to why this fails now.  The implementation is using an ArrayMap instead of a HashMap.  I would imagine that it would use the same Map type adapter to serialize both objects, but I haven't traced that far into the Gson code base.  Do you see the issue? =||= @tethridge \r\n\r\nI'm not into the Android API, but I don't really believe using Gson for this case is a good choice. (Except probably an attempt of nesting/packing some data as string values, however `Parcelable` looks like a (de)serialization tool already.) If you still need using Gson, you probably might fine-tune the example below (avoid intermediate maps, avoid the map type adapter and use readers/writers directly, etc):\r\n\r\n```java\r\n@SuppressWarnings(\"all\")\r\nclass FakeContentValues {\r\n\r\n\tprivate final Map<String, Object> mValues = new LinkedHashMap<>();\r\n\r\n\tFakeContentValues() {\r\n\t}\r\n\r\n\t// @formatter:off\r\n\tvoid putNull(final String key) { mValues.put(key, null); }\r\n\tvoid put(final String key, final Short value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Long value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Double value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Integer value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final String value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Boolean value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Float value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final byte[] value) { mValues.put(key, value); }\r\n\tvoid put(final String key, final Byte value) { mValues.put(key, value); }\r\n\tObject get(final String key) { return mValues.get(key); }\r\n\tSet<String> keySet() { return mValues.keySet(); }\r\n\t// @formatter:on\r\n\r\n\t@Override\r\n\tpublic boolean equals(final Object o) {\r\n\t\tif ( this == o ) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif ( o == null || getClass() != o.getClass() ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfinal FakeContentValues that = (FakeContentValues) o;\r\n\t\treturn mValues.equals(that.mValues);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int hashCode() {\r\n\t\treturn mValues.hashCode();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\treturn \"{mValues=\" + mValues + \"}\";\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nprivate static final Gson gson = new GsonBuilder()\r\n\t.disableHtmlEscaping()\r\n\t.disableInnerClassSerialization()\r\n\t.registerTypeAdapterFactory(new TypeAdapterFactory() {\r\n\t\t@Override\r\n\t\t@SuppressWarnings(\"ReturnOfNull\")\r\n\t\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\t\tfinal Class<? super T> rawType = typeToken.getRawType();\r\n\t\t\tif ( !FakeContentValues.class.isAssignableFrom(rawType) ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tfinal TypeAdapter<LinkedHashMap<String, Object>> delegateTypeAdapter = gson.getDelegateAdapter(this, mapStringToObjectTypeToken);\r\n\t\t\tfinal TypeAdapter<FakeContentValues> typeAdapter = new TypeAdapter<FakeContentValues>() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void write(final JsonWriter out, final FakeContentValues contentValues)\r\n\t\t\t\t\t\tthrows IOException {\r\n\t\t\t\t\tfinal LinkedHashMap<String, Object> intermediate = new LinkedHashMap<>();\r\n\t\t\t\t\tfor ( final String key : contentValues.keySet() ) {\r\n\t\t\t\t\t\tintermediate.put(key, contentValues.get(key));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelegateTypeAdapter.write(out, intermediate);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\t@SuppressWarnings(\"IfStatementWithTooManyBranches\")\r\n\t\t\t\tpublic FakeContentValues read(final JsonReader in)\r\n\t\t\t\t\t\tthrows IOException {\r\n\t\t\t\t\tfinal Map<String, Object> intermediate = delegateTypeAdapter.read(in);\r\n\t\t\t\t\tfinal FakeContentValues contentValues = new FakeContentValues();\r\n\t\t\t\t\tfor ( final Map.Entry<String, Object> e : intermediate.entrySet() ) {\r\n\t\t\t\t\t\tfinal String k = e.getKey();\r\n\t\t\t\t\t\tfinal Object v = e.getValue();\r\n\t\t\t\t\t\t// @formatter:off\r\n\t\t\t\t\t\tif ( v == null ) { contentValues.putNull(k); }\r\n\t\t\t\t\t\telse if ( v instanceof Short ) { contentValues.put(k, (Short) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Long ) { contentValues.put(k, (Long) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Double ) { contentValues.put(k, (Double) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Integer ) { contentValues.put(k, (Integer) v); }\r\n\t\t\t\t\t\telse if ( v instanceof String ) { contentValues.put(k, (String) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Boolean ) { contentValues.put(k, (Boolean) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Float ) { contentValues.put(k, (Float) v); }\r\n\t\t\t\t\t\telse if ( v instanceof byte[] ) { contentValues.put(k, (byte[]) v); }\r\n\t\t\t\t\t\telse if ( v instanceof Byte ) { contentValues.put(k, (Byte) v); }\r\n\t\t\t\t\t\telse { throw new UnsupportedOperationException(String.valueOf(v.getClass())); }\r\n\t\t\t\t\t\t// @formatter:on\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn contentValues;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\tfinal TypeAdapter<T> castTypeAdapter = (TypeAdapter<T>) typeAdapter;\r\n\t\t\treturn castTypeAdapter;\r\n\t\t}\r\n\t})\r\n\t.create();\r\n```\r\n\r\n```java\r\nfinal FakeContentValues before = new FakeContentValues();\r\nbefore.put(\"Key 1\", \"Key 1 value\");\r\nbefore.put(\"Key 2\", \"Key 2 value\");\r\nbefore.put(\"Key 3\", \"Key 3 value\");\r\nSystem.out.println(\"before=\" + before);\r\nfinal String json = gson.toJson(before);\r\nSystem.out.println(json);\r\nfinal FakeContentValues after = gson.fromJson(json, FakeContentValues.class);\r\nSystem.out.println(\"after=\" + after);\r\nSystem.out.println(\"equals=\" + before.equals(after));\r\n```\r\n\r\ngives\r\n\r\n```\r\nbefore={mValues={Key 1=Key 1 value, Key 2=Key 2 value, Key 3=Key 3 value}}\r\n{\"Key 1\":\"Key 1 value\",\"Key 2\":\"Key 2 value\",\"Key 3\":\"Key 3 value\"}\r\nafter={mValues={Key 1=Key 1 value, Key 2=Key 2 value, Key 3=Key 3 value}}\r\nequals=true\r\n``` =||= Thanks for the advice.  I'm still curious why their small change broke Gson serialization.  They switched from one class that implements Map to another that also implements Map. =||= Each Android version, starting with 9, tightens hidden API usage.\r\nGson is known as `sun.misc.Unsafe` \"abuser\". It's nice to have private (and even final) fields accessible, but Android doesn't like it.\r\nCheck your logs for `Accessing hidden method` logs. =||= Thanks for the feedback.  I'll close this issue.  I resolved the issue in my app by implementing my own serialization code. =||= ", 0], ["1576", "Prefer writing chars instead of strings of length one", "David Maplesden", "dmap", "09/18/19, 05:33:50 PM", "This results in a noticeable performance improvement with most writer\r\nimplementations (including BufferedWriter).\r\n\r\nThe scale of the improvement obviously depends on the exact data being written but in my test cases the improvement in the performance critical `JsonWriter.string()` method when writing to a writer constructed as \r\n```\r\nfinal Writer writer = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new ByteArrayOutputStream()), \"UTF-8\"), 8192);\r\n```\r\nwas around 12.5%.  Given that the bulk of the time is spent doing the content compression the relative change in the non-compression is much larger... removing the `GZIPOutputStream` from the test makes the improvement around 30%.\r\n\r\nThe reason for the improvement is that the `BufferedWriter` code for writing a single char is much more efficient than the code for writing a string (when that string is length 1).", "I'm not sure exactly why the build failed but it appears to be failing in a similar manner on other branches. =||= Thank you for a simple focused change with a great description and performance numbers! =||= ", ["1576", "Prefer writing chars instead of strings of length one", "David Maplesden", "dmap", "09/18/19, 05:33:50 PM", "This results in a noticeable performance improvement with most writer\nimplementations (including BufferedWriter).\n\nThe scale of the improvement obviously depends on the exact data being written but in my test cases the improvement in the performance critical `JsonWriter.string()` method when writing to a writer constructed as \n```\nfinal Writer writer = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new ByteArrayOutputStream()), \"UTF-8\"), 8192);\n```\nwas around 12.5%.  Given that the bulk of the time is spent doing the content compression the relative change in the non-compression is much larger... removing the `GZIPOutputStream` from the test makes the improvement around 30%.\n\nThe reason for the improvement is that the `BufferedWriter` code for writing a single char is much more efficient than the code for writing a string (when that string is length 1).", "NaN"], ["David Maplesden", "Prefer writing chars instead of strings of length one\n\nThis results in a noticeable performance improvement with most writer\nimplementations (including BufferedWriter).", "09/16/19, 08:08:32 PM", "David Maplesden", "1d559bbc8d7e64884c3ef7f6717141c9f5fc96ba", ["gson/src/main/java/com/google/gson/stream/JsonWriter.java"], "@@ -286,7 +286,7 @@ public final boolean getSerializeNulls() {\n    */\n   public JsonWriter beginArray() throws IOException {\n     writeDeferredName();\n-    return open(EMPTY_ARRAY, \"[\");\n+    return open(EMPTY_ARRAY, '[');\n   }\n \n   /**\n@@ -295,7 +295,7 @@ public JsonWriter beginArray() throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter endArray() throws IOException {\n-    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\");\n+    return close(EMPTY_ARRAY, NONEMPTY_ARRAY, ']');\n   }\n \n   /**\n@@ -306,7 +306,7 @@ public JsonWriter endArray() throws IOException {\n    */\n   public JsonWriter beginObject() throws IOException {\n     writeDeferredName();\n-    return open(EMPTY_OBJECT, \"{\");\n+    return open(EMPTY_OBJECT, '{');\n   }\n \n   /**\n@@ -315,14 +315,14 @@ public JsonWriter beginObject() throws IOException {\n    * @return this writer.\n    */\n   public JsonWriter endObject() throws IOException {\n-    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\");\n+    return close(EMPTY_OBJECT, NONEMPTY_OBJECT, '}');\n   }\n \n   /**\n    * Enters a new scope by appending any necessary whitespace and the given\n    * bracket.\n    */\n-  private JsonWriter open(int empty, String openBracket) throws IOException {\n+  private JsonWriter open(int empty, char openBracket) throws IOException {\n     beforeValue();\n     push(empty);\n     out.write(openBracket);\n@@ -333,7 +333,7 @@ private JsonWriter open(int empty, String openBracket) throws IOException {\n    * Closes the current scope by appending any necessary whitespace and the\n    * given bracket.\n    */\n-  private JsonWriter close(int empty, int nonempty, String closeBracket)\n+  private JsonWriter close(int empty, int nonempty, char closeBracket)\n       throws IOException {\n     int context = peek();\n     if (context != nonempty && context != empty) {\n@@ -562,7 +562,7 @@ public void close() throws IOException {\n \n   private void string(String value) throws IOException {\n     String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\n-    out.write(\"\\\"\");\n+    out.write('\\\"');\n     int last = 0;\n     int length = value.length();\n     for (int i = 0; i < length; i++) {\n@@ -589,15 +589,15 @@ private void string(String value) throws IOException {\n     if (last < length) {\n       out.write(value, last, length - last);\n     }\n-    out.write(\"\\\"\");\n+    out.write('\\\"');\n   }\n \n   private void newline() throws IOException {\n     if (indent == null) {\n       return;\n     }\n \n-    out.write(\"\\n\");\n+    out.write('\\n');\n     for (int i = 1, size = stackSize; i < size; i++) {\n       out.write(indent);\n     }, ", 9, 9, "\"modified, \"", 18], 1], ["1577", "Deprecated `new Gson()`, added `Gson.DEFAULT_GSON`", "Mike", "Miha-x64", "09/18/19, 05:31:52 PM", "There is a popular anti-pattern: `new Gson().fromJson(json, type)`. No need to create new Gson instances as all of them have the same default configuration and work equally.", "We don't like to change Gson api for nice to haves.  =||= ", 0], ["1581", "2.8.6 Build?", null, "zc0nf", "10/05/19, 08:36:02 PM", "Hello,\r\n\r\nIs there a new build in 2.8.6?\r\n\r\nthank you,\r\n\r\nzc0nf", "A jpms 2.86 build would be great. =||= Thx! :D =||= ", 0], ["1585", "Made the build work again with JDK 8", "Inderjeet Singh", "inder123", "10/03/19, 10:08:39 PM", "NaN", "NaN", ["1585", "Made the build work again with JDK 8", "Inderjeet Singh", "inder123", "10/03/19, 10:08:39 PM", "NaN", "NaN"], ["Inderjeet Singh", "Made the build work again with JDK 8", "10/03/19, 10:07:46 PM", "Inderjeet Singh", "4eadc0c6450aa17385a72a5ee2237a09c2d4fd84", ["pom.xml"], "@@ -63,28 +63,14 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n-          <version>3.8.0</version>\n-          <executions>\n-            <execution>\n-              <id>default-compile</id>\n-              <configuration>\n-                <release>9</release>\n-              </configuration>\n-            </execution>\n-            <execution>\n-              <id>base-compile</id>\n-              <goals>\n-                <goal>compile</goal>\n-              </goals>\n-              <configuration>\n-                <excludes>\n-                  <exclude>module-info.java</exclude>\n-                </excludes>\n-              </configuration>\n-            </execution>\n-          </executions>\n+          <version>3.8.1</version>\n           <configuration>\n-            <release>6</release>\n+            <excludes>\n+              <release>6</release>\n+              <exclude>**/module-info.java</exclude>\n+            </excludes>\n+            <source>1.6</source>\n+            <target>1.6</target>\n           </configuration>\n         </plugin>\n         <plugin>, ", 7, 21, "\"modified, \"", 28], 1], ["1586", "restored Java 9 build", "Inderjeet Singh", "inder123", "10/03/19, 11:36:16 PM", "NaN", "NaN", ["1586", "restored Java 9 build", "Inderjeet Singh", "inder123", "10/03/19, 11:36:16 PM", "NaN", "NaN"], ["Inderjeet Singh", "restored Java 9 build", "10/03/19, 11:31:34 PM", "Inderjeet Singh", "7896b66a1f4c60e2d8a1ee1146747cfea1179013", ["pom.xml"], "@@ -64,11 +64,32 @@\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-compiler-plugin</artifactId>\n           <version>3.8.1</version>\n+          <executions>\n+            <execution>\n+              <id>default-compile</id>\n+              <configuration>\n+                <jdkToolchain>\n+                  <version>9</version>\n+                </jdkToolchain>\n+                <release>9</release>\n+              </configuration>\n+            </execution>\n+            <execution>\n+              <id>base-compile</id>\n+              <goals>\n+                <goal>compile</goal>\n+              </goals>\n+              <configuration>\n+                <excludes>\n+                  <exclude>module-info.java</exclude>\n+                </excludes>\n+              </configuration>\n+            </execution>\n+          </executions>\n           <configuration>\n-            <excludes>\n-              <release>6</release>\n-              <exclude>**/module-info.java</exclude>\n-            </excludes>\n+            <jdkToolchain>\n+              <version>[1.5,9)</version>\n+            </jdkToolchain>\n             <source>1.6</source>\n             <target>1.6</target>\n           </configuration>, ", 25, 4, "\"modified, \"", 29], 1], ["1591", "Update CHANGELOG.md", "Alireza Afkar", "alirezaafkar", "10/15/19, 12:01:36 AM", "NaN", "NaN", ["1591", "Update CHANGELOG.md", "Alireza Afkar", "alirezaafkar", "10/15/19, 12:01:36 AM", "NaN", "NaN"], ["Alireza Afkar", "Update CHANGELOG.md", "10/13/19, 07:02:24 AM", "GitHub", "321003a737f36d88805f05df983b16d8276e451b", ["CHANGELOG.md"], "@@ -3,7 +3,7 @@ Change Log\n \n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n- * Added static nethods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`\n+ * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`\n  * Java 9 module-info support\n \n ## Version 2.8.5, ", 1, 1, "\"modified, \"", 2], 1], ["1592", "JsonTreeWriter.put(): IllegalStateException", "jason", "cqjason", "11/25/19, 05:51:01 AM", "After calling JsonTreeWriter.name(null), calling JsonTreeWriter.vule() will cause JsonTreeWriter.put(): IllegalStateException because of internal calling JsonTreeWriter.put(). So why not check if the param of name() is null?  The check is done in super class\uff01", "Can you provide more detail on how to reproduce the issue? =||= public void testNullStringNameInSuperClass() throws IOException {\r\n    StringWriter stringWriter = new StringWriter();\r\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(null);     //throw  java.lang.NullPointerException: name == null\r\n                                           //at com.google.gson.stream.JsonWriter.name(JsonWriter.java:386)\r\n    jsonWriter.value((String) null);\r\n    jsonWriter.endObject();\r\n  }\r\n\r\npublic void testNullStringName() throws IOException {\r\n    JsonWriter jsonWriter = new JsonTreeWriter();\r\n    jsonWriter.beginObject();\r\n    jsonWriter.name(null);\r\n    jsonWriter.value((String) null);//throw java.lang.IllegalStateException\r\n\t//at com.google.gson.internal.bind.JsonTreeWriter.put(JsonTreeWriter.java:89)\r\n\t//at com.google.gson.internal.bind.JsonTreeWriter.nullValue(JsonTreeWriter.java:153)\r\n\t//at com.google.gson.internal.bind.JsonTreeWriter.value(JsonTreeWriter.java:146)\r\n    jsonWriter.endObject();\r\n  }\r\n\r\n       I think it is appropriate behavior that throw NullPointerException when name(null). Because It can help client discover problem early. It has done in super class. But it\u2018s poor that JsonTreeWriter.name() didn't do it when JsonTreeWriter.name() override it in super class. \r\n\r\n =||= (Note: your reply has the response in code ticks, while the code is in normal text formatting - it's switched around for some reason)\r\n\r\nI'll look more at the relevant areas of the code and most likely make a pull request; I agree that it makes sense for the behavior here to be consistent with the superclass unless there is a demonstrable use case in which the inconsistent behavior is necessary. =||= It's fine to fix it and it\u2018s very nice to commit it quickly.  I\u2018ll close the issue for solving. =||= ", 0], ["1594", "Update android.yml", "Tang_wiki", "abc52090241", "03/17/21, 09:55:58 PM", "Add....", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1594) for more info**.\n\n<!-- need_sender_cla --> =||= ", 0], ["1595", "Objects Serialize/Deserialize to null", "Zach", "LastZactionHero", "10/21/19, 06:36:24 PM", "I'm attempting to deserialize JSON with gson, but my output comes out null.\r\n\r\n```\r\nclass Term {\r\n  // Actual documentation uses private, didn't work for me either\r\n  public String uuid;\r\n\r\n  Term() {\r\n  }\r\n\r\n  // Tried with and without setters/getters, but doesn't seem to make a difference\r\n  public void setUuid(String uuid){\r\n    this.uuid = uuid;\r\n  }\r\n  public String getUuid() {\r\n    return this.uuid;\r\n  }\r\n}\r\n\r\nType collectionType = new TypeToken<List<Term>>(){}.getType();\r\nGson gson = new Gson();\r\nString json = \"[{\\\"uuid\\\": \\\"aaaa\\\"}]\";\r\nList<Term> terms = gson.fromJson(json, collectionType);\r\n```\r\n\r\nResulting list is just <[null]>. Expecting some Term objects with uuid set.\r\n\r\nAny thoughts on what I might be doing wrong here? Even the `BagOfPrimitives` examples is serializing to a null string.", "Adding public constructors or accessors, or making fields public won't help unless you make your DTO class `Term` non-local:\r\n\r\n* Gson merely does not support local classes (those that are declared in methods). This also describes why your list is output as `[null]` and not something like `[Term@01234567]`.\r\n* In its simplest configuration `Gson` does not need your DTO classes to have any public constructors since it's able to apply some low-level object instantiation mechanics. Also, by default, Gson doesn't need any accessor methods declared (no getters no setters at all) and doesn't need the fields to be declared non-`private`. Making any of these changes wouldn't affect the object instantiation because it's merely a local class.\r\n\r\nThe following code would work for you:\r\n\r\n```java\r\npublic final class I1595 {\r\n\r\n\tprivate I1595() {}\r\n\r\n\tprivate static final Type listOfTermsType = new TypeToken<List<Term>>(){}.getType();\r\n\tprivate static final Gson gson = new Gson();\r\n\r\n\tpublic static final class Term {\r\n\t\tprivate String uuid;\r\n\t\t@Override public String toString() { return uuid; }\r\n\t}\r\n\r\n\tpublic static void main(final String... args) {\r\n\t\tfinal List<Term> terms = gson.fromJson(\"[{\\\"uuid\\\": \\\"aaaa\\\"}]\", listOfTermsType);\r\n\t\tSystem.out.println(terms);\r\n\t}\r\n\r\n}\r\n```\r\n\r\nproducing `[aaaa]` to stdout. =||= Had the same problem as @LastZactionHero \r\n\r\n> @lyubomyr-shaydariv Gson merely does not support local classes\r\n\r\nThis should be warned about on the README of gson. I literally spent an hour poking through gson's implementation trying to understand why it interpreted\r\n\r\n```java\r\nclass Cat {\r\n    public String name;\r\n}\r\nString json = \"{ \\\"name\\\": \\\"sprinkles\\\" }\";\r\nCat c = g.fromJson(json, Cat.class);\r\n```\r\nas `null`. A very unintuitive limitation. AT LEAST throw an exception so that developers can understand why gson rejects the specified class. =||= @KevinTyrrell\r\nI agree to some extent, but why using anonymous and local classes that are hard to reuse outside statement blocks that declare them if such DTO classes are typically reusable by design? You might suggest/submit a PR making the current documentation at https://github.com/google/gson/blob/master/UserGuide.md#finer-points-with-objects a bit more clear (probably by providing code for \"bad\" and \"good\" scenarios):\r\n\r\n> Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.\r\n =||= That did the trick!\r\n\r\nI was just trying out the sample code in a unit test to see how it worked before implementing it. I'm a bit new to Java, makes sense why it would have trouble with a local class. \r\n\r\nThanks for your help, @lyubomyr-shaydariv  =||= @LastZactionHero \r\nno problem. The reason of why such classes are not supported is that they have implicit references to their outer classes (generated by `javac`) and those classes may be extremely hard to deserialize (if possible). I do believe it dictated the design choice. For example, if you compile the following code:\r\n\r\n```java\r\nclass Outer {\r\n\tOuter() { // constructor, actually a statement block\r\n\t\tclass Inner { } // local class\r\n\t}\r\n}\r\n```\r\n\r\nand run `javap Outer$1Inner.class` to disassemble the inner class, it would reveal the internals:\r\n\r\n```\r\nCompiled from \"test.java\"\r\nclass Outer$1Inner {\r\n  final Outer this$0;\r\n  Outer$1Inner(Outer);\r\n}\r\n```\r\n\r\n`Outer` can be any class that is not designed to be a data-transfer class (a test suite in your case, application-level `I1595` in my case above, etc). Package-level classes and static classes do not have any implicit references making them more safe to deserialize. =||= #1589 =||= ", 0], ["1598", "Not able to use JsonObject as ResponseEntity", "Ivan Kaloyanov", "IvanKaloyanov", "11/02/19, 10:26:50 AM", "I've used ResponseEntity<JsonObject> for one of the endpoints and noticed a strange behavior. Even though the logic was executed properly and no exception occurs, every time I requested the resource I get a status 500 response.\r\n\r\nAfter that, I've created a dummy endpoint for testing and realized that the reason for this 500 result is using JsonObject for the ResponseEntity. \r\n```\r\n    @GetMapping\r\n    public ResponseEntity<JsonObject> status() {\r\n        JsonObject test = new JsonObject();\r\n        test.addProperty(\"key\",\"value\");\r\n        return ResponseEntity.ok(test);\r\n    }\r\n```\r\n\r\nWhat's the reason for this behavior? The object is not able to be serialized properly or it's something completely different?\r\n\r\nP.S. I am using Gson v2.8.5 and Spring Boot v2.1.1", "Spring Boot must log 5xx errors by default. What exception log entries are you getting + are you using Gson message converter instead of the default one that's built on top of Jackson? =||= Hi, @lyubomyr-shaydariv I am using the standard Gson JsonObject. The interesting part is that I do not see any exception being logged or even thrown and even though I am starting the service on a port and excess it directly referring to the port seems to me that there is some 3rd party involved because I tried it on a completely isolated environment and it was working fine. \r\n\r\nStill the rest of the JSON Libraries I've tried worked fine and even though I've managed to solve it for myself I am really interested in what's actually causing this. I am attaching 3 screenshots with status 200 using a string literal and status 500 using Gson JsonObject.\r\n![1](https://user-images.githubusercontent.com/16307530/67506396-a88ec680-f695-11e9-94f0-f2eb1e0d629f.png)\r\n![2](https://user-images.githubusercontent.com/16307530/67506397-a88ec680-f695-11e9-9c20-aa00398f8b78.png)\r\n![3](https://user-images.githubusercontent.com/16307530/67506398-a88ec680-f695-11e9-850a-7b0d0b0f0305.png)\r\n\r\nAny recommendations on how can I troubleshoot it efficiently?\r\n\r\nThanks!  =||= @IvanKaloyanov \r\nNo idea, but I guess you have your Spring Boot instance configured improperly missing `GsonHttpMessageConverter` (I meant this class above). As far as I remember how Spring MVC work, its default JSON message converter is Jackson-oriented (instance of `AbstractJackson2HttpMessageConverter`). I don't have a test Spring Boot application right at me, but having the controller method like you mentioned in the screenshot gives HTTP 500 for my Spring MVC-based test I have in my project after adding Gson and the exact controller method. It gets working properly with HTTP 200 by adding `GsonHttpMessageConverter` to the message converters registry in my tests:\r\n\r\n```java\r\nfinal MockMvc mockMvc = MockMvcBuilders\r\n\t.standaloneSetup(...)\r\n\t.setControllerAdvice(...)\r\n\t// default\r\n\t.setMessageConverters(new MappingJackson2HttpMessageConverter(objectMapper))\r\n\t// new\r\n\t.setMessageConverters(new GsonHttpMessageConverter())\r\n\t.build();\r\n\r\n```\r\n\r\nI believe it would work for you once you do the same in your MVC configuration (not mocks in tests like mine):\r\n\r\n```java\r\n@Configuration\r\n@EnableWebMvc\r\npublic class MvcConfiguration\r\n\t\textends WebMvcConfigurerAdapter {\r\n\r\n\t...\r\n\r\n\t@Override\r\n\tpublic void configureMessageConverters(final List<HttpMessageConverter<?>> converters) {\r\n\t\t...\r\n\t\tconverters.add(new GsonHttpMessageConverter());\r\n\t\t...\r\n\t}\r\n\r\n\t...\r\n\r\n}\r\n``` =||= ", 0], ["1601", "OSGi metadata on 2.8.6 requires Java 9 or greater", "Brian de Alwis", "briandealwis", "11/04/19, 11:37:46 PM", "gson 2.8.6's `MANIFEST.MF` includes the following line:\r\n```\r\nRequire-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=9.0))\"\r\n```\r\n\r\nAnd so it requires Java 9 (or greater, as `osgi.ee` is typically populated with all lesser versions too) and so refuses to install on Java 8 (or below).", "2.8.5's `MANIFEST.MF` has:\r\n```\r\nRequire-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"\r\n``` =||= ", 0], ["1602", "Gson OSGi metadata claims support for JavaSE-1.5 but target generation is 1.6", "Brian de Alwis", "briandealwis", "11/08/19, 11:21:08 PM", "Although the OSGi metadata claims Gson will work with Java 1.5 or greater:\r\nhttps://github.com/google/gson/blob/47b28d99a17d492b37fcdd0fc41290419a010a0f/gson/bnd.bnd#L6\r\n\r\nthe compilation configuration sets the target as 1.5 and the classes themselves are Java 1.6:\r\nhttps://github.com/google/gson/blob/47b28d99a17d492b37fcdd0fc41290419a010a0f/pom.xml#L89-L95\r\n\r\n```sh\r\n$ file gson/target/classes/com/google/gson/Gson.class\r\ngson/target/classes/com/google/gson/Gson.class:                       compiled Java class data, version 50.0 (Java 1.6)\r\n```\r\n\r\nAnd that looks to have been a decision made a while ago #790.", "fixed by #1603 =||= Please close this. =||= ", 0], ["1603", "Fix OSGi metadata generation to work on JavaSE < 9", "Brian de Alwis", "briandealwis", "11/04/19, 11:37:47 PM", "Fixes #1601 #1602\r\n\r\n  - explicitly specifies `Require-Capability: osgi.ee` for 1.6 or greater to disable `bnd`'s autogeneration which is deceived by the `module-info.class` file\r\n  - drop the JavaSE 1.5 reference since it hasn't been true for years (#790)\r\n  - remove the unused `org.apache.felix:maven-bundle-plugin` plugin reference\r\n\r\nHere are the differences in the resulting manifests:\r\n```diff\r\n--- gson-manifest-2.8.6\t2019-10-31 12:24:51.000000000 -0400\r\n+++ gson-manifest-2.8.7-SNAPSHOT\t2019-10-31 11:49:39.000000000 -0400\r\n@@ -1,23 +1,22 @@\r\n Manifest-Version: 1.0\r\n Archiver-Version: Plexus Archiver\r\n-Created-By: 11.0.4 (Oracle Corporation)\r\n-Built-By: inder\r\n+Created-By: 11.0.4 (AdoptOpenJDK)\r\n+Built-By: bsd\r\n Build-Jdk: 11.0.4\r\n-Bnd-LastModified: 1570215293550\r\n+Bnd-LastModified: 1572539070059\r\n Bundle-ContactAddress: https://github.com/google/gson\r\n Bundle-Description: Gson JSON library\r\n Bundle-ManifestVersion: 2\r\n Bundle-Name: Gson\r\n-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, J\r\n- avaSE-1.8\r\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\r\n Bundle-SymbolicName: com.google.gson\r\n Bundle-Vendor: Google Gson Project\r\n-Bundle-Version: 2.8.6\r\n+Bundle-Version: 2.8.7.201910311624\r\n Export-Package: com.google.gson;uses:=\"com.google.gson.reflect,com.googl\r\n- e.gson.stream\";version=\"2.8.6\",com.google.gson.annotations;version=\"2.8\r\n- .6\",com.google.gson.reflect;version=\"2.8.6\",com.google.gson.stream;vers\r\n- ion=\"2.8.6\"\r\n+ e.gson.stream\";version=\"2.8.7\",com.google.gson.annotations;version=\"2.8\r\n+ .7\",com.google.gson.reflect;version=\"2.8.7\",com.google.gson.stream;vers\r\n+ ion=\"2.8.7\"\r\n Import-Package: com.google.gson.annotations\r\n-Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=9.0))\"\r\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"\r\n Tool: Bnd-4.0.0.201805111645\r\n \r\n```", "Oh! I didn\u2019t receive an email from Travis so I assumed it had passed :-( =||= https://github.com/google/gson/issues/1605 =||= ", ["1603", "Fix OSGi metadata generation to work on JavaSE < 9", "Brian de Alwis", "briandealwis", "11/04/19, 11:37:47 PM", "Fixes #1601 #1602\n\n  - explicitly specifies `Require-Capability: osgi.ee` for 1.6 or greater to disable `bnd`'s autogeneration which is deceived by the `module-info.class` file\n  - drop the JavaSE 1.5 reference since it hasn't been true for years (#790)\n  - remove the unused `org.apache.felix:maven-bundle-plugin` plugin reference\n\nHere are the differences in the resulting manifests:\n```diff\n--- gson-manifest-2.8.6\t2019-10-31 12:24:51.000000000 -0400\n+++ gson-manifest-2.8.7-SNAPSHOT\t2019-10-31 11:49:39.000000000 -0400\n@@ -1,23 +1,22 @@\n Manifest-Version: 1.0\n Archiver-Version: Plexus Archiver\n-Created-By: 11.0.4 (Oracle Corporation)\n-Built-By: inder\n+Created-By: 11.0.4 (AdoptOpenJDK)\n+Built-By: bsd\n Build-Jdk: 11.0.4\n-Bnd-LastModified: 1570215293550\n+Bnd-LastModified: 1572539070059\n Bundle-ContactAddress: https://github.com/google/gson\n Bundle-Description: Gson JSON library\n Bundle-ManifestVersion: 2\n Bundle-Name: Gson\n-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, J\n- avaSE-1.8\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n Bundle-SymbolicName: com.google.gson\n Bundle-Vendor: Google Gson Project\n-Bundle-Version: 2.8.6\n+Bundle-Version: 2.8.7.201910311624\n Export-Package: com.google.gson;uses:=\"com.google.gson.reflect,com.googl\n- e.gson.stream\";version=\"2.8.6\",com.google.gson.annotations;version=\"2.8\n- .6\",com.google.gson.reflect;version=\"2.8.6\",com.google.gson.stream;vers\n- ion=\"2.8.6\"\n+ e.gson.stream\";version=\"2.8.7\",com.google.gson.annotations;version=\"2.8\n+ .7\",com.google.gson.reflect;version=\"2.8.7\",com.google.gson.stream;vers\n+ ion=\"2.8.7\"\n Import-Package: com.google.gson.annotations\n-Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=9.0))\"\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"\n Tool: Bnd-4.0.0.201805111645\n \n```", "NaN"], ["Brian de Alwis", "Drop JavaSE-1.5 since that boat sailed a long time ago", "10/31/19, 04:18:50 PM", "Brian de Alwis", "186846ffcffee4115e431054f932800b9174b902", ["gson/bnd.bnd"], "@@ -3,8 +3,8 @@ Bundle-Name: ${project.name}\n Bundle-Description: ${project.description}\n Bundle-Vendor: Google Gson Project\n Bundle-ContactAddress: ${project.parent.url}\n-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n-Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.5))\"\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.6))\"\n \n -removeheaders: Private-Package\n , ", 2, 2, "\"modified, \"", 4], 1], ["1606", "Fix Travis CI", null, "Marcono1234", "11/05/19, 06:29:12 PM", "# Description\r\nTravis CI fails for all builds. The relevant Travis log part is probably:\r\n```\r\nopenjdk version \"9.0.4\"\r\nOpenJDK Runtime Environment (build 9.0.4+11)\r\nOpenJDK 64-Bit Server VM (build 9.0.4+11, mixed mode)\r\n$ javac -J-Xmx32m -version\r\njavac 9.0.4\r\n3.54s$ mvn -f gson install -DskipTests=true\r\n[INFO] Scanning for projects...\r\nDownloading from google-maven-central: https://maven-central.storage-download.googleapis.com/repos/central/data/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\r\nDownloading from sonatype: https://oss.sonatype.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\r\nDownloading from sonatype-apache: https://repository.apache.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\r\n[ERROR] [ERROR] Some problems were encountered while processing the POMs:\r\n[FATAL] Non-resolvable parent POM for com.google.code.gson:gson-parent:2.8.6-SNAPSHOT: Could not transfer artifact org.sonatype.oss:oss-parent:pom:7 from/to google-maven-central (https://maven-central.storage-download.googleapis.com/repos/central/data/): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target and 'parent.relativePath' points at wrong local POM @ com.google.code.gson:gson-parent:2.8.6-SNAPSHOT, /home/travis/build/google/gson/pom.xml, line 6, column 11\r\n```\r\n\r\nIt appears it tries all configured repositories and then fails:\r\n1. maven-central.storage-download.googleapis.com\r\n2. oss.sonatype.org (this just redirects to central!)\r\n3. repository.apache.org\r\n\r\nIt looks like Maven mixes the exception messages, but the actual problem is:\r\n> sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\r\n\r\nIf we now compare the last [successful build](https://travis-ci.org/google/gson/jobs/541365646) with the [first known failing](https://travis-ci.org/google/gson/jobs/583845328) (there might have been earlier ones through pull requests, but Travis does not show them), we will see:\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Successful</th>\r\n            <th>Failed</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n<pre>\r\njava version \"9.0.1\"\r\nJava(TM) SE Runtime Environment (build 9.0.1+11)\r\n</pre>\r\n            </td>\r\n            <td>\r\n<pre>\r\nopenjdk version \"9.0.4\"\r\nOpenJDK Runtime Environment (build 9.0.4+11)\r\n</pre>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\nAnd indeed there is [JDK-8189357](https://bugs.openjdk.java.net/browse/JDK-8189357) which describes that the `cacerts` file for OpenJDK is empty.  \r\nTo fix this a different truststore has to be specified, the certificates have to be imported, or you could switch to OpenJDK > 9 (see JEP [319](https://openjdk.java.net/jeps/319)), e.g. 11 which runs the build successfully as well and is also LTS.", "Thanks. Can you send a PR that fixes the issue?  =||= Done, see #1607, that seems to fix the problem =||= ", 0], ["1607", "Use OpenJDK 11 for Travis CI", null, "Marcono1234", "11/05/19, 06:29:12 PM", "Fixes #1606 (?)", "NaN", ["1607", "Use OpenJDK 11 for Travis CI", null, "Marcono1234", "11/05/19, 06:29:12 PM", "Fixes #1606 (?)", "NaN"], ["Marcono1234", "Use OpenJDK 11 for Travis CI\n\nFixes #1606 (?)", "11/05/19, 06:11:09 PM", "Marcono1234", "128a3a8f3635c4fded414e19192b6edee8efd207", [".travis.yml"], "@@ -1,7 +1,7 @@\n language: java\n \n jdk:\n-  - oraclejdk9\n+  - openjdk11\n \n install: mvn -f gson install -DskipTests=true\n script: mvn -f gson test, ", 1, 1, "\"modified, \"", 2], 1], ["1608", "Java 9 Requirement in GSON Library", "Amit Kumar Mondal", "amitjoy", "11/08/19, 11:16:04 PM", "The newest version 2.8.6 comprises the following in its MANIFEST.MF\r\n\r\n`Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=9.0))\"`\r\n\r\nThis prevents the bundle to be installed in Java 8 execution environment. Is there really any Java 9 dependency in this version at all? I hope not since the patch version is only bumped up and the 2.8.5 version is compatible with Java 8.", "Yes, this is a bug that we will fix soon. Can you test the latest snapshot to see if the issue is gone? =||= This is a dupe of #1601. It's fixed at head. When is the next release with this fix scheduled? =||= @inder123 I just noticed. It has already been fixed. =||= #1601 (and this one as a dup) fixed by #1603. Please close this. =||= Can we please get a new release to fix this?  Pretty please?  Before Christmas? =||= ", 0], ["1610", "JsonPrimitive: considers LazilyParsedNumbers with integral values as integral when computing hashCode.", null, "pterry26", "11/09/19, 08:32:06 PM", "This fixes the bug described in https://github.com/google/gson/issues/992 where two JsonPrimitives could be equal but have different hashCodes.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.\n\n<!-- need_author_cla --> =||= @googlebot I fixed it! =||= \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.\n\n<!-- need_sender_cla --> =||= ", 0], ["1611", "JsonPrimitive: considers integral LazilyParsedNumber as integral when evaluating hashCode", null, "pterry26", "11/09/19, 09:00:00 PM", "This fixes the bug described in https://github.com/google/gson/issues/992 where two JsonPrimitives could equal each other but have different hashCodes.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1611) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I fixed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1611) for more info**.\n\n<!-- need_author_cla --> =||= pht5 is me; I can't sign the CLA for both accounts =||= Fixed my issue before that was resulting in the commit being made under the wrong account; closing this and opening a new PR =||= ", 0], ["1613", "targetSdkVersion 29 does not serialize Location objects properly", "y20k", "y20k", "11/11/19, 09:04:25 AM", "I observed a problem when I updated from `targetSdkVersion 27` to `targetSdkVersion 29` in a project. GSON failes to serialize a Location object when using `targetSdkVersion 29`.\r\n\r\n### Location JSON string produced with targetSdkVersion 27\r\n`\"location\":{\"mAltitude\":0.0,\"mBearing\":0.0,\"mBearingAccuracyDegrees\":0.0,\"mElapsedRealtimeNanos\":33676559450037,\"mHorizontalAccuracyMeters\":20.0,\"mLatitude\":38.06770166666667,\"mLongitude\":-122.58285666666667,\"mProvider\":\"gps\",\"mSpeed\":0.0,\"mSpeedAccuracyMetersPerSecond\":0.0,\"mTime\":1573423211000,\"mVerticalAccuracyMeters\":0.0}`\r\n\r\n### Location JSON string produced with targetSdkVersion 29\r\n`\"location\":{\"mElapsedRealtimeNanos\":33918570517227}`\r\n\r\nOnly `mElapsedRealtimeNanos` get serialized when using `29`. Location implements `@Parcelable` as far as I know. I am using the following code to handle de/serialization:\r\n\r\n```\r\ndata class WayPoint(var location: Location = Location(LocationManager.GPS_PROVIDER)): Parcelable {\r\n\r\n    constructor(parcel: Parcel) : this(parcel.readParcelable(Location::class.java.classLoader) ?: Location(LocationManager.GPS_PROVIDER)) {\r\n    }\r\n\r\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\r\n        parcel.writeParcelable(location, flags)\r\n    }\r\n\r\n    override fun describeContents(): Int {\r\n        return 0\r\n    }\r\n\r\n    companion object CREATOR : Parcelable.Creator<WayPoint> {\r\n        override fun createFromParcel(parcel: Parcel): WayPoint {\r\n            return WayPoint(parcel)\r\n        }\r\n\r\n        override fun newArray(size: Int): Array<WayPoint?> {\r\n            return arrayOfNulls(size)\r\n        }\r\n    }\r\n}\r\n```", "You should not serialize/deserialize classes you don't control over. See a similar issue: #1573  =||= Thanks for the quick answer. I will copy over the values from the Location object to my own WayPoint class. That should result in a shorter JSON string as a side effect. =||= ", 0], ["1614", "support strings empty return null", "chenyicheng", "thinking-github", "11/13/19, 12:36:52 PM", "support strings empty return null", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1614) for more info**.\n\n<!-- need_sender_cla --> =||= ", 0], ["1615", "support strings empty return null", "chenyicheng", "thinking-github", "11/13/19, 12:54:05 PM", "support strings empty return null ", "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1615) for more info**.\n\n<!-- need_author_cla --> =||= ", 0], ["1618", "Add asList()", null, "vulkman", "11/15/19, 02:54:22 PM", "I'd love to have direct access to the element list so I don't have to convert the iterator to something that supports the Java 8 Stream API", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1618) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1618) for more info**.\n\n<!-- need_author_cla --> =||= ", 0], ["1620", "Fixing issue #1592", "Matthew Lee", "fmmmlee", "11/26/19, 09:05:48 PM", "As cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.\r\n\r\nTo resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java).\r\n\r\nEdit: I had made a few style changes to the design document on this fork, but reverted them in order to keep the changes issue-related.", "Would it be possible to force push only 49280df or squash the commits? I assume the maintainers here would like to not include commits which are then reverted in a later commit. =||= I believe maintainers have the option to squash when merging a pull request, so it only shows up as a single commit. I don't think they can be squashed before merging, though; only when performing the merge.\r\n\r\nEdit: Closed issue and opened #1623 that only has the relevant commit. =||= ", 0], ["1623", "Fixing issue #1592", "Matthew Lee", "fmmmlee", "03/02/20, 10:57:43 PM", "Condensed #1620. \r\n\r\nAs cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.\r\n\r\nTo resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java).", "NaN", ["1623", "Fixing issue #1592", "Matthew Lee", "fmmmlee", "03/02/20, 10:57:43 PM", "Condensed #1620. \n\nAs cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.\n\nTo resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java).", "NaN"], ["Matthew Lee", "Fixing https://github.com/google/gson/issues/1592\n\nadding null parameter check to name(), fixing the issue and being consistent with superclass behavior", "11/26/19, 08:54:50 PM", "GitHub", "e84396336d75868547fe71875b637be58b89b813", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"], "@@ -130,6 +130,9 @@ private void put(JsonElement value) {\n   }\n \n   @Override public JsonWriter name(String name) throws IOException {\n+    if (name == null) {\n+      throw new NullPointerException(\"name == null\");\n+    }\n     if (stack.isEmpty() || pendingName != null) {\n       throw new IllegalStateException();\n     }, ", 3, 0, "\"modified, \"", 3], 1], ["1628", "Date.class   registerTypeAdapter ", null, "huomingbo9527", "12/06/19, 03:04:55 AM", "Parsing Date is not accurate \r\n\r\n \r\n        DateFormat formatterUtc = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\",Locale.getDefault());\r\n        formatterUtc.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n\r\n        @SuppressLint(\"SimpleDateFormat\") SimpleDateFormat  formatterCommon = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n\r\n           gsonBuilder.registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> {\r\n            String asString = json.getAsString();\r\n            try {\r\n                return formatterUtc.parse(asString);\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n                try {\r\n                    return formatterCommon.parse(asString);\r\n                } catch (ParseException e1) {\r\n                    e1.printStackTrace();\r\n                }\r\n            }\r\n            return new Date();\r\n        });\r\n\r\nuse Retrofit ,Parsing Date is not accurate\r\nWhen the app started to request a large amount of data, there was an error in the timing of some data\r\nfor example:\r\n1123-05-04 ------  Fri May 04 14:25:57 GMT+08:00 1123 \r\n0024-11-07 ------ Tue Nov 07 10:53:14 GMT+08:00 24 \r\n\r\nIt is ok when a small amount of data is requested\uff0c\r\nbut I only set gsonBuilder.setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS\")   is right\r\n\r", "NaN", 0], ["1629", "Remove support for java.sql types", "dernasherbrezon", "dernasherbrezon", "08/25/21, 06:26:59 PM", "The original idea #134 was OK in 2015. Since then, Java got modular support and java.sql is no longer available by default. This is causing sporadic issues in random places: \r\n\r\n- https://github.com/google/gson/issues/134#issuecomment-410848727 \r\n- [java.lang.ClassNotFoundException: java.sql.Time](https://travis-ci.org/dernasherbrezon/jsp-openapi/builds/620333411)\r\n- [stackoverflow](https://stackoverflow.com/search?q=gson+java.sql)\r\n- [gson pom.xml](https://github.com/google/gson/blob/master/pom.xml#L84)\r\n\r\nWould be great to deprecate support for java.sql and suggest writing type adapters instead.", "https://github.com/google/gson/blob/1a9469a8c5aa31deacd36b3d15347f873ce7e889/gson/src/main/java/module-info.java#L11\r\n\r\nWould have to be changed as well, right? =||= I am not as familiar with Java 10+ (as have stayed mostly with Android). So, if someone was willing to write a PR that maintains full backward compatibilty, I will take a look. =||= Lol, it can't be backward compatible because of \"Remove support\". =||= I think it can be backwards compatible by using an optional module dependency (`requires static`) and then not trying to load any SQL classes if they are not present.\r\nI have a local branch which should hopefully solve this, but I am not confident enough in it, so it will take a few days before I will create a pull request. =||= Wonderful! \r\nPlease write some tests as well. Backward compatibility is paramount for Gson as lots and lots of projects depend on it. =||= Created #1707 now. Though I am not that familiar with the module system so any feedback is appreciated! =||= ", 0], ["1638", "Add new testcases", "Jiechuan Chen", "Omega-Ariston", "02/17/20, 10:55:19 PM", "Improved testcases for JsonPrimitive and JsonTreeWriter\r\nAdded testcases for ISO8601Utils", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1638) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1638) for more info**.\n\n<!-- ok --> =||= ", ["1638", "Add new testcases", "Jiechuan Chen", "Omega-Ariston", "02/17/20, 10:55:19 PM", "Improved testcases for JsonPrimitive and JsonTreeWriter\nAdded testcases for ISO8601Utils", "NaN"], ["Omega-Ariston", "Add Tests for ISO8601Utils", "01/03/20, 02:57:58 AM", "Omega-Ariston", "69b334d2a4847210436831f6373b72799fa67e1c", ["gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"], "@@ -98,4 +98,4 @@ public void testDateParseInvalidTime() throws ParseException {\n             Locale.setDefault(defaultLocale);\n         }\n     }\n-}\n\\ No newline at end of file\n+}, ", 1, 1, "\"modified, \"", 2], 1], ["1639", "gson don't support parse Anonymous-Class-Object", "\u901d\u516e\u8bda", "lusson-luo", "01/19/20, 03:40:13 AM", "if i create a Anonymous-Class object, gson can't parse it, will set null value.\r\nI create object like this way\u3002\r\n```\r\nnew List() {\r\n  {\r\n    add(new Filter() {\r\n      {\r\n        setName(\"\");\r\n        setCode(\"dd\")\r\n      }\r\n    });\r\n    add(new Filter() {\r\n      {\r\n        setName(\"\");\r\n        setCode(\"dd\")\r\n      }\r\n    });\r\n  }\r\n}\r\n```\r\n\r\nand gson parse like that\r\n```\r\n'filter':[\r\n    \tnull,\r\n    \tnull\r\n    ]\r\n```", "u should read the front page about how to due with non static inner class =||= i search issue for inner class and find many same issues\uff0cand the answer is gson will not support to this, cause by gson design boundary? #298 \r\nthere are other issues about serialize anonymous object, and the answers are will not support:\r\n#1510 \r\n#717\r\ncause of here is open issue #1510 ,so i close mine. =||= ", 0], ["1640", "Add isEmpty method to JsonArray class", "Gabriel Basilio Brito", "GabrielBB", "03/02/20, 10:52:38 PM", "The method returns true if the array is empty", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1640) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1640) for more info**.\n\n<!-- ok --> =||= ", ["1640", "Add isEmpty method to JsonArray class", "Gabriel Basilio Brito", "GabrielBB", "03/02/20, 10:52:38 PM", "The method returns true if the array is empty", "NaN"], ["Gabriel Basilio Brito", "Add isEmpty method to JsonArray class\n\nThe method will return true if the array is empty and false if it's not", "01/14/20, 05:47:23 AM", "GitHub", "720497121d39fe165fd9917e52c0a4d568f27a16", ["gson/src/main/java/com/google/gson/JsonArray.java"], "@@ -171,6 +171,15 @@ public boolean contains(JsonElement element) {\n   public int size() {\n     return elements.size();\n   }\n+  \n+  /**\n+   * Returns true if the array is empty\n+   *\n+   * @return true if the array is empty\n+   */\n+  public boolean isEmpty() {\n+    return elements.isEmpty();\n+  }\n \n   /**\n    * Returns an iterator to navigate the elements of the array. Since the array is an ordered list,, ", 9, 0, "\"modified, \"", 9], 1], ["1643", "infinite recursion of adapters", null, "igoryan17", "01/24/20, 11:48:37 AM", "I use 2.8.6 version. And firstly i created custom adapters and get StackOverflowError. Then i commented all my custom adapters in GsonBuilder and got following stack trace:\r\n`java.lang.StackOverflowError\r\n\tat java.io.StringWriter.append(StringWriter.java:143)\r\n\tat java.io.StringWriter.append(StringWriter.java:41)\r\n\tat com.google.gson.stream.JsonWriter.beforeValue(JsonWriter.java:650)\r\n\tat com.google.gson.stream.JsonWriter.value(JsonWriter.java:417)\r\n\tat com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(TypeAdapters.java:804)\r\n\tat com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(TypeAdapters.java:773)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97)\r\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61)\r\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\r\n`\r\nI'm stupid or it's bug?", "The reason that i try serialise class with circular reference.\r\nclass A {\r\nA a;\r\n}  =||= I had infinite circular references =||= I might have the same problem; will let you know when I finish counting. =||= ", 0], ["1644", "com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].sign", "NatsuHana", "StarWishsama", "06/17/20, 02:48:03 PM", "Original json: https://api.vtbs.moe/v1/info\r\n\r\nStack trace:\r\n\r\n> com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].sign\r\n        at com.google.gson.Gson.fromJson(Gson.java:947)\r\n        at com.google.gson.Gson.fromJson(Gson.java:897)\r\n        at com.google.gson.Gson.fromJson(Gson.java:846)\r\n        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLivers(Live\r\nUtils.java:27)\r\n        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLiverList(L\r\niveUtils.java:42)\r\n        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLiver(LiveU\r\ntils.java:34)\r\n        at io.github.starwishsama.namelessbot.commands.DebugCommand.groupMessage\r\n(DebugCommand.java:59)\r\n        at cc.moecraft.icq.command.CommandManager.runCommand(CommandManager.java\r\n:130)\r\n        at cc.moecraft.icq.command.CommandListener$CommandRunnable.run(CommandLi\r\nstener.java:80)\r\n        at java.lang.Thread.run(Unknown Source)\r\nCaused by: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].sign\r\n        at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1564)\r\n        at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:492)\r\n        at com.google.gson.stream.JsonReader.hasNext(JsonReader.java:415)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.re\r\nad(ReflectiveTypeAdapterFactory.java:216)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(Type\r\nAdapterRuntimeTypeWrapper.java:41)\r\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.re\r\nad(CollectionTypeAdapterFactory.java:82)\r\n        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.re\r\nad(CollectionTypeAdapterFactory.java:61)\r\n        at com.google.gson.Gson.fromJson(Gson.java:932)\r\n        ... 9 more\r\n\r\nCode:\r\n`    \r\nprivate static Gson gson = new GsonBuilder().setLenient().create();\r\n\r\n    public static List<BiliLiver> getBiliLivers() throws IOException {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(BotConstants.cfg.getLiveApi()).openConnection();\r\n        conn.connect();\r\n        if (conn.getResponseCode() == HttpURLConnection.HTTP_OK){\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\r\n            return gson.fromJson(br.readLine().trim(), new TypeToken<List<BiliLiver>>(){}.getType());\r\n        }\r\n        conn.disconnect();\r\n        return new ArrayList<>();\r\n    }`\r\n\r\nBeans:\r\nBiliLiver.java \r\n` \r\n@Data\r\npublic class BiliLiver {\r\n    public int mid;\r\n    public String uuid;\r\n    public String uname;\r\n    public int video;\r\n    public int roomid;\r\n    public String sign;\r\n    @SerializedName(\"notice\")\r\n    public String announcement;\r\n    @SerializedName(\"face\")\r\n    public String faceImgLink;\r\n    public int rise;\r\n    public String topPhoto;\r\n    public int archiveView;\r\n    public int follower;\r\n    public int liveStatus;\r\n    @SerializedName(\"recordNum\")\r\n    public int recordNumber;\r\n    @SerializedName(\"guardNum\")\r\n    public int guardNumber;\r\n    public LastLive lastLive;\r\n    public int guardChange;\r\n    public List<Integer> guardType;\r\n    public int areaRank;\r\n    public int online;\r\n    @SerializedName(\"title\")\r\n    public String liveTitle;\r\n    public long time;\r\n\r\n    public boolean isStreaming(){\r\n        return getLiveStatus() == 1;\r\n    }\r\n}`\r\nLastLive.java:\r\n`\r\n@Data\r\npublic class LastLive {\r\n    public int online;\r\n    public long time;\r\n}`", "Could be that there are some escaped quotes or similar escapable characters in the string return by 'path $[27].sign' of your JSON, which fails on serializing attempt. You will need to sanitize this on the serverside response. This is the only clean and sustainable way. =||= ", 0], ["1645", "System-dependent line separator when generate json", "Ivan Miatselski", "ALEUT", "01/28/20, 10:25:53 PM", "Currently `newline` method in `JsonWriter` looks like\r\n```\r\nprivate void newline() throws IOException {\r\n    if (indent == null) {\r\n      return;\r\n    }\r\n\r\n    out.write('\\n');\r\n    for (int i = 1, size = stackSize; i < size; i++) {\r\n      out.write(indent);\r\n    }\r\n  }\r\n```\r\n\r\nAs we can see it just prints \\n for new line. As result for Windows we have jsons with LF line ends (UNIX standard) instead of standard CRLF for Windows.\r\n\r\nAs an option to have `out.write(System.lineSeparator());` (it will have LF for UNIX and CRLF for Windows) or even have an option what to use as separator.", "The problem with your proposal is that Gson will output different JSON depending on the machine it ran on.  We opted for consistency of the response. =||= @inder123 JSON will be the same, just the correct line-endings will be used. Btw, Jackson generated JSON correctly using system-defined line separators. =||= ", 0], ["1646", "Same @SerializedName for differents variable", "BROGGI Thomas", "Skiizoo", "03/05/20, 10:24:11 AM", "Hi,\r\n\r\ni wanted to know if there is a way to get this working :\r\n\r\n\"@SerializedName(value=\"value1\", alternate=\"value3\")\r\npublic String var1;\r\n\t\r\n@SerializedName(value=\"value2\", alternate=\"value3\")\r\npublic String var2;\"\r\n\r\nI'm using two services\r\n- The first one is giving me value1 & value2\r\n- The second one is only giving me value3 so i wanted to match this value for both of my variable\r\n\r\n\r\nThanks", "Not sure if you can solve this using `@SerializedName`, but you can write your own `TypeAdapter`:\r\n```\r\nimport java.io.IOException;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.google.gson.TypeAdapter;\r\nimport com.google.gson.stream.JsonReader;\r\nimport com.google.gson.stream.JsonWriter;\r\n\r\npublic class GsonTest {\r\n    public static class Test {\r\n        String var1;\r\n        String var2;\r\n    }\r\n    \r\n    static class MyAdapter extends TypeAdapter<Test> {\r\n        public static final TypeAdapter<Test> INSTANCE = new MyAdapter().nullSafe();\r\n        \r\n        private MyAdapter() { }\r\n        \r\n        @Override\r\n        public Test read(JsonReader in) throws IOException {\r\n            Test t = new Test();\r\n            \r\n            in.beginObject();\r\n            while (in.hasNext()) {\r\n                String name = in.nextName();\r\n                \r\n                if (name.equals(\"value1\")) {\r\n                    t.var1 = in.nextString();\r\n                } else if (name.equals(\"value2\")) {\r\n                    t.var2 = in.nextString();\r\n                } else if (name.equals(\"value3\")) {\r\n                    t.var1 = t.var2 = in.nextString();\r\n                } else {\r\n                    // Only needed if there are more entries in the JSON and you are \r\n                    // not interested in them\r\n                    in.skipValue();\r\n                }\r\n            }\r\n            in.endObject();\r\n            \r\n            // Maybe validate first that properties existed in JSON and if not throw exception\r\n            return t;\r\n        }\r\n        \r\n        @Override\r\n        public void write(JsonWriter out, Test value) throws IOException {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        Gson gson = new GsonBuilder()\r\n            // Register your custom type adapter\r\n            .registerTypeAdapter(Test.class, MyAdapter.INSTANCE)\r\n            .create();\r\n        \r\n        Test t = gson.fromJson(\"{\\\"value1\\\":\\\"a\\\",\\\"value2\\\":\\\"b\\\"}\", Test.class);\r\n        System.out.println(t.var1 + \", \" + t.var2);\r\n        \r\n        Test t2 = gson.fromJson(\"{\\\"value3\\\":\\\"a\\\"}\", Test.class);\r\n        System.out.println(t2.var1 + \", \" + t2.var2);\r\n    }\r\n}\r\n``` =||= ", 0], ["1648", "Official Gradle Wrapper Validation Action", "Jonathan Leitschuh", "JLLeitschuh", "02/05/20, 11:11:44 PM", "See: https://github.com/gradle/wrapper-validation-action", "Thanks for the PR. Please add some information to indicate that this works. =||= > Please add some information to indicate that this works.\r\n\r\nThat's not how this works, you'll need to merge this first. You should, from then on, see the status check on all PR's. I've tested this exact action workflow on many repositories and have proved it works (including against other Google projects). =||= Example:\r\nhttps://github.com/google/flexbox-layout/pull/531 =||= ", ["1648", "Official Gradle Wrapper Validation Action", "Jonathan Leitschuh", "JLLeitschuh", "02/05/20, 11:11:44 PM", "See: https://github.com/gradle/wrapper-validation-action", "NaN"], ["Jonathan Leitschuh", "Official Gradle Wrapper Validation Action\n\nSee: https://github.com/gradle/wrapper-validation-action", "02/04/20, 04:49:38 PM", "GitHub", "d6c23b029b087dbbf5d14ba1c3a29ad7855c9503", [".github/workflows/gradle-wrapper-validation.yml"], "@@ -0,0 +1,10 @@\n+name: \"Validate Gradle Wrapper\"\n+on: [push, pull_request]\n+\n+jobs:\n+  validation:\n+    name: \"Validation\"\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - uses: gradle/wrapper-validation-action@v1, ", 10, 0, "\"added, \"", 10], 1], ["1649", "rfc", "Autthapol Korkaew", "autthapol-k", "02/10/20, 12:47:30 PM", "NaN", "NaN", 0], ["1653", "Fix javadoc doclint HTML warnings", null, "Marcono1234", "02/17/20, 10:46:16 PM", "NaN", "NaN", ["1653", "Fix javadoc doclint HTML warnings", null, "Marcono1234", "02/17/20, 10:46:16 PM", "NaN", "NaN"], ["Marcono1234", "Fix javadoc doclint HTML warnings", "02/11/20, 05:00:38 PM", "Marcono1234", "80f4c01621c16878191a900f1bbcf8e9aa50faee", ["gson/src/main/java/com/google/gson/ExclusionStrategy.java", "gson/src/main/java/com/google/gson/FieldNamingPolicy.java", "gson/src/main/java/com/google/gson/annotations/Expose.java", "gson/src/main/java/com/google/gson/annotations/JsonAdapter.java", "gson/src/main/java/com/google/gson/annotations/SerializedName.java", "gson/src/main/java/com/google/gson/annotations/Since.java", "gson/src/main/java/com/google/gson/annotations/Until.java", "gson/src/main/java/com/google/gson/stream/JsonReader.java"], "@@ -46,11 +46,11 @@\n  *\n  * <p><strong>Excludes fields and objects based on a particular annotation:</strong>\n  * <pre class=\"code\">\n- * public &#64interface FooAnnotation {\n+ * public &#64;interface FooAnnotation {\n  *   // some implementation here\n  * }\n  *\n- * // Excludes any field (or class) that is tagged with an \"&#64FooAnnotation\"\n+ * // Excludes any field (or class) that is tagged with an \"&#64;FooAnnotation\"\n  * private static class FooAnnotationExclusionStrategy implements ExclusionStrategy {\n  *   public boolean shouldSkipClass(Class&lt;?&gt; clazz) {\n  *     return clazz.getAnnotation(FooAnnotation.class) != null;, @@ -44,10 +44,10 @@\n    * Using this naming policy with Gson will ensure that the first \"letter\" of the Java\n    * field name is capitalized when serialized to its JSON form.\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> SomeFieldName</li>\n-   *   <li>_someFieldName ---> _SomeFieldName</li>\n+   *   <li>someFieldName ---&gt; SomeFieldName</li>\n+   *   <li>_someFieldName ---&gt; _SomeFieldName</li>\n    * </ul>\n    */\n   UPPER_CAMEL_CASE() {\n@@ -61,10 +61,10 @@\n    * field name is capitalized when serialized to its JSON form and the words will be\n    * separated by a space.\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> Some Field Name</li>\n-   *   <li>_someFieldName ---> _Some Field Name</li>\n+   *   <li>someFieldName ---&gt; Some Field Name</li>\n+   *   <li>_someFieldName ---&gt; _Some Field Name</li>\n    * </ul>\n    *\n    * @since 1.4\n@@ -79,12 +79,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by an underscore (_).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some_field_name</li>\n-   *   <li>_someFieldName ---> _some_field_name</li>\n-   *   <li>aStringField ---> a_string_field</li>\n-   *   <li>aURL ---> a_u_r_l</li>\n+   *   <li>someFieldName ---&gt; some_field_name</li>\n+   *   <li>_someFieldName ---&gt; _some_field_name</li>\n+   *   <li>aStringField ---&gt; a_string_field</li>\n+   *   <li>aURL ---&gt; a_u_r_l</li>\n    * </ul>\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n@@ -97,12 +97,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by a dash (-).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some-field-name</li>\n-   *   <li>_someFieldName ---> _some-field-name</li>\n-   *   <li>aStringField ---> a-string-field</li>\n-   *   <li>aURL ---> a-u-r-l</li>\n+   *   <li>someFieldName ---&gt; some-field-name</li>\n+   *   <li>_someFieldName ---&gt; _some-field-name</li>\n+   *   <li>aStringField ---&gt; a-string-field</li>\n+   *   <li>aURL ---&gt; a-u-r-l</li>\n    * </ul>\n    * Using dashes in JavaScript is not recommended since dash is also used for a minus sign in\n    * expressions. This requires that a field named with dashes is always accessed as a quoted\n@@ -120,12 +120,12 @@\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by a dot (.).\n    *\n-   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---&gt; \"JSON Field Name\":</p>\n    * <ul>\n-   *   <li>someFieldName ---> some.field.name</li>\n-   *   <li>_someFieldName ---> _some.field.name</li>\n-   *   <li>aStringField ---> a.string.field</li>\n-   *   <li>aURL ---> a.u.r.l</li>\n+   *   <li>someFieldName ---&gt; some.field.name</li>\n+   *   <li>_someFieldName ---&gt; _some.field.name</li>\n+   *   <li>aStringField ---&gt; a.string.field</li>\n+   *   <li>aURL ---&gt; a.u.r.l</li>\n    * </ul>\n    * Using dots in JavaScript is not recommended since dot is also used for a member sign in\n    * expressions. This requires that a field named with dots is always accessed as a quoted, @@ -34,9 +34,9 @@\n  * <p>Here is an example of how this annotation is meant to be used:\n  * <p><pre>\n  * public class User {\n- *   &#64Expose private String firstName;\n- *   &#64Expose(serialize = false) private String lastName;\n- *   &#64Expose (serialize = false, deserialize = false) private String emailAddress;\n+ *   &#64;Expose private String firstName;\n+ *   &#64;Expose(serialize = false) private String lastName;\n+ *   &#64;Expose (serialize = false, deserialize = false) private String emailAddress;\n  *   private String password;\n  * }\n  * </pre></p>, @@ -31,7 +31,7 @@\n  *\n  * <p>Here is an example of how this annotation is used:</p>\n  * <pre>\n- * &#64JsonAdapter(UserJsonAdapter.class)\n+ * &#64;JsonAdapter(UserJsonAdapter.class)\n  * public class User {\n  *   public final String firstName, lastName;\n  *   private User(String firstName, String lastName) {\n@@ -40,15 +40,15 @@\n  *   }\n  * }\n  * public class UserJsonAdapter extends TypeAdapter&lt;User&gt; {\n- *   &#64Override public void write(JsonWriter out, User user) throws IOException {\n+ *   &#64;Override public void write(JsonWriter out, User user) throws IOException {\n  *     // implement write: combine firstName and lastName into name\n  *     out.beginObject();\n  *     out.name(\"name\");\n  *     out.value(user.firstName + \" \" + user.lastName);\n  *     out.endObject();\n  *     // implement the write method\n  *   }\n- *   &#64Override public User read(JsonReader in) throws IOException {\n+ *   &#64;Override public User read(JsonReader in) throws IOException {\n  *     // implement read: split name into firstName and lastName\n  *     in.beginObject();\n  *     in.nextName();\n@@ -59,13 +59,13 @@\n  * }\n  * </pre>\n  *\n- * Since User class specified UserJsonAdapter.class in &#64JsonAdapter annotation, it\n+ * Since User class specified UserJsonAdapter.class in &#64;JsonAdapter annotation, it\n  * will automatically be invoked to serialize/deserialize User instances. <br>\n  *\n  * <p> Here is an example of how to apply this annotation to a field.\n  * <pre>\n  * private static final class Gadget {\n- *   &#64JsonAdapter(UserJsonAdapter2.class)\n+ *   &#64;JsonAdapter(UserJsonAdapter2.class)\n  *   final User user;\n  *   Gadget(User user) {\n  *     this.user = user;, @@ -35,8 +35,8 @@\n  * <p>Here is an example of how this annotation is meant to be used:</p>\n  * <pre>\n  * public class MyClass {\n- *   &#64SerializedName(\"name\") String a;\n- *   &#64SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n+ *   &#64;SerializedName(\"name\") String a;\n+ *   &#64;SerializedName(value=\"name1\", alternate={\"name2\", \"name3\"}) String b;\n  *   String c;\n  *\n  *   public MyClass(String a, String b, String c) {, @@ -36,9 +36,9 @@\n  * public class User {\n  *   private String firstName;\n  *   private String lastName;\n- *   &#64Since(1.0) private String emailAddress;\n- *   &#64Since(1.0) private String password;\n- *   &#64Since(1.1) private Address address;\n+ *   &#64;Since(1.0) private String emailAddress;\n+ *   &#64;Since(1.0) private String password;\n+ *   &#64;Since(1.1) private Address address;\n  * }\n  * </pre>\n  *, @@ -38,8 +38,8 @@\n  * public class User {\n  *   private String firstName;\n  *   private String lastName;\n- *   &#64Until(1.1) private String emailAddress;\n- *   &#64Until(1.1) private String password;\n+ *   &#64;Until(1.1) private String emailAddress;\n+ *   &#64;Until(1.1) private String password;\n  * }\n  * </pre>\n  *, @@ -170,7 +170,7 @@\n  * precision loss, extremely large values should be written and read as strings\n  * in JSON.\n  *\n- * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n+ * <a id=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n  * Web servers that serve private data using JSON may be vulnerable to <a\n  * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n  * request forgery</a> attacks. In such an attack, a malicious site gains access, ", 39, 39, "\"modified, modified, modified, modified, modified, modified, modified, modified, \"", 78], 1], ["1654", "Remove unused files", null, "Marcono1234", "03/02/20, 10:49:48 PM", "It appears `gson/docs/javadocs` has been generated and its content is not used anymore, but please let me know if this is incorrect.", "Thank you for the change. Yes, we should delete these files. \r\nHowever, gson/Gson 2.1 notes.txt shouldn't be deleted. =||= It appears `CHANGELOG.md` already covers this:\r\nhttps://github.com/google/gson/blob/87b1d26d06d47ae709b7e953392257b7cbef1b62/CHANGELOG.md#L165-L171\r\n\r\nIf not, I would suggest adding the missing information there instead. However it appears it is partially already covered and changes to a test (`TypeHierarchyAdapterTest`) should not be mentioned anyways. =||= ", ["1654", "Remove unused files", null, "Marcono1234", "03/02/20, 10:49:48 PM", "It appears `gson/docs/javadocs` has been generated and its content is not used anymore, but please let me know if this is incorrect.", "NaN"], ["Marcono1234", "Remove unused Maven assembly plugin file\n\nPlugin usage has been removed in 2016e95", "02/11/20, 03:39:05 PM", "Marcono1234", "9be4400d70660a591fa4dfeaa836a89a0385ee3e", ["gson/assembly-descriptor.xml"], "@@ -1,21 +0,0 @@\n-<assembly>\r\n-  <id>release</id>\r\n-  <formats>\r\n-    <format>zip</format>\r\n-  </formats>\r\n-  <fileSets>\r\n-    <fileSet>\r\n-      <includes>\r\n-        <include>README*</include>\r\n-        <include>LICENSE*</include>\r\n-      </includes>\r\n-    </fileSet>\r\n-    <fileSet>\r\n-      <directory>target</directory>\r\n-      <outputDirectory></outputDirectory>\r\n-      <includes>\r\n-        <include>gson-*.jar</include>\r\n-      </includes>\r\n-    </fileSet>\r\n-  </fileSets>\r\n-</assembly>\n\\ No newline at end of file, ", 0, 21, "\"removed, \"", 21], 1], ["1655", "Change links from HTTP to HTTPS", null, "Marcono1234", "02/17/20, 10:42:28 PM", "NaN", "NaN", ["1655", "Change links from HTTP to HTTPS", null, "Marcono1234", "02/17/20, 10:42:28 PM", "NaN", "NaN"], ["Marcono1234", "Change links from HTTP to HTTPS", "02/11/20, 05:23:24 PM", "Marcono1234", "2294a47eb8b950fd78f9f02e546233166f08bb59", ["README.md", "gson/pom.xml", "pom.xml"], "@@ -43,7 +43,7 @@ Maven:\n Please use the 'gson' tag on StackOverflow or the [google-gson Google group](https://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n \n ### Related Content Created by Third Parties\n-  * [Gson Tutorial](http://www.studytrails.com/java/json/java-google-json-introduction.jsp) by `StudyTrails`\n+  * [Gson Tutorial](https://www.studytrails.com/java/json/java-google-json-introduction/) by `StudyTrails`\n   * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n   * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n , @@ -27,7 +27,7 @@\n           <includePackageNames>com.google.gson</includePackageNames>\n           <excludePackageNames>com.google.gson.internal:com.google.gson.internal.bind</excludePackageNames>\n           <links>\n-            <link>http://docs.oracle.com/javase/6/docs/api/</link>\n+            <link>https://docs.oracle.com/javase/6/docs/api/</link>\n           </links>\n         </configuration>\n       </plugin>, @@ -42,7 +42,7 @@\n   <licenses>\n     <license>\n       <name>Apache 2.0</name>\n-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n+      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n     </license>\n   </licenses>\n , ", 3, 3, "\"modified, modified, modified, \"", 6], 1], ["1656", "Warning fixes", null, "Marcono1234", "09/01/21, 01:09:51 AM", "Fixes some `javac` warnings and implements `DefaultDateTypeAdapter` (internal class) in a type-safer way.", "Changes have been integrated by #1707. =||= ", 0], ["1661", "What changed from 2.6.2 to 2.8.2 in fromJson method ?", "cafebabe1991", "raul1991", "03/12/20, 09:01:34 AM", "input json\r\n\r\n{\r\n\"constraint\":\"^\\d+$\"\r\n}\r\n\r\n`Command`\r\n\r\n`gson.fromJson(input_json, JsonElement.class)`\r\n\r\n**In 2.6.2,**\r\nThe fromJson method removes the single '\\\\'\r\n\r\n**In 2.8.2,**\r\n\r\nIt throws the exception\r\n> com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Invalid escape sequence at line 8 column 22 path $[0].constraint\r\n\tat com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568)\r\n\tat com.google.gson.stream.JsonReader.readEscapeCharacter(JsonReader.java:1559)\r\n\tat com.google.gson.stream.JsonReader.nextQuotedValue(JsonReader.java:1014)\r\n\tat com.google.gson.stream.JsonReader.nextString(JsonReader.java:815)\r\n\tat com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:701)\r\n\tat com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:722)\r\n\tat com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:714)\r\n\tat com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:697)\r\n\tat com.google.gson.internal.bind.TypeAdapters$35$1.read(TypeAdapters.java:893)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:887)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:852)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:801)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:773)\r", "```bash\r\ngit log -p gson-parent-2.6.2..gson-parent-2.7 gson/src/main/java/com/google/gson/stream/JsonReader.java\r\n```\r\n\r\nThere were no many changes but one of them, 3f8726ecafe9c40498255eed1d1893fd665e237b, was the fix you're referring to as your input JSON is invalid since `\\d` is not a valid escape sequence:\r\n\r\n```diff\r\ndiff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java\r\nindex 7a5e9cbb..20656f6c 100644\r\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\r\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\r\n@@ -1561,8 +1561,11 @@ public class JsonReader implements Closeable {\r\n     case '\\'':\r\n     case '\"':\r\n     case '\\\\':\r\n+    case '/':  \r\n+       return escaped;\r\n     default:\r\n-      return escaped;\r\n+       // throw error when none of the above cases are matched\r\n+       throw syntaxError(\"Invalid escape sequence\");\r\n     }\r\n   }\r\n```\r\n =||= Thanks for clearing it out via code reference. =||= ", 0], ["1662", "Custom parser is not called in case of undefined field", "Zolt\u00e1n Farkas", "fzoli", "03/18/20, 10:04:30 PM", "First of all here is a sample project with **unit tests**:\r\nhttps://github.com/fzoli/gson-bugreport\r\n\r\nShort description of the bug:\r\nWe have a custom data-type. It behaves like an `Optional` wrapper so it is never `null`.\r\nIf the JSON does not contain the field, its value should be \"empty\" so there is no need to check `null`.\r\nWe could not solve this with `TypeAdapter`. It works if the field is `null` in the JSON, **but** if the field is `undefined` then `TypeAdapter#read` is not called.", "Gson does not touch missing values for, I guess, performance reasons and simplicitiy. You can easily implement a post-processing type adapter that would set the unaffected null-fields supposed to be optional to their default values (must precede `ValidatingTypeAdapterFactory` in the `gsonBuilder`):\r\n\r\n```java\r\nfinal class OptionalTypeTypeAdapterFactory\r\n\t\timplements TypeAdapterFactory {\r\n\r\n\tprivate static final TypeAdapterFactory instance = new OptionalTypeTypeAdapterFactory();\r\n\r\n\tprivate OptionalTypeTypeAdapterFactory() {\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory get() {\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t@Nullable\r\n\t@Override\r\n\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\tfinal Collection<Field> optionalTypeFields = classesOf(typeToken.getRawType())\r\n\t\t\t\t.stream()\r\n\t\t\t\t.flatMap(c -> Stream.of(c.getDeclaredFields()))\r\n\t\t\t\t.filter(field -> field.getAnnotation(OptionalType.class) != null)\r\n\t\t\t\t.peek(field -> field.setAccessible(true))\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t\tif ( optionalTypeFields.isEmpty() ) {\r\n\t\t\t// if the class does not have any OptionalType-annotated fields, delegate it elsewhere\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal TypeAdapter<T> delegateTypeAdapter = gson.getDelegateAdapter(this, typeToken);\r\n\t\treturn new TypeAdapter<T>() {\r\n\t\t\t@Override\r\n\t\t\tpublic void write(final JsonWriter out, final T value)\r\n\t\t\t\t\tthrows IOException {\r\n\t\t\t\tdelegateTypeAdapter.write(out, value);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic T read(final JsonReader in)\r\n\t\t\t\t\tthrows IOException {\r\n\t\t\t\tfinal T read = delegateTypeAdapter.read(in);\r\n\t\t\t\tnormalizeAbsents(read, optionalTypeFields);\r\n\t\t\t\treturn read;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tprivate static Collection<Class<?>> classesOf(final Class<?> clazz) {\r\n\t\tfinal List<Class<?>> classes = new ArrayList<>();\r\n\t\tfor ( Class<?> c = clazz; c != null && c != Object.class; c = c.getSuperclass() ) {\r\n\t\t\tclasses.add(0, c);\r\n\t\t}\r\n\t\treturn classes;\r\n\t}\r\n\r\n\tprivate static void normalizeAbsents(final Object o, final Iterable<Field> optionalTypeFields) {\r\n\t\tfor ( final Field field : optionalTypeFields ) {\r\n\t\t\ttry {\r\n\t\t\t\tfinal Object fieldValue = field.get(o);\r\n\t\t\t\tif ( fieldValue == null ) {\r\n\t\t\t\t\tfinal Class<?> fieldType = field.getType();\r\n\t\t\t\t\tfinal Object absent;\r\n\t\t\t\t\t// Maintain the supported classes somehow...\r\n\t\t\t\t\tif ( fieldType == PhoneNumber.class ) {\r\n\t\t\t\t\t\tabsent = PhoneNumber.absent();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new UnsupportedOperationException(\"Cannot normalize \" + fieldType);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfield.set(o, absent);\r\n\t\t\t\t}\r\n\t\t\t} catch ( final IllegalAccessException ex ) {\r\n\t\t\t\tthrow new RuntimeException(ex);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n```\r\n\r\nP.S. Gson has a special \"extra\" code to implement common tasks, but these are not the core Gson: https://github.com/google/gson/tree/master/extras/src/main/java/com/google/gson/interceptors\r\nP.P.S. Well-designed sample project! =||= Thanks for the working solution :-)\r\n\r\nHere is my solution based on the code snippet:\r\nhttps://github.com/fzoli/gson-bugreport/tree/0149a48a6e75d766e7021d044e73f538a6fe1887\r\n\r\nI implemented a simple `PhoneNumberTypeAdapter` so it can handle the `present` and `null` cases.\r\n`DefaultValueFactoryContainer` holds a strategy to create an empty `PhoneNumber` and `OptionalTypeTypeAdapterFactory` uses that immutable container.\r\n\r\nI accept that Gson does not touch missing values so I close the issue. =||= ", 0], ["1663", "How to serialize an object to a list of one elements with gson", "lanpangzi", "bestbugwriter", "03/26/20, 02:14:30 PM", "I have some json string like this:\r\nexample1\r\n`{\r\n  \"path\":{\r\n    \"start\":\"abc\"\r\n  },\r\n  \"name\":\"Fork1\"\r\n}`\r\n\r\nexample2\r\n`{\r\n  \"path\":[{\r\n    \"start\":\"abc\"\r\n  },\r\n  {\r\n    \"start\":\"def\"\r\n  }],\r\n  \"name\":\"Fork1\"\r\n}`\r\n\r\nand I want to serialize with **one** JAVA object like this:\r\n\r\n    @Data\r\n    public static class ForkNode {\r\n        private List<Path> path;\r\n        private String name;\r\n    }\r\n\r\n    @Data\r\n    public static class Path {\r\n        private String start;\r\n    }\r\n    new Gson().fromJson(jsonStr, ForkNode.class)\r\n\r\nbut it will throw an exception \r\n`IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 2 column 11 path $.path`\r\n\r\nSo how do I treat the first example as a list of one elements? \r\nOr is there any way I can serialize two different types of json strings with one object?\r", "> I don't think it is a good way to serialize two different types of json strings with ONE object.\r\n> \r\n> For example 1, the Object should be like this:\r\n> \r\n> @DaTa\r\n> public static class ForkNode {\r\n> // only one path\r\n> private Path path;\r\n> private String name;\r\n> }\r\n> \r\n> @DaTa\r\n> public static class Path {\r\n> private String start;\r\n> }\r\n> new Gson().fromJson(jsonStr, ForkNode.class)\r\n> While For example 2, the Object should be like this:\r\n> \r\n> @DaTa\r\n> public static class ForkNode {\r\n> // several paths\r\n> private List path;\r\n> private String name;\r\n> }\r\n> \r\n> @DaTa\r\n> public static class Path {\r\n> private String start;\r\n> }\r\n> new Gson().fromJson(jsonStr, ForkNode.class)\r\n> In JSON:\r\n> \r\n> Objects are enclosed directly in curly brackets {} While JSON\r\n> Arrays that are enclosed in square brackets [] inside JSON Objects.\r\n> One more thing, If you do really want to do that, I think you need to implement a custom deserializer by yourself. Please ref the doc of Gson.\r\n\r\nWhy are your answers the same? Are you the same person?\r\nhttps://stackoverflow.com/a/60824041/3126580 =||= (The copy/paste person has removed their comment addressed below.)\r\nIt's kind of shame copying/pasting someone else's quotation not even giving a link to the source and missing the original answer author. Especially, copying/pasting an answer to the cross-posted question of presumably the same author who would probably read the original answer first. Shame.\r\n\r\n@bestbugwriter \r\nThe _**de**serialization_ problem you're facing is pretty common for JSON documents generated by serializers that save two characters for `[` and `]` when serializing a single element array. Please refer [Make GSON accept single objects where it expects arrays](https://stackoverflow.com/questions/43412261/make-gson-accept-single-objects-where-it-expects-arrays) that addresses the same issue.\r\n\r\nI believe the issue can be closed as \"not a bug\". Thanks. =||= @lyubomyr-shaydariv thanks, it is not a bug. =||= ", 0], ["1668", "TypeAdapter only appears as AbstractClass", "Lorenz Nickel", "LorenzNickel", "05/21/20, 10:10:45 PM", "Fixes https://github.com/google/gson/issues/1658", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1668) for more info**.\n\n<!-- need_sender_cla --> =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1668) for more info**.\n\n<!-- ok --> =||= Has been fixed by  #1693 =||= ", 0], ["1669", "Gson @Expose annotations doesn't work on kotlin data classes", "Brill Pappin", "bpappin", "04/08/20, 02:31:30 PM", "The @Expose annotation is ignored by GSON when applied to a Kotlin data class. For example:\r\n\r\ndata class MyDataClass (@Expose val firstValue:String, val secondValue:String)\r\n\r\nprintln(GsonBuilder()\r\n            .excludeFieldsWithoutExposeAnnotation()\r\n            .create().toJson(MyDataClass(\"first\", \"second\")))\r\n\r\noutput:\r\n{}\r\n\r\nyou mucst not set the exclude option to get any output", "Works fine for me. What versions of Gson and the Kotlin runtime are you using? =||= Android Studio 3.6.1\r\nGson 2.8.6\r\nKotlin 2.1.4\r\n\r\nI've been messing with it for a while. If you try @get:Expose you get an error that you can't use it on the value property target, or something like that. It's just an annotation in java that doesn't know the difference.\r\n\r\nit *does* serialize, it just ignores the Expose annotation, and exposes all value properties.\r\n =||= It appears i may be mistaken.\r\n\r\nI'm not sure what caused gson not to handle the '@'Expose in my previous tests, but if I set up a basic clean test for just this ticket, it works just fine.\r\n\r\nSo, I will close this ticket as bogus, but I will include the test I wrote to check it.\r\n\r\n```kotlin\r\nclass GsonKotlinTest {\r\n\r\n    private lateinit var poko: Poko\r\n    private lateinit var gson: Gson\r\n\r\n    @Before\r\n    fun setUp() {\r\n        gson = GsonBuilder()\r\n            .excludeFieldsWithoutExposeAnnotation()\r\n            .create()\r\n\r\n        poko = Poko(one = \"1 (one)\", two = \"2 (two)\", three = \"3 (three)\")\r\n    }\r\n\r\n\r\n    @Test\r\n    fun onlyExposedPropertiesAreIncludedInJson() {\r\n        val actual = gson.toJson(poko)\r\n        assertEquals(\"{\\\"mytwo\\\":\\\"2 (two)\\\"}\", actual)\r\n    }\r\n\r\n    data class Poko(\r\n        val one: String,\r\n        @Expose @SerializedName(\"mytwo\") val two: String,\r\n        @Expose(serialize = false) val three: String\r\n    )\r\n}\r\n``` =||= ", 0], ["1672", "Re-add & fix testStringsWithRawChineseCharactersSerialization()", "Lorenz Nickel", "LorenzNickel", "05/22/20, 09:13:13 AM", "NaN", "NaN", 0], ["1673", "New getAsStringByForce method added.", "AKASH YADAV", "akashyadav20111992", "04/10/20, 09:12:01 PM", "This new method, in addition to what getAsString method has, also checks for null element and returns \"\" if it is null. It helps when you have large number json attributes and every attribute needs to be checked for null.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1673) for more info**.\n\n<!-- need_sender_cla --> =||= > @googlebot I signed it!\r\n\r\n =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1673) for more info**.\n\n<!-- ok --> =||= > Okay, I'm not talking about the usefulness of this feature or anything, but just from the code perspective, you could and probably respecting the DRY-principle should re-use the `getAsString()` method here:\r\n> \r\n> ```java\r\n> @Override\r\n> public String getAsStringByForce() {\r\n>   if(value == null) {\r\n>     return \"\";\r\n>   }\r\n>   return getAsString();\r\n> }\r\n> ```\r\n\r\nDidn't came to me. Thanks for the suggestion. =||= @LorenzNickel I have made the changes suggested by you. Thanks. =||= Thanks, additionally I'd encourage you to add test-coverage for this functionality. =||= @LorenzNickel test-coverage added for getAsStringByForce(). =||= Okay I'm not sure about the following but:\r\n- regarding your test, shouldn't you use something like `json = new JsonPrimitive(null);`, because you want the value of the json to be null, not the json itself?\r\n- if the point above is true, this shouldn't be allowed, since `$Gson$Preconditions.checkNotNull`, which is part of every constructor, will cause the instantiation of every JsonPrimitve with a null-value to fail? Therefore does you method even make sense, because if I got this right, the value must never be null.\r\n\r\nI'm not really into gson, so I might be wrong here, feel free to correct me in this case.\r\n\r\nI'm a bit confused about this right now, I'll also try to figure out how exactly the JsonPrimitive works in the next days when I find time, then I can also clarify this myself. =||= @LorenzNickel \r\n{\r\n\"id\":\"123\",\r\n\"name\":\"Akash\"\r\n}\r\nIf for above json, JsonObject.getAsJsonPrimitive(\"name\"), it will result in \"Akash\", but for below json,\r\n{\r\n\"id\":\"123\",\r\n}\r\nnow, JsonObject.getAsJsonPrimitive(\"name\") will throw null pointer exception. \r\ngetAsStringByForce() will handle this and will return \"\". This will spare us the null check for each attribute.\r\nThis method will be helpfull where primitive attributes are not fixed and may or may not be present.\r\n\r\nPlease let know if this clears your concerns or not. =||= Thanks for the explanation, that was clear enough \ud83d\udc4d  =||= @LorenzNickel \r\nSorry, this is my first time. Is there anything pending from side to get it merged? What's the next step? =||= You need to wait for approval from someone with write access, so as long as you don't get any comments, you just have to wait. =||= I don't see any reason of adding such a method:\r\n\r\n1. This merely makes the API bloated without any significant convenience. Many languages have a so-called Elvis operator that can hold such a case right using the language facilities (Groovy, C#, Kotlin). In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava, or bulild a lazy overload so that the right-hand operand could only be evaluated when necessary, or use `Optional<T>` (which I'm not a fan of), or use `@Nullable`/`@Nonnull` static analysis support.\r\n1. This would only add the String support, but this is not the only \"primitive\" value: there are booleans and numbers too.\r\n1. Having such a method would encourage bad practices: `\"\"` is not a null and vice versa, `0` is not a null and vice versa, `false` is not a nul too.\r\n1. Some languages (C#, Kotlin) support extension methods that can have the same effect and usually are designed for methods that have such convenience and utility purposes. =||= > I don't see any reason of adding such a method:\r\n> \r\n> 1. This merely makes the API bloated without any significant convenience. Many languages have a so-called Elvis operator that can hold such a case right using the language facilities (Groovy, C#, Kotlin). In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava, or bulild a lazy overload so that the right-hand operand could only be evaluated when necessary, or use `Optional<T>` (which I'm not a fan of), or use `@Nullable`/`@Nonnull` static analysis support.\r\n> 2. This would only add the String support, but this is not the only \"primitive\" value: there are booleans and numbers too.\r\n> 3. Having such a method would encourage bad practices: `\"\"` is not a null and vice versa, `0` is not a null and vice versa, `false` is not a nul too.\r\n> 4. Some languages (C#, Kotlin) support extension methods that can have the same effect and usually are designed for methods that have such convenience and utility purposes.\r\n\r\nThanks for such a detailed explanation. =||= > In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava\r\n\r\nJava 9 also added [`Objects.requireNonNullElse`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Objects.html#requireNonNullElse(T,T)). =||= ", 0], ["1675", "gson : get value of a field in a particular record based on value of other field in the same record out of an array of records", "A. K. Puvvada", "akpuvvada", "04/09/20, 11:14:44 PM", "\r\nI Have JSON like below:\r\n\r\n```\r\n{\r\n    \"FuncName\": \"PYMT\",\r\n    \"InputFields\": [\r\n        {\r\n            \"FieldName\": \"I_KUNNR\",\r\n            \"Value\": \"2354234\"\r\n        },\r\n        {\r\n            \"FieldName\": \"I_OPEN_ITEM\",\r\n            \"Value\": \"X\"\r\n        },\r\n        {\r\n            \"FieldName\": \"I_SOURCE_CODE\",\r\n            \"Value\": \"TV\"\r\n        },\r\n        {\r\n            \"FieldName\": \"I_NUMBER_MONTHS\",\r\n            \"Value\": \"12\"\r\n        }\r\n    ],\r\n    \"InputTableName\": null\r\n}\r\n```\r\n\r\nI want to get value in 'Value' field, based on value in 'FieldName' field in a single statement. Something like -> `jsonObject.getAsJsonArray(\"InputFields\").get(0).getAsJsonObject()[get(\"FieldName\").getAsString().equals(\"I_KUNNR\")].get(\"Value\").getAsString());`\r\n\r\nIs there as way for that? I am using Java by the way.\r", "For Java 8, `JsonArray` cannot return a stream easily so that you could write a one-liner, and probably the closest thing here is:\r\n\r\n```java\r\nStreamSupport.stream(root.getAsJsonObject().getAsJsonArray(\"InputFields\").spliterator(), false)\r\n\t.filter(jsonElement -> jsonElement.getAsJsonObject().getAsJsonPrimitive(\"FieldName\").getAsString().equals(\"I_KUNNR\"))\r\n\t.findFirst()\r\n\t.map(jsonElement -> jsonElement.getAsJsonObject().getAsJsonPrimitive(\"Value\").getAsString())\r\n\t.get()\r\n```\r\n\r\nOr, use a special querying tool, e.g. JsonPath:\r\n\r\n```java\r\nprivate static final Configuration configuration = Configuration.builder()\r\n\t.jsonProvider(new GsonJsonProvider())\r\n\t.build();\r\n..\r\nprivate static final JsonPath jsonPath = JsonPath.compile(\"$.InputFields[?(@.FieldName=='I_KUNNR')].Value\");\r\n...\r\n((JsonArray) jsonPath.read(root, configuration))\r\n\t.get(0)\r\n\t.getAsString()\r\n```\r\n\r\nBoth return `2354234`. I think the issue can be closed? =||= Thanks, that helped. =||= ", 0], ["1676", "Gson throws IllegalStateException when attempting to parse List or List wrapper class", null, "J-Daniel-S", "04/12/20, 10:16:23 AM", "Good evening,\r\n\r\nThe question is linked to below.  I can repeat it here if this is inappropriate.  I also want to add that the exception does not occur if I convert to JSON String and then convert back to the class, a list of the classes, or a wrapper class for the list.  When using Files.newBufferedWriter() or Files.write() the exceptions listed on the stack overflow post.  When visually inspecting the Strings saved to file against the same String written to the console they appear identical.  I should also mention that I get the same JSON String whether using types or whether just using StocksList.class (or Stock.class). \r\n I have not (as of this post) received any replies so any help Would be quite greatly appreciated.\r\n\r\nhttps://stackoverflow.com/questions/60769033/gson-throws-illegalstateexception-when-attempting-to-parse-list\r\n\r\nThank you for your time.", "All the code you've provided can be greatly fixed, improved and refactored.\r\n\r\n* No need to create multiple `Gson` instances: they are relatively expensive to instantiate, but are designed to be thread-safe and immutable therefore can be reused.\r\n* No need to serialize to and deserialize from `java.lang.String` -- this is just expensive as long as it has to create multiple strings in the heap merely wasting the heap and time decreasing the performance.\r\n* Why it does **not** work in your case is that `Files.readAllBytes(...)` returns `byte[]` you're trying to convert to a string. In Java, no arrays have an intuitive `toString` implementation (you can check it by simply printing any byte array to `System.out`). In order to convert it to a string (that might be a memory-consuming instance), `new String(byte[])` (or even `new String(byte[], Charset)`) is an appropriate way.\r\n* I don't really remember how `Files` works, but there's probably no need to check the file to exist: they can be overwritten without any additional checks.\r\n* No type tokens are necessary in this case: `StockList.class` is a `Type` too.\r\n\r\nEssentially, all is you need is just as follows:\r\n\r\n```java\r\nprivate static final Gson gson = new GsonBuilder()\r\n\t\t.disableHtmlEscaping()\r\n\t\t.disableInnerClassSerialization()\r\n\t\t.create();\r\n\r\npublic static void main(final String... args)\r\n\t\tthrows IOException {\r\n\tfinal StocksList before = new StocksList(ImmutableList.of(new Stock(\"INTC\"), new Stock(\"HCC\")));\r\n\tfinal Path path = Paths.get(\"doc.json\");\r\n\twrite(path, before);\r\n\tfinal StocksList after = read(path);\r\n\tSystem.out.println(after.equals(before));\r\n}\r\n\r\nprivate static void write(final Path path, final StocksList stocks)\r\n\t\tthrows IOException {\r\n\ttry ( final Writer writer = new OutputStreamWriter(new FileOutputStream(path.toFile())) ) {\r\n\t\tgson.toJson(stocks, writer);\r\n\t}\r\n}\r\n\r\nprivate static StocksList read(final Path path)\r\n\t\tthrows IOException {\r\n\ttry ( final Reader reader = new InputStreamReader(new FileInputStream(path.toFile())) ) {\r\n\t\treturn gson.fromJson(reader, StocksList.class);\r\n\t}\r\n}\r\n```\r\n\r\nThat's it. Also, `write` and `read` methods can be improved by making them generic and accepting type information. The stock-stuff classes I've reconstructed for simplicity:\r\n\r\n```java\r\nfinal class Stock {\r\n\r\n\tfinal String ticker;\r\n\r\n\tStock(final String ticker) {\r\n\t\tthis.ticker = ticker;\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nfinal class StocksList {\r\n\r\n\tfinal List<Stock> stocks;\r\n\r\n\tStocksList(final List<Stock> stocks) {\r\n\t\tthis.stocks = stocks;\r\n\t}\r\n\r\n}\r\n``` =||= Thank you very much for your answer.  Your solution resulted in a working parser class. =||= ", 0], ["1678", "How to transform empty with [] in TypeAdapterFactory", "Tiimor", "VeiZhang", "04/16/20, 12:58:18 AM", "For example:\r\n```\r\n[\r\n  {\r\n    id: \"0\",\r\n    screenshots: \"null\"\r\n  },\r\n  {\r\n    id: \"1\",\r\n    screenshots: \"\"\r\n  },\r\n  {\r\n    id: \"2\",\r\n    screenshots: [\r\n      \"http:\\/\\/line.myott.net:80\\/images\\/73901_tv_backdrop_0.jpg\",\r\n      \"http:\\/\\/line.myott.net:80\\/images\\/73901_tv_backdrop_1.jpg\"\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n`screenshots` is array list, I want to covert it with \"[]\" when it is empty or size is 0.\r\nOr it will case **Expected BEGIN_ARRAY but was STRING**.\r\n\r\n\r\nI create a `TypeAdapterFactory`, but I don't know how to do. Please give me a help, thanks.\r\nAnd I follow this step [stackoverflow](https://stackoverflow.com/questions/37251521/one-json-param-contains-data-in-array-or-object-how-to-check-data-is-array-or-o), but it doesn't work.", "I also try to convert screenshot to string, but it cause another exception: `Expected STRING but was: BEGIN_ARRAY` =||= ", 0], ["1685", "doc(UserGuide): mention TypeAdapters class", "Simon Legner", "simon04", "05/02/20, 08:01:44 AM", "In the section Built-in Serializers and Deserializers,\r\n* clarify that URL, URI are only examples\r\n* link to TypeAdapters class", "NaN", ["1685", "doc(UserGuide): mention TypeAdapters class", "Simon Legner", "simon04", "05/02/20, 08:01:44 AM", "In the section Built-in Serializers and Deserializers,\n* clarify that URL, URI are only examples\n* link to TypeAdapters class", "NaN"], ["Simon Legner", "doc(UserGuide): mention TypeAdapters class", "04/30/20, 09:35:52 AM", "Simon Legner", "5a7d426070cb79a526920106a373b420bfc4c4e1", ["UserGuide.md"], "@@ -301,11 +301,12 @@ This approach is practical only if the array appears as a top-level element or i\n \n ### <a name=\"TOC-Built-in-Serializers-and-Deserializers\"></a>Built-in Serializers and Deserializers\n \n-Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate.\n-Here is a list of such classes:\n+Gson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate, for instance\n \n-1. `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n-2. `java.net.URI` to match it with strings like `\"/google/gson/\"`\n+* `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n+* `java.net.URI` to match it with strings like `\"/google/gson/\"`\n+\n+For many more, see the internal class [`TypeAdapters`](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java).\n \n You can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n , ", 5, 4, "\"modified, \"", 9], 1], ["1687", "Fix ISO8601UtilsTest failing on systems with UTC+X", null, "Marcono1234", "05/14/21, 12:19:27 AM", "Previously `ISO8601UtilsTest.testDateFormatString()` would fail on systems where the time zone is UTC+X because `getTime()` returned \"2018-06-24\" for them.\r\n\r\nAdditionally the tests which previously changed the system locale and time zone have been rewritten to create a UTC calendar instead. Setting locale seems to not be necessary because `ISO8601Utils.parse(...)` does not do that either.", "Hey, I had the same problem while running the test and also created a PR for it (https://github.com/google/gson/pull/1665), where I use another approach to the same problem =||= Thanks for pointing this out, I did not search before creating the pull request, which I should probably have done.\r\n\r\nI am biased since I created this pull request, but I prefer this approach because\r\n- It also sets `Locale.US`, so it behaves the same as `ISO8601Utils.format`, not sure if otherwise the test could fail for certain Locales\r\n- It removes changing the system time zone and locale since that is error-prone if a test forgets to reset them and also prevent concurrent use =||= Thanks! I agree that the approach here seems reasonable, even if it is a bit more complicated than the simplest possible fix. =||= ", ["1687", "Fix ISO8601UtilsTest failing on systems with UTC+X", null, "Marcono1234", "05/14/21, 12:19:27 AM", "Previously `ISO8601UtilsTest.testDateFormatString()` would fail on systems where the time zone is UTC+X because `getTime()` returned \"2018-06-24\" for them.\n\nAdditionally the tests which previously changed the system locale and time zone have been rewritten to create a UTC calendar instead. Setting locale seems to not be necessary because `ISO8601Utils.parse(...)` does not do that either.", "NaN"], ["Marcono1234", "Fix ISO8601UtilsTest failing on systems with UTC+X\n\nPreviously ISO8601UtilsTest.testDateFormatString() would fail on systems\nwhere the time zone is UTC+X because getTime() returned \"2018-06-24\" for them.\n\nAdditionally the tests which previously changed the system locale and time\nzone have been rewritten to create a UTC calendar instead. Setting locale\nseems to not be necessary because ISO8601Utils.parse(...) does not do that\neither.", "05/02/20, 10:34:08 PM", "Marcono1234", "9171715a880bf65bb698c6c76480d0a3fe65ae20", ["gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"], "@@ -15,9 +15,25 @@\n     @Rule\n     public final ExpectedException exception = ExpectedException.none();\n \n+    private static TimeZone utcTimeZone() {\n+        return TimeZone.getTimeZone(\"UTC\");\n+    }\n+\n+    private static GregorianCalendar createUtcCalendar() {\n+        TimeZone utc = utcTimeZone();\n+        GregorianCalendar calendar = new GregorianCalendar(utc);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        return calendar;\n+    }\n+\n     @Test\n     public void testDateFormatString() {\n-        Date date = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime();\n+        GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        calendar.set(2018, Calendar.JUNE, 25);\n+        Date date = calendar.getTime();\n         String dateStr = ISO8601Utils.format(date);\n         String expectedDate = \"2018-06-25\";\n         assertEquals(expectedDate, dateStr.substring(0, expectedDate.length()));\n@@ -51,51 +67,28 @@ public void testDateParseWithDefaultTimezone() throws ParseException {\n \n     @Test\n     public void testDateParseWithTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:00:00-03:00\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:00:00-03:00\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseSpecialTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:02:00-02:58\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:02:00-02:58\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseInvalidTime() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T61:60:62-03:00\";\n-            exception.expect(ParseException.class);\n-            ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T61:60:62-03:00\";\n+        exception.expect(ParseException.class);\n+        ISO8601Utils.parse(dateStr, new ParsePosition(0));\n     }\n }, ", 32, 39, "\"modified, \"", 71], 1], ["1688", "Fix #1684: Allow explicit JSON null for JsonElement", null, "Marcono1234", "08/17/20, 12:05:18 PM", "Adds a new annotation `@ExplicitlyNullableJsonElement` which can be placed on fields of type JsonElement or subclasses. When deserialized using the reflection-based approach, `null` instead of JsonNull will be used as value. This allows explicit `null` JSON values for JsonElement subclasses which would otherwise cause an exception (except for JsonNull).\r\n\r\nNote that this does not cover all use cases where one might want `JsonElement` or some of its subclasses to be deserialized as `null`, see discussion in #1684.\r\nAdditionally a user might also be able to use `Object` instead of `JsonElement` as type of fields to prevent the issue this pull request tries to solve. However, numbers are treated differently: Deserializing `Object` treats all numbers as  `double` (see `ObjectTypeAdapter`).\r\n\r\nE.g. the following currently throws an exception:\r\n```\r\nclass MyClass {\r\n  JsonObject f;\r\n}\r\n\r\nnew Gson().fromJson(\"{\\\"f\\\": null}\", MyClass.class);\r\n```\r\n\r\nWith the changes of this pull request, the following would be possible:\r\n```\r\nclass MyClass {\r\n  @ExplicitlyNullableJsonElement\r\n  JsonObject f;\r\n}\r\n\r\nnew Gson().fromJson(\"{\\\"f\\\": null}\", MyClass.class);\r\n```\r\n\r\nEdit: It would also be possible to solve this by using the `@JsonAdapter` annotation on the fields and implementing a `TypeAdapterFactory` which creates type adapters which return `null` in case of JSON `null` or otherwise delegate to the default adapter. Edit 2: Probably not possible due to  #1028.", "Closing this pull request because the same functionality provided by this pull request can indeed be implemented using `@JsonAdapter`:\r\n```java\r\n/**\r\n * Factory for deserializing {@link JsonElement} and all of its subclasses as\r\n * {@code null} instead of {@code JsonNull.INSTANCE}.\r\n * \r\n * <p>Must <b>only</b> be used in combination with {@link JsonAdapter @JsonAdapter}\r\n * on fields:\r\n * <pre>\r\n * class MyClass {\r\n *     &#x40;JsonAdapter(NullableJsonElementTypeAdapterFactory.class)\r\n *     JsonElement f;\r\n * }\r\n * </pre>\r\n */\r\npublic class NullableJsonElementTypeAdapterFactory implements TypeAdapterFactory {\r\n    @Override\r\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n        if (JsonElement.class.isAssignableFrom(type.getRawType())) {\r\n            // Due to Gson issue #1028 have to call getAdapter(...) instead of getDelegateAdapter(...)\r\n            TypeAdapter<JsonElement> delegateAdapter = gson.getAdapter(JsonElement.class);\r\n            \r\n            // Safe due to type check at beginning\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> adapter = (TypeAdapter<T>) new NullableJsonElementTypeAdapter(delegateAdapter);\r\n            return adapter;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    private static class NullableJsonElementTypeAdapter extends TypeAdapter<JsonElement> {\r\n        private final TypeAdapter<JsonElement> delegate;\r\n        \r\n        public NullableJsonElementTypeAdapter(TypeAdapter<JsonElement> delegate) {\r\n            this.delegate = delegate;\r\n        }\r\n        \r\n        @Override\r\n        public void write(JsonWriter out, JsonElement value) throws IOException {\r\n            delegate.write(out, value);\r\n        }\r\n\r\n        @Override\r\n        public JsonElement read(JsonReader in) throws IOException {\r\n            if (in.peek() == JsonToken.NULL) {\r\n                return null;\r\n            } else {\r\n                return delegate.read(in);\r\n            }\r\n        }\r\n    }\r\n}\r\n``` =||= ", 0], ["1689", "Prevent custom JsonElement subclasses", null, "Marcono1234", "05/18/20, 11:08:48 PM", "Adds a package-private constructor to JsonElement to prevent custom subclasses. JsonElement models the JSON data types so there should probably be no need for custom subclasses because the existing JsonElement subclasses cover all of them. Additionally custom subclasses would cause issues during (de-)serialization because the default type adapter does not support them.\r\n\r\nHowever, maybe there are use cases (in unit tests?) where custom subclasses are desired?\r\nWould it be better to only deprecate the public constructor for now?", "Yeah, we didn't envision JsonElement to be subclassed. However, at this point in time, it will be a backward incompatible change, and not worth making. =||= ~Should the public constructor be marked as deprecated at least?~\r\n\r\nEdit: Nevermind, creating custom subclasses might not actually be that problematic because the default type adapter only calls the `JsonElement` methods, but does not perform and checks on the class of the object. =||= ", 0], ["1691", "GitHub does not check Travis build anymore", null, "Marcono1234", "05/18/20, 10:56:22 PM", "It appears GitHub is not checking the Travis build anymore. This might mean that a broken build would therefore pass (show a green checkmark) on GitHub.\r\n\r\nSee 55acc23 which when clicking on the green checkmark shows that Travis was checked.\r\nAnd compare it with recent commits or pull requests.\r\nYou will see that they only check CLA and \"Validate Gradle Wrapper\".\r\n\r\nHowever, Travis is still building the project, which can be seen on https://travis-ci.org/github/google/gson, but GitHub is for some reason not considering it anymore in its commit checks.", "Thanks for pointing that out. Would welcome a PR to fix the issue. =||= I assume this has to be managed in the GitHub project settings, though I am not sure.\r\n\r\nAnyways, it looks like this has been resolved because the Travis build was checked for ceae88b again, so I am closing this issue. =||= ", 0], ["1693", "Update proguard.cfg", "Marius Volkhart", "MariusVolkhart", "05/13/20, 07:50:00 PM", "TypeAdapter is an abstract class, and R8 warns about this during the build.", "NaN", ["1693", "Update proguard.cfg", "Marius Volkhart", "MariusVolkhart", "05/13/20, 07:50:00 PM", "TypeAdapter is an abstract class, and R8 warns about this during the build.", "NaN"], ["Marius Volkhart", "Update proguard.cfg\n\nTypeAdapter is an abstract class, and R8 warns about this during the build.", "05/12/20, 05:03:50 PM", "GitHub", "2911695efa0f040ebe59c6efbf0c11a1f67e70c7", ["examples/android-proguard-example/proguard.cfg"], "@@ -15,7 +15,7 @@\n \n # Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n--keep class * implements com.google.gson.TypeAdapter\n+-keep class * extends com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer, ", 1, 1, "\"modified, \"", 2], 1], ["1694", "Json htmlSave set false", "DalerXYZ", "Daller9999", "05/14/20, 01:20:37 PM", "In json I need to use symbols \"<\" and \">\" and others.\r\nBut when I use it, it looks like: `\"Data\":\"\\u003SomeText\\u003e\"`\r\nI need : `\"Data\":\"<SomeText>\"`\r\nHow can I make this?\r\n\r\nI found in JsonWriter and Gson classes - htmlSave parameter, but i can't to change it.", "Maybe if somebody will have some problems with this. I have a decision:\r\n`Gson gson = new GsonBuilder().disableHtmlEscaping().create();` =||= ", 0], ["1696", "Unable to deserialize JsonNull as Option.none() in customized JsonDeserializer", "Luo Chen", "luochen1990", "06/17/20, 05:03:45 AM", "I'm trying to customize the Serializer/Deserializer for Option<T> (using io.vavr.control.Option, or Optional<T> if using java.utils.*, which is similar here).\r\n\r\nAnd there are 2 requirement for what I want:\r\n\r\n1. serialize `Option.none()` as `null` in JSON, and `Option.some(\"hello\")` as `\"hello\"`, so that there is no redundancy (I'm assuming that both the value inside `Option.some` and the value itself are @NotNull).\r\n2.  Option<T> value keep not changed after serialize and deserialze.\r\n\r\nAnd following is my code:\r\n\r\n```\r\n@Override\r\npublic Option<T> deserialize(JsonElement json, Type typeOfRes, JsonDeserializationContext context) {\r\n     if (json.isJsonNull()) {\r\n          return Option.none();  //NOTE: this branch seems never reached!\r\n     } else {\r\n          return Option.some(context.deserialize(json, typeOfT));\r\n     }\r\n}\r\n```\r\n\r\nAnd the corresponding test code:\r\n\r\n```\r\nJsonElement jsome = jsonParser.parse(\"\\\"abcd\\\"\");\r\nJsonElement jnone = jsonParser.parse(\"null\");\r\nObject r1 = JsonHelper.gson.fromJson(jsome, new TypeToken<Option<String>>(){}.getType());\r\nObject r2 = JsonHelper.gson.fromJson(jnone, new TypeToken<Option<String>>(){}.getType());\r\nSystem.out.println(\"r1: \" + r1); // `Some(\"abcd\")`\r\nSystem.out.println(\"r2: \" + r2); // `null`  (expecting `Option.none()`)\r\n```\r\n\r\nMy entire example code: https://gist.github.com/luochen1990/bd63b2d6e9c7c9b77961208920ec3edf\r\n\r\nrelated SO questions:\r\n- https://stackoverflow.com/questions/33301036/gson-ignore-null-when-deserializing-object\r\n- https://stackoverflow.com/questions/61892161/how-to-customize-serializer-and-deserializer-for-option-in-gson-without-redundan", "It appears the `GsonBuilder.registerTypeAdapter` makes `JsonSerializer` and `JsonDeserializer` `null`-safe, i.e. they are not called for `null` values, see #1697.\r\n\r\nSo you should use `TypeAdapter` respectively `TypeAdapterFactory` instead. See [this StackOverflow answer](https://stackoverflow.com/a/25078422/) for a working implementation (except that `read(...)` has to consume the `null`, which is currently wrong in the answer). =||= @Marcono1234 Thanks very much!\r\n\r\nI have solved this problem referecing your SO answer, and [here](https://gist.github.com/luochen1990/319de4c73f7269d197a2a3fe4523a1f7) is my full code, just for anybody which might need it. =||= No problem.\r\nInstead of `in.peek() != JsonToken.END_ARRAY` you can also use [`in.hasNext()`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/stream/JsonReader.html#hasNext()). =||= ", 0], ["1698", "Gson is unable to properly serialize and then deserialize Kotlin HashMap<T1, T2>", "linuxct", "linuxct", "05/20/20, 05:13:16 PM", "I've written a code in which I am serializing an object to store it and later retrieve it, from within the same application.  \r\n\r\nSteps I followed: \r\n- Setup a data class for the object I'm dealing with\r\n\r\n```kotlin\r\n...\r\nimport kotlin.collections.HashMap\r\n\r\nobject AchievementsModel {\r\n    data class UserCalendarModel(var achievementList: HashMap<LocalDateTime, DailyMilestonesAchieved>)\r\n    data class DailyMilestonesAchieved(var achievedA: Boolean, var achievedB: Boolean, var achievedC: Boolean)\r\n}\r\n```\r\n\r\n- Set up an initialization and serialization code\r\n```kotlin\r\nval value = AchievementsModel.UserCalendarModel(hashMapOf())\r\nval currentAchievements = value as AchievementsModel.UserCalendarModel\r\ncurrentAchievements.achievementList[LocalDateTime.now().truncatedTo(ChronoUnit.DAYS)] =\r\n  AchievementsModel.DailyMilestonesAchieved(\r\n    achievedA = false,\r\n    achievedB = false,\r\n    achievedC = false\r\n  )\r\nval gson = Gson()\r\nval serialized = gson.toJson(value)\r\n// Store the value\r\n```\r\n\r\n- Check that the serialized contents here are:\r\n```json\r\n{\"achievementList\":{\"2020-05-20T00:00\":{\"achievedA\":false,\"achievedB\":false,\"achievedC\":false}}}\r\n```\r\n\r\n- Set up a deserialization code\r\n```kotlin\r\nval serialized = //retrieve the value above as String!\r\nval gson = Gson()\r\ngson.fromJson(serialized, AchievementsModel.UserCalendarModel::class.java)\r\n```\r\nWhich causes the following exception:\r\n`com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.`\r\n\r\nI believe because of the way HashMap<T1,T2> is serialized by Gson it expects a different token to begin deserializing it, or I just may be doing something wrong... \r\n\r\nFull Stacktrace: \r\n```prolog\r\n    com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\r\n        at com.google.gson.Gson.fromJson(Gson.java:927)\r\n        at com.google.gson.Gson.fromJson(Gson.java:892)\r\n        at com.google.gson.Gson.fromJson(Gson.java:841)\r\n        at com.google.gson.Gson.fromJson(Gson.java:813)\r\n        at it.androidclient.Views.ReadActivity$onCreate$$inlined$apply$lambda$1.onClick(ReadActivity.kt:82)\r\n        at android.view.View.performClick(View.java:7259)\r\n        at android.view.View.performClickInternal(View.java:7236)\r\n        at android.view.View.access$3600(View.java:801)\r\n        at android.view.View$PerformClick.run(View.java:27892)\r\n        at android.os.Handler.handleCallback(Handler.java:883)\r\n        at android.os.Handler.dispatchMessage(Handler.java:100)\r\n        at android.os.Looper.loop(Looper.java:214)\r\n        at android.app.ActivityThread.main(ActivityThread.java:7356)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:491)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)\r\n     Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.\r\n        at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:385)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:215)\r\n        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)\u00a0\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)\u00a0\r\n        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\u00a0\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\u00a0\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\u00a0\r\n        at com.google.gson.Gson.fromJson(Gson.java:927)\u00a0\r\n        at com.google.gson.Gson.fromJson(Gson.java:892)\u00a0\r\n        at com.google.gson.Gson.fromJson(Gson.java:841)\u00a0\r\n        at com.google.gson.Gson.fromJson(Gson.java:813)\u00a0\r\n        at it.androidclient.Views.ReadActivity$onCreate$$inlined$apply$lambda$1.onClick(ReadActivity.kt:82)\u00a0\r\n        at android.view.View.performClick(View.java:7259)\u00a0\r\n        at android.view.View.performClickInternal(View.java:7236)\u00a0\r\n        at android.view.View.access$3600(View.java:801)\u00a0\r\n        at android.view.View$PerformClick.run(View.java:27892)\u00a0\r\n        at android.os.Handler.handleCallback(Handler.java:883)\u00a0\r\n        at android.os.Handler.dispatchMessage(Handler.java:100)\u00a0\r\n        at android.os.Looper.loop(Looper.java:214)\u00a0\r\n        at android.app.ActivityThread.main(ActivityThread.java:7356)\u00a0\r\n        at java.lang.reflect.Method.invoke(Native Method)\u00a0\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:491)\u00a0\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)\u00a0\r\n```  \r\n\r\nEdit: I'm currently using com.google.code.gson:gson:2.8.6 on Android Studio 3.6.3, Builtool 29.0.2, Kotlin Runtime version 1.3.71.", "The issue is actually the fact Gson is unable to deserialize LocalDateTime properly on it's own without a proper TypeAdapter fed to it, not the HashMap, so I was looking at this wrongly all the time. \r\n\r\nThe solution went through adding a custom GsonBuilder().registerTypeAdapter specifically for LocalDateTime so it would be able to parse \"2020-05-20T00:00\" back into a proper date. \r\n\r\n```kotlin\r\nval gson = GsonBuilder().registerTypeAdapter(\r\n  LocalDateTime::class.java,\r\n  JsonDeserializer<Any?> { json, _, _ ->\r\n    LocalDateTime.parse(json.asJsonPrimitive.asString)\r\n  }).create()\r\ngson.fromJson(serialized, AchievementsModel.UserCalendarModel::class.java)\r\n``` =||= ", 0], ["1707", "Make dependency on java.sql optional", null, "Marcono1234", "08/25/21, 06:26:59 PM", "Note: This is based on #1656\r\nFixes #1629\r\n\r\nMakes the dependency on the `java.sql` module optional. If its classes are present at runtime, the respective type adapters will be used, otherwise Gson will not try to load the classes and will therefore not fail with a `ClassNotFoundException` anymore. The entry point for all SQL type adapters is now `SqlTypesSupport`.\r\n\r\nI am however, not that familiar with the module system so it would be good if others who are more familiar with it can check if this is a sane implementation.\r\n\r\nEspecially #1500 (@Degubi) is confusing me because from what I understood about the JPMS `requires transitive` is only so modules depending on Gson would also be \"reading\" `java.sql`, which however makes no sense because Gson does not expose these types publicly anywhere, so it should not provide them transitively. To my understanding `requires` should have been enough to require `java.sql` being present at runtime, however based on the `ClassNotFoundException` reports this was not the case?\r\nOr are they using tools (as it is the case [here](https://stackoverflow.com/q/57222110) which break the module system)? Though that would be a rather common issue then, see the question [\"java.sql.Time exception\"](https://stackoverflow.com/q/50877484).\r\n\r\nAlso pinging @nicolaiparlog, if you have any spare time, any hints regarding the JPMS would be appreciated :)\r\nSorry to pester you in case you don't have any time.", "Don't worry, I don't pester easily. :wink: I'm happy to provide input, but keep in mind that I don't know GSON or the diff in detail (don't have the time to study them right now), so I may be off. Caveat emptor, I guess. Also, I wrote [a blog post about optional dependencies](https://blog.codefx.org/java/module-system-optional-dependencies/) that may help understand the feature.\r\n\r\nAs I understand the situation, GSON only needs to work with _java.sql_ types if the user already uses them, right? I.e. there's never a situation where a GSON user doesn't need the _java.sql_ module, but GSON uses its types anyway. If that is so, `requires static` is the right way to go.\r\n\r\nNote that `requires static` alone does not make the module available at run time. That means, even if GSON is launched on a Java runtime that contains the module, it will only be available at run time if some other module requires it (or the app is launched from the class path).\r\n\r\nIn case you're interested, the blog post shows a method `isModulePresent(String)` that, well, does what the name suggests. :grin: You can use it (I hereby provide it under the Apache Software License 2.0) if you need to programmatically determine whether _java.sql_ made it into the module graph.\r\n\r\nI agree with your confusion about #1500. Turning `requires` into `requires transitive` doesn't make a difference regarding its presence at run time - it is present either way ([another vlog post](https://blog.codefx.org/java/implied-readability/)). I agree with [Alan Bateman's comment](https://stackoverflow.com/questions/50877484/java-sql-time-exception#comment88763419_50877484) - this looks like class loader shenanigans to me. =||= Thanks for your clarification! Yes Gson does not need any `java.sql` types on its own, it only provides (de-)serialization support for them in case they are used.\r\n\r\nYour `isModulePresent(String)` is quite verbose for what it tries to solve. Though maybe there is no better / more complete way of doing this (I have created a [StackOverflow question](https://stackoverflow.com/q/61703051) for that). However, Gson cannot use this solution because it wants to support Java 6, so this pull requests checks using `Class.forName` for a class present in `java.sql`, assuming that the other classes must be present then as well:\r\nhttps://github.com/google/gson/blob/a4a235e14a63b9a4f902805641f1160c6bf5aa93/gson/src/main/java/com/google/gson/internal/sql/SqlTypesSupport.java#L37-L40\r\n\r\nRegarding previously reported `ClassNotFoundException` and class loader shenanigans: It looks like Gson itself does not create or uses any special class loaders, so I assume the callers have a broken setup then. =||= Heres another example of the same problem this time with CLosureCompiler, so+++ from me as well.\r\n\r\n```java\r\n[INFO]         java.lang.SecurityException: Prohibited package name: java.sql\r\n[INFO]         \tat java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:889)\r\n[INFO]         \tat java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1005)\r\n[INFO]         \tat java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174)\r\n[INFO]         \tat java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:545)\r\n[INFO]         \tat java.base/java.net.URLClassLoader.access$100(URLClassLoader.java:83)\r\n[INFO]         \tat java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:453)\r\n[INFO]         \tat java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:447)\r\n[INFO]         \tat java.base/java.security.AccessController.doPrivileged(Native Method)\r\n[INFO]         \tat java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:446)\r\n[INFO]         \tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromSelf(ClassRealm.java:425)\r\n[INFO]         \tat org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:42)\r\n[INFO]         \tat org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)\r\n[INFO]         \tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)\r\n[INFO]         \tat org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)\r\n[INFO]         \tat com.google.gson.Gson.<init>(Gson.java:265)\r\n[INFO]         \tat com.google.gson.Gson.<init>(Gson.java:186)\r\n[INFO]         \tat com.google.javascript.jscomp.AbstractCommandLineRunner.<init>(AbstractCommandLineRunner.java:224)\r\n``` =||= This pull request worked great for me in a java agent (which cant use java.sql)\r\n\r\nWhen building it I got this test failure though : \r\n\r\n`Failed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest): expected:<2018-06-2[5]> but was:<2018-06-2[4]>`\r\n\r\nI'm wondering if this is a timezone issue.  \r\nTests on master branch passed.\r\n\r\nTZ=\"Europe/Berlin\"\r\nUbuntu 20.04 =||= Yes the `ISO8601UtilsTest` is faulty and will be fixed by #1665 / #1687 =||= Thanks for your work on resolving this issue with this pull request, @Marcono1234.\r\n\r\n@inder123, Is it possible we could get a review on this PR? \r\n\r\nWhen using the `jlink` CLI tool to build a custom minimal JRE, `gson`'s explicit module dependency adds another 10MB+ of Java module dependencies. A prominent use case of using `jlink` is building lean Docker images; however, this explicit SQL dependency adds dead weight to the final image (a 20% size increase for my project). Intentionally removing the `java.sql` module results in a runtime error of `java.lang.NoClassDefFoundError: java/sql/Time`, despite it not being necessary for execution.\r\n\r\nThe indirect/transitive module dependencies that end up being added are listed here: https://docs.oracle.com/javase/9/docs/api/java.sql-summary.html\r\n\r\nI would really appreciate seeing the `java.sql` dependency being optional. Thank you for your time. =||= I ran this against all of Google's internal tests that depend (directly or indirectly) on Gson, and didn't see any problems. I think this is good to go. =||= ", ["1707", "Make dependency on java.sql optional", null, "Marcono1234", "08/25/21, 06:26:59 PM", "Note: This is based on #1656\nFixes #1629\n\nMakes the dependency on the `java.sql` module optional. If its classes are present at runtime, the respective type adapters will be used, otherwise Gson will not try to load the classes and will therefore not fail with a `ClassNotFoundException` anymore. The entry point for all SQL type adapters is now `SqlTypesSupport`.\n\nI am however, not that familiar with the module system so it would be good if others who are more familiar with it can check if this is a sane implementation.\n\nEspecially #1500 (@Degubi) is confusing me because from what I understood about the JPMS `requires transitive` is only so modules depending on Gson would also be \"reading\" `java.sql`, which however makes no sense because Gson does not expose these types publicly anywhere, so it should not provide them transitively. To my understanding `requires` should have been enough to require `java.sql` being present at runtime, however based on the `ClassNotFoundException` reports this was not the case?\nOr are they using tools (as it is the case [here](https://stackoverflow.com/q/57222110) which break the module system)? Though that would be a rather common issue then, see the question [\"java.sql.Time exception\"](https://stackoverflow.com/q/50877484).\n\nAlso pinging @nicolaiparlog, if you have any spare time, any hints regarding the JPMS would be appreciated :)\nSorry to pester you in case you don't have any time.", "NaN"], ["\u00c9amonn McManus", "Merge branch 'master' into optional-sql", "08/24/21, 08:41:12 PM", "GitHub", "69173b02eaa82de0382d94478a1b4cdeafeca829", [".github/dependabot.yml", "CHANGELOG.md", "README.md", "UserGuide.md", "codegen/pom.xml", "examples/android-proguard-example/proguard.cfg", "extras/pom.xml", "gson/pom.xml", "gson/src/main/java/com/google/gson/JsonStreamParser.java", "gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/JsonArrayTest.java", "gson/src/test/java/com/google/gson/functional/EnumWithObfuscatedTest.java", "gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java", "gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java", "gson/src/test/resources/testcases-proguard.conf", "metrics/pom.xml", "pom.xml", "proto/pom.xml"], "@@ -0,0 +1,6 @@\n+version: 2\n+updates:\n+  - package-ecosystem: \"maven\"\n+    directory: \"/\"\n+    schedule:\n+      interval: \"daily\", @@ -1,6 +1,22 @@\n Change Log\n ==========\n \n+## Version 2.8.8\n+\n+* Fixed issue with recursive types (#1390).\n+* Better behaviour with Java 9+ and `Unsafe` if there is a security manager (#1712).\n+* `EnumTypeAdapter` now works better when ProGuard has obfuscated enum fields (#1495).\n+\n+## Version 2.8.7\n+\n+* Fixed `ISO8601UtilsTest` failing on systems with UTC+X.\n+* Improved javadoc for `JsonStreamParser`.\n+* Updated proguard.cfg (#1693).\n+* Fixed `IllegalStateException` in `JsonTreeWriter` (#1592).\n+* Added `JsonArray.isEmpty()` (#1640).\n+* Added new test cases (#1638).\n+* Fixed OSGi metadata generation to work on JavaSE < 9 (#1603).\n+\n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n  * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`, @@ -17,7 +17,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n Gradle:\n ```gradle\n dependencies {\n-  implementation 'com.google.code.gson:gson:2.8.6'\n+  implementation 'com.google.code.gson:gson:2.8.8'\n }\n ```\n \n@@ -26,7 +26,7 @@ Maven:\n <dependency>\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n-  <version>2.8.6</version>\n+  <version>2.8.8</version>\n </dependency>\n ```\n , @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.6'\n+    implementation 'com.google.code.gson:gson:2.8.8'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.6</version>\n+      <version>2.8.8</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, @@ -40,7 +40,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -15,7 +15,7 @@\n \n # Prevent proguard from stripping interface information from TypeAdapter, TypeAdapterFactory,\n # JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)\n--keep class * implements com.google.gson.TypeAdapter\n+-keep class * extends com.google.gson.TypeAdapter\n -keep class * implements com.google.gson.TypeAdapterFactory\n -keep class * implements com.google.gson.JsonSerializer\n -keep class * implements com.google.gson.JsonDeserializer\n@@ -25,4 +25,8 @@\n   @com.google.gson.annotations.SerializedName <fields>;\n }\n \n+# Retain generic signatures of TypeToken and its subclasses with R8 version 3.0 and higher.\n+-keep,allowobfuscation,allowshrinking class com.google.gson.reflect.TypeToken\n+-keep,allowobfuscation,allowshrinking class * extends com.google.gson.reflect.TypeToken\n+\n ##---------------End: proguard configuration for Gson  ----------, @@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -4,7 +4,7 @@\n   <parent>\n     <groupId>com.google.code.gson</groupId>\n     <artifactId>gson-parent</artifactId>\n-    <version>2.8.7-SNAPSHOT</version>\n+    <version>2.8.9-SNAPSHOT</version>\n   </parent>\n \n   <artifactId>gson</artifactId>\n@@ -16,6 +16,12 @@\n       <artifactId>junit</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.github.wvengen</groupId>\n+      <artifactId>proguard-maven-plugin</artifactId>\n+      <version>2.4.0</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n  \n   <build>\n@@ -34,7 +40,7 @@\n       <plugin>\n         <groupId>biz.aQute.bnd</groupId>\n         <artifactId>bnd-maven-plugin</artifactId>\n-        <version>4.0.0</version>\n+        <version>5.3.0</version>\n         <executions>\n           <execution>\n             <goals>\n@@ -69,6 +75,87 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>com.coderplus.maven.plugins</groupId>\n+        <artifactId>copy-rename-maven-plugin</artifactId>\n+        <version>1.0.1</version>\n+        <executions>\n+          <execution>\n+            <id>pre-obfuscate-class</id>\n+            <phase>process-test-classes</phase>\n+            <goals>\n+              <goal>rename</goal>\n+            </goals>\n+            <configuration>\n+              <fileSets>\n+                <fileSet>\n+                  <sourceFile>${project.build.directory}/test-classes/com/google/gson/functional/EnumWithObfuscatedTest.class</sourceFile>\n+                  <destinationFile>${project.build.directory}/test-classes-obfuscated-injar/com/google/gson/functional/EnumWithObfuscatedTest.class</destinationFile>\n+                </fileSet>\n+                <fileSet>\n+                  <sourceFile>${project.build.directory}/test-classes/com/google/gson/functional/EnumWithObfuscatedTest$Gender.class</sourceFile>\n+                  <destinationFile>${project.build.directory}/test-classes-obfuscated-injar/com/google/gson/functional/EnumWithObfuscatedTest$Gender.class</destinationFile>\n+                </fileSet>\n+              </fileSets>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>com.github.wvengen</groupId>\n+        <artifactId>proguard-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>process-test-classes</phase>\n+            <goals><goal>proguard</goal></goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <proguardVersion>6.2.2</proguardVersion>\n+          <obfuscate>true</obfuscate>\n+          <injar>test-classes-obfuscated-injar</injar>\n+          <outjar>test-classes-obfuscated-outjar</outjar>\n+          <inFilter>**/*.class</inFilter>\n+          <proguardInclude>${basedir}/src/test/resources/testcases-proguard.conf</proguardInclude>\n+          <libs>\n+            <lib>${project.build.directory}/classes</lib>\n+            <lib>${java.home}/jmods/java.base.jmod</lib>\n+          </libs>\n+        </configuration>\n+        <dependencies>\n+          <dependency>\n+            <groupId>net.sf.proguard</groupId>\n+            <artifactId>proguard-base</artifactId>\n+            <version>6.2.2</version>\n+            <scope>runtime</scope>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-resources-plugin</artifactId>\n+        <version>3.2.0</version>\n+        <executions>\n+          <execution>\n+            <id>post-obfuscate-class</id>\n+            <phase>process-test-classes</phase>\n+            <goals>\n+              <goal>copy-resources</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}/test-classes/com/google/gson/functional</outputDirectory>\n+              <resources>\n+                <resource>\n+                  <directory>${project.build.directory}/test-classes-obfuscated-outjar/com/google/gson/functional</directory>\n+                  <includes>\n+                    <include>EnumWithObfuscatedTest.class</include>\n+                    <include>EnumWithObfuscatedTest$Gender.class</include>\n+                  </includes>\n+                </resource>\n+              </resources>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n   </build>\n </project>, @@ -29,8 +29,9 @@\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously.\n- * \n+ * asynchronously. The JSON data is parsed in lenient mode, see also\n+ * {@link JsonReader#setLenient(boolean)}.\n+ *\n  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To\n  * properly use this class across multiple threads, you will need to add some external\n  * synchronization. For example:\n@@ -72,10 +73,12 @@ public JsonStreamParser(Reader reader) {\n   }\n   \n   /**\n-   * Returns the next available {@link JsonElement} on the reader. Null if none available.\n-   * \n-   * @return the next available {@link JsonElement} on the reader. Null if none available.\n-   * @throws JsonParseException if the incoming stream is malformed JSON.\n+   * Returns the next available {@link JsonElement} on the reader. Throws a\n+   * {@link NoSuchElementException} if no element is available.\n+   *\n+   * @return the next available {@code JsonElement} on the reader.\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n+   * @throws NoSuchElementException if no {@code JsonElement} is available.\n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n@@ -97,6 +100,7 @@ public JsonElement next() throws JsonParseException {\n   /**\n    * Returns true if a {@link JsonElement} is available on the input for consumption\n    * @return true if a {@link JsonElement} is available on the input, false otherwise\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n    * @since 1.4\n    */\n   public boolean hasNext() {, @@ -25,7 +25,12 @@\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n-import java.util.*;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n \n import static com.google.gson.internal.$Gson$Preconditions.checkArgument;\n import static com.google.gson.internal.$Gson$Preconditions.checkNotNull;\n@@ -334,52 +339,62 @@ public static Type getCollectionElementType(Type context, Class<?> contextRawTyp\n   }\n \n   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable<?>>());\n+\n+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable<?>, Type>());\n   }\n \n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n-                              Collection<TypeVariable<?>> visitedTypeVariables) {\n+                              Map<TypeVariable<?>, Type> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n+    TypeVariable<?> resolving = null;\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;\n-        if (visitedTypeVariables.contains(typeVariable)) {\n+        Type previouslyResolved = visitedTypeVariables.get(typeVariable);\n+        if (previouslyResolved != null) {\n           // cannot reduce due to infinite recursion\n-          return toResolve;\n-        } else {\n-          visitedTypeVariables.add(typeVariable);\n+          return (previouslyResolved == Void.TYPE) ? toResolve : previouslyResolved;\n+        }\n+\n+        // Insert a placeholder to mark the fact that we are in the process of resolving this type\n+        visitedTypeVariables.put(typeVariable, Void.TYPE);\n+        if (resolving == null) {\n+          resolving = typeVariable;\n         }\n+\n         toResolve = resolveTypeVariable(context, contextRawType, typeVariable);\n         if (toResolve == typeVariable) {\n-          return toResolve;\n+          break;\n         }\n \n       } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {\n         Class<?> original = (Class<?>) toResolve;\n         Type componentType = original.getComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof GenericArrayType) {\n         GenericArrayType original = (GenericArrayType) toResolve;\n         Type componentType = original.getGenericComponentType();\n         Type newComponentType = resolve(context, contextRawType, componentType, visitedTypeVariables);\n-        return componentType == newComponentType\n+        toResolve = equal(componentType, newComponentType)\n             ? original\n             : arrayOf(newComponentType);\n+        break;\n \n       } else if (toResolve instanceof ParameterizedType) {\n         ParameterizedType original = (ParameterizedType) toResolve;\n         Type ownerType = original.getOwnerType();\n         Type newOwnerType = resolve(context, contextRawType, ownerType, visitedTypeVariables);\n-        boolean changed = newOwnerType != ownerType;\n+        boolean changed = !equal(newOwnerType, ownerType);\n \n         Type[] args = original.getActualTypeArguments();\n         for (int t = 0, length = args.length; t < length; t++) {\n           Type resolvedTypeArgument = resolve(context, contextRawType, args[t], visitedTypeVariables);\n-          if (resolvedTypeArgument != args[t]) {\n+          if (!equal(resolvedTypeArgument, args[t])) {\n             if (!changed) {\n               args = args.clone();\n               changed = true;\n@@ -388,9 +403,10 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n           }\n         }\n \n-        return changed\n+        toResolve = changed\n             ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)\n             : original;\n+        break;\n \n       } else if (toResolve instanceof WildcardType) {\n         WildcardType original = (WildcardType) toResolve;\n@@ -400,20 +416,28 @@ private static Type resolve(Type context, Class<?> contextRawType, Type toResolv\n         if (originalLowerBound.length == 1) {\n           Type lowerBound = resolve(context, contextRawType, originalLowerBound[0], visitedTypeVariables);\n           if (lowerBound != originalLowerBound[0]) {\n-            return supertypeOf(lowerBound);\n+            toResolve = supertypeOf(lowerBound);\n+            break;\n           }\n         } else if (originalUpperBound.length == 1) {\n           Type upperBound = resolve(context, contextRawType, originalUpperBound[0], visitedTypeVariables);\n           if (upperBound != originalUpperBound[0]) {\n-            return subtypeOf(upperBound);\n+            toResolve = subtypeOf(upperBound);\n+            break;\n           }\n         }\n-        return original;\n+        toResolve = original;\n+        break;\n \n       } else {\n-        return toResolve;\n+        break;\n       }\n     }\n+    // ensure that any in-process resolution gets updated with the final result\n+    if (resolving != null) {\n+      visitedTypeVariables.put(resolving, toResolve);\n+    }\n+    return toResolve;\n   }\n \n   static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {, @@ -17,12 +17,15 @@\n package com.google.gson.internal.bind;\n \n import java.io.IOException;\n+import java.lang.reflect.Field;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Calendar;\n@@ -753,9 +756,20 @@ public void write(JsonWriter out, Locale value) throws IOException {\n \n     public EnumTypeAdapter(Class<T> classOfT) {\n       try {\n-        for (T constant : classOfT.getEnumConstants()) {\n+        for (final Field field : classOfT.getDeclaredFields()) {\n+          if (!field.isEnumConstant()) {\n+            continue;\n+          }\n+          AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+            @Override public Void run() {\n+              field.setAccessible(true);\n+              return null;\n+            }\n+          });\n+          @SuppressWarnings(\"unchecked\")\n+          T constant = (T)(field.get(null));\n           String name = constant.name();\n-          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);\n+          SerializedName annotation = field.getAnnotation(SerializedName.class);\n           if (annotation != null) {\n             name = annotation.value();\n             for (String alternate : annotation.alternate()) {\n@@ -765,7 +779,7 @@ public EnumTypeAdapter(Class<T> classOfT) {\n           nameToConstant.put(name, constant);\n           constantToName.put(constant, name);\n         }\n-      } catch (NoSuchFieldException e) {\n+      } catch (IllegalAccessException e) {\n         throw new AssertionError(e);\n       }\n     }, @@ -79,7 +79,7 @@ private static Object getUnsafeInstance() {\n   private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n-    } catch (NoSuchFieldException e) {\n+    } catch (Exception e) {\n       return null;\n     }\n   }, @@ -16,9 +16,8 @@\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import com.google.gson.common.MoreAsserts;\n+import junit.framework.TestCase;\n \n /**\n  * @author Jesse Wilson\n@@ -99,4 +98,68 @@ public void testDeepCopy() {\n     assertEquals(1, original.get(0).getAsJsonArray().size());\n     assertEquals(0, copy.get(0).getAsJsonArray().size());\n   }\n+\n+  public void testFailedGetArrayValues() {\n+    JsonArray jsonArray = new JsonArray();\n+    jsonArray.add(JsonParser.parseString(\"{\" + \"\\\"key1\\\":\\\"value1\\\",\" + \"\\\"key2\\\":\\\"value2\\\",\" + \"\\\"key3\\\":\\\"value3\\\",\" + \"\\\"key4\\\":\\\"value4\\\"\" + \"}\"));\n+    try {\n+      jsonArray.getAsBoolean();\n+      fail(\"expected getBoolean to fail\");\n+    } catch (UnsupportedOperationException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"JsonObject\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.get(-1);\n+      fail(\"expected get to fail\");\n+    } catch (IndexOutOfBoundsException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Index -1 out of bounds for length 1\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsString();\n+      fail(\"expected getString to fail\");\n+    } catch (UnsupportedOperationException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"JsonObject\", e.getMessage());\n+    }\n+\n+    jsonArray.remove(0);\n+    jsonArray.add(\"hello\");\n+    try {\n+      jsonArray.getAsDouble();\n+      fail(\"expected getDouble to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsInt();\n+      fail(\"expected getInt to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.get(0).getAsJsonArray();\n+      fail(\"expected getJSONArray to fail\");\n+    } catch (IllegalStateException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Not a JSON Array: \\\"hello\\\"\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsJsonObject();\n+      fail(\"expected getJSONObject to fail\");\n+    } catch (IllegalStateException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"Not a JSON Object: [\\\"hello\\\"]\", e.getMessage());\n+    }\n+    try {\n+      jsonArray.getAsLong();\n+      fail(\"expected getLong to fail\");\n+    } catch (NumberFormatException e) {\n+      assertEquals(\"Expected an exception message\",\n+              \"For input string: \\\"hello\\\"\", e.getMessage());\n+    }\n+  }\n }, @@ -0,0 +1,58 @@\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional tests for enums with Proguard.\n+ *\n+ * @author Young Cha\n+ */\n+public class EnumWithObfuscatedTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public enum Gender {\n+    @SerializedName(\"MAIL\")\n+    MALE,\n+\n+    @SerializedName(\"FEMAIL\")\n+    FEMALE\n+  }\n+\n+  public void testEnumClassWithObfuscated() {\n+    for (Gender enumConstant: Gender.class.getEnumConstants()) {\n+      try {\n+        Gender.class.getField(enumConstant.name());\n+        fail(\"Enum is not obfuscated\");\n+      } catch (NoSuchFieldException ignore) {\n+      }\n+    }\n+\n+    assertEquals(Gender.MALE, gson.fromJson(\"\\\"MAIL\\\"\", Gender.class));\n+    assertEquals(\"\\\"MAIL\\\"\", gson.toJson(Gender.MALE, Gender.class));\n+  }\n+}, @@ -0,0 +1,55 @@\n+package com.google.gson.functional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * This test covers the scenario described in #1390 where a type variable needs to be used\n+ * by a type definition multiple times.  Both type variable references should resolve to the\n+ * same underlying concrete type.\n+ */\n+public class ReusedTypeVariablesFullyResolveTest {\n+\n+  private Gson gson;\n+\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().create();\n+  }\n+\n+  @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n+  @Test\n+  public void testGenericsPreservation() {\n+    TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n+    Iterator<TestEnum> iterator = withSet.collection.iterator();\n+    assertNotNull(withSet);\n+    assertNotNull(withSet.collection);\n+    assertEquals(2, withSet.collection.size());\n+    TestEnum first = iterator.next();\n+    TestEnum second = iterator.next();\n+\n+    assertTrue(first instanceof TestEnum);\n+    assertTrue(second instanceof TestEnum);\n+  }\n+\n+  enum TestEnum { ONE, TWO, THREE }\n+\n+  private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n+\n+  private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n+\n+  private static class BaseCollection<U, C extends Collection<U>>\n+  {\n+    public C collection;\n+  }\n+\n+}, @@ -15,9 +15,25 @@\n     @Rule\n     public final ExpectedException exception = ExpectedException.none();\n \n+    private static TimeZone utcTimeZone() {\n+        return TimeZone.getTimeZone(\"UTC\");\n+    }\n+\n+    private static GregorianCalendar createUtcCalendar() {\n+        TimeZone utc = utcTimeZone();\n+        GregorianCalendar calendar = new GregorianCalendar(utc);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        return calendar;\n+    }\n+\n     @Test\n     public void testDateFormatString() {\n-        Date date = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime();\n+        GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US);\n+        // Calendar was created with current time, must clear it\n+        calendar.clear();\n+        calendar.set(2018, Calendar.JUNE, 25);\n+        Date date = calendar.getTime();\n         String dateStr = ISO8601Utils.format(date);\n         String expectedDate = \"2018-06-25\";\n         assertEquals(expectedDate, dateStr.substring(0, expectedDate.length()));\n@@ -51,51 +67,28 @@ public void testDateParseWithDefaultTimezone() throws ParseException {\n \n     @Test\n     public void testDateParseWithTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:00:00-03:00\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:00:00-03:00\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseSpecialTimezone() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T00:02:00-02:58\";\n-            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n-            assertEquals(expectedDate, date);\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T00:02:00-02:58\";\n+        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        GregorianCalendar calendar = createUtcCalendar();\n+        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n+        Date expectedDate = calendar.getTime();\n+        assertEquals(expectedDate, date);\n     }\n \n     @Test\n     public void testDateParseInvalidTime() throws ParseException {\n-        TimeZone defaultTimeZone = TimeZone.getDefault();\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n-        Locale defaultLocale = Locale.getDefault();\n-        Locale.setDefault(Locale.US);\n-        try {\n-            String dateStr = \"2018-06-25T61:60:62-03:00\";\n-            exception.expect(ParseException.class);\n-            ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        } finally {\n-            TimeZone.setDefault(defaultTimeZone);\n-            Locale.setDefault(defaultLocale);\n-        }\n+        String dateStr = \"2018-06-25T61:60:62-03:00\";\n+        exception.expect(ParseException.class);\n+        ISO8601Utils.parse(dateStr, new ParsePosition(0));\n     }\n }, @@ -15,10 +15,12 @@\n  */\n package com.google.gson.internal.reflect;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.lang.reflect.Field;\n+import java.security.Permission;\n \n import org.junit.Test;\n \n@@ -41,6 +43,30 @@ public void testMakeAccessibleWithUnsafe() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {\n+    final Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\n+    final SecurityManager original = System.getSecurityManager();\n+    SecurityManager restrictiveManager = new SecurityManager() {\n+      @Override\n+      public void checkPermission(Permission perm) {\n+        if (accessDeclaredMembers.equals(perm)) {\n+          throw new SecurityException(\"nope\");\n+        }\n+      }\n+    };\n+    System.setSecurityManager(restrictiveManager);\n+\n+    try {\n+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+      assertFalse(\"override field should have been inaccessible\", accessor.makeAccessibleWithUnsafe(field));\n+      accessor.makeAccessible(field);\n+    } finally {\n+      System.setSecurityManager(original);\n+    }\n+  }\n+\n   @SuppressWarnings(\"unused\")\n   private static final class ClassWithPrivateFinalFields {\n     private final String a;, @@ -0,0 +1,20 @@\n+# Options from Android Gradle Plugins\n+# https://android.googlesource.com/platform/tools/base/+/refs/heads/studio-master-dev/build-system/gradle-core/src/main/resources/com/android/build/gradle\n+-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*\n+-optimizationpasses 5\n+-allowaccessmodification\n+-keepattributes *Annotation*,Signature,InnerClasses,EnclosingMethod\n+-keepclassmembers enum * {\n+  public static **[] values();\n+  public static ** valueOf(java.lang.String);\n+}\n+\n+-keep enum com.google.gson.functional.EnumWithObfuscatedTest$Gender\n+-keep class com.google.gson.functional.EnumWithObfuscatedTest {\n+  public void test*();\n+  protected void setUp();\n+}\n+\n+-dontwarn com.google.gson.functional.EnumWithObfuscatedTest\n+-dontwarn junit.framework.TestCase\n+, @@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, @@ -11,7 +11,7 @@\n \n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson-parent</artifactId>\n-  <version>2.8.7-SNAPSHOT</version>\n+  <version>2.8.9-SNAPSHOT</version>\n   <packaging>pom</packaging>\n \n   <name>Gson Parent</name>\n@@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>4.12</version>\n+        <version>4.13.2</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>\n@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.4</version>\n+          <version>3.3.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n@@ -106,7 +106,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>5.1.2</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>\n@@ -117,10 +117,15 @@\n         <artifactId>maven-release-plugin</artifactId>\n         <version>2.5.3</version>\n         <dependencies>\n+          <dependency>\n+            <groupId>org.apache.maven.scm</groupId>\n+            <artifactId>maven-scm-api</artifactId>\n+            <version>1.11.3</version>\n+          </dependency>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9.5</version>\n+            <version>1.11.3</version>\n           </dependency>\n         </dependencies>\n         <configuration>, @@ -76,7 +76,7 @@\n     <dependency>\r\n       <groupId>junit</groupId>\r\n       <artifactId>junit</artifactId>\r\n-      <version>4.12</version>\r\n+      <version>4.13.1</version>\r\n       <scope>test</scope>\r\n     </dependency>\r\n     \r, ", 459, 84, "\"added, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, modified, added, added, modified, modified, added, modified, modified, modified, \"", 543], 1], ["1712", "Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessible", "richard hernandez", "rhernandez35", "08/04/21, 12:27:54 AM", "I'm the lucky owner of a post-jigsaw Java platform that has restrictive security manager installed. Failing to catch the `SecurityException` thrown by a cross-classloader `getDeclaredField` call in `UnsafeReflectionAllocator::getOverrideField` prevents any Gson instances from being created.\r\n\r\nI'm hoping the fallback behavior in this class will be enough for us to use Gson without having to loosen our security policy.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1712) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1712) for more info**.\n\n<!-- ok --> =||= This looks reasonable. Thanks for the carefully-constructed test! =||= ", ["1712", "Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessible", "richard hernandez", "rhernandez35", "08/04/21, 12:27:54 AM", "I'm the lucky owner of a post-jigsaw Java platform that has restrictive security manager installed. Failing to catch the `SecurityException` thrown by a cross-classloader `getDeclaredField` call in `UnsafeReflectionAllocator::getOverrideField` prevents any Gson instances from being created.\n\nI'm hoping the fallback behavior in this class will be enough for us to use Gson without having to loosen our security policy.", "NaN"], ["Richard Hernandez", "Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessible", "05/27/20, 03:12:06 AM", "Richard Hernandez", "b39494dbe68f91045850778cac4b661b38beb615", ["gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java", "gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java"], "@@ -79,7 +79,7 @@ private static Object getUnsafeInstance() {\n   private static Field getOverrideField() {\n     try {\n       return AccessibleObject.class.getDeclaredField(\"override\");\n-    } catch (NoSuchFieldException e) {\n+    } catch (Exception e) {\n       return null;\n     }\n   }, @@ -15,10 +15,12 @@\n  */\n package com.google.gson.internal.reflect;\n \n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.lang.reflect.Field;\n+import java.security.Permission;\n \n import org.junit.Test;\n \n@@ -41,6 +43,30 @@ public void testMakeAccessibleWithUnsafe() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {\n+    final Permission accessDeclaredMembers = new RuntimePermission(\"accessDeclaredMembers\");\n+    final SecurityManager original = System.getSecurityManager();\n+    SecurityManager restrictiveManager = new SecurityManager() {\n+      @Override\n+      public void checkPermission(Permission perm) {\n+        if (accessDeclaredMembers.equals(perm)) {\n+          throw new SecurityException(\"nope\");\n+        }\n+      }\n+    };\n+    System.setSecurityManager(restrictiveManager);\n+\n+    try {\n+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();\n+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField(\"a\");\n+      assertFalse(\"override field should have been inaccessible\", accessor.makeAccessibleWithUnsafe(field));\n+      accessor.makeAccessible(field);\n+    } finally {\n+      System.setSecurityManager(original);\n+    }\n+  }\n+\n   @SuppressWarnings(\"unused\")\n   private static final class ClassWithPrivateFinalFields {\n     private final String a;, ", 27, 1, "\"modified, modified, \"", 28], 1], ["1713", "java.lang.IllegalStateException: Nesting problem.", "willwaywang6", "jhwsx", "05/28/20, 10:59:24 PM", "I want to use custom `TypeAdapter` to serialize a nest class.\r\nBut an exception occured:\r\n```text\r\nException in thread \"main\" java.lang.IllegalStateException: Nesting problem.\r\n\tat com.google.gson.stream.JsonWriter.beforeValue(JsonWriter.java:655)\r\n\tat com.google.gson.stream.JsonWriter.open(JsonWriter.java:326)\r\n\tat com.google.gson.stream.JsonWriter.beginObject(JsonWriter.java:309)\r\n\tat com.example.gsonlib._01_basic_use.Test$AddressTypeAdapter.write(Test.java:30)\r\n\tat com.example.gsonlib._01_basic_use.Test$StudentTypeAdapter.write(Test.java:53)\r\n\tat com.example.gsonlib._01_basic_use.Test$StudentTypeAdapter.write(Test.java:41)\r\n\tat com.google.gson.Gson.toJson(Gson.java:704)\r\n\tat com.google.gson.Gson.toJson(Gson.java:683)\r\n\tat com.google.gson.Gson.toJson(Gson.java:638)\r\n\tat com.google.gson.Gson.toJson(Gson.java:618)\r\n\tat com.example.gsonlib._01_basic_use.Test.main(Test.java:22)\r\n```\r\nMy code is the following:\r\n```java\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        Student student = new Student(\"wzc\", 18, new Student.Address(\"earth\"));\r\n        Gson gson2 = new GsonBuilder()\r\n                .serializeNulls()\r\n                .registerTypeAdapter(Student.class, new StudentTypeAdapter(new AddressTypeAdapter()))\r\n                .create();\r\n        String json2 = gson2.toJson(student);\r\n        System.out.println(json2);\r\n    }\r\n\r\n    static class AddressTypeAdapter extends TypeAdapter<Student.Address> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Student.Address value) throws IOException {\r\n            out.beginObject();\r\n            out.name(\"address\").value(value.nation);\r\n            out.endObject();\r\n        }\r\n\r\n        @Override\r\n        public Student.Address read(JsonReader in) throws IOException {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static class StudentTypeAdapter extends TypeAdapter<Student> {\r\n        private AddressTypeAdapter mAddressTypeAdapter;\r\n\r\n        public StudentTypeAdapter(AddressTypeAdapter addressTypeAdapter) {\r\n            mAddressTypeAdapter = addressTypeAdapter;\r\n        }\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Student student) throws IOException {\r\n            out.beginObject()\r\n                    .name(\"name\").value(student.name)\r\n                    .name(\"age\").value(student.age);\r\n            mAddressTypeAdapter.write(out, student.adress);\r\n            out.endObject();\r\n        }\r\n\r\n        @Override\r\n        public Student read(JsonReader in) throws IOException {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n```\r\n```java\r\npublic class Student {\r\n    public String name;\r\n    public int age;\r\n    public Address adress;\r\n\r\n    public Student() {\r\n    }\r\n\r\n    public Student(String name, int age, Address adress) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.adress = adress;\r\n    }\r\n\r\n    public static class Address {\r\n        public String nation;\r\n\r\n        public Address(String nation) {\r\n            this.nation = nation;\r\n        }\r\n    }\r\n}\r\n```", "```java\r\nmAddressTypeAdapter.write(out, student.adress);\r\n```\r\n\r\nThis is a dangling call. Use `out.name(\"address\")` before it. =||= @lyubomyr-shaydariv It really works. However, I wonder that what a dangling call means. Moreover, could we have other workaround to solve this problem? =||= @jhwsx \r\nI meant that Gson prevents your code from creating an illegal JSON document with the \"address\" property value not bound to the \"address\" property key, therefore the inner objects would get dangling:\r\n\r\n```json\r\n{\r\n  \"name\": \"wzc\",\r\n  \"age\": 18,\r\n  {\r\n    \"nation\": \"Earth\"\r\n  }\r\n}\r\n```\r\n\r\nOnce you fix your code (the error is highlighted red at GitHub), the generated document becomes syntactically correct:\r\n\r\n```json\r\n{\r\n  \"name\": \"wzc\",\r\n  \"age\": 18,\r\n  \"address\": {\r\n    \"nation\": \"Earth\"\r\n  }\r\n}\r\n```\r\n =||= Well, dangling means that I intend to write a value without a corresponding key, which is not allowed by Gson, because of breaking key-value structure. Is my understanding right?\r\n =||= @jhwsx \r\nyes, if you're writing a JSON object (in curly braces `{...}`), you must write key/value pairs. You can't put anonymous values in objects as this is disallowed by the JSON grammar, not Gson (any sane JSON tool would reject such a JSON document). =||= Thanks a lot. =||= ", 0], ["1715", "Cannot deserialize the string end with '\\0' whether is in lenient mode or not", null, "Warkeeper", "06/04/20, 02:05:43 AM", "## Issue Description\r\n\r\nWhen deserialize a string which ends with '\\0' ,it shows this error:\r\n```\r\nCaused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 30 path $\r\n\tat com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1564)\r\n\tat com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1405)\r\n\tat com.google.gson.stream.JsonReader.doPeek(JsonReader.java:543)\r\n\tat com.google.gson.stream.JsonReader.peek(JsonReader.java:426)\r\n\tat com.google.gson.Gson.assertFullConsumption(Gson.java:904)\r\n\t... 4 more\r\n```\r\nIf set lenient to true, the error changes to:\r\n```\r\nException in thread \"main\" com.google.gson.JsonIOException: JSON document was not fully consumed.\r\n\tat com.google.gson.Gson.assertFullConsumption(Gson.java:905)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:898)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:846)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:817)\r\n\tat com.unionpay.magpie.util.GsonTest.main(GsonTest.java:13)\r\n```\r\n\r\n\r\n### How to reproduce it \r\nHere's the code.\r\n```java\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\npublic class GsonTest {\r\n    public static void main(String[] args) {\r\n        String appleStr = \"{\\\"color\\\":\\\"red\\\",\\\"weight\\\":200}\\0\";\r\n        Gson gson = new GsonBuilder().setLenient().create();\r\n        System.out.println(gson.fromJson(appleStr, Apple.class));\r\n    }\r\n\r\n    public static class Apple {\r\n        String color = \"red\";\r\n        int weight = 200;\r\n        @Override\r\n        public String toString() {\r\n            return \"Apple{\" +\r\n                    \"color='\" + color + '\\'' +\r\n                    \", weight=\" + weight +\r\n                    '}';\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r", "I think it's pretty usual that a C client produces a json string which is ended with '\\0', and the Java Client using gson to deserialize it.\r\nIs it possible to fix this issue? =||= > I think it's pretty usual that a C client produces a json string which is ended with '\\0'....\r\n\r\nI would say that it should not produce a `\\0`-terminated payload, and the string you provided is actually a _malformed_ JSON document, so Gson refuses to parse it.\r\n\r\n> Is it possible to fix this issue?\r\n\r\nYou can work around it by reading the JSON document via `JsonReader`, a reader that reads JSON tokens lazily:\r\n\r\n```java\r\nfinal Reader reader = new StringReader(\"{\\\"color\\\":\\\"red\\\",\\\"weight\\\":200}\\0\");\r\nfinal JsonReader jsonReader = new JsonReader(reader);\r\nfinal Apple apple = gson.fromJson(jsonReader, Apple.class);\r\nSystem.out.println(apple);\r\n```\r\n\r\nThis does not fail because `JsonReader` reads the backing reader/input stream token by token, and once it consumes the final `}`, it suspends parsing not failing at `\\0`. Once you ask it to parse/peek the next token with `peek()`, you'll get the syntax error exception:\r\n\r\n```\r\n...\r\njsonReader.peek();\r\n```\r\n\r\nA brief conclusion:\r\n\r\n* It's most likely not a bug and Gson seems to be initially designed like that.\r\n* It's recommended to use readers backed with input streams, not strings (deserializing the JSON document using `StringReader` is actually reading a string), for performance reasons.\r\n* The JSON producer you're consuming produces invalid JSON documents and should be fixed if possible.\r\n* You might also want to use `FilterReader`/`PushbackReader` to detect such malformed documents if you have to work with other libraries. =||= Thanks for reply. @lyubomyr-shaydariv \r\nI can understand that Gson (with default configuration) refuses to deserialize a '\\0'-ended string since it's not a valid JSON. \r\nHowever, when I set lenient to true, I may except that Gson will accept this kind of \"JSON\".  Do I understand the lenient mode correctly?\r\n =||= @Warkeeper \r\nTo some extent. The lenient mode handles other special cases: https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/stream/JsonReader.java#L295 (some of the items are weird IMHO). Your case is out of the list, but your issue is that `Gson.deserialize` (at least in the `java.lang.String` and `java.io.Reader` overloads) first deserializes the JSON document,and **then** checks whether the input document was fully consumed: the dangling `\\0` character is neither a valid JSON token (as `jsonReader.peek()` fails above right after the deserialization), nor the end of the JSON document. =||= Got it.Thanks a lot. @lyubomyr-shaydariv \r\nFor now I will work around it by using JsonReader , and maybe in the future I would make a pr to add this case for the lenient mode.\r\nThis issue could be closed for now. =||= ", 0], ["1722", "TypeAdapters don't apply to map keys", "James", "Nycto", "06/23/20, 05:39:52 PM", "When converting a Map to Json, `TypeAdapters` are not being used to generate the keys. Here is a minimal repro:\r\n\r\n```java\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.google.gson.TypeAdapter;\r\nimport com.google.gson.stream.JsonReader;\r\nimport com.google.gson.stream.JsonWriter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\n\r\nclass Main {\r\n\r\n    /** An example class that just wraps a String. */\r\n    static class Thinger {\r\n        public final String key;\r\n\r\n        Thinger(String key) {\r\n            this.key = key;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"Thinger(\" + key + \")\";\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (o == null || getClass() != o.getClass()) return false;\r\n            Thinger that = (Thinger) o;\r\n            return Objects.equals(key, that.key);\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(key);\r\n        }\r\n    }\r\n\r\n    /** A TypeAdapter that can encode and decode a Thinger */\r\n    static class ThingerAdapter extends TypeAdapter<Thinger> {\r\n\r\n        @Override\r\n        public void write(JsonWriter out, Thinger value) throws IOException {\r\n            out.value(value.key);\r\n        }\r\n\r\n        @Override\r\n        public Thinger read(JsonReader in) throws IOException {\r\n            return new Thinger(in.nextString());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        // Sample data with custom keys and values\r\n        final Map<Thinger, Thinger> map = new HashMap<>();\r\n        map.put(new Thinger(\"Foo\"), new Thinger(\"Bar\"));\r\n        map.put(new Thinger(\"Baz\"), new Thinger( \"Qux\"));\r\n\r\n        // Register the adapter we defined above\r\n        final Gson gson = new GsonBuilder().registerTypeAdapter(Thinger.class, new ThingerAdapter()).create();\r\n\r\n        // Print the encoded JSON\r\n        System.out.println(gson.toJson(map));\r\n    }\r\n}\r\n```\r\n\r\nI expect this to print:\r\n\r\n```\r\n{\"Foo\":\"Bar\",\"Baz\":\"Qux\"}\r\n```\r\n\r\nBut it actually calls the `toString` method and prints:\r\n\r\n```\r\n{\"Thinger(Foo)\":\"Bar\",\"Thinger(Baz)\":\"Qux\"}\r\n```\r\n\r\nI'm not familiar with your code base, but it looks like the problem is related to [this line of code](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L207)", "I think they don't have to. If you'd change the type adapter so that it writes/reads other than just a single string (including nulls) how would this type adapter recognize the  context and distinguish between map keys that must be strings and map values of arbitrary JSON structure? =||= Yup, I definitely agree that it\u2019s problematic. But I think the spirit of this request is that some mechanism should exist for encoding keys. For example, a new function could be added to TypeAdapter that is just responsible for encoding a key name. =||= Actually, it looks like there is already a built-in mechanism for handling complex JsonElements as keys in that file:\r\n\r\nhttps://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L245-L262\r\n\r\nThat appears to be for when you're encoding JsonElements, not encoding into a stream, though. However, I think it definitely defines a precedent. =||= Looks like this is my miss. Picking through the code more, this functionality is hidden behind a feature flag, `enableComplexMapKeySerialization`:\r\n\r\n```Java\r\nfinal Gson gson = new GsonBuilder()\r\n    .enableComplexMapKeySerialization()\r\n    .registerTypeAdapter(Thinger.class, new ThingerAdapter())\r\n    .create();\r\n```\r\n\r\nBased on the implementation, I understand why this is hidden behind a flag -- it has to instantiate JsonElement instances for every key, which is slow. Would you be amenable to adding functionality to `TypeAdapter`? I'm thinking a function like this would solve the problem without changing the performance much:\r\n\r\n```Java\r\npublic abstract class TypeAdapter<T> {\r\n  // ... SNIP ...\r\n  public String toKey(T value) throws IOException {\r\n    return String.valueOf(value);\r\n  }\r\n  // ... SNIP ...\r\n}\r\n```\r\n\r\nThis would allow the default behaviour to continue, shouldn't break any existing consumers, would allow custom key serialization, maintains type safety, and should have reasonable performance.\r\n\r\nThoughts? Again, I'm new to your code base so I assume I'm missing some nuances here. =||= >  a new function could be added to TypeAdapter that is just responsible for encoding a key name.\r\n\r\nYou could just implement your custom map type adapter factory that might do the job for you or provide a transformed `Map<String, ...>` _before_ its gets to the `toJson` method. The reason why the default map type adapter deals with strings only is that JSON object keys **must** be strings, that also keeps the type adapter API more simple requiring no provided context or adding special methods, whereas type adapters are designed for JSON values of arbitratry structure only. I'm afraid it's not a good idea to add a new JSON objects-only method to type adapters (I can see at least two pitfalls: sacrificing the type adapter class design for JSON objects; potentially complex reuse because of inheritance). By the way, type JsonReader and JsonWriter use `nextName()` and `name()` for JSON object keys, not `nextString()`/`value(String)`.\r\n\r\n> Actually, it looks like there is already a built-in mechanism for handling complex JsonElements as keys in that file:\r\n\r\nIt does not produce/consume a JSON object: it represents a map using a two-dimensional JSON array (with n x 2 elements, literally `[[k1, v1], [k2, v2], ...]`), since arrays can hold arbitrary JSON elements, including null values. This is where `keyToString` comes into play.\r\n\r\nI do believe that if you find that the `Map`-dedicated type adapter does not work for you, you might reimplement it not diving deep into the core design.\r\n\r\n```java\r\nfinal class TransformedKeyMapTypeAdapterFactory\r\n\t\timplements TypeAdapterFactory {\r\n\r\n\tprivate static final Type[] rawKeyValueTypes = { Object.class, Object.class };\r\n\r\n\tprivate final IKeyConverter keyConverter;\r\n\tprivate final Function<? super Type, ? extends Map<?, ?>> createMap;\r\n\r\n\tprivate TransformedKeyMapTypeAdapterFactory(final IKeyConverter keyConverter, final Function<? super Type, ? extends Map<?, ?>> createMap) {\r\n\t\tthis.keyConverter = keyConverter;\r\n\t\tthis.createMap = createMap;\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory create(final IKeyConverter keyConverter) {\r\n\t\treturn new TransformedKeyMapTypeAdapterFactory(keyConverter, MapFactory::create);\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory create(final IKeyConverter keyConverter, final Function<? super Type, ? extends Map<?, ?>> createMap) {\r\n\t\treturn new TransformedKeyMapTypeAdapterFactory(keyConverter, createMap);\r\n\t}\r\n\r\n\t@Override\r\n\t@Nullable\r\n\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\tif ( !Map.class.isAssignableFrom(typeToken.getRawType()) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tfinal Type mapType = typeToken.getType();\r\n\t\t// insufficient type check for simplicity\r\n\t\tfinal Type[] actualTypeArguments = mapType instanceof ParameterizedType\r\n\t\t\t\t? ((ParameterizedType) mapType).getActualTypeArguments()\r\n\t\t\t\t: rawKeyValueTypes;\r\n\t\tfinal Type keyType = actualTypeArguments[0];\r\n\t\tfinal Type valueType = actualTypeArguments[1];\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal TypeAdapter<Object> valueTypeAdapter = gson.getAdapter((TypeToken<Object>) TypeToken.get(valueType));\r\n\t\tfinal TypeAdapter<? extends Map<?, ?>> mapTypeAdapter = TransformedKeyMapTypeAdapter.create(\r\n\t\t\t\tkey -> keyConverter.toName(keyType, key),\r\n\t\t\t\tname -> keyConverter.fromName(keyType, name),\r\n\t\t\t\t() -> {\r\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t\t\tfinal Map<Object, Object> castMap = (Map<Object, Object>) createMap.apply(mapType);\r\n\t\t\t\t\treturn castMap;\r\n\t\t\t\t},\r\n\t\t\t\tvalueTypeAdapter\r\n\t\t);\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal TypeAdapter<T> castMapTypeAdapter = (TypeAdapter<T>) mapTypeAdapter;\r\n\t\treturn castMapTypeAdapter;\r\n\t}\r\n\r\n\tprivate static final class TransformedKeyMapTypeAdapter<K, V>\r\n\t\t\textends TypeAdapter<Map<K, V>> {\r\n\r\n\t\tprivate final Function<? super K, String> toName;\r\n\t\tprivate final Function<? super String, ? extends K> fromName;\r\n\t\tprivate final Supplier<? extends Map<K, V>> createMap;\r\n\t\tprivate final TypeAdapter<V> valueTypeAdapter;\r\n\r\n\t\tprivate TransformedKeyMapTypeAdapter(final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName,\r\n\t\t\t\tfinal Supplier<? extends Map<K, V>> createMap, final TypeAdapter<V> valueTypeAdapter) {\r\n\t\t\tthis.toName = toName;\r\n\t\t\tthis.fromName = fromName;\r\n\t\t\tthis.createMap = createMap;\r\n\t\t\tthis.valueTypeAdapter = valueTypeAdapter;\r\n\t\t}\r\n\r\n\t\tprivate static <K, V> TypeAdapter<Map<K, V>> create(final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName,\r\n\t\t\t\tfinal Supplier<? extends Map<K, V>> createMap, final TypeAdapter<V> valueTypeAdapter) {\r\n\t\t\treturn new TransformedKeyMapTypeAdapter<>(toName, fromName, createMap, valueTypeAdapter)\r\n\t\t\t\t\t.nullSafe();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\t@SuppressWarnings(\"resource\")\r\n\t\tpublic void write(final JsonWriter out, final Map<K, V> map)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tout.beginObject();\r\n\t\t\tfor ( final Map.Entry<K, V> e : map.entrySet() ) {\r\n\t\t\t\tout.name(toName.apply(e.getKey()));\r\n\t\t\t\tvalueTypeAdapter.write(out, e.getValue());\r\n\t\t\t}\r\n\t\t\tout.endObject();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Map<K, V> read(final JsonReader in)\r\n\t\t\t\tthrows IOException {\r\n\t\t\tin.beginObject();\r\n\t\t\tfinal Map<K, V> map = createMap.get();\r\n\t\t\twhile ( in.hasNext() ) {\r\n\t\t\t\tfinal String name = in.nextName();\r\n\t\t\t\tfinal K key = fromName.apply(name);\r\n\t\t\t\tfinal V value = valueTypeAdapter.read(in);\r\n\t\t\t\tfinal V replaced = map.put(key, value);\r\n\t\t\t\tif ( replaced != null ) {\r\n\t\t\t\t\tthrow new JsonSyntaxException(\"duplicate key: \" + key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tin.endObject();\r\n\t\t\treturn map;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\ninterface IKeyConverter {\r\n\r\n\t@Nonnull\r\n\t<K> String toName(@Nonnull Type type, @Nullable K key);\r\n\r\n\t@Nullable\r\n\t<K> K fromName(@Nonnull Type type, @Nonnull String name);\r\n\r\n}\r\n```\r\n\r\n```java\r\nfinal class KeyConverter\r\n\t\timplements IKeyConverter {\r\n\r\n\tprivate final BiFunction<? super Type, Object, String> toName;\r\n\tprivate final BiFunction<? super Type, ? super String, Object> fromName;\r\n\r\n\tprivate KeyConverter(final BiFunction<? super Type, Object, String> toName, final BiFunction<? super Type, ? super String, Object> fromName) {\r\n\t\tthis.toName = toName;\r\n\t\tthis.fromName = fromName;\r\n\t}\r\n\r\n\tpublic static IKeyConverter of(final BiFunction<? super Type, Object, String> toName,\r\n\t\t\tfinal BiFunction<? super Type, ? super String, Object> fromName) {\r\n\t\treturn new KeyConverter(toName, fromName);\r\n\t}\r\n\r\n\t@Nonnull\r\n\t@Override\r\n\tpublic <K> String toName(@Nonnull final Type type, @Nullable final K key) {\r\n\t\treturn toName.apply(type, key);\r\n\t}\r\n\r\n\t@Nullable\r\n\t@Override\r\n\tpublic <K> K fromName(@Nonnull final Type type, @Nonnull final String name) {\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\tfinal K key = (K) fromName.apply(type, name);\r\n\t\treturn key;\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nfinal class KeyConverterBuilder {\r\n\r\n\t@AllArgsConstructor(access = AccessLevel.PRIVATE)\r\n\tprivate static final class Mapper<K> {\r\n\r\n\t\tprivate final Function<? super K, String> toName;\r\n\t\tprivate final Function<? super String, ? extends K> fromName;\r\n\r\n\t}\r\n\r\n\tprivate final Map<Class<?>, Mapper<?>> classMappers = new HashMap<>();\r\n\tprivate final Map<Class<?>, Mapper<?>> subClassMappers = new HashMap<>();\r\n\r\n\tprivate KeyConverterBuilder() {\r\n\t}\r\n\r\n\tstatic KeyConverterBuilder create() {\r\n\t\treturn new KeyConverterBuilder();\r\n\t}\r\n\r\n\t<K> KeyConverterBuilder forClass(final Class<K> clazz, final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName) {\r\n\t\tclassMappers.put(clazz, new Mapper<>(toName, fromName));\r\n\t\treturn this;\r\n\t}\r\n\r\n\t<K> KeyConverterBuilder forSubClass(final Class<K> clazz, final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName) {\r\n\t\tsubClassMappers.put(clazz, new Mapper<>(toName, fromName));\r\n\t\treturn this;\r\n\t}\r\n\r\n\tIKeyConverter build() {\r\n\t\treturn KeyConverter.of(\r\n\t\t\t\t(type, key) -> toName(type, key, classMappers, subClassMappers),\r\n\t\t\t\t(type, name) -> fromName(type, name, classMappers, subClassMappers)\r\n\t\t);\r\n\t}\r\n\r\n\tprivate static <K> String toName(final Type type, final K key, final Map<Class<?>, Mapper<?>> classMappers,\r\n\t\t\tfinal Map<Class<?>, Mapper<?>> subClassMappers) {\r\n\t\t@Nullable\r\n\t\tfinal Mapper<K> classMapper = resolveMapper(type, classMappers, subClassMappers);\r\n\t\tif ( classMapper == null ) {\r\n\t\t\treturn String.valueOf(key);\r\n\t\t}\r\n\t\treturn classMapper.toName.apply(key);\r\n\t}\r\n\r\n\tprivate static <K> K fromName(@Nonnull final Type type, @Nonnull final String name, final Map<Class<?>, Mapper<?>> classMappers,\r\n\t\t\tfinal Map<Class<?>, Mapper<?>> subClassMappers) {\r\n\t\t@Nullable\r\n\t\tfinal Mapper<K> classMapper = resolveMapper(type, classMappers, subClassMappers);\r\n\t\tif ( classMapper == null ) {\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot convert \" + name + \" to \" + type);\r\n\t\t}\r\n\t\treturn classMapper.fromName.apply(name);\r\n\t}\r\n\r\n\t@Nullable\r\n\tprivate static <K> Mapper<K> resolveMapper(final Type type, final Map<Class<?>, Mapper<?>> classMappers,\r\n\t\t\tfinal Map<Class<?>, Mapper<?>> subClassMappers) {\r\n\t\t// TODO cache\r\n\t\tif ( type instanceof Class ) {\r\n\t\t\tfinal Class<?> clazz = (Class<?>) type;\r\n\t\t\t@Nullable\r\n\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\tfinal Mapper<K> classMapper = (Mapper<K>) classMappers.get(type);\r\n\t\t\tif ( classMapper != null ) {\r\n\t\t\t\treturn classMapper;\r\n\t\t\t}\r\n\t\t\tfor ( final Map.Entry<Class<?>, Mapper<?>> e : subClassMappers.entrySet() ) {\r\n\t\t\t\tif ( e.getKey().isAssignableFrom(clazz) ) {\r\n\t\t\t\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t\t\t\tfinal Mapper<K> subClassMapper = (Mapper<K>) e.getValue();\r\n\t\t\t\t\treturn subClassMapper;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```java\r\nfinal class MapFactory {\r\n\r\n\tprivate MapFactory() {\r\n\t}\r\n\r\n\tstatic <K, V> Map<K, V> create(final Type mapType) {\r\n\t\tif ( mapType instanceof Class ) {\r\n\t\t\treturn create((Class<?>) mapType);\r\n\t\t}\r\n\t\tif ( mapType instanceof ParameterizedType ) {\r\n\t\t\tfinal ParameterizedType mapParameterizedType = (ParameterizedType) mapType;\r\n\t\t\treturn create(mapParameterizedType.getRawType());\r\n\t\t}\r\n\t\tthrow new IllegalArgumentException(\"Cannot resolve a default map instance for \" + mapType);\r\n\t}\r\n\r\n\tprivate static <K, V> Map<K, V> create(final Class<?> mapClass) {\r\n\t\tif ( LinkedHashMap.class.isAssignableFrom(mapClass) ) {\r\n\t\t\treturn new LinkedHashMap<>();\r\n\t\t}\r\n\t\tif ( HashMap.class.isAssignableFrom(mapClass) ) {\r\n\t\t\treturn new HashMap<>();\r\n\t\t}\r\n\t\tif ( TreeMap.class.isAssignableFrom(mapClass) ) {\r\n\t\t\treturn new TreeMap<>();\r\n\t\t}\r\n\t\tif ( Map.class.isAssignableFrom(mapClass) ) {\r\n\t\t\treturn new LinkedHashMap<>();\r\n\t\t}\r\n\t\tthrow new IllegalArgumentException(\"Cannot create a default map instance for \" + mapClass);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n----\r\n\r\n```java\r\n@Data\r\nprivate static final class Name {\r\n\r\n\tprivate final String value;\r\n\r\n}\r\n\r\nprivate static final Type nameToNameMapType = new TypeToken<Map<Name, Name>>() {}.getType();\r\n\r\nprivate static final Gson gson = new GsonBuilder()\r\n\t\t.disableHtmlEscaping()\r\n\t\t.registerTypeAdapterFactory(TransformedKeyMapTypeAdapterFactory.create(\r\n\t\t\t\tKeyConverterBuilder.create()\r\n\t\t\t\t\t\t.forClass(Name.class, name -> name.value, Name::new)\r\n\t\t\t\t\t\t.build()\r\n\t\t))\r\n\t\t.create();\r\n\r\npublic static void main(final String... args) {\r\n\tfinal Map<Name, Name> before = ImmutableMap.of(new Name(\"foo\"), new Name(\"bar\"));\r\n\tSystem.out.println(before);\r\n\tfinal String json = gson.toJson(before, nameToNameMapType);\r\n\tSystem.out.println(json);\r\n\tfinal Map<Name, Name> after = gson.fromJson(json, nameToNameMapType);\r\n\tSystem.out.println(after);\r\n\tSystem.out.println(before.equals(after));\r\n}\r\n```\r\n\r\n```\r\n{I1722.Name(value=foo)=I1722.Name(value=bar)}\r\n{\"foo\":{\"value\":\"bar\"}}\r\n{I1722.Name(value=foo)=I1722.Name(value=bar)}\r\ntrue\r\n``` =||= Thanks for your help with this! I'm going to go ahead and resolve this issue. Seems like, at a philosophical level, it's believed this should be the responsibility of the library consumers and not the library itself.\r\n\r\nCheers! =||= ", 0], ["1725", "object values has \"\\u\", to json string .it has problem", "taolin", "stl714", "06/23/20, 01:02:22 AM", "when I use gson to convert a object to a json string, I found a problem. When the object which field value contains \"\\u\", gson convert object to json string will generate two \"\\\\\"  ,it comes \"\\\\u\". Result json like \r\n\r\nobject field     \r\n     path = /abc\\u6d4b\\u8bd5test.pdf\r\njson string \r\n{\"autorename\":true,\"mode\":\"add\",\"mute\":false,\"path\":\"/abc\\\\u6d4b\\\\u8bd5test.pdf\",\"strict_conflict\":false}", "Gson should not process these characters in any way. Are you sure you're not confused with these two:\r\n\r\n```java\r\nSystem.out.println(\"/abc\\u6d4b\\u8bd5test.pdf\");\r\nSystem.out.println(\"/abc\\\\u6d4b\\\\u8bd5test.pdf\");\r\n```\r\n\r\n? =||=  Sorry, I make a mistake. Thanks your suggestion. =||= ", 0], ["1728", "Case insensitive serialization and deserialization not supported", "ANKUR PRAMANIK", "ankurpramanik", "06/26/20, 02:05:51 PM", "I have worked with GSON library but one thing bothered me that serialization and deserialization in case insensitive  manner is not supported. Suppose in json key is \"Sort\"  and \"SOrt\" both will consider in the time of deserialization, We can use @SerializedName(value=\"Sort\", alternatives={\"SOrt\"}), but how many combination will I have I don't know. It may be \"sORT\" or \"sorT\", \"sOrt\". I can add all these things in alternatives={...} but in case of long word like \"SortKunde\" how many combination I will write? So please provide Case insensitivity feature", "> serialization and deserialization in case insensitive manner is not supported\r\n\r\nAnd probably should not be supported. Why do you need Gson to support such specific cases? What if you can merely fix your API so that there were no a guess game for the properties you're trying to deserialize? Since you don't really need it to be a part of Gson, and Gson is able to provide you enough tools, you can implement like this:\r\n\r\n```java\r\nabstract class DelegateJsonReader\r\n\t\textends JsonReader {\r\n\r\n\tprivate static final Reader noRead = new Reader() {\r\n\t\t@Override public int read(final char[] cbuf, final int off, final int len) { return -1; }\r\n\t\t@Override public void close() { /* do nothing */ }\r\n\t};\r\n\r\n\tprotected final JsonReader delegate;\r\n\r\n\tprotected DelegateJsonReader(final JsonReader delegate) {\r\n\t\tsuper(noRead);\r\n\t\tthis.delegate = delegate;\r\n\t}\r\n\r\n\t// @formatter:off\r\n\t@Override public void beginArray() throws IOException { delegate.beginArray(); }\r\n\t@Override public void endArray() throws IOException { delegate.endArray(); }\r\n\t@Override public void beginObject() throws IOException { delegate.beginObject(); }\r\n\t@Override public void endObject() throws IOException { delegate.endObject(); }\r\n\t@Override public boolean hasNext() throws IOException { return delegate.hasNext(); }\r\n\t@Override public JsonToken peek() throws IOException { return delegate.peek(); }\r\n\t@Override public String nextName() throws IOException { return delegate.nextName(); }\r\n\t@Override public String nextString() throws IOException { return delegate.nextString(); }\r\n\t@Override public boolean nextBoolean() throws IOException { return delegate.nextBoolean(); }\r\n\t@Override public void nextNull() throws IOException { delegate.nextNull(); }\r\n\t@Override public double nextDouble() throws IOException { return delegate.nextDouble(); }\r\n\t@Override public long nextLong() throws IOException { return delegate.nextLong(); }\r\n\t@Override public int nextInt() throws IOException { return delegate.nextInt(); }\r\n\t@Override public void close() throws IOException { delegate.close(); }\r\n\t@Override public void skipValue() throws IOException { delegate.skipValue(); }\r\n\t@Override public String toString() { return delegate.toString(); }\r\n\t@Override public String getPath() { return delegate.getPath(); }\r\n\t// @formatter:on\r\n\r\n}\r\n```\r\n\r\n```java\r\nfinal class CaseInsensitiveTypeAdapterFactory\r\n\t\timplements TypeAdapterFactory {\r\n\r\n\tprivate static final TypeAdapterFactory instance = new CaseInsensitiveTypeAdapterFactory();\r\n\r\n\tprivate CaseInsensitiveTypeAdapterFactory() {\r\n\t}\r\n\r\n\tstatic TypeAdapterFactory getInstance() {\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t@Override\r\n\t@Nullable\r\n\tpublic <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {\r\n\t\tfinal TypeAdapter<T> delegateAdapter = gson.getDelegateAdapter(this, typeToken);\r\n\t\tif ( !(delegateAdapter instanceof ReflectiveTypeAdapterFactory.Adapter) ) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn new TypeAdapter<T>() {\r\n\t\t\t@Override\r\n\t\t\tpublic void write(final JsonWriter out, final T value)\r\n\t\t\t\t\tthrows IOException {\r\n\t\t\t\tdelegateAdapter.write(out, value);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic T read(final JsonReader in)\r\n\t\t\t\t\tthrows IOException {\r\n\t\t\t\tfinal DelegateJsonReader delegateJsonReader = new DelegateJsonReader(in) {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic String nextName()\r\n\t\t\t\t\t\t\tthrows IOException {\r\n\t\t\t\t\t\treturn super.nextName().toLowerCase();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void close() {\r\n\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treturn delegateAdapter.read(delegateJsonReader);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n}\r\n```\r\n\r\nAnd the unit test that covers all possible 512 (!) \"sortkunde\" values:\r\n\r\n```java\r\nprivate static final String UNIQUE_VALUE = UUID.randomUUID().toString();\r\n\r\nprivate static final Gson gson = new GsonBuilder()\r\n\t\t.disableHtmlEscaping()\r\n\t\t.registerTypeAdapterFactory(CaseInsensitiveTypeAdapterFactory.getInstance())\r\n\t\t.create();\r\n\r\nprivate static final class Wrapper {\r\n\r\n\tprivate static final String ALTERNATE = \"sortkunde\";\r\n\r\n\t@SerializedName(value = \"sort\", alternate = ALTERNATE)\r\n\tfinal String sort = null;\r\n\r\n}\r\n\r\nprivate static Stream<Arguments> test() {\r\n\tfinal Set<Character>[] sets = Wrapper.ALTERNATE.chars()\r\n\t\t\t.<Set<Character>>mapToObj(ch -> ImmutableSet.of((char) Character.toLowerCase(ch), (char) Character.toUpperCase(ch)))\r\n\t\t\t.toArray((IntFunction<Set<Character>[]>) Set[]::new);\r\n\treturn Sets.cartesianProduct(sets)\r\n\t\t\t.stream()\r\n\t\t\t.map(strings -> strings.stream().map(Object::toString).collect(Collectors.joining()))\r\n\t\t\t.<JsonElement>map(s -> {\r\n\t\t\t\tJsonObject jsonObject = new JsonObject();\r\n\t\t\t\tjsonObject.addProperty(s, UNIQUE_VALUE);\r\n\t\t\t\treturn jsonObject;\r\n\t\t\t})\r\n\t\t\t.map(Arguments::of);\r\n}\r\n\r\n@ParameterizedTest\r\n@MethodSource\r\npublic void test(final JsonElement json) {\r\n\tfinal Wrapper wrapper = gson.fromJson(json, Wrapper.class);\r\n\tSystem.out.println(json + \" => \" + wrapper.sort);\r\n\tAssertions.assertEquals(UNIQUE_VALUE, wrapper.sort);\r\n}\r\n```\r\n\r\nHere is a quick report from the unit test above, first 10 tests:\r\n\r\n```\r\n[1] {\"sortkunde\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[2] {\"sortkundE\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[3] {\"sortkunDe\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[4] {\"sortkunDE\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[5] {\"sortkuNde\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[6] {\"sortkuNdE\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[7] {\"sortkuNDe\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[8] {\"sortkuNDE\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[9] {\"sortkUnde\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n[10] {\"sortkUndE\":\"76e92ad2-8525-4bf5-b4d4-e7a84be6b90e\"}\r\n```\r\n\r\nThe idea behind this that:\r\n- you can modify the input JSON names streams and transform the names to lower case;\r\n- such names must appear in either `@SerializedName.value` or `@SerializedName.alternate`.\r\n =||= ", 0], ["1730", "com.google.gson.jsonsyntaxexception java.lang.illegalstateexception expected an int but was boolean", "Mrudula Choudary Amirneni", "mrudulamrudu", "07/07/20, 01:48:52 PM", "In my app I have search functionality, when ever user searches for something I make a network call fetch suggestions. When user clicks on any of the suggestion I am storing that POJO into shared preferences using Gson and when the screen loads fist I am fetching the stored data from the preferences and deserializing using Gson. It all worked fine but recently I have added ProductTier object to the search item, it never crashed during testing. But it started crashing after the release. I understood that the gson is throwing error while deserializing but I can't think of any scenario where I am passing an int instead of boolean.\r\n\r\n```\r\npublic class SearchItem implements Parcelable {\r\n\r\nprivate static final int ITEM_KEY_WORD = 0;\r\nprivate static final int ITEM_PRODUCT = 1;\r\n\r\n@SerializedName(\"name\")\r\nprivate String name;\r\n\r\n@SerializedName(\"itemKeyword\")\r\nprivate String itemKeyWord;\r\n\r\n@SerializedName(\"productId\")\r\nprivate String productId;\r\n\r\n@SerializedName(\"productTier\")\r\nprivate ProductTier productTier;\r\n\r\nprivate int itemType;\r\nprivate boolean isHeader = false;\r\nprivate boolean isPopular = false;\r\n\r\npublic SearchItem(String name, String productId){\r\n    this.name = name;\r\n    this.productId = productId;\r\n}\r\n\r\npublic SearchItem(String name, String itemKeyWord, String productId, int itemType,\r\n                  boolean isHeader, boolean isPopular) {\r\n    this.name = name;\r\n    this.itemKeyWord = itemKeyWord;\r\n    this.productId = productId;\r\n    this.itemType = itemType;\r\n    this.isHeader = isHeader;\r\n    this.isPopular = isPopular;\r\n}\r\n\r\nprivate SearchItem(Parcel in) {\r\n    this.name = in.readString();\r\n    this.itemKeyWord = in.readString();\r\n    this.productId = in.readString();\r\n    itemType = TextUtils.isEmpty(itemKeyWord) ? ITEM_PRODUCT : ITEM_KEY_WORD;\r\n    productTier = in.readParcelable(ProductTier.class.getClassLoader());\r\n}\r\n\r\npublic static final Creator<SearchItem> CREATOR = new Creator<SearchItem>() {\r\n    @Override\r\n    public SearchItem createFromParcel(Parcel in) {\r\n        return new SearchItem(in);\r\n    }\r\n\r\n    @Override\r\n    public SearchItem[] newArray(int size) {\r\n        return new SearchItem[size];\r\n    }\r\n};\r\n\r\npublic String getItemKeyWord() {\r\n    return itemKeyWord;\r\n}\r\n\r\npublic String getName() {\r\n    return name;\r\n}\r\n\r\npublic void setName(String name) {\r\n    this.name = name;\r\n}\r\n\r\npublic String getProductId() {\r\n    return productId;\r\n}\r\n\r\npublic int getItemType() {\r\n    return itemType;\r\n}\r\n\r\npublic void setItemType(int itemType) {\r\n    this.itemType = itemType;\r\n}\r\n\r\npublic boolean isHeader() {\r\n    return isHeader;\r\n}\r\n\r\npublic void setHeader(boolean header) {\r\n    isHeader = header;\r\n}\r\n\r\npublic boolean isPopular() {\r\n    return isPopular;\r\n}\r\n\r\npublic void setPopular(boolean popular) {\r\n    isPopular = popular;\r\n}\r\n\r\npublic ProductTier getProductTier() {\r\n    return productTier;\r\n}\r\n\r\n@Override\r\npublic int describeContents() {\r\n    return 0;\r\n}\r\n\r\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(name);\r\n    dest.writeString(itemKeyWord);\r\n    dest.writeString(productId);\r\n    dest.writeParcelable(productTier, flags);\r\n}\r\n\r\n@Override\r\npublic boolean equals(@Nullable Object obj) {\r\n    SearchItem that = (SearchItem) obj;\r\n    if (that == null) return false;\r\n    return this.name.equals(that.name);\r\n}\r\n}\r\n\r\n//\r\n\r\npublic class ProductTier implements Parcelable {\r\n\r\n@SerializedName(\"categoryId\")\r\nprivate String categoryId;\r\n\r\n@SerializedName(\"liquorTypeId\")\r\nprivate String liquorTypeId;\r\n\r\n@SerializedName(\"subCategoryId\")\r\nprivate String subCategoryId;\r\n\r\nprotected ProductTier(Parcel in) {\r\n    categoryId = in.readString();\r\n    liquorTypeId = in.readString();\r\n    subCategoryId = in.readString();\r\n}\r\n\r\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(categoryId);\r\n    dest.writeString(liquorTypeId);\r\n    dest.writeString(subCategoryId);\r\n}\r\n\r\n@Override\r\npublic int describeContents() {\r\n    return 0;\r\n}\r\n\r\npublic static final Creator<ProductTier> CREATOR = new Creator<ProductTier>() {\r\n    @Override\r\n    public ProductTier createFromParcel(Parcel in) {\r\n        return new ProductTier(in);\r\n    }\r\n\r\n    @Override\r\n    public ProductTier[] newArray(int size) {\r\n        return new ProductTier[size];\r\n    }\r\n};\r\n\r\npublic String getCategoryId() {\r\n    return categoryId;\r\n}\r\n\r\npublic String getLiquorTypeId() {\r\n    return liquorTypeId;\r\n}\r\n\r\npublic String getSubCategoryId() {\r\n    return subCategoryId;\r\n}\r\n}\r\n\r\nclass Utils {\r\n\r\n  public static ArrayList<SearchItem> getRecentSearches(Context context) {\r\n        ArrayList<SearchItem> searchItems = new ArrayList<>();\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        String list = preferences.getString(Constants.RECENT_SEARCHES, \"\");\r\n        try {\r\n            JSONArray jsonArray = new JSONArray(list);\r\n            if (jsonArray.length() > 0) {\r\n                Gson gsonVal = new Gson();\r\n                int i = 0;\r\n                while (i < jsonArray.length()) {\r\n                    searchItems.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class));\r\n                    i++;\r\n                }\r\n            }\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return searchItems;\r\n    }\r\n\r\n public static void storeSearchItemToRecentSearches(Context context, SearchItem searchItem) {\r\n        if (searchItem == null) return;\r\n        searchItem.setPopular(false);\r\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\r\n        SharedPreferences.Editor editor = preferences.edit();\r\n        String list = preferences.getString(Constants.RECENT_SEARCHES, \"\");\r\n        ArrayList<SearchItem> previousResults = new ArrayList<>();\r\n        try {\r\n            JSONArray jsonArray = new JSONArray(list);\r\n            if (jsonArray.length() > 0) {\r\n                Gson gsonVal = new Gson();\r\n                int i = 0;\r\n                while (i < jsonArray.length()) {\r\n                    previousResults.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class));\r\n                    i++;\r\n                }\r\n            }\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n  if (previousResults.size() == 5) {\r\n            previousResults.remove(previousResults.size() - 1);\r\n            previousResults.add(0, searchItem);\r\n        }else {\r\n            previousResults.add(0, searchItem);\r\n        }\r\n        Gson gson = new Gson();\r\n        String val = gson.toJson(previousResults);\r\n        editor.putString(Constants.RECENT_SEARCHES, val);\r\n        editor.apply();\r\n    }\r\n}\r\n```\r\n\r\nthe crash is at this line searchItems.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class)); in the getRecentSearches method.", "NaN", 0], ["1746", "I get a MalformedJsonException when there is a space in the json, using method fromJson", "Fabian Osorio", "fadavidos", "08/01/20, 03:05:48 PM", "I'm trying to convert from String to JsonObject, but I always get `com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 11 path $.text`.\r\n\r\nString (Json):\r\n`{\t\t\r\n        \"name\":\"event1\",\r\n        \"type\":\"2\",\r\n        \"message\":{\r\n        \t\"text\":\"my text\"\r\n        }\r\n}`\r\n\r\nCode:\r\n`private Function1<String, Try<JsonObject>> tryStringToJsonObject = (jsonString) ->\r\n        Try.of(() ->new GsonBuilder().create().fromJson(jsonString, JsonObject.class));`\r\n\r\nIf I remove the space in `text` (`mytext`) the conversion is successful.\r\n\r\nInto the `text` I need to receive any String, with spaces.", "hey @fadavidos, I hope you closed this issue 'cause you solved it, can plz share a solution?\r\nThank you! =||= ", 0], ["1747", "MalformedJsonException: Unterminated string at line 1 column xxxxxxxxx path $.fieldname[random index].fieldname[random index].fieldname", "Cheng Chen", "cheng-chen-916057886", "08/07/20, 05:56:25 PM", "I am using `JsonReader` from `Gson` to read and parse huge JSON file line by line, however, recently I have found that the parsing could go wrong with the exception message of `MalformedJsonException: Unterminated string at line 1 column xxxxxxxxx path $.fieldname[random index].fieldname[random index].fieldname`, but the position that caused this exception to be thrown will be varied every time I tested it with the exact same file, and I have also tested the same JSON file with a different parsing library (different than I parsed line by line using `Gson`, for this library I just loaded everything into the memory and then convert to an object), and there was no parsing error at all, so I am guessing this could be a BUG in the `JsonReader` class.\r\n\r\nPS: I am afraid I cannot provide any file that caused this problem to occur at this point since they are from the company I am working with, I can ask for a permission to share it if you really need it for debugging", "You should provide:\r\n\r\n- your platform;\r\n- exact `JsonReader`-driven code you're using to reproduce it (it might tell why your Gson might fail, but other libraries succeed);\r\n- stacktrace you're getting when reproducing it (obfuscate your company/product packages to keep them in secret);\r\n- the most common `xxxxxxxx` range and the size of your files, or unusual things like huge string literals (their length actually);\r\n- a JSON file that mimics your real file somehow (not sure if you really need several GBs shared elsewhere), or a simple Java generator tool that can generate the mimicking file (in both cases all your company/product secrets remain secret). =||= You seem to have resolved it already. https://stackoverflow.com/questions/63252842/gson-library-is-not-working-reliably-as-intended-for-parsing-large-json-file/63274792#63274792 I don't think huge JSON oneliners are the very cause though. =||= I apologize for not providing enough details for this issue\r\nUnfortunately, I asked my direct supervisor and colleague, we are not allowed to share any JSON file that has this issue since they contain sensitive data from our customers, I personally did my best to try to create a JSON file that can reproduce the above problem, however, I failed to do so\r\nBut I do can provide you the error stacktrace (the platform is `JAVA` and I used `Gson-2.8.6`):\r\n`com.google.gson.stream.MalformedJsonException: Unterminated string at line 1 column 45301761 path $.new_rows[113].new_rows[70].sql_query at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568) at com.google.gson.stream.JsonReader.nextQuotedValue(JsonReader.java:1031) at com.google.gson.stream.JsonReader.nextString(JsonReader.java:815) at xxxxx.parseEachNewRow(MultiplierResponseSubscriber.java:369) at xxxxx.processNewRows(MultiplierResponseSubscriber.java:210) at xxxxx.processNewRows(MultiplierResponseSubscriber.java:214) at xxxxx.processMultiplicationResults(MultiplierResponseSubscriber.java:176) at xxxxx.processMultiplierResponse(MultiplierResponseSubscriber.java:113) at xxxxx.consume(MultiplierResponseSubscriber.java:60) at org.springframework.cloud.gcp.pubsub.core.subscriber.PubSubSubscriberTemplate.lambda$subscribe$0(PubSubSubscriberTemplate.java:136) at com.google.cloud.pubsub.v1.MessageDispatcher$4.run(MessageDispatcher.java:438) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)` =||= ", 0], ["1750", "Password security", null, "rayanyousif84", "08/10/20, 07:48:11 PM", "NaN", "I'm looking to make my password stronger =||= My account has been develop 2 months ago and I wake up one day all think has been deleted and somebody went to my account and change everything so I would like to some help to backup everything because I try it didn't work =||= how is this related to Gson? =||= ", 0], ["1752", "Invalid de-serialization for complex input", "Catalin Dinuta", "dinuta", "08/14/20, 09:40:12 AM", "Let's suppose we have a JSON\r\n```\r\n{\r\n    \"code\": 1000,\r\n    \"message\": \"Success\",\r\n    \"description\": {\r\n        \"finished\": true,\r\n        \"started\": false,\r\n        \"startedat\": \"2020-08-14 08:47:59.193872\",\r\n        \"finishedat\": \"2020-08-14 08:47:59.195087\",\r\n        \"duration\": 0.001,\r\n        \"pid\": 2315,\r\n        \"id\": \"none\",\r\n        \"commands\": {\r\n            \"-cmd replaceTextInFile -arg \\\"/home/greg/install4j/response.varfile;{DB_PORT2};3306;false\\\"\": {\r\n                \"status\": \"finished\",\r\n                \"details\": {\r\n                    \"out\": \"\",\r\n                    \"err\": \"\",\r\n                    \"code\": 0,\r\n                    \"pid\": 2315,\r\n                    \"args\": [\r\n                        \"/home/greg/install4j/response.varfile\",\r\n                        \"{DB_PORT2}\",\r\n                        \"3306\",\r\n                        \"false\"\r\n                    ]\r\n                },\r\n                \"startedat\": \"2020-08-14 08:47:59.193888\",\r\n                \"finishedat\": \"2020-08-14 08:47:59.194963\",\r\n                \"duration\": 0.001\r\n            }\r\n        }\r\n    },\r\n    \"time\": \"2020-08-14 08:47:59.195114\",\r\n    \"name\": \"estuary-agent\",\r\n    \"version\": \"4.0.8\"\r\n}\r\n```\r\n\r\nAnd a Glue class as per this example:\r\nhttps://github.com/dinuta/estuary-agent-java/blob/078f14df94caa49aabea7c8a184dd03991f0e8d3/src/main/java/com/github/dinuta/estuary/agent/model/api/CommandDescription.java#L9\r\n\r\nThe result of the de-serialization context puts line: \r\n-cmd replaceTextInFile -arg \\\"/home/greg/install4j/response.varfile;{DB_PORT2};3306;false\\\"\r\ninto\r\n-cmd replaceTextInFile -arg \"/home/greg/install4j/response.varfile;{\\n\\t\\t\\tDB_PORT2\\t\\t};3306;false\"\r\n\r\nGson version: https://mvnrepository.com/artifact/com.google.code.gson/gson/2.3.1\r\n\r\n\r\nLater edit: I will try with the latest version", "Confirmed on 2.8.5 =||= For rapid tests you can take the dep:\r\n<dependency>\r\n    <groupId>com.github.dinuta.estuary</groupId>\r\n    <artifactId>agent</artifactId>\r\n    <version>4.0.8-SNAPSHOT</version>\r\n</dependency>\r\n\r\n =||= Closing issue. I used toFormattedString() for one object and not toString() =||= ", 0], ["1754", "How to distinguish null(non-exist key) and JsonNull when serializing?", "ArcticLampyrid", "ArcticLampyrid", "08/17/20, 02:16:30 PM", "Hi, I want to control whether a key will be serialized at run time\r\n\r\n```kotlin\r\ndata class JsonRpcResponse(\r\n        val result: JsonElement?\r\n){}\r\n```\r\nWhen result is `null`, the field is ignored, which is my expected output.\r\nBut when result is `JsonNull.INSTANCE`, it is still ignored.\r\nI know I can call `serializeNulls` to force to serialize **all** null-values, but how can I control whether **a field** is ignored or not at run time?", "Relates to #959.\r\n\r\nYou could specify a custom adapter on the field using the [`@JsonAdapter`](https://javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/annotations/JsonAdapter.html) annotation. This even works to overwrite the built-in JsonElement adapter:\r\n```java\r\n/**\r\n * Factory for serializing {@link JsonNull} as {@code null} regardless of\r\n * {@link JsonWriter#getSerializeNulls()} value.\r\n * \r\n * <p>Must <b>only</b> be used in combination with {@link JsonAdapter @JsonAdapter}\r\n * on fields:\r\n * <pre>\r\n * class MyClass {\r\n *     &#x40;JsonAdapter(NullSerializingTypeAdapterFactory.class)\r\n *     JsonElement f;\r\n * }\r\n * </pre>\r\n */\r\npublic class NullSerializingTypeAdapterFactory implements TypeAdapterFactory {\r\n    @Override\r\n    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {\r\n        if (JsonElement.class.isAssignableFrom(type.getRawType())) {\r\n            // Due to Gson issue #1028 have to call getAdapter(...) instead of getDelegateAdapter(...)\r\n            TypeAdapter<JsonElement> delegateAdapter = gson.getAdapter(JsonElement.class);\r\n            \r\n            // Safe due to type check at beginning\r\n            @SuppressWarnings(\"unchecked\")\r\n            TypeAdapter<T> adapter = (TypeAdapter<T>) new NullSerializingTypeAdapter(delegateAdapter);\r\n            return adapter;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    private static class NullSerializingTypeAdapter extends TypeAdapter<JsonElement> {\r\n        private final TypeAdapter<JsonElement> delegate;\r\n        \r\n        public NullSerializingTypeAdapter(TypeAdapter<JsonElement> delegate) {\r\n            this.delegate = delegate;\r\n        }\r\n        \r\n        @Override\r\n        public void write(JsonWriter out, JsonElement value) throws IOException {\r\n            if (value == JsonNull.INSTANCE) {\r\n                boolean wasSerializingNulls = out.getSerializeNulls();\r\n                try {\r\n                    out.setSerializeNulls(true);\r\n                    out.nullValue();\r\n                } finally {\r\n                    out.setSerializeNulls(wasSerializingNulls);\r\n                }\r\n            } else {\r\n                delegate.write(out, value);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public JsonElement read(JsonReader in) throws IOException {\r\n            return delegate.read(in);\r\n        }\r\n    }\r\n}\r\n``` =||= ", 0], ["1758", "About generics causing ClassCastException, How can i modify", null, "chaoyang-zhou", "08/20/20, 09:36:13 AM", "Kotlin Code\r\n``` kotlin\r\nclass ResponseBody<T> {\r\n    var code : Int = 0\r\n    var msg : String = \"\"\r\n    var data : T? = null\r\n}\r\n\r\nclass ExampleT {\r\n    var text: String = \"\"\r\n    // var list: List<String>? = null\r\n}\r\n\r\n// utils fun\r\nfun <T> request(json : String) : ResponseBody<T>? {\r\n    val gson = Gson()\r\n    var responseBody: ResponseBody<T>? = null\r\n    if (json.contains(\"code\") && json.contains(\"data\")) {         \r\n         responseBody = gson.fromJson(json, object : TypeToken<ResponseBody<T>>() {}.type)\r\n    } else {\r\n         val tdata : T = gson.fromJson(json, object : TypeToken<T>() {}.type)\r\n         responseBody = ResponseBody()\r\n         responseBody.code = 200\r\n         responseBody.msg = \"success\"\r\n         responseBody.data = tdata\r\n    }\r\n    return responseBody\r\n}\r\n\r\n// main\r\nval json : String = \"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"text\\\":\\\"text text text\\\"}}\"\r\n// val json : String = \"{\\\"text\\\":\\\"text text text\\\"}\"\r\nval responseBody : ResponseBody<ExampleT> = request(json)\r\n\r\n// result error \r\n// ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to ExampleT\r\n```\r\nAny answer will help me, Thanks !!!", "OH !!  Found a solution and fixed it.\r\n``` Kotlin\r\ninline fun <reified T> request(json) : Any {} \r\n```\r\nhttps://kotlinlang.org/docs/reference/inline-functions.html =||= ", 0], ["1762", "haksk", null, "kiran7207", "05/13/21, 11:38:33 PM", "shsksks", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1762) for more info**.\n\n<!-- need_sender_cla --> =||= \nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1762) for more info**.\n\n<!-- need_sender_cla --> =||= ", 0], ["1767", "Fix JsonReader.nextDouble() throwing wrong exception type for NaN and Infinity", null, "Marcono1234", "08/26/20, 10:54:43 PM", "The documentation says that a NumberFormatException will be thrown in case the value is not finite (i.e. NaN or Infinity). However, the JsonReader implementation actually throws a MalformedJsonException.\r\n\r\nNote that JsonTreeReader currently throws a NumberFormatException, as expected.", "When in doubt, I prefer to preserve the current behavior. =||= So should the documentation then be updated to state that a MalformedJsonException is thrown and JsonTreeReader be adjusted accordingly? Because the current behavior is inconsistent. =||= ", 0], ["1773", "When mapping to HashMap in Gson, the behavior of the `contains` method is sometimes strange.", "PM_Coffee", "pm-coffee", "09/03/20, 05:43:51 AM", "* AndroidStudio 4.0.0\r\n* gson version: 2.8.6\r\n* Sample Code: https://github.com/pm-coffee/GsonBugSample\r\n\r\n* data.json : aasets json file\r\n    ```json\r\n    {\r\n      \"1\": {\r\n        \"id\": 1,\r\n        \"name\": \"aaa\"\r\n      },\r\n      \"2\": {\r\n        \"id\": 2,\r\n        \"name\": \"bbb\"\r\n      },\r\n      ...\r\n    }\r\n    ```\r\n\r\n* AssetsMapper.kt : loading and mapping json\r\n    ```kotlin\r\n    class AssetsMapper private constructor() {\r\n    \r\n    \tcompanion object {\r\n    \t\tval instance: AssetsMapper by lazy { AssetsMapper() }\r\n    \t}\r\n    \r\n    \tval originalMap = ConcurrentHashMap<Int, Data1>()\r\n    \tval castedMap : Map<Int, Data1>\r\n    \r\n    \tinit {\r\n    \t\tloadAssets()\r\n    \t\tcastedMap = originalMap\r\n    \t}\r\n    \r\n    \tprivate fun loadAssets(){\r\n    \t\tif(originalMap.isEmpty()) {\r\n    \t\t\ttry {\r\n    \t\t\t\t(JsonReader(MyApp.instance.assets.open(\"data.json\").reader(StandardCharsets.UTF_8)) as Closeable)\r\n    \t\t\t\t\t.use {\r\n    \t\t\t\t\t\tval rootElement = JsonParser.parseReader(it as JsonReader)\r\n    \t\t\t\t\t\tval listType = object : TypeToken<ConcurrentHashMap<Int, Data1>>() {}.type\r\n    \r\n    \t\t\t\t\t\toriginalMap.putAll(Gson().fromJson<Map<Int, Data1>>(rootElement, listType))\r\n    \t\t\t\t\t}\r\n    \t\t\t} catch (e: Exception) {\r\n    \t\t\t\tLog.e(\"loadAssets()\", \"error\", e)\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \r\n    }\r\n    ```\r\n\r\n\r\noriginalMap.contains is false. Is this a bug?\r\n```kotlin\r\nval originalMapDataContains = AssetsMapper.instance.originalMap.contains(2)// <----- result is false. this result is strange.\r\nval castedMapDataContains = AssetsMapper.instance.castedMap.contains(2)// <----- result is true\r\n```", "The `contains` methods from the `originalMap` object is **directly** bound to [a legacy method](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#contains-java.lang.Object-) from the JDK.\r\n\r\n> `public boolean contains(Object value)`\r\n>\r\n> Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to containsValue(Object), and exists solely to ensure full compatibility with class Hashtable, which supported this method prior to introduction of the Java Collections framework.\r\n\r\nHowever, the `castedObject` instance type is unknown at the compile time, and Kotlin uses its inline overload\r\n\r\n> `@kotlin.internal.InlineOnly`\r\n> `public inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)`\r\n\r\nthat is bound to the [method](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#containsKey-java.lang.Object-) you're expecting for.\r\n\r\nNot a Gson bug but an _unexpected_ clash between a legacy method from JDK and an operator from Kotlin.\r\n\r\nInteresting enough, the infix syntax, `2 in originalMap` produces a warning in my default Kotlin settings (in IntelliJ IDEA though): _Method contains from ConcurrentHashMap may have unexpected semantics: It calls containsValue instead of containsKey_.\r\nBut it's funny, that the \"Replace overloaded operator with function call\" ignores that warning and replaces the infix operator with the clashing `contains` method invocation, not `containsKey`.\r\n\r\n----\r\n\r\nMWE:\r\n\r\n```kotlin\r\nval concurrentHashMap = ConcurrentHashMap<Any, Any>()\r\nconcurrentHashMap.put(2, Object())\r\nval map: Map<*, *> = concurrentHashMap\r\nprintln(concurrentHashMap.contains(2))\r\nprintln(map.contains(2))\r\n``` =||= So that's what happened.\r\nSorry to hear that it's not a gson bug.\r\n\r\nBut thank you. I understand. =||= @pm-coffee could you please close the issue? Thank you. =||= FYI this is tracked and partially fixed in Kotlin:\r\nHashtable https://youtrack.jetbrains.com/issue/KT-48007\r\nConcurrentHashMap https://youtrack.jetbrains.com/issue/KT-18053 =||= ", 0], ["1776", "java.lang.NoSuchFieldException for kotlin enums with ProGuard (and R8 enabled)", "Konstantin Liakhovskii", "k-liakhovskii-hs", "08/20/21, 03:58:11 PM", "Hey, we noticed that we are getting `java.lang.NoSuchFieldException` when we use the latest sample rules on ProGuard with R8 enabled. Please find more details below.\r\n\r\nExample of Enum definition:\r\n```\r\nenum class NetworkMessageTypeDTO{\r\n    @SerializedName(\"IG_STORY\") IG_STORY_1,\r\n    @SerializedName(\"IG_FEED\") IG_FEED\r\n}\r\n```\r\n\r\nStack trace is:\r\n```\r\njava.lang.AssertionError: java.lang.NoSuchFieldException: IG_STORY_1\r\n        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(TypeAdapters.java:12)\r\n        at com.google.gson.internal.bind.TypeAdapters$30.create(TypeAdapters.java:5)\r\n        at com.google.gson.Gson.n(Gson.java:9)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.a(ReflectiveTypeAdapterFactory.java:4)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.d(ReflectiveTypeAdapterFactory.java:15)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:4)\r\n        at com.google.gson.Gson.n(Gson.java:9)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.a(ReflectiveTypeAdapterFactory.java:4)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.d(ReflectiveTypeAdapterFactory.java:15)\r\n        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:4)\r\n        at com.google.gson.Gson.n(Gson.java:9)\r\n        at s.r.a.a.b(GsonConverterFactory.java:1)\r\n        at s.n.i(Retrofit.java:6)\r\n```\r\n\r\nWe use the [sample rules](https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg#L23-L26), including the following R8 change:\r\n```\r\n...\r\n# Prevent R8 from leaving Data object members always null\r\n-keepclassmembers,allowobfuscation class * {\r\n  @com.google.gson.annotations.SerializedName <fields>;\r\n}\r\n```\r\n\r\n**WORKAROUND:**\r\nIt looks like the actual problem is not in SerializedName, but in binding between it and the real enum case. Removing of `allowobfuscation` in the rules above solves this issue as it stops obfuscating the names of enum cases. But not sure if that is a proper change, or the problem is in implementation of `ReflectiveTypeAdapter`.\r\n\r\nIt seems that the issue is related to the EnumTypeAdapter binding [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L779-L781). Looks like similar issues were highlighted [here](https://github.com/google/gson/issues/924) and [here](https://stackoverflow.com/questions/15543607/assertionerror-in-gson-enumtypeadapter-when-using-proguard-obfuscation).", "Should be fixed by #1495. =||= ", 0], ["1780", "ISO8601UtilsTest failed when System Timezone is between UTC-1 and UTC-12", "YOUNG HO CHA (aka ganachoco)", "ganadist", "05/14/21, 12:34:20 AM", "In ISO8601UtilsTest.ISO8601UtilsTest, calendar is initiated with Local Timezone.\r\nBut ISO8601Utils.format is processing time with UTC, so following error can be raised on UTC-1 and UTC-12\r\n\r\n```\r\n$ env TZ=UTC-1 mvn -f gson test\r\n\r\nRunning com.google.gson.internal.bind.util.ISO8601UtilsTest\r\nTests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec <<< FAILURE!\r\ntestDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.005 sec  <<< FAILURE!\r\norg.junit.ComparisonFailure: expected:<2018-06-2[5]> but was:<2018-06-2[4]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n\tat org.junit.Assert.assertEquals(Assert.java:144)\r\n\tat com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:26)\r\n\r\n```", "Should be fixed by https://github.com/google/gson/pull/1687. =||= ", 0], ["1786", "Improve incorrect JsonStreamParser doc", null, "Marcono1234", "05/13/21, 11:45:36 PM", "NaN", "Thanks! =||= Thanks for merging! And thanks a lot for bringing some activity into this project again :heart: =||= ", ["1786", "Improve incorrect JsonStreamParser doc", null, "Marcono1234", "05/13/21, 11:45:36 PM", "NaN", "NaN"], ["Marcono1234", "Improve incorrect JsonStreamParser doc", "09/19/20, 11:30:50 AM", "Marcono1234", "b1edb7048687c2822b4fa006ddeb5e2cc2a038f9", ["gson/src/main/java/com/google/gson/JsonStreamParser.java"], "@@ -29,8 +29,9 @@\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously.\n- * \n+ * asynchronously. The JSON data is parsed in lenient mode, see also\n+ * {@link JsonReader#setLenient(boolean)}.\n+ *\n  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To\n  * properly use this class across multiple threads, you will need to add some external\n  * synchronization. For example:\n@@ -72,10 +73,12 @@ public JsonStreamParser(Reader reader) {\n   }\n   \n   /**\n-   * Returns the next available {@link JsonElement} on the reader. Null if none available.\n-   * \n-   * @return the next available {@link JsonElement} on the reader. Null if none available.\n-   * @throws JsonParseException if the incoming stream is malformed JSON.\n+   * Returns the next available {@link JsonElement} on the reader. Throws a\n+   * {@link NoSuchElementException} if no element is available.\n+   *\n+   * @return the next available {@code JsonElement} on the reader.\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n+   * @throws NoSuchElementException if no {@code JsonElement} is available.\n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n@@ -97,6 +100,7 @@ public JsonElement next() throws JsonParseException {\n   /**\n    * Returns true if a {@link JsonElement} is available on the input for consumption\n    * @return true if a {@link JsonElement} is available on the input, false otherwise\n+   * @throws JsonSyntaxException if the incoming stream is malformed JSON.\n    * @since 1.4\n    */\n   public boolean hasNext() {, ", 10, 6, "\"modified, \"", 16], 1], ["1790", "Gson cannot find", "usky", "ssochi", "09/28/20, 02:30:07 AM", "NaN", "NaN", 0], ["1797", "There is a vulnerability in Guava: Google Core Libraries for Java(18.0) ,upgrade recommended", "\u5947\u5b89\u4fe1CodeSafe", "QiAnXinCodeSafe", "09/02/21, 12:11:48 AM", "https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/proto/pom.xml#L69-L74\r\n\r\nCVE-2018-10237\r\n\r\nRecommended upgrade version\uff1a1.0.1\r\nlatest version\uff1a29.0-jre", "@eamonnmcmanus https://snyk.io/vuln/maven:com.google.guava%3Aguava =||= ", 0], ["1800", "Bump junit from 3.8.2 to 4.13.1 in /extras", null, "dependabot[bot]", "05/13/21, 11:43:18 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN", ["1800", "Bump junit from 3.8.2 to 4.13.1 in /extras", null, "dependabot[bot]", "05/13/21, 11:43:18 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN"], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /extras\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:55:48 PM", "GitHub", "074a556d38f0ff2c7a4924bb00a8ae1631601b67", ["extras/pom.xml"], "@@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["1801", "Bump junit from 4.12 to 4.13.1 in /proto", null, "dependabot[bot]", "05/13/21, 11:43:05 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN", ["1801", "Bump junit from 4.12 to 4.13.1 in /proto", null, "dependabot[bot]", "05/13/21, 11:43:05 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN"], ["dependabot[bot]", "Bump junit from 4.12 to 4.13.1 in /proto\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:03 PM", "GitHub", "345dea2c8adc0af2722c4261e7e3fa93a1f9bd0c", ["proto/pom.xml"], "@@ -76,7 +76,7 @@\n     <dependency>\r\n       <groupId>junit</groupId>\r\n       <artifactId>junit</artifactId>\r\n-      <version>4.12</version>\r\n+      <version>4.13.1</version>\r\n       <scope>test</scope>\r\n     </dependency>\r\n     \r, ", 1, 1, "\"modified, \"", 2], 1], ["1802", "Bump junit from 3.8.2 to 4.13.1 in /codegen", null, "dependabot[bot]", "05/13/21, 11:42:49 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN", ["1802", "Bump junit from 3.8.2 to 4.13.1 in /codegen", null, "dependabot[bot]", "05/13/21, 11:42:49 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN"], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /codegen\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:05 PM", "GitHub", "daba2fd7ff4bc9fd51c209952964b6fd5366b923", ["codegen/pom.xml"], "@@ -40,7 +40,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["1803", "Bump junit from 4.12 to 4.13.1", null, "dependabot[bot]", "05/13/21, 11:31:39 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "Superseded by #1892. =||= ", 0], ["1804", "Bump junit from 3.8.2 to 4.13.1 in /metrics", null, "dependabot[bot]", "05/13/21, 11:42:28 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN", ["1804", "Bump junit from 3.8.2 to 4.13.1 in /metrics", null, "dependabot[bot]", "05/13/21, 11:42:28 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.12</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md\">release notes</a> for details.</p>\n<h2>JUnit 4.12 Beta 2</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.12 Beta 1</h2>\n<p>No release notes provided.</p>\n<h2>JUnit 4.11</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).\n\n</details>", "NaN"], ["dependabot[bot]", "Bump junit from 3.8.2 to 4.13.1 in /metrics\n\nBumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "10/12/20, 10:56:23 PM", "GitHub", "ada6985285ee2d1d864c77d17d9b162d78371a26", ["metrics/pom.xml"], "@@ -51,7 +51,7 @@\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n-      <version>3.8.2</version>\n+      <version>4.13.1</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["1805", "What is the difference when I use `toJson` and `toJsonTree`?", null, "zxa4fd", "10/16/20, 09:58:52 PM", "What is the difference between the two and when should they be used?", "[`Gson.toJson`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#toJson(java.lang.Object)) and its overloads are for serializing an object to a JSON string. They are useful for sending the JSON data to a different host, saving it to file, ... They are probably the most commonly used methods.\r\n\r\n[`Gson.toJsonTree`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#toJsonTree(java.lang.Object)) is for serializing an object into an in-memory representation of the JSON document represented by [`JsonElement`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/JsonElement.html). This might be useful when want to modify the JSON before further processing it. For example when you have two objects which you want to merge to one JSON object you could serialize both to `JsonObject` and then copy the members of one object to the other one.\r\n\r\nDo you have a specific use case where this question came up? =||= Yeah I saw it in an example =||= ", 0], ["1808", "Excluder class produces a lot of Strings objects", "Oleksandr Papchenko", "olpapchenko", "10/22/20, 09:10:30 AM", "Hi, \r\n`com.google.gson.internal.Excluder` class contains method `isAnonymousOrLocal` which in turn calls `clazz.isAnonymousClass()`\r\n```\r\n  private boolean isAnonymousOrLocal(Class<?> clazz) {\r\n    Boolean res = memo.get(clazz);\r\n\r\n    if(res != null) {\r\n      return res;\r\n    }\r\n\r\n    res = !Enum.class.isAssignableFrom(clazz)\r\n        && (clazz.isAnonymousClass() || clazz.isLocalClass());\r\n    memo.put(clazz, res);\r\n    return res;\r\n  }\r\n```\r\nInside `isAnonymousClass` performed substring operation - thus each time a new string is created. If the application deserializes/serialize a lot of objects with a lot of fields - we get a lot of strings in the heap that cause frequent GCs\r\nFor each class Excluder calls `isAnonymousClass` and each time it creates a substring  - does it make sense to use caching here - so for each particular class only the first time the call to substring is performed? ", "It looks like this is fixed in JDK 11: [JDK-8187123](https://bugs.openjdk.java.net/browse/JDK-8187123)\r\n\r\nIf this should be solved in Gson, the cache would then probably have to use `WeakReference`s; otherwise it would prevent classes from being unloaded.\r\n\r\n----\r\n\r\nNote that I am not a maintainer of this project. =||= Thank you @Marcono1234,  Checked on `openjdk version \"11.0.7\" 2020-04-14 LTS` - the new implementation of `Class.getSimpleName` helped a lot. Strings are not allocated on each call - as the result much less frequent GCs. \r\n =||= ", 0], ["1809", "Make ISO8601UtilsTest run successfully in any time zone", "Daniel Gray", "danielthegray", "10/22/20, 11:26:07 AM", "In some timezones, ISO8601UtilsTest fails with:\r\n\r\n```\r\nFailed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest):\r\n      expected:<2018-06-2[5]> but was:<2018-06-2[4]>\r\n```\r\nThis PR simply forced the timezone to always be UTC so that the test passes regardless of the timezone of the person running the test.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1809) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Thanks for the pull request, but there are already three existing ones for this issue:\r\n- #1665\r\n- #1687\r\n- #1781 =||= Ahh apologies... I was looking for something too specific. I hope something gets merged soon! =||= The other pull requests are more complete and solve the problem. It should not be hard to get them merged in! Some action would be nice on the maintainer's side! =||= ", 0], ["1812", "ConcurrentModification exception on serialization of a mutable collection", "Marco Signoretto", "MarcoSignoretto", "11/05/20, 03:34:47 PM", "In the case where you want to serialize a Mutable collection and this collection get changed by another thread while Gson is serializing it you got the following error:\r\n\r\n```\r\njava.util.ArrayList$Itr.next (ArrayList.java:860)\r\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:96)\r\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:61)\r\ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write (TypeAdapterRuntimeTypeWrapper.java:69)\r\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write (ReflectiveTypeAdapterFactory.java:127)\r\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write (ReflectiveTypeAdapterFactory.java:245)\r\ncom.google.gson.Gson.toJson (Gson.java:704)\r\ncom.google.gson.Gson.toJson (Gson.java:683)\r\ncom.google.gson.Gson.toJson (Gson.java:638)\r\ncom.google.gson.Gson.toJson (Gson.java:618)\r\n```\r\n\r\nStarting from the fact that having a mutable collection shared between threads is bad, I think the library should handle it in the sense that is should take a snapshot of the collection and serialize that one.\r\n\r\nSuggested solution: https://github.com/google/gson/pull/1813", "Duplicate of: https://github.com/google/gson/issues/1159 =||= ", 0], ["1813", "Avoid to crash with ConcurrentModificationException on serialization", "Marco Signoretto", "MarcoSignoretto", "11/05/20, 03:35:43 PM", "Avoid crashing with ConcurrentModificationException during json serialization when Gson is serializing a Mutable collection \r\n\r\nFixes: https://github.com/google/gson/issues/1812", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1813) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Could you please edit the description to say \"Fixes #XYZ\" instead of \"Issue: #XYZ\", otherwise GitHub does not understand that this pull request is related to the issue.\r\n\r\nMost concurrent collection classes of the JDK are \"[weakly consistent](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/package-summary.html#Weakly)\", i.e. they never throw `ConcurrentModificationException`s. Additionally most, if not all, do not synchronize on `this` when performing modifications, so your `synchronized (collection) { ... }` would have no effect on them.\r\n\r\nDo you have a specific class in mind where this is not the case?\r\n\r\nAdditionally always performing a shallow copy will decrease performance (and increase memory consumption) for applications which are not concurrently modifying collections.\r\n\r\n----\r\n\r\nNote that I am not a maintainer of this project. =||= Issue reported: https://github.com/google/gson/issues/1159 where defensive copy should live into the client =||= ", 0], ["1819", "Support `jsonValue` in JsonTreeWriter", "Zac Sweers", "ZacSweers", "06/20/21, 08:11:43 AM", "Resolves #1289 and resolves #1268 \r\n\r\nSupersedes #1651 \r\n\r\nThis adds support for `JsonWriter#jsonValue()` in `JsonTreeWriter`, which currently just throws a nondescript assertion error", "Can update the map key and doc. I don't expect this would ever appear in a reader, but maybe converting it to a JsonElement directly rather than a raw value could allow seamless interoperability. Will look =||= @Marcono1234 I managed to make this work without introducing a new type, which came out a lot simpler and just reuses existing types by eagerly parsing the JSON. It's a little less performant in theory for large blobs, but seems worth the tradeoff and maybe even adds a bit of extra peace of mind for validating the JSON structure is sound. =||= Note that a workaround for anyone that needs this and is willing to touch internal APIs - you can convert your string to a `JsonElement` (i.e. via `JsonParser`) and then write it directly to the writer with GSON's internal JsonElement adapter (i.e. `TypeAdapters.JSON_ELEMENT.write(writer, jsonElement)`) =||= ", 0], ["1820", "Fix gradle build", "Zac Sweers", "ZacSweers", "06/20/21, 08:11:23 AM", "Not sure if this is maintained, but this at least updates the gradle version and fixes the project version injection", "NaN", 0], ["1821", "[Question] : is gson still maintained?", "raditya gumay", "radityagumay", "07/01/21, 09:39:07 PM", "Rationale behind this is, gson looks like not actively maintained. The [last PR](https://github.com/google/gson/commit/ceae88bd6667f4263bbe02e6b3710b8a683906a2) was on may. and looks like there's no roadmap on gson to provide [new features and fix bugs.](https://github.com/google/gson/pulls)\r\n\r\nWill appreciated if the maintainer able to put some thoughts on this. \r\n\r\nThank you!", "I am not a maintainer / member of this project and had the same question the last months as well and always thought about creating an issue too because activity here has sadly slowed down.\r\n\r\nThere are several critical issues (with corresponding pull requests) which have not been touched for a rather long time (subjective selection):\r\n- Issues with generic parameter being used multiple times: #1391\r\n- ProGuard issues with enums: #1495\r\n- `ISO8601UtilsTest` being faulty (#1665, #1687, #1781)\r\n- Optional `java.sql` module dependency: #1707\r\n- Problem with SecurityManager: #1712\r\n- `module-info.class` not being in `META-INF` multi release folder (#1627)\r\n- Incorrect OSGi JRE requirement: #1677 (has already been fixed by  #1603, but has not been released)\r\n- Serialization for some objects created by JDK classes fails because Gson tries to access private constructors using reflection: #1875\r\n- Records are not supported: #1794\r\n\r\nIt appears @joel-leitch, one of the original maintainers, is not very active on GitHub anymore. @swankjesse and @JakeWharton are not active here either. I am not completely familiar with their biography, but if I understand it correctly they (or one of them) quit their job at Google and are now working at Square where they are working on https://github.com/square/moshi, a competitor of Gson. Maybe they do not even have the GitHub project roles and permissions anymore to directly work on Gson.\r\n@inder123 is the one who made the most recent changes, but it looks like they are not that active at the moment either.\r\n\r\nIt is not my goal to blame them for the lack of activity, they put great efforts in this project in the past and are the reason for the popularity of it. It is completely understandable that after more than 10 years, the motivation of working on the same project decreases. Especially when (as it is likely the case for all projects) design flaws or decisions hindering future development become apparent over time. And as with all open source projects, enough free time might also not always be available.\r\n\r\nHowever, because Gson is still widely used it is important that a clear decision is made about how Gson's future development (if any) will look like. Otherwise users will be forced to switch to other frameworks when bugs remain unfixed. While switching to other frameworks is not necessarily bad, being forced to do this creates extra stress and work for the users; it should ideally happen voluntarily.\r\n\r\nWould it at least be possible to keep developing Gson in _maintenance mode_: Only bug fixes are implemented, but no major new features are added? =||= I found this anwser on reddit written by @swankjesse\r\n\r\nhttps://www.reddit.com/r/androiddev/comments/684flw/why_use_moshi_over_gson/dgx3gpm?utm_source=share&utm_medium=web2x&context=3\r\n\r\nIn short, it seem Gson is already in maintenance mode because it was mostly replaced by \"moshi\", a new project build by some of the same contributor with less short-comming than Gson =||= Moshi is a suitable alternative to Gson.  I just switched my code over.\r\n\r\nhttps://github.com/square/moshi\r\n\r\nMoshi throws exceptions in cases where Gson silently returns `null`.  I'm happy with this.\r\n\r\nMoshi doesn't support `Optional` yet ([square/moshi#1329](https://github.com/square/moshi/issues/1329)).\r\n =||= Thanks @eamonnmcmanus and @cgdecker for bringing some activity back into this project! What are the future plans for Gson? =||= Is Gson actively maintained  =||= We've taken ownership of this project so that we can do basic maintenance and such (for example the release we made last month) but we don't have any specific plans for it at the moment. =||= > We've taken ownership of this project so that we can do basic maintenance and such (for example the release we made last month) but we don't have any specific plans for it at the moment.\r\n\r\nPlease fix Java 16 related issues. =||= I am planning to spend some time this month studying open issues and PRs, consistent with the maintenance mode that @cgdecker mentioned. We are unlikely to add new features at this point but we can attempt to address some important issues. The list compiled by @Marcono1234 [above](https://github.com/google/gson/issues/1821#issuecomment-729807911) will likely be very helpful in this regard.\r\n\r\nI think we've addressed the question asked in this issue, so I'm going to close it. =||= ", 0], ["1824", "fix bug,string json to map,int automatic conversion double", "Courage", "lsm1998", "11/25/20, 01:51:04 AM", "nextNumber() is more reasonable than nextDouble(),It solves the problem of converting integer to floating point number automatically.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1824) for more info**.\n\n<!-- need_sender_cla --> =||= > \u611f\u8c22\u60a8\u7684\u8bf7\u6c42\u3002\u770b\u6765\u8fd9\u53ef\u80fd\u662f\u60a8\u5bf9Google\u5f00\u6e90\u9879\u76ee\u7684\u7b2c\u4e00\u4e2a\u8d21\u732e\uff08\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u5728\u4e0b\u9762\u5bfb\u6c42\u5e2e\u52a9\uff09\u3002\u5728\u6211\u4eec\u67e5\u770b\u60a8\u7684\u62c9\u53d6\u8bf7\u6c42\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u7b7e\u7f72\u8d21\u732e\u8005\u8bb8\u53ef\u534f\u8bae\uff08CLA\uff09\u3002\r\n> \r\n> \ud83d\udcdd **\u8bf7\u8bbf\u95eehttps://cla.developers.google.com/\u8fdb\u884c\u7b7e\u540d\u3002**\r\n> \r\n> \u7b7e\u7f72\uff08\u6216\u89e3\u51b3\u4efb\u4f55\u95ee\u9898\uff09\u540e\uff0c\u8bf7\u5728\u6b64\u5904\u56de\u590d`@googlebot I signed it!`\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u8fdb\u884c\u9a8c\u8bc1\u3002\r\n> \r\n> #### \u5982\u679c\u60a8\u5df2\u7ecf\u7b7e\u7f72\u4e86CLA\uff0c\u8be5\u600e\u4e48\u529e\r\n> ##### \u4e2a\u4eba\u7b7e\u540d\u4eba\r\n> * \u53ef\u80fd\u6211\u4eec\u6ca1\u6709\u60a8\u7684GitHub\u7528\u6237\u540d\uff0c\u6216\u8005\u60a8\u5728\u63d0\u4ea4\u65f6\u4f7f\u7528\u4e86\u5176\u4ed6\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u68c0\u67e5[\u60a8\u73b0\u6709\u7684CLA\u6570\u636e\uff0c](https://cla.developers.google.com/clas)\u5e76\u9a8c\u8bc1\u662f\u5426[\u5728git commit\u4e0a\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6](https://help.github.com/articles/setting-your-email-in-git/)\u3002\r\n> \r\n> ##### \u516c\u53f8\u7b7e\u540d\u4eba\r\n> * \u60a8\u7684\u516c\u53f8\u6709\u4e00\u4e2a\u8054\u7edc\u70b9\uff0c\u53ef\u4ee5\u51b3\u5b9a\u6388\u6743\u54ea\u4e9b\u5458\u5de5\u53c2\u52a0\u3002\u8981\u6c42\u5c06\u60a8\u7684POC\u6dfb\u52a0\u5230\u6388\u6743\u8d21\u732e\u8005\u7ec4\u4e2d\u3002\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8054\u7edc\u4eba\u662f\u8c01\uff0c\u8bf7\u6307\u793aGoogle\u9879\u76ee\u7ef4\u62a4\u8005\u8fdb\u884c[go / cla\uff03troubleshoot](http://go/cla#troubleshoot)\uff08[\u516c\u5f00\u7248\u672c](https://opensource.google/docs/cla/#troubleshoot)\uff09\u3002\r\n> * \u7528\u4e8e\u5c06\u60a8\u6ce8\u518c\u4e3a\u6388\u6743\u8d21\u732e\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5fc5\u987b\u662f\u7528\u4e8eGit\u63d0\u4ea4\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u68c0\u67e5[\u60a8\u73b0\u6709\u7684CLA\u6570\u636e\uff0c](https://cla.developers.google.com/clas)\u5e76\u9a8c\u8bc1\u662f\u5426[\u5728git commit\u4e0a\u8bbe\u7f6e\u4e86\u7535\u5b50\u90ae\u4ef6](https://help.github.com/articles/setting-your-email-in-git/)\u3002\r\n> * \u7528\u4e8e\u5c06\u60a8\u6ce8\u518c\u4e3a\u6388\u6743\u8d21\u732e\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u8fd8\u5fc5\u987b[\u9644\u52a0\u5230\u60a8\u7684GitHub\u5e10\u6237\u4e2d](https://github.com/settings/emails)\u3002\r\n> \r\n> \u2139\ufe0f **Google\u5458\u5de5\uff1a\u8bf7[\u70b9\u51fb\u6b64\u5904](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1824)\u83b7\u53d6\u66f4\u591a\u4fe1\u606f**\u3002\r\n\r\n@googlebot I signed it! =||= Anything that breaks backwards compatibility will not be accepted. =||= > \u4efb\u4f55\u7834\u574f\u5411\u540e\u517c\u5bb9\u6027\u7684\u5185\u5bb9\u5747\u4e0d\u63a5\u53d7\u3002\r\nI'm sorry for my rashness. =||= ", 0], ["1836", "Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor (/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar) to field java.time.LocalDate.year", "Fr\u00e9d\u00e9rick Sauvage", "FrederickFrance", "12/11/20, 03:45:17 PM", "Hi\r\n\r\nI have this warning message but I don't find the place to trace it and, of course, how to fix that :+1: \r\n\r\n> WARNING: An illegal reflective access operation has occurred\r\n> WARNING: Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor (file:/home/fred/.m2/repository/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar) to field java.time.LocalDate.year\r\n> WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.reflect.UnsafeReflectionAccessor\r\n> WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\r\n> WARNING: All illegal access operations will be denied in a future release\r\n \r\n\r\nI don'y know which information I can add.\r\n\r\n```\r\n    <java.version>1.8</java.version>\r\n    <tomcat.version>9.0.37</tomcat.version>\r\n```\r\n\r\nDo not hesitate to ask me any information if my message isn't enough clear", "Gson is a Java 6 oriented library. All standard runtime library classes to appear in Java 8 are not supported by Gson out of box. All \"simple\" data classes of java.time.* are among of those. You should create a custom type adapter to support `java.time.LocalDate`, and do the same for all the classes you need from that package. See also: #1059, #1807, and please don't forget to close the issue. =||= ", 0], ["1838", "Update UserGuide.md", "Fiordy", "Fiordy", "05/13/21, 11:41:42 PM", "fixed typo in generic", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1838) for more info**.\n\n<!-- need_sender_cla --> =||= As noted by @Marcono1234 the existing text is correct. =||= ", 0], ["1848", "toJson() returns empty string while using desugar_jdk_libs", null, "AlanFeng20", "01/13/21, 10:44:58 AM", "I add JDK8 library  support in my build.gradle file:\r\n\r\n```\r\nandroid{\r\n        compileOptions {\r\n        // Flag to enable support for the new language APIs\r\n        coreLibraryDesugaringEnabled true\r\n        // Sets Java compatibility to Java 8\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\ndependencies {\r\n    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'\r\n}\r\n```\r\n\r\n\r\nBut when I serialize the instance of LocalDateTime using Gson, I get a wrong result:\r\n\r\n```\r\nval time=LocalDateTime.now()\r\nval json=Gson().toJson(time)\r\n//variable \"json\" is \"\"\r\n```\r\n\r\nHow can I solve this problem?", "ohhh.........writing a TypeAdapter can help. Sorry for disturbing  =||= ", 0], ["1849", "Gson serialized HashMap object returns null", "\u5434\u5c31\u4e1a", "wujiuye", "01/14/21, 01:44:35 PM", "Gson serialized HashMap object returns null\r\n\r\nThe unit test is as follows:\r\n```java\r\npublic class JsonTest {\r\n    @Test\r\n    public void testGsonMap() {\r\n        Map<String, Object> data = new HashMap<String, Object>() {{\r\n            put(\"xxx\", \"yyy\");\r\n        }};\r\n        System.out.println(JsonUtils.toJsonString(data));\r\n    }\r\n}\r\n```\r\nJsonUtils#toJsonString actually calls Gson#toJson, and the test outputs null. But switching to the jackson framework can be serialized successfully.\r\n\r\nIt can be seen from the compiled bytecode that \u201cdata\u201d is actually an anonymous class object. The anonymous class inherits HashMap and the anonymous class ends with \"$1\".\r\n\r\nThe following is the call stack traced by DEBUG:\r\n```java\r\ncom.google.gson.internal.Excluder#create\r\n  >com.google.gson.internal.Excluder#excludeClassChecks\r\n       >com.google.gson.internal.Excluder#isAnonymousOrLocal\r\n            >java.lang.Class#isAnonymousClass\r\n```\r\n\r\njava.lang.Class#isAnonymousClass\r\n```java\r\npublic final class Class<T> {\r\n    public boolean isAnonymousClass() {\r\n        return \"\".equals(getSimpleName());\r\n    }\r\n}\r\n```\r\n\r\nThe getSimpleName method removes the \"$\" of the anonymous class \"$1\" and the following number and returns \"\", so the serialization of the anonymous class object is skipped.\r", "\u8def\u8fc7.... \u4eca\u5929\u4e5f\u78b0\u89c1\u8fd9\u4e2a\u4e8b\u4e86,\u4e0a\u6765\u770b\u770b =||= ", 0], ["1854", "Is Gson dead ?", null, "HybridGaw", "02/02/21, 09:09:26 PM", "last release was 2019 , now it's 2021 , is it dead ???", "There are projects which have went without a release for longer periods of time, but which aren't \"dead\" either. =||= Yeah, we can create a new release when we want. What specific problems are you looking to solve with a new release?\r\nOverall, Gson is a mature library with massive usage. We have to be very careful in adding features that may break backward compatibility. =||= @inder123, do you mind having a look at #1821?\r\nThere are a few severe issues (most of them have pull requests) which have been open for years. It appears multiple people who want to contribute have the impression that this project is not actively maintained anymore. =||= ", 0], ["1855", "Copyright year and owner are missing in license - replace placeholders", null, "ts-twt", "06/18/21, 10:17:53 PM", "https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/LICENSE#L190", "That line is part of the [template](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/LICENSE#L179) to be used by people applying the Apache license to their own work. It is supposed to look like that. =||= ", 0], ["1857", "JsonDeserializer throws runtime error when parameterized type is not of type collection and JsonElement is of type JsonArray", "Brandon Johnson", "bitforce", "02/05/21, 06:15:46 PM", "When `jsonElement` is of type `JsonArray` and the `JsonDeserialization<T>` type is not a collection, Gson will always throw an `IllegalStateException`.\r\n\r\n<img width=\"1253\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24510536/106795661-58d4d400-6628-11eb-9db4-c81fe068df8e.png\">\r\n\r\nAbove is the full code, note that `Example` is an empty class.\r\nBelow is an image of the direct deserialization in debug mode. Note that the contents of `instrumentJson` are irrelevant and that it is a correctly streamed `JsonObject` from a `JsonArray`.\r\n\r\n<img width=\"602\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24510536/106793902-0c889480-6626-11eb-949c-f290b7f700af.png\">\r\n\r\nHowever, if I decide to serialize to most-any other Objects, the `jsonDeserializerContext#deserialize` has no problem whatsoever. \r\n\r\n<img width=\"602\" alt=\"deserialize object\" src=\"https://user-images.githubusercontent.com/24510536/106794060-45c10480-6626-11eb-8c25-044e4be472ea.png\">\r\n\r\n<img width=\"601\" alt=\"random\" src=\"https://user-images.githubusercontent.com/24510536/106794662-27a7d400-6627-11eb-8447-b91d2c16a2b5.png\">\r\n\r\n<img width=\"601\" alt=\"stream support\" src=\"https://user-images.githubusercontent.com/24510536/106794664-28406a80-6627-11eb-9a2b-a19cdf5942be.png\">\r\n\r\nSo my educated guess is if the current type is not matching the `JsonElement` subtype (`JsonObject` or `JsonArray`), then it causes problems.\r\n\r\nBelow is confirmation that `jsonElement` is of type `JsonArray`\r\n\r\n<img width=\"602\" alt=\"image\" src=\"https://user-images.githubusercontent.com/24510536/106794198-7a34c080-6626-11eb-99ba-4d01c0a6a7da.png\">\r\n\r\nMy problem is *sovled* if I change the return type to `List<Example>` as seen below.\r\n\r\n<img width=\"1258\" alt=\"problem solved\" src=\"https://user-images.githubusercontent.com/24510536/106794870-6473cb00-6627-11eb-8575-b8bd021496cc.png\">\r\n\r\nBut this does not fix my use-case of only wanting to return the first element from this list. It doesn't fit my design pattern either. \r\n\r\n\r\n## Context\r\nThe original issue is the designers of the API I am deserializing from, thought it would be _cool_ for a singular resource endpoint to instead of return a `JsonObject`, return a `JsonArray` that would always be of size 1. It is confirmed that this array will always be size one but they have no plans to change the API and I would prefer to keep the `list#get(0)` logic out of my controller if possible and return the single element from the deserializing class. \r\n\r\n## Major Inquiry\r\nIt is possible to deserialize a `JsonArray` without *having* to return a collection type when implementing `JsonDeserializer<T>`? ", "Could you please provide a self-contained small code example demonstrating this issue?\r\nAnd could you also please include the full stack trace of the exception? I am unable to find any code in this project which throws an exception with the message \"This is not a JSON Array\" (not even the prefix \"This is not\"); are you sure that Gson is actually throwing that exception? It looks more like Gson is only wrapping it inside a `JsonSyntaxException`. =||= ```\r\nException in thread \"main\" com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: This is not a JSON Array.\r\n\tat com.google.gson.Gson.fromJson(Gson.java:899)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:952)\r\n\tat com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(TreeTypeAdapter.java:162)\r\n\tat <my package dir>.ExampleDeserializer.lambda$deserialize$0(ExampleDeserializer.java:25)\r\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\r\n\tat java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812)\r\n\tat java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)\r\n\tat java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)\r\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\r\n\tat java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)\r\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)\r\n\tat <my package dir>.ExampleDeserializer.deserialize(ExampleDeserializer.java:26)\r\n\tat <my package dir>.ExampleDeserializer.deserialize(ExampleDeserializer.java:16)\r\n\tat com.google.gson.internal.bind.TreeTypeAdapter.read(TreeTypeAdapter.java:69)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:887)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:952)\r\n\tat com.google.gson.Gson.fromJson(Gson.java:925)\r\n\tat <my package dir>.ExampleDeserializationTest.main(ExampleDeserializationTest.java:17)\r\n\r\n``` =||= Below is a way to run this code and recreate the issue:\r\n\r\n```\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.google.gson.JsonArray;\r\nimport com.google.gson.JsonObject;\r\n\r\npublic class ExampleDeserializationTest  {\r\n\r\n  public static void main(String[] args) {\r\n    Gson gson = new GsonBuilder().registerTypeAdapter(Example.class, new ExampleDeserializer())\r\n         .create();\r\n    JsonArray array = new JsonArray();\r\n    JsonObject object = new JsonObject();\r\n    object.addProperty(\"name\", \"bitforce\");\r\n    array.add(object);\r\n    Example example = gson.fromJson(array, Example.class);\r\n    System.out.println(example);\r\n  }\r\n\r\n}\r\n// main\r\n```\r\n\r\n```\r\nimport com.google.gson.JsonDeserializationContext;\r\nimport com.google.gson.JsonDeserializer;\r\nimport com.google.gson.JsonElement;\r\nimport com.google.gson.JsonParseException;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.stream.StreamSupport;\r\n\r\npublic class ExampleDeserializer implements JsonDeserializer<Example> {\r\n  @Override\r\n  public Example deserialize(\r\n      JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)\r\n      throws JsonParseException {\r\n    return StreamSupport.stream(jsonElement.getAsJsonArray().spliterator(), false)\r\n        .map(\r\n            instrumentJson ->\r\n                (Example) jsonDeserializationContext.deserialize(instrumentJson, Example.class))\r\n        .findFirst()\r\n        .orElseThrow(RuntimeException::new);\r\n  }\r\n}\r\n// deserializer\r\n```\r\n\r\n```\r\npublic class Example {}\r\n``` =||= Thanks! The exception message does indeed come from Gson, but it appears you are using Gson 2.8.1 (or older). It might be worth upgrading to the latest version (2.8.6).\r\n\r\nThe problem is that the `JsonDeserializer` you are registering is calling itself: Initially you are telling Gson to deserialize your Example JSON array as `Example.class` which works fine but then your JsonDeserializer calls `jsonDeserializationContext.deserialize(instrumentJson, Example.class)` which invokes itself again (since it is registered for `Example.class`), this time with a single Example JSON object which therefore causes the exception you are seeing.\r\n\r\nIf you already know that your data is an array of Example and you only want the first one, then it might be easiest to directly access the `JsonArray` element or to use a `JsonReader` (depending on the form in which you receive the JSON data):\r\n```java\r\npublic static void main(String[] args) throws IOException {\r\n    JsonArray array = new JsonArray();\r\n    JsonObject object = new JsonObject();\r\n    object.addProperty(\"name\", \"bitforce\");\r\n    array.add(object);\r\n    \r\n    System.out.println(fromJsonArray(array));\r\n    \r\n    try (Reader jsonString = new StringReader(\"[{\\\"name\\\":\\\"bitforce\\\"}]\")) {\r\n        System.out.println(fromJsonString(jsonString));\r\n    }\r\n}\r\n\r\nprivate static Example fromJsonArray(JsonArray jsonArray) {\r\n    if (jsonArray.size() > 0) {\r\n        return new Gson().fromJson(jsonArray.get(0), Example.class);\r\n    } else {\r\n        throw new IllegalArgumentException(\"...\");\r\n    }\r\n}\r\n\r\nprivate static Example fromJsonString(Reader jsonString) throws IOException {\r\n    JsonReader jsonReader = new JsonReader(jsonString);\r\n    jsonReader.beginArray();\r\n    if (jsonReader.hasNext()) {\r\n        return new Gson().fromJson(jsonReader, Example.class);\r\n    }\r\n    throw new IllegalArgumentException(\"...\");\r\n}\r\n```\r\n\r\nOtherwise if the Example array appears nested within other model classes, it becomes slightly more complicated. How this can be solved depends on the actual model classes you are using.\r\nYou could implement a custom [`TypeAdapterFactory`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/TypeAdapterFactory.html) which creates an adapter which begins reading the array and then calls a delegate for deserializing the `Example` object. If you always wan't JSON arrays of Example to be deserialized as single Example, then you could register that factory on the `GsonBuilder`. Otherwise you could use the [`@JsonAdapter`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/annotations/JsonAdapter.html) annotation on fields of type `Example` and then specify the  `TypeAdapterFactory` for that annotation (though don't use `Gson.getDelegateAdapter(...)` in the `TypeAdapterFactory` then because it is currently broken for `@JsonAdapter`, see #1028). =||= Thank you for the deep insight; apologies, I did not include the version I was using (`2.8.0`). Consider this closed. =||= ", 0], ["1860", "fromJson(String json, Class<T> classOfT) does not throw JsonSyntaxException when passing invalid json string", "tan", "tandt53", "02/22/21, 04:06:25 AM", "Gson v2.8.6\r\n\r\nExample code:\r\n```\r\nString text = \"{name:\\\"sample name\\\",\\\"phone\\\":\\\"0117000532\\\",\\\"email\\\":\\\"sample_mail@gmail.com\\\",\\\"legalName\\\":\\\"sample legal name\\\",\\\"representPhone\\\":\\\"01170000001\\\"}\";\r\n        Gson gson = new Gson();\r\n        try {\r\n            gson.fromJson(text, JsonElement.class);\r\n            System.out.println(\"text is VALID json string\");\r\n        } catch (JsonSyntaxException e) {\r\n            System.out.println(\"text is INVALID json string\");\r\n        }\r\n```\r\nOuput\r\n```\r\ntext is VALID json string\r\n```\r\n\r\n`text` in sample is invalid json string, cause it does not contain double quote in `name` ", "`Gson.fromJson` always parses leniently, regardless of what settings you used for the `GsonBuilder` or `JsonReader`, see also #372. Sadly this is not documented.\r\n\r\nIf you want strict parsing, you could first get the corresponding adapter for the class you want to parse through [`Gson.getAdapter(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)) and then call `fromJson(...)` on the adapter. =||= Thanks @Marcono1234 \r\nI found a workaround solution for that [here](https://stackoverflow.com/questions/43233898/how-to-check-if-json-is-valid-in-java-using-gson/47890960#47890960) =||= ", 0], ["1863", "Deserialization fails with TypeToken.getParameterized", "Yevhen Vasyliev", "yvasyliev", "02/19/21, 09:37:36 AM", "Hi,\r\n\r\nI faced with the next problem: when I want to deserialize a generic type which includes 3 (or more) nested types, Gson returns LinkedTreeMap starting from the 3rd level.\r\n\r\nQuick example:\r\n```java\r\npublic class GsonTest {\r\n    static class L1<T> {\r\n        public T l1;\r\n    }\r\n\r\n    static class L2<T> {\r\n        public T l2;\r\n    }\r\n\r\n    static class L3<T> {\r\n        public T l3;\r\n    }\r\n\r\n    @Test\r\n    public void test1() {\r\n        String json = \"{\\\"l1\\\":{\\\"l2\\\":{\\\"l3\\\":15}}}\";\r\n        L1<L2<L3<Integer>>> obj1 = new Gson().fromJson(json, new TypeToken<L1<L2<L3<Integer>>>>() {}.getType());\r\n        System.out.println(obj1.l1.l2.l3);\r\n        L1<L2<L3<Integer>>> obj2 = new Gson().fromJson(json, TypeToken.getParameterized(L1.class, L2.class, L3.class, Integer.class).getType());\r\n        System.out.println(obj2.l1.l2.l3);\r\n    }\r\n}\r\n\r\n```\r\n\r\nOutput:\r\n```\r\n15\r\n\r\njava.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to GsonTest$L3\r\n\r\n\tat GsonTest.test1(GsonTest.java:24)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1259)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1259)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\r\n\r\n```\r\n\r\nUsing debug I see that `obj2.l1.l2` field is type of `LinkedTreeMap` instead of `L3`:\r\n![image](https://user-images.githubusercontent.com/44120348/108343032-25777500-71e4-11eb-82fc-8ba39d0aabe2.png)\r\n\r\nI use `TypeToken.getParameterized(L1.class, L2.class, L3.class, Integer.class).getType()` instead of \r\n`new TypeToken<L1<L2<L3<Integer>>>>() {}.getType()` to make it a bit readable. \r\n\r\nIs it expected to return `LinkedTreeMap`?\r\n\r\nGson version: 2.8.6", "**UPD:** found possible WA:\r\n```java\r\n@Test\r\npublic void test2() {\r\n    String json = \"{\\\"l1\\\":{\\\"l2\\\":{\\\"l3\\\":15}}}\";\r\n    L1<L2<L3<Integer>>> obj3 = new Gson().fromJson(json, collectParameterized(L1.class, L2.class, L3.class, Integer.class));\r\n    System.out.println(obj3.l1.l2.l3);\r\n}\r\n\r\nprivate Type collectParameterized(Type... typeArguments) {\r\n    return collectParameterized(new LinkedList<>(Arrays.asList(typeArguments)));\r\n}\r\n\r\nprivate Type collectParameterized(LinkedList<Type> typeArguments) {\r\n    return typeArguments.size() == 1\r\n            ? TypeToken.getParameterized(typeArguments.getFirst()).getType()\r\n            : TypeToken.getParameterized(typeArguments.removeFirst(), collectParameterized(typeArguments)).getType();\r\n}\r\n```\r\nOutput:\r\n```\r\n15\r\n``` =||= Your second type in `test1` constructs a parameterized type as if it were `L1<L2, L3, Integer>` which is obviously wrong. What you were looking for, in `test1`, is the following:\r\n\r\n```java\r\nTypeToken.getParameterized(L1.class,\r\n\t\tTypeToken.getParameterized(L2.class,\r\n\t\t\t\tTypeToken.getParameterized(L3.class, Integer.class)\r\n\t\t\t\t\t\t.getType()\r\n\t\t).getType()\r\n).getType()\r\n```\r\n\r\n`collectParameterized` seems to do a similar thing, but only works for generic types with one type parameter. =||= Looks I misunderstood the purpose of `TypeToken.getParameterized` method... \ud83d\ude04 \r\n@lyubomyr-shaydariv, thanks a lot for the clarification! =||= ", 0], ["1864", "#equals for JsonPrimitive with the same Float and LazilyParsedNumber values says they aren't equal", "Andrey", "TimeConqueror", "02/28/21, 09:17:41 AM", "I have two `JsonObject`s, one is parsed from the file, and one is created manually.\r\nBoth contains some properties, where some are converted to `JsonPrimitive`s.\r\n\r\n`JsonPrimitive` from the first object contains `LazilyParsedNumber` as a value.\r\n`JsonPrimitive` from the second object, which I set manually, contains `Float` as a value.\r\n\r\nLet's imagine that both of them contain the value `4558.08`, so it should be the same.\r\nBut when I try to compare them using `JsonPrimitive#equals`, it says, that they are not the same.\r\n\r\nWhile calling this method, `JsonPrimitive` values are compared, using `Number#doubleValue()`.\r\nWhen converting to double, `JsonPrimitive` with `LazilyParsedNumber` value becomes `4558.08`.\r\nBut` JsonPrimitive` with `Float` value becomes `4558.080078125`, so they are not the same.\r\n\r\nSo how can properly compare them?\r", ">  so they are not the same.\r\n\r\nThey [cannot](https://stackoverflow.com/questions/916081/convert-float-to-double-without-losing-precision) be equal.\r\n\r\n> So how can properly compare them?\r\n\r\n* either using the \"[epsiloned](https://stackoverflow.com/questions/1088216/whats-wrong-with-using-to-compare-floats-in-java)\" way;\r\n* or using a container, say strings or `BigDecimal`s.\r\n\r\n```java\r\npublic final class ComparisonTest {\r\n\r\n\t@Test\r\n\tpublic void testDoubleEquals() {\r\n\t\tfinal double v1 = 4558.08D;\r\n\t\tfinal double v2 = 4558.08F;\r\n\t\tAssertions.assertFalse(Math.abs(v1 - v2) < 0.00000001D);\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testBigDecimalEquals() {\r\n\t\tfinal JsonPrimitive v1 = new JsonPrimitive(new LazilyParsedNumber(\"4558.08\"));\r\n\t\tfinal JsonPrimitive v2 = new JsonPrimitive(4558.08);\r\n\t\tAssertions.assertTrue(v1.getAsBigDecimal().equals(v2.getAsBigDecimal()));\r\n\t}\r\n\r\n}\r\n``` =||= Got it, thanks! =||= ", 0], ["1866", "java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 45 path $.USD (Kotlin)", null, "TexasT5", "09/08/21, 01:19:07 PM", "I have Problem \"java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 45 path $.USD\"\r\nI did some research on this issue, but there was no result.\r\n\r\n\r\nMy Code Build\r\n\r\n### Interface\r\n```\r\n interface ApiService {\r\n    @Headers(\"Content-Type: application/json\")\r\n     @GET(\"today.json\")\r\n   fun getData() : Call<Data>\r\n }\r\n```\r\n\r\n\r\n### Data Class\r\n```\r\ndata class Data(\r\n @SerializedName(\"Update_Date\")\r\n val Update_Date : String,\r\n @SerializedName(\"USD\")\r\n var USD: List<USDList>,\r\n)\r\n```\r\n### **List<USDList>**\r\n\r\n```\r\ndata class USDList ( \r\n    @SerializedName(\"Buying\")\r\n    @Expose\r\n    var buying: String? = null,\r\n\r\n    @SerializedName(\"Selling\")\r\n    @Expose\r\n    var selling: String? = null,\r\n\r\n     @SerializedName(\"Type\")\r\n     @Expose\r\n      var type: String? = null,\r\n\r\n      @SerializedName(\"Name\")\r\n      @Expose\r\n       var name: String? = null)\r\n```\r\n\r\n### MainActivity\r\n\r\n```\r\nval retrofit = Retrofit.Builder()\r\n           .addConverterFactory(GsonConverterFactory.create())\r\n           .baseUrl(\"https://finans.truncgil.com/v2/\")\r\n           .build()\r\n\r\n        val retrofitCreate = retrofit.create(ApiService::class.java)\r\n        retrofitCreate.getData().enqueue(object : Callback<Data>{\r\n            override fun onResponse(call: Call<Data>, response: Response<Data>) {\r\n                println(\"Datas : ${response.body().toString()}\")\r\n                showData(response.body())\r\n            }\r\n\r\n            private fun showData(body: Data?) {\r\n                recylerViewD\u00f6viz.apply {\r\n                    adapter = body.let { D\u00f6vizRecylerView(it!! , this@DovizActivity) }\r\n                    layoutManager = LinearLayoutManager(this@DovizActivity)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<Data>, t: Throwable) {\r\n                Log.e(TAG , t.localizedMessage.toString())\r\n            }\r\n\r\n        })\r\n```\r\n\r\nHow to fix problem?   I don't know if it is forbidden to share links  https://finans.truncgil.com/v2/today.json I get the json data from here\r\n\r", "As described by the exception message your data class makes Gson expect a JSON array (because you are using `List<...>`), but the actual JSON data is using a JSON object:\r\n```json\r\n\"USD\":{\"Buying\":\"7,0253\",\"Selling\":\"7,0380\",\"Type\":\"Exchange\",\"Name\":\"ABD DOLARI\"}\r\n```\r\nYou will have to fix your data class to correctly repesent the JSON structure. =||= @TexasT5 This is the kind of problem that would be better for Stack Overflow. It's a problem you're encountering using the library and you haven't confirmed that it's a bug (aka \"issue\") with the library. Usually, folks on Stack Overflow can help you find the bug in your code (since that's where the problem is in this case) and if no one can help find an issue with your code, it means it's a problem with the library and you'd post here. =||= I also facing the same problem. I appreciate the answer of marcono1234 but he didn't provide any useful structure for objects to get data from. So, i will also be thankful if someone post the right article or answer here. Thanks =||= The comment from @mattwelke sums up the situation well. This sounds like a problem with using the library rather than with the library itself, and Stack Overflow would be a better venue. =||= ", 0], ["1868", "Is this project actively maintained? Do you need help?", "Yeikel", "yeikel", "03/01/21, 08:25:05 PM", "Hi team, \r\n\r\nLast release for this project was in Oct, 2019 and there are over 400 issues and 155 PRs open at the time of this issue. \r\n\r\nIs this project still maintained?  Do you need help to manage it? \r\n\r\nThank you! \r", "Hi Yeikel,\r\n\r\nThe project is in mostly a maintenance mode, with few updates being accepted at this time. Gson is used very widely and 100% backward compatibility is very critical to us. We are also quite averse to expanding the API footprint substantially.\r\n\r\nYou can certainly help by looking at the open PRs that are small scoped and add review comments to help us accept or reject them. Also, please look at whether good test-cases are added.\r\n\r\nThanks\r\nInder\r\n =||= ", 0], ["1869", "Caling .toArray on a LinkedTreeMap of LinkedTreeMap's throws an array store exception", null, "AnilPeresDaSilva", "03/03/21, 12:58:25 AM", "here is sample code that reproduces the issue... (reproduced with build 2.8.6)\r\n\t\tString s = \"[{\\\"self\\\":\\\"https://microfocus.atlassian.net/rest/api/2/version/10312\\\",\\\"id\\\":\\\"10312\\\",\\\"name\\\":\\\"Release 1\\\",\\\"archived\\\":false,\\\"released\\\":false,\\\"projectId\\\":12111}]\";\r\n\t\tLinkedTreeMap[] mm = (LinkedTreeMap[]) new Gson().fromJson(s, LinkedTreeMap[].class);\r\n\t\tfor (LinkedTreeMap m : mm) {\r\n\t\t\tLinkedTreeMap[] members = (LinkedTreeMap[])m.keySet().toArray(new LinkedTreeMap[0]);\r\n\t\t}\r", " apologies.\r\nThe result of this parse is a list of nodes, not a list of maps. =||= ", 0], ["1872", "why ? to json return null", null, "YanQin-JAVA", "03/08/21, 01:53:25 AM", "\r\n       public static void main(String[] args) throws JsonProcessingException {\r\n\t\tclass User{\r\n\t\t\tprivate String a;\r\n\r\n\t\t\tpublic User() {\r\n\t\t\t}\r\n\r\n\t\t\tpublic User(String a) {\r\n\t\t\t\tthis.a = a;\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic String toString() {\r\n\t\t\t\treturn \"User{\" +\r\n\t\t\t\t\t\t\"a='\" + a + '\\'' +\r\n\t\t\t\t\t\t'}';\r\n\t\t\t}\r\n\r\n\t\t\tpublic String getA() {\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\r\n\t\t\tpublic void setA(String a) {\r\n\t\t\t\tthis.a = a;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tArrayList<Object> users = Lists.newArrayList(new User(\"a\"), new User(\"b\"));\r\n\t\tGson gson = new GsonBuilder().create();\r\n\t\tString s = gson.toJson(new User(\"c\"));\r\n\t\tString s1 = (new ObjectMapper()).writeValueAsString(users);\r\n\t\tSystem.out.println(\"s = \" + s);\r\n\t\tSystem.out.println(\"s1 = \" + s1);\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n//return :\r\ns = null\r\ns1 = [{\"a\":\"a\"},{\"a\":\"b\"}]\r", "gson version : 2.8.6 =||= Local classes are not supported. See #1510 and https://github.com/google/gson/blob/master/UserGuide.md#finer-points-with-objects. To solve this make `User` either a top-level class or a `static` nested class.\r\n\r\n(comment copied from lyubomyr-shaydariv's comment [here](https://github.com/google/gson/issues/1795#issuecomment-706591619)) =||= ", 0], ["1874", "Serializer-Adapter not working in Objects in an array [GSON 2.8.6]", null, "iubye", "03/18/21, 10:57:47 AM", "I am using a LocalDateSerializer registered with GsonBuilder.\r\n\r\n`\r\nclass LocalDateSerializer implements JsonSerializer<LocalDate> {\r\n  \r\n  public JsonElement serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context) {\r\n    return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE));\r\n  }\r\n}\r\n`\r\n`\r\nnew GsonBuilder() //\r\n        .disableHtmlEscaping() //\r\n        .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY) //\r\n        .registerTypeAdapter(LocalDate.class, new LocalDateSerializer()).create();\r\n`\r\nNow i am trying to convert the following json\r\n`\r\nString json = \"[{\\\"date\\\":\\\"2012-04-22\\\"},{\\\"date\\\":\\\"1877-02-18\\\"}]\";\r\n`\r\nto a Java-Object. But I get this error:\r\n`\r\ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 11 path $[0].date\r\n`\r\nWhen i am not useing the Json-Object in an array, it works fine!\r\n`\r\nString json = \"{\\\"date\\\":\\\"2012-04-22\\\"}\";\r\n`\r\n\r\nWhen I use a TypeAdapter<LocalDate> it works as Object and in an Array.\r\n\r\nI am not sure if this is an error or if thats a wanted behaviour.\r\n\r", "Ok... I mus use the Deserializer, that was my mistake! =||= ", 0], ["1878", "replaced deprecated constructor call with static factory call", "Nils Wende", "nilswende", "09/13/21, 07:35:45 PM", "NaN", "Looks like this was already fixed by #1953. =||= Indeed, this is already fixed. =||= ", 0], ["1879", "[Question]: Return new ParameterizedType", "Hossein Abbasi", "Drjacky", "04/04/21, 06:10:04 PM", "In Moshi library, we could do something like this:\r\n```kotlin\r\nval observableEmissionType = getParameterUpperBound(0, returnType)\r\nval successBodyType = getParameterUpperBound(0, observableEmissionType)\r\nval delegateType = Types.newParameterizedType( //Types: com.squareup.moshi.Types -> https://square.github.io/moshi/1.x/moshi/com/squareup/moshi/Types.html#newParameterizedType-java.lang.reflect.Type-java.lang.reflect.Type...-\r\n    Observable::class.java,\r\n    successBodyType\r\n)\r\n```\r\n\r\nHow we could do the same in Gson?\r\n\r\nIn old versions, we had a similar thing:\r\nhttps://javadoc.io/doc/com.google.code.gson/gson/1.7.1/com/google/gson/internal/$Gson$Types.html", "It sounds like you are looking for [`TypeToken.getParameterized(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/reflect/TypeToken.html#getParameterized(java.lang.reflect.Type,java.lang.reflect.Type...)). This gives you a `TypeToken` on which you can then invoke `getType()` to get a `Type` (which is actually a `ParameterizedType`). =||= ", 0], ["1882", "Changed the name of the method \"equal\"", null, "RosieKatze", "08/31/21, 04:33:57 PM", "NaN", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1882) for more info**.\n\n<!-- need_sender_cla --> =||= I don't think there's a compelling reason for this change and the CLA has not been signed. =||= ", 0], ["1888", "Bump maven-bundle-plugin from 3.3.0 to 5.1.2", null, "dependabot[bot]", "05/13/21, 11:39:58 PM", "Bumps maven-bundle-plugin from 3.3.0 to 5.1.2.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.felix:maven-bundle-plugin&package-manager=maven&previous-version=3.3.0&new-version=5.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1888", "Bump maven-bundle-plugin from 3.3.0 to 5.1.2", null, "dependabot[bot]", "05/13/21, 11:39:58 PM", "Bumps maven-bundle-plugin from 3.3.0 to 5.1.2.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.felix:maven-bundle-plugin&package-manager=maven&previous-version=3.3.0&new-version=5.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-bundle-plugin from 3.3.0 to 5.1.2\n\nBumps maven-bundle-plugin from 3.3.0 to 5.1.2.\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:25 PM", "GitHub", "0d4e59da8bad80b48b13d1be1728244e9faa99ac", ["pom.xml"], "@@ -106,7 +106,7 @@\n         <plugin>\n           <groupId>org.apache.felix</groupId>\n           <artifactId>maven-bundle-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>5.1.2</version>\n           <inherited>true</inherited>\n         </plugin>\n       </plugins>, ", 1, 1, "\"modified, \"", 2], 1], ["1889", "Bump maven-javadoc-plugin from 2.10.4 to 3.2.0", null, "dependabot[bot]", "05/13/21, 11:39:39 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d3b77d6e1bbd079a0d5d0659a183871b3f638c53\"><code>d3b77d6</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/41bc516c85cdd832a521f3acc64128533139e0af\"><code>41bc516</code></a> back to 3.2.0-SNAPSHOT</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/819cf1eb954952c3a194d3973e5d416b592db1bc\"><code>819cf1e</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/45f4b3e6b501ac05d99e529fc1abdaa4edf32b1b\"><code>45f4b3e</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d772fce836c44fb64bd67b103cb839c2de213bb4\"><code>d772fce</code></a> MJAVADOC-610 Add IT test for multirelease jar</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/37d0ef59000410a0e33e0cd3fc48fe727ab76108\"><code>37d0ef5</code></a> [MJAVADOC-638] upgrade Doxia Sitetools to 1.9.2 to remove dependency on Strut...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/528ce30dae9932c153f11b834f1e3450a06c14c6\"><code>528ce30</code></a> [MJAVADOC-639] Switch to Oracle OpenJDK 11 compatible jar, see MJAVADOC-610</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/405b16dc1de312d31f8a4f31c1cf8a07db3220eb\"><code>405b16d</code></a> [MJAVADOC-639] include requires static from external dependencies for all mod...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/aaa200709beef93a57af399a7247410f027c6962\"><code>aaa2007</code></a> [MJAVADOC-637] make build Reproducible</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/7bfa76d3b9bdf61cb78152292420843a15b7bd76\"><code>7bfa76d</code></a> [MJAVADOC-636] exclude some modules from aggregated javadoc</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=2.10.4&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1889", "Bump maven-javadoc-plugin from 2.10.4 to 3.2.0", null, "dependabot[bot]", "05/13/21, 11:39:39 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d3b77d6e1bbd079a0d5d0659a183871b3f638c53\"><code>d3b77d6</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/41bc516c85cdd832a521f3acc64128533139e0af\"><code>41bc516</code></a> back to 3.2.0-SNAPSHOT</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/819cf1eb954952c3a194d3973e5d416b592db1bc\"><code>819cf1e</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/45f4b3e6b501ac05d99e529fc1abdaa4edf32b1b\"><code>45f4b3e</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d772fce836c44fb64bd67b103cb839c2de213bb4\"><code>d772fce</code></a> MJAVADOC-610 Add IT test for multirelease jar</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/37d0ef59000410a0e33e0cd3fc48fe727ab76108\"><code>37d0ef5</code></a> [MJAVADOC-638] upgrade Doxia Sitetools to 1.9.2 to remove dependency on Strut...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/528ce30dae9932c153f11b834f1e3450a06c14c6\"><code>528ce30</code></a> [MJAVADOC-639] Switch to Oracle OpenJDK 11 compatible jar, see MJAVADOC-610</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/405b16dc1de312d31f8a4f31c1cf8a07db3220eb\"><code>405b16d</code></a> [MJAVADOC-639] include requires static from external dependencies for all mod...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/aaa200709beef93a57af399a7247410f027c6962\"><code>aaa2007</code></a> [MJAVADOC-637] make build Reproducible</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/7bfa76d3b9bdf61cb78152292420843a15b7bd76\"><code>7bfa76d</code></a> [MJAVADOC-636] exclude some modules from aggregated javadoc</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=2.10.4&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-javadoc-plugin from 2.10.4 to 3.2.0\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:25 PM", "GitHub", "49d128b4231217786274a53df29af1aeeb469cdb", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.4</version>\n+          <version>3.2.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2], 1], ["1890", "Bump bnd-maven-plugin from 4.0.0 to 5.3.0", null, "dependabot[bot]", "05/13/21, 11:39:26 PM", "Bumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">bnd-maven-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.3.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.3.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.2.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.2.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.2</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.2\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.1</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.1\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.0.1</h2>\n<p>Maintenance release.</p>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.0.1\">Release Notes</a>.</p>\n<h2>5.0.1.RC2</h2>\n<p>No release notes provided.</p>\n<h2>5.0.1.RC1</h2>\n<p>No release notes provided.</p>\n<h2>Bnd/Bndtools 5.0.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.0.0\">Release Notes</a>.</p>\n<h2>4.4.0.DEV</h2>\n<p>No release notes provided.</p>\n<h2>4.3.1</h2>\n<p>Maintenance fix release for 4.3.0</p>\n<h2>4.3.1.DEV</h2>\n<p>No release notes provided.</p>\n<h2>4.3.1.RC1</h2>\n<p>No release notes provided.</p>\n<h2>4.3.0.REL</h2>\n<p>No release notes provided.</p>\n<h2>4.2.0.REL</h2>\n<p>No release notes provided.</p>\n<h2>4.1.0.REL</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:bnd-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=5.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1890", "Bump bnd-maven-plugin from 4.0.0 to 5.3.0", null, "dependabot[bot]", "05/13/21, 11:39:26 PM", "Bumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">bnd-maven-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.3.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.3.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.2.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.2.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.2</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.2\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.1</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.1\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.1.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.0\">Release Notes</a>.</p>\n<h2>Bnd/Bndtools 5.0.1</h2>\n<p>Maintenance release.</p>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.0.1\">Release Notes</a>.</p>\n<h2>5.0.1.RC2</h2>\n<p>No release notes provided.</p>\n<h2>5.0.1.RC1</h2>\n<p>No release notes provided.</p>\n<h2>Bnd/Bndtools 5.0.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.0.0\">Release Notes</a>.</p>\n<h2>4.4.0.DEV</h2>\n<p>No release notes provided.</p>\n<h2>4.3.1</h2>\n<p>Maintenance fix release for 4.3.0</p>\n<h2>4.3.1.DEV</h2>\n<p>No release notes provided.</p>\n<h2>4.3.1.RC1</h2>\n<p>No release notes provided.</p>\n<h2>4.3.0.REL</h2>\n<p>No release notes provided.</p>\n<h2>4.2.0.REL</h2>\n<p>No release notes provided.</p>\n<h2>4.1.0.REL</h2>\n<p>No release notes provided.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:bnd-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=5.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump bnd-maven-plugin from 4.0.0 to 5.3.0\n\nBumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.\n- [Release notes](https://github.com/bndtools/bnd/releases)\n- [Changelog](https://github.com/bndtools/bnd/blob/master/docs/ADDING_RELEASE_DOCS.md)\n- [Commits](https://github.com/bndtools/bnd/commits)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:27 PM", "GitHub", "83c63d225604b2c1c4c863a18940a52cc7c70f2a", ["gson/pom.xml"], "@@ -34,7 +34,7 @@\n       <plugin>\n         <groupId>biz.aQute.bnd</groupId>\n         <artifactId>bnd-maven-plugin</artifactId>\n-        <version>4.0.0</version>\n+        <version>5.3.0</version>\n         <executions>\n           <execution>\n             <goals>, ", 1, 1, "\"modified, \"", 2], 1], ["1891", "Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2", null, "dependabot[bot]", "05/13/21, 11:39:13 PM", "Bumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.9.5&new-version=1.11.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1891", "Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2", null, "dependabot[bot]", "05/13/21, 11:39:13 PM", "Bumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.9.5&new-version=1.11.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2\n\nBumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:28 PM", "GitHub", "e6750e7b947b5508128689915c66e89792e0cdb2", ["pom.xml"], "@@ -120,7 +120,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.9.5</version>\n+            <version>1.11.2</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 1, 1, "\"modified, \"", 2], 1], ["1892", "Bump junit from 4.12 to 4.13.2", null, "dependabot[bot]", "05/13/21, 11:38:58 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.2.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/05fe2a64f59127c02135be22f416e91260d6ede6\"><code>05fe2a6</code></a> [maven-release-plugin] prepare release r4.13.2</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ff57344f7171ea8b0935c4f842cacf1097266592\"><code>ff57344</code></a> Add build for JDK 17-ea</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/02aaa01b8f74c0eb496d76685ec49fddeb311087\"><code>02aaa01</code></a> Improve check that thread is stopped</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/e9a75f4be71a4d5a794ccd063522eea4b0f3194f\"><code>e9a75f4</code></a> Merge test for exception type and message</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/d27ad5259228e84c235dac24cd62f974ac0a8e1d\"><code>d27ad52</code></a> Rename DelegateStatement to DelegatingStatement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b83dc2e8c4ff06cf233cd347f1280bb417482985\"><code>b83dc2e</code></a> Better name for test that stops statement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/527f3a3d0d71ad6dc66ede6f68f6fc316904ed2a\"><code>527f3a3</code></a> Replace InfiniteLoop with RunForASecond</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52\"><code>2db6394</code></a> Tidy up FailOnTimeoutTest</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/64634e1c3e357251a84278c26b73b04fc3450ea3\"><code>64634e1</code></a> Update 4.13.2 release notes to document pull 1654</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/f8ee412316b1a94d3dc35498359cc2f0ca273216\"><code>f8ee412</code></a> Fix serialization of AssumptionViolatedException (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1654\">#1654</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1892", "Bump junit from 4.12 to 4.13.2", null, "dependabot[bot]", "05/13/21, 11:38:58 PM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.2.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/05fe2a64f59127c02135be22f416e91260d6ede6\"><code>05fe2a6</code></a> [maven-release-plugin] prepare release r4.13.2</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ff57344f7171ea8b0935c4f842cacf1097266592\"><code>ff57344</code></a> Add build for JDK 17-ea</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/02aaa01b8f74c0eb496d76685ec49fddeb311087\"><code>02aaa01</code></a> Improve check that thread is stopped</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/e9a75f4be71a4d5a794ccd063522eea4b0f3194f\"><code>e9a75f4</code></a> Merge test for exception type and message</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/d27ad5259228e84c235dac24cd62f974ac0a8e1d\"><code>d27ad52</code></a> Rename DelegateStatement to DelegatingStatement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b83dc2e8c4ff06cf233cd347f1280bb417482985\"><code>b83dc2e</code></a> Better name for test that stops statement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/527f3a3d0d71ad6dc66ede6f68f6fc316904ed2a\"><code>527f3a3</code></a> Replace InfiniteLoop with RunForASecond</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52\"><code>2db6394</code></a> Tidy up FailOnTimeoutTest</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/64634e1c3e357251a84278c26b73b04fc3450ea3\"><code>64634e1</code></a> Update 4.13.2 release notes to document pull 1654</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/f8ee412316b1a94d3dc35498359cc2f0ca273216\"><code>f8ee412</code></a> Fix serialization of AssumptionViolatedException (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1654\">#1654</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump junit from 4.12 to 4.13.2\n\nBumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.\n- [Release notes](https://github.com/junit-team/junit4/releases)\n- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)\n- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/13/21, 11:31:34 PM", "GitHub", "05a25a1ef242520bef0e4f9a64e319f3af687e69", ["pom.xml"], "@@ -51,7 +51,7 @@\n       <dependency>\n         <groupId>junit</groupId>\n         <artifactId>junit</artifactId>\n-        <version>4.12</version>\n+        <version>4.13.2</version>\n         <scope>test</scope>\n       </dependency>\n     </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["1894", "Bump maven-javadoc-plugin from 3.2.0 to 3.3.0", null, "dependabot[bot]", "05/24/21, 10:30:36 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/aa3e12c52f0845f0561f3b4db719c0e8ede1aada\"><code>aa3e12c</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/55982df63f8de5bfbb48aee353bc29b35b1c6a2c\"><code>55982df</code></a> [MJAVADOC-584] excludePackageNames is not working as documented anymore</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/e9729cecf01bd1962b5fd4cbff14996bad8f92a6\"><code>e9729ce</code></a> [MJAVADOC-453] Using Alternate Doclet documentation example snippet is out of...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/9f98af73ec59629415926374cfe4f6ff3b198e45\"><code>9f98af7</code></a> [MJAVADOC-592] detectJavaApiLink should also respect maven.compiler.source pr...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/1028afcf24ba35eedf1ebbbe62bd9418e06fb7f6\"><code>1028afc</code></a> [MJAVADOC-592] Prepare integration tests</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/1963ee882e6eb0e4f6c15d5eb6205c31d9f73740\"><code>1963ee8</code></a> Bump actions/checkout from 2 to 2.3.4</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/f27c99dcf35a27ab06b00ad1e2b30336de39fdf8\"><code>f27c99d</code></a> [MJAVADOC-590] Setting nooverview option always causes a build failure</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d5b80c06c9d243a3e267c5dbb5961fd9d514ab87\"><code>d5b80c0</code></a> Revert &quot;(doc) enable streamLogsOnFailure&quot;</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/3926bd4cadaa6e4c49c7f973f04927602e384d40\"><code>3926bd4</code></a> [MJAVADOC-619] Maven Javadoc bottom claims copyright for future years</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/15a02d6f7928681be6d11a7866ccc09d73a9c869\"><code>15a02d6</code></a> (doc) enable streamLogsOnFailure</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "@dependabot rebase =||= Looks like this PR is already up-to-date with master! If you'd still like to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`. =||= ", ["1894", "Bump maven-javadoc-plugin from 3.2.0 to 3.3.0", null, "dependabot[bot]", "05/24/21, 10:30:36 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/aa3e12c52f0845f0561f3b4db719c0e8ede1aada\"><code>aa3e12c</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/55982df63f8de5bfbb48aee353bc29b35b1c6a2c\"><code>55982df</code></a> [MJAVADOC-584] excludePackageNames is not working as documented anymore</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/e9729cecf01bd1962b5fd4cbff14996bad8f92a6\"><code>e9729ce</code></a> [MJAVADOC-453] Using Alternate Doclet documentation example snippet is out of...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/9f98af73ec59629415926374cfe4f6ff3b198e45\"><code>9f98af7</code></a> [MJAVADOC-592] detectJavaApiLink should also respect maven.compiler.source pr...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/1028afcf24ba35eedf1ebbbe62bd9418e06fb7f6\"><code>1028afc</code></a> [MJAVADOC-592] Prepare integration tests</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/1963ee882e6eb0e4f6c15d5eb6205c31d9f73740\"><code>1963ee8</code></a> Bump actions/checkout from 2 to 2.3.4</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/f27c99dcf35a27ab06b00ad1e2b30336de39fdf8\"><code>f27c99d</code></a> [MJAVADOC-590] Setting nooverview option always causes a build failure</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d5b80c06c9d243a3e267c5dbb5961fd9d514ab87\"><code>d5b80c0</code></a> Revert &quot;(doc) enable streamLogsOnFailure&quot;</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/3926bd4cadaa6e4c49c7f973f04927602e384d40\"><code>3926bd4</code></a> [MJAVADOC-619] Maven Javadoc bottom claims copyright for future years</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/15a02d6f7928681be6d11a7866ccc09d73a9c869\"><code>15a02d6</code></a> (doc) enable streamLogsOnFailure</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-javadoc-plugin from 3.2.0 to 3.3.0\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0)\n\nSigned-off-by: dependabot[bot] <support@github.com>", "05/24/21, 06:27:14 AM", "GitHub", "d4fb033a472c338814f4159d6602aef561f393f1", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>3.2.0</version>\n+          <version>3.3.0</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2], 1], ["1895", "Update user guide and change log to reflect 2.8.7 release.", "\u00c9amonn McManus", "eamonnmcmanus", "05/25/21, 12:42:32 AM", "NaN", "NaN", ["1895", "Update user guide and change log to reflect 2.8.7 release.", "\u00c9amonn McManus", "eamonnmcmanus", "05/25/21, 12:42:32 AM", "NaN", "NaN"], ["\u00c9amonn McManus", "Update user guide and change log to reflect 2.8.7 release.", "05/24/21, 11:39:52 PM", "\u00c9amonn McManus", "45c0bd96f08ce60baaacc339138a2a2c97b953a6", ["CHANGELOG.md", "UserGuide.md"], "@@ -1,6 +1,16 @@\n Change Log\n ==========\n \n+## Version 2.8.7\n+\n+* Fixed `ISO8601UtilsTest` failing on systems with UTC+X.\n+* Improved javadoc for `JsonStreamParser`.\n+* Updated proguard.cfg (#1693).\n+* Fixed `IllegalStateException` in `JsonTreeWriter` (#1592).\n+* Added `JsonArray.isEmpty()` (#1640).\n+* Added new test cases (#1638).\n+* Fixed OSGi metadata generation to work on JavaSE < 9 (#1603).\n+\n ## Version 2.8.6\n _2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n  * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`, @@ -74,7 +74,7 @@ The Gson instance does not maintain any state while invoking Json operations. So\n ## <a name=\"TOC-Gson-With-Gradle\"></a>Using Gson with Gradle/Android\n ```\n dependencies {\n-    implementation 'com.google.code.gson:gson:2.8.6'\n+    implementation 'com.google.code.gson:gson:2.8.7'\n }\n ```\n ## <a name=\"TOC-Gson-With-Maven\"></a>Using Gson with Maven\n@@ -86,7 +86,7 @@ To use Gson with Maven2/3, you can use the Gson version available in Maven Centr\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n-      <version>2.8.6</version>\n+      <version>2.8.7</version>\n       <scope>compile</scope>\n     </dependency>\n </dependencies>, ", 12, 2, "\"modified, modified, \"", 14], 1], ["1897", "Update README.md version 2.8.6 -> 2.8.7", null, "Conclure", "05/27/21, 02:16:48 PM", "version 2.8.6 -> 2.8.7 for gradle and maven dependencies block", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1897) for more info**.\n\n<!-- need_sender_cla --> =||= > @googlebot I signed it!\r\n\r\n =||= Thanks! =||= ", ["1897", "Update README.md version 2.8.6 -> 2.8.7", null, "Conclure", "05/27/21, 02:16:48 PM", "version 2.8.6 -> 2.8.7 for gradle and maven dependencies block", "NaN"], ["Conclure", "Update README.md version 2.8.6 -> 2.8.7\n\nversion 2.8.6 -> 2.8.7 for gradle and maven dependencies block", "05/26/21, 11:27:53 AM", "GitHub", "812b9c08e373240d69e0dd99a8d08fd47c53b48e", ["README.md"], "@@ -17,7 +17,7 @@ There are a few open-source projects that can convert Java objects to JSON. Howe\n Gradle:\n ```gradle\n dependencies {\n-  implementation 'com.google.code.gson:gson:2.8.6'\n+  implementation 'com.google.code.gson:gson:2.8.7'\n }\n ```\n \n@@ -26,7 +26,7 @@ Maven:\n <dependency>\n   <groupId>com.google.code.gson</groupId>\n   <artifactId>gson</artifactId>\n-  <version>2.8.6</version>\n+  <version>2.8.7</version>\n </dependency>\n ```\n , ", 2, 2, "\"modified, \"", 4], 1], ["1909", "Test cases for testing the exceptional behavior of JsonArray get... methods", "Ajay Kumar Jha", "HiFromAjay", "08/07/21, 02:54:13 PM", "Test cases for testing the exceptional behavior of `get`, `getAsBoolean`, `getAsDouble`, `getAsInt`, `getAsJsonArray`, `getAsJsonObject`, `getAsLong`, and `getAsString` methods of `JsonArray` class. These test cases, which we wrote according to the specified behavior of each method, that helped us in identifying the documentation bugs in `JsonArray` and `JsonElement` classes, which we submitted issues for (Issue #1908). Note that we have adapted these test cases based on similar tests from the [JSON-java](https://github.com/stleary/JSON-java) project.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1909) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= ", ["1909", "Test cases for testing the exceptional behavior of JsonArray get... methods", "Ajay Kumar Jha", "HiFromAjay", "08/07/21, 02:54:13 PM", "Test cases for testing the exceptional behavior of `get`, `getAsBoolean`, `getAsDouble`, `getAsInt`, `getAsJsonArray`, `getAsJsonObject`, `getAsLong`, and `getAsString` methods of `JsonArray` class. These test cases, which we wrote according to the specified behavior of each method, that helped us in identifying the documentation bugs in `JsonArray` and `JsonElement` classes, which we submitted issues for (Issue #1908). Note that we have adapted these test cases based on similar tests from the [JSON-java](https://github.com/stleary/JSON-java) project.", "NaN"], ["HiFromAjay", "Remove unused imports [#1909, #1908]", "08/05/21, 11:23:28 PM", "HiFromAjay", "01ab13f701e6db84bdf37f602ef7af3c8d5c2f35", ["gson/src/test/java/com/google/gson/JsonArrayTest.java"], "@@ -16,12 +16,8 @@\n \n package com.google.gson;\n \n-import junit.framework.TestCase;\n-\n import com.google.gson.common.MoreAsserts;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import junit.framework.TestCase;\n \n /**\n  * @author Jesse Wilson, ", 1, 5, "\"modified, \"", 6], 1], ["1911", "FieldNamingPolicy.IDENTITY causes Gson to stop respecting other settings", "Kyland Holmes", "KyKoPho", "06/17/21, 09:32:57 PM", "We are seeing that when initializing an instance of Gson like so:\r\n\r\n`new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).setPrettyPrinting().disableHtmlEscaping().create();`\r\nthat the returned instance no longer respects the pretty printing or the disable HTML escaping settings.\r\n\r\nFor a Java pojo that looks like\r\n\r\n```\r\npublic class Recipe implements java.io.Serializable  {\r\n  public java.lang.String id;\r\n  \r\n  public java.lang.String name;\r\n}\r\n```\r\n\r\nIf we serialize the following json into an instance of that `Recipe` class:\r\n\r\n```\r\n{\r\n\t\"id\": \"abc123\",\r\n\t\"name\": \"<div> Test </div>\"\r\n}\r\n```\r\n\r\nThen subsequently deserialize the resultind `Recipe` back to json, the output is:\r\n\r\n`{\"id\":\"abc123\",\"name\":\"\\u003cdiv\\u003e Test \\u003c/div\\u003e\"}`\r\n\r\nNote that the naming convention has been respected, but there is no whitespace from the pretty printing setting, nor is the HTML unescaped.", "Note that this is happening in version 2.8.7 of the com.google.code.gson java lib for Gson. =||= This looks like it has to do with the way Spring is autowiring references.  Closing as the repro is not reliable. =||= ", 0], ["1914", "MD.MAMUNSAAD ->GitHub.com_apache.org", null, "saadmamun7g", "06/29/21, 08:34:49 PM", "libphonenumber\n\nProject:\u00a0https://github.com/googlei18n/libphonenumber.git\n\n\u00a9 2012 The Libphonenumber Authors\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\ngson\n\nProject:\u00a0https://github.com/google/gson.git\n\n\u00a9 2008 Google Inc.\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\ncommons-codec\n\nProject:\u00a0http://svn.apache.org/repos/asf/commons/proper/codec/trunk\n\n\u00a9 2002-2014 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\ncommons-logging\n\nProject:\u00a0http://svn.apache.org/repos/asf/commons/proper/logging/trunk/\n\n\u00a9 2002-2014 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nhttpcomponents\n\nProject:\u00a0http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk\n\n\u00a9 1999-2015 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nhttpcore\n\nProject:\u00a0http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk\n\n\u00a9 2005-2014 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\njson\n\nProject:\u00a0https://github.com/douglascrockford/JSON-java\n\n\u00a9 2002 JSON.org\n\nLicense: JSON\u00a0http://www.json.org/license.html\n\n\ndisklrucache\n\nProject:\u00a0https://github.com/JakeWharton/DiskLruCache\n\n\u00a9 2012 Jake Wharton\n\n\u00a9 2011 The Android Open Source Project\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\njavax.inject\n\nProject:\u00a0https://code.google.com/archive/p/atinject/\n\n\u00a9 2009 The JSR-330 Expert Group\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nandroid-priority-jobqueue\n\nProject:\u00a0https://github.com/path/android-priority-jobqueue\n\n\u00a9 2013 Path, Inc.\n\nLicense: The MIT License (MIT)\u00a0https://opensource.org/licenses/MIT\n\n\norg.khronos:opengl-api:gl1.1-android-2.1_r1\n\nProject:\u00a0https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/opengl/java/javax/microedition/khronos\n\n\u00a9 2006, The Android Open Source Project\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nXerces\n\nProject:\u00a0http://svn.apache.org/repos/asf/xerces/java/trunk\n\n\u00a9 1999-2015 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nMXP1\n\nProject:\u00a0http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/\n\n\u00a9 2001-2003 The Apache Software Foundation. All rights reserved.\n\n\u00a9 2003 Extreme! Lab, Indiana University. All rights reserved.\n\n\u00a9 2002-2004 Extreme! Lab, Indiana University. All rights reserved.\n\n\u00a9 2003 The Trustees of Indiana University.\n\n\u00a9 2002-2004 The Trustees of Indiana University.\n\n\u00a9 2002 Raphael Szwarc. All Rights Reserved.\n\nLicense: Apache 1.1\u00a0https://www.apache.org/licenses/LICENSE-1.1\n\n\nstickyheadersrecyclerview\n\nProject:\u00a0https://github.com/timehop/sticky-headers-recyclerview.git\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nslidinguppanel\n\nProject:\u00a0https://github.com/umano/AndroidSlidingUpPanel.git\n\n\u00a9 1999-2015 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nlinear-layout-manager\n\nProject:\u00a0https://github.com/serso/android-linear-layout-manager.git\n\n\u00a9 2014, 2015 serso aka se.solovyev\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nUnderscore.js\n\nProject:\u00a0http://underscorejs.org/\n\n\u00a9 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative\n\nLicense:\u00a0https://github.com/jashkenas/underscore/blob/master/LICENSE\n\n\njava-util/CaseInsensitiveMap\n\nProject:\u00a0https://github.com/jdereg/java-util\n\n\u00a9 Cedar Software LLC\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nCountingOutputStream/CountingInputStream\n\nProject:\u00a0https://github.com/google/guava/tree/master/guava/src/com/google/common/io\n\n\u00a9 Google, Inc.\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nmustache.js\n\nProject:\u00a0https://github.com/janl/mustache.js\n\n\u00a9 2009 Chris Wanstrath (Ruby)\n\n\u00a9 2010-2014 Jan Lehnardt (JavaScript)\n\n\u00a9 2010-2015 The mustache.js community\n\nLicense: The MIT License (MIT)\u00a0https://opensource.org/licenses/MIT\n\n\nLodash\n\nProject:\u00a0https://github.com/lodash/lodash\n\n\u00a9 JS Foundation and other contributors <https://js.foundation/>\n\nLicense: The MIT License (MIT)\u00a0https://opensource.org/licenses/MIT\n\n\nGlide\n\nProject:\u00a0https://github.com/bumptech/glide\n\n\u00a9 2012 Jake Wharton\n\n\u00a9 2011 The Android Open Source Project\n\n\u00a9 2013 Xcellent Creations, Inc.\n\n\u00a9 1994 Anthony Dekker\n\nLicense: BSD, part MIT and Apache 2.0https://github.com/bumptech/glide/blob/master/LICENSE\n\n\njson-simple\n\nProject:\u00a0https://code.google.com/p/json-simple\n\n\u00a9 2009 Fang Yidong and Chris Nokleberg\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nSuperSLiM\n\nProject:\u00a0https://github.com/TonicArtos/SuperSLiM\n\n\u00a9 2014-2015 Tonic Artos\n\n\u00a9 2014 Lucas Rocha\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nandroid-job\n\nProject:\u00a0https://github.com/evernote/android-job\n\n\u00a9 2007-2016 by Evernote Corporation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nvcard\n\nProject:\u00a0https://android.googlesource.com/platform/frameworks/opt/vcard\n\n\u00a9 2009 The Android Open Source Project\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nhttpclient-legacy\n\nProject:\u00a0http://hc.apache.org/httpclient-legacy\n\n\u00a9 2014 The Apache Software Foundation\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nOkHttp\n\nProject:\u00a0http://square.github.io/okhttp/\n\n\u00a9 2016 Square, Inc.\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0\n\n\nlottie-android\n\nProject:\u00a0https://github.com/airbnb/lottie-android/\n\nLicense: Apache 2.0\u00a0https://www.apache.org/licenses/LICENSE-2.0", "Flow me on twitter#saadmamun1 =||= > Flow me on twitter#saadmamun1\n![23260.jpg](https://user-images.githubusercontent.com/85457867/123854785-f666d200-d940-11eb-8d93-d0a69443198e.jpg) =||= ", 0], ["1915", "Refactored three test methods in CustomSerializerTest, and two test methods in ThrowableFunctionalTest", "Ali Iman", "AliIman", "07/01/21, 10:58:30 PM", "As part of a research project at the University of Waterloo, we are exploring automatic test refactoring tools and submitting vetted proposed refactorings upstream. These refactorings make it easier to add additional related test methods and should help with the maintainability of the tests. In this pull request, we have two refactoring cases that refactors five test methods. We've checked both cases and ensured that all the test runs pass successfully.\r\n\r\nIf it helps, we can also propose a test case that uses these five refactored test methods. We explained each of the two refactoring cases below.\r\n\r\n1. In CustomSerializerTest, after declaration of gson, the only difference between the three test methods \"testBaseClassSerializerInvokedForBaseClassFields() \", \"testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances\", and \"testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances\" is in a class type (new Base() vs new Sub()) and a string (BaseSerializer.NAME vs SubSerializer.NAME). We create \"testSerializerInvokedForBaseClassFieldsTemplate(Gson gson, Class<TBase> clazzTBase, String string1)\" parametrized method, which allows you to add similar test cases with different arguments gson, clazzTBase and string1.\r\n\r\n2. In ThrowableFunctionalTest, the only difference between the two test methods \"testExceptionWithoutCause()\" and \"testErrorWithoutCause()\" is in a class type (RuntimeException.class vs OutOfMemoryError.class). We create \"testThrowableWithoutCauseTemplate(Class<TThrowable> clazzTThrowable, String msg, String jsonString)\" parametrized method, which allows you to add similar test cases with different arguments clazzTThrowable, msg, and jsonString.\r", "Thanks for your contribution!\r\n\r\nA few remarks.\r\n\r\n1. This project is in maintenance mode, and we're generally going to be reluctant to accept PRs that are essentially cosmetic, especially if it is not trivially obvious that they don't change anything.\r\n2. Anyway, I'm not really convinced that the change would be an improvement. The new helper methods seem more complicated than I would expect. I don't see why they catch and rethrow exceptions, for example. They also have type parameters that don't seem useful.\r\n3. As a more general remark, refactoring test methods to remove duplication isn't as obviously beneficial as with production code. It's an advantage to be able to understand a test method in isolation, without having to look elsewhere in the test class.\r\n\r\nSo I think we're not going to accept this one. Thanks for thinking of us, though, and best wishes for your research! =||= ", 0], ["1916", "error on latest openjdk", null, "chengweiou", "07/05/21, 11:42:44 PM", "### **Summary**:\r\n\r\nwork on oracle jdk 11, docker openjdk 11.\r\nnot work on docker openjdk latest\r\n\r\n\r\n### **Request info:**\r\n\r\nString: {\"person\":{\"id\":1}}\r\nMethod: new Gson().fromJson(accountJson, Account.class);\r\nAccount.class: https://github.com/chengweiou/carina/blob/dev/src/main/java/chengweiou/universe/carina/base/converter/Account.java\r\n\r\n\r\n\r\n### **Solution for now:  (pick one)**\r\n\r\n1. using jdk11.\r\n2. using gsonbuilder to add localdate and localdatetime typeadapter\r\n\r\n\r\n### **Exception Stack:**\r\n\r\nUnable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not \"opens java.time\" to unnamed module @27abe2cd'} java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not \"opens java.time\" to unnamed module @27abe2cd\r\n\tat java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:357) ~[?:?]\r\n\tat java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) ~[?:?]\r\n\tat java.lang.reflect.Field.checkCanSetAccessible(Field.java:177) ~[?:?]\r\n\tat java.lang.reflect.Field.setAccessible(Field.java:171) ~[?:?]\r\n\tat com.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(UnsafeReflectionAccessor.java:44) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:159) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.fromJson(Gson.java:931) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.fromJson(Gson.java:897) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.fromJson(Gson.java:846) ~[gson-2.8.7.jar!/:?]\r\n\tat com.google.gson.Gson.fromJson(Gson.java:817) ~[gson-2.8.7.jar!/:?]\r\n\tat chengweiou.universe.carina.interceptor.AuthInterceptorMe.preHandle(AuthInterceptorMe.java:21) ~[classes!/:?]\r\n\tat org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:148) ~[spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1058) [spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) [spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:497) [jakarta.servlet-api-4.0.4.jar!/:4.0.4]\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.3.7.jar!/:5.3.7]\r\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:584) [jakarta.servlet-api-4.0.4.jar!/:4.0.4]\r\n\tat io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96) [spring-boot-actuator-2.5.0.jar!/:2.5.0]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]\r\n\tat io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.server.Connectors.executeRootHandler(Connectors.java:387) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:841) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]\r\n\tat org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]\r\n\tat org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1423) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]\r\n\tat java.lang.Thread.run(Thread.java:831) [?:?]", "The reason for this is that you are trying to serialize a JDK class (`java.time.LocalDateTime`) using Gson's reflection-based type adapter. That adapter is used if no built-in adapter exists (see also #1059) and you have not provided your own.\r\n\r\nThis issue is similar to #1216; you should avoid using (implicitly) the reflective type adapter for third party classes because you make yourself dependent on the internal implementation of these classes (which could change at any point).\r\n\r\n> using gsonbuilder to add localdate and localdatetime typeadapter\r\n\r\nThis is the proper solution to this problem. Alternatively you could look for third party projects adding support for `LocalDateTime`, for example https://github.com/gkopff/gson-javatime-serialisers, but that project might not be actively maintained anymore. =||= Hi, @Marcono1234 \r\nMaybe I didn't explain clearly\r\n\r\nWithout any changes, the only thing I do to make it work again is switch back to jdk 11\r\n\r\nAt the beginning,\r\nI was using: java11 + gson:2.8.7\r\nand the api i was using: new Gson().fromJson(string, classType);\r\nI didn't have any adapter.\r\nIt worked as expect for a long time.\r\n\r\nAnd then, \r\nToday, sorry, I mean yesterday. I used docker openjdk latest version deployed my project.\r\nThis exception was thrown.\r\n\r\nAnd then,\r\nI thought I have changed something made it didn't work, \r\nso I added a localdate and localdatetime adapter. It worked again.\r\n\r\nAt the end,\r\nI think I shouldn't made any changes that relate to this part of my project,\r\nso I deleted this adapter and used my computer to run my project. It worked fine.\r\nafter this, I guess maybe is oraclejdk and openjdk's different. but I tried using docker jdk 11, It also worked.\r\n\r\n =||= > I think I shouldn't made any changes that relate to this part of my project,\r\nso I deleted this adapter and used my computer to run my project. It worked fine.\r\nafter this, I guess maybe is oraclejdk and openjdk's different. but I tried using docker jdk 11, It also worked.\r\n\r\nNo, you really should write a custom `TypeAdapter`. Your application is currently relying on the internal representation of `LocalDateTime`; have a look at the JSON data and you should see that it uses the names of the private fields of that class. Your program could break at any point when the internal `LocalDateTime` implementation changes. And in fact, the exception you are experiencing is related to that. Since JDK 16, you cannot access JDK internals using reflection anymore by default (see [JDK-8256358](https://bugs.openjdk.java.net/browse/JDK-8256358)).\r\n\r\nSo if you want to make sure your application runs on JDK 16 and all future versions your only choice is to write a custom `TypeAdapter`. =||= @Marcono1234 \r\nThanks for shared the document. I understand now =||= ", 0], ["1918", "Serialization JSon", null, "aschmidt70", "07/13/21, 01:37:03 PM", "By the serealization of my objects to Json I get a strange behaviour. The properties are not filled correctly by a release app.\r\nAfter the \"inventory\" it fills the properties with \"a\",\"b\",\"c\". And that is not correct. There are names as at the beginning .\r\n\r\nWhen I compile a debug app all is fine.\r\n\r\nThe values are correct.\r\n(Here in the example I have deleted the values).\r\n\r\nBut it happens in the moment only on one device app.\r\n\r\nAny ideas?\r\n\r\nThe Result is:\r\n\r\n{\"base\":{\"manufacturer\":\"\",\"model\":\"\",\"name\":\"\",\"org-id\":\"\",\"serial\":\"\",\"time\":\"2021-07-13T09:17:38+0200\"},\"apps\":{\"app\":[{\"\",\"version\":\"0.7.2.1\",\"last-active\":\"2021-07-13T09:17:38+0200\",\"attribute1\":\"\",\"attribute2\":\"\"}]},\"inventory\":\r\n{\"a\":{\"a\":[{\"a\":\"\",\"b\":\"\",\"c\":\"\",\"d\":\"1\"},{\"a\":\"\",\"b\":\"\",\"c\":\"\",\"d\":\"\"},{\"a\":\"\",\"b\":\"\",\"c\":\"\",\"d\":\"1\"},{\"a\":\"\",\"b\":\"\",\"c\":\"\",\"d\":\"1\"}]}}}", "NaN", 0], ["1919", "(Not a bug) Corrupted JSON file with Files.writeString", null, "delvh", "08/17/21, 10:05:24 PM", "\r\n## Usage\r\n```java\r\nnew Gson().toJson(<a Map storing all kinds of values and strings as keys>);\r\n```\r\n\r\n## GSON version\r\n`2.8.6`, `2.8.7`\r\n\r\n## Problem\r\nI have noticed a possibility to corrupt the output of a generated JSON file.\r\nIn the json file below, you can see that, even though the JSON object has already been closed, something else is still appended, subsequently breaking the JSON file.\r\n\r\n```json\r\n{\r\n  \"last_file_chooser_dir\": \"/home/delvh/git/project/target\",\r\n  \"recent_documents\": [\r\n    \"/home/delvh/git/project/test1.xml\",\r\n    \"/home/delvh/git/project/test2.xml\",\r\n    \"/home/delvh/git/project/test3.xml\"\r\n  ],\r\n  \"config_version\": 1,\r\n  \"open_documents\": [\r\n    \"/home/delvh/git/project/target\",\r\n    \"/home/delvh/git/project\"\r\n  ]\r\n}ect/target\",\"config_version\":1}\r\n```\r\n## Another example\r\n```json\r\n{\r\n  \"last_file_chooser_dir\": \"/home/delvh/git/test/project\",\r\n  \"recent_documents\": [],\r\n  \"language\": \"en\",\r\n  \"open_paths\": [\r\n    \"/home/delvh/git/test/project\"\r\n  ],\r\n  \"open_documents\": [],\r\n  \"config_version\": 1\r\n}project\"],\"open_documents\":[\"/home/delvh/git/test/project/test.xml\"]}\r\n```", "I recognize this problem as it had affected me in the past. I believe that you are using `Files.writeString` or `Files.write`, right? Well, these methods by default only change the beginning of the file meaning if the new JSON is shorter than the JSON already in the file, there will be leftover parts. So to fix this you need to add `StandardOpenOption.TRUNCATE_EXISTING` like for example `Files.writeString(Path.of(\"abc.json\"), myJson, StandardOpenOption.TRUNCATE_EXISTING);`\r\n\r\nHope it helps. =||= Thanks a lot, @ogrammer.\r\nNow I can consistently reproduce this issue, and what you mentioned seems indeed correct.\r\nWho would have known that supplying **less** parameters would solve this issue.\r\nFor context, as you mentioned, previously I used\r\n```java\r\nFiles.writeString(path, string, StandardOpenOptions.CREATE, StandardOpenOptions.WRITE)\r\n```\r\nBut as it seems, correct would have been either\r\n```java\r\nFiles.writeString(path, string, StandardOpenOptions.CREATE, StandardOpenOptions.WRITE, StandardOpenOptions.TRUNCATE_EXISITING)\r\n```\r\nor\r\n```java\r\nFiles.writeString(path, string)\r\n```\r\nwhich appear to do the same as write apparently uses exactly these three options if none are given\u2026\r\n\r\nIn conclusion, this was not the fault of GSON, but the fault of semi-intuitive API design in `Files.writeString`. =||= @delvh No problem, happy to help. I didn't know just using writeString without any open options already supplies `CREATE` and `TRUNCATE_EXISTING`, my code will be cleaner now, thanks :) We both learned something =||= ", 0], ["1922", "Unable to make field private java.lang.String java.lang.Throwable.detailMessage accessible: module java.base does not \"opens java.lang\" to unnamed module @2baf3d81", "Magnus Neumann", "TheMagBum", "07/22/21, 08:56:00 PM", "Error: https://paste.timo.cloud/vewikidonu.cs\r\nJDK 16\r\n\r\ni have regested a StringConverter in the builder, but unfortunately this did not fix this problem and now i am stuck. ", "> i have regested a StringConverter in the builder, but unfortunately this did not fix this problem and now i am stuck\r\n\r\nDo you mean a `TypeAdapter` (or `JsonSerializer`)? Could you please provide a small, runnable example showing the code you are using. =||=  I made a JsonSerilizer for a Third Party class with extended RuntimeException, thats solve the issue. Thank you! =||= ", 0], ["1924", "Adjust some minor details of #1391.", "\u00c9amonn McManus", "eamonnmcmanus", "08/03/21, 12:37:53 AM", "Use two-space indentation for the new test.\r\nUse standard Google import style.\r\nSupply missing type argument for `TypeVariable`.", "NaN", ["1924", "Adjust some minor details of #1391.", "\u00c9amonn McManus", "eamonnmcmanus", "08/03/21, 12:37:53 AM", "Use two-space indentation for the new test.\nUse standard Google import style.\nSupply missing type argument for `TypeVariable`.", "NaN"], ["\u00c9amonn McManus", "Adjust some minor details of #1391.\n\nUse two-space indentation for the new test.\nUse standard Google import style.\nSupply missing type argument for `TypeVariable`.", "08/03/21, 12:33:10 AM", "\u00c9amonn McManus", "425cb25549ae83082b5e1ba4dfbc3bb635a15faf", ["gson/src/main/java/com/google/gson/internal/$Gson$Types.java", "gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java"], "@@ -339,13 +339,13 @@ public static Type getCollectionElementType(Type context, Class<?> contextRawTyp\n   }\n \n   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {\n-    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable, Type>());\n+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable<?>, Type>());\n   }\n \n   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,\n-                              Map<TypeVariable, Type> visitedTypeVariables) {\n+                              Map<TypeVariable<?>, Type> visitedTypeVariables) {\n     // this implementation is made a little more complicated in an attempt to avoid object-creation\n-    TypeVariable resolving = null;\n+    TypeVariable<?> resolving = null;\n     while (true) {\n       if (toResolve instanceof TypeVariable) {\n         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;, @@ -1,54 +1,55 @@\n package com.google.gson.functional;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Set;\n \n-import static org.junit.Assert.*;\n-\n /**\n  * This test covers the scenario described in #1390 where a type variable needs to be used\n  * by a type definition multiple times.  Both type variable references should resolve to the\n  * same underlying concrete type.\n  */\n public class ReusedTypeVariablesFullyResolveTest {\n \n-    private Gson gson;\n+  private Gson gson;\n \n-    @Before\n-    public void setUp() {\n-        gson = new GsonBuilder().create();\n-    }\n+  @Before\n+  public void setUp() {\n+    gson = new GsonBuilder().create();\n+  }\n \n-    @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n-    @Test\n-    public void testGenericsPreservation() {\n-        TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n-        Iterator<TestEnum> iterator = withSet.collection.iterator();\n-        assertNotNull(withSet);\n-        assertNotNull(withSet.collection);\n-        assertEquals(2, withSet.collection.size());\n-        TestEnum first = iterator.next();\n-        TestEnum second = iterator.next();\n+  @SuppressWarnings(\"ConstantConditions\") // The instances were being unmarshaled as Strings instead of TestEnums\n+  @Test\n+  public void testGenericsPreservation() {\n+    TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n+    Iterator<TestEnum> iterator = withSet.collection.iterator();\n+    assertNotNull(withSet);\n+    assertNotNull(withSet.collection);\n+    assertEquals(2, withSet.collection.size());\n+    TestEnum first = iterator.next();\n+    TestEnum second = iterator.next();\n \n-        assertTrue(first instanceof TestEnum);\n-        assertTrue(second instanceof TestEnum);\n-    }\n+    assertTrue(first instanceof TestEnum);\n+    assertTrue(second instanceof TestEnum);\n+  }\n \n-    enum TestEnum { ONE, TWO, THREE }\n+  enum TestEnum { ONE, TWO, THREE }\n \n-    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n+  private static class TestEnumSetCollection extends SetCollection<TestEnum> {}\n \n-    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n+  private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}\n \n-    private static class BaseCollection<U, C extends Collection<U>>\n-    {\n-        public C collection;\n-    }\n+  private static class BaseCollection<U, C extends Collection<U>>\n+  {\n+    public C collection;\n+  }\n \n }, ", 32, 31, "\"modified, modified, \"", 63], 1], ["1925", "Bump maven-resources-plugin from 2.7 to 3.2.0", null, "dependabot[bot]", "08/05/21, 01:28:52 PM", "Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/61096d9200bc226311d92effc3de3cbe8086d1ad\"><code>61096d9</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/fa28224811262ae045bd96cdff7540f993a0ba17\"><code>fa28224</code></a> Rollback to make a new release attempt.</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/22120e9eae074ef29a1ed61de8a2e9829010682d\"><code>22120e9</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/6bf362e05843eef5fb05c4e1654ccfb6042d65a9\"><code>6bf362e</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/0f26239591eace68def9d0045a437ef256936570\"><code>0f26239</code></a> [MRESOURCES-263] Update to maven-filtering 3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/6624e45411b02b1c31694042e9b5f9b386422904\"><code>6624e45</code></a> future proof method that is marked for incompatible change (<a href=\"https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/6\">#6</a>)</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/b974fb27221a78c41c8cc70a2530da722a939184\"><code>b974fb2</code></a> try with resources (<a href=\"https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/5\">#5</a>)</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/b42cd5a1f66e87b7466373e2d1415c7044fc3f2a\"><code>b42cd5a</code></a> [MRESOURCES-232] Resource copy filtering should use different encoding for so...</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/4b468985e02465f9991a2d14ce7f3e4b2e611091\"><code>4b46898</code></a> [MRESOURCES-257] property from list element in pom model</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/a2fb8d421f62f354b69c227f06280cc30eadbeea\"><code>a2fb8d4</code></a> Bump version to a new minor version, since we have added functionality.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=2.7&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1925", "Bump maven-resources-plugin from 2.7 to 3.2.0", null, "dependabot[bot]", "08/05/21, 01:28:52 PM", "Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/61096d9200bc226311d92effc3de3cbe8086d1ad\"><code>61096d9</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/fa28224811262ae045bd96cdff7540f993a0ba17\"><code>fa28224</code></a> Rollback to make a new release attempt.</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/22120e9eae074ef29a1ed61de8a2e9829010682d\"><code>22120e9</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/6bf362e05843eef5fb05c4e1654ccfb6042d65a9\"><code>6bf362e</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/0f26239591eace68def9d0045a437ef256936570\"><code>0f26239</code></a> [MRESOURCES-263] Update to maven-filtering 3.2.0</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/6624e45411b02b1c31694042e9b5f9b386422904\"><code>6624e45</code></a> future proof method that is marked for incompatible change (<a href=\"https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/6\">#6</a>)</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/b974fb27221a78c41c8cc70a2530da722a939184\"><code>b974fb2</code></a> try with resources (<a href=\"https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/5\">#5</a>)</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/b42cd5a1f66e87b7466373e2d1415c7044fc3f2a\"><code>b42cd5a</code></a> [MRESOURCES-232] Resource copy filtering should use different encoding for so...</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/4b468985e02465f9991a2d14ce7f3e4b2e611091\"><code>4b46898</code></a> [MRESOURCES-257] property from list element in pom model</li>\n<li><a href=\"https://github.com/apache/maven-resources-plugin/commit/a2fb8d421f62f354b69c227f06280cc30eadbeea\"><code>a2fb8d4</code></a> Bump version to a new minor version, since we have added functionality.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=2.7&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-resources-plugin from 2.7 to 3.2.0\n\nBumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.\n- [Release notes](https://github.com/apache/maven-resources-plugin/releases)\n- [Commits](https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.plugins:maven-resources-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-major\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:02:56 AM", "GitHub", "178b221fa0dfc26bf27331e7ef6da9657bde1fdf", ["gson/pom.xml"], "@@ -133,7 +133,7 @@\n       </plugin>\n       <plugin>\n         <artifactId>maven-resources-plugin</artifactId>\n-        <version>2.7</version>\n+        <version>3.2.0</version>\n         <executions>\n           <execution>\n             <id>post-obfuscate-class</id>, ", 1, 1, "\"modified, \"", 2], 1], ["1926", "Bump proguard-maven-plugin from 2.3.1 to 2.4.0", null, "dependabot[bot]", "08/05/21, 01:28:13 PM", "Bumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md\">proguard-maven-plugin's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>Unreleased</h2>\n<ul>\n<li>Minimum Java version bumped to 1.8 (<a href=\"https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/127\">127</a>)</li>\n<li>Support workaround for long command line problems (<a href=\"https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/113\">113</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/wvengen/proguard-maven-plugin/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.github.wvengen:proguard-maven-plugin&package-manager=maven&previous-version=2.3.1&new-version=2.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1926", "Bump proguard-maven-plugin from 2.3.1 to 2.4.0", null, "dependabot[bot]", "08/05/21, 01:28:13 PM", "Bumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md\">proguard-maven-plugin's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>Unreleased</h2>\n<ul>\n<li>Minimum Java version bumped to 1.8 (<a href=\"https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/127\">127</a>)</li>\n<li>Support workaround for long command line problems (<a href=\"https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/113\">113</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/wvengen/proguard-maven-plugin/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.github.wvengen:proguard-maven-plugin&package-manager=maven&previous-version=2.3.1&new-version=2.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump proguard-maven-plugin from 2.3.1 to 2.4.0\n\nBumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.\n- [Release notes](https://github.com/wvengen/proguard-maven-plugin/releases)\n- [Changelog](https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/wvengen/proguard-maven-plugin/commits)\n\n---\nupdated-dependencies:\n- dependency-name: com.github.wvengen:proguard-maven-plugin\n  dependency-type: direct:development\n  update-type: version-update:semver-minor\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:03:00 AM", "GitHub", "b7fce3850d6508ad18500abf3aac1354d277798d", ["gson/pom.xml"], "@@ -19,7 +19,7 @@\n     <dependency>\n       <groupId>com.github.wvengen</groupId>\n       <artifactId>proguard-maven-plugin</artifactId>\n-      <version>2.3.1</version>\n+      <version>2.4.0</version>\n       <scope>test</scope>\n     </dependency>\n   </dependencies>, ", 1, 1, "\"modified, \"", 2], 1], ["1927", "Bump copy-rename-maven-plugin from 1.0 to 1.0.1", null, "dependabot[bot]", "08/05/21, 01:27:55 PM", "Bumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/coderplus/copy-rename-maven-plugin/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.coderplus.maven.plugins:copy-rename-maven-plugin&package-manager=maven&previous-version=1.0&new-version=1.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1927", "Bump copy-rename-maven-plugin from 1.0 to 1.0.1", null, "dependabot[bot]", "08/05/21, 01:27:55 PM", "Bumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/coderplus/copy-rename-maven-plugin/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.coderplus.maven.plugins:copy-rename-maven-plugin&package-manager=maven&previous-version=1.0&new-version=1.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump copy-rename-maven-plugin from 1.0 to 1.0.1\n\nBumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.\n- [Release notes](https://github.com/coderplus/copy-rename-maven-plugin/releases)\n- [Commits](https://github.com/coderplus/copy-rename-maven-plugin/commits)\n\n---\nupdated-dependencies:\n- dependency-name: com.coderplus.maven.plugins:copy-rename-maven-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/05/21, 03:03:02 AM", "GitHub", "da2bfd7d1c0462547cb470d992a861987f3cca16", ["gson/pom.xml"], "@@ -78,7 +78,7 @@\n       <plugin>\n         <groupId>com.coderplus.maven.plugins</groupId>\n         <artifactId>copy-rename-maven-plugin</artifactId>\n-        <version>1.0</version>\n+        <version>1.0.1</version>\n         <executions>\n           <execution>\n             <id>pre-obfuscate-class</id>, ", 1, 1, "\"modified, \"", 2], 1], ["1930", "Retain generic signature of TypeToken with R8 version 3.0 and higher", "Christoffer Quist Adamsen", "christofferqa", "08/05/21, 01:40:03 PM", "R8 version 3.0 started to remove generic signatures from items that are not matched by a -keep rule in full mode (see also https://r8.googlesource.com/r8/+/744d742137a82656b8ee27513f975e0528aecd78). The motivation for this change is to avoid that all generic signatures are retained in programs, when only a few are typically required for reflection.\r\n\r\nThis change adds a rule that causes the generic signatures of com.google.gson.reflect.TypeToken and its subclasses to be retained. This is needed because [com.google.gson.reflect.TypeToken reflectively accesses its own generic signature](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L62).\r\n\r\nReferences:\r\n* http://issuetracker.google.com/issues/188703877#comment28", "Thanks! =||= @eamonnmcmanus \r\nCan you look #1929 to apply proguard/r8 rules automatically? =||= ", ["1930", "Retain generic signature of TypeToken with R8 version 3.0 and higher", "Christoffer Quist Adamsen", "christofferqa", "08/05/21, 01:40:03 PM", "R8 version 3.0 started to remove generic signatures from items that are not matched by a -keep rule in full mode (see also https://r8.googlesource.com/r8/+/744d742137a82656b8ee27513f975e0528aecd78). The motivation for this change is to avoid that all generic signatures are retained in programs, when only a few are typically required for reflection.\n\nThis change adds a rule that causes the generic signatures of com.google.gson.reflect.TypeToken and its subclasses to be retained. This is needed because [com.google.gson.reflect.TypeToken reflectively accesses its own generic signature](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L62).\n\nReferences:\n* http://issuetracker.google.com/issues/188703877#comment28", "NaN"], ["Christoffer Quist Adamsen", "Retain generic signature of TypeToken with R8 version 3.0 and higher", "08/05/21, 07:18:32 AM", "Christoffer Quist Adamsen", "d3a75cb56937d687a66c8710e40c2da6223db0c3", ["examples/android-proguard-example/proguard.cfg"], "@@ -25,4 +25,8 @@\n   @com.google.gson.annotations.SerializedName <fields>;\n }\n \n+# Retain generic signatures of TypeToken and its subclasses with R8 version 3.0 and higher.\n+-keep,allowobfuscation,allowshrinking class com.google.gson.reflect.TypeToken\n+-keep,allowobfuscation,allowshrinking class * extends com.google.gson.reflect.TypeToken\n+\n ##---------------End: proguard configuration for Gson  ----------, ", 4, 0, "\"modified, \"", 4], 1], ["1932", "Getting exception after converting library to Objective C", null, "dreemz17", "08/12/21, 12:02:44 AM", "After converting GSON library to objective C through J2OBJC\r\nGetting random error like java.lang.ArrayStoreException: attempt to add object of type java.util.Formatter$FixedString to array with type java.util.Formatter$FormatString (JavaLangArrayStoreException)\r", "It may be that someone else has tried this and may be able to help you. For the purposes of this project, though, we can't support this configuration and it isn't useful for us to keep this issue open.\r\n\r\nYou could try asking on Stack Overflow? =||= ", 0], ["1933", "Serializing a Calendar with @JsonAdapter uses default Calendar format", null, "outzenj", "08/13/21, 02:53:44 PM", "I'm using the @JsonAdapter annotation to mark a particular Calendar object to use a specific format, like this:\r\n\r\n```Java\r\nimport java.io.IOException;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.TypeAdapter;\r\nimport com.google.gson.annotations.JsonAdapter;\r\nimport com.google.gson.stream.JsonReader;\r\nimport com.google.gson.stream.JsonWriter;\r\n\r\npublic class TypeA {\r\n\r\n\t@JsonAdapter(CalendarAdapter.class)\r\n\tpublic Calendar date;\r\n\r\n\r\n\tpublic static class CalendarAdapter extends TypeAdapter<Calendar> {\r\n\r\n\t\tpublic static final DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy MM dd HH:mm\");\r\n\r\n\t\t@Override\r\n\t\tpublic Calendar read(JsonReader reader) throws IOException {\r\n\t\t\tString value = reader.nextString();\r\n\t\t\ttry {\r\n\t\t\t\tCalendar result = Calendar.getInstance();\r\n\t\t\t\tresult.setTime(DATE_FORMAT.parse(value));\r\n\t\t\t\treturn result;\r\n\t\t\t} catch (ParseException pe) {\r\n\t\t\t\tthrow new IOException(pe);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void write(JsonWriter writer, Calendar value) throws IOException {\r\n\t\t\twriter.value(DATE_FORMAT.format(value.getTime()));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tGson gson = new Gson();\r\n\r\n\t\tTypeA a = new TypeA();\r\n\t\ta.date = Calendar.getInstance();\r\n\r\n\t\tString serialized = gson.toJson(a);\r\n\t\tSystem.out.println(serialized);\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThis produces the following output, which uses the GSON-standard Calendar format instead of the format specified by the TypeAdapter:\r\n\r\n`{\"date\":{\"year\":2021,\"month\":7,\"dayOfMonth\":11,\"hourOfDay\":16,\"minute\":15,\"second\":32}}`", "Which Gson version are you using?\r\nFor version 2.8.7 (currently the latest) I see the expected output `{\"date\":\"2021 08 13 00:09\"}`.\r\n\r\nAre you using a code minimizer, such as Proguard, which might be removing the `JsonAdapter` annotation? =||= Ugh, my IDE silently included GSON 2.6.2 alongside 2.8.7. Running manually with 2.8.7 alone works fine. Now I just have to fix my IDE.\r\n\r\nSorry for any confusion or effort expended. =||= ", 0], ["1935", "Bump maven-scm-api from 1.11.2 to 1.11.3", null, "dependabot[bot]", "08/12/21, 06:47:28 PM", "Bumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-scm/commit/f5a162b06b4e1f4080b7846812848e6ce64e1727\"><code>f5a162b</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/c53157e2d386ff55487f92d2b65936ad9dfac684\"><code>c53157e</code></a> [maven-release-plugin] rollback the release of maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/156294efda49fc12d399a901cc6f5e948e02e87b\"><code>156294e</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/77c9f77ed67a445ee36e1d6e9c076de7cb3e08aa\"><code>77c9f77</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/f21ca5a8c55f05130db98400d85506a383628138\"><code>f21ca5a</code></a> [SCM-947] Improve ChangeLogMojo by using ChangeLogRequest</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/4cafe0f5031f7ca0be79f2e4944b535a8c812ac5\"><code>4cafe0f</code></a> [SCM-948] Make limit parameter work for svnexe and gitexe changelog goal</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/a434fe6fffe110dc78e4c84f6c0d41e72a932e33\"><code>a434fe6</code></a> [SCM-955] gitexe and svnexe provider TCK tests fail when path is absolute</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/3a10d0f52b1e564b8bdad71161d7c74ac1dd3d99\"><code>3a10d0f</code></a> [SCM-954] Always use --internal-diff for SvnDiffCommand in svnexe provider</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/e58ccd65fd11e427b89bdede8a6b2b8c3a059d93\"><code>e58ccd6</code></a> update CI url</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/541c8a4c68e55805a45f2ba5370ffee46268ee0c\"><code>541c8a4</code></a> Bump mockito-core from 1.10.19 to 2.28.2</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-api&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1935", "Bump maven-scm-api from 1.11.2 to 1.11.3", null, "dependabot[bot]", "08/12/21, 06:47:28 PM", "Bumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-scm/commit/f5a162b06b4e1f4080b7846812848e6ce64e1727\"><code>f5a162b</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/c53157e2d386ff55487f92d2b65936ad9dfac684\"><code>c53157e</code></a> [maven-release-plugin] rollback the release of maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/156294efda49fc12d399a901cc6f5e948e02e87b\"><code>156294e</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/77c9f77ed67a445ee36e1d6e9c076de7cb3e08aa\"><code>77c9f77</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/f21ca5a8c55f05130db98400d85506a383628138\"><code>f21ca5a</code></a> [SCM-947] Improve ChangeLogMojo by using ChangeLogRequest</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/4cafe0f5031f7ca0be79f2e4944b535a8c812ac5\"><code>4cafe0f</code></a> [SCM-948] Make limit parameter work for svnexe and gitexe changelog goal</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/a434fe6fffe110dc78e4c84f6c0d41e72a932e33\"><code>a434fe6</code></a> [SCM-955] gitexe and svnexe provider TCK tests fail when path is absolute</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/3a10d0f52b1e564b8bdad71161d7c74ac1dd3d99\"><code>3a10d0f</code></a> [SCM-954] Always use --internal-diff for SvnDiffCommand in svnexe provider</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/e58ccd65fd11e427b89bdede8a6b2b8c3a059d93\"><code>e58ccd6</code></a> update CI url</li>\n<li><a href=\"https://github.com/apache/maven-scm/commit/541c8a4c68e55805a45f2ba5370ffee46268ee0c\"><code>541c8a4</code></a> Bump mockito-core from 1.10.19 to 2.28.2</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-api&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-scm-api from 1.11.2 to 1.11.3\n\nBumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.\n- [Release notes](https://github.com/apache/maven-scm/releases)\n- [Commits](https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.scm:maven-scm-api\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/12/21, 03:04:02 AM", "GitHub", "f98dabd1e966c97aa88ee74d587eb1ea810e39b3", ["pom.xml"], "@@ -120,7 +120,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-api</artifactId>\n-            <version>1.11.2</version>\n+            <version>1.11.3</version>\n           </dependency>\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>, ", 1, 1, "\"modified, \"", 2], 1], ["1936", "Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3", null, "dependabot[bot]", "08/12/21, 06:47:48 PM", "Bumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1936", "Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3", null, "dependabot[bot]", "08/12/21, 06:47:48 PM", "Bumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3\n\nBumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.scm:maven-scm-provider-gitexe\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "08/12/21, 03:04:06 AM", "GitHub", "205df01c047ecc03cf217f17e2030852a4ac96be", ["pom.xml"], "@@ -125,7 +125,7 @@\n           <dependency>\n             <groupId>org.apache.maven.scm</groupId>\n             <artifactId>maven-scm-provider-gitexe</artifactId>\n-            <version>1.11.2</version>\n+            <version>1.11.3</version>\n           </dependency>\n         </dependencies>\n         <configuration>, ", 1, 1, "\"modified, \"", 2], 1], ["1938", "Hello world ", null, "MgMg88", "08/16/21, 06:26:23 PM", "Other responsibility ", "NaN", 0], ["1939", "[Feature Request] bytesRead attribute with JsonReader", "Pranshu Jain", "pranshujain22", "08/17/21, 11:51:12 AM", "Hello Gson Team,\r\n\r\nGson has been very helpful in reading files in stream, especially when the file size is huge.\r\n\r\nIs it possible to have a method to get **_bytesRead_** (bytes that have been read so far), while using method <code>gson.fromJson(JsonReader reader, java.lang.reflect.Type typeOfT)</code>.\r\n\r\nPlease consider the following methods as a part of <code>JsonReader</code> :\r\n- <code>jsonReader.getBytesRead()</code>\r\n- <code>jsonReader.resetBytesRead()</code>, to reinitialize the bytesRead attribute to 0.\r\n\r\n>This will be very helpful in splitting huge file into equal sized files.", "Can't this be done for a custom implementation of `InputStream`? I mean, what if you use `CountingInputStream` from either [Apache Commons](https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/input/CountingInputStream.html) or [Google Guava](https://guava.dev/releases/19.0/api/docs/com/google/common/io/CountingInputStream.html)? =||= > CountingInputStream\r\n\r\nNo, actually I have a <code>gzip</code> format file, which contain list of objects. \r\nI have to decompress it, read it and parse the <code>Objects</code> using <code>gson</code> in stream\r\nand then based on the read size I have to create file chunks. =||= I don't see why it doesn't fit your needs since it can be put both before and after decompressing your gzip: say, _open the input stream_ -> `GZIPInputStream` -> `CountingInputStream` -> _read/reset the byte count_ -> `InputStreamReader` -> `JsonReader` -> _inspect the byte count possibly opening a new `JsonWriter`_. Or am I getting it totally wrong, and if so can you please be more specific? =||= <code>CountingInputStream</code> is working fine and meets the requirement  as well.\r\nThankyou for the quick help. =||= ", 0], ["1941", "NoSuchMethodError on Android", "Roman Parshikov", "PromanSEW", "08/20/21, 04:44:40 PM", "After update 2.8.6 to 2.8.7 I got exception:\r\n```\r\nCaused by java.lang.AssertionError: java.lang.NoSuchFieldException: error\r\n       at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(TypeAdapters.java:792)\r\n       at com.google.gson.internal.bind.TypeAdapters$30.create(TypeAdapters.java:818)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)\r\n       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)\r\n       at com.google.gson.Gson.getAdapter(Gson.java:458)\r\n       at retrofit2.converter.gson.GsonConverterFactory.responseBodyConverter(GsonConverterFactory.java:64)\r\n       at retrofit2.Retrofit.nextResponseBodyConverter(Retrofit.java:330)\r\n       at retrofit2.Retrofit.responseBodyConverter(Retrofit.java:313)\r\n       at retrofit2.HttpServiceMethod.createResponseConverter(HttpServiceMethod.java:113)\r\n       at retrofit2.HttpServiceMethod.parseAnnotations(HttpServiceMethod.java:82)\r\n       at retrofit2.ServiceMethod.parseAnnotations(ServiceMethod.java:37)\r\n       at retrofit2.Retrofit.loadServiceMethod(Retrofit.java:170)\r\n       at retrofit2.Retrofit$1.invoke(Retrofit.java:149)\r\n       at java.lang.reflect.Proxy.invoke(Proxy.java:1006)\r\n      ...\r\n```", "This should be fixed by #1495, which is included in the just-released 2.8.8. =||= ", 0], ["1942", "Performance - `JsonTreeReader` & `Streams.parse`", "Simon GUEROUT", "saiimons", "08/20/21, 03:46:43 PM", "Hi, I wanted to get an advice / or offer an idea that would improve performance in some situations.\r\n\r\nTo give some context, I have to work with structures where a key/value pair inside an object represents the destination type of said object.\r\n\r\n```json\r\n{\r\n    \"MyType\" : \"Foo\",\r\n    \"bar\" : \"baz\"\r\n}\r\n```\r\n\r\n```kotlin\r\nsealed class MyType {\r\n    data class Foo(\r\n        val bar: String\r\n    ) : MyType()\r\n}\r\n```\r\n\r\nBecause of this specific structure, we have to make a call to `Streams.parse` to access the data within a `JsonObject` and let Gson deal with the rest:\r\n\r\n```kotlin\r\nclass MyTypeAdapter(private val gson: Gson) : TypeAdapter<MyType>() {\r\n    override fun read(`in`: JsonReader) : MyType {\r\n        val obj = Streams.parse(`in`).asJsonObject\r\n        val type = obj.get(\"MyType\").asString\r\n        return when (type) {\r\n            \"Foo\" -> gson.fromJson(obj, MyType.Foo::class.java)\r\n            else -> throw IllegalStateException(\"Unsupported $type\")\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen such structures contain other nested structures, we see many calls to `Streams.parse`, which are in fact reading again a document which was already processed, and available as a `JsonElement`.\r\n\r\nOne interesting improvement for this situation, would be to expose features from `JsonTreeReader` to `Streams`, in order to bypass the parsing, and obtain the current `JsonElement`, which would save a lot of processing, since it won't have to be rebuilt.\r\n\r\nWould this be an interesting update to Gson ? Would this risk breaking how Gson operates ?\r\n\r\n(I'll try to make a fork quickly with some data and a a flame graph demonstrating where time is being spent and how this could be improved)", "In the abstract, the idea is interesting. However, Gson is in maintenance mode and we are generally unlikely to add new features such as this. You may find that [Moshi](https://github.com/square/moshi) better suits your needs. =||= @eamonnmcmanus unfortunately, we heavily rely on `JsonElement` for a couple issues, and switching the whole codebase to Moshi is not something we could do right now.\r\n\r\nI'll open a PR with the improvements, as I tested the changes locally, and I reduced some processing time by 90% for very large graphs, with a very small change. =||= ", 0], ["1943", "Improve the speed of the JSON_ELEMENT TypeAdapter when the object graph has already been turned into a JsonElement", "Simon GUEROUT", "saiimons", "08/30/21, 04:57:08 PM", "Following up th #1942 conversation, here is a small change, which improves the speed of processing a lot in cases where accessing the `JsonElement` is required.\r\n\r\nNote - I'm working on providing flame graphs and examples without company-specific data.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1943) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.\nIn order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1943) for more info**.\n\n<!-- need_author_cla --> =||= Can you share some micro benchmarks please? =||= @inder123 Here are some results:\r\n\r\nBefore:\r\n\r\n![Screen Shot 2021-08-23 at 11 55 26](https://user-images.githubusercontent.com/6832416/130478807-7060db65-14b3-49a2-8a69-dc39826841f5.png)\r\nAfter:\r\n\r\n![Screen Shot 2021-08-23 at 11 56 12](https://user-images.githubusercontent.com/6832416/130478815-3edb9492-6318-4ca9-b32f-2b700eb7c051.png)\r\n\r\nInput:\r\n[input.json.zip](https://github.com/google/gson/files/7033282/input.json.zip)\r\n\r\nAsync Profiler output:\r\n[profiler.zip](https://github.com/google/gson/files/7033318/profiler.zip)\r\n\r\nTest structure:\r\n```kotlin\r\nsealed class Node {\r\n    data class IntNode(\r\n        val left: Node?,\r\n        val right: Node?,\r\n        val value: Int,\r\n    ) : Node()\r\n\r\n    data class StringNode(\r\n        val left: Node?,\r\n        val right: Node?,\r\n        val value: String,\r\n    ) : Node()\r\n}\r\n\r\nclass NodeTypeAdapter(\r\n    private val gson: Gson\r\n) : TypeAdapter<Node>() {\r\n\r\n    override fun write(p0: JsonWriter, p1: Node?) {\r\n        if (p1 == null) {\r\n            p0.nullValue()\r\n            return\r\n        }\r\n        val node = when (p1) {\r\n            is Node.IntNode -> gson.toJsonTree(p1, Node.IntNode::class.java)\r\n                .asJsonObject\r\n                .apply { addProperty(\"Node\", \"Int\") }\r\n            is Node.StringNode -> gson.toJsonTree(p1, Node.StringNode::class.java)\r\n                .asJsonObject\r\n                .apply { addProperty(\"Node\", \"String\") }\r\n        }\r\n        gson.toJson(node, p0)\r\n    }\r\n\r\n    override fun read(p0: JsonReader): Node? {\r\n        val node = Streams.parse(p0)\r\n        if (node == null || node == JsonNull.INSTANCE) return null\r\n\r\n        val type = node.asJsonObject.get(\"Node\").asString\r\n        return when (type) {\r\n            \"Int\" -> gson.fromJson(node, Node.IntNode::class.java)\r\n            \"String\" -> gson.fromJson(node, Node.StringNode::class.java)\r\n            else -> throw IllegalArgumentException(\"Failed to read $type\")\r\n        }\r\n    }\r\n}\r\n\r\nclass NodeTypeAdapterFactory : TypeAdapterFactory {\r\n    override fun <T : Any?> create(p0: Gson, p1: TypeToken<T>): TypeAdapter<T>? {\r\n        if (p1.rawType == Node::class.java) return NodeTypeAdapter(p0) as TypeAdapter<T>?\r\n        return null\r\n    }\r\n}\r\n\r\nclass NestedJsonBenchmark {\r\n    @Test\r\n    fun `parse gson`() {\r\n        val gson = GsonBuilder().registerTypeAdapterFactory(NodeTypeAdapterFactory()).create()\r\n        measureTimeMillis {\r\n            repeat(1000) {\r\n                gson.fromJson(text, Node::class.java)\r\n            }\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val jsonFileName = \"input.json\"\r\n        private val loader = NestedJsonBenchmark::class.java.classLoader\r\n        private val benchmarkInput: InputStream =\r\n            loader!!.getResourceAsStream(jsonFileName)!!\r\n        private val text = benchmarkInput.bufferedReader().readText()\r\n    }\r\n}\r\n``` =||= ", ["1943", "Improve the speed of the JSON_ELEMENT TypeAdapter when the object graph has already been turned into a JsonElement", "Simon GUEROUT", "saiimons", "08/30/21, 04:57:08 PM", "Following up th #1942 conversation, here is a small change, which improves the speed of processing a lot in cases where accessing the `JsonElement` is required.\n\nNote - I'm working on providing flame graphs and examples without company-specific data.", "NaN"], ["Simon Guerout", "Fix formatting", "08/30/21, 02:33:16 PM", "Simon Guerout", "6c156801bfc136d608298caec5755dc6ab20afb5", ["gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"], "@@ -251,12 +251,10 @@ private void expect(JsonToken expected) throws IOException {\n \n   JsonElement nextJsonElement() throws IOException {\n     final JsonToken peeked = peek();\n-    if (\n-      peeked == JsonToken.NAME\n-      || peeked == JsonToken.END_ARRAY\n-      || peeked == JsonToken.END_OBJECT\n-      || peeked == JsonToken.END_DOCUMENT\n-    ) {\n+    if (peeked == JsonToken.NAME\n+        || peeked == JsonToken.END_ARRAY\n+        || peeked == JsonToken.END_OBJECT\n+        || peeked == JsonToken.END_DOCUMENT) {\n       throw new IllegalStateException(\"Unexpected \" + peeked + \" when reading a JsonElement.\");\n     }\n     final JsonElement element = (JsonElement) peekStack();, ", 4, 6, "\"modified, \"", 10], 1], ["1944", "Spring-like \"inline\" initialization serialized null objects", null, "juspolo", "08/27/21, 03:36:01 PM", "Few months ago, we experienced issue while serializing some objects. After few hours, it was discovered that the issue was due to the initialization method. While objects initialized \"classic-like\" were successfully serialized, objects initialized \"spring-like\" were serialized as null objects.\r\n\r\nThe following pseudo-simplified-code provides an example of what it was our case. \r\n\r\nPretending to be using these classes:\r\n```java\r\npublic class Member {\r\n\r\n    private String name;\r\n    private String description;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String Name) {\r\n        this.name = Name;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(string Description) {\r\n        this.description= Description;\r\n    }\r\n}\r\n\r\npublic class Section {\r\n\r\n    private String name;\r\n    private ArrayList<Member> members;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String Name) {\r\n        this.name = Name;\r\n    }\r\n\r\n    public ArrayList<Member> getMembers() {\r\n        return members;\r\n    }\r\n\r\n    public void setMembers(ArrayList<Member> Members) {\r\n        this.members= Members;\r\n    }\r\n}\r\n```\r\n\r\nThen this \"spring-like\" initialization was producing a json with null objects:\r\n```java\r\nMember member = new Member(){{\r\n    setName(\"Member\");\r\n    setDescription(\"Desc.\");\r\n}};\r\n\r\nArrayList<Member> members = new  ArrayList<Member>(){{\r\n    Add(member);\r\n}};\r\n\r\nSection root = new Section(){{\r\n     setName(\"Root\");\r\n     setMembers(Members);\r\n }};\r\n```\r\nWhile this \"classic-like\" initialization was producing a fine json:\r\n```java\r\nMember member = new Member();\r\nmember.setName(\"Member\");\r\nmember.setDescription(\"Desc.\");\r\n\r\nArrayList<Member> members = new  ArrayList<Member>();\r\nmembers.Add(member);\r\n\r\nSection root = new Section();\r\nroot.setName(\"Root\");\r\nroot.setMembers(Members);\r\n```\r\n\r\nI hope that I summarized the issue in a good way and that I recall all the context \ud83d\ude09 ", "As far as I remember, Gson cannot handle anonymous classes deserialization because of being unable to initialize references that refer their outer classes. See more: https://github.com/google/gson/blob/master/UserGuide.md#TOC-Nested-Classes-including-Inner-Classes-\r\n\r\nAlso, I'd consider double-brace initialization a pure anti-pattern: it always creates anonymous classes (yep, that stuff ending with `$1.class`, `$2.class` and so on in your build out directory) without a real need, it cannot work with `final` classes, may break type subclassing assertions, and one should better prefer constructors, static factory methods or whatever like that for convenience, but not double-brace initializer. =||= I agree completely with the comment by @lyubomyr-shaydariv, regarding both the analysis of the problem and the undesirability of using double-brace initialization. =||= ", 0], ["1947", "Remove an unused import.", "\u00c9amonn McManus", "eamonnmcmanus", "08/31/21, 09:55:07 PM", "NaN", "NaN", ["1947", "Remove an unused import.", "\u00c9amonn McManus", "eamonnmcmanus", "08/31/21, 09:55:07 PM", "NaN", "NaN"], ["\u00c9amonn McManus", "Remove an unused import.", "08/31/21, 09:52:50 PM", "\u00c9amonn McManus", "03a720312c83d5a9b8d96213e7ab2d19d098919f", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -39,7 +39,6 @@\n import java.net.InetAddress;\n import java.net.URI;\n import java.net.URL;\n-import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.util.ArrayList;, ", 0, 1, "\"modified, \"", 1], 1], ["1948", "Add missing  calls when testing for exceptions.", "\u00c9amonn McManus", "eamonnmcmanus", "08/31/21, 10:03:46 PM", "NaN", "NaN", ["1948", "Add missing  calls when testing for exceptions.", "\u00c9amonn McManus", "eamonnmcmanus", "08/31/21, 10:03:46 PM", "NaN", "NaN"], ["\u00c9amonn McManus", "Add missing  calls when testing for exceptions.", "08/31/21, 10:01:44 PM", "\u00c9amonn McManus", "8b9c23dc65cc8316e08c594d6f460afc0072dd59", ["gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"], "@@ -90,7 +90,9 @@ protected void tearDown() throws Exception {\n   public void testClassSerialization() {\n     try {\n       gson.toJson(String.class);\n-    } catch (UnsupportedOperationException expected) {}\n+      fail();\n+    } catch (UnsupportedOperationException expected) {\n+    }\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n     assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));\n@@ -99,7 +101,9 @@ public void testClassSerialization() {\n   public void testClassDeserialization() {\n     try {\n       gson.fromJson(\"String.class\", String.class.getClass());\n-    } catch (UnsupportedOperationException expected) {}\n+      fail();\n+    } catch (UnsupportedOperationException expected) {\n+    }\n     // Override with a custom type adapter for class.\n     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n     assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));, ", 6, 2, "\"modified, \"", 8], 1], ["1949", "Update dependencies in proto/pom.xml.", "\u00c9amonn McManus", "eamonnmcmanus", "09/02/21, 12:11:48 AM", "Also use `GeneratedMessageV3` rather than `GeneratedMessage`, consistent with recent versions of `protoc`.\r\n\r\nCloses #1797.", "When will this release? =||= According to `proto/pom.xml`, the artifact id is `com.google.code.gson:proto`. I don't think that has ever been released. https://github.com/google/gson/issues/690 suggests that was mostly intentional. Given that Gson is in maintenance mode we are probably not going to be releasing new subprojects. =||= Right, struggled to understand what \"maintenance mode\" would mean but #1821 explained, thanks =||= ", ["1949", "Update dependencies in proto/pom.xml.", "\u00c9amonn McManus", "eamonnmcmanus", "09/02/21, 12:11:48 AM", "Also use `GeneratedMessageV3` rather than `GeneratedMessage`, consistent with recent versions of `protoc`.\n\nCloses #1797.", "NaN"], ["\u00c9amonn McManus", "Use GeneratedMessageV3 rather than GeneratedMessage, consistent with recent protoc versions.", "09/02/21, 12:06:49 AM", "\u00c9amonn McManus", "84806ead8462b736dce570fb4bd2776512bd0a87", ["proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java", "proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"], "@@ -30,8 +30,7 @@\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage;\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Data;\n import com.google.gson.protobuf.generated.Bag.ProtoWithAnnotations.InnerMessage.Type;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n /**\n@@ -52,15 +51,15 @@ protected void setUp() throws Exception {\n         .addSerializedNameExtension(Annotations.serializedName)\n         .addSerializedEnumValueExtension(Annotations.serializedValue);\n     gson = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter.build())\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter.build())\n         .create();\n     gsonWithEnumNumbers = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter\n             .setEnumSerialization(EnumSerialization.NUMBER)\n             .build())\n         .create();\n     gsonWithLowerHyphen = new GsonBuilder()\n-        .registerTypeHierarchyAdapter(GeneratedMessage.class, protoTypeAdapter\n+        .registerTypeHierarchyAdapter(GeneratedMessageV3.class, protoTypeAdapter\n             .setFieldNameSerializationFormat(CaseFormat.LOWER_UNDERSCORE, CaseFormat.LOWER_HYPHEN)\n             .build())\n         .create();, @@ -24,8 +24,7 @@\n import com.google.gson.protobuf.generated.Bag.ProtoWithDifferentCaseFormat;\n import com.google.gson.protobuf.generated.Bag.ProtoWithRepeatedFields;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n /**\n@@ -42,15 +41,15 @@ protected void setUp() throws Exception {\n     super.setUp();\n     gson =\n         new GsonBuilder()\n-            .registerTypeHierarchyAdapter(GeneratedMessage.class,\n+            .registerTypeHierarchyAdapter(GeneratedMessageV3.class,\n                 ProtoTypeAdapter.newBuilder()\n                     .setEnumSerialization(EnumSerialization.NUMBER)\n                     .build())\n             .create();\n     upperCamelGson =\n         new GsonBuilder()\n             .registerTypeHierarchyAdapter(\n-                GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+                GeneratedMessageV3.class, ProtoTypeAdapter.newBuilder()\n                     .setFieldNameSerializationFormat(\n                         CaseFormat.LOWER_UNDERSCORE, CaseFormat.UPPER_CAMEL)\n                     .build()), @@ -21,8 +21,7 @@\n import com.google.gson.protobuf.ProtoTypeAdapter.EnumSerialization;\n import com.google.gson.protobuf.generated.Bag.SimpleProto;\n import com.google.protobuf.Descriptors.Descriptor;\n-import com.google.protobuf.GeneratedMessage;\n-\n+import com.google.protobuf.GeneratedMessageV3;\n import junit.framework.TestCase;\n \n public class ProtosWithPrimitiveTypesTest extends TestCase {\n@@ -32,7 +31,7 @@\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new GsonBuilder().registerTypeHierarchyAdapter(\n-      GeneratedMessage.class, ProtoTypeAdapter.newBuilder()\n+      GeneratedMessageV3.class, ProtoTypeAdapter.newBuilder()\n           .setEnumSerialization(EnumSerialization.NUMBER)\n           .build())\n       .create();, ", 9, 12, "\"modified, modified, modified, \"", 21], 1], ["1951", "Add license note to GSON POM file.", "Nikita Novik", "friendoye", "09/06/21, 05:35:44 PM", "I use [gradle-license-plugin](https://github.com/jaredsburrows/gradle-license-plugin) to keep information about licenses for my project's dependencies up-to-date. This Gradle plugin heavily relies on POM file to get information about license for `.jar` or `.aar` artifacts.\r\n\r\nUnfortunately, for the latest GSON artifact from Maven Central it is impossible to retrieve information about license from [POM file](https://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.8/gson-2.8.8.pom). This PR adds such information to GSON POM file.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1951) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= ", ["1951", "Add license note to GSON POM file.", "Nikita Novik", "friendoye", "09/06/21, 05:35:44 PM", "I use [gradle-license-plugin](https://github.com/jaredsburrows/gradle-license-plugin) to keep information about licenses for my project's dependencies up-to-date. This Gradle plugin heavily relies on POM file to get information about license for `.jar` or `.aar` artifacts.\n\nUnfortunately, for the latest GSON artifact from Maven Central it is impossible to retrieve information about license from [POM file](https://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.8/gson-2.8.8.pom). This PR adds such information to GSON POM file.", "NaN"], ["\u00c9amonn McManus", "Change `Apache 2.0` to `Apache-2.0`.\n\nAs suggested by @Marcono1234.\r\n> The [Maven POM Reference](https://maven.apache.org/pom.html#licenses) says:\r\n> > Using an [SPDX identifier](https://spdx.org/licenses/) as the license name is recommended.\r\n> The identifier for Apache 2.0 seems to be [`Apache-2.0`](https://spdx.org/licenses/Apache-2.0.html).\r\n> (Though even the Maven POM Reference example does not follow that advice; not sure how important it is.)", "09/06/21, 05:33:39 PM", "GitHub", "9407ebc927da344450e365f68aaeae62fc509ca7", ["gson/pom.xml"], "@@ -12,7 +12,7 @@\n \n   <licenses>\n     <license>\n-      <name>Apache 2.0</name>\n+      <name>Apache-2.0</name>\n       <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n     </license>\n   </licenses>, ", 1, 1, "\"modified, \"", 2], 1], ["1953", "update RawCollectionsExample.java", "Z", "SuperZ2017", "09/07/21, 03:02:04 PM", "use static method instead deprecated method", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1953) for more info**.\n\n<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Thanks, this is very helpful. =||= ", ["1953", "update RawCollectionsExample.java", "Z", "SuperZ2017", "09/07/21, 03:02:04 PM", "use static method instead deprecated method", "NaN"], ["Z", "update RawCollectionsExample.java\n\nuse static method instead deprecated method", "09/07/21, 03:43:54 AM", "GitHub", "78e50af5e10f201413db38ad157d3d1aea87acc0", ["extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java"], "@@ -45,8 +45,7 @@ public static void main(String[] args) {\n     collection.add(new Event(\"GREETINGS\", \"guest\"));\n     String json = gson.toJson(collection);\n     System.out.println(\"Using Gson.toJson() on a raw collection: \" + json);\n-    JsonParser parser = new JsonParser();\n-    JsonArray array = parser.parse(json).getAsJsonArray();\n+    JsonArray array = JsonParser.parseString(json).getAsJsonArray();\n     String message = gson.fromJson(array.get(0), String.class);\n     int number = gson.fromJson(array.get(1), int.class);\n     Event event = gson.fromJson(array.get(2), Event.class);, ", 1, 2, "\"modified, \"", 3], 1], ["1954", "update UserGuide.md", "Z", "SuperZ2017", "09/07/21, 03:00:12 PM", "Id Class does not have get method, we should new a instance.", "Thanks! =||= ", ["1954", "update UserGuide.md", "Z", "SuperZ2017", "09/07/21, 03:00:12 PM", "Id Class does not have get method, we should new a instance.", "NaN"], ["Z", "update UserGuide.md\n\nId Class does not have get method, we should new a instance.", "09/07/21, 03:58:26 AM", "GitHub", "865245edc8826ae4c0453e7f2299dae62e693f5e", ["UserGuide.md"], "@@ -429,7 +429,7 @@ class IdInstanceCreator implements InstanceCreator<Id<?>> {\n   public Id<?> createInstance(Type type) {\n     Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();\n     Type idType = typeParameters[0]; // Id has only one parameterized type T\n-    return Id.get((Class)idType, 0L);\n+    return new Id((Class)idType, 0L);\n   }\n }\n ```, ", 1, 1, "\"modified, \"", 2], 1], ["1955", "extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java", "Emanuelle Pharand", "ladykraken", "09/07/21, 06:55:10 PM", "extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java\r\n\r\n_Originally posted by @ladykraken in https://github.com/google/gson/pull/1953#discussion_r703660335_", "I don't know what this means and I'm guessing it was a mistake. =||= ", 0], ["1956", "Bump maven-javadoc-plugin from 3.3.0 to 3.3.1", null, "dependabot[bot]", "09/08/21, 01:14:07 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/2d22ccadffc2f22f18e19c2cc6d42fd863b4535d\"><code>2d22cca</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.1</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/7b7813e5ee6ba59ba75701c4d689337865bdc1f1\"><code>7b7813e</code></a> [MJAVADOC-450] Artifacts with a classifier are ignored when looking for resou...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/0d0e0cc7325fc27b89b7bde0ba2cbe322ff6a040\"><code>0d0e0cc</code></a> [MJAVADOC-618] Goal javadoc:aggregate fails with submodules packaged as war</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/a2acaa28f1534b31429589808b630ebe2f08e3d0\"><code>a2acaa2</code></a> [MJAVADOC-137] transform verify script from bsh to groovy</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/16ca1192632f2bfc4e10faa4aa24d319957008dc\"><code>16ca119</code></a> Clean up slf4j-simple</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/87dbfb209e5b75ead8443d70a0c748d02a4f729b\"><code>87dbfb2</code></a> [MJAVADOC-677] Using &quot;requires static transitive&quot; makes javadoc goal fail</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d770460b765d2a3ccb9594a1a016c6700501861f\"><code>d770460</code></a> [MJAVADOC-680] JDK 16+: Error fetching link: ...\\target\\javadoc-bundle-option...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/292ebb7eca37a0cebbff8a40a7d85ea915f211ac\"><code>292ebb7</code></a> Bump slf4j-simple from 1.7.30 to 1.7.32</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/fe6d738c2f95a3f5a361f0c4ab2eef49d37ae566\"><code>fe6d738</code></a> Bump mockito-core from 3.9.0 to 3.12.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d2dd5321dc02e793d87c722224c40d94a607cb51\"><code>d2dd532</code></a> [MJAVADOC-679] &quot;Unable to compute stale date&quot; in a directory with accent char...</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.3.0&new-version=3.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN", ["1956", "Bump maven-javadoc-plugin from 3.3.0 to 3.3.1", null, "dependabot[bot]", "09/08/21, 01:14:07 PM", "Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/2d22ccadffc2f22f18e19c2cc6d42fd863b4535d\"><code>2d22cca</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.1</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/7b7813e5ee6ba59ba75701c4d689337865bdc1f1\"><code>7b7813e</code></a> [MJAVADOC-450] Artifacts with a classifier are ignored when looking for resou...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/0d0e0cc7325fc27b89b7bde0ba2cbe322ff6a040\"><code>0d0e0cc</code></a> [MJAVADOC-618] Goal javadoc:aggregate fails with submodules packaged as war</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/a2acaa28f1534b31429589808b630ebe2f08e3d0\"><code>a2acaa2</code></a> [MJAVADOC-137] transform verify script from bsh to groovy</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/16ca1192632f2bfc4e10faa4aa24d319957008dc\"><code>16ca119</code></a> Clean up slf4j-simple</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/87dbfb209e5b75ead8443d70a0c748d02a4f729b\"><code>87dbfb2</code></a> [MJAVADOC-677] Using &quot;requires static transitive&quot; makes javadoc goal fail</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d770460b765d2a3ccb9594a1a016c6700501861f\"><code>d770460</code></a> [MJAVADOC-680] JDK 16+: Error fetching link: ...\\target\\javadoc-bundle-option...</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/292ebb7eca37a0cebbff8a40a7d85ea915f211ac\"><code>292ebb7</code></a> Bump slf4j-simple from 1.7.30 to 1.7.32</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/fe6d738c2f95a3f5a361f0c4ab2eef49d37ae566\"><code>fe6d738</code></a> Bump mockito-core from 3.9.0 to 3.12.0</li>\n<li><a href=\"https://github.com/apache/maven-javadoc-plugin/commit/d2dd5321dc02e793d87c722224c40d94a607cb51\"><code>d2dd532</code></a> [MJAVADOC-679] &quot;Unable to compute stale date&quot; in a directory with accent char...</li>\n<li>Additional commits viewable in <a href=\"https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.3.0&new-version=3.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["dependabot[bot]", "Bump maven-javadoc-plugin from 3.3.0 to 3.3.1\n\nBumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.\n- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)\n- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1)\n\n---\nupdated-dependencies:\n- dependency-name: org.apache.maven.plugins:maven-javadoc-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>", "09/08/21, 03:02:49 AM", "GitHub", "94a27bd409c3075f7f21dfc187044de3a7b62757", ["pom.xml"], "@@ -97,7 +97,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>3.3.0</version>\n+          <version>3.3.1</version>\n         </plugin>\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>, ", 1, 1, "\"modified, \"", 2], 1], ["1960", "Revert \"Replace localhost lookup with static IP to fix test.\"", null, "Thichcamauninho", "09/12/21, 01:43:35 PM", "[dhux](https://luckyfish.io/?c=c_hfqoqajm34x5) ", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1960) for more info**.\n\n<!-- need_sender_cla --> =||= [dhux](https://luckyfish.io/?c=c_hfqoqajm34x5)  =||= Ok =||= ", 0], ["1962", "JsonWriter make indent accessible", "Speiger", "Speiger", "09/13/21, 12:47:56 AM", "Motivation for this change.\r\nWhen using indents in the JsonWriter usually spam newlines for arrays.\r\nI wrote a custom JsonWriter on top of this one which just implements a nicer Pretty Printing style.\r\nSaid Style disables newlines & indents when a Array is started, but enables them if a object is started within the array.\r\nIt uses a List<Boolean> to keep track of the blockage state.\r\n\r\nThe only thing that I couldn't override without adding a extra Method is the \"indent\". Which is set to final for reasons I assume,\r\nbut a getter should be present to aid people who want to improve their \"Human Readable\" JsonFile.\r\n\r\nThe idea is that you can seamlessly override the JsonWriter without the need of requiring extra functions to make original behavior work.\r\n\r\nThanks for reading and your time.", "\nThanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\n:memo: **Please visit <https://cla.developers.google.com/> to sign.**\n\nOnce you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.\n\n----\n\n#### What to do if you already signed the CLA\n\n##### Individual signers\n\n*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n\n##### Corporate signers\n\n*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).\n*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).\n*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).\n\t\t\n\n\u2139\ufe0f **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1962) for more info**.\n\n<!-- need_sender_cla --> =||= Eh yeah not going to sign it:\r\nBecause google lets me not decide which information may or may not be shared publicly.\r\nThe main problem being, I would like to select which of my email addresses it uses. (Already tried alternative email address and it says both instead of select one)\r\n\r\nIf someone wants to take over this patch and submit it instead of me. Go ahead I would be happy enough.\r\n(Technically these lines of code are not copyright-able anyways) =||= ", 0]]