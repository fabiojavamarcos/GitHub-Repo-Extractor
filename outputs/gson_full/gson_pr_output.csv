Issue_NumberIssue_TitleIssue_Author_NameIssue_Author_LoginIssue_Closed_DateIssue_BodyIssue_CommentsPR_TitlePR_Author_NamePR_Author_LoginPR_Closed_DatePR_BodyPR_CommentsCommit_Author_NameCommit_DateCommit_MessageisPR
1Provide default support for java.util.MapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:22 PM"```
Should be able to convert the default representation of a Map. 
Should be able to deserialize {{""a"":""1""},{""b"":2""}} as well as
[{""a"":""1""},{""b"":2""}] to a map. Consider using a concrete implementation
(linked list) of Map that preserves the order of elements. 
```

Original issue reported on code.google.com by `inder123` on 25 Apr 2008 at 7:16""```
Added support for serialization and deserialization of all subclasses of
java.util.Map in changelist r13:
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/6a6c
fc7309918aea
```

Original comment by `inder123` on 29 Apr 2008 at 4:19
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
2Provide support for pretty printingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:23 PM"```
Gson should provide ability to print nicely indented Json. It should be
possible to set print margin, default indentation, and so on. 
```

Original issue reported on code.google.com by `inder123` on 25 Apr 2008 at 9:10""```
Added pretty printing support in r19 change:
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/6a6c
fc7309918aea

```

Original comment by `inder123` on 29 Apr 2008 at 4:18
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
3Provide support to escape HTMLGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:23 PM"```
To prevent against XSS attacks, Gson should provide a GsonBuilder option to
automatically escape and unescape HTML
```

Original issue reported on code.google.com by `inder123` on 25 Apr 2008 at 11:18""Original comment by `inder123` on 19 May 2008 at 6:25
 =||= Original comment by `joel.leitch@gmail.com` on 31 May 2008 at 12:45
 =||= ```
Submission r94
(http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ac9
a092a4b45f6b6)
 added JSON escaping to google-gson which fixes this bug.
```

Original comment by `joel.leitch@gmail.com` on 18 Jun 2008 at 12:14
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
4Provide a mode of operation to force explicit serialization and deserializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:25 PM"```
Provide a GsonBuilder setting that forces Gson to ignore all fields except
those marked with a specific annotation like ""@Expose""

```

Original issue reported on code.google.com by `inder123` on 27 Apr 2008 at 2:34""Original comment by `inder123` on 27 Apr 2008 at 2:34
 =||= ```
Fixed in r34 by providing an @Expose annotation that can be applied to fields. 
The
explicit serialization and deserialization can be enabled by invoking the
excludeFieldsWithoutExposeAnnotation() method of GsonBuilder. 

See
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/aa9f
9a8c8cb4a2a4
```

Original comment by `inder123` on 9 May 2008 at 8:48
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
5Support JavaBeans properties in addition to class fieldsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:25 PM"```
Gson uses class fields for conversion to/from Json. It would also be great
to have a mode of operation (using GsonBuilder) that forces Gson to use
methods as well. Essentially, a mode where Gson only considers the class
members with @Expose annotation.
```

Original issue reported on code.google.com by `inder123` on 27 Apr 2008 at 2:37""Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:53
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= ```
This library is primarily designed as a field mapping library and it has served 
the 
purpose well. We decided not to implement this feature for now. 
```

Original comment by `inder123` on 13 Nov 2008 at 1:53
- Changed state: **WontFix**
 =||= ```
There have been a few requests for supporting this, so I am reopening this 
issue but 
still not promises on fixing it.
```

Original comment by `inder123` on 2 Jun 2009 at 5:43
- Changed state: **New**
 =||= ```
Somehow we can not convince ourselves that this is worth doing, so closing it 
again.
```

Original comment by `inder123` on 1 Oct 2009 at 3:58
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
6Not serializing arrays of stringGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:27 PM"```
What steps will reproduce the problem?

Try to serialize and array of String

What is the expected output? What do you see instead?

[""hello"", ""world""]
[{},{}]

What version of the product are you using? On what operating system?

Current.  Ubuntu ;)

Please provide any additional information below.

it isn't serializing my array list of strings as it once was, I just get a
list of empty dicts of the same size.

For example the output of :

import com.google.gson.Gson;
import java.util.List;
import java.util.ArrayList;

public class GsonExample {

  public static void main(String args[]) {
    List<String> vals = new ArrayList<String>();
    vals.add(""Hello"");
    vals.add(""World"");
    Gson gson = new Gson();
    System.out.println(gson.toJson(vals));
    System.out.println(gson.toJson(vals, List.class));
  }
}

Is :

[{},{}]
[{},{}]

At line 127 of JsonSerializationVisitor the fieldValue of my object is
""ade"" for instance and the fieldType is ""class java.lang.Object""

At line 131, the childVisitor.getJsonElement() line always returns an empty
dict {}

Regards,

Cameron
```

Original issue reported on code.google.com by `camerong...@gmail.com` on 7 May 2008 at 6:21""```
added a test, and reproduced the problem. Thanks for the detailed bug report. 
```

Original comment by `inder123` on 8 May 2008 at 3:52
- Changed state: **Accepted**
 =||= ```
Fixed in r36. See
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/f6a1
92c317003180

Added new serialization and deserialization tests for array and collection of 
Strings. 
```

Original comment by `inder123` on 8 May 2008 at 4:10
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
7JsonParser fails to parse decimal values correctlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:28 PM"```
-122.08 is parsed as -122.0

```

Original issue reported on code.google.com by `inder123` on 8 May 2008 at 5:34""```
Fixed in r37 by updating the token definition for a digit to support multiple 
digits
after the decimal point. 
This allows numbers with more than one leading zeros as valid numbers even 
though
Json grammar technically disallows it. But I figured that allowing this is a 
little
more permissive without breaking any code, so can't hurt. 

See:
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/7a22
fa0d485a4a76
```

Original comment by `inder123` on 8 May 2008 at 5:39
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
8"Provide support to escape "" character"Google Code ExporterGoogleCodeExporter03/19/15, 06:21:28 PM"```
if i have a property set to ""aaaa\""bbbb"" json loooks like ""aaaa""bbbb"". The
output should be properly escaped. 
```

Original issue reported on code.google.com by `inder123` on 19 May 2008 at 6:19""Original comment by `inder123` on 19 May 2008 at 6:25
 =||= ```
Submission r94
(http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ac9
a092a4b45f6b6)
 added JSON escaping to google-gson which fixes this bug.

NOTE: Issue #3 is a similar bug.
```

Original comment by `joel.leitch@gmail.com` on 18 Jun 2008 at 12:15
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
9Gson should provide an ability to customize field name mappingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:29 PM"```
Currently Gson just uses the actual name of the field as the Json property
name. This should be customizable. For example, it should be possible to
convert camel-case into hyphenated, or Camel-cased with upper-case first
letter.

so, myFavoriteField in Java gets mapped to my-favorite-field or
MyFavoriteField in Json. 

One approach to achieve this is by providing a name translation policy in
GsonBuilder. 
```

Original issue reported on code.google.com by `inder123` on 22 May 2008 at 5:51""```
Started implementing this feature.

This bug will be part of the next version cut (tentative date: July 4th).
```

Original comment by `joel.leitch@gmail.com` on 19 Jun 2008 at 1:37
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
r100 contains the code to support this feature.
```

Original comment by `joel.leitch@gmail.com` on 28 Jun 2008 at 4:46
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
10Gson should provide an ability to restrict the namespace of classes usedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:30 PM"```
It should be possible to restrict Gson to only java.*, javax.* and
com.google.checkout.api.model.* and nothing else. 

This is probably a good security feature. We should look at Ant (or
eclipse) conventions for deciding how to define package mappings. 
```

Original issue reported on code.google.com by `inder123` on 22 May 2008 at 5:52""```
This seemed like a lot less useful feature than we originally thought so I am 
closing 
it.
```

Original comment by `inder123` on 13 Nov 2008 at 1:53
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
11publish javadocs on the webGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:31 PM"```
Probably best to check them in the svn alongwith setting properties to
enable them to be viewed as HTML. 
```

Original issue reported on code.google.com by `inder123` on 29 May 2008 at 4:09""```
Done and also set the svn properties for mime-types:

find docs -name ""*.html"" -exec svn propset svn:mime-type text/html {} \;
find docs -name ""*.gif"" -exec svn propset svn:mime-type image/gif {} \;
```

Original comment by `inder123` on 30 May 2008 at 4:03
 =||= Original comment by `inder123` on 30 May 2008 at 4:03
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
12Edit User Guide to match 1.0 APIsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:32 PM"```
API changed in the 1.0 release, and the guides are not yet updated to match
them. Also, publish the guides on the wiki for gson.
```

Original issue reported on code.google.com by `inder123` on 29 May 2008 at 4:10""```
The examples in the User Guide have been updated to match the version 1.0 
release of
Gson.
```

Original comment by `joel.leitch@gmail.com` on 31 May 2008 at 12:43
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
13Publish Gson jars in maven2 repositoryGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:32 PM"```
The subject says it all. We should figure out how guice guys are doing it,
and do the same. 
```

Original issue reported on code.google.com by `inder123` on 30 May 2008 at 10:00""```
Created a JIRA issue in the maven project for this: 
http://jira.codehaus.org/browse/MAVENUPLOAD-2128

```

Original comment by `inder123` on 7 Jul 2008 at 6:18
 =||= ```
Gson 1.1 is now available in maven2 central repository. We should figure out a 
way to
update it automatically. 
```

Original comment by `inder123` on 11 Aug 2008 at 9:25
- Changed state: **Started**
 =||= ```
Yes please.
```

Original comment by `antony.s...@gmail.com` on 19 Nov 2008 at 10:12
 =||= ```
I'm guessing this [1] is where it will now continue to be available and 
up-to-date? I
just wanted to clarify, since this issue is still open.

[1] http://google-gson.googlecode.com/svn/mavenrepo
```

Original comment by `estebis...@gmail.com` on 28 Jan 2009 at 4:31
 =||= ```
You are right that http://google-gson.googlecode.com/svn/mavenrepo remains the 
place 
where latest versions will be available. Maven2 central repository has an 
earlier 
version, but it is too much work to upload a new version there. 

Any volunteers?
```

Original comment by `inder123` on 28 Jan 2009 at 5:04
 =||= ```
We have what we have in the maven central repository, and we have our own with 
the 
latest and greatest Gson. Not worth keeping this bug open anymore.
```

Original comment by `inder123` on 1 Oct 2009 at 3:59
- Changed state: **Fixed**
 =||= ```
inder123: As you asked for in the JIRA entry, automatic updates are possible and
described at
http://maven.apache.org/guides/mini/guide-central-repository-upload.html#Syncing
_your_own_repository_to_the_central_repository_automatically

I'd really like to see google-gson in the official Maven 2 repositories as that 
would
free every Maven 2 user from the need to add the current repository explicitly 
to
`pom.xml`.
```

Original comment by `j...@nwsnet.de` on 12 Oct 2009 at 12:52
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
14Can not parse null arraysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:34 PM"```
What steps will reproduce the problem?
1. JSON to parse: 
2. Java: class Test { Object[] my_array; }
3. gson.fromJson(""{\""my_array\"": null}"", Test.class);

What is the expected output? What do you see instead?

Expected: A Test object with my_array initialized to null.
Actual: java.lang.NullPointerException
        at
com.google.gson.JsonDeserializationVisitor.visitChildAsArray(JsonDeserialization
Visitor.java:93)
        at
com.google.gson.JsonObjectDeserializationVisitor.visitArrayField(JsonObjectDeser
ializationVisitor.java:114)
        at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:172)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)
        at
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:75)
        at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:47)
        at com.google.gson.Gson.fromJson(Gson.java:310)
        at com.google.gson.Gson.fromJson(Gson.java:285)

What version of the product are you using? On what operating system?

v1_0 on Linux

```

Original issue reported on code.google.com by `ch...@gmail.com` on 2 Jun 2008 at 11:52""```
Sorry, the JSON missing in ""step 1"" is inline in ""step 3"".
```

Original comment by `ch...@gmail.com` on 2 Jun 2008 at 11:53
 =||= ```
Also, null values outside of arrays also fail to parse due to a Precondition 
failure:

java.lang.IllegalArgumentException: condition failed: false
        at com.google.gson.Preconditions.checkArgument(Preconditions.java:39)
        at com.google.gson.Preconditions.checkNotNull(Preconditions.java:34)
        at
com.google.gson.JsonDeserializationVisitor.<init>(JsonDeserializationVisitor.jav
a:46)
        at
com.google.gson.JsonObjectDeserializationVisitor.<init>(JsonObjectDeserializatio
nVisitor.java:37)
        at
com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio
nVisitor.java:85)
        at
com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese
rializationVisitor.java:72)
        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)
        at
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:75)
        at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:47)

I'm pretty sure null is a valid JSON type, but even if it's not, then this 
should
throw a ParseError.
```

Original comment by `ch...@gmail.com` on 2 Jun 2008 at 5:12
 =||= ```
null is a valid JSON type as per JSON spec
(http://tools.ietf.org/id/draft-crockford-jsonorg-json-04.txt). I just wrote a 
test
(thanks for providing a good example) and this is indeed failing. We will fix 
this
and put it in our next release. 
```

Original comment by `inder123` on 2 Jun 2008 at 5:51
- Changed state: **Started**
 =||= ```
Fixed in r90: 
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/ec69
ab8bcddfa3da

Actually, well designed Json should just omit the field instead of passing 
nulls.
However, Gson should handle the case as well, and that is why we have now added
support for it. 
```

Original comment by `inder123` on 2 Jun 2008 at 7:37
- Changed state: **Fixed**
 =||= ```
Revised the fix. See: 
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/1507
840c6b401a0c
```

Original comment by `inder123` on 2 Jun 2008 at 8:11
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
15Add a ZIP downloadGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:36 PM"```
We should add a ZIP file as a download which includes the license, jar and
README for Gson.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 3 Jun 2008 at 5:51""```
Fixed in r93
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/da61
a2050b013c04
and r92
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/38dc
2d40ab7fc3ed
```

Original comment by `inder123` on 18 Jun 2008 at 12:07
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 18 Jun 2008 at 12:08
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
16Provide annotation to rename an individual fieldGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:37 PM"```
I'd like the ability to control the name of a property being serialized on
a per-field basis using an annotation. Something like:

   @SerializeAsName(""id"")
   String getUniqueName() { ... }

Other alternatives are @Name, @Named, @JsonName, etc.
```

Original issue reported on code.google.com by `viri...@gmail.com` on 4 Jun 2008 at 10:09""```
This request is similar to Issue 9.

We should develop a generic naming policy that can handle both annotation based 
and
general field renaming (or a combination of naming policies).
```

Original comment by `joel.leitch@gmail.com` on 6 Jun 2008 at 12:30
 =||= ```
Generic naming policy infrastructure has been added so now I need to hook in the
annotation based naming strategy.
```

Original comment by `joel.leitch@gmail.com` on 28 Jun 2008 at 4:50
- Changed state: **Accepted**
 =||= ```
Feature request submitted in r104.  This change will be rolled out in the 1.1 
release.

See https://sites.google.com/site/gson/gson-roadmap for information on upcoming 
releases.
```

Original comment by `joel.leitch@gmail.com` on 30 Jun 2008 at 2:30
- Changed state: **Fixed**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
17Json + schemaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:40 PM"```
http://groups.google.com/group/json-schema/web/json-schema-proposal---second-dra
ft
has a discussion on how to define a Json schema. We should explore how this
can be used for Gson. In Gson, currently, the Java classes define the
schema. May be we can provide a validator that validates the schema against
a set of classes.Or generates the Json schema corresponding to a set of
classes (using the ObjectNavigator). 
```

Original issue reported on code.google.com by `inder123` on 13 Jun 2008 at 8:46""```
FYI... I've started implementing a JsonValidator class to do just this based on 
top
of the Gson library.  I have only implemented the validation I have needed so 
far,
but I can post it if you are interested.
```

Original comment by `z13g...@gmail.com` on 14 Apr 2009 at 8:33
 =||= ```
It would be great if you can either post it in a forum, or create a new 
open-source 
project that we can point people to for this. 
Thanks
```

Original comment by `inder123` on 14 Apr 2009 at 8:41
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:25
- Added labels: **Milestone-Undefined**
 =||= Original comment by `limpbizkit` on 24 Jan 2011 at 10:21
- Changed title: **Json + schema**
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
Joel pointed me to this IETF draft
http://tools.ietf.org/html/draft-zyp-json-schema-03

I don't like it because it is not simple. It has many features that should be 
left up to the application-level: value range checking, hrefs, IDs, enums, 
inheritance, refs, etc.  These all remind me of XML, which is why we all like 
JSON so much.
```

Original comment by `limpbizkit` on 15 Feb 2011 at 12:21
 =||= ```
@limpbizkit: I generally agree with your concerns about using a schema language.

However, the big advantage of a schema language is that it is language neutral 
documentation. Currently, the Java Objects used by Gson is the real 
specification. Having a schema would be nice.
```

Original comment by `inder123` on 8 Jul 2011 at 3:31
 =||= ```
@inder123: ya, a specification can provide a neutral guide to do interaction 
with other language or platform. But implementing such a specification is a 
time-consuming work. For your experience, how much work it should take to do 
this work? you know, I am really interested in it.
```

Original comment by `alloyer` on 8 Jul 2011 at 3:42
 =||= ```
It is not going to be too much work. How about you experiment with generating 
DOM with Gson by using Gson.toJsonTree() method. Currently 
Gson.toJson(JsonElement e) method prints the JSON for the DOM tree. Instead, 
you need to output the schema. Should be as simple as walking through each of 
the DOM nodes and writing schema elements to the output.
```

Original comment by `inder123` on 8 Jul 2011 at 5:11
 =||= ```
There are plenty of time, users choose XML, for it's concrete schema validation 
feature. a quick solution on top of my head , may be not so efficient, we can 
abstract. That is 
convert json schema in to xml one (less work I assume)
use xml validation feature to verify data. 

```

Original comment by `estifa...@google.com` on 8 Jul 2011 at 5:37
 =||= ```
I am starting the work to describe a Java type in Json schema. But I can't get 
how to describe the generic type of a list? I know I can use ""array"" to 
represent a List type, but where to set the entity type for the List?
```

Original comment by `alloyer` on 11 Jul 2011 at 8:50
 =||= ```
Might be worth asking this question on the JSON Schema group:
https://groups.google.com/forum/#!forum/json-schema

I am actually not sure if this JSON schema is the most popular schema language 
for JSON. Please look around to see if you find a schema language that is 
complete and has gained most traction.
```

Original comment by `inder123` on 11 Jul 2011 at 8:57
 =||= ```
Here is a pointer to another schema language for JSON:
http://tools.ietf.org/html/draft-zyp-json-schema-03

It seems like this one is from IETF so is more official. Please help figure out 
which is the most popular schema language.
```

Original comment by `inder123` on 11 Jul 2011 at 9:00
 =||= ```
If we ever do this, I'd prefer we do it as an optional extension.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:50
 =||= ```
It only took me 2 years to get around to posting it, but here is the JSON 
Validation code a wrote a while ago.

Feel free to do with it as you will.  If (within the next few years) I create a 
opensource project for it, I'll post here.  If someone else does, please post a 
note here so that I can follow it.

Thanks.
```

Original comment by `zieg...@amaratech.com` on 6 Feb 2012 at 10:44

Attachments:
- [JSONValidator.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-17/comment-14/JSONValidator.java)
- [JSONValidationException.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-17/comment-14/JSONValidationException.java)
 =||= ```
FYI, you have a bug on line 118. It should be 
ANY.getTypeString().equals(type)), not ANY.equals(type) -- in the latter case, 
you're using equals() to compare an Enum<Type> and a String.
```

Original comment by `tedpenni...@gmail.com` on 7 Feb 2012 at 2:48
 =||= ```
Thanks for pointing that out.

FYI, I use JSON for my web APIs.  I use the schema as an easy way of validating 
input (and output) data.  Since I use the schema file for validation in my 
code, I can publish it and provides a definitive documentation of the API.  For 
this, I find it really useful.
```

Original comment by `zieg...@amaratech.com` on 10 Feb 2012 at 11:50
 =||= ```
I don't think we're gonna get to this.
```

Original comment by `limpbizkit` on 16 Apr 2012 at 10:47
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
18Gson does not handle null values in arrays properlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:44 PM"```
(reported by Ben Littman)
This:
    System.out.println(gson.toJson(new String[]{""foo"", ""bar""}));
results in:
[""foo"", ""bar]

But should a null value be allowed, as in:
    System.out.println(gson.toJson(new String[]{""foo"", null,""bar""}));
which results in:
java.lang.NullPointerException
        at
com.google.gson.JsonTreeNavigator.visitChild(JsonTreeNavigator.java:76)
        at
com.google.gson.JsonTreeNavigator.navigate(JsonTreeNavigator.java:39)
        at
com.google.gson.JsonCompactFormatter.format(JsonCompactFormatter.java:112)
        at com.google.gson.Gson.toJson(Gson.java:270)
        at com.google.gson.Gson.toJson(Gson.java:243)

Also, this:
    String[] stringArray = gson.fromJson(""[\""foo\"", \""bar\""]"", String[].class);
returns the string array one would expect

But an serialized array with a null in it:
    String[] stringArray = gson.fromJson(""[\""foo\"", null, \""bar\""]"",
String[].class);
results in:
java.lang.IllegalState
Exception
        at
com.google.gson.JsonArrayDeserializationVisitor.visitArray(JsonArrayDeserializat
ionVisi
tor.java:73)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:136)
        at
com.google.gson.JsonDeserializationContextDefault.fromJsonArray(JsonDeserializat
ionCont
extDefault.java:63)
        at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContex
tDefault.java:45)
        at com.google.gson.Gson.fromJson(Gson.java:319)
        at com.google.gson.Gson.fromJson(Gson.java:292)
```

Original issue reported on code.google.com by `inder123` on 26 Jun 2008 at 7:38""```
Fixed in r99:
http://groups.google.com/group/google-gson-codereviews/browse_thread/thread/c01b
dc408a4dae95#
```

Original comment by `inder123` on 26 Jun 2008 at 7:46
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
19Gson should handle stack overflow and other errors happening from parsing untrusted JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:44 PM"```
(reported by Meder):

'print ""{\""a\"":[],\""a\"":"" x 2000'`
`perl -e 'print ""{\""a\"":[],\""""; print ""X"" x 6000;'`

to generate really large JSON and feed it to GSON. Gson brings down the JVM
with stack overflow error. 
```

Original issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:35""Original comment by `inder123` on 8 Jul 2008 at 5:44
 =||= ```
Here is a test that will reproduce this problem. On the positive side, Gson is 
able
to handle individual strings upto 103kb on my machine. 

  public void testReallyLongStrings() {
    StringBuilder sb = new StringBuilder(8096);
    sb.append(""com.codegoogle.gson.gks.anon.GksDataNotFoundException: Instrument 10
not found.\n"");
    sb.append(""\tat
com.codegoogle.gson.common.backend.reflect.Instrument.load(Instrument.java"");
    sb.append("":135)\n\tat
com.codegoogle.gson.common.entities.InstrumentFactoryImpl$1.run(Ins"");
    sb.append(""trumentFactoryImpl.java:70)\n\tat
com.codegoogle.gson.common.InstrumentFactory"");
    sb.append(""Impl$1.run(InstrumentFactoryImpl.java:98)\n\tat
com.codegoogle.gson.common.base."");

sb.append(""CbgRunnableToGksRunnableAdapter.run(CbgRunnableToGksRunnableAdapter.j
ava:32)\n\t"");
    sb.append(""at
com.codegoogle.gson.anon.GksConnManager.run(GksConnectionManager.java:15)\n\t"");
    sb.append(""at
com.codegoogle.gson.common.entities.NonTransactionalRunner.run(NonTransactional""
);
    sb.append(""Runner.java:4544)\n\tat
com.codegoogle.gson.common.base.ConnectionContextSwitch"");
    sb.append(""er$1.run(ConnectionSwitcher.java:20)\n\tat
com.codegoogle.gson.anon.GksConnecti"");
    sb.append(""onManager.run(GksConnectionManager.java:65)\n\tat
com.codegoogle.gson.common.base"");

sb.append("".ConnectionContextSwitcher.run(ConnectionContextSwitcher.java:2238)\n
\tat
com"");

sb.append("".google.common.entities.base.SierraContext.runNonTransactionalOnRepli
ca(Sierra"");
    sb.append(""Context.java:60)\n\tat
com.codegoogle.gson.common.InstrumentFactoryImpl.getIns"");
    sb.append(""(InstrumentFactoryImpl.java:7)\n\tat
com.codegoogle.gson.common.webservice.buyer"");

sb.append("".facades.common.BuyerFacadecommon.getDomainInstrument(BuyerFacadecomm
on.jav"");
    sb.append(""a:183)\n\tat
com.codegoogle.gson.common.buyer.facades.common.CartFacadePaym"");
    sb.append(""ents.update(CartFacadecommon.java:39)\n\tat
com.codegoogle.gson.common.buy"");

sb.append(""er.facades.common.CartFacadecommon.update(CartFacadecommon.java:2415)
\n\t"");
    sb.append(""at
com.codegoogle.gson.common.webservice.buyer.facades.common.CartFacadecommo.upda""
);
    sb.append(""te(CartFacadecommon.java:2053)\n\tat
com.codegoogle.gson.common.buyer.web.B"");

sb.append(""uyerWebServiceCartPagelet.executePut(BuyerWebServiceCartPagelet.java:
48)\n\t"");
    sb.append(""at
com.codegoogle.gson.common.webservice.buyer.web.CartPagelet.onPostCar"");
    sb.append(""tSelections(BuyerWebServiceCartPagelet.java:12)\n\tat
sun.reflect.NativeMethodAc"");
    sb.append(""cessorImpl.invoke0(Native Method)\n\tat
sun.reflect.NativeMethodAccessorImpl.inv"");
    sb.append(""oke(Unknown Source)\n\tat
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknow"");
    sb.append(""n Source)\n\tat java.lang.reflect.Method.invoke(Unknown Source)\n\tat
com.gson"");

sb.append("".web.pagelets.di.ObjectDriver$MethodInvoker.invoke(ObjectDriver.java:
86)\n\t"");
    sb.append(""at
com.codegoogle.gson.web.di.ObjectDriver.execute(ObjectDriver.java:155)\n\t"");
    sb.append(""at
com.codegoogle.gson.web.ReflectorPageletDriver.invokeExecuteOrOnEvent(Reflect"");
    sb.append(""orPageletDriver.java:84)\n\tat
com.codegoogle.gson.web.ReflectorPageletDriver.ex"");
    sb.append(""ecute(ReflectorPageletDriver.java:54)\n\tat
com.codegoogle.gson.web.DelegatingPa"");
    sb.append(""geletDriver.execute(DelegatingPageletDriver.java:20)\n\tat
com.codegoogle.gson.w"");

sb.append(""ebservice.buyer.web.BuyerTosPageletDriver.execute(BuyerTosPageletDriv
er.java:44)"");
    sb.append(""\n\tat
com.codegoogle.gson.web.DelegatingPageletDriver.execute(DelegatingPagelet"");
    sb.append(""Driver.java:20)\n\tat
com.codegoogle.gson.common.webservice.web.BuyerAuthenticati"");

sb.append(""onPageletDriver.execute(BuyerAuthenticationPageletDriver.java:58)\n\t
at
com.goog"");

sb.append(""le.web.pagelets.DelegatingPageletDriver.execute(DelegatingPageletDriv
er.java:20)"");
    sb.append(""\n\tat
com.codegoogle.gson.common.apps.common.DbTransactionPageletDriver.access"");
    sb.append(""$001(DbTransactionPageletDriver.java:17)\n\tat
com.codegoogle.gson.apps.common.p"");

sb.append(""agelet.DbTransactionPageletDriver$1.run(DbTransactionPageletDriver.ja
va:28)\n\t"");
    sb.append(""at
com.codegoogle.gson.common.apps.common.DbTransactionPageletDriver$1.run(DbTr"");
    sb.append(""ansactionPageletDriver.java:26)\n\tat
com.codegoogle.gson.common.base.Transact"");
    sb.append(""ionalRunner$Wrapper.run(TransactionalRunner.java:64)\n\tat
com.codegoogle.gson."");

sb.append(""common.entities.base.GksTransactionBodyAdapter.run(GksTransactionBody
Adapter.j"");
    sb.append(""ava:56)\n\tat
com.codegoogle.gson.GksConnectionManager.runTransaction(GksConnecti"");
    sb.append(""onManager.java:1040)\n\tat
com.codegoogle.gson.GksConnectionManager.runTransactio"");
    sb.append(""n(GksConnectionManager.java:961)\n\tat
com.codegoogle.gson.common.base.Transac"");
    sb.append(""tionalRunner.newTransaction(TransactionalRunner.java:224)\n\tat
com.gson.payme"");

sb.append(""nts.entities.base.TransactionalRunner.run(TransactionalRunner.java:13
4)\n\tat
co"");

sb.append(""m.google.common.entities.base.ConnectionContextSwitcher$1.run(Connect
ionContex"");
    sb.append(""tSwitcher.java:90)\n\tat
com.codegoogle.gson.GksConnectionManager.run(GksConnecti"");
    sb.append(""onManager.java:615)\n\tat
com.codegoogle.gson.common.base.ConnectionContextSwi"");
    sb.append(""tcher.run(ConnectionContextSwitcher.java:78)\n\tat
com.codegoogle.gson.common."");
    sb.append(""SierraContext.runPrimary(SierraContext.java:373)\n\tat
com.codegoogle.gson.common."");

sb.append(""apps.common.pagelet.DbTransactionPageletDriver.execute(DbTransactionP
ageletDrive"");
    sb.append(""r.java:26)\n\tat
com.codegoogle.gson.web.DelegatingPageletDriver.execute(Delegat"");
    sb.append(""ingPageletDriver.java:20)\n\tat
com.codegoogle.gson.web.DelegatingPageletDriver."");
    sb.append(""execute(DelegatingPageletDriver.java:20)\n\tat
com.codegoogle.gson.common.bu"");

sb.append(""yer.web.BuyerWebServiceErrorPageletDriver.execute(BuyerWebServiceErro
rPageletDri"");
    sb.append(""ver.java:42)\n\tat
com.codegoogle.gson.web.PageletServletAdapterWithoutScope.ser"");
    sb.append(""vice(PageletServletAdapterWithoutScope.java:58)\n\tat
com.codegoogle.gson.web.Pa"");
    sb.append(""geletServletAdapter2.service(PageletServletAdapter2.java:52)\n\tat
javax.servlet"");
    sb.append("".HttpServlet.service(HttpServlet.java:102)\n\tat
com.codegoogle.gson.FilteredSer"");
    sb.append(""vlet$ChainEnd.doFilter(FilteredServlet.java:133)\n\tat
com.codegoogle.gson.common"");

sb.append("".monitorableservices.web.pagelets.LocaleContextFilter.doFilter(Locale
ContextFil"");
    sb.append(""ter.java:72)\n\tat
com.codegoogle.gson.FilteredSt$Chain.doFilter(FilteredServlet"");
    sb.append("".java:131)\n\tat
com.codegoogle.gson.common.apps.DatabaseFilter.doFilter(Data"");
    sb.append(""baseFilter.java:31)\n\tat
com.codegoogle.gson.FilteredSet$Chain.doFilter(Filtered"");
    sb.append(""Servlet.java:131)\n\tat
com.codegoogle.gson.common.apps.StatsFilter.doFilter("");
    sb.append(""StatsFilter.java:75)\n\tat
com.codegoogle.gson.FilteredSet$Chain.doFilter(Filtere"");
    sb.append(""dServlet.java:131)\n\tat
com.codegoogle.gson.common.apps.LoggingFilter.doFilt"");
    sb.append(""er(LoggingFilter.java:31)\n\tat
com.codegoogle.FilteredServlet$Chain.doFilter(Fi"");
    sb.append(""lteredServlet.java:131)\n\tat
com.codegoogle.gson.di.guice.GuiceFilter.doFil"");
    sb.append(""ter(GuiceFilter.java:419)\n\tat
com.codegoogle.FilteredServlet$Chain.doFilter(Fil"");
    sb.append(""teredServlet.java:13)\n\tat
com.codegoogle.FilteredServlet.service(FilteredServ"");
    sb.append(""let.java:103)\n\tat
com.codegoogle.HttpConnection.runServlet(HttpConnection.java"");
    sb.append("":65)\n\tat
com.codegoogle.HttpConnection.run(HttpConnection.java:275)\n\tat com"");

sb.append("".codegoogle.parser.DispatchQueue$WorkerThread.run(DispatchQueue.java:
3139)\n"");

    String initialStackTrace = sb.toString();
    for (int i = 1; i < 18; ++i) {
      sb.append(initialStackTrace);
    }
    String stackTrace = sb.toString();
    System.out.println(""length at which Gson causes stack overflow errors: "" +
stackTrace.length());
    String json = ""{\""message\"":\""Instrument 10 not found.\"",""
      + ""\""stackTrace\"":\"""" + stackTrace + ""\""}"";
    ExceptionHolder target = gson.fromJson(json, ExceptionHolder.class);
    assertTrue(target.message.contains(""Instrument""));
    assertTrue(target.stackTrace.contains(""DispatchQueue""));
  }
```

Original comment by `inder123` on 17 Jul 2008 at 12:41
 =||= ```
r116 includes a test that can reproduce this bug.
```

Original comment by `inder123` on 17 Jul 2008 at 8:18
 =||= ```
Fixed in r117
```

Original comment by `inder123` on 17 Jul 2008 at 8:52
- Changed state: **Fixed**
 =||= ```
This is a duplicate of Issue 47
http://code.google.com/p/google-gson/issues/detail?id=47
```

Original comment by `inder123` on 14 Oct 2008 at 9:44
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
20Gson should limit the allowed recursion depthGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:46 PM"```
(reported by Meder) While parsing untrusted JSON, or even during attempting
to serialize classes, Gson should consider limiting the maximum allowed
depth for recursion. There should also be an option in GsonBuilder to set a
different value.
```

Original issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:43""Original comment by `inder123` on 8 Jul 2008 at 5:44
 =||= ```
This bug is similar to issue 19 which is fixed in r118, r117, and r116. 
However, I
will leave it open for now to see if we need to provide explicit option to set
recursion depth. One problem is how does anyone know what a good value for the 
depth is? 
```

Original comment by `inder123` on 19 Jul 2008 at 1:09
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= Original comment by `inder123` on 1 Oct 2009 at 3:59
- Added labels: **Milestone-Release1.5**
 =||= ```
[deleted comment]
```
 =||= ```
I agree to add param dept, It does not work fine when I use Hibernate

```

Original comment by `weit...@263.net` on 22 Dec 2009 at 8:04
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:28
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:25
- Added labels: **Milestone-Undefined**
 =||= ```
Why is this needed?
```

Original comment by `michael.hixson@gmail.com` on 19 Apr 2011 at 6:54
 =||= ```
I say that recursion should not be used for parsing at all, queues should be 
used instead to avoid code recursion all together.

```

Original comment by `pawel.ve...@gmail.com` on 17 Dec 2011 at 2:25
 =||= ```
We don't recurse in the streaming parser.
```

Original comment by `limpbizkit` on 23 Dec 2011 at 5:35
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
21Support Readers and Writers for GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:49 PM"```
To support streaming input/output it should be possible to invoke toJson
with a writer, and fromJson with a Reader. 
```

Original issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:46""Original comment by `inder123` on 8 Jul 2008 at 5:46
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `joel.leitch@gmail.com` on 19 Jul 2008 at 8:45
 =||= ```
Fixed in r143 
We still need to write tests for this feature though.
```

Original comment by `inder123` on 12 Aug 2008 at 12:47
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
22GsonBuilder.prettyPrint causes extra element when serializer returns JsonArrayGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:50 PM"```
What steps will reproduce the problem?
1. Run the attached unit test

What is the expected output? What do you see instead?
 was expecting ""[1,2,3,4,5]"" and got ""[,1,2,3,4,5]""

What version of the product are you using? On what operating system?
 GSON 1.1.1, Windows XP, Java 1.6.0_04

Please provide any additional information below.
 If I don't call setPrettyPrint, the unit test passes.  (Sorry if this
report came in twice, Google barfed the first time I tried to submit it)

```

Original issue reported on code.google.com by `ericmu...@gmail.com` on 23 Jul 2008 at 8:30

Attachments:
- [GsonBuilderPrettyPrintArrayTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-22/comment-0/GsonBuilderPrettyPrintArrayTest.java)""```
We will fix this in our next release. Thanks for reporting this bug. 
```

Original comment by `inder123` on 24 Jul 2008 at 1:20
- Changed state: **Accepted**
 =||= Original comment by `joel.leitch@gmail.com` on 26 Jul 2008 at 4:51
 =||= ```
Fix was submitted in r122.
```

Original comment by `joel.leitch@gmail.com` on 26 Jul 2008 at 5:24
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
23Gson fails to parse strings with chinese charactersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:51 PM"```
Gson fails to parse: 

{""name"": ""好"", ""code"": ""aa"", ""remark"": ""aa""}

gson.fromJson(jsonString, TbDepartment.class);

的时候出现异常 Failed parsing JSON source: {""name"": ""好"", ""code"": ""aa"",
""remark"": ""aa""} to Json 

See:
http://groups.google.com/group/google-gson/browse_thread/thread/588a87b9ef1fc479
```

Original issue reported on code.google.com by `inder123` on 29 Jul 2008 at 12:28""```
Added a test to reproduce this bug in r131. Seems like our parser does not 
handle
unicode strings properly.
```

Original comment by `inder123` on 5 Aug 2008 at 10:14
- Changed state: **Accepted**
 =||= ```
r134 has some additional tests some of which pass. One thing to note is that 
Gson
will serialize a string with chinese characters correctly, by converting them to
escaped unicode. It would probably be better to convert these to unescaped 
unicode,
but at least it is valid Json.
```

Original comment by `inder123` on 7 Aug 2008 at 11:54
 =||= ```
Fixed in r138 by enabling hte parser to treat all input as unicode strings. This
works because we are feeding java strings to the parser, and java strings are 
always
unicode.
```

Original comment by `inder123` on 8 Aug 2008 at 2:04
- Changed state: **Fixed**
 =||= ```
Issue 80 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 12 Dec 2008 at 9:38
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
24Gson should support serialization of nullsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:52 PM"```
See:
http://groups.google.com/group/google-gson/browse_thread/thread/48a2ce8b9cc2d7ee

We should consider supporting a GsonBuilder mode to send out nulls as well. 
```

Original issue reported on code.google.com by `inder123` on 29 Jul 2008 at 12:30""```
Fixed in r126 by providing a GsonBuilder.serializeNulls() option. I also added 
a new
class JsonNull that is used to represent a JsonNull value for use by custom 
serializers. 
```

Original comment by `inder123` on 31 Jul 2008 at 1:51
- Changed state: **Fixed**
 =||= ```
Added a test for custom serialization using JsonNull in r127
```

Original comment by `inder123` on 31 Jul 2008 at 2:02
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
25java.lang.IllegalArgumentException when giving a double in place of a StringGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:53 PM"```
What steps will reproduce the problem?

Try to parse {""version"": 1.0} into class A { String version; }

What is the expected output? What do you see instead?

I expect a JsonParsingException, but instead get:

java.lang.IllegalArgumentException: Can not adapt type class java.lang.Double 
to class 
java.lang.String
    at com.google.gson.PrimitiveTypeAdapter.adaptType(PrimitiveTypeAdapter.java:64)
    at com.google.gson.TypeAdapterNotRequired.adaptType(TypeAdapterNotRequired.java:51)
    at 
com.google.gson.JsonObjectDeserializationVisitor.visitPrimitiveField(JsonObjectD
eserializationVis
itor.java:131)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:177)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)
    at 
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextD
efault.java:75)
    at 
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefaul
t.java:47)
    at com.google.gson.Gson.fromJson(Gson.java:326)
    at com.google.gson.Gson.fromJson(Gson.java:299)

What version of the product are you using? On what operating system?
v1_1 on Linux

Please provide any additional information below.


```

Original issue reported on code.google.com by `ch...@gmail.com` on 29 Jul 2008 at 10:21""Original comment by `joel.leitch@gmail.com` on 30 Jul 2008 at 11:55
- Changed state: **Accepted**
 =||= ```
Fixed in r125.  Expected to roll out with Release 1.2.
```

Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:49
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
26Map serialization failsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:54 PM"```
What steps will reproduce the problem?
1. new Gson().toJson(new HashMap<String, String>());

What is the expected output?
{}

What do you see instead?
Fails with the attached exception.

What version of the product are you using? On what operating system?
gson 1.1.1
JDK 1.5, JDK 1.6

Please provide any additional information below.


```

Original issue reported on code.google.com by `cedric.v...@gmail.com` on 30 Jul 2008 at 9:57

Attachments:
- [ParameterizedTypeClassCastException.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-26/comment-0/ParameterizedTypeClassCastException.txt)""Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 12:59
- Changed state: **Accepted**
 =||= ```
You need to handle top-level ""Parameterized"" types differently than Class 
objects.

Due to ""Type Erasure"" in the Java language, when you pass in a instance of the 
""Map""
object, all generic information is lost.  To get around this problem, we 
overloaded
the toJson method to take a ""Type"" parameter.

Here is an example:

import com.google.gson.reflect.TypeToken;

public class TopLevelMapExample {
  public static void main(String[] args) {
    Type mapType = new TypeToken<Map<String, String>>() {}.getType();
    String json = new Gson().toJson(new HashMap<String, String>(), mapType);
    System.out.println(json);
  }
}

----

I am updating the code to throw an IllegalArgumentException with a very 
descriptive
message.
```

Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 7:25
- Changed state: **Invalid**
 =||= ```
r128 changed the code to raise a IllegalArgumentException instead.
```

Original comment by `joel.leitch@gmail.com` on 31 Jul 2008 at 7:57
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
27Update DocumentationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:55 PM"```
Update the ""User Guide"" to reflect the new features that have been added to
GSON since its initial launch.

Here is a list of some of the features:
- Field Naming Policy including the new ""SerializedName"" annotation
- Null Field Support (coming in 1.2)
- Reader and Writer support (coming in 1.2)

```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 31 Jul 2008 at 1:08""```
I'm closing out some obsolete bugs.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:25
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
28Should support SAX like function?Google Code ExporterGoogleCodeExporter03/19/15, 06:21:56 PM"```
Sometime, I need parse huge json input or I need customize the pasre
process. Having SAX stream API is going to be very helpful.
```

Original issue reported on code.google.com by `jiming...@gmail.com` on 4 Aug 2008 at 3:01""```
Would this be served by providing a hook to plug-in a different JSON parser? 

Can you give us some concrete examples of where this will be useful? You can use
custom serializer/deserializers to do the customized handling anyway. But you 
are
right, our parser creates the parse tree first, so can choke on very large 
input. 
```

Original comment by `inder123` on 4 Aug 2008 at 6:44
 =||= ```
http://www.cowtowncoder.com/hatchery/jackson/index.html

I am using JSON-lib and looking for a better one. I myself like upper lib so far
since it supply a Streaming API which allows to process huge data. But then I 
found
your lib, which is also a nice one expect do not support Streaming API. I think 
which
would be a highlight if you can add it in.

When I said customize the parsing, I mean you could supply event like SAX do, 
so I
can create new instance or set value according to the events. 

I do not how to do these because I do not know parsing algorithm. But I wish to
supply some idea to make gson better.

Thanks,

Jiming




```

Original comment by `jiming...@gmail.com` on 5 Aug 2008 at 3:09
 =||= ```
We thought more about it, and it seems that this is worth doing since it will 
enable
Gson to process really large documents. We will essentially have to rewrite our
parser to either support SAX (event based) or StAX (Streaming based) parsing. 
This
can probably be done by modifying our JavaCC grammar itself. This is a major
undertaking, but we will consider this for one of our major releases. 
```

Original comment by `inder123` on 5 Aug 2008 at 6:12
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Great to hear that!

Thanks and looking forward to that.

Jiming
```

Original comment by `jiming...@gmail.com` on 6 Aug 2008 at 2:19
 =||= ```
Just a suggestion: make it ""pull"" variety (~= stax), since it is trivial to 
invert
Stax to produce SAX-like events (so ""SAX"" part can build on lower-level ""Stax"" 
part).
The reverse is not generally possible without multi-threading (or language 
support
for co-procedures/closures).

```

Original comment by `tsaloranta@gmail.com` on 11 Aug 2008 at 10:30
 =||= ```
Hi I just ran into this issue as well.  Any timeline for when issue 28 will be 
addressed?
```

Original comment by `toddwe...@gmail.com` on 21 Nov 2008 at 4:56
 =||= ```
Well, I looked into rewriting our JavaCC parser to be a SAX or pull-based one, 
and 
was not terribly successful. At this time, we have put this on hold. If someone 
can 
point us to a third-party SAX/pull parser that we can adapt, we will consider 
using 
it. Or better, help us write one. 

This will likely have an impact on the backward compatibility. However, that is 
something we can carefully weigh on.
```

Original comment by `inder123` on 22 Nov 2008 at 2:15
 =||= ```
We dont have SAX like functions, but Gson 1.4 adds a JsonParserAsync class that 
lets 
you parse multiple JSON objects on a stream. 

Overall, backwards compatibility is quite important for us, so I dont see us 
breaking 
that in favor of a SAX like parser (which is in general harder to use).
```

Original comment by `inder123` on 1 Oct 2009 at 4:01
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
29JSON does not seem to support the java.util.Date typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:58 PM"```
What steps will reproduce the problem?
Sample code:
Gson gson = new Gson();
Date test = new Date();
System.out.println(""Date is ""+gson.toJson(test));

What is the expected output? What do you see instead?
Expected output was a json string with current date. Instead
Date is {}      (an empty javascript object)

What version of the product are you using? On what operating system?
gson-1.1.1. Mac OS X, JDK 5

Please provide any additional information below.
I modified my code to pass dates as Strings. But this is not elegant.


```

Original issue reported on code.google.com by `kkape...@gmail.com` on 5 Aug 2008 at 4:30""```

We plan to add a Default Date/Time serialization/deserialization in version 
1.2.  The
tricky thing about this feature is that we do not know the format that the 
client
supports.  If the system using the GSON library passes these JSON serialized 
object
back and forth and serializing/deserializing on both ends then its a non-issue 
for
which format is supported; however, if you used the serialized version for 
display
purposes then the date format matters.

For the time being, you can register the following Type Adapter:

/**
 * A default type adapter for a {@link Date} object.
 *
 * @author Joel Leitch
 */
public class DateTypeAdapter implements JsonSerializer<Date>, 
JsonDeserializer<Date> {

  private final DateFormat format = DateFormat.getInstance();

  public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext
context) {
    String dateFormatAsString = format.format(src);
    return new JsonPrimitive(dateFormatAsString);
  }

  public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext
context)
      throws JsonParseException {
    if (!(json instanceof JsonPrimitive)) {
      throw new JsonParseException(""The date should be a string value"");
    }

    try {
      return format.parse(json.getAsString());
    } catch (ParseException e) {
      throw new JsonParseException(e);
    }
  }
}


// Create a GSON instance that can serialize/deserialize ""java.util.Date"" 
objects
Gson gson = new GsonBuilder()
    .registerTypeAdapter(new DateTypeAdapter())
    .create();
```

Original comment by `joel.leitch@gmail.com` on 5 Aug 2008 at 6:41
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Submitted the type adapter to support this feature (r130).  Still need to 
update the
GsonBuilder class to make the Date TypeAdapter configurable without requiring 
the
adapter to be registered.
```

Original comment by `joel.leitch@gmail.com` on 5 Aug 2008 at 7:30
 =||= ```
The change r145 contains the last piece of code required to close off this bug. 
Removed the DateTypeAdapter from the public API so that it can only be 
configured via
the GsonBuilder.
```

Original comment by `joel.leitch@gmail.com` on 13 Aug 2008 at 8:28
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
30Using excludeFieldsWithoutExposeAnnotation can write empty objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:21:59 PM"```
What steps will reproduce the problem?
1. Build a Gson object using GsonBuilder.excludeFieldsWithoutExposeAnnotation()
2. Annotate a class variable with @Expose
3. Write an instance of the class with the variable that was exposed null

What is the expected output? What do you see instead?
I expected to see nothing written for that object, since it should be
empty, instead, I see an empty object.

What version of the product are you using? On what operating system?
1.1.1

Please provide any additional information below.
I have attached a unit test that demonstrates this issue.

```

Original issue reported on code.google.com by `ericmu...@gmail.com` on 6 Aug 2008 at 6:16

Attachments:
- [ExcludeFieldsWithoutAnnotationTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-30/comment-0/ExcludeFieldsWithoutAnnotationTest.java)""```
This issue is discussed in the following thread: 

http://groups.google.com/group/google-gson/browse_thread/thread/a9933f2ea9d43ad5
?hl=en
```

Original comment by `inder123` on 7 Aug 2008 at 5:22
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
As per the conclusion in the discussion thread, we will not be supporting this
features since it alters the semantics of a list. 
```

Original comment by `inder123` on 8 Aug 2008 at 6:22
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
31Given sample does not workGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:01 PM"```
When I include the given sample in my sourcecode I get an exception:

...
  class BagOfPrimitives {
    private int value1 = 1;
    private String value2 = ""abc"";
    private transient int value3 = 3;
  }
...
    BagOfPrimitives obj = new BagOfPrimitives();
    Gson gson = new Gson();
    String json = gson.toJson(obj); 
    // this throws an exception
    BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);  

Exception:

Exception in thread ""AWT-EventQueue-0"" java.lang.RuntimeException: No-args
constructor for class InteropManager$BagOfPrimitives does not exist.
Register an InstanceCreator with Gson for this type to fix this problem.
    at
com.google.gson.MappedObjectConstructor.constructWithNoArgConstructor(MappedObje
ctConstructor.java:66)
    at
com.google.gson.MappedObjectConstructor.construct(MappedObjectConstructor.java:5
5)
    at
com.google.gson.JsonObjectDeserializationVisitor.<init>(JsonObjectDeserializatio
nVisitor.java:39)
    at
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:70)
    at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:47)
    at com.google.gson.Gson.fromJson(Gson.java:326)
    at com.google.gson.Gson.fromJson(Gson.java:299)
    at InteropManager.getAObject(InteropManager.java:90)
    at MainForm.button1ActionPerformed(MainForm.java:49)
    at MainForm.access$3(MainForm.java:48)
    at MainForm$5.actionPerformed(MainForm.java:236)
    at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
    at javax.swing.AbstractButton$Handler.actionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
    at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
    at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(Unknown Source)
    at java.awt.Component.processMouseEvent(Unknown Source)
    at javax.swing.JComponent.processMouseEvent(Unknown Source)
    at java.awt.Component.processEvent(Unknown Source)
    at java.awt.Container.processEvent(Unknown Source)
    at java.awt.Component.dispatchEventImpl(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
    at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
    at java.awt.Container.dispatchEventImpl(Unknown Source)
    at java.awt.Window.dispatchEventImpl(Unknown Source)
    at java.awt.Component.dispatchEvent(Unknown Source)
    at java.awt.EventQueue.dispatchEvent(Unknown Source)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
    at java.awt.EventDispatchThread.run(Unknown Source)

version: gson-1.1.1.jar
environment: eclipse 3.3.2
```

Original issue reported on code.google.com by `tick...@googlemail.com` on 11 Aug 2008 at 9:14""```
Gson is telling you what the error is, and possible solutions: your class
BagOfPrimitives needs to have a no-args constructor. If you can not provide 
such a
thing, then you need to register an InstanceCreator that can construct 
instances of
BagOfPrimitives when Gson needs them. 

But you bring up a good point, we should improve the example to include a 
no-args
constructor. I will do so. 
```

Original comment by `inder123` on 11 Aug 2008 at 11:56
- Changed state: **Accepted**
 =||= ```
Fixed the document at http://sites.google.com/site/gson/gson-user-guide
```

Original comment by `inder123` on 11 Aug 2008 at 11:58
- Changed state: **Fixed**
 =||= Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 4:44
- Added labels: **Type-Other**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
32Read and write log files where each entry is in JSON formatGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:02 PM"```
Perhaps Gson would be useful for reading and writing logs where each entry
is in JSON format?

I haven't looked closely, but it appears that Gson won't emit a newline
when serializing to a file.  If this is something that Gson could
guarantee, then we could use newlines as record separators and make each
log entry a JSON object, and also use GSon to iterate over a log file and
deserialize each line into an object.

```

Original issue reported on code.google.com by `bslesinsky` on 15 Aug 2008 at 3:39""```
Yes, by default, Gson uses compact formatting, eliminating all white-space so it
should never write a new line. 

```

Original comment by `inder123` on 15 Aug 2008 at 6:10
 =||= ```
Closing the bug since this was a question, not an issue. The best place to post 
such
questions is the Google group for Gson, 
http://groups.google.com/group/google-gson
```

Original comment by `inder123` on 15 Aug 2008 at 6:12
- Changed state: **Invalid**
 =||= ```
Okay, but I think there is an issue: it's not documented that toJson() will 
return a
String in compact formatting.  Also, I don't think there's a formal definition 
of
what compact formatting means.

```

Original comment by `bslesinsky` on 15 Aug 2008 at 4:01
 =||= ```
That is a good point, and we need to explain all the default settings used by 
Gson. I
have added it in r157 to the javadoc for the default constructor of Gson(). 
```

Original comment by `inder123` on 15 Aug 2008 at 7:55
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
33Provide some benchmarking resultsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:04 PM"```
We should implement some benchmarking to ensure that with each release we
are not degrading on performance.  Maybe we should start with the next
release (i.e. 1.2) as the base benchmark.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 17 Aug 2008 at 12:29""```
I ran a quick&dirty benchmark comparing Jackson, JsonReader, Gson, and 
Gson+JsonReader:
http://microbenchmarks.appspot.com/run/limpbizkit@gmail.com/twitter.JsonBenchmar
k/411002

Each library was tested 2x; once doing parsing only and a second time doing 
parse+binding.
```

Original comment by `jessewil...@google.com` on 20 Aug 2010 at 5:08
 =||= ```
The attached patch is 5% faster on some datasets but 30% slower on another. I'm 
not committing it, but I'm saving it here in case we ever want to revisit.

                             TWEETS                              
        api          run  us linear runtime                    % 
GSON_STREAM   Gson 2.1 a 532 ============================== 100% 
GSON_STREAM char-by-char 507 ============================    95% 

                             READER_SHORT                        
        api          run  us linear runtime                    % 
GSON_STREAM   Gson 2.1 a 114 ============================== 100% 
GSON_STREAM char-by-char 107 ============================    94% 

                              READER_LONG                         
        api          run   ms linear runtime                    % 
GSON_STREAM   Gson 2.1 a 1.05 =======================        100% 
GSON_STREAM char-by-char 1.36 ============================== 130% 
```

Original comment by `limpbizkit` on 27 Dec 2011 at 7:05

Attachments:
- [character-by-character.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-33/comment-2/character-by-character.patch)
 =||= ```
https://sites.google.com/site/gson/gson-performance
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:33
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
34Add support for java.math.BigDecimalGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:05 PM"```
JsonPrimitive provides support to get values as double through
getAsDouble(). However, to support higher precision (for example, while
dealing with money objects), it should also provide support for BigDecimal. 
```

Original issue reported on code.google.com by `inder123` on 18 Aug 2008 at 8:47""```
We should add support ""BigInteger"" as well.
```

Original comment by `joel.leitch@gmail.com` on 19 Aug 2008 at 2:32
 =||= ```
Fixed in r176
```

Original comment by `inder123` on 21 Aug 2008 at 11:56
- Changed state: **Fixed**
 =||= ```
Gson does not properly handle small values of BigDecimal and BigInteger during
deserialization.
```

Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:44
- Changed state: **Accepted**
 =||= ```
NOTE: r180 exposes this bug.
```

Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:45
 =||= ```
Fixed after r181.
```

Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 2:56
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
35Gson should support Parameterized types with variable types as parametersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:07 PM"```
If a field is of wild-card type, Gson should be able to handle it. 

class Foo<? extends Number> {
}

Class Bar {
  Foo<Integer> foo;
} 

should serialize and deserialize correctly.
```

Original issue reported on code.google.com by `inder123` on 21 Aug 2008 at 7:50""```
We also need to handle the following:

public class B<T> {
  List<T> list;
  List<T>[] arrayList;
}

NOTE: I've added some tests that are currently failing, but should pass once 
this is
supported.
```

Original comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:38
 =||= Original comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:39
- Changed title: **Gson should support Wildcard types and Parameterized types with with variable types as parameters**
 =||= Original comment by `joel.leitch@gmail.com` on 25 Aug 2008 at 3:40
- Changed title: **Gson should support Wildcard types and Parameterized types with variable types as parameters**
 =||= ```
The supporting code is in r211.  With this change, an instance of class B above 
can
be serialized/deserialized properly.

- Added support for ParameterizedTypes where at least one type parameter is a
TypeVariable.
- Added support for GenericArrayTypes where the ParameterizedType has a
""TypeVariable"" as one of its type parameters.

Marking this issue as fixed and will reopen another issue for the Wildcard 
types.
```

Original comment by `joel.leitch@gmail.com` on 28 Aug 2008 at 7:55
- Changed title: **Gson should support Parameterized types with variable types as parameters**
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
36Exception Handling for Custom SerializersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:08 PM"```
We should add some exception handling around the ""custom"" type adapters to
ensure that all exceptions that are propagated out from the ""toJson"" and
""fromJson"" are JsonParseException.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 22 Aug 2008 at 6:09""Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 7:28
- Changed state: **Accepted**
 =||= ```
Fixed with r190.
```

Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 9:50
 =||= Original comment by `joel.leitch@gmail.com` on 22 Aug 2008 at 9:50
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
37http://groups.google.com/group/google-gson/t/677d56e9976d7761Google Code ExporterGoogleCodeExporter03/19/15, 06:22:10 PM"```
Hi, guys!

I was thinking of the problem and have concluded, that the solution of the
issue (see link
http://groups.google.com/group/google-gson/t/677d56e9976d7761):
JsonObjectDeserializationVisitor should check if there is custom
deserializer registered for specified type and not create instance by.

  Something like this:

  @SuppressWarnings(""unchecked"")
  JsonObjectDeserializationVisitor(JsonElement json, Type type,
      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,
      TypeAdapter typeAdapter,
ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,
      JsonDeserializationContext context) {
    super(json, factory, objectConstructor, typeAdapter, deserializers,
context);
    JsonDeserializer deserialezer;
    if ((deserialezer = deserializers.getHandlerFor(type)) != null) {
      this.target = deserialezer.deserialize(json, type, context);
    } else {
      this.target = (T) objectConstructor.construct(type);
    }
  }


```

Original issue reported on code.google.com by `tazija@gmail.com` on 27 Aug 2008 at 7:57""```
To verify the functionality that you want, I wrote a test in r209.

Surprisingly, the test passes already, so I dont know what problem you are 
running
into. Can you look at r209 and let me know if it does what you want? If not, how
should I modify the test? Also, feel free to suggest additional tests. 
```

Original comment by `inder123` on 28 Aug 2008 at 4:21
 =||= ```
I think I fixed the issue that you raise by changing the object construction to 
be a
lazy operation. This way it will done only if really needed. 

See r210 for the details of the fix.
```

Original comment by `inder123` on 28 Aug 2008 at 5:59
- Changed state: **Fixed**
 =||= ```
Thanks for your fix. It solves the problem.

Just FYI, there is difference that allows you to get your test running (before 
fixes
where applied): I have FilterCondition class marked ABSTRACT (because only its 
two
potential subclasses - ComplexCondition and BinaryCondition can be instantiated)
while your Base class is a CONCRETE type.
```

Original comment by `tazija@gmail.com` on 2 Sep 2008 at 5:04
 =||= ```
Reopening this bug as it seems like we still need to register a 
""InstanceCreator""
even though a customer deserializer is registered.
```

Original comment by `joel.leitch@gmail.com` on 9 Oct 2008 at 9:10
- Changed state: **Accepted**
 =||= ```
After the original fix, this bug was reopened and was a duplicate to Issue 69.

Remarking as fixed since issue 69 is now fixed.
```

Original comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:39
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
38"Gson should handle top-level ""null""s for deserialization"Google Code ExporterGoogleCodeExporter03/19/15, 06:22:12 PM"```
Gson fails with a ""parse"" exception if the JSON string ""null"" is passed in.
 This should just set the expected type to ""null"".

See NullObjectAndFieldTest#testTopLevelNullDeserialization() test.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 28 Aug 2008 at 7:12""```
Fixed in r219
```

Original comment by `inder123` on 29 Aug 2008 at 6:04
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
39Gson should support Wildcard types Google Code ExporterGoogleCodeExporter03/19/15, 06:22:13 PM"```
We should add support for Wildcard fields where it is ""extending"" some
object.  For example:

public class Foo {
  private static final List<? extends Number> EMPTY_LIST = Collections.
  private final List<? extends Number> listOfNumbers;

  public Foo() {
    this(null);
  }

  public Foo(List<? extends Number> list) {
    this.listOfNumbers = list;
  }
}
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 28 Aug 2008 at 8:14""```
Wildcard support added in r218.
```

Original comment by `joel.leitch@gmail.com` on 29 Aug 2008 at 5:44
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
40Fails to serialize/deserialize a class where a super-class has a type parameterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:14 PM"```
Unfortunately, shortly after the Gson 1.2 release, I found a bug in the
TypeVariable support.  Basically, the following class can not be serialized
or deserialized using Gson:

public class Foo<T> {
  private final T someField;

  public Foo(T value) {
    this.someField = value;
  }

  public boolean equals(Object o) {
    if (!(o instanceof Foo)) {
      return false;
    } else {
        return someField.equals(((Foo)o).someField);
    }
  }
}

public class Bar extends Foo<Integer> {
  public Bar(Integer i) {
    super(i);
  }
}

Gson gson = new Gson();
Bar bar1 = new Bar(1);
String json = gson.toJson(bar1);   // Fails
Bar bar2 = gson.fromJson(""{\""someField\"":1"", Bar.class);    // Fails

assertEquals(bar1, bar2);

```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Aug 2008 at 11:53
- Merged into: #168""Original comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 1:28
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Why it is marked as enhancement while it seems to be the bug?
```

Original comment by `chere...@gmail.com` on 1 Apr 2009 at 5:19
 =||= ```
Deferred to a future release
```

Original comment by `inder123` on 1 Oct 2009 at 4:04
- Added labels: **Type-Defect**, **Milestone-Release1.5**
- Removed labels: **Type-Enhancement**
 =||= ```
FYI: Guice's TypeLiteral can do full type resolution. This could be adapted for 
use internally in GSON.
  http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/TypeLiteral.html
```

Original comment by `jessewil...@google.com` on 20 Aug 2010 at 5:10
 =||= ```
Here is a proposed patch for the issue (and associated unit test).

The modification was simply to add a recursive search on all parents super 
classes until the declairing class was found. Then do it again util we end up 
with something that is not a ""TypeVariable<?>"" (This is done so complex 
hierarchies can work).

Can someone with commit privilege review and approve/reject ?

Thank you.
```

Original comment by `alexandr...@gmail.com` on 13 Oct 2010 at 3:14

Attachments:
- [Issue40-proposedFix.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-40/comment-5/Issue40-proposedFix.patch)
 =||= ```
Thanks for the patch. Adding it as part of the Gson 1.6 release which is set to 
release this coming Friday.
```

Original comment by `joel.leitch@gmail.com` on 2 Nov 2010 at 3:31
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:01
- Removed labels: **Milestone-Release1.5**
 =||= ```
We're planning on fixing this in 1.7.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:20
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
41Less strict parsing to make it easier to switch to gson?Google Code ExporterGoogleCodeExporter03/19/15, 06:22:16 PM"```
gson appears to require all the elements to be strictly quoted. e.g. it
wants the format: { ""hello"": ""world"" }. Some other libraries like
net.sf.json and org.json are more relaxed and will also accept { hello:
""world"" } but gson doesn't seem to accept this.

For example, the json.org api doc says: ""Strings do not need to be quoted
at all if they do not begin with a quote or single quote, and if they do
not contain leading or trailing spaces, and if they do not contain any of
these characters: { } [ ] / \ : , = ; # and if they do not look like
numbers and if they are not the reserved words true, false, or null.""

http://www.json.org/javadoc/org/json/JSONObject.html

It's arguable whether this behaviour is sensible / in spec, but to switch
to gson from my current library I'll have to change all my unit tests,
notify everyone who interacts with me that they may have to review / change
their JSON formatting etc etc. and cope with any resulting breakages.

Could more relaxed parsing behaviour be made an option maybe via an
alternate javacc parser?

```

Original issue reported on code.google.com by `msmith99...@gmail.com` on 8 Sep 2008 at 1:05""```
This seems like a reasonable request.  According to the JSON specification, 
string
values should be quoted.

We will add an options on the Gson Builder to allow for ""lenient"" parsing; 
however,
all objects that get serialized by Gson (or your outgoing responses) will have 
quoted
string.  My gut instinct is that this should be fine since it abides by the JSON
spec, but I just wanted to make you aware that if you are currently returning 
JSON
responses with unquoted string then this may break your clients.

We will aim to get this into the 1.2.1 release which is slotted for early 
October.
```

Original comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:30
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:30
- Changed state: **Accepted**
 =||= ```
Thanks for your response. I think generating strings with quotes is fine. I was
worried about handling requests from people with other libraries. 

I agree that this new behaviour should be optional.

```

Original comment by `msmith99...@gmail.com` on 16 Oct 2008 at 4:55
 =||= ```
I am not clear about how it is even supposed to parse. If there are no quotes, 
what 
is the delimiter indicating end of a string?

Can someone point me to a library that handles unquoted strings?
```

Original comment by `inder123` on 16 Oct 2008 at 5:09
 =||= ```
Ah I see that the request is being made for the field names, not values. There 
it 
makes a little more sense. 

Can the header names have arbitrary string values? Can they contain the ':' 
character 
? Can they contain the white space? 


```

Original comment by `inder123` on 17 Oct 2008 at 10:27
 =||= ```
The initial post included a link to the javadoc for a library that supports 
this.

The values need to be quoted if they contain the characters you describe or are
reserved words etc. Additional rules as listed here:

http://www.json.org/javadoc/org/json/JSONObject.html

```

Original comment by `msmith99...@gmail.com` on 21 Oct 2008 at 3:44
 =||= ```
A slight variation on this is allowing *any* value that the parser otherwise
recognizes to be assigned to a String. In particular, I would like to see

{ ""foo"": 1}

be compatible with

class bar {
    String foo;
    };

Now, you get a gson exception stating in effect that a java.lang.Integer can't 
be
assigned to a java.lang String. But I thought *all* java objects had a 
toString()
function that could be used for the conversion? (Might be wrong on this in 
general,
but it is certainly true for Integer, Boolean, etc.)

The motivation for this, among other things, is that when you're first 
exploring a
new JSON source, you can declare everything to be a String, see what you get, 
then
make adjustments either in class declarations or in processing logic.

I suppose you could declare everything to be an Object and see what you get, 
but I
haven't (yet!) tried this and don't know how it works.

Thanks in advance,

Jim Renkel
```

Original comment by `james.re...@gmail.com` on 22 Oct 2008 at 4:14
 =||= Original comment by `joel.leitch@gmail.com` on 25 Nov 2008 at 6:58
 =||= ```
Added a test in r313
```

Original comment by `inder123` on 26 Nov 2008 at 6:27
 =||= ```
Fixed in r314
```

Original comment by `inder123` on 26 Nov 2008 at 6:27
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
42"provide a feature to protect against remote ""script src"" inclusion of Gson output "Google Code ExporterGoogleCodeExporter03/19/15, 06:22:19 PM"```
would it be possible to provide a feature which would prepend a string
(e.g. ""while(1);"") in front of the JSON output on the server-side and have
client-side library remove that string before deserializing, to prevent 3rd
party sites from <script src'ing the output. 
```

Original issue reported on code.google.com by `mede...@gmail.com` on 8 Sep 2008 at 6:46""```
it would be great to have some central way of enabling it for all GSON objects 
in a
given app
```

Original comment by `mede...@gmail.com` on 8 Sep 2008 at 6:53
 =||= ```
instead of while(1); can we use the following prefix:
)]}'
<data>

please notice the newline character after '

thanks!
```

Original comment by `mede...@gmail.com` on 10 Sep 2008 at 8:25
 =||= ```
This is a great feature request.  Thanks for the suggestion.

I have added this to our roadmap for version 1.2.1 which is slotted for early 
October.
```

Original comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:39
- Changed state: **Accepted**
 =||= ```
Hi Joel, i was wondering what's the status with this?
```

Original comment by `mede...@gmail.com` on 17 Mar 2009 at 9:26
 =||= ```
Fixed in r397 by supporting a new GsonBuilder setting 
generateNonExecutableJson()
that prefixes the generated JSON with some )]}'\n<data> to make the output
non-executable javascript. Gson now recognizes this special text in the input 
while
parsing the JSON in fromJson and filters it out, if present.
```

Original comment by `inder123` on 17 Mar 2009 at 9:15
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:41
- Added labels: **Milestone-Release1.3**
 =||= ```
Is there a reason the NON_EXECUTABLE_PREFIX wasn't made configurable? I just 
submitted a request for it to be made configurable. 
https://code.google.com/p/google-gson/issues/detail?id=551
```

Original comment by `heath.bo...@gmail.com` on 17 Dec 2013 at 11:03
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
43Custom Serializers fail if the serializer context is used on the sourceGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:21 PM"```
Gson will fail to serialize a class ""Foo"" if you create a custom serializer
as follows:

public static class FooTypeAdapter implements JsonSerializer<Foo> {
  public JsonElement serialize(Foo src, Type typeOfSrc,
JsonSerializationContext context) {
    return context.serialize(src, typeOfSrc);
  }
}

Basically, it detects this as a circular reference.  Instead, we should
allow this kind of custom serializer because a client may want to perform
the default serialization of an object and then add new fields into the
JsonElement tree.

For example:
public static class FooTypeAdapter implements JsonSerializer<Foo> {
  public JsonElement serialize(Foo src, Type typeOfSrc,
JsonSerializationContext context) {
    JsonElement element = context.serialize(src, typeOfSrc);
    JsonObject jsonObject = element.getAsJsonObject();
    jsonObject.add(""someNewProperty"", new JsonPrimitive(1L));
    return jsonObject;
  }
}

```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:53""```
I could use that, too. Basically what's missing is some kind of 
serializeInternal()
method that ignores type adapters registered for this Type.
```

Original comment by `maik.sch...@gmail.com` on 20 Mar 2009 at 2:17
 =||= Original comment by `inder123` on 28 Mar 2009 at 5:58
- Added labels: **Milestone-Release1.4**
 =||= ```
I would absolutely love this feature as well.  See this thread for related 
discussion: 
http://groups.google.com/group/google-gson/browse_thread/thread/a87d5d47b83d0cbe
```

Original comment by `mbur...@gmail.com` on 17 Jul 2009 at 5:13
 =||= ```
deferred to a future release
```

Original comment by `inder123` on 29 Sep 2009 at 9:10
- Added labels: **Milestone-Release1.5**
- Removed labels: **Milestone-Release1.4**
 =||= ```
what about cloning the src object, serializing it using context and then do all 
the 
post-processing you want?
Didn't try this though, I'm just conjecturing....
```

Original comment by `polaretto@gmail.com` on 27 Apr 2010 at 4:04
 =||= ```
Was this actually fixed?  I'm not sure it is in 1.5, even though it is marked 
with the 1.5 milestone.

Relying on clone() is a really bad idea.
```

Original comment by `wendel.s...@gmail.com` on 26 Oct 2010 at 4:24
 =||= ```
I could use this feature too. I do not believed it was fixed in 1.5 or current 
trunk version.
```

Original comment by `fedorov....@gmail.com` on 31 Oct 2010 at 3:24
 =||= Original comment by `inder123` on 2 Nov 2010 at 11:59
- Removed labels: **Milestone-Release1.5**
 =||= ```
I experimented with this. We might be able to use the ancestors stack as a 
hint. Whenever a serializer+object pair exists on the ancestors stack, we 
should skip that serializer when recursively asked to serialize that object. 
We'll either eventually serialize it with a lower-level serializer, or we'll 
run out and we know we've hit a circular reference.
```

Original comment by `limpbizkit` on 9 Nov 2010 at 8:03
 =||= ```
I would think that context.defaultWriteObject() (eg similar to the java object 
serialization mechanism) would make a lot of sense.
```

Original comment by `swall...@gmail.com` on 21 Jan 2011 at 4:58
 =||= ```
You can do this in Gson 2.1 with TypeAdapterFactory and Gson.getNextAdapter.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:37
- Changed state: **WontFix**
 =||= ```
Issue 44 has been merged into this issue.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:50
 =||= ```
Does a Gson.getNextAdapter mechanism solve the following issue?

class Obj
...

class A extends Obj
   Obj subobject;
...

Now assume we have registered:

public class ObjSerializer implements JsonSerializer<Obj> {
  public JsonElement serialize(Obj obj, Type t, JSC jsc) {
    JsonObject json = new JsonObject();
    json.addProperty(""name"", obj.getClass());
    json.add(""value"", jsc.serialize(obj, t));
    return json;
  }
}

What ""should"" happen is that:

A a = new A();
...
gson.toJson(a);

should have a call sequence that looks like:

ObjSerializer.serialize(a, ...)
getNextAdapter().serialize(a, ...)
ObjSerializer.serialize(subobject, ...)
getNextAdapter().serialize(subobject, ...)

That is, can we both avoid infinite recursion while also respecting nested 
registered objects' serialize mechanisms? 
http://code.google.com/p/google-gson/issues/detail?id=43#c9 seems like it 
solves this problem, but 
http://code.google.com/p/google-gson/issues/detail?id=43#c11 doesn't seem to.
```

Original comment by `mint...@everlaw.com` on 6 Feb 2012 at 9:27
 =||= ```
Yeah, you want getNextAdapter. That API was hidden in Gson 2.1 because we 
weren't sure that name was right, but its there in SVN. I'll write up an 
example and post it here...
```

Original comment by `jessewil...@google.com` on 7 Feb 2012 at 3:21
 =||= ```
Here's a big example that demonstrates all of the moving parts of 
getNextAdapter. Drink maps to 'Obj' and MixedDrink maps to 'A' in your model. 
Note that we're using the new streaming TypeAdapter API and not the tree-based 
JsonSerializer/JsonDeserializer API. Only the new streaming API gives you 
access to the next type adapter in the chain.


package com.google.gson;

import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

public class GetNextAdapterExample {

    static class Drink {
        protected final String name;

        Drink(String name) {
            this.name = name;
        }

        @Override public String toString() {
            return name;
        }
    }

    static class MixedDrink extends Drink {
        private final Drink mix;
        private final String alcohol;

        MixedDrink(String name, Drink mix, String alcohol) {
            super(name);
            this.mix = mix;
            this.alcohol = alcohol;
        }

        @Override public String toString() {
            return name + "" ("" + mix + ""+"" + alcohol + "")"";
        }
    }

    public static void main(String[] args) {
        Drink orangeJuice = new Drink(""Orange Juice"");
        MixedDrink screwdriver = new MixedDrink(""Screwdriver"", orangeJuice, ""Vodka"");

        Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(new DrinkTypeAdapterFactory())
                .create();

        // exercise toJson
        System.out.println(gson.toJson(orangeJuice));
        System.out.println(gson.toJson(screwdriver));

        // exercise fromJson
        String s = ""{'name':'Orange Juice','virgin':true}"";
        String t = ""{'mix':{'name':'Orange Juice','virgin':true},'alcohol':'Vodka','name':'Screwdriver'}"";
        System.out.println(gson.fromJson(s, Drink.class));
        System.out.println(gson.fromJson(t, Drink.class));
    }

    static class DrinkTypeAdapterFactory implements TypeAdapterFactory {
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Drink.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Drink' and its subtypes
            }

            /*
             * Lookup type adapters to do the actual work. We use getNextAdapter
             * to avoid getting 'this' on the types that this factory supports.
             */
            final TypeAdapter<Drink> drinkAdapter
                    = gson.getNextAdapter(this, TypeToken.get(Drink.class));
            final TypeAdapter<MixedDrink> mixedDrinkAdapter
                    = gson.getNextAdapter(this, TypeToken.get(MixedDrink.class));

            /*
             * The JsonElement type adapter is always handy when we want to
             * tweak what our delegate type adapter created.
             */
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);

            /**
             * Now that we have some helpers, create the tweaked type adapter.
             */
            TypeAdapter<Drink> result = new TypeAdapter<Drink>() {
                @Override public void write(JsonWriter out, Drink value) throws IOException {
                    if (value instanceof MixedDrink) {
                        // write mixed drinks out normally
                        mixedDrinkAdapter.write(out, (MixedDrink) value);
                    } else {
                        /*
                         * Always add a 'virgin' attribute on non-mixed drinks.
                         * This takes three steps:
                         *  1. Get the delegate to serialize to a JsonObject,
                         *  2. Add our extra property to that JsonObject.
                         *  3. Serialize that to the stream.
                         */
                        JsonObject object = drinkAdapter.toJsonTree(value).getAsJsonObject();
                        object.add(""virgin"", new JsonPrimitive(true));
                        elementAdapter.write(out, object);
                    }
                }

                @Override public Drink read(JsonReader in) throws IOException {
                    /*
                     * Use the appropriate type adapter based on the contents
                     * of the stream.
                     */
                    JsonObject object = elementAdapter.read(in).getAsJsonObject();
                    if (object.has(""alcohol"")) {
                        return mixedDrinkAdapter.fromJsonTree(object);
                    } else {
                        return drinkAdapter.fromJsonTree(object);
                    }
                }
            }.nullSafe(); // so we don't have to check for null on the stream

            return (TypeAdapter<T>) result;
        }
    }
}

```

Original comment by `jessewil...@google.com` on 7 Feb 2012 at 4:55
 =||= ```
Two notes about the example from the previous comment:

1) You'll need at least GSon V2.2.
2) gson.getNextAdapter was renamed to gson.getDelegateAdapter
```

Original comment by `seble...@gmail.com` on 26 Nov 2012 at 3:07
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
44Custom Deserializers fail if the deserializer context is used on the source JsonElementGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:24 PM"```
Gson gets caught in infinite recursion if a client attempts to convert a
JSON string into a Java object of type Foo with the following
JsonDeserializer registered:

public static class FooTypeAdapter implements JsonDeserializer<Foo> {
  public Foo deserialize(JsonElement json, Type typeOfT,
JsonDeserializationContext context)
      throws JsonParseException {
    Foo fooObj = context.deserialize(json, typeOfT);
    fooObj.setExtraField(""ThisIsExtra"");
    return fooObj;
  }
}
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:58
- Merged into: #43""```
See the discussion at:
http://groups.google.com/group/google-gson/browse_thread/thread/196bc3a2798a3905
/5775ce74143d0194#5775ce74143d0194
```

Original comment by `joel.leitch@gmail.com` on 14 Sep 2008 at 8:09
 =||= ```
And this discussion: 
http://groups.google.com/group/google-gson/browse_thread/thread/a87d5d47b83d0cbe
Apologies for any excessive notification emails, I accidentally commented on 43 
(serializers) when I really 
intended to comment on 44 (deserializers)
```

Original comment by `mbur...@gmail.com` on 17 Jul 2009 at 5:15
 =||= ```
deferred to a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 9:10
- Added labels: **Milestone-Release1.5**
 =||= ```
Gosh, this sure would be nice to have.  It would simplify writing custom 
deserializers 
immensely.
```

Original comment by `mbur...@gmail.com` on 29 Sep 2009 at 9:26
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:01
- Removed labels: **Milestone-Release1.5**
 =||= ```
I would think that a context.defaultReadObject() similar to the java object 
input stream makes a lot of sense.
```

Original comment by `swall...@gmail.com` on 21 Jan 2011 at 4:59
 =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:50
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
45Serializing/Deserializing simple maps should be better supportedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:26 PM"```
Attempting to simply serialize a map results in fairly useless output:

// dead simple map
Map<String, Object> m = new ArrayOrderedMap<String, Object>();
m.put(""id"", 123);
m.put(""thing"", ""AZ"");

// serialize (annoyingly requires the typetoken thing)
String encoded = gson.toJson(data, new TypeToken<Map<String, Object>>()
{}.getType());

encoded = {""id"":{},""thing"":{}}

It should have been:
encoded = {""id"":123,""thing"":""AZ""}

This should really be able to handle the simple example of a map of
primitive/simple objects much better. The same type of thing happens when
attempting to read back in the data.

With a more realistic example it is even worse because another map placed
inside the first map results in an exception like so:
com.google.gson.JsonParseException: The JsonSerializer
com.google.gson.DefaultTypeAdapters$MapTypeAdapter@b27bb5 failed to
serialized object {name=aaron, date=Mon Sep 15 11:58:33 BST 2008, num=456,
array=[Ljava.lang.String;@fe3238} given the type class java.lang.Object
    at
com.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException
Wrapper.java:61)
    at
com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati
onVisitor.java:177)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)
    at
com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte
xtDefault.java:47)
    at
com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters
.java:301)
    at
com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters
.java:293)
    at
com.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException
Wrapper.java:48)
    at
com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati
onVisitor.java:177)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)
    at
com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte
xtDefault.java:47)
    at com.google.gson.Gson.toJson(Gson.java:272)
    at com.google.gson.Gson.toJson(Gson.java:228)
    at
org.sakaiproject.entitybroker.impl.EntityEncodingManager.encodeData(EntityEncodi
ngManager.java:586)
    at
org.sakaiproject.entitybroker.impl.EntityEncodingManagerTest.testEncode(EntityEn
codingManagerTest.java:243)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav
a:25)
    at java.lang.reflect.Method.invoke(Method.java:585)
    at junit.framework.TestCase.runTest(TestCase.java:154)
    at junit.framework.TestCase.runBare(TestCase.java:127)
    at junit.framework.TestResult$1.protect(TestResult.java:106)
    at junit.framework.TestResult.runProtected(TestResult.java:124)
    at junit.framework.TestResult.run(TestResult.java:109)
    at junit.framework.TestCase.run(TestCase.java:118)
    at junit.framework.TestSuite.runTest(TestSuite.java:208)
    at junit.framework.TestSuite.run(TestSuite.java:203)
    at
org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestR
eference.java:130)
    at
org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner
.java:460)
    at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner
.java:673)
    at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java
:386)
    at
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav
a:196)
Caused by: java.lang.IllegalArgumentException: Map objects need to be
parameterized unless you use a custom serializer. Use the
com.google.gson.reflect.TypeToken to extract the ParameterizedType.
    at com.google.gson.TypeInfoMap.<init>(TypeInfoMap.java:34)
    at
com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters
.java:298)
    at
com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters
.java:293)
    at
com.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException
Wrapper.java:48)
    ... 31 more



```

Original issue reported on code.google.com by `azeckoski` on 15 Sep 2008 at 11:00""```
Extra info on the deserializing:
json = {""id"":123,""thing"":""AZ""}

Map<String, Object> decoded = gson.fromJson(data, new TypeToken<Map<String,
Object>>() {}.getType());

produces a map with: {id=java.lang.Object@e6612c, thing=java.lang.Object@d704f0}
(seems to be instances of Object with no data)

```

Original comment by `azeckoski` on 15 Sep 2008 at 1:29
 =||= ```
First off, I'd like to start with some background information.  When you are 
defining
types (or local variables) that have type parameters, the JVM drops the actual 
type
parameters and associates everything as ""Object"".  This is known as ""type 
erasure"". 
In order for a Java Program to retrieve the actual type parameters at run-time, 
you
need to leverage the TypeToken object (this methodology was established by 
GUICE ---
see
http://google-guice.googlecode.com/svn/trunk/javadoc/com/google/inject/TypeLiter
al.html).

Originally, we implemented Gson so that it could ""serialize"" these kinds of 
objects
without requiring the use of TypeToken; however, deserializing it back into the 
real
object requires it since the JSON output has no type information in it.  As 
well,
with this approach, it meant you were serializing the ""real"" object which meant 
that
some fields on the real object would be added to the JSON output.  Therefore, 
if you
had a List<A> and added both A and B objects (i.e. B extends A) some objects 
would
expose extra fields in the output.  We decided to take the more explicit route 
and
force the client to provide us the type parameters of the top-level object that 
is
being serialized.

The common use of a Map or List is that you populate the List with the same 
object
types.  Passing in Object means that you can add any instance of a class that 
you
desire to the data structure.  I know there are exceptions to this best 
practice, but
we do not want to implement this corner case scenario.  Instead, if you really 
do
want to use a list of Objects, then do as the exception message says and write a
""custom"" (de)serializer (you can bind it specifically to a Map<String, Object> 
and
have the default Gson map serializer handle everything else).

As for a Map of Maps (i.e. Map<String, Map<String, Integer>>) this is already
supported and works well as long as you pass in the actual type object (i.e. new
TypeToken<Map<String, Map<String, Integer>>>() {}.getType())

Here's an example:
public static void main(String[] args) {
  Type mapType = new TypeToken<Map<String, Map<String, Integer>>>() {}.getType();
  Map<String, Map<String, Integer>> map = new HashMap<String, Map<String, Integer>>();
  Map<String, Integer> value1 = new HashMap<String, Integer>();
  value1.put(""lalala"", 78);
  value1.put(""haha"", 9999);
  map.put(""id"", value1);

  Map<String, Integer> value2 = new HashMap<String, Integer>();
  value2.put(""nahhd"", 121112);
  value2.put(""uuywss"", 19987);
  map.put(""thing"", value2);

  Map<String, Integer> value3 = new HashMap<String, Integer>();
  map.put(""other"", value3);

  Gson gson = new Gson();
  String json = gson.toJson(map, mapType);
  System.out.println(json);

  Map<String, Map<String, Integer>> deserializedMap = gson.fromJson(json, mapType);
  System.out.println(deserializedMap);
}

=========== OUTPUT ===========
{""thing"":456,""id"":123}
{""other"":{},""thing"":{""nahhd"":121112,""uuywss"":19987},""id"":{""lalala"":78,""haha"":999
9}}
{other={}, thing={nahhd=121112, uuywss=19987}, id={lalala=78, haha=9999}}


For now, I am closing this off as ""Working as Designed"".  Maybe I am not 
completely
following your issue and if that is the case, please start up a new discussion 
in our
Gson discussion group.

Thanks,
Joel
```

Original comment by `joel.leitch@gmail.com` on 16 Sep 2008 at 8:57
- Changed state: **Invalid**
 =||= ```
We solved our problem by using a different library but I wanted to put a 
comment here
anyway.

So what happens if I want to do this?
Map<String, Number>
or
Map<String, Serializable>

(it seems to fail)

It seems that this is designed to only work for the basic case where I have 
really
simple and non-nested structures where all the beans are easily instantiable 
and not
superclasses. It is a shame that this is considered working as designed.

```

Original comment by `azeckoski` on 18 Sep 2008 at 9:01
 =||= ```
I am glad to hear that you found something that works for you, but it's too bad 
you
are unable to use Gson.  I'd still like to follow up on this issue because it is
user's like yourself that will help to advance this library.

First off, are you serializing and deserializing an object of type Map<String,
Number>?  If it is serialization only, than that is a much ""easier"" problem to 
solve
because we have the runtime types.  As for ""deserializing"" this kind of object, 
we
have provided our clients with the concept of a custom ""Type Adapter"".  You 
should be
able to write a type as follows to get it to work with ""Number"":

  public static class NumberTypeAdapter 
      implements JsonSerializer<Number>, JsonDeserializer<Number>,
InstanceCreator<Number> {

    public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext
context) {
      return new JsonPrimitive(src);
    }

    public Number deserialize(JsonElement json, Type typeOfT,
JsonDeserializationContext context)
        throws JsonParseException {
      JsonPrimitive jsonPrimitive = json.getAsJsonPrimitive();
      if (jsonPrimitive.isNumber()) {
        return jsonPrimitive.getAsNumber();
      } else {
        throw new IllegalStateException(""Expected a number field, but was "" + json);
      }
    }

    public Number createInstance(Type type) {
      return 1L;
    }
  }

  public static void main(String[] args) {
    Map<String, Number> map = new HashMap<String, Number>();    
    map.put(""int"", 123);
    map.put(""long"", 1234567890123456789L);
    map.put(""double"", 1234.5678D);
    map.put(""float"", 1.2345F);
    Type mapType = new TypeToken<Map<String, Number>>() {}.getType();

    Gson gson = new GsonBuilder().registerTypeAdapter(Number.class, new
NumberTypeAdapter()).create();
    String json = gson.toJson(map, mapType);
    System.out.println(json);

    Map<String, Number> deserializedMap = gson.fromJson(json, mapType);
    System.out.println(deserializedMap);
  }

========== OUTPUT ==========
{""double"":1234.5678,""float"":1.2345,""int"":123,""long"":1234567890123456789}
{double=1234.5678, float=1.2345, int=123, long=1234567890123456789}


We should probably just include the above type adapter as a default in Gson and 
I
will discuss this with Inderjeet.  There is a bug, however, since you actually 
have
to specify a ""instance creator"" for this type of object (i.e. primitive), but I 
will
have that fixed by the next release.  You should be able to write something 
similar
as above for ""Serializable"".

I hope this information is helpful and thanks for the all the feedback on this 
library.
```

Original comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 8:32
 =||= ```
I modify the MapTypeAdapter to match the jdk14's Map
======================================================
public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext 
context) {
      JsonObject map = new JsonObject();
      //Type childType = new TypeInfoMap(typeOfSrc).getValueType();
      for (Iterator iterator = src.entrySet().iterator(); iterator.hasNext(); ) {
        Map.Entry entry = (Map.Entry) iterator.next();
        Object obj = entry.getValue();
        JsonElement valueElement = context.serialize(obj, obj.getClass());
        ---------------------------------------------------------------------modified
        map.add(entry.getKey().toString(), valueElement);
      }
      return map;
    }
--------------------------------------------------------------------------------

and then the map class can be used like this:
  HashMap aaaa = new HashMap();
  aaaa.put(""aa"", 1212);
  aaaa.put(""bb"", ""fasdfa"");
  System.out.println(gson.toJson(aaaa));
==========output=================
{""bb"":""fasdfa"",""aa"":1212}
=================================

It can run, good or bad? because there are lot's of  jdk14's source code in many
project's.

```

Original comment by `zhaojinz...@gmail.com` on 21 Oct 2008 at 9:53
 =||= ```
Thanks for providing the code snippet. This will not work properly in case of 
genericized maps since in those cases it is important to use the type specified 
in 
the field declaration instead of the actual type. I have made similar fixes for 
Issue 
54 and 58 that I will apply in this case as well. 
```

Original comment by `inder123` on 21 Oct 2008 at 3:32
 =||= ```
I have fixed this issue in r277 

Now, you should be able to serialize raw maps. The deserialization continues to 
require parameterized type. 
```

Original comment by `inder123` on 21 Oct 2008 at 10:41
- Changed state: **Fixed**
 =||= ```
Thank you for fixing this issue: 
In java land, you really shouldn't be instantiating Map<String, Object> but 
since
we're dealing with JSON world, it actually makes a lot of sense. 
Consider Map<String, Object> map;
map.put(""field1"", 123);
map.put(""field2"", ""myfield2"");

What is gson.toJson(map)???
It's a javascript object o where o.field1 is the number 123 and o.field2 is the
string myfield2!
```

Original comment by `SystemIn...@gmail.com` on 22 Jan 2010 at 9:43
 =||= ```
json convert to map<Integer,MyClass> it have problem !
how to  do ?

```

Original comment by `demog...@gmail.com` on 6 Mar 2010 at 6:43
 =||= ```
If you do json eval() in javascript or python, you get a dictionary. Inside the 
dictionary, it has String/Number or nested dictionaries. eval doesnt expect 
these type declarations.
I would expect the same on static language as well - Maps with default Number 
(lossless datatype like Double) datatype for deserialization.
```

Original comment by `mani.dor...@gtempaccount.com` on 25 Jun 2010 at 6:12
 =||= ```
Hi demograp,

Did you forget to implement a default constructor for MyClass ?
It was my case, and I solved it doing this.

Hope it helps.
```

Original comment by `kstruil...@gmail.com` on 6 Aug 2010 at 2:45
 =||= ```
I faced similar problems. Easiest solution for me was wrapping the desired map 
in a wrapper object and passing that to gson. I guess in the end that just 
boils down to be the same as providing the TypeToken, but it is a much more 
straightforward solution for those who want a quick fix.
```

Original comment by `dska...@gmail.com` on 1 Sep 2011 at 12:23
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
46Add toString() to GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:30 PM"```
Gson should provide a convenient toString() that displays the type-handlers 
that have been registered alongwith any other configuration settings.
```

Original issue reported on code.google.com by `inder123` on 15 Sep 2008 at 3:54""```
Fixed in r248
```

Original comment by `inder123` on 16 Sep 2008 at 6:30
 =||= Original comment by `inder123` on 16 Sep 2008 at 6:31
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
47StackOverflowError for big String values (JSON to Java)Google Code ExporterGoogleCodeExporter03/19/15, 06:22:30 PM"```
import com.google.gson.Gson;
public class TestGson {

  public static void main(String[] args) {
    String str = getJsonString(Integer.parseInt(args[0]));
    GString gString = new Gson().fromJson(str, GString.class);
  }

  public static String getJsonString(int size) {
    StringBuilder builder = new StringBuilder();
    builder.append(""{\""value\"":\"""");
    for (int i = 0; i <= size; i++) {
      builder.append(""a"");
    }
    builder.append(""\""}"");
    return builder.toString();
  }

}

public class GString {

  private String value = null;

  public String getValue() {
    return value;
  }

}

This will always end in an StackOverflowError for big Strings (e.g. 6112) 
at line 303 in JsonParser.java.
```

Original issue reported on code.google.com by `dominik....@gmail.com` on 22 Sep 2008 at 12:33""```
Inderjeet knows more about this, but I believe this is a shortcoming with a 
JavaCC
parser.  It is not efficient at parsing long string values; therefore, if you 
have a
field in your JSON object with a very long String value (like a stack trace, 
etc.)
then this will occur.  We explicitly catch this ""Error"" and rethrow it as a
JsonParseException which should be safe as by the error is caught, all the 
recursive
function calls have popped off the stack.

We actually have a test for this scenario to ensure that a ""JsonParseException"" 
is
thrown instead of a StackOverflowError so that it will not take down the JVM 
(unless
the client doesn't not care about catching any JsonParseException).

This issue will be fixed once a new parser is implement.  See issue #28.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2008 at 5:11
 =||= ```
Looks like this was fixed by Inderjeet in r256.
```

Original comment by `ble...@gmail.com` on 13 Oct 2008 at 3:22
 =||= ```
Yes, I have tested the new Gson with strings of size up to 20MB and it worked 
fine. 
It probably will work for even larger strings, but the test itself starts to 
generate 
too much GC. Previously, Gson was able to handle strings of about 100kb on the 
same 
test so I am excited about this fix.
```

Original comment by `inder123` on 13 Oct 2008 at 3:37
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
48Support @NotSince annotation for removing fields in future versionsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:31 PM"```
I don't think this is currently possible, but it'd be nice for some protocols.
```

Original issue reported on code.google.com by `ch...@gmail.com` on 26 Sep 2008 at 7:28""```
How is that better than simply marking the method @deprecated? 
Can you list some specific use-cases where @NotSince will be better than 
@deprecated? 

```

Original comment by `inder123` on 26 Sep 2008 at 7:39
 =||= ```
Maybe I'm misunderstanding Gson's functionality. Assume the following example:

public class Person {
  private int age;
  @Since(1.1) private int birthYear;
}

new GsonBuilder().setVersion(1.0).create().toJson(new Person()) => ""{age: 0}""
new GsonBuilder().setVersion(1.1).create().toJson(new Person()) => ""{age: 0,
birthYear: 0}""

I would like to replace the field, as in (renaming @NotSince to @Until):

public class Person {
  @Until(1.1) private int age;
  @Since(1.1) private int birthYear;
}

So that:

new GsonBuilder().setVersion(1.0).create().toJson(new Person()) => ""{age: 0}""
new GsonBuilder().setVersion(1.1).create().toJson(new Person()) => ""{birthYear: 
0}""


```

Original comment by `ch...@gmail.com` on 27 Sep 2008 at 12:22
 =||= ```
Inderjeet and I have discussed that we needed some way to ""version"" field 
deletions
from classes, but have not put much thought into it.  The above proposal seems 
like a
pretty good solution.

I prefer ""Until"" as it fits well with the ""Since"" annotation.
```

Original comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 6:38
 =||= Original comment by `joel.leitch@gmail.com` on 13 Oct 2008 at 7:13
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Enhancement submitted in r322.
```

Original comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 12:10
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
49Pretty Print generates invalid JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:33 PM"```
Version: 1.2

The following code returns an invalid JSON string:

-----

import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class App {
    public static void main(String[] args) {
        Node root = new Node(""root"");
        root.createChild(""Pete"");

        Gson gson = new GsonBuilder()
                .setPrettyPrinting()
                .create();

        System.out.println(gson.toJson(root));
    }
}

class Node {
    private final String name;
    private final List<Node> children = new ArrayList<Node>();

    public Node(String name) {
        this.name = name;
    }

    public Node createChild(String childName) {
        Node child = new Node(childName);
        children.add(child);
        return child;
    }
}
```

Original issue reported on code.google.com by `b.richt...@gmail.com` on 27 Sep 2008 at 5:54""```
Below is the output from the above program:
{""name"":""root"",""children"":[{,""name"":""Pete"",""children"":[]}]}

Notice the extra "","" instead the ""children"" array.

```

Original comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 6:42
- Changed state: **Accepted**
 =||= ```
Fix submitted in r251.
```

Original comment by `joel.leitch@gmail.com` on 27 Sep 2008 at 7:10
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
50toJson inserts extraneous comma in Collection elements with pretty-printing turned onGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:34 PM"```
What steps will reproduce the problem?
1. Compile and run the attached test case

What is the expected output? What do you see instead?

Expected:

xxx{""x"":""hello"",""y"":""world""}xxx
xxx[{""x"":""hello"",""y"":""world""}]xxx
xxx{""x"":""hello"",""y"":""world""}
xxx
xxx[{""x"":""hello"",""y"":""world""}]
xxx

Actual:

xxx{""x"":""hello"",""y"":""world""}xxx
xxx[{""x"":""hello"",""y"":""world""}]xxx
xxx{""x"":""hello"",""y"":""world""}
xxx
xxx[{,""x"":""hello"",""y"":""world""}]
xxx
Exception in thread ""main"" com.google.gson.JsonParseException: Failed
parsing JSON source: java.io.StringReader@860d49 to Json
    at com.google.gson.Gson.fromJson(Gson.java:383)
    at com.google.gson.Gson.fromJson(Gson.java:326)
    at PPTest.main(PPTest.java:39)
Caused by: com.google.gson.ParseException: Encountered "","" at line 1, column 3.
Was expecting one of:
    ""\"""" ...
    ""}"" ...

    at com.google.gson.JsonParser.generateParseException(JsonParser.java:497)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:436)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:57)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:141)
    at com.google.gson.JsonParser.Elements(JsonParser.java:117)
    at com.google.gson.JsonParser.JsonArray(JsonParser.java:103)
    at com.google.gson.JsonParser.parse(JsonParser.java:25)
    at com.google.gson.Gson.fromJson(Gson.java:375)
    ... 2 more


What version of the product are you using? On what operating system?

Gson 1.2 with Sun Java 1.6.0_07 (Ubuntu package sun-java6-jdk=6-07-3ubuntu2

Please provide any additional information below.


```

Original issue reported on code.google.com by `christop...@gmail.com` on 28 Sep 2008 at 9:00

Attachments:
- [PPTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-50/comment-0/PPTest.java)""```
This is a duplicate of issue #49
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2008 at 10:01
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
51fromJson fails with SubClassesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:35 PM"```
When I use a code like:

public class GsonTester
{
...
  class BagOfPrimitives {
    private int value1 = 1;
    private String value2 = ""abc"";
    private transient int value3 = 3;
  }
...
  public String getAObject()
  {
    BagOfPrimitives obj = new BagOfPrimitives();
    Gson gson = new Gson();
    String json = gson.toJson(obj); 
    BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);  
    return json;
  }
...
}

I can not use the standard ""fromJson"" method. Because the no-arg
constructor is not recognized.

```

Original issue reported on code.google.com by `mmuelle...@googlemail.com` on 30 Sep 2008 at 3:59""```
Since BagOfPrimitives class in your case is an inner class (not a static inner 
class) 
it needs a reference to the parent class GsonTester to work. 

If your BagOfPrimitives was a static inner class, this will work without any 
issues. 
However, for the other case, you need to provide an instance creator since 
there is 
no way to constructor an inner class without a reference to the outer class to 
which 
it is bound.
```

Original comment by `inder123` on 13 Oct 2008 at 7:27
- Changed state: **Accepted**
 =||= ```
See r262 for an example of how non-static inner classes can be serialized and 
deserialized with Gson.
```

Original comment by `inder123` on 13 Oct 2008 at 7:49
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
52Add 'Appendable' as a destination for GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:36 PM"```
Currently, Gson can generate a String or write to a Writer.  This can result in 
unnecessary temporary 
String objects when the user wants to embed Gson in a larger response.  Both 
StringBuilder and 
Writer share a common interface however: Appendable.  Since it is unlikely that 
the flush and close 
methods are called on Writer while serializing, consider either adding 
Appendable as a destination 
or replacing Writable with Appendable as the stream output type.
```

Original issue reported on code.google.com by `complexm...@gmail.com` on 1 Oct 2008 at 9:32""```
Note that java.lang.Appendable first appeared in Java 1.5
```

Original comment by `damiancarrillo` on 6 Oct 2008 at 9:53
 =||= Original comment by `joel.leitch@gmail.com` on 13 Oct 2008 at 7:26
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Fixed in r315

Note that this breaks backwards binary compatibility while preserving backwards
source compatibility. This is so because we changed the toJson() method 
signatures
instead of adding new methods. However, since Appendable is a super class of 
Writer,
a simple recompilation of code should be sufficient. Since this bug fix will go 
in a
major release, this is acceptable.
```

Original comment by `inder123` on 26 Nov 2008 at 7:15
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 26 Nov 2008 at 7:15
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
53Gson does not handle default deserialization of dates correctlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:37 PM"```
As pointed out in the thread, 
http://groups.google.com/group/google-gson/browse_thread/thread/af726d49986ac245

Gson doesn't handle deserialization of dates very well.

```

Original issue reported on code.google.com by `inder123` on 6 Oct 2008 at 10:00""```
Added additional tests for this functionality in r252
```

Original comment by `inder123` on 6 Oct 2008 at 10:00
 =||= ```
Fixed in r260
```

Original comment by `inder123` on 13 Oct 2008 at 6:40
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
54Serialization of Object fields ignores their typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:38 PM"```
If type of a class field is Object, then GSON serializes it as {} instead
of the JSON for the actual object. See discussion at: 

http://groups.google.com/group/google-gson/browse_thread/thread/9241110c81f306b8
```

Original issue reported on code.google.com by `inder123` on 9 Oct 2008 at 5:11""```
Fixed this issue in r263 by updating the serialization visitor to use the more
specific of either the declared type of field or the actual type of the field 
value.
```

Original comment by `inder123` on 13 Oct 2008 at 9:13
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
55Gson can not handle JSON that uses single quote for field name/valuesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:39 PM"```
r254 contains a test that illustrates this problem.
```

Original issue reported on code.google.com by `inder123` on 10 Oct 2008 at 2:33""```
Fixed in r255

Gson now supports different fields with-in the JSON to use either single quote 
or
double quote. However, a single field name or value must use ' or """" to delimit 
itself.
```

Original comment by `inder123` on 10 Oct 2008 at 2:54
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
56Gson does not serialize null fields for strings, arrays and collection types even when serializeNulls is setGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:39 PM"```
See bug report at

http://groups.google.com/group/google-gson/browse_thread/thread/1f7cc3301ca6e3e7
```

Original issue reported on code.google.com by `inder123` on 10 Oct 2008 at 10:32""```
Added tests for this in r257
```

Original comment by `inder123` on 10 Oct 2008 at 10:33
 =||= ```
Fixed in r258
```

Original comment by `inder123` on 10 Oct 2008 at 10:34
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
57Make setFormatter of GsonBuilder publicGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:40 PM"```
To be honest I don't think the pretty print option generates a pretty
string. I would like to provide my own JsonFormatter. But both the
interface (JsonFormatter) and the setter (setFormatter) in the GsonBuilder
are package private. Could they be made public?
```

Original issue reported on code.google.com by `b.richt...@gmail.com` on 14 Oct 2008 at 7:58""```
We kept these objects/methods private on purpose.  We were not happy with its 
API
when we first release GSON, so we did not want to leak it out to the clients of 
this
library and then have to support it forever.

Hopefully we can clean up the API that this interface exposes and then we will
definitely consider exposing this interface and method in GsonBuilder.
```

Original comment by `joel.leitch@gmail.com` on 16 Oct 2008 at 5:56
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= ```
Also, if you have any specific suggestions on how to improve the pretty 
printing, we 
would be happy to incorporate them. Even better, if you can contribute some 
code in 
this regard. 

We also welcome suggestions on the API design in this respect. What API would 
you 
prefer? Would the current API (when made public) meet your needs? Can you live 
with 
it, if we keep the parse tree navigation support private in JsonElement and its 
subtypes? 


```

Original comment by `inder123` on 16 Oct 2008 at 11:33
 =||= ```
I realize I've been a lazy user that has done nothing but complaining till now 
:-) 
I'll enjoy looking into the code to see if I can come up with a suggestion to 
improve
the pretty print. To do some expectation management: No promises though 
regarding any
schedule.
```

Original comment by `b.richt...@gmail.com` on 16 Oct 2008 at 2:09
 =||= ```
Hi,

I'm sorry I'm late to the game, but ooh-ooh, let it look (literally) like your 
schema
definition (issue #17:
http://code.google.com/p/google-gson/issues/detail?id=17&sort=type)! Looking at 
the
example in the JSON Schema Proposal, if the user provides a schema string, then
setPrettyPrinting(schema-String) will do exactly what you want. Only the 
developer
""really"" knows how s/she wants it to look - using the example again, should
""description"" and ""type"" be on one line or two? Likewise with ""properties"". 
Well, if
I know I'm only outputting a handful of rows of data, one per line is great. 
However,
I have an example of an organizational tree of employees, which could be in the
hundreds. In my case, I'm not going to be a one-per-line person.

Great stuff.

Steve
```

Original comment by `steven.b...@gmail.com` on 8 Dec 2008 at 2:14
 =||= ```
I need a simple human readable formatter for complex objects. Basically a 
format of
one key per line, indentation and the usual stuff. Example:

{
  ""foo"": ""bar"",
  ""baz"": 1,
  ""list"": [
    ""first"",
    ""second"",
    ""last""
  ],
  ""object"": {
    ""nested"": ""value""
  }
}

There's probably as many different opinions on how this is is indented and 
nested as
there are different coding styles - but I just want something that is a bit more
readable for nested structures than a one-liner (or a wrapped one-liner, in the 
case
of the current ""pretty"" printer).
```

Original comment by `nuutti.k...@gmail.com` on 26 Mar 2009 at 10:46
 =||= ```
As a response to inder123's comment I emailed a proposal for the Pretty Print 
to Joel
in October 2008. I thought to share it here as well. 

My suggestion is to add a new method called setJsonFormatter to the GsonBuilder,
which takes a JsonFormatter as an argument. First of all: I (re-)use the name
JsonFormatter. As the current interface called JsonFormatter is not part of the
public API, I think it's ok to use this name.

The JsonFormatter takes, as it does now, care of the formatting of a json 
object tree
to a string. It is constructed via a builder pattern. A simple example could be:

JsonFormatter formatter = new JsonFormatterBuilder()
       .indentUsingSpacesWithSize(4)
       .create();

Gson gson = new GsonBuilder()
       .setJsonFormatter(formatter)
       .create();

The public methods the JsonFormatterBuilder has are:

- indentUsingSpacesWithSize(4) // Undoes a preceding call to indentUsingTabs()
- indentUsingTabs() // Undoes a preceding call to indentUsingSpacesWithSize()
- insertNewLineAfterStartObject()
- insertNewLineBeforeEndObject()
- insertNewLineAfterStartArray()
- insertNewLineBeforeEndArray()
- insertSpaceBeforeComma()
- insertSpaceAfterComma() // Undoes a preceding call to 
insertNewLineAfterComma()
- insertNewLineAfterComma() // Undoes a preceding call to 
insertSpaceAfterComma()
- insertSpaceBeforeColon()
- insertSpaceAfterColon() // Undoes a preceding call to 
insertNewLineAfterColon()
- insertNewLineAfterColon() // Undoes a preceding call to 
insertSpaceAfterColon()
- wrapIfPossibleAfter(80)
- doubleIndentWrappedLines()
- setLineSeparator(...)

Not calling the method setJsonFormatter, uses a default formatter which has a 
compact
output, just like the current output without pretty print is. The current method
'setPrettyPrinting' of the GsonBuilder will (of course) be preserved as a 
convenience
method. It will automatically create a JsonFormatter which, if desired, 
imitates the
current behavior as much as possible.

What worries me a bit is the the responsibilities of the objects seem to be 
mixed up.
Should the Gson object have knowledge of the way it will be formatted? Maybe 
it's
better to do it the other way around. Give a JsonFormatter a Gson object. The 
same
Gson object could then be formatted in different ways, which is currently 
impossible.
But I see no real solution for this given the current API with setPrettyPrint 
and toJson.
```

Original comment by `b.richt...@gmail.com` on 27 Mar 2009 at 8:05
 =||= ```
Thanks for the detailed proposal. Even though it is way late in the game for 
Gson
1.3, I will try to see if we can put it in. 

A somewhat simpler approach will be to leave out the JsonFormatterBuilder from 
the
API, and just provide a setFormatter method in GsonBuilder. We will also make
JsonFormatter public. Will that suffice for your needs? Also, does that lock us 
out
of any future enhancements? For example, would there ever be a need to chain 
these
formatters? 

Regarding your comment about taking the responsiblity for formatting out, one 
way to
address it would be to add new methods to Gson: toJsonTree() that return a 
parse tree
instead of String. The primary difference between that and using JsonParser 
directly
is that Gson.toJsonTree applies all the custom serializers. Is that a better 
approach? 



```

Original comment by `inder123` on 27 Mar 2009 at 3:33
- Changed state: **Started**
 =||= ```
For me, providing setFormatter method in GsonBuilder is quite enough (and making
JsonFormatter public). I can not speak for others, of course. I will also 
create and
submit the verbose formatter I described for public inclusion, with tests.
```

Original comment by `nuutti.k...@gmail.com` on 27 Mar 2009 at 4:34
 =||= ```
For now, a quick solution (workaround) I use is to provide a 
JsonDeserializer<String>
(with GsonBuilder#registerTypeAdapter). Most likely this would be an extra
JsonDeserializer, next to the one you need for the 'real' deserialization. 

This extra deserializer outputs a String just the way you want; a pretty one, 
for
instance.
```

Original comment by `b.richt...@gmail.com` on 27 Mar 2009 at 5:19
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:35
- Added labels: **Priority-High**, **Milestone-Release1.4**
- Removed labels: **Priority-Low**
 =||= ```
I submitted the new formatter as issue 112.
```

Original comment by `nuutti.k...@gmail.com` on 29 Mar 2009 at 2:20
 =||= ```
Deferred to a future release. Meanwhile, you can use Gson.toJsonTree and format 
the output yourself.
```

Original comment by `inder123` on 29 Sep 2009 at 9:12
- Added labels: **Milestone-Release1.5**
- Removed labels: **Milestone-Release1.4**
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:29
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:27
- Added labels: **Milestone-Undefined**
 =||= ```
Obsoleted by JsonWriter.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:49
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
58Gson 1.2.1 incorrectly used subclass type for serialization/deserialization for fields of base class type Google Code ExporterGoogleCodeExporter03/19/15, 06:22:44 PM"```
As stated
```

Original issue reported on code.google.com by `inder123` on 14 Oct 2008 at 6:53""```
We have a test for this bug in r268
```

Original comment by `inder123` on 14 Oct 2008 at 6:54
 =||= ```
Fixed in r269
```

Original comment by `inder123` on 14 Oct 2008 at 6:59
 =||= Original comment by `inder123` on 14 Oct 2008 at 6:59
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
59java.lang.IllegalStateException when parsing String as doubleGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:45 PM"```
What steps will reproduce the problem?
1. Define a class with a double type called ""test""
2. Construct some JSON passing a String in place of the double: {""test"": ""-1""}
3. Parse the JSON into your class

What is the expected output? What do you see instead?

Expected: JSONException

Actual:
Exception in thread ""Timer-0"" java.lang.IllegalStateException: How can the type 
variable not be 
present in the class declaration!
    at com.google.gson.TypeInfoFactory.getIndex(TypeInfoFactory.java:121)
    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:92)
    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)
    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)
    at com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:131)
    at 
com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio
nVisitor.java:93)
    at 
com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese
rializationVisit
or.java:75)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at 
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextD
efault.java:75)
    at 
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefaul
t.java:47)
    at com.google.gson.Gson.fromJson(Gson.java:378)
    at com.google.gson.Gson.fromJson(Gson.java:326)
    at com.google.gson.Gson.fromJson(Gson.java:302)

What version of the product are you using? On what operating system?

GSON 1.2 on OSX

Please provide any additional information below.



```

Original issue reported on code.google.com by `ch...@gmail.com` on 15 Oct 2008 at 6:14""```
Actually, you can close this. I think I misdiagnosed the problem. Sorry about 
that!
```

Original comment by `ch...@gmail.com` on 15 Oct 2008 at 6:19
 =||= ```
This actually is a problem for certain types; however, it is covered by issue 
#40. 
Closing this off as a duplicate.
```

Original comment by `joel.leitch@gmail.com` on 16 Oct 2008 at 5:58
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
60Map serialization fails with non-Primitive type (or String) keysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:46 PM"```
The key gets serialized using the ""toString()"" method instead of actually
serializing the key object.

```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 17 Oct 2008 at 4:01""```
The JSON specification requires that the Map keys are strings, not objects. So, 
I 
think Gson exhibits correct behavior.
```

Original comment by `inder123` on 20 Oct 2008 at 1:03
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
62Please add remove method to JsonObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:49 PM"```
Please add remove method to JsonObject class like that:

/**
* @param property name of the member.
*/
public void remove(String property) {
  members.remove(property);
}

Because client code needs to distinguish between null value and not defined 
property. I have to patch the library code to use in my project.
```

Original issue reported on code.google.com by `art.or...@gmail.com` on 20 Oct 2008 at 5:11""```
Sorry for the wrong issue category, please change it to Enhancement
```

Original comment by `art.or...@gmail.com` on 20 Oct 2008 at 5:13
 =||= Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 11:09
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Fix submitted in r307.
```

Original comment by `joel.leitch@gmail.com` on 19 Nov 2008 at 1:24
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
63Gson is not threadsafeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:50 PM"```
Gson throws ConcurrentModificationException when used concurrently. 
See the discussion in http://groups.google.com/group/google-
gson/browse_thread/thread/563bb51ee2495081


```

Original issue reported on code.google.com by `inder123` on 20 Oct 2008 at 6:28""```
I add a test for this in r274
```

Original comment by `inder123` on 20 Oct 2008 at 7:49
 =||= ```
The culprit is ObjectNavigatorFactory which holds the memory stack reference. 
This 
stack must be held per call, not throughout the lifetime of Gson.
```

Original comment by `inder123` on 20 Oct 2008 at 7:49
 =||= ```
Fixed in r276
```

Original comment by `inder123` on 20 Oct 2008 at 8:11
- Changed state: **Fixed**
 =||= The perfomance hit might be an issue for us so we resorted to using an overrride by using our own Serde for `util.date` and `sql.date`.

Uses FastDateFormat instead of SimpleDateFormat to ensure you dont take a performance hit due to serial usage (synchronize write and read)

Have added some sample code in [github gist](https://gist.github.com/aarengee/e3ea670f64497b9140358a7db8077a24). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
64New JsonElements not equalGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:51 PM"```
What steps will reproduce the problem?
1. assertEquals(new JsonElement(), new JsonElement())
2. assertEquals(new JsonElement().hashCode(), new JsonElement().hashCode())
3. assertTrue(new JsonElement().equals(new JsonElement()))

What is the expected output? What do you see instead?
All these shoul dbe true, but they are false.

What version of the product are you using? On what operating system?
1.2.2

Please provide any additional information below.


```

Original issue reported on code.google.com by `jacob.to...@gmail.com` on 20 Oct 2008 at 7:37""```
After r278 JsonNull elements created by Gson during deserialization are same 
elements. So, the reference equality will work for them.
```

Original comment by `inder123` on 29 Oct 2008 at 11:34
 =||= ```
While it is nice to have equal method in JsonElement itself, it comes at a cost 
of a 
much more expensive value equality check instead of reference equality which is 
the 
default. Since we internally use collections to hold JsonElements, I would be 
concerned about the performance implications of implementing value equality. 
Can you 
give specific cases where this would be desirable? 
```

Original comment by `inder123` on 29 Oct 2008 at 11:39
 =||= ```
I have lost track of the test case that was failing for me when I switched from
json-marshaller to google-gson.  I have sense worked around this. (I think by
comparing strings and not the objects).

The general use-case is when you are manual creating JsonObjects and you want to
compare them.
```

Original comment by `jacob.to...@gmail.com` on 31 Oct 2008 at 9:00
 =||= ```
FYI... The attached patch implements deep equals methods which addresses this 
issue.
 The patch also includes my escaping work because I was too lazy to cut it out.
```

Original comment by `z13g...@gmail.com` on 23 Apr 2009 at 9:00

Attachments:
- [equals.and.escaping.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-64/comment-4/equals.and.escaping.patch)
 =||= ```
Deferred to a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 9:09
- Added labels: **Milestone-Release1.5**
 =||= ```
This issue can probably be closed; JsonElement is abstract and cannot be 
instantiated.
```

Original comment by `jessewil...@google.com` on 20 Aug 2010 at 5:13
 =||= ```
... and actually it shouldn't be closed; the problem is that equals() and 
hashCode() aren't implemented for any of the JsonElement subtypes.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:58
 =||= ```
Issue 225 has been merged into this issue.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:58
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:31
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:28
- Added labels: **Milestone-Reelase1.7**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:28
- Added labels: **Milestone-Release1.7**
- Removed labels: **Milestone-Reelase1.7**
 =||= ```
This issue was closed by revision r726.
```

Original comment by `limpbizkit` on 15 Feb 2011 at 12:14
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
65Expose Gson Parser API Google Code ExporterGoogleCodeExporter03/19/15, 06:22:54 PM"```
See discussion at
http://groups.google.com/group/google-
gson/browse_thread/thread/412b1dab8a67961e

```

Original issue reported on code.google.com by `inder123` on 21 Oct 2008 at 3:28""```
I really need this functionality exposed to switch my project from json.org to 
gson.
 Why artificially restrict the power of your library by not exposing this?

In the interim, I'm attaching a patch that I wrote (can be dropped into any 
project -
just create a com/google/gson subdirectory in your source directory)

```

Original comment by `alexande...@gmail.com` on 14 Jan 2009 at 8:17

Attachments:
- [GsonParserPatch.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-65/comment-1/GsonParserPatch.java)
 =||= ```
r379 contains changes to expose API for JsonParser and methods to Gson to 
deserialize
from a parse tree.
```

Original comment by `inder123` on 4 Feb 2009 at 2:00
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
66Deserializer too strict with string escapes???Google Code ExporterGoogleCodeExporter03/19/15, 06:22:55 PM"```
The deserializer seems to be too strict (maybe not even compliant?) in
handling escapes in strings.

In particular, JSON feeds such as Twitter escape slashes in strings, and
gson complains of a syntax error on encountering them.

Although in theory only double-quotes, reverse solidusses (sp?), and
control characters need be escaped, the ""official"" JSON syntax at
http://www.json.org/ explicitly lists the slash as being acceptable when
escaped.

Ya, maybe JSON generators should not be escaping slashes. But in line with
a paraphrase of the Postel Principle (""Generate strictly, accept
leniently""). maybe gson should accept any character when escaped?

Just a thought, I could be wrong. Comments welcome and expected.

Jim Renkel
```

Original issue reported on code.google.com by `james.re...@gmail.com` on 22 Oct 2008 at 4:02""```
Appendix E of ""JavaScript: The Good Parts"" said that:

""JSON allows the / character to be escaped so that JSON can be embedded in HTML
<script> tags. HTML does not allow the sequence </ except to start the 
</script> tag.
JSON allows <\/, which produces the same result but does not confuse HTML.""


The solidum characters are escaped in other popular scripting languages (e.g., 
PHP).
So I think gson should consider it seriously.
```

Original comment by `william....@gmail.com` on 29 Oct 2008 at 10:17
 =||= ```
I agree this is a good idea. I have fixed this in r279 and also added a test. 
We will 
include it in our next release.
```

Original comment by `inder123` on 29 Oct 2008 at 11:32
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
67Can't read own outputGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:56 PM"```
What steps will reproduce the problem?

Attempting to deserialize this string to a bean:

{""body"":{""username"":""some
dude"",""fullname"":""w00t"",""description"":""testing"",""loginCount"":0,""failedLogins"":0,
""passwordLastChanged"":""Oct
12, 2008 2:44:01
PM"",""whoChanged"":""mike"",""email"":""asdf@asdf.com"",""userId"":82,""whoCreated"":""admin""
,""external"":true,""expiredPassword"":false,""groups"":[],""permissions"":[{""permission
Id"":62,""level"":7,""privilege"":{""privilegeId"":61,""name"":""Login"",""description"":""Per
mission
to login to
Compass"",""applicationId"":81}}],""attributes"":{""entities"":""\u0000\u003d{\""entityId
\"":62452,\""name\"":\""some
company, LLC\"",\""type\"":\""Nam\""}""}},""version"":1,""statusCode"":0}


What is the expected output? What do you see instead?

Caused by: com.google.gson.ParseException: Encountered ""e"" at line 1,
column 476.
Was expecting one of:
    ""}"" ...
    "","" ...

    at com.google.gson.JsonParser.generateParseException(JsonParser.java:435)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:374)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:48)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)
    at com.google.gson.JsonParser.Pair(JsonParser.java:78)
    at com.google.gson.JsonParser.Members(JsonParser.java:61)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)
    at com.google.gson.JsonParser.Pair(JsonParser.java:78)
    at com.google.gson.JsonParser.Members(JsonParser.java:61)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)
    at com.google.gson.JsonParser.parse(JsonParser.java:11)
    at com.google.gson.Gson.fromJson(Gson.java:376)

What version of the product are you using? On what operating system?

1.2.2, java6

Please provide any additional information below.

It seems to have trouble with this member:
{""entities"":""\u0000\u003d{\""entityId\"":62452,\""name\"":\""some company,
LLC\"",\""type\"":\""Nam\""}""}

It's a string list written to a String by DataOutputStream and converted to
json with gson.toJson(Object).

Thanks for the great product. I've been really happy with it so far.

```

Original issue reported on code.google.com by `mrjohns...@gmail.com` on 25 Oct 2008 at 5:45""```
Here's the output using DEBUG_PARSER = true;. I know nothing of javacc but it 
seems
the parser stops after '""entities"":'.

{""body"":{""username"":""some
dude"",""fullname"":""w00t"",""description"":""testing"",""loginCount"":0,""failedLogins"":0,
""passwordLastChanged"":""Oct
12, 2008 2:44:01
PM"",""whoChanged"":""johnsm89"",""email"":""asdf@asdf.com"",""userId"":82,""whoCreated"":""ad
min"",""external"":true,""expiredPassword"":false,""groups"":[],""permissions"":[{""permis
sionId"":62,""level"":7,""privilege"":{""privilegeId"":61,""name"":""Login"",""description"":
""Permission
to login to
Compass"",""applicationId"":81}}],""attributes"":{""entities"":""\u0000\u003d{\""entityId
\"":62452,\""name\"":\""xxxxxxxxxxxxxxx,
LLC\"",\""type\"":\""Nam\""}""}},""version"":1,""statusCode"":0}

Call:   parse
  Call:   JsonObject
    Consumed token: <""{"" at line 1 column 1>
    Call:   Members
      Call:   Pair
        Call:   JsonString
          Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"body"""" at line 1 column 2>
        Return: JsonString
        Consumed token: <"":"" at line 1 column 8>
        Call:   JsonValue
          Call:   JsonObject
            Consumed token: <""{"" at line 1 column 9>
            Call:   Members
              Call:   Pair
                Call:   JsonString
                  Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"username"""" at line 1
column 10>
                Return: JsonString
                Consumed token: <"":"" at line 1 column 20>
                Call:   JsonValue
                  Call:   JsonString
                    Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"some dude"""" at line 1
column 21>
                  Return: JsonString
                Return: JsonValue
              Return: Pair
              Consumed token: <"","" at line 1 column 32>
              Call:   Members
                Call:   Pair
                  Call:   JsonString
                    Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"fullname"""" at line 1
column 33>
                  Return: JsonString
                  Consumed token: <"":"" at line 1 column 43>
                  Call:   JsonValue
                    Call:   JsonString
                      Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"w00t"""" at line 1
column 44>
                    Return: JsonString
                  Return: JsonValue
                Return: Pair
                Consumed token: <"","" at line 1 column 50>
                Call:   Members
                  Call:   Pair
                    Call:   JsonString
                      Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"description"""" at
line 1 column 51>
                    Return: JsonString
                    Consumed token: <"":"" at line 1 column 64>
                    Call:   JsonValue
                      Call:   JsonString
                        Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"testing"""" at line
1 column 65>
                      Return: JsonString
                    Return: JsonValue
                  Return: Pair
                  Consumed token: <"","" at line 1 column 74>
                  Call:   Members
                    Call:   Pair
                      Call:   JsonString
                        Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"loginCount"""" at
line 1 column 75>
                      Return: JsonString
                      Consumed token: <"":"" at line 1 column 87>
                      Call:   JsonValue
                        Call:   JsonNumber
                          Call:   JsonInt
                            Call:   Digits
                              Consumed token: <<DIGITS>: ""0"" at line 1 column 88>
                            Return: Digits
                          Return: JsonInt
                        Return: JsonNumber
                      Return: JsonValue
                    Return: Pair
                    Consumed token: <"","" at line 1 column 89>
                    Call:   Members
                      Call:   Pair
                        Call:   JsonString
                          Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"failedLogins""""
at line 1 column 90>
                        Return: JsonString
                        Consumed token: <"":"" at line 1 column 104>
                        Call:   JsonValue
                          Call:   JsonNumber
                            Call:   JsonInt
                              Call:   Digits
                                Consumed token: <<DIGITS>: ""0"" at line 1 column 105>
                              Return: Digits
                            Return: JsonInt
                          Return: JsonNumber
                        Return: JsonValue
                      Return: Pair
                      Consumed token: <"","" at line 1 column 106>
                      Call:   Members
                        Call:   Pair
                          Call:   JsonString
                            Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""passwordLastChanged"""" at line 1 column 107>
                          Return: JsonString
                          Consumed token: <"":"" at line 1 column 128>
                          Call:   JsonValue
                            Call:   JsonString
                              Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"Oct 12, 2008
2:44:01 PM"""" at line 1 column 129>
                            Return: JsonString
                          Return: JsonValue
                        Return: Pair
                        Consumed token: <"","" at line 1 column 154>
                        Call:   Members
                          Call:   Pair
                            Call:   JsonString
                              Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"whoChanged""""
at line 1 column 155>
                            Return: JsonString
                            Consumed token: <"":"" at line 1 column 167>
                            Call:   JsonValue
                              Call:   JsonString
                                Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"johnsm89""""
at line 1 column 168>
                              Return: JsonString
                            Return: JsonValue
                          Return: Pair
                          Consumed token: <"","" at line 1 column 178>
                          Call:   Members
                            Call:   Pair
                              Call:   JsonString
                                Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"email"""" at
line 1 column 179>
                              Return: JsonString
                              Consumed token: <"":"" at line 1 column 186>
                              Call:   JsonValue
                                Call:   JsonString
                                  Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""asdf@asdf.com"""" at line 1 column 187>
                                Return: JsonString
                              Return: JsonValue
                            Return: Pair
                            Consumed token: <"","" at line 1 column 202>
                            Call:   Members
                              Call:   Pair
                                Call:   JsonString
                                  Consumed token: <<DOUBLE_QUOTE_LITERAL>: """"userId""""
at line 1 column 203>
                                Return: JsonString
                                Consumed token: <"":"" at line 1 column 211>
                                Call:   JsonValue
                                  Call:   JsonNumber
                                    Call:   JsonInt
                                      Call:   Digits
                                        Consumed token: <<DIGITS>: ""82"" at line 1
column 212>
                                      Return: Digits
                                    Return: JsonInt
                                  Return: JsonNumber
                                Return: JsonValue
                              Return: Pair
                              Consumed token: <"","" at line 1 column 214>
                              Call:   Members
                                Call:   Pair
                                  Call:   JsonString
                                    Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""whoCreated"""" at line 1 column 215>
                                  Return: JsonString
                                  Consumed token: <"":"" at line 1 column 227>
                                  Call:   JsonValue
                                    Call:   JsonString
                                      Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""admin"""" at line 1 column 228>
                                    Return: JsonString
                                  Return: JsonValue
                                Return: Pair
                                Consumed token: <"","" at line 1 column 235>
                                Call:   Members
                                  Call:   Pair
                                    Call:   JsonString
                                      Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""external"""" at line 1 column 236>
                                    Return: JsonString
                                    Consumed token: <"":"" at line 1 column 246>
                                    Call:   JsonValue
                                      Consumed token: <""true"" at line 1 column 247>
                                    Return: JsonValue
                                  Return: Pair
                                  Consumed token: <"","" at line 1 column 251>
                                  Call:   Members
                                    Call:   Pair
                                      Call:   JsonString
                                        Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""expiredPassword"""" at line 1 column 252>
                                      Return: JsonString
                                      Consumed token: <"":"" at line 1 column 269>
                                      Call:   JsonValue
                                        Consumed token: <""false"" at line 1 column 270>
                                      Return: JsonValue
                                    Return: Pair
                                    Consumed token: <"","" at line 1 column 275>
                                    Call:   Members
                                      Call:   Pair
                                        Call:   JsonString
                                          Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""groups"""" at line 1 column 276>
                                        Return: JsonString
                                        Consumed token: <"":"" at line 1 column 284>
                                        Call:   JsonValue
                                          Call:   JsonArray
                                            Consumed token: <""["" at line 1 column 285>
                                            Consumed token: <""]"" at line 1 column 286>
                                          Return: JsonArray
                                        Return: JsonValue
                                      Return: Pair
                                      Consumed token: <"","" at line 1 column 287>
                                      Call:   Members
                                        Call:   Pair
                                          Call:   JsonString
                                            Consumed token: <<DOUBLE_QUOTE_LITERAL>:
""""permissions"""" at line 1 column 288>
                                          Return: JsonString
                                          Consumed token: <"":"" at line 1 column 301>
                                          Call:   JsonValue
                                            Call:   JsonArray
                                              Consumed token: <""["" at line 1 column 302>
                                              Call:   Elements
                                                Call:   JsonValue
                                                  Call:   JsonObject
                                                    Consumed token: <""{"" at line 1
column 303>
                                                    Call:   Members
                                                      Call:   Pair
                                                        Call:   JsonString
                                                          Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"permissionId"""" at line 1 column 304>
                                                        Return: JsonString
                                                        Consumed token: <"":"" at line
1 column 318>
                                                        Call:   JsonValue
                                                          Call:   JsonNumber
                                                            Call:   JsonInt
                                                              Call:   Digits
                                                                Consumed token:
<<DIGITS>: ""62"" at line 1 column 319>
                                                              Return: Digits
                                                            Return: JsonInt
                                                          Return: JsonNumber
                                                        Return: JsonValue
                                                      Return: Pair
                                                      Consumed token: <"","" at line 1
column 321>
                                                      Call:   Members
                                                        Call:   Pair
                                                          Call:   JsonString
                                                            Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"level"""" at line 1 column 322>
                                                          Return: JsonString
                                                          Consumed token: <"":"" at
line 1 column 329>
                                                          Call:   JsonValue
                                                            Call:   JsonNumber
                                                              Call:   JsonInt
                                                                Call:   Digits
                                                                  Consumed token:
<<DIGITS>: ""7"" at line 1 column 330>
                                                                Return: Digits
                                                              Return: JsonInt
                                                            Return: JsonNumber
                                                          Return: JsonValue
                                                        Return: Pair
                                                        Consumed token: <"","" at line
1 column 331>
                                                        Call:   Members
                                                          Call:   Pair
                                                            Call:   JsonString
                                                              Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"privilege"""" at line 1 column 332>
                                                            Return: JsonString
                                                            Consumed token: <"":"" at
line 1 column 343>
                                                            Call:   JsonValue
                                                              Call:   JsonObject
                                                                Consumed token: <""{""
at line 1 column 344>
                                                                Call:   Members
                                                                  Call:   Pair
                                                                    Call:   JsonString
                                                                      Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"privilegeId"""" at line 1 column 345>
                                                                    Return: JsonString
                                                                    Consumed token:
<"":"" at line 1 column 358>
                                                                    Call:   JsonValue
                                                                      Call:   JsonNumber
                                                                        Call:   JsonInt
                                                                          Call:   Digits
                                                                            Consumed
token: <<DIGITS>: ""61"" at line 1 column 359>
                                                                          Return: Digits
                                                                        Return: JsonInt
                                                                      Return: JsonNumber
                                                                    Return: JsonValue
                                                                  Return: Pair
                                                                  Consumed token:
<"","" at line 1 column 361>
                                                                  Call:   Members
                                                                    Call:   Pair
                                                                      Call:   JsonString
                                                                        Consumed
token: <<DOUBLE_QUOTE_LITERAL>: """"name"""" at line 1 column 362>
                                                                      Return: JsonString
                                                                      Consumed token:
<"":"" at line 1 column 368>
                                                                      Call:   JsonValue
                                                                        Call:  
JsonString
                                                                          Consumed
token: <<DOUBLE_QUOTE_LITERAL>: """"Login"""" at line 1 column 369>
                                                                        Return:
JsonString
                                                                      Return: JsonValue
                                                                    Return: Pair
                                                                    Consumed token:
<"","" at line 1 column 376>
                                                                    Call:   Members
                                                                      Call:   Pair
                                                                        Call:  
JsonString
                                                                          Consumed
token: <<DOUBLE_QUOTE_LITERAL>: """"description"""" at line 1 column 377>
                                                                        Return:
JsonString
                                                                        Consumed
token: <"":"" at line 1 column 390>
                                                                        Call:   JsonValue
                                                                          Call:  
JsonString
                                                                            Consumed
token: <<DOUBLE_QUOTE_LITERAL>: """"Permission to login to Compass"""" at line 1 
column 391>
                                                                          Return:
JsonString
                                                                        Return: JsonValue
                                                                      Return: Pair
                                                                      Consumed token:
<"","" at line 1 column 423>
                                                                      Call:   Members
                                                                        Call:   Pair
                                                                          Call:  
JsonString
                                                                            Consumed
token: <<DOUBLE_QUOTE_LITERAL>: """"applicationId"""" at line 1 column 424>
                                                                          Return:
JsonString
                                                                          Consumed
token: <"":"" at line 1 column 439>
                                                                          Call:  
JsonValue
                                                                            Call:  
JsonNumber
                                                                              Call: 
 JsonInt
                                                                                Call:
  Digits

Consumed token: <<DIGITS>: ""81"" at line 1 column 440>

Return: Digits
                                                                              Return:
JsonInt
                                                                            Return:
JsonNumber
                                                                          Return:
JsonValue
                                                                        Return: Pair
                                                                      Return: Members
                                                                    Return: Members
                                                                  Return: Members
                                                                Return: Members
                                                                Consumed token: <""}""
at line 1 column 442>
                                                              Return: JsonObject
                                                            Return: JsonValue
                                                          Return: Pair
                                                        Return: Members
                                                      Return: Members
                                                    Return: Members
                                                    Consumed token: <""}"" at line 1
column 443>
                                                  Return: JsonObject
                                                Return: JsonValue
                                              Return: Elements
                                              Consumed token: <""]"" at line 1 column 444>
                                            Return: JsonArray
                                          Return: JsonValue
                                        Return: Pair
                                        Consumed token: <"","" at line 1 column 445>
                                        Call:   Members
                                          Call:   Pair
                                            Call:   JsonString
                                              Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"attributes"""" at line 1 column 446>
                                            Return: JsonString
                                            Consumed token: <"":"" at line 1 column 458>
                                            Call:   JsonValue
                                              Call:   JsonObject
                                                Consumed token: <""{"" at line 1 column
459>
                                                Call:   Members
                                                  Call:   Pair
                                                    Call:   JsonString
                                                      Consumed token:
<<DOUBLE_QUOTE_LITERAL>: """"entities"""" at line 1 column 460>
                                                    Return: JsonString
                                                    Consumed token: <"":"" at line 1
column 470>
                                                    Call:   JsonValue
                                                    Return: JsonValue
                                                  Return: Pair
                                                Return: Members
                                              Return: JsonObject
                                            Return: JsonValue
                                          Return: Pair
                                        Return: Members
                                      Return: Members
                                    Return: Members
                                  Return: Members
                                Return: Members
                              Return: Members
                            Return: Members
                          Return: Members
                        Return: Members
                      Return: Members
                    Return: Members
                  Return: Members
                Return: Members
              Return: Members
            Return: Members
          Return: JsonObject
        Return: JsonValue
      Return: Pair
    Return: Members
  Return: JsonObject
Return: parse
16282 [http-8080-Processor23] ERROR com.botw.trinity.sales.servlet.Admin  - 
Unknown
error evaluating script: 
org.mozilla.javascript.WrappedException: Wrapped
com.botw.trinity.sales.dao.DaoException: Error getting user (/getuser#10)
    at org.mozilla.javascript.Context.throwAsScriptRuntimeEx(Context.java:1757)
    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:170)
    at org.mozilla.javascript.NativeJavaMethod.call(NativeJavaMethod.java:243)
    at org.mozilla.javascript.optimizer.OptRuntime.call2(OptRuntime.java:76)
    at org.mozilla.javascript.gen.c3._c0(/getuser:10)
    at org.mozilla.javascript.gen.c3.call(/getuser)
    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)
    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)
    at org.mozilla.javascript.gen.c3.call(/getuser)
    at org.mozilla.javascript.gen.c3.exec(/getuser)
    at org.mozilla.javascript.Context.evaluateReader(Context.java:1227)
    at com.botw.trinity.sales.servlet.Admin.processRequest(Admin.java:141)
    at com.botw.trinity.sales.servlet.Admin.doGet(Admin.java:183)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
    at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilt
erChain.java:269)
    at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.
java:188)
    at com.botw.sanction.client.SanctionNtlmFilter.doFilter(SanctionNtlmFilter.java:129)
    at
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilt
erChain.java:215)
    at
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.
java:188)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)
    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:874)
    at
org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConne
ction(Http11BaseProtocol.java:665)
    at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)
    at
org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorker
Thread.java:81)
    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:689)
    at java.lang.Thread.run(Thread.java:619)
Caused by: com.botw.trinity.sales.dao.DaoException: Error getting user
    at com.botw.trinity.sales.dao.TrinitySalesDao.getUser(TrinitySalesDao.java:2819)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:155)
    ... 30 more
Caused by: java.util.concurrent.ExecutionException:
com.google.gson.JsonParseException: Failed parsing JSON source:
java.io.StringReader@2de41d to Json
    at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:232)
    at java.util.concurrent.FutureTask.get(FutureTask.java:91)
    at com.botw.trinity.sales.dao.TrinitySalesDao.getUser(TrinitySalesDao.java:2815)
    ... 35 more
Caused by: com.google.gson.JsonParseException: Failed parsing JSON source:
java.io.StringReader@2de41d to Json
    at com.google.gson.Gson.fromJson(Gson.java:386)
    at com.google.gson.Gson.fromJson(Gson.java:329)
    at com.google.gson.Gson.fromJson(Gson.java:305)
    at com.botw.sanction.client.ClientRequest.call(ClientRequest.java:93)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
    ... 1 more
Caused by: com.google.gson.ParseException: Encountered ""\"""" at line 1, column 
471.
Was expecting one of:
    <DIGITS> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""{"" ...
    ""null"" ...
    ""["" ...
    ""true"" ...
    ""false"" ...
    ""-"" ...

    at com.google.gson.JsonParser.generateParseException(JsonParser.java:512)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:450)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:189)
    at com.google.gson.JsonParser.Pair(JsonParser.java:100)
    at com.google.gson.JsonParser.Members(JsonParser.java:78)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:171)
    at com.google.gson.JsonParser.Pair(JsonParser.java:100)
    at com.google.gson.JsonParser.Members(JsonParser.java:78)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.Members(JsonParser.java:82)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:171)
    at com.google.gson.JsonParser.Pair(JsonParser.java:100)
    at com.google.gson.JsonParser.Members(JsonParser.java:78)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:49)
    at com.google.gson.JsonParser.parse(JsonParser.java:13)
    at com.google.gson.Gson.fromJson(Gson.java:378)
    ... 8 more

```

Original comment by `mrjohns...@gmail.com` on 25 Oct 2008 at 8:50
 =||= ```
Doh, after driving myself nuts for a while with the javacc grammar, and trying 
just
about everything else, I traced my error to using JsonObject.toString() in a 
custom
deserializer, which translated the escapes. Oops.

I'd suggest please overriding toString() to either write json or provide the 
original
json source would be handy.

Please close this, sorry for the noise.

```

Original comment by `mrjohns...@gmail.com` on 27 Oct 2008 at 5:56
 =||= ```
toString() should only display internal state of the object, and I think it 
does a 
reasonably good job of that. What specific thing would you want changed in the 
output? Please reopen the bug if you think we dont give out enough information.
```

Original comment by `inder123` on 13 Nov 2008 at 1:31
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
68Gson should support null values for primitive wrapper typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:57 PM"```
See thread
http://groups.google.com/group/google-gson/browse_thread/thread/8418964267ace8f1
```

Original issue reported on code.google.com by `inder123` on 30 Oct 2008 at 1:31""```
Added tests in r280 that serialize and deserialize null fields that are wrapped
primitive types (Long). The tests pass so I am closing this bug.
```

Original comment by `inder123` on 30 Oct 2008 at 1:48
- Changed state: **Invalid**
 =||= ```
The real issue is that a custom type adapter registered for a primitive type is 
not
invoked. I verified the bug in a test in r281

We need to think through the use-cases of registering a custom type adapter for
primitive types before we implement this.
```

Original comment by `inder123` on 30 Oct 2008 at 6:28
- Changed state: **Accepted**
 =||= ```
Fixed in r282 by providing support to override default type adapters for 
primitive types.
```

Original comment by `inder123` on 31 Oct 2008 at 12:20
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
69createInstance before deserializeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:58 PM"```
Hi, only a cuestion:

Why call createInstance before deserialize?
In deserialize I'm need make new MyObj but before in createInstance already
i'am make new MyObj.

Thanks
```

Original issue reported on code.google.com by `inad...@gmail.com` on 12 Nov 2008 at 11:54""```
This is a valid issue although it doesnt really have an impact on the users 
since the 
first instance gets thrown away. We should fix this by writing a ClassNavigator 
instead of ObjectNavigator that is used for the deserialization. This is not a 
high 
priority bug though, unless you convince us of otherwise. 
```

Original comment by `inder123` on 13 Nov 2008 at 1:43
- Changed state: **Accepted**
 =||= ```
Medium or less
Thanks

```

Original comment by `inad...@gmail.com` on 13 Nov 2008 at 12:33
 =||= Original comment by `joel.leitch@gmail.com` on 19 Nov 2008 at 1:20
 =||= ```
Fix submitted in r311.
```

Original comment by `joel.leitch@gmail.com` on 25 Nov 2008 at 6:58
- Changed state: **Fixed**
 =||= ```
Issue 78 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:51
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
70JsonArray of primative to Collection of non-Primative or Strings failsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:22:59 PM"```
I have this model:
public class Foo {
  private String part1;
  private String part2;

  public Foo(String string) {
    String[] parts = strings.split[""|""];
    part1 = parts[0];
    part2 = parts[1];
  }
}

I have this deserializer:
public class FooAdapter implements JsonDeserializer<Foo>,
InstanceCreator<Foo> {

    //Fill up Eden with objects that will be thrown away
    public Foo createInstance(Type type) {
        return new Foo(""unknown|thing"");
    }

    public Foodeserialize(JsonElement src, Type type,
JsonDeserializationContext context)
            throws JsonParseException {
        return new Foo(src.getAsString());
    }
}

I think have this line that fails:
new GsonBuilder().registerTypeAdapter(Foo.class, new FooAdapter())
                .create().fromJson(""[\""Jacob|Tomaw\""]"", new
TypeToken<Set<Foo>>() {}.getType());

com.google.gson.JsonParseException: Can not adapt type class
java.lang.String to class Foo
```

Original issue reported on code.google.com by `jacob.to...@gmail.com` on 14 Nov 2008 at 5:44""```
I added testS in r292 that check this functionality but could not reproduce 
this bug. 
Either this bug is invalid, or has been fixed in the big overhaul that happened 
in
version 1.2.3. 

I noticed that the above test has a bug. strings.split(""|"") will split ""abc"" 
into
""a"",""b"",""c"" because | is a reserved word for regex.
```

Original comment by `inder123` on 14 Nov 2008 at 10:02
- Changed state: **Invalid**
 =||= ```
Dang,
Caught coding in a textarea! :)

I was trying to make the example lest contrived, but the reality is that
FooAdapter.deserialize is never called in v1.2.2
```

Original comment by `jacob.to...@gmail.com` on 14 Nov 2008 at 10:05
 =||= ```
Added more tests for this bug in r293.

Jacob, can you look at the tests and see if that is what you were intending?

My tests (based on your code) essentially ensure that custom
serializers/deserializers are called for the elements of a collection or a map.
```

Original comment by `inder123` on 14 Nov 2008 at 10:12
 =||= ```
Yeah that test looks spot on.

I copied the test into my check out of 1.2.2 and it fails exactly like I would
expect.  So if it work in 1.2.3 then I think I am satisfied.
```

Original comment by `jacob.to...@gmail.com` on 14 Nov 2008 at 10:35
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
71"Parser fails on ""1E+5"""Google Code ExporterGoogleCodeExporter03/19/15, 06:23:01 PM"```
* What steps will reproduce the problem?

Try executing either of these lines:
    Double x = new Gson().fromJson(""1E+5"", Double.class);
    BigDecimal y = new Gson().fromJson(""1E+5"", BigDecimal.class);


* What is the expected output? What do you see instead?

The expected result is a Double or BigDecimal containing the value 100000.
The actual behaviour is a NumberFormatException thrown from within the
java.math.BigDecimal constructor.  The key line is in the method
JsonParser.JsonNumber():

    n = new java.math.BigDecimal(intpart + fracpart + exppart);

At this point, fracpart is null because there is no decimal point in
""1E+5"", and so the string addition produces ""1nullE+5"".  Is this a bug
in JsonParser.jj or perhaps even in the parser generator?


* What version of the product are you using? On what operating system?

I'm using Gson release 1.2.3 on Linux.
```

Original issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:39""Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 7:55
- Changed state: **Accepted**
 =||= ```
Fixed in r304
```

Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 7:56
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
72BigDecimal loses precision on round tripGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:02 PM"```
* What steps will reproduce the problem?

Try executing the following:

    BigDecimal x = new BigDecimal(""1.00"");
    String json = new Gson().toJson(x);
    BigDecimal y = new Gson().fromJson(json, BigDecimal.class);
    assertEquals(x, y);


* What is the expected output? What do you see instead?

x and y should be equal, but they aren't.  The assertion fails with:

    expected: <1.00> but was: <1.0>

Precision is lost: x.precision() is 3, but y.precision() is 2.  This
seems to be happening because the JsonParser.JsonNumber() method is
trying to optimize the number representation -- see the clause beginning
with ""if (exppart != null)"".  Because there is no exponent, it chooses
a Double, which loses the information on how many digits of precision
are present.

This problem doesn't happen for numbers with exponents.  Parsing ""1.00""
yields a BigDecimal with precision 2, but parsing ""1.00E+5"" does produce
a BigDecimal with precision 3.

Since BigDecimal is carefully designed to preserve information in
its string representation (see the Javadoc for BigDecimal.toString()),
and its equals() method considers ""1.0"" and ""1.00"" to be unequal,
it would be nice to carry this through.  I believe this would just be
a matter of always using BigDecimal as the representation in the parser,
regardless of whether ""exppart"" or ""fracpart"" are present, and converting
to another number type only when you know what kind of number is being
requested.


* What version of the product are you using? On what operating system?

I'm using Gson 1.2.3 on Linux.
```

Original issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:51""```
Fix submitted is r306.
```

Original comment by `joel.leitch@gmail.com` on 18 Nov 2008 at 8:26
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
73Backwards compatibility problem found - Serializing Collection<Object>Google Code ExporterGoogleCodeExporter03/19/15, 06:23:03 PM"```
Gson use to be able to serialize a field and/or object of type
Collection<Object>, but now fails to serialize properly.

Support in 1.2.2
Fails in 1.2.3
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 20 Nov 2008 at 1:22""```
Fix submitted in r308
```

Original comment by `joel.leitch@gmail.com` on 20 Nov 2008 at 1:22
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
74addProperty Boolean in JsonObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:04 PM"```
In JsonObject is missing this methods for add JsonPrimitive:
public void addProperty(String property, Boolean value);
public void addProperty(String property, Character value);
public void addProperty(String property, char value);
Thanks
```

Original issue reported on code.google.com by `inad...@gmail.com` on 25 Nov 2008 at 12:05""Original comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:17
 =||= ```
New methods were added as part of r321.
```

Original comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:37
- Changed state: **Fixed**
 =||= Original comment by `joel.leitch@gmail.com` on 1 Dec 2008 at 1:22
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
75Exposing examplesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:05 PM"```
Could you please describe how to expose the following code
@Expose
private ObjectInterface obj1;

@Expose
private Set<ObjectInterface> objSet = new HashSet<ObjectInterface>();

It seems it doesn't work.

Thank you.
```

Original issue reported on code.google.com by `ant%biz...@gtempaccount.com` on 25 Nov 2008 at 10:18""```
Here are a few links that might help:
-
http://google-gson.googlecode.com/svn/tags/1.2.3/docs/javadocs/com/google/gson/a
nnotations/Expose.html
-
http://sites.google.com/site/gson/gson-user-guide#TOC-Excluding-Fields-From-Seri
alization

In short, you need to create your Gson instance as follows:
Gson gson = GsonBuilder.excludeFieldsWithoutExposeAnnotation().create();

Hope this helps,
Joel
```

Original comment by `joel.leitch@gmail.com` on 26 Nov 2008 at 1:13
 =||= ```
Hello, 
I have problem when I specify interface type
@Expose
private ObjectInterface1 obj1;

But everything works fine when I use class type 
@Expose
private Object1 obj1;

Thanks
```

Original comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 12:27
 =||= ```
Seems to be working for me...what's the issue?

Some test were submitted under r316 and are passing with the current Gson 
codebase.
```

Original comment by `joel.leitch@gmail.com` on 26 Nov 2008 at 10:57
 =||= ```
Hi, 

I've created a few test classes, please verify
Thanks.
```

Original comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 11:53

Attachments:
- [tst.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-75/comment-4/tst.zip)
 =||= ```
I'm using gson-1.2.3.jar from the maven repository.
My result is
{""id"":1,""name"":""Name"",""manager"":{},""contractors"":[{}],""employees"":{""3"":{},""2"":{}
}}
```

Original comment by `ant%biz...@gtempaccount.com` on 26 Nov 2008 at 11:57
 =||= ```
OK, I see the issue.  The tests that I added above only test that the actual
interface field exists in the Json output.  In my case, the object had no 
fields so I
was expecting an empty object (i.e. {}).

This is somewhat similar to Issue #5.  Right now, I do not exactly know the best
approach on how this bug should be fixed, but I do agree that it should be 
considered
and fixed in the 1.3 release.

As a workaround, you can register a type adapter for these two interfaces.  
Here's an
example of TestInterfaceA (basically replace the A to B to get TestInterfaceB):

public class TestInterfaceATypeAdapter implements 
JsonSerializer<TestInterfaceA>, 
    JsonDeserializer<TestInterfaceA>, InstanceCreator<TestInterfaceA> {

  public JsonElement serialize(
      TestInterfaceA src, Type typeOfSrc, JsonSerializationContext context) {
    return context.serialize(src);
  }

  public TestInterfaceA createInstance(Type type) {
    return new TestClassA();
  }

  public TestInterfaceA deserialize(JsonElement json, Type typeOfT,
      JsonDeserializationContext context) throws JsonParseException {
    return context.deserialize(json, TestClassA.class);
  }
}

NOTE: The above also will allow for proper deserialization of the interface 
type.



Now when you build your Gson instance you would build it as follows:
    Gson gson = new GsonBuilder()
        .excludeFieldsWithoutExposeAnnotation()
        .registerTypeAdapter(TestInterfaceA.class, new TestInterfaceATypeAdapter())
        .registerTypeAdapter(TestInterfaceB.class, new TestInterfaceBTypeAdapter())
        .create();


Keep tracking this bug to find out how we handle interfaces in the future so 
that you
do not have to add these silly type adapters for all interfaces that you define.

Hope this helps,
Joel
```

Original comment by `joel.leitch@gmail.com` on 28 Nov 2008 at 8:42
 =||= ```
Here's the output of your provided program when registering the type adapters 
for
these interfaces:

{""id"":1,""name"":""Name"",""manager"":{""id"":1,""name"":""Manager"",""history"":[""ManagerH1"",
""ManagerH2""]},""contractors"":[{""id"":1,""name"":""Manager"",""history"":[""ManagerH1"",""Ma
nagerH2""]}],""employees"":{""3"":{""id"":3,""name"":""Name3"",""history"":[""NameH3""]},""2"":{""
id"":2,""name"":""Name2"",""history"":[""NameH2""]}}}

```

Original comment by `joel.leitch@gmail.com` on 28 Nov 2008 at 8:46
 =||= ```
Hello, 

Any news about this issue?
I've tried google-gson-1.3-release version, but interfaces exposing without Type
Adapters still doesn't work.

Thank you.

```

Original comment by `ant%biz...@gtempaccount.com` on 14 Apr 2009 at 1:13
 =||= ```
This is fixed in 1.4 (will be released soon).

Added tests to prove it (r458).
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 7:05
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
76A field with a SerializedName in common with another field isn't included in serialized outputGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:10 PM"```
What steps will reproduce the problem?

1.

public class Test {
 @SerializedName(""a"")
 public Integer b;
 public Double a;
}

2.

Test t = new Test();
t.b = 3;
gson.toJson(t)

What is the expected output? What do you see instead?

Expect: {""a"":3}
Actual: {}

What version of the product are you using? On what operating system?

This works as expected in v1.2.2, but broke in one of the more recent builds.


```

Original issue reported on code.google.com by `ch...@gmail.com` on 26 Nov 2008 at 9:06""```
Fix submitted in r318.
```

Original comment by `joel.leitch@gmail.com` on 27 Nov 2008 at 12:52
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
77Serializing a null value in a Map throws a NPEGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:11 PM"```
If a Map contains a ""null"" as one of its entry values, the default Map
serialization throws an NPE.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Nov 2008 at 1:03""```
Fix submitted in r320.

See the unit tests that were added into the MapTests class for informaiton on 
how
nulls function within a map.
```

Original comment by `joel.leitch@gmail.com` on 30 Nov 2008 at 11:03
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
78Custom Deserializer is not used when calling directly gson.fromJson(jsonString, MyCustomClass.class)Google Code ExporterGoogleCodeExporter03/19/15, 06:23:11 PM"```
What steps will reproduce the problem?
1. Define a MyCustomClass
2. Build a gson instance, with a MyCustomClassDeserializer bound to it.
3. Try to deserialize directly a string to MyCustomClass (i.e. the
MyCustomClass instance is not a member of an object to deserialize, it IS
the object to deserialize)

What is the expected output? What do you see instead?
The JVM should pass through MyCustomClassDeserializer.deserialize, instead
it searches for a no arg constructor in MyCustomClass


What version of the product are you using? On what operating system?
v1.2.3 on WinXP SP3.

Please provide any additional information below.
N/A

```

Original issue reported on code.google.com by `nicolas....@gmail.com` on 9 Dec 2008 at 3:53""```
An instance creator (or default constructor) is no longer required when 
registering a
custom deserializer.  As a ""temporary"" fix, you can have your type adapter 
implement
a ""InstanceCreator"" for your object.  This instance create returns a dummy 
object
which will just get discarded and garbage collected later.

We are going to try and push a new release within the next couple of weeks.
```

Original comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:51
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
79java.util.UUID should be supported out of the box (just like URL and URI do)Google Code ExporterGoogleCodeExporter03/19/15, 06:23:12 PM"```
What steps will reproduce the problem?
Add tests:
    public void testUuidSerialization() throws Exception {
        String uuidValue = ""c237bec1-19ef-4858-a98e-521cf0aad4c0"";
        UUID uuid = UUID.fromString(uuidValue);
        assertEquals('""' + uuidValue + '""', gson.toJson(uuid));
    }

    public void testUuidDeserialization() {
        String uuidValue = ""c237bec1-19ef-4858-a98e-521cf0aad4c0"";
        String json = '""' + uuidValue + '""';
        UUID target = gson.fromJson(json, UUID.class);
        assertEquals(uuidValue, target.toString());
    }


Suggestion of how to implement type adapter:

  private static class UuidTypeAdapter implements JsonSerializer<UUID>,
JsonDeserializer<UUID>,
    InstanceCreator<UUID> {

    public JsonElement serialize(UUID src, Type typeOfSrc,
JsonSerializationContext context) {
        return new JsonPrimitive(src.toString());
    }

    public UUID deserialize(JsonElement json, Type typeOfT,
JsonDeserializationContext context) 
    throws JsonParseException {     
        return UUID.fromString(json.getAsString());
    }

    public UUID createInstance(Type type) {     
        return new UUID(0, 0);
    }
    @Override
    public String toString() {
        return UuidTypeAdapter.class.getSimpleName();
    }
  }


```

Original issue reported on code.google.com by `heg...@gmail.com` on 9 Dec 2008 at 11:56""```
This seems reasonable to me!

I am going to take your suggested implementation and modify it ever so 
slightly. 
This is because the next release of Gson will not longer require an 
""InstanceCreator""
when a custom deserializer is registered (i.e. Issue #69).

Thanks for the suggestion and implementation :)
```

Original comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:36
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Default support for UUID implemented in r327.
```

Original comment by `joel.leitch@gmail.com` on 13 Dec 2008 at 8:45
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
80Is that gson not support Chinese charaterset?Google Code ExporterGoogleCodeExporter03/19/15, 06:23:13 PM"```
When serializing Chinese charater with gson like: gson.toJson('测试'); it 
will return something like ""\u6d4b\u8bd5"".  Is that gson not support non-
English charaterset?I'm using the gson-1.2.3. Thanks!



```

Original issue reported on code.google.com by `roger.y2...@gmail.com` on 10 Dec 2008 at 9:12""```
This was a problem before, but was fixed in Issue #23.  See the following 
thread:
http://groups.google.com/group/google-gson/browse_thread/thread/f2094410e2a7f347

In short, \u6d4b\u8bd5 is the unicode equivalent of 测试.

Try the following:
public static void main(String[] args) {
  System.out.println(""测试"");
  System.out.println(""\u6d4b\u8bd5"");
}

NOTE: you'll need to save the file as UTF-8
```

Original comment by `joel.leitch@gmail.com` on 12 Dec 2008 at 9:38
- Changed state: **Duplicate**
 =||= ```
We agree with the issue that was raised. Gson should not write escaped unicode 
characters and instead let the underlying writer (passed in toJson()) handle 
the 
character encoding.
```

Original comment by `inder123` on 19 Dec 2008 at 8:46
- Changed state: **Accepted**
 =||= ```
Fixed in r342
```

Original comment by `inder123` on 19 Dec 2008 at 8:47
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
81Exception when deserializing Double.NaN, Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITYGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:15 PM"```
What steps will reproduce the problem?

public class GsonDouble
{
    private double negInf = Double.NEGATIVE_INFINITY;
    private double posInf = Double.POSITIVE_INFINITY;
    private double notANumber = Double.NaN;
    private double number = 2.0;

    public static void main(String[] args)
    {
        Gson gson = new Gson();

        String json = gson.toJson(new GsonDouble());
        System.out.println(json);

        GsonDouble gsonDouble = gson.fromJson(json, GsonDouble.class);

    }
}

Exception in thread ""main"" com.google.gson.JsonParseException: Failed
parsing JSON source: java.io.StringReader@134bed0 to Json
    at com.google.gson.Gson.fromJson(Gson.java:376)
    at com.google.gson.Gson.fromJson(Gson.java:321)
    at com.google.gson.Gson.fromJson(Gson.java:297)
    at GsonDouble.main(GsonDouble.java:29)
Caused by: com.google.gson.TokenMgrError: Lexical error at line 1, column
12.  Encountered: ""I"" (73), after : """"
    at
com.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:
999)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:366)
    at com.google.gson.JsonParser.Digits(JsonParser.java:267)
    at com.google.gson.JsonParser.JsonInt(JsonParser.java:241)
    at com.google.gson.JsonParser.JsonNumber(JsonParser.java:192)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:131)
    at com.google.gson.JsonParser.Pair(JsonParser.java:78)
    at com.google.gson.JsonParser.Members(JsonParser.java:61)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)
    at com.google.gson.JsonParser.parse(JsonParser.java:11)
    at com.google.gson.Gson.fromJson(Gson.java:370)
    ... 3 more


The serialized String looks as follows:

{""negInf"":-Infinity,""posInf"":Infinity,""notANumber"":NaN,""number"":2.0}

I guess the serialization is ok, since JavaScript uses Number.NaN,
Number.NEGATIVE_INFINITY and Number.POSITIVE_INFINITY and the text
representation fits the above JSON string.
The deserializer seems to be unaware of this.

I would be great if you could fix this for the upcoming release.

```

Original issue reported on code.google.com by `nit...@googlemail.com` on 12 Dec 2008 at 1:09""```
As per the JSON spec, see http://tools.ietf.org/id/draft-crockford-jsonorg-json-
04.txt, infinity is not a valid JSON number. However, we will consider 
accepting it 
as valid input to our parser. BTW, this also means that we are generating 
invalid 
JSON when infinity is present. Any suggestions on a good approach to handle it? 
Should we just ignore the field, or should we throw an exception when a user 
tries to 
serialize infinity.
```

Original comment by `inder123` on 18 Dec 2008 at 7:10
 =||= ```
r333 disallows NaN, positive or negative infinity double values to be 
serialized 
through Gson. We will add additional support for disallowing this through Float 
or 
BigDecimal. This is to ensure that we do not emit invalid JSON.
```

Original comment by `inder123` on 18 Dec 2008 at 8:04
- Changed state: **Started**
 =||= ```
The spec says ""Numeric values that cannot be represented as sequences of digits 
(such
as Infinity and NaN) are not permitted."" 
But the spec also says: 
""It is inappropriate to use Internet-Drafts as reference material or to cite 
them
other than as ""work in progress.""""
And: ""Expires: June 10, 2006""

So maybe there is a new spec which allows NaN/Infinity and if not then one 
should
write one.

JavaScript has no problems with the above JSON-String as the example below 
shows:

<html>
<script>
var json =
""{\""negInf\"":-Infinity,\""posInf\"":Infinity,\""notANumber\"":NaN,\""number\"":2.0}"";
var obj = eval('(' + json + ')');
alert(""negInf= ""+obj.negInf+"" posInf= ""+obj.posInf+"" notANumber= 
""+obj.notANumber+""
number= ""+obj.number);
alert(""is NaN "" + isNaN(obj.notANumber));
</script>
<body>
</body>
</html>

IMHO gson/json should support all values of the Double/Number object. The spec 
seems
to be outdated and incomplete.

```

Original comment by `nit...@googlemail.com` on 18 Dec 2008 at 8:42
 =||= ```
Quote from r333:
src + "" is not a valid double value as per JavaScript specification.""

I think this is definitely wrong since Number.NaN, Number.NEGATIVE_INFINITY and
Number.POSITIVE_INFINITY are perfectly legal within JavaScript. 

I guess, you mean JSON specification, but as I said before it is only a draft. 
You
should reconsider and support all Double values in GSON.



```

Original comment by `nit...@googlemail.com` on 18 Dec 2008 at 8:51
 =||= ```
You are right, these are valid JavaScript values. I looked up the spec for 
JavaScript 
http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf which 
defines these to be valid values in 4.3.20, 4.3.22, and 4.3.23.

However, the official spec for JSON http://www.ietf.org/rfc/rfc4627.txt 
explicitly 
marks these as non-permitted values. See section 2.4
```

Original comment by `inder123` on 19 Dec 2008 at 9:45
- Changed state: **Fixed**
 =||= ```
One approach that we can take is that we will accept these values but never 
output 
these values. This is to ensure that the JSON output by Gson complies with the 
spec.  
We can also provide a GsonBuilder setting to allow these values to be output. 
Will 
that be a good solution?
```

Original comment by `inder123` on 19 Dec 2008 at 9:47
- Changed state: **Accepted**
 =||= ```
r344 adds support for deserialization of NaN, Infinity and -Infinity
```

Original comment by `inder123` on 19 Dec 2008 at 10:22
- Changed state: **Started**
 =||= ```
r345 adds support for enabling serialization of NaN, Infinity and -Infinity
```

Original comment by `inder123` on 20 Dec 2008 at 1:26
- Changed state: **Fixed**
 =||= ```
Support for NaN should be there. I cannot unset a database column which is 
declared
as a number. ie. If a database column is declared as a number which can be null,
there is no way to unset this column once it is set from the UI; I'm using dojo 
with
Json and Gson.
```

Original comment by `rakumar...@gmail.com` on 28 Jan 2009 at 5:52
 =||= ```
Yes, we do have support for NaN in the latest beta release. Do you want us to 
do 
something different? 


```

Original comment by `inder123` on 29 Jan 2009 at 2:21
 =||= The same problem with Float.POSITIVE_INFINITY and  Float.NEGATIVE_INFINITY as of V2.8.4. =||= @zipswich, what error message do you observe? I see
```
Caused by: java.lang.IllegalArgumentException: -Infinity is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.
```
and when I use
```java
GsonBuilder.serializeSpecialFloatingPointValues() 
```
to create my `Gson` I can serialize both float and double infinities and NaNs (on version 2.8.5) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
82Deserialization of long primitive types can lead to data corruptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:18 PM"```
What steps will reproduce the problem?
1. Deserializing a long > 32 bits from javascript into a java long primitive


What is the expected output? What do you see instead?
i don't think you guys handle long conversion from JSON -> Java properly.
In javascript, there is no such thing as a long (the language doesn't
support it - gwt plays tricks like using an array of doubles to keep
precision).

So, when passing back json, I have to quote my long id so it looks like a
string. However, Gson will try to cast the String to a Number which
obviously fails.
Could you change the default deserialization to take this case into
consideration?

Also, when serializing, I'm not so sure it makes sense to just convert a
long to a javascript number (like in your gson example doc).

Perhaps some sort of annotation on the that can be used to indicate it is
safe to cast a string to a long.

ie:

{ ""myLongVar"": ""1000000"" } should convert the String to a primitive long

but something like

{ ""myLongVar"" : 20000 } should also work without the quotes.

There are a lot of cases where you want a long as an id where you are not
performing math and should be safe to serialize/deserialize

What version of the product are you using? On what operating system?


Please provide any additional information below.


```

Original issue reported on code.google.com by `dws...@gmail.com` on 16 Dec 2008 at 5:40""```
This is partially fixed and will be release with the next version of Gson.  r310
handles deserializing a string value into a long, int, byte, boolean, etc.

As for the JavaScript long support, there is no 32 bit restriction in the JSON
specification, but it probably makes sense to add a method to the GsonBuilder 
class
that will construct a Gson instance which serializes ""long"" fields as string 
(i.e.
quoted numbers) instead of a number field.
```

Original comment by `joel.leitch@gmail.com` on 17 Dec 2008 at 4:45
- Changed state: **Accepted**
 =||= ```
Added ability for client to configure Gson to output all long (and Long) fields 
as
Strings.  Change made in r352.
```

Original comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 3:41
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
83Gson does not handle null values in list properly Google Code ExporterGoogleCodeExporter03/19/15, 06:23:19 PM"```
my code:

Gson g=new Gson();      
List<String> t6=new ArrayList<String>();
t6.add(""list 1"");
t6.add(null);
t6.add(""list 2"");
String s6=g.toJson(t6);

trace:

java.lang.NullPointerException
    at 
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize
(DefaultTypeAdapters.java:414)
    at 
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize
(DefaultTypeAdapters.java:1)
    at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler
(JsonSerializationVisitor.java:132)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:96)
    at com.google.gson.JsonSerializationContextDefault.serialize
(JsonSerializationContextDefault.java:47)
    at com.google.gson.Gson.toJson(Gson.java:279)
    at com.google.gson.Gson.toJson(Gson.java:230)
    at com.google.gson.Gson.toJson(Gson.java:210)
    at com.aisino.platform.view.json.TestGson.testToJson
(TestGson.java:71)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:585)
    at org.junit.internal.runners.TestMethodRunner.executeMethodBody
(TestMethodRunner.java:99)
    at org.junit.internal.runners.TestMethodRunner.runUnprotected
(TestMethodRunner.java:81)
    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected
(BeforeAndAfterRunner.java:34)
    at org.junit.internal.runners.TestMethodRunner.runMethod
(TestMethodRunner.java:75)
    at org.junit.internal.runners.TestMethodRunner.run
(TestMethodRunner.java:45)
    at 
org.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod
(TestClassMethodsRunner.java:71)
    at org.junit.internal.runners.TestClassMethodsRunner.run
(TestClassMethodsRunner.java:35)
    at org.junit.internal.runners.TestClassRunner$1.runUnprotected
(TestClassRunner.java:42)
    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected
(BeforeAndAfterRunner.java:34)
    at org.junit.internal.runners.TestClassRunner.run
(TestClassRunner.java:52)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run
(JUnit4TestReference.java:45)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run
(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests
(RemoteTestRunner.java:460)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests
(RemoteTestRunner.java:673)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run
(RemoteTestRunner.java:386)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main
(RemoteTestRunner.java:196)


and  when I made some change on 
com.google.gson.DefaultTypeAdapters,then ,it is ok.


public JsonElement serialize(Collection src, Type typeOfSrc, 
JsonSerializationContext context) {
      if (src == null) {
        return JsonNull.createJsonNull();
      }
      JsonArray array = new JsonArray();
      Type childGenericType = null;
      if (typeOfSrc instanceof ParameterizedType) {
        childGenericType = new TypeInfoCollection(typeOfSrc).getElementType
();        
      }
      for (Object child : src) {
          if(child!=null){   // here, if null? 
        Type childType = (childGenericType == null || childGenericType == 
Object.class)
            ? child.getClass() : childGenericType;
        JsonElement element = context.serialize(child, childType);
        array.add(element);
          }else{   //  here, do when it is null
              array.add(null);
          }


      }
      return array;
    }

```

Original issue reported on code.google.com by `iamj...@gmail.com` on 25 Dec 2008 at 1:18""```
What version of Gson are you using?

It appears that this bug was fixed in the 1.2 release.  This bug should not 
resurface
since we added a test to ensure ""null""s in lists are properly serialized
(http://www.google.com/codesearch/p?hl=en#1W0hTXRl0vg/trunk/gson/src/test/java/c
om/google/gson/functional/CollectionTest.java&q=testNullsInListSerialization%20p
ackage:http://google-gson\.googlecode\.com).


A side note:
Inderjeet and I hope to release a new version of Gson, 1.3, before the new year 
(but
that is an aggressive goal).
```

Original comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 2:21
- Changed state: **Fixed**
 =||= ```
I test the Gson 1.3 release. But still has the problem,

java.lang.NullPointerException
    at 
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize
(DefaultTypeAdapters.java:414)

I also checked the URL and ran the CollectionTest.java ,but I found a different 
between your class and mine.
I use
               String s6=g.toJson(t6);
and the test class user 
              Type typeOfList = new TypeToken<List<String>>() {}.getType();
          String json = g.toJson(list, typeOfList);

That why mine failed.



```

Original comment by `iamj...@gmail.com` on 24 Jun 2009 at 5:12
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
84Nested classes cannot be deserializedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:20 PM"```
What steps will reproduce the problem?
1. Create a nested class (inside a test case for instance)
2. Create Gson object
3. Try to deserlialize an instance of the nested class

What is the expected output? What do you see instead?
Expected output is successfull deserailization. Insted an exception is
thrown (No no-args constructor found for class blaablaa please use...)


What version of the product are you using? On what operating system?
1.2.3

Please provide any additional information below.


```

Original issue reported on code.google.com by `miku.kop...@gmail.com` on 27 Dec 2008 at 11:07""```
We have several tests that thoroughly tests the expected behavior around inner 
classes. Is this a static inner class or a regular inner class? For regular 
inner 
classes, Gson would have no way of constructing the instance because of the 
needed 
reference to the outer class. You will need to register an InstanceCreator.

Please provide a code sample so that we can reproduce the bug. 
```

Original comment by `inder123` on 27 Dec 2008 at 1:35
 =||= ```
On a somewhat related note, I have added the ability to exclude all ""inner 
classes""
from serialization/deserialization in r350.

This is useful if you have many classes that contain an inner class, but you do 
not
want to write custom serializers for each of these classes.  This feature would 
help
the user above assuming that they do not want this inner class as part of the
serialization/deserializaiton and they have a default constructor (or Instance
Creator) for the outer class.  The latter assumption must be correct since it is
attempt to deserialize the field.

FYI, a ""static nested class"" is not an ""inner class"".
```

Original comment by `joel.leitch@gmail.com` on 28 Dec 2008 at 3:54
 =||= ```
This got me too - But Joel's comment about a ""static nested class"" vs ""inner 
class""
gave me the clue I needed to solve the problem.

Even if you create a no-args constructor in your inner class it still throws an
exception saying it can't find one.

It might be worth mentioning in the User Guide that to use an inner class it 
needs to
be static or GSON won't be able to find the constructor. Alternatively can the 
code
that looks for the constructor in MappedObjectConstructor check for this 
somehow and
throw a more informative exception message?
```

Original comment by `dirk.mcc...@gmail.com` on 24 Jun 2009 at 3:22
 =||= ```
Changed the User Guide to highlight this fact a little more.  See the ""Nested
Classes"" section.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:45
- Changed state: **WontFix**
 =||= ```
Changed the User Guide to highlight this fact a little more.  See the ""Nested
Classes"" section.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:45
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
85Map<Integer, Object> has string keys after deserializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:22 PM"```
What steps will reproduce the problem?

import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;


public class TestGson
{
    Map<Integer, String> map = new HashMap<Integer, String>();

    public static void main(String[] args)
    {
        TestGson testGson = new TestGson();
        testGson.map.put(1, ""one"");

        Gson gson = new Gson();

        String json = gson.toJson(testGson);
        System.out.println(""Json: ""+json);

        TestGson testGson2 = gson.fromJson(json, TestGson.class);

        System.out.println(""original:"");
        System.out.println(testGson.map.containsKey(1));
        System.out.println(testGson.map.containsKey(""1""));

        System.out.println(""fromJson:"");
        System.out.println(testGson2.map.containsKey(1));
        System.out.println(testGson2.map.containsKey(""1""));
    }
}

Output:

Json: {""map"":{""1"":""one""}}
original:
true
false
fromJson:
false
true


What is the expected output? What do you see instead?

The keys should be integers. It should be possible to check the generic
types of the map and then assign the values accordingly. 


What version of the product are you using? On what operating system?
GSON 1.2.3



```

Original issue reported on code.google.com by `nit...@googlemail.com` on 29 Dec 2008 at 7:53""```
Fix submitted in r363.
```

Original comment by `joel.leitch@gmail.com` on 6 Jan 2009 at 7:11
- Changed state: **Fixed**
 =||= how slove this problem？ i use gson 2.8.0 , has the same problem =||= Hi, I am having the same problem, did anyone knows the solution? Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
86Unexpected EOFGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:22 PM"```
What steps will reproduce the problem?
1. Compile the attached code against gson 1.2.3: javac -classpath
~/src/gossip/thirdpartylib/gson-1.2.3.jar Test.java
2. Run the code: java -classpath
~/src/gossip/thirdpartylib/gson-1.2.3.jar:. Test

What is the expected output? What do you see instead?

Expect to see:
My buffer contains: 9 bytes
abcdef
1

But get:
My buffer contains: 9 bytes
abcdef
Exception in thread ""main"" com.google.gson.JsonParseException: Failed
parsing JSON source: java.io.InputStreamReader@5856a5 to Json
    at com.google.gson.Gson.fromJson(Gson.java:378)
    at com.google.gson.Gson.fromJson(Gson.java:344)
    at Test.main(Test.java:19)
Caused by: com.google.gson.ParseException: Encountered ""<EOF>"" at line 0,
column 0.
Was expecting one of:
    <DIGITS> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""{"" ...
    ""null"" ...
    ""["" ...
    ""true"" ...
    ""false"" ...
    ""-"" ...

    at com.google.gson.JsonParser.generateParseException(JsonParser.java:435)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:374)
    at com.google.gson.JsonParser.parse(JsonParser.java:29)
    at com.google.gson.Gson.fromJson(Gson.java:370)
    ... 2 more


What version of the product are you using? On what operating system?

gson-1.2.3 on OSX 10.5.5

Please provide any additional information below.

Not sure if this is correct usage of Gson....
```

Original issue reported on code.google.com by `dan.cres...@gmail.com` on 30 Dec 2008 at 2:30

Attachments:
- [Test.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-86/comment-0/Test.java)
- [Test.class](https://storage.googleapis.com/google-code-attachments/google-gson/issue-86/comment-0/Test.class)""```
I looked at the test that you provided and Gson was not built for this kind of 
Test
Case.  Gson is a tool for converting a JSON structure to a Java object and vice 
versa.

This test case outputs two objects to the Writer, a String and an Integer.  
Therefore
the writer buffer looks like:
""abcdef""1

The above is invalid JSON.  If you'd like to output a String and integer as 
JSON then
you should create a model class the contains these as fields.  For example:

public class Foo {
  private final String a;
  private final int b;

  public Foo() {
    this("""", 0);
  }

  public Foo(String a, int b) {
    this.a = a;
    this.b = b;
  }
}

Foo foo = new Foo(""abcdef"", 1);
myGson.toJson(foo, myWriter);
Foo anotherFoo = myGson.fromJson(myReader, Foo.class);

Or

Foo foo = new Foo(""abcdef"", 1);
String json = myGson.toJson(foo);
Foo anotherFoo = myGson.fromJson(json, Foo.class);

NOTE: Foo will be represented as the following JSON structure:
{""a"":""abcdef"",""b"":1}


I would be possible for us to allow multiple objects to be parsed from a Reader
object, but I for now I am lowering the Priority of this bug as I feel this a
somewhat of a special case.  Feel free to argue otherwise if the above 
explanation
does not help your use case. 
```

Original comment by `joel.leitch@gmail.com` on 6 Jan 2009 at 5:36
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
This is not a bug as it was invalid JSON.  The above suggestion to serialize 
based on
the newline in a writer doesn't makes sense either because JSON get be 
submitted with
newlines.

Closing this off as Gson support serializing a JSON structure to a Java object.
```

Original comment by `joel.leitch@gmail.com` on 27 Mar 2009 at 6:38
- Changed state: **Invalid**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
87java.util.Properties does not get deserialized properlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:23 PM"```
See discussion at:
http://groups.google.com/group/google-gson/browse_thread/thread/f70060e56b7d7015
```

Original issue reported on code.google.com by `inder123` on 31 Dec 2008 at 12:42""```
This is a valid bug. confirmed in r360
```

Original comment by `inder123` on 31 Dec 2008 at 12:43
 =||= ```
Fixed the bug in r361 and r362
```

Original comment by `inder123` on 31 Dec 2008 at 1:15
- Changed state: **Fixed**
 =||= Original comment by `joel.leitch@gmail.com` on 12 Jan 2009 at 6:09
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
88gson library on Android throws java.lang.TypeNotPresentExceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:24 PM"```

GSON version:  trunk   (7 January 2009)

Android platform:   Android 1.0 R2 SDK


I can't get GSON to work properly on Android's Dalvik VM.   The Android 
runtime is throwing java.lang.TypeNotPresentException.

I reproduced this bug with the Android SDK emulator and also on the Android
G1 Developer Phone.

Here is the stack trace:

E/jpoco.android.ContactsActivity(  251): Type jpoco.client.Contact not present
E/jpoco.android.ContactsActivity(  251):
java.lang.TypeNotPresentException: Type jpoco.client.Contact not
present
E/jpoco.android.ContactsActivity(  251):        at
org.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:63)
E/jpoco.android.ContactsActivity(  251):        at
org.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav
a:72)
E/jpoco.android.ContactsActivity(  251):        at
org.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes(ListOfTypes.ja
va:68)
E/jpoco.android.ContactsActivity(  251):        at
org.apache.harmony.luni.lang.reflect.ImplForType.getActualTypeArguments(ImplForT
ype.java:40)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:136)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:122)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:73)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:49)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.Gson.fromJson(Gson.java:381)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.Gson.fromJson(Gson.java:329)
E/jpoco.android.ContactsActivity(  251):        at
com.google.gson.Gson.fromJson(Gson.java:305)
E/jpoco.android.ContactsActivity(  251):        at
jpoco.io.Deserializer.deserialize(Deserializer.java:63)
E/jpoco.android.ContactsActivity(  251):        at
jpoco.client.Client.fromString(Client.java:152)


```

Original issue reported on code.google.com by `sean%sea...@gtempaccount.com` on 7 Jan 2009 at 12:13""```

This appears to be a bug in Android's implementation of
java.lang.reflect.ParameterizedType

I've opened an issue in the Android tracker:

http://code.google.com/p/android/issues/detail?id=1760


```

Original comment by `sean%sea...@gtempaccount.com` on 9 Jan 2009 at 9:37
 =||= ```
I installed the Android SDK 1.5 Preview last night.   Using the emulator, I can
confirm that this bug is resolved.

I'll retest when Android SDK 1.5 Final becomes available.

```

Original comment by `sean%sea...@gtempaccount.com` on 14 Apr 2009 at 4:16
 =||= ```
Thanks for testing this on Android SDK 1.5. We are glad that the issues have 
been 
resolved but if you find anything that is broken, please reopen the bug and we 
would 
be happy to fix it then.
```

Original comment by `inder123` on 15 Apr 2009 at 9:20
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
89Use String.valueOf() for numeric and boolean typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:26 PM"```
Currently, if gson tries to convert a JSON integer into a String, it just
tries casting, which throws an exception.  It should be smart enough to use
String.valueOf() for numeric and boolean types.

See discussion
http://groups.google.com/group/google-gson/browse_thread/thread/86e023adede4394c
#
for more info.

```

Original issue reported on code.google.com by `tobini...@gmail.com` on 9 Jan 2009 at 1:46""```
Fixed submitted in r328.
```

Original comment by `joel.leitch@gmail.com` on 9 Jan 2009 at 7:28
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
90Include a default serializer for exceptionsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:26 PM"```
What steps will reproduce the problem?
1. Extend Exception and call the no-arg constructor
2.
3.

What is the expected output? What do you see instead?
You should get deserialized json data.

Rather, a ciruclar reference is detected and the object cannot be
deserialized to json. However, if you explicitly call the 2-arg constructor
with (null, null), it will deserialize to json correctly.

What version of the product are you using? On what operating system?


Please provide any additional information below.


```

Original issue reported on code.google.com by `davids...@google.com` on 9 Jan 2009 at 6:59""```
A related discussion is here:
http://groups.google.com/group/google-gson/browse_thread/thread/6b6dc35deef5ba78
```

Original comment by `joel.leitch@gmail.com` on 9 Jan 2009 at 7:35
 =||= ```
Deferred for a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 8:59
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:01
- Removed labels: **Milestone-Release1.5**
 =||= ```
The underlying problem is that exceptions default to being caused by 'this'. 
You can work-around this by writing a custom serializer & deserializer for 
exceptions.

(If we fix issue 164, you'll only have to register ""Throwable"" for this to work 
for most exceptions)
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:40
- Changed title: **Include a default serializer for exceptions**
- Added labels: **Type-Enhancement**, **Milestone-Undefined**
- Removed labels: **Type-Defect**
 =||= ```
registerTypeHierarchyAdapter() makes this relatively easy. We won't support 
this in the framework.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:42
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
91Gson should allow developers to register their own field naming policiesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:28 PM"```
See the discussion at: http://groups.google.com/group/google-
gson/browse_thread/thread/cb441a2d717f6892?hl=en
```

Original issue reported on code.google.com by `inder123` on 10 Jan 2009 at 4:13""```
Fixed in r392
```

Original comment by `inder123` on 27 Mar 2009 at 6:34
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
92Gson Contexts should allow storing some stateGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:29 PM"```
See discussion at http://groups.google.com/group/google-
gson/browse_thread/thread/2850010691ea09fb?hl=en
```

Original issue reported on code.google.com by `inder123` on 10 Jan 2009 at 4:24""```
Storing state in a shared map will compromise thread-safety. So, if we were to
address this in Gson, we should be using ThreadLocal. However, that doesn't 
really
seem all that more convenient than the clients using ThreadLocal directly. So, 
we
decided not to implement this feature.
```

Original comment by `inder123` on 12 Mar 2009 at 8:59
- Changed state: **WontFix**
 =||= ```
In case the feature is rejected, please attach the recipe on how to use 
ThreadLocal
variable. Solving my problem, my custom deserialization of Json element depends 
on
its parent element's data. There is no way to get the parent from within of:

public JDataFieldModel deserialize(JsonElement json, Type typeOfT,
JsonDeserializationContext context) throws JsonParseException
{
   ... json.getParent().get(""field""); ?
}
```

Original comment by `Anton.Troshin@gmail.com` on 18 Mar 2010 at 10:33
 =||= Can anyone ""attach the recipe on how to use `ThreadLocal`""?
 =||= For ThreadLocal example, see http://www.javacreed.com/gson-deserialiser-example/ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
93Pretty Printing Results in Omission of Comma following a Serialized MapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:30 PM"```
What steps will reproduce the problem?
1. Create a Gson object with pretty printing: new 
GsonBuilder().setPrettyPrinting().create();
2. Serialize an object containing a map.

What is the expected output? What do you see instead?
As pretty JSON: {""baz"":{}""fizzle"":""bar""}

As compact JSON: {""baz"":{},""fizzle"":""bar""}


What version of the product are you using? On what operating system?
1.2.3

Please provide any additional information below.
Here's a simple example that produces the output above and demonstrates the 
problem:

package com.joelpm;

import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class App {
  public static class Foo {
    private Map<String,String> baz;
    private String fizzle;

    public Foo(String fizzle) {
      this.baz = new HashMap<String,String>();
      this.fizzle = fizzle;
    }
  }

  public static void main(String[] args) {
    Foo quux = new Foo(""bar"");
    Gson gsonPretty = new GsonBuilder().setPrettyPrinting().create();
    Gson gsonRegular = new GsonBuilder().create();
    System.out.println(""As pretty JSON: "" + gsonPretty.toJson(quux));
    System.out.println(""As compact JSON: "" + gsonRegular.toJson(quux));
  }
}



```

Original issue reported on code.google.com by `joel.me...@gmail.com` on 12 Jan 2009 at 10:52""```
This is fixed in the 1.3 beta release.  Added a test in r372 to ensure there is 
no
regression in latter releases.
```

Original comment by `joel.leitch@gmail.com` on 17 Jan 2009 at 10:36
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 1 Oct 2009 at 5:09
- Added labels: **Milestone-Release1.3**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
94Gson1.3 can't handle big number strings with exponentGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:30 PM"```
What steps will reproduce the problem?
public class FindIssue {
    public double largeNumber;
    public static void main(String[] args) {
        Gson gson = new Gson();
        FindIssue f=gson.fromJson(""{largeNumber:1.234567899E8}"",
FindIssue.class);
        System.out.println(f.largeNumber);
    }
}

What is the expected output? What do you see instead?
expected output: 1.234567899E8
instead: Exception in thread ""main"" com.google.gson.JsonParseException:
Failed parsing JSON source: java.io.StringReader@f81843 to Json
    at com.google.gson.Gson.fromJson(Gson.java:386)
    at com.google.gson.Gson.fromJson(Gson.java:329)
    at com.google.gson.Gson.fromJson(Gson.java:305)
    at own.FindIssue.main(FindIssue.java:18)
Caused by: com.google.gson.ParseException: Encountered ""E8"" at line 1,
column 25.
Was expecting one of:
    <E> ...
    ""}"" ...
    "","" ...

    at com.google.gson.JsonParser.generateParseException(JsonParser.java:624)
    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:504)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:50)
    at com.google.gson.JsonParser.parse(JsonParser.java:11)
    at com.google.gson.Gson.fromJson(Gson.java:378)
    ... 3 more

What version of the product are you using? On what operating system?
gson1.3-BETA, Linux (Ubuntu 8.10)

Please provide any additional information below.
Because of some changes in gson1.3, Parser can't detect literal E, it will
always find literal ""E#number#"" as one IDENTIFIER literal which is not
handled in JsonParser.JsonNumber()

```

Original issue reported on code.google.com by `J.Berin...@gmail.com` on 20 Jan 2009 at 10:07""```
This problem occurs because we require + or - after the ""e"" sign. So, 
1.234567899E+8
will work fine.

```

Original comment by `inder123` on 4 Mar 2009 at 6:52
 =||= ```
But Gson itself produce such json without + or - after e and it is a valid 
number
format. Following code produce the same Exception (gson1.3 Rev. 389):

public class FindIssue {
    public double largeNumber;
    public static void main(String[] args) {
        Gson gson = new Gson();
        FindIssue fi=new FindIssue();
        fi.largeNumber=1234567899;
        String json=gson.toJson(fi);
        System.out.println(""json: ""+json);
        FindIssue f=gson.fromJson(json, FindIssue.class);
        System.out.println(f.largeNumber);
    }
}
```

Original comment by `J.Berin...@gmail.com` on 5 Mar 2009 at 7:15
 =||= ```
[deleted comment]
```
 =||= ```
J.Beringer is right, Gson itself omits the ""+"" sign after E when emitting 
numbers,
but then throws an exception when trying to parse the string it generated.

According to the spec at json.org, the sign after E is not required.  All of 
these
formats should be recognized:

E+25
E-25
E25

e+25
e-25
e25

inder123, can you remove the sign requirement from your grammar?

```

Original comment by `alexande...@gmail.com` on 5 Mar 2009 at 9:28
 =||= ```
[deleted comment]
```
 =||= ```
Fixed in r390. Updated Gson grammar to support floating point numbers without 
the +/-
sign after E. This was a bit tricky since E8 matches an identifier as well, and 
that
was the source of the earlier bug. Added tests in PrimitiveTest to verify this 
behavior.

```

Original comment by `inder123` on 5 Mar 2009 at 11:07
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:39
- Added labels: **Milestone-Release1.3**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
95deserialize map of mapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:33 PM"```
i'm not sure that it is an issue but i haven't found document that explain
how to execute follow code

Map map = new HashMap();
Map nestedMap = new HashMap();
nestedMap.put(""1"", ""1"");
nestedMap.put(""2"", ""2"");
map.put(""nestedMap"", nestedMap);

String json = new Gson().toJson(map);
assertThat(json, is(equalTo(""{\""nestedMap\"":{\""2\"":\""2\"",\""1\"":\""1\""}}"")));

// in next statements i try to deserialize json to obtain same map of map
Map map2 = new Gson().fromJson(json, Map.class);
String json2 = new Gson().toJson(map2);
assertThat(json, is(equalTo(json2)));

```

Original issue reported on code.google.com by `luca.marrocco` on 21 Jan 2009 at 12:46""```
Added tests for serialization and deserialization of map of maps in r396

The tests pass currently, so we need an exact case that fails before we can 
address it.
```

Original comment by `inder123` on 12 Mar 2009 at 8:54
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
96StackOverflowError with long CollectionsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:33 PM"```
What steps will reproduce the problem?
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;


public class TestGson
{
    private String name;
    private String value;

    public TestGson()
    {
    }


    /**
     * @param name
     * @param value
     */
    public TestGson(String name, String value)
    {
        super();
        this.name = name;
        this.value = value;
    }


    public static void main(String[] args)
    {
        List<TestGson> list = new ArrayList<TestGson>(10000);

        for (int x = 0; x < 10000;x++)
        {
            list.add(new TestGson(""name""+x,""value""+x));
        }

        Gson gson = new Gson();

        String json = gson.toJson(list);
        System.out.println(""Json: ""+json);

        Type collectionType = new TypeToken<ArrayList<TestGson>>(){}.getType();

        List<TestGson> list2 = gson.fromJson(json,collectionType);

    }
}

What is the expected output? What do you see instead?

The stack trace looks as follows:

Exception in thread ""main"" com.google.gson.JsonParseException: Failed
parsing JSON source: java.io.StringReader@1b9ce4b to Json
    at com.google.gson.Gson.fromJson(Gson.java:380)
    at com.google.gson.Gson.fromJson(Gson.java:321)
    at TestGson.main(TestGson.java:48)
Caused by: java.lang.StackOverflowError
    at com.google.gson.SimpleCharStream.readChar(SimpleCharStream.java:198)
    at
com.google.gson.JsonParserTokenManager.jjMoveNfa_0(JsonParserTokenManager.java:5
84)
    at
com.google.gson.JsonParserTokenManager.jjStartNfaWithStates_0(JsonParserTokenMan
ager.java:165)
    at
com.google.gson.JsonParserTokenManager.jjMoveStringLiteralDfa0_0(JsonParserToken
Manager.java:172)
    at
com.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:
935)
    at com.google.gson.JsonParser.jj_ntk(JsonParser.java:396)
    at com.google.gson.JsonParser.JsonString(JsonParser.java:274)
    at com.google.gson.JsonParser.Pair(JsonParser.java:76)
    at com.google.gson.JsonParser.Members(JsonParser.java:61)
    at com.google.gson.JsonParser.Members(JsonParser.java:65)
    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)
    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)
    at com.google.gson.JsonParser.Elements(JsonParser.java:109)
    at com.google.gson.JsonParser.Elements(JsonParser.java:113)
    at com.google.gson.JsonParser.Elements(JsonParser.java:113)
...


What version of the product are you using? On what operating system?
GSON 1.3

Please provide any additional information below.
It is strange that a linear collection is deserialized using recursion.
This will always fail with large collections. Sooner or later. With my
stack size the limit was something like 8500 elements. 

```

Original issue reported on code.google.com by `nit...@googlemail.com` on 22 Jan 2009 at 9:40""```
Added performance tests in r388 

On my machine (a dual-processor 64 bit ubuntu with 8GB RAM), Gson was able to
serialize a collection of 1.4 million objects. The deserializer threw a stack
overflow error in the parser beyond a collection of 87,000 objects. 
```

Original comment by `inder123` on 3 Mar 2009 at 10:23
 =||= Original comment by `inder123` on 3 Mar 2009 at 10:24
- Changed state: **WontFix**
 =||= ```
The parser uses a production to match a collection, and that is implemented by 
JavaCC
using recursion. If someone proposes a more efficient production, we will be 
happy to
incorporate it.
```

Original comment by `inder123` on 3 Mar 2009 at 10:39
 =||= ```
One of the stated goals of GSON is to ""Support arbitrarily complex objects 
(with deep 
inheritance hierarchies and extensive use of generic types)"".

I guess you should change it to 'arbitrarily complex objects (except 
collections with 
large numbers of items)'.

I use a byte array to store the bytes of a file.  I can serialize this array w/ 
GSON 
just fine, but somehow this object is too complex to be parsed?  A byte array?  
Really?
```

Original comment by `kenot...@gmail.com` on 13 Jul 2009 at 8:33
 =||= ```
Can you give some more information on how large the byte array is?
```

Original comment by `inder123` on 13 Jul 2009 at 8:38
 =||= ```
It's a megabyte-ish file, so about a million items.  The point though is that 
it 
shouldn't matter how many items are in it, it's perhaps the most basic data 
type in all 
of Java, and if GSON can't parse it, then perhaps GSON shouldn't be generating 
it in 
the first place.
```

Original comment by `kenot...@gmail.com` on 13 Jul 2009 at 8:48
 =||= ```
Well, that is not how parsers work unfortunately. They have to match a 
production, 
which in this case is for matching a String (I presume this is how you are 
storing 
bytearrays). A String may seem like a simple thing but it actually require a 
fair 
amount of escaping and unescaping character by character. 

In an earlier version of Gson, we used a recursive production to match a String 
as an 
array of characters. This resulted in a StackOverflowError for 100KB strings. 
In a 
later version, I revised it to a production that does a single token match. 
Last I 
tested, Gson could handle strings of over 20MB in size. 

Can you give us more details (may be post a code snippet) on how are the bytes 
stored? Are you using a byte[] or are you using a String?
```

Original comment by `inder123` on 13 Jul 2009 at 9:03
 =||= ```
Wrote performance tests for byte array serialization and deserialization in 
r430. Gson 
failed at serializing arrays beyond 8MB, but for deserialization it failed for 
arrays 
as small as 32KB. So, seems like we have a real performance issue here that we 
need 
fixing.
```

Original comment by `inder123` on 13 Jul 2009 at 10:29
- Changed state: **Accepted**
 =||= ```
Ok, I revised my tests to determine the limit somewhat more precisely. Gson 
failed at 
deserialization on byte arrays of size beyond 80k. 

The primary reason is that Gson matches an Array as a production of Array 
elements. 
The Elements themselves are matched with a recursive production (and therein 
lies the 
problem): 

private JsonArray JsonArray() :
{ JsonArray array = new JsonArray(); }
{
  ""["" [ Elements(array) ] ""]""
  {
    array.reverse();
    return array;
  }
}

private void Elements(JsonArray array) :
{
  JsonElement element;
}
{
  element=JsonValue() [ "","" Elements(array) ]
  { array.add(element); }
}

Any suggestions from anyone on how to improve these productions?
```

Original comment by `inder123` on 13 Jul 2009 at 10:45
 =||= ```
Your production appears to approach N^2 in memory usage, since you pass the 
entire 
parsed array into the recursive call.  The top-level recursion gets a 0-item 
JsonArray, the first inner recursion gets a 1-item array, and so on, up to N 
items.  
But those recursive calls will stay on the stack until the whole list is 
parsed, so 
you end up with 1+2+3+...+N items on the stack.

What if you built the JsonArray iteratively in the top-level rule instead, so 
that 
the single 'result' array could be updated without passing it into another 
rule?    I 
haven't played with parser generators since ANTLR back in my compiler class, so 
I'm 
not well-versed enough in JavaCC semantics to write up the rule, but I'm 
imagining a 
grammar like this (in EBNF):

    JsonArray : '[' JsonArrayElement ( ',' JsonArrayElement )+ ']'

I'm not sure how that translates to JavaCC, or how you'd get the next element 
back,  
but the point is to not pass a potentially huge data structure around in the 
call 
parameters and build it up iteratively instead.
```

Original comment by `kenot...@gmail.com` on 14 Jul 2009 at 5:54
 =||= ```
If you want to keep your current rules, you could perhaps instead make a single 
globally-scoped JsonArray...so long as you only parse a single array at a time, 
this 
may work better with your current rule...globally-scoped variables are not 
passed on 
the stack like parameters are, so you should be able to scan arrays all the way 
up to 
the size of the JVM's memory.
```

Original comment by `kenot...@gmail.com` on 15 Jul 2009 at 2:12
 =||= ```
[deleted comment]
```
 =||= ```
The limitation is much smaller on devices with limited resources, such as 
Android phones.  I'm running into this 
problem trying to deserialize a string that's about 20k on Android 1.5.

Can anyone think of a constructive way to work around this issue for now?  
Would writing a custom deserializer 
help, or is the problem more low-level than that?
```

Original comment by `mbur...@gmail.com` on 5 Aug 2009 at 5:11
 =||= ```
Unfortunately the problem is more low-level since our JavaCC parser uses 
recursive
productions. The parser gets invoked way before the deserializers are run. 

We will try to address this in our next release, but it would greatly help if 
others
can also provide alternate JavaCC productions for Javascript Arrays.
```

Original comment by `inder123` on 5 Aug 2009 at 8:46
 =||= ```
Recursive rules are fine when your input is guaranteed to be small, but the way 
your 
JsonArray rule is written, you pass the whole array into each recursive 
call...that's just 
plain unnecessary, and it quickly consumes all available memory for even 
moderately-sized 
arrays.  Instead, rephrase your grammar as left-associative rather than 
right-recursive.  
Read values from the left end of the input and immediately add them to the 
output array, then 
consume the comma and iterate.  Something like this:

private JsonArray JsonArray() :
{ JsonArray array = new JsonArray(); JsonElement elem = null; }
{
  ""["" ( elem=JsonValue() {array.add(elem);} ["",""] )* ""]""
  {    return array;  }
}

There's no need for a second Elements() rule here at all, and since the 
elements are read in 
the proper order to begin with, there's no need to reverse the array either.

But also note that this is a rather lax grammar, since it doesn't validate that 
the array is 
proper JSON...the comma is optional only so that the last value is matched, but 
because its 
optional you could have bogus JSON like '[ 12 34, 56 ]' return the incorrect 
array 
(12,34,56).  If that matters to you, I'll leave the solution to you.

I generated this to a java class and plugged in my replacement JsonArray 
implementation into 
the GSON source, then compiled and ran it against 234 KB of json text 
representing a byte 
array of about 64,000 items, and it successfully returned the array.  It was 
horribly slow, 
about 3 minutes, but it did return eventually...not sure why it's so slow, 
perhaps since I 
have done the rule for you here, you can profile it and find out where all the 
time is being 
spent.  You may have other recursive rules that can be similarly re-written to 
reduce your 
parser's memory footprint significantly.

Other than this problem (a major one IMHO), GSON has been great, definitely one 
of the better 
Java <-> JSON converters out there.  Keep up the good work!

PS: when I convert my class to use a String to contain the byte array, it 
serializes and 
deserializes without problems, and extremely quickly too (no 3 minute wait).  I 
see you defer 
this parsing to StringUnmarshaller.  I suspect your parser is doing a lot of 
backtracking, 
spinning its wheels trying to find a matching production, but a profiler will 
tell you for 
sure.
```

Original comment by `kenot...@gmail.com` on 14 Aug 2009 at 8:38
 =||= ```
Fixed in r438
Thanks for the tip, kenotron. I was able to build on your productions to come 
up with
something that enforces the proper JSON rules.
```

Original comment by `inder123` on 22 Aug 2009 at 1:04
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= ```
Lovely!  Preliminary testing on r438 seems to work fine for me
```

Original comment by `mbur...@gmail.com` on 22 Aug 2009 at 2:10
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
97JsonNull.createJsonNull should be public, constructor should be privateGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:38 PM"```
Version: gson-1.3 from http://google-gson.googlecode.com/svn/mavenrepo

I assume it's not public because the original intention was to only need it
in automatically gson serialization. However I'm writing a serializer and
would like to return json null programmatically when desired (say, to
handle GsonBuilder#serializeNulls).
```

Original issue reported on code.google.com by `estebis...@gmail.com` on 28 Jan 2009 at 4:51""```
Any reason why you will not prefer to use just new JsonNull()?


```

Original comment by `inder123` on 28 Jan 2009 at 5:02
 =||= ```
No, that's what I'm doing now, but why restrict the singleton to internal 
usage? Why
then allow new instance and dilute the meaning of the singleton? As it stands 
now, on
deserialization, one would have to test (jsonElem instanceof JsonNull) instead 
of
(JsonNull.getInstance().equals(jsonElem)).
```

Original comment by `estebis...@gmail.com` on 28 Jan 2009 at 6:14
 =||= ```
We certainly can not make the constructor private anymore since that will break 
backwards compatibility. Also, all instance of JsonNull are equal to each other 
so 
you can just use equals(). 

We (Joel and I, the creators of this library) had lots of discussions on making 
the 
factory method public, and deprecate the constructor. We sort-of concluded that 
new 
JsonNull() is more aligned with how other JsonElements are created so was 
slightly 
preferred. The performance overhead is probably not all that significant. So, I 
wanted to get some external input, and hence I am trying to understand your 
perspective.
```

Original comment by `inder123` on 29 Jan 2009 at 2:20
 =||= ```
I see. Fair enough. No, it isn't a performance concern. That would be premature 
to
say the least. It was more of an inconsistency that stood out for me (enough to 
say
something I guess). Somehow I saw it and thought for a moment that I should be 
using
it (because it returned a singleton, usually a very proactive mechanism by a 
class
author).

Assuming that new JsonNull is the intended way going forward, it might not hurt 
to
put a note to this effect on the createJsonNull method, perhaps even deprecate 
it.

All that said, we can end this issue as ""wontfix"".
```

Original comment by `estebis...@gmail.com` on 29 Jan 2009 at 2:31
 =||= ```
We will add the comment. 
```

Original comment by `inder123` on 29 Jan 2009 at 2:38
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
98[deleted issue]Google Code ExporterGoogleCodeExporter03/19/15, 06:23:40 PM"```
[deleted issue]
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
99Invalid serialization of a Map with null valuesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:40 PM"```
What steps will reproduce the problem?

public class GsonTest {

    private static class TestType {
        Map<String, String> map = new TreeMap<String, String>();
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        TestType t = new TestType();
        t.map.put(""name1"", null);
        t.map.put(""name2"", ""value2"");

        Gson gson = new Gson();
        System.out.println(gson.toJson(t));
    }

}

The output is:
{""map"":{,""name2"":""value2""}}

Note the extra comma at the beginning of the map.

The expected output is:
{""map"":{""name2"":""value2""}}


What version of the product are you using? On what operating system?

This is gson 1.2.3 on Ubuntu 8.10 64-bit.



```

Original issue reported on code.google.com by `gary...@gmail.com` on 8 Feb 2009 at 6:55""```
Added tests in r387 but can not reproduce the bug
```

Original comment by `inder123` on 3 Mar 2009 at 9:09
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
100deserializing a Set requires elements to implement Comparable, when ordering is not requiredGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:41 PM"```
What steps will reproduce the problem?
1. See attached beans Tree and Monkey
2. Run this test:

    Tree tree = new Tree();
    tree.getMonkeys().add(new Monkey());
    tree.getMonkeys().add(new Monkey());

    String serialised = json.toJson(tree);
    Tree newTree = json.fromJson(serialised, Tree.class);

What is the expected output? What do you see instead?

Deserialize fails, Caused by: java.lang.ClassCastException:
com.jpmorgan.ibmlbus.beans.serialise.Monkey cannot be cast to
java.lang.Comparable
    at java.util.TreeMap.put(Unknown Source)
    at java.util.TreeSet.add(Unknown Source)
    at
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp
eAdapters.java:404)
    at
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp
eAdapters.java:369)
    at
com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExc
eptionWrapper.java:50)
    ... 27 more

The point is that Monkeys have no natural ordering. We should be able to
use them in a Set though, because uniqueness is fine.

What version of the product are you using? On what operating system?
1.2.3

Please provide any additional information below.


```

Original issue reported on code.google.com by `aaron.b...@gmail.com` on 12 Feb 2009 at 4:08

Attachments:
- [Tree.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Tree.java)
- [Monkey.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Monkey.java)""```
Hi - could you please delete the package names from the attached beans? My 
error.
```

Original comment by `aaron.b...@gmail.com` on 12 Feb 2009 at 4:22
 =||= ```
Sorry, I do not have the ability to edit the original bug report. 
```

Original comment by `inder123` on 12 Mar 2009 at 2:00
 =||= ```
Fixed this bug in r394 by using HashSet instead of TreeSet while instantiating 
sets
during deserialization
```

Original comment by `inder123` on 12 Mar 2009 at 2:00
- Changed state: **Fixed**
 =||= ```
Updated in r395 to ensure that sorted sets continue to use TreeSets and HashSet 
is
used for other sets.
```

Original comment by `inder123` on 12 Mar 2009 at 6:17
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:39
- Added labels: **Milestone-Release1.3**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
101Does gson can support a method to create the BasicDynaBean from the json string?Google Code ExporterGoogleCodeExporter03/19/15, 06:23:43 PM"```
just like the json-lib does. thanks
```

Original issue reported on code.google.com by `killvin....@gmail.com` on 13 Feb 2009 at 9:32""```
Can you give an example of what is it that you would like us to support? We are 
not
familiar with json-lib. Thanks.
```

Original comment by `inder123` on 12 Mar 2009 at 2:01
 =||= ```
Deferred for a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 8:59
- Added labels: **Milestone-Release1.5**
 =||= ```
Implementing this would require a dependency on json-lib.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:39
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
102ClassCastException in TypeInfoFactoryGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:44 PM"```
Getting exception when trying to jsonify a internally created object. Stack
trace is 

java.lang.ClassCastException: java.lang.Class cannot be cast to
java.lang.reflect.ParameterizedType
    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:91)
    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)
    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)
    at
com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)
    at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at
com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio
nVisitor.java:163)
    at
com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis
itor.java:137)
    at
com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit
or.java:132)
    at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at
com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio
nVisitor.java:163)
    at
com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis
itor.java:137)
    at
com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit
or.java:132)
    at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at
com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio
nVisitor.java:163)
    at
com.google.gson.JsonSerializationVisitor.addAsArrayElement(JsonSerializationVisi
tor.java:150)
    at
com.google.gson.JsonSerializationVisitor.visitCollection(JsonSerializationVisito
r.java:78)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:137)
    at
com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio
nVisitor.java:163)
    at
com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis
itor.java:137)
    at
com.google.gson.JsonSerializationVisitor.visitCollectionField(JsonSerializationV
isitor.java:103)
    at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:174)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at
com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio
nVisitor.java:163)
    at
com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis
itor.java:137)
    at
com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit
or.java:132)
    at
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
    at
com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte
xtDefault.java:47)
    at com.google.gson.Gson.toJson(Gson.java:273)
    at com.google.gson.Gson.toJson(Gson.java:229)
    at com.google.gson.Gson.toJson(Gson.java:209)
    at com.company.it.widgetserver.AjaxServlet.doGet(AjaxServlet.java:138)


What steps will reproduce the problem?
Create classes with generics and try to convert to json

What version of the product are you using? On what operating system?
Tried with 1.3, 1.2.3, 1.2.2 and still getting same error.  It is on Windows.


```

Original issue reported on code.google.com by `brsan...@gmail.com` on 19 Feb 2009 at 8:07""```
Please post a code sample that we can use to reproduce this problem.
```

Original comment by `inder123` on 11 Mar 2009 at 9:56
 =||= ```
Is this related to Issue #40?
```

Original comment by `joel.leitch@gmail.com` on 12 Mar 2009 at 5:35
 =||= ```
I've got the same error with class: 

public class BaseEvent<C extends IContent> implements IEvent<C> {
    //private static final Log log = LogFactory.getLog( BaseEvent.class );

    private final long timestamp;
    private Severity severity;
    private final C content;
    private transient final Object source;
    private final Tag tag;

    public BaseEvent( final Tag tag,
                      final Severity severity,
                      final C content,
                      final Object source,
                      final long timestamp ) {
        if ( tag == null ) {
            throw new IllegalArgumentException( ""Type can't be null"" );
        }
        if ( severity == null ) {
            throw new IllegalArgumentException( ""Severity can't be null"" );
        }
        if ( source == null ) {
            throw new IllegalArgumentException( ""Source can't be null"" );
        }

        this.tag = tag;
        this.severity = severity;
        this.content = content;
        this.source = source;
        this.timestamp = timestamp;
    }

    public BaseEvent( final Tag tag,
                      final Severity severity,
                      final C content,
                      final Object source ) {
        this( tag, severity, content, source, System.currentTimeMillis() );
    }

    public Tag getTag() {
        return tag;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public Severity getSeverity() {
        return severity;
    }

    public synchronized void promote( final Severity s ) {
        if ( s.more( severity ) ) {
            severity = s;
        }
    }

    public C getContent() {
        return content;
    }

    public Object getSource() {
        return source;
    }

    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append( ""Event["" );
        sb.append( tag ).append( ""; "" );
        sb.append( severity ).append( ""; "" );
        sb.append( new Date( timestamp ) );
        sb.append( ""]\n"" );
        sb.append( content );
        return sb.toString();
    }
}
```

Original comment by `chere...@gmail.com` on 1 Apr 2009 at 7:25
 =||= ```
We have enough tests that use similar kind of types in Gson. See
http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/
google/gson/functional/ParameterizedTypesTest.java
for examples. 

I also took the specified test and ran it without any problems. One thing to 
note is
that if you are directly serializing/deserializing an instance of BaseEvent 
then you
need to pass the correct parameterized type using the TypeToken idiom. See
http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializ
ing-Gener
for examples.
```

Original comment by `inder123` on 1 Apr 2009 at 10:17
- Changed state: **Invalid**
 =||= ```
r415 includes a fix to show a more helpful message when this situation occurs.
```

Original comment by `inder123` on 1 Apr 2009 at 10:27
 =||= ```
Well, may be it is not right place to ask, but I do not really understand why I 
require to specify additional params just to serialize generalized type. JS is 
easy 
typed, why you need so much type info to serialize to it? Is it any option to 
serialize ""by real type"", as if all generics are converted to their <?> version?
```

Original comment by `chere...@gmail.com` on 8 Apr 2009 at 9:14
 =||= ```
Unfortunately, this is a Java issue. The way Java Generics were designed, an 
pbject
loses all the Generics information (because of type-erasure).  This is 
generally not
a problem during serialization except in the cases like above. In your example,
BaseEvent class defines its content field as type C (which is called a 
TypeVariable).
After type-erasure, the object's field has no information as to what C actually 
maps
to. Gson uses some tricks to figure that out, but for that it needs the generic 
type
information as specified. 

```

Original comment by `inder123` on 8 Apr 2009 at 6:44
 =||= ```
Yes, I understand about type-erasure. I do understand about how it complicate 
deserializing json -> java too. But I do not 
understand what prevent Gson from serializing, say,  class Struct<C>{ private C 
content; } as if it was class Struct{ private 
Object content;} ? As far, as I know, second is exactly what we'll have in 
bytecode after type-erasure, and exactly what 
we'll see throught Reflection API. In any case, object, reffered by field 
""content"" will be serialized using it actual type, 
not declared one -- why we ever need field declared type? May be I miss 
something?



```

Original comment by `chere...@gmail.com` on 9 Apr 2009 at 11:59
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
103ClassCastException in 1.3b2 from line 91 in TypeInfoFactory.javaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:46 PM"```
http://groups.google.com/group/google-
gson/browse_thread/thread/50e5c3b80ac7c7ab?hl=en


```

Original issue reported on code.google.com by `inder123` on 22 Feb 2009 at 6:27""```
Added tests to reproduce this issue in r393
The tests pass at the moment, so either this is not a valid issue or we need 
more
information in the bugreport.
```

Original comment by `inder123` on 12 Mar 2009 at 1:05
- Changed state: **Invalid**
 =||= ```
This test case fails with v1.3
```

Original comment by `j.matthe...@gmail.com` on 24 Apr 2009 at 2:20

Attachments:
- [ParameterizedTypesTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-103/comment-2/ParameterizedTypesTest.java)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
104Expose FieldNamingPolicyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:47 PM"```
http://groups.google.com/group/google-
gson/browse_thread/thread/27a454d1d289bbdd?hl=en


```

Original issue reported on code.google.com by `inder123` on 22 Feb 2009 at 8:11""```
Fixed in r392
```

Original comment by `inder123` on 11 Mar 2009 at 9:53
- Changed state: **Fixed**
 =||= ```
Issue 91 has been merged into this issue.
```

Original comment by `inder123` on 27 Mar 2009 at 6:34
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:38
- Added labels: **Milestone-Release1.3**
 =||= ```
Great job on this one!  I starting using this today, very useful :)
```

Original comment by `jpsw...@gmail.com` on 27 Mar 2009 at 8:16
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
105ClassCastException thrown instead of ParseErrorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:48 PM"```
What steps will reproduce the problem?
1. class TestObjectA { TestObjectB b }
2. String two = {""b"" : [ ]}
3. new Gson().fromJson(two, TestObjectA.class)

What is the expected output? What do you see instead?

Expected: parse error

Actual: ClassCastException: com.google.gson.JsonArray cannot be cast to
com.google.gson.JsonObject

What version of the product are you using? On what operating system?

v1.2.2 on Linux


Please provide any additional information below.


```

Original issue reported on code.google.com by `ch...@gmail.com` on 4 Mar 2009 at 7:12""```
Full stacktrace below:

ClassCastException: com.google.gson.JsonArray cannot be cast to
com.google.gson.JsonObject

java.lang.ClassCastException
  at com.google.gson.JsonElement.getAsJsonObject(JsonElement.java:78)
  at
com.google.gson.JsonObjectDeserializationVisitor.visitPrimitiveField(JsonObjectD
eserializationVisitor.java:129)
  at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:177)
  at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
  at
com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor
.java:131)
  at
com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio
nVisitor.java:93)
  at
com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese
rializationVisitor.java:75)
  at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)
  at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)
  at
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:75)
  at
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:47)
  at com.google.gson.Gson.fromJson(Gson.java:379)
  at com.google.gson.Gson.fromJson(Gson.java:327)
  at com.google.gson.Gson.fromJson(Gson.java:303)
```

Original comment by `ch...@gmail.com` on 4 Mar 2009 at 7:13
 =||= ```
You have an array and you are trying to map it to an object. Objects have 
name-value
pairs whereas Arrays only have values. This mapping can not be made to work in 
Gson.
```

Original comment by `inder123` on 11 Mar 2009 at 8:53
- Changed state: **Invalid**
 =||= ```
Yep, I understand, but the expected output should be a JsonParseError, not a
ClassCastException -- is this correct?

Am I supposed to try/catch ClassCastException when parsing untrusted input?
```

Original comment by `ch...@gmail.com` on 20 Mar 2009 at 2:41
 =||= ```
I don't think catching a ClassCastException is a good idea.  I don't know if 
throwing
a ""JsonParseException"" is the right thing to do either because it is valid JSON.

It's more like bad user input which sounds like an ""IllegalArgumentException"" 
should
be thrown in this case.

Thoughts?

```

Original comment by `joel.leitch@gmail.com` on 20 Mar 2009 at 3:13
- Changed state: **Accepted**
 =||= ```
That's fine with me. I consider both malformed JSON and
valid-JSON-that-doesn't-match-what-I'm-parsing to be parse errors, but I'm find
catching a second exception if that's the desired behavior.
```

Original comment by `ch...@gmail.com` on 26 Mar 2009 at 10:43
 =||= ```
On second thoughts, we decided to consider all such errors as parsing errors, 
so we 
will now be throwing JsonParseException if the input didn't match what was 
expected 
(even if it was valid JSON).
```

Original comment by `inder123` on 28 Mar 2009 at 5:54
 =||= ```
Fixed in r404
```

Original comment by `inder123` on 28 Mar 2009 at 5:55
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.3**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
106Please support java.util.Calendar by defaultGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:50 PM"```
What steps will reproduce the problem?
1. Create a Class Customer with 
Customer {
 String name;
 Calendar timestamp;
}
2.  Try Serializing this class and you will get an exception for Calendar

3.
            Customer c = new Customer();
        c.setName(""jjj sdss"");
        c.setRegTime(Calendar.getInstance());
                Gson gson = new Gson();
        String json = gson.toJson(c);

What is the expected output? What do you see instead?
Calendar seems to be not supported


What version of the product are you using? On what operating system?


Please provide any additional information below.
java.lang.RuntimeException: Unable to invoke no-args constructor for class
java.util.Calendar. Register an InstanceCreator with Gson for this type may
fix this problem.



Can java.util.Calendar be supported by default ??? 

```

Original issue reported on code.google.com by `njun...@gmail.com` on 5 Mar 2009 at 8:01""```
Fixed in r391 by serializing a calendar object to something like
{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}

I wonder if there is a standard way of serializing a calendar object that we 
should
be using.
```

Original comment by `inder123` on 11 Mar 2009 at 9:48
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 27 Mar 2009 at 7:38
- Added labels: **Milestone-Release1.3**
 =||= @GoogleCodeExporter Yeah the unofficial standard for json dates is ISO 8601. What the hey
 =||= @GoogleCodeExporter how would I parse a string in format ""yyyy-MM-dd"" into Calendar object using GSON ?? 
 =||= It would be nice to support `java.util.Calendar` model attributes for converting from an ISO 8601 format like `2016-02-29T15:00:00+02:00`, in order to store both the UTC datetime _and_ the time zone data.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
107toString on JsonPrimitve does not produce valid JsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:51 PM"```
What steps will reproduce the problem?
1. Compile attached file GsonTest.java
2. Run it

What is the expected output? What do you see instead?
The line break and tab should be escaped. Currently they are not escaped and
therefore the output is not valid Json. The documentation for the toString
method claims that it is.

What version of the product are you using? On what operating system?
1.3b2 on Linux
```

Original issue reported on code.google.com by `dennis.b...@gmx.net` on 11 Mar 2009 at 5:46

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-107/comment-0/GsonTest.java)""```
This is a valid bug, but relatively hard to fix since we would need to allow a 
way
for the user to specify whether to escape Html characters or not. 
```

Original comment by `inder123` on 11 Mar 2009 at 9:06
- Changed state: **Accepted**
 =||= ```
What do you mean with HTML character?

The JSON specification <http://www.ietf.org/rfc/rfc4627.txt> clearly specifies 
in the 
last sentence of the first paragraph of section 2.5. Strings which characters 
must be
escaped.
```

Original comment by `dennis.b...@gmx.net` on 11 Mar 2009 at 9:34
 =||= ```
The contents of the string may contain HTML characters and Gson provides a 
GsonBuilder setting to escape them. We would have to provide a similar setting 
to 
the Constructor (or some other way) in the toString() method to make it work 
correctly. For now, I have updated the Javadoc to remove this claim. But I will 
leave this bug open because it is worth fixing in future.
```

Original comment by `inder123` on 27 Mar 2009 at 7:31
 =||= ```
I'm not sure what this issue has to do with HTML characters.  To produce valid 
JSON,
you just need to escape ""s and the control characters listed in the JSON spec:
http://www.json.org/

If the string being escaped contains HTML, then that's fine, but escaping for 
HTML
should be outside of the purview of this library since this library deals with 
JSON
not HTML.

Unless there is something I am missing?
```

Original comment by `z13g...@gmail.com` on 14 Apr 2009 at 8:31
 =||= ```
I think I understand the issue.  You are depending on the toString(Appender) 
method
in JsonPrimitive to generate unescaped JSON so that the Serializer can do the 
escaping.

I am running into the issue because I'm not using the Gson class at all because 
I
don't need the Json <--> Object stuff.  I am just parsing JSON via JsonParser to
generate the JsonElements then modifying it and outputting it.

IMHO, the toString method on the JsonElements should return properly escaped 
JSON. 
If it doesn't, then the method isn't of much use except by the internal methods 
since
the JSON it is generating is invalid.

Is my interpretation correct?  If it is, I'm still not clear how the HTML 
escaping
fits into the problem.
```

Original comment by `z13g...@gmail.com` on 14 Apr 2009 at 9:29
 =||= ```
I agree that this is a valid problem. The toString() method should just do JSON
escaping and not HTML escaping (setting through GsonBuilder). 
```

Original comment by `inder123` on 14 Apr 2009 at 9:34
- Added labels: **Milestone-Release1.4**
 =||= ```
FYI... In the meantime, here is a quicky patch which adds the functionality via 
a
second toEscapedString method.
```

Original comment by `z13g...@gmail.com` on 14 Apr 2009 at 9:48

Attachments:
- [escape.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-107/comment-7/escape.patch)
 =||= ```
[deleted comment]
```
 =||= Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:49
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
108Error during parsing hex codes.Google Code ExporterGoogleCodeExporter03/19/15, 06:23:53 PM"```
What steps will reproduce the problem?

1. Try to parse string value with hex codes.

{
""title"" : ""The Dun \x26 Bradstreet Corporation"",
""id"" : ""10242""
}

we get:

Caused by: com.google.gson.ParseException: Encountered ""\"""" at line 2,
column 20.
Was expecting one of:
    <DIGITS> ...
    ""null"" ...
    ""NaN"" ...
    ""Infinity"" ...
    <BOOLEAN> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""{"" ...
    ""["" ...
    ""-"" ...


What is the expected output? What do you see instead?

There must not be any errors!

What version of the product are you using? On what operating system?

1.3.b

Please provide any additional information below.


```

Original issue reported on code.google.com by `alexande...@gmail.com` on 24 Mar 2009 at 8:38""```
Hex escapes are not a part of the JSON specification - or JSON RFC4627.
ParseException is the correct behavior when provided with invalid JSON.

The correct escape in your example is \u0026 instead of \x26.

Note: I am not a developer on this project, or with google.


```

Original comment by `nuutti.k...@gmail.com` on 26 Mar 2009 at 10:57
 =||= ```
As Nuutti points out, this is an invalid bug. You need to use the unicode 
escape 
sequence.
```

Original comment by `inder123` on 27 Mar 2009 at 7:29
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
109Trivial bug in user guideGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:54 PM"```
In the user guide, on collection types, this is said:

----
(Deserialization)
Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();
Collection<Integer> ints2 = gson.fromJson(collectionType, json);
ints2 is same as ints
----

Yet, gson.fromJson is most likely taking the String argument first, and
then the Type arguments.
```

Original issue reported on code.google.com by `nuutti.k...@gmail.com` on 26 Mar 2009 at 1:28""```
Fixed. Thanks for the bug report. This was a vestige from a very early 
implementation 
of Gson where the type parameter actually came first. 
```

Original comment by `inder123` on 27 Mar 2009 at 7:26
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
110splitting the Json to Object into two passGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:54 PM"```
To implement a json-rpc protocol, there are three steps.
First parse the json text to find the callee function and parameter types,
Second, based on type discoverd in first step, deseriallize sub-parts of 
json text into different object.
Third, convert result and other logging info into json.

gson only provided to object  to json  api, make it hard to do the first 
and third step.

This request to split the json to object into two pass.
1\ convert json text to json element tree.
2\ convert json element tree to object.

And split the object to json  into two pass.
1\ convert json element tree to object.
2\ convert json text to json element tree.

Is it possibel to add something like 
public JsonElement toJsonElement(Object src, Type typeOfSrc);
and
public JsonElement toJsonElement(string json);

Thanks.

I have a example.


```

Original issue reported on code.google.com by `yufanyu...@gmail.com` on 28 Mar 2009 at 1:20

Attachments:
- [gson.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-110/comment-0/gson.txt)""```
We explored making a change similar to this in 
http://code.google.com/p/google-gson/issues/detail?id=57 

We plan to release Gson 1.4 beta soon and in that we will provide a 
toJsonTree() or some similarly named 
method that will address this issue.
```

Original comment by `inder123` on 28 Mar 2009 at 3:11
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**, **Milestone-Release1.4**
- Removed labels: **Type-Defect**
 =||= ```
Fixed in r420  by providing toJsonTree methods in Gson.
```

Original comment by `inder123` on 3 Apr 2009 at 9:52
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
111make JsonPrimitive.getAsObject a public methodGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:55 PM"```
In json-rpc, it's necessary to determining actual type of a JsonPrimitive, 
such as Interger, Long or BigInterger. This information can be make available 
by add several is*** function, but make JsonPrimitive.getAsObject a public 
method would be more easily. 

```

Original issue reported on code.google.com by `yufanyu...@gmail.com` on 28 Mar 2009 at 1:33""```
Never mind.
It's the same as using getAsNumber().
Please close this issue.

```

Original comment by `yufanyu...@gmail.com` on 8 Apr 2009 at 2:07
 =||= ```
Closed per the request of yufanyufan
```

Original comment by `inder123` on 8 Apr 2009 at 5:56
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
112Verbose, multi-line formatter for Gson (patch included)Google Code ExporterGoogleCodeExporter03/19/15, 06:23:56 PM"```
Included is a patch to add a verbose, multi-line, one value per line
formatter as discussed in issue 57
(http://code.google.com/p/google-gson/issues/detail?id=57).

The changes to GsonBuilder are just examples and will probably be entirely
different if setFormatter becomes public. I just included them to make the
formatter testable and to have atleast one way of using it myself.

Class names and such have not been really thought out, so feel free to
rename and mangle as much as you wish.

Let me know if there's a need for copyright assignment or such.
```

Original issue reported on code.google.com by `nuutti.k...@gmail.com` on 29 Mar 2009 at 2:17

Attachments:
- [gson-verbose-formatter.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-112/comment-0/gson-verbose-formatter.diff)""```
Issue 143 has been merged into this issue.
```

Original comment by `inder123` on 7 Aug 2009 at 10:48
 =||= ```
We will revisit print formatting in a future release. Meanwhile, you can use 
Gson.toJsonTree method and do the 
formatting yourself.
```

Original comment by `inder123` on 29 Sep 2009 at 8:58
- Added labels: **Milestone-Release1.5**
 =||= ```
The latest code in SVN does one-value-per-line formatting.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:57
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
113Output of single element String arrays not consistent with multi-element String arraysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:57 PM"```
What steps will reproduce the problem?
1. String s = {""hello""};
2. new Gson().toJson(s);
Result: [""hello""]
Should be:  ""[\""hello\""]""

1. String s = {""hello"", ""goodbye""};
2. new Gson().toJson(s);
Result: ""[\""hello\"",\""goodbye\""]"" 
(correct)


What version of the product are you using? On what operating system?
1.2.2, Ubuntu

Please provide any additional information below.

```

Original issue reported on code.google.com by `ehin...@gmail.com` on 2 Apr 2009 at 1:29""```
Uh, you mean, String[] s = {""hello""}, right?
```

Original comment by `a.revolu...@gmail.com` on 13 May 2009 at 11:03
 =||= ```
Yes
```

Original comment by `ehin...@gmail.com` on 13 May 2009 at 4:00
 =||= ```
I am unable to reproduce this issue.  Added tests in r458.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:18
- Changed state: **WontFix**
 =||= ```
Sorry, tests are in r459.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:26
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
114GSON does not handle Object[] wellGoogle Code ExporterGoogleCodeExporter03/19/15, 06:23:58 PM"```
What steps will reproduce the problem?
1. Create a 1-element Object[] array
2. Insert a Double into said array
3. Convert said array to JSON using GSON

What is the expected output? What do you see instead?
I expected to get ""[1235.12411]"" but got ""[{}]"" instead.  This happens for
other element types such as java.util.Date and java.lang.Integer.  I see
the expected output if I use a Double[] or List instead of Object[].

Using GSON 1.3 release on Ubuntu Intrepid Ibex.
$ java -version
java version ""1.6.0_10""
Java(TM) SE Runtime Environment (build 1.6.0_10-b33)
Java HotSpot(TM) 64-Bit Server VM (build 11.0-b15, mixed mode)
```

Original issue reported on code.google.com by `ket...@gmail.com` on 2 Apr 2009 at 9:09

Attachments:
- [GsonDouble.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-114/comment-0/GsonDouble.java)""```
I also get the expected result when I wrap the Object[] with 
Arrays.asList(...).  See
attachment for a simple example of this behavior.
```

Original comment by `ket...@gmail.com` on 2 Apr 2009 at 9:12

Attachments:
- [GsonDouble.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-114/comment-1/GsonDouble.java)
 =||= ```
I also encounter this problem with following code:

String[] str = new String[3];
str[0] = ""str"";

Object[] obj = new Object[3]; 
obj[0] = str;

ArrayList lst = new ArrayList();
lst.add(str);

Gson gson = new Gson();
System.out.println(gson.toJson(obj));
System.out.println(gson.toJson(lst));
System.out.println(gson.toJson(lst.toArray()));

Output:

[{},null,null]
[[""str"",null,null]]
[{}]

It seems that Gson can not handle array properly.
```

Original comment by `wanpee...@gmail.com` on 7 May 2009 at 10:41
 =||= ```
Expecting output for code above.

[[""str"",null,null],null,null]
[[""str"",null,null]]
[[""str"",null,null]]

```

Original comment by `wanpee...@gmail.com` on 7 May 2009 at 10:44
 =||= ```
This works acceptably well for me at the moment:

  static class ArraySerializer implements JsonSerializer<Object[]>,
JsonDeserializer<Object[]> {
    public JsonElement serialize(final Object[] src, final Type typeOfSrc, final
JsonSerializationContext context) {
      if (src == null) {
        return new JsonNull();
      }

      JsonArray result = new JsonArray();
      for (Object el : src) {
        if (el == null) {
          result.add(new JsonNull());
        } else {
          result.add(context.serialize(el, el.getClass()));
        }
      }
      return result;
    }

    @Override
    public Object[] deserialize(final JsonElement json, final Type typeOfT, final
JsonDeserializationContext context)
        throws JsonParseException {
      JsonArray array = json.getAsJsonArray();
      Object[] result = new Object[array.size()];
      int tally = 0;
      for (JsonElement childElement : array) {
        Object value;
        if (childElement == null || childElement.isJsonNull()) {
          value = null;
        } else {
          Type type = null;
          if (childElement.isJsonArray()) {
            type = Object[].class;
          } else if (childElement.isJsonObject()) {
            type = Object.class;
          } else if (childElement.isJsonPrimitive()) {
            final JsonPrimitive primitive = childElement.getAsJsonPrimitive();
            if (primitive.isBoolean()) {
              type = Boolean.class;
            } else if (primitive.isNumber()) {
              type = Number.class;
            } else if (primitive.isString()) {
              type = String.class;
            }
          }

          value = context.deserialize(childElement, type);
          if (value instanceof Object[]) {
            value = new ArrayList(Arrays.asList((Object[]) value));
          }
        }

        result[tally] = value;
        ++tally;
      }
      return result;
    }
  }

Though I'm pretty sure it doesn't cover all the corner cases or generics.
```

Original comment by `anton.sa...@gmail.com` on 7 May 2009 at 12:11
 =||= ```
r432 adds ability to serialize and deserialize array/collections of 
java.lang.Object 
when the actual object is a primitive.
```

Original comment by `inder123` on 27 Jul 2009 at 11:26
 =||= Original comment by `inder123` on 27 Jul 2009 at 11:26
- Changed state: **Started**
 =||= ```
Hi! if someone could help me, I need to serialize and deserialize Date format 
for
Http calls to a Web Service, I ´m using gson 1.3
Thanks
Flor
```

Original comment by `florpere...@gmail.com` on 29 Jul 2009 at 9:59
 =||= ```
Fixed in r442.
```

Original comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:13
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
115JsonParser.jj wrong grammarGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:01 PM"```
What steps will reproduce the problem?

1. Please take a look at the JsonParser.jj file in you source control.
Parse method looks like this:

public JsonElement parse() :
{
  JsonElement json = null;
}
{
  ["")]}'\n""]( json=JsonObject() |
    json=JsonArray() |
    json=JsonPrimitive() |
    json=JsonNull())
  { return json; }
}

What is the expected output? What do you see instead?

I've found at least two instances of json text causing to return incorrect
result. Try to proceed parsing with the following input:

1. JsonElement element = new JsonParser(new StringReader(""  "")).parse();

Expected element is to be null, but it failed with exception:

Encountered ""<EOF>"" at line 1, column 2.
Was expecting one of:
    <DIGITS> ...
    ""null"" ...
    ""NaN"" ...
    ""Infinity"" ...
    <BOOLEAN> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""["" ...
    ""{"" ...
    ""-"" ...
    "")]}\'\n"" ...

2. Second option is event more harmful:
JsonElement element = new JsonParser(new StringReader(""{}, 12, 23"")).parse();

Expected: parse exception to be throws (indicating bad grammar).
But encountered empty JsonObject (parser stop parsing after it encounters
curly bracket and immediately returns).

I want to provide you with a fix to JsonParser.jj grammar file.

public JsonElement parse():{
  JsonElement json = null;
}
{
  (<EOF>
  | json = JsonObject()
  | json = JsonArray()
  | json = JsonPrimitive()
  | json = JsonNull()) <EOF> {
    return json;
  }
}


```

Original issue reported on code.google.com by `tazija@gmail.com` on 4 Apr 2009 at 12:19""```
Thanks for the detailed bug report and the suggestions to improve the grammar.

2) can not be done since Gson 1.4 allows multiple JSON objects on the stream. 
So, in your example, it should 
return 3 objects: empty JsonObject(), JsonPrimitive(12), JsonPrimitive(23)
```

Original comment by `inder123` on 23 Sep 2009 at 6:59
 =||= ```
Just realized that the 2 will fail to parse since it is not a valid JSON.
Gson stops at matching {} and doesn't look any further. 

If you were using JsonParserAsync (in 1.4) you will be able to parse ""{} 12 23"" 
into what I said above.
```

Original comment by `inder123` on 23 Sep 2009 at 7:32
 =||= ```
This is working as we intended it to work.

Note: your use case #1 will return a JsonNull object now.  Not sure if this is 
new
after the 1.4 release.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 7:34
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
116Supporting associations like JS (Map based) is desiredGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:02 PM"```
What steps will reproduce the problem?
1.create something like String s = '{a:[1,2,""b""],c:[3,""5"",6]}';
2. gson.fromJson(s, Map.class);
3. you get exception

What is the expected output? What do you see instead?
I expected Map (association) similar I have in JS. However I am forced to 
create a new Java type, like:
static class MyType {
  String[] a, c;}


What version of the product are you using? On what operating system?
version 1.3 on Ubuntu

Please provide any additional information below.

BTW if I have mixed array, why can't I deserialize in Object[] with 
automatic fills of elements as Sting, Integer, Long, OtherObject

```

Original issue reported on code.google.com by `jAddress...@gmail.com` on 8 Apr 2009 at 1:11""```
Gson does serialize non-parameterized maps and collections, but it doesn't 
allow them for deserialization and 
we have no plans to support it. 
```

Original comment by `inder123` on 29 Sep 2009 at 8:57
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
117Can't seriallize/deseriallize a List<Object> with null element;Google Code ExporterGoogleCodeExporter03/19/15, 06:24:03 PM"```
What steps will reproduce the problem?
   List<Object> d = new ArrayList<Object>();
   d.add(null);
   JsonElement je = gson.toJsonTree(d);

What is the expected output? What do you see instead?
   create json like ""[null]""
actually
   throw a null pointer exception

What version of the product are you using? On what operating system?
   1.3

Please provide any additional information below.

```

Original issue reported on code.google.com by `yufanyu...@gmail.com` on 8 Apr 2009 at 9:24""```
Fixed in r460.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 8:35
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 1 Oct 2009 at 5:07
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
118Gson should list the field that caused circular reference errorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:04 PM"```
See the discussion at 
http://groups.google.com/group/google-
gson/browse_thread/thread/8570497f1d35479d
```

Original issue reported on code.google.com by `inder123` on 14 Apr 2009 at 8:44""```
Fixed in r461
```

Original comment by `inder123` on 29 Sep 2009 at 8:44
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= ```
Thanks a lot!
```

Original comment by `seba.wag...@gmail.com` on 29 Sep 2009 at 9:03
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
119registerDeserializer in GsonBuilder is privateGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:05 PM"```
What steps will reproduce the problem?
1. See source code
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.
How can a client register a custom deserializer?
```

Original issue reported on code.google.com by `kaveh.gh...@gmail.com` on 27 Apr 2009 at 8:35""```
Just use registerTypeAdapter method in GsonBuilder and pass it the 
deserializer. 
```

Original comment by `inder123` on 5 May 2009 at 11:33
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
120[enhancement] Add OSGi Bundle manifest headers so gson can be used in OSGi environment.Google Code ExporterGoogleCodeExporter03/19/15, 06:24:06 PM"```
Attaching patch to the 1.3 POM which includes the bundle manifest headers into 
the compiled jar.  
```

Original issue reported on code.google.com by `rfar...@gmail.com` on 5 May 2009 at 10:17

Attachments:
- [gson-osgi.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-120/comment-0/gson-osgi.patch)""```
Replaced patch with one using maven-bundle-plugin. (thanks to  nairb774 for 
pointing this out)
```

Original comment by `rfar...@gmail.com` on 5 May 2009 at 10:54

Attachments:
- [gson-osgi.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-120/comment-1/gson-osgi.patch)
 =||= ```
Fixed in r421 
Thanks for the patch.
```

Original comment by `inder123` on 5 May 2009 at 11:32
- Changed state: **Fixed**
 =||= ```
Just noticed, my first patch has a typo.   ""com.google.json;version=1.3.0"" 
needs to
be ""com.google.gson;version=1.3.0"".
```

Original comment by `rfar...@gmail.com` on 8 May 2009 at 7:34
 =||= ```
Fixed in r423
```

Original comment by `inder123` on 8 May 2009 at 10:24
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
121SerializedName should allow Java reserved words in JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:08 PM"```
See
http://groups.google.com/group/google-gson/browse_thread/thread/085ae0279f57b8e9
?hl=en
```

Original issue reported on code.google.com by `inder123` on 5 May 2009 at 11:37""```
Fix submitted in r426.
```

Original comment by `joel.leitch@gmail.com` on 24 May 2009 at 10:32
- Changed state: **Fixed**
 =||= ```
SerializedName should allow '-' too.

@SerializedName(""font-size"")
private Integer fontSize;
```

Original comment by `zhouyanm...@gmail.com` on 24 Aug 2009 at 11:06
 =||= Original comment by `inder123` on 24 Aug 2009 at 5:20
- Changed state: **Accepted**
 =||= ```
Fixed in r455.

Added a new default naming policy with dashes in r456.
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 6:46
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
122add more flexable ability to GsonBuilder for filtering propertyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:09 PM"```
before I know Gson I have a own annotation named @NotInJson,It's familar
with @Expose,and @NotInJson is exclude not include,I hope Gson can provide
a exclude annotation named @NotExpose or provide a mechanism let developers
process filtering,thanks.
```

Original issue reported on code.google.com by `zhouyanm...@gmail.com` on 6 May 2009 at 8:07""```
attachment is patch 

add two methods for GsonBuilder

registerExclusionStrategy(ExclusionStrategy... exclusionStrategies)
excludeFieldsWithAnnotations(Class<?extends Annotation>...annotationClasses)

```

Original comment by `zhouyanm...@gmail.com` on 6 May 2009 at 9:28

Attachments:
- [patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-122/comment-1/patch.txt)
 =||= ```
You can mark fields as ""transient"" and Gson will skip over them.  In Java, the
""transient"" is used to mark a field that should not appear in the class's 
serialized
or persisted state.

Does this solution work for you?
```

Original comment by `joel.leitch@gmail.com` on 12 May 2009 at 4:24
 =||= ```
I know that,there are two problems
1.I hope that does not require source code changes for switching library
2.transient can effect other function like serialization
```

Original comment by `zhouyanm...@gmail.com` on 13 May 2009 at 1:26
 =||= ```
Sorry, but I don't think that I understand your first point from above.

Using a Java annotation would still require source changes because you'd have to
annotate your field or class with an annotation such as ""@Ignore"".

Writing the code to support this features is actually quite simple because of 
the
ExclusionStrategy concept.  We already do something very similar to this for 
the API
versioning control; however, I am not completely convinced that adding an 
annotation
for this purpose is better than specifying the field as ""transient"".  I 
understand
that this affect the default Java object serialization, but you can assume that
passing an object through Gson is just serializing an object into a JSON format,
which can later be translated back into a Java Object instance.

@Inder, what are your thoughts on this feature request?
```

Original comment by `joel.leitch@gmail.com` on 13 May 2009 at 7:25
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
I think we should have an annotation way of excluding fields too. Requiring 
that the 
users use transient may have unintended side-effects.
```

Original comment by `inder123` on 14 May 2009 at 12:28
 =||= ```
hi,joel,before I know gson,I use my own utils using json.org to serialize 
objects,and
I have defined a annotation @NotInJson for my application,so I wish I can reuse 
this
annotation and needn't make changes for my annotated classes when I switch lib 
from
json.org to gson.
```

Original comment by `zhouyanm...@gmail.com` on 14 May 2009 at 1:11
 =||= ```
Hello Joel,
Marking a field as transient does not solve the problem. For example: Class A
reference class B (class A has a collection reference of type class B), if I
serialization a collection instance of class A, it will serialize all the 
references
of class B as well, which is fine. But when I have another class, let called it 
C,
class C have a collection reference of class A, and when I serialize instances 
of
class C, I don't want all instances class B to be serialized (maybe because 
they are
unneccessary or way too big). I know that marking a field as transient is good 
for
serialization and deserialization back, but in some case, I only use gson just 
for
serialization. I'm developing an application which uses GWT and GWT-Ext, for
deserialization I use the built-in mechanism of GWT but for serialization 
(mostly
consumed by GWT-Ext widgets) I use gson.
```

Original comment by `xuantinh@gmail.com` on 21 Aug 2009 at 12:15
 =||= ```
In Gson 1.4, we extended the Expose annotation to support finer-grained control 
over
what gets output or not. The expose annotation now supports a serialize and
deserialize parameter, if you set both to false, then that is effectively same 
as
@NotInJson.

 Expose (serialize = false, deserialize = true) 
```

Original comment by `inder123` on 24 Aug 2009 at 5:28
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= ```
is it possible let users make their own annotation?
I need this @NotInJson for compatibility with some code written by org.json.xxx 
before
```

Original comment by `zhouyanm...@gmail.com` on 25 Aug 2009 at 1:08
 =||= ```
My gut reaction will be to advise to use a custom serializer/deserializer to do 
this,
but do you have a proposal on how you would like to see it work?
```

Original comment by `inder123` on 25 Aug 2009 at 1:19
 =||= ```
please see my patch in Comment 1
```

Original comment by `zhouyanm...@gmail.com` on 25 Aug 2009 at 1:51
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
123Gson parser consumes more input that neededGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:14 PM"```
See the discussion at: 
http://groups.google.com/group/google-gson/browse_thread/thread/af43e04cb644b734
?hl=en
```

Original issue reported on code.google.com by `inder123` on 8 May 2009 at 4:26""```
Fixed in r422 by adding a new API method for being able to parse a stream
asynchronously as well as to allow looking for multiple JSON elements on the 
stream.
```

Original comment by `inder123` on 8 May 2009 at 10:25
- Changed state: **Fixed**
 =||= ```
Refactored the async parsing code into a new top-level class JsonParserAsync in 
r424
```

Original comment by `inder123` on 14 May 2009 at 8:20
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
124Custom field handlerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:15 PM"```
I have a problem in need of a solution.  I don't think that there is a
""easy"" way to do this in gson (there is a ""hard"" way).

A little about the problem I am trying to solve.  I am using BDB and have a
few entities stored in the database. A few have key relationships that
might be nice to optionally bridge.  For example given the two classes:
class A {
 @PrimaryKey
 String key;
 @SecondaryKey(relatedEntity=B.class)
 String bKey;
}
class B {
 @PrimaryKey
 String key;
}

If I serialize an instance of A it would be nice to have the option to
include the referenced instance of B in the serialized representation. 
Currently the best option is to write a custom serializer for each entity
object that handles this.  This is the ""hard"" option.  This requires me to
hand code a lot of stuff that gson gives me for free.

The ""easier"" option that I have thought of (though I am open to
suggestions) would be to have a way to get a callback on serialization when
Gson is at a field with some marker (say a annotation).  From this callback
I could get a hold of the field in need of serialization, and the object
under serialization.  This would then allow me to serialize the field
normally (keeping the key - say the depth is far enough) or to substitute
the referenced entity into the serialized location.  The awkward part of
this approach is that there is no good analog for the deserialization side.

Consider this a long winded enhancement request :) unless there comes a
better option.  ~Brian
```

Original issue reported on code.google.com by `nairb...@gmail.com` on 18 May 2009 at 3:46""```
Let us get a bit more concrete here. What would that annotation be? I presume 
something like: 

@Callback
long myfield;

However, now this Callback needs a callback method specification. How is that 
callback method specified? One way would be: 
@Callback(callBackClass = MyCallBack.class)

where the expectation will be that MyCallBack will implement an interface that 
is 
invoked during serialization or deserialization. That interface will probably 
look 
very similar to JsonSerializer or JsonDeserializer interface. But then we 
haven't 
achieved much compared to your other ""hard"" way of doing this. 

Any comments?
```

Original comment by `inder123` on 19 May 2009 at 5:30
 =||= ```
I was thinking something where the annotation is user specified. Example 
follows. The
only problem is when you register SomeAnnotation, and AnotherAnnotation and 
they both
show up on the same field, which goes first? First to register?

interface AnnotatedFieldHandler {
    /** The object, at the this field has the given value in some context. Please
translate/mutate/substitute and return. This could be passed to another 
handler, or
be serialized if not a JsonElement (or subclass thereof) */
    Object handle(Object object, Field field, Object value, SomeContext context);
}

class AHandler implements AnnotatedFieldHandler {
    public Object handle(final Object object, final Field field, final Object value,
final SomeContext context) {
        // make magic happen
    }
}

class ToSerialize {
    private int notTouched;
    @SomeAnnotation private String foreignKeyA;
    @AnotherAnnotation private String foreignKeyB;
}

public static void main(final String args[]) {
    new GsonBuilder().registerAnnotatedFieldHandler(SomeAnnotation.class, new
AHandler()).registerAnnotatedFieldHandler(AnotherAnnotation.class, new
ADifferentHandler())...;
}

This was the shoot from the hip solution that I had.  My fear with this is that
checking every field for a annotation like this can be a potential performance 
issue
and I would hate to introduce that.  In a way my thought was to give the 
ability to
do substitution at serialization of individual fields.  I will be the first to 
admit
it does nto feel like the optimal solution. 
http://code.google.com/p/google-gson/issues/detail?id=43 may be another avenue 
as it
saves form hand writing the whole serialization code by hand (which can be 
error prone).

Thoughts?
```

Original comment by `nairb...@gmail.com` on 19 May 2009 at 9:08
 =||= ```
I agree with your assessment. We do plan to fix Issue 43 soon, so that will 
help in 
this. I am closing this bug for now.
```

Original comment by `inder123` on 20 May 2009 at 6:01
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
125[Patch] Allow alternate strategies for finding handlers.Google Code ExporterGoogleCodeExporter03/19/15, 06:24:16 PM"```
The attached patch (created against tags/1.3) allows you to specify alternate 
resolvers when 
attempting to locate the handler for a class.

A resolver that attempts to find the most suitable handler via inheritance 
which will allow you to 
specify a resolver based on an interface (my motivation for starting this) is 
included.
```

Original issue reported on code.google.com by `mr.kevin...@gmail.com` on 29 May 2009 at 10:06
- Merged into: #164

Attachments:
- [resolver-strategy.tbz](https://storage.googleapis.com/google-code-attachments/google-gson/issue-125/comment-0/resolver-strategy.tbz)""```
I would have set this as an enhancement rather than a defect given the option.
```

Original comment by `mr.kevin...@gmail.com` on 29 May 2009 at 10:06
 =||= ```
deferred for consideration in a future release since this changes Gson's public 
API.
```

Original comment by `inder123` on 29 Sep 2009 at 6:14
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:32
- Removed labels: **Milestone-Release1.5**
 =||= ```
Seems like this is related to issue 164, which wants to find serializers based 
on inheritance.
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:43
- Added labels: **Type-Enhancement**, **Milestone-Undefined**
- Removed labels: **Type-Defect**
 =||= Original comment by `limpbizkit` on 30 Dec 2011 at 6:28
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
126Should not look into excluded (e.g. transient) fields for type informationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:18 PM"```
What steps will reproduce the problem?
1. create a class with generic transient field; such as:
class ImGeneric<T> {
  transient T dontLookAtMe;
}
2. try to serialize (or deserialize) with default settings

What is the expected output? What do you see instead?
exception from thrown from TypeInfoFactory.java:97 - Expecting parameterized 
type, got class 
ImGeneric.
 Are you missing the use of TypeToken idiom?
 See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-
Gener

What version of the product are you using? On what operating system?
gson 1.4 on OSX Leopard 10.5.7

Please provide any additional information below.
attached you'll find the patch and unit test for this issue
```

Original issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 12:46

Attachments:
- [transient_generic_field.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-126/comment-0/transient_generic_field.patch)""```
This is a valid bug and thanks for the patch. It is now fixed in r429.
```

Original comment by `inder123` on 2 Jun 2009 at 6:02
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
127Should support custom serializers for map keysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:19 PM"```
This is actually a RFE for supporting custom serializers for map keys, the 
current implementation 
relies on result of String.valueOf for map keys, but if I've registered a 
custom serialization type 
adapter for the type of map key it (obviously) doesn't get called

What steps will reproduce the problem?
create any class with toString method and register a JsonSerializer for it, try 
to serialize to JSON, 
you'll see the toString method beeing called instead of the registered 
serializer

What is the expected output? What do you see instead?
a call to JsonSerializer instead to toString method, and result from the 
serializer in the JSON 
output

What version of the product are you using? On what operating system?
gson 1.4 on OSX Leopard 10.5.7

Please provide any additional information below.
patch is attached, with a possible solution that calls into serialization 
context while honoring 
current implementation's behavior for keys without registered serializers, and 
a unit test for the 
specific situation

```

Original issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 6:30

Attachments:
- [map_key.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-127/comment-0/map_key.patch)""```
The reason Gson doesn't allow custom handlers for Map Keys is because the key 
needs to 
be a valid field name (it can not be a Json object, for example). Allowing 
arbitrary 
handlers can result in invalid JSON being produced.I understand that using 
toString() 
is probably unnaturally limited, but supporting serializers is not a good idea. 
Any 
other proposals? 
```

Original comment by `inder123` on 2 Jun 2009 at 5:46
 =||= ```
Yes, this was quick and dirty support custom serializers as it expects (JSON) 
String to be returned from the 
serializers; I see two other possible solutions, either have the key objects 
implement something like JsonMapKey 
interface with String asMapKey() method, or have specialized type for custom 
map key serializers. One thing to 
note is that deserialization for custom map key objects is currently supported, 
so one would hope that 
serialization would be supported trough the same mechanism.
Overall this is not a big issue as one can implement toString() method and 
preform serialization there...
```

Original comment by `zregv...@gmail.com` on 3 Jun 2009 at 12:56
 =||= ```
The reason we do not support serialization is because we do not want to output 
invalid 
JSON. Deserialization is supported to be more permissive in what input we 
accept.
```

Original comment by `inder123` on 3 Jun 2009 at 5:46
 =||= Original comment by `inder123` on 23 Sep 2009 at 7:08
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
128please add support for getter methodGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:20 PM"```
currently gson only serializing field and doesn't support java bean property
```

Original issue reported on code.google.com by `zhouyanm...@gmail.com` on 1 Jun 2009 at 9:04""```
Duplicate on an existing enhancement request
```

Original comment by `inder123` on 2 Jun 2009 at 5:42
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
129Permit type data in the serialized JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:21 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?
GSon gson = new GSon();
MyObject ob = new MyObject();
String text = gson.toJson(ob);
MyObject copy_ob = (MyObject)gson.fromJson(text);

What version of the product are you using? On what operating system?
1.3

Please provide any additional information below.

```

Original issue reported on code.google.com by `new.r...@gmail.com` on 19 Jun 2009 at 5:41
- Merged into: #231""```
While this may seem tempting, having the client JSON specify which class to 
instantiate seems to be full of 
security holes to me. Do you have a proposal on how to avoid security issues?
```

Original comment by `inder123` on 23 Sep 2009 at 7:03
 =||= ```
deferred for consideration in a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 6:13
- Added labels: **Milestone-Release1.5**
 =||= ```
How about allowing new org.mypackage.ClassName in JSON input?  

We would like to use Gson as a lightweight IoC controller (we already are using 
Gson) 
as it fits our use cases better than Guice (file-based configuration rather 
than 
annotation-based dependency injection).  

Security issues can be mitigated by disabling this by default.  A method in 
GsonBuilder 
(setXXX) can activate it.
```

Original comment by `gin...@gmail.com` on 21 Feb 2010 at 8:05
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:32
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:46
- Added labels: **Milestone-Undefined**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:46
- Added labels: **Milestone-Release1.7**
- Removed labels: **Milestone-Undefined**
 =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:44
- Changed title: **Permit type data in the serialized JSON**
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
130Unbearable when toJson a long string(1M)Google Code ExporterGoogleCodeExporter03/19/15, 06:24:23 PM"```
What steps will reproduce the problem?
1. a long xml type string, call toJson() method,
2. cost exceed 1 minutes with cpu 100%
3. I used disableEscapeHtml ,but it is no useful.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?
1.3

Please provide any additional information below.
I guess escape a very long string cost to much, maybe gson could offer a 
EscapedStringBuffer, so we can build an escaped string, and toJson then 
output it directly.

```

Original issue reported on code.google.com by `iamj...@gmail.com` on 26 Jun 2009 at 3:35""```
oh, I made a mistake, disableHtmlEscaping works.... 
```

Original comment by `iamj...@gmail.com` on 26 Jun 2009 at 3:59
 =||= ```
I am closing this bug since you seem to indicate that the bug report was 
invalid.
```

Original comment by `inder123` on 29 Sep 2009 at 6:13
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
131Gson should provide a way to configure order for field navigationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:24 PM"```
Currently gson 1.3 build output string navigating fields starting from 
class of object that is serializing.

In my case (for human readabilty of serialized strings) I need a reverse 
stratedy - navigate fields of topmost class in hierarchy first and fields 
of serializing object last.

--------------
Here some code: 

changes in com.google.gson.ObjectNavigator:
  public void accept(Visitor visitor) {
    boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler
(obj, objType);
    if (!visitedWithCustomHandler) {
      Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;
      if (objectToVisit == null) {
        return;
      }
      TypeInfo objTypeInfo = new TypeInfo(objType);
      if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {
        return;
      }

      if (ancestors.contains(objectToVisit)) {
        throw new IllegalStateException(""Circular reference found: "" + 
objectToVisit);
      }
      ancestors.push(objectToVisit);

      try {
        if (objTypeInfo.isArray()) {
          visitor.visitArray(objectToVisit, objType);
        } else {
          visitor.startVisitingObject(objectToVisit);
          // For all classes in the inheritance hierarchy (including the 
current class),
          // visit all fields

 // !!!! changes !!!!
 // collect classes to navigate
          List<Class<?>> classesToNavigate = new ArrayList<Class<?>>();
          for (Class<?> curr = objTypeInfo.getRawClass();
          curr != null && !curr.equals(Object.class); curr = 
curr.getSuperclass()) {
            if (!curr.isSynthetic()) {
                classesToNavigate.add(curr);
            }
          }

 // here we could check somr flag if needed
          Collections.reverse(classesToNavigate);

          for (Class<?> curr : classesToNavigate)
          {
           navigateClassFields(objectToVisit, curr, visitor);
          }
        }
      } finally {
        ancestors.pop();
      }
    }
  }

```

Original issue reported on code.google.com by `kua...@gmail.com` on 26 Jun 2009 at 11:55""```
deferred for consideration in a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 6:12
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:32
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:46
- Added labels: **Milestone-Undefined**
 =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:57
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Custom type adapters exist to handle this.
```

Original comment by `limpbizkit` on 21 Mar 2011 at 9:55
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
132Not able to deserialize.Google Code ExporterGoogleCodeExporter03/19/15, 06:24:26 PM"```
I'm using gson-1.3.jar.

I'm serializing my object using gson lib and i get the proper json string.
But while deserializing i get following exception:
Map objects need to be parameterized unless you use a custom serializer.

Here is my code:
public class A {
    Map map; //and getter and setter for this
}

//in main method of some other class
    Map m=new HashMap();
    m.put(""entry1"", ""value1"");

    A a=new A();
        a.setMap(m);

        //serialize
    Gson gson = new Gson();
    String jsonString=gson .toJson(a);

    //deserialize
    A newA =gson .fromJson(jsonString, A.class);
    System.out.println(""Map is:""+newA);

Lee



b.setProp(""prop"");

```

Original issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:21""```
Please assume that the map which I'm using stores the different types of object 
so I
really cannot use the generics. 
I guess and this is not supported by gson.
If not then also please let me know when will it be available and provide the
solution for above.

thanks,
Lee
```

Original comment by `leenabo...@gmail.com` on 7 Jul 2009 at 6:26
 =||= ```
Right now this is not supported by Gson.  The JSON output does not contain type
information in the output so we are unable to deserialize the objects back into 
a map
form.

For now, I do not see us adding this feature to Gson; however, you should be 
able to
write your own custom serializer and deserializer to drop type information into 
your
output so that you will be able to serialize the value back into Java.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:52
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
133Not able to deserialize.Google Code ExporterGoogleCodeExporter03/19/15, 06:24:27 PM"```
I'm using gson-1.3.jar.

I'm serializing my object using gson lib and i get the proper json string.
But while deserializing i get following exception:
Map objects need to be parameterized unless you use a custom serializer.

Here I cannot do this (what exception says) as I'm using spring mvc, and
what I'm trying to serialize is Springs ModelAndView's ModelMap class.

steps to reproduce the problem
1. put attached classes folder in classpath (classes.rar)
2. put attached jars in classpath (lib.rar)
3. And run the following code-snippet:
    Gson gson = new Gson(); 

    FileInputStream fin=new FileInputStream(""c:\\mv.ser"");
    ObjectInputStream oin=new ObjectInputStream(fin);
    ModelMap map=(ModelMap)oin.readObject();
    System.out.println(""Map is:""+map);

    //serialize
    String jsonString=gson .toJson(map);
    System.out.println();
    System.out.println(""JSOn String is :"");
    System.out.println(jsonString);

    //deserialize
    ModelMap modelMap=gson .fromJson(jsonString, ModelMap.class);
    System.out.println(""Map is:""+modelMap);

Please let me is it possible to deserialize this using gson-lib or do I
need to use json-lib for deserialization.

I would really appreciate if yoy reply me ASAP as we need to take decision
on which library to use.


```

Original issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:27

Attachments:
- [mv.ser](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/mv.ser)
- [classes.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/classes.rar)
- [lib.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/lib.rar)""```
deferred for a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 6:11
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:01
- Removed labels: **Milestone-Release1.5**
 =||= ```
Maps need to be parameterized. There's no action we can take here.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:56
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
134support java.sql.Date and Timestamp typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:28 PM"```
Apparently these two types are not supported in the DefaultTypeAdapters
(v1.3). Would be very useful if they are provided out of the box, and saves
users from writing custom serializer/deserializer.

Thanks
```

Original issue reported on code.google.com by `HSajja...@gmail.com` on 8 Jul 2009 at 5:31""```
We are concerned about introducing a dependency on the java.sql package on 
Gson. While I understand that 
java.sql is part of all Java runtimes, there could be Java like runtimes that 
dont support these packages.

We should publish the converters for these classes at this page though: 
http://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1
```

Original comment by `inder123` on 23 Sep 2009 at 7:07
 =||= ```
Deferred for consideration in a future release.
```

Original comment by `inder123` on 29 Sep 2009 at 6:10
- Added labels: **Milestone-Release1.5**
 =||= ```
Perhaps the fact that java.sql.Date and java.sql.Timestamp are subclasses of
java.util.Date would allow you to avoid explicit dependencies... ? I haven't 
looked
at the code so don't know if this would work or not.

```

Original comment by `archie.c...@gmail.com` on 3 Dec 2009 at 4:56
 =||= ```
Fixed in r513 by adding explicit support for java.sql Date and Timestamp. I 
could not 
avoid the explicit dependencies though, but decided that java.sql dependency 
may not 
be all that bad.
```

Original comment by `inder123` on 4 Dec 2009 at 1:22
- Changed state: **Fixed**
 =||= ```
Given java.sql.Timestamp allows for more precise time tracking (ie: nano 
seconds), was wondering how one would go about converting a nano/micro second 
string timestamp into a java.sql.Timestamp using GSON, ie:

{
 ""microsecond_date"": ""2012-10-24T00:25:42.000000Z"",
 ""nanosecond_date"": ""2012-10-24T00:25:42.000000000Z""
}

Given GSON uses ISO 8601 formatting which accepts decimal positions on any of 
the time elements (http://en.wikipedia.org/wiki/ISO_8601#Times), I'm wondering 
if there would be a way without having to write my own 
serialization/deserialization logic to parse the string out given the impl 
provided by DefaultDateTypeAdapter relies on SimpleDateFormat which doesn't 
support more than 3 decimal positions.
```

Original comment by `roberto.andrade` on 14 Aug 2013 at 10:48
 =||= ```
I am also curious if it can be done without writing a custom deserializer. 
```

Original comment by `Rob.Isak...@gmail.com` on 3 Dec 2013 at 9:36
 =||= Hi, 
  We use gson in [Leshan](https://www.eclipse.org/leshan/). This is an implementation of lightweight M2M protocol.
  We have a Server and a Client implementation.
  We aim compact [profile of java](http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html) for the Client. Unfortunately gson has dependency to java.sql.\* so we need to use the compact2 profile instead of the compact1 profiles which is ~40% bigger.
  See [leshan issue](https://github.com/eclipse/leshan/issues/58)
 =||= @sbernard31, did you find an alternative to use compact1 profile? =||= No, we didn't do anything for now, but we consider using https://github.com/ralfstx/minimal-json =||= With Java 9 and modularity, it means we have to add an extra dependency on java.sql module when using Gson. =||= Yeah, the module thing is a bit of a pain. Every time I `requires gson;` I also need to `requires java.sql;`.

Would be nice if this supported project Jigsaw in a more complete manor. =||= Hey ! Is there any hotfix for 1.4 version for sql date and time types ?? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
135Having an inner class gives this error - No-args constructor for B does not exist.Google Code ExporterGoogleCodeExporter03/19/15, 06:24:30 PM"```
What steps will reproduce the problem?

I have a Java representation of the JSON object. When I declared something
like this -

public class A{
   public String i;
   public int t;
  public B[] q;
//no arg constructor for A
   class B{
       public String j;
       public String[] k;
       //no arg constructor for B
   }
}


It throws an exception saying B does not have a no arg constructor. when I
debugged, the constructor for B is actually being passed as B(A).

I could get it working by taking B out of A but shouldn't it be working as
is? you don't want to create a separate class just for 2 variables right?
This is a a very basic case that is supposed to work.

What is the expected output? What do you see instead?
Expecetd to return an instance of A. But I see the following error.
""No-args constructor for B does not exist. Register an InstanceCreator with
Gson for this type to fix this problem.""

What version of the product are you using? On what operating system?
1.3

Please provide any additional information below.

```

Original issue reported on code.google.com by `radha.te...@gmail.com` on 8 Jul 2009 at 10:04""```
You can use Gson to serialize/deserialize nested classes; however, the nested 
classes
need to be ""static"" nested classes.

Note that the Java language has two types of ""nested"" classes:
1. Inner Class
2. Static Nested Class

An Inner Class has an implicit reference to the ""this"" instance of the outer 
class. 
This is why an inner class can access the private instance members of its outer 
class.

A Static Nested Class does not get this implicit reference.  You can have it 
store a
reference to A, but you will need to explicitly pass in a reference to the 
outer class.

Try changing your example as follows:
public class A {
  public String i;
  public int t;
  public B[] q;

  //no arg constructor for A

  static class B {
       public String j;
       public String[] k;
       //no arg constructor for B
   }
}


Hope this helps,
Joel
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 5:56
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
138Gson should have a way to provide custom exclusion strategiesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:36 PM"```
See the request at: http://groups.google.com/group/google-
gson/browse_thread/thread/573f7359be79f4db?hl=en
```

Original issue reported on code.google.com by `inder123` on 27 Jul 2009 at 9:03""```
Deferring it to a future release. Meanwhile, you can use a custom 
serializer/deserializer to achieve what you 
want.
```

Original comment by `inder123` on 29 Sep 2009 at 5:58
- Added labels: **Milestone-Release1.5**
 =||= ```
Due to popular demand, we are squeezing this into the 1.4 beta release.  We 
will be
getting some feedback on this feature during the beta and ""may"" make a backwards
incompatible change to this exclusion mechanism.  Try it out and let us know.

Since this is now doable as of r485, marking this bug as fixed.
```

Original comment by `joel.leitch@gmail.com` on 8 Oct 2009 at 10:38
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
- Removed labels: **Milestone-Release1.5**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
139all should be stringsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:37 PM"```
Version 1.3 does a good job of converting an Object to JSON string 
following JSON standards.. However it does not suit my requirement, that 
is is all the data should be strings, meaning all the keys and values 
should be enclosed by double quotes including for numbers, float, and 
integers...
example:
""amount"":1.3300000000000000710542735760100185871124267578125  - current
""amount"":""1.3300000000000000710542735760100185871124267578125"" - needed

How can i achieve this? Can i change the source code to get this behavior? 
where do i start? thanks a bunch in advance...
-
```

Original issue reported on code.google.com by `pudur.ra...@gmail.com` on 30 Jul 2009 at 9:31""```
You should be able to accomplish this without modifying any of the Gson code, 
but
rather creating your own serializers for longs, float, double, etc.

Here is an example of a Long serializer:
public class MyLongSerializer implements JsonSerializer<Long> {
  public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext
context) {
    return new JsonPrimitive(String.valueOf(src));
  }
}

You would then register these custom serializers using the GsonBuilder.

Hope this helps,
Joel
```

Original comment by `joel.leitch@gmail.com` on 18 Aug 2009 at 6:01
 =||= ```
Having Gson output a number as a number and not as a string is a feature not a 
bug.
```

Original comment by `inder123` on 23 Sep 2009 at 7:05
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
140Error Deserializing objects using fromJson(string, type)Google Code ExporterGoogleCodeExporter03/19/15, 06:24:38 PM"```
What steps will reproduce the problem?
1. Created this class

public class Search {

    private String accountNumber = """";
    public String getAccountNumber() {
        return accountNumber;
    }
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }
    public String getConfirmationNumber() {
        return confirmationNumber;
    }
    public void setConfirmationNumber(String confirmationNumber) {
        this.confirmationNumber = confirmationNumber;
    }
    public String getBankNumber() {
        return bankNumber;
    }
    public void setBankNumber(String bankNumber) {
        this.bankNumber = bankNumber;
    }
    private String confirmationNumber = """";
    private String bankNumber = """";




}


2.run a toJson and then try to fromJson back to the object
       Search search = new Search();
       search.setAccountNumber(""123456"");
       String jsonString = new Gson().toJson(search);
       Search search = new Gson().fromJson(jsonString, 
Search.class); //Parse error here

15:25:18,615 DEBUG []  Lookup JSON: 
{""accountNumber"":""5794749"",""confirmationNumber"":"""",""bankNumber"":""""}
15:25:18,615 ERROR []  Failed to generate JSON!
com.google.gson.JsonParseException: Failed parsing JSON source: 
java.io.StringReader@5b205b20 to Json
    at com.google.gson.JsonParser.parse(JsonParser.java:57)
    at com.google.gson.Gson.fromJson(Gson.java:376)
    at com.google.gson.Gson.fromJson(Gson.java:329)
    at com.google.gson.Gson.fromJson(Gson.java:305)



3. This code works though

            Gson gson = new Gson();
        JsonElement root = new JsonParser().parse(json);
        return  gson.fromJson(root, type);



What is the expected output? What do you see instead?

It should work with either code


What version of the product are you using? On what operating system?


1.3 with IBM JVM 1.6

Please provide any additional information below.

What appears to be happening is that inside the Library code, the string 
gets converted to a StringReader and then that get passed to a parse 
method, but the parse method tries to parse the StringReader.toSTring(), 
which doesn't yield a JSON string, only a class address. 






```

Original issue reported on code.google.com by `chrislha...@gmail.com` on 6 Aug 2009 at 8:30""```
Wrote a test in r433 that attempts to reproduce this bug but the test passes. I 
am
using OpenJDK 1.6 on linux.
```

Original comment by `inder123` on 7 Aug 2009 at 1:13
- Changed state: **Invalid**
 =||= ```
Is OpenJDK 1.6 on Linux a requirement. In order to reproduce a test, you also 
have 
to reproduce the circumstances. I said IBM JVM 1.6. Now, if Gson, doesn't 
support 
the 1.6 IBM JVM, then we have no issue. I guess I'll have to figure it out 
myself 
and fix it. I don't like using an IBM JVM, but I have no choice on this project.
```

Original comment by `chrislha...@gmail.com` on 7 Aug 2009 at 10:47
 =||= ```
I dont know if it is a JDK issue or something else. I dont have the IBM JDK
installed, so can you help testing for it? I wrote tests in r433 that 
generalizes
your code a little bit. Can you run those tests and let us know if they pass?

```

Original comment by `inder123` on 7 Aug 2009 at 9:57
 =||= ```
Issue 142 is a better description of the problem. It isn't JVM related, it is 
Spring
related. Something to do with Injection somehow. I complete examples to 
reproduce in
Issue 142. I apologize for not investigating it further before I posted the 
bug, but
at the time, it was all the information I had. I spent an hour today trying to
consistently reproduce it and getting the steps documented to created that 
issue. 
```

Original comment by `chrislha...@gmail.com` on 7 Aug 2009 at 10:32
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
141com.google.gson.Gson should be able to toJson JsonElements/JsonObjectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:39 PM"```
com.google.gson.Gson should be able to toJson JsonElements/JsonObjects

Something like this would be stellar:
  public String toJson(JsonElement jsonElement)
  {
      final StringWriter writer = new StringWriter();
      try
      {
        formatter.format(jsonElement, writer, serializeNulls);
      }
      catch (IOException e)
      {
          throw new RuntimeException(e.getMessage(), e);
      }
      return writer.toString();
  }
```

Original issue reported on code.google.com by `james.w....@gmail.com` on 7 Aug 2009 at 6:22""```
Fixed in r434 by creating new APIs toJson(JsonElement) and toJson(JsonElement,
Appendable)
```

Original comment by `inder123` on 7 Aug 2009 at 8:59
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= ```
Hey thanks heaps for that :-)
```

Original comment by `james.w....@gmail.com` on 8 Aug 2009 at 3:13
 =||= ```
Hey thanks heaps for that :-)
```

Original comment by `james.w....@gmail.com` on 8 Aug 2009 at 3:20
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
142Deserialization/Serialization issue when json is injected via spring annotationsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:40 PM"```
What steps will reproduce the problem?

1. Create the following java object

public class Search {

    private String accountNumber = """";
    public String getAccountNumber() {
        return accountNumber;
    }
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }
    public String getConfirmationNumber() {
        return confirmationNumber;
    }
    public void setConfirmationNumber(String confirmationNumber) {
        this.confirmationNumber = confirmationNumber;
    }
    public String getBankNumber() {
        return bankNumber;
    }
    public void setBankNumber(String bankNumber) {
        this.bankNumber = bankNumber;
    }
    private String confirmationNumber = """";
    private String bankNumber = """";


}


2. Create a controller class in Spring and add this method



@Controller(""transactionController"")
@RequestMapping(""/transaction/*.jspx"")
public class TransactionController {

     @RequestMapping(value = ""lookup.jspx"",
              method = { RequestMethod.GET, RequestMethod.POST })
    public ModelAndView lookup(@RequestParam(""json"") String json) throws 
Exception {

        String jsonString = """";


        try {


     Gson gson = new Gson();
     System.out.println(json); //JSON prints fine here
         Search ns = gson.fromJson(jsonString, Search.class); //runtime 
Error occurs here, everytime

   Replace the above code to this and it works fine.

            JsonElement element = new JsonParser().parse(json);
            gson.fromJson(element , Search.class);


}

3. Create a Junit test method inside another class. Run this test method.


    @SpringBeanByName
    public TransactionController transactionController;


    @Test
    public void testThis() throws Exception{


        Gson gson = new Gson();
        Search search = new Search();
        search.setAccountNumber(""5794749"");
        String json = gson.toJson(search);
        transactionController.lookup(json);
     }





4. You get this error 

{""accountNumber"":""5794749"",""confirmationNumber"":"""",""bankNumber"":""""}
05:56:00,288 ERROR 
[com.bbvacompass.webpromises.web.spring.mvc.TransactionController]  Failed 
to generate JSON!
com.google.gson.JsonParseException: Failed parsing JSON source: 
java.io.StringReader@51165116 to Json
    at com.google.gson.JsonParser.parse(JsonParser.java:57)
    at com.google.gson.Gson.fromJson(Gson.java:376)
    at com.google.gson.Gson.fromJson(Gson.java:329)
    at com.google.gson.Gson.fromJson(Gson.java:305)
    at 
com.bbvacompass.webpromises.web.spring.mvc.TransactionController.lookup
(TransactionController.java:100)


5. If you write a simple test, it works fine. 



    @Test
    public void testJSONSearch(){

        Search search = new Search();
        search.setAccountNumber(""123456"");
        Gson gson = new Gson();
        String json = gson.toJson(search);
        search = gson.fromJson(json, Search.class);

    }



What is the expected output? What do you see instead?

You should get the object back either way


What version of the product are you using? On what operating system?


Gson 1.3 on an IBM 1.6 JVM, but I believe that if you follow the exact 
steps above and inject the value of json, it will bomb using the fromJson
(String, Object) method. The fromJson(Jsonelement, class) works fine.



Please provide any additional information below.

```

Original issue reported on code.google.com by `chrislha...@gmail.com` on 7 Aug 2009 at 11:07""```
This is a parser error so I wonder if your incoming JSON string is complete 
(although it seems to print fine). Can 
you try adding a blank space at the end and see if that works (that shouldn't 
actually make any difference, I am 
just trying a shot in the  dark). 

Can you debug this further (debug through parser and see what is going on)? We 
do not have the setup or 
expertise to use Spring, so we need someone else to narrow down the problem. 
Thanks.
```

Original comment by `inder123` on 23 Sep 2009 at 5:32
 =||= ```
Keeping it open for a bit longer for further input, but deferring it for a 
future release.
```

Original comment by `inder123` on 29 Sep 2009 at 5:55
- Added labels: **Milestone-Release1.5**
 =||= ```
I'm a bit confused here.

In your example you have the following:

String jsonString = """";
try {
  Gson gson = new Gson();
  System.out.println(json); //JSON prints fine here
  Search ns = gson.fromJson(jsonString, Search.class);
  ...
} catch (SomeException e) { ... }


-------------

Shouldn't the parameter into the gson.fromJson(...) method be the ""json"" 
variable not
""jsonString""?
```

Original comment by `joel.leitch@gmail.com` on 10 Oct 2009 at 12:17
 =||= ```
Yes, you are correct. My apologies. This was a project I didn't have access to
anymore and I went back and wrote something to test and it works. This should be
closed as Not a Bug.
```

Original comment by `chrislha...@gmail.com` on 10 Oct 2009 at 1:21
 =||= Original comment by `inder123` on 10 Oct 2009 at 6:06
- Changed state: **Invalid**
 =||= nice =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
143Set formatting style in pretty printingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:41 PM"```
http://groups.google.com/group/google-gson/browse_thread/thread/b03c165bfd1f6ce4
?hl=en
```

Original issue reported on code.google.com by `inder123` on 7 Aug 2009 at 8:32""Original comment by `inder123` on 7 Aug 2009 at 10:48
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
144suggestion: Add @Verification annotation for easy verification of POJO validityGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:42 PM"```
A POJO can have a no-parameter, void return type method throwing a 
JsonParseException 
annotated with @Verification.  

If present, this will be called on the object after its fields have been 
populated.  If it determines a 
problem, it may throw a JsonParseException and the de-serialization will fail.

The motivation is to make it easier to add additional constraints on the 
validity of JSON objects, 
such as requiring that one, but not both, of two fields contain values.
```

Original issue reported on code.google.com by `ian.clarke` on 7 Aug 2009 at 11:16
- Merged into: #315""```
Seems like there is a general need for a hook for invocation after create. How 
about if we create a @PostCreate 
annotation that you apply to a method. Gson will invoke this method after 
deserializing an object. Will that work 
for your use-case?
```

Original comment by `inder123` on 18 Aug 2009 at 5:48
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Yes, provided it can throw a JsonParseException or otherwise indicate that the 
object is unsuitable (eg. required 
fields are missing).
```

Original comment by `ian.clarke` on 18 Aug 2009 at 5:50
 =||= ```
We could not settle on a design of PostCreate so deferring it to a future 
release.
```

Original comment by `inder123` on 29 Sep 2009 at 5:56
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:33
- Removed labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:28
- Added labels: **Milestone-Undefined**
 =||= ```
This is essentially a subset of the features requested in issue 315.
```

Original comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:52
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
145compilation via maven fails due to generics bug in javacGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:43 PM"```
The following javac error occurs when trying to compile gson using Maven.
(this probably was not caught since Googlers use Eclipse)

[INFO] Compilation failure
/home/jdumay/code/google/gson/trunk/gson/src/main/java/com/google/gson/Gson.java
:[446,23]
type parameters of <T>T cannot be determined; no unique maximal instance
exists for type variable T with upper bounds T,java.lang.Object

And its a bug in javac!
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954

Attached is a patch that works around this problem.


```

Original issue reported on code.google.com by `james.w....@gmail.com` on 8 Aug 2009 at 3:34

Attachments:
- [compile-fix.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-145/comment-0/compile-fix.patch)""Original comment by `inder123` on 23 Sep 2009 at 5:47
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
146Gson needs a more obust inclusion and exclusion mechanismGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:44 PM"```

Gson has the ability to mark a method as exposed with @Expose, but another
mode would be more useful. The ability to mark a class, so that all methods
will be exposed and putting a @Conceal annotation maybe on the methods you
don't want to expose. I am running into an issue where I have Hibernate
objects that are being handed to Gson and I have properties that are lazy
loaded and Gson will try to load them if I don't mark them as transient
members. I don't want these fields to be transient and I don't want to have
to write a wrapper layer for my POJOs. I also think it is a bit of a kludge
to have to mark all of my methods as @Expose that I want to expose. I'd
rather say all methods are exposed, except ...
```

Original issue reported on code.google.com by `chrislha...@gmail.com` on 13 Aug 2009 at 12:14""```
You can use parameters in Expose to get the effect of conceal. 

@Expose(serialize=false, deserialize=false)
```

Original comment by `inder123` on 13 Aug 2009 at 2:22
 =||= ```
I'm using Gson 1.3 and the @Expose annotation has no properties at all.
```

Original comment by `chrislha...@gmail.com` on 13 Aug 2009 at 2:55
 =||= ```
Ah ok, this is going to be included in Gson 1.4 release.
```

Original comment by `inder123` on 13 Aug 2009 at 4:38
 =||= ```
As noted above, this is fixed in Gson 1.4
```

Original comment by `inder123` on 18 Aug 2009 at 5:42
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
147JsonPrimitive.equals() should work with BigInteger and BigDecimalGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:45 PM"```
http://groups.google.com/group/google-
gson/browse_thread/thread/f6be51f5c5cf7168?hl=en
```

Original issue reported on code.google.com by `inder123` on 19 Aug 2009 at 9:15""```
This issue was closed by revision r447.
```

Original comment by `inder123` on 23 Sep 2009 at 6:54
- Changed state: **Fixed**
 =||= ```
Fixed in r447

Integral values (byte, short, integer, long, BigInteger) are now comparable to 
each other.
Floating point values (float, double, BigDecimal) are now comparable to each 
other.
```

Original comment by `inder123` on 23 Sep 2009 at 6:54
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
148Few serialization strategies for same typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:46 PM"```
I want to be able to serialize same object to different Json representations. 
Example:

public class Some {
private String field;
private String filed2;
private String filed3;
}

I want to have a way to get JSON with field and field2, but also I want to 
create JSON with field and field3. 
I think, annotation @Mode({string}) could help.
```

Original issue reported on code.google.com by `yura.ta...@gmail.com` on 20 Aug 2009 at 2:52""```
Can you write a custom serializer that does what you want? 
```

Original comment by `inder123` on 1 Sep 2009 at 9:59
 =||= ```
I am not sure how the @Mode annotation is supposed to work besides you can do 
the same with a custom 
serializer. I am closing this bug but feel free to reopen it with more details 
and compelling example use-cases. 
```

Original comment by `inder123` on 23 Sep 2009 at 5:26
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
149how to generate a Primitive json from a String?Google Code ExporterGoogleCodeExporter03/19/15, 06:24:47 PM"```
I use 1.3 version, I don't know whether my problem, how will a json 
request directly format string directly into the client executable json 
request directly? For example:
Map<String,Object> map = new HashMap<String,Object>();
map.put(""abc"",""abc"");
map.put(""data"",""[['1','a'],['2','b']]"");

I hope generates code: {"" ABC "":"" ABC "", ""data"" : [[' 1 ', 'a'], [' 
2 ', 'b']], 
but not，I get:
{""abc"":""abc"",""data"":""[['1','a'],['2','b']]""}. Normally, we do not know 
what type of data format, here is String[][], to change how I get the 
result?
```

Original issue reported on code.google.com by `wu.ar...@gmail.com` on 21 Aug 2009 at 1:43""```
Sorry but I do not understand this bug. Are you saying that you would like the 
type
information carried over to the client? That is not possible through any 
in-build
Json schemes. However, you can attach extra string properties for the values 
that
contain a hint for the type. 
```

Original comment by `inder123` on 24 Aug 2009 at 5:26
 =||= ```
Please provide further information if you want us to keep this bug open. In any 
case, I am deferring it to a future 
release.
```

Original comment by `inder123` on 29 Sep 2009 at 5:57
- Added labels: **Milestone-Release1.5**
 =||= ```
This is clearly not a bug, the reporter is expecting some very bizarre 
behaviour.

I suppose, if he put something like:

map.put(""data"", new String[][] { {""1"",""a""},{""2"",""b""} });

and that will serialize to this: {""abc"":""abc"",""data"":[[""1"",""a""],[""2"",""b""]]}

Which is good.
```

Original comment by `apri...@gmail.com` on 22 Mar 2010 at 10:51
 =||= Original comment by `limpbizkit` on 28 Aug 2010 at 5:43
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
150gson1.4 can't use in spring dmGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:49 PM"```
 i download 1.4 source and build it to jar.then i put it into spring dm's
pickup dictionary ,after i start up spring dm ,got a error :

source.kernel.deployer.core.internal.StandardApplicationDeployer E
<SPDE0018E> Unable to install application from location
'file:/D:/spring_DM/dm-server-2.0.0.M3/pickup/gson-1.4.jar'. Could not
satisfy constraints for bundle 'com.google.gson' at version '1.4.0'. Cannot
resolve: com.google.gson
    Resolver report:
        Missing constraint: <null> in bundle <com.google.gson_1.4.0>

so i use spring budle tool(it have a maven plugin) to build a osgi bundle
of gson!



```

Original issue reported on code.google.com by `1982hong...@gmail.com` on 23 Aug 2009 at 8:28""```
Fixed in r439

Please verify the fix and update this bug with the results. Thanks.
```

Original comment by `inder123` on 24 Aug 2009 at 5:23
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
151WARN log level to high for message about overriding type handlersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:50 PM"```
What steps will reproduce the problem?
1. Create a GSON object: new GsonBuilder().create(); 
2. Retrotranslate the byte code to jdk 1.4, using Retrotranslator 
http://retrotranslator.sourceforge.net/
3. Run the code.

What is the expected output? What do you see instead?

I would expect no WARNINGs to be logged. However, I see the following output to 
the console:

com.google.gson.ParameterizedTypeHandlerMap register
WARNING: Overriding the existing type handler for interface java.util.Collection

What version of the product are you using? On what operating system?
1.3 and also tested with 1.4 built from trunk.

Please provide any additional information below.

This log message comes from the following line of code:
http://code.google.com/p/google-
gson/source/browse/trunk/gson/src/main/java/com/google/gson/ParameterizedTypeHan
dlerM
ap.java#49


Specifically, it is logged because the 
DefaultTypeAdapters.createDefaultInstanceCreators method 
adds a COLLECTION_TYPE_HANDLER for Collection.class, and then later, a 
Queue.class. 
Because Queue.class is @since 1.5, retrotranslator replaces the class literal 
""java.util.Queue"", with 
""java.util.Collection"". This causes the Queue type handler to overwrite the 
Collection type 
handler.

    map.register(Map.class, MAP_TYPE_ADAPTER);

    // Add Collection type instance creators
    map.register(Collection.class, COLLECTION_TYPE_ADAPTER);
    map.register(List.class, COLLECTION_TYPE_ADAPTER);
    map.register(Queue.class, COLLECTION_TYPE_ADAPTER);


I'm not sure that a WARNING is needed here, since both Collection and Queue 
have the same 
Collection type handlers. 

Either the WARNING could be removed, or there could be some smarter registering 
of type 
handlers so that the Queue class automatically gets the COLLECTION_TYPE_HANDLER.
```

Original issue reported on code.google.com by `npel...@gmail.com` on 27 Aug 2009 at 1:17""```
We log it as a WARNING because we want to make sure that the user is not
""accidentally"" overriding one of the default type adapters.  We are using the 
JDK
logger, so it is possible for you to disable all logging coming from the Gson 
library
by adding the following line to your logging properties file:

# Turn off all Gson logging.
com.google.gson.level = OFF


Or you can turn off all JDK logging with:
# Disable all logging
.level = OFF


-----------------

On a side note, would you be able to post the instructions on how you 
retrotranslated
the Gson library to run on a Java 1.4 VM?

Thanks,
Joel
```

Original comment by `joel.leitch@gmail.com` on 29 Sep 2009 at 5:30
- Changed state: **WontFix**
 =||= ```
HI Joel, 

Thanks for the update.

I worked around this by telling retrotranslator to keep class literals. The 
configuration for the retrotranslator Ant task is as follows:

<retrotranslator target=""1.4""
                             destjar=""${destjar}"" srcjar=""${srcjar}""
                             smart=""true"" verify=""false"" failonwarning=""true"" keepclasslit=""true"">
                <classpath>
                     ....
                </classpath>
</retrotranslator>

However, IMO - that logging should be at DEBUG level by default, because it is 
a programmer error, and not a user error.
The programmer should ensure the program functions correctly by writing tests, 
etc before shipping to the customer, rather than use log 
messages from the library to detect possible errors. Or, the library should 
fail hard and fast if an error really exists.

In my case - everything worked fine, and that log message was still being 
output as WARN.

Cheers,
Nick
```

Original comment by `npel...@gmail.com` on 29 Sep 2009 at 10:20
 =||= ```
I noticed this is marked won't fix. I just spent some time figuring out why our 
logs are bloated with this particular message and found my way here. From my 
point of view this is indeed debug level information. In general, libraries 
should be very conservative with logging above debug level IMHO.

Anyway, am I actually doing something wrong here? I was under the impression I 
was using a (well) supported feature of GSon when I implemented a handful of 
custom serializers and deserializers.
```

Original comment by `jillesva...@gmail.com` on 10 Dec 2010 at 2:02
 =||= By code:

```
private static void logfixInit() {
    {
        // com.google.gson.level = OFF
        try {
            String newLoggingProperties // this is a copy of the original one +
                    = ""handlers= java.util.logging.ConsoleHandler\n""
                    + "".level= INFO\n""
                    + ""rectory.\n""
                    + ""java.util.logging.FileHandler.pattern = %h/java%u.log\n""
                    + ""java.util.logging.FileHandler.limit = 50000\n""
                    + ""java.util.logging.FileHandler.count = 1\n""
                    + ""java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n""
                    + ""java.util.logging.ConsoleHandler.level = INFO\n""
                    + ""java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n""
                    + ""com.google.gson.level = OFF\n"" // changed to disable gson as per https://github.com/google/gson/issues/151
                    // + ""com.xyz.foo.level = SEVERE\n""
                    ;
            LogManager logManager = LogManager.getLogManager();
            logManager.readConfiguration(new ByteArrayInputStream(newLoggingProperties.getBytes()));
        } catch (Exception e) {
            // log error
        }
    }
}
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
152Minor javadoc documentation issue in com.google.gson.GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:54 PM"```
The Javadoc documentation for the class is eating some < characters:
 Type listType = new TypeToken>() {}.getType();
 List target = new LinkedList();
...
 List target2 = gson.fromJson(json, listType);


It should be:
 Type listType = new TypeToken<List<String>>() {}.getType();
 List<String> target = new LinkedList<String>();
...
 List<String> target2 = gson.fromJson(json, listType);

```

Original issue reported on code.google.com by `australi...@gmail.com` on 2 Sep 2009 at 2:22""```
Thanks for catching this.
```

Original comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:11
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
153setPrettyPrinting cause missing comma deliminator after an empty mapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:55 PM"```
if Gson instance is obtained from GsonBuilder with pretty print 
        GsonBuilder builder = new GsonBuilder();
        builder.setPrettyPrinting();
        Gson gson = builder.create();        
it would produce un-parseable json string if the object contains an empty map
example:
{""viewsStale"":true,""fireAllRules"":0,""formRules"":[],""dcs"":[{""accountId"":1,
      ""createdBy"":"""",""name"":""dc1"",""m_segmentGroup"":{""accountId"":1,
        ""nextRuleId"":0,""name"":""dc1"",""createdBy"":"""",""rules"":{}""description"":
        ""desc""},""m_dcmTexts"":{}}],""dispatchableName"":""disp1"",""typeCode"":-1,
  ""subType"":""GENERIC"",""name"":""disp1"",""status"":""A""}

notice missing comma here (""rules"":{}""description"":)

correct output without pretty print
{""viewsStale"":true,""fireAllRules"":0,""formRules"":[],""dcs"":[{""accountId"":1,""create
dBy"":"""",""name"":""dc1"",""m_segmentGroup"":{""accountId"":1,""nextRuleId"":0,""name"":""dc1""
,""createdBy"":"""",""rules"":{},""description"":""desc""},""m_dcmTexts"":{}}],""dispatchable
Name"":""disp1"",""typeCode"":-1,""subType"":""GENERIC"",""name"":""disp1"",""status"":""A""}

What version of the product are you using? On what operating system?
latest product. java: 1.6, os: xp

Please provide any additional information below.

```

Original issue reported on code.google.com by `jackwum...@gmail.com` on 2 Sep 2009 at 9:13""```
Fixed in r454
```

Original comment by `inder123` on 29 Sep 2009 at 5:53
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
154how to convert JsonObject to JSONString()?Google Code ExporterGoogleCodeExporter03/19/15, 06:24:55 PM"```
call JsonObject.toString()  result is not a realy JSONString
because some char is not quoted!!!
Gson gson = new Gson();
JsonParser p = new JsonParser();

JsonElement r = p.parse(""{\""text\"":\""good\\n after\\nnoom\""}"");
JsonObject ob = r.getAsJsonObject();

r.toString() \\ espect {""text"":""good\\n after\\nnoom\""} but {""text"":""good
after
noom\""}

```

Original issue reported on code.google.com by `lxb...@gmail.com` on 9 Sep 2009 at 9:56""```
Issue 157 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:27
 =||= ```
I will create a change to fix this to at least use the basic escaping according 
to
the JSON spec.

Since the Gson object can be configured to do extra escaping (i.e. HTML, JS, 
etc.),
you can always use the following method to generate valid JSON from some 
JsonElement
object:
{@link Gson#toJson(JsonElement)}
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:31
- Changed state: **Accepted**
 =||= ```
Fix submitted with r446.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:28
- Changed state: **Fixed**
 =||= ```
Issue 107 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 6:49
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
155An Object[] field should be serialized per the actual object typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:57 PM"```
http://groups.google.com/group/google-
gson/browse_thread/thread/e4df79a0d0dc8959?hl=en
```

Original issue reported on code.google.com by `inder123` on 10 Sep 2009 at 4:40""```
Fixed in r442.
```

Original comment by `joel.leitch@gmail.com` on 22 Sep 2009 at 7:12
- Changed state: **Fixed**
 =||= ```
Not sure this is completely fixed in the 1.4 version I downloaded from the 
website. 

Suppose I have a class Message with a simple 'id':

    public class Message {
        public String messageId;
    }

and a subclass TextMessage which adds a 'text' field.  

    public class TextMessage extends Message {
        public String text;
    }

Lastly I create a MessageBox class that contains a List<Message> (not 
TextMessage) 
called 'messages':

    public class MessageBox {
        public List<Message> messages;
    }

If I create an instance of MessageBox (called mbox) and populate it's list of 
Messages with TextMessages, then I get the following behaviour:

    gson.toJson(mbox.messages) // serialise the collection directly...
    [{""text"":""Hello World!"",""messageId"":""t1""},
     {""text"":""Hello World!"",""messageId"":""t2""}]

    gson.toJson(mbox) // serialise the containing MessageBox object...
    {""messages"":[{""messageId"":""t1""},{""messageId"":""t2""}]}

In the seconds example simply containing the List in a parent class has 
reverted back 
to the behaviour of serialising based on the parent class. 

Finally, if I switch the declaration of mbox.messages from List<Message> to 
List<Object>, it all works as expected:

    {""messages"":[{""text"":""Hello World!"",""messageId"":""t1""},
                 {""text"":""Hello World!"",""messageId"":""t2""}]}

```

Original comment by `charles%...@gtempaccount.com` on 3 Jun 2010 at 5:45
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
156Gson should convert use the actual type of a field while serializingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:24:57 PM"```
See discussion at: 
http://groups.google.com/group/google-
gson/browse_thread/thread/937ca75af0c6869f
```

Original issue reported on code.google.com by `inder123` on 18 Sep 2009 at 8:11""```
This issue was closed by revision r453.
```

Original comment by `inder123` on 25 Sep 2009 at 7:54
- Changed state: **Fixed**
 =||= Original comment by `inder123` on 25 Sep 2009 at 7:55
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
157Newlines not converted to json properly in JsonObject.toString()Google Code ExporterGoogleCodeExporter03/19/15, 06:24:58 PM"```
What steps will reproduce the problem?


JsonObject obj = new JsonObject();
obj.addProperty(""someProp"", ""multiline\nstring"");
System.out.println(obj.toString());

What is the expected output? What do you see instead?

Expected Output: 

{""someProp"":""multiline\nstring""}

Observed Output:

{""someProp"":""multiline
string""}

What version of the product are you using? On what operating system?
Gson 1.3
Windows Vista

Please provide any additional information below.

```

Original issue reported on code.google.com by `vish.ram...@gmail.com` on 19 Sep 2009 at 1:48""```
You should not expect valid JSON here.  Since the Gson object can be configured 
with
different escaping strategies, we recommend that you use the following function 
instead:
{@link Gson#toJson(JsonElement)}
```

Original comment by `joel.leitch@gmail.com` on 23 Sep 2009 at 5:27
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
158gson doesn't build on Java 6Google Code ExporterGoogleCodeExporter03/19/15, 06:24:59 PM"```
When building gson using Java 6, I get the following error.

  .../gson-trunk/gson/src/main/java/com/google/gson/Gson.java:[446,23]
  type parameters of <T>T cannot be determined; no unique maximal instance
  exists for type variable T with upper bounds T,java.lang.Object

I can confirm this when using Sun's JDK, versions 6u12 through 6u16, but I
suspect that the error happens with all of Sun's Java 6 JDKs.

I've attached a patch that fixes the issue.

```

Original issue reported on code.google.com by `tim.molo...@gmail.com` on 23 Sep 2009 at 2:03

Attachments:
- [Gson.fromJson-addCast.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-158/comment-0/Gson.fromJson-addCast.patch)""```
Oh, since it's such a trivial change, can it be included in the gson 1.4 
release that
I hear could happen before the end of the month?  Thanks.
```

Original comment by `tim.molo...@gmail.com` on 23 Sep 2009 at 2:04
 =||= ```
This issue was closed by revision r444.
```

Original comment by `inder123` on 23 Sep 2009 at 5:17
- Changed state: **Fixed**
 =||= ```
Fixed in r444 
The problem arises because of the incompatible way JDK 1.5 and JDK 1.6 handle 
casting to type variables. One of 
them throws a warning if you cast, the other one throws a compilation error if 
you dont. 
```

Original comment by `inder123` on 23 Sep 2009 at 5:22
 =||= ```
Issue 145 has been merged into this issue.
```

Original comment by `inder123` on 23 Sep 2009 at 5:47
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
159How to serialize single-level simple arraysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:00 PM"```
I've currently used net.sf.json and flexjson and was hoping google-gson 
was as easy to use. Is it really necessary to write a custom serializer to 
output a simple JsonArry as follows?

[{""xxx"",""yyy"",""zzz""},{""111"",""222"",""333""}]

What am I missing...a code snippet would be appreciated. 
```

Original issue reported on code.google.com by `quin.h.m...@boeing.com` on 24 Sep 2009 at 6:33""```
This is not a bug, please post such comments on the Gson discussion group where 
they can be answered 
best. The discussion group is at: http://groups.google.com/group/google-gson 

Please move any further response to the group after cutting and pasting from 
this issue. Thanks.

It is not clear to me what you are outputting from? Is it an Array (or 
collection) of objects? If so, Gson can 
easily convert it to what you want. No need to write a custom serializer.

Class Element {
  String a, b, c;
}

Element[] array = new Element[] { new Element(""xxx"", ""yyy"", ""zzz""}, new 
Element(""111"", ""222"", ""333""); };

Gson.toJson(array); will output what you want.

```

Original comment by `inder123` on 24 Sep 2009 at 9:11
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
160JsonParseExceptions (or specialized sub-classes) should provide more specific infoGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:01 PM"```
JsonParseException contains only the usual message and cause. What I am 
specifically looking for is separate properties outlining details of what 
went wrong when parsing a value. Specifically, the field name (if it was a 
field), and target and actual data based on what went wrong. If the type 
was wrong, show target and actual type (string vs. boolean vs. BigDecimal, 
etc.). Perhaps a specific format is required, then I would want the text 
position where the actual value diverges.

The JPE message do typically contain this information. The problem is that 
they often contain information appropriate to a consumer over HTTP. Most 
often it's the name of the target Java class. With the bits of information 
provided separately on the exception, I could construct a more appropriate 
error message.

So, e.g., instead of:

The JsonDeserializer BigDecimalTypeAdapter failed to deserialized json 
object ""abcde"" given the type class java.math.BigDecimal

I would send to the client:

For field X: expected a decimal number and instead got a string

Which would be more friendly to non-java consumers of my json
```

Original issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:08
- Merged into: #395""```
I agree with the goal but it is not as straightforward in the current design. 
At the 
point where the exception is thrown, we are not in the context of the parent, 
we are 
in the context of the object being deserialized. However, we will see what can 
be done 
about this in a future release.
```

Original comment by `inder123` on 25 Sep 2009 at 5:31
 =||= Original comment by `inder123` on 25 Sep 2009 at 5:34
- Added labels: **Milestone-Release1.5**
 =||= Original comment by `inder123` on 1 Nov 2010 at 11:24
- Removed labels: **Milestone-Release1.5**
 =||= ```
Let's finally get this done!
```

Original comment by `limpbizkit` on 29 Dec 2011 at 6:03
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
161BigDecimalTypeAdapter accepts invalid input when parsed aloneGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:03 PM"```
new Gson().fromJson(""12345X67890"", BigDecimal.class) yields a BigDecimal 
representing the number 12345. From the code it appears that 
BigDecimalTypeAdapter merely delegates parsing the String to BigDecimal 
itself, so the bug (or documented allowance) is there. However, this does 
not appear to be valid json, and in the context of json parsing an 
exception should be thrown. It would appear the type adapter needs to 
enforce a format on the input before constructing the BD.

Funny enough, it only passes in this situation. In these other three 
situations, an exception *does* occur:

1. Quoted String is given as input: new Gson().fromJson(""\""12345X67890\"""", 
BigDecimal.class)
2. Value is a field on an object, quoted : new 
Gson().fromJson(""{\""price\"":\""12345X67890\""}"", StockQuote.class)
3. Value is a field on an object, unquoted: new 
Gson().fromJson(""{\""price\"":12345X67890}"", StockQuote.class)

I don't get why this matters, since the same adapter, using the same code I 
can see is used each time... perhaps it's late and I'm missing something.

Gson version is 1.3.
```

Original issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:22""```
Err, sorry. Case #3 gives an error different from the first two. Doesn't even 
make it 
to the BigDecimalTypeAdapter, which is what I would expect in the original 
input that 
is allowed. Here are the exception messages by situation:

1. The JsonDeserializer BigDecimalTypeAdapter failed to deserialized json 
object 
""12345X67890"" given the type class java.math.BigDecimal
2. The JsonDeserializer BigDecimalTypeAdapter failed to deserialized json 
object 
""12345X67890"" given the type class java.math.BigDecimal
3. Failed parsing JSON source: java.io.StringReader@7f2a3793 to Json
```

Original comment by `estebis...@gmail.com` on 25 Sep 2009 at 3:26
 =||= ```
This is how the Gson's JSON parser works. In the first case, the lexical 
analyzer 
treats 12345 as one token and the remaining part as another. Your fromJson call 
returns fine because Gson doesn't look at the input beyond what it needs. Your 
other 
methods fail because they force Gson to look beyond the first token.
```

Original comment by `inder123` on 25 Sep 2009 at 5:29
- Changed state: **Invalid**
 =||= ```
So it's a documented feature of Gson's JSON parser that gargage is ignored in 
the 
stream? Seems like the overall JSON stream should fail, as this isn't valid 
JSON when 
viewed altogether.
```

Original comment by `estebis...@gmail.com` on 25 Sep 2009 at 6:31
 =||= ```
s/gargage/garbage/

bleh
```

Original comment by `estebis...@gmail.com` on 25 Sep 2009 at 6:32
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
162Thread issues with date formatterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:04 PM"```
What steps will reproduce the problem?
1.  Run high levels of threads which do date serialization
2.  DefaultDateTypeAdapter uses SimpleDateFormat statically
3.  See lots of exceptions on random occasions

What is the expected output? What do you see instead?

Expect date serialization to work!
 public JsonElement serialize(Date src, Type typeOfSrc,
JsonSerializationContext context) {
      String dateFormatAsString = format.format(src);
      return new JsonPrimitive(dateFormatAsString);
    }
Changing the constructor to:
 public DefaultDateTypeAdapter(final String datePattern) {
      this.format = new ThreadLocal<DateFormat>() {
        protected DateFormat initialValue() {
                   new SimpleDateFormat(datePattern);
                };
    }

  public JsonElement serialize(Date src, Type typeOfSrc,
JsonSerializationContext context) {
      String dateFormatAsString = format.get().format(src);
      return new JsonPrimitive(dateFormatAsString);
    }

  public Date deserialize(JsonElement json, Type typeOfT,
JsonDeserializationContext context)
        throws JsonParseException {
      if (!(json instanceof JsonPrimitive)) {
        throw new JsonParseException(""The date should be a string value"");
      }

      try {
        return format.get().parse(json.getAsString());
      } catch (ParseException e) {
        throw new JsonParseException(e);
      }
    }


Would be a simple fix.


What version of the product are you using? On what operating system?

Latest GSON release.  Issue is using the date formatter statically, as
SimpleDateFormat isn't thread safe, so you'll get random results with the
date format.  It will also randomly throw exceptions.  See stack trace below.

Please provide any additional information below.

java.lang.ArrayIndexOutOfBoundsException: -28   at
sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:43
6)
at
java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081)  at
java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996)  at
java.util.Calendar.setTimeInMillis(Calendar.java:1066)  at
java.util.Calendar.setTime(Calendar.java:1032)  at
java.text.SimpleDateFormat.format(SimpleDateFormat.java:785)    at
java.text.SimpleDateFormat.format(SimpleDateFormat.java:778)    at
java.text.DateFormat.format(DateFormat.java:314)    at
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.serialize(DefaultType
Adapters.java:254)
at 
```

Original issue reported on code.google.com by `mcinto...@gmail.com` on 25 Sep 2009 at 4:12""```
Good catch. We chose to instead just synchronize the serialize and deserialize 
methods. See r452
```

Original comment by `inder123` on 25 Sep 2009 at 5:15
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= Original comment by `inder123` on 25 Sep 2009 at 5:15
 =||= ```
Note, the synchronization will fix the threading issues, but there is a 
performance
cost of that versus thread local variables.  In high performance/highly threaded
environments, using SimpleDateFormat has a cost.  Because of the way it's
implemented, with regular expressions, when you're running a lot of threads 
there is
definitely a potential for blocking that could be problematic.  I don't have 
any hard
and fast numbers at the moment, but it might be worth while to run some 
profiling
with at least 16 threads to make sure there aren't any performance issues.
```

Original comment by `mcinto...@gmail.com` on 28 Sep 2009 at 5:05
 =||= ```
Yes, we thought about the performance issues regarding synchronization. 
However, the synchronization is 
specific to the default DateTypeAdapter so the impact will be if you have lots 
of dates getting serialized at the 
same time. That shouldn't be a problem in real world situations in my opinion. 
If you have a situation where this 
is a concern, please reopen the bug and provide details and we will take 
another look.
```

Original comment by `inder123` on 28 Sep 2009 at 3:11
 =||= We have too many Thread blocked at below line due to synchronized keyword. 
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.serialize(java:265) 

We have heavy usage of date format in gson.
 =||= @ilyassoomro you can probably install a custom date adapter that uses separate `SimpleDateFormat` instances per-thread rather than shared ones.
 =||= Also - this adapter might not be of the exact format you want, but it's threadsafe & doesn't use synchronized.
https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
 =||= The perfomance hit might be an issue for us so we resorted to using an overrride by using our own Serde for `util.date` and `sql.date`.

Uses FastDateFormat instead of SimpleDateFormat to ensure you dont take a performance hit due to serial usage (synchronize write and read)

Have added some sample code in [github gist](https://gist.github.com/aarengee/e3ea670f64497b9140358a7db8077a24). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
163Add @PreSerialize annotationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:06 PM"```
1.remove unused field value
public class User{
private String username;
private String password;
@PreSerialize
public void preSerialize(){
this.password = null;
}
}

2.set getter's value to field
because gson doesn't support serialize getter method

public class TreeNode{
private Collection<TreeNode> children;
private boolean hasChildren;
@PreSerialize
public void preSerialize(){
this.hasChildren = isHasChildren();
}
public boolean isHasChildren(){
return this.children != null && this.children.size() != 0;
}
}
```

Original issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 2:50""```
Sorry, but I do not fully understand the requirements for this new PreSerialize
annotation.

This could done similar to the PostCreate (Issue #144) or it could be done with 
a
TypeConverter where you can do some special behaviour and than use the
SerializationContext and serialize this (Issue #43).
```

Original comment by `joel.leitch@gmail.com` on 10 Oct 2009 at 4:17
 =||= ```
I can't find @PostCreate,I think it's for deserialization not serialization
TypeConverter need exact class
registerTypeAdapter(Foo.class, new FooTypeAdapter()) doesn't works for subclass 
of Foo
it must be 
registerTypeAdapter(ChildOfFoo.class, new 
FooTypeAdapter()).registerTypeAdapter(Child2OfFoo.class, new 
FooTypeAdapter()).registerTypeAdapter(Child3OfFoo.class, new 
FooTypeAdapter())....

```

Original comment by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:40
 =||= ```
I have a patch,please see 
http://code.google.com/p/google-gson/issues/detail?id=164
```

Original comment by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:58
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:29
- Added labels: **Milestone-Undefined**
 =||= ```
Let's fix issue 164 instead.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 5:30
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
164Check parent class for ParameterizedTypeHandlerMapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:08 PM"```
TypeConverter need exact class

registerTypeAdapter(Foo.class, new FooTypeAdapter()) doesn't works for 
subclass of Foo

it must be 

registerTypeAdapter(ChildOfFoo.class, new 
FooTypeAdapter()).registerTypeAdapter(Child2OfFoo.class, new 
FooTypeAdapter()).registerTypeAdapter(Child3OfFoo.class, new 
FooTypeAdapter())....

this patch can solve this problem.
```

Original issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:57

Attachments:
- [patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-164/comment-0/patch.txt)""```
We were aware of this issue when we were designing the ParameterizedHandlerMap. 
The reason that it doesnt 
support subclasses is that SubClasses usually contain extra fields, and 
applying a base-class type adapter will 
result in unintended consequences (since the base class handler may not be 
designed to work with the extra 
fields of subclasses). 

In a future release of Gson, we are thinking of providing a way to address 
common use-cases around this. For 
example, we could provide an annotation that is used to determine the type of 
the object to deserialize into. Or a 
variant of your suggestion.
```

Original comment by `inder123` on 10 Oct 2009 at 6:11
 =||= ```
I've been frustrated by this surprising limitation myself, having spent a good 
deal of time developing a generic EObject (as in Eclipse EMF) type adapter, 
which uses Ecore metadata to determine which features to serialize and how.

A related use case relates to serialization of interfaces. The current adapter 
lookup code uses the object class as the key; I would like to be able to 
register type adapters by interface (such as EObject).

I'd have thought it would have made sense to:
1. provide a GsonBuilder setting to enable serialization-via-superclass
and/or
2. add a JsonSerializer.isAdapterForType(Type) : boolean method so that a 
serializer which matches on superclass/(super)interface can indicate whether it 
wants to handle a given subclass/subinterface.

Without this flexibility it is hard to define a generalized reusable serializer 
- as things currently stand you must explicitly register such a serializer for 
every conceivable class it may be required to handle. This is tedious and 
inefficient at best and impossible at worst, since you may not know in advance 
what the subclasses are (in my own scenario, unknown generated Ecore packages 
extending known types can be contributed by 3rd party extensions).

I would greatly welcome improvements in this area :-)

Thanks,

Adrian Price
Senior Architect
TIBCO Software Inc.
```

Original comment by `adrianp....@gtempaccount.com` on 1 Oct 2010 at 12:54
 =||= ```
This is related to issue 242, where enums frequently have anonymous subclasses 
that aren't easily registered in the type adapter map.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:02
 =||= ```
I think we might want to reconsider this behavior in 1.7.

The attached patch demonstrates how the current behavior is quite surprising. 
The core problem is that sometimes we use the type adapter and sometimes we 
don't. We use it if it's assigned to the static type (such as the field type); 
we don't use it if we don't have static type information, or if we don't have 
sufficient static type information and we use runtime type information.

I particularly don't like how GSON does different things depending on how much 
type information it has.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:18

Attachments:
- [Runtime_TypeAdapters.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-164/comment-4/Runtime_TypeAdapters.patch)
 =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:18
- Added labels: **Milestone-Release1.7**
 =||= ```
Obsolete by GsonBuilder.registerTypeHierarchyAdapter().
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:20
- Changed state: **WontFix**
 =||= ```
Issue 125 has been merged into this issue.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:28
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
165Enum constant does not existGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:11 PM"```
This isn't a bug per say, more of a starting point for a conversation. Our
organization uses GSON to pass data between two internal applications, both
running in Java. Both applications depend on a particular in-house library,
but the receiving end isn't guaranteed to have the same version as the
sending end. This has caused some problems with our use of enums, when the
sender has knowledge of enum constants that the receiver does not know
about. It might be nice to have a way to optionally silently ignore these
mis-matches on the receiver. We have a solution that works for us, and are
somewhat curious if this is an issue for anyone else out there.


What steps will reproduce the problem?
1. Serialize an object that has an enum property to JSON
2. Deserialize the JSON in another application that does not have that enum
constant available


What is the expected output? What do you see instead?

That is the big question. In our particular instance, we would just want
that enum to be ignored. If the class that has the enum looked like

public class Something {
MyEnum a;
}

And MyEnum had ""A"" and ""B"", if the JSON said it should be ""C"", I would want
the property ""a"" to be null.

In another instance in our application, we have a class:

public class SomethingElse {
Set<MyEnum> flags;
}

If a constant of ""C"" were coming through in JSON, I would expect this set
to be empty, if the application containing it only knew about A and B.

What version of the product are you using? On what operating system?
Any

Please provide any additional information below.

We have overcome the first example by making our own type adapter, based on
the built-in one, that looks like:

public class EnumSafeChangeTypeAdapter<T extends Enum<T>> implements
JsonSerializer<T>, JsonDeserializer<T> {
    public JsonElement serialize(T src, Type typeOfSrc,
JsonSerializationContext context) {
        return new JsonPrimitive(src.name());
    }

    // The NULL here needs to be coupled with an instancecreator that returns
    // null as well. See VzLite for an example of this
    @SuppressWarnings(""cast"")
    public T deserialize(JsonElement json, Type classOfT,
JsonDeserializationContext context) throws JsonParseException {
        try {
            return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());
        }
        catch (Exception e) {
            return null;
        }
    }

    @Override
    public String toString() {
        return EnumSafeChangeTypeAdapter.class.getSimpleName();
    }
}

Also, we have to register an instance creator to handle the null, otherwise
we get other exceptions:

GsonBuilder builder = new GsonBuilder();
builder.registerTypeAdapter(Enum.class, new InstanceCreator<Enum<?>>() {
public Enum<?> createInstance(Type type) {
return null;
}
});
```

Original issue reported on code.google.com by `danw...@gmail.com` on 12 Oct 2009 at 8:29""```
Glad to know that you could register a custom type adapter to address your 
use-case. 
We wouldn't like to change the design of Gson to silently ignore invalid Enum 
values 
as it may mask real bugs. Some organization prefer the fail-fast approach to 
detect 
bugs.
```

Original comment by `inder123` on 15 Oct 2009 at 4:10
 =||= ```
Sorry for jumping in a bit late here.  What version of Gson are you running 
that requires you to register both a custom deserializer and an instance 
creator.  I know we had that bug a while back, but I thought it was fixed in 
version 1.3 and later.

Is it possible to use the Gson versioning to protect you from the 
sender/receiver incompatibilities? The common approach for API versioning is 
that the client will request the API version it would like to use with the 
server. The server is then able to process and respond to the client without 
breaking backward compatibility. As new features get added to API calls (or new 
API calls emerge) then the server should support a new version. 
```

Original comment by `joel.leitch@gmail.com` on 21 Aug 2010 at 8:31
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:45
- Added labels: **Milestone-Undefined**
 =||= ```
I do not consider this a Gson issue, but rather a versioning issue between the 
client and server.
```

Original comment by `joel.leitch@gmail.com` on 22 Mar 2011 at 10:15
- Changed state: **Invalid**
 =||= > ```
> Glad to know that you could register a custom type adapter to address your 
> use-case. 
> We wouldn't like to change the design of Gson to silently ignore invalid Enum 
> values 
> as it may mask real bugs. Some organization prefer the fail-fast approach to 
> detect 
> bugs.
> ```
> 
> Original comment by `inder123` on 15 Oct 2009 at 4:10

Ironically, this behavior changed all the way back in 2011 (this original issue was opened in 2009!), and since then invalid enum constant values ARE being silently ignored!

This is the PR that changed that behavior:
https://github.com/google/gson/commit/214234e2029919dd7d25c4a90e2fac825795c022#diff-59aaf1be173468019fecc281a6b1890f

Specifically the change from:
 `return Enum.valueOf(classOfT, in.nextString());` (which throws an exception if the value does not match a constant) to:
 `return nameToConstant.get(in.nextString());` (which returns null in the same case!)

Wouldn't it make sense to throw an exception after all, as you mentioned in your comment in 2009 (posted by ""GoogleCodeExporter"" in 2015... I was a bit confused by that), ""We wouldn't like to change the design of Gson to silently ignore invalid Enum values""? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
166merge method for JsonObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:12 PM"```
What about new method(s) merge for JsonObject... it would be something
simmilar to JsonArray.addAll

void    merge(JsonObject value) 
void    merge(Object value) 
```

Original issue reported on code.google.com by `adamchuk` on 20 Oct 2009 at 3:47""```
I don't know if I correctly understand this request. I would like gson to have a
merge function that adds all values from an jsonstring to an existing object 
but not
changing the values that don't exist in the json string. 

something like: 

gson.merge(String updatedValuesAsJson, class of the object, originalObject)
```

Original comment by `inno...@gmail.com` on 6 May 2010 at 3:00
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:36
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:46
- Added labels: **Milestone-Undefined**
 =||= ```
interested in this method
```

Original comment by `taps...@gmail.com` on 23 Sep 2011 at 4:49
 =||= ```
I would also like to see this. It would help me when dealing with more complex 
serialization issues.

Imagine the rather simple example:

{id: 42} and {value: ""answer""}

Merging these two JsonElements to {id: 42, value: ""answer""} is hard with the 
current API
```

Original comment by `oliver.s...@gmail.com` on 3 Jan 2012 at 12:11
 =||= ```
It's pretty straightforward to write your own static merge method:
  public static merge(JsonObject a, JsonObject b)

The best part about writing your own method is that you get to define your own 
semantics when there's a conflict. There's lots of strategies that Gson could 
do, but application developers will know best.

A: { ""name"": ""Jesse"" }
B: { ""name"": ""Inder"" }
Conflict resolution: throw IllegalArgumentException

A: { ""name"": ""Jesse"", ""pets"": ""Butters"" }
B: { ""name"": ""Jesse"", ""pets"": ""McFly"" }
Conflict resolution: create an array
   { ""name"": ""Jesse"", ""pets"": [ ""Butters"", ""McFly"" ] }

A: { ""name"": ""Jesse"", ""city"": null }
B: { ""name"": ""Jesse"", ""city"": ""Waterloo"" }
Conflict resolution: prefer non-null over null
   { ""name"": ""Jesse"", ""city"": ""Waterloo"" }

For this reason I'd prefer we not implement a merge() method that assumes we'll 
get the behavior developers want.
```

Original comment by `limpbizkit` on 3 Jan 2012 at 3:10
- Changed state: **WontFix**
 =||= ```
Hello,

I know it's an old issue to discuss, but I still believe it could be a fine 
feature to have. 
I'm thinking something about this:

new 
GsonMerger().setConflictResolutionStrategy(myResolutionStrategy).merge(jsonObjec
t1, jsonObject2).build();

new 
GsonMerger().setConflictResolutionStrategy(myResolutionStrategy).merge(jsonObjec
t1).merge(jsonObject2).build();

where 

interface ConflictResolutionStrategy {
      void handleError(JsonElement parent, JsonElement oldElement, JsonElement newElement);
}

Following limpbizkit's comment, available options could be:

DefaultConflictResolutionStrategy - throws IllegalArgumentException if name 
conflict [DEFAULT]
AppendElementConflictResolutionStrategy - appends it to the same ""bucket""
NonNullElementConflictResolutionStrategy - replaces the previous element only 
if null
NewerElementConflictResolutionStrategy - always replaces the previous element

Why do I refloat this? Because all the examples I saw they were with shallow 
json trees, just one depth-level. It comes a little bit more complex with 
greater json graphs. A single-line utility would be perfect.

Thanks,

Sebas.-
```

Original comment by `scotti.s...@gmail.com` on 11 Sep 2014 at 3:01
 =||= ```
This is needed, please revoke the resolution ""won't fix"" and have a look at 
Sebas suggestion above.
```

Original comment by `eirir...@gmail.com` on 8 Dec 2014 at 11:56
 =||= ```
Sebas' suggestion seems spot on to me and would be extremely useful.
```

Original comment by `christop...@gmail.com` on 27 Feb 2015 at 5:55
 =||= plus one to Sebas' suggestion ! to do a deep copy is non-trivial and more scope for bugs. the strategies suggested could handle this, and one could always plug-in their own strategy =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
167Cannot deserialize TreeSetGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:15 PM"```
What steps will reproduce the problem?

TreeSet<String> strings = new TreeSet<String>();
strings.add(""Happy"");

Gson gson = new Gson();
String json = gson.toJson(strings);

strings = gson.fromJson(json, new TypeToken<TreeSet<String>>() {}.getType());


What is the expected output? What do you see instead?
I would expect it to run without exceptions.  
I am getting the following:
Exception in thread ""main"" java.lang.ClassCastException:
java.util.LinkedList cannot be cast to java.util.TreeSet


What version of the product are you using? On what operating system?
gson-1.3.jar and gson-1.4.jar  
Running on OSX 10.6

Please provide any additional information below.

```

Original issue reported on code.google.com by `gciar...@gmail.com` on 23 Oct 2009 at 1:32""```
Thanks for the bug report.
Fixed in r520
```

Original comment by `inder123` on 8 Jan 2010 at 7:15
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
168No support for fields whose types are type parametersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:16 PM"```
Assume you have the following 2 classes:
class Entity<IDT,NameT>{
    IDT id;
    NameT name;

    public Entity(IDT id, NameT name) {
        super();
        this.id = id;
        this.name = name;
    }
    public IDT getId() {
        return id;
    }
    public NameT getName() {
        return name;
    }
}

class Employee extends Entity<Integer,String>{
    double age; 
    private int tag;

    public Employee() {
        super(0,null);
    }
    public Employee(int id, String name, double age) {
        super(id,name);
        this.age = age;
    }

    public double getAge() {
        return age;
    }

    void setTag(int tag){
        this.tag = tag;
    }   
}

when trying to use 
  new GsonBuilder().create().toJson(new Employee(1,""Mary"",10)); it throws 

java.lang.UnsupportedOperationException: Expecting parameterized type, got
class test.gson.Employee.
 Are you missing the use of TypeToken idiom?
 See
http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializ
ing-Gener

ok, then I try the generic one using 
new GsonBuilder().create().toJson(new Employee(1,""Mary"",10),new
TypeToken<Employee>(){}.getType()); Gson will only show id/name field, all
other field in Employee class is ignored. any solution? 

I've refered <a
href=""http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/jav
a/com/google/gson/functional/ParameterizedTypesTest.java"">,
but didn't help.

please help to solve the problem. thanks!
```

Original issue reported on code.google.com by `hnjch...@gmail.com` on 26 Oct 2009 at 8:49""```
by the way, I tried this under both 1.3/1.4 beta, both threw the same exception
```

Original comment by `hnjch...@gmail.com` on 26 Oct 2009 at 8:51
 =||= ```
I am having the same issue as well.

I am using the 1.4 version on Ubuntu.

Is there any solution for this?  
```

Original comment by `ekaqu1...@gmail.com` on 14 Mar 2010 at 6:03
 =||= ```
Pls refer to the gson's guide for generic class:

Serializing and Deserializing Generic Types
When you call toJson(obj), Gson calls obj.getClass() to get information on the 
fields
to serialize. Similarly, you can typically pass MyClass.class object in the
fromJson(json, MyClass.class) method. This works fine if the object is a 
non-generic
type. However, if the object is of a generic type, then the Generic type 
information
is lost because of Java Type Erasure. Here is an example illustrating the point:

List<String> myStrings = new List<String>();
gson.toJson(myStrings); // Will cause a runtime exception

gson.fromJson(json, myStrings.getClass());

The above call results in a runtime exception because Gson invokes
myStrings.getClass() to get its class information, but this method returns a raw
class, List.class. This means that Gson has no way of knowing that this is a 
list of
Strings, and not plain objects.

You can solve this problem by specifying the correct parameterized type for your
generic type. You can do this by using the TypeToken class.
Type listType = new TypeToken<List<String>>() {}.getType();
gson.toJson(myStrings, listType);

gson.fromJson(json, listType);

The idiom used to get listType actually defines an anonymous local inner class
containing a method getType() that returns the fully parameterized type. 
```

Original comment by `pvthang...@gmail.com` on 22 Apr 2010 at 3:38
 =||= ```
The core problem is that GSON isn't tracking that the type of 'IDT' will be 
'Integer' for Employee instances.
```

Original comment by `limpbizkit` on 1 Nov 2010 at 11:10
- Changed title: **No support for fields whose types are type parameters**
 =||= ```
I've attached a patch that uses type mojo stolen from Guice. In general I think 
it's a big leap forward because it'll give GSON better support for type 
parameters in fields and type arguments of fields. In particular, this should 
work:
  class Foo<K, V> {
    K k1;
    Map<K, V> map;
    List<V> list;
  }

More interestingly, these should also work:
  class WackyHashMap<V, K> extends HashMap<K, V> {...}
  class SecondArgCollection<A, B> implements Collection<B> {...}

I'd prefer not to commit this change in time for GSON 1.6 because this change 
is destabilizing. It's a large change and we can build upon it by using 
TypeToken internally everywhere instead of TypeInfo.
```

Original comment by `limpbizkit` on 2 Nov 2010 at 8:08
- Changed state: **Started**

Attachments:
- [TypeToken_refactor.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-168/comment-5/TypeToken_refactor.patch)
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:47
- Added labels: **Milestone-Release1.7**
 =||= ```
The attached patch resolves merge conflicts.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:12

Attachments:
- [TypeToken_refactor_2.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-168/comment-7/TypeToken_refactor_2.patch)
 =||= ```
Issue 241 has been merged into this issue.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:16
 =||= ```
Issue 40 has been merged into this issue.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:20
 =||= ```
This issue was closed by revision r707.
```

Original comment by `limpbizkit` on 19 Jan 2011 at 10:24
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
169Update documentationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:19 PM"```
Update section ""Custom Serialization and Deserialization"" to reflect the
absence of:
gson.registerDeserializer(MyType.class, new MyDeserializer());
gson.registerInstanceCreator(MyType.class, new MyInstanceCreator());

from the API in 1.4. It is documented in the javadoc but not reflected in
the guide.

What version of the product are you using? On what operating system?
Gson 1.4 on Windows XP SP3

```

Original issue reported on code.google.com by `kareem.shabazz@gmail.com` on 30 Oct 2009 at 5:02""```
I believe this has already been fixed.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:45
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
170unable to serialize an object with list of other objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:20 PM"```
interface IPerson {
  String getName();
}

public class Person implements IPerson {
  private String name;
  public Person() { 
  } 
  public Person(String name) {
    this.name = name;
  }
  @Override
  public String getName() {
    return name;
  }
}

public class People {
  private List<IPerson> people = new LinkedList<IPerson>();
  public People() {
  }
  public People(List<IPerson> people) {
    this.people = people;
  }
  public List<IPerson> getPeople() {
    return people;
  }
}

@Test
public void testGsonProjects() {
  People people = new People(asList((IPerson) new Person(""Obama"")));
  String json = new Gson().toJson(people);  
  System.out.println(json);
}

expected: {people:[{name:""Obama""}]}
actual  : {people:[{}]}

affected version: 1.3, 1.4
```

Original issue reported on code.google.com by `luca.marrocco` on 30 Oct 2009 at 11:33
- Merged into: #231""```
I have not used asList() before, but I understand that that is to get a List 
backed
up by an Array. (It is a static method of an Array).

I can't see that the Person class is an Array. Doesn't the compiler report an 
error
on this code?

Also, isn't the syntax to be Array.asList<IPerson>(yourArray)?

Array<IPerson> peopleArray = new ArrayList<IPerson>(); // e.g.
peopleArray.add(new Person(""Obama""));
peopleList = Array.asList(peopleArray); // I have no idea how to get the list 
as a
LinkedList
People people = new People(peopleList);

Also, I think that you should move the ""private List<IPerson> people = new
ListnkedList<IPerson>();"" to inside ""public People()"". Because this new 
instance of
the List is not needed for the next constructor, i.e. public People(List...);

Probably you should just declare the member as ""private List<IPerson> people;""



```

Original comment by `takayama...@gmail.com` on 15 Feb 2010 at 11:28
 =||= ```
Hello, thank you for your reply.

asList works (almost) if you do an static import of java.util.Arrays.*;
But anyway that is not the point. 

Here is new test without the ""asList"" and GSON is not producing the expected 
result.

public void testGsonProjects() {
  List<IPerson> personList = new LinkedList<IPerson>();
  personList.add(new Person(""Obama""));
  personList.add(new Person(""Clinton""));

  People people = new People(personList);
  String json = new Gson().toJson(people);
  System.out.println(json);
}

Expected:
{""people"":[{""name"":""Obama""},{""name"":""Clinton""}]}

Actual:
{""people"":[{},{}]}

However, toJson(personList) produces:
[{""name"":""Obama""},{""name"":""Clinton""}]

This is very weird.
```

Original comment by `jevgenij...@gmail.com` on 16 Feb 2010 at 3:57
 =||= ```
[deleted comment]
```
 =||= ```
i have the following code using json-lib

String response = put(command.toString());
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setExcludes(new String[]{""cookie"", ""length""});
final JSONArray jsonResponse = (JSONArray) 
JSONSerializer.toJSON(response,jsonConfig);

I have to rewrite this code on Android using gson.. I could not find a 
configurable
Json de-serialzer where i can write excludes as above. Does any one have any 
idea how
i can do so.
```

Original comment by `daljeet....@gmail.com` on 16 Feb 2010 at 7:16
 =||= ```
To: jevgenij.tsoi

Now your code has less error. To use a List in Gson, you have to declare the 
type of
the list to Gson. You either register it with Gson or give it as an argument to 
toJson().

It is documented here:

http://sites.google.com/site/gson/gson-user-guide#TOC-Collections-Examples
```

Original comment by `takayama...@gmail.com` on 16 Feb 2010 at 11:20
 =||= ```
I am sorry, but that seems a bit strange.

Are you saying GSON cannot serialize Lists unless it know what type they are?
In that case (new Gson()).toJson(personList); should NOT produce a valid result.
but it does.

Let me sum it up:
Typed list as a member in an object -> the object is serialized but all the list
elements are empty ""{}""

Untyped list as a member in an object -> works fine.

Typed list directly, without type info to Gson -> works fine.

How come the Untyped case works but the typed case does not?
It should default to the untyped case. Do you not agree?


```

Original comment by `jevgenij...@gmail.com` on 17 Feb 2010 at 8:48
 =||= ```
I am sorry, but that seems a bit strange.

Are you saying GSON cannot serialize Lists unless it know what type they are?
In that case (new Gson()).toJson(personList); should NOT produce a valid result.
but it does.

Let me sum it up:
Typed list as a member in an object -> the object is serialized but all the list
elements are empty ""{}""

Untyped list as a member in an object -> works fine.

Typed list directly, without type info to Gson -> works fine.

How come the Untyped case works but the typed case does not?
It should default to the untyped case. Do you not agree?


```

Original comment by `jevgenij...@gmail.com` on 17 Feb 2010 at 8:49
 =||= ```
Gson can serialize it fine but will not be able to deserialize an untyped 
collection.

The Typed list in the code sample is declared as List<IPerson>. However, 
IPerson has 
no fields (since it is an interface). Hence Gson serializes it as an empty 
object. In 
the case of Untyped collection, Gson uses the actual class of the objects in 
the 
collection, and is able to serialize them since it sees their fields.

```

Original comment by `inder123` on 17 Feb 2010 at 9:48
 =||= ```
Oh, I did not realise that. Obviously I have not used it in the similar way 
before.

So, the solution is to declare the type of the list with a concrete class which 
has
implemented the interface?
```

Original comment by `takayama...@gmail.com` on 17 Feb 2010 at 11:04
 =||= ```
Sorry but I think the OP has a point that has still not been addressed.  

Forgetting about de-serialization entirely for the time being, why does GSON 
correctly serialize a typed collection when passed directly the the toJson() 
method, 
but not when it is a member variable of a parent class?

If I have a List<Shape> that contains Circle objects, and serialize the list 
(using 
GSON v1.4) the resulting JSON correctly includes the fields from the Shape 
(position) 
and Circle (radius). However, if I add my List<Shape> as a member variable 
'shapes' 
of a Canvas object and serialise that, all I get is the positions and none of 
the 
subclass fields.

If I need my list to contain Circles and Squares, I can't simple promote the 
list to 
the correct concrete type as suggested here. 

```

Original comment by `charles%...@gtempaccount.com` on 3 Jun 2010 at 6:16
 =||= ```
I've opened issue 231 to track the polymorphism issue.

In the interim, you'll have to work around this with a custom JsonSerializer.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 6:03
- Changed state: **Duplicate**
 =||= ```
I had the same problem.

I had to patch the CollectionTypeAdapter because I couldn't register my own 
Adaptater on java.util.Collection.
```

Original comment by `jprudent@gmail.com` on 22 Oct 2010 at 9:38
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
171Custom deserializer not called for explicit null valueGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:25 PM"```
When a json object contains an explicit null for a field, the custom
deserializer for that field type is never called, rather the field is
simply set to null. This makes it impossible to map json nulls to some
non-null value in a consistent way. It also makes it impossible to have
guaranteed non-null fields in objects which are deserialized from json.

The handling of explicit nulls and missing values is also inconsistent: in
the case of an explicit null, the Java object's field is set to null. In
the case of a missing value, the field is left alone (as initialized by the
no-arg constructor).

The behavior for missing values is reasonable, but the behavior for
explicit nulls is very difficult to work around. Explicit null values
should (perhaps optionally) be passed through the custom deserializer.

What steps will reproduce the problem?
1. compile the attached file
2. run it

What is the expected output? What do you see instead?
Expected output:
  NullInner should equal NullInner
  NullInner should equal NullInner
OR:
  NullInner should equal NullInner
  InitInner should equal NullInner
I see:
  null should equal NullInner
  InitInner should equal NullInner

What version of the product are you using? On what operating system?
gson 1.4


```

Original issue reported on code.google.com by `hell...@gmail.com` on 3 Nov 2009 at 11:33

Attachments:
- [Main.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-171/comment-0/Main.java)""```
We thought about providing that support, but doing so will break existing 
deserializers since now they will have to do a check for JsonNulls. We couldn't 
think 
of a backward compatible way of solving this problem. 

What is the problem that you are trying to solve. Will a postConstruct method 
do the 
job?
```

Original comment by `inder123` on 8 Jan 2010 at 7:24
 =||= ```
Sorry for the very long delay. The problem we were trying to solve here is 
mapping json values to scala Option 
values. Rather than null, a missing value should be mapped to the distinguished 
None value, while any value 
will be Some(blah). (Of course, this pattern is useful in many cases other than 
Option, and not just in Scala: 
anytime one would like to avoid nulls.)

A postConstruct method would probably do the job, but it still feels very dirty 
to allow the assignment to null 
and then check for it in a second pass. This is effectively what I've had to do 
now, and it works, but I find it 
pretty unsatisfying.

My preference would be to *optionally* expose the JsonNulls to the 
deserializers, controlled by a setting on 
GsonBuilder, I suppose. The standard deserializers could easily be changed to 
deal with this, and users would 
only have to update their deserializers if they wanted access to explicit 
nulls. 
```

Original comment by `hell...@gmail.com` on 15 May 2010 at 2:37
 =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:55
- Added labels: **Type-Enhancement**, **Milestone-Undefined**
- Removed labels: **Type-Defect**
 =||= ```
We don't have this problem with TypeAdapterFactory-registered TypeAdapters. 
Using those allow you to do whatever you want with null in either direction.

This is in Gson 2.1.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:43
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
172add custom exception handlers to serializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:26 PM"```
this is not a bug, but a feature request:

it would be great to have the option to supply a custom exception handler, so 
that we could, for 
instance, continue serializing an object instead of throwing one exception that 
kills the entire 
process.

in the source, it would go something like while serializing a field, catch any 
exception and call a 
handler which can optionally rethrow or swallow it and return a JsonElement, 
thus allowing 
serialization to continue... bla, bla, etc., etc.

namely this was failing with Hibernate lazy init properties... i just want it 
to log for debug, and if 
lazy-init is failing, i don't care.
```

Original issue reported on code.google.com by `johnmarn...@gmail.com` on 5 Nov 2009 at 7:56""Original comment by `limpbizkit` on 7 Oct 2010 at 7:17
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:47
- Added labels: **Milestone-Undefined**
 =||= ```
Marking won't fix. Ping if you think this is an error.
```

Original comment by `limpbizkit` on 11 Feb 2012 at 6:41
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
173missing comaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:27 PM"```
What steps will reproduce the problem?
1. I'm serializing a not-accessible-class. It's unreproducible other way. 

What is the expected output? What do you see instead?

{
    ""wsImpl"":
    {
        ""name"":""Derby JDBC Provider (XA)"",
        ""type"":17,
        ""instrumentationLevel"":-2,
        ""subCollections"":
        [
            {
                ""dsOName"":{}         <-------------
                ""name"":""jdbc/DefaultEJBTimerDataSource"",
                ""type"":17,
                ""instrumentationLevel"":-2,
                ""dataMembers"":
                [
                    {
                        ""count"":2,
                        ""id"":1,
                        ""startTime"":1257966935229,

""lastSampleTime"":1257966972191
                    },


What version of the product are you using? On what operating system?
GSON 1.4
RHEL 5.2
JDK 1.6

Please provide any additional information below.

I can not use any other serialize for JSON because i don't have the class.
Any idea, help, solution path will be helpful.

```

Original issue reported on code.google.com by `drdet...@gmail.com` on 12 Nov 2009 at 9:52""```
I found the problem : PrettyPrinter. he removes a comma, don't know why.
```

Original comment by `drdet...@gmail.com` on 16 Nov 2009 at 8:11
 =||= ```
A test case that demonstrates the fix is in r593.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:47
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
174Support for protobufsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:28 PM"```
See http://code.google.com/p/protobuf/

What is the expected output? What do you see instead?
Underscores are added to the end of all the field names and the values
appear to be the byte arrays instead of actual Strings.
```

Original issue reported on code.google.com by `bmcc...@google.com` on 17 Nov 2009 at 7:03""```
Can you explain how you want us to support protobufs? Is it to 
serialize/deserialize 
JSON data into protobufs?
```

Original comment by `inder123` on 8 Jan 2010 at 7:25
 =||= ```
I had a situation in which I wanted to use GSON to serialize protobufs to JSON. 
 I
believe this is a functionality that GXPs may include though I am not certain.  
I
imagine that the reverse direction is less likely to be as frequently used.
```

Original comment by `bmcc...@google.com` on 8 Jan 2010 at 10:38
 =||= ```
Inder started this:
http://code.google.com/p/google-gson/source/browse/trunk/proto/src/main/java/com
/google/gson/protobuf/ProtoTypeAdapter.java
```

Original comment by `limpbizkit` on 7 Oct 2010 at 7:19
- Changed state: **Started**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Inder started this:
http://code.google.com/p/google-gson/source/browse/trunk/proto/src/main/java/com
/google/gson/protobuf/ProtoTypeAdapter.java
```

Original comment by `limpbizkit` on 7 Oct 2010 at 7:19
 =||= ```
Fixed this in r613
```

Original comment by `inder123` on 1 Nov 2010 at 11:26
- Changed state: **Fixed**
 =||= ```
It seems that ProtoTypeAdapter fails when used with Protobuf enums, due to a 
circular reference error.

```

Original comment by `omer.ta...@gmail.com` on 7 Dec 2011 at 3:05
 =||= ```
Anyone have a version that works with enums?
```

Original comment by `tfishw...@gmail.com` on 30 Jan 2015 at 3:54
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
175Support for StringBuilder/StringBufferGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:30 PM"```
What steps will reproduce the problem?
1. Make an object with a StringBuilder
2. Convert to JSON

What is the expected output?

I expect a JSON string

What do you see instead?

I see this:

{""value"":[""S"",""u"",""c"",""c"",""e"",""s"",""s"","" "",""f"",""o"",""r"","":"", ...


What version of the product are you using? On what operating system?

1.4 windows

Please provide any additional information below.

You might think it is correct since a StringBuilder is not really a string
under the covers.  But I suggest that most people will want to see a String
in json rather than an array of chars...

Thanks for your consideration.

Chris
```

Original issue reported on code.google.com by `mchy...@gmail.com` on 20 Nov 2009 at 6:26""```
Would you want the same behavior for StringBuffer too? Would you want 
deserialization 
of a String to StringBuilder/StringBuffer as well? 

```

Original comment by `inder123` on 8 Jan 2010 at 7:27
 =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:48
- Changed title: **Support for StringBuilder/StringBuffer**
 =||= ```
[deleted comment]
```
 =||= ```
Fixed in r717
```

Original comment by `inder123` on 31 Jan 2011 at 11:15
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
176Updating of existing entities during deserialization instead of creating new onesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:31 PM"```
I need to update existing entity from json data instead of creating new one.
For example i have some entity like this one:
Entity {
  int id;
  String value1;
  String value2;
}
and json like {""value2"":""newValue""}
I whould like to update only value2 in such object leaving id and value1 as 
they are.

This can be achieved by two ways:
a) provide a new method in Gson class like this one:
public void fromJson(String jsonText, Object exitsingEntity);
b) private access to property values in InstanceCreator, for example
public T createInstance(Type type, <some way to get values for this object from 
json string>);

a) should not be hard to implement
```

Original issue reported on code.google.com by `zlow...@gmail.com` on 20 Nov 2009 at 3:26""```
a) is not a general solution. What if you wanted to replace a value deep-down 
in the 
Json tree. 

Regarding b) I suppose you can already write an InstanceCreator that keeps 
track of 
all the objects of type Entity and gives you the one that matches id. 

```

Original comment by `inder123` on 8 Jan 2010 at 7:03
 =||= ```
The problem with b) it that i cannot access id and other fields from JSON data 
in InstanceCreator
```

Original comment by `zlow...@gmail.com` on 8 Jan 2010 at 7:11
 =||= Original comment by `limpbizkit` on 7 Oct 2010 at 7:21
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:48
- Added labels: **Milestone-Undefined**
 =||= ```
I don't think we'll ever build this in. Users can accomplish this with their 
own TypeAdapterFactory instances.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:39
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
177Support for different serializers for root and nested objects of same classGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:34 PM"```
Suppose i have some class like this one:
TreeNode {
  int id;
  TreeNode parent;
  List<TreeNode> children;
  String nodeName;
  String nodeValue;
}

I want to be able to get following JSON:
{""id"":<id>, ""parent"":<parent id>, ""nodeName"":<name>, ""nodeValue"":<value>, 
""children"":[<child 
1 id>, <child 2 id>...]}

Using serializer like this one:
    public JsonElement serialize(TreeNode src, Type typeOfSrc, JsonSerializationContext context) {
        return new JsonPrimitive(src.getId());
    }

For all objects except root one will solve this problem
```

Original issue reported on code.google.com by `zlow...@gmail.com` on 20 Nov 2009 at 3:48""```
Can't you handle this at the application level? Detect if you're serializing 
the parent node?
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:48
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
178"Map Keys are not escaped correctly if they contain """Google Code ExporterGoogleCodeExporter03/19/15, 06:25:35 PM"```
Map<String,String> s = new HashMap<String, String>();
s.put(""h\""allo"", ""w\""elt"");
s.put(""hallo"", ""welt"");

Writer w = new PrintWriter(System.out, true);
gson.toJson(s, w);
w.flush();      

prints (invalid JSON):
{""h""allo"":""w\""elt"",""hallo"":""welt""}

But should be 
{""h\""allo"":""w\""elt"",""hallo"":""welt""}

```

Original issue reported on code.google.com by `developm...@mj-networks-gmbh.de` on 22 Nov 2009 at 6:16""```
Unfortunaly just copy&paste the default MapTypeAdapter code doesnt work, since 
all
important classes are gson package-visible only 
e.g. TypeInfoMap, JsonDeserializationContextDefault
```

Original comment by `developm...@mj-networks-gmbh.de` on 22 Nov 2009 at 6:32
 =||= ```
Is there any solution/quick fix for this issue?
```

Original comment by `marek.ho...@gmail.com` on 14 Jun 2010 at 11:06
 =||= ```
This could be fixed by using JsonWriter in gson.toJson().
```

Original comment by `limpbizkit` on 20 Aug 2010 at 5:33
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= ```
Issue 180 has been merged into this issue.
```

Original comment by `limpbizkit` on 20 Aug 2010 at 5:34
 =||= ```
Issue 182 has been merged into this issue.
```

Original comment by `limpbizkit` on 20 Aug 2010 at 5:35
 =||= ```
I checked in failing test cases for this problem as it appears in both map keys 
(r572) and object property names (r573).
```

Original comment by `limpbizkit` on 20 Aug 2010 at 5:47
 =||= ```
Fix with r577.
```

Original comment by `joel.leitch@gmail.com` on 21 Aug 2010 at 6:51
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
179Hibernate question.Google Code ExporterGoogleCodeExporter03/19/15, 06:25:37 PM"```
In the lastest realese I can get lazy property of hibernate's beans.

Thanks 

```

Original issue reported on code.google.com by `vllumiqu...@gmail.com` on 25 Nov 2009 at 2:30""```
Can you clarify what the Gson bug is? Do you mean that you can not get 
something in 
Hibernate to work with Gson? 

Thanks
```

Original comment by `inder123` on 8 Jan 2010 at 7:49
 =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:34
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
180"escape "" in map's key"Google Code ExporterGoogleCodeExporter03/19/15, 06:25:38 PM"```
Map<String, String> map = new HashMap<String, String>();
map.put(""ab\""c"", ""a\""bc"");

result is
{""ab""c"":""a\""bc""}
should be
{""ab\""c"":""a\""bc""}

```

Original issue reported on code.google.com by `zhouyanm...@gmail.com` on 16 Dec 2009 at 7:01
- Merged into: #178""```
This issue could be merged with #178.
Tried to build from svn head, but it doesn't seem to contain fix yet.
Is there any quick workaround proposed to escape keys properly?
```

Original comment by `marek.ho...@gmail.com` on 25 May 2010 at 3:34
 =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:34
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
181No User Manual for JsonStreamParserGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:39 PM"```
I am using Gson 1.4 Beta.

The Roadmap (1.4 Beta) states:

""JsonStreamParser: A streaming parser API class to deserialize multiple
JSON objects on a stream (such as a pipelined HTTP response).""

However, I cannot find any info in the user manual or API about it. The
search in the issues database does pick up anything with
""JsonStreamParser"". Search in the User Manual or Gson site yields nothing
other than the Roadmap.

This is fundamental to process large object maps from/to the Json
InputStream/OutputStream with another InputStream/OutputStream.

For example, with JDO, we should be able to:

   Type listType = new TypeToken<List<MyJDO>>() {}.getType();
   InputStream ins = fileItemStream.openSream();
   JasonInputStream jins = gson.fromJsonStream(ins, listType);

   while ((MyJDO jdo = jins.readNextJson()) != null)
   {
       pm.makePersistent(jdo);
   }

If I use 

   List<MyJDO> list = gson.fromJson(ins, listType); 

and get the entire List, that is too large. It exceeds memory limit and it
takes a long time to store it away with pm.makePersistentAll() (if it does
not crash the app). By any rate, the makePersistentAll() uses iterator
anyway, so it seems to have the same efficiency.

I believe that this is a deficient item.

Yoichi


```

Original issue reported on code.google.com by `takayama...@gmail.com` on 22 Dec 2009 at 4:02""```
FYI: if this is still to be a problem, the new JsonReader class makes it 
possible to consume a JSON stream in parts. Better integration between Gson and 
JsonReader in the public API is forthcoming.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:40
 =||= ```
http://sites.google.com/site/gson/streaming
```

Original comment by `limpbizkit` on 5 Oct 2010 at 6:43
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
182JsonObject toString method doesn't escape double quotesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:40 PM"```
Create the following code:
 JsonObject jsonObj = new JsonObject();
 jsonObj.add(""quotes"", new JsonPrimitive(""this is a double quote:'\""'""));
 System.out.println(jsonObj.toString());

I expected this string to be printed:
 {""quotes"":""this is a double quote:'\""'""}

however i get this one instead:
 {""quotes"":""this is a double quote:'""'""}

It's odd because if I have an object (non JsonObject) with a field with
quotes and i use GsonBuilder to convert it into a string it correctly
escapes the double quotes.

I am using version 1.3.



Please provide any additional information below.

```

Original issue reported on code.google.com by `rafael.c...@gmail.com` on 24 Dec 2009 at 12:59
- Merged into: #178""```
Using version 1.4 it works!
```

Original comment by `rafael.c...@gmail.com` on 22 Jan 2010 at 2:27
 =||= Original comment by `limpbizkit` on 20 Aug 2010 at 5:35
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
183add set locale methodGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:41 PM"```
Please add setLocale() method to GsonBuilder, so we can output date format
in a specified locale format.

```

Original issue reported on code.google.com by `Kevin.ti...@gmail.com` on 26 Dec 2009 at 4:50
- Merged into: #223""```
Hi Kevin,

I just add this feature see on http://jansouza.com/2010/07/14/google-json-java/

/*
* Atenciosamente/ Regards/ Saludos, 
* Jan Souza
*/
```

Original comment by `jango...@gmail.com` on 14 Jul 2010 at 3:34
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:39
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
184Can't build gson-1.3 in timezones other than PST:Google Code ExporterGoogleCodeExporter03/19/15, 06:25:42 PM"```
What steps will reproduce the problem?
1. Set the system timezone to something other than Pacific (I'm in the
Eastern timezone).
2. Build gson via Maven.

What is the expected output? What do you see instead?

Expecting all tests to pass so . Serialized times carry their timezones
with them, thus the times are offset from expected values. This is probably
correct behavior in production, so the problem is with the test. For
instance, in the Eastern timezone:

-------------------------------------------------------------------------------
Test set: com.google.gson.functional.DefaultTypeAdaptersTest
-------------------------------------------------------------------------------
Tests run: 38, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.157 sec
<<< FAILURE!
testDefaultJavaSqlTimestampSerialization(com.google.gson.functional.DefaultTypeA
daptersTest)
 Time elapsed: 0.016 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<""Dec 3, 2009 [1]:18:02 PM"">
but was:<""Dec 3, 2009 [4]:18:02 PM"">
    at junit.framework.Assert.assertEquals(Assert.java:81)
    at junit.framework.Assert.assertEquals(Assert.java:87)
    at
com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSe
rialization(DefaultTypeAdaptersTest.java:239)

testDefaultJavaSqlTimeSerialization(com.google.gson.functional.DefaultTypeAdapte
rsTest)
 Time elapsed: 0 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<""0[1]:18:02 PM""> but
was:<""0[4]:18:02 PM"">
    at junit.framework.Assert.assertEquals(Assert.java:81)
    at junit.framework.Assert.assertEquals(Assert.java:87)
    at
com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSeriali
zation(DefaultTypeAdaptersTest.java:252)


What version of the product are you using? On what operating system?

gson-1.3, SVN rev. 518 on 32-bit Windows XP w/cygwin.

Please provide any additional information below.

One workaround is to change the local system timezone to PST; this causes
all unit tests to pass.
```

Original issue reported on code.google.com by `mich...@barnathan.name` on 28 Dec 2009 at 4:09""```
Thanks for the bug report.
Fixed in r519 by using PST time-zone as default in test setup.
```

Original comment by `inder123` on 8 Jan 2010 at 6:54
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.4**
 =||= ```
couldn't get r519 to build. the last revision that i got to build is r513, 
though i 
didn't try everything between r519 and head (which is r537, which i think is 
the 
closest thing to release 1.4). anyone know which revision is release 1.4 ?
```

Original comment by `lytles...@gmail.com` on 24 Feb 2010 at 2:09
 =||= ```
You should be able to use the head version. We try to never regress the head 
branch.
```

Original comment by `inder123` on 24 Feb 2010 at 9:27
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
185Why not getter and setter?Google Code ExporterGoogleCodeExporter03/19/15, 06:25:44 PM"```
What steps will reproduce the problem?
Gson does not use the getter and setter when serialize and deserialize 
Java objects, that is very strange. 
e.g. I want to do something in the setter: 
private int number;
public void setNumber(int number) {
    this.number = number > 0 ? number : 0;
}
But Gson skip over it. 

What is the expected output? What do you see instead?
When setNumber(- 1);
this.number == 0;
But not this.number == - 1;

What version of the product are you using? On what operating system?
1.4

Please provide any additional information below.

```

Original issue reported on code.google.com by `jessige...@gmail.com` on 14 Jan 2010 at 3:12
- Merged into: #232""```
Yes, I agree, this is confusing. Breaking java bean model means that we can't 
use
inheritance, overriding getters in successors. 
```

Original comment by `Anton.Troshin@gmail.com` on 12 Feb 2010 at 7:15
 =||= ```
that's also bad because one can't access private fields in unsigned applets
```

Original comment by `nordlig....@gmail.com` on 13 Mar 2010 at 3:13
 =||= ```
Why do you want to touch privete fields??
```

Original comment by `minglq.9` on 16 Mar 2010 at 3:33
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:09
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
186JsonParseException is not very informative (does not return the offending string)Google Code ExporterGoogleCodeExporter03/19/15, 06:25:45 PM"```
What steps will reproduce the problem?
1. trigger a JsonParseException at the invocation of Gson.fromJson (by 
providing a malformed String)
2. catch and print the trace (e.printStackTrace())
3. the trace print does not provide the offending String

What is the expected output? What do you see instead?
Here is the expected output:
com.google.gson.JsonParseException: Failed parsing JSON source: ""actual 
malformed Json string"" to Json

and here is what I got instead:
com.google.gson.JsonParseException: Failed parsing JSON source: 
java.io.StringReader@a0dcd9 to Json

looking at the sources:
JsonParser.java:59 we find:
      throw new JsonParseException(""Failed parsing JSON source: "" + json + 
"" to Json"", e);
maybe (...??) the following could be used:

What version of the product are you using? On what operating system?
gson-1.4 on Windows XP

Please provide any additional information below.

```

Original issue reported on code.google.com by `mperdik...@gmail.com` on 20 Jan 2010 at 10:52""```
Fixed by JsonReader.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:41
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
187Support InputStreamGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:45 PM"```
Please support InputStream and GZIPInputStream instead of String for 
gson.fromJson(response, listType);

Thanks, :-)
```

Original issue reported on code.google.com by `david.jonathan.nelson` on 22 Jan 2010 at 8:16""```
If you wrap your InputStream in an InputStreamReader, you're good!
  InputStream myInputStream = ...
  Reader reader = new InputStreamReader(myInputStream);
  gson.fromJson(reader, listType);
```

Original comment by `limpbizkit` on 20 Aug 2010 at 5:50
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
189"crash with embeded """Google Code ExporterGoogleCodeExporter03/19/15, 06:25:48 PM"```
What steps will reproduce the problem?
gson.fromJson(""{\""title\"":\""? The Trend: \""Can You Write News\"" ? The
Search For Stuff:\""}"", Object.class);

What is the expected output? What do you see instead?

Should parse (with an error because of using Object.class) instead throws:

Caused by: com.google.gson.ParseException: Encountered ""
<IDENTIFIER_SANS_EXPONENT> ""Can """" at line 1, column 25.
Was expecting one of:
    ""}"" ...
    "","" ...

com.google.gson.JsonParseException: Failed parsing JSON source:
java.io.StringReader@380e28b9 to Json
        at com.google.gson.JsonParser.parse(JsonParser.java:59)
        at com.google.gson.Gson.fromJson(Gson.java:443)
        at com.google.gson.Gson.fromJson(Gson.java:396)
        at com.google.gson.Gson.fromJson(Gson.java:372)
        at Test.foo(Test.java:139)
        at
com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:70
5)
        at
com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)
        at
com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:82)
        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)
        at com.google.gson.JsonParser.parse(JsonParser.java:54)


What version of the product are you using? On what operating system?

1.4 Windows 7 64-bit.

Please provide any additional information below.

The issue is the \""Can You Write News\"" - works if you change it to \\\""Can
You Write News\\\"".  From what I can tell it should work with out the
additional \\ though.
```

Original issue reported on code.google.com by `dstobede...@gmail.com` on 22 Jan 2010 at 11:13""```
Fixed by JsonReader.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:45
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
190"can't handle the following json: {""type"":""Point"",""coordinates"":[37.43504333,-122.42824554]}"Google Code ExporterGoogleCodeExporter03/19/15, 06:25:49 PM"```
What steps will reproduce the problem?

url: http://twitter.com/statuses/user_timeline.json?
screen_name=StartupDigest

// get http request, convert to bufferedreader

Type listType = new TypeToken<List<Status>>() {}.getType();
gson.fromJson(bufferedReader, listType);

What is the expected output? What do you see instead?

Expected: A json deserialized object in java.

Actual:

The JsonDeserializer failed to deserialized json object 
{""type"":""Point"",""coordinates"":[37.43504333,-122.42824554]}

What version of the product are you using? On what operating system?

Latest.  Windows Vista.
```

Original issue reported on code.google.com by `david.jonathan.nelson` on 24 Jan 2010 at 8:54""```
The related thread I suppose is here:

http://groups.google.com/group/google-gson/browse_frm/thread/9e654daeda6f4d9a/bb
9ce6f0a8a5708d?#bb9ce6f0a8a5708d

Steps to reproduce:

1. Initial JSON contains array:

  {value1 : ""value 1"", value2 : [""1"", ""2""] } 

2. Map doc = gson.fromJson( {value1 : ""value 1"", value2 : [""1"", ""2""] },
          new TypeToken<Map<String, Object>>(){}.getType());

java.lang.RuntimeException: com.google.gson.JsonParseException: Type
information is unavailable, and the target object is not a primitive:
[""1"", ""2""]

Thus GSON cannot form a Collection out of JSonArray.
However, in case then JSON is like 

{value1 : ""value 1"", value2 : {""1"", ""2""} }

the above exception can be just because no Java type pointed out for {""1"", 
""2""}. But
[""1"", ""2""] is a Collection (Of course, not generic collection, so type of its
elements is not known. May in this case cast to String?). 
```

Original comment by `Anton.Troshin@gmail.com` on 12 Mar 2010 at 1:42
 =||= ```
You'll need to write a custom serializer. Here's how that looks:

  static class Geo {
    GeoType type;
    double[] coordinates;
  }

  enum GeoType {
    POINT, ADDRESS;
  }

  public static void main(String... args) {
    /*
     * This deserializer turns a ""Point"" into our GeoType enum.
     * A custom deserializer required because enums are case-sensitive.
     */
    JsonDeserializer<GeoType> geoTypeDeserializer = new JsonDeserializer<GeoType>() {
      public GeoType deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
          throws JsonParseException {
        return GeoType.valueOf(json.getAsString().toUpperCase());
      }
    };

    /*
     * This deserializer turns the full object into an instance of Geo.
     */
    JsonDeserializer<Geo> geoDeserializer = new JsonDeserializer<Geo>() {
      public Geo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
          throws JsonParseException {
        JsonObject jsonObject = json.getAsJsonObject();
        Geo result = new Geo();
        result.type = context.deserialize(jsonObject.get(""type""), GeoType.class);
        result.coordinates = context.deserialize(jsonObject.get(""coordinates""), double[].class);
        return result;
      }
    };

    Gson gson = new GsonBuilder()
        .registerTypeAdapter(GeoType.class, geoTypeDeserializer)
        .registerTypeAdapter(Geo.class, geoDeserializer)
        .create();

    String json = ""{\""type\"":\""Point\"",\""coordinates\"":[37.43504333,-122.42824554]}"";
    Geo geo = gson.fromJson(json, Geo.class);
    System.out.println(geo.type + "" "" + Arrays.toString(geo.coordinates));
  }

```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:23
- Changed state: **Invalid**
 =||= ```
Custom serializer is okey, but what we really asked for is GSON to be able to 
deal with ARRAYS of primitives.
```

Original comment by `Anton.Troshin@gmail.com` on 28 Aug 2010 at 7:13
 =||= ```
Yes, It does not solve our problem. We need it auto cast to string of array.
```

Original comment by `laise...@gmail.com` on 4 Jun 2011 at 3:41
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
191Fields excluded in ExclusionStrategy should not be made accessibleGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:50 PM"```
What steps will reproduce the problem?
We faced this problem on Google App Engine since there are security 
restrictions in place.

1. We have a class with field on which access via reflection is not 
allowed. e.g

class ClassWithNonAccessibleField {
  //Security manager doesn't allow access to this
  private static final int version;
  //This field is accessible
  private int accessible;
}

2. Try to serialize the class as follows using the following exclusion 
strategy:
private Gson gson= new GsonBuilder().excludeFieldsWithModifiers
(Modifier.STATIC, Modifier.TRANSIENT,
                    Modifier.VOLATILE).create();

What is the expected output? What do you see instead?
The excluded fields should be skipped and only fields that are to be 
serialized should be made accessible. 
But in this case, trying to serialize ClassWithNonAccessibleField will 
result in a SecurityException in the ObjectNavigator class.

We could overcome this problem by trying to exclude such fields from 
serialization. But the setAccessible() method is called for all fields of 
the class in a single shot, hence causing a AccessControlException.

What version of the product are you using? On what operating system?
Gson version 1.4 on Google app engine 1.3.0

Please provide any additional information below.
The above example is a simplification of the scenario in which we faced 
the problem. I can provide more details if required.

Also find attached a patch that is working fine on app engine. :)
```

Original issue reported on code.google.com by `akhilra...@gmail.com` on 27 Jan 2010 at 7:25""```
Ah!! Forgot to attach the patch.
```

Original comment by `akhilra...@gmail.com` on 27 Jan 2010 at 7:43

Attachments:
- [ObjectNavigator_field_access.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-191/comment-1/ObjectNavigator_field_access.patch)
 =||= ```
akhilraina's patch works well for me on AppEngine as well. I'm attaching the 
rebuilt binary jar for those without a build environment.
```

Original comment by `gareth.c...@gmail.com` on 19 Jun 2010 at 4:06

Attachments:
- [gson-1.4-issue191.jar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-191/comment-2/gson-1.4-issue191.jar)
 =||= ```
Is this still a problem with the latest Gson 1.7.1 release and the new App 
Engine pushes?
```

Original comment by `joel.leitch@gmail.com` on 26 Apr 2011 at 11:22
 =||= ```
This issue was closed by revision r1095.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:11
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
192convert JSON to MapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:52 PM"```
What steps will reproduce the problem?
1.just run the TestJson.

What is the expected output? What do you see instead?
error.

What version of the product are you using? On what operating system?
1.4

Please provide any additional information below.
I have used the json string created by Gson.toJson to recreate the values fo 
TestJson.
Please refer attached file
```

Original issue reported on code.google.com by `usp...@gmail.com` on 11 Feb 2010 at 10:00

Attachments:
- [TestJson.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-192/comment-0/TestJson.java)""```
You cannot use raw types with GSON. Change line 8 of your program to the 
following and you'll be fine:
    public HashMap<String, String> MM = new HashMap<String, String>();

```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:42
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
193Circular dependency default exclusion strategy required for persistance frameworksGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:53 PM"```
What steps will reproduce the problem?
1.Any JPA, hibernate or other persistance frameworks pojos include circular 
dependencies
2.serialization to json will fail (infinite loop) though standard 
serialization will happen normally


What is the expected output? What do you see instead?
Putting the serialized instances in a set and checking if they weren't 
already processed will simply resolve the problem

What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `zhamdi.into` on 12 Feb 2010 at 9:13
- Merged into: #137""Original comment by `limpbizkit` on 6 Oct 2010 at 5:56
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
These problems are already handled by the library flexjson, maybe it could be a 
good idea to port that lib to GWT instead of building all features from scratch 
again!??
```

Original comment by `zhamdi.into` on 7 Oct 2010 at 7:49
 =||= ```
has this issue been fixed? If so, how do i use the new feature? I'm currently 
facing the same issue with gson 1.6
```

Original comment by `varun...@gmail.com` on 6 Apr 2011 at 7:54
 =||= ```
It is a perennial problem with ORMs and JSON. That feature would be much 
appreciated
```

Original comment by `y.monsoon` on 6 Oct 2011 at 2:31
 =||= ```
It is a perennial problem with ORMs and JSON. That feature would be much 
appreciated
```

Original comment by `y.monsoon` on 6 Oct 2011 at 2:34
 =||= Original comment by `limpbizkit` on 30 Dec 2011 at 6:32
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
194some other standard ExclusionStrategy neededGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:55 PM"```
What steps will reproduce the problem?
1.The purpuse of using json is to be less verbose: in different contexes we 
won't represent the same pojo by the same fields (we usually use a few 
fields in the object for a given task)

What is the expected output? What do you see instead?
I think it could be a good idea to include in the standard ExclusionStrategy  
implementations two additional classes that will just 
use field names in a class context, we then construct a serializer for each 
business context or ejb:
1- inclusion strategy by field name
2- exclusion strategy by field name

What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `zhamdi.into` on 12 Feb 2010 at 9:19""Original comment by `limpbizkit` on 6 Oct 2010 at 5:55
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
The library flexjson is adapted to these features in java code. 
```

Original comment by `zhamdi.into` on 7 Oct 2010 at 7:47
 =||= ```
Is there a reason that you can not do this now with Gson? The exclusion 
strategy has a ""FieldAttributes"" object as part of its API. The FieldAttributes 
object has information about the ""parent"" class (class the possesses this 
field) and the field's name.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:33
 =||= ```
Hi Joel,

This post is too old, (feb 10). I didn't follow the evolution of the product, 
it's possible it is supported nowadays.
```

Original comment by `zhamdi.into` on 13 Apr 2011 at 8:17
 =||= ```
Marking as invalid since it is now obsolete.

Sorry for not following up on this right away.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 11:46
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
195json-lib to gson conversionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:56 PM"```
i have the following code using json-lib

String response = put(command.toString());
JsonConfig jsonConfig = new JsonConfig();
jsonConfig.setExcludes(new String[]{""cookie"", ""length""});
final JSONArray jsonResponse = (JSONArray)
JSONSerializer.toJSON(response,jsonConfig);

I have to rewrite this code on Android using gson.. I could not find a
configurable Json de-serialzer where i can write excludes as above. Does
any one have any idea how i can do so.
```

Original issue reported on code.google.com by `daljeet....@gmail.com` on 16 Feb 2010 at 7:17""Original comment by `limpbizkit` on 6 Oct 2010 at 5:55
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `inder123` on 3 Nov 2010 at 12:29
- Added labels: **Milestone-Undefined**
 =||= ```
Does the exclusion strategy feature support this?

See 
http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/E
xclusionStrategy.html
```

Original comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:42
 =||= ```
Reopen if this is still an issue.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:31
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
196Support serializing local classesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:57 PM"```
What steps will reproduce the problem?
1. Run the following test case
    @Test
    public void localClassSerializationFailed()
    {
        Gson s = new Gson();
        class MyLocalClass{
            String someString=""SomeValue"";
        }
        String serializedString=s.toJson(new MyLocalClass());
        assertTrue(serializedString.contains(           
                          ""{\""someString\"":\""SomeValue\""}""));
    }

```

Original issue reported on code.google.com by `td.abinesh` on 26 Feb 2010 at 5:32
- Merged into: #298""Original comment by `inder123` on 3 Nov 2010 at 1:47
- Added labels: **Milestone-Undefined**
 =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:41
- Changed title: **Support serializing local classes**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 9:54
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
197StackOverflowError for large mapsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:58 PM"```
What steps will reproduce the problem?

  public void testLargeGsonMapRoundTrip() throws Exception {
    Map<Long, Long> original = Maps.newHashMap();
    for (long i = 0; i < 50000; i++) {
      original.put(i, i + 1);
    }

    Gson gson = new Gson();
    String json = gson.toJson(original);

    Type longToLong = new TypeToken<Map<Long, Long>>(){}.getType();
    gson.fromJson(json, longToLong);
  }

What is the expected output? 

Gson should not recurse when parsing map entries. Parsing JSON is not that 
hard, so I suggest not using Javacc. 

What do you see instead?

com.google.gson.JsonParseException: Failed parsing JSON source: 
java.io.StringReader@186d484 to Json
    at com.google.gson.JsonParser.parse(JsonParser.java:61)
    at com.google.gson.Gson.fromJson(Gson.java:443)
    at com.google.gson.Gson.fromJson(Gson.java:396)
...

Caused by: java.lang.StackOverflowError
    at 
com.google.gson.JsonParserJavacc.jj_3R_5(JsonParserJavacc.java:449)
    at 
com.google.gson.JsonParserJavacc.jj_3R_4(JsonParserJavacc.java:456)
    at 
com.google.gson.JsonParserJavacc.jj_3R_2(JsonParserJavacc.java:443)
    at 
com.google.gson.JsonParserJavacc.jj_3_1(JsonParserJavacc.java:462)
    at 
com.google.gson.JsonParserJavacc.jj_2_1(JsonParserJavacc.java:428)
    at 
com.google.gson.JsonParserJavacc.JsonNumber(JsonParserJavacc.java:276)
    at 
com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:213)
    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)
    at 
com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)
    at 
com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
...


What version of the product are you using? On what operating system?

1.4 (in google3)

```

Original issue reported on code.google.com by `skybr...@google.com` on 9 Mar 2010 at 7:44""```
I have the same problem. My Input is a 18MB json file, which has basically the
structure of Map<String, <Map, <String, Map<String, String>>>>

(I 'm not at liberty to provide the file)

There are only few keys on first level, so each ""value"" is quite large
```

Original comment by `CptMa...@googlemail.com` on 4 May 2010 at 9:26
 =||= ```
r543 fixes this issue. Thanks for the bug report. The fix also improved Gson
performance by 20-30%.
```

Original comment by `inder123` on 19 May 2010 at 9:25
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
198toJson has many useless characterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:25:59 PM"```
Struts2+hibernate3.3+Spring
SysUserConfig sysUserConfig = 
this.sysUserConfigService.getSysUserConfig(this.sysUserConfig.getId());

out.write(new GsonBuilder().setDateFormat(""yyyy-MM-
dd"").disableHtmlEscaping().create().toJson(sysUserConfig));

output:
{""handler"":{""interfaces"":[{}],""constructed"":true,""persistentClass"":{},""getI
dentifierMethod"":{""clazz"":{},""slot"":27,""name"":""getId"",""returnType"":{},""para
meterTypes"":[],""exceptionTypes"":[],""modifiers"":1,""root"":{""clazz"":{},""slot"":
27,""name"":""getId"",""returnType"":{},""parameterTypes"":[],""exceptionTypes"":[],""
modifiers"":1,""override"":false},""override"":false},""setIdentifierMethod"":{""cl
azz"":{},""slot"":0,""name"":""setId"",""returnType"":{},""parameterTypes"":[{}],""exce
ptionTypes"":[],""modifiers"":1,""root"":{""clazz"":{},""slot"":0,""name"":""setId"",""re
turnType"":{},""parameterTypes"":[{}],""exceptionTypes"":[],""modifiers"":1,""overr
ide"":false},""override"":false},""overridesEquals"":false,""entityName"":""com.tjs
oft.vo.SysUserConfig"",""id"":""20100308170143781"",""target"":{""id"":""201003081701
43781"",""configName"":""测试"",""userId"":999999999999999,""slStartDate"":""2009-01-
01"",""slEndData"":""2010-03-31"",""createDate"":""2010-03-
08"",""status"":""1"",""bjStartDate"":""2009-01-01"",""bjEndDate"":""2010-04-
02"",""zaiban"":""1"",""banjie"":""1"",""suoyou"":""1""},""initialized"":true,""unwrap"":fal
se}}

but i just want:

{""id"":""20100308170143781"",""configName"":""测
试"",""userId"":999999999999999,""slStartDate"":""2009-01-01"",""slEndData"":""2010-
03-31"",""createDate"":""2010-03-08"",""status"":""1"",""bjStartDate"":""2009-01-
01"",""bjEndDate"":""2010-04-02"",""zaiban"":""1"",""banjie"":""1"",""suoyou"":""1""}

how can i do it?

```

Original issue reported on code.google.com by `ilovehon...@gmail.com` on 19 Mar 2010 at 8:49""```
This doesn't look like a defect. Using GsonBuilder, you can specify to only 
serialize
objects which match the @Expose annotation, or you could build a proxy class 
with
only those fields, set them from sysUserConfig, and then serialize that. 
```

Original comment by `arcanef...@gmail.com` on 20 Apr 2010 at 5:28
 =||= ```
This doesn't look like a defect. Using GsonBuilder, you can specify to only 
serialize
objects which match the @Expose annotation, or you could build a proxy class 
with
only those fields, set them from sysUserConfig, and then serialize that. 
```

Original comment by `arcanef...@gmail.com` on 20 Apr 2010 at 5:28
 =||= Original comment by `limpbizkit` on 28 Aug 2010 at 5:28
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
199date format problemGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:01 PM"```
What is the expected output? What do you see instead?
expected:'2010-02-02' actually:{""nanos"":0} or null

What version of the product are you using? On what operating system?
version=1.4   system=windows 7

Please provide any additional information below.
when I select a date field from the database and output the string with
Gson,and the date field displays follow :{""nanos"":0} or null, but my
database has date data in it.
```

Original issue reported on code.google.com by `wuguangjian` on 21 Mar 2010 at 7:22""```
Сonfirm this bug:
------------
Gson g = new GsonBuilder().create();//setDateFormat(""'Date('yyyy-MM-
dd'T'HH:mm:ss.SSSZ')'"").create();
throw new Exception(g.toJson(item.shiftBegin) + ""----"" + 
item.shiftBegin.toString());
------------
""{nanos:0}----2010-05-03 00:00:00.0""
```

Original comment by `saph...@gmail.com` on 5 May 2010 at 6:49
 =||= ```
It's not bug :)
returning field from database is ""java.sql.Timestamp""
solution:

...
    static private class sqlTimestampConverter implements JsonSerializer<Timestamp> {
        static SimpleDateFormat sdf = new SimpleDateFormat(""'Date('yyyy-MM-
dd'T'HH:mm:ss.SSSZ')'"");

        @Override
        public JsonElement serialize(Timestamp src, Type srcType, 
JsonSerializationContext context) {
            return new JsonPrimitive(sdf.format(src));
        }
    }
...
        GsonBuilder gson = new GsonBuilder().setDateFormat(""'Date('yyyy-MM-
dd'T'HH:mm:ss.SSSZ')'"");
        gson.registerTypeAdapter(Timestamp.class, new sqlTimestampConverter());

```

Original comment by `saph...@gmail.com` on 7 May 2010 at 8:39
 =||= ```
Thanks saphsys.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:34
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
200How do I deserialize when the result is sometimes an object and sometimes an arrayGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:02 PM"```

I am trying to deserialize a json object which sometimes comes in the form of 
an array of objects 
and sometimes it's the object itself. Is there a way of handling these 
situations.

eg
""Categories"":{""Category"":[{""id"":""96926148"",""content"":""Food Delivery 
Services""},{""id"":""96926234"",""content"":""Carry Out & Take 
Out""},{""id"":""96926238"",""content"":""Sandwiches""},{""id"":""96926242"",""content"":""Fast 
Food""},{""id"":""96926243"",""content"":""Pizza""}]}

and sometimes

""Categories"":{""Category"":{""id"":""96926148"",""content"":""Food Delivery Services""}}


```

Original issue reported on code.google.com by `james.st...@epochsg.com` on 4 Apr 2010 at 3:54""```
I know this doesn't directly answer the question, but would it make more sense 
to 
always have an array in the JSON?  It seems like the data structure in your 
example 
makes things more difficult for both the JavaScript and Java.

I would probably try using two different beans on the Java side.  Try one first 
and 
see if it throws a Gson exception, then try the other one.  Quick and dirty, 
maybe 
not the best solution.
```

Original comment by `joshuadr...@gmail.com` on 5 Apr 2010 at 12:51
 =||= ```
I would definitely agree with your comment although I don't have any control 
over the incoming JSON.
```

Original comment by `james.st...@epochsg.com` on 5 Apr 2010 at 1:27
 =||= ```
I think you want to create a custom JsonDeserializer<List<Category>>.

That deserializer should check whether the passed-in object is a JsonArray 
(isJsonArray()) and if so, loop over the contents, converting each to a 
Category using the passed-in JsonDeserializationContext.

Otherwise it should convert the lone object to a Category, also with the 
JsonDeserializationContext.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:33
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
201Cannot deserialize JSON into a JsonObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:04 PM"```
What steps will reproduce the problem?
1. Create a Gson() object
2. Attempt to deserialize a Json string into a JsonObject instance
3. Watch as you get an empty JsonObject

What is the expected output? What do you see instead?
It would be nice to have the JsonObject be populated with the fields and
values from the Json string. This doesn't happen, and instead we receive an
empty Json object. This is likey to be caused because there is a lack of a
custom deserializer for JsonObject, which would fill it up with the fields
in the Json string.

What version of the product are you using? On what operating system?
Version 1.4, on OpenSuse Linux

```

Original issue reported on code.google.com by `paul.gib...@gmail.com` on 14 Apr 2010 at 7:33""```
There is a workaround. What you can do is write your own custom JsonObject
deserializer, and its very simple. I've attached the source.

Its as simple as having a deserializer that returns a JsonObject with this as 
the
method body for the method ""deserialize"":

return json.getAsJsonObject();
```

Original comment by `paul.gib...@gmail.com` on 14 Apr 2010 at 8:11

Attachments:
- [JsonObjectDeserializer.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-201/comment-1/JsonObjectDeserializer.java)
 =||= ```
The workaround should be sufficient.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:46
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
202Don't include empty ENUMs in serialized outputGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:05 PM"```
I have a few classes with 

private final EnumSet<MyEnum> myflags = EnumSet.noneOf(MyEnum.class);

the JSON-serialized output contains
""myflags"":[]

which is surprising given that from the docs
""This implementation handles nulls correctly, While serialization, a null
field is skipped from the output""

Yes, the field isn't null.  But it is empty.  Is there a way to ""skip empty
collections"" in the output?

It would be a huge space saver in the generated JSON file if there was a
way to skip empty EnumSet (or even better, any empty collection) -
especially for outputs that contain a LOT of instances of objects with
flags in them.

Latest gson release (1.4)

```

Original issue reported on code.google.com by `benjamin...@gmail.com` on 15 Apr 2010 at 2:44""```
Treating empty as null will change the semantics of Java, so there needs to be 
a much better rationale for doing 
this. In the interim, you can do this by registering a custom serializer for 
your collections that treats empty as 
null. I will still advise against doing so though.
```

Original comment by `inder123` on 16 Apr 2010 at 6:17
- Changed state: **Invalid**
 =||= ```
hi! We do not want to change semantic of java or more general of the set 
theory. Yet we all used to live with those issues.

I also miss exactly this GSON feature: to treat empty collection as nulls (and 
optionally omitting in the serialization like already possible). Please let 
this decision be taken by the developer, if he wants empty fields not to be 
serialized.

an API on the GsonBuilder would be fine for the first time and maybe, extended 
by annotations in the future.

thanks
```

Original comment by `eplisc...@gmail.com` on 2 Apr 2013 at 2:03
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
203"toJson escapes ""="" unnecessarily in raw strings"Google Code ExporterGoogleCodeExporter03/19/15, 06:26:06 PM"```
What steps will reproduce the problem?
1. Create an object with a single String field.
2. Set field to ""http://someUrl.com?a=b""
3. Attempt to convert the object to json via gson.toJson

What is the expected output? What do you see instead?
I would expect the URL to be serialized exactly as it is written. Instead, 
the equals sign is encoded as \u003d.

What version of the product are you using? On what operating system?
1.4


```

Original issue reported on code.google.com by `arcanef...@gmail.com` on 20 Apr 2010 at 5:08""```
I also think this is a bug. It is causing problems when I am trying to turn 
base64 encoded string (which ends with equals sign) into JSON.
```

Original comment by `dennis.d...@gmail.com` on 11 Jun 2010 at 9:27
 =||= ```
Hope this will help you :

Gson gson = new GsonBuilder().disableHtmlEscaping().create();
```

Original comment by `Cassel.G...@gmail.com` on 30 Jul 2010 at 7:33
 =||= ```
what version of library?
```

Original comment by `zlob...@gmail.com` on 2 Aug 2010 at 2:00
 =||= ```
Working fine for me now If I use below code to create Gson object. 

Gson gson = new GsonBuilder().disableHtmlEscaping().create();

Thanks to Cassel.Guillaume.
```

Original comment by `sadineni...@gmail.com` on 18 Aug 2010 at 8:30
 =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:32
- Changed state: **Invalid**
 =||= It's un-reasonable to enable html escaping. This escape is un-necessary in most of situation. 
 =||= I am having exactly the same issue here: trying to export an object that contains an equal sign in URL but only got a string contains the escaping character instead. If the object is exported to JSON in classes of different hierarchies, then each class that may contain the original class needs to use GsonBuilder and explicitly disabling HTML escaping.

A solution should allow that if nested object specifies disabling HTML escaping, then outer classes should not need to specify it again. Redundancy is always the enemy of software engineering.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
204Empty Maps crash the json rendering when pretty printing is used - the next comma is missing from outputGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:07 PM"```
Test Code:

HashMap<String, Object> hs = new HashMap<String, Object>();
HashMap<String, Object> details = new HashMap<String, Object>();

hs.put(""id"", 12);
hs.put(""name"", ""Alejandro"");
hs.put(""details"", details);

Boolean includeNullFields = true;
Boolean prettyRender = true;

try {

    GsonBuilder gsonBuilder = new GsonBuilder();

    if (includeNullFields && prettyRender)
        gsonBuilder.serializeNulls().setPrettyPrinting();
    else if (includeNullFields && !prettyRender)
        gsonBuilder.serializeNulls();
    else if (!includeNullFields && prettyRender)
        gsonBuilder.setPrettyPrinting();

    Gson gson = null;
    gson = gsonBuilder.create();
    String jsonResponse = gson.toJson(hs);

    System.out.println(jsonResponse);

} catch (Exception e) {
    e.printStackTrace();
}


The above code outputs: 
{""id"":12,""details"":{}""name"":""Alejandro""}


If Pretty Printing is NOT used then the output is correct:
{""id"":12,""details"":{},""name"":""Alejandro""}


```

Original issue reported on code.google.com by `bobghera...@gmail.com` on 21 Apr 2010 at 10:09""```
The code in SVN works. I checked in a test case with r593.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:45
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
205Confusing behavior when Object is the field typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:08 PM"```
What steps will reproduce the problem?
1. Object[] array = new Object[] { new Object[] { 1, 2 } };
2. Gson gson = new Gson();
3. System.out.println(gson.toJson(array));

What is the expected output? 
[[1,2]]

What do you see instead?
[{}]

What version of the product are you using? On what operating system?
1.4 on Windows XP.

Please provide any additional information below.
I may be doing this wrong...  Is that behavior intentional?
```

Original issue reported on code.google.com by `michael.hixson@gmail.com` on 23 Apr 2010 at 10:51""```
I add something similar to your problem, issue 209.
I ""fix"" your problem as following on version 1;3 (1.4 is beta did not look at 
it):
Class: com.google.gson.JsonSerializationVisitor
Method: visitArray

Old content
  public void visitArray(Object array, Type arrayType) {
    assignToRoot(new JsonArray());
    int length = Array.getLength(array);
    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
    Type componentType = fieldTypeInfo.getSecondLevelType();
    for (int i = 0; i < length; ++i) {
      Object child = Array.get(array, i);
      Type childType = componentType;
      // we should not get more specific component type yet since it is possible
      // that a custom
      // serializer is registered for the componentType
      addAsArrayElement(new ObjectTypePair(child, childType, false));
    }
  }

New content
  public void visitArray(Object array, Type arrayType) {
    assignToRoot(new JsonArray());
    int length = Array.getLength(array);
    for (int i = 0; i < length; ++i) {
      Object child = Array.get(array, i);
      // we should not get more specific component type yet since it is possible
      // that a custom
      // serializer is registered for the componentType
      addAsArrayElement(new ObjectTypePair(child, child.getClass(), false));
    }
  }

Etienne
```

Original comment by `lapinouj...@gmail.com` on 15 May 2010 at 1:02
 =||= ```
Sorry my thread was for the current version in trunk.
For version 1.3 I did the folowwing:
Class: com.google.gson.JsonSerializationVisitor
Method: visitArray
Old content
  public void visitArray(Object array, Type arrayType) {
    assignToRoot(new JsonArray());
    int length = Array.getLength(array);
    TypeInfoArray fieldTypeInfo = TypeInfoFactory.getTypeInfoForArray(arrayType);
    Type componentType = fieldTypeInfo.getSecondLevelType();
    for (int i = 0; i < length; ++i) {
      Object child = Array.get(array, i);
      addAsArrayElement(componentType, child);
    }
  }

New content
  public void visitArray(Object array, Type arrayType) {
    assignToRoot(new JsonArray());
    int length = Array.getLength(array);
    for (int i = 0; i < length; ++i) {
      Object child = Array.get(array, i);
      addAsArrayElement(child.getClass(), child);
    }
  }

Etienne
```

Original comment by `lapinouj...@gmail.com` on 15 May 2010 at 1:10
 =||= Original comment by `inder123` on 3 Nov 2010 at 1:48
- Added labels: **Milestone-Release1.7**
 =||= ```
FYI - you can work around this by providing static type information when 
calling toJson().
  toJson(array, Integer[][].class);

In general GSON works better when it knows the types of everything!
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:43
 =||= ```
@limpbizkit: Understood.  

In the situation that led to this report, those arrays were buried deep within 
a Map<String, Object>, which contained many nested maps, collections, and 
arrays of various types.  I was building this data structure up in Java and 
wanted to convert it to JSON in one pass, so that solution would not have been 
practical for me.  
```

Original comment by `michael.hixson@gmail.com` on 3 Nov 2010 at 5:44
 =||= ```
Yup, good to know. One thing we should consider doing is using runtime types 
whenever ""Object"" is the static type.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 5:54
 =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:52
- Changed title: **Confusing behavior when Object is the field type**
 =||= ```
Issue 245 has been merged into this issue.
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:53
 =||= ```
I have an inkling that this works in Gson 1.7.

We have a test for a Collection<Object>, Object[] and a Map<String,Object>.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:16
 =||= ```
The array of object arrays is actually assigned to an ""Object[][]"" instead of 
Object[] than it does work as expected.

Marking this as fixed because since it would be a super crazy use case if 
someone actually need to assign an array of object arrays to a type object 
array.
```

Original comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 5:19
- Changed state: **Fixed**
 =||= ```
I think you've misunderstood the use case and the bug report, and you've marked 
this ""fixed"" when you meant ""closed"" or ""won't fix"".  

  Gson gson = new Gson();
  System.out.println(
    gson.toJson(new Object[] { 1, 2, new Object[] { ""foo"", 3 } })
  );

Expected output:

  [1,2,[""foo"",3]]

Actual output:

  [1,2,{}]

Obviously, that code won't compile if you put ""new Object[][]"" in place of ""new 
Object[]"".  What type would you suggest instead, to hold ""{ 1, 2, new Object[] 
{ ""foo"", 3 } }"" ?

This report didn't come from a contrived use case designed to break Gson.  
Please see comment #5.
```

Original comment by `michael.hixson@gmail.com` on 15 Apr 2011 at 5:46
 =||= ```
OK, I see. I did misunderstand your initial example, but the above example 
makes it more clear because now I see you are mixing primitives (or objects) 
and arrays within an array.

Again, I stand by my statement that is is a super crazy use-case to support, 
but I'd like to hear the your reasoning as to why this is wanted. The only 
thing that I can think of is that you are trying to form some object that will 
object the correct JSON value for you. If that's the case then I recommend that 
you build up the output using the JsonElement objects (i.e. JsonArray, 
JsonObject, JsonPrimitive) and generate the output that way.

I will reopen this issue to hear your thoughts.
```

Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 10:08
- Changed state: **New**
 =||= ```
I swear, I'm not crazy! :)

I was passing a large amount of data from a Java-based back end to a 
JavaScript-based front end.  It seemed only natural to form the container for 
this data in Java using maps, arrays/collections, strings, and primitives, 
which have counterparts in JSON.  Then I'd use some Java-to-JSON tool to make 
the data readable by the client.  

The JavaScript didn't know or care about the Java types being used, or whether 
they were being mixed - [ 1, 2, [ ""foo"", 3 ] ] is an array like any other.  Why 
should I avoid that mixing on the Java side when the JavaScript doesn't care?  
The front end might (does) even encourage it in some cases.  For instance, look 
at the API for Flot:

  http://people.iola.dk/olau/flot/API.txt

Specifically, see the section about gradients.  What I declare as the 
backgroundColor of a graph could be a string, or an array of strings, of an 
array of maps of strings to numbers.  

Why do I need to worry about that on the Java side?  I shouldn't, but with 
Gson, I do.  Even with the weak example in my initial report:

  new Object[] { new Object[] { 1, 2 } }

Who would want that to render in JSON as ""[{}]"" ?  It seems plain that's not 
the right representation.  If I have to add a second set of square brackets, 
then I'd be doing so only to appease Gson, because of the particulars in how 
Gson was implemented.  

Addressing your suggestion to use JsonElement objects:  I wouldn't want to tie 
myself to a particular Java-to-JSON library in this way.  If my Java object is 
made of things that have an obvious counterpart in JavaScript, then I'd think a 
number of tools could do the JSON conversion for me.  I could choose between 
them based on correctness and performance.  Meanwhile, using Gson's API for 
building the entire structure would marry me to Gson.
```

Original comment by `michael.hixson@gmail.com` on 18 Apr 2011 at 1:26
 =||= ```
To paraphrase, you want to build up a JSON parse tree using Java constructs 
instead of using the Gson parse tree constructs. JsonObject --> Map<String, 
Object>, JsonArray --> List<Object> or Object[], JsonPrimitive --> (String, 
int, long, ....), JsonNull ---> null.

We talked about getting rid of the JsonElement parse tree hierarchy and have 
Gson use the common Java classes to map to JSON structures; however, this makes 
writing JsonSerializers and deserializers very difficult and hard to 
understand. That said, Gson should definitely be able to handle this use case 
and it is a bug.
```

Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:22
- Changed state: **Accepted**
 =||= ```
Fixed in r828.
```

Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33
- Changed state: **Fixed**
 =||= ```
See the new test added here:
http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/java/com/
google/gson/functional/ArrayTest.java?r=829#280

FYI, we are planning to launch a version 1.7.2 in the next two weeks that will 
contain only bug fixes and performance enhancements. Stay tuned.
```

Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:44
 =||= ```
Awesome!

Gson can't deserialize its own JSON output for these mixed-type objects, 
correct?  That is, unless the user writes a custom deserializer?  (I'm not 
suggesting it should; I'm wondering about the nature of your changes above.)
```

Original comment by `michael.hixson@gmail.com` on 21 Apr 2011 at 12:25
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
206Make it possible to build Gson with Ant directlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:12 PM"```
The Maven integration is nifty, but I believe the use of Ant is far more
widespread than that of Maven, so it would be nice if it weren't required.
I suppose the counterargument is to use this guy:

http://maven.apache.org/plugins/maven-ant-plugin/index.html

Though that still requires installing and setting up Maven initially, so
that doesn't exactly solve the problem.

```

Original issue reported on code.google.com by `bolinf...@gmail.com` on 27 Apr 2010 at 4:06""```
Here is an example of ANT script:
build.xml:
<?xml version=""1.0"" encoding=""UTF-8""?>
<project name=""Juridoc Client"" basedir=""."">
    <property file=""build.properties"" />

    <!-- Init all properties for the ANT script -->
    <property name=""jarsDir"" value=""${build.dir}/${build.dir.package}"" />
    <property name=""compileDir"" value=""${build.dir}/${build.dir.gson}"" />
    <property name=""resourcesDir"" value=""${project.dir}/src/main/resources"" />
    <property name=""sourceDir"" value=""${project.dir}/src/main/java"" />
    <property name=""jarName"" value=""${build.name.gson}"" />

    <target name=""compile"" depends=""setup"" description=""Compile into ${compileDir}"">
        <!-- Compile the client source -->
        <javac srcdir=""${sourceDir}"" destdir=""${compileDir}"" source=""${version.source}""
target=""${version.compile}"" debug=""on"" encoding=""${compile.encoding}"">
        </javac>
    </target>

    <target name=""package"" depends=""setupJAR, compile"" description=""Package to file
${jarName}"">
        <!-- Build the manifest file -->
        <manifest file=""MANIFEST.MF"">
            <attribute name=""Build-Version"" value=""${build.version.num}""/>
        </manifest>
        <copy todir=""${compileDir}"">
            <fileset dir=""${resourcesDir}"" includes=""**/*.*"" />
        </copy>
        <!-- Build the jar with compilation folder content -->
        <jar destfile=""${jarsDir}/${jarName}"" manifest=""MANIFEST.MF"">
            <fileset dir=""${compileDir}"" includes=""**"" />
        </jar>
        <!-- Delete the compilation folder -->
        <delete dir=""${compileDir}"" />
        <!-- Delete the manifest file -->
        <delete file=""MANIFEST.MF"" />
    </target>

    <target name=""deploy"" depends=""package"" />

    <target name=""setup"" description=""Creates the ${compileDir} directory"">
        <!-- generate the client compilation folder -->
        <delete dir=""${compileDir}"" />
        <mkdir dir=""${compileDir}"" />
    </target>

    <target name=""setupJAR"" description=""Creates the ${jarsDir} directory"">
        <!-- generate the jar folder -->
        <mkdir dir=""${jarsDir}"" />
    </target>

</project>

build.properties:
build.dir=c:/temp/gson

build.dir.gson=gson-core
build.name.gson=gson-1.3-patch.jar
build.dir.package=jars

build.version.num=1.3

project.dir=.

compile.encoding=ISO_8859-1
version.source=1.5
version.compile=1.5
```

Original comment by `lapinouj...@gmail.com` on 15 May 2010 at 12:52
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:52
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
It's hard enough to support one build system. If you'd like to use Ant, I 
invite you to copy the build.xml above into your copy of GSON.
```

Original comment by `limpbizkit` on 1 Jul 2011 at 9:46
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
207Handle bitsets correctlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:14 PM"```
See 
http://groups.google.com/group/google-gson/browse_thread/thread/535892ffcf691aa
for details on the bug
```

Original issue reported on code.google.com by `inder123` on 27 Apr 2010 at 4:19""```
There's many different ways to map a bit set to JSON...

Suppose we're given the bit set 100101100. Here are some options:
  bit array: [1,0,0,1,0,1,1,0,0]
  bit string: ""100101100""
  hex array: [""01"",""2C""]
  hex string: ""012C""
Hex is compact but it cannot preserve the length attribute of the bit set.

I'd prefer that we leave this up to the application developer, who will be able 
to make an informed decision. They'll need to weigh the tradeoffs between 
encoded length and retention of the bit set length.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:27
- Changed state: **WontFix**
 =||= ```
(The application developer would be expected to create a type adapter for the 
bit set, and register that in their GsonBuilder)
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:28
 =||= ```
We should consider writing a sample type adapter for bitset in our guide. 
http://sites.google.com/site/gson/gson-user-guide
```

Original comment by `inder123` on 3 Nov 2010 at 7:53
 =||= ```
Most of the BitSet problems are occurred by using Gson in Google AppEngine. I 
also got the same problem. In most cases, I think most of the people don't use 
and don't care about it, because we can't use this kind of type in our value 
object.

Here is a snapshot of this exception thrown in Google Appengine.

java.lang.SecurityException: java.lang.IllegalAccessException: Reflection is 
not allowed on private static final int java.util.BitSet.ADDRESS_BITS_PER_WORD
    at com.google.appengine.runtime.Request.process-56ead41f7d18d602(Request.java)
    at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:29)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:149)


People can implement a default BitSetSerializer like this:

import java.lang.reflect.Type;
import java.util.BitSet;

import com.google.gson.JsonElement;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

public class BitSetSerializer implements JsonSerializer<BitSet> {

  @Override
  public JsonElement serialize(BitSet src, Type arg1, JsonSerializationContext arg2) {
    return null; //I dont care about it !!!
  }

}

Hope this can help you work around this problem in AppEngine
```

Original comment by `matt.jiang` on 13 Mar 2011 at 1:25
 =||= ```
This is fixed and will be in the next release.
```

Original comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 4:10
 =||= ```
Thanks for posting that Matt; I was running in the exact same problem and that 
did the trick.  I just created a new gson builder with that BitSetSerializer:

GsonBuilder gsonBuilder = new GsonBuilder();
gsonBuilder.registerTypeAdapter(java.util.BitSet.class, new BitSetSerializer());
```

Original comment by `ad...@cosanta.com` on 14 May 2011 at 2:34
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
208GWT client-side supportGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:15 PM"```
Requested feature enhancement. I realize introspection is unavailable in a 
GWT client-side environment. But it'd be so great and simple to use if you 
could use some sort of GWT.create() version.
```

Original issue reported on code.google.com by `christop...@gmail.com` on 10 May 2010 at 12:21""```
Is it currently possible to, at least, use the GSON annotations 
(@SerializedName, @Expose, @Since...) in objects that can be sent over the wire 
in a GWT RPC call?   


```

Original comment by `pohl.lon...@gmail.com` on 29 Jun 2010 at 5:29
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:52
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `limpbizkit` on 18 Mar 2012 at 8:17
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:47
- Changed state: **WontFix**
 =||= ```
> But it'd be so great and simple to use if you 
> could use some sort of GWT.create() version.

That would be very tough. IMHO writing a GWT generator that does a compatible 
serialization should be possible but deserialization without knowing all 
possible classes to receive would almost be impossible. I have the same need 
and am looking for such solution. However, I think this would need to be 
provided by GWT itself as it needs deeper integration. It should also not be in 
the way for code-splitting.
Watch m-m-m.sf.net (mmm-service) if you want to see if I am lucky finding the 
right solution.

> Is it currently possible to, at least, use the GSON annotations 
> (@SerializedName, @Expose, @Since...) in objects that can be sent 
> over the wire in a GWT RPC call?  

That is fairly easy. All you need to do for that is writing a *.gwt.xml for 
gson.
I could provide this.

Unfortunately it seems that the makes of gson do not care about GWT :(
```

Original comment by `joerg.ho...@googlemail.com` on 20 Feb 2013 at 8:48
 =||= ```
I have write a library that allows using GWT with Gson, you can download here 
and enjoy it: https://github.com/heroandtn3/bGwtGson
```

Original comment by `heroand...@gmail.com` on 10 May 2013 at 11:37
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
209Can not serialize when the bean contains a List of object defined by interfacesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:17 PM"```
What steps will reproduce the problem?
See the code:

public class FirstImpl implements First {

    private String name;

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

}

public interface First {

    public String getName();

    public void setName(String name);

}

import java.util.List;

public class ParentFirst {

    private String name;
    private List<First> firsts;

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    public List<First> getFirsts() {
        return this.firsts;
    }

    public void setFirsts(List<First> firsts) {
        this.firsts = firsts;
    }
}

import java.util.List;

public class ParentFirstImpl {

    private String name;
    private List<FirstImpl> firsts;

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    public List<FirstImpl> getFirsts() {
        return this.firsts;
    }

    public void setFirsts(List<FirstImpl> firsts) {
        this.firsts = firsts;
    }
}

Gson gson = new Gson();
String json = null;

FirstImpl firstClass = new FirstImpl();
firstClass.setName(""First name by class"");
json = gson.toJson(firstClass);  
System.out.println(json);

First firstInterface = new FirstImpl();
firstInterface.setName(""First name by interface"");
json = gson.toJson(firstInterface);  
System.out.println(json);

List<FirstImpl> firstsClass = new ArrayList<FirstImpl>();
firstsClass.add(firstClass);
json = gson.toJson(firstsClass);
System.out.println(json);

List<First> firstsInterface = new ArrayList<First>();
firstsInterface.add(firstInterface);
json = gson.toJson(firstsInterface);
System.out.println(json);

ParentFirst parentFirst = new ParentFirst();
parentFirst.setName(""List first name by interface"");
parentFirst.setFirsts(firstsInterface);
json = gson.toJson(parentFirst);
System.out.println(json);

ParentFirstImpl parentFirstImpl = new ParentFirstImpl();
parentFirstImpl.setName(""List first name by class"");
parentFirstImpl.setFirsts(firstsClass);
json = gson.toJson(parentFirstImpl);
System.out.println(json);


What is the expected output? What do you see instead?
Expected:
[{""name"":""First name by class""}]
[{""name"":""First name by interface""}]
{""name"":""List first name by interface"",""firsts"":[{""name"":""First name by
class""}]}
{""name"":""List first name by class"",""firsts"":[{""name"":""First name by class""}]}

See:
[{""name"":""First name by class""}]
[{""name"":""First name by interface""}]
{""name"":""List first name by interface"",""firsts"":[{}]}
{""name"":""List first name by class"",""firsts"":[{""name"":""First name by class""}]}

What version of the product are you using? On what operating system?
1.3

Please provide any additional information below.
I am actually debugging to see if I can find a patch, even if i write a
custom serializer should work.
```

Original issue reported on code.google.com by `lapinouj...@gmail.com` on 14 May 2010 at 10:35
- Merged into: #231""```
Find a quick patch for version 1.3 and for current source. But I did not already
understood everything (just 2h on the project).

Then for version 1.3:
Class: com.google.gson.JsonSerializationVisitor
Method: visitFieldUsingCustomHandler
Line 148 (may change)
Replace: JsonElement child = serializer.serialize(obj, actualTypeOfField, 
context);
by: JsonElement child = serializer.serialize(obj, obj.getClass(), context);

For current version from svn:
Class: com.google.gson.JsonSerializationVisitor
Method: visitFieldUsingCustomHandler
Line 203
Replace: ObjectTypePair objTypePair = new ObjectTypePair(obj, 
declaredTypeOfField,
false);
by: ObjectTypePair objTypePair = new ObjectTypePair(obj, obj.getClass(), false);

I ran Junit test before and after the modification.
I got 3 errors and 6 failures, but they are the same. So the modification may 
not
have consequence.

Is the patch correct ?

```

Original comment by `lapinouj...@gmail.com` on 14 May 2010 at 11:47
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:35
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
210Cannot serialize or deserialize Maps with complex keysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:18 PM"```
import java.util.HashMap;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;


public class GsonTest {

    public static void main(String[] args) {

        new GsonTest();

    }

    public GsonTest() {
        HashMap<ComplexKey, String> map = new HashMap<ComplexKey, String>();

        map.put(new ComplexKey(""Test1"", ""Test2""), ""Value1"");

        Gson gson = new Gson();
        System.out.println(gson.toJson(map, new TypeToken<HashMap<ComplexKey,
String>>(){}.getType()));
    }

    public class ComplexKey {

        private String keyOne;
        private String keyTwo;

        public ComplexKey(String keyOne, String keyTwo) {
            this.keyOne = keyOne;
            this.keyTwo = keyTwo;
        }

        public String getKeyOne() {
            return keyOne;
        }

        public void setKeyOne(String keyOne) {
            this.keyOne = keyOne;
        }

        public String getKeyTwo() {
            return keyTwo;
        }

        public void setKeyTwo(String keyTwo) {
            this.keyTwo = keyTwo;
        }
    }
}

Expected Output:
{""{""keyOne"":""Test1"",""keyTwo"":""Test2""}"":""Value1""}


Actual Output:
{""GsonTest$ComplexKey@1172e08"":""Value1""}


```

Original issue reported on code.google.com by `rev...@paradise.net.nz` on 25 May 2010 at 2:53""```
[deleted comment]
```
 =||= ```
I have investigated this a bit and written some code (got toJson to work, but 
parsing
fails), but what is really the expected behavior? What you expect is probably 
not
legal JSON, as the quotation marks are nested.

I am beginning to wonder if the best solution for complex keys is to encode it 
as:

{""key"":{""keyOne"":""Test1"",""keyTwo"":""Test2""},""value"":""Value1""}

```

Original comment by `marius.k...@gmail.com` on 6 Jun 2010 at 3:56
 =||= ```
I have implemented the solution mentioned above (with those in an array) in the 
cases the key consists of a complex key (not representable as text).

Patch is attached. The code could maybe be cleaner, but all tests and a new for 
this case passes.
```

Original comment by `marius.k...@gmail.com` on 9 Jun 2010 at 12:19

Attachments:
- [0001-Fixed-serialization-of-Map-with-complex-key.-Solves-.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-210/comment-3/0001-Fixed-serialization-of-Map-with-complex-key.-Solves-.patch)
 =||= ```
Adopting something like the above patch would make my life so much better. :)
```

Original comment by `jsha...@google.com` on 28 Aug 2010 at 6:36
 =||= ```
Issue 224 has been merged into this issue.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 8:26
 =||= ```
Issue 228 has been merged into this issue.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:50
 =||= ```
Issue 214 has been merged into this issue.
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:51
 =||= ```
I did some exploring and it's possible to fix this by registering a type 
adapter. I've created a type adapter that takes any map and serializes it as a 
JSON array. It's pretty fantastic and it should work for anyone stuck on this 
bug.

I'd like to get this patch included in GSON 1.7. I'm not committing it directly 
because we're still stabilizing GSON 1.6.
```

Original comment by `limpbizkit` on 8 Nov 2010 at 9:06
- Changed state: **Accepted**
- Added labels: **Milestone-Release1.7**

Attachments:
- [map_as_array_type_adapter.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-210/comment-8/map_as_array_type_adapter.patch)
 =||= ```
Well, the only problem with this patch is that you need to explicitly add the 
type adapter. It will not work automatically work and be compatible with data 
saved with older versions, thus it can't be added as default.

My approach above tries to detect if we are dealing with a type that can be 
serialized as string and choose strategy (but i don't remember if it works 
fully, as I don't know too much of the internals of GSon).
```

Original comment by `marius.k...@gmail.com` on 9 Nov 2010 at 9:01
 =||= ```
Fixed in r702 with one explicit type adapter for all maps. This new type 
adapter works for arbitrary maps with both complex and non-complex keys.
```

Original comment by `limpbizkit` on 12 Jan 2011 at 12:23
- Changed state: **Fixed**
 =||= ```
For any internet travelers from the future (like myself)... you can enable this 
functionality in GSON 2.* with the enableComplexMapKeySerialization() method on 
GsonBuilder.
```

Original comment by `jakewhar...@gmail.com` on 9 Jan 2013 at 8:29
 =||= enableComplexMapKeySerialization() is a great help and should be default. Thanx for the hint! =||= @electronicpeter  It isn't default because doing so will break backward compatibility =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
211Giant strings can be used to DoS parsingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:21 PM"```
What steps will reproduce the problem?
1. Create a small json file with one name field really big (let's say 3 Mb)
2. Parse that String

What is the expected output? What do you see instead?
Although the json object is really small one, the fact of having that
really big name field makes the parsing really slow.

What version of the product are you using? On what operating system?
I have tested that with 1.3 and 1.4.  Ubuntu 9.10

Please provide any additional information below.
Although it seems not so important because no one should create a json
object like that , this is an important issue when trying to avoid DoS attacks.
```

Original issue reported on code.google.com by `Enrique....@gmail.com` on 26 May 2010 at 6:02""```
We're susceptible to denial-of-service attacks on massive strings. I don't 
think we can really work around this, since there can be many situations where 
malicious input data will overwhelm a system. For example, an unterminated 
stream. Or very high magnitude numbers.

If you absolutely need to accept JSON from an untrusted source, sanitize it in 
a separate Java process. Give that process a fixed small memory ceiling, and 
run the parse with a short timeout.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:38
- Changed title: **Giant strings can be used to DoS parsing**
- Changed state: **Invalid**
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
212Make it possible to allow comments in JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:22 PM"```
I am working on a project (http://code.google.com/p/plovr/) that is trying
to use JSON as the format for a config file. The inability to comment
something out is making me consider XML instead :( You can see the
workaround that I'm using (which I believe is what Crockford recommends) here:

http://code.google.com/p/plovr/source/browse/test/org/plovr/integration-test-con
fig.js

This is a pretty horrible option for multi-line comments, or when you are
experimenting and are frequently enabling/disabling various options.

I realize that // and /* comments are no longer part of the JSON spec, but
in practice, it would be great if it were possible to instantiate a
com.google.gson.JsonParser() in such a way that it would tolerate comments.
I believe some of the other JSON parsers offer this mode.

```

Original issue reported on code.google.com by `bolinf...@gmail.com` on 2 Jun 2010 at 1:42""```
Fixed by r584.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:34
- Changed state: **Fixed**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
[deleted comment]
```
 =||= Is there no way to mark a comment as spam? (i.e. the two comments above?)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
213TypoGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:24 PM"```
What steps will reproduce the problem?
1. Go to http://sites.google.com/site/gson/gson-user-guide#TOC-Writing-a-
Serializer
2. There is no return statement in the method definition for 
DateTimeSerializer.

What is the expected output? What do you see instead?
The return statement is missing.

What version of the product are you using? On what operating system?
Any browser, any os.


```

Original issue reported on code.google.com by `jeremyfl...@gmail.com` on 6 Jun 2010 at 10:42""```
Fixed. Thanks!
```

Original comment by `limpbizkit` on 3 Sep 2010 at 6:49
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
214Map key can not use java bean.Google Code ExporterGoogleCodeExporter03/19/15, 06:26:24 PM"```
What steps will reproduce the problem?
1.User.java

package gson.test;

public class User {

    private String id;

    private String name;

    /** {@inheritDoc} */
    @Override
    public String toString() {
        return ""User [id="" + id + "", name="" + name + ""]"";
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

}
2.Test.java
package gson.test;

import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class Test {

    /**
     * @param args
     */
    public static void main(String[] args) {
        Gson gson = new Gson();
        User user = new User();
        user.setId(""1001"");
        user.setName(""张三"");

        Map<User,User> map = new HashMap<User, User>();
        map.put(user, user);
        String jsonString = gson.toJson(map);
        System.out.println(jsonString);
        Object o = gson.fromJson(jsonString,new TypeToken<Map<User, User>>(){}.getType());
        System.out.println( o);
    }

}

3.

What is the expected output? What do you see instead?
{""User [id=1001, name=张三]"":{""id"":""1001"",""name"":""张三""}}
Exception in thread ""main"" com.google.gson.JsonParseException: Expecting object 
found: ""User [id=1001, name=张三]""
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:100)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonPrimitive(JsonDeserializationContextDefault.java:84)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:53)
    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:531)
    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:498)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:50)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:88)
    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:76)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)
    at com.google.gson.Gson.fromJson(Gson.java:495)
    at com.google.gson.Gson.fromJson(Gson.java:444)
    at com.google.gson.Gson.fromJson(Gson.java:396)
    at gson.test.Test.main(Test.java:24)


What version of the product are you using? On what operating system?
1.4

Please provide any additional information below.

```

Original issue reported on code.google.com by `haoks...@gmail.com` on 10 Jun 2010 at 5:52
- Merged into: #210""Original comment by `limpbizkit` on 3 Sep 2010 at 6:51
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
215Deserialization of List with one itemGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:25 PM"```
I am using GSON for JSON deserialization and so far it has been a great help.
But I am struggling with an issue with de serialization of List with generic 
and concrete types when the list contains only one element.

For example - 

public class Department {
    public String name;
    public String code;
}

public class Product {

        private List<String> attributes;
        private List<Department> departments;

        public List<String> getAttributes() {
            return attributes;
        }

        public void setAttributes(List<String> attributes) {
            this.attributes = attributes;

        public List<Department> getDepartments() {
            return departments;
        }

        public void setDepartments(List<Department> departments) {
            this.departments = departments;

    }
}

This works fine if either of my list attributes or departments contain more 
than one item in the list.
But if it contains only element in the list - I get an error saying - no valid 
JSON Array

Please help!


```

Original issue reported on code.google.com by `nitin.na@gmail.com` on 12 Jun 2010 at 2:04""```
I couldn't reproduce this. Please provide a JUnit test case if it continues to 
be a problem.
http://code.google.com/p/google-gson/source/detail?r=582
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:10
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
216Does gson should work for a Blackberry application?Google Code ExporterGoogleCodeExporter03/19/15, 06:26:25 PM"```
What steps will reproduce the problem?
1. Create a Java BlackBerry application at Eclipse
2. Add the gson JARs as external jars
3. Try to run the application in the simulator. Wont run: module not found error

Tried to preverify class and it's throwing an error

What is the expected output? What do you see instead?
Should be able to run the application without errors.

What version of the product are you using? On what operating system?
gson 1.4, Eclipse Galileo, latest Blackberry SDK (1.2)

Please provide any additional information below.
If I select to Export the JAR at the project's properties it wont even get 
packed, it will throw an error when packing
```

Original issue reported on code.google.com by `arturo.o...@gmail.com` on 16 Jun 2010 at 9:10""```
Could you paste the error? What version of Java does Blackberry SDK 1.2 support?
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:34
- Changed state: **Invalid**
 =||= ```
I'm working with a BlackBerry project in which I would like to use gson to 
retrieve data from server. I have a BlackBerry Client which should consume json 
payload from my server. After a few attempts I came to know that gson is not 
designed keeping blackberry in mind. I would be desirable to have this feature 
in gson.

I'm attaching the trace...

com.google.gson.DefaultTypeAdapters$CharacterTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$DefaultJavaSqlDateTypeAdapter: Warning!: 
Duplicate method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$DefaultTimeTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$DefaultTimestampDeserializer: Warning!: 
Duplicate method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$GregorianCalendarTypeAdapter: Warning!: 
Duplicate method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$IntegerTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$BigIntegerTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$UrlTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$UriTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$NumberTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$BigDecimalTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$ShortTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$EnumTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$StringTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$FloatDeserializer: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$LongDeserializer: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$UuidTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.JsonStreamParser: Warning!: Duplicate method only differs by 
return type: next
com.google.gson.DefaultTypeAdapters$HashSetCreator: Warning!: Duplicate method 
only differs by return type: createInstance
com.google.gson.DefaultTypeAdapters$LocaleTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$DoubleDeserializer: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$BooleanTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter: Warning!: Duplicate 
method only differs by return type: createInstance
com.google.gson.DefaultTypeAdapters$ByteTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter: Warning!: Duplicate 
method only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$TreeSetCreator: Warning!: Duplicate method 
only differs by return type: createInstance
com.google.gson.DefaultTypeAdapters$MapTypeAdapter: Warning!: Duplicate method 
only differs by return type: deserialize
com.google.gson.DefaultTypeAdapters$MapTypeAdapter: Warning!: Duplicate method 
only differs by return type: createInstance
com.google.gson.DefaultTypeAdapters$PropertiesCreator: Warning!: Duplicate 
method only differs by return type: createInstance
java.lang.Enum: Warning!: No definition found
com.google.gson.FieldNamingPolicy: Warning!: Base class has undefined type: 
java.lang.Enum
java.lang.reflect.GenericArrayType: Warning!: No definition found
com.google.gson.GenericArrayTypeImpl: Warning!: Implements undefined interface: 
java.lang.reflect.GenericArrayType
java.lang.Iterable: Warning!: No definition found
com.google.gson.JsonArray: Warning!: Implements undefined interface: 
java.lang.Iterable
java.util.Iterator: Warning!: No definition found
com.google.gson.JsonStreamParser: Warning!: Implements undefined interface: 
java.util.Iterator
com.google.gson.LongSerializationPolicy: Warning!: Base class has undefined 
type: java.lang.Enum
java.util.LinkedHashMap: Warning!: No definition found
com.google.gson.LruCache: Warning!: Base class has undefined type: 
java.util.LinkedHashMap
com.google.gson.ModifyFirstLetterNamingPolicy$LetterModifier: Warning!: Base 
class has undefined type: java.lang.Enum
java.lang.reflect.ParameterizedType: Warning!: No definition found
com.google.gson.ParameterizedTypeImpl: Warning!: Implements undefined 
interface: java.lang.reflect.ParameterizedType
java.io.Serializable: Warning!: No definition found
com.google.gson.Token: Warning!: Implements undefined interface: 
java.io.Serializable
java.lang.annotation.Annotation: Warning!: No definition found
com.google.gson.annotations.Expose: Warning!: Implements undefined interface: 
java.lang.annotation.Annotation
com.google.gson.annotations.SerializedName: Warning!: Implements undefined 
interface: java.lang.annotation.Annotation
com.google.gson.annotations.Since: Warning!: Implements undefined interface: 
java.lang.annotation.Annotation
com.google.gson.annotations.Until: Warning!: Implements undefined interface: 
java.lang.annotation.Annotation
java.lang.Appendable: Warning!: No definition found
java.lang.StringBuilder: Warning!: No definition found
java.lang.reflect.Field: Warning!: No definition found
java.lang.reflect.Type: Warning!: No definition found
java.math.BigInteger: Warning!: No definition found
java.text.DateFormat: Warning!: No definition found
java.util.Collection: Warning!: No definition found
java.util.List: Warning!: No definition found
java.util.Map: Warning!: No definition found
java.util.Set: Warning!: No definition found
java.util.logging.Logger: Warning!: No definition found
java.util.regex.Pattern: Warning!: No definition found
java.lang.Class: Warning!: No definition found for method: isAnonymousClass
java.lang.Class: Warning!: No definition found for method: isLocalClass
com.google.gson.AnonymousAndLocalClassExclusionStrategy: Error!: Missing stack 
map in: isAnonymousOrLocal at label: 18
Packaging project GSON_ME_Library failed (took 2.532 seconds) 
```

Original comment by `santhosh...@gmail.com` on 18 Oct 2010 at 11:48
 =||= ```
I'm working with BlackBerry SDK 5.0.0
```

Original comment by `santhosh...@gmail.com` on 18 Oct 2010 at 11:51
 =||= ```
I faced the same problem, and sadly this is impossible since the Blackberry SDK 
is based on J2ME wich does not have Reflection or other things required by Gson.

Cheers.
```

Original comment by `Nahuel.B...@gmail.com` on 15 Dec 2010 at 11:31
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
217primitive type supportGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:27 PM"```
Object d=100.0;
String jsond=gson.toJson(d);
assertEquals(""100.0"",jsond);
Object db=gson.fromJson(jsond, Object.class);
//gson bug,this should be true, although given a Object.class, but from the 
json string ,it's clear that , the result should be a Double
assertFalse(d.equals(db));

//also
Object b=true;
String jsonb=gson.toJson(b);
assertEquals(""true"",jsonb);
Object bb=gson.fromJson(jsonb, Object.class);
//gson bug, bb should be a Boolean
assertFalse(b.equals(bb));




```

Original issue reported on code.google.com by `lanxia...@gmail.com` on 25 Jun 2010 at 12:02""```
To get what you're requesting, you should change the 2nd argument in the call 
to ""fromJson()"" to the desired type. Although GSON could infer certain types, 
doing so would be inefficient and/or unreliable because the encoded text has 
very little type information.


```

Original comment by `limpbizkit` on 28 Aug 2010 at 4:53
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
218Nested generic collections don't return jsonized values on toJsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:27 PM"```
+  private static class ClassWithDistinguishableFieldName {
+    private String distinguishableFieldName = ""distinguishableFieldValue"";
+  }
+
+  private static class ClassWithHashMapField {
+    private String a = ""a"";
+    private String b = ""b"";
+    HashMap<String, Object> c = new HashMap<String, Object>();
+
+    ClassWithHashMapField() {
+      c.put(""someArray"", Arrays.asList(new 
ClassWithDistinguishableFieldName()));
+    }
+  }



+    ClassWithHashMapField o = new ClassWithHashMapField();
+    String json = gson.toJson(o);

json:
  {""a"":""a"",""b"":""b"",""c"":{""someArray"":{}}}

expected:
  {""a"":""a"",""b"":""b"",""c"":{""someArray"":[{""distinguishableFieldName"":""distinguishableFieldValue""}]}}


This issue was blocking a project I am working on; so I attached a patch with a 
test.
```

Original issue reported on code.google.com by `masahji%...@gtempaccount.com` on 28 Jun 2010 at 2:47""```
Attaching patch
```

Original comment by `masahji%...@gtempaccount.com` on 28 Jun 2010 at 2:47

Attachments:
- [issue_218.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-218/comment-1/issue_218.patch)
 =||= ```
ping
```

Original comment by `masahji%...@gtempaccount.com` on 13 Sep 2010 at 12:36
 =||= ```
Same problem here:

public class ComplexObj {
    public List<Map<String, Object>> rows;
}
@Test
public void ttt() {
    List<Map<String, Object>> rows = buildRows(100);
    String json1 = new Gson().toJson(rows);
    ComplexObj complexObj = new ComplexObj();
    complexObj.rows = rows;
    String json2 = new Gson().toJson(complexObj);
    assertThat(json2, containsString(json1));
}
private List<Map<String, Object>> buildRows(int id) {
    List<Map<String, Object>> rows = Lists.newArrayList();
    Map<String, Object> row = Maps.newHashMap();
    row.put(""id"", id);
    rows.add(row);
    row = Maps.newHashMap();
    row.put(""id"", 999);
    rows.add(row);
    return rows;
}

I'm also blocked by this issue
```

Original comment by `gianmarco.gherardi` on 13 Sep 2010 at 8:28
 =||= ```
Can you avoid using Object as the value in your Map? Use of Object omits type 
information that GSON uses when inspecting your types.
```

Original comment by `limpbizkit` on 6 Oct 2010 at 5:51
 =||= ```
I thought my attached patch would fix the problem. There should also be a unit 
test in there as well.
```

Original comment by `masahji%...@gtempaccount.com` on 6 Oct 2010 at 5:54
 =||= ```
Issue 234 has been merged into this issue.
```

Original comment by `limpbizkit` on 6 Oct 2010 at 6:08
 =||= ```
Gson is able to serialize a plain List<Map<String, Object>>, don't understand 
why it fail when serializing the same type in a custom object
```

Original comment by `gianmarco.gherardi` on 6 Oct 2010 at 6:24
 =||= ```
The core problem is that GSON does something slightly differently depending on 
whether it has static type information. When it has no static type information, 
it will use the runtime type. When it has some static type information (as is 
the case when it's serializing the field of a custom object), it will use that 
type information.

For predictable results, always supply GSON will full type information. In this 
case the fix is to replace List<Map<String, Object>> with List<Map<String, 
Foo>>, for the appropriate value of Foo. Don't forget that you can register a 
type adapter for Foo if you need to handle multiple subclasses.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:31
- Changed state: **WontFix**
 =||= ```
I would appreciate a fix on this.  I have a case where I could have a 
List<Map<String, Object>> because the type ending up as the value in the Map 
could be a String, Integer, Boolean, List, or Map.  As I understand the 
description of the reason why this will not be fixed I would need to extend 
each of those classes so I could then register a type adapter to handle 
subclasses of what are simply basic types.

It would be very helpful if this issue could be upgrade from WontFix.  This is 
effectively a blocking issue for me.
```

Original comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 5:52
 =||= ```
I need to clarify my nesting.  The nesting I am trying to handle is...

Map<String, Object> where ""object"" could possibly be a List<Map<String, 
Object>>.

I Map<String, Object> that Object could be an Integer, List, String, Boolean, 
etc.

I have tried updating the list to be a List<Map<String, String>> but that made 
no difference.
```

Original comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 6:17
 =||= ```
I had exactly the same situation you do and could not get it to work either.

I instead opted to use FlexJSon -- which I found just as easy to use as
GSon, but which actually could be told to do precisely what you are trying
to accomplish.
http://flexjson.sourceforge.net/

ie:
    JSONSerializer jsonSerializer = new JSONSerializer();
      String jsonString = jsonSerializer.deepSerialize(
myObjectThatMapsAStringToAnObject );
```

Original comment by `brandon....@gmail.com` on 1 Dec 2010 at 6:35
 =||= ```
Nifty!  Thanks!  I will look into that.
```

Original comment by `johnwhea...@gmail.com` on 1 Dec 2010 at 7:02
 =||= ```
Can this be a solution?

--------------------------------------------------------------------------------
-------------------------------
package com.github.gimmi.spikegson;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class StringTemplateBuilderTest {
    private static class CustomType {
        public String value = ""a value"";
    }

    @Test
    public void should_serialize_custom_type_in_map_with_type_token() {
        Map<String, Object> obj = new HashMap<String, Object>();
        obj.put(""k1"", new CustomType());

        Type type = new TypeToken<Map<String, Object>>() {
        }.getType();

        String actual = new Gson().toJson(obj, type).replace('""', '\'');

        assertEquals(""{'k1':{}}"", actual);

        actual = new GsonBuilder().registerTypeAdapter(Object.class, new JsonSerializer<Object>() {
            @Override
            public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {
                return context.serialize(src);
            }
        }).create().toJson(obj, type).replace('""', '\'');

        assertEquals(""{'k1':{'value':'a value'}}"", actual);
    }
}
--------------------------------------------------------------------------------
-------------------------------
```

Original comment by `gianmarco.gherardi` on 13 Apr 2011 at 5:43
 =||= ```
Decision which accepted by developers, to use the ""static information about the 
type of"", generate extremely delusional behavior of Gson:

----
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.util.Arrays;
import java.util.List;

public class Test {
  public static void main(String args[]) {
    Result result = new Result();
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    gson.toJson(result, System.out);
  }

  interface Column {
  }

  static class ColumnImpl implements Column {
    private final String one;
    private final int two;  
    private final Boolean three;

    public ColumnImpl(String one, int two, Boolean three) {
      this.one = one;
      this.two = two;
      this.three = three;
    }
  }

  static class Result {
    private List<ColumnImpl> columnImpls = Arrays.asList(
      new ColumnImpl(""one"", 2, false), 
      new ColumnImpl(""two"", 4, true), 
      new ColumnImpl(""three"", 8, false));
    private List<Column> columns = (List)columnImpls;
  }
}
------


print:


------
{
  ""columnImpls"": [
    {
      ""one"": ""one"",
      ""two"": 2,
      ""three"": false
    },
    {
      ""one"": ""two"",
      ""two"": 4,
      ""three"": true
    },
    {
      ""one"": ""three"",
      ""two"": 8,
      ""three"": false
    }
  ],
  ""columns"": [
    {},
    {},
    {}
  ]
}
------

For what has been chosen such behavior?
```

Original comment by `radio...@ya.ru` on 28 Jul 2011 at 11:30
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
219Support surrogate pairsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:31 PM"```
A fix for com.google.gson.StringUnmarshaller line 17:

  // TODO(inder): Handle the case where code points are of size bigger than 4

There are two files in the attachment, for com.google.gson.StringUnmarshaller 
and com.google.gson.StringUnmarshallerTest respectively, based on Revision 551 
in trunk.
```

Original issue reported on code.google.com by `jacky163...@163.com` on 3 Jul 2010 at 9:06

Attachments:
- [StringUnmarshaller.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-219/comment-0/StringUnmarshaller.zip)""Original comment by `limpbizkit` on 6 Oct 2010 at 5:35
- Changed title: **Support surrogate pairs**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Apologies for sitting on this for a very long time. Could you please sign the 
Google Code CLA so we can accept patches from you? Once you've filled in that 
form please update that bug and I'll take a look at your patch.
http://code.google.com/legal/individual-cla-v1.0.html
```

Original comment by `limpbizkit` on 24 Jan 2011 at 10:40
 =||= ```
Obsolete.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:27
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
220It is not supporting ot CachedRowSet objetGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:32 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?
Should support CatchedRowSet object

What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `mrrajar...@gmail.com` on 8 Jul 2010 at 12:16""```
The CachedRowSet type is very complex, and each application would want to 
convert it to JSON in a different way. I recommend you implement a custom 
JsonDeserializer.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:38
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
221Gson can't parse JSON text encoded in UTF-8?Google Code ExporterGoogleCodeExporter03/19/15, 06:26:33 PM"```
<code>
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class Test {
        private static final String charEncoding=""UTF-8"";

        private static final String fileName=""c:\\test2.txt"";
        public static void main(String args[]){
                try{
                        File file=new File(fileName);
                        if(file.canRead()){
                                FileInputStream inStream=new FileInputStream(file);
                                InputStreamReader reader=new InputStreamReader(inStream,
charEncoding);
                                JsonParser parser=new JsonParser();
                                JsonElement jsonA=parser.parse(new BufferedReader(reader));
                                System.out.println(jsonA.isJsonArray());
                                System.out.println(jsonA.toString());
                        }
                }catch(IOException e){
                        e.printStackTrace();
                }
        }

} 
</code>

What is the expected output? What do you see instead?
Caused by: com.google.gson.TokenMgrError: Lexical error at line 1,
column 1.  Encountered: ""\ufeff"" (65279), after : """"
        at
com.google.gson.JsonParserJavaccTokenManager.getNextToken(JsonParserJavaccTokenM
anager.java:
1193)
        at com.google.gson.JsonParserJavacc.jj_ntk(JsonParserJavacc.java:635)
        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:10)
        at com.google.gson.JsonParser.parse(JsonParser.java:54)
        ... 1 more 

What version of the product are you using? On what operating system?
gson 1.4

Please provide any additional information below.
attached is the text file containing the json string

```

Original issue reported on code.google.com by `monstern...@gmail.com` on 8 Jul 2010 at 12:57

Attachments:
- [test2.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-221/comment-0/test2.txt)""```
It looks like you've got an input text containing a byte order mark. I blogged 
the workaround here:
  http://blog.publicobject.com/2010/08/handling-byte-order-mark-in-java.html
```

Original comment by `limpbizkit` on 20 Aug 2010 at 6:04
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
222Locale on Date FormatGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:34 PM"```
It’s my two cent for this project. I add locale option for Date format.

public GsonBuilder setDateFormat(int style,Locale locale);
public GsonBuilder setDateFormat(int dateStyle, int timeStyle, Locale locale);

/*
* Atenciosamente/ Regards/ Saludos, 
* Jan Gomes - jangomes@gmail.com
*/
```

Original issue reported on code.google.com by `jango...@gmail.com` on 14 Jul 2010 at 1:44
- Merged into: #223

Attachments:
- [gson-locale.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-222/comment-0/gson-locale.diff)""Original comment by `limpbizkit` on 6 Oct 2010 at 5:36
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 6:39
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
224Not able searialize HashMap and adding instance into JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:36 PM"```
What steps will reproduce the problem?
HashMap<Customer, List<CampaignProduct>> customerCplHashMap = new 
HashMap<Customer, List<CampaignProduct>>();

customerCplHashMap.put(semCustomer, cpls);
dumpJson(writerCustCpl, gson.toJson(customerCplHashMap));

OUTPUT

{""cs.com.test.domain.Customer@7cd6de"":[{""id"":1532,""name"":""25-2""}]}

What is the expected output? What do you see instead?
{""""id"":1,""name"":""John"":[{""id"":1532,""name"":""25-2""}]}


What version of the product are you using? On what operating system?
WINDOWS and GSON 1.5 Beta

Please provide any additional information below.

```

Original issue reported on code.google.com by `das.k.ab...@gmail.com` on 5 Aug 2010 at 5:20
- Merged into: #210""```
I meant HashMap key where key is userdefined not able to serialize properly.

```

Original comment by `das.k.ab...@gmail.com` on 5 Aug 2010 at 5:24
 =||= ```
Definitely a problem, but the solution isn't obvious.

Perhaps GSON should look at the conversion for the map's key type. If it 
converts to a primitive, then a GSON could emit an object. If it converts to 
another type, GSON could emit an array of pairs. For example, the customer 
above could be converted to this:
  [
    [{ ""customerId"": 1, ""name"": ""John"" },{""campaignId"": 1532, ""name"": ""25-2""}]
  ]
We could emit something more concise for say, a map with integer keys:
  { ""5"": ""five"", ""6"": ""six"" }
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:00
- Changed state: **Accepted**
 =||= ```
Thanks for reply! Is it going to be fixed in GSON library soon?
```

Original comment by `das.k.ab...@gmail.com` on 27 Aug 2010 at 5:08
 =||= ```
 [
    [{ ""customerId"": 1, ""name"": ""John"" },{""campaignId"": 1532, ""name"": ""25-2""}]
  ]

I'm not able to understand how to convert?

I've Hashmap<Customer, List<Campaign>>, in this case how do I put above one as 
a key?


```

Original comment by `das.k.ab...@gmail.com` on 27 Aug 2010 at 5:16
 =||= ```
I'm not sure about when it'll be fixed. In the interim you can work around the 
problem by writing a custom JsonSerializer.
```

Original comment by `limpbizkit` on 28 Aug 2010 at 2:13
 =||= ```
This is basically a dupe of issue 210, which provides an example patch that 
solves this problem.
```

Original comment by `jsha...@google.com` on 28 Aug 2010 at 6:40
 =||= Original comment by `limpbizkit` on 28 Aug 2010 at 8:26
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
225Implement equals() to perform deep-value-comparisonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:39 PM"```
JsonObject and friends should implement equals() to support unit testing 
without forcing a call to toString() just to do a comparison.

    assertThat(someJsonObject, is(someOtherJsonObject));

as opposed to

    assertThat(someJsonObject.toString(), 
            is(someOtherJsonObject.toString()));

There's a patch for this at

    http://code.google.com/p/google-gson/issues/detail?id=64&q=equals#c4

```

Original issue reported on code.google.com by `emperorf...@gmail.com` on 21 Aug 2010 at 12:05
- Merged into: #64""Original comment by `limpbizkit` on 3 Sep 2010 at 6:58
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
226Enum with body does not serializeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:39 PM"```
Given this test:

enum Toy{
        CAR
}

@Test
    public void serializeEnums()
    {
        assertEquals(""\""CAR\"""",new Gson().toJson(Toy.CAR));

   }

... the serialization works fine. If I add body to the enum, however:

enum Toy{
        CAR{ /** Empty body **/}
}

.. the result is an empty string.


Tested on version 1.5.
```

Original issue reported on code.google.com by `tfn...@gmail.com` on 26 Aug 2010 at 4:09""```
Yikes. We're probably using getClass() rather than getDeclaringClass(). Should 
be straightforward fix.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 2:38
- Changed state: **Accepted**
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= ```
Fixed by r583.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 7:27
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
227Map<String, ...> with empty strings (or strings consisting of whitespace) don't serializeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:40 PM"```
JsonObject has this precondition check for map properties:

!"""".equals(property.trim())

(line 55 of JsonObject.java in my checkout)

This causes this map to fail to serialize:

Map<String, Integer> map = new HashMap();
map.put("""", 1);
map.put(""k"", 1000);
map.put(""m"", 1000000);
```

Original issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 8:56""```
This is a bug. The JSON spec permits empty strings as property names.
```

Original comment by `limpbizkit` on 27 Aug 2010 at 3:39
- Changed state: **Accepted**
 =||= ```
Fixed with r585.

FYI... this bug was making it difficult for our application to serialize 
certain data sets to JSON. In Caliper we use maps for pretty-printing display 
units. For example, Caliper may render ""48KiB"", ""3s"" or ""5 thousand"" in its 
table. The empty string is used for counted units, like the ""5"" in ""5 instances 
allocated"".
   { ""ms"": 0.001, ""s"": 1, "" minutes"": 60 }
   { ""B"": 1, ""KiB"": 1024, ""MiB"": 1048576, ""GiB"": 1073741824 }
   { """": 1, "" thousand"": 1000, "" million"": 1000000 }
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:11
- Changed state: **Fixed**
 =||= ```
Issue 256 has been merged into this issue.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:38
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
228Maps do not serialize usefullyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:41 PM"```
I want to serialize a Map<MyObject, ...>. This is not currently possible 
because these are serialized into:

{""<myObject1.toString()>"" : ..., ""<myObject2.toString()>"" : ..., ...}

which is obviously not reversible back into my MyObject instances.

I was able to fix this problem by writing a custom adapter that simply 
transforms the Map into a List on serialization and back into a Map on 
deserialization, but this is a pain when otherwise I can serialize a huge 
object hierarchy very simply.

e.g., I made the above serialize to [{""k"" : myObject1, ""v"" : ...}, {""k"" : 
myObject2, ""v"" : ...}, ...]

I propose that DefaultMapTypeAdapter use something like this List approach by 
default, unless the key value happens to be a String, since there is really 
nothing else particularly sane it can do without losing a ton of information in 
doing the String.valueOf() call.
```

Original issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 9:02
- Merged into: #210""```
This is a dupe of issue 210.
```

Original comment by `jsha...@google.com` on 28 Aug 2010 at 6:23
 =||= Original comment by `limpbizkit` on 3 Sep 2010 at 6:50
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
229Missing sources in Maven repositoryGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:43 PM"```
What steps will reproduce the problem?
1. checkout trunk / head 
2. mvn clean install
3. watch compiler complaints about missing classes
( Gson,  GsonReader ) 
What is the expected output? What do you see instead?

... clean maven build

What version of the product are you using? On what operating system?

WinXP / mvn 2.1


```

Original issue reported on code.google.com by `konstant...@gmail.com` on 27 Aug 2010 at 8:58""```
Inder, I think you may need to do some Maveney stuff for the 1.5 release...
```

Original comment by `limpbizkit` on 28 Aug 2010 at 5:35
- Changed title: **Missing sources in Maven repository**
 =||= Original comment by `limpbizkit` on 4 Nov 2010 at 10:55
- Added labels: **Milestone-Release1.6**
 =||= ```
Please update to Gson 1.7.1 to fix this problem. We will not be updating the 
previous Gson versions.

http://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/

```

Original comment by `inder123` on 13 Apr 2011 at 11:29
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
230GsonBuilder setDateFormat ignoredGoogle Code ExporterGoogleCodeExporter03/19/15, 06:26:44 PM"```
What steps will reproduce the problem?
1. Build a gson with setDateFormat
Date date = new Date();
Gson gson = new GsonBuilder().setDateFormat(""MM/dd/yyyy"").create();
System.out.println(gson.toJson(date));

What is the expected output? What do you see instead?
Expected is ""08/27/2010""
Date results in standard format: ""Aug 27, 2010 10:21:32 AM""

What version of the product are you using? On what operating system?
1.5

Please provide any additional information below.
It works ok in 1.4 but when I change to 1.5 it ignores the setDateFormat() 
method
```

Original issue reported on code.google.com by `tradefie...@gmail.com` on 27 Aug 2010 at 2:38""```
It still happens in version 1.6 when the object is within a collection. 
```

Original comment by `alxm...@gmail.com` on 4 Jan 2011 at 11:55
 =||= ```
We encountered this problem as well with our server, except that we expected 
the dates to be serialized by a custom adapter.  The weird thing is that 
everything was going fine in our unit tests.
We spent a couple of hours doing remote debugging and looking at the code. It 
seems at some point during serialization, our java.util.Date objects were 
handled as if they were java.sql.Date objects.
So they were serialized following the default pattern for java.sql.Date, which 
matches our unexpected output and the unexpected output in the comment above.
I think the problem appeared in gson 1.5, where support for sql dates was 
added, and is maybe related to the fact that java.sql.Date extends 
java.util.Date...
A workaround for us was to register the same adapter for java.sql.Date than for 
java.util.Date:

Gson gson = new GsonBuilder()
        .......
        .registerTypeAdapter(Date.class, new DateTypeAdapter())
        .registerTypeAdapter(java.sql.Date.class, new DateTypeAdapter())
        .......
        .create();
```

Original comment by `pfrangi...@gmail.com` on 3 Feb 2011 at 8:40
 =||= ```
That woule be cool to fix that in 1.7!
```

Original comment by `pfrangi...@gmail.com` on 3 Feb 2011 at 8:41
 =||= ```
This should be a higher priority defect since working with dates is very 
common. Hope this will be fixed as soon as possible.
```

Original comment by `inancsev...@gmail.com` on 4 Feb 2011 at 10:07
 =||= ```
[deleted comment]
```
 =||= ```
JsonSerializationVisitor.visitFieldUsingCustomHandler(FieldAttributes, Type, 
Object) line: 195

Object obj = f.get(parent);

In f.get() method, ""field.get(instance)"" returns Timestamp object for 
java.util.Date class.

field is java.lang.reflect.Field


and then


ObjectTypePair.getActualTypeIfMoreSpecific(Type, Class<?>) line: 87 

if (typeAsClass.isAssignableFrom(actualClass)) {
    type = actualClass;
}

The ""type"" which is ""java.util.Date"" is assigned by ""actualClass"" which is 
""java.sql.Timestamp"".

```

Original comment by `das...@gmail.com` on 4 Feb 2011 at 9:58
 =||= ```
On startup when sets datePattern for GsonBuilder, code creates dateTypeAdapter 
for Date.class in GsonBuilder.addTypeAdaptersForDate method:


if (datePattern != null && !"""".equals(datePattern.trim())) {
   dateTypeAdapter = new DefaultDateTypeAdapter(datePattern);
} 
...
if (dateTypeAdapter != null) {
  if (!serializers.hasSpecificHandlerFor(Date.class)) {
      serializers.register(Date.class, dateTypeAdapter);
  }
....

but line 530 of GsonBuilder while ""serializers"" is being filled with 
defaultSerializers, dateTypeAdapter for Timestamp.class is created with default 
SimpleDateFormat.

```

Original comment by `das...@gmail.com` on 4 Feb 2011 at 11:40
 =||= ```
Hi again, 

Gson is trying to serialize more specific field type. When reading Date type 
from database the Date field of domain object is set to java.sql.Timestamp or 
java.sql.Date

A workaround is to register custom adapter according to your Date instance type 
read from database:

registerTypeAdapter(Timestamp.class, new DateSerializer())
or
registerTypeAdapter(java.sql.Date.class, new DateSerializer())



in source code we can change GsonBuilder.addTypeAdaptersForDate method like 
this:

....
   if (dateTypeAdapter != null) {
      if (!serializers.hasSpecificHandlerFor(Date.class)) {
          serializers.register(Date.class, dateTypeAdapter);
      }
      if (!serializers.hasSpecificHandlerFor(Timestamp.class)) {
          serializers.register(Timestamp.class, dateTypeAdapter);
      }
      if (!serializers.hasSpecificHandlerFor(java.sql.Date.class)) {
          serializers.register(java.sql.Date.class, dateTypeAdapter);
      }


      if (!deserializers.hasSpecificHandlerFor(Date.class)) {
          deserializers.register(Date.class, dateTypeAdapter);
      }
      if (!deserializers.hasSpecificHandlerFor(Timestamp.class)) {
          deserializers.register(Timestamp.class, dateTypeAdapter);
      }
      if (!deserializers.hasSpecificHandlerFor(java.sql.Date.class)) {
          deserializers.register(java.sql.Date.class, dateTypeAdapter);
      }
    }
....


```

Original comment by `das...@gmail.com` on 7 Feb 2011 at 12:09
 =||= ```
This issue was closed by revision r762.
```

Original comment by `limpbizkit` on 29 Mar 2011 at 9:36
- Changed state: **Fixed**
 =||= In which versions was this fixed? I have the exact same problem in version 2.3.1.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
233Bug using pretty printingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:01 PM"```
What steps will reproduce the problem?
1. Run the test
@Test
public void json_pretty_printing_bug() {
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(""F868"", new Object());
    map.put(""F867"", new Object());
    map.put(""ID"", new Object());
    GsonBuilder builder = new GsonBuilder();
    builder.setPrettyPrinting();
    Gson gson = builder.create();
    assertEquals(""{\""F868\"":{},\""F867\"":{},\""ID\"":{}}"", gson.toJson(map));
}

What is the expected output? What do you see instead?
Expected: {""F868"":{},""F867"":{},""ID"":{}}
Actual: {""F868"":{}""F867"":{}""ID"":{}}

What version of the product are you using? On what operating system?
1.3

Please provide any additional information below.
removing setPrettyPrinting() solves the problem
```

Original issue reported on code.google.com by `gianmarco.gherardi` on 10 Sep 2010 at 7:30""```
Fixed in the latest SVN.
```

Original comment by `limpbizkit` on 11 Sep 2010 at 9:12
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
234Arrays referenced in Object field serialization bugGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:02 PM"```
What steps will reproduce the problem?
1. Run the test

    public class ComplexObj {
        public double[] result;
        public Object obj;
    }

    @Test
    public void json_pretty_printing_bug() {
        GsonBuilder builder = new GsonBuilder();
        Gson gson = builder.create();
        ComplexObj response = new ComplexObj();
        response.result=new double[2];
        response.result[0] = 2.5;
        response.result[1] = 2.5;
        response.obj=response.result;
        assertEquals(""{\""result\"":[2.5,2.5],\""obj\"":[2.5,2.5]}"", gson.toJson(response));
    }

What is the expected output? What do you see instead?
Expected: {""result"":[2.5,2.5],""obj"":[2.5,2.5]}
Actual: {""result"":[2.5,2.5],""obj"":{}}

What version of the product are you using? On what operating system?
1.5

Please provide any additional information below.
This is a regression, i'm switching from gson-1.3 to gson-1.5 as suggested 
here: http://code.google.com/p/google-gson/issues/detail?id=233
```

Original issue reported on code.google.com by `gianmarco.gherardi` on 12 Sep 2010 at 1:12
- Merged into: #218""Original comment by `limpbizkit` on 6 Oct 2010 at 6:08
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
235Could not deserialize JsonPrimitive to intGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:03 PM"```
Gson gson = new Gson();

gson.fromJson(""1"", int.class) works ok,
gson.fromJson(new JsonPrimitive(1), int.class) throws ClassCastException,

The latter method calls cast method of Class, while the former one does not.
int.class.cast(new Integer(1)) does not work on my Java6SE JVM.

I'm using Gson 1.5 on Java6SE
```

Original issue reported on code.google.com by `adi...@gmail.com` on 13 Sep 2010 at 6:53""```
It's definitely an inconsistency in GSON.

Gson.fromJson(JsonElement, Class) calls Class.cast() but fromJson(String, 
Class) does not.

It suggests there are two bugs:
1. fromJson(String, Class) should call Class.cast() before returning its result
2. In both methods we should canonicalize int.class to Integer.class, and 
similarly for the other primitive types.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:52
- Changed state: **Accepted**
 =||= ```
Fixed in r623.
```

Original comment by `limpbizkit` on 1 Nov 2010 at 10:38
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
236com.google.gson.ParseException when Json string contains new line charactersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:04 PM"```
What steps will reproduce the problem?
1.Create a Json string containing new line characters ie. \n or \r\n
e.g.
{""rid"":""3fe769c3-93ee-43b4-91ee-2f279cf5e9bb"",""org"":""001"",""acno"":""TL000000000068
"",""fseq"":""7893ca16-ed66-431a-96fd-c20001efa487"",""actcd"":""IA"",""fdt"":""17.09.2010"",
""rescd"":""PTP"",""nactcd"":""IA"",""nactdt"":""17.09.2010"",""note"":""Remarks\r\nRemarks"",""f
ee"":""N"",""toall"":""N"",""watch"":""N"",""promises"":[{""prdt"":""17.09.2010"",""pramt"":""100.00
0""}]} 
2.Parse string using JsonStreamParser

What is the expected output? What do you see instead?
The string should be parsed but it throws following exception:
Exception in thread ""main"" com.google.gson.JsonParseException: Failed parsing 
JSON source to Json
    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:91)
    at com.rsystems.services.util.JSONUtil.getMapFromJson(JSONUtil.java:49)
    at com.rsystems.services.testing.TestUtil.main(TestUtil.java:35)
Caused by: com.google.gson.ParseException: Encountered "" ""\"""" ""\"" """" at line 1, 
column 218.
Was expecting one of:
    <DIGITS> ...
    ""null"" ...
    ""NaN"" ...
    ""Infinity"" ...
    <BOOLEAN> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""{"" ...
    ""["" ...
    ""-"" ...

    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)
    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)
    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)
    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)
    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)
    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)
    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:87)
    ... 2 more


What version of the product are you using? On what operating system?
com.google.code.gson version 1.4

Please provide any additional information below.

```

Original issue reported on code.google.com by `bhavesh....@gmail.com` on 17 Sep 2010 at 7:35""```
Same exception occurs even for version 1.5
```

Original comment by `bhavesh....@gmail.com` on 17 Sep 2010 at 7:38
 =||= ```
Can you try the latest code from SVN? I believe it's fixed there.
```

Original comment by `limpbizkit` on 17 Sep 2010 at 2:57
 =||= ```
It works with the latest code from SVN. Thanks :)
When will this be included in the release on maven repo?
```

Original comment by `bhavesh....@gmail.com` on 17 Sep 2010 at 3:46
 =||= Original comment by `limpbizkit` on 3 Oct 2010 at 6:38
- Changed state: **Fixed**
 =||= ```
Could you please let us know When will this be included in the release ?
```

Original comment by `iit.ni...@gmail.com` on 20 Oct 2010 at 9:57
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
237Incorrect serialisation for sub classed objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:05 PM"```
What steps will reproduce the problem?
1. Extract the Containers.zip maven project attached.
2. Run the BookingDialogViewJsonSerializerTest.java JUnit test to observe the 
issue.

What is the expected output? What do you see instead?
I'm trying to serialise a nested object. The object serialises fine when not 
nested. When nested only fields on the base class are serialised, fields on the 
subclasses are omitted.

What version of the product are you using? On what operating system?
2.3.2 on win xp.

Please provide any additional information below.

```

Original issue reported on code.google.com by `proggerp...@gmail.com` on 20 Sep 2010 at 7:25
- Merged into: #231

Attachments:
- [Containers.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-237/comment-0/Containers.zip)""Original comment by `limpbizkit` on 6 Oct 2010 at 5:49
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
238Feature: Add support for InstanceCreatorEx interface with createInstance(JsonElement json, Type typeOfT)Google Code ExporterGoogleCodeExporter03/19/15, 06:27:06 PM"```
json data can contain information about which exact class should be created,
but original InstanceCreator can't use this information.

Example: 
I have abstract Command class and Command1, Command2, etc subclasses.
My json data contains ""type"":""Command1"" pair.

So we can overcome ""Collections Limitations"" and can deserialize 

Collection[? extends Command] realCommands = gson.fromJson(json, 
collectionTypeCommand);
```

Original issue reported on code.google.com by `rybin.andrey` on 20 Sep 2010 at 12:38
- Merged into: #231""```
This issues isn't about collections, it's about being able to deserialize a 
derived type, when only the base type is known:

IMyInterface deserialized = gson.fromJson(json, IMyInterface.class);

It would seem that the JSON itself would need some type identifier to know 
which derived type to use.
```

Original comment by `MarceliN...@gmail.com` on 5 Oct 2010 at 3:58
 =||= ```
In my case I have this identifier.
One field inside json contains ""type"" of this object.
And I want to use this ""type"" to create subclass of ""IMyInterface"".
```

Original comment by `rybin.andrey` on 5 Oct 2010 at 7:46
 =||= ```
Another example (as XStream does)

import java.io.*;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier;
import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
import com.thoughtworks.xstream.io.xml.XppReader;

public class Test{
    public static void main(String[] args) {
        String xml = ""<user>"" +

                        ""<name>Pavel</name>"" +

                        ""<sername>Samolisov</sername>"" +

                        ""<age>23</age>"" +

                        ""<rating>89.93</rating>"" +

                     ""</user>"";

       StringWriter buffer = new StringWriter();
        HierarchicalStreamReader reader = new XppReader(new StringReader(xml));

        HierarchicalStreamWriter writer = new JettisonMappedXmlDriver().createWriter(buffer);
        HierarchicalStreamCopier copier = new HierarchicalStreamCopier();
        copier.copy(reader, writer);
        System.out.println(buffer);
    }
}

Result: 
{""user"":{""name"":""Pavel"",""sername"":""Samolisov"",""age"":""23"",""rating"":""89.93""}}

So every object has ""root""
```

Original comment by `rybin.andrey` on 6 Oct 2010 at 8:38
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:57
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
239Escaper not public class -- can't extend JsonElementGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:07 PM"```
What steps will reproduce the problem?
1. Create class to extend JsonElement
2. implement toString(Appender,Escaper)
3. Cannot include Escaper, as it is not a public class

What is the expected output? What do you see instead?
I would expect to be able to include Escaper and implement the toString(...) 
abstract method, but since Escaper is package scope, I cannot.

What version of the product are you using? On what operating system?
OSX 10.6.4

Please provide any additional information below.

I would like to be able to extend JsonElement to provide a new json element 
type. The use case I'm working with is that I have a JSON block generated 
elsewhere in our application that I would like to just 'use' in json output 
created near the UI layer of the application. To avoid deserializing & 
reserializing the JSON block I already have, I would like to create a new 
JsonElement that can just ""hand back"" this pre-generated block of JSON. I was 
going to extend JsonElement to create such a class, but cannot, since 
toString(...) requires Escaper, and that is a package level class, instead of 
public.
```

Original issue reported on code.google.com by `jbros...@gmail.com` on 21 Sep 2010 at 3:58""```
Can you address this with the streaming API?
http://sites.google.com/site/gson/streaming
```

Original comment by `limpbizkit` on 21 Mar 2011 at 9:20
- Changed state: **WontFix**
 =||= ```
Following is my similar case which I need to do by implementing JsonElement and 
couldn't figure out how to do with streaming API. Any idea please?

Gson gson = new GsonBuilder()
  .registerTypeAdapter(MyRawJson.class, new MyRawJsonSerializer())
  .create();

interface MyRawJson {
  String getJson();
}

class MyRawJsonSerializer implements JsonSerializer<RawJson> {
  @Override
  public JsonElement serialize(final MyRawJson src, Type type, JsonSerializationContext ctx) {
    return new JsonElement() {
      @Override
      protected void toString(Appendable sb, Escaper escaper) throws IOException {
        sb.append(src.getJson());
      }
    };
  }
}
```

Original comment by `ali.sak...@gmail.com` on 15 Jul 2011 at 10:30
 =||= ```
You're close. Use JsonParser to convert your JSON string to a JSON element, and 
then return that in your serialize() method.
```

Original comment by `limpbizkit` on 17 Jul 2011 at 4:44
 =||= ```
How to do this in the current gson version? I see in 2.2.2 the escaper class is 
gone and instead you use the JsonWriter.. 

I'm trying to extend JsonElement  to have an implementation that avoids 
escaping a string which is already escaped (performance wise, not going through 
each and every character).
```

Original comment by `anmolsha...@gmail.com` on 18 Mar 2013 at 5:44
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
240Provide a way to deserialize a JsonElement into an ObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:09 PM"```
See discussion at:

http://groups.google.com/group/google-gson/browse_thread/thread/cc836a1b93b92428
```

Original issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:40""```
I believe the solution in the thread is to use new JsonParser().parse().
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:34
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
241Gson support for parameterized type hierarchyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:09 PM"```
http://groups.google.com/group/google-gson/browse_thread/thread/28ed956399ed0e2e

The above link provides code to derive a test for the bug.
```

Original issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:48
- Merged into: #168""Original comment by `limpbizkit` on 3 Nov 2010 at 3:16
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
242Gson support for classes parameterized with enumsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:10 PM"```
http://groups.google.com/group/google-gson/browse_thread/thread/2d490f16c0b3f639

The link above provides a reproducible test case as well.
```

Original issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:53""```
I've investigated this. Everything works if GSON has the type information that 
it needs. For example, if it is deserializing into the enum-typed field, it 
finds it and then finds the type adapter.

But if it has to use the runtime type, it doesn't find the type adapter. And so 
it doesn't use the custom serialization.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:53
- Changed state: **Started**
 =||= ```
This is related to issue 164.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 4:03
 =||= Original comment by `limpbizkit` on 3 Nov 2010 at 4:18
- Added labels: **Milestone-Release1.7**
 =||= ```
Test written in r769 shows that this is no longer an issue.
```

Original comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 7:21
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
243Json ConversionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:11 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `sivasubb...@gmail.com` on 28 Sep 2010 at 1:40""```
[deleted comment]
```
 =||= Original comment by `limpbizkit` on 6 Oct 2010 at 5:40
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
244Failure to serialize enums with method definitions.Google Code ExporterGoogleCodeExporter03/19/15, 06:27:12 PM"```
I've attached a JUnit test file that shows the issue. I've confirmed that the 
following patch fixes this.

Existing method in Gson.java:

  public String toJson(Object src) {
    if (src == null) {
      return serializeNulls ? NULL_STRING : """";
    }
    return toJson(src, src.getClass());
  }

Patched version of above method:

  public String toJson(Object src) {
    if (src == null) {
      return serializeNulls ? NULL_STRING : """";
    }

    Type typeOfSrc;
    if (src instanceof Enum) {
      typeOfSrc = ((Enum) src).getDeclaringClass();
    } else {
      typeOfSrc = src.getClass();
    }

    return toJson(src, typeOfSrc);
  }
```

Original issue reported on code.google.com by `MarceliN...@gmail.com` on 29 Sep 2010 at 10:20

Attachments:
- [EnumTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-244/comment-0/EnumTest.java)""```
Already fixed in SVN.
```

Original comment by `limpbizkit` on 3 Oct 2010 at 6:41
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
245Cannot convert Object to Json with complex datastructureGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:13 PM"```
What steps will reproduce the problem?
public class JSonNode {
    private String label;
    private String identifier;
    private List<Map<String, Object>> items = new ArrayList<Map<String, Object>>();
}
I have remove get set methods for simplicity.

public static void main(String [] args  ) {
        JSonNode node= new JSonNode();
        Gson g = new Gson();
        node.setIdentifier(""name"");
        node.setLabel(""name"");
        Map<String, Object> values = new HashMap<String, Object>();

        values.put(""name"", ""Africa"");
        values.put(""type"", ""continent"");


        List<JSonNode> children = new ArrayList<JSonNode>();
        JSonNode child1 = new JSonNode();
        Map<String, Object> values1 = new HashMap<String, Object>();
        values1.put(""name"", ""Egypt"");
        values1.put(""type"", ""country"");
        child1.getItems().add(values1);

        JSonNode child2 = new JSonNode();
        values1 = new HashMap<String, Object>();
        values1.put(""name"", ""Kenya"");
        values1.put(""type"", ""country"");
        child2.getItems().add(values1);

        JSonNode child3 = new JSonNode();
        values1 = new HashMap<String, Object>();
        values1.put(""name"", ""Sudan"");
        values1.put(""type"", ""country"");
        child3.getItems().add(values1);

        children.add(child1);
        children.add(child2);
        children.add(child3);

        values.put(""children"", children);

        node.getItems().add(values);

        System.out.println(g.toJson(node));

    }


What is the expected output? What do you see instead?
Expected O/P :
{""label"":""name"",""identifier"":""name"",""items"":[{""name"":""Africa"",""children"":{""name""
:""Africa"",""children"":[{""items"":[{""name"":""Egypt"",""type"":""country""}]},{""items"":[{""
name"":""Kenya"",""type"":""country""}]},{""items"":[{""name"":""Sudan"",""type"":""country""}]}]
,""type"":""continent""},""type"":""continent""}]}
Acutal O/P :
{""label"":""name"",""identifier"":""name"",""items"":[{""name"":""Africa"",""children"":{},""typ
e"":""continent""}]}



What version of the product are you using? On what operating system?
Gson 1.5, Windows, with JDK 1.5

Please provide any additional information below.

```

Original issue reported on code.google.com by `nis...@gmail.com` on 30 Sep 2010 at 10:56
- Merged into: #205""```
You'll have success by replacing 'Object' in your map with the actual type of 
the value.
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:53
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
246Document thrown exceptionsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:14 PM"```
What steps will reproduce the problem?
Look in the javadoc for gson.toJson(Object src, Appendable writer) or any of 
the methods serializing to a writer.

What is the expected output? What do you see instead?
I would like to know what exception to expect if there is any problem writing 
to the writer.

There is no such information currently.

What version of the product are you using? On what operating system?
source code from trunk.

Please provide any additional information below.
The methods will wrap any IOException in a very generic RuntimeException. IMHO 
it would be better to create a new exception for this problem; 
JsonSerializationException, maybe. But in any case, the javadoc should specify 
what to expect.
```

Original issue reported on code.google.com by `albin.th...@gmail.com` on 4 Oct 2010 at 1:53""```
We added two new Exceptions in Gson 1.6: JsonIOException and 
JsonSyntaxException. Both of these are subclasses of JsonParseException. If you 
have suggestions on improving this design please let us know as soon as 
possible before we release Gson 1.6 publicly.
```

Original comment by `inder123` on 3 Nov 2010 at 12:21
- Changed state: **Fixed**
 =||= ```
I think that sounds great. That's exactly what I was looking for.

Two things, though:

1. There are still two methods that need to be changed:
public void toJson(JsonElement jsonElement, Appendable writer)
public void toJson(Object src, Appendable writer)

2. I have no problems with using unchecked exceptions, but there must be a way 
for the user of the API to know which exceptions can be thrown. Either add them 
to the javadoc for the methods or to the method signature, i.e.:

public void toJson(JsonElement jsonElement, Appendable writer) throws 
JsonIOException

or both. :-)

Thanks for a great API!
```

Original comment by `albin.th...@gmail.com` on 3 Nov 2010 at 6:56
 =||= ```
Thanks for the suggestion. r642 declares the exceptions that can be thrown by a 
method.
```

Original comment by `inder123` on 3 Nov 2010 at 7:47
 =||= ```
Excellent!

Great work!
```

Original comment by `albin.th...@gmail.com` on 3 Nov 2010 at 10:20
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
247Gson should release final fields reverting setAccessible to its earlier valueGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:16 PM"```
Chapter 9 of JSR 133 (Java Memory Model and Thread Specification) 
http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf has some semantics 
regarding potential implication on compiler optimizations when setAccessible is 
used. Figure out what is the right thing to do after Gson has done its job on 
an object instance. We should consider using setAcessible to false for the 
object.
```

Original issue reported on code.google.com by `inder123` on 5 Oct 2010 at 12:26""```
I don't think setting setAccessible() to false is necessary. Each type you get 
the fields of a class, you get new Field objects. Field.setAccessible() doesn't 
impact any happens-before relationships.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 3:11
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
248Avoid compiler warnings when deserializing to a parameterized typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:16 PM"```
Foo<Bar> foo = gson.fromJson(json, Foo.class);

currently produces compiler warning for unchecked conversion and needs 
@SuppressWarnings(""unchecked"")

Explore revising gson.fromJson(String json, Class<? super T> classOfT) to get 
rid of this warning.
```

Original issue reported on code.google.com by `inder123` on 5 Oct 2010 at 1:53""```
There's nothing we can do here. The type of List.class is Class<List>, not the 
type we really want. The only typesafe option we have is to add an overload 
that accepts a TypeToken, and we've already decided not to go that route.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:19
- Changed state: **WontFix**
 =||= ```
There's nothing we can do here. The type of List.class is Class<List>, not the 
type we really want. The only typesafe option we have is to add an overload 
that accepts a TypeToken, and we've already decided not to go that route.
```

Original comment by `limpbizkit` on 3 Nov 2010 at 3:19
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
249java.lang.IllegalArgumentException on toJson() for: new Object[] { new Object() }Google Code ExporterGoogleCodeExporter03/19/15, 06:27:17 PM"```
What steps will reproduce the problem?
Run the attached source code.

What is the expected output? What do you see instead?
Expected legal json.
Throws exception instead.

Also see example number two where expected output is [] yet it output's [null]

What version of the product are you using? On what operating system?
1.5

Please provide any additional information below.
Ubuntu 64bit, Sun Java 1.6 (Don't speak the O word!).
```

Original issue reported on code.google.com by `hq4ever` on 13 Oct 2010 at 7:35

Attachments:
- [Main.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-249/comment-0/Main.java)""```
Added tests in r637

                // Works, but prints ""null"" (not expected, expected: ""[]"")
                System.out.println(new Gson().toJson(new Object[] { null }));

Gson indeed prints the correct answer of [null]. new Object[]{null} is not a 
null array. It is an array containing a single object of value null. Since 
arrays are ordered, nulls must always be printed.


                // java.lang.IllegalArgumentException
                System.out.println(new Gson().toJson(new Object[] { new Object() }));

Gson has no way to convert the Object into anything meaningful and hence you 
get the exception. 
```

Original comment by `inder123` on 3 Nov 2010 at 12:18
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
250API documentation - JsonStreamParserGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:18 PM"```
What steps will reproduce the problem?
1.Opening up Gson API and selecting JsonStreamParser in firefox


What is the expected output? What do you see instead?
A formatted HTML page and instead i see the inner workings of the page




```

Original issue reported on code.google.com by `markhop...@gmail.com` on 14 Oct 2010 at 11:57""```
I forgot to mention that this is in relation to the online version google host, 
not the seperate documents supplied with the GSON framework
```

Original comment by `markhop...@gmail.com` on 14 Oct 2010 at 11:59
 =||= Original comment by `limpbizkit` on 14 Oct 2010 at 3:47
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
251OSGi Bundle version for 1.5 still points to 1.4Google Code ExporterGoogleCodeExporter03/19/15, 06:27:19 PM"```
What steps will reproduce the problem?
1. Check META-INF/MANIFEST.MF

What is the expected output? What do you see instead?

I see:

Bundle-Version: 1.4
Export-Package: com.google.gson;version=1.4, com.google.gson.annotatio
 ns;version=1.4, com.google.gson.reflect;version=1.4

but expected would be 1.5

What version of the product are you using? On what operating system?

Apache Felix OSGi stack

Please provide any additional information below.

This way I cannot say if I upgraded from 1.4 to 1.5 or still stuck on 1.4
```

Original issue reported on code.google.com by `Krystian...@gmail.com` on 18 Oct 2010 at 11:17""```
Fixed in r621 to the upcoming 1.6 version.
```

Original comment by `in...@google.com` on 1 Nov 2010 at 10:14
 =||= Original comment by `inder123` on 1 Nov 2010 at 10:15
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
252Supply a public accessor for FieldAttributes.parentClassGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:20 PM"```
What steps will reproduce the problem?
1. try to implement an ExclusionStrategy to exclude specific fields of specific 
classes

What is the expected output? What do you see instead?
It simply isn't possible

What version of the product are you using? On what operating system?
1.5, any

Please provide any additional information below.

```

Original issue reported on code.google.com by `robby...@gmail.com` on 18 Oct 2010 at 11:26""```
Done in r622
```

Original comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:47
- Changed state: **Fixed**
 =||= ```
I should have mentioned that this is part of the 1.6 release that can be 
downloaded from the project downloads page.
```

Original comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:48
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
253Cannot parse {' ':''}Google Code ExporterGoogleCodeExporter03/19/15, 06:27:21 PM"```
What steps will reproduce the problem?
1. new JsonParser().parse(new StringReader(""{' ':''}""));

What is the expected output? What do you see instead?
Either return a valid object, or throw a JsonParseException.  Instead I get a 
precondition failure in the javacc-generated code.

What version of the product are you using? On what operating system?
Head, as of 10/10/18.  On Ubuntu Lucid.

```

Original issue reported on code.google.com by `d...@google.com` on 19 Oct 2010 at 1:22""```
Broken in 1.5, but already fixed in SVN. ""Head"" is disingenuous.
```

Original comment by `limpbizkit` on 19 Oct 2010 at 3:56
- Changed state: **Fixed**
 =||= ```
By head, I meant that I ran svn checkout 
http://google-gson.googlecode.com/svn/trunk/ google-gson-read-only yesterday, 
and the problem was there.  It seems to be current to r602.
How do I get the ""fixed"" version?  Is there an issue tracked for the fix?
```

Original comment by `d...@google.com` on 19 Oct 2010 at 7:08
 =||= ```
[deleted comment]
```
 =||= ```
[deleted comment]
```
 =||= ```
The bug is fixed in head. Did you rebuild?

mkdir issue253
cd issue253/
svn checkout http://google-gson.googlecode.com/svn/trunk/ google-gson-read-only 
cd google-gson-read-only/gson/
mvn
vi Issue253.java
  import com.google.gson.JsonParser;
  import java.io.StringReader;
  public class Issue253  {
    public static void main(String[] args) {
      System.out.println(new JsonParser().parse(new StringReader(""{' ':''}"")));
    }
  }
javac -cp target/classes/ Issue253.java
java -cp target/classes/:. Issue253

(Comment 3 was edited to add a mvn command)
```

Original comment by `limpbizkit` on 20 Oct 2010 at 1:39
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
254patch for GsonBuilder.addTypeAdaptersForDate() to register java.sql.Date handlerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:22 PM"```
The serialized format of java.sql.Date is forced to ""MMM d, yyyy"".
Please consider the attached patch wherein DefaultJavaSQLDateTypeAdapter is 
expanded to behave like DefaultDateTypeAdapter.  
GsonBuilder.addTypeAdaptersForDate() registers a default pattern string or 
style for java.sql.Date.  Consequently, GsonBuilder.setDateFormat() creates the 
desired date formatting for java.util.Date and java.sql.Date.

This seemed like a reasonable enhancement considering the explicit 
java.sql.Date support added in issue #134 (r513).
```

Original issue reported on code.google.com by `dvs...@gmail.com` on 22 Oct 2010 at 3:39

Attachments:
- [gson GsonBuilder addTypeAdaptersForDate.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-254/comment-0/gson GsonBuilder addTypeAdaptersForDate.patch)""```
If we fixed issue 164, the default date handlers would catch SQL dates 
automatically.
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:42
- Added labels: **Type-Enhancement**, **Milestone-Undefined**
- Removed labels: **Type-Defect**
 =||= ```
Fixed by r762.
```

Original comment by `limpbizkit` on 29 Mar 2011 at 9:53
 =||= Original comment by `limpbizkit` on 29 Mar 2011 at 9:53
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
256GSON should permit the empty string as a property name in a mapGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:30 PM"```
I have recently upgraded from GSON 1.3 to GSON 1.4 and now I'm getting an 
exception with code that worked correct before. I also tested GSON 1.5 and it 
behaves the same as 1.4, throwing the exception.
Below is the stack trace:

Caused by: java.lang.IllegalArgumentException: condition failed: false
        at com.google.gson.Preconditions.checkArgument(Preconditions.java:39)
        at com.google.gson.JsonObject.add(JsonObject.java:55)
        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:519)
        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:498)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)
        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:205)
        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
        at com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializationVisitor.java:148)
        at com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVisitor.java:126)
        at com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisitor.java:113)
        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:49)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:452)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:435)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)
        at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:161)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)
        at com.google.gson.Gson.toJsonTree(Gson.java:230)
        at com.google.gson.Gson.toJson(Gson.java:315)
        at com.google.gson.Gson.toJson(Gson.java:270)
        at com.google.gson.Gson.toJson(Gson.java:250)


Happens when I call gson.toJson() passing a list of objects. If it is not 
obvious what changed in Preconditions.checkArgument(Preconditions.java:39) 
between versions 1.3 and 1.4 I can submit the actual object that is causing 
this exception.
```

Original issue reported on code.google.com by `kosta.kr...@gmail.com` on 26 Oct 2010 at 11:27
- Merged into: #227""```
Ok, I have done some further investigation and found out the cause.

Basically, what causes the exception is a Map<String, String> that contains an 
empty string as a key. Adding a space does nothing either, I have to enter a 
non-empty value in order to avoid it.

Due to the fact that this used to work in 1.3, I believe it is a regression 
bug, unless this has been outlined elsewhere.
```

Original comment by `kosta.kr...@gmail.com` on 26 Oct 2010 at 1:08
 =||= Original comment by `limpbizkit` on 31 Oct 2010 at 2:34
- Changed title: **GSON should permit the empty string as a property name in a map**
 =||= ```
Fixed in subversion.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:38
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
257Cannot toJson custom Class, that has got a parameterized memberGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:31 PM"```
What steps will reproduce the problem?
1.Create following class:

public abstract class RequestBuilder<TParameter, TResponse extends 
IJsonResponse>
{
    private void WriteRequestContent(Object SendObject) throws Exception
    {
        Gson serializer = new Gson();

        String data = null;

        if(ConnectRequest.class.isInstance(SendObject)) {
            data = serializer.toJson((ConnectRequest)SendObject);
        } else { ... }


        this.myWebRequest.setRequestProperty(""Content-Length"", data.length()+"""");
        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());
        wr.write(data);
        wr.flush();
        wr.close();
    }

    public class ConnectRequest
    {
        // Fields
        public ConnectHeader header;
        public String method;
        public TParameter parameters;

        // Methods
        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)
        {
            this.header = myHeader;
            this.parameters = myParameter;
            this.method = myMethod;
        }
    }
}
2.
Execute  ;)
3.
Error occurs

What is the expected output? What do you see instead?
Just to convert it to a json-string, instead i got ""Expecting parameterized 
type, got class Base.RequestBuilder$ConnectRequest.""

What version of the product are you using? On what operating system?
Gson 1.5;


What to do? :(
```

Original issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12""```
Issue 258 has been merged into this issue.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:30
 =||= ```
Your core problem is that you're trying to operate on type parameters whose 
actual types has not been specified. If you call the overload of toJson() that 
takes a type object, you might have more success.

See the TypeToken docs for an example of how to obtain the proper parameterized 
type:
  http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:33
- Changed state: **Invalid**
 =||= ```
Issue 259 has been merged into this issue.
```

Original comment by `limpbizkit` on 31 Oct 2010 at 2:40
 =||= Please remove the Mailaddress of the user!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
258Cannot toJson custom Class, that has got a parameterized memberGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:32 PM"```
What steps will reproduce the problem?
1.Create following class:

public abstract class RequestBuilder<TParameter, TResponse extends 
IJsonResponse>
{
    private void WriteRequestContent(Object SendObject) throws Exception
    {
        Gson serializer = new Gson();

        String data = null;

        if(ConnectRequest.class.isInstance(SendObject)) {
            data = serializer.toJson((ConnectRequest)SendObject);
        } else { ... }


        this.myWebRequest.setRequestProperty(""Content-Length"", data.length()+"""");
        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());
        wr.write(data);
        wr.flush();
        wr.close();
    }

    public class ConnectRequest
    {
        // Fields
        public ConnectHeader header;
        public String method;
        public TParameter parameters;

        // Methods
        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)
        {
            this.header = myHeader;
            this.parameters = myParameter;
            this.method = myMethod;
        }
    }
}
2.
Execute  ;)
3.
Error occurs

What is the expected output? What do you see instead?
Just to convert it to a json-string, instead i got ""Expecting parameterized 
type, got class Base.RequestBuilder$ConnectRequest.""

What version of the product are you using? On what operating system?
Gson 1.5;


What to do? :(
```

Original issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12
- Merged into: #257""Original comment by `limpbizkit` on 31 Oct 2010 at 2:30
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
259Custom class having a parameterized member class.Google Code ExporterGoogleCodeExporter03/19/15, 06:27:33 PM"```
Custom class having a parameterized member class.

What steps will reproduce the problem?
1.Create following class:

public abstract class RequestBuilder<TParameter, TResponse extends 
IJsonResponse>
{
    private void WriteRequestContent(Object SendObject) throws Exception
    {
        Gson serializer = new Gson();

        String data = null;

        if(ConnectRequest.class.isInstance(SendObject)) {
            data = serializer.toJson((ConnectRequest)SendObject);
        } else { ... }


        this.myWebRequest.setRequestProperty(""Content-Length"", data.length()+"""");
        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());
        wr.write(data);
        wr.flush();
        wr.close();
    }

    public class ConnectRequest
    {
        // Fields
        public ConnectHeader header;
        public String method;
        public TParameter parameters;

        // Methods
        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)
        {
            this.header = myHeader;
            this.parameters = myParameter;
            this.method = myMethod;
        }
    }
}
2.
Execute  ;)
3.
Error occurs

What is the expected output? What do you see instead?
Just to convert it to a json-string, instead i got ""Expecting parameterized 
type, got class Base.RequestBuilder$ConnectRequest.""

What version of the product are you using? On what operating system?
Gson 1.5;


What to do? :(
```

Original issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:13
- Merged into: #257""Original comment by `limpbizkit` on 31 Oct 2010 at 2:40
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
260Make TypeAdapters publicGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:33 PM"```
We have a couple cases where we need to serialize an object as a List.  As a 
result, I'd like to extract the valueSet from a JsonObject and convert it to an 
ArrayList.  However, all default typeadapters are package-only access, which 
means I can't extend nor delegate.

Any chance we can see these converted to public classes? Any reason they're not?
```

Original issue reported on code.google.com by `aaron.st...@gmail.com` on 2 Nov 2010 at 6:28""```
We didn't want to increase the footprint of our API by doing so. Also, we 
didn't want to commit to the backward compatibility of these type adapters.

Any reason why you can't just copy over the source-code in your own type 
adapter. When you register a type adapter, it overrides any Gson defaults.
```

Original comment by `inder123` on 3 Nov 2010 at 12:04
- Changed state: **WontFix**
 =||= ```
I can't only because the builtin type adapters also reference package-only 
visibility classes.  As another example, I have a json response from a web 
service that returns an array if empty, otherwise a map.  I need to check for 
the type before serializing and set the target field to null, otherwise it 
throws an exception.

The builtin MapTypeAdapter, however, depends on package-local TypeInfoMap.  I'm 
worried that a rat's nest is in store for me if I try and move everything out.  
Preferable would be to be able to decorate MapTypeAdapter and call it a day.
```

Original comment by `aaron.st...@gmail.com` on 7 Dec 2010 at 7:49
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
261ObjectTypePair obj and type mismatch possible.Google Code ExporterGoogleCodeExporter03/19/15, 06:27:34 PM"```
What steps will reproduce the problem?
1. Put gson under load with mutliple threads.
2. cause the setObject method in ObjectTypePair to be called.
3. note that the type does not get updated, leading to the ObjectTypePair 
having the wrong type for an object.

What is the expected output? What do you see instead?

Any call to setObject should update the type to the type of the current object 
using a getClass on the object.

What version of the product are you using? On what operating system?
JRE 1.5 and 1.6 on Windows/Mac/linux/IBM JVM.

```

Original issue reported on code.google.com by `rojo...@gmail.com` on 3 Nov 2010 at 10:35""```
There is a race condition that occurs around this that will cause gson to fail 
to put JSON data into Java classes when the ObjectTypePair is out of sync.
```

Original comment by `rojo...@gmail.com` on 3 Nov 2010 at 10:37
 =||= ```
I'm having trouble finding the place where an ObjectTypePair instance is 
visible to multiple threads. Can you tell me what public API you're using to 
get ObjectTypePair.setObject() to be called?
```

Original comment by `limpbizkit` on 4 Nov 2010 at 10:33
 =||= ```
I don't have a deep understanding of the code, and the change does seem to be a 
side effect - but in ObjectNavigator.java in the accept method there is a call 
to objTypePair.setObject(objectToVisit);

The original type was an object, not the type of the objectToVisit.

This lack of type causes the deserialisation to fail.

The root cause seems to be earlier in the system, but once gson gets into the 
state where this mismatch happens it continues to be in the bad state.

In our system we have forked gson in order to ensure that it works correctly.
```

Original comment by `rojo...@gmail.com` on 9 Nov 2010 at 3:07
 =||= ```
Despite significant effort, I can't reproduce this in the current GSON tree. 
I'm guessing this has already been fixed.
```

Original comment by `limpbizkit` on 24 Jan 2011 at 10:36
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
262Binding should optionally fail on an unrecognized property nameGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:38 PM"```
What steps will reproduce the problem?
1. Create simple Bean.
2. Generate Json from exited Bean.
3. Modify in the generated Json field name
4. Build (fromJson) Bean from modified Json.

What is the expected output? What do you see instead?
Should be JsonParseException instead of full ignore.

What version of the product are you using? On what operating system?
Gson 1.5

Please provide any additional information below.
Look at attached example.

```

Original issue reported on code.google.com by `mst...@gmail.com` on 8 Nov 2010 at 4:23
- Merged into: #188

Attachments:
- [GTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-262/comment-0/GTest.java)""Original comment by `limpbizkit` on 30 Dec 2011 at 6:23
- Changed title: **Binding should optionally fail on an unrecognized property name**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
Issue 188 can do this, and it's also more general.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:38
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
263tomGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:39 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `Brentley...@gmail.com` on 12 Nov 2010 at 7:23""```
Sorry, a type, close/delete this. thanks
```

Original comment by `Brentley...@gmail.com` on 12 Nov 2010 at 7:23
 =||= Original comment by `limpbizkit` on 12 Nov 2010 at 9:57
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
264Can't parse backslashGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:40 PM"```
What steps will reproduce the problem?

String str = ""{message:\"":-\\\""}"";
Map<String,String> map = gson.fromJson(str,new TypeToken<Map<String, String>>() 
{}.getType());


What is the expected output? What do you see instead?

I expect Map<String,String> (size = 1): key = ""message"", value = "":-\""

Instead:
""Exception in thread ""main"" com.google.gson.JsonParseException: Failed parsing 
JSON source: java.io.StringReader@911f71 to Json
    at com.google.gson.JsonParser.parse(JsonParser.java:59)
    at com.google.gson.Gson.fromJson(Gson.java:443)
    at com.google.gson.Gson.fromJson(Gson.java:396)
    at json.Main.main(Main.java:22)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)
Caused by: com.google.gson.ParseException: Encountered "" ""\"""" ""\"" """" at line 1, 
column 10.
Was expecting one of:
    <DIGITS> ...
    ""null"" ...
    ""NaN"" ...
    ""Infinity"" ...
    <BOOLEAN> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    ""{"" ...
    ""["" ...
    ""-"" ...

    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)
    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)
    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)
    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)
    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)
    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)
    at com.google.gson.JsonParser.parse(JsonParser.java:54)
    ... 8 more
""

What version of the product are you using? On what operating system?

1.5, windows7 - 32 bit

Please provide any additional information below.

If I parse this string with additional two backslashes - it works, but there is 
:\\ in value..

```

Original issue reported on code.google.com by `Dmitry.T...@gmail.com` on 18 Nov 2010 at 11:18""```
Does it work with the latest code from SVN? That has a new parser.
```

Original comment by `limpbizkit` on 18 Nov 2010 at 4:21
 =||= ```
Fixed in GSON 1.6. See StringTest#testEscapedBackslashInStringDeserialization.
```

Original comment by `limpbizkit` on 24 Jan 2011 at 10:38
- Changed state: **Fixed**
 =||= Looks like this bug is still exist in Gson 2.7 would suggest following fix:

```
private StringBuilder removeExtraBackslashes(StringBuilder json, int startingIndex) {
        int first = json.indexOf(BACKSLASH, startingIndex);
        int second = json.indexOf(BACKSLASH, first+1);
        if (second != -1 && second == first+1) {
            json.deleteCharAt(second);
        } else {
            second = first+1;
        }
        int next = json.indexOf(BACKSLASH, second);
        if (next != -1) {
            removeExtraBackslashes(json, next);
        }
        return json;
}

```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
265Alternative API for deserializing a generic objectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:41 PM"```
I'm using the following code for deserializing a generic object like 
List<String>

The syntax becomes:
List<String> list = deserialize(json, List.class, String.class); 
Map<String, List<Integer>> map = deserialize(json, Map.class, String.class, 
List.class, Integer.class);

which is (arguably) cleaner compared to the TypeToken.




    public static <T> T deserialize(String string, Class<?> clazz, Class<?>... argsArr) {
        Type t = getType(clazz, new ArrayList<Class<?>>(Arrays.asList(argsArr)));
        return new Gson().fromJson(string, t);
    }

    private static Type getType(Class<?> clazz, List<Class<?>> args) {
        if (clazz.getTypeParameters().length == 0) {
            return clazz;
        }

        List<Type> types = new ArrayList<Type>();
        for (int n = 0; n < clazz.getTypeParameters().length; ++n) {
            types.add(getType(args.remove(0), args));
        }
        return new PT(clazz, types);
    }

    private static class PT implements ParameterizedType {

        private Class<?> type;
        private Type[] typeArgs;

        public PT(Class<?> type, List<Type> typeArgs) {
            this.type = type;
            this.typeArgs = typeArgs.toArray(new Type[0]);
        }

        @Override
        public Type[] getActualTypeArguments() {
            return typeArgs;
        }

        @Override
        public Type getOwnerType() {
            return type.getDeclaringClass();
        }

        @Override
        public Type getRawType() {
            return type;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null || obj.getClass() != PT.class) {
                return false;
            }
            PT other = (PT) obj;
            return type == other.type && Arrays.equals(typeArgs, other.typeArgs);
        }
    }
```

Original issue reported on code.google.com by `goo...@boast.nl` on 19 Nov 2010 at 10:16""```
Thanks for sharing your thoughts. It is an interesting approach, and works well 
for your List<String> example. On the other hand, it is not descriptive enough 
for your Map example. What if it was a Map<K1<K2<K3<K4>>>, V1<V2>>? How would 
you know where the key description ends and the value description starts? 

Gson API is better off leaving the type construction out of its scope. 
In Gson 1.7, we are borrowing Types class from Guice that lets you create 
arbitrarily complex parameterized types on the fly. Checkout the latest code or 
stay tuned for our public 1.7 release.
```

Original comment by `inder123` on 31 Jan 2011 at 11:31
- Changed state: **WontFix**
 =||= ```
Your Map example would work equally well. The function #getType() is recursive: 
it checks how many generic types a class expects and then walks this tree depth 
first. 

You would simply specify it in the same order like you define it: (Map, K1, K2, 
K3, K4, V1, V2). Where the key description ends is obtained from the actual 
class files (class.getTypeParameters().length). As long as nobody invents 
variable generics your safe :)

```

Original comment by `goo...@boast.nl` on 1 Feb 2011 at 10:56
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
266checksum failure in http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/Google Code ExporterGoogleCodeExporter03/19/15, 06:27:42 PM"```
While building code using maven and using 
http://google-gson.googlecode.com/svn/mavenrepo/, we are getting check sum 
failure on this file 
http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-
metadata.xml

The reason is check sum stored in this file 
5d94c0b19adc896ec3e3503f4216f3d4c86087ad from location 
http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-
metadata.xml.sha1  doesn't match up checksum created for the file in this 
location 
http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-
metadata.xml which is 1d715fb31af33a21d79b835cb630540e3a5d0b1c


expected checksum should be 1d715fb31af33a21d79b835cb630540e3a5d0b1c on this 
location 
http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-
metadata.xml.sha1


if you using nexus maven mirror it would be as simple update index on this 
folder should fix this problem
```

Original issue reported on code.google.com by `muruve...@gmail.com` on 22 Nov 2010 at 4:49""```
work around to this problem do checksum to warning on your maven build and it 
should work fine. But I would recommend these people fix this silly problem 
rather than working around the problem
```

Original comment by `muruve...@gmail.com` on 22 Nov 2010 at 4:58
 =||= ```
We have now deprecated our own Maven repository and activated sync of Gson to 
Maven Central. Please use Gson 1.7.1 from Maven Central and it would have the 
correct checksums.

http://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/
```

Original comment by `inder123` on 13 Apr 2011 at 11:31
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
267Please clear up what gson version is available from MavenGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:43 PM"```
After getting my nexus repo to proxu your maven repo (at 
http://google-gson.googlecode.com/svn/mavenrepo/) I can only find gson up to 
version 1.4. I cannot locate gson version 1.5 or 1.6.

Do I have the incorrect maven address?
```

Original issue reported on code.google.com by `cmdema...@gmail.com` on 22 Nov 2010 at 8:30""```
Gson is now synced to Maven Central repository so you do not need to refer to 
http://google-gson.googlecode.com/svn/mavenrepo/ to get the latest versions. 
Just add the Gson dependency in your project and you will be good. 
See: https://sites.google.com/site/gson/gson-user-guide/using-gson-with-maven2
```

Original comment by `inder123` on 13 Apr 2011 at 8:52
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
268Unparseable date exception when parsing SQL dates in 1.5Google Code ExporterGoogleCodeExporter03/19/15, 06:27:44 PM"```
What steps will reproduce the problem?

1. set date format as follows:

Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(""MMM dd, yyyy 
hh:mm:ss a"").create();

2. create a new java.sql.Date 
java.sql.Date sqlDate = new java.sql.Date(12345l);

3. create a class with a date field and create an instance of that class 
setting our date as a member

private static class MyDate {
    public Date date;
}

3. set the date in the class and serialize it to JSON:


public static void main(String[] args) throws ParseException {

    Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(""MMM dd, yyyy hh:mm:ss a"").create();

    java.sql.Date sqlDate = new java.sql.Date(12345l);

    MyDate d = new MyDate();
    d.date = sqlDate;

    String json = gson.toJson(d);
    System.out.println(json);
    gson.fromJson(json, MyDate.class);
}

private static class MyDate {
    public Date date;
}

What is the expected output? What do you see instead?

serialized MyDate {""date"":""Dec 31, 1969""}) does not have a time component in 
gson 1.5, however in gson 1.4 MyDate will be serialized as {""date"":""Dec 31, 
1969 07:00:12 PM""} 

Attempting to deserialize MyDate which was serialized with gson 1.5 results in 
the following exception, when using the same DateFormat:

Exception in thread ""main"" com.google.gson.JsonParseException: 
java.text.ParseException: Unparseable date: ""Dec 31, 1969""

The desired behavior would be to serialize the time component as zeros when it 
is specified in the DateFormat, but not available in the date object. The 
current behavior of 1.5 results in unparsable date exceptions when the date 
does not have a time component.

What version of the product are you using? On what operating system?

gson version 1.5, on Windows 7 and Red Hat Enterprise Linux Server release 5.3 



```

Original issue reported on code.google.com by `dmitri.sotnikov@gmail.com` on 23 Nov 2010 at 10:42""```
I'm seeing the same issue (I think)...out of curiosity, have you tried this 
with gson 1.6 yet?
```

Original comment by `snag...@yahoo.com` on 30 Nov 2010 at 10:26
 =||= ```
The same problem occurs in Gson 1.6, the main issue is that I think you should 
be able to deserialize the data with the same GsonBuilder that was used to 
serialize it, and that's currently not the case.
```

Original comment by `dmitri.sotnikov@gmail.com` on 30 Nov 2010 at 11:24
 =||= ```
The work around I'm using currently is to write custom serializers and 
deserializers for dates:

        private static final String dateFormat = ""MM/dd/yyyy hh:mm:ss a"";
    private static SimpleDateFormat format = new SimpleDateFormat(dateFormat);

    private static class DateTimeSerializer implements JsonSerializer<Date> {
        public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive(format.format(src));
        }
    }

    private static class DateTimeDeserializer implements JsonDeserializer<Date> {
        public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            try {
                return format.parse(json.getAsJsonPrimitive().getAsString());
            } catch (ParseException e) {
                throw new JsonParseException(e.getMessage());
            }
        }
    }
```

Original comment by `dmitri.sotnikov@gmail.com` on 30 Nov 2010 at 11:26
 =||= ```
Cool, thanks.  It turned out the problem I was having was that my object model 
had a java.sql.Timestamp (derived from the database), which is a subclass of 
Date and therefore skipped the custom serializer.  By registering all the 
subclasses (including java.sql.Date, etc.) with the same serializer, it works 
fine now.

BTW, is there no way to configure the GsonBuilder so that subclasses use the 
same custom serializer?  It seems like that would be desired, unless a more 
specific serializer applied.
```

Original comment by `snag...@yahoo.com` on 1 Dec 2010 at 5:26
 =||= ```
Fixed by r762.
```

Original comment by `limpbizkit` on 29 Mar 2011 at 9:53
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
270java.util.Date is serialized as null when referenced from [Container { Map<String,Object> }]Google Code ExporterGoogleCodeExporter03/19/15, 06:27:47 PM"```
What steps will reproduce the problem?
1. Open maven based eclipse project
2. Run as java application gson.bug.MessItUp

What is the expected output? What do you see instead?

Expected:

Print the JSON of values:
Print the JSON of values:
{""creationDate"":""Dec 6, 2010 2:52:26 PM""}
Print the JSON of A:
{""values"":{""creationDate"":""Dec 6, 2010 2:52:26 PM""}}

Actual: 
Print the JSON of values:
{""creationDate"":""Dec 6, 2010 2:52:26 PM""}
Print the JSON of A:
{""values"":{""creationDate"":{}}}

What version of the product are you using? On what operating system?
GSON 1.6, Ubuntu 64bit. Java 1.6.

```

Original issue reported on code.google.com by `hq4ever` on 6 Dec 2010 at 1:14

Attachments:
- [reproduce.tar.gz](https://storage.googleapis.com/google-code-attachments/google-gson/issue-270/comment-0/reproduce.tar.gz)""```
I'm attaching the patch for the issue.
I suggest to serialize map's values based on actual class (value.getClass()) 
rather then parameter type.
In this case standalone map and field (as in hq4ever's example) will be 
serialized in the same way.
Also this way we'll have more transparent way of serialization subclasses 
inside the map.
Am I missing any use cases which will be broken?
```

Original comment by `kulik.st...@gmail.com` on 10 Jan 2011 at 10:42

Attachments:
- [Issue270.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-270/comment-1/Issue270.patch)
 =||= ```
This should work with Gson 1.7.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:18
 =||= ```
Fixed in GSON 2.0.
```

Original comment by `limpbizkit` on 2 Oct 2011 at 3:18
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
271cannot cleanly override enum deserializerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:48 PM"```
There's a constructor for Gson that accepts a list of serializers/deserializers 
for default types.  I can't seem to figure out a way to override Enum without 
copy/pasting the 900 line DefaultTypeAdapters class and changing it, as all of 
the default serializers are marked private in a package private class.  Any 
ideas on a cleaner way?
```

Original issue reported on code.google.com by `adrian.f...@gmail.com` on 6 Dec 2010 at 2:06""```
here's a way I've found:

open up the package (com.google.gson) and add the type hierarchy you want with 
the package private registerTypeHierarchyAdapter method.

package com.google.gson;

public class JcloudsGsonPackageAccessor {
   public static GsonBuilder registerTypeHierarchyAdapter(GsonBuilder builder, Class<?> baseType, Object typeAdapter) {
      return builder.registerTypeHierarchyAdapter(baseType, typeAdapter);
   }
}

...

      JcloudsGsonPackageAccessor.registerTypeHierarchyAdapter(builder, Enum.class, new MyEnumTypeAdapter());

```

Original comment by `adrian.f...@gmail.com` on 6 Dec 2010 at 2:19
 =||= ```
Fixed in r709
```

Original comment by `inder123` on 24 Jan 2011 at 10:21
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
272Multidimensional array support is now brokenGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:49 PM"```
What steps will reproduce the problem?

Run the below object through:

String[][] items = new String[][]{
            {""3m Co"", ""71.72"", ""0.02"", ""0.03"", ""4/2 12:00am"", ""Manufacturing""},
            {""Alcoa Inc"", ""29.01"", ""0.42"", ""1.47"", ""4/1 12:00am"", ""Manufacturing""}
        };

What is the expected output? What do you see instead?
[[""3m Co"",""71.72"",""0.02"",""0.03"",""4/2 12:00am"",""Manufacturing""],[""Alcoa 
Inc"",""29.01"",""0.42"",""1.47"",""4/1 12:00am"",""Manufacturing""]]

Instead get an empty object on client side... {}

What version of the product are you using? On what operating system?
Used to work in 1.3, now using 1.6 and it's broken (fixed the door broke the 
window :) ). On Linux (not sure makes a difference).

Please provide any additional information below.
none

```

Original issue reported on code.google.com by `VictorLe...@gmail.com` on 15 Dec 2010 at 9:03""Original comment by `inder123` on 24 Jan 2011 at 10:41
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
273Problem when deserializing Float but not with DoubleGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:50 PM"```
What steps will reproduce the problem?
{{{
package gson.floating.point;

import com.google.gson.Gson;

public class TestFloat {

    public static class FloatData{
        Float cantidad;

        protected FloatData(){}

        public Float getCantidad() {
            return cantidad;
        }
        public void setCantidad(Float cantidad) {
            this.cantidad = cantidad;
        }

    }
    public static class DoubleData{
        Double cantidad;

        protected DoubleData(){}

        public Double getCantidad() {
            return cantidad;
        }
        public void setCantidad(Double cantidad) {
            this.cantidad = cantidad;
        }

    }

    public static void main(String[] args) {
        String json=""{\""cantidad\"":13113715.22}"";
        DoubleData d=new Gson().fromJson(json, DoubleData.class);
        FloatData f=new Gson().fromJson(json, FloatData.class);
        //Prints 'Double value: 1.311371522E7'
        System.out.println(""Double value: ""+d.getCantidad());
        //Prints 'Float value: 1.3113715E7', decimal lost
        System.out.println(""Float value: ""+f.getCantidad());
        assert d.getCantidad().equals(13113715.22);
        assert f.getCantidad().equals(13113715.22);
    }

}
}}}
What is the expected output? Number with decimals 
What do you see instead? Number without decimals
What version of the product are you using?
Gson 1.4
On what operating system?
Ubuntu 10.10
```

Original issue reported on code.google.com by `cirovlad...@gmail.com` on 16 Dec 2010 at 9:59""```
Not a gson issue.
All numbers between 13113714.5 and 13113715.5 are represented as 1.3113715E7f.
(13113714.5 falls between 2^23 and 2^24, and float has only 23bit mantissa)
```

Original comment by `kulik.st...@gmail.com` on 7 Jan 2011 at 1:43
 =||= ```
Ok, Thanks for the correction.
I have troubles determining the range of float and the java documentation 
doesn't help me.
```

Original comment by `cirovlad...@gmail.com` on 7 Jan 2011 at 8:45
 =||= Original comment by `joel.leitch@gmail.com` on 15 Feb 2011 at 6:57
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
274ExclusionStrategy should provide context informationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:52 PM"```
What steps will reproduce the problem?

User class has a password field:

class User {

  String username;

  @Strategy(deserialize=true, serialize=false)
  String password;
}

What is the expected output? What do you see instead?

fromJson() should get password
toJson() should ignore password

but ExclusionStrategy.shouldSkipField() missing context information:

public boolean shouldSkipField(FieldAttributes attrs) {
    Strategy s = attrs.getAnnotation(Strategy.class);
    if (isSerializing() && s!=null && !s.serialize)
        return false;
    return true;
}

cannot determin isSerializing() in shouldSkipField() method.

What version of the product are you using? On what operating system?

Gson-1.6

Please provide any additional information below.

Maybe provides a Context argument?
```

Original issue reported on code.google.com by `askxuefeng@gmail.com` on 30 Dec 2010 at 2:09""```
Functionality added as part of r710.
```

Original comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:39
- Changed state: **Fixed**
- Added labels: **Milestone-Release1.7**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
275Problem version gsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:52 PM"```
I try to use GSON library in JDEVELOPER 10G and I get this error:

Error(5,24): cannot access class com.google.gson.Gson; 
class file has wrong version 49.0, should be 45.3 or 46.0 or 47.0 or 48.0

My JDEVELOPER VERSION IS 10.1.2.0.0 (BUILD 1811)
```

Original issue reported on code.google.com by `jesus....@gmail.com` on 7 Jan 2011 at 9:42""```
You may have JDeveloper set with jdk1.4.
Also your JDeveloper version is too old. You should consider moving to a newer 
version (at least 10.1.3 which is based on jdk5) 
```

Original comment by `kulik.st...@gmail.com` on 7 Jan 2011 at 11:59
 =||= ```
Problem to change jdk version in JDEVELOPER is that I will have to change 
version of my server. It will be a big problem.
Is there another option ?

Thanks.

Atte. JFAA


```

Original comment by `jesus....@gmail.com` on 10 Jan 2011 at 4:17
 =||= ```
Gson is built using a lot of Java 1.5 features (i.e. annotations, enums, type 
parameters, etc.). That said, I have heard of others cross compiling Gson to 
1.4 and had success doing so, but I have not tried this myself.

We do not plan to support pre-1.5 JDK in the near future.
```

Original comment by `joel.leitch@gmail.com` on 10 Jan 2011 at 10:25
- Changed state: **WontFix**
 =||= ```
Change Environment property variable in its global definition.
It will work fine.
I was experiencing the same problem.
```

Original comment by `lalit.ve...@gmail.com` on 22 Nov 2012 at 12:40
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
276Make GsonBuilde.registerTypeAdapter() method more concrete Google Code ExporterGoogleCodeExporter03/19/15, 06:27:54 PM"```
I'd like to suggest one enhancement.

As described in docs:
http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/G
sonBuilder.html#registerTypeAdapter(java.lang.reflect.Type,%20java.lang.Object)
method registerTypeAdapter receive second argument of type Object,
which is wired (at least for me), code didn't tells me what I should
pass as actual parameter so I should consider documentation first.

-------------
Here is my plan.
1. Declare abstract interface:
package com.google.gson;
public abstract interface TypeAdapter<T> {
  //emty body
  //Note: abstract interface can not be implemented directrly.
}

2. Inherit InstanceCreator, JsonSerializer, and a JsonDeserializer from
TypeAdapter, like this:
public interface InstanceCreator<T> extends TypeAdapter<T>
public interface JsonSerializer<T> extends TypeAdapter<T>
public interface JsonDeserializer <T> extends TypeAdapter<T>

3. Change registerTypeAdapter method signature to:
registerTypeAdapter(java.lang.reflect.Type,TypeAdapter<T>)
//note: something might be done to handle type T more precisely
//to check that TypeAdapter type corresponds to first agrument.
//But I'm not sure.

4. As result it will be clear for gson llibrary users - what should
be passed as typaAdapter.




```

Original issue reported on code.google.com by `dmitry.s...@gmail.com` on 13 Jan 2011 at 4:56""```
We have methods like that (though marked private) registerSerializer, 
registerDeserializer, etc. 

It seems type-safe but with a false sense of security. Unfortunately, Java Type 
class is not parameterized, so it is possible for you to attach a 
TypeAdapter<T> with any type instead of the type of T.  We can address that by 
providing registerSerializer(Class<T>, JsonSerializer<T>) but that excludes the 
possibility of registering type adapters for parameterized types.  Providing 
both methods results in unnecessary API bloat. 

I think what we currently have is a reasonable solution but if you can think of 
a minimalist enhancement that improves type safety, let us know. 
```

Original comment by `inder123` on 19 Jan 2011 at 10:16
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
277Using GOSN in HTTP Servlet callGoogle Code ExporterGoogleCodeExporter03/19/15, 06:27:58 PM"```
What steps will reproduce the problem?
1. Create a java class named as Test with 3 attributes all are string
2. using gson convert it to String
3. sending that data to the requester

What is the expected output? What do you see instead?
{""mapperId"":""14"",""mapperName"":""REPO Live"",""deskId"":""12""}

""{\""mapperId\"":\""14\"",\""mapperName\"":\""REPO Live\"",\""deskId\"":\""12\""}""

What version of the product are you using? On what operating system?
gson-1.6.jar
Windows 7 ultimate N

Please provide any additional information below.

```

Original issue reported on code.google.com by `sathee.r...@gmail.com` on 13 Jan 2011 at 5:14

Attachments:
- [UserMarketViewMapper.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-277/comment-0/UserMarketViewMapper.java)""```
[deleted comment]
```
 =||= ```
Could you provide an executable test case? I suspect the problem is that you're 
double encoding your JSON.
```

Original comment by `limpbizkit` on 14 Jan 2011 at 3:03
 =||= ```
[deleted comment]
```
 =||= ```
yes, you are right.. i didn't noticed that..
```

Original comment by `sathee.r...@gmail.com` on 14 Jan 2011 at 12:03
 =||= Original comment by `limpbizkit` on 15 Jan 2011 at 8:10
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
278Support versioning of json files.Google Code ExporterGoogleCodeExporter03/19/15, 06:28:00 PM"```
The current approach of @Until and @Since doesn't work as it only deals with 
versioning from the perspective of the current code.  If I wrote out a json 
stream with version 1.0 code and version 2.0 code has that version as a 
different type, this will fail. 

A couple of parts need to change:

1) There needs to be some concept of 'type' (eg json:type) associated with each 
element.  This would also resolve the problem of deserializing polymorphic 
collections.  I have implemented this explicitly but it really should be built 
into the framework rather than having to register type adapters for each 
abstract super class.  I believe this issue is already in the queue, but I view 
it as a requirement for #2.

2) There needs to be a version id of the type that has been stored (eg 
json:version).  When the parser reads the data, it should be able to lookup the 
adapter per type/version pair that can correctly deserialize the json stream.


```

Original issue reported on code.google.com by `swall...@gmail.com` on 21 Jan 2011 at 4:54""```
Adding type and version information to JSON objects slightly defeats much of 
the motivation of JSON: high signal to noise ratio.

We may consider this but if you really need type safety and versioning you 
might be better off with a more complex wire protocol like protobuffers or 
thrift.
```

Original comment by `limpbizkit` on 22 Jan 2011 at 2:19
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= ```
I understand it's not for every use case.  My use case is JSON as a document 
storage format.  So as the code changes, the document schema will evolve and 
type and version information (where appropriate) is required to keep the latest 
code clean of old schema information.
```

Original comment by `swall...@gmail.com` on 24 Jan 2011 at 3:40
 =||= ```
There are security issues with carrying type information in the data, and 
trusting it on the receiving end. With Gson, we want to discourage such 
potential security holes. 

May be you should have an explicit field called type but use that to mean 
""type/version of the document"" instead of the actual Java type.
```

Original comment by `inder123` on 24 Jan 2011 at 10:25
 =||= ```
How about tagging the entity version outside of the JSON data?

For example, web services and API, the version is usually within the URL
For file systems, add the version on the file name (or as part of the directory 
structure)
For some database storing a blob (or clob), store the version within the same 
record as the data.
```

Original comment by `joel.leitch@gmail.com` on 26 Apr 2011 at 11:26
 =||= ```
I don't think we want to fix this in-framework. If you want to add a version 
property to your top-level object, you should be able to accomplish what you 
want.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:49
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
279Templated collections of collecctions do not serialize correctlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:01 PM"```
What steps will reproduce the problem?

See attached file. The program contains a class with a Map and a Map<String, 
Object>. If a value in the map is a List<String>, it does not serialize 
correctly. This is a problem only with the parametrized type Map<String, 
Object>. The non-parametrized type, Map, serializes correctly.

What is the expected output? What do you see instead?

Expected:
{""map"":{""string"":""strval"",""map"":{""key-1"":""value-1"",""key-2"":""value-2""},""list"":[""e
lement-1"",""element-2""]},""pMap"":{""string"":""strval"",""map"":{""key-1"":""value-1"",""key-
2"":""value-2""},""list"":[""element-1"",""element-2""]}}


Got:
{""map"":{""string"":""strval"",""map"":{""key-1"":""value-1"",""key-2"":""value-2""},""list"":[""e
lement-1"",""element-2""]},""pMap"":{""string"":""strval"",""map"":{},""list"":{}}}


What version of the product are you using? On what operating system?

Gson version 1.6, Mac OS X 10.6.5

Please provide any additional information below.
Related to Issue 205

FIX

Modify DefaultTypeAdapters.MapTypeAdapter to check if the generic type of the 
value type of the map is Object. If so, use the instance's type.

http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/
google/gson/DefaultTypeAdapters.java#649

Workaround:

Define an adapter for Objects:

    private static class ObjectTypeAdapter implements JsonSerializer<Object> {
        public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {

            if (src.getClass() != Object.class) {
                return context.serialize(src, src.getClass());
            }

            return new JsonObject();
        }
    }

Register this with the builder:
Gson gson2 = (new GsonBuilder()).registerTypeAdapter(Object.class, new 
ObjectTypeAdapter()).create();


```

Original issue reported on code.google.com by `anand.ke...@gmail.com` on 28 Jan 2011 at 6:38

Attachments:
- [GsonMapBug.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-279/comment-0/GsonMapBug.java)""```
I like the suggestion of using the runtime type if the map value type is 
Object. It's unfortunate that you can't specify the actual type on the map.
```

Original comment by `limpbizkit` on 21 Mar 2011 at 9:54
 =||= ```
I think this works with 1.7.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:55
 =||= ```
Verified that this is fixed in 1.7.
```

Original comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 5:20
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
280long type can't convert rightGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:05 PM"```
What steps will reproduce the problem?
just use java long data type.
the problem caused by the java long type is 64 bit,javascript long type is 53 
bit.So the data lost.

What is the expected output? What do you see instead?
suggest use string to convert long type.

What version of the product are you using? On what operating system?
newest version.

Please provide any additional information below.

```

Original issue reported on code.google.com by `zhangbo...@gmail.com` on 29 Jan 2011 at 2:08""```
see 
http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/L
ongSerializationPolicy.html
```

Original comment by `radio...@ya.ru` on 10 Feb 2011 at 12:41
 =||= ```
As stated above, this can be achieved by using the LongSerializationPolicy with 
the GsonBuilder. This feature has been available since 1.3 release, so you 
should be able to use this functionality now.
```

Original comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:42
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
281GSON default date serializer is locale-specificGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:06 PM"```
This has caused problems for Caliper, which was relying on the default date 
serializer:
http://code.google.com/p/caliper/issues/detail?id=113

Work-around the problem by registering a date type adapter like the following:

  private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {
    private final DateFormat dateFormat;

    private DateTypeAdapter() {
      dateFormat = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssz"", Locale.US);
      dateFormat.setTimeZone(TimeZone.getTimeZone(""UTC""));
    }

    @Override public synchronized JsonElement serialize(Date date, Type type,
        JsonSerializationContext jsonSerializationContext) {
      return new JsonPrimitive(dateFormat.format(date));
    }

    @Override public synchronized Date deserialize(JsonElement jsonElement, Type type,
        JsonDeserializationContext jsonDeserializationContext) {
      try {
        return dateFormat.parse(jsonElement.getAsString());
      } catch (ParseException e) {
        throw new JsonParseException(e);
      }
    }
  }

```

Original issue reported on code.google.com by `limpbizkit` on 30 Jan 2011 at 1:01""```
Fixed by r721.
```

Original comment by `limpbizkit` on 10 Feb 2011 at 1:07
- Changed state: **Fixed**
 =||= ```
It will be great if we can configure GsonBuilder to force used of ISO-8601 
format with UTC timezone, for serialization and deserialization.

Thanks
```

Original comment by `boillodm...@gmail.com` on 14 Jun 2011 at 10:03
 =||= ```
[deleted comment]
```
 =||= ```
private static class GmtDateTypeAdapter implements JsonSerializer<Date>, 
JsonDeserializer<Date> {
        private final DateFormat dateFormat;

        private GmtDateTypeAdapter() {
            dateFormat = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"", Locale.US);
            dateFormat.setTimeZone(TimeZone.getTimeZone(""UTC""));
        }

        @Override
        public synchronized JsonElement serialize(Date date, Type type,
                JsonSerializationContext jsonSerializationContext) {
            synchronized (dateFormat) {
                String dateFormatAsString = dateFormat.format(date);
                return new JsonPrimitive(dateFormatAsString);
            }
        }

        @Override
        public synchronized Date deserialize(JsonElement jsonElement, Type type,
                JsonDeserializationContext jsonDeserializationContext) {
            try {
                synchronized (dateFormat) {
                    return dateFormat.parse(jsonElement.getAsString());
                }
            } catch (ParseException e) {
                throw new JsonSyntaxException(jsonElement.getAsString(), e);
            }
        }
    }
```

Original comment by `boillodm...@gmail.com` on 14 Jun 2011 at 12:36
 =||= ```
+1 ! And it would be nice to be able to specify the DateFormat and not just 
only the SDF pattern on the GsonBuilder
```

Original comment by `lorber.s...@gmail.com` on 15 Mar 2013 at 2:46
 =||= ```
Which version of gson has this fix ?
```

Original comment by `misramay...@gmail.com` on 3 Jul 2014 at 9:48
 =||= still experiencing this issue in gson 2.3.1
 =||= This issue still exists in Gson 2.4
 =||= Is the intention that the UtcDateTypeAdapter introduced in 2.4 should be manually registered as a type adapter?
 =||= @code77se  Yes. Register UtcDateTypeAdapter manually.
 =||= Still an issue in gson 2.7

``` java
import com.google.gson.typeadapters.UtcDateTypeAdapter;
```

Error:

``` java
error: package com.google.gson.typeadapters does not exist
import com.google.gson.typeadapters.UtcDateTypeAdapter;
```
 =||= Worked as:

``` java
Gson gson = new GsonBuilder()
        .setPrettyPrinting()
        .setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSX"")
        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
        .create();
```
 =||= @Paxa 
this only adds hour difference. but for countries like India you will miss the minutes part.
Instead of X use Z to get the minutes part as well
```java 
Gson gson = new GsonBuilder()
        .setPrettyPrinting()
        .setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"")
        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
        .create();```
 =||= This will be slightly off topic still I hope you can help me. For my applications I get strings like `""2017-10-13T18:10+03:00""`, `""2017-10-13T14:15+02:00""`, etc. which have to be converted to a java.util.Date property **without** loosing time zone information. 

I'm using `new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ssX"").create()`
already which leads to correct date/time but converted to my time zone and the original time zone property of the Date being lost. 

How can I convert the String to Date while maintaining the time zone information?

Thanks! =||= In case anyone was wondering where `UtcDateTypeAdapter.java` ended up, it's part of `gson-extras`:

https://github.com/google/gson/blob/d9cc7bc60b492664fe9f328d1bab9f9ae873f4d4/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
282Unquoted strings in lenient modeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:07 PM"```
Since 677, GSON has not supported unquoted strings in lenient mode. It should, 
especially to be compatible with org.json.

http://code.google.com/p/google-gson/source/detail?r=677
```

Original issue reported on code.google.com by `jessewil...@google.com` on 31 Jan 2011 at 7:10""Original comment by `limpbizkit` on 31 Jan 2011 at 7:12

Attachments:
- [fix-unquoted-strings.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-282/comment-1/fix-unquoted-strings.patch)
 =||= ```
This issue was closed by revision r722.
```

Original comment by `limpbizkit` on 10 Feb 2011 at 1:36
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
283Please provide a source only tarball Google Code ExporterGoogleCodeExporter03/19/15, 06:28:08 PM"```
Please provide a source only tarball to ease building for downstreams (e.g. 
Fedora Linux in my case). 
See https://fisheye.codehaus.org/changelog/qdox/?cs=695#trunkZ002fqdox for 
example what qdox guys has done. All Apache Commons are doing it also
```

Original issue reported on code.google.com by `akurta...@gmail.com` on 2 Feb 2011 at 11:01""```
I believe you should be able to pull this out of the zip file provided in the 
downloads section. Within the zip is a gson-sources.jar file which is 
essentially the same as a tarball. Unzip the files from the jar and you have 
the source.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:28
 =||= ```
The -sources.jar does contain the source *java files but not build scripts 
(pom.xml). 

You could add something like this into pom to generate nice project releases:
  <build>
      <plugins>
 ...
 <plugin>
   <artifactId>maven-assembly-plugin</artifactId>
   <configuration>
     <descriptorRefs>
       <descriptorRef>project</descriptorRef>
     </descriptorRefs>
   </configuration>
   <executions>
     <execution>
       <id>make-assembly</id>
       <phase>package</phase>
       <goals>
         <goal>single</goal>
       </goals>
     </execution>
   </executions>
 </plugin>
 ...
      </plugins>
    </build>

```

Original comment by `sochotni...@gmail.com` on 13 Apr 2011 at 4:42
 =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:52
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
FWIW, there seems to be something terribly wrong with google-code's svn. There 
is now way to get the same sources for a release tag for two subsequent svn 
exports.

Example:


    $ cat google-gson.sh
    #!/bin/bash

    FIRST=""first""
    SECOND=""second""

    rm -rf $FIRST $SECOND

    mkdir $FIRST $SECOND

    pushd $FIRST
    svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 google-gson-2.2.2 > /dev/null
    tar -cJf google-gson-2.2.2.tar.xz google-gson-2.2.2
    first_sha=$(sha256sum google-gson-2.2.2.tar.xz | cut -d' ' -f1)
    popd

    pushd $SECOND
    svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 google-gson-2.2.2 > /dev/null
    tar -cJf google-gson-2.2.2.tar.xz google-gson-2.2.2
    second_sha=$(sha256sum google-gson-2.2.2.tar.xz | cut -d' ' -f1)
    popd

    if [ ""$first_sha"" != ""$second_sha"" ]; then
    echo -e ""FAIL!\n""
    echo ""SHA256SUM of 1: $first_sha""
    echo ""SHA256SUM of 2: $second_sha""
    else
    echo ""PASS!""
    fi

    $ bash google-gson.sh
    ~/first ~
    ~
    ~/second ~
    ~
    FAIL!

    SHA256SUM of 1: b6d0fea60c653b9b138848c613ea9c25e67e3a09d5b969c36bf11edf2ca4e687
    SHA256SUM of 2: 8d91396ff9baed486310f8b44c4312ba7d438438249abeed58abd493b193e6b4

Providing source tarballs would be much appreciated.


```

Original comment by `jerb...@gmail.com` on 20 Dec 2012 at 10:52
 =||= ```
As it turns out something like this works:

#!/bin/bash

FIRST=""first""
SECOND=""second""

first_sha_list=first_sha256.txt
second_sha_list=second_sha256.txt

rm -rf $FIRST $SECOND

mkdir $FIRST $SECOND

pushd $FIRST
svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 
google-gson-2.2.2 > /dev/null
OLD_IFS=""$IFS""
export IFS='
'
for i in $(find google-gson-2.2.2 -type f); do sha256sum $i; done > 
$first_sha_list
export IFS=""$OLD_IFS""
popd

pushd $SECOND
svn export http://google-gson.googlecode.com/svn/tags/gson-2.2.2@1218 
google-gson-2.2.2 > /dev/null
OLD_IFS=""$IFS""
export IFS='
'
for i in $(find google-gson-2.2.2 -type f); do sha256sum $i; done > 
$second_sha_list
export IFS=""$OLD_IFS""
popd

if ! diff -u $FIRST/$first_sha_list $SECOND/$second_sha_list; then
   echo -e ""FAIL!\n""
   diff -u $FIRST/$first_sha_list $SECOND/$second_sha_list;
else
   echo ""PASS!""
fi

In any case, source tarballs would be much easier to verify.
```

Original comment by `jerb...@gmail.com` on 20 Dec 2012 at 11:51
 =||= ```
We no longer provide downloads on the Gson page.
```

Original comment by `inder123` on 12 Nov 2014 at 11:43
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
284More caching of reflection objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:10 PM"```
Should yield a nice speedup. See also
http://groups.google.com/group/google-gson/browse_thread/thread/b20c0439a0d13029
/b9256f4ead94ca84?show_docid=b9256f4ead94ca84
```

Original issue reported on code.google.com by `limpbizkit` on 3 Feb 2011 at 7:27""```
Inder took care of this in Gson 1.7
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:24
- Changed state: **Fixed**
 =||= ```
Cool :)
I eventually opted to write stream based de-serializers for everything to 
eliminate reflection. 
Is the current approach similar to this in efficiency? How efficient are the 
caches?
What are some cool things to see in your codebase?

Thanks!
```

Original comment by `tra...@bricksimple.com` on 11 May 2011 at 3:09
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
285@Expose should be used with methodsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:12 PM"```
Can we use @Expose with method declaration like:

@Expose
public List<SomeObject> getFilteredList(){
...
}

and in result includes json of SomeObject list.
```

Original issue reported on code.google.com by `das...@gmail.com` on 3 Feb 2011 at 8:29
- Merged into: #232""Original comment by `limpbizkit` on 29 Dec 2011 at 5:52
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
286留个名Google Code ExporterGoogleCodeExporter03/19/15, 06:28:13 PM"```
哈哈，大家好~
```

Original issue reported on code.google.com by `epinszteinic` on 7 Feb 2011 at 9:46""Original comment by `limpbizkit` on 14 Feb 2011 at 10:18
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
287Support immutable objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:13 PM"```
GSON should use Unsafe to instantiate objects without invoking the default 
constructor. That would permit GSON to support immutable objects, similarly to 
how Java serialization does it.
```

Original issue reported on code.google.com by `jessewil...@google.com` on 7 Feb 2011 at 11:01""```
This may be an ugly syntax, but I'll propose it:

@DeserializationConstructor  
public MetaData(
  String shortDescription,
  String description,
  TaskType type) {
  ...
}

and

class X {
  @SerializedName(""changeSets"")
  private final List<Stuff> internalName;
  private final MetaData metadata;

  @DeserializationConstructor  
  public Task(
    @SerializedName(""changeSets"")
    List<Stuff> otherName,
    Metadata metadata) {
  }

```

Original comment by `konigsb...@google.com` on 7 Feb 2011 at 11:05
 =||= ```
Man I thought, ""I'll just knock out something ugly and they'll love me."" This 
is hard.

First I thought, the parameter names will suffice for mapping to JSON names. 
Nope - those don't exist. Then I thought, I can just use 
constructor.getParameterTypes. Nope -- that doesn't work either. Lots to do.
```

Original comment by `konigsb...@google.com` on 9 Feb 2011 at 5:50
 =||= ```
The ""Unsafe"" approach was implements in r723.
```

Original comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:28
- Changed state: **Fixed**
 =||= ```
The Unsafe approach doesn't work on google app engine.

Can we use the approach in Comment 1?  Ex. use an annotation to select a 
constructor, then SerializedName annotation to store the name mapping of the 
fields?

Ex. here's how Jackson do it:

 public class Point {
  private final int x, y;

  @JsonCreator
  public Point(@JsonProperty(""x"") int x, @JsonProperty(""y"") int y) {
   this.x = x;
   this.y = y;
  }
 }

Personally, I would like to be able to choose which annotations designate the 
name of fields and that select constructors.

I hope you can resurrect this issue, as jclouds code needs to work in google 
app engine, and the current approach doesn't work (and didn't *really* work 
anyway, as it cheats and can leave fields uninitialized or unvalidated as the 
intended immutable constructor is never used).
```

Original comment by `adrian.f...@gmail.com` on 29 May 2012 at 7:57
 =||= ```
Anything that requires a special compilation option is not a robust enough 
approach for inclusion in Gson.

The next best thing would be to provide a reusable class in extras package. We 
should consider writing writing a reusable TypeAdapterFactory that does this 
for all classes with DeserializationConstructor annotation.

```

Original comment by `inder123` on 30 May 2012 at 4:21
 =||= ```
+1 to Inder's suggestion. It wouldn't be too much effort to make constructor 
deserialization work with TypeAdapterFactory.
```

Original comment by `jessewil...@google.com` on 30 May 2012 at 4:23
 =||= ```
ok. I'll work on a patch today.  thanks!
```

Original comment by `adrian.f...@gmail.com` on 30 May 2012 at 4:30
 =||= ```
Here's a start complete w/unit tests for deserializing.  what's left to do is:
  * implement serializing
  * weave in where unsafe is currently used
  * (probably separate issue) provide means to supply alternate annotations
```

Original comment by `adrian.f...@gmail.com` on 30 May 2012 at 6:38

Attachments:
- [issue-287-immutablector.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-287/comment-8/issue-287-immutablector.patch)
 =||= ```
I'm going to hack on other stuff for the rest of the day.  if this looks 
alright, I can help complete it tomorrow.
```

Original comment by `adrian.f...@gmail.com` on 30 May 2012 at 6:44
 =||= ```
attached DeserializationConstructorAndReflectiveTypeAdapterFactory is a drop-in 
replacement for ReflectiveTypeAdapterFactory

Note that if you do replace, the following test fails:
CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubC
lassInstances

I hope this is a good start and this code can work its way into gson!
```

Original comment by `adrian.f...@gmail.com` on 1 Jun 2012 at 12:30

Attachments:
- [gson-patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-287/comment-10/gson-patch.txt)
 =||= ```
Any thoughts on how do deal with classes that you can't modify?  E.g. 
ImmutableList in Guava
```

Original comment by `gak@google.com` on 31 Aug 2012 at 5:41
 =||= ```
Er, how to
```

Original comment by `gak@google.com` on 31 Aug 2012 at 5:41
 =||= Any updates on this one? Jackson has been supporting @JsonCreator for constructors for ages, and it's also the only (clean) way to instantiate an object for deserialization without using reflection, especially in case of immutable objects.
I would expect this to be a very common use case scenario (J. Block, Effective Java item 15, ""Minimize Mutability""), but maybe I'm missing something?
 =||= @marcosalis  InstanceCreator let's you plug in custom instances.

Can you share an example of how JsonCreator is used to return an immutable object?
 =||= @inder123 as far as I know, `InstanceCreator` is only used for the object's instance creation, rather than setting the actual deserialized values to the object fields. This is only useful when you can't have a parameterless constructor in the model class. Field setting is still done via reflection (again, correct me if I'm wrong).

With Jackson you achieve it simply by doing this (just the first example I found):

``` java
public class Point {
  private final int x, y;

  @JsonCreator
  public Point(@JsonProperty(""x"") int x, @JsonProperty(""y"") int y) {
   this.x = x;
   this.y = y;
  }
 }
```
 =||= You can do the same with a TypeAdapter or a JsonDeserializer.

With JsonDeserializer you can use context.deserialize() to map a complex JsonObject to a field.
 =||= @inder123 sure thing, however using these two methods bear the significant disadvantage of having to completely override the standard deserialization process, and having to process every single field manually: this can be quite verbose (and time consuming) in case of complex models.

I still think that having the same kind of annotation processing would be extremely useful for developers. Should I create a separate improvement ticket or is it something that Gson is not planning on implementing anytime soon?
 =||= A pull request with a proposal on how to do this will be great. However, please note that we set a high bar for adding anything to the API, so don't be disheartened if we eventually reject that PR. Thanks.
 =||= Hi @marcosalis

Stumbled across this issue and saw your comment regarding annotation processors. If you're interested I have a solution to your problem within my gson 'extension'  library. 

Here is a link to the project:
https://github.com/lachlanm/gsonpath/

With regards to your wish for proper immutability support, I have recently added a feature which generates code based on interfaces. These interfaces are used to generate an immutable pojo and a proper type adapter which will use the constructor correctly. 

It would certainly be nice to have something like this in the base gson project, but if you're interested, you can use this library in conjunction with gson. 

Here is a link to the details of how it works:
https://github.com/lachlanm/gsonpath/blob/master/guides/interfaces.md
 =||= Hey @LachlanMcKee, apologies for the late reply. Thank you, I'll check your library out, it seems very interesting! I'd be curious to know, have you done any performance tests to compare deserialization speeds between the standard Gson pattern and your library?
 =||= Hi @marcosalis 

I have done a degree of performance tests (I will need to publish these sometime...). The main performance benefit is obtained from the initial deserialization. This is because Gson normally generates a type adapter when it is first required, and it is then cached. This is why they always recommend hanging on to your gson instance.

It very much depends on how complicated your JSON is as well. If it is a heavily complex structure that normally requires multiple type adapters, and you generate a simple type adapter with my library, there will be a very noticeable performance boost on the first deserialization.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
288Thread safety issue on IBM's JDKGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:18 PM"```
What steps will reproduce the problem?
1. Install the latest IBM JDK (version 6)
2. Run the attached program

What is the expected output? What do you see instead?
The program starts 20 threads; each thread deserializes a JSON string into an 
object and prints out a statement to the console 1000 times. There should then 
be 20,000 lines written to the console. This code works fine on Sun's JDK and 
Apple's JDK.

On IBM's JDK, you'll see a few of the deserializations work, and then the rest 
blow up with NPE's. Here is the stack trace:
java.lang.NullPointerException
    at java.util.LinkedHashMap.get(LinkedHashMap.java:324)
    at com.google.gson.LruCache.getElement(LruCache.java:50)
    at com.google.gson.FieldAttributes.getAnnotations(FieldAttributes.java:157)
    at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:145)
    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:44)
    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)
    at com.google.gson.Gson.fromJson(Gson.java:568)
    at com.google.gson.Gson.fromJson(Gson.java:515)
    at com.google.gson.Gson.fromJson(Gson.java:484)
    at com.google.gson.Gson.fromJson(Gson.java:434)
    at com.google.gson.Gson.fromJson(Gson.java:406)
    at com.test.GsonTest$Thready.run(GsonTest.java:32)

What version of the product are you using? On what operating system?
I've tried this with the Gson 1.5 and Gson 1.6 releases on Ubuntu 9.04 32-bit 
and Ubuntu 10.10 64-bit, and it fails both places. It works on Ubuntu and OS X 
with the Sun and Apple JDK's.

Please provide any additional information below.
Here is the reported java version information for the IBM JDK we're using:
$ java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxa6460sr9-20101125_01(SR9))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 
jvmxa6460sr9-20101124_69295 (JIT enabled, AOT enabled)
J9VM - 20101124_069295
JIT  - r9_20101028_17488ifx2
GC   - 20101027_AA)
JCL  - 20101119_01
```

Original issue reported on code.google.com by `tobini...@gmail.com` on 9 Feb 2011 at 8:33

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-288/comment-0/GsonTest.java)""```
A fix was submitted for this in r699.
```

Original comment by `joel.leitch@gmail.com` on 14 Feb 2011 at 10:31
- Changed state: **Fixed**
 =||= Hi, I'm new at github. How can I locate the r699?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
289Final keyword will not increase performance (significantly)Google Code ExporterGoogleCodeExporter03/19/15, 06:28:19 PM"```
In document:

http://developer.android.com/guide/practices/design/performance.html

in section:
Performance Myths

You can find that final fields, and classes do not increase performance.
You should try increase performance in other ways (e.g. by modifying algorithm)

Because GsonBuilder and Gson are final, currently I cannot registerTypeAdapter 
for tree type (I saw that this will be possible in next version). So currently 
I cannot use this project, because of this simple reason. Removing final 
keyword would help to use this project in non-standard cases.

You can find more:
http://www.ibm.com/developerworks/java/library/j-jtp1029.html
http://www.ibm.com/developerworks/java/library/j-jtp04223.html#N100A7
```

Original issue reported on code.google.com by `piotr.au...@gmail.com` on 11 Feb 2011 at 1:29""```
Just use GSON from subversion?
```

Original comment by `limpbizkit` on 11 Feb 2011 at 4:35
 =||= Original comment by `limpbizkit` on 14 Feb 2011 at 10:18
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
290SerializedName should allow the @ characterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:28:20 PM"```
I'm having trouble deserialising json of the following form:

{ ""@value"" : 3 }

As far as I can tell this is valid json, however gson's JsonFieldNameValidator 
appears to dislike the presence of the @ character.

I'm declaring the gson java class:

static class MyObj {
    @SerializedName(""@value"")
    int value;
}

I'd expect this to work, but instead I get an exception:

What is the expected output? What do you see instead?
xception in thread ""main"" java.lang.IllegalArgumentException: @value is not a 
valid JSON field name.
    at com.google.gson.JsonFieldNameValidator.validate(JsonFieldNameValidator.java:52)
    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:45)
    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)
    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:107)
    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:95)
    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:61)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:164)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)
    at com.google.gson.Gson.fromJson(Gson.java:568)
    at com.google.gson.Gson.fromJson(Gson.java:515)
    at com.google.gson.Gson.fromJson(Gson.java:484)
    at com.google.gson.Gson.fromJson(Gson.java:434)
    at com.google.gson.Gson.fromJson(Gson.java:406)


I'm using gson 1.6 on Ubuntu.



```

Original issue reported on code.google.com by `t.denley` on 17 Feb 2011 at 9:11""```
Similar to issue 121, where the hyphen character was added.
http://code.google.com/p/google-gson/issues/detail?id=121
```

Original comment by `t.denley` on 17 Feb 2011 at 9:13
 =||= ```
I have the same problem, so i have done a patch to pass this.

Warning, the issue 121 isn't about the @ caracter.
```

Original comment by `ybonnel` on 5 Apr 2011 at 6:40

Attachments:
- [patchIssue290.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-290/comment-2/patchIssue290.diff)
 =||= ```
Thanks for doing a patch. I think that allowing a bypass of field validation is 
a bit overkill though. I'd suggest the following patch might be a bit more 
targeted.
```

Original comment by `t.denley` on 5 Apr 2011 at 10:20

Attachments:
- [gson_issue290.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-290/comment-3/gson_issue290.diff)
 =||= ```
Are there any committers reviewing bugs at the moment?
Given the simplicity of this fix, is there any chance of getting it into 1.7?
```

Original comment by `t.denley` on 7 Apr 2011 at 6:21
 =||= ```
Unfortunately, with certain browsers this would cause problems while doing 
evals on JSON objects. That said, I'm not too worried about relaxing this 
constraint on Gson since we should be aligning more closely with the JSON spec 
rather than focusing on what certain clients can and cannot handle.
```

Original comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 4:42
- Changed state: **Accepted**
 =||= ```
I'm surprised that we do any name policy enforcement at all. JSON permits 
anything in a name; we should too. If that means we can't map a property to a 
field, then we have to fail at runtime.
```

Original comment by `limpbizkit` on 12 Apr 2011 at 4:48
 =||= ```
Fixed in r798.
```

Original comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 5:31
- Changed state: **Fixed**
 =||= ```
Thanks for the fix.

Are there instructions for doing a local snapshot build anywhere?

I was hoping to lift a suitable artefact from gson CI, but 
http://continuousbuild.dyndns.org:8080/job/gson/ seems rather sad at the moment.
```

Original comment by `t.denley` on 12 Apr 2011 at 7:13
 =||= ```
We are planning to push a new version of Gson today. Can you wait another day 
for the public release?
```

Original comment by `joel.leitch@gmail.com` on 12 Apr 2011 at 9:36
 =||= ```
Sure, no rush.

I was under the impression that this fix hadn't made it into 1.7 though. Am I 
mistaken?
```

Original comment by `t.denley` on 12 Apr 2011 at 10:09
 =||= ```
The 1.7 push went out earlier today that contains this fix. Enjoy!
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:16
 =||= ```
Fantastic! Thanks.
```

Original comment by `t.denley` on 13 Apr 2011 at 8:03
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
291Feature Request: RegExp object support.Google Code ExporterGoogleCodeExporter03/19/15, 06:29:23 PM"```
I have created a XML Schema to JSON converter that is using handwritten code to 
build the JSON representation.

I wanted to factor out that handwritten code and replace it with a library like 
GSON.

Unfortunatly I don't see a way to write a custom serializer that would allow me 
to convert a regular expression into a RegExp object using the /.../ notation.

for example [0-9A-Z]{1,8} would become /[0-9A-Z]{1,8}/

but I don't have an element type available that would allow me to do this. 
Strings are always quoted. I need a way to be able to add RAW data in the 
serialized stream.

Maybe it's not a goal of a JSON payload to support such a thing, but it allows 
me to optimize the use of the schema in the browser.


```

Original issue reported on code.google.com by `david.nouls` on 17 Feb 2011 at 9:28""```
Can you provide a more detailed code example on what you want to be written out?
Is the output going to be valid JSON?
```

Original comment by `inder123` on 20 May 2011 at 9:56
 =||= ```
No indeed, officially it would not be valid JSON sing a RegExp object is not 
defined in the specs to be correct JSON. In practive however it works fine 
since RegExp is natively supported with the /regexp/ syntax.
Anyway, I no longer need this feature since I implemented a workaround.
```

Original comment by `david.nouls` on 1 Jun 2011 at 12:42
 =||= ```
We aren't going to support /regex/ syntax.
```

Original comment by `limpbizkit` on 17 Jun 2011 at 9:11
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
292Add JAX-RS supportGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:24 PM"```
This is a feature request.

Jackson and Jettison libraries are used in other JAX-RS server implementations 
and this support makes them a more compelling tool for me because JSON web 
services seems like the main reason why I would need Java <-> JSON 
serialization. I personally haven't been able to get GSON working with any 
JAX-RS implementation but please disregard this if it does work somewhere. If 
not, it would be cool if GSON did support JAX-RS.
```

Original issue reported on code.google.com by `sardonic...@gmail.com` on 17 Feb 2011 at 1:36""```
See Greaze.
https://sites.google.com/site/greazeproject/

I don't think we'll support JAX-RS since there are libraries that already do 
that.

```

Original comment by `limpbizkit` on 17 Jun 2011 at 9:04
- Changed state: **WontFix**
 =||= ```
Infinite sorrow.  I'm already using GSON throughout and want to introduce 
JAX-RS.  The jersey/jaxb implementation of JSON is ass.  
```

Original comment by `darren.h...@gmail.com` on 8 Dec 2011 at 5:57
 =||= ```
maybe this helps you: 
http://stackoverflow.com/questions/9516224/using-gson-instead-of-jackson-in-jers
ey
```

Original comment by `lagr...@gmail.com` on 24 Mar 2012 at 12:34
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
293Patch for /trunk/gson/src/main/java/com/google/gson/JsonDeserializerExceptionWrapper.javaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:25 PM"```
Fix grammar error. I LOVE THE EDIT FEATURE.
```

Original issue reported on code.google.com by `konigsb...@gmail.com` on 22 Feb 2011 at 5:15

Attachments:
- [JsonDeserializerExceptionWrapper.java.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-293/comment-0/JsonDeserializerExceptionWrapper.java.patch)""Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:19
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
294Serialized HashMap is different if inside another classGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:25 PM"```
Serializing a HashMap yields different results if it is an object in another 
class.
Code sample:

Gson gson = new Gson();
Object test = new String[] {""this"", ""is"", ""a"", ""test""};
Map<String, Object> hash = new HashMap<String, Object>();
hash.put(""othertest"", ""othertest"");
hash.put(""test"", test);
NamedClass nc = new NamedClass(""test"", hash);

System.out.println(gson.toJson(hash));
System.out.println(gson.toJson(nc));

This is NamedClass:
public class NamedClass
{
    private String id;
    private Map<String, Object> attributes;

    NamedClass() {}

    public NamedClass(String id, Map<String, Object> attributes)
    {
        this.id = id;
        this.attributes = attributes;
    }
}

What is the expected output? What do you see instead?
This produces:
{""test"":[""this"",""is"",""a"",""test""],""othertest"":""othertest""}  (Great!)
{""id"":""test"",""attributes"":{""test"":{},""othertest"":""othertest""}}  (Oh no, the 
array inside the hashmap now reads ""{}"")

While I would expect the second line to serialize the hashmap as smartly as it 
does on the first line:
{""id"":""test"",""attributes"":{""test"":[""this"",""is"",""a"",""test""],""othertest"":""othertes
t""}}  (Cool, now I see the array here as well)



What version of the product are you using? On what operating system?
gson 1.6 on Windows XP


I need the Map to be <String, Object> because it may contain multivalued as 
well as single valued values (String vs String[]).
I have written a custom serializer to ""fix"" this, but I believe that should be 
the default behavior...
```

Original issue reported on code.google.com by `crau...@gmail.com` on 7 Mar 2011 at 9:45""```
Fixed in 828.
```

Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:32
- Changed state: **Fixed**
 =||= ```
could you please send me the link for the fix.... or send me the link for (
svn 828) a jar file for this fix... I need code please send me asap..... thank 
you 
```

Original comment by `ravi4ami...@gmail.com` on 3 Oct 2011 at 12:16
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
295"com.google.gson.ParseException: Encountered "" <IDENTIFIER_SANS_EXPONENT> ""access_token """" at line 1, column 1."Google Code ExporterGoogleCodeExporter03/19/15, 06:29:26 PM"```
I am getting the below error while parsing the JSON response:
access_token=149368218440158|50f0e0c6b08ccdb7ada52ded-1020078280|GpLTaXrOlS9R-GR
vkc7H5iIc1_g

com.google.gson.ParseException: Encountered "" <IDENTIFIER_SANS_EXPONENT> 
""access_token """" at line 1, column 1.
Was expecting one of:
    <EOF> 
    <DIGITS> ...
    ""null"" ...
    ""NaN"" ...
    ""Infinity"" ...
    <BOOLEAN> ...
    <SINGLE_QUOTE_LITERAL> ...
    <DOUBLE_QUOTE_LITERAL> ...
    "")]}\'\n"" ...
    ""{"" ...
    ""["" ...
    ""-"" ...

    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)
    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)
    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:62)
    at com.google.gson.JsonParser.parse(JsonParser.java:54)
    at com.nbcareer.utils.FacebookIntegrator.getFaceBookAccessToken(FacebookIntegrator.java:273)
    at org.apache.jsp.WEB_002dINF.jsp.tile.jobsearch.newJobSearch_002dbody_jsp._jspService(newJobSearch_002dbody_jsp.java:173)
    at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)



```

Original issue reported on code.google.com by `kasiram....@gmail.com` on 10 Mar 2011 at 6:21""```
If that is the full text, that is not json, but looks to be an 
application/x-www-form-urlencoded response. If that is not the full text, you 
might want to provide a full sample that produces the bug.
```

Original comment by `nairb...@gmail.com` on 30 Mar 2011 at 9:10
 =||= ```
This is not a valid JSON object so I am going to close this issue out. If you 
have more information then please feel free to open a new bug.

As well, you are using an older version of Gson. If you upgrade to 1.6 (or in a 
week or so we'll have 1.7) then you will get the new Json Parser that has some 
significant performance improvements.
```

Original comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:39
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
296Null exception thrownGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:27 PM"```
What steps will reproduce the problem?
1. I had string of JSON data.
2. I tried to deserialize the JSON into an object DisruptionList.
3. DisruptionList had one member 
        public ArrayList<Disruption> Incidents.

What is the expected output? What do you see instead?
I saw a NULL exception.  The value of the exception was NULL.

What version of the product are you using? On what operating system?
Windows 7, and Gson 1.6.  Developing a JAVA android app.

Please provide any additional information below.

I just wanted more information from about the error, but instead got a NULL 
error, no stack trace no error no nothing.  If this isn't considered a bug I 
apologize.  

I fixed my issue by changing Incidents from ArrayList to List.  Let me know if 
you need my help.

```

Original issue reported on code.google.com by `kyle.ell...@gmail.com` on 14 Mar 2011 at 6:23""```
Confirmed. Tested with r745.
```

Original comment by `limpbizkit` on 21 Mar 2011 at 9:50
- Changed state: **Started**
 =||= Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 6:05
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
297Cannot deserialize array of unknown typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:28 PM"```
See the test case at: 
http://stackoverflow.com/questions/5143842/cannot-deserialize-array-of-unknown-t
ype-using-gson-w-java

Discussed at Gson group thread: 
http://groups.google.com/group/google-gson/browse_thread/thread/68c6365b89940b0a
```

Original issue reported on code.google.com by `inder123` on 14 Mar 2011 at 7:42""```
Guice's Types.arrayOf() method would work here. I don't think we want to 
include that in Gson, but we should push to get it included in Guava.

http://google-guice.googlecode.com/git/javadoc/com/google/inject/util/Types.html
#arrayOf(java.lang.reflect.Type)
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:33
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
298Allow serialization of anonymous and local classesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:29 PM"```
What steps will reproduce the problem?

        Gson gson = new Gson();
        String json = gson.toJson(new Object() {
            String url = ""http://localhost:10080/live/list"";
            String[] names = new String[] {""dsc0001"",""dsc0002"",""dsc0003""};
        });
        System.out.println(json);

What is the expected output?
{""url"":""http://localhost:10080/live/list"",""name"":[{""dsc0001"",""dsc0002"",""dsc0003""
]}

What do you see instead?
blank line

What version of the product are you using? On what operating system?
1.6

Please provide any additional information below.
I understand that there are default exclusion strategies that prevent the 
serialization of objects belonging to an anonymous or local class, but it would 
be great if these could be bypassed to allow the above notation.


```

Original issue reported on code.google.com by `robby...@gmail.com` on 17 Mar 2011 at 2:14""```
I have the same doubt. Are there any specific reasons why anonymous or local 
classes should be excluded?

I tried to disable the DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY. It does not 
seem producing any problems
```

Original comment by `lindap...@gmail.com` on 14 Apr 2011 at 2:43
 =||= ```
And inner class will trigger problems using a type adapter is specified for the 
class since it generated an implicit reference to the outer class/instance 
which causes a circular reference. I do not recall the reason as to why we skip 
anonymous classes.

I will discuss this with Inder, but I do think that this is a valid feature 
that we should support.
```

Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 5:59
 =||= ```
Issue 196 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 16 Apr 2011 at 9:54
 =||= ```
Issue 346 has been merged into this issue.
```

Original comment by `limpbizkit` on 2 Oct 2011 at 3:38
 =||= ```
I respectfully disagree.

I'm doing something like this.

I have an interface, TFlat. I registered a custom serializer for that interface.

I have:

class O {
  TFlat p = new TFlat(){ int field1 = 3; int field2 = 4; }
  ...
}

And I'm trying to serialize an instance of O.

May be the exclusion strategy should pass out anonymous/local classes that 
would have be serialized in a custom way?

Thanks,
  Pawel.

```

Original comment by `pawel.ve...@gmail.com` on 12 Jan 2012 at 8:58
 =||= ```
Pawel, that's interesting I'll take a look. What do you think should happen 
when this is deserialized?
```

Original comment by `limpbizkit` on 13 Jan 2012 at 2:35
 =||= ```
Jesse,

I don't think this is particularly useful for deserializing.
If we were to stretch this, deserialization can see that the field is 
initialized, and if the incoming JSON fragment is an object, map the properties 
of the fragment to the fields of the object. IMO, right now, GSon always 
attempts to instantiate classes that are declared for each field (or use a 
custom deserializer to do so).

custom deserialization can create its own anonymous class that will implement 
TFlat. It would need to know the field location (somehow indicate where the 
field will go after deserialization), though, which is, to my knowledge, is not 
something GSon supports either. But I'm still on 1.7, haven't checked out all 
the 2.x goodies.


```

Original comment by `pawel.ve...@gmail.com` on 13 Jan 2012 at 5:02
 =||= ```
[deleted comment]
```
 =||= ```
Interestingly enough, you can create instances of anonymous objects.
However, such instances will not be ""attached"" to the outer class, yet they are 
legal. Attempting to reference parent class will simply return null. Obvious 
problem is, of course, that there is no way to declare a field of anonymous 
class.

Here is the Groovy fragment I ran to test this:


interface T {
}
class P {
  int out = 13;
  T z = new T() {
    int k;
    {
        System.out.println(""Anonymous <init>..."");
        P parent = P.this;
        if (parent == null) { System.out.println(""No Parent!""); }
        else { System.out.println(parent.out) }; 
    }
  };
}
P p = new P();
Class<T> cc = p.z.getClass();
System.out.println(cc.getName());
T another = cc.newInstance();
---
output:
Anonymous <init>...
13
P$1
Anonymous <init>...
No Parent!
Result: P$1@1567ee3
```

Original comment by `pawel.ve...@gmail.com` on 13 Jan 2012 at 5:10
 =||= Original comment by `limpbizkit` on 11 Apr 2012 at 8:50
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
We still use gson-1.3 due to this issue...

Today I found http://code.google.com/p/google-gson/issues/detail?id=96 in our 
logs.
The bug fixed in 1.4++, but we can't move to fresh version of gson since we 
have a lot of inner/local classes to serialize.



```

Original comment by `stanisla...@gmail.com` on 22 Jan 2013 at 12:02
 =||= ```
Same here. Even though I love GSON simplicity and extensibility, but inability 
to serialize anonymous classes simply kills the practical usability of this 
great library!

The use case I'm talking about is very simple and widely used. Image you have 
class Car:
public class Car {
   String name;
   String color;
}

Let's create 2 instances using different code-style:

   Car car1 = new Car();
   car1.name = ""BMW"";
   car1.color = ""Red"";

   Car car2 = new Car() {{
      name = ""Nissan"";
      color = ""Gold"";
   }}

car2 object has the same number of fields and from logical perspective it is of 
the same type than car1. The anonymous Car subclass created for the car2 
instance can be safely ignored in this case as it doesn't add anything to the 
car2 that car1 wouldn't have. So why would Gson refuse processing car2?
```

Original comment by `alexande...@gmail.com` on 6 Feb 2013 at 5:24
 =||= ```
Don't use double brace initialization. It prevents serialization and Gson is 
designed for symmetric serialization and serialization.
```

Original comment by `limpbizkit` on 7 Feb 2013 at 1:02
- Changed state: **WontFix**
 =||= ```
jackson can do this:
        ObjectMapper mapper = new ObjectMapper();
        mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);
        String result=mapper.writeValueAsString(x);
why gson not?
```

Original comment by `che...@gmail.com` on 21 Nov 2013 at 2:55
 =||= I see this closed, but I don't see a reason.  Can we reopen or provide clarification?  It sounds like this thread seemed in overwhelming support for anonymous class serialization.
 =||= This is especially problematic with Java 8. I've tried to create a TypeAdapterFactory for serializing Streams, but my `create` method never even gets called because `ReferencePipeline$2` is anonymous, so the Excluder just returns null. =||= @mintern

> This is especially problematic with Java 8. I've tried to create a TypeAdapterFactory for serializing Streams, but my `create` method never even gets called because `ReferencePipeline$2` is anonymous, so the Excluder just returns null.

It should work if you provide a type to the `toJson()` method:

```java
... = gson.toJson(stringStream, new TypeToken<Stream<String>>() {}.getType());
```

----

I think that this issue should be reopened, because it's possible to serialize and deserialize an anonymous/local class object, if the class does not have its outer class reference `this$0`, for example, if declared in a static method (don't think it has much practical use, though). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
299Cache no-args constructorsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:32 PM"```
In MappedObjectConstructor.getNoArgsConstructor(), use a cache of constructors 
to avoid reflection every single time an instance is constructed.
```

Original issue reported on code.google.com by `inder123` on 21 Mar 2011 at 9:27""Original comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:34
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
300Update all tests and documentation to remove unneeded no-args constructorsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:32 PM"```
We do need to create some tests to ensure that no-args constructors are invoked 
when they are provided.
```

Original issue reported on code.google.com by `inder123` on 21 Mar 2011 at 9:34""Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:36
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
301Support copy/cloning of JsonObject and JsonArrayGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:33 PM"```
The above two objects are not immutable so it would be nice to make a defensive 
copy in some cases to ensure the internals of your object do not get modified 
by others if you leak out this object via a getter.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 22 Mar 2011 at 10:19""```
This issue was closed by revision r855.
```

Original comment by `limpbizkit` on 17 Jun 2011 at 9:46
- Changed state: **Fixed**
 =||= ```
When are we planning to include this fix into newer version of gson jar?
```

Original comment by `taps...@gmail.com` on 28 Oct 2011 at 5:50
 =||= ```
What were the reasons to remove this with r1010? I was hoping this landed with 
2.1
```

Original comment by `oliver.s...@gmail.com` on 3 Jan 2012 at 1:43
 =||= ```
We decided against it because we decided that it encourages mutable objects. 
You can implement this yourself relatively easy in application code so it isn't 
a big loss.
```

Original comment by `limpbizkit` on 4 Jan 2012 at 1:05
 =||= ```
I think this should be revisited. How can you claim it's ""relatively easy"" to 
implement it ourselves when you had to touch 5-10 lines in 5 application 
classes?

If you don't want to support deep clones, then can you support immutable 
versions of each of the Json* types? The current situation could inadvertently 
lead to all sorts of aliasing bugs.
```

Original comment by `bolinf...@gmail.com` on 24 Apr 2013 at 3:40
 =||= ```
bolinfest: what's your proposal to make Json* types as immutable? JsonObject 
and JsonArray are designed as mutable types. Are you thinking of a 
Collections.unmodifiableList() type of method?
```

Original comment by `inder123` on 24 Apr 2013 at 6:19
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
302Permit trailing whitespaceGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:34 PM"```
From this thread:
http://groups.google.com/group/google-gson/browse_thread/thread/6f12cf80b12a85b8
/b76628ffdcd4c7af?show_docid=b76628ffdcd4c7af&pli=1

Our parser is failing on documents with trailing whitespace. This needs to be 
fixed.
```

Original issue reported on code.google.com by `limpbizkit` on 23 Mar 2011 at 3:57""```
Already fixed. Test is in r764.
```

Original comment by `limpbizkit` on 29 Mar 2011 at 9:48
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
303Maps with interface-type values are not serialized properlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:35 PM"```
What steps will reproduce the problem?
    @Test
    public final void testInterfaceTypeMap() {
        MapClass element = new MapClass();
        element.addSerializable(""Test"", ""I am invisible!"");
        element.addStrings(""Test"", ""I am visible!"");
        GsonBuilder builder = new GsonBuilder();
        Gson creator = builder.create();
        String json = creator.toJson(element);
        assertEquals(""{\""serializables\"":{\""Test\"":\""I am invisible!\""},\""strings\"":{\""Test\"":\""I am visible!\""}}"", json);
    }

    static final class MapClass {
        private Map<String, Serializable> serializables = Maps.newHashMap();
        private Map<String, String> strings = Maps.newHashMap();

        public final void addSerializable(final String name, final Serializable value) {
            this.serializables.put(name, value);
        }

        public final void addStrings(final String name, final String value) {
            this.strings.put(name, value);
        }
    }

What is the expected output? What do you see instead?
Expected: {""serializables"":{""Test"":""I am invisible!""},""strings"":{""Test"":""I am 
visible!""}}
What I see: {""serializables"":{""Test"":{}},""strings"":{""Test"":""I am visible!""}}

What version of the product are you using? On what operating system?
1.6 on Ubuntu Linux

Please provide any additional information below.
Unit test should be sufficient I hope... :)

```

Original issue reported on code.google.com by `chea...@gmail.com` on 23 Mar 2011 at 10:21""```
Fixed in r776
```

Original comment by `inder123` on 5 Apr 2011 at 11:11
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
304Serializing a class that aggregates a map with variable type values fails.Google Code ExporterGoogleCodeExporter03/19/15, 06:29:35 PM"```
When I serialize a Map<String, IChild> where IChild can be of type ChildA or 
ChildB then Gson works correctly without a custom serializer.

When I aggregate this map into some other object ""Root"" and I serialize the 
Root object, then the map is no longer correctly serialized.

I included a JUnit4 test that exposes the problem...

This is an annoying bug since I wanted to use GSON to avoid needing to write 
too many unittests on the serialisation part of my code.

I don't need to deserialize the output that is done in the browser with GWT 
JavaScriptObject overlays.
```

Original issue reported on code.google.com by `david.nouls` on 24 Mar 2011 at 10:17

Attachments:
- [SerialisationTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-304/comment-0/SerialisationTest.java)""```
Is anybody actually looking at issues in the team ? 
```

Original comment by `david.nouls` on 30 Mar 2011 at 11:29
 =||= ```
I'll make sure this gets looked at before our 1.7 release. Have you been able 
to reproduce the problem on GSON 1.7 ?
```

Original comment by `limpbizkit` on 30 Mar 2011 at 2:41
- Added labels: **Milestone-Release1.7**
 =||= ```
I don't have aa 1.7 release, so I can not double check.
But this issue report contains a straightforward junit4 test, if it runs 
without error with the cirrent 1.7 then consider it fixed.

```

Original comment by `david.nouls` on 30 Mar 2011 at 3:16
 =||= ```
I tried my unittest with 1.7 and it fixes the bug.
Thanks for the fast release!
```

Original comment by `david.nouls` on 13 Apr 2011 at 6:38
 =||= Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:04
- Changed state: **Fixed**
 =||= ```
this bug is fixed, but I have the same issue with Lists.
```

Original comment by `david.nouls` on 1 Jun 2011 at 2:09
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
305Adding 1.6 jar to android project triggers dalvik errorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:37 PM"```
What steps will reproduce the problem?
   1. Create an android 3.0 project in eclipse
   2.  Download the Gson library from http://code.google.com/p/google-gson/downloads/list (1.6 full release).
   3. Unzip the files to a folder of your choosing on your your machine (you should get the required jar files)
   4. Add the gson-1.6.jar jar file must now be added to Java build path in eclipse. (I did this by navigating to (Project > Properties > Java Build Path) from the context menu on the created project)
   5. Add the gson jar files on this dialog (click the ""Add External JARs.."" button on the Libraries tab to do this).


What is the expected output? 
Jar file is added with no error.  Access to gson api.

What do you see instead?
Dalvik error.  See stack track :

[2011-03-25 16:26:15 - SampleProg] Dx
UNEXPECTED TOP-LEVEL EXCEPTION:
java.lang.IllegalArgumentException: already added: 
Lcom/google/gson/DefaultTypeAdapters$ByteTypeAdapter;
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.dex.file.ClassDefsSection.add(ClassDefsSection.java:123)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.dex.file.DexFile.add(DexFile.java:143)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.processClass(Main.java:372)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.processFileBytes(Main.java:346)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.access$400(Main.java:59)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main$1.processFileBytes(Main.java:294)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.cf.direct.ClassPathOpener.processArchive(ClassPathOpener.java:244
)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.cf.direct.ClassPathOpener.processOne(ClassPathOpener.java:130)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.cf.direct.ClassPathOpener.process(ClassPathOpener.java:108)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.processOne(Main.java:313)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.processAllFiles(Main.java:233)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.dx.command.dexer.Main.run(Main.java:185)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
java.lang.reflect.Method.invoke(Unknown Source)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.ide.eclipse.adt.internal.build.DexWrapper.run(DexWrapper.java:179)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.ide.eclipse.adt.internal.build.BuildHelper.executeDx(BuildHelper.jav
a:585)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
com.android.ide.eclipse.adt.internal.build.builders.PostCompilerBuilder.build(Po
stCompilerBuilder.java:490)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:629)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:172)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:203)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:255)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:258)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:3
11)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:343)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:144)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:242)
[2011-03-25 16:26:15 - SampleProg] Dx     at 
org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)
[2011-03-25 16:26:15 - SampleProg] Dx 1 error; aborting
[2011-03-25 16:26:15 - SampleProg] Conversion to Dalvik format failed with 
error 1


What version of the product are you using? On what operating system?
I am on Windows 7 64 bit.  Using eclipse.  Developing for Xoom android tablet 
(not an emulator) (android 3.0).


Please provide any additional information below.

```

Original issue reported on code.google.com by `nigel.gr...@gmail.com` on 25 Mar 2011 at 11:47""```
I'v got the same problem. the application works fine w/out gson .
```

Original comment by `galite.p...@gmail.com` on 27 Mar 2011 at 9:35
 =||= ```
I have the same error while trying to use some sources from j2se, like 
org.jdom, javax.xml.
But all works fine before upgrading to Android SDK tools v.10
```

Original comment by `trueFe...@gmail.com` on 28 Mar 2011 at 8:50
 =||= ```
@limpbizkit:
Is this similiar to Issue 255? Is the Android SDK tools pulling in Gson?
```

Original comment by `joel.leitch@gmail.com` on 4 Apr 2011 at 9:33
 =||= ```
Yes, this looks like a duplicate of issue 255, and using jarjar should work 
around it. 

I'm somewhat surprised that the android.jar is triggering this. Is that .jar 
sourced from the Android SDK? To date we'd only seen this problem on certain 
HTC handsets.
```

Original comment by `limpbizkit` on 6 Apr 2011 at 1:30
 =||= ```
Closing as obsolete. If you could tell me which Android .jar you're using, I 
might be able to help.
```

Original comment by `limpbizkit` on 2 Oct 2011 at 3:24
- Changed state: **WontFix**
 =||= **### SOLUTION TO ERROR DALVICKAND  AND SUN / MISC / BASECODER64 IN ECLISPE.**

**INSTRUCTIONS TO SOLVE THE PROBLEM ARE:**

1- INSTALL WINDOWS XP SP2 WITH JAVA 6.

2- DOWNLOAD ADT VERSION 23.0.2 WITH SDK 19.

3- DECOMPRESS THE ADT AND INSTALL IT ON YOUR COMPUTER.

4- OPEN THE ECLIPSE AS ADMINISTRATOR AND IMPORT THE ANDORID FILE.

5- IN THE FILE project.properties WRITE THIS -> target = android-19 <--VERY IMPORTANT.

6- EXPORT YOUR PROJECT AND NO MORE THIS ERROR WILL APPEAR.

7- AND SO WE SOLVE THE ERROR CHECKED AND RUNNING.

8- 100% CHECKED BY ME. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
307Ability to configure date patternGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:40 PM"```
It would be nice to configure a date pattern for an attribute, in the 
annotation, like :

@DatePattern(""yyyy-mm-dd"")
private Date day;

The configuration in GsonBuilder is useful to change date pattern each time, 
but it can be useful to change configuration for only one attribute.


```

Original issue reported on code.google.com by `mick8...@gmail.com` on 6 Apr 2011 at 1:08
- Merged into: #306""```
This is a valid feature request and I will look into supporting something like 
this in the next Gson release.

I see this feature functioning such that you define your own annotations (like 
above) and provide your own type adapter; however, the JsonSerializer or 
JsonDeserializer will have enough context to pull off the field and class 
annotations.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:30
- Changed state: **Accepted**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 7:30
- Changed state: **Duplicate**
 =||= ```
I came across feature request while trying to do this exact thing with the GSON 
lib earier today.
I had a go at modding the GSON code to support this, its a little rough but it 
may help someone out if they need to do this in the future, maybe even provide 
a starting point to something like this being implemented in future releases. 

See attached SVN patch file


```

Original comment by `donalfen...@gmail.com` on 9 Feb 2014 at 11:09

Attachments:
- [AddFieldSpeificDateFormatParsingPatch.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-307/comment-3/AddFieldSpeificDateFormatParsingPatch.patch)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
308gson & AdMob 4.0.4 crashes Android appGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:41 PM"```
What steps will reproduce the problem?
1. Use gson-1.6.jar in the build path of the Android app
2. Use GoogleAdMobAdsSdk-4.0.4.jar in the build path of the Android app
3. -

What is the expected output? What do you see instead?
Expected: application to work normally
Instead: getting ""Conversion to Dalvik format failed with error 1"" error which 
completely blocks the application from compiling or running.

What version of the product are you using? On what operating system?
GSON 1.6 & GoogleAdMobAdsSdk-4.0.4.jar (same problem with 4.0.2)

Please provide any additional information below.
Please fix asap. I require gson (it rocks!) but also wanna change to the new 
AdMob SDK.
```

Original issue reported on code.google.com by `derbsl...@gmail.com` on 12 Apr 2011 at 7:32
- Merged into: #255""Original comment by `limpbizkit` on 12 Apr 2011 at 10:52
- Changed state: **Duplicate**
 =||= ```
Why has this issue merged into 255? It's not the same problem!
I actually followed the solution in issue 255 but this did not solve my 
problem. At least it fixes the problem I also have with crashing certain phone 
types from HTC.

Following this solution I just get a different error:

[2011-04-13 10:57:01 - cheatdatabase-android] Error generating final archive: 
Found duplicate file for APK: assembly-descriptor.xml
Origin 1: 
C:\Users\de\Development\Android\cheatdatabase-android\lib\GoogleAdMobAdsSdk-4.0.
4.jar
Origin 2: 
C:\Users\de\Development\Android\cheatdatabase-android\lib\myjson-1.6.jar

My problem has nothing to do with any phone types or whatsoever. The problem 
comes in Eclipse and I am not able to compile the app anymore when using GSON 
1.6 & AdMob 4.0.4 in my build path. It also does not work if I follow the steps 
mentioned in Issue 255.
```

Original comment by `derbsl...@gmail.com` on 13 Apr 2011 at 9:26
 =||= ```
FYI,
I contacted the AdMob SDK team and they are aware of this issue and are working 
on it. Watch their forums for a new beta release.
```

Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 5:28
 =||= ```
Thank you very much :]
```

Original comment by `derbsl...@gmail.com` on 13 Apr 2011 at 5:38
 =||= ```
removed assembly-descriptor.xml from the jar files in r812
```

Original comment by `inder123` on 13 Apr 2011 at 6:28
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
309Custom Map Serializers do not override the defaultGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:42 PM"```
If a user creates and registers a custom type adapter for some Map type then it 
should override the default map behaviour.
```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 13 Apr 2011 at 9:28""Original comment by `joel.leitch@gmail.com` on 13 Apr 2011 at 4:23
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
310Wrong jar in maven central for v1.7Google Code ExporterGoogleCodeExporter03/19/15, 06:29:42 PM"```
What steps will reproduce the problem?
Download com.google.code.gson:gson:1.7 from repo1.maven.org

What is the expected output? What do you see instead?
Expected: downloading gson 1.7 jar
Current: downloading gson 1.7 javadoc jar (under the name gson-1.7.jar)

Please provide any additional information below.
See for yourself at http://repo1.maven.org/maven2/com/google/code/gson/gson/1.7/

```

Original issue reported on code.google.com by `yonatan.graber` on 13 Apr 2011 at 10:36""```
Yes, I noticed it too. We are in the process of releasing Gson 1.7.1 with 
correct jars. If you know of a way to modify the current jars at Maven Central, 
let us know. 
```

Original comment by `inder123` on 13 Apr 2011 at 6:21
- Changed state: **Accepted**
 =||= Original comment by `inder123` on 13 Apr 2011 at 7:31
- Added labels: **Priority-Critical**
- Removed labels: **Priority-Medium**
 =||= ```
Fixed with the release of Gson 1.7.1
see: http://repo2.maven.org/maven2/com/google/code/gson/gson/1.7.1/
```

Original comment by `inder123` on 13 Apr 2011 at 11:28
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
311Remove MVN specific files from gson.jarGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:43 PM"```
During the release, the follow files get included in the compiled class jar.

assembly-descriptor.xml
META-INF/maven/com.google.code.gson/gson/pom.xml
META-INF/maven/com.google.code.gson/gson/pom.properties

```

Original issue reported on code.google.com by `joel.leitch@gmail.com` on 13 Apr 2011 at 5:32""```
Fixed this from Maven generated jars in r811
```

Original comment by `inder123` on 13 Apr 2011 at 6:21
 =||= ```
Fixed in Gson 1.7.1
```

Original comment by `inder123` on 13 Apr 2011 at 11:27
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
312get(String membername) methodGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:44 PM"```
Could we have a method that accepts member paths also?

So instead of get(""name"") also get(""address.country""), which would then 
automatically descend in the hierarchy and return that subpart of the json data.


```

Original issue reported on code.google.com by `mendri...@gmail.com` on 14 Apr 2011 at 5:31
- Merged into: #322""Original comment by `inder123` on 3 Jun 2011 at 6:33
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
313Why no-arg ctor are needed for deserialization in Gson when java native serialization/deserialization doesn't need it?  Google Code ExporterGoogleCodeExporter03/19/15, 06:29:44 PM"```
Why no-arg ctor are needed?
Doesn't is uses java reflection?

Thanks!
```

Original issue reported on code.google.com by `prafull....@gmail.com` on 14 Apr 2011 at 6:37""```
If you download the latest version of Gson then you will get this behaviour.
```

Original comment by `joel.leitch@gmail.com` on 15 Apr 2011 at 1:21
- Changed state: **Invalid**
 =||= ```
that's great!
thanks!
```

Original comment by `prafull....@gmail.com` on 15 Apr 2011 at 2:16
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
314Make GsonBuilder cloneableGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:48 PM"```
Since it it mutable, GsonBuilder should also be cloneable.
```

Original issue reported on code.google.com by `jeremiah...@gmail.com` on 16 Apr 2011 at 10:01""```
Why are you cloning a GsonBuilder? I'm marking this as WontFix only because we 
don't expect GsonBuilder instances to survive beyond a single method call.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 6:01
- Changed state: **WontFix**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
I needed this to create a ""default"" builder that can be personalized by 
a-priori unknown users of my service.
I wanted to be able to create the default instance and then pass around clones 
of it.

I worked around it by having a method dedicated to the creation of that default 
builder. It is however not optimal if you want to have multiple layers of such 
""services"", each tuning their builder for their very needs.
```

Original comment by `jeremiah...@gmail.com` on 29 Dec 2011 at 6:02
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
315Allow providing a custom visitor to preprocess or postprocess default serialization / deserializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:48 PM"```
I have the following use cases:

1. When searching a list of, for example, products I want to be able to (only 
in this situation) provide a way to only serialize fields that the client asks 
for. I could use a DTO to do the job but, in my use-case (multiple lists with 
custom fields) it would be very unnatural. I could simply use the exclusion 
strategy that GSON provides but in this use case it is just not enough. Imagine 
one of the fields the client asks for is, for example, product.country.name. 
Then, if I want a generic way to serialize this I need to know the precise 
context of the field being serialized (I mean context as the stack of objects 
already visited in that branch of the object graph).

2. When posting a complex form (multiple associations through html select 
fields) I only want to send the id of the select form fields instead of the 
whole object graph (avoiding a lot of traffic). The problem is that if I need 
to rebuild the object when it arrives to the server I need to provide a custom 
serializer / deserializer for doing this. With a custom visitor I could 
post-process these kind of objects in some generic way (for example during 
deserialization).

These two use-cases (I hope I have explained myself well) has brought me to 
develop an extension of GSON to allow to provide a custom JsonVisitor through a 
factory (to avoid reflection and the derived performance gain) configured in 
GSON builder. Attached you can find a patch for v1.7.1 (tag gson-1.7.1) with a 
unit test case.

Instead of using a single custom gson visitor (as for example in the Exclusion 
Strategies) I wanted a factory so I don't have to deal with thread locals in my 
implementations to store the object stack being processed. 

Any comments are very welcome.
```

Original issue reported on code.google.com by `ignacio....@kotasoft.com` on 18 Apr 2011 at 1:54

Attachments:
- [json_visitor_patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-0/json_visitor_patch.txt)""```
Sorry for posting this as a Defect. Obviestly this is an enhancement... Is 
there anyway to change it or should I file a new issue?
```

Original comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 1:55
 =||= ```
Issue #20 (I have seen it has been accepted) could be relatively easily solved 
with this patch! 
```

Original comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 2:21
 =||= ```
This fix (over the previous patch) solves a NPE issue on Gson and probably has 
a minimal performance gain over previous patch.
```

Original comment by `ignacio....@kotasoft.com` on 18 Apr 2011 at 2:46

Attachments:
- [gson_patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-3/gson_patch.txt)
 =||= ```
Issue 144 has been merged into this issue.
```

Original comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:52
 =||= ```
Test for issue 20 using this patch
```

Original comment by `ignacio....@kotasoft.com` on 21 Apr 2011 at 12:58

Attachments:
- [Issue20Test.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-315/comment-5/Issue20Test.java)
 =||= ```
You can do this in Gson 2.1 by writing your own TypeAdapterFactory. Look at 
ReflectiveTypeAdapterFactory if you need inspiration.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:53
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
316Unwanted side-effects when using transientGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:50 PM"```
What steps will reproduce the problem?
1. mark a field you want to store in DB but not serialize with gson as transient
2. use the class with a Hibernate-like framework

What is the expected output? What do you see instead?
  I would like to be easily able to exclude a field from (de)serialization with gson, but the transient modifier is used by some frameworks, and therefore my field cannot be stored…

What version of the product are you using? On what operating system?
Gson 1.6

Please provide any additional information below.
I attached a patch that adds a skipFieldsWithExcludeAnnotation method like for 
the Expose annotation.

Why not use Expose ? Because it is faster to @Exclude one field than to @Expose 
all the others.
```

Original issue reported on code.google.com by `julien.d...@clever-cloud.com` on 18 Apr 2011 at 10:13

Attachments:
- [0001-add-exclude-strategy.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-316/comment-0/0001-add-exclude-strategy.patch)""```
I don't think we want to support this in Gson directly. I think @Expose was a 
mistake, but now we are stuck with it :-). This is really easy for you to do 
yourself if you are using Gson 1.7 or later.

Instead, what I recommend is that you write your own Exclusion Strategies for 
serialization and deserialization. Then you would create your Gson instance as 
follows:
Gson gson = new GsonBuilder()
    .addSerializationExclusionStrategy(new MySerializationExclusionStrategy())
    .addDeserializationExclusionStrategy(new MyDeserializationExclustionStrategy())
    .create();
```

Original comment by `joel.leitch@gmail.com` on 19 Apr 2011 at 9:44
- Changed state: **WontFix**
 =||= ```
Yeah, I (we) already use that, but we thought we could help a little.

Anyway, if you suddenly want to add it in gson, the patch is here ;-).
```

Original comment by `julien.d...@clever-cloud.com` on 20 Apr 2011 at 7:15
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
317Is there any way to restrict deserialization if certain conditions not full-filled?Google Code ExporterGoogleCodeExporter03/19/15, 06:29:51 PM"```
1) Suppose if some field / method is deleted from the class OR changed the data 
type and are present in stored JSON format object then it should not 
deserialize it.

2) If some field/method is added then it should deserialize.
```

Original issue reported on code.google.com by `prafull....@gmail.com` on 19 Apr 2011 at 8:00""```
Have you considered using the versioning support in Gson? If you model changes 
in a drastic way then maybe its better to version your fields.
```

Original comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:34
 =||= ```
Thanks joel !!
yes i am trying to use it for versioning which can be backward compatible but 
should be only in case of addition of new features not in case of deleting OR 
modifying the fields. otherwise It will give unexpected results which are hard 
to catch.
```

Original comment by `prafull....@gmail.com` on 3 Jun 2011 at 6:46
 =||= ```
Closing as WontFix. If you can explain what we should add, please post that 
here. Otherwise custom type adapters should make this easy.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 6:00
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
318Gson should serialize sub-class objects per sub-class type for collectionsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:52 PM"```
See the thread: 
http://groups.google.com/group/google-gson/browse_thread/thread/f92fb49692e0aa33
?hl=en

See the tests for reproducing this issue in r825

This seems to work fine for maps but fails for collections.
After fixing this issue, we need to enable disabled_testListOfSubclassFields() 
test
```

Original issue reported on code.google.com by `inder123` on 19 Apr 2011 at 8:28""```
Fixed in r828.
```

Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33
 =||= Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 10:33
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
319Gson 1.4 doesn't support type parameters in superclass.Google Code ExporterGoogleCodeExporter03/19/15, 06:29:53 PM"```
What steps will reproduce the problem?

class Foo<T> {
    T val;
}

class Bar
        extends Foo<Integer> {
}

public class GsonTest {

    public static void main(String[] args) {
        Bar bar = new Bar();
        bar.val = 123;

        Gson gson = new Gson();
        gson.toJson(bar);
    }

}


Got the error:


Exception in thread ""main"" java.lang.UnsupportedOperationException: Expecting 
parameterized type, got class com.bee32.plover.ajax.Bar.
 Are you missing the use of TypeToken idiom?
 See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener
    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:97)
    at com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)
    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:148)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
    at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)
    at com.google.gson.Gson.toJsonTree(Gson.java:230)
    at com.google.gson.Gson.toJson(Gson.java:315)
    at com.google.gson.Gson.toJson(Gson.java:270)
    at com.google.gson.Gson.toJson(Gson.java:250)
    at com.bee32.plover.ajax.GsonTest.main(GsonTest.java:20)

```

Original issue reported on code.google.com by `x...@99jsj.com` on 20 Apr 2011 at 9:26""```
Sorry, it's resolved in 1.7.1. Please close this issue.
```

Original comment by `x...@99jsj.com` on 20 Apr 2011 at 9:31
 =||= Original comment by `joel.leitch@gmail.com` on 20 Apr 2011 at 3:58
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
320GSON 1.7.1 and AdMob 4.0.4 still not working togetherGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:54 PM"```
What steps will reproduce the problem?
1. Set AdMob version 4.0.0 or upwards to build path
2. Set GSON 1.7.1 to build parth
3. Try making an Android app

What is the expected output? What do you see instead?
I expect the application to compile. Instead I get this error in Eclipse:
""Conversion to Dalvik format failed with error 1""

What version of the product are you using? On what operating system?
Windows 7, GSON 1.7.1, AdMob 4.0.4

Please provide any additional information below.
GSON works fine with older versions of AdMob (don't know the exact version) but 
blocks the entire app from compiling when trying to use the latest versions of 
both libraries. it also does not work with GSON 1.6
```

Original issue reported on code.google.com by `derbsl...@gmail.com` on 29 Apr 2011 at 7:33""```
You can just delete GSON library because Admob library itself use GSON
```

Original comment by `nathanie...@gmail.com` on 30 Apr 2011 at 9:10
 =||= ```
[deleted comment]
```
 =||= ```
[deleted comment]
```
 =||= ```
AdMob is available in version 4.1.0. Now it works fine with GSON 1.7.1 together.
```

Original comment by `martinko...@gmail.com` on 27 May 2011 at 12:14
 =||= ```
AdMob updated its library.
```

Original comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:22
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
321issue  with extends classGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:55 PM"```
Hello,

i have notice that the current example

public class gsonTest {

    public static void main(String[] args) {
        Response r = new Response().add(new B()).add(new A());
        Gson gson = new GsonBuilder().create();
        System.out.println(gson.toJson(r, r.getClass()));
    }

    public static class Response {
        Vector<A> a = new Vector<A>();
        public Response add(A aa) {

            a.add(aa);
            return this;
        }

    }
    public static class A {
        int A = 1;

    }

    public static class B extends A {
        int B = 2;
    }
}


produce
{""a"":[{""A"":1},{""A"":1}]}

instead
{""a"":[{""A"":1},{""A"":1,""B"":2}]}


tested on mac/linux/win 1.6 jvm and 1.7.1 gson lib.




```

Original issue reported on code.google.com by `ramarr...@gmail.com` on 4 May 2011 at 1:47
- Merged into: #231""```
321 is a duplicate of 231.
```

Original comment by `limpbizkit` on 4 May 2011 at 9:31
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
322Provide xpath like accessors for the Parse TreeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:56 PM"```
See the discussion at 
https://groups.google.com/forum/?hl=en#!topic/google-gson/DPTGYmbfI5c
```

Original issue reported on code.google.com by `inder123` on 8 May 2011 at 8:20""```
Issue 312 has been merged into this issue.
```

Original comment by `inder123` on 3 Jun 2011 at 6:33
 =||= ```
The feature requester wanted to do this:
  String value = element.get(""mystructure.myArray[3].myproperty"");

I recommend that they just use the Java APIs:
  element.getAsJsonObject().get(""mystructure"")
    .getAsJsonObject().get(""myArray"")
    .getAsJsonArray().get(3)
    .getAsJsonObject().get(""myproperty"");

I admit that it's more verbose, but it's type safe and it will fail with a much 
more meaningful error.
```

Original comment by `limpbizkit` on 1 Jul 2011 at 9:51
- Changed state: **WontFix**
 =||= ```
essentially defeats the intent of the original request - to have an xpath like 
construct.
```

Original comment by `javadba@gmail.com` on 7 Apr 2013 at 2:15
 =||= ```
a meaningful error is not at all difficult in case of of failure
moreover all the convenience methods of getString and the like still make sense

the feature originally described would make the library useful in a whole class 
of problems where json is a good enough structure for working with data and 
doing Java<->Json is not necessary
```

Original comment by `un...@webgress.com` on 5 Mar 2014 at 2:33
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
323Provide ability to register different FieldNamingStrategies for serialization and deserializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:57 PM"```
See discussion at: 
https://groups.google.com/forum/?hl=en#!topic/google-gson/ZYnHXcY6IBg
```

Original issue reported on code.google.com by `inder123` on 8 May 2011 at 8:25""```
Is this possible enhancement just to be able to register different 
FieldNamingStrategies for serialization and deserialization, or is it also to 
address adding the ability to specify name translation preferences in both 
directions: from Java field to JSON element, and from JSON element to Java 
field?

To clarify, might this enhancement include the ability to deserialize a JSON 
element without consideration for the case of the characters in the JSON 
element name -- that is, to possibly allow a case-insensitive binding between 
Java field and JSON element names, along the lines of what's described at 
http://stackoverflow.com/questions/6332651?
```

Original comment by `Programm...@gmail.com` on 14 Jun 2011 at 12:24
 =||= ```
This is rarely what you want. Even case insensitivity is strange because 
JavaScript is case sensitive. Plus, there are weird situations with 
capitalization rules for non-ASCII characters.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 8:21
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
324GsonBuilder excludeFieldsWithModifiers() not workingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:58 PM"```
What steps will reproduce the problem?
1. Create one POJO bean
2. Add one field with transient
3. Set excludeFieldsWithModifiers(Modifier.TRANSIENT) on GsonBuilder and 
convert the pojo to json.

What is the expected output? What do you see instead?
- Transient field was exluded event though i hint gsonbuilder to include it
- I want to include all the transient fields


What version of the product are you using? On what operating system?
gson 1.7.1, Win7


Please provide any additional information below.
Attached is the zipped eclipse project for testing

```

Original issue reported on code.google.com by `techgur...@gmail.com` on 12 May 2011 at 1:36

Attachments:
- [gsontest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-324/comment-0/gsontest.zip)""```
This issue was closed by revision r1096.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:17
- Changed state: **Fixed**
 =||= ```
Transient is excluded by default. Call excludeFieldsWithModifiers() with no 
arguments to enable transient field serialization.

```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:18
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
325default parsing of  Map where generic value param is objectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:29:59 PM"```
It seems we could make a better parser for Map<String,Object> which converts 
the Object to a primitive wrapper, list, or map.  Right now, we just get an 
error back.

""Type information is unavailable, and the target object is not a primitive""

For example, the following test should work, ideally:

   public void testMapStringObjectWithAllValidValuesOneDeep() {
      Map<String, Object> map = Maps.newHashMap();
      map.put(""string"", ""string"");
      map.put(""number"", 1);
      map.put(""boolean"", true);
      map.put(""map"", ImmutableMap.of(""key"", ""value""));
      map.put(""list"", ImmutableList.of(""key"", ""value""));
      assertEquals(json.toJson(map),
            ""{\""string\"":\""string\"",\""map\"":{\""key\"":\""value\""},\""list\"":[\""key\"",\""value\""],\""boolean\"":true,\""number\"":1}"");
      Map<String, Object> map2 = json.fromJson(json.toJson(map), new TypeLiteral<Map<String, Object>>() {
      }.getType());
      assertEquals(map2, map);
      assertEquals(json.toJson(map2), json.toJson(map));
   }
```

Original issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 12:15""```
Here's the patch for this:

in MapTypeAdapter, add this where the value is being parsed

      Object value = null;
      if (keyAndValueTypes[1] == Object.class) {
         value = ParseObjectFromElement.SINGLETON.apply(entry.getValue());
      }
      if (value == null) {
         value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);
      }

ParseObjectFromElement and deps are below:

public enum ParseObjectFromElement implements Function<JsonElement, Object> {
   SINGLETON;
   public Object apply(JsonElement input) {
      Object value = null;
      if (input == null || input.isJsonNull()) {
         value = null;
      } else if (input.isJsonPrimitive()) {
         JsonPrimitive primitive = input.getAsJsonPrimitive();
         if (primitive.isNumber()) {
            value = primitive.getAsNumber();
         } else if (primitive.isBoolean()) {
            value = primitive.getAsBoolean();
         } else {
            value = primitive.getAsString();
         }
      } else if (input.isJsonArray()) {
         value = Lists.newArrayList(Iterables.transform(input.getAsJsonArray(), this));
      } else if (input.isJsonObject()) {
         value = Maps.<String,Object>newLinkedHashMap(Maps.transformValues(JsonObjectAsMap.INSTANCE.apply(input.getAsJsonObject()),
               this));
      }
      return value;
   }
}

public enum JsonObjectAsMap implements Function<JsonObject, Map<String, 
JsonElement>> {
   INSTANCE;

   private final Field members;

   JsonObjectAsMap() {
      try {
         members = JsonObject.class.getDeclaredField(""members"");
         members.setAccessible(true);
      } catch (NoSuchFieldException e) {
         throw new UnsupportedOperationException(""cannot access gson internals"", e);
      }
   }

   @SuppressWarnings(""unchecked"")
   @Override
   public Map<String, JsonElement> apply(JsonObject in) {
      try {
         return (Map<String, JsonElement>) members.get(in);
      } catch (IllegalArgumentException e) {
         throw new UnsupportedOperationException(""cannot access gson internals"", e);
      } catch (IllegalAccessException e) {
         throw new UnsupportedOperationException(""cannot access gson internals"", e);
      }
   }
}

```

Original comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:17
 =||= ```
If you want to parse an arbitrary map, how about using JsonParser to parse the 
JSON into a JsonElement DOM. You can then navigate the DOM and deserialize 
using gson.fromJson(JsonElement, Type) method.
```

Original comment by `inder123` on 15 May 2011 at 6:53
 =||= ```
[deleted comment]
```
 =||= ```
Implementation of this change would also provide better consistency with the 
behavior when simple object fields of type ""Object"" are deserialized to.

For example, simple deserialization of 

{""one"":""won"",""two"":2,""three"":false}

into 

class ObjectThings
{
  Object one;
  Object two;
  Object three;
}

using

ObjectThings objectThings = gson.fromJson(new FileReader(""input.json""), 
ObjectThings.class);

generates an instance of ObjectThings where the fields ""one"", ""two"", and 
""three"" are populated with instances of String, LazilyParsedNumber, and Boolean 
respectively.

However, when deserializing this same JSON using 

Type mapStringObjectType = new TypeToken<Map<String, Object>>(){}.getType();
Map<String, Object> mapStringObject = gson.fromJson(new 
FileReader(""input.json""), mapStringObjectType);

this creates a map with three entries (with keys ""one"", ""two"", ""three""), where 
each entry value is a mostly useless instance of Object, containing of course 
no deserialized data.  This is an inconsistent result when compared to the 
first example I posted.  To be consistent, the types of the map entries values 
should be String, LazilyParsedNumber, and Boolean, with values ""won"", 2, false.

It is certainly possible for users to implement a custom deserializer for this 
scenario, however doing so somewhat defeats the entire purpose for using an API 
like Gson, and, again, the necessity to do so is inconsistent with the 
deserialization behavior of the first example I posted.

A very simple alteration to Gson to provide deserialization to Map<String, 
Object> consistent with deserialization to ObjectThings {Object one; Object 
two; Object three;} is in JsonDeserializationContext.fromJsonPrimitive(Type, 
JsonPrimitive, JsonDeserializationContext) to change 

objectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), 
visitor);

to

objectNavigator.accept(new ObjectTypePair(null, typeOfT, true), visitor);

This change introduces no new failures to the current Gson test suite.  (The 
test suite currently contains six failures based on date indexes off by one 
position.  This is not affected by the change I just described.)

An alternative solution to this problem, so as not to affect the current API 
behavior, may be the changes described above by Adrian (I don't know, as I 
didn't yet go through them), or it may be to add a configuration to GsonBuilder 
along the following lines 

public GsonBuilder enableLazyJsonPrimitiveMapValueDeserialization() {
  registerTypeHierarchyAdapter(Map.class, PRIMITIVES_AS_MAP_VALUES_TYPE_ADAPTER);
  return this;
}

with an appropriate implementation of a new MapTypeAdapter type.

If there is any interest amongst the Gson project maintainers for this change, 
I'm glad to provide an implementation along with appropriate test cases.
```

Original comment by `Programm...@gmail.com` on 13 Jun 2011 at 5:52
 =||= ```
A recent post on StackOverflow.com helps demonstrate the value of implementing 
a reasonable solution for issue 325.  http://stackoverflow.com/questions/6455303

Solution With Gson without 325 Implemented: Fugly
Solution With Jackson: 1 Line
```

Original comment by `Programm...@gmail.com` on 24 Jun 2011 at 2:21
 =||= ```
Fixed in GSON 2.0. I also answered the stackoverflow question.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:55
- Changed state: **Fixed**
 =||= ```
looks great.  thanks
```

Original comment by `adrian.f...@gmail.com` on 1 Jan 2012 at 10:57
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
326Allow fields to be json literalsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:01 PM"```
In the jclouds project, we often encounter semi-structured data.  For example, 
the structure is known to a certain depth, and after which we'd like to defer 
parsing to an extension.

For example, a json schema could be known to have attributes, which are not 
typed.  We'd like to defer parsing of these attributes.

For example, I'd like to parse the following:

{
    ""name"": ""elmo"",
    ""attributes"": {
        ""custom/1"": {
            ""favorite"": ""berries""
        },
        ""custom/2"": 1000
    }
}

into a class like this:

class Thing {
    String name;
    Map<String, String> attributes; 
}
```

Original issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 12:28""```
in jclouds we have a workaround to this which includes a wrapper type called 
JsonBall, so in the above example, it is Map<String, JsonBall> attributes.  


public class JsonBall implements java.io.Serializable, Comparable<String>, 
CharSequence {
   private final String value;

   @Override
   public String toString() {
      return value;
   }

   public JsonBall(double value) {
      this.value = value + """";
   }

   public JsonBall(int value) {
      this.value = value + """";
   }

   public JsonBall(long value) {
      this.value = value + """";
   }

   public JsonBall(String value) {
      this.value = quoteStringIfNotNumber(checkNotNull(value, ""value""));
   }

   static String quoteStringIfNotNumber(String in) {
      if (Patterns.JSON_STRING_PATTERN.matcher(in).find() && !Patterns.JSON_NUMBER_PATTERN.matcher(in).find()) {
         return ""\"""" + in + ""\"""";
      }
      return in;
   }
--snip---

We've then used registerTypeAdapter into gson to short-circuit on the JsonBall 
type. 

However, to get this type to properly serialize/deserialze, we had to create an 
internal type called JsonLiteral, adding JsonWriter.value(JsonLiteral), which 
is called by Streams.write if the element is an instanceof JsonLiteral.  The 
user-level class JsonBall and the internal class JsonLiteral are hooked 
together with type adapter below:

   public static class JsonBallAdapterImpl implements JsonSerializer<JsonBall>, JsonDeserializer<JsonBall> {

      public JsonElement serialize(JsonBall src, Type typeOfSrc, JsonSerializationContext context) {
         return new JsonLiteral(src);
      }

      public JsonBall deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
            throws JsonParseException {
         return new JsonBall(json.toString());
      }

   }



```

Original comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:36
 =||= ```
I believe that a better way would be to optionally mark members with an 
annotation ex. @Literal or something.  This would eliminate the forced type.  
Also open for any suggestions, as I'd like to eliminate the gson patches 
currently lying around in jclouds
```

Original comment by `adrian.f...@gmail.com` on 15 May 2011 at 12:38
 =||= ```
How about using JsonParser class in Gson and navigating the DOM and using Gson 
to deserialize selective elements?
```

Original comment by `inder123` on 20 May 2011 at 9:39
 =||= ```
I feel that we do not want to support a feature like this; however, here is 
some examples and documentation on how this can be achieved on your own:

http://sites.google.com/site/gson/streaming
http://code.google.com/p/google-gson/source/browse/trunk/extras/src/main/java/co
m/google/gson/extras/examples/rawcollections/RawCollectionsExample.java
```

Original comment by `joel.leitch@gmail.com` on 3 Jun 2011 at 6:29
- Changed state: **WontFix**
 =||= ```
I understand the reluctance, just I'd love to be able to properly osgify 
jclouds without the classclash issues we currently have due to this.  

I've tried again using gson 2.1, and things are certainly easier.  However, I 
can't seem to add a new JsonElement (JsonLiteral in this case) without patching 
two classes.  Maybe you have some ideas.

JsonWriter <- I'd like to be able to overload write(JsonLiteral), or otherwise 
write a string directly, but cannot as this class is new'ed directly in a few 
places.

https://github.com/jclouds/jclouds/blob/master/core/src/main/java/com/google/gso
n/stream/JsonWriter.java

Streams.write <- static method which is called by a few classes, and calls 
TypeAdapters.JSON_ELEMENT.write.  Same issue as above; I'd like to override 
this behavior.  In the mean time, I have an instance of check delegating to my 
patched version of JsonWriter above, delegating to  overloads .value()

https://github.com/jclouds/jclouds/blob/master/core/src/main/java/com/google/gso
n/internal/Streams.java

```

Original comment by `adrian.f...@gmail.com` on 2 Jan 2012 at 3:31
 =||= ```
Do you really need to add a new JsonElement type? I'd like to talk to you 
offline to understand what you can't do with the existing APIs...
```

Original comment by `limpbizkit` on 2 Jan 2012 at 5:31
 =||= ```
okie.  just sent offline mail. thx
```

Original comment by `fernc...@gmail.com` on 2 Jan 2012 at 5:51
 =||= ```
here's a valid workaroud:

https://github.com/jclouds/jclouds/blob/master/core/src/main/java/org/jclouds/js
on/internal/NullHackJsonLiteralAdapter.java
https://github.com/jclouds/jclouds/blob/master/core/src/test/java/org/jclouds/js
on/internal/NullHackJsonLiteralAdapterTest.java

Thanks tons for the help!
```

Original comment by `adrian.f...@gmail.com` on 2 Jan 2012 at 10:51
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
327support basic yaml parsingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:04 PM"```
other libraries that support yaml are extremely bad at the things you guys are 
good at. 

for example, you guys are very good at handling injecting data into classes 
with custom constructors, coercing generic types, intuitive serializers, 
deserializers.

I'm not necessarily asking for advanced yaml, with munging, etc.  mainly a 
gson-like deserializer for yaml which is as clean as you current code is, and 
clearly benefits from all the core stuff in gson that isn't json dependent.

Here's an example of what we otherwise have to deal with:

   class SelectiveConstructor extends Constructor {
      public SelectiveConstructor() {
         // define a custom way to create a mapping node
         yamlClassConstructors.put(NodeId.mapping, new MyPersistentObjectConstruct());
      }

      class MyPersistentObjectConstruct extends Constructor.ConstructMapping {
         @Override
         protected Object constructJavaBean2ndStep(MappingNode node, Object object) {
            Class type = node.getType();
            if (type.equals(MyPersistentObject.class)) {
               // create a map
               Map map = constructMapping(node);
               String id = (String) map.get(""id"");
               return new MyPersistentObject(id, 17);
            } else {
               // create JavaBean
               return super.constructJavaBean2ndStep(node, object);
            }
         }
      }
   }

   public void testConstructor() throws IOException {
      Yaml yaml = new Yaml(new SelectiveConstructor());
      List<?> data = (List<?>) yaml.load(""- 1\n- 2\n- !!examples.MyPersistentObject {amount: 222, id: persistent}"");
      // System.out.println(data);
      assertEquals(3, data.size());
      MyPersistentObject myObject = (MyPersistentObject) data.get(2);
      assertEquals(17, myObject.getAmount());
      assertEquals(""persistent"", myObject.getId());
   }
```

Original issue reported on code.google.com by `adrian.f...@gmail.com` on 15 May 2011 at 4:08""```
Yaml is outside of the scope of GSON. If you'd like to create a GSON-inspired 
YAML project, that would be great!
```

Original comment by `limpbizkit` on 1 Jul 2011 at 9:38
- Changed state: **WontFix**
 =||= ```
worth a shot :)  thx anyway
```

Original comment by `adrian.f...@gmail.com` on 1 Jul 2011 at 10:14
 =||= Will do this soon :) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
328GenericType convert problemGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:05 PM"```
What steps will reproduce the problem?
1.A class has an Object field:
public class ClassA{
    Object o;

    public Object getO() {
        return o;
    }

    public void setO(Object o) {
        this.o = o;
    }
}

2. a GenericClass like this:

public class ClassB<T> {
    T f;

    public T getF() {
        return f;
    }

    public void setF(T f) {
        this.f = f;
    }
}

3. convert a ClassA object:

ClassA obja = new ClassA();
ClassB<String> objb = new ClassB<String>();
objb.setF(""this is objB"");

List<ClassB<String>> objblist = new ArrayList<ClassB<String>>();
objblist.add(objb);
obja.setO(objblist);

System.out.println(g.toJson(obja));

What is the expected output? What do you see instead?

expected output: {""o"":[{""f"":{}}]}
actually output: {""o"":[{""f"":""this is objB""}]}


What version of the product are you using? On what operating system?
version: google-gson-1.7.0
jdk:1.6_20
os:Windows 7


```

Original issue reported on code.google.com by `liu78...@gmail.com` on 18 May 2011 at 5:35""```
This is indeed the expected output with Gson. During serialization, it writes 
out the actual object's fields instead of the specified type.
```

Original comment by `inder123` on 20 May 2011 at 9:32
 =||= ```
You can register a type hierarchy adapter for your types that limits the output 
to the specific set of fields.
```

Original comment by `inder123` on 20 May 2011 at 9:37
- Changed state: **WontFix**
 =||= ```
Register a type adapter need to know the type - the type of ClassB's field f.
Actually i do not know the type. How do i do?
```

Original comment by `liu78...@gmail.com` on 24 May 2011 at 6:08
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
329Maven build fail.Google Code ExporterGoogleCodeExporter03/19/15, 06:30:07 PM"```
What steps will reproduce the problem?
1.add maven dependency to project


I try to use 1.7.1 instead of 1.6, but error happend during project build.

Reason: Cannot find parent: org.sonatype.oss:oss-parent for project: 
com.google.code.gson:gson:jar:1.7.1 for project 
com.google.code.gson:gson:jar:1.7
.1
```

Original issue reported on code.google.com by `vitek.pa...@gmail.com` on 19 May 2011 at 3:31""```
In maven pom xml file 

 <modelVersion>4.0.0</modelVersion>
 <groupId>com.google.code.gson</groupId>
 <artifactId>gson</artifactId>
 <packaging>jar</packaging>
 <version>1.7.1</version>
 <inceptionYear>2008</inceptionYear>
 <name>Gson</name>
 <parent>
   <groupId>org.sonatype.oss</groupId>
   <artifactId>oss-parent</artifactId>
   <version>5</version>
 </parent>

I confounded...
```

Original comment by `vitek.pa...@gmail.com` on 19 May 2011 at 3:34
 =||= ```
In UserGuide I didn't see any information about parent 

Only

Using Gson with Maven2
To use Gson with Maven2/3, you can use the Gson version available in Maven 
Central by adding the following dependency:

<dependencies>
    <!--  Gson: Java to Json conversion -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>1.7.1</version>
      <scope>compile</scope>
    </dependency>
</dependencies>

That is it, now your maven project is Gson enabled. 
```

Original comment by `vitek.pa...@gmail.com` on 19 May 2011 at 3:36
 =||= ```
I dont see that error when I run maven on Gson. Can you share in detail the 
command you are running and the error you are seeing?
```

Original comment by `inder123` on 20 May 2011 at 9:26
 =||= Original comment by `inder123` on 3 Jun 2011 at 6:29
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
330EOFException in JsonReader on an empty documentGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:09 PM"```
What steps will reproduce the problem?

  public void test() throws IOException {
    JsonReader reader = new JsonReader(new StringReader(""""));
    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
  }

What is the expected output? What do you see instead?

Expected test to pass, but instead it throws an exception:

java.io.EOFException: End of input
    at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:887)
    at com.google.gson.stream.JsonReader.nextValue(JsonReader.java:787)
    at com.google.gson.stream.JsonReader.quickPeek(JsonReader.java:365)
    at com.google.gson.stream.JsonReader.peek(JsonReader.java:340)
...

What version of the product are you using? On what operating system?

GSON 1.6

Please provide any additional information below.

Interestingly, we catch EOFException in quickPeek() for the NONEMPTY_DOCUMENT 
scope, but not for the EMPTY_DOCUMENT scope.
```

Original issue reported on code.google.com by `yan...@google.com` on 2 Jun 2011 at 4:10""```
The empty string is not a valid JSON document. So strictly speaking, this is 
working as it should. But I'm tempted to support an empty document if the 
parser is lenient.
```

Original comment by `limpbizkit` on 2 Jun 2011 at 8:55
 =||= ```
I agree that it makes sense to only support an empty string if the parser is 
lenient.  That said, for the case of a non-lenient parser, I think it would be 
a better developer experience to use syntaxError() and throw an IOException 
rather than throw an EOFException.
```

Original comment by `yan...@google.com` on 2 Jun 2011 at 9:07
 =||= ```
EOFException subclasses IOException; I think you'll catch it either way.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:58
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
331Failed tests in DefaultTypeAdaptersTestGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:10 PM"```
What steps will reproduce the problem?
1. Build google-gson

What is the expected output?
No failures

What do you see instead?
testDefaultDateSerialization(com.google.gson.functional.DefaultTypeAdaptersTest)
: null expected:<""Jun 10, 2011 [7:47:38 A]M""> but was:<""Jun 10, 2011 [4:47:38 
P]M"">
testDefaultDateDeserialization(com.google.gson.functional.DefaultTypeAdaptersTes
t): expected:<13> but was:<12>
testDefaultJavaSqlDateDeserialization(com.google.gson.functional.DefaultTypeAdap
tersTest): expected:<3> but was:<2>
testDefaultJavaSqlTimestampSerialization(com.google.gson.functional.DefaultTypeA
daptersTest): null expected:<""Dec 3, 2009 1[]:18:02 PM""> but was:<""Dec 3, 2009 
1[0]:18:02 PM"">
testDefaultJavaSqlTimestampDeserialization(com.google.gson.functional.DefaultTyp
eAdaptersTest): expected:<13> but was:<4>
testDefaultJavaSqlTimeSerialization(com.google.gson.functional.DefaultTypeAdapte
rsTest): null expected:<""[01]:18:02 PM""> but was:<""[10]:18:02 PM"">
testDefaultJavaSqlTimeDeserialization(com.google.gson.functional.DefaultTypeAdap
tersTest): expected:<13> but was:<4>
testDefaultDateSerializationUsingBuilder(com.google.gson.functional.DefaultTypeA
daptersTest): null expected:<""Jun 10, 2011 [7:47:39 A]M""> but was:<""Jun 10, 
2011 [4:47:39 P]M"">

What version of the product are you using?
1.7.1

On what operating system?
Fedora 15 [x86_64]

```

Original issue reported on code.google.com by `jcapik%r...@gtempaccount.com` on 14 Jun 2011 at 4:11

Attachments:
- [com.google.gson.functional.DefaultTypeAdaptersTest.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-331/comment-0/com.google.gson.functional.DefaultTypeAdaptersTest.txt)""```
This issue was closed by revision r863.
```

Original comment by `limpbizkit` on 1 Jul 2011 at 10:00
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
332Please add support for nesting hierarchical type adapters.Google Code ExporterGoogleCodeExporter03/19/15, 06:30:11 PM"```
I'd like to add hierarchical type adapters for types like Iterable, 
ImmutableList, ImmutableSet, ImmutableMap, etc.  But that isn't currently 
possible because registerTypeHierarchyAdapter generates an error saying nesting 
of this kind isn't allowed.

This doesn't seem too hard to change and will make this feature much more 
useful.
```

Original issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:06""```
You can do this in Gson 2.1 with TypeAdapterFactory.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:57
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
333Public APIs for type introspectionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:12 PM"```
In order to write type adapters for parameterized types, it would be very 
useful to have machinery for getting the parameter types, as in 
$Gson$Types#getCollectionElementType.  The attached patch provides just such a 
generalization that can be used by authors of type adapters.
```

Original issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:09

Attachments:
- [foo.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-333/comment-0/foo.diff)""```
Basically we'd have our own copy of Guice's TypeAdapter class with all of its 
type resolution methods.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:48
- Changed title: **Public APIs for type introspection**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
I believe Guava is going to include a type introspection API in their next 
release. I recommend using that.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 8:19
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
334Add support for proxy type adaptersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:13 PM"```
Sometimes it's useful for the logical serialization of a type to be quite 
different from its physical structure.  I've come up with a simple mechanism 
for handling this situation: use of a ""proxy class"" for serialization and 
deserialization.

The way this works is that the programmer provides a class that will 
participate in serialization in place of the original type.  This ""proxy class"" 
has a constructor that can be called with an instance of the original type; 
then the resulting proxy instance is serialized.  On deserialization, the proxy 
class provides a no-argument constructor; the type adapter deserializes into a 
proxy instance, then converts it to a type instance using the required #build() 
method.

Attached are three files: (1) a definition of a type proxy; (2) a type adapter 
that implements this proxy behavior; and (3) a usage example.
```

Original issue reported on code.google.com by `c...@google.com` on 17 Jun 2011 at 10:24

Attachments:
- [TypeProxy.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/TypeProxy.java)
- [ProxyTypeAdapter.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/ProxyTypeAdapter.java)
- [ProxyExample.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-334/comment-0/ProxyExample.java)""```
Neat. This reminds me of readReplace and writeResolve in Java serialization.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 5:05
 =||= ```
This is relatively straightforward with Gson 2.1's TypeAdapters. @cph, would 
you be interested in contributing a TypeAdapter to Gson's extras/ package?
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:57
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `limpbizkit` on 18 Mar 2012 at 8:18
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
This doesn't need to be in core Gson.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:48
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
335Improve Gson error handlingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:15 PM"```
https://groups.google.com/forum/?hl=en_US#!topic/google-gson/x1Rh7GQRSxw
```

Original issue reported on code.google.com by `inder123` on 24 Jun 2011 at 12:10
- Merged into: #395""Original comment by `limpbizkit` on 29 Dec 2011 at 7:29
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
336Allow annotations to specify type adaptersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:16 PM"```
https://groups.google.com/forum/?hl=en_US#!topic/google-gson/JR-7nVdLSMA
```

Original issue reported on code.google.com by `inder123` on 26 Jun 2011 at 5:51""```
De-prioritizing this to low. We regret adding features like this to Guice. The 
fact that you can specify a type in the GSON instance and on the type means you 
need precedence rules; that's quite unpleasant. 
```

Original comment by `limpbizkit` on 2 Oct 2011 at 3:43
- Changed state: **New**
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
Sorry, probably I am missing something here. How is this a ""Guice"" feature. I 
do see the possible complications that you are talking about, but I do have 
belief unpleasantness could be hidden in the implementation and not exposed to 
user through too much semantics. 
If you think I am not missing too much, then I could probably work on a 
proposal to help explain better, let me know.

Thanks !
guru


```

Original comment by `guru...@gmail.com` on 2 Oct 2011 at 5:24
 =||= ```
Guice has two ways to attach a provider to a type. In the central Injector:
 A. bind(Foo.class).to(DatabaseFoo).class;
or on the type itself:
 B. @ImplementedBy(DatabaseFoo.class)
    class Foo {...}

Approach B loses because it means sometimes configuration is in the central 
place and sometimes its on the types. So you never get a full picture of the 
application's configuration.
```

Original comment by `limpbizkit` on 2 Oct 2011 at 9:57
 =||= ```
I still don't think this is a good idea for the framework. But with Gson 2.1's 
TypeAdapterFactory type, you can do this yourself if you want in only a few 
lines of code.
```

Original comment by `limpbizkit` on 30 Dec 2011 at 6:47
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
337Fix documentation related to streaming classesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:17 PM"```
https://groups.google.com/forum/#!topic/google-gson/d9LTaCH4sNQ
```

Original issue reported on code.google.com by `inder123` on 26 Jun 2011 at 8:16""```
It's the reporter's mistake. He was using an old version of GSON that didn't 
have JsonReader.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:42
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
338Exception java.lang.NoClassDefFoundErrorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:18 PM"```
What steps will reproduce the problem?
1.I write a simple Java package game extension for Smartfox Server 2x using 
Gson and get the exception java.lang.NoClassDefFoundError: com/google/Gson. But 
using unzip sources there's no error found.
2.
3.

What is the expected output? What do you see instead?
I don't know while ClassLoader can not find class def.

What version of the product are you using? On what operating system?
I use Eclipse Helios

Please provide any additional information below.
I think maybe Gson has loaded somewhere and try to follow this article 
http://www.gitshah.com/2011/04/fixing-javalangclassnotfoundexception.html but 
nothing changes.
```

Original issue reported on code.google.com by `langxangvn` on 27 Jun 2011 at 3:48""```
This looks like a class path problem. You should make sure that the GSON .jar 
file is on your application's class path.
```

Original comment by `limpbizkit` on 1 Jul 2011 at 9:52
- Changed state: **Invalid**
 =||= ```
I assure the .jar in the application's class path. There're no errors when I 
export the library as .jar file in Eclipse. I have the  IntelliSense 
(auto-complete) for GSON too. The errors appear at the run-time.
```

Original comment by `langxangvn` on 2 Jul 2011 at 5:19
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
339POM schema has wrong scm urlGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:19 PM"```
This is a minor issue,

What steps will reproduce the problem?

The pom schema contains
<scm>
...
   <url>http://google-gson.codegoogle.com/svn/trunk/gson</url>
</scm>

What is the expected output? What do you see instead?

should be

<url>http://google-gson.googlecode.com/svn/trunk/gson</url>

(change of codegoogle to googlecode)

What version of the product are you using? On what operating system?
source revision r857
```

Original issue reported on code.google.com by `jkirschn...@gmail.com` on 29 Jun 2011 at 3:48""```
This issue was closed by revision r862.
```

Original comment by `inder123` on 1 Jul 2011 at 9:59
- Changed state: **Fixed**
 =||= ```
Thanks for the bug report.
Fixed in r862 
```

Original comment by `inder123` on 1 Jul 2011 at 10:00
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
340Serialization and Deserialization of Type and ClassGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:20 PM"```
I have a class like 

Class Function {

public int functionId;
public Type functionId;
public String functionName

}

public void static main ()
{
                Function fc= new Function();        
        fc.functionId(100);
        fc.functionName(""Divide"");

        Type tmp = new Integer(100).getClass();
        Gson gson = new GsonBuilder.create();
        System.out.println(gson.togson(fc) );
}


I am getting {} ie null for functionType Filed.
What is the issue here ? am I missing something

```

Original issue reported on code.google.com by `DRDO.YOG...@gmail.com` on 1 Jul 2011 at 5:23""```
Please post coding questions like this on our Google Group 
(https://groups.google.com/forum/#!forum/google-gson) instead of creating bug 
reports.

Not sure if your example is correct. Here are a few suggestions:
new GsonBuilder().create() is same as new Gson()

You are not using Type tmp anywhere. 
In any case, you can get it simply as: Integer.class or int.class

gson.toJson() should print all the fields of Function. Please post complete 
working code on Google group and someone will be able to help you better.
```

Original comment by `inder123` on 1 Jul 2011 at 9:54
- Changed state: **Invalid**
 =||= ```
Serializing types is actually somewhat of a security problem, so we don't want 
to support it by default. A malicious .json file could cause your application 
to load classes that it wouldn't otherwise; depending on your class path 
loading certain classes could DoS your application.

But it's quite straightforward to write a type adapter to support this in your 
own app.
```

Original comment by `limpbizkit` on 1 Jul 2011 at 9:56
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
341"Gson should escape \u2028"Google Code ExporterGoogleCodeExporter03/19/15, 06:30:21 PM"```
What steps will reproduce the problem?
1. Serve a json response containing unicode character \u2028 
2. In javascript, eval(""("" + jsonResult + "")"")

What is the expected output? 
json is correctly parsed

What do you see instead?
SyntaxError -unterminated string literal

What version of the product are you using? On what operating system?
Firefox and chrome

See also:
http://bulknews.typepad.com/blog/2009/02/json-jquery-and-some-unicode-characters
-u2028.html
https://issues.apache.org/jira/browse/SOLR-1936

```

Original issue reported on code.google.com by `cb...@google.com` on 6 Jul 2011 at 6:45""```
This issue was closed by revision r868.
```

Original comment by `limpbizkit` on 12 Jul 2011 at 4:05
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
342Cannot Serialize Object[] of String[]'sGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:22 PM"```
What steps will reproduce the problem?
1. new Gson().toJson(new Object[]{new String[]{""test1"", ""test2""}, new 
String[]{""test3"", ""test4""}})
2. output: [{},{}]

What is the expected output? What do you see instead?
Expected output: [[""test1"",""test2""],[""test3"",""test4""]]
The output I'm seeing instead is: [{},{}]

What version of the product are you using? On what operating system?
Version: 1.7.1
OS: Windows 7

Please provide any additional information below.
A LinkedList<String[]> will be correctly serialized but if you convert it to 
"".toArray()"" which gives you an Object[] that Object[] will give you an 
incorrect output when serialized.

```

Original issue reported on code.google.com by `jamespwa...@gmail.com` on 6 Jul 2011 at 10:04""```
Fixed in GSON 2.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:19
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
343Create Facebook page, facebook like buttons, Google +1 buttons, and Tweet buttons for GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:22 PM"```
Something similar to what http://code.google.com/p/acra/ has done would be good.

We should also consider creating a survey like them.
```

Original issue reported on code.google.com by `inder123` on 8 Jul 2011 at 7:04""```
We have the +1 button; that's enough for me.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 8:27
- Changed state: **Done**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
345Use Streams.write() instead of EscaperGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:23 PM"```
We have two different code paths for converting strings to JSON. We should only 
have one.
```

Original issue reported on code.google.com by `limpbizkit` on 12 Jul 2011 at 11:35""```
This issue was closed by revision r870.
```

Original comment by `limpbizkit` on 12 Jul 2011 at 11:50
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
346Double brace initialization not workingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:24 PM"```
Map<String, List<String>> jsonData = new HashMap<String, List<String>>();
jsonData.put(""test"", new ArrayList<String>() {
    {
        add(""1"");
        add(""2"");
        add(""3"");
    }
});
System.out.println(new Gson().toJson(jsonData));
//OUTPUT = {}


Map<String, List<String>> jsonData = new HashMap<String, List<String>>();
ArrayList<String> list = new ArrayList<String>();
list.add(""1"");
list.add(""2"");
list.add(""3"");
jsonData.put(""test"", list);
System.out.println(new Gson().toJson(jsonData));

//OUTPUT = {""test"":[""1"",""2"",""3""]}
```

Original issue reported on code.google.com by `neyas...@gmail.com` on 13 Jul 2011 at 9:39
- Merged into: #298""```
The fundamental problem is that you aren't supplying GSON with enough type 
information and so it has to infer the type from the value. You can work-around 
this by providing the type in your call to toJson():

  String json = gson.toJson(jsonData, new TypeToken<Map<String, List<String>>>() {}.getType()));

We still have a problem where GSON never serializes anonymous classes, which is 
an unfortunate policy in this instance.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:40
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= Original comment by `limpbizkit` on 2 Oct 2011 at 3:38
- Changed state: **Duplicate**
 =||= ```
Issue 370 has been merged into this issue.
```

Original comment by `limpbizkit` on 19 Oct 2011 at 4:30
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
347Add support of @SerializedName to enumsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:26 PM"```
Usually, by naming conventions, enum members have all letters in uppercase. If 
the serialized object has the field of the enum type, then it gets serialized 
as an uppercase string. Gson ignores the annotation  @SerializedName on the 
enum.

See example:

{{{
public enum Status {
  @SerializedName(""placed"")
  PLACED,

  @SerializedName(""settled"")
  SETTLED,

  @SerializedName(""disputed"")
  DISPUTED,

  @SerializedName(""refunded"")
  REFUNDED,

  @SerializedName(""canceled"")
  CANCELED;
}

}}}
```

Original issue reported on code.google.com by `illarion.kovalchuk` on 14 Jul 2011 at 11:11""```
Issue 363 has been merged into this issue.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:23
 =||= ```
This issue was closed by revision r1078.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:32
- Changed state: **Fixed**
 =||= ```
Fixed. Apologies for the delay!
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:33
 =||= ```
sads
```

Original comment by `Sezgin8...@gmail.com` on 31 Jan 2014 at 3:07
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
349Json attribute tag is not supportedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:31 PM"```
What steps will reproduce the problem?
1. create a json object from xml file with json-lib's xmlserializer
2. for an attribute in xml element, the created json object will have a field 
name as '@xxxx'. 
3. I tried to build a java object from that json (using @SerializedName) but 
was told the @xxx is an invalidate json name

What is the expected output? What do you see instead?
Treat it as validate name because a lot of json converters create such field 
name. 


What version of the product are you using? On what operating system?
gson 1.6 on linux


Please provide any additional information below.

```

Original issue reported on code.google.com by `jdai%rea...@gtempaccount.com` on 26 Jul 2011 at 7:11""```
Fixed in GSON 2.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:22
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
350Generiz-ed type are not well serializedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:31 PM"```
What steps will reproduce the problem?
1. Create a generic-ized class containing a generic-ized collection
2. Try to serialize it via Gson.toJson()
Example:
    public class MyObject<T> {
        public List<T> foo;
    }

MyObject<String> o = new MyObject<String>();
o.foo = new ArrayList<String>();
o.foo.add(""bar""); o.foo.add(""baz"");
new Gson().toJson(o); // returns { ""foo"": [{},{}] } instead of { ""foo"": 
[""bar"",""baz""] }

What is the expected output? What do you see instead?
I would expect that GSon would consider each instances of my collection, or 
eventually, an exception saying it is not yet implemented.
Instead, the serialization seems to be ok, and I have an ""empty object"" for 
each of the collection elements, instead of the plain representation of the 
object.

What version of the product are you using? On what operating system?
GSon 1.7.1

Please provide any additional information below.
Unit test attached reproducing the problem.
```

Original issue reported on code.google.com by `fcamb...@gmail.com` on 28 Jul 2011 at 3:15

Attachments:
- [JSonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-350/comment-0/JSonTest.java)""```
You need to use the two-arg form of Gson.toJson():
  new Gson().toJson(o, new TypeToken<<MyObject<String>>() {});
Otherwise GSON doesn't have the type information that it needs to do a good job.
```

Original comment by `limpbizkit` on 29 Jul 2011 at 4:23
- Changed state: **Invalid**
 =||= ```
Ok I just learnt I was confused between compile time and runtime valorization 
of parameteried types (if we use List<String> as an attribute in a class it 
will work well).

However, wouldn't be worth to throw an exception instead of  serializing an 
empty object when we are in such a case where no TypeToken is given on a 
generic type ?
```

Original comment by `fcamb...@gmail.com` on 29 Jul 2011 at 7:10
 =||= ```
@fcamblor yeah, I agree that our behavior is confusing. Often the current 
behavior is useful when you're serializing a giant graph of things and you 
don't necessarily care about everything.
```

Original comment by `limpbizkit` on 29 Jul 2011 at 1:25
 =||= ```
Issue 351 has been merged into this issue.
```

Original comment by `limpbizkit` on 2 Aug 2011 at 6:22
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
351Serialization of generic collections is brokenGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:33 PM"```
class Test {
    static class Dummy1 {
        List<String> str = Arrays.asList(""Test"");
    }

    static class Dummy2 {
        List str = Arrays.asList(""Test"");
    }

    static class Dummy3<T> {
        List<T> str;

        public Dummy3(List<T> str) {
            super();
            this.str = str;
        }
    }

    public static void main(String[] args) {
        System.out.println(new Gson().toJson(new Dummy1()));
        System.out.println(new Gson().toJson(new Dummy2()));
        System.out
                .println(new Gson().toJson(new Dummy3(Arrays.asList(""Test""))));
    }   
}

Expected output:
{""str"":[""Test""]}
{""str"":[""Test""]}
{""str"":[""Test""]}

Got:
{""str"":[""Test""]}
{""str"":[""Test""]}
{""str"":[{}]}

I find it really awkward

I figured out the reason is that `CollectionTypeAdapter` resolves 
`childGenericType` to `T`. It would be perfect if it simply serialized 
collections as if they were not generic at all.
```

Original issue reported on code.google.com by `konrad.g...@gmail.com` on 1 Aug 2011 at 4:05
- Merged into: #350""```
You need to use the two-arg form of Gson.toJson():
  new Gson().toJson(o, new TypeToken<<Dummy3<String>>() {});
Otherwise GSON doesn't have the type information that it needs to do a good job.

```

Original comment by `limpbizkit` on 2 Aug 2011 at 6:22
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
352Can't register a custom Date serializerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:33 PM"```
What steps will reproduce the problem?
1. Create a DateAdapter
public class DateAdapter implements JsonSerializer<Date>, 
JsonDeserializer<Date> {

    @Override
    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {
        if(src == null) {
            return new JsonNull();
        }
        return new JsonPrimitive(src.getTime());
    }

    @Override
    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        if(json.isJsonNull()) {
            return null;
        }
        if(!json.isJsonPrimitive() || !json.getAsJsonPrimitive().isNumber()) {
            throw new JsonParseException(""Invalid type for Date, must be a numeric timestamp!"");
        }

        return new Date(json.getAsLong());
    }

}

2. Register it using GsonBuilder.registerTypeAdapter
Gson gson = new GsonBuilder()
        .registerTypeAdapter(Date.class,new DateAdapter())
                .create();

3. Execute test cases

    public void testDateDeserialization() throws Exception {
        assertEquals(null, gson.fromJson(""null"", Date.class));
        assertEquals(new Date(10), gson.fromJson(""10"", Date.class));
    }

    public void testDateSerialization() throws Exception {
        assertEquals(null, gson.toJson(null, Date.class));
        assertEquals(""10"", gson.toJson(new Date(10), Date.class));
    }


What is the expected output? What do you see instead?
 These test cases were passing when using gson-1.4, upgraded to gson-1.7.1 and they started failing.

What version of the product are you using? On what operating system?
  Upgrading from gson-1.4 to gson-1.7.1 introduced the issue.

Please provide any additional information below.
  Since Date does not contain a timezone, I find transmitting it as a long (milliseconds since epoch UTC) much less error prone, if I could enable this behavior again I would really appreciate that. Thanks.
```

Original issue reported on code.google.com by `tedj...@gmail.com` on 3 Aug 2011 at 9:17""```
Sorry, seems to be an issue with my build process, that test started passing 
again. Failed on both my machine and the build server, but it was spurious, 
sorry for the noise.
```

Original comment by `tedj...@gmail.com` on 3 Aug 2011 at 9:23
 =||= ```
I pulled it together in one test case, it's registerTypeHierarchyAdapter which 
can't be used for Date. I'ld unpost the bug if I could, but I can't, so here is 
a test case that exercises it.
```

Original comment by `tedj...@gmail.com` on 3 Aug 2011 at 9:36

Attachments:
- [TestDateAdapter.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-352/comment-2/TestDateAdapter.java)
 =||= ```
So registerTypeHierarchyAdapter isn't working on Date.class? Sounds like it 
could be a real problem.
```

Original comment by `limpbizkit` on 4 Aug 2011 at 6:43
 =||= ```
No, you can't registerTypeHiearchyAdapter on Date.class. Try the test case. I'm 
not sure what intended behavior would be, but  because there is an implicit 
adapter added specifically for Date.class in the GsonBuilder regardless of 
whether or not you call .setDateFormat, you can't register a hiearchy adapter. 
This may be an issue if you use javax.sql.Date.
```

Original comment by `tedj...@gmail.com` on 5 Aug 2011 at 3:09
 =||= ```
it's a problem. you can just not serialize date to a long value
```

Original comment by `chenzhikong@gmail.com` on 5 Sep 2011 at 3:43
 =||= ```
[deleted comment]
```
 =||= ```
This issue was closed by revision r1097.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:27
- Changed state: **Fixed**
 =||= ```
Fixed in Gson 2.1.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 7:27
 =||= ```
Still seeing this in Gson 2.2.4.
```

Original comment by `Guy.Padd...@gmail.com` on 28 Sep 2013 at 8:55
 =||= ```
[deleted comment]
```
 =||= ```
I'm still observing that in Gson 2.3.
```

Original comment by `tobo...@gmail.com` on 17 Dec 2014 at 12:49
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
353JsonArray has no remove/setGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:37 PM"```
It would be nice if, like JsonObject, we could set and remove elements within a 
JsonArray.  

i.e.,

  public JsonElement remove(int index) {
    if(index < 0 || index >= elements.length)
         return new IndexOutOfBoundsException();
    return elements.remove(index);
  }

  public JsonElement set(int index,JsonElement je) {
    if(index < 0 || index >= elements.length)
         return new IndexOutOfBoundsException();
    return elements.set(je);
  }
```

Original issue reported on code.google.com by `dave.f.b...@gmail.com` on 3 Aug 2011 at 10:37""```
Joel, you've been thinking of doing builders for these?
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:11
 =||= Original comment by `limpbizkit` on 29 Dec 2011 at 5:34
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
I am also looking for ways to remove an element from JsonArray.
```

Original comment by `zacha...@gmail.com` on 9 Jul 2012 at 5:01
 =||= ```
I am also looking for it. Please add it soon.
```

Original comment by `nani4...@gmail.com` on 12 Sep 2012 at 7:37
 =||= ```
I too am looking for it.
```

Original comment by `lahiri.r...@gmail.com` on 4 Oct 2012 at 12:49
 =||= ```
I think this is something that really should be in the next release. It seems 
weird that you can only add elements and not remove them.
```

Original comment by `Lucas.Li...@gmail.com` on 26 Mar 2014 at 1:56
 =||= ```
I think we should fix this by adding remove methods.
```

Original comment by `inder123` on 2 Jul 2014 at 5:59
- Changed state: **Accepted**
 =||= ```
Added remove and contains in 
http://code.google.com/p/google-gson/source/detail?r=1281
```

Original comment by `inder123` on 2 Jul 2014 at 6:22
 =||= ```
Added set method in http://code.google.com/p/google-gson/source/detail?r=1282
```

Original comment by `inder123` on 2 Jul 2014 at 6:30
- Changed state: **Fixed**
 =||= ```
The set method returns void but the documentation says:
@return the element previously at the specified position
```

Original comment by `buchholz...@googlemail.com` on 4 Jul 2014 at 4:13
 =||= ```
Good catch Buchholz. Fixed in r1285
```

Original comment by `inder123` on 4 Jul 2014 at 5:32
 =||= Can you please  add a clear() method that removes all the elements from the JSONArray.
 =||= send a pull request. Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
354Threading issue in FieldAttributes?Google Code ExporterGoogleCodeExporter03/19/15, 06:30:40 PM"```
We're using gson on a high-load system, and when we recently bumped version to 
1.7.1 we're starting having sporadic exceptions as shown in the following 
stacktrace:

java.lang.NullPointerException
        at com.google.gson.FieldAttributes.getAnnotationFromArray(FieldAttributes.java:231)
        at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:150)
        at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:45)
        at com.google.gson.JsonSerializationVisitor.addChildAsElement(JsonSerializationVisitor.java:132)
        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:206)
        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
        at com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializationVisitor.java:147)
        at com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVisitor.java:127)
        at com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisitor.java:114)
        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)
        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)
        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)
        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)
        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:643)
        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:624)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)
        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:204)
        at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        at com.google.gson.BaseMapTypeAdapter.serialize(BaseMapTypeAdapter.java:34)
        at com.google.gson.MapTypeAdapter.serialize(MapTypeAdapter.java:53)
        at com.google.gson.MapTypeAdapter.serialize(MapTypeAdapter.java:33)
        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:184)
        at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:160)
        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)
        at com.google.gson.Gson.toJsonTree(Gson.java:220)
        at com.google.gson.Gson.toJson(Gson.java:260)
...

This doesn't happen all the time, even with the same data. The exception always 
appears on portions of code that are ran in a thread pool, and each worker 
shares the same GsonBuilder.
```

Original issue reported on code.google.com by `aba...@gmail.com` on 4 Aug 2011 at 3:19""```
This is fixed in source. It'll be available in the next GSON release.
```

Original comment by `limpbizkit` on 5 Aug 2011 at 10:45
- Changed state: **Started**
 =||= ```
When is planned to put Gson 1.7.2 at the market?
The Roadmap states that it was intended to July 2011.
```

Original comment by `Ricardo....@gmail.com` on 24 Aug 2011 at 7:32
 =||= ```
[deleted comment]
```
 =||= ```
I've been getting exactly the same exception, again since upgrading to 1.7.1.

I'm glad that it is fixed in the next release. Any idea of when that might be?

If this isn't due soon, any chance you could point me at the svn revision where 
the fix was made, so that I can do a custom patch whilst I'm waiting.
```

Original comment by `t.denley` on 29 Aug 2011 at 9:21
 =||= ```
Since I couldn't wait for a new version of Gson and using an svn snapshot is 
out of the question, I switched to Jackson. Its interface it's pretty similar 
to that of Gson.
```

Original comment by `aba...@gmail.com` on 29 Aug 2011 at 11:50
 =||= ```
You can grab GSON 1.7.2 source here:
http://code.google.com/p/google-gson/source/browse/tags/gson-1.7.2/

I'll talk to our Maven guy to upload a Maven-built binary.
```

Original comment by `limpbizkit` on 29 Aug 2011 at 9:51
 =||= ```
Thanks limpbiz, a 1.7.2 release binary would be fantastic.
```

Original comment by `t.denley` on 30 Aug 2011 at 10:21
 =||= ```
any news on that binary?
```

Original comment by `t.denley` on 5 Sep 2011 at 10:07
 =||= ```
Any news?
```

Original comment by `Ricardo....@gmail.com` on 17 Sep 2011 at 1:44
 =||= ```
Any updates?
```

Original comment by `matt.hug...@gmail.com` on 17 Sep 2011 at 6:37
 =||= ```
I am our Maven guy but I dont quite know how to do a release from a subversion 
tagged version. As you probably know, the main Gson tree has digressed 
substantially. If someone can help me figure out how to do 1.7.2, I am happy to 
do so.

Otherwise, we will have to wait for the next release, Gson 2.0. However, that 
is probably a few weeks away.
```

Original comment by `inder123` on 17 Sep 2011 at 9:14
 =||= ```
You can try

mvn release:perform 
-DconnectionUrl=scm:svn:https://google-gson.googlecode.com/svn/tags/gson-1.7.2


```

Original comment by `car...@carlossanchez.eu` on 30 Sep 2011 at 4:27
 =||= ```
btw for more info 
http://maven.apache.org/plugins/maven-release-plugin/examples/perform-release.ht
ml

```

Original comment by `car...@carlossanchez.eu` on 30 Sep 2011 at 4:29
 =||= ```
Thanks for the instructions on releasing a specific version of Gson!
I have now completed the promotion of Gson 1.7.2 to Maven Central. Should sync 
in about an hour. 
```

Original comment by `inder123` on 30 Sep 2011 at 7:07
- Changed state: **Fixed**
 =||= ```
Fantastic. thanks.
```

Original comment by `t.denley` on 30 Sep 2011 at 7:18
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
355Deserialization of a specified Json into an object of type Map<String, Set<Long>>Google Code ExporterGoogleCodeExporter03/19/15, 06:30:43 PM"```
What steps will reproduce the problem?
1. Create a Json Object with data of type Map<String, Set<Long>>
2. Deserialize above created Json object back to Map<String, Set<Long>> type
3.

What is the expected output? What do you see instead?
Expected:
Same Map has to be reproduced.

Actual:
Exception in thread ""main"" com.google.gson.JsonParseException: The 
JsonDeserializer 
com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter@1eec612 failed to 
deserialize json object ""[1313490105362, 1313490105363]"" given the type 
java.util.TreeSet<java.lang.Long>
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:64)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)
    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:80)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonPrimitive(JsonDeserializationContextDefault.java:85)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:56)
    at com.google.gson.MapTypeAdapter.deserialize(MapTypeAdapter.java:68)
    at com.google.gson.MapTypeAdapter.deserialize(MapTypeAdapter.java:33)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)
    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:80)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)
    at com.google.gson.Gson.fromJson(Gson.java:551)
    at com.google.gson.Gson.fromJson(Gson.java:498)
    at com.google.gson.Gson.fromJson(Gson.java:467)
    at com.google.gson.Gson.fromJson(Gson.java:417)
    at TestClass.main(TestClass.java:50)
Caused by: java.lang.IllegalStateException: This is not a JSON Array.
    at com.google.gson.JsonElement.getAsJsonArray(JsonElement.java:99)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:659)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)
    ... 18 more

What version of the product are you using? On what operating system?
gson-1.7.1

Please provide any additional information below.

```

Original issue reported on code.google.com by `vinayasi...@gmail.com` on 16 Aug 2011 at 10:18""```
I couldn't reproduce this.


    Map<String, Set<Long>> m = new HashMap<String, Set<Long>>();
    m.put(""a"", new TreeSet<Long>(Arrays.asList(1L, 2L, 3L)));
    m.put(""b"", new TreeSet<Long>(Arrays.asList(4L, 5L, 6L)));

    String s = new Gson().toJson(m);
    System.out.println(s);

    Object value = new Gson().fromJson(s, new TypeToken<Map<String, Set<Long>>>() {}.getType());
    System.out.println(value);

```

Original comment by `limpbizkit` on 1 Oct 2011 at 5:10
- Changed state: **WontFix**
 =||= ```
Issue is string representation of ""JSONObject.toString()"" is different from the 
""Gson().toString()"". For example

Gson().toString() gives below output:

{""b"":[4,5,6],""a"":[1,2,3]}

JSONObject.toString() gives below output:

{""b"":""[4, 5, 6]"",""a"":""[1, 2, 3]""}

Code for reproducing the issue: 

    Map<String, Set<Long>> m = new HashMap<String, Set<Long>>();
    m.put(""a"", new TreeSet<Long>(Arrays.asList(1L, 2L, 3L)));
    m.put(""b"", new TreeSet<Long>(Arrays.asList(4L, 5L, 6L)));

    JSONObject json = new JSONObject(m);
    String s = json.toString();
    System.out.println(s);

    Object value = new Gson().fromJson(s, new TypeToken<Map<String, Set<Long>>>() {}.getType());
    System.out.println(value);
```

Original comment by `vinayasi...@gmail.com` on 2 Oct 2011 at 11:54
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
357links in user guide brokenGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:45 PM"```
What steps will reproduce the problem?
1. go to https://sites.google.com/site/gson/gson-user-guide#TOC-Using-Gson
2. try the links to GsonBuilder, etc. -- all broken
```

Original issue reported on code.google.com by `er...@mediamods.com` on 23 Aug 2011 at 2:47""Original comment by `limpbizkit` on 23 Aug 2011 at 7:23
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
358Patch for /trunk/examples/android-proguard-example/proguard.cfgGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:46 PM"```
-keepattributes *Annotation*
In case of using GSON @Expose annotation
```

Original issue reported on code.google.com by `synte...@syntezzz.ru` on 23 Aug 2011 at 3:21

Attachments:
- [proguard.cfg.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-358/comment-0/proguard.cfg.patch)""```
This issue was closed by revision r1077.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:18
- Changed state: **Fixed**
 =||= ```
Thanks!
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:18
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
359JsonObject#getAsString() throws UnsupportedOperationExceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:47 PM"```
Gson version 1.7.1

```

Original issue reported on code.google.com by `ahmed.ye...@gmail.com` on 27 Aug 2011 at 3:33""```
As designed.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:18
- Changed state: **WontFix**
 =||= ```
Why is it as designed?

```

Original comment by `orbf...@gmail.com` on 28 Jan 2015 at 11:00
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
360Error in JsonSerializer and JsonDeserializer documentation.Google Code ExporterGoogleCodeExporter03/19/15, 06:30:47 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:03""```
Sorry, I hit the return key while entering the title, and it submitted my bug 
report.  (I'm not sure that's the best interface, but oh well.)

In any case, here's the problem.  The documentation for the JsonSerializer 
interface shows this example:

class IdSerializer implements JsonSerializer<Id>() {
  public JsonElement toJson(Id id, Type typeOfId, JsonSerializationContext context) {
    return new JsonPrimitive(id.getValue());
  }
}

The method should be named ""serialize"" and not ""toJson"".  A similar mistake 
appears in the JsonDeserializer documentation.
```

Original comment by `von...@gmail.com` on 31 Aug 2011 at 5:04
 =||= ```
This issue was closed by revision r989.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 4:09
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
361Strange example in the user guideGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:48 PM"```
The user guide shows this example:

List<String> myStrings = new List<String>();
gson.toJson(myStrings); // Will cause a runtime exception

gson.fromJson(json, myStrings.getClass());


This example has a few issues.
1.) List is an interface and does not have a constructor.  (Not a big deal, but 
I figured I should mention it.)
2.) The `json` and the `gson` variables are undefined.  (I assume the second 
line is supposed to define and initialize the value of `json`.)
3.) Even if you correct these mistakes, this code does not throw a runtime 
exception. (But the comment in the exmaple insists that it will.)  For example:

import java.util.*;
import com.google.gson.*;

public class Test
{
    public static void
    main(String[] args)
    {        
        Gson gson = new Gson();
        List<String> myStrings = new ArrayList<String>();
        String json = gson.toJson(myStrings); // Will cause a runtime exception
        Object ans = gson.fromJson(json, myStrings.getClass());

        System.out.println(ans);
        /*
            expected output:
                runtime exception (according to the user guide)

            actual output:
                []
        */
    }
}

```

Original issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:08""```
Thanks for reporting the mistakes. I have corrected them. 
A very early version of Gson (1.x) was unable to handle any type of list 
without type parameter for toJson(). The newer versions of Gson would actually 
be able to handle a list of primitives just fine.
```

Original comment by `inder123` on 16 Dec 2011 at 6:20
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
362Gson.toJson(Object) emits surprising results for JsonElement valuesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:49 PM"```
This may not be a bug, but the behavior surprised me (so I figured I should 
mention it).

The Gson.toJson(Object) method handles JsonElement values differently than the 
Gson.toJson(JsonElement) method.  This can come up when you have heterogeneous 
collections, for example, where only some (but not all) of the elements are 
JsonElement values.

Here's a sample program.

import com.google.gson.*;

public class Test
{
    public static void
    main(String[] args)
    {
        String input = ""{\""name\"": \""lars\"", \""age\"": 12}"";
        Object obj = new JsonParser().parse(input).getAsJsonObject();       
        String output = new Gson().toJson(obj);

        System.out.println(output);
        /*
            expected output:
                either `{""name"":""lars"",""age"":12}`
                or `{""age"":12,""name"":""lars""}`

            actual output:
                `{""members"":{""name"":{""value"":""lars""},""age"":{""value"":12}}}`
        */
}

(In case it's not clear, I was surprised to see the `members` and the `value` 
fields in the output.)
```

Original issue reported on code.google.com by `von...@gmail.com` on 31 Aug 2011 at 5:14""```
This issue was closed by revision r991.
```

Original comment by `limpbizkit` on 2 Oct 2011 at 5:00
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
363Cannot map a field value to an enum value if value is a keywordGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:49 PM"```
What steps will reproduce the problem?
1. For a json object { visibility : ""public"" }
2. Create an enum with a value of public.
eg: enum Visibility { PUBLIC, PRIVATE }
3. Create a member variable private Visibility visibility;
4. Run your fromJson(...)

Other parsers allow you to use the toString or name methods of an enum to 
determine value instead of calling valueOf(String) as a builder config.  This 
would be great.

What is the expected output? What do you see instead?
Parse exception.
com.google.gson.JsonParseException: The JsonDeserializer EnumTypeAdapter failed 
to deserialize json object ""public"" given the type class 
com.williamvanderhoef.foursquare.types.Photo$Visibility
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:64)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)
    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)
    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:663)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:663)
    at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTypeAdapters.java:624)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)
    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:92)
    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:117)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:63)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)
    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)
    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:110)
    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:99)
    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:63)
    at com.google.gson.ReflectingFieldNavigator.visitFieldsReflectively(ReflectingFieldNavigator.java:69)
    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:120)
    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:76)
    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:54)
    at com.google.gson.Gson.fromJson(Gson.java:551)
    at com.google.gson.Gson.fromJson(Gson.java:498)
    at com.google.gson.Gson.fromJson(Gson.java:467)
    at com.google.gson.Gson.fromJson(Gson.java:417)
    at com.williamvanderhoef.foursquare.GsonResultsLoader.parse(GsonResultsLoader.java:35)
    at com.williamvanderhoef.foursquare.test.ListsTest.setUp(ListsTest.java:76)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
    at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
    at org.junit.runners.Suite.runChild(Suite.java:128)
    at org.junit.runners.Suite.runChild(Suite.java:24)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.IllegalArgumentException: No enum const class 
com.williamvanderhoef.foursquare.types.Photo$Visibility.public
    at java.lang.Enum.valueOf(Unknown Source)
    at com.google.gson.DefaultTypeAdapters$EnumTypeAdapter.deserialize(DefaultTypeAdapters.java:524)
    at com.google.gson.DefaultTypeAdapters$EnumTypeAdapter.deserialize(DefaultTypeAdapters.java:514)
    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:51)
    ... 76 more



What version of the product are you using? On what operating system?
1.6 on Windows xp

Please provide any additional information below.

```

Original issue reported on code.google.com by `william....@gmail.com` on 1 Sep 2011 at 5:44
- Merged into: #347""```
This also fails on 1.7.1
```

Original comment by `william....@gmail.com` on 1 Sep 2011 at 5:44
 =||= Original comment by `limpbizkit` on 16 Dec 2011 at 5:23
- Changed state: **Duplicate**
 =||= ```
Fixed!
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:33
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
364final transient list initializers aren't executedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:51 PM"```
What steps will reproduce the problem?
1.Create a class without a no-arg constructor
2.Give the class a final transient List<String> initialized at declaration
3.Convert to json, and back.

What is the expected output? What do you see instead?
The transient list should have an empty length array.

What version of the product are you using? On what operating system?
GSON 1.7.1, Windows XP, Java 1.7.

Please provide any additional information below.
If there's a no-arg constructor, it's fine. But without one, the transient 
field isn't initialized. Here's an example that shows the problem:

public class NullTransient
{
    public static final Gson GSON;
    static {
        GsonBuilder builder = new GsonBuilder();
        builder.setPrettyPrinting();
        GSON = builder.create();
    }

    final int x;
    final transient List<String> aList = new ArrayList<>();
    NullTransient( int y )
    {
        x = y;
    }

    public static void main( String[] args )
    {
        NullTransient b = new NullTransient( 1 );
        String asJson = GSON.toJson( b );
        NullTransient c = GSON.fromJson( asJson, NullTransient.class );
        System.out.println( b.aList );
        System.out.println( c.aList );
    }
}

Output:
[]
null  <-- this is wrong, it should be an empty list.

You end up in an odd spot where you have a final field that wasn't initialized 
and you can't initialize it later because it's final.
```

Original issue reported on code.google.com by `crkes...@gmail.com` on 6 Sep 2011 at 3:08""```
I faced the same problem, issue #366
```

Original comment by `hussain.mutawa` on 24 Sep 2011 at 3:59
 =||= ```
The core problem is that GSON is constructing your object without executing any 
code, so everything defaults to null. To work around you'll need to add a 
no-args constructor.
```

Original comment by `limpbizkit` on 1 Oct 2011 at 5:12
- Changed state: **WontFix**
 =||= @googlecodeexporter You mention that adding a no-args constructor is a workaround. Would a patch be accepted that actually fixed this functionality for objects that don't have a no-args constructor (I'm thinking specifically in this case objects with no constructor specified), or do you think this is a problem that can't be fixed for some other reason?

It just seems more intuitive to me to have a class with no constructor defined, but with transient members should function in a similar way to the same class with a no-args constructor defined.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
365Maven artifacts for release 1.7.1Google Code ExporterGoogleCodeExporter03/19/15, 06:30:52 PM"```
What steps will reproduce the problem?
1. Unable to find maven artifacts for release 1.7.1, can you upload them.

http://code.google.com/p/google-gson/source/browse/#svn%2Fmavenrepo%2Fcom%2Fgoog
le%2Fcode%2Fgson%2Fgson

```

Original issue reported on code.google.com by `rajesh.k...@gmail.com` on 12 Sep 2011 at 4:29""```
We'll make sure to provide Maven artifacts for future releases. Inder loves 
Maven.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:03
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
366transient access modifier is hidden to Gson objectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:53 PM"```
What steps will reproduce the problem?
1. when an object is declared as transient, Gson can not observe it.
2. an object that has transient variables, even PUBLIC are hidden
3. converting from json to object with transient variables will give a none 
initialized object

What is the expected output? What do you see instead?
transient variables if declared public should be treated the same as default 
modifier

What version of the product are you using? On what operating system?
java 1.6 / tomcat 7

Please provide any additional information below.
please email me if you need extra information. I had to remove the transient 
modifier to get the library working. which solved the problem. My knowledge of 
transient is that a modifier that informs JVM not to invoke the variable if it 
is in the cache memory which improves the response time as compared with 
volatile which forces the JVM to invoke the variable from the main memory 
regardless of being updated by another thread or not. Please correct me if I am 
wrong
```

Original issue reported on code.google.com by `hussain.mutawa` on 24 Sep 2011 at 12:42""```
by the way, it took me two hours searching for a cause why the result is not 
shown until I found that the reason was the transient modifier. So,is it a Java 
problem or a bug in Gson?
```

Original comment by `hussain.mutawa` on 24 Sep 2011 at 3:57
 =||= ```
Transient has nothing to do with memory caching and everything to do with 
serialization and binding.

You want 'volatile'.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:03
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
367Fix @Since and @Until in GSON 2.0Google Code ExporterGoogleCodeExporter03/19/15, 06:30:54 PM"```
We're currently broken because we're handling inherited annotations 
differently. 

The attached patch moves versions to fields only; annotations on types simply 
get inherited by their unannotated fields.
```

Original issue reported on code.google.com by `jessewil...@google.com` on 28 Sep 2011 at 5:36

Attachments:
- [change_the_way_versions_work.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-367/comment-0/change_the_way_versions_work.patch)""Original comment by `limpbizkit` on 1 Oct 2011 at 4:06
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
368the XMLGregorianCalendar datatype is not supported by gson APIGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:54 PM"```
What steps will reproduce the problem?
1. If a POJO has a variable of the XMLGregorianCalendar datatype, the result is 
null.
2.
3.

What is the expected output? What do you see instead?
It should be Date.

What version of the product are you using? On what operating system?
gSon 1.2.3 and Windows 7

Please provide any additional information below.


I have application from which XML can be converted to json and vice versa. The 
following variable in my POJO with the datatype of XMLGregorianCalendar for 
date is null in my output.

protected XMLGregorianCalendar doj;

Please help me ASAP.

Regards,
Harish
```

Original issue reported on code.google.com by `swarab...@gmail.com` on 10 Oct 2011 at 8:01""```
Install your own type adapter! And you should avoid reporting bugs against 
ancient versions of GSON.
```

Original comment by `limpbizkit` on 10 Oct 2011 at 2:07
- Changed state: **WontFix**
 =||= ```
nevertheless this feature is often needed. I found the following code for a 
type adapter wheen googling
public class XMLGregorianCalendarConverter {
    public static class Serializer implements JsonSerializer {
        public Serializer() {
            super();
        }
        public JsonElement serialize(Object t, Type type,
                JsonSerializationContext jsonSerializationContext) {
            XMLGregorianCalendar xgcal = (XMLGregorianCalendar) t;
            return new JsonPrimitive(xgcal.toXMLFormat());
        }
    }
    public static class Deserializer implements JsonDeserializer {
        public Object deserialize(JsonElement jsonElement, Type type,
                JsonDeserializationContext jsonDeserializationContext) {
            try {
                return DatatypeFactory.newInstance().newXMLGregorianCalendar(
                        jsonElement.getAsString());
            } catch (Exception e) {
                return null;
            }
        }
    }
}
register this with
            GsonBuilder gson_builder = new GsonBuilder();
            gson_builder.registerTypeAdapter(XMLGregorianCalendar.class,
                    new XMLGregorianCalendarConverter.Serializer());
            gson_builder.registerTypeAdapter(XMLGregorianCalendar.class,
                    new XMLGregorianCalendarConverter.Deserializer());
            gson = gson_builder.create();


```

Original comment by `mbreuer....@googlemail.com` on 22 Mar 2013 at 4:15
 =||= ```
[deleted comment]
```
 =||= ```
I had an issue with the above example. The ""jsonElement.getAsString()"" method 
would throw an UnSupportedOperation exception and the adapter would always 
returned null. I made a slight modification that worked for me. Here is what I 
used to be able to DeSerialize the XMLGregorianCalendar class to json:

public class XMLGregorianCalendarConverter {
    public static class Serializer implements JsonSerializer {

        public Serializer() {
            super();
        }
        @Override
        public JsonElement serialize(Object t, Type type,
                JsonSerializationContext jsonSerializationContext) {
            XMLGregorianCalendar xgcal = (XMLGregorianCalendar) t;
            return new JsonPrimitive(xgcal.toXMLFormat());
        }

    }
    public static class Deserializer implements JsonDeserializer {

        @Override
        public Object deserialize(JsonElement jsonElement, Type type,
                JsonDeserializationContext jsonDeserializationContext) {
            try {
                JsonObject obj  = jsonElement.getAsJsonObject();
                XMLGregorianCalendar xmlGregCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(obj.get(""year"").getAsInt(), 
                                                                     obj.get(""month"").getAsInt(), 
                                                                     obj.get(""day"").getAsInt(), 
                                                                     obj.get(""hour"").getAsInt(), 
                                                                     obj.get(""minute"").getAsInt(),obj.get(""second"").getAsInt(),
                                                                     0, obj.get(""timezone"").getAsInt());
                return xmlGregCalendar;
            } catch (Exception e) {
                return null;
            }
        }

    }
}
```

Original comment by `eric.b.f...@gmail.com` on 18 Oct 2013 at 2:59
 =||= With gson v2.5 and java 8

```
public class XMLGregorianCalendarConverter {
    public static class Serializer implements JsonSerializer<XMLGregorianCalendar> {
        @Override
        public JsonElement serialize(XMLGregorianCalendar xmlGregorianCalendar, Type type, JsonSerializationContext jsonSerializationContext) {
            return new JsonPrimitive(xmlGregorianCalendar.toXMLFormat());
        }
    }

    public static class Deserializer implements JsonDeserializer<XMLGregorianCalendar> {
        @Override
        public XMLGregorianCalendar deserialize(JsonElement jsonElement, Type type,
                JsonDeserializationContext jsonDeserializationContext) {
            try {
                return DatatypeFactory.newInstance().newXMLGregorianCalendar(jsonElement.getAsString());
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
    }
}
```

and the registration 

```
    private static final Gson gson = new GsonBuilder()
            .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Deserializer())
            .registerTypeAdapter(XMLGregorianCalendar.class, new XMLGregorianCalendarConverter.Serializer())
            .create();
```
 =||= Thank you. So helpful. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
369NPE calling toJson() with a null UUID fieldGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:55 PM"```
What steps will reproduce the problem?
public class TestToJsonObject
{
  private UUID u1 = null;

  public TestToJsonObject() {}
}

Gson gson = new GsonBuilder().create();
TestToJsonObject o = new TestToJsonObject();
System.out.println(gson.toJson(o));

What is the expected output? What do you see instead?
I would expect to see no output. Instead I get the following NPE:
java.lang.NullPointerException
    at com.google.gson.internal.bind.TypeAdapters$17.write(TypeAdapters.java:411)
    at com.google.gson.internal.bind.TypeAdapters$17.write(TypeAdapters.java:400)
    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:66)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:82)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:194)
    at com.google.gson.Gson.toJson(Gson.java:510)
    at com.google.gson.Gson.toJson(Gson.java:489)
    at com.google.gson.Gson.toJson(Gson.java:444)
    at com.google.gson.Gson.toJson(Gson.java:424)


What version of the product are you using? On what operating system?
r992

Please provide any additional information below.

```

Original issue reported on code.google.com by `chris.p....@gmail.com` on 13 Oct 2011 at 5:59""```
This issue was closed by revision r993.
```

Original comment by `limpbizkit` on 14 Oct 2011 at 3:17
- Changed state: **Fixed**
 =||= ```
Thanks for the perfect bug report. Fixed!
```

Original comment by `limpbizkit` on 14 Oct 2011 at 3:17
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
370Double braces initialization seems to break toJsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:30:56 PM"```
Let's say I have this class:
public class Command {
  Map<String, String> parameters;
  String name;

  Command(String name) {
    this.name = name;
  }

  public void addParameter(String name, String value) {
    parameters.put(name, value);
  }

  public String getParameter(String name) {
    return parameters.get(name);
  }
}

If I use double braces initialization and try to dump it I get an empty output:
  Command cmd = new Command(""run"") {{ 
    addParameter(""distance"", ""100"");
  }}
  Gson gson = new Gson();
  System.out.println(gson.toJson(cmd)); // <-- Empty line is printed

If I do initialization in the usual way I get correct output:
  Command cmd = new Command(""run"");
  cmd.addParameter(""distance"", ""100"");
  Gson gson = new Gson();
  System.out.println(gson.toJson(cmd)); // <-- Evertyhing is ok

I use Oralce JDK 1.7.0 on Kubuntu Linux
```

Original issue reported on code.google.com by `iu.biryu...@gmail.com` on 18 Oct 2011 at 6:42
- Merged into: #346""```
Forgot to mention I use version 1.7.2 of gson.
```

Original comment by `iu.biryu...@gmail.com` on 18 Oct 2011 at 6:44
 =||= ```
We'll fix this. Regardless, you shouldn't use double brace initialization. It's 
inefficient and ugly.
```

Original comment by `limpbizkit` on 19 Oct 2011 at 4:30
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
371The javadoc for JsonDeserializer is out of date or incorrect (I'm pretty sure)Google Code ExporterGoogleCodeExporter03/19/15, 06:30:57 PM"```
The section at 
http://google-gson.googlecode.com/svn-history/r88/trunk/docs/javadocs/com/google
/gson/JsonDeserializer.html is currently:

""""""
class IdDeserializer implements JsonDeserializer<Id>() {
  public Id fromJson(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
    return (Id) new Id((Class)typeOfT, id.getValue());
}

You will also need to register IdDeserializer with Gson as follows:
Gson gson = new GsonBuilder().registerTypeAdapter(new 
IdDeserializer()).create();
""""""

and should be, with the following corrections:
  remove ""()""  
  ""fromJson"" -> ""deserialize""
  remove ""(Id)"" since it seems to be unnecessary (I didn't check)
  ""id.getValue()"" should be ""json.getAsString()""?
  add ""Id.class"" argument to ""registerTypeAdapter""

""""""
class IdDeserializer implements JsonDeserializer<Id> {
  public Id deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
    return new Id((Class) typeOfT, json.getAsString());
}

You will also need to register IdDeserializer with Gson as follows:
Gson gson = new GsonBuilder().registerTypeAdapter(Id.class, new 
IdDeserializer()).create();
""""""

Cheers,
-Greg-
```

Original issue reported on code.google.com by `borisb0...@gmail.com` on 24 Oct 2011 at 2:35""```
Oops, realized I was using a google-found link that might be for an older 
revision, but the docs at 
http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/index.html look 
the same.
```

Original comment by `borisb0...@gmail.com` on 24 Oct 2011 at 2:39
 =||= ```
Already fixed in source control.
```

Original comment by `limpbizkit` on 24 Oct 2011 at 3:41
- Changed state: **Fixed**
 =||= ```
Thanks for pointing me to that, I'll check what's checked in next time.

It appears as though the extra () and possibly unnecessary cast are still there 
(where there == 
http://www.google.com/codesearch#1W0hTXRl0vg/trunk/gson/src/main/java/com/google
/gson/JsonDeserializer.java&q=JsonDeserializer%20package:http://google-gson%5C.g
ooglecode%5C.com) but these are minor in comparison to the incorrect method 
names and parameters. 
```

Original comment by `borisb0...@gmail.com` on 24 Oct 2011 at 5:01
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
373server-side object serialization (GSON)Google Code ExporterGoogleCodeExporter03/19/15, 06:31:00 PM"```
Hello!
I have a question in my final project, I'm using gson on the server to get data 
from a table in my database, how I can do for the customer can get the data? 
because I can not use the method fromJson in client side.

thank you very much
A greeting.
```

Original issue reported on code.google.com by `gema.mat...@gmail.com` on 28 Oct 2011 at 11:09""```
For vague questions you might be better asking on stackoverflow or a 
student-oriented board.
```

Original comment by `limpbizkit` on 24 Nov 2011 at 8:48
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
374DefaultDateTypeAdapterTest#testDateSerialization fails on non-US systemsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:01 PM"```
What steps will reproduce the problem?
1. run DefaultDateTypeAdapterTest

What is the expected output? What do you see instead?
Failed tests: 
  testDateSerialization(com.google.gson.DefaultDateTypeAdapterTest): expected:<[31 oktober] 2011> but was:<[October 31,] 2011>

Locale.US should be used to create the expected value

```

Original issue reported on code.google.com by `d.de...@gmail.com` on 31 Oct 2011 at 1:04
- Merged into: #381""```
Fixed with issue 381.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:02
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
375GSON is (very) slowGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:02 PM"```
i ran a test where a serialized / deserialized a simply bean object with an 
embedded collection (map of string to list of string). GSON was 10x slower than 
Jackson, and 5x slower than org.json. 

i'm not sure a real comparison can be done against org.json, as it doesn't 
offer any sort of object binding facility.

i've attached the test harness i used.
```

Original issue reported on code.google.com by `jeffrey.blattman@gmail.com` on 31 Oct 2011 at 7:30

Attachments:
- [JSONTest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-375/comment-0/JSONTest.zip)""```
Have you tried the latest GSON from SVN? It's faster.
```

Original comment by `jessewil...@google.com` on 1 Nov 2011 at 1:46
 =||= ```
I spent some time on this tonight and I isolated the problem. Our map type 
adapter is doing a lot more work than it needs to when converting a property 
name into a map key. I'll have a fix soon.
```

Original comment by `limpbizkit` on 25 Nov 2011 at 5:25
- Changed state: **Ass**
 =||= Original comment by `limpbizkit` on 25 Nov 2011 at 5:25
- Changed state: **Accepted**
 =||= ```
On today's numbers the comparison is much more favorable. After disabling 
pretty printing we get this:
  ""GSON test"" took 9495ms
  ""org.json test"" took 13162ms
  ""Jackson test"" took 4943ms
(Pretty printing adds about 30%).
```

Original comment by `limpbizkit` on 13 Dec 2011 at 4:33
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
376"JsonParseException: Expecting object found: ""anyType"""Google Code ExporterGoogleCodeExporter03/19/15, 06:31:03 PM"```
11-02 22:42:06.774: WARN/System.err(270): com.google.gson.JsonParseException: 
Expecting object found: ""anyType""

My code:
gson.fromJson(response.toString(), CollectionCategory.class)

Data: response.toString()

""anyType{
CollectionCategory=anyType{CategoryId=531aca3d-7710-427f-8592-3591d0f37bf5; 
Description=Category1; Name=Category1; }; 
CollectionCategory=anyType{CategoryId=b9b3cd04-bc7c-40bc-af5c-42b63f2b5784; 
Description=Category2; Name=Category2; }; 
}""

Class Definition:
public class CollectionCategory {
    public UUID CategoryId;
    public String Name;
    public String Description;
}
```

Original issue reported on code.google.com by `haidaocht` on 2 Nov 2011 at 2:56""```
I hate to break it to you, but that isn't JSON.
```

Original comment by `limpbizkit` on 3 Nov 2011 at 1:45
- Changed state: **Invalid**
 =||= ```
Thanks, it's from Microsoft WCF Service.

Anyone hit same issue? 
Is there a workaround for this issue?
```

Original comment by `haidaocht` on 3 Nov 2011 at 2:34
 =||= ```
Use a different library. GSON only parses JSON.
```

Original comment by `limpbizkit` on 4 Nov 2011 at 4:09
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
377[Patch] Bug in JsonObjectDeserializationVisitorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:07 PM"```
in public void visitPrimitive(Object primitive) method,

should add one line below:

constructed = true;


```

Original issue reported on code.google.com by `calvinxiu@gmail.com` on 8 Nov 2011 at 10:47""```
What version are you looking at? This code no longer exists in SVN.
```

Original comment by `limpbizkit` on 9 Nov 2011 at 5:31
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
378Can't register a Double serializerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:08 PM"```
What steps will reproduce the problem?

Execute:

public class Main {

    public static void main(String[] args) throws Exception {
        Gson gson = new GsonBuilder()
            .registerTypeAdapter(Double.class, new JsonSerializer<Double>() {
                public JsonElement serialize(Double src, Type typeOfSrc, JsonSerializationContext context) {
                    if (src.isNaN() || src.isInfinite())
                        return new JsonPrimitive(src.toString());
                    return new JsonPrimitive(src);
                }
            })
            .create();
        System.out.println(gson.toJson(21.24));
        System.out.println(gson.toJson(Double.NaN));
        System.out.println(gson.toJson(Double.POSITIVE_INFINITY));
    }

}


What is the expected output? What do you see instead?
I see this Exception:
Exception in thread ""main"" java.lang.IllegalArgumentException: Cannot register 
type adapters for class java.lang.Double
    at com.google.gson.GsonBuilder.registerTypeAdapter(GsonBuilder.java:504)
    at com.google.gson.GsonBuilder.registerTypeAdapter(GsonBuilder.java:495)
    at Main.main(Main.java:13)

What version of the product are you using? On what operating system?
Upgrading from gson-1.7.1 to 2.0 introduced the issue.

Please provide any additional information below.
Thanks.
```

Original issue reported on code.google.com by `ajk...@gmail.com` on 18 Nov 2011 at 12:09""```
Does this work for you?
  Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().build();

This will serialize NaN and Infinity, but not as strings.
```

Original comment by `limpbizkit` on 19 Nov 2011 at 3:33
 =||= ```
Yes, it works but I prefer the previous strings.
```

Original comment by `ajk...@gmail.com` on 20 Nov 2011 at 9:39
 =||= ```
I'm sorry we broke this use case with the 2.0 upgrade.

We can't support custom type adapters here in the general case without 
sacrificing some performance on binding. We're hoping to do optimizations where 
we can avoid boxing primitives but that only works when applications don't 
provide custom type adapters for primitive types.

I'm keeping this open because with some significant effort we could probably 
get Gson to handle custom type adapters as long as it knows to test for them.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:01
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
Fixed in 2.3 by restoring the ability to register custom serializers for 
primitive types.
```

Original comment by `limpbizkit` on 1 Jul 2012 at 5:59
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
379OSGI entries in manifest specify bundle (and exported packages) version 1.7 for gson-2.0.jarGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:10 PM"```
What steps will reproduce the problem?

1. download the google-gson-2.0-release.zip
2. check the META-INF/MANIFEST.MF from the gson-2.0.jar

What is the expected output? What do you see instead?

There should be lines like these:
Bundle-Version: 2.0
Export-Package: com.google.gson;version=2.0.0, com.google.gson.annotat
 ions;version=2.0.0, com.google.gson.reflect;version=2.0.0, com.google
 .gson.stream;version=2.0.0, com.google.gson.internal;version=2.0.0

The file contains the following:
Bundle-Version: 1.7
Export-Package: com.google.gson;version=1.7.1, com.google.gson.annotat
 ions;version=1.7.1, com.google.gson.reflect;version=1.7.1, com.google
 .gson.stream;version=1.7.1, com.google.gson.internal;version=1.7.1


What version of the product are you using? On what operating system?
Version 2.0

Please provide any additional information below.
I haven't checked if there are any missing exported packages (if any have been 
introduced in v2.0).
```

Original issue reported on code.google.com by `jmalche...@gmail.com` on 20 Nov 2011 at 12:39""```
We'll make sure to get this right in version 2.1, coming very soon.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:58
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
380Broken deserialization of java.util.regex.Pattern objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:10 PM"```
What steps will reproduce the problem?
1. Serialize and deserialize Pattern object.
2. Example code:
     Pattern org = Pattern.compile(""te.t"");
     String gson = new Gson().toJson(org);
     Pattern back = new Gson().fromJson(gson, Pattern.class);

     Matcher orgMatcher = org.matcher(""XtestX"");
     Matcher backMatcher = back.matcher(""XtestX"");

What is the expected output? What do you see instead?
Calling matcher method forces deserialized pattern compilation. In this case 
pattern group index count is not reset ie. pattern field capturingGroupCount is 
not set to 1. In the example above orgMatcher and backMatcher should behave the 
same. Executing following code 
     backMatcher.find();
     backMatcher.group();
causes java.lang.IndexOutOfBoundsException: No group 0. The same methods called 
on orgMatcher, result in group() method returning proper string ""test"".

What version of the product are you using? On what operating system?
Gson 1.7.1 and 2.0. Windows 7 Enterprise 64bit. Java 1.6.0_27 32bit.

Please provide any additional information below.
Execute provided code, all lines from top to bottom, to reproduce the problem.
```

Original issue reported on code.google.com by `copter01` on 24 Nov 2011 at 5:07""```
You'll have to create a custom type adapter for Pattern. It should take about 
12 lines of code.
https://sites.google.com/site/gson/gson-user-guide#TOC-Custom-Serialization-and-
Deserializ
```

Original comment by `limpbizkit` on 24 Nov 2011 at 8:32
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
381DefaultDateTypeAdapterTest#testDateSerialization fails on non US LocaleGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:11 PM"```
What steps will reproduce the problem?

Test assumes that the default locale is US.

Simple fix

Change line 130 in com.google.gson.DefaultDateTypeAdapterTest to

DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);


What version of the product are you using? On what operating system?
latest svn snapshot r1051

Please provide any additional information below.

Statcktrace of failure

junit.framework.ComparisonFailure: 
Expected :26 November 2011
Actual   :November 26, 2011
    at com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization(DefaultDateTypeAdapterTest.java:134)
```

Original issue reported on code.google.com by `jkirschn...@gmail.com` on 26 Nov 2011 at 4:43""```
This issue was closed by revision r1076.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:57
- Changed state: **Fixed**
 =||= ```
Thanks!
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:57
 =||= ```
Issue 374 has been merged into this issue.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 5:02
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
382GSON 2.0 causes SecurityExceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:14 PM"```
What steps will reproduce the problem?
1.
public abstract class GSONObject<K,V> {

    protected static transient Gson gson;
        protected HashMap<K,V> data;
    public GSONObject() {
           gson = new GsonBuilder(). 
                disableHtmlEscaping().
                setPrettyPrinting().
                serializeNulls().
                create();
               data=new HashMap<K,V>();
    }
    @Override
    public String toString() {
        return gson.toJson(this);
    }
    public <T> String toJson(Class<T> type) {
        return gson.toJson(this, type);
    }
}

2.
Extending GSONObject and invoking toString or toJson results in the exception

What is the expected output? What do you see instead?

Expected:
{""data"":{...}}

Results Instead:
Exception in thread ""main"" java.lang.SecurityException: Can not make a 
java.lang.Class constructor accessible
    at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:139)
    at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:129)
    at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:84)
    at com.google.gson.internal.ConstructorConstructor.getConstructor(ConstructorConstructor.java:66)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:64)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:49)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:49)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:75)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:74)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:112)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:65)
    at com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
    at com.google.gson.Gson.toJson(Gson.java:504)
    at com.google.gson.Gson.toJson(Gson.java:491)
    at com.google.gson.Gson.toJson(Gson.java:446)
    at com.google.gson.Gson.toJson(Gson.java:426)
...

What version of the product are you using? On what operating system?
Windows 7, JDK 1.7 (Netbeans)

Please provide any additional information below.

```

Original issue reported on code.google.com by `court...@crlog.info` on 29 Nov 2011 at 10:00""```
Ahhhhh, sorry forgot to include GSON version.
So:
GSON version 2.0
This worked previously with 
GSON Version 1.7.x
```

Original comment by `court...@crlog.info` on 29 Nov 2011 at 10:01
 =||= ```
I'll look into this... We're going to have a new version of Gson out by year's 
end that should include a fix.
```

Original comment by `limpbizkit` on 3 Dec 2011 at 8:33
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= ```
Cool...I'll keep an eye out
```

Original comment by `courtney...@datasift.com` on 3 Dec 2011 at 8:55
 =||= ```
I couldn't reproduce this. Could you provide a complete example?

  public void testBug382() {
    String string = new GSONObjectImpl().toString();
    System.out.println(string);
  }

  public abstract static class GSONObject<K, V> {
    protected static transient Gson gson;
    protected HashMap<K, V> data;

    public GSONObject() {
      gson = new GsonBuilder().
          disableHtmlEscaping().
          setPrettyPrinting().
          serializeNulls().
          create();
      data = new HashMap<K, V>();
    }

    @Override
    public String toString() {
      return gson.toJson(this);
    }

    public <T> String toJson(Class<T> type) {
      return gson.toJson(this, type);
    }
  }

  public static class GSONObjectImpl extends GSONObject<String, String> {
  }
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:50
 =||= ```
I have seen this happen. For me, this happens when Gson runs into a field of 
type java.lang.Class. Typically, the reason is that I forgot to add a type 
adapter for the class containing this field. Clearly, java.lang.Class fields 
are not meant to be deserialized. May be a less cryptic message would help.
```

Original comment by `inder123` on 16 Dec 2011 at 6:13
 =||= ```
I wasn't able to re-produce it just now. The super class that contain the 
static JSON object and methods as well as the sub classes have all changed 
quite a bit. I tried doing it based on what I posted and remembered but it 
didn't happen...
I'm not sure what inder123 means exactly but when this happened I had only that 
hashmap, data as a field in the class, something like

    public void put(K key, V val) {
        data.put(key, val);
    }
And the key was always a string, the value was occasionally POJOs that were 
known to serialize just fine with GSON.

I'll try again when I get home, I'll see if I can revert to the version of the 
code that had all this and try again, but unfortunately I wasn't able to 
reproduce it...
```

Original comment by `court...@crlog.info` on 16 Dec 2011 at 6:46
 =||= ```
Inder fixed this with r1090.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:33
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
383Revision 1051 crashes when Google Code ExporterGoogleCodeExporter03/19/15, 06:31:16 PM"```
What steps will reproduce the problem?
1. Use Gson r1050
2. Run GsonCrash with data.json
3. No Exception

4. Use Gson r1051
5. Run GsonCrash with data.json
6. Exception attached

4. Use Gson r1052
5. Run GsonCrash with data.json
6. Exception attached


What version of the product are you using? On what operating system?
Revision 1050, 1051, 1052

java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

Please provide any additional information below.

```

Original issue reported on code.google.com by `jsch...@logitech.com` on 30 Nov 2011 at 10:41

Attachments:
- [data.json](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/data.json)
- [GsonCrash.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/GsonCrash.java)
- [exception_r1051.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/exception_r1051.txt)
- [exception_r1052.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-383/comment-0/exception_r1052.txt)""```
Fixed in r1056 ?
http://code.google.com/p/google-gson/source/detail?r=1056
```

Original comment by `limpbizkit` on 3 Dec 2011 at 8:34
- Changed state: **Fixed**
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= ```
It fixed my problem. Thanks
```

Original comment by `jsch...@logitech.com` on 6 Dec 2011 at 1:48
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
384"add support for ""maybe-lists"""Google Code ExporterGoogleCodeExporter03/19/15, 06:31:17 PM"```
hello everyone,

sometimes when i request my service depending on query parameters it can return 
something like this:

{
    ""retorno"":[
        {
            ""comment"":""comment A"",
            ""id"":""7""
        },
        {
            ""comment"":""comment B"",
            ""id"":""13""
        }
    ]
}

and sometimes like this:

{
    ""retorno"":{
        ""comment"":""comment C"",
        ""id"":""6""
    }
}

and my class seems like this:

public class CommentReturn {

    private List<Comment>comment;

    public List<Comment>getComment(){
        return comment;
    }

    public void setComment(List<Comment> comment){
        this.comment=comment;
    }
}

this is generated by a jaxb backend, but had no success generating always the 
list even when there is only one result.

this is not a gson problem... but would be nice to have a way to always feed 
the class correctly, even when it have an object instead a list... but is the 
correct generic type. 

```

Original issue reported on code.google.com by `Sombr...@gmail.com` on 6 Dec 2011 at 2:40""```
An small uppdate: even jackson which is used by jersey to generate such odd 
json does not handle well this own result. At least in the default setup.

please forget it and close, i'll try something else.
```

Original comment by `Sombr...@gmail.com` on 6 Dec 2011 at 3:39
 =||= Original comment by `limpbizkit` on 6 Dec 2011 at 4:12
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
385Patch for /trunk/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.javaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:18 PM"```
variable naming fix
```

Original issue reported on code.google.com by `cue...@gmail.com` on 6 Dec 2011 at 3:07

Attachments:
- [RawCollectionsExample.java.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-385/comment-0/RawCollectionsExample.java.patch)""```
There was a variable naming error json2 vs. json.
Thank you for GSON!!
I love it.
```

Original comment by `cue...@gmail.com` on 6 Dec 2011 at 3:10
 =||= ```
This issue was closed by revision r1075.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:55
- Changed state: **Fixed**
 =||= ```
Thanks.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:56
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
387Bundle-Version is set to 1.7 in Manifest file of Release 2.0Google Code ExporterGoogleCodeExporter03/19/15, 06:31:19 PM"```
The release 2.0 zip contains gson-2.0.jar. This jar file contains a MANIFEST.MF 
where Bundle-Version is set to 1.7. The exported packages are set to version 
1.7.1.

I guess it should 2.0 !?
```

Original issue reported on code.google.com by `lerch.jo...@gmail.com` on 8 Dec 2011 at 1:53""```
We'll make sure to get this right for 2.1.
```

Original comment by `limpbizkit` on 16 Dec 2011 at 4:53
- Changed state: **WontFix**
 =||= ```
I also added this in our release process so that we would not miss it in future.
```

Original comment by `inder123` on 16 Dec 2011 at 6:03
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
388Enable Escape All Non Ascii charsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:20 PM"```
Enable Escape All Non Ascii chars
like php json_encode
```

Original issue reported on code.google.com by `farmer1...@gmail.com` on 10 Dec 2011 at 5:22

Attachments:
- [escapeNonAscii.patch.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-388/comment-0/escapeNonAscii.patch.diff)""```
Eww, why would you do this? You're better off fixing your other tools that 
can't handle Unicode.
```

Original comment by `limpbizkit` on 10 Dec 2011 at 10:20
- Changed state: **WontFix**
 =||= ```
this is important to cjk non-unicode users
e.g. 
the page encoded in gbk
and wanted to export json data
servlet will encode json using gbk if not escaped

make all non ascii would be safe for javascript to use

jackson1.8 and php json_encode always have this feature
```

Original comment by `farmer1...@gmail.com` on 11 Dec 2011 at 9:46
 =||= ```
Its about an hour's work to make a Writer subclass that does what you'd like. 
There's no benefit to doing this in Gson directly.
```

Original comment by `limpbizkit` on 11 Dec 2011 at 2:47
 =||= ```
... actually it was only about eight minutes work. Paste this class into your 
application (public domain license) and use it when you create your JsonWriter. 
There's some optimization opportunities if write() isn't fast enough; changes 
are it'll be fine.

public class GhettoAsciiWriter extends Writer {
    private final Writer out;

    public GhettoAsciiWriter(Writer out) {
        this.out = out;
    }

    @Override public void write(char[] buffer, int offset, int count) throws IOException {
        for (int i = 0; i < count; i++) {
            char c = buffer[i + offset];
            if (c <= 0x7f) {
                out.write(c);
            } else {
                out.write(String.format(""\\u%04x"", (int) c));
            }
        }
    }

    @Override public void flush() throws IOException {
        out.flush();
    }

    @Override public void close() throws IOException {
        out.close();
    }
}
```

Original comment by `limpbizkit` on 11 Dec 2011 at 10:39
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
389Gson 2.0 backwards incompatibility: an absent Json field is set to new Object() instead of null.Google Code ExporterGoogleCodeExporter03/19/15, 06:31:21 PM"```
https://groups.google.com/forum/?hl=en_US#!topic/google-gson/L2ALXLxguNY

 was using gson-1.2.2 version and decided to upgrade to the gson-2.0.
The only drawback I've had so far is that in version 1.2.2, when a
field is ignored in the json, it is converted to null.
For example this class.

Class Persona{
private String nombre;
private Long id;
private Genero genero = new Genero();
}

If I send the following json

{""id"":1,""nombre"":""juan""}

In version 1.2.2 the java object

nombre = “juan”
id= 1
genero = null

Performing tests on version 2.0.  I have

nombre = “juan”
id= 1
genero = object

What can i do? .. or that is the default in new versions?
```

Original issue reported on code.google.com by `inder123` on 16 Dec 2011 at 4:54""```
This is not a valid issue.
Added a test for this in r1082

I tested this test with r1016 (Gson 2.0) as well and it passed.
```

Original comment by `inder123` on 16 Dec 2011 at 5:23
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
390provide standard set of convenience methods to navigate JSON DOM treeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:22 PM"```

This request is to add a standard set of convenience methods to complex JSON 
element implementations. The ""convenience"" here is that the user doesn't have 
to re-type the result, and instead calls for the method that does the typing 
internally, or throws an exception, if the typing is not possible. It would be 
also a convenience, if the user could quickly tell if a given object is null.

JsonObject already implements methods that allow to retrieve a property as 
another json object, a json array, or a primitive. However, to retrieve a 
property as a terminal primitive type, the user has to call additional methods.

Since JsonElement supports returning values as the following terminal types:

primList = {BigDecimal, BigInteger, boolean, byte, char, double, float, int, 
long, Number, short, String}

I propose that the list of the convenience methods should shadow these 
primitive types, having JsonObject export getAsTYPE, where TYPE is each one 
from the primList.

The same is for the JsonArray. JsonArray current support retrieving primitive 
types of the first array of the element (which I actually believe is more 
dangerous than useful), but does not support returning n-th element as a 
specific type.

It would be as convenient, if the user could retrieve a specific array element 
as both complex json type, or a terminal primitive type. So, I propose adding 
the following methods to JsonArray (the only parameter is the 0-based index of 
the array element):

JsonArray getAsJsonArray(int);
JsonObject getAsJsonObject(int);
JsonPrimitive getAsJsonPrimitive(int);

and then also the set of getAsTYPE(int), where TYPE is one of primList.


To support checking for a NULL, method isNull(String) can be added JsonObject, 
and isNull(int) to JsonArray.

Thank you.

```

Original issue reported on code.google.com by `pawel.ve...@gmail.com` on 17 Dec 2011 at 2:23""```
Personally I don't like this idea. The existing APIs are very normalized and 
that makes them easy to learn.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:31
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:48
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
391App crash when using Gson library (2.0) on Android 3.2 (Acer a100)Google Code ExporterGoogleCodeExporter03/19/15, 06:31:23 PM"```
Reproduced sometimes when creating objects with google-gson library (2.0) from 
json strings on device with android 3.2 (Acer a100), sometimes with variation 
of ClassCastException. On other devices (android 3.0, 3.1) it's work fine. 

```

Original issue reported on code.google.com by `effectiv...@gmail.com` on 20 Dec 2011 at 7:03
- Merged into: #255

Attachments:
- [log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log1.zip)
- [log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log2.zip)
- [log3.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log3.zip)
- [log4.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-391/comment-0/log4.zip)""```
Sigh. I suspect Acer has joined HTC in including Gson in their boot classpath.
```

Original comment by `limpbizkit` on 21 Dec 2011 at 8:07
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
392UTF-8 handlingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:24 PM"```
I searched web and API, could not figure out how to handle UTF-8. Any help is 
appreciated.

The request the service got is in UTF-8, I make sure it read correctly.

String strContent =CharStreams.toString(new InputStreamReader(is, ""UTF-8""));

From the log, the strContent indeed has the following:

""Text"": ""\u20ACHello from UIE-3""

When I converted to json object, it appears have some issues:


Gson gson = new 
GsonBuilder().setPrettyPrinting().setFieldNamingPolicy(FieldNamingPolicy.UPPER_C
AMEL_CASE).create();

NotificationRequest nr = null;
try{
    nr = gson.fromJson(strContent, NotificationRequest.class);
    LOGGER.debug(""NOTIFICATION REQUEST: {}"", nr.toString());

The 'text' becomes:  Text=â¬Hello from UIE-3

What did I miss?

Thanks.

Jim 




```

Original issue reported on code.google.com by `wguo1...@gmail.com` on 20 Dec 2011 at 6:11""```
I suspect that your IDE or terminal emulator is choking on the UTF-8 
characters. You can confirm this by printing the string.length() - if Gson is 
doing unicode properly then ""\u20AC"" will have length of 1. But a non-unicode 
capable terminal emulator will print two characters for the two bytes in the 
UTF-8 encoding.

If that is the problem, you should consider upgrading to a Unicode-capable 
terminal emulator. I use Terminator: http://software.jessies.org/terminator/
```

Original comment by `limpbizkit` on 21 Dec 2011 at 8:05
- Changed state: **Invalid**
 =||= ```
Thanks a lot. You are absolutely right. I used putty as the terminal. When I 
open the log file on Windows, everything is displayed well. I blamed wrong lib 
:-(. 
Jim 
```

Original comment by `wguo1...@gmail.com` on 21 Dec 2011 at 8:19
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
393Strict variant that allows non-Object/Array top level typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:25 PM"```
The latest Ecmascript standard (which modern browsers adhere to) follows RFC 
4627 strictly, with the one exception that the top-level type can be any type, 
not just Object or Array. It would be nice to have a Gson parsing mode that has 
the same behavior.

http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262%20edition%
205.1,%20June%202011.pdf
```

Original issue reported on code.google.com by `chr...@google.com` on 21 Dec 2011 at 6:51""```
You can use setLenient(true) to enable this. Unfortunately this also disables 
other strictness checks.
```

Original comment by `jessewil...@google.com` on 21 Dec 2011 at 6:23
 =||= ```
One more option, while I'm thinking of it. You can wrap your document in '[' 
and ']' to make it conform to the strict standard.
```

Original comment by `limpbizkit` on 21 Dec 2011 at 6:30
- Changed state: **WontFix**
 =||= ```
To check whether something is valid JSON as per Ecmascript would then require 
catching a MalformedJsonException, wrapping in '[' + json + ']', and trying 
again? I don't think that is reasonable.
```

Original comment by `chr...@google.com` on 21 Dec 2011 at 6:38
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
394object list in GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:26 PM"```
1. I want to add list of object in gson. Example there is list of person object 
that list need to add in gosn to get String object for response.
Code
List<Person> personList = new ArrayList<Perosn>();
personList.add(new Person());
personList.add(new Person());
personList.add(new Person());

Gson gson = new Gson();
String personObject = gson.toJson(personList);

I am getting error while doing this.


I am using gson-2.0.jar and related jar for that.

Operating system is windows 7.
```

Original issue reported on code.google.com by `aijaz....@gmail.com` on 28 Dec 2011 at 1:01""```
You'll need the two-argument version of toJson(). The 2nd argument should be 
this: 
  new TypeToken<List<Person>>() {}.getType()

For ease in triage, you should include a stacktrace when you report a bug like 
this.
```

Original comment by `limpbizkit` on 29 Dec 2011 at 5:29
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
396Include Strategy?Google Code ExporterGoogleCodeExporter03/19/15, 06:31:29 PM"```
In the actual version of the google-gson developers are able to create a 
customized strategy to field exclusion and this is great, I was able to create 
a strategy that I think to be smarter than the original one.

My strategy doesn't just allow me to exclude fields by their name because 
sometimes the name repeats itself across a lot of classes (most common in JPA 
entities) but it also allows me to specify the class in which the field that I 
want to exclude lives. This is working great because it used to generate lots 
of circular references and I was compelled to exclude the fields that generates 
that circular references, but how that name is common across some entities I 
had seen myself in trouble using the default behavior that excludes every field 
in the object graph with that specified name.

Therefore, I think it would be great to enable this kind of feature either 
native in the GsonBuilder or by enabling customizing include strategy as today 
exists for excluding. What you guys think about this?

Thanks.
```

Original issue reported on code.google.com by `Jayrmo...@gmail.com` on 30 Dec 2011 at 12:44""```
What could you do with an inclusion strategy that you can't do with 
ExclusionStrategy?
```

Original comment by `limpbizkit` on 11 Feb 2012 at 6:37
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= Original comment by `limpbizkit` on 19 Mar 2012 at 3:30
- Changed state: **WontFix**
 =||= It would have been great to have inclusion strategy. Assume a few deep nested class with several fields and all I want to serialize or create a JSON with few countable number of fields. On such cases It would be better to use inclusion strategy. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
397Lenient JsonWriter should allow multiple top level objectsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:30 PM"```
What steps will reproduce the problem?

JsonWriter jsonWriter = new JsonWriter( new StringWriter() );
jsonWriter.setLenient( true );
jsonWriter.beginObject();
jsonWriter.endObject);
jsonWriter.beginObject();

What is the expected output? What do you see instead?

Expected to write additional objects.  Instead, an IllegalStateException is 
thrown: ""JSON must have only one top-level value.""

What version of the product are you using? On what operating system?

gson-2.1

Please provide any additional information below.

Lenient JsonReader allows this, it would seem that the writer should as well.
```

Original issue reported on code.google.com by `kpha...@gmail.com` on 3 Jan 2012 at 8:46""```
Here is a simple patch to fix the issue.  It breaks one unit test but appears 
to work in practice.  Can someone with more knowledge of the product take a 
look and make sure I'm not overlooking something.
```

Original comment by `kpha...@gmail.com` on 3 Jan 2012 at 8:50

Attachments:
- [Issue397.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-397/comment-1/Issue397.patch)
 =||= ```
Thanks for the helpful report. We'll fix this in the next release.
```

Original comment by `limpbizkit` on 4 Jan 2012 at 1:26
 =||= ```
This issue was closed by revision r1124.
```

Original comment by `limpbizkit` on 12 Feb 2012 at 8:42
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
398Gson can not work with G10Google Code ExporterGoogleCodeExporter03/19/15, 06:31:31 PM"```
Hello,I use gson lib for my android application.It works in many phones very 
well,but in some mobile it can not work.
Here is the stack trace.
HTC DesireHD G10:
01-05 09:49:50.553: W/System.err(11264): java.lang.TypeNotPresentException: 
Type com.ifeng.news2.bean.BaseItem not present
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:64)
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav
a:73)
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes(ListOfTypes.ja
va:68)
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav
a:72)
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.Types.getType(Types.java:29)
01-05 09:49:50.573: W/System.err(11264):    at 
java.lang.reflect.Field.getGenericType(Field.java:191)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:53)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:148)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor
.java:107)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio
nVisitor.java:95)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese
rializationVisitor.java:62)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa
tionContextDefault.java:73)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio
nContextDefault.java:51)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.Gson.fromJson(Gson.java:495)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.Gson.fromJson(Gson.java:444)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.Gson.fromJson(Gson.java:396)
01-05 09:49:50.573: W/System.err(11264):    at 
com.google.gson.Gson.fromJson(Gson.java:372)
01-05 09:49:50.573: W/System.err(11264):    at 
com.ifeng.news2.bean.ListUnit.parse(ListUnit.java:137)
01-05 09:49:50.573: W/System.err(11264):    at 
com.ifeng.news2.test.ListUnitTest.testParseList(ListUnitTest.java:138)
01-05 09:49:50.573: W/System.err(11264):    at 
java.lang.reflect.Method.invokeNative(Native Method)
01-05 09:49:50.573: W/System.err(11264):    at 
java.lang.reflect.Method.invoke(Method.java:521)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestCase.runTest(TestCase.java:154)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestCase.runBare(TestCase.java:127)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestResult$1.protect(TestResult.java:106)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestResult.runProtected(TestResult.java:124)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestResult.run(TestResult.java:109)
01-05 09:49:50.573: W/System.err(11264):    at 
junit.framework.TestCase.run(TestCase.java:118)
01-05 09:49:50.573: W/System.err(11264):    at 
android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:169)
01-05 09:49:50.573: W/System.err(11264):    at 
android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:154)
01-05 09:49:50.573: W/System.err(11264):    at 
android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:52
0)
01-05 09:49:50.573: W/System.err(11264):    at 
android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1580)
01-05 09:49:50.573: W/System.err(11264): Caused by: 
java.lang.ClassNotFoundException: com.ifeng.news2.bean.BaseItem
01-05 09:49:50.573: W/System.err(11264):    at 
java.lang.Class.classForName(Native Method)
01-05 09:49:50.573: W/System.err(11264):    at 
java.lang.Class.forName(Class.java:235)
01-05 09:49:50.573: W/System.err(11264):    at 
org.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:62)
01-05 09:49:50.573: W/System.err(11264):    ... 33 more
01-05 09:49:50.573: W/System.err(11264): Caused by: 
java.lang.NoClassDefFoundError: com.ifeng.news2.bean.BaseItem
01-05 09:49:50.573: W/System.err(11264):    ... 36 more
01-05 09:49:50.573: W/System.err(11264): Caused by: 
java.lang.ClassNotFoundException: com.ifeng.news2.bean.BaseItem in loader 
dalvik.system.PathClassLoader[.]
01-05 09:49:50.583: W/System.err(11264):    at 
dalvik.system.PathClassLoader.findClass(PathClassLoader.java:243)
01-05 09:49:50.583: W/System.err(11264):    at 
java.lang.ClassLoader.loadClass(ClassLoader.java:573)
01-05 09:49:50.583: W/System.err(11264):    at 
java.lang.ClassLoader.loadClass(ClassLoader.java:532)
01-05 09:49:50.583: W/System.err(11264):    ... 36 more

That's strange.I write test case like that:
Class.forName(""com.ifeng.news2.bean.BaseItem"");
//parseFrom json String
Class.forName is ok,fromJson occured a TypeNotPresentException
Thank you for help.
```

Original issue reported on code.google.com by `ifen...@gmail.com` on 5 Jan 2012 at 2:04
- Merged into: #255""Original comment by `limpbizkit` on 5 Jan 2012 at 5:43
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
399error happend when converting object to jsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:31 PM"```
What steps will reproduce the problem?
1.class A declared a field age
2.class B extends A and also declared a field age 
3.new an instance of class B
4.convert the newed B instance to json
5.java.lang.IllegalArgumentException: class B declares multiple JSON fields 
named age

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?
2.1

Please provide any additional information below.

public class Main {
    public static void main(String[] args) {
        try {
            A a = new A();
            a.setAge(2);
            a.setName(""someone"");
            B b = new B();
            b.setAge(2);
            Gson gson = new Gson();
            System.out.println(gson.toJson(a));
            System.out.println(gson.toJson(b));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
class A {
    String name;
    int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

class B extends A {
    Date birthday;
    int age;

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

```

Original issue reported on code.google.com by `jackydu1...@gmail.com` on 11 Jan 2012 at 3:50""```
Working as intended.

If the age fields can be different, use @SerializedName() on one or more of 
them to give it an unambiguous name. If they're the same, remove the age field 
declaration on 'b'.

http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/a
nnotations/SerializedName.html
```

Original comment by `limpbizkit` on 11 Jan 2012 at 4:50
- Changed state: **Invalid**
 =||= ```
What if Class A is an abstract parent class? The error still happens. I 
shouldn't have to put an annotation on an abstract class that would never be 
used with gson should I?
```

Original comment by `ianwal...@gmail.com` on 15 Aug 2012 at 11:47
 =||= ```
I just bumped into this issue. Where the parent class were abstract. And I 
cannot modify that class since I'm not the author but I need to serialize it.
```

Original comment by `lajvbuti...@gmail.com` on 10 Nov 2012 at 8:30
 =||= ```
What steps will reproduce the problem?
1.class A declared a field age
2.class B extends A and also declared a field age 
3.new an instance of class B
4.convert the newed B instance to json
5.java.lang.IllegalArgumentException: class B declares multiple JSON fields 
named age
```

Original comment by `atsakthi...@gmail.com` on 27 Mar 2013 at 12:52
 =||= ```
I have posted a question on stackoverflow with same problem. Can anybody answer 
it?
Question can be found at:

http://stackoverflow.com/questions/15756551/solr-java-error-class-com-restfb-typ
es-post-declares-multiple-json-fields-named
```

Original comment by `ndthokar...@gmail.com` on 2 Apr 2013 at 2:29
 =||= I recently got below error: 
ERROR:class java.text.DecimalFormat declares multiple JSON fields named maximumIntegerDigits

The reason is I used ""private final java.text.DecimalFormat"" in a class which is deserialized by Gson. And DecimalFormat and its base class NumberFormat, both define ""private int  maximumIntegerDigits"". 
I fixed the problem by removing the field. 

But my point is, as gson knows duplicate fields, if they are same type, can gson just deserialize the value to subclass instead of throwing an exception?
 =||= That's only half the problem. What if they have different values when serializing?

You should not be relying on the implementation details of `java.*` types anyway. Write a type adapter for `DecimalFormat` which calls `toPattern()` to serialize as a String and uses the `DecimalFormat(String)` constructor to deserialize from a String.
 =||= Agree. @JakeWharton. Not a good way to have duplicate fields.

But the condition is if we cannot modify those classes and we have to use them, it's better that gson provides a work around.
 =||= I just told you the workaround: a type adapter which doesn't serialize
implementation details of classes outside your control. Use their public
APIs to encode their data.

This is less of a workaround and more just the correct thing to do.

On Fri, Feb 5, 2016 at 11:39 AM William notifications@github.com wrote:

> Agree. @JakeWharton https://github.com/JakeWharton. Not a good way to
> have duplicate fields.
> 
> But the condition is if we cannot modify those classes and we have to use
> them, it's better that gson provides a work around.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/399#issuecomment-180431956.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
400Dynamic serialization and deserialization via class interfaceGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:33 PM"```
I have created a patch against gson-2.1 that adds code for allowing classes to 
define serialization and deserialization by implementing a simple interface. 
The benefit of this approach is that there is no longer a need to register 
special handlers for each class that requires custom serialization. It can be 
used as follows:

public class Foo implements JsonSerialization, 
JsonDeserializedBy<FooDeserializer> {
    public String name;
    public JsonElement serialize (JsonSerializationContext jsc) {
        return new JsonPrimitive(name);
    }
}

public class FooDeserializer implements JsonDeserializer<Foo> {
    public Foo deserialize(JsonElement je, Type type, JsonDeserializationContext jdc) {
        Foo f = new Foo();
        f.name = je.getAsString();
        return f;
    }
}

...
Foo foo = new Foo();
foo.name = ""foo"";
gson.toJson(foo); // ""foo""
gson.fromJson(gson.toJson(foo), Foo.class).name; // ""foo""

With my patch, a Gson object now checks the argument sent to toJson to 
determine if it implements JsonSerialization. If so, it calls its 
serialize(jsc) method to retrieve a JsonElement for that class.

When fromJson is called, the given class is inspected to determine if it 
implements the JsonDeserializer interface. If so, the class specified in the 
template parameter (in this case FooDeserializer) is used for deserialization 
by creating a new instance of that class (using the no-argument constructor), 
and then deserialize is called as with any JsonDeserializer object.

This patch adds the two new interfaces (JsonSerialization and 
JsonDeserialization) and adds a few lines of code to Gson in order to provide 
the aforementioned functionality. I'm not sure I chose the appropriate location 
to insert the functionality, and the code is pretty ugly, but it seems to work 
pretty well in my limited test cases.

I'll license the patch under the same license as gson, in case anyone is 
concerned about that.
```

Original issue reported on code.google.com by `mint...@everlaw.com` on 12 Jan 2012 at 1:59

Attachments:
- [gson-2.1-dynamic_serialization.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-0/gson-2.1-dynamic_serialization.patch)""```
Sorry, the example code has a small mistake, as I renamed one of the interfaces 
before submitting the patch. Where it says ""JsonDeserializedBy"", it should say 
""JsonDeserialization"". The patch and the rest of my post are accurate.
```

Original comment by `mint...@everlaw.com` on 12 Jan 2012 at 2:03
 =||= ```
That's extremely clever!

FYI, if you're willing to make a single call to 
GsonBuilder.registerTypeAdapterFactory(), I don't think you need to make any 
changes to Gson 2.1 to make this work.
```

Original comment by `jessewil...@google.com` on 12 Jan 2012 at 6:03
 =||= ```
[deleted comment]
```
 =||= ```
Will that actually work, though? From what I could tell looking at the code, a 
TypeAdaptor is registered against a specific type that is later retrieved with 
a map lookup. Since my method relies on any object simply implementing an 
interface, doesn't that require a change to Gson?

The alternative would be for each object to register itself with some 
globally-used Gson object. I preferred the interface approach.
```

Original comment by `mint...@everlaw.com` on 18 Jan 2012 at 7:06
 =||= ```
It'll work, but you need to register a TypeAdapterFactory, not a TypeAdapter. 
The factory lets you support any type.
```

Original comment by `jessewil...@google.com` on 21 Jan 2012 at 2:06
 =||= ```
Thank you for the continued guidance, Jesse. A TypeAdapterFactory is definitely 
the right way to do this, but I've run into a few issues with accessibility in 
implementing it. I've attached my TypeAdapterFactory and the interfaces 
associated with it, and I would appreciate any suggestions you can give me on a 
better approach. I am aware that using ReflectiveTypeAdapter in the way that I 
have is something of a hack (I should be following an approach like 
TreeTypeAdapter's delegate()), but I don't think it changes the idea much.

There are a few calls to my own custom class called ""Reflection"". I am not 
going to include it in the attachment, but I'll specify the methods instead:

Class classOfType(Type t)
Return the upper bound on t. If (t instanceof Class), it's simply ((Class) t). 
For a ParameterizedType, e.g., List<String> would be List.class. For something 
like ""? extends Comparable"", it's Comparable.class.

Class[] getTypeParameters(Class implClass, Class genClass)
Ascends and descends the class hierarchy between implClass and genClass to 
return the array indicating genClass's instantiated type parameters as 
specifically as possible. For any parameter that doesn't resolve completely, 
the behavior follows that of classOfType(). (In its usage here, it's used to 
find the actual class DESERIALIZER when a class implements 
JsonDeserialization<DESERIALIZER>.)

T newInstance(Class<T> c)
Just like c.newInstance() except that exceptions are rethrown as a 
RuntimeException and the accessibility is set to true before invoking the 
constructor (so that non-public constructors can be invoked).

Field getAccesibleField(Class c, String fieldName)
Calls c.getDeclaredField(fieldName), rethrowing exceptions as a 
RuntimeException and setting the resulting Field's accessibility to true and 
before returning it.
```

Original comment by `mint...@everlaw.com` on 6 Feb 2012 at 3:19

Attachments:
- [factory.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-6/factory.zip)
 =||= ```
Yeah, you probably shouldn't have to do that much work. See the 
TypeAdapterFactory documentation for an example that includes delegation:

http://google-gson.googlecode.com/svn-history/r1110/trunk/gson/docs/javadocs/com
/google/gson/TypeAdapterFactory.html

For serialization, you should delegate to the concrete class of the type being 
serialized. For deserialization, you should delegate to the adapter of the 
concrete class that implements your interface. You can get both type adapters 
using the Gson instance passed in to create().
```

Original comment by `jessewil...@google.com` on 6 Feb 2012 at 4:46
 =||= ```
I'm sorry, but I'm having trouble following your suggestion. My mechanism 
allows a class to implement one or both of JsonSerialization and 
JsonDeserialization<DESERIALIZER>. If Obj obj implements the former, calls to 
gson.toJson(obj) execute a callback to 
obj.serialize(gson.serializationContext). If Obj implements the latter, calls 
to gson.fromJson(Obj.class) effectively execute 
DESERIALIZER.newInstance().deserialize(JsonElement je, Obj.class, 
gson.deserializationContext).

I don't see how I can handle that with a delegate. I understand that I can 
avoid my usage of ReflectiveTypeAdapter, but that's a more minor issue. The 
issue I'm running up against is that in implementing my own TypeAdapterFactory, 
I can't technically access gson.de/serializationContext without hacking around 
the Java security system. This leads me to believe I'm doing something wrong.

In the case where I wish to override the default de/serialization, I don't 
believe that I can perform the delegation you suggest because I'm not actually 
registering a type adapter for every type implementing JsonSerialization and 
JsonDeserialization (my two custom interfaces). Is there some hook to perform 
that registration without resorting to hacks that use the Reflections package 
to find every subclass of the aforementioned interfaces and register a 
TypeAdapter for each?

The point of my factory is to allow objects to simply implement an interface 
instead of having to register themselves with a canonical Gson instance. That 
means that I can't ""delegate to the concrete class of the type being 
serialized"" for classes that implement JsonSerialization because I need to 
ensure that the object's serialize(jsc) method is called instead. I also don't 
think I can delegate for deserialization because the deserializer is not 
registered with any Gson instance.

Am I missing something simple?
```

Original comment by `mint...@everlaw.com` on 6 Feb 2012 at 9:15
 =||= ```
Got it. The JsonSerializationContext/JsonDeserializationContext APIs aren't 
present nor necessary for streaming type adapters implementing the TypeAdapter 
interface. Instead that interface uses 'Gson' which provides a superset of the 
functionality of JsonSerializationContext and JsonDeserializationContext.

If you want, change your interface to take a Gson instance instead. I posted 
another big TypeAdapterFactory example on issue 43; you may want to read it 
through.
```

Original comment by `jessewil...@google.com` on 7 Feb 2012 at 5:02
 =||= ```
Perfect! Thank you very much. I'll reply here soon with a cleaner version of my 
InterfaceTypeAdapterFactory mechanism. Perhaps it will turn out to be something 
worth including in trunk after a few iterations.
```

Original comment by `mint...@everlaw.com` on 7 Feb 2012 at 5:24
 =||= ```
[deleted comment]
```
 =||= ```
[deleted comment]
```
 =||= ```
Thanks a lot for working through this issue with me. Attached is an 
implementation of the mechanism I discussed. It uses the Drink example you 
provided in  issue 43 . My goal was to make it as simple as possible for an 
implementor to perform the conversion to and from Json.

It's also available on github: https://github.com/BMintern/gson-interface

In order for it to work, it must be registered with the Gson instance:
Gson gson = new GsonBuilder()
        .registerTypeAdapterFactory(new InterfaceAdapterFactory())
        .create();

Note that I changed the deserializer class to implement JsonDeserializes 
instead of JsonDeserializer. I felt that the method signature defined there was 
more consistent with JsonSerialization (and slightly easier to use).

Note also that this provides a dead-simple way for a class to recursively 
serialize itself.
```

Original comment by `mint...@everlaw.com` on 9 Feb 2012 at 12:02

Attachments:
- [gson-interface.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-400/comment-13/gson-interface.zip)
 =||= ```
Nice work!

FYI Gson team, mintern's library is a use case for a public getNextAdapter() 
method.
```

Original comment by `limpbizkit` on 9 Feb 2012 at 1:05
 =||= ```
Thanks, I'm glad you like it! Unfortunately, it also uses TypeToken(Type) in a 
gross way. I'd be interested in hearing an alternative. See 
GsonContext.nextAdapter(Type).
```

Original comment by `mint...@everlaw.com` on 9 Feb 2012 at 1:14
 =||= ```
Looks interesting. mintern/Jesse, do you have any take on the performance 
impact of this? I remember that in the past, annotations caused us quite a bit 
of hit on performance. Does this reflection have any such issues?
```

Original comment by `inder123` on 11 Feb 2012 at 1:31
 =||= ```
I did not perform any performance tests on my mechanism. I can say that in the 
case of large class hierarchies where none actually implements 
JsonDeserialization, the Reflection.getTypeParameters(...) call will visit 
every ancestor of the type. I expect that this could be trivially improved by 
first checking JsonDeserialization.class.isAssignableFrom(...) before calling 
getTypeParameters.

Based on my (somewhat limited) understanding of Gson, the most expensive part 
will be called just once per (de/serialized) type per Gson instance. That is, 
the first time a user calls a Gson method on a type, the reflection 
introspection will slow it down somewhat. Subsequent operations, however, 
should be as fast as they currently are.
```

Original comment by `mint...@everlaw.com` on 13 Feb 2012 at 7:25
 =||= ```
We're going to publish the getNextAdapter API in Gson 2.2, though I believe we 
may rename it to getDelegateAdapter().

mintern, any further action you'd like us to take here?

```

Original comment by `limpbizkit` on 18 Mar 2012 at 6:08
 =||= ```
That's a good start, but I found in the implementation of my interface that I 
sometimes needed to call getNextAdapter(..., Type). Currently, getNextAdapter 
only accepts a TypeToken as an argument. The solution, then, is to either 
implement getNextAdapter(..., Type) or to make the TypeToken(Type) constructor 
public. A justification follows.

I provide a pair of methods (called thisToJson and thisFromJson) that allow one 
to use Gson to perform the de/serialization while avoiding infinite recursion. 
As you're aware, this makes use of getNextAdapter.

In some cases, however, I have to call getNextAdapter with a different 
type--for example, when using thisFromJson to construct a subclass. In this 
case, I need to call getNextAdapter with a TypeToken other than the one with 
which my TypeAdapter was constructed.

For an example of what I'm talking about, see:

https://github.com/BMintern/gson-interface/blob/master/InterfaceAdapterFactory.j
ava#L137

called by:

https://github.com/BMintern/gson-interface/blob/master/GsonContext.java#L85

called by:

https://github.com/BMintern/gson-interface/blob/master/InterfaceExample.java#L81
```

Original comment by `mint...@everlaw.com` on 19 Mar 2012 at 9:29
 =||= ```
Can you use TypeToken.get(type) ?
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:46
 =||= ```
Yes, I can. I don't know how I missed that. Thanks! This bug can be closed.
```

Original comment by `mint...@everlaw.com` on 12 Apr 2012 at 8:58
 =||= ```
This is a very useful addition.  Worked fine inside our own codebase.  I think 
it would make a good addition to the core library.
```

Original comment by `a...@shapeways.com` on 13 Apr 2012 at 8:49
 =||= ```
Thanks! I'm glad it was useful.

Some notes based on our usage:

1. If a class has a non-static inner class that extends Runnable, it results in 
an infinite loop during serialization. This is a problem with Gson in general, 
as far as I can tell. Implementing JsonSerialization and avoiding the use of 
thisToJson allows one to avoid this problem.

2. As Gson appears to be moving toward a streaming JSON interface, I'm not sure 
how much sense my interface makes. Streaming is clearly superior for large 
datasets, but it adds a lot of complexity when you just want to serialize a 
simple object.

3. Make sure you have the latest version. I made a change nearly a month ago 
that improved efficiency and fixed the problem outlined in (1) above. Just 
today I committed the change suggested by comment #20 above.

4. My package introduces several new classes that might be confusing in the 
general case (JsonSerialization, JsonDeserialization, JsonDeserializes, 
GsonContext, InterfaceTypeAdapter, InterfaceAdapterFactory). Some of my 
GsonContext functionality could potentially be rolled into the Gson object 
itself, but otherwise the departure from standard Gson means that I can't 
simplify the interfaces all that much.

5. Requiring an object to be deserialized by a separate class that implements 
JsonDeserialization is a bit cumbersome, but there's not a good way around it 
as far as I can tell. One pattern that eases the indirection is to make the 
deserializer be a static inner class of the class it is deserializing. In order 
to do that, in YourClass.java you'll have to import 
YourClass.YourClassDeserializer, where YourClass implements 
JsonDeserialization<YourClassDeserializer>, and YourClassDeserializer 
implements JsonDeserializes<YourClass>.

I hope that helps. Definitely report any issues you have on my github... I'm 
generally pretty responsive.

https://github.com/BMintern/gson-interface
```

Original comment by `mint...@everlaw.com` on 13 Apr 2012 at 9:15
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:50
- Changed state: **Done**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
401Deserializing of custom object collection (comma issue)Google Code ExporterGoogleCodeExporter03/19/15, 06:31:38 PM"```
What steps will reproduce the problem?

1. The code:
 items = gson.fromJson(json, new TypeToken<ArrayList<Foo>>(){}.getType());

2. The data:
[
 {""uuid"":""041347d3-56b5-4f64-b295-044d812802a3"", ""path"":""fooPath"", ""name"":""FooName""},
]

What is the expected output? 

  ArrayList of Foo with size = 1.

What do you see instead?

  ArrayList of Foo with size = 2.

What version of the product are you using? On what operating system?

  gson-2.1, Android 3.1

Please provide any additional information below.

  The comma (,) symbol after the (}) causes trouble. If I remove the comma - the resulting array is correct.


```

Original issue reported on code.google.com by `martynas...@gmail.com` on 12 Jan 2012 at 2:10""```
Unnecessary commas aren't valid JSON. Gson supports them when you're 
databinding because it's lenient by default. Here's what JsonReader says on it:

  ""Setting the parser to lenient causes it to ignore the following syntax errors:
   ... Unnecessary array separators. These are interpreted as if null was the omitted value.""

http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/s
tream/JsonReader.html#setLenient(boolean)

Your best bet is to avoid the avoid unnecessary commas in your documents. 
Usually machine-generated JSON won't have them.
```

Original comment by `limpbizkit` on 12 Jan 2012 at 3:58
- Changed state: **WontFix**
 =||= ```
Could you kindly reconsider this?

When writing the json manually (what I do quite often as I use it for 
configuration)
the trailing comma bites me quite often. Lenient mode doesn't help here at all 
as the null leads to worse problems later.

Note that both Java and Javascript allow and IGNORE trailing commas in array 
initializers, see
http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.6
http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.5
Maybe one day JSON will too as it's very practical.

In most browsers ""[1,, 2,]"" is the same as ""[1, null, 2]"", since the trailing 
comma gets ignored and only the others get interpreted as nulls.

The needed change is very trivial (just drop the condition above the comment 
`fall-through to handle "",]""`).

```

Original comment by `Maaarti...@gmail.com` on 29 Jul 2012 at 8:58
 =||= Is there a workaround for this? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
402Memory Leak in web applicationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:39 PM"```
What steps will reproduce the problem?
1. Use on web application / Tomcat , view log
2.
3.

What is the expected output? What do you see instead?
Expected None / Warning

What version of the product are you using? On what operating system?
CentOS/ Apache Tomcat Version 7.0.12

Please provide any additional information below.

Jan 26, 2012 12:09:41 AM org.apache.catalina.loader.WebappClassLoader 
checkThreadLocalMapForLeaks
SEVERE: The web application [] created a ThreadLocal with key of type 
[com.google.gson.internal.bind.MiniGson$1] (value 
[com.google.gson.internal.bind.MiniGson$1@73055179]) and a value of type 
[java.util.HashMap] (value [{}]) but failed to remove it when the web 
application was stopped. Threads are going to be renewed over time to try and 
avoid a probable memory leak.
```

Original issue reported on code.google.com by `a...@aniljava.com` on 26 Jan 2012 at 6:17""```
Additional INFO:
Using Gson as :

String gson = new Gson().toJson(<java.util.Map instance>);

Map<String, String> responseMap = new Gson().fromJson(responseJSON, Map.class); 
//not related to first

```

Original comment by `a...@aniljava.com` on 26 Jan 2012 at 6:21
 =||= ```
This is just a stupid warning from Tomcat. Ignore the warning, and consider 
upgrading to a better servlet container.
```

Original comment by `limpbizkit` on 27 Jan 2012 at 4:31
- Changed state: **WontFix**
 =||= ```
Does this mean the warning is not something to worry about?
```

Original comment by `phil...@gmail.com` on 6 Feb 2012 at 4:36
 =||= ```
Yeah, or you could report this as a bug to the Tomcat maintainers.
```

Original comment by `limpbizkit` on 6 Feb 2012 at 1:26
 =||= ```
I usually agree that these warning messages are dumb; I think there is some 
merit to to this one. Hear me out based on my reading of the code.

Start here:
http://docs.oracle.com/javase/6/docs/api/java/lang/ThreadLocal.html

ThreadLocal instances are typically private static fields in classes that wish 
to associate state with a thread (e.g., a user ID or Transaction ID).


Whenever I've used ThreadLocals they are static members of the class. I'm 
certainly willing to entertain other use cases. The use in Gson appears to be a 
performance cache.

I had a use case where I created a new Gson() on every request.  It ended up 
associating a ThreadLocal on the servlet container thread.  Until the container 
thread was GC'd these ThreadLocal's were continually associated with the 
container thread. I had several thousand of these warnings get printed out on 
shutdown. Not that big of a deal because these are pretty small; but it doesn't 
give me the warm and fuzzy that this is as right as it should be.

I think it would be more correct if the ThreadLocal inside Gson was static to 
the class.

My $.02

```

Original comment by `marty.r...@gmail.com` on 6 Feb 2012 at 8:32
 =||= ```
Gson's ThreadLocal is not a performance cache. Its for detecting reentrancy in 
TypeAdapters. Making it static would make it incorrect. 

The GC can collect ThreadLocal instances in the same way that it collects 
instances of any other type. If you create a Gson instance and release it, 
there is no leak.

The only potential for leak here is that we create up to one (empty) HashMap 
per live Gson instance per live thread. Most applications have a limited number 
of live Gson instances: they either create them and discard them (zero long 
lasting instances) or create one and reuse it (one long lasting instance.)
```

Original comment by `jessewil...@google.com` on 7 Feb 2012 at 3:15
 =||= ```
hi,

i have the same problem. and it is not as stupid warning from tomcat. a 
threadlocal value will be put in the threadlocalmap which is an instance 
variable in the Thread-class. so every object here must be removed in a 
serverside application. 

the problem arises, when you stop your application or redeploy it. there is a 
gson-instance in the threadlocalmap and because this is directly referenced 
from thread, this value lives as long as the thread in the server (well, 
forever). the situtation becomes really worse, when you profile the memory: the 
gson-object has my ""webappclassloader"" as classloader and this classloader is 
also not gc'd. this classloader (as every classloader) caches all classes which 
are loaded with it, so all my classes (and my webapp-library-classes) are also 
not GC'd. and every static variable in my classes (and my library classes) are 
also not GC'd. 

please profile a simple webapplication with your gson-threadlocal and undeploy 
the application in the container. you will see, that your 
applicationcode/-classes still is/are referenced by the webappclassloader which 
is referenced by a value which is referenced by a threadlocal-variable. so i 
think: tomcat is correct, this is probably a memory leak!

last but not least: yes, a threalocal can be GC'd like every other object in 
java. but the value in the threadlocal is directly referenced by the current 
thread, so in a serverside application the value in the threadlocal is never 
GC'd as long the thread exists.

please think about it.



```

Original comment by `ulrich.s...@gmail.com` on 3 Mar 2012 at 8:24
 =||= ```
@ulrich apologies for the delayed reply.

In your redeploy scenario what exactly is causing objects to leak? The 
ThreadLocal should be collected when nothing references it, and nothing 
references it. There might be a bug in the silly Tomcat diagnostic code.
```

Original comment by `jessewil...@google.com` on 22 Mar 2012 at 10:30
 =||= ```
Hi

java.lang.Thread references every threadlocal (real tricky). Tomcat only looks 
for values in the threadlocalmap (instancevariable from java.lang.Thread) and 
issues this warning. So i think it is not a silly warning: the value is not 
gc'd, it is referenced.
```

Original comment by `ulrich.s...@gmail.com` on 23 Mar 2012 at 3:28
 =||= ```
if tomcat is what's broken, maybe an interested party could provide a patch for 
tomcat? if a bug is filed with them, post about it here; i am not able to find 
one.
```

Original comment by `jon.shu...@gmail.com` on 20 Jul 2012 at 8:19
 =||= ```
tomcat isn't broken. it does correctly warn that a value is not GC'd. and 
tomcat is right, the value is not gc'd.
```

Original comment by `ulrich.s...@gmail.com` on 21 Jul 2012 at 4:07
 =||= ```
Any chance of this issue being reconsidered, or at least a workaround being 
investigated? In light of @ulrich's comments, this looks like a valid issue.
```

Original comment by `rob.c...@gmail.com` on 16 Oct 2012 at 11:40
 =||= ```
The project members here are wrong. Tomcat's warning is valid.

When you store an object o in a static ThreadLocal tl, it essentially gets 
stored in a map m in the thread t as an entry of the form WeakReference(tl) -> 
o. If t enternally lives in a pool, as is common in servlet containers, m will 
never be GCed so in order to free the entry, tl must be GCed or o must be 
removed from it. However, neither of these will happen if you have a static 
Gson that you never null out.

Now see the problem: t references m, which references o, which references o's 
class, which references the webapp's class loader, which references the class 
containing the Gson, which references tl, so this whole object graph won't be 
GCed. Thus the webapp's class loader and all of its classes are stuck in memory 
even if you undeploy it.
```

Original comment by `j...@dataminr.com` on 17 Oct 2012 at 2:10
 =||= ```
I think I might have worked around the problem with r1214.  The issue isn't 
that the ThreadLocal knows about any application classes; it's just that I'm 
*subclassing* thread local (as it is intended to be) and that's preventing 
unloading.

The correct fix for this problem is for Tomcat to not reuse threads once an 
applications has been unloaded. Threads are not stateless! Tomcat's shared 
thread pool is a broken optimization that's the root cause of this trouble. But 
I suspect it's a lot harder to fix Tomcat than it is to work around the problem 
in Gson, so we work around the problem in Gson. Sigh.
```

Original comment by `limpbizkit` on 23 Oct 2012 at 2:46
 =||= ```
Sorry, but i think you are wrong :-)

Here:
https://sites.google.com/site/gson/gson-user-guide#TOC-Gson-Performance-and-Scal
ability

you can read this:
=====
The Gson instance does not maintain any state while invoking Json operations. 
So, you are free to reuse the same object for multiple Json serialization and 
deserialization operations.
=====

So most people who are using gson in serverside apps use a single instance 
(static instance variable of type Gson). As long as this instance lives, the 
included ThreadLocal instancevariable is not GC'd. And now read comment 13 
again. 

Btw: this is not an issue in tomcat, it is also an issue in websphere (i had a 
comparable issue with WAS7) and i think in weblogic, ... an dany server which 
uses a threadpool. the difference between tomcat an this servers is that tomcat 
issues a warning, the others don't. but the memoryleak exists (believe me, we 
had a lot of work with a websphere-app and threadlocals which were not cleared; 
many many libraries put threadlocals but don't clear them).

And it cannot be fixed in any of these servers, it is a issue in JRE, because 
the values in the TL are referenced from the thread as long as the TL lives. 
The ""Thread.threadlocalMap"" is a map for ""global variables in the thread 
scope"". if you put values in this scope you should clear them out later. Tomcat 
issues a warning that there are values in this map which were not cleared. 

As Gson does not start the thread, Gson should not take assumptions about the 
lifecycle of a thread. You are taking the assumption, that a thread should be 
thrown away after it handled a request. That's wrong for most servers. 

I think your Gson class needs some sort of ""clear"" Method; or the people should 
be informed that a Gson-Instance does not clear it's state in the thread scope 
and it would be better to NOT use a single instance of type ""Gson"".



```

Original comment by `ulrich.s...@gmail.com` on 23 Oct 2012 at 4:53
 =||= ```
I don't know if a ""clear"" method would make sense given that you could just 
null out the Gson reference. Perhaps a cleaner resolution would be to stop 
using a ThreadLocal and instead pass state in the [de]serialization context.
```

Original comment by `j...@dataminr.com` on 23 Oct 2012 at 2:19
 =||= ```
And how would one null out this ThreadLocal reference created by Gson ?
```

Original comment by `mich...@newsrx.com` on 19 Dec 2012 at 9:01
 =||= ```
Null out the Gson reference; then it and its ThreadLocal get GCed.
```

Original comment by `j...@dataminr.com` on 19 Dec 2012 at 11:27
 =||= ```
I switched to creating the Gson instances on demand so that they would 
hopefully get GCed as soon as scope changed, and now I get hundreds of of:

created a ThreadLocal with key of type [com.google.gson.Gson$1] (value 
[com.google.gson.Gson$1@4ea55a96]) and a value of type [java.util.HashMap] 
(value [{}]) but failed to remove it when the web application was stopped. 
Threads are going to be renewed over time to try and avoid a probable memory 
leak.

Can a way be added to EXPLICITLY permit request for thread destruction via a 
static class method call?
```

Original comment by `mich...@newsrx.com` on 31 Jan 2013 at 3:48
 =||= ```
@18

I null out the reference in contextDestroyed and still get the warnings.
```

Original comment by `edychen` on 4 Mar 2013 at 8:22
 =||= ```
I think you cannot null out the reference because 
java.lang.ThreadLocal.ThreadLocalMap still references the values. ThreadLocal's 
must be cleared explictly and in the same thread as the were filled with a 
value, because the ""current thread"" is the key in the map. So really don't try 
to clear the values in ""contextDestroyed"".

I think you have to live with it ... it is a bug in a library :-)
```

Original comment by `ulrich.s...@gmail.com` on 5 Mar 2013 at 5:46
 =||= ```
>> ThreadLocal's must be cleared explictly and in the same thread as the were 
filled with a value, because the ""current thread"" is the key in the map.

Please explain how i can do that. (Code-Sample?)
Or exists in the meantime an other workaround to face this problem?
My Provider don't allow my Webapp to be deployed because of this issue so this 
is a very critical problem for me.

```

Original comment by `hannes.w...@gmail.com` on 27 Mar 2013 at 10:16
 =||= ```
Since I just started using Apache ActiveMQ, which is bundled with TomEE
(tomcat7), I see more threadlocals in my tomee/tomcat7 log when shutting
down the container.

So, I did some research, and I think I found an ActiveMQ
issue/mail-discussion-thread which discussed this; i think the ActiveMQ
JIRA/issue was the better thread to follow, and I saw a recommendation
there that stated that this is a classloader issue; if the library that is
causing the issue is in your tomcat/lib folder, then move it to the
web-inf/... folder, and IIRC, problem can be solved that way.

I have not tried that, since TomEE bundles ActiveMQ library in tomee/lib
folder, I prefer not to de-bundle activeMQ from TomEE, and I really don't
have an issue with the threadlocals reported in the log when shutting down
tomee/tomcat7.
```

Original comment by `smithh03...@gmail.com` on 27 Mar 2013 at 11:34
 =||= ```
I don't think you can solve the issue by putting the library in the web-inf/lib 
folder (most people do this). The problem here is that the systemclassloader 
from java itself references the value which is not cleared because ThreadLocal 
(and ThreadLocalMap) are standard java classes and they ""glue"" the value to the 
current thread. if they reference a value which was loaded by a different 
classloader, this value (and the classes and everything hanging behind) will 
not be gc'ed. so a higher-order classloader references a 
application-classloader. no chance.

you have to live with it: if you use gson, you have this bug. and the team will 
not fix it because they think it is not a bug.



```

Original comment by `ulrich.s...@gmail.com` on 29 Mar 2013 at 1:06
 =||= ```
I believe this code solves the issue, at least in Java 7 and Gson 2.2.2. Just 
call it when your webapp shuts down. But I don't use Tomcat currently so I 
haven't tested it in action. (Of course, it isn't exactly the epitome of 
elegance and isn't at all portable...)
```

Original comment by `j...@dataminr.com` on 29 Mar 2013 at 2:54

Attachments:
- [GSONThreadLocalImmolater.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-402/comment-25/GSONThreadLocalImmolater.java)
 =||= ```
I tried the GSONThreadLocalImmolater and tested.

1. added the class, without 'main()', to my project (web app running on
tomcat/tomee)

2. added the following to @PreDestroy method of CDI @ApplicationScoped bean

    try {
        Integer threadLocalCount;
        GSONThreadLocalImmolater gsonImmolator = new
GSONThreadLocalImmolater();
        threadLocalCount = gsonImmolator.immolate();
        logger.info(""gsonImmolator.immolate() completed: immolated "" +
                    threadLocalCount + "" GSON values in ThreadLocals"");
    } catch (Exception e) {
        logger.info(""caught exception raised by gsonImmolator.immolate()"",
e);
    } finally {
        // do nothing
    }


3. Ran the web app, executed part of app that has gson dependency, exited
the app, and shutdown tomee/tomcat7. below is what was in the log

Mar 29, 2013 1:11:01 PM pf.ApplicationScopeBean destroy
INFO: gsonImmolator.immolate() completed: immolated 1 GSON values in
ThreadLocals
Mar 29, 2013 1:11:01 PM pf.ApplicationScopeBean destroy
INFO: END

4. Voila, that looks good, that it immolated '1' GSON value in
ThreadLocals, because when I usually stop tomee/tomcat7 on production
server, I see the following (which was possibly immolated on my development
server, just now)

Mar 28, 2013 9:27:00 PM org.apache.catalina.loader.WebappClassLoader
checkThreadLocalMapForLeaks
SEVERE: The web application [/mcmsweb] created a ThreadLocal with key of
type [com.google.gson.Gson$1] (value [com.google.gson.Gson$1@e9a08f7]) and
a value of type [java.util.HashMap] (value [{}]) but failed to remove it
when the web application was stopped. Threads are going to be renewed over
time to try and avoid a probable memory leak.


5. Now, '1' threadlocal down and 'more' to go, since I still get the
following in my log after shutting down tomee/tomcat7. Thanks!

Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [PoolIdleReleaseTimer] but has failed to stop it. This is very likely
to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [Default JMS Resource Adapter-worker-1] but has failed to stop it.
This is very likely to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [Default JMS Resource Adapter-worker-2] but has failed to stop it.
This is very likely to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [ActiveMQ VMTransport: vm://localhost#5-2] but has failed to stop it.
This is very likely to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [ActiveMQ VMTransport: vm://localhost#5-3] but has failed to stop it.
This is very likely to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
clearReferencesThreads
SEVERE: The web application [/mcmsweb] appears to have started a thread
named [ActiveMQ VMTransport: vm://localhost#4-3] but has failed to stop it.
This is very likely to create a memory leak.
Mar 29, 2013 1:11:02 PM org.apache.catalina.loader.WebappClassLoader
checkThreadLocalMapForLeaks
SEVERE: The web application [/mcmsweb] created a ThreadLocal with key of
type [com.google.api.client.util.escape.Platform$1] (value
[com.google.api.client.util.escape.Platform$1@30b7785e]) and a value of
type [char[]] (value [[C@5d3f7c4e]) but failed to remove it when the web
application was stopped. Threads are going to be renewed over time to try
and avoid a probable memory leak.
```

Original comment by `smithh03...@gmail.com` on 29 Mar 2013 at 5:58
 =||= ```
That code works great. I tweaked the code, removed the IF which checks if the 
class is 'Gson.class', and just let it run through all threadlocals != null, 
and now all of my threadlocals are cleared!

Kindly, disregard the last part of my previous response; after doing some 
testing and reviewing the threads in Java Visual VM, I see that the ActiveMQ 
threads are cleared as well, most likely because the following occurs last 
(after catalina's WebappClassLoader checkThreadLocalMapForLeaks) :

Mar 29, 2013 6:05:43 PM 
org.apache.openejb.resource.activemq.ActiveMQResourceAdapter stop
INFO: Stopping ActiveMQ
Mar 29, 2013 6:05:43 PM 
org.apache.openejb.resource.activemq.ActiveMQResourceAdapter stopImpl
INFO: Stopped ActiveMQ broker

```

Original comment by `smithh03...@gmail.com` on 29 Mar 2013 at 10:20
 =||= ```
I don't know if it's wise to clear all ThreadLocals because you could be 
clearing state necessary for the standard library or Tomcat or something else. 
Even if the appears to work, it might cause things to fail in subtle ways, and 
if you upgrade Tomcat or Java, it might cause different things to fail. The 
code was hacky enough in its original form.
```

Original comment by `j...@dataminr.com` on 29 Mar 2013 at 10:32
 =||= ```
Understood, thanks.
```

Original comment by `smithh03...@gmail.com` on 29 Mar 2013 at 10:35
 =||= ```
[deleted comment]
```
 =||= ```
It is worth noting that this issue seems to have been addressed in revision 
1223 of the code: http://code.google.com/p/google-gson/source/detail?r=1223

This change was part of release 2.2.3 of the Gson library.

Basic tests (deploy webapp, perform serialization, undeploy webapp) show that 
Tomcat reports warnings of the type as discussed in this issue for version 
2.2.2 of Gson, but does not report this type of warnings when using versions 
2.2.3 or 2.2.4.
```

Original comment by `Guus.der...@gmail.com` on 24 Jul 2013 at 1:26
 =||= ```
Since this issue has been resolved can we have it marked as resolved? As it 
currently stands you have to read all the way to the bottom to find out that 
it's been fixed and the current status of ""wontfix"" makes it seem like wasted 
effort.

I'm also just going to mention that I've had this issue while using Netty and 
Gson 2.2.2 instead of Tomcat just so that anybody else in a similar situation 
can more easily find the solution to this issue.
```

Original comment by `sam.peng...@gmail.com` on 24 Feb 2014 at 5:56
 =||= ```
Echoing Sam. Please mark as issue as resolved. I just wasted 15 minutes only to 
find out it was fixed it with 2.2.3.
```

Original comment by `thomashu...@gmail.com` on 8 Apr 2014 at 9:39
 =||= Sorry to comment on an old thread, but just had this issue and wanted to point to the specific commit that appears to have solved the issue. As stated this is in 2.2.3 onwards.
https://github.com/google/gson/commit/6dc6b4be9208221caad81b52aec665f133b5e9af

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
403Application has crashes when using Gson library in multithreading environment on Android 3.2 (Acer a100)Google Code ExporterGoogleCodeExporter03/19/15, 06:31:46 PM"```
We use Gson library 2.0 in our application and find that it is unstable in 
multithreading environment on Acer A100 device (Android 3.2) - see test 
application, that crashed every time with different type of exceptions on A100 
if we use several threads. If we call fromJson method in one thread or use 
syncronized block on it - it's work fine. On other device and on Android 3.2 
emulator test application work fine independently on treads count.

P.S. in test app we apply fix from Issue 255 
(http://code.google.com/p/google-gson/issues/detail?id=255), but original gson 
lib have the same behaviour on Acer A100.
```

Original issue reported on code.google.com by `effectiv...@gmail.com` on 31 Jan 2012 at 8:48
- Merged into: #255

Attachments:
- [jsontest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-0/jsontest.zip)
- [jsontest.apk](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-0/jsontest.apk)""```
You need to apply the fix from 255. I recommend jarjar; others have had success 
with proguard.
```

Original comment by `limpbizkit` on 31 Jan 2012 at 1:56
- Changed state: **Duplicate**
 =||= ```
we apply this fix (255), but nothing changes - the app still crashes on Acer 
A100 devices
```

Original comment by `effectiv...@gmail.com` on 1 Feb 2012 at 6:20
 =||= ```
Can you paste a stacktrace? I don't have an A100 to test with.
```

Original comment by `jessewil...@google.com` on 2 Feb 2012 at 6:36
 =||= ```
yes, we have several acer devices and we can test all proposed solutions or 
prepare additional information about this issue
```

Original comment by `effectiv...@gmail.com` on 2 Feb 2012 at 7:08

Attachments:
- [acer_log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log1.zip)
- [acer_log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log2.zip)
- [acer_log3.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log3.zip)
- [acer_log4.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-4/acer_log4.zip)
 =||= ```
Can you still reproduce on Gson 2.1? Some classes from your stacktrace like 
ModifierBasedExclusionStrategy don't exist in Gson 2.1.
```

Original comment by `limpbizkit` on 2 Feb 2012 at 7:13
 =||= ```
The device is broken and should be returned to the manufacturer. 
ModifierBasedExclusionStrategy.shouldSkipField doesn't even call 
ArrayList.add(). 

02-02 10:05:35.500: E/AndroidRuntime(1352): 
java.lang.ArrayIndexOutOfBoundsException: index=1081965120 length=0
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
java.util.ArrayList.add(ArrayList.java:124)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.ModifierBasedExclusionStrategy.shouldSkipField(ModifierBasedEx
clusionStrategy.java:42)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.DisjunctionExclusionStrategy.shouldSkipField(DisjunctionExclus
ionStrategy.java:38)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.Gson$1.deserializeField(Gson.java:225)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Refl
ectiveTypeAdapterFactory.java:107)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTy
peAdapterFactory.java:65)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:
45)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Reflective
TypeAdapterFactory.java:75)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Re
flectiveTypeAdapterFactory.java:74)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Refl
ectiveTypeAdapterFactory.java:112)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTy
peAdapterFactory.java:65)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.Gson.fromJson(Gson.java:719)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.Gson.fromJson(Gson.java:686)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.Gson.fromJson(Gson.java:636)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.google.myjson.Gson.fromJson(Gson.java:608)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
com.gson.test.JsontestActivity$ParseRunnable.run(JsontestActivity.java:86)
02-02 10:05:35.500: E/AndroidRuntime(1352):     at 
java.lang.Thread.run(Thread.java:1020)
```

Original comment by `limpbizkit` on 2 Feb 2012 at 7:20
 =||= ```
[deleted comment]
```
 =||= ```
unfortunately, gson-2.1 also crashed on Acer (see attached). We have several 
Acer a100 devices and all of them has the same problems with gson, all other 
application work normally - we think the manufacturer will not accept claims 
for non-working device based on one issue.
```

Original comment by `effectiv...@gmail.com` on 3 Feb 2012 at 8:22

Attachments:
- [acer_gson21_log.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log.zip)
- [acer_gson21_log1.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log1.zip)
- [acer_gson21_log2.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-403/comment-8/acer_gson21_log2.zip)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
404TypeAdapter issueGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:49 PM"```
TypeAdapter for String.Class doesn't work on gson 2.1 (was working on previous 
version)


here a small test case:

expected output should be ""test"", but i got ""candy"" instead.
Note: this issue is only relative to the current 'stable' release.

------
public class TestCase {

    public static void main(String[] args) {

        String test = ""candy"";
        Gson gson = new GsonBuilder()
                .excludeFieldsWithModifiers(java.lang.reflect.Modifier.TRANSIENT)
                .registerTypeAdapter(String.class, new JsonSerializer<String>() {
                    public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {
                        return new JsonPrimitive(""test"");
                    }
                }).setPrettyPrinting().create();
        System.out.println(gson.toJson(test, String.class));
    }

}



```

Original issue reported on code.google.com by `ramarr...@gmail.com` on 1 Feb 2012 at 9:01""```
This was a difficult, but intentional decision. Why do you want to register a 
type adapter for String?


```

Original comment by `limpbizkit` on 2 Feb 2012 at 6:27
- Changed state: **Accepted**
 =||= ```
sometimes a string can contain data (xml) that have to be handled in a specific 
way.

In my scenario, i use xml -> string to serialize an xml via socket between 2 
app (and writing them on DB)

xml implementation isn't serializable (so, i have to do a conversion to string)

now, after all the trip (sending data via java serialization, write them on db, 
sending results back) i want to dump the result to a js client, that work 
better with json.

on 1.7.2 i add a typeadapter that try to detect if a string is an xml (contains 
/> or > or something like that, i haven't the code here) and if so, do a custom 
serialization before send it out.

Obviusly i can rewrote all the serialization layer, but this will be time 
consuming.
What i have found convenient, is to wrap my request/response bean, make the 
string that contain xml not gson_able (via notation) and make a getter to write 
on the wrapper the XML element that i need.
Then, i use the typeAdapter registered with Xml.Class and make here the custom 
serialization.

The only issue is that i have to write more code :(

The other option is to make XML serializable, and this will solve all my issue. 
Unfortunatly this solution isn't feasable due to implementation of XML library 
(can be probably wrapped as well, with some externalizable stuff, but again is 
time consuming)



```

Original comment by `ramarr...@gmail.com` on 6 Feb 2012 at 8:05
 =||= ```
Presumably you know which of your strings are eligible to be XML. Create a type 
XmlOrString and use that in the appropriate fields. Then register a type 
adapter for that type.

class XmlOrString {
  Document xml;
  String string;
}
```

Original comment by `limpbizkit` on 6 Feb 2012 at 1:42
 =||= ```
In your example, XmlOrString isn't serializable (as i state before,
XML /our impl of XML dom/ isn't serializable, due to high resource
need to perform the serialization. Same issue appen on dom4j for
example)
```

Original comment by `ramarr...@gmail.com` on 6 Feb 2012 at 7:00
 =||= ```
What does serialization have to do with Gson?

I'm marking this as won't fix just 'cause I don't think your use case is 
typical!
```

Original comment by `limpbizkit` on 11 Feb 2012 at 6:30
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
405Gson 1.7.1 - Gson.toJson(myObject) causes StackOverflowError on com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)Google Code ExporterGoogleCodeExporter03/19/15, 06:31:50 PM"```
When calling the following code from a Tomcat servlet:

Gson myjson = new Gson();
String json = myjson.toJson(myObject);
myjsons.add(json);

We get a stack overflow error: 

java.lang.StackOverflowError
        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:141)
        .....
        .....
        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)
        com.google.gson.ParameterizedTypeHandlerMap.getHandlerFor(ParameterizedTypeHandlerMap.java:143)
        com.google.gson.ObjectTypePair.getMatchingHandler(ObjectTypePair.java:66)
        com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:176)
        com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:160)
        com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:101)
        com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:62)
        com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:53)
        com.google.gson.Gson.toJsonTree(Gson.java:220)
        com.google.gson.Gson.toJson(Gson.java:260)
        com.google.gson.Gson.toJson(Gson.java:240)

myObject is an instance of: 

public class MyObject
{
public String a;
   public String b;
   public String c;
   public String d;
   public String e;
   public String f;
   public String g;
   public String h;
   public String i;
   public String j;

   public void init()
   {
     this.a= """";
     this.b= """";
     this.c= """";
     this.d= """";
     this.e= """";
     this.f= """";
     this.g= """";
     this.h= """";
     this.i= """";
     this.j= """";
   }
}

Here is the weird part... it seems to be related to Tomcat redeploys. If we 
redeploy tomcat and try again, sometimes (randomly) the stack overflow no 
longer occurs and it will continue to work until the next redeploy. 

Why would redeploying Tomcat have an affect on the Gson library? 


```

Original issue reported on code.google.com by `nicholas...@gmail.com` on 2 Feb 2012 at 3:14""```
Upgrading to latest version seemed to eliminate the error (not sure why). 
```

Original comment by `nicholas...@gmail.com` on 2 Feb 2012 at 10:35
 =||= Original comment by `limpbizkit` on 3 Feb 2012 at 2:42
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
407Trailing slash in array caused null value in outputGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:51 PM"```
What steps will reproduce the problem?
ArrayList<Integer> list = gson.fromJson(""[1,2,3,]"", new 
TypeToken<ArrayList<Integer>>() {}.getType());
either: fail(""Expected trailing slash to give error"");
or if super-lenient: assertEquals(3, list.size());

What is the expected output? What do you see instead?
Should fail according to the syntax diagram on http://json.org, or give an 
ArrayList<Integer> with three elements [1, 2, 3] if we want to emulate 
JavaScript's lenient behaviour.

What version of the product are you using? On what operating system?
2.1

```

Original issue reported on code.google.com by `martinpr...@google.com` on 8 Feb 2012 at 2:12""```
By the way, the actual behaviour (how could I miss that...) is to return the 
list [1, 2, 3, null], where the null is the obvious problem.
```

Original comment by `martinpr...@google.com` on 8 Feb 2012 at 6:56
 =||= ```
Gson is emulating the original implementation of org.json; it might be the 
wrong choice but I'd prefer not to change it for backwards compatibility.

If you'd prefer for it to crash, use TypeAdapter rather than fromJson():
  TypeAdapter<List<Integer>> typeAdapter = gson.getAdapter(new TypeToken<List<Integer>>() {});
  List<Integer> list = typeAdapter.read(""[1,2,3,]"");

This will throw. The new TypeAdapter APIs are strict about ',' whereas 
Gson.fromJson is lenient.
```

Original comment by `limpbizkit` on 9 Feb 2012 at 12:59
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
408Get NullPointer Exeption when parsing a Map<String,Map<String,String> object.Google Code ExporterGoogleCodeExporter03/19/15, 06:31:52 PM"```
What steps will reproduce the problem?
1.
According to documentation the following code should work:
<code>
Map<String,Map<String,String>> map = new HashMap<String,Map<String,String>>();
HashMap<String, String> vals = new HashMap<String,String>();
vals.put(""memo"", ""tired"");
vals.put(""mem"", ""lome"");
map.put( ""hello"",  vals);

String str = gson.toJson(map);
System.out.println(str);
Type type2 = new TypeToken<Map<String,Map<String,String>>>(){}.getType();
String str2 = gson.toJson(map, type2);
System.out.println(str2);

Map<String,Map<String,String>> map2 =
            gson.fromJson(str2, type2);
</code>
The Type object is being created to tell json the nested types that it should 
look for.
However, I get this error:
<error>
{""hello"":{""memo"":""tired"",""mem"":""lome""}}
Exception in thread ""main"" java.lang.NullPointerException
    at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)
    at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:146)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:721)
    at com.google.gson.Gson.fromJson(Gson.java:670)
    at RawCollectionsExample.main(RawCollectionsExample.java:80)
</error>
Notice that the json string is created correctly.  

What is the expected output? What do you see instead?
The output should be the map<string,map<string,string> back to its form.  


What version of the product are you using? On what operating system?
Gson 2.1 release 
http://code.google.com/p/google-gson/downloads/detail?name=google-gson-2.1-relea
se.zip&can=2&q=
This is happening on Kubuntu 11.10(x86_64).  Java version
java version ""1.6.0_30""
Java(TM) SE Runtime Environment (build 1.6.0_30-b12)
Java HotSpot(TM) 64-Bit Server VM (build 20.5-b03, mixed mode)
kernel = 3.0.0-15-generic


Please provide any additional information below.
```

Original issue reported on code.google.com by `jeremyvillalobos` on 10 Feb 2012 at 6:52""```
I'm guessing you have both gson.jar AND gson-stream.jar on your class path; 
that won't work.

The problem is that in Gson 2.1 we have a custom version of JsonReader that 
adds some secret hooks to make MapTypeAdatperFactory faster; these hooks won't 
work with gson-stream.jar's version of JsonReader.
```

Original comment by `limpbizkit` on 11 Feb 2012 at 6:25
- Changed state: **Invalid**
 =||= ```
Yes, that was it.
```

Original comment by `jeremyvillalobos` on 17 Apr 2012 at 11:18
 =||= ```
Thanks a lot. Helped me too
```

Original comment by `abiram...@gmail.com` on 19 Dec 2012 at 9:16
 =||= ```
Thanks a lot. Helped me too
```

Original comment by `abiram...@gmail.com` on 19 Dec 2012 at 9:16
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
409"ArrayIndexOutOfBoundsException on parsing ""/"" as a JSON document"Google Code ExporterGoogleCodeExporter03/19/15, 06:31:53 PM"```
It's an invalid document but we're crashing the wrong way. The problem has to 
do with how we handle the nonexecute prefix. We might have a more severe 
problem hiding here, particularly for source readers that feed data one 
character at a time.

  public void testStringEndingInSlash() throws IOException {
    JsonReader reader = new JsonReader(new StringReader(""/""));
    reader.setLenient(true);
    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
  }

```

Original issue reported on code.google.com by `limpbizkit` on 11 Feb 2012 at 7:51""Original comment by `limpbizkit` on 18 Mar 2012 at 6:16
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
412StackOverflowError on LoggerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:56 PM"```
I incorrectly used a logger in a class by forgetting the declaration to static.
I wanted to make a Json String out of the object of the class by the following 
way:

Gson gson = new Gson();
String json = gson.toJson(o, o.getClass());

There comes a java.lang.StackOverflowError exception, as you can see in my 
attachment.
When I declared the logger correctly, everything was fine.

My configuration:
- gson 2.1
- Win7, 64bit
- java6, u24, 64bit
```

Original issue reported on code.google.com by `christia...@gmail.com` on 21 Feb 2012 at 2:12

Attachments:
- [consoleOutput.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-412/comment-0/consoleOutput.txt)
- [GsonTester.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-412/comment-0/GsonTester.java)""Original comment by `limpbizkit` on 18 Mar 2012 at 5:22
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
413Cannot override default adapter for BigInteger typeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:59 PM"```
I've tried 
registerTypeAdapter(BigInteger.class, new TypeAdapter<BigInteger>()...)
but with no success.

The default behavior is not correct for javascript.

I see solution for Long (setLongSerializationPolicy method).
But with BigInteger I gave up and changed the library.
```

Original issue reported on code.google.com by `man...@barco.kiev.ua` on 21 Feb 2012 at 2:49""```
Yeah, that's definitely a bug. I'm tempted to just make the long serialization 
policy apply to BigIntegers and BigDecimals. But I know that there's some 
danger there.

Our best solution will be to make the type adapters for BigInteger and 
BigDecimal user-overrideable in Gson 2.2.
```

Original comment by `limpbizkit` on 25 Feb 2012 at 4:09
- Changed state: **Accepted**
 =||= ```
Thanks for reporting this. Fixed with r1132.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 5:56
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
414File object after deserialization has corrupted absolute pathGoogle Code ExporterGoogleCodeExporter03/19/15, 06:31:59 PM"```
What steps will reproduce the problem?
1) Create File object with absolute path: File file = new 
File(""/tmp/test.txt""). Output of file.getAbsolutePath() will be ""/tmp/test.txt""
2) Create gson string from File oject created in step #1.
3) Create File object from gson string created in step #2. Output of 
file.getAbsolutePath() will be ""/current_path/tmp/test.txt""

What is the expected output? What do you see instead?
Expected output in step #3 is same as on step #1 (""/tmp/test.txt""), but path of 
current dir is added in front of original path.

What version of the product are you using? On what operating system?
Using GSON 2.1, and CentOS. Same issue is on Windows 7 when writing absolute 
paths without disk name, i.e. /tmp/test.txt.

Please provide any additional information below.
Everything works well on Windows 7 when writing absolute path with disk name, 
i.e. C:/tmp/test.txt.
Attached is test file to reproduce that issue.

```

Original issue reported on code.google.com by `rimvydas...@gmail.com` on 24 Feb 2012 at 7:01

Attachments:
- [GsonFileTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-414/comment-0/GsonFileTest.java)""```
You should just create a type adapter for File.
```

Original comment by `limpbizkit` on 25 Feb 2012 at 4:34
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:46
- Changed state: **WontFix**
 =||= ```
Jesse, Jesse, Jesse. Seriously?
```

Original comment by `ray.ryan` on 10 May 2013 at 10:23
 =||= ```
This same issue sprang up today and caused a ton of confusion. Works perfectly 
on all OSX versions of Java I've tried, but was causing issues on coworkers' 
Windows7/JDK6 machines. I'm going to add a type adapter to all my projects, but 
it seems like this would be a good candidate for 
com.google.gson.internal.bind.TypeAdapters
```

Original comment by `prog...@gmail.com` on 15 Aug 2013 at 6:33
 =||= ```
Not fixing this is a little lame...
At least attach a TypeAdapter example on this issue for the next person who 
faces it.
```

Original comment by `kr...@cwa.to` on 7 Mar 2014 at 12:06
 =||= ``` java
import com.google.gson.*;

import java.io.File;
import java.lang.reflect.Type;

public class FileTypeAdapter implements JsonDeserializer<File> {
    @Override
    public File deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new File(((JsonObject) json).get(""path"").getAsString());
    }
}
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
416Support custom String stub for null valuesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:02 PM"```
What steps will reproduce the problem?

import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class GsonNullExample {
    public static void main(String[] args) {
        Map<String, String> map = new HashMap<String, String>();
        map.put(""key"", null);
        Gson gson = new GsonBuilder().serializeNulls().create();
        System.out.println(gson.toJson(map));
    }
}


What is the expected output? What do you see instead?
The output is:
   {""key"":null}

I would like the option to set a custom value for null, e.g. """" :
   {""key"":""""}

Perhaps serializeNulls() could be overloaded to serializeNulls(String 
nullStringValue), to allow custom String instead of the word ""null"".

What version of the product are you using? On what operating system?
gson 2.1 on Mac OSx using Eclipse.

Please provide any additional information below.
```

Original issue reported on code.google.com by `a...@matan.name` on 28 Feb 2012 at 5:48""```
Low priority. I'm not a fan of the requested behavior.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 5:23
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
Then there's another way to deserialize fields with null value? I'm triying to 
deserialize a field expecting a string but if it's null it crashes.
```

Original comment by `nagash...@gmail.com` on 20 Mar 2012 at 1:29
 =||= ```
We fixed it by allowing you to register a custom type adapter for strings. In 
this case your type adapter would read in the empty string and write out null, 
and vice versa.
```

Original comment by `limpbizkit` on 1 Jul 2012 at 5:58
- Changed state: **Fixed**
 =||= ```
I am using gson-2.2.2.jar. is it solved in release 2.2.2? I added string custom 
type adapter. It just calls serialize method for non NULL strings. I also build 
Gson object using serializeNulls() call. It does not call serialize for NULL 
string object fields.
```

Original comment by `vinod.el...@gmail.com` on 29 Oct 2012 at 9:31
 =||= This problem still happens on version 2.8.5. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
417GSON dies with an IllegalStateException with valid jsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:03 PM"```

// Here is the string gson dies on:
String json = ""{\""coordinates\"": {\""type\"": \""Point\"", \""coordinates\"": 
[1.41751613, 52.13286294]}""

// I create my builder as so:
Gson gson = new GsonBuilder().
            serializeNulls().
            create();
// I then use this builder to put this json in a map:
Map<String,Object> a = gson.fromJson(json, Map.class);
System.out.println(a);

A type-A ""freakout"" ensues. Thoughts?
My gson version is 2.1 (using maven to grab that jar)
My favourite colour is sometimes green, other times it is blue. 
- Sina


```

Original issue reported on code.google.com by `sin...@gmail.com` on 2 Mar 2012 at 5:13""```
Sorry, i saw an error in my test case, and… yes this is more likely my 
fault…
```

Original comment by `sin...@gmail.com` on 2 Mar 2012 at 5:16
 =||= Original comment by `limpbizkit` on 18 Mar 2012 at 5:23
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
418Prevent unused field warningsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:04 PM"```
When I write a Gson class I end up having to annotate the classes with 
@SuppressWarnings(""unused"") to prevent unused field warnings.

Please eliminate these warnings automatically

Google Guice somehow accomplishes this, so it's definitely possible.  If you 
need pointers about under which scenario Guice supresses warnings, let me know 
and I'll add an example.




```

Original issue reported on code.google.com by `glenview...@gmail.com` on 9 Mar 2012 at 7:29""```
There isn't much we can do. Your tools might be suppressing warnings on 
annotated fields; Gson doesn't require annotations so that won't apply.

Perhaps you want to explicitly add an @SerializedName annotation?
```

Original comment by `limpbizkit` on 18 Mar 2012 at 6:02
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
420Date parse problemGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:05 PM"```
What steps will reproduce the problem?
1. Consume a JSon collection object using java.util.Date
2. When set the GSonBuilder to use the datePattern ""yyyy-MM-dd""
3. Get the unparsable Date

I think it's trying to create a Date using Integer instead of Long.
Too mainstream.

java.text.ParseException: Unparseable date: ""1323434500000""
```

Original issue reported on code.google.com by `santana....@gmail.com` on 15 Mar 2012 at 2:15""```
Could you provide a complete test case? It looks like your parsing a date 
formatted as a long rather than as a string.
```

Original comment by `limpbizkit` on 18 Mar 2012 at 5:57
- Changed state: **Invalid**
 =||= ```
I found the problem.

I was receiving the JSON sometimes with a string date and sometimes with long, 
so I created a TypeAdapter and the problem is resolved.

Thanks.
```

Original comment by `santana....@gmail.com` on 18 Mar 2012 at 7:21
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
421Should be pass EMPTY DOCUMENT without throwing exceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:06 PM"```
from this code 
http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/
google/gson/stream/JsonWriter.java?r=615#416

It only check for document to end properly, but sometime we just open 
JSonWriter but later logic don't write anything so we just want to close then 
it will throw exception

Which I think is no need, it should be check or if peek() != 
JsonScope.EMPTY_DOCUMENT too, or changing JsonScope to drop EMPTY and NONEMPTY, 
just check that scope stack is empty and that's all
```

Original issue reported on code.google.com by `thainayu` on 19 Mar 2012 at 7:55""```
An empty string isn't a valid JSON document. Two options:
- just catch the exception.
- begin your document with a beginArray() call (unconditionally) and end it 
with an endArray() call. That'll guarantee your document is never invalid, even 
if your array is empty.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:48
- Changed state: **WontFix**
 =||= ```
THIS IS NOT JSONDOCUMENT BUT A JSONWRITER

If the logic is creation of ""Writer"" then we may not write anything and we 
close ""The Writer"" so there are no document

Making a writer then force it to create document immediately is wrong logic in 
the first place. Think about OOP then ""Writer"" and ""Document"" is difference 
object. Creation and Closing ""Writer"" should not always strongly relate to 
""Document""
```

Original comment by `thainayu` on 12 Apr 2012 at 6:37
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
422Invalid JSON parsed without any notification/exception.Google Code ExporterGoogleCodeExporter03/19/15, 06:32:07 PM"```
What steps will reproduce the problem?
1. Create default instance of Gson.
2. Parse file with fromJson method.
3. Result list of elements has one empty (excessive) element in the end.

What is the expected output? What do you see instead?
ParsingException with message about invalid JSON data.

What version of the product are you using? On what operating system?
gson-2.1.jar on Android

Please provide any additional information below.
Attached JSON was reported as invalid on http://jsonlint.com/
```

Original issue reported on code.google.com by `mst...@gmail.com` on 23 Mar 2012 at 9:11

Attachments:
- [events.json](https://storage.googleapis.com/google-code-attachments/google-gson/issue-422/comment-0/events.json)""```
When you use Gson.fromJson(json, type), it parses in lenient mode. Changing 
this would break backwards compatibility.

You can work around this by calling Gson.getAdapter(type).fromJson(json) which 
will do a strict parse.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:45
- Changed state: **WontFix**
 =||= ```
In such case it would be nice to have possibility to change lenient/strict 
parse mode(by default let it be lenient mode). It looks not really good to hide 
information about invalid JSON.
```

Original comment by `mst...@gmail.com` on 12 Apr 2012 at 5:51
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
423Fix Javadoc for JsonReader.endObject()Google Code ExporterGoogleCodeExporter03/19/15, 06:32:08 PM"```
The Javadoc for endObject() appears to be copied from endArray(), and so states:
          Consumes the next token from the JSON stream and asserts that it is the end of the current array.

Rather than:

          Consumes the next token from the JSON stream and asserts that it is the end of the current object.
```

Original issue reported on code.google.com by `megbec...@gmail.com` on 23 Mar 2012 at 3:24""Original comment by `limpbizkit` on 11 Apr 2012 at 8:42
- Changed state: **Accepted**
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= ```
This issue was closed by revision r1136.
```

Original comment by `limpbizkit` on 12 Apr 2012 at 6:09
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
424dangling colon makes gson create a null referenceGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:09 PM"```
hello everyone,

in my tests, json like this:

{""a"":[""x"",""y"",""z"",]}

generates the ""List<String>a"" as expected, but the size is 4 and the last one 
is null.

this behavior was not observed at native javascript array length neither in 
libjson on C application.

Is this the correct behavior and C/Javascript implementations are incorrect?

It's easy to deal with, yet it was the single discrepacy detected between my 3 
apps consuming the very same json.

T.I.A.
```

Original issue reported on code.google.com by `Sombr...@gmail.com` on 24 Mar 2012 at 3:09""```
The above is not valid JSON. If you want your parsers to all agree, you should 
use valid JSON.

We've chosen to insert omitted nulls because that's what early versions of the 
org.json parser did. That was probably the wrong decision. But we're mostly 
stuck with it for backwards compatibility.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:41
- Changed state: **WontFix**
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
425TreeMap getValues() serialization fails with -XX:+AggressiveOpts on Oracle VMGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:10 PM"```
What steps will reproduce the problem?
1. Run the attached class on an Oracle (or Apple) VM. Notice the output that 
says ""*[{""name"":""foo"",""displayName"":""foo""}]*""
2. Re-run the attached class on the same VM with -XX:+AggressiveOpts . With 
Gson 1.7.1 I get ""**"", with 2.1 I get ""*null*"".


What is the expected output? What do you see instead?

I would expect in both runs that the output would be 
""*[{""name"":""foo"",""displayName"":""foo""}]*""


What version of the product are you using? On what operating system?

I've tried with Gson 1.7.1 or 2.1 (didn't really make a difference) on a 
MacBook pro with:
java version ""1.6.0_29""
Java(TM) SE Runtime Environment (build 1.6.0_29-b11-402-11M3527)
Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02-402, mixed mode)


Please provide any additional information below.

The cause seems to be a new TreeMap implementation ( -> 
https://blogs.oracle.com/dagastine/entry/apache_harmony_thanks_for_the ) that's 
enabled with that option. On an IBM JVM this new implementation seems to be the 
default, so Gson fails ""out of the box"" when running on an IBM JDK.

If I'm really coding the serialization myself it's of course simple to use 

        Type typeOfSrc = new TypeToken<Collection<Dummy>>() {}.getType();
        gson.toJson(map.values(), typeOfSrc, writer);

instead of just:

        gson.toJson(map.values(), writer);

But if Gson is used by an intermediate Framework then I don't have that control 
and would expect that ""built-in"" types work.


```

Original issue reported on code.google.com by `DerWi...@googlemail.com` on 27 Mar 2012 at 12:53

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-425/comment-0/GsonTest.java)""```
The JVM is incorrect when the -XX:+AggressiveOpts option is used. You shouldn't 
use that option in your application; it's only intended for foolish 
benchmarking.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:38
- Changed state: **WontFix**
 =||= ```
[deleted comment]
```
 =||= ```
What about the IBM JVM? Above mentioned example will fail using standard 
options. Is the coding not supposed to work with an IBM JVM?
Also, it could well be that Oracle decides to change the default behaviour of 
the Oracle JDK, i.e. the coding would fail there too without any 
-XX:+AggressiveOpts option set.
```

Original comment by `UweFisch...@gmail.com` on 16 Apr 2012 at 12:56
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
426Exclusion Strategy that uses the field's valueGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:11 PM"```
How to write ExclusionStrategy by field value?
What for to serialize default field values?
```

Original issue reported on code.google.com by `2morrow...@gmail.com` on 27 Mar 2012 at 3:52""```
You can accomplish a similar result by registering a TypeAdapter that writes 
'null' for that value. Gson won't serialize nulls by default.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:37
- Changed title: **Exclusion Strategy that uses the field's value**
- Changed state: **WontFix**
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
427Wrong convertion in deserialization from int objectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:12 PM"```
What steps will reproduce the problem?
1. Im deserializing an first object then
2. Im decompressing a field from this object then
3. Im deserializing this object decompressed.

What is the expected output? What do you see instead?
 I was expecting a int return after deserialization. A double value.


What version of the product are you using? On what operating system?
 Gson 2.1  in Windows 7 64bits


Please provide any additional information below.

 In my application Im comunicating with the server using json data
for the comunication. In second deserialization all objects that shoud
be integers are Double

```

Original issue reported on code.google.com by `pedrohms...@gmail.com` on 30 Mar 2012 at 7:53

Attachments:
- [mSocket.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-427/comment-0/mSocket.java)""```
 Im using the gson in android 2.2
```

Original comment by `pedrohms...@gmail.com` on 30 Mar 2012 at 7:57
 =||= ```
deserialize function is here
```

Original comment by `pedrohms...@gmail.com` on 30 Mar 2012 at 8:43

Attachments:
- [mSocket.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-427/comment-2/mSocket.java)
 =||= ```
Is the target type an int? The best way to fix this is to make sure your target 
value is typed the way you want it.
```

Original comment by `limpbizkit` on 10 Apr 2012 at 2:10
- Changed state: **WontFix**
 =||= ```
thanks for answering. My type has to be an Object class because it must be of 
any type to be stored.
```

Original comment by `pedrohms...@gmail.com` on 10 Apr 2012 at 2:27
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
428No built-in type adapter for IterableGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:13 PM"```
What steps will reproduce the problem?
See the attached file.

What is the expected output?
[{""a"":1},{""a"":2}]
[{""a"":1},{""a"":2}]
[1, 2]
[1, 2]

What do you see instead?
[{""a"":1},{""a"":2}]
{}
[1, 2]
Exception in thread ""main"" java.lang.RuntimeException: Unable to invoke no-args 
constructor for java.lang.Iterable<com.ash2k.test1.App$A>. Register an 
InstanceCreator with Gson for this type may fix this problem.
    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:166)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:163)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:721)
    at com.google.gson.Gson.fromJson(Gson.java:670)
    at com.ash2k.test1.App.main(App.java:31)
Caused by: java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at com.google.gson.internal.UnsafeAllocator$1.newInstance(UnsafeAllocator.java:48)
    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:163)
    ... 5 more
Caused by: java.lang.InstantiationException: java.lang.Iterable
    at sun.misc.Unsafe.allocateInstance(Native Method)
    ... 11 more

What version of the product are you using? On what operating system?
2.1 on Ubuntu 11.10 x64

```

Original issue reported on code.google.com by `Ash2kk@gmail.com` on 1 Apr 2012 at 7:38

Attachments:
- [App.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-428/comment-0/App.java)""```
Just use a Collection or a List?
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:36
- Changed title: **No built-in type adapter for Iterable**
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
The problem was that I have big Iterable objects that need to be
serialized. It's not efficient to convert those into Lists or Collections
just for the serialization purpose.
```

Original comment by `phamduc...@gmail.com` on 11 Apr 2012 at 8:52
 =||= ```
I have an interface (DAO) with method that returns Iterable<SomeType> and i 
want to be able to pass the returned object and it's type to Gson. I cannot be 
sure that the object is always a Collection.
```

Original comment by `Ash2kk@gmail.com` on 12 Apr 2012 at 4:31
 =||= ```
You should be able to write a TypeAdapterFactory for Iterable. You can use the 
type adapter for collection as a guide:
http://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/
google/gson/internal/bind/CollectionTypeAdapterFactory.java

The code is even simpler if the iterable always has the same type parameter.
```

Original comment by `limpbizkit` on 16 Apr 2012 at 10:36
- Changed state: **WontFix**
 =||= ```
Why can't or shouldn't it be supported in Gson? Isn't it a valid usecase? 
Iterable is Java's built-in type and i expect it to be supported as well as 
Collection or Map.
```

Original comment by `Ash2kk@gmail.com` on 17 Apr 2012 at 4:07
 =||= ```
Iterable must be supported. It is a very very common & valid usecase. 
```

Original comment by `rajkumar...@gmail.com` on 25 Oct 2012 at 7:49
 =||= ```
Any suggestions to implementing a TypeAdapterFactory for Iterable? The example 
for Collection won't work since TypeAdapterRuntimeTypeWrapper is 
package-private.
Also, the Iterable interface does not have an add method so the read method 
won't work.
```

Original comment by `jason.di...@gmail.com` on 31 Oct 2012 at 5:06
 =||= ```

Hello, 

This comment isn't intended to be aggressive or demanding but I'm really 
confused by the status of this ticket.  Would somebody working on Gson please 
provide an explanation as to why this is marked WontFix?

Simply informing users that they can implement this themselves isn't really an 
answer - we could all go off and implement our own JSON libraries.  Instead I 
will have an additional dependency everywhere I use Gson, and will have to 
maintain and test this extension.  As will countless other users.


Give the increasing functional paradigm being employed in Java and Guava's 
judicious use of Iterable (in preference to ? extends Collection) this would 
seem like a very obvious use-case.

Also from a performance perspective it just seems crazy to expect me to convert 
my Iterable to a Collection just to pass it to Gson to ...  iterate over it 
again.  And rewriting my code to suit Gson is obviously absurd and out of the 
question.

If anything throw out the Collection TypeAdapterFactory etc and replace with a 
single Ierable version.  I strongly suspect this ticket will receive votes from 
every Gson user when Java 8 is released.


Please comment with the rationale behind closing this.

I would also like to thank you for providing a nice, tidy library - so thanks =)
```

Original comment by `ear...@gmail.com` on 8 Nov 2012 at 5:48
 =||= ```
Please reopen this issue.
```

Original comment by `eirir...@gmail.com` on 9 Oct 2013 at 9:53
 =||= ```
Please resolve this issue.Having the same problem. Any alternate for this?
```

Original comment by `vivek.sr...@gmail.com` on 16 Oct 2013 at 5:49
 =||= ```
From the front page:

Gson Goals:
* Extensive support of Java Generics
* Support arbitrarily complex objects (with deep inheritance hierarchies and 
extensive use of generic types)

Yet for some reason refuse to support such a fundamental, basic type such as 
Iterable.
```

Original comment by `collinsa...@gmail.com` on 23 Jan 2015 at 5:25
 =||= Hi Folks.
What is the intended behavior here? Do you want us to pick a random sub-class of Iterable (such as List) and deserialize the collection into it? 
 =||= @inder123 To answer your question: yes, absolutely.

From a user's perspective this is consistent with the rest of Gson. When I ask Gson to deserialize some JSON to a `List<Integer>`, I don't much care which specific implementation of the `List<Integer>` interface Gson chooses to produce. It could be a `LinkedList<Integer>` or an `ArrayList<Integer>`. But as long as it's something that implements `List<Integer>` (and it's reasonably performant) I'm happy, and my code works.

In this case, Gson does exactly what you suggested: it picks an appropriate subclass of `List<Integer>` for me. It would be great if it did the same for an `Iterable<Integer>` as well.

I haven't dug into the Gson source code, so forgive me if this is technically impossible for some reason. But, from an outsider's perspective, this seems totally feasible.

I know this is an older issue, but I'm still having to work around this issue in my current project, specifically when serializing an `Iterable<Integer>`. As @ear...@gmail.com pointed out in his fourth paragraph on 8 Nov 2012, the workaround requires me to iterate over my `Iterable<Integer>` one more time, which is less than ideal.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
429Throw exception on type adapter registration for non overridable built-in type adapterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:16 PM"```
What steps will reproduce the problem?
Gson g = new GsonBuilder().registerTypeAdapter(String.class, new 
JsonSerializer<String>() {

    public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {
        return new JsonPrimitive(src.toUpperCase());
    }

}).create();
System.out.println(g.toJson(""test""));

What is the expected output? What do you see instead?
I expect that an exception should be thrown. Instead i see:
""test""

What version of the product are you using? On what operating system?
2.1 on Ubuntu 11.10 x64

```

Original issue reported on code.google.com by `Ash2kk@gmail.com` on 1 Apr 2012 at 9:02""```
Worth looking into in 2.2.
```

Original comment by `limpbizkit` on 11 Apr 2012 at 8:35
- Added labels: **Priority-High**
- Removed labels: **Priority-Medium**
 =||= Original comment by `limpbizkit` on 12 Apr 2012 at 6:29
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
430Javadoc should include protected membersGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:17 PM"```
Our maven Javadoc config needs tweaking.
http://stackoverflow.com/questions/10001645/deserialize-collections-on-gson-2-x-
version
```

Original issue reported on code.google.com by `limpbizkit` on 4 Apr 2012 at 2:22""```
This issue was closed by revision r1139.
```

Original comment by `limpbizkit` on 12 Apr 2012 at 6:34
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
431Populate existing objectGoogle Code ExporterGoogleCodeExporter02/29/16, 03:10:17 AM"```
It would be great is gson supported the population of existing objects. There 
was a post a while back alluding to this behavior, but it doesn't exist now:

http://groups.google.com/group/google-gson/browse_thread/thread/ab97b754c1f3c53a
?pli=1

The rationale is that this would prevent users from having to create 
TypeAdapters or InstanceCreators for every object that requires custom 
construction, particularly since gson doesn't support the notion of a global 
InstanceCreator at the moment.
```

Original issue reported on code.google.com by `pacesysj...@gmail.com` on 8 Apr 2012 at 5:12""```
Note: This is an enhancement (didn't see a setting for this).
```

Original comment by `pacesysj...@gmail.com` on 8 Apr 2012 at 5:13
 =||= Original comment by `limpbizkit` on 11 Apr 2012 at 8:33
- Added labels: **Type-Enhancement**
- Removed labels: **Type-Defect**
 =||= ```
It would be nice if it will be supported :)

http://stackoverflow.com/questions/12277765/it-is-possible-to-fill-current-objec
t-with-json-values-from-json
```

Original comment by `KKoce...@gmail.com` on 12 Feb 2013 at 9:03
 =||= ```
what is the plan for this enhancement? is it on the roadmap?
```

Original comment by `dominik.mengelt` on 12 Nov 2013 at 1:34
 =||= ```
I really like to see this enhancement. I am using the library in my Android 
app. I have a ViewPager with existing items, when a page becomes visible, I 
pull additional items remotely and I would like to populate the additional 
fields in the existing items.
```

Original comment by `tasoman...@gmail.com` on 26 Nov 2013 at 9:50
 =||= ```
Any update on this?
Any chance that it will ever be implemented? any body have a nice work around?
I'm starting a new project and can choose to use Jackson vs GSON, and I'm 
deeply interested in the ability to update existing instance rather than always 
creating new instance.
I'm thinking of creating a new object and then merging to the existing one 
using reflexion but I would rather have this handle at the deserialization 
layer.

```

Original comment by `hugues.b...@gmail.com` on 13 Jan 2015 at 10:26
 =||= ```
See Inderjeet Singh's answer in this thread: 
https://groups.google.com/d/msg/google-gson/q5e3VMHzxTo/DOivwaGC2XoJ

I use the InstanceCreator solution and it works very well. It is far from ideal 
as it requires creating a new Gson instance every time, but it works quite well.

Here is my function :

    public static <T> void populate(GsonBuilder builder, JsonObject json, Class<T> type, T into) {
        builder.registerTypeAdapter(type, new InstanceCreator<T>() {
            @Override public T createInstance(Type t) { return into; }
        }).create().fromJson(json, type);
    }

```

Original comment by `timelza...@gmail.com` on 15 Jan 2015 at 2:51
 =||= Something like this seems to work well for me. I might have missed something but so far, so good...

``` Java
    /**
     * updates @target object from the @json object. Only fields existing in @json are affected
     * @param target
     * @param json
     * @throws Exception
     */
    public static  void update(Object target, JsonObject json) throws Exception {

        Class<? > class1 = target.getClass();

        Set<Entry<String, JsonElement>> entrySet = json.entrySet();
        for (Entry<String, JsonElement> entry : entrySet) {
            String key = entry.getKey();
            Field field = class1.getField(key);
            Type genType = field.getGenericType();

            field.set(target,
                    gson.fromJson(entry.getValue(),genType));
        }

    }
```
 =||= For the love of source do NOT use the snippet above as is.

But yes - This is a much needed feature. Just came across a very unfortunate use case.
 =||= Any update on this?
 =||= Why this issue was closed? is this became a planned feature? is it rejected?
 =||= You can implement this using InstanceCreators.

``` java
final Foo existing;
InstanceCreator<Foo> creator = new InstanceCreator<Foo>() {
  public Foo createInstance(Type type) { return existing; }
}

Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class, creator).create();
Foo value = gson.fromJson(jsonString, Foo.class);
// value should be same as existing
```
 =||= I needed to update a managed JPA object with a JSON from the web service, this is the solution I've found (I needed to use the local instance of appConfig):

``` java
AppConfiguration appConfig = AppConfigurationDAO.getInstance().read(Long.parseLong(req.params("":id"")));

InstanceCreator<AppConfiguration> creator = new InstanceCreator<AppConfiguration>() {
    private AppConfiguration appConfig;

    public AppConfiguration createInstance(Type type) {
        return appConfig;
    }

    public InstanceCreator<AppConfiguration> withValue(AppConfiguration appConfig) {
        this.appConfig = appConfig;
        return this;
    }

}.withValue(appConfig);

Gson gson = new GsonBuilder().registerTypeAdapter(AppConfiguration.class, creator).create();
appConfig = gson.fromJson(req.body(), AppConfiguration.class);

return AppConfigurationDAO.getInstance().update(appConfig);
```

I then stated to wonder: can't we have a `InstanceUpdater` class? It could have a implementation like this:

``` java
import com.google.gson.InstanceCreator;
import java.lang.reflect.Type;

public class InstanceUpdater<T> implements InstanceCreator<T> {

    private T object;

    public T createInstance(Type type) {
        return object;
    }

    public InstanceUpdater(T object) {
        this.object = object;
    }

}
```

Then I can use with something like this:

``` java
InstanceCreator<AppConfiguration> creator = new InstanceUpdater<AppConfiguration>(appConfig);
```

But I'm not sure, I feel there may be a better way of doing this, and it would be amazing to have something inside Gson to manage this for me.
 =||= Why this issue was closed? is this became a planned feature? is it rejected?
 =||= @Robertiano At the moment there is a workaround as outlined above with InstanceCreator.
We are still searching for an elegant proposal.
 =||= Apparently i need this as well, InstanceCreator is a bad option as if i want to make an extendable class static creators will need to be overwritten since there is no inheritance for that.
Typeadapter creates the object, i seriously think that only copying field without object creation should be easy, if not at least can you supply a static method that can copy the fields using reflection ? 
 =||= `TypeAdapter` ([example code](http://www.javacreed.com/gson-typeadapter-example/)) worked well for populating an existing object. Just return the instance in the `read` method. 
 =||= Would love to see this, too. =||= I've been looking for this functionality for years.  @inder123 said ""We are still searching for an elegant proposal.""
What's wrong with something like gson.fromJson(existingObject, json) ? I don't see why it would not cover the same use cases as gson.fromJson(json). =||= For posterity, if this is ever addressed:

Take into account nested reuse of existing objects at any level of the deserialization, not just the root object. Then you can see why InstanceCreator doesn't work.

You would need to pass in the containing object (which itself went through the usual process to be obtained), perhaps the InstanceUpdater<T> where it passes along the containing object as context mainly so it can choose to reuse the T hanging off of it and continue on.

I have use cases (multiple) where I have all sorts of state like event handlers hanging off of important levels of a large tree of objects, and I want essentially all the unimportant ""leaf fields"" overwritten with incoming values but the important object scaffolding itself remains unchanged at all levels.

This is one of those things that is pretty easy to imagine how to implement it inside Gson, but hard to impossible to do from the outside looking in. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
434Decoding Date object from Json String not working!!Google Code ExporterGoogleCodeExporter03/19/15, 06:32:23 PM"```
What steps will reproduce the problem?
run following code snippet.   
   Gson gson = new Gson();
   Date myDate = new Date();   
   System.out.println(""JSON : "" + gson.toJson(myDate));
   myDate = gson.fromJson(""Apr 12, 2012 11:56:04 AM"", Date.class);
   System.out.println(""Date : "" + myDate);

What is the expected output? 
   JSON : ""Apr 12, 2012 12:03:58 PM""
   Date : Thu Apr 12 12:03:58 IST 2012

What do you see instead?
   JSON : ""Apr 12, 2012 12:04:56 PM""
Exception in thread ""main"" com.google.gson.JsonSyntaxException: Apr
    at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:78)
    at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:63)
    at com.google.gson.internal.bind.DateTypeAdapter.read(DateTypeAdapter.java:38)
    at com.google.gson.Gson.fromJson(Gson.java:720)
    at com.google.gson.Gson.fromJson(Gson.java:686)
    at com.google.gson.Gson.fromJson(Gson.java:636)
    at com.google.gson.Gson.fromJson(Gson.java:608)
    at test.Test2.main(Test2.java:19)
Caused by: java.text.ParseException: Unparseable date: ""Apr""
    at java.text.DateFormat.parse(DateFormat.java:354)
    at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:76)
    ... 7 more


What version of the product are you using? On what operating system?
   gson 2.0 on Ubuntu 11.10

```

Original issue reported on code.google.com by `e.alifar...@gmail.com` on 12 Apr 2012 at 6:36""```
That isn't a JSON string; you're losing the quotes. You should pass in a quoted 
string, like this:

   myDate = gson.fromJson(""\""Apr 12, 2012 11:56:04 AM\"""", Date.class);

```

Original comment by `limpbizkit` on 16 Apr 2012 at 9:30
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
435Gson 2.1 in the androidGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:23 PM"```
hello  everyone !
i have a problems  when using the gson2.1 in the  development of android apps
how i  can handle it ? thank you 

1\ I imported the download gson package to the project
2\ when debug the program 
3\ ""NoClassDefFounudError""  error  happened ?


who  can  help  me  ?  thank  you very much 
```

Original issue reported on code.google.com by `Aiftri...@gmail.com` on 14 Apr 2012 at 1:51

Attachments:
- [error.jpg](https://storage.googleapis.com/google-code-attachments/google-gson/issue-435/comment-0/error.jpg)""```
This is a build problem. Is gson.jar in your libs folder?
```

Original comment by `limpbizkit` on 16 Apr 2012 at 9:27
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
437Gson.getAdapter(Type) has low concurrencyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:24 PM"```
What steps will reproduce the problem?
1. Run Gson.toJson in a highly concurrent environment
2.
3.

What is the expected output? What do you see instead?

Less thead blocking

What version of the product are you using? On what operating system?

Gson 2.1 on Mac OS X 10.7.3

Please provide any additional information below.

The first line of the implementation hits a synchronized map; In highly 
concurrent use cases this causes a significant amount of blockage (51% in my 
use case). As I am in a situation where creating large numbers of gson 
instances to work around this issue is not possible (i.e. - I have to use a 
shard Gson instance) I have a serious performance bottleneck.

I normally would provide a patch for this, but there are two distinct 
approaches that can equally solve this bug: Use a thread local for the cache, 
or use a concurrent collection. I generally favor thread locals, but this has 
the down side of causing the cache to be less effective as other threads can 
not cross pollinate the cache. However, concurrent maps (e.g.- 
ConcurrentHashMap) do not allow null keys; without the tribal knowledge of the 
implementation I could not utilize this collection without fear of breaking an 
existing use case.
```

Original issue reported on code.google.com by `dirkharr...@gmail.com` on 20 Apr 2012 at 2:31""```
Avoid this problem by using the TypeAdapter directly. That way Gson doesn't 
need to keep on looking up the type to serialize. This approach is also faster 
even if there isn't contention.

  public static final TypeAdapter<Foo> myFooAdapter = gson.getAdapter(Foo.class);

inder, joel: do you guys think we should encourage this?
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:26
- Changed state: **WontFix**
 =||= ```
I apologize for my naivety in advance.

This issue is occurring as a natural use of toJson(...). How would your 
suggestion resolve this (e.g. - I don't understand the equivalent API call of 
gson.toJson(...) using a specific TypeAdapter)?
```

Original comment by `dirkharr...@gmail.com` on 30 Jun 2012 at 12:38
 =||= ```
We are running into this same issue. Using the TypeAdapter directly is not a 
viable option for us because some of type information in our serialized objects 
is dynamic. It seems like a simple change, and like the original author we 
could potentially provide a patch. Is there a fundamental objection to making 
this change, perhaps a concern about performance in low concurrency 
environments, or is it just a matter of resources?
```

Original comment by `douglas....@gmail.com` on 9 Jul 2013 at 1:30
 =||= This seems to be fixed since 2.7 version
> Using ArrayDeque, ConcurrentHashMap, and other JDK 1.6 features
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
438why gson give up use utf16Google Code ExporterGoogleCodeExporter03/19/15, 06:32:25 PM"```
our old program(c++) only support utf 16.
and for gson 1.2 it works. 
but now ... 
so how can i use both gson2.1 and utf 16 encoding

Expect : 
        JsonRPC j = new JsonRPC();
        j.setJsonrpc(""发额发发的"");
        Gson gson = new Gson();
        System.out.println(gson.toJson(j));

        {""id"":0,""jsonrpc"":""\u53d1\u989d\u53d1\u53d1\u7684""}


Thanks...
```

Original issue reported on code.google.com by `jion...@gmail.com` on 24 Apr 2012 at 1:08""```
Gson relies on the Java libraries to do character decoding. You probably want 
to look for InputStreamReader.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:23
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
439Provide JsonObject and JsonArray constructors for parsing JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:26 PM"```
I would like to be able to do the following:

JsonObject json = new JsonObject(""{a:1,b:2,c:[1,2,3]}"");
This will be a handy shortcut to invoke
new JsonParser().parse(""{}"").getAsJsonObject().

The same could be done for JsonArray.

JsonPrimitive sort of has this support already.

```

Original issue reported on code.google.com by `inder123` on 24 Apr 2012 at 10:44""```
I don't think we want to fix this because we would be inconsistent with 
JsonPrimitive.

When you create a JsonPrimitive with the string ""[]"", we accept that input as a 
string literal. It is _not_ JSON to be parsed! It's best to use JsonParser to 
do JSON parsing.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:22
- Changed state: **WontFix**
- Added labels: **Type-Enhancement**, **Priority-Low**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
441GSon doesn't deserialize parametrized maps that are fields in a plain objectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:33 PM"```
class Bar {
    String bar1;
    String bar2;
}

class Foo {
    String var1;
    Map<Bar,String> bars;
}


assuming that an instance of Foo was serialized, this will fail:

Foo foo = gson.fromJson(serializedString, Foo.class);

But since Foo is not generic, there does not seem to be a way to give gson a 
tokenizer that tells it what type to deserialize the bars field on Foo into. 
(And just out of curiosity, is there some magic which allows Morphia to handle 
maps as fields which Gson can't use?)

Thanks!
```

Original issue reported on code.google.com by `christop...@gmail.com` on 10 May 2012 at 12:13""```
You need to register a TypeAdapter for Bar that writes it out as a single 
string. Gson has no idea how to take single strings and split them into Bar's 
two fields!
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:20
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
442"how to access embedded tags/key value pairs in  JSON data using gson? tried,but it returns ""null"""Google Code ExporterGoogleCodeExporter03/19/15, 06:32:33 PM"```
What steps will reproduce the problem?
1.while trying to access the embedded data using java inner classes
2.even if we have separate classes for different data values..still it returns 
null  
3.

What is the expected output? What do you see instead?
expected output should be the values of the embedded data..but i see null.

What version of the product are you using? On what operating system?
windows; gson 2.2

Please provide any additional information below.
here is part of data which is generated.How do i access submac,subhost?I have 
separate classes for outer data and ""sub""
data.
{ 
    ""mac"": null,
    ""ipv4"": ""198.162.1.1"",
    ""ipv6"": ""12.234.345.44"",
    ""host"": ""xyz.com"",
    ""_dns"": true,    
    ""sub"":[ 
    {
    ""submac"": null,
    ""subhost"": ""xyz12.com""
     }
     ]        
    }



```

Original issue reported on code.google.com by `amathu...@gmail.com` on 11 May 2012 at 9:05""Original comment by `limpbizkit` on 30 Jun 2012 at 3:19
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
443JsonParser.parse( String json) returns JsonNull instead of JsonSyntaxExceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:34 PM"```
What steps will reproduce the problem?
Following code:
  String badJson = ""[[]"";
  JsonElement jsonElem = jsonParser.parse( badJson );

  if ( jsonElem.isJsonNull() ) {
    out.println(""Request-String has not correct JSON-Format!"");
    return;
  }

  out.println(""Parsing successfull..."");


What is the expected output? What do you see instead?
In my understanding of the documentation the function should throw a 
JsonSyntaxException. Confusingly the no catch block is required by Eclipse, 
although the method definition specifies a throw. Instead we get an instance of 
JsonNull...


What version of the product are you using? On what operating system?
Eclipse and Gson 2.1

Please provide any additional information below.
the error may be located in the JsonParser Class 
(http://google-gson.googlecode.com/svn/trunk/gson/src/main/java/com/google/gson/
JsonParser.java) in the JsonElement parse(Reader json) method

The if statement should check for if (element.isJsonNull() && jsonReader.peek() 
!= JsonToken.END_DOCUMENT)

and not if (!element.isJsonNull() && jsonReader.peek() != 
JsonToken.END_DOCUMENT)


    try {
      JsonReader jsonReader = new JsonReader(json);
      JsonElement element = parse(jsonReader);
      if (!element.isJsonNull() && jsonReader.peek() != JsonToken.END_DOCUMENT) {
        throw new JsonSyntaxException(""Did not consume the entire document."");
      }

```

Original issue reported on code.google.com by `luscus.r...@gmail.com` on 11 May 2012 at 2:39""```
Please simply ignore this line: Confusingly the no catch block is required by 
Eclipse, although the method definition specifies a throw.


What is the expected output? What do you see instead?
In my understanding of the documentation the function should throw a 
JsonSyntaxException. Instead we get an instance of JsonNull...
```

Original comment by `luscus.r...@gmail.com` on 11 May 2012 at 2:58
 =||= ```
Good find. That's definitely bad behavior on Gson's part.

Your best bet is to avoid JsonParser. Instead just do this:
    new Gson().fromJson(""[[]"", JsonElement.class)

Inder, any recommendations on how we should proceed here? I suspect the current 
behavior is for backwards compatibility with Gson 1.6.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:17
- Added labels: **Priority-Low**
- Removed labels: **Priority-Medium**
 =||= ```
I think we should fix JsonParser to throw a JsonSyntax exception.
```

Original comment by `inder123` on 30 Jun 2012 at 6:23
- Changed state: **Accepted**
 =||= ```
This issue was closed by revision r1156.
```

Original comment by `inder123` on 30 Jun 2012 at 6:48
- Changed state: **Fixed**
 =||= ```
Fixed in r1156 
However, it now throws JsonIOException instead of JsonParseException. It can be 
argued that JsonSyntaxException would have been a better choice. However, since 
the root cause is an IOException (EOFException), JsonIOException makes sense 
too.

Somewhat inconsistently, the same done view gson.fromJson(""[[]"", 
Object[].class) throws JsonSyntaxException.

IMHO, this incosistency is tolerable, though we can easily fix it by adding a 
check in JsonParser. I would like to hear other opinions before making that 
change though.
```

Original comment by `inder123` on 30 Jun 2012 at 6:51
 =||= ```
Changed the behavior to throw JsonSyntaxException in r1157
```

Original comment by `in...@trymph.com` on 2 Jul 2012 at 6:37
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
444json path parsingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:36 PM"```
I've made some improvements over Gson API to iterate elements through a given 
path in a groovy style

http://dl.dropbox.com/u/20272624/Pson.java

Instead of doing:
JsonElement response = APIUtils.callAPI(countryId, APIUtils.HOTELS + ""/"" + 
hotelId + ""?includeamenities=true""));

if( 
!response.getAsJsonObject.get(""hotels"").getAsJsonArray().get(0).getAsJsonObject(
).get(""geoLocation"").getAsJsonObject().get(""latitude"").isJsonNull()) {
    ...
}

Do:
Pson response = new Pson(DespegarAPIUtils.callAPI(countryId, 
DespegarAPIUtils.HOTELS + ""/"" + hotelId + ""?includeamenities=true""));

if( !response.get(""hotels[0].geoLocation.latitude"").isJsonNull()) {
    cityId = response.get(""hotels[0].cityId"").getAsString();
    hotelLatitude = response.get(""hotels[0].geoLocation.latitude"").getAsDouble();
    hotelLongitude = response.get(""hotels[0].geoLocation.longitude"").getAsDouble();
}

Also, I've made an iterator for JsonArrays:
for (Pson range : configJson.getIterable(""configuration.ranges"")) {
    int startRange = range.get(""startRange"").getAsInt();
    int endRange = range.get(""endRange"").getAsInt();
    if(startRange <= rangeValue && rangeValue <= endRange) {
        return range.get(""value"").getAsString();
    }
}

instead of old coding style:
JsonArray arr = 
response.getAsJsonObject().get(""configuration"").getAsJsonObject().get(""ranges"").
getAsJsonArray();

for(int i = 0; i < arr.size(); i++) {
    JsonElement range = arr.get(i).getAsJsonObject();
    ....
}

Best regards!
Ignacio Nieto
```

Original issue reported on code.google.com by `nietofar...@gmail.com` on 16 May 2012 at 5:37

Attachments:
- [Pson.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-444/comment-0/Pson.java)""```
Neat. I don't think there's much action for us to take here.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:12
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
446JsonWriter should implement FlushableGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:36 PM"```
I propose an enhancement for the com.google.gson.stream.JsonWriter class, that 
it should implement Flushable as well as Closeable.  

The implemented flush() method would just be the existing flush() method.  With 
this enhancement it would be possible to use this class with Flushables from 
the guava api.

```

Original issue reported on code.google.com by `forticul...@gmail.com` on 17 May 2012 at 1:36""```
Great idea. Done with r1155.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 2:47
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
447deserializing abstract class which is member of another classGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:37 PM"```
Hi,

I need to know how we can deserialize an object which contains a list of type 
abstract class as an attribute using gson

code eg:

class A{
List<B> list;
}

public abstract class B{
}
```

Original issue reported on code.google.com by `chinju18...@gmail.com` on 24 May 2012 at 8:37""Original comment by `limpbizkit` on 30 Jun 2012 at 3:09
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
448Improve JsonDeserializationContext type safetyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:38 PM"```
What steps will reproduce the problem?

Foo foo = ctx.deserialize(jsonElement, Bar.class);

JsonDeserializationContext have the method
<T> T deserialize(JsonElement json, Type typeOfT)

You may accidentally pass wrong typeOfT argument here and it'll explode at 
runtime (Bar do not extend Foo).

Why not make it type safer and make compiler catch the problem:
<T> T deserialize(JsonElement json, TypeToken<T> typeOfT)
<T> T deserialize(JsonElement json, Class<T> typeOfT)

```

Original issue reported on code.google.com by `Ash2kk@gmail.com` on 30 May 2012 at 10:08""```
Acknowledged. Unfortunately it's too late to address this. We're encouraging 
use of our new TypeAdapter APIs which are type safe in this way.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 2:43
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
450Easier way to exclude propertiesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:40 PM"```
Suggested way to exclude property from serializing/deserializing is the @Expose 
annotation, but when option 
GsonBuilder().excludeFieldsWithoutExposeAnnotation() is used I need to use 
@Expose on all fields I intend to serialize.

This is very annoying provided I have a big graph of data and only want to 
exclude one property.

Suggested way is to have an annotation @ExcludeFromGson that would always be 
read and properties marked with this annotation would not be 
serialized/deserialized.
```

Original issue reported on code.google.com by `tomasz.b...@pragmatists.pl` on 8 Jun 2012 at 12:41""```
public class YourAnnotationExclusionStrategy implements ExclusionStrategy {
    public boolean shouldSkipClass(Class<?> clazz) {return false;}
    public boolean shouldSkipField(FieldAttributes f) {return f.getAnnotation(YourAnnotation.class) != null;}
}

GsonBuilder().setExclusionStrategies(new YourAnnotationExclusionStrategy(), ...
```

Original comment by `spdenne` on 13 Jun 2012 at 8:36
 =||= ```
Let me know if there's action we should be taking here.
```

Original comment by `limpbizkit` on 30 Jun 2012 at 3:09
- Changed state: **WontFix**
 =||= ```
I'd like a strategy like in comment #1 be implemented inside library along with 
the annotation for that. It can be configurable on GsonBuilder, but should be 
part of the library.

That's good it is easy to do it on my own, but purpose of using library is not 
to write the stuff myself.
```

Original comment by `tomasz.b...@pragmatists.pl` on 2 Jul 2012 at 2:35
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
452"Boolean values represented by ""Y"" and ""N"" are not deserialized properly"Google Code ExporterGoogleCodeExporter03/19/15, 06:32:41 PM"```
I am dealing with a feed that uses ""Y"" and ""N"" for boolean values.

For example:

{ ""isConditionA"": ""Y"",
""isConditionB"": ""N""
}

I am using version 2.2.1, which interprets both values as false.

I tried registering my own TypeAdapter but that is no longer allowed for 
primitives. 

I imagine it wouldn't be a big problem to support ""Y"" and ""N"" in the default 
Boolean deserializer.



```

Original issue reported on code.google.com by `jflo...@phunware.com` on 19 Jun 2012 at 9:24""```
We now permit users to register their own type adapters for booleans. Check out 
the example in the test case.
http://code.google.com/p/google-gson/source/detail?r=1154
```

Original comment by `limpbizkit` on 30 Jun 2012 at 2:41
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
454Support 0 and 1 for booleansGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:45 PM"```
There's a rogue ObjectiveC library that's preventing some high-profile Gson 
users from upgrading to 2.2.
```

Original issue reported on code.google.com by `limpbizkit` on 22 Jun 2012 at 11:51""```
We now permit this via a custom type adapter. 
http://code.google.com/p/google-gson/source/detail?r=1154
```

Original comment by `limpbizkit` on 30 Jun 2012 at 2:40
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
456how to deserialize json object at client side in an ajax call which was serialized using toJson mthd  Google Code ExporterGoogleCodeExporter03/19/15, 06:32:46 PM"```
What steps will reproduce the problem?

1.Make a ajax call to a servlet and set the json object as below
Type listOfTestObject = new TypeToken< ArrayList <HashMap> >(){}.getType();
String sGson = new Gson().toJson(alReportsData,listOfTestObject);
response.getWriter().write(sGson); 

2.how to read the json object in ajax success call


What is the expected output? What do you see instead?
Instead i receive a parse exception SyntxaxError:JSON.parse:unexpected 
character 

What version of the product are you using? On what operating system?
 i am using google-gson-2.2.1 on Win XP

Please provide any additional information below.

$.ajax({   
type: ""POST"",   
url:  ""/app1/servlet/Controller?destinationHandler=208&obid= "" +  sObid  ,  
dataType: 'json',                            
success: function (data) {
console.log(""Success... "");
   ??? How to deserialize the json object here ??? Please HELP !!
},
error: function(jqXHR, textStatus, errorThrown){
      // I get an error here
      alert(textStatus + "" | "" + errorThrown);
}                                                                   
});

Thanks 
Ranchs
```

Original issue reported on code.google.com by `venkates...@gmail.com` on 27 Jun 2012 at 7:28""Original comment by `limpbizkit` on 30 Jun 2012 at 2:48
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
457Attempting to parse an empty string returns null instead of throwing JsonSyntaxExceptionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:47 PM"```
The following test case illustrates what I think the parser should be doing in 
the event of an immediate EOF:

    @Test
    public void testEmptyStreamBehaviour()
    {
        Gson gson = new Gson();
        try
        {
            gson.fromJson(new StringReader(""""), String.class);
            fail(""Expected JsonSyntaxException"");
        }
        catch (JsonSyntaxException e)
        {
            // Expected.
        }
    }

What really happens is that it returns null. This resulted in an incredibly 
difficult to track down bug which turned out to just be someone sending no data 
instead of sending JSON.

```

Original issue reported on code.google.com by `trejkaz` on 2 Jul 2012 at 1:49""```
This is a sad consequence of our decision to be backwards-compatible with Gson 
1.5 which had the same behavior.

Work around this by using a TypeAdapter to do your serialization:
  gson.getAdapter(String.class).fromJson(string)
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:38
- Changed state: **WontFix**
 =||= The suggested workaround doesn't seem to work if there is a custom type adapter registered for the class, because that type adapter code never gets hit. A slight modification of the OP's code with the suggested fix still fails:

```
@Test
public void testEmptyStreamBehaviour()
{
    Gson gson = new GsonBuilder().registerTypeAdapter(String.class, new JsonDeserializer<String>() {
        @Override
        public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            throw new JsonSyntaxException(""Never gets here"");
        }
    }).create();
    try
    {
        gson.getAdapter(String.class).fromJson("""");
        fail(""Expected JsonSyntaxException"");
    }
    catch (JsonSyntaxException | IOException e)
    {
        // Expected.
    }
}
```
 =||= @mbroshi, you have to use a `TypeAdapter` instead of a `JsonDeserializer` because that is automatically made `null`-safe, i.e. the deserializer is not called for `null` values, see #1697. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
458Expected BEGIN_OBJECT but was BEGIN_ARRAYGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:47 PM"```
I want to convert this string to JSON:

String jsonString = 
""{\""id\"":1,\""result\"":[{\""activityId\"":78398,\""employeeId\"":131969,\""id\"":270035
3,\""revision\"":0,\""wageSpecificationId\"":0,\""invoiceId\"":0,\""hours\"":2,\""javaCla
ss\"":\""no.tripletex.tcp.model.Hour\"",\""projectId\"":1164299,\""companyId\"":593187,
\""comment\"":\""hei\"",\""date\"":{\""time\"":1.3397112e12,\""javaClass\"":\""java.sql.Dat
e\""}},{\""activityId\"":78399,\""employeeId\"":131969,\""id\"":2701989,\""revision\"":0,
\""wageSpecificationId\"":0,\""invoiceId\"":0,\""hours\"":5,\""javaClass\"":\""no.triplet
ex.tcp.model.Hour\"",\""projectId\"":1166105,\""companyId\"":593187,\""comment\"":\""hei
 du\"",\""date\"":{\""time\"":1.3397112e12,\""javaClass\"":\""java.sql.Date\""}}]}"";

Where do I initzialize the JSONArray. I'm new to this and I didn't understand 
the other threads with the same subject. I understand why it's not running, but 
I don't know what to do about it. My code: 

Gson gson = new Gson();

String jsonString = 
""{\""id\"":1,\""result\"":[{\""activityId\"":78398,\""employeeId\"":131969,\""id\"":270035
3,\""revision\"":0,\""wageSpecificationId\"":0,\""invoiceId\"":0,\""hours\"":2,\""javaCla
ss\"":\""no.tripletex.tcp.model.Hour\"",\""projectId\"":1164299,\""companyId\"":593187,
\""comment\"":\""hei\"",\""date\"":{\""time\"":1.3397112e12,\""javaClass\"":\""java.sql.Dat
e\""}},{\""activityId\"":78399,\""employeeId\"":131969,\""id\"":2701989,\""revision\"":0,
\""wageSpecificationId\"":0,\""invoiceId\"":0,\""hours\"":5,\""javaClass\"":\""no.triplet
ex.tcp.model.Hour\"",\""projectId\"":1166105,\""companyId\"":593187,\""comment\"":\""hei
 du\"",\""date\"":{\""time\"":1.3397112e12,\""javaClass\"":\""java.sql.Date\""}}]}"";

System.out.println(jsonString);

Debug obj = (Debug) gson.fromJson(jsonString, Debug.class);

System.out.println(obj.getResult());

__________________________________________________________

import com.google.gson.annotations.SerializedName;

    public class Debug {
        @SerializedName(""id"")
        private String id;
        @SerializedName(""method"")
        private String method;
        @SerializedName(""result"")
        private Result result;



        public final String getId() {
            return this.id;
        }

        public final String getMethod() {
            return this.method;
        }


        public final Result getResult() {
            return this.result;
        }
}
______________________________________________________________________

import com.google.gson.annotations.SerializedName;

public class Result {
        @SerializedName(""companyId"")
        private String companyId;
        @SerializedName(""javaClass"")
        private String javaClass;
        @SerializedName(""activityId"")
        private String activityId;
        @SerializedName(""projectId"")
        private String projectId;
        @SerializedName(""employeeId"")
        private String employeeId;
        @SerializedName(""comment"")
        private String comment;
        @SerializedName(""revision"")
        private String revision;
        @SerializedName(""invoiceId"")
        private String invoiceId;
        @SerializedName(""hours"")
        private String hours;
        @SerializedName(""wageSpeceficationId"")
        private String wageSpeceficationId;
        @SerializedName(""id"")
        private String id;
        @SerializedName(""date"")
        private Date date;


        public final String getCompanyId() {
            return companyId;
        }

        public final String getJavaClass() {
            return javaClass;
        }

        public final String getActivityId() {
            return activityId;
        }

        public final String getProjectId() {
            return projectId;
        }

        public final String getEmployeeId() {
            return employeeId;
        }

        public final String getComment() {
            return comment;
        }

        public final String getRevision() {
            return revision;
        }

        public final String getInvoiceId() {
            return invoiceId;
        }

        public final String getHours() {
            return hours;
        }

        public final String getWageSpeceficationId() {
            return wageSpeceficationId;
        }

        public final String getId() {
            return id;
        }

        public final Date getDate() {
            return date;
        }
}

The output: 

Exception in thread ""main"" com.google.gson.JsonSyntaxException: 
java.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at 
line 1 column 19
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:172)
    at com.google.gson.Gson.fromJson(Gson.java:791)
    at com.google.gson.Gson.fromJson(Gson.java:757)
    at com.google.gson.Gson.fromJson(Gson.java:706)
    at com.google.gson.Gson.fromJson(Gson.java:678)
    at com.example.tutorial.plugins.Test.main(Test.java:24)
Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was 
BEGIN_ARRAY at line 1 column 19
    at com.google.gson.stream.JsonReader.expect(JsonReader.java:339)
    at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:322)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:165)
    ... 7 more


Thanks!
```

Original issue reported on code.google.com by `matiaspe...@gmail.com` on 2 Jul 2012 at 1:29""```
[deleted comment]
```
 =||= ```
Not a bug! Please use stackoverflow for ""how do I"" questions.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:35
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
460deserialize many arraylist inside a class using gsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:50 PM"```
I have a class with multiple Lists.  How can I deserialize it using gson?

My class ...

    Class Data
    {

    List<String> actor;
    List<Integer> text_relevance;
    List<String> title;
    }

The json string is as follows ... 
Is the class design for this json correct?

    {""data"":{
            ""actor"":[""Abercrombie, Ian"",""Baker, Dee Bradley"",""Burton, Corey"",
                     ""Eckstein, Ashley"",""Futterman, Nika"",""Kane, Tom"",
                     ""Lanter, Matt"",""Taber, Catherine"",""Taylor, James Arnold"",
                     ""Wood, Matthew""],
            ""text_relevance"":[""308""],
            ""title"":[""Star Wars: The Clone Wars""]
        }
    }
```

Original issue reported on code.google.com by `gowtham....@gmail.com` on 15 Jul 2012 at 12:03""```
Not a bug! Please use stackoverflow for ""how do I"" questions.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:34
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
461Gson fails to deserialize long value with .0 decimal when in custom deserializerGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:51 PM"```
When attempting to deserialize object with long field from JSON containing 
value such as 1342911054.0, using custom deserializer, Gson throws a 
NumberFormatException. If not defining any deserializer for the object, works 
fine but does not allow any custom handling of fields.
See code for detail in reduced test case. Code also contains workaround for 
this issue. However, I do not know if it has any unwanted side effects.

What is the expected output? What do you see instead?
Gson should verify that double value equals long value then return it. Gson 
instead throws NumberFormatException. NFE is also displaying substring of value 
(missing first 3 chars) instead of actual value.

What version of the product are you using? On what operating system?
Gson 2.2.2 on JDK 7u5 x86 on Windows 7 SP1 x64
```

Original issue reported on code.google.com by `alek...@sovietnation.net` on 21 Jul 2012 at 8:25
- Merged into: #462

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-461/comment-0/GsonTest.java)""```
And now I realize that the reason it fails is because a JsonTreeReader is being 
used, instead of a JsonReader. JsonTreeReader's nextLong method is more strict 
than JsonReader's method.
```

Original comment by `alek...@sovietnation.net` on 22 Jul 2012 at 12:49
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:33
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
462inconsistency LazilyParsedNumber vs. JsonReader.nextInt()Google Code ExporterGoogleCodeExporter03/19/15, 06:32:52 PM"```
What steps will reproduce the problem?
See attached JUnit test.

What is the expected output?
I expect Gson fromJson(JsonElement json, Class<T> classOfT) to behave like Gson 
fromJson(String json, Class<T> classOfT) when I use the same json string input 
but converted the first one with JsonParser .parse(String json). 

What do you see instead?
Instead I got that exception:

com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input 
string: ""1.0""
    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:230)
    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:220)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:819)
    at com.google.gson.Gson.fromJson(Gson.java:792)
    at GsonTest.testWithJsonString(GsonTest.java:17)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NumberFormatException: For input string: ""1.0""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
    at java.lang.Integer.parseInt(Integer.java:458)
    at java.math.BigInteger.<init>(BigInteger.java:316)
    at java.math.BigInteger.<init>(BigInteger.java:451)
    at com.google.gson.internal.LazilyParsedNumber.intValue(LazilyParsedNumber.java:41)
    at com.google.gson.JsonPrimitive.getAsInt(JsonPrimitive.java:255)
    at com.google.gson.internal.bind.JsonTreeReader.nextInt(JsonTreeReader.java:197)
    at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:228)
    ... 30 more


What version of the product are you using? On what operating system?
Could be reproduced with 2.1 and 2.2.2
```

Original issue reported on code.google.com by `s.groeb...@googlemail.com` on 26 Jul 2012 at 3:35
- Merged into: #453

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-462/comment-0/GsonTest.java)""```
sorry I mixed up the method names in the test. here is the corrected one.
```

Original comment by `s.groeb...@googlemail.com` on 26 Jul 2012 at 3:40

Attachments:
- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-462/comment-1/GsonTest.java)
 =||= ```
This is a bug!
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:31
- Changed title: *_inconsistency of Gson.fromJson methods: *_
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:32
- Changed title: **inconsistency LazilyParsedNumber vs. JsonReader.nextInt()**
 =||= ```
Issue 461 has been merged into this issue.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:33
 =||= Original comment by `limpbizkit` on 2 Sep 2012 at 9:39
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
463JsonToken javadoc mistakeGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:53 PM"```
The javadoc for JsonToken#BEGIN_ARRAY says:
""The opening of a JSON array. Written using {@link JsonWriter#beginObject} and 
read using {@link JsonReader#beginObject}.""

It should be referring to beginArray instead.
```

Original issue reported on code.google.com by `alek...@sovietnation.net` on 29 Jul 2012 at 8:33""```
This issue was closed by revision r1196.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:29
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
464Integrate with java.sql.ResultSetGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:54 PM"```
I would like to do the following:

    Statement s = ""SELECT id, label FROM arbitrary_view"";
    PreparedStatement ps = getConnection().prepareStatement( s );
    ResultSet rs = ps.executeQuery();

    Gson gson = new Gson();
    String json = gson.toJson( rs );

The ResultSetMetaData contains all the information necessary to create a 
sensible default JSON structure for the basic types (strings, numbers) based on 
the JDBC driver being used. The above code should generate:

    {
      id: id_value_1,
      label: label_value_1
    },
    {
      id: id_value_2,
      label: label_value_2
    }

Instead, the code generates the following:

java.lang.IllegalArgumentException: class java.text.DecimalFormat declares 
multiple JSON fields named maximumIntegerDigits
    at com.ahs.ismtool.QueryService.handle(QueryService.java:85)
    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)
    at org.eclipse.jetty.server.Server.handle(Server.java:350)
    at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)
    at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)
    at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)
    at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630)
    at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)
    at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:77)
    at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:620)
    at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:46)
    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603)
    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538)
    at java.lang.Thread.run(Unknown Source)

```

Original issue reported on code.google.com by `dave.jar...@gmail.com` on 31 Jul 2012 at 11:57""```
See also:

http://stackoverflow.com/questions/6514876/converting-resultset-to-json-faster-o
r-better-way
```

Original comment by `dave.jar...@gmail.com` on 1 Aug 2012 at 12:04
 =||= ```
You need to write a custom type adapter.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:28
- Changed state: **WontFix**
 =||= ```
Is this not a common enough feature to warrant implementation?
```

Original comment by `dave.jar...@gmail.com` on 3 Sep 2012 at 12:44
 =||= ```
Yes. I too was expecting a default implementation for such kinds of objects. 
But there apparently isn't.
```

Original comment by `ashleyli...@gmail.com` on 9 Nov 2012 at 7:49
 =||= ```
I was forced by EclipseLink to redefine id field in some of my objects (kind of 
bug in EclipseLink...). And now all the json serialization is broken. And there 
is no easy way to fix it. 

shouldSkipField(FieldAttributes f) cant help because it has no access to the 
java type which is actually serializing (you can get a declaring type but it is 
an abstract class in my case and the actual class is unknown).

The only way I see now is to exclude this field from a serialization, serialize 
object to json tree and add the field manually. Or to write a dozen of adapters.

It would be good to have some mechanism to resolve this issue. Instead of
        if (previous != null) {
          throw new IllegalArgumentException(declaredType
              + "" declares multiple JSON fields named "" + previous.name);
        }
we can use some policy enum to define behavior. For example ""prefer 
overridden"", ""ignore overridden"", ""throw exception"".

Or to add some annotation which can be used on overridden field.



```

Original comment by `kostya31...@gmail.com` on 26 Mar 2014 at 2:40
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
465Gson doesn't serialize collection with object of derived collectionGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:55 PM"```
What steps will reproduce the problem?
Please look at the following code:
<code language=""java"">
public class SerializeTest {

    public static class AssetMetadata extends ArrayList<String> {}
    public static class AssetRequest {
        public ArrayList<AssetMetadata> styles;
        public ArrayList<AssetMetadata> scripts;
    }

    private static final AssetMetadata SCRIPT_METADATA = new AssetMetadata() {{
        add(""path/to/script.js"");
    }};
    private static final AssetMetadata STYLE_METADATA = new AssetMetadata() {{
        add(""path/to/style.js"");
    }};

    @Test
    public void testSerialization() {

        AssetRequest metadata = new AssetRequest();
        metadata.styles = new ArrayList<AssetMetadata>() {{ add(STYLE_METADATA); }};
        metadata.scripts = new ArrayList<AssetMetadata>() {{ add(SCRIPT_METADATA); }};

        String json = new Gson().toJson(metadata, AssetRequest.class);

        System.out.println(json);
    }
}
</code>

What is the expected output? What do you see instead?
Expected output: 
{""styles"":[[""path/to/style.js""]],""scripts"":[[""path/to/script.js""]]}
Actual output: {""styles"":[null],""scripts"":[null]}

What version of the product are you using? On what operating system?
I use version 2.2.2. With version 1.7.1 serialization and deserialization works 
as expected.

Please provide any additional information below.
If I use the ArrayList<String> collection instead of the AssetMetadata class 
then it works as expected.
```

Original issue reported on code.google.com by `kaps.chr...@gmail.com` on 16 Aug 2012 at 2:11""```
Don't use double brace initialization. This should work if you avoid double 
brace initialization.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:27
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
466Map entries sorted by keysGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:56 PM"```
It would be great to be able to configure Gson to write all Map entries sorted 
by keys.

Especially in Unit Tests an equality assertion of two larger objects 
represented as their json strings is very neat because modern IDEs bring up the 
exact diff of the two, whereas classic Object.equals only returns true or false.




```

Original issue reported on code.google.com by `th.kiesl...@gmail.com` on 23 Aug 2012 at 12:51""```
You could create a helper method that returns a JsonObject sorted by keys. It 
could even be recursive.

We don't want to make this change because some applications depend on 
preserving the order that keys and values are returned.
```

Original comment by `limpbizkit` on 2 Sep 2012 at 9:26
- Changed state: **WontFix**
 =||= ```
I created a recursive method to sort JsonObjects. It works for Maps (and 
Objects). I don't see how it could sort Sets though.

Introducing another flag on the builder to trigger sorting of Maps and Sets 
would not change the behavior if its default was false.
```

Original comment by `th.kiesl...@gmail.com` on 11 Sep 2012 at 2:11
 =||= ```
I agree. I've worked with other json libraries in other languages (e.g., perl), 
and having the ability (optionally, of course) to sort by keys is very useful 
in some cases. I'm currently trying to do this myself, and I'm finding I have 
to write the code by hand.
```

Original comment by `paul.cle...@steeleye.com` on 18 Dec 2014 at 5:18
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
469Support Throwable and Exception for serializing/deserializingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:32:59 PM"```
https://groups.google.com/d/topic/google-gson/fGTi5EEc9jM/discussion
```

Original issue reported on code.google.com by `in...@trymph.com` on 6 Sep 2012 at 10:58""```
just for clarity, here's a patch that implements this.

```

Original comment by `sysbliss` on 6 Sep 2012 at 11:50

Attachments:
- [ReflectivePolymorphicThrowables.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-469/comment-1/ReflectivePolymorphicThrowables.patch)
 =||= ```
any progress on this?
```

Original comment by `sysbliss` on 25 Sep 2012 at 11:37
 =||= Original comment by `limpbizkit` on 4 Feb 2013 at 4:07
- Added labels: **Type-Enhancement**, **Priority-High**
- Removed labels: **Type-Defect**, **Priority-Medium**
 =||= ```
dealing with Throwables still fails in gson-2.2.4. Is the patch ready to be 
used ?
```

Original comment by `liviu.ca...@gmail.com` on 13 Jul 2013 at 4:34
 =||= ```
I need that patch, too. I'm currently writing a client / server architecture 
and the exceptions should also be returned to the client.
```

Original comment by `noctur...@googlemail.com` on 14 Apr 2014 at 10:11
 =||= ```
We will not integrate that patch since it has a huge security hole. We can't 
trust the class information present in the JSON. We will have to think of an 
alternate way.
```

Original comment by `inder123` on 17 Apr 2014 at 10:15
 =||= ```
It is ridiculous that GSON still does not support to serialize 
Throwable/Exception objects 2 years after it has been reported. This cannot be 
too hard to implement.

Anyway, thanks for your great work. But I would be much more thankful if you 
would solve this problem ;P
```

Original comment by `simonspr...@gmail.com` on 20 Aug 2014 at 6:38
 =||= ```
simonsprankel: I have had some false starts on this, but punted when realized 
that the specs aren't clear. Can you explain what your expectations are by 
serializing/deserializing an exception object? Please provide some examples as 
well.
```

Original comment by `inder123` on 20 Aug 2014 at 6:42
 =||= ```
Thanks for your superfast reply! Just FYI, there is also a Stack Overflow 
thread on this topic: 
https://stackoverflow.com/questions/8151082/gson-an-java-throwable

In the Stack Overflow thread, there is also an example how Jackson serializes 
exceptions (though I am not sure if it is still up to date).

I personally would expect that the important fields are properly 
serialized/unserialized (so that the getter functions return the same data 
after the serialization process):
- cause
- detailMessage
- stacktrace
- suppressedExceptions

But in any case, serializing/deserializing something or just the real basic 
stuff would be better than an exception.
```

Original comment by `simonspr...@gmail.com` on 20 Aug 2014 at 6:53
 =||= ```
The big problem is the cause field. That is what causes the 
CircularReferenceException. I can't figure out a good way to solve it when it 
is not null. It requires the general solution for CircularReferenceException 
which we have punted on for too long. We used to support it in Gson 1.x....
```

Original comment by `inder123` on 20 Aug 2014 at 7:25
 =||= ```
As already written, just skipping the cause field would be better than getting 
an exception. It is not too bad if it will be properly documented.
But another idea: Would it be possible to just break the recursion? If we want 
to serialize a Throwable ""e"", which has a Throwable ""e2"" in its cause field, 
can we just ignore the cause field of e2? This should solve the problem, right?
```

Original comment by `simonspr...@gmail.com` on 20 Aug 2014 at 7:32
 =||= ```
This issue was closed by revision r1308.
```

Original comment by `inder123` on 16 Nov 2014 at 10:25
- Changed state: **Fixed**
 =||= ```
Thanks inder123!
Do you know when this is scheduled for release?
```

Original comment by `ant...@gmail.com` on 18 Nov 2014 at 11:13
 =||= ```
antweb: Hopefully, this week itself. Just waiting for some code reviews to 
complete.
```

Original comment by `inder123` on 19 Nov 2014 at 7:16
 =||= ```
Thanks - please let me know when this has been released as my project is 
waiting :)
```

Original comment by `ant...@gmail.com` on 10 Dec 2014 at 2:53
 =||= ```
@antweb: This is already publicly available with Gson 2.3.1
```

Original comment by `inder123` on 16 Dec 2014 at 7:19
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
470"Implement ""Object fromJson(String json)"""Google Code ExporterGoogleCodeExporter03/19/15, 06:33:02 PM"```
I'd like to propose to add a non-generic method to Gson: Object fromJson(String 
json). The return value is either a primitive, a List, or a Map. The benefit is 
that you don't need to provide the 2nd parameter (either Class or Type) when 
you don't know the type of the json string. This might not be that useful for 
you Java application, but it would be super helpful for JSR-223 (scripting 
language) such as Jython. 

Let me know if you guys like the idea or not. I can contribution a patch if 
needed.
```

Original issue reported on code.google.com by `danith...@gmail.com` on 10 Sep 2012 at 3:53""```
Sample code:

    public Object fromJson(String json) {
        JsonElement element = new JsonParser().parse(json);
        return fromJson(element);
    }

    private Object fromJson(JsonElement element) {
        if (element.isJsonNull()) {
            return null;
        } else if (element.isJsonPrimitive()) {
            JsonPrimitive primitive = element.getAsJsonPrimitive();
            if (primitive.isBoolean()) {
                return primitive.getAsBoolean();
            } else if (primitive.isNumber()) {
                return primitive.getAsNumber();
            } else if (primitive.isString()) {
                return primitive.getAsString();
            }
            throw new AssertionError(""Invalid JsonPrimitive."");
        } else if (element.isJsonArray()) {
            List<Object> list = new ArrayList<Object>();
            for (JsonElement e : element.getAsJsonArray()) {
                list.add(fromJson(e));
            }
            return list;
        } else if (element.isJsonObject()) {
            Map<String, Object> map = new HashMap<String, Object>();
            for (Map.Entry<String, JsonElement> entry : element.getAsJsonObject().entrySet()) {
                map.put(entry.getKey(), fromJson(entry.getValue()));
            }
            return map;
        }
        throw new AssertionError(""Invalid JsonElement."");
    }
```

Original comment by `danith...@gmail.com` on 10 Sep 2012 at 4:18
 =||= ```
You already get this with Gson.fromJson(String, Object.class)
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:08
- Changed state: **Done**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
471Error in the JavadocGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:02 PM"```
What steps will reproduce the problem?
1. Head over to this page: 
http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/J
sonElement.html#getAsJsonArray()

What is the expected output? What do you see instead?
The two statements ""If the element is of some other type, a ClassCastException 
will result."" and ""Throws: IllegalStateException - if the element is of another 
type."" are contradictory.

What version of the product are you using? On what operating system?
Current online Javadoc.

Please provide any additional information below.

```

Original issue reported on code.google.com by `stevenroose` on 11 Sep 2012 at 10:01""```
Fixed in r1293.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:14
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
472JsonParseException when encountering an empty value for an int or longGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:03 PM"```
What steps will reproduce the problem?
1. Create a data class with an int data member and a default value of 0 (any 
value would do).  Example:
public class GsonData {
    public int intValue = 0;
}

2. Create a json document with an empty value for intValue.  Example:
{
    ""intValue"":""""
}
3. Parse the document:
String jsonString = < the json file as a string >
GsonData testDoc = new Gson().fromJson(jsonString, GsonData.class);

What is the expected output? 
I would expect that the document would parse correctly and result in intValue 
having the default value of 0.

What do you see instead?
It throws a parse exception because the empty value could not be converted to 
an int.

com.google.gson.JsonParseException: The JsonDeserializer IntegerTypeAdapter 
failed to deserialized json object """" given the type int

What version of the product are you using? 
gson-1.5.jar

On what operating system?
Windows 2008 R2

Please provide any additional information below.

```

Original issue reported on code.google.com by `bryan.am...@gmail.com` on 17 Sep 2012 at 4:00""```
This solution posted here worked for me: 
https://groups.google.com/forum/#!msg/google-gson/kNf5HADtY14/bdD1xmDPbH0J

I created a new class as follows:

public class IntTypeAdapter extends TypeAdapter<Number> {

    @Override
    public void write(JsonWriter out, Number value)
            throws IOException {
        out.value(value);
    }

    @Override
    public Number read(JsonReader in) throws IOException {
        if (in.peek() == JsonToken.NULL) {
            in.nextNull();
            return null;
        }
        try {
            String result = in.nextString();
            if ("""".equals(result)) {
                return null;
            }
            return Integer.parseInt(result);
        } catch (NumberFormatException e) {
            throw new JsonSyntaxException(e);
        }
    }
}


And then ran the gson parsing as follows:

Gson gson = new GsonBuilder()
    .registerTypeAdapter(int.class, new IntTypeAdapter())
    .registerTypeAdapter(Integer.class, new IntTypeAdapter()).create();
myObject = gson.fromJson(myJsonString, Student.class);


```

Original comment by `graili...@gmail.com` on 25 Sep 2012 at 7:08
 =||= ```
Working as intended.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:09
- Changed state: **WontFix**
 =||= @GoogleCodeExporter Why won't this issue be fixed? Isn't this considered as a bug?
 =||= @GokhanArik it is not logical to parse `""""` empty string as `0` integer =||= I know this bug is closed but it's one of the top google results when searching for this issue so I wanted to provide a broader solution to what was posted above, since it only attempts to handle empty strings

This code below will continue to correctly parse json tokens that look like ints, doubles, and strings ints and string doubles, while defaulting to 0 (or null for Integer types) on nulls, empty strings, invalid strings, and boolean values

```
public static final TypeAdapter<Number> UNRELIABLE_INTEGER = new TypeAdapter<Number>() {
    @Override
    public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
            case NUMBER:
            case STRING:
                String s = in.nextString();
                try {
                    return Integer.parseInt(s);
                } catch (NumberFormatException ignored) {
                }
                try {
                    return (int)Double.parseDouble(s);
                } catch (NumberFormatException ignored) {
                }
                return null;
            case NULL:
                in.nextNull();
                return null;
            case BOOLEAN:
                in.nextBoolean();
                return null;
            default:
                throw new JsonSyntaxException(""Expecting number, got: "" + jsonToken);
        }
    }
    @Override
    public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
    }
};
public static final TypeAdapterFactory UNRELIABLE_INTEGER_FACTORY = TypeAdapters.newFactory(int.class, Integer.class, UNRELIABLE_INTEGER);

Gson gson = new GsonBuilder()
    .registerTypeAdapterFactory(UNRELIABLE_INTEGER_FACTORY)
    .create();
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
473SerializedName does not work with enum types in EnumMapGoogle Code ExporterGoogleCodeExporter09/06/15, 05:45:15 PM"```
What steps will reproduce the problem?
1. Defining an enum type such as:
public enum Test {
    @SerializedName(""aaa"")
    A,
    @SerializedName(""bbb"")
    B,
    @SerializedName(""ccc"")
    C
}

2. Testing the enum type with a EnumMap class, such as:

Gson gson = new Gson();
System.out.println(gson.toJson(Test.A));
System.out.println(gson.toJson(Test.B));
System.out.println(gson.toJson(Test.C));

Map<Test, Integer> testMap = new EnumMap<Test, Integer>(Test.class);
testMap.put(Test.A, 3);
testMap.put(Test.B, 2);
testMap.put(Test.C, 1);
System.out.println(gson.toJson(testMap));

What is the expected output? What do you see instead?
I would expect to have an output like this:
""aaa""
""bbb""
""ccc""
{""aaa"":3,""bbb"":2,""ccc"":1}

However, the EnumMap class does not seem to take into account the 
@SerializedName annotation, and I obtain this instead:
""aaa""
""bbb""
""ccc""
{""A"":3,""B"":2,""C"":1}

What version of the product are you using? On what operating system?
I'm using Gson 2.2.2 in Windows 7

Please provide any additional information below.
This problem is present in both serialization and deserialization. I have a 
Json file that I cannot modify, with map fields such as ""Item_Value#Parameter"". 
I would like to deserialize it avoiding the use of a Map<String, Integer> class 
if possible.
```

Original issue reported on code.google.com by `FernA...@gmail.com` on 22 Sep 2012 at 2:11""```
I am new with Gson, but I managed to do this with a custom serializer and 
deserializer. Nevertheless, I still think this should be implemented without 
needing them:

GsonBuilder gb = new GsonBuilder();
Type t = (new TypeToken<Map<Test, Integer>>(){}).getType();
gb.registerTypeAdapter(t, new JsonSerializer<Map<Test,Integer>>(){

    @Override
    public JsonElement serialize(Map<Test, Integer> arg0, Type arg1, JsonSerializationContext arg2) {
        // TODO Auto-generated method stub
        JsonObject obj = new JsonObject();
        for (Test t : arg0.keySet()) {
            obj.add(arg2.serialize(t).getAsString(), new JsonPrimitive(arg0.get(t)));
        }
        return obj;
    }

});
gb.registerTypeAdapter(t, new JsonDeserializer<Map<Test,Integer>>(){

    @Override
    public Map<Test, Integer> deserialize(JsonElement arg0, Type arg1, JsonDeserializationContext arg2) throws JsonParseException {
        Map<Test, Integer> res = new EnumMap<Test, Integer>(Test.class);
        Entry<String, JsonElement> entry;
        Test tVal;
        Iterator<Entry<String,JsonElement>> it = arg0.getAsJsonObject().entrySet().iterator();
        while (it.hasNext()) {
            entry = it.next();
            tVal = arg2.deserialize(new JsonPrimitive(entry.getKey()), Test.class);
            res.put(tVal, entry.getValue().getAsInt());
        }
        return res;
    }

});
Gson gson = gb.create();

Map<Test, Integer> testMap = new EnumMap<Test, Integer>(Test.class);
testMap.put(Test.A, 3);
testMap.put(Test.B, 2);
testMap.put(Test.C, 1);
System.out.println(gson.toJson(testMap, t));

testMap = gson.fromJson(gson.toJson(testMap, t), t);
System.out.println(testMap.get(Test.A));
System.out.println(testMap.get(Test.B));
System.out.println(testMap.get(Test.C));

The output now is:
{""aaa"":3,""bbb"":2,""ccc"":1}
3
2
1
```

Original comment by `FernA...@gmail.com` on 22 Sep 2012 at 4:34
 =||= ```
I am encountering similar issue, I am using Gson on android. 

    public enum Mode {
        @SerializedName(""no_account_creation"")
        LOGIN, 
        @SerializedName(""force_account_creation"")
        REGISTER, 
        @SerializedName(""auto"")
        AUTO;
    }

On 2.3.6 and above:
Mode.AUTO serializes to ""auto""

On HTC explorer 2.3.5 
Mode.AUTO serializes to ""AUTO""

Is it possible that the fix of 
https://code.google.com/p/google-gson/issues/detail?id=347 
be somehow depended on the version of dvm?

```

Original comment by `Platinum...@gmail.com` on 18 Mar 2013 at 9:51
 =||= Use `GsonBuilder.enableComplexMapKeySerialization()` to avoid this problem.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
475jsonparser performanceGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:05 PM"```
Hello,

i have look with interest google-gson as a way to serialize complex java object 
to webapp.

now, i have to get the output back (json) and convert into a standard plain DOM 
object (or something like that) to be able to work with a generic json tree.

What i have done so far is to use a 
JsonReader reader = new JsonReader(in)
and then write a simple recursive function (taht is 90% equals to what you do 
when you use the jsonreader)
 to parse the three (do some peek, switch case, make it recursive and so on)

everything work like a charm, and is quite fast.

i have than take a look to json-smart v2 (newer ersion , used only as a parser, 
and is 20% fast than gson 2.2.2 (never version) parser



here are some example
gsonParser 5009ms
jsonSMART 3633ms

this is done with a huge json, iterated 20000 times x 10 repetition each (to 
allow a bit of warmup)
and this data are the avg except the first 2 iteration (leaved out to allow a 
warmup, useful for this kind of 
microbenckmark imho)

the json is a nested root -> 10 child -> 10 subchild each node with 10 random 
attr (mixed)

The code that create my custom ""dom"" element (that is for my convenience 
similar to dom4j syntax due to migration issue) is a wrapper for both library, 
then i use their internal obj to create my wrapper (creation costs is the same, 
the 2 method generate the same output)


Have you ever try some benchmarking with jsonSMART?
Obviusly gson is used to do other thinks, it's not only a parser for json, but 
in this case the save is pretty high.
I also haven't digg to much on jsonSMART, but probably it can make do work 
better, as in your case i don't use your jsonElement, but directly the parser 
(on jsonSMART i use their convenient jsonElement, since is so fast)

warm regards

```

Original issue reported on code.google.com by `gippo...@gmail.com` on 27 Sep 2012 at 1:29""```
We rewrite the parser for the next release.
https://code.google.com/p/google-gson/source/detail?r=1184
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:30
- Changed state: **Done**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
476Support exception handling much informative.Google Code ExporterGoogleCodeExporter03/19/15, 06:33:06 PM"```
What steps will reproduce the problem?
If my response is very large then ""Caused by: java.lang.IllegalStateException: 
Expected BEGIN_ARRAY but was BEGIN_OBJECT"" should be with element key so that 
development time can be reduced because so much complex response can not be 
traced by observing.

```

Original issue reported on code.google.com by `bhavesh4...@gmail.com` on 29 Sep 2012 at 6:55
- Merged into: #395""Original comment by `limpbizkit` on 4 Feb 2013 at 3:31
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
477DefaultDateTypeAdapter throws JsonSyntaxException on deserializing an empty stringGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:07 PM"```
When you have JSON containing a field (mapped as Date) which is set to the 
empty string, e.g. {..., ""myDateField"":"""", ...} the DefaultDateTypeAdapter 
throws an JsonSyntaxException in the method ""deserializeToDate"" because an 
emtpy string value can not be parsed by DateFormat. 

Would it not make sense in the ""deserialize"" method to check for an emtpy 
string before calling ""deserializeToDate"" and if an empty string is found to 
return null?

    public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        if (!(json instanceof JsonPrimitive)) {
            throw new JsonParseException(""The date should be a string value"");
        }
        String value = json.getAsString();
        if (value==null || """".equals(value)) {
            return null;
        }
        Date date = deserializeToDate(json);
...

```

Original issue reported on code.google.com by `ronald.p...@googlemail.com` on 9 Oct 2012 at 9:42""```
Null isn't an empty string. You can write your own TypeAdapter if you want this 
behavior.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:32
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
478Strange behavior on Map serializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:08 PM"```
I'm trying to serialize a generic typed map using gson.
As result of ""toJson(...)"" I get following string:
""{""java.awt.Point[x\u003d10,y\u003d10]"":{""x"":101,""y"":101}}""

it seems that for key it just call ""toString()"" function instead of 
serialization.

On desirialization I get following exception:

Exception in thread ""main"" com.google.gson.JsonSyntaxException: 
java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 
column 39

due to the bad json format.

Is there any workaround?

Thanks In Advance.

gabber
```

Original issue reported on code.google.com by `i7gab...@googlemail.com` on 9 Oct 2012 at 3:57

Attachments:
- [MapSerialisation.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-478/comment-0/MapSerialisation.java)""```
Problem solved, my fault, sorry.
There is an option called ComplexMapKeySerialization.
It can be enabled using GsonBuilder.

GsonBuilder builder = new GsonBuilder();
builder.enableComplexMapKeySerialization();
builder.create();


```

Original comment by `i7gab...@googlemail.com` on 16 Nov 2012 at 4:35
 =||= Original comment by `limpbizkit` on 4 Feb 2013 at 3:33
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
480Multiple TypeAdapter issue..Google Code ExporterGoogleCodeExporter03/19/15, 06:33:09 PM"```
What steps will reproduce the problem?
""Details"":{

       ""Role"":""abc"",
       ""Team"":
          {
             ""active"":""yes"",
             ""primary"":""yes"",
             ""content"":""abc""
             ""Test"":
             {
                 ""key1"":""value1"",
                 ""key2"":""value2"",
                 ""key3"":""value3""
             }
          }
}

 I am facing problem while my response is more dynamic..Team and Test can be JsonArray or JsonObject.. It really harassing me because sometime Test object may array when more data, may object when single data, string when no data. There is no consistency in response.

Let me know how much Google Json is extensible?.

What is the expected output? What do you see instead?
In very large response, One or more element can be dynamic(may be JsonObject, 
JsonArray, String) How can I register more TypeAdapter?



What version of the product are you using? On what operating system?
Anddroid 4.0+

Please provide any additional information below.
```

Original issue reported on code.google.com by `bhavesh4...@gmail.com` on 18 Oct 2012 at 7:41""```
What's the bug?
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:35
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
481com.google.gson 2.2.2 - Uncompatible with appengine sdk 1.7Google Code ExporterGoogleCodeExporter03/19/15, 06:33:09 PM"```
What steps will reproduce the problem?
1. import com.google.gson.Gson is valid with appengine sdk 1.4 but not with 
1.7. error observed as in point 2.
2. with above import, Create object of Gson is error. NoClassDefFoundError can 
be seen in appengine logs.
4. If I allow eclipse to import 
com.google.appengine.repackaged.com.google.gson.Gson; then its working fine. 
But has a warning that app may break without warning.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?
com.google.gson 2.2.2
Appengine sdk 1.7
Eclipse Juno
Windows 7

Please provide any additional information below.

```

Original issue reported on code.google.com by `abhijits...@gmail.com` on 18 Oct 2012 at 11:31""```
This is an appengine bug. Your best bet is to use jarjar to repackage Gson.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:35
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
483Nullpointer exception on toJson();Google Code ExporterGoogleCodeExporter03/19/15, 06:33:11 PM"```
What steps will reproduce the problem?
package com.thundashop.app.banner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class ATest {
    class Test {
        String test = ""test"";
        Class something = null;
    }

    private void run() {
        Test test = new Test();
        System.out.println(test.test);

        Gson gson = new GsonBuilder().serializeNulls().create();
        String json = gson.toJson(test);
        System.out.println(json);
    }


    public static void main(String[] args) {
        ATest test = new ATest();
        test.run();
    }
}

What is the expected output? What do you see instead?
I have no idea. a string?
Fails due to Class something = null;

What version of the product are you using? On what operating system?
gson 2.2, linux ubuntu 12.04

Please provide any additional information below.
```

Original issue reported on code.google.com by `boggib...@gmail.com` on 31 Oct 2012 at 6:46""```

Forgot the stack trace:

Exception in thread ""main"" java.lang.NullPointerException
    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:64)
    at com.google.gson.internal.bind.TypeAdapters$1.write(TypeAdapters.java:61)
    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:89)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:195)
    at com.google.gson.Gson.toJson(Gson.java:586)
    at com.google.gson.Gson.toJson(Gson.java:565)
    at com.google.gson.Gson.toJson(Gson.java:520)
    at com.google.gson.Gson.toJson(Gson.java:500)
    at com.thundashop.app.banner.ATest.run(ATest.java:17)
    at com.thundashop.app.banner.ATest.main(ATest.java:24)
Java Result: 1


```

Original comment by `boggib...@gmail.com` on 31 Oct 2012 at 6:47
 =||= ```
Fixed with r1226.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:53
- Changed state: **Done**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
486Mistype in JavaDocGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:12 PM"```
JavaDoc for com.google.gson.stream.JsonReader#endObject reads:

/**
 * Consumes the next token from the JSON stream and asserts that it is  the
 * end of the current array.
 */

while I would expect something like

/**
 * Consumes the next token from the JSON stream and asserts that it is  the
 * end of the current object.
 */


version: 2.1
```

Original issue reported on code.google.com by `kirill.s...@gmail.com` on 10 Nov 2012 at 9:51""```
This was fixed. Thanks.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:16
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
487gson not working when converting list<Class> where class contains JsonObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:13 PM"```
What steps will reproduce the problem?

1. Create an Item class with getters and setters.
public class Item { private JsonObject param; }

2. Create a string representation of a json and call it itemList
String itemList = ""[{param:{color: 1,shape:1}, {param:{color: 2,shape:2}]"";

3. Use gson to convert the itemList into a List<Item>
List<Item> list = gson.fromJson(itemList, new 
TypeToken<List<Item>>(){}.getType());

What is the expected output? What do you see instead?

Loop through the list and print out param. It will show {}.
I'm expecting to see 
{ color: 1, shape: 1}
{ color: 2, shape: 2}

What version of the product are you using? On what operating system?
Im running gson 2.2.2 on windows 7.

Please provide any additional information below.

To get around this problem, I'm currently using a Map in place of a JsonObject.
```

Original issue reported on code.google.com by `ThaiTra...@gmail.com` on 12 Nov 2012 at 1:55""```
The current behavior is correct. Why should we treat JsonObject as a map?
```

Original comment by `inder123` on 12 Nov 2014 at 11:42
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
488Stack OverflowGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:13 PM"```
What steps will reproduce the problem?
1. Run the attached test

What is the expected output? What do you see instead?
A JSON document


What version of the product are you using? On what operating system?
gson-2.2.2 under Eclipse Indigo SR2 under Windows 7.


Please provide any additional information below.

```

Original issue reported on code.google.com by `thomh...@gmail.com` on 20 Nov 2012 at 4:51

Attachments:
- [GsonTest.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-488/comment-0/GsonTest.zip)""```
Please isolate bugs when reporting them.
```

Original comment by `limpbizkit` on 21 Nov 2012 at 12:31
- Changed state: **Invalid**
 =||= ```
It would be nice if GSON detected circular dependencies.
Or gave some way to limit depth to, say, 2 levels.
```

Original comment by `dynaw...@gmail.com` on 23 Jan 2013 at 4:03
 =||= ```
Or gave some means to limit which values are being serialized. such as to 
exclude something you know is a circular reference. Probably a piece of data 
that doesn't explain the data you are looking at anyway.
```

Original comment by `Boneless1213@gmail.com` on 26 Feb 2013 at 7:23
 =||= ```
Do you know what field(s) are causing the circular reference? If so, we can use 
an ExclusionStrategy and the .shouldSkipField() method to handle it.
The problem is, I can't figure out what part of the exception is causing the 
circular reference.
```

Original comment by `bradyvid...@gmail.com` on 4 Mar 2014 at 8:17
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
489Gson fails with Logger (log4j)Google Code ExporterGoogleCodeExporter03/19/15, 06:33:15 PM"```
What steps will reproduce the problem?
1. Create a POJO with a reference to Log4j Logger
2. Convert this POJO using Gson 
3.

What is the expected output? What do you see instead?
Since Logger is not serializable it should throw an exception with the name of 
the field saying that it is not serializable 

What version of the product are you using? On what operating system?
2.0

Please provide any additional information below.

Try to serialize below object:

public class TestBean {

    private Logger LOG = Logger.getLogger(TestBean.class); 
    private int i;
    public int getI() {
        return i;
    }
    public void setI(int i) {
        this.i = i;
    }


}

```

Original issue reported on code.google.com by `achatter...@gmail.com` on 26 Nov 2012 at 7:34""```
Register a type adapter for this.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:56
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
491Make source jar an OSGi source code bundleGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:16 PM"```
Please add the following lines to the source jar to make it an OSGi source code 
bundle.

Bundle-ManifestVersion: 2
Bundle-SymbolicName:com.google.gson.source
Bundle-Version: 2.2.2
Eclipse-SourceBundle: com.google.gson;version=""2.2.2""

This can be achieved easily by adding this snippet to the maven-source-plugin.

        <configuration>
          <archive>
            <manifestEntries>
              <Eclipse-SourceBundle>com.google.gson;version=""${project.version}""</Eclipse-SourceBundle>
              <Bundle-SymbolicName>com.google.gson.source</Bundle-SymbolicName>
              <Bundle-ManifestVersion>2</Bundle-ManifestVersion>
              <Bundle-Version>${project.version}</Bundle-Version>
            </manifestEntries>
          </archive>
        </configuration>
```

Original issue reported on code.google.com by `adriaan....@gmail.com` on 20 Dec 2012 at 10:10""```
Has this issue been resolved yet?  Thanks!
```

Original comment by `MBah2...@gmail.com` on 26 Sep 2013 at 6:09
 =||= ```
@MBah2... : yes :

If you download the last jar (ex. from 
http://mvnrepository.com/artifact/com.google.code.gson/gson/2.2.4 ) you should 
see bundle informations into jar://META-INF/MANIFEST.MF :


Manifest-Version: 1.0
Export-Package: com.google.gson;version=2.2.4, com.google.gson.annotat
 ions;version=2.2.4, com.google.gson.reflect;version=2.2.4, com.google
 .gson.stream;version=2.2.4, com.google.gson.internal;version=2.2.4, c
 om.google.gson.internal.bind;version=2.2.4
Bundle-ClassPath: .
Built-By: inder
Bundle-Name: Gson
Created-By: Apache Maven 3.0.4
Bundle-RequiredExecutionEnvironment: J2SE-1.5
Bundle-Vendor: Google Gson Project
Bundle-ContactAddress: http://code.google.com/p/google-gson/
Bundle-Version: 2.2.4
Build-Jdk: 1.7.0_21
Bundle-ManifestVersion: 2
Bundle-Description: Google Gson library
Bundle-SymbolicName: com.google.gson
Archiver-Version: Plexus Archiver

I also load it with success onto OSGi fwk.

Maybe this issue could be closed..
```

Original comment by `BVandepu...@gmail.com` on 16 Apr 2014 at 1:25
 =||= ```
Closed as suggested by BVandeputte.
Thanks for the verification.
```

Original comment by `inder123` on 17 Apr 2014 at 9:44
- Changed state: **Verified**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
492Security Exception Reflection Problem in an appletGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:17 PM"```
What steps will reproduce the problem?

Create a not signed applet with this code inside (for example init-method):
--------------
                String jsonString =""{""+
                        ""'date' : '1.1.1955',""+
                        ""'numbers' :  [1,2,3,4,5,6,7,8,9],""+
                        ""}"";

                GsonBuilder gb = new GsonBuilder();
                gb.setDateFormat(""dd.MM.yyyy"");
                Gson gson = gb.create();

                Data data = gson.fromJson(jsonString, Data.class);

--------------
                class Data {
                    public Date date;
                    public int [] numbers;
                    public Data() {}
                    ... getter and setter...
                }
--------------


What is the expected output? 
No security exceptions within an applet.

What do you see instead?
Security Exception, because reflection is used with ""setAccessible"".


What version of the product are you using? On what operating system?
Gson 2.2.2., Applet Java 1.7, Applet using JNLP.


Please provide any additional information below.
Code should work in an applet without any additional privilege.




```

Original issue reported on code.google.com by `uhenni...@googlemail.com` on 27 Dec 2012 at 1:11""```
Applets are intentionally unsupported.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:57
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
493minTemp is conveted in to mINTempGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:17 PM"```
What steps will reproduce the problem?
This is the test case of mine

 String definition = ""{"" +
                ""  'name':'org.wso2.esb.MediatorStatistics',"" +
                ""  'version':'2.3.0',"" +
                ""  'nickName': 'Stock Quote Information',"" +
                ""  'description': 'Some Desc',"" +
                ""  'tags':['foo', 'bar'],"" +
                ""  'metaData':["" +
                ""          {'name':'ipAdd','type':'STRING'}"" +
                ""  ],"" +
                ""  'payloadData':["" +
                ""          {'name':'symbol','type':'string'},"" +
                ""          {'name':'price','type':'double'},"" +
                ""          {'name':'volume','type':'int'},"" +
                ""          {'name':'maxTemp','type':'double'},"" +
                ""          {'name':'minTemp','type':'double'}"" +
                ""  ]"" +
                ""}"";


        StreamDefinition streamDefinition1 = EventDefinitionConverterUtils.convertFromJson(definition);
        Assert.assertTrue(null != streamDefinition1.getStreamId());
//        System.out.println(gson.toJson(streamDefinition1));

        StreamDefinition streamDefinition2 =
                new StreamDefinition(""org.wso2.esb.MediatorStatistics"", ""2.3.0"");
        List<Attribute> meta = new ArrayList<Attribute>(1);
        meta.add(new Attribute(""ipAdd"", AttributeType.STRING));
        streamDefinition2.setMetaData(meta);
        List<Attribute> payload = new ArrayList<Attribute>(5);
        payload.add(new Attribute(""symbol"", AttributeType.STRING));
        payload.add(new Attribute(""price"", AttributeType.DOUBLE));
        payload.add(new Attribute(""volume"", AttributeType.INT));
        payload.add(new Attribute(""maxTemp"", AttributeType.DOUBLE));
        payload.add(new Attribute(""minTemp"", AttributeType.DOUBLE));
        streamDefinition2.setPayloadData(payload);

        Assert.assertEquals(streamDefinition1, streamDefinition2);


What is the expected output? What do you see instead?

junit.framework.AssertionFailedError: 
Expected 
:StreamDefinition{streamId='org.wso2.esb.MediatorStatistics-2.3.0-a832ccaa-7379-
4e37-81c8-3c7046a54a58', name='org.wso2.esb.MediatorStatistics', 
version='2.3.0', nickName='Stock Quote Information', description='Some Desc', 
tags=[foo, bar], metaData=[Attribute{name='ipAdd', type=STRING}], 
correlationData=null, payloadData=[Attribute{name='symbol', type=STRING}, 
Attribute{name='price', type=DOUBLE}, Attribute{name='volume', type=INT}, 
Attribute{name='maxTemp', type=DOUBLE}, Attribute{name='mINTemp', type=DOUBLE}]}
Actual   
:StreamDefinition{streamId='org.wso2.esb.MediatorStatistics-2.3.0-7415cfec-7821-
4c8b-85dc-81ac40fdd1e8', name='org.wso2.esb.MediatorStatistics', 
version='2.3.0', nickName='null', description='null', tags=null, 
metaData=[Attribute{name='ipAdd', type=STRING}], correlationData=null, 
payloadData=[Attribute{name='symbol', type=STRING}, Attribute{name='price', 
type=DOUBLE}, Attribute{name='volume', type=INT}, Attribute{name='maxTemp', 
type=DOUBLE}, Attribute{name='minTemp', type=DOUBLE}]}


What version of the product are you using? On what operating system?
i tryed with 2.1 & 2.2.2
Using Ubuntu 12.04 java 1.6 



```

Original issue reported on code.google.com by `s...@wso2.com` on 5 Jan 2013 at 6:14""```
Sorry this is a user bug 
sorry for the inconvenience.

```

Original comment by `s...@wso2.com` on 5 Jan 2013 at 6:16
 =||= Original comment by `limpbizkit` on 4 Feb 2013 at 3:57
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
494Fix interpretation of trailing comma when setLenient() is true.Google Code ExporterGoogleCodeExporter10/10/18, 08:26:16 PM"```
The following code exhibits the issue:

    StringReader reader = new StringReader(""{foo: ['bar', 'baz',]}"");
    JsonReader jsonReader = new JsonReader(reader);
    jsonReader.setLenient(true);
    JsonParser parser = new JsonParser();
    JsonElement root = parser.parse(jsonReader);
    assertEquals(
        ""Trailing comma should be ignored like in ECMAScript 5."",
        2,
        root.getAsJsonObject().get(""foo"").getAsJsonArray().size());

Currently, GSON returns an array that corresponds to:

    [""bar"", ""baz"", null]

Instead of:

    [""bar"", ""baz""]

This is atrocious. The current behavior is consistent with bad browser behavior 
from the last decade. The expected behavior is consistent with ECMAScript 5, as 
well as any programmer who has ever wanted trailing commas to be ignored so 
that it is easier to write lists of things. Here is more information on the 
badness of the current JSON spec:

    http://bolinfest.com/essays/json.html

Please, please fix this. Anyone who uses JSON for a config language wants to be 
able to write data like this:

   [
     ""foo"",
     ""bar"",
   ]

such that it is possible to add something to the list without having to clean 
up the comma from the previous line. The current behavior is incredibly 
counterintuitive.

Also, while we're on the subject, the trailing comma should also be supported 
for map entries:

  {
    ""foo"": 42,
    ""bar"": 24,
  }

Again, this makes it considerably easier to maintain JSON data files.

```

Original issue reported on code.google.com by `bolinf...@gmail.com` on 6 Jan 2013 at 11:58""```
I'm worried about breaking others by making such a change. Our current behavior 
was initially implemented to be consistent with the json.org reference 
implementation.

That said, it would a good idea for a 3.0 release, where we can document that 
we're breaking things in the name of forward progress.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 3:59
- Added labels: **Type-Enhancement**, **Milestone-Release3.0**
- Removed labels: **Type-Defect**
 =||= ```
Yes please. I just got burned by this. No parse error, but runtime error by the 
thing that consumed my JSON array because there was an unexpected null at the 
end.
```

Original comment by `bolinf...@gmail.com` on 21 Mar 2013 at 11:31
 =||= ```
This is the only issue that is tagged 3.0. Is 3.0 actually on the horizon?
```

Original comment by `bolinf...@gmail.com` on 19 Aug 2014 at 5:23
 =||= ```
IMHO allowing the trailing comma should be separated from the lenient mode. I'd 
never come to the idea of using lenient mode with features like ""Array elements 
separated by ; instead of ,"" - that's plain awful. But trailing commas is 
something what happens all the time when editing, especially with maps.
```

Original comment by `Maaarti...@gmail.com` on 27 Aug 2014 at 3:48
 =||= I've just been bitten by this.
Just to clarify: I am not using `jsonReader.setLenient(true);` but don't get an exception while parsing files with trailing commas - is it expected behavior? =||= Wow I've just seen bug #401 and from what I understand, `jsonReader.setLenient` is simply ignored, and therefore (please correct me if I'm wrong),
1/ trailing commas are always valid
2/ they are interpreted as null items
3/ there's no way to change this

🙀   =||= 🙀 =||= Just accidentally stumbled across this while writing tests for our Hadoop REST bindings. It was incredibly surprising and we were lucky to accidentally trigger the bug.

Please do correct this, it's not what anybody expects. =||= We will not support this behavior change by default. Write better JSON.
We could consider a GsonBuilder property ignoreTrailingCommas() but that looks hidious. =||= You mean more hideous than the current ""happily parse invalid JSON without a warning and result in a very surprising results that nobody should reasonably expect"" behavior?  =||= You can use `getAdapter().fromJson()` to work around our bad default of using lenient parsing. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
495Why Gson doesn't throw a JsonSyntaxException on wrong typesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:19 PM"```
What steps will reproduce the problem?
1.have a JsonString like 
String json = ""{""error"":""something bad happened""}"";

2. have a Java class like
class Dummy{
    private String foo;
}

3. calling Gson.fromJson(json, Dummy.class);

What is the expected output? What do you see instead?
I expect to get a JsonSyntaxException like stated in the docs:
""Throws:
    JsonSyntaxException - if json is not a valid representation for an object of type classOfT
""
but recieve a Dummy where foo==null



What version of the product are you using? On what operating system?
gson 1.7.1, Android/Linux

for further information, see stackoverflow question:
http://stackoverflow.com/questions/14242236/let-gson-throw-exceptions-on-wrong-t
ypes


```

Original issue reported on code.google.com by `Raf...@gmail.com` on 9 Jan 2013 at 5:11
- Merged into: #188""```
Duplicate of 188, which I've bumped to ""Critical"" priority.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:01
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
496Android API 17 (4.2) Gson.fromJson throws java.lang.StackOverflowErrorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:20 PM"```
What steps will reproduce the problem?
1. Setup an AVD with the 4.2 Android OS (API 17).  I used a Nexus 7, as the 
user crash reports for our app all came from Nexus 7 devices.
2.  Attempt to parse our login json package using Gson 2.2.
3.  StackOverflowError is thrown.

What is the expected output? What do you see instead?
The expected output is the parsed representation of the login package json.

What version of the product are you using? On what operating system?
Android 4.2 (API 17), Gson 2.2.2 lib

Please provide any additional information below.
Our json doesn't contain any complex types, just Boolean, String, BigDecimal, 
Date, and ArrayList<T> that hold collections of nested types. I have verified 
that there are no circular references in the result class.  The gson parser 
works perfectly fine in all Android OS versions from 2.2 (our minimum supported 
version) through 4.1, but in 4.2 we are experiencing this errro.
```

Original issue reported on code.google.com by `androidd...@gmail.com` on 18 Jan 2013 at 8:13
- Merged into: #440

Attachments:
- [StatckOverflowLogCat_out.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-496/comment-0/StatckOverflowLogCat_out.txt)""```
""stack overflow on call to Lcom/google/gson/internal/$Gson$Types;.resolve:LLLL"" 
on Nexus 4 running 4.2.1.

Exactly as reported, above. Shipping code runs fine on 2.2 through 4.1.2. Stack 
overflows on 4.2.x.
```

Original comment by `d...@aylanetworks.com` on 19 Jan 2013 at 11:22
 =||= ```
Same defect here with Nexus 7 running android 4.2.1
Can someone please provide a solution to that? Of course if i'll find a 
solution i'll post it here suddenly :)

Luca
```

Original comment by `luca.dim...@gmail.com` on 21 Jan 2013 at 9:09
 =||= ```
I have the exact same issue. I solved it (for now) by using GSON 1.7.1 but it 
is a lot slower...
```

Original comment by `ferry.sp...@gmail.com` on 21 Jan 2013 at 9:13
 =||= ```
I have confirmed that rolling back to the 1.7.1 gson release resolves the 
issue.  Here's hoping that someone on the gson team can provide a better 
resolution.  Hopefully this isn't the only course of action for us.  1.7.1 is 
quite a bit slower.
```

Original comment by `androidd...@gmail.com` on 21 Jan 2013 at 7:24
 =||= ```
I have the same issue. Occurs when a class extends another.
```

Original comment by `juli...@gmail.com` on 22 Jan 2013 at 1:42
 =||= ```
I get same error :(. Can anyone help?
```

Original comment by `gawronsk...@gmail.com` on 22 Jan 2013 at 5:11
 =||= ```
Same issue here, app works fine with Android API 16 (4.1.2), on on nexus 
devices gives FC.

For now I also went back to Gson v1.7.1 to make it works again..
```

Original comment by `rkat...@gmail.com` on 28 Jan 2013 at 9:17
 =||= ```
Are you serializing a WeakReference or SoftReference?
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:03
- Changed state: **Duplicate**
 =||= ```
No, my class structure doesn't contain any SoftReference or WeakReference 
declarations, just a basic map of String, BigDecimal, int, and ArrayList<T>.
```

Original comment by `peytonmc...@gmail.com` on 4 Feb 2013 at 5:27
 =||= ```
me too getting same error...plz help anyone
```

Original comment by `jadhav.s...@gmail.com` on 31 Jul 2013 at 10:56
 =||= ```
Same issue here. App works fine in normal debug mode(when you run your app from 
Android SDK to your emulator or phone). But when it's exported and built for 
release. It doesn't work.
```

Original comment by `nehalniy...@gmail.com` on 27 Jan 2015 at 9:50
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
497Object with a byte[] attribute for storing images cannot be converted to Object from JSONGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:22 PM"```
What steps will reproduce the problem?
1. Create this POJO (this is generated by Hibernate reverse engineering tool)

package com.alinean.network.orm.entities;
// Generated Nov 29, 2012 4:41:16 PM by Hibernate Tools 3.2.1.GA


import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

/**
 * Community generated by hbm2java
 */
@Entity
@Table(name=""community""
    ,catalog=""network""
)
public class Community  implements java.io.Serializable {


     private String communityId;
     private String name;
     private byte status;
     private boolean privateCommunity;
     private String blacklist;
     private String manager;
     private String networkContact;
     private boolean allowDisclosureLevel;
     private String disclosureText;
     private long createdTimestamp;
     private Long modifiedTimestamp;
     private Long expirationTimestamp;
     private byte[] brandingLogo;
     private Set<UserCommunityDisclosure> userCommunityDisclosures = new HashSet<UserCommunityDisclosure>(0);
     private Set<CommunityRegistration> communityRegistrations = new HashSet<CommunityRegistration>(0);
     private Set<CommunityActionResponse> communityActionResponses = new HashSet<CommunityActionResponse>(0);
     private Set<UserCommunitySubscription> userCommunitySubscriptions = new HashSet<UserCommunitySubscription>(0);
     private Set<CommunitySubscription> communitySubscriptions = new HashSet<CommunitySubscription>(0);
     private Set<CommunityRole> communityRoles = new HashSet<CommunityRole>(0);
     private Set<VignetteLibrary> vignetteLibraries = new HashSet<VignetteLibrary>(0);
     private Set<Group> groups = new HashSet<Group>(0);

    public Community() {
    }


    public Community(String communityId, String name, byte status, boolean privateCommunity, String manager, String networkContact, boolean allowDisclosureLevel, long createdTimestamp) {
        this.communityId = communityId;
        this.name = name;
        this.status = status;
        this.privateCommunity = privateCommunity;
        this.manager = manager;
        this.networkContact = networkContact;
        this.allowDisclosureLevel = allowDisclosureLevel;
        this.createdTimestamp = createdTimestamp;
    }
    public Community(String communityId, String name, byte status, boolean privateCommunity, String blacklist, String manager, String networkContact, boolean allowDisclosureLevel, String disclosureText, long createdTimestamp, Long modifiedTimestamp, Long expirationTimestamp, byte[] brandingLogo, Set<UserCommunityDisclosure> userCommunityDisclosures, Set<CommunityRegistration> communityRegistrations, Set<CommunityActionResponse> communityActionResponses, Set<UserCommunitySubscription> userCommunitySubscriptions, Set<CommunitySubscription> communitySubscriptions, Set<CommunityRole> communityRoles, Set<VignetteLibrary> vignetteLibraries, Set<Group> groups) {
       this.communityId = communityId;
       this.name = name;
       this.status = status;
       this.privateCommunity = privateCommunity;
       this.blacklist = blacklist;
       this.manager = manager;
       this.networkContact = networkContact;
       this.allowDisclosureLevel = allowDisclosureLevel;
       this.disclosureText = disclosureText;
       this.createdTimestamp = createdTimestamp;
       this.modifiedTimestamp = modifiedTimestamp;
       this.expirationTimestamp = expirationTimestamp;
       this.brandingLogo = brandingLogo;
       this.userCommunityDisclosures = userCommunityDisclosures;
       this.communityRegistrations = communityRegistrations;
       this.communityActionResponses = communityActionResponses;
       this.userCommunitySubscriptions = userCommunitySubscriptions;
       this.communitySubscriptions = communitySubscriptions;
       this.communityRoles = communityRoles;
       this.vignetteLibraries = vignetteLibraries;
       this.groups = groups;
    }

    @Id 
    @GenericGenerator(name=""id"", strategy=""com.alinean.network.orm.generators.RandomUUIDGenerator"")
    @GeneratedValue(generator=""id"")
    @Column(name=""community_id"", unique=true, nullable=false, length=36)
    public String getCommunityId() {
        return this.communityId;
    }

    public void setCommunityId(String communityId) {
        this.communityId = communityId;
    }

    @Column(name=""name"", nullable=false, length=128)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name=""status"", nullable=false)
    public byte getStatus() {
        return this.status;
    }

    public void setStatus(byte status) {
        this.status = status;
    }

    @Column(name=""private_community"", nullable=false)
    public boolean isPrivateCommunity() {
        return this.privateCommunity;
    }

    public void setPrivateCommunity(boolean privateCommunity) {
        this.privateCommunity = privateCommunity;
    }

    @Column(name=""blacklist"")
    public String getBlacklist() {
        return this.blacklist;
    }

    public void setBlacklist(String blacklist) {
        this.blacklist = blacklist;
    }

    @Column(name=""manager"", nullable=false, length=65535)
    public String getManager() {
        return this.manager;
    }

    public void setManager(String manager) {
        this.manager = manager;
    }

    @Column(name=""network_contact"", nullable=false, length=65535)
    public String getNetworkContact() {
        return this.networkContact;
    }

    public void setNetworkContact(String networkContact) {
        this.networkContact = networkContact;
    }

    @Column(name=""allow_disclosure_level"", nullable=false)
    public boolean isAllowDisclosureLevel() {
        return this.allowDisclosureLevel;
    }

    public void setAllowDisclosureLevel(boolean allowDisclosureLevel) {
        this.allowDisclosureLevel = allowDisclosureLevel;
    }

    @Column(name=""disclosure_text"")
    public String getDisclosureText() {
        return this.disclosureText;
    }

    public void setDisclosureText(String disclosureText) {
        this.disclosureText = disclosureText;
    }

    @Column(name=""created_timestamp"", nullable=false)
    public long getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    public void setCreatedTimestamp(long createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
    }

    @Column(name=""modified_timestamp"")
    public Long getModifiedTimestamp() {
        return this.modifiedTimestamp;
    }

    public void setModifiedTimestamp(Long modifiedTimestamp) {
        this.modifiedTimestamp = modifiedTimestamp;
    }

    @Column(name=""expiration_timestamp"")
    public Long getExpirationTimestamp() {
        return this.expirationTimestamp;
    }

    public void setExpirationTimestamp(Long expirationTimestamp) {
        this.expirationTimestamp = expirationTimestamp;
    }

    @Column(name=""branding_logo"")
    public byte[] getBrandingLogo() {
        return this.brandingLogo;
    }

    public void setBrandingLogo(byte[] brandingLogo) {
        this.brandingLogo = brandingLogo;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<UserCommunityDisclosure> getUserCommunityDisclosures() {
        return this.userCommunityDisclosures;
    }

    public void setUserCommunityDisclosures(Set<UserCommunityDisclosure> userCommunityDisclosures) {
        this.userCommunityDisclosures = userCommunityDisclosures;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<CommunityRegistration> getCommunityRegistrations() {
        return this.communityRegistrations;
    }

    public void setCommunityRegistrations(Set<CommunityRegistration> communityRegistrations) {
        this.communityRegistrations = communityRegistrations;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<CommunityActionResponse> getCommunityActionResponses() {
        return this.communityActionResponses;
    }

    public void setCommunityActionResponses(Set<CommunityActionResponse> communityActionResponses) {
        this.communityActionResponses = communityActionResponses;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<UserCommunitySubscription> getUserCommunitySubscriptions() {
        return this.userCommunitySubscriptions;
    }

    public void setUserCommunitySubscriptions(Set<UserCommunitySubscription> userCommunitySubscriptions) {
        this.userCommunitySubscriptions = userCommunitySubscriptions;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<CommunitySubscription> getCommunitySubscriptions() {
        return this.communitySubscriptions;
    }

    public void setCommunitySubscriptions(Set<CommunitySubscription> communitySubscriptions) {
        this.communitySubscriptions = communitySubscriptions;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<CommunityRole> getCommunityRoles() {
        return this.communityRoles;
    }

    public void setCommunityRoles(Set<CommunityRole> communityRoles) {
        this.communityRoles = communityRoles;
    }
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name=""community_vignette_library"", catalog=""network"", uniqueConstraints=@UniqueConstraint(columnNames=""vignette_library_id""), joinColumns = { 
        @JoinColumn(name=""community_id"", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name=""vignette_library_id"", unique=true, nullable=false, updatable=false) })
    public Set<VignetteLibrary> getVignetteLibraries() {
        return this.vignetteLibraries;
    }

    public void setVignetteLibraries(Set<VignetteLibrary> vignetteLibraries) {
        this.vignetteLibraries = vignetteLibraries;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=""community"")
    public Set<Group> getGroups() {
        return this.groups;
    }

    public void setGroups(Set<Group> groups) {
        this.groups = groups;
    }

    @Override
    public String toString() {
        return ""Community{"" + 
                ""communityId="" + communityId + 
                "", name="" + name + 
                "", status="" + status + 
                "", privateCommunity="" + privateCommunity + 
                "", manager="" + manager + 
                "", networkContact="" + networkContact + 
                "", allowDisclosureLevel="" + allowDisclosureLevel + 
                "", createdTimestamp="" + createdTimestamp + 
                "", modifiedTimestamp="" + modifiedTimestamp + 
                "", expirationTimestamp="" + expirationTimestamp + 
                '}';
    }


}


2. Try to convert a Community object from a JSON text using:
//Convert the JSON string to community
Gson gson = new Gson();
community = gson.fromJson(communityJSON, Community.class);

3. This is the JSON:
""{""communityId"":null,""name"":""Image6"",""status"":1,""privateCommunity"":false,""blackl
ist"":null,""manager"":""avillalobos@alinean.com"",""networkContact"":""avillalobos@alin
ean.com"",""allowDisclosureLevel"":false,""disclosureText"":null,""createdTimestamp"":0
,""modifiedTimestamp"":null,""expirationTimestamp"":null,""brandingLogo"":""/9j/4AAQSkZ
JRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAc
HCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAC2AcEDASIAAhEBAxEB/8QAHwAAAQUBAQE
BAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJ
xFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZ
naGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NX
W19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8Q
AtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOE
l8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpO
UlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn
6/9oADAMBAAIRAxEAPwD9DKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAq1odsl5rdnDIu6OWdEYZxkFgCKq1e8M
/8jHp/wD18x/+hCrpq80n3Jn8LPqb/hmXwR/0BP8AycuP/i6+XPF1jFpfivU7aBNkFvdyxRrknaquQBk
89B3r7fr4l8e/8j1rX/X/AD/+jGrFv30vJ/oaL4X/AF3PYf2cvg14a8efD577VtN+13Qu5Ig/2iWP5QF
IGFYDue1d7/wzL4I/6An/AJOXH/xdZP7If/JKJP8Ar/l/9BSof2oviZrfw6j0U6Ne/Yzdmbzf3Mcm/bs
x99TjqenrWtVpNfL8jOmm195uf8My+CP+gJ/5OXH/AMXWZ4l/ZL8Kaxb4sUvNJmVWCtDM0qsx6FhJuJA
PZSueefTxr/hprxv/ANBv/wAk7f8A+Ir2/wDZ/wDjdJ8WLC6gvoYYNTscM/lAiOVDwGAJOCDwRn0PfAX
LcblY+d/ib8MtR+FviE2N8A8bgvb3CD5LhPUehHcdvcYJ0PgF4T0/xr8TbPT9Tt/tNnLHKzR72TJCEjl
SD1HrXuf7VfhyLWfhPcXTKPO0uVJ42xk4LBGH0w2fwFeO/ss/8lm0/wD65Tf+i2pUXdtPpf8AIdVWSa8
vzPcP+GZfBH/QE/8AJy4/+Lo/4Zl8Ef8AQE/8nLj/AOLrp/HWpTaN4J1i8tn8u4tbKaaJ8A7WVCQcHg8
jvXzB/wANNeN/+g3/AOSdv/8AEUr62HbS57x/wzL4I/6An/k5cf8AxdI37M3ggKf+JJ2/5/Lj/wCLrwj
/AIaa8b/9Bv8A8k7f/wCIoP7TPjcj/kN/+Sdv/wDEUSTaaQjhZlCTOB0DECm0rMXYk9ScmkoQ5NNtoKK
KKYgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACr3hn/kY9P/AOvmP/0IVRq94Z/5GPT/APr5j/8AQhWlL416kVP
hZ9xV8S+Pf+R61r/r/n/9GNX21XxL49/5HrWv+v8An/8ARjVzv416P9DZfC/l+p9Efsh/8kok/wCv+X/
0FKyv2vPC2p+JYtA/s3Tr/UPJM/mfZrd5dmfLxnaDjOD+Vav7If8AySiT/r/l/wDQUr0PW/FOmeGhH/a
Wo2Gn+dny/tNwkW/GM43EZxkfnW1ZXkvl+RlSdk/mfHq/CrxQzAf8I5rvPHNhKP8A2WvfP2aPgzqHw3t
72/1YLBe3yiJbdXD+UgJOWIyMk46E4HucDt/+Fp+GP+hj0H/wYRf/ABVY3ij9orwj4WRw2rRX0yoHWKy
Hnl+cYDD5AfYsP5UlKw3G5Q/am16PR/hFdwsQJNRljt4x6/MHP6Ka8Z/ZZ/5LNp//AFym/wDRbVj/ABd
+LV78WdfW5nT7PaWwKW1sG3CIHqSe7HAyfYelbH7LP/JZtP8A+uU3/otqKC95t9b/AJBVfupLy/M+nvE
+jf8ACR+G9Q0/zPJ+3W0lv5m3ds3qVzjIzjPTNeK/8MS/9TN/5Tv/ALbXtXifWf8AhHPDeoah5fnfYba
S48vdt37FLYzg4zjrivFf+G2v+pZ/8qP/ANqqNL+ZetvIP+GJf+pm/wDKd/8AbaxfiL+yr/wgPgy+1f8
At77X9iVW8r7F5e/LBfveYcdfStr/AIba/wCpZ/8AKj/9qrF+Iv7VX/CfeDL7SP7B+yfbVVfN+2+Zsww
b7vljPT1ole2go2urnkNFFFUIKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAr2b9mD4Z+HPiFoupPq2ni8u7K4Ta
xmkQBGXgYVgDyp614zXcfAT4qL8LfGPnXIdtNvlENyFGSgzkOB3288ehPerh2Jnfc9G/au+GllpXhKw1
DSNIsrNLWcrctaWyRfKwAUttA4yMc92968b+HGjS+IPH2j2kMbSPNdx5AGcKGBY/QAEn2FfZOl6tYeLN
HW4tJ7a/sblSNyEOjjoQf5EH6GotF8HaR4bneXTtK02wlkXYz21skTMM5wSoGRUwvCV2OdpRsjRZgqkk
gAck+lfD/AIqvV1PxRqVyhBS4upZFI7hnJ/rX0Z+0H8ebHwpod3o+m3EdzrF0jQyeW25bNTkMWI/j6gL
1HU9s/MlZLWVzR6RsfT37If8AySiT/r/l/wDQUrm/21/9V4c+tx/7SrpP2Q/+SUSf9f8AL/6Clc3+2v8
A6rw59bj/ANpVpX+KPy/Iih1+f6ngtFFFABXon7LP/JZtP/65Tf8Aotq87r0T9ln/AJLNp/8A1ym/9Ft
WlPf5P8iKm3zX5n0h8Tf+Sb+IP+wdcf8Aotq+K6+8KKxtrc1vpY+D6K+8KKok+D6K2/iV/wAlE17/ALC
E/wD6MasSpjK8UypKzaCiiiqJCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAt6Nr994dujPp97d2MzLsMlvM0TFc
g4ypBxwOParmo/EHX9YspLa71zV7q3lGHimvJHR+c8gnB5rIooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//2Q=="",""userCommunityDisclos
ures"":[],""communityRegistrations"":[],""communityActionResponses"":[],""userCommunit
ySubscriptions"":[],""communitySubscriptions"":[],""communityRoles"":[],""vignetteLibr
aries"":[],""groups"":[]}""

What is the expected output? What do you see instead?
The expected output is the Community Object converted from that JSON, the JSON 
is generated by Spring Web Services like this:

HttpEntity<Community> entity = new HttpEntity<>(community);
ResponseEntity<Community> response = 
restTemplate.postForEntity(getSyncServiceURL(""url.sync.community.create""), 
entity, Community.class, userID);

The problem seems to be with the brandingLogo property, which is a byte[] type.

The output is:
com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected 
BEGIN_ARRAY but was STRING at line 1 column 5178
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:180)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:721)
    at com.google.gson.Gson.fromJson(Gson.java:670)
    at com.google.gson.Gson.fromJson(Gson.java:642)
    at com.alinean.network.remote.CommunityNetworkWebService.createCommunity(CommunityNetworkWebService.java:120)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)
    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)
    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483)
    at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363)
    at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353)
Caused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING 
at line 1 column 5178
    at com.google.gson.stream.JsonReader.expect(JsonReader.java:339)
    at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:306)
    at com.google.gson.internal.bind.ArrayTypeAdapter.read(ArrayTypeAdapter.java:70)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:721)
    at com.google.gson.Gson.fromJson(Gson.java:670)
    at com.google.gson.Gson.fromJson(Gson.java:642)
    at com.alinean.network.remote.CommunityNetworkWebService.createCommunity(CommunityNetworkWebService.java:120)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
    at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205)
    at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
    at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288)
    at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
    at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
    at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)

What version of the product are you using? On what operating system?
Gson 2.1
Operating System: OS X
Processor:2.2 Ghz Intel Core i7
RAM: 8GB 1333 MHz DDR3


Please provide any additional information below.
The issue only happens when an image is sent in a byte[]
```

Original issue reported on code.google.com by `alevill...@gmail.com` on 22 Jan 2013 at 12:03""```
Please be more concise and direct in bug reports! I'm not sure what the bug is 
here.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:07
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
498Wrong Exception message in case of Double.NaN serializationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:23 PM"```
Try to serialize any of special double values {NaN, +Inf, -Inf} using only 
default Gson constructor.


Exception is thrown but it specifies that method serializeSpecialDoubleValues 
sholud be used. This method (no longer?) exist inside GsonBuilder, exception 
should inform user about serializeSpecialFloatingPointValues() method

gson 2.2.2
Ubuntu 10.4


```

Original issue reported on code.google.com by `Erwi...@gmail.com` on 26 Jan 2013 at 1:08""```
This issue was closed by revision r1227.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:05
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
499Strict parsing not as strict as it should beGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:23 PM"```
According to the docs, in strict parsing ""Names that are unquoted"" should throw 
an error, however the following code parses the json perfectly fine, although 
lenient is false:
new JsonParser().parse(""{invalid: 1}"");

I am using gson-2.1.
```

Original issue reported on code.google.com by `rum...@google.com` on 29 Jan 2013 at 10:45""```
For backwards compatibility, JsonParser is always lenient. Use JsonReader for 
strict parsing.
```

Original comment by `limpbizkit` on 4 Feb 2013 at 4:06
- Changed state: **WontFix**
 =||= ```
With JsonReader, it still works:
JsonReader reader = new JsonReader(new StringReader(""{invalid: 1}""));
reader.setLenient(false);
new JsonParser().parse(reader).getAsJsonObject().get(""invalid"").getAsInt();

Or did you mean something different?
```

Original comment by `rum...@google.com` on 5 Feb 2013 at 3:45
 =||= ```
I agree, this issue should be re-opened as the JsonReader isLenient() is 
ignored.

The fromJson(JsonReader reader, Type typeOfT) method has this code:

    boolean oldLenient = reader.isLenient();
    reader.setLenient(true);

Gson is overriding the reader's leniency.
```

Original comment by `craig.es...@gmail.com` on 18 Mar 2014 at 9:28
 =||= Here is a workaround from #1208 for Gson strict parsing with many details and extensive test case: https://stackoverflow.com/questions/43233898/how-to-check-if-json-is-valid-in-java-using-gson/47890960#47890960 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
509Handle EnumSet properlyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:29 PM"```
https://groups.google.com/d/msg/google-gson/1d7EtAcSly0/Lk9WW1LLcSsJ

     EnumSet<Color> foo = EnumSet.of(Color.blue, Color.red);
        String json = gson.toJson(foo);
        EnumSet<Color> bar = (EnumSet<Color>)gson.fromJson(json, new TypeToken<EnumSet<Color>>() {}.getType());
        System.out.printf(""foo: "" + foo + ""\nbar: "" + bar + '\n');

Gson returns a LinkedHashSet that causes ClassCastException.
```

Original issue reported on code.google.com by `inder123` on 27 Mar 2013 at 2:22""```
Fixed in r1228
```

Original comment by `inder123` on 4 Apr 2013 at 9:16
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
511LazilyParsedNumber longValue not parsing consistently with Number documentationGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:29 PM"```
https://groups.google.com/d/msg/google-gson/5PVS0BIIWWs/1q2wwBK90QcJ
```

Original issue reported on code.google.com by `inder123` on 30 Apr 2013 at 9:16""```
Fixed r1248.
```

Original comment by `joel.leitch@gmail.com` on 13 May 2013 at 8:44
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
515serialize and deserialize simple enumGoogle Code ExporterGoogleCodeExporter09/06/15, 05:46:08 PM"```
How can i serialize and deserialize a simple enum like this ?


public enum Color {

    RED, BLUE, YELLOW;
}

Thanks !
```

Original issue reported on code.google.com by `trabajoe...@gmail.com` on 24 May 2013 at 4:51""```
Duplicate of 
http://stackoverflow.com/questions/16740078/serialize-and-deserialize-enum-with-
gson
```

Original comment by `Maaarti...@gmail.com` on 12 Aug 2014 at 5:05
 =||= This should be closed because it is not an issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
516serialize and deserialize simple enumGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:32 PM"```
How can i serialize and deserialize a simple enum like this ?


public enum Color {

    RED, BLUE, YELLOW;
}

Thanks !
```

Original issue reported on code.google.com by `trabajoe...@gmail.com` on 24 May 2013 at 4:51""```
Dupe of issue 515.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:48
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
526Support new Guava collections by defaultGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:36 PM"```
What steps will reproduce the problem?
1. Create Guava collection as a member element of a class. Example:

import java.util.Collection;
import java.util.Map;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class GsonExample {
    private final Multimap<String, String> map = HashMultimap.create();
    private final Map<String, Collection<String>> asMap;
    public GsonExample() {
        map.put(""a"", ""a"");
        map.put(""a"", ""b"");
        map.put(""b"", ""b"");
        asMap = map.asMap();
    }
    public static void main(String[] args) {
        GsonExample ex = new GsonExample();
        Gson g = new GsonBuilder().setPrettyPrinting().create();
        System.out.println(g.toJson(ex));
    }
}

What is the expected output? What do you see instead?
Expected:
{
  ""map"": {
    ""b"": [
      ""b""
    ],
    ""a"": [
      ""b"",
      ""a""
    ]
  },
  ""asMap"": {
    ""b"": [
      ""b""
    ],
    ""a"": [
      ""b"",
      ""a""
    ]
  }
}

Actual:
{
  ""map"": {},
  ""asMap"": {
    ""b"": [
      ""b""
    ],
    ""a"": [
      ""b"",
      ""a""
    ]
  }
}

What version of the product are you using? On what operating system?
I am using Gson 2.2.4 and Guava 14.0.1 on Windows 7 x64, Java 7u25.

Please provide any additional information below.
This is a feature enhancement, not a bug. Thanks!
```

Original issue reported on code.google.com by `martin.j...@gmail.com` on 24 Jun 2013 at 3:33""```
Gson will not add a dependency to Guava. 
Feel free to provide Guava type adapters in 
https://github.com/google-gson/typeadapters or any other locations.
```

Original comment by `inder123` on 12 Nov 2014 at 11:40
- Changed state: **WontFix**
 =||= @inder123 I appreciate why Gson doesn't want to depend on Guava, but it's very surprising and error-prone that these objects serialize to an empty collection. Are there any options that could make the status quo better without directly adding that dependency?

For instance, could the collection types be special-cased in Gson and detected by reflection? Or could any better hints be included in Guava (without it in turn depending on Gson)?

There doesn't appear to be any such type adapters added to https://github.com/google-gson/typeadapters yet either. Does it make sense to leave this issue open until that's addressed, at least? =||= @dimo414 Not sure if Guava is used widely enough (for example on Android) to warrant special casing. It has gotten too bloated, and JDK 8 and 9 are providing good alternates.

But it does make sense to provide type adapters for Guava. Consider starting the effort by contributing partial support. Thanks. =||= To my knowledge JDK 8 and 9 don't introduce anything like Guava's collection types (`Multiset`, `Multimap`, `Table`, `BiMap`), and these types are fairly widely used (at least outside Android). A reflection-based solution would avoid any sort of bloat issues, as well.

Nevertheless, If you don't want to support them natively that's understandable. Is there any way to improve Guava to be more Gson-friendly? I can try to make that happen if it's possible.

If the only viable solution is to create a separate type adapter, could it at least be included in this project, rather than relegated to the google-gson/typeadapters project? That seems very hard to discover (e.g. not mentioned anywhere in the User Guide), and there appear to be other special type adapters in this project (e.g. [`proto`](https://github.com/google/gson/blob/master/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java)). [Guava](https://mvnrepository.com/artifact/com.google.guava) has much more usages than [protobuf](https://mvnrepository.com/artifact/com.google.protobuf) in Maven. =||= Do these classes extends List, Map? I think we support all subclasses of those natively. =||= No, that's the issue, these are [""new"" collection types](https://github.com/google/guava/wiki/NewCollectionTypesExplained). They've been around since Guava was first released. =||= I see. If Guava was willing to have a dependency on Gson, then it can use a JsonAdapter annotation on each of these collections and customize the behavior.

Until then, it is best to just create sample type adapters.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
531Extend to Include Other Formats Like XML, CSVGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:41 PM"```
Provide ability to serialise and de-serialise to other formats than just JSON.
```

Original issue reported on code.google.com by `sirinath...@gmail.com` on 24 Aug 2013 at 4:38""```
This is a JSON Java library, not something else. I found this issue quite 
useless.
```

Original comment by `alessand...@gmail.com` on 4 Oct 2013 at 6:59
 =||= ```
This is beyond the scope of this library. Additionally, different formats have 
different semantics (e.g., how would you serialize a nested object into CSV?).
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:50
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
533How to access multiple dimenation json array string valueGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:42 PM"```
Hi

Can any one help me to parse the multiple dimenational json array string.
My json string as below

{'result':{'jan8ignite':{'_id':'4e4b63e11d330000000051c8','website':{'websiteId'
:'40','websiteName':'stagingwb.opencloudapi.com','website_style':'1_Column'},'co
mpanyLogo':'','companyLogoWebsite':'','formEmailAddress':'ajay.vskm@gmail.com'}}
}

I want to get the websiteName from the above string, so i can achive this.

Please reply me ASAP.

Thanks

```

Original issue reported on code.google.com by `rajubish...@gmail.com` on 29 Aug 2013 at 12:38""```
class Response {
  Map<String, User> result;
}
class User {
  String _id;
  Website website;
  String companyLogo;
  String companyLogoWebsite;
  String formEmailAddress;
}
class Website {
  String websiteId;
  String websiteName;
  String website_style;
}

Deserialize the JSON as a Response.class. Then you can get the user from the 
result Map and call user.website.websiteName to get the value.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:09
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
536JsonReader: Support JSON intermixed with other contentGoogle Code ExporterGoogleCodeExporter12/09/15, 03:35:49 AM"```
I have a fairly large HTML page that has several JSON objects & arrays in it. I 
use a PushbackReader to read the file and handle any text I'm interested in 
(and determine when to start a JsonReader read). If I pass my Reader (or any 
reader) to JsonReader, it will read 1024 characters regardless of content. This 
means I may miss some JSON.
i.e. I may miss myObject2 in the following example because it might remain 
unprocessed in the JsonReader buffer.

<h1>some html</h1>
<script language=javascript>
var myObject1={""a"":1};
alert(""some non-JSON that may or may not exceed the JsonReader buffer size"");
var myObject2={""b"":2};

NOTE: This is a much simplified version of my problem. The JSON data is 
actually quiet large as is the HTML content.

As a temporary workaround, I've added the following method to JsonReader that 
allows me to push the unprocessed characters in the JsonReader buffer back into 
my PushbackReader (so I can start searching for ""var myObject2="").

  public char[] getUnreadCharacters() {
      char[] output = new char[limit - pos];
      if (pos < limit) {
          System.arraycopy(buffer, pos, output, 0, limit - pos);
      }
      return output;
  }

I also added a constructor that allows me to modify the buffer size.
```

Original issue reported on code.google.com by `christia...@gmail.com` on 6 Oct 2013 at 3:44""+1

`JsonReader` should not advance the underlying `Reader` past the end of the JSON that has been read.
 =||= We aren't going to do this in Gson. Doing so breaks buffering.
 =||= Can you explain how fixing this would break buffering? How exactly does it break?

Also, a separate question, why does JsonReader do its own buffering rather than delegating buffering to a buffered reader?
 =||= +1

Why not use mark/reset/read (if supported) to rewind the underlying Reader so it points to the next character after the consumed JSON object, rather than over-subscribe on the input?
 =||= If you'd like, create a `Reader` that returns one character at a time. That'll give you the behavior you want!
 =||= Not sure if that's a snipe or you are being serious, but that won't work.

The issue is that gson/stream/JsonReader.fillBuffer (line 1300) reads up to 1024 bytes ahead from the caller-supplied Reader (up to buffer.length), but unconsumed bytes are never returned to that Reader.  Unless I'm missing something, they are simply thrown away with the JsonReader, leaving the caller-supplied Reader in an unknown/unusable state.

https://github.com/google/gson/blob/2b15334a4981d4e0bd4f2c2d34b8978a4167f36a/gson/src/main/java/com/google/gson/stream/JsonReader.java#L1300

Supplying one byte at a time from the Reader still means up to 1024 bytes will get read from it and thrown away, leaving the Reader positioned some arbitrary number of characters past the consumed input.

Therefore, the request here is to return unconsumed characters back to the caller-supplied Reader, so that the caller has access to the next byte following the consumed JSON object (presumably using reader.mark/.reset, if reader.markSupported() is true).
 =||= @jhugard it'll only put a single char in the buffer if that’s what `read()` returns. It’ll attempt up to 1024 chars, but it takes what it can get. If you create a reader that returns one character at a time, it won't read more than that.
 =||= Gotcha (my Java is rather rusty), but that's likely to impact performance.

This issue has also been [reported against Google/Protobuf's use of BSON](https://github.com/google/protobuf/issues/947), since that's where the issue is being encountered.  Sounds like the Protobuf contributors have a different solution in mind, plus we have a work-around.  Thanks for taking the time to answer.
 =||= @jhugard sorry to disturb u, I have encountered the same problem, Google bring me to here, I have read all your discussions but still don't know how to deal with this case, could u please give me some suggestion at your convenience ? Thanks very much =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
538Date format is not respected when serializing map with Date as keyGoogle Code ExporterGoogleCodeExporter04/03/17, 06:18:48 PM"```
What steps will reproduce the problem?
1. Crete Map<Date,Object> and populate with random data
2. Create Gson using GsonBuilder and setDateFormat(""any format"")
3. Serialize map to json.

What is the expected output? What do you see instead?
I expect keys to be serialized using date format, but I see that keys are 
converted to strings using Date.toString() which uses generic ""EEE MMM dd 
HH:mm:ss z yyyy"" format

What version of the product are you using? On what operating system?
2.2.4 from Maven,Ubuntu Linux
```

Original issue reported on code.google.com by `mbrzezi...@gmail.com` on 28 Oct 2013 at 5:42""```
i got the same issue. if date is a field of the object, it will be fine. if it 
is inside a map, then only default date format. even customized date sterilizer 
doesnt work.
```

Original comment by `sean...@gmail.com` on 27 May 2014 at 5:06
 =||= ```
Got the same issue.

Even when the Date is value in the map, it's serialized with the date format.
But when using Date as a key of the map, toString is used.
```

Original comment by `omickr...@gmail.com` on 5 Sep 2014 at 7:57
 =||= ```
Same issue in Map<String, Object> when value is java.util.Date
serialization is ok, deserialization returns a String.
gson 2.2.4

```

Original comment by `ftoscano...@gmail.com` on 17 Sep 2014 at 10:56
 =||= Any Update or Workaround on this issue? Still experiencing this problem in 2.8.0. =||= same issue here - already tried implementing cusom deserializers, but no luck so far. Any chance this gets resolved? =||= Same here. Any GSON maintainer ever seen this thread? =||= ```java
public final class Test {
  public static void main(String... args) {
    Gson gson = new GsonBuilder()
        .setDateFormat(""yyyy"")
        .enableComplexMapKeySerialization()
        .create();
    Map<Date, String> map = Collections.singletonMap(new Date(117, 1, 1), ""Hey"");
    System.out.println(gson.toJson(map));
  }
}
```
```
{""2017"":""Hey""}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
540fromJson returns null for empty stringGoogle Code ExporterGoogleCodeExporter04/13/16, 03:14:58 PM"```
What steps will reproduce the problem?

public void testCase() {
        String json = """";
        final Map<String, String> cachedMap = new Gson().fromJson(json, new TypeToken<Map<String, String>>() {}.getType());
        assertNotNull(cachedMap);
    }

What is the expected output? What do you see instead?

It probably should throw an exception (JsonParseException or maybe a Syntax 
one).

What version of the product are you using? On what operating system?

2.2.4, Ubuntu 12.10 and Android 4.3

Please provide any additional information below.

```

Original issue reported on code.google.com by `da...@swiftkey.com` on 30 Oct 2013 at 4:39""```
[deleted comment]
```
 =||= ```
Might be duplicated : https://code.google.com/p/google-gson/issues/detail?id=457
```

Original comment by `yancheng...@gmail.com` on 9 Jan 2014 at 10:28
 =||= Is there a plan to fix this issue?
 =||= No. This is a side-effect of historical and bad behavior of the `Gson` object setting leniency by default. Changing this would be backwards-incompatible. 

You can look up a `TypeAdapter` and use it directly to get Gson to behave sanely.

```
Gson gson = new Gson();
TypeAdapter<String> adapter = gson.getAdapter(String.class);
try {
  String json = """";
  String result = adapter.fromJson(json);
  System.out.println(""SUCCEEDED "" + result);
} catch (IOException e) {
  System.out.println(""FAILED "" + e.getClass().getSimpleName() + "": "" + e.getMessage());
}
```

```
FAILED EOFException: End of input at line 1 column 1
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
544Serializable should be treated similar to ObjectGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:48 PM"```
I have a generic object field which is declared as Serializable. Using 
fromJson() throws an exception. Instead, it could be treated as an Object, and 
later checked if the resulting type implements Serializable before throwing an 
exception.


    public static class AttrData implements Serializable
    {
        IdDisplay id;
        AttrDef def;
        Serializable value;
    }

...
Caused by: java.lang.RuntimeException: Unable to invoke no-args constructor for 
interface java.io.Serializable. Register an InstanceCreator with Gson for this 
type may fix this problem.
    at com.google.gson.internal.ConstructorConstructor$8.construct(ConstructorConstructor.java:166)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:163)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)
    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:81)
    at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:93)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:176)
    at com.google.gson.Gson.fromJson(Gson.java:755)
    at com.google.gson.Gson.fromJson(Gson.java:721)
    at com.google.gson.Gson.fromJson(Gson.java:670)
    at com.google.gson.Gson.fromJson(Gson.java:642)

```

Original issue reported on code.google.com by `bors...@gmail.com` on 3 Dec 2013 at 1:07""```
You can register a TypeAdapterFactory which forces Serializable types to be 
deserialized as Objects:

@Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
  if (Serializable.class.equals(type.getRawType())) {
    return (TypeAdapter<T>) gson.getAdapter(Object.class);
  }
  return null;
}
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:00
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
545Allow registering type adapters with an annotated nameGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:49 PM"```
https://groups.google.com/forum/#!topic/google-gson/sRQwYIXBIy0


```

Original issue reported on code.google.com by `inder123` on 6 Dec 2013 at 6:41""```
A solution is implemented for this with the new @Adapt annotation.
Check it out at https://code.google.com/p/google-gson/source/detail?r=1274

```

Original comment by `inder123` on 11 Mar 2014 at 6:19
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
546de javaGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:49 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `moss...@hotmail.com` on 8 Dec 2013 at 4:01""Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:41
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
547Custom enum serializer does not work for enum with methodsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:50 PM"```
What steps will reproduce the problem?
Here is the code to reproduce the problem:
public class App {
    enum MyEnum {
        A {
            @Override
            String toJson() {
                return ""a"";
            }
        };

        abstract String toJson();
    }

    public static void main(String[] args) {
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(MyEnum.class, new MyEnumSerializer())
                .create();
        System.out.println(gson.toJson(MyEnum.A)); // Expected ""a"", but got ""A""
    }

    static class MyEnumSerializer implements JsonSerializer<MyEnum> {
        @Override
        public JsonElement serialize(MyEnum src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive(src.toJson());
        }
    }
}



What is the expected output? What do you see instead?
Expected ""a"", but got ""A""

What version of the product are you using? On what operating system?
gson 2.2.4
jdk1.6.0_45_x64
win7 x64

Please provide any additional information below.
MyEnumSerializer will be used if it is registered for every concrete Enum value:
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(MyEnum.A.getClass(), new MyEnumSerializer())
                .create();

```

Original issue reported on code.google.com by `vsorokin87@gmail.com` on 11 Dec 2013 at 11:15""```
You'd need to `registerTypeHierarchyAdapter` instead. Any enum member declaring 
some methods is a different subclass and `registerTypeAdapter` seems to require 
an exact match. To me it looks like a consistent behavior.

```

Original comment by `Maaarti...@gmail.com` on 13 Dec 2013 at 8:06
 =||= ```
I think you are right, `registerTypeHierarchyAdapter` works as expected.
This issue can be closed.
```

Original comment by `vsorokin87@gmail.com` on 16 Dec 2013 at 6:53
 =||= Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:01
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
550LinkedTreeMap cannot be cast toGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:52 PM"```
What steps will reproduce the problem?
1.run the code
2.
3.

What is the expected output? What do you see instead?
print every user in the list,but shows ""LinkedTreeMap cannot be cast to 
com.he.common.User""

What version of the product are you using? On what operating system?
2.2.4 win7

Please provide any additional information below.
```

Original issue reported on code.google.com by `hechangg...@yeah.net` on 17 Dec 2013 at 9:20

Attachments:
- [User.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-550/comment-0/User.java)
- [CopyTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-550/comment-0/CopyTest.java)""```
If you change your Type 
from -- Type typeOfHashMap=new 
TypeToken<Map<String,List<Object>>>(){}.getType(); 
to -- Type typeOfHashMap=new TypeToken<Map<String,List<User>>>(){}.getType();
the deserialization is successful. I believe your original code is incorrectly 
using the Type class. If you have to set up a custom Type, you should be as 
specific as possible.
```

Original comment by `jack.roy...@gmail.com` on 1 May 2014 at 11:10
 =||= ```
Do what #1 said and it will fix your issue. If no type information is available 
Gson will deserialize into a Map as the exception clearly outlines.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:48
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
552JavaDoc: fromJson(..) should document when it returns nullGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:53 PM"```
The JavaDoc of Gson#fromJson(..)-methods should document the cases they return 
null. Currently we have to look into to code to figure it out.

case 1: when a null Reader or String is passed
case 2: when a Reader or String is empty
```

Original issue reported on code.google.com by `Chris7...@gmail.com` on 13 Jan 2014 at 10:28""```
This issue was closed by revision r1277.
```

Original comment by `inder123` on 29 Mar 2014 at 11:28
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
554Gson 2.2.4 causing a stackoverflow on JellyBean but it work on 2.3.*Google Code ExporterGoogleCodeExporter03/19/15, 06:33:54 PM"```
What steps will reproduce the problem?
1.http://stackoverflow.com/questions/16795492/gson-error-jellybean

2.http://stackoverflow.com/questions/14565647/gson-2-2-2-causing-a-stackoverflow
-on-4-2-1-only

3.it's a histroy problem,it was reported on stackflow many times. but almost 
the solution is downgrading gson to 1.7.1 . is it have a better way
but downgrading gson to 1.7.1.
```

Original issue reported on code.google.com by `pino...@gmail.com` on 24 Jan 2014 at 11:58
- Merged into: #440""Original comment by `inder123` on 29 Mar 2014 at 10:39
- Changed state: **Duplicate**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
556SkyblockGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:55 PM"```
What steps will reproduce the problem?
1.Logging into Minecraft
2.Going to multiplayer
3.Going on Skyblok and it not working

What is the expected output? What do you see instead?
I CAN GET ON!

What version of the product are you using? On what operating system?

Minecraft1.7.4 Windows 8
Please provide any additional information below.
IT WONT LET ME ON
```

Original issue reported on code.google.com by `0Maddie....@gmail.com` on 25 Jan 2014 at 6:33""```
Probably a bug in minecraft. Please provide a specific bug report for Gson.
ps. Great to find that Minecraft uses Gson... Didn't know that before. Wow!
```

Original comment by `inder123` on 29 Mar 2014 at 10:49
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
557javax.servlet.ServletException: java.lang.NoClassDefFoundError: com/google/gson/GsonGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:55 PM"```
Hi When I added Gson reference in my Java service code for writing a RESTful 
service. I am getting this error.

```

Original issue reported on code.google.com by `vsha...@gmail.com` on 30 Jan 2014 at 11:37""```
It seems like you are missing Gson jar in your web-app, possibly in the libs 
directory.

This is NOT a Gson bug.
```

Original comment by `inder123` on 29 Mar 2014 at 11:06
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
561Crash after running ProGuard with several librariesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:58 PM"```
What steps will reproduce the problem?
1. Use AndroidAnnotations with GSON as Converter. (Basically Spring REST)
2. Run Proguard with the config I'm attaching.
3. Run App.

What is the expected output? What do you see instead?
It should work, but for some reason, the code is crashing with the following 
error:

java.lang.AssertionError
        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(Unknown Source)
        at com.google.gson.internal.bind.TypeAdapters$26.create(Unknown Source)
        at com.google.gson.Gson.getAdapter(Unknown Source)

This is being run for Android.


I created a post in SO though.

Any tips are so appreciated.

Thanks.

http://stackoverflow.com/questions/21864912/is-there-any-way-to-obfuscate-just-r
eal-code-and-not-ofuscate-libraries
```

Original issue reported on code.google.com by `sergiCas...@gmail.com` on 19 Feb 2014 at 12:58

Attachments:
- [proguard-project.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-561/comment-0/proguard-project.txt)""```
If you are using ProGuard on these enums you cannot guarantee their value 
inside the JSON. You need to register a custom TypeAdapter (or 
TypeAdapterFactory) which uses a property other than the .name() so that you 
can lookup the correct enum field based on the unobfuscated name inside the 
JSON.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:06
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
562Serialization: Map<CustomEnum,XXX> -> @SerializedEnum is ignorred in enum's valuesGoogle Code ExporterGoogleCodeExporter09/06/15, 05:45:32 PM"```
What steps will reproduce the problem?
class Test{
   Map<OS,String> natives = new HashMap<OS,String>();
public Test(){
natives.put(OS.Windows,""1"");
natives.put(OS.MacOSX,""1"");
}
}

enum OS{
@SerializedName(""windows"")
Windows,
@SerializedName(""unix"")
Linux,
@SerializedName(""osx"")
MacOSX
}

Gson gson = new Gson();
gson.toJson(new Test());

What is the expected output? What do you see instead?
Expected:
{
natives{
""windows"":""1"",
""osx"":""2""
}
}

Current:
{
natives{
""Windows"":""1"",
""MacOSX"":""2""
}
}

What version of the product are you using? On what operating system?
Mac OS X 10.9
google-gson-2.2
java 1.6

Please provide any additional information below.

```

Original issue reported on code.google.com by `yan.zait...@gmail.com` on 24 Feb 2014 at 9:32""```
@SerializedName is ignored only during serialization.

Now, i'am fixing it by ovveriding toString() in Enum class (OS.name() is 
ignored too)
```

Original comment by `yan.zait...@gmail.com` on 24 Feb 2014 at 9:34
 =||= Use `GsonBuilder.enableComplexMapKeySerialization()` to avoid this problem.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
564Allow a magic field in a class to specify the default type adapterGoogle Code ExporterGoogleCodeExporter03/19/15, 06:33:59 PM"```
I want to specify the JSON serialization/deserialization semantics within my 
class itself, through a static field. 

class A {
  private static final TypeAdapter<A> GSON_TYPE_ADAPTER = .....
}

The big value is that all users of my class get automatic benefit of type 
adapter, they don't need to remember to register it.
```

Original issue reported on code.google.com by `inder123` on 8 Mar 2014 at 8:17""```
Fixed in https://code.google.com/p/google-gson/source/detail?r=1264
```

Original comment by `inder123` on 8 Mar 2014 at 8:17
- Changed state: **Fixed**
 =||= ```
Google group discussion at 
https://groups.google.com/forum/#!topic/google-gson/MQNmZyWoK-4
```

Original comment by `inder123` on 8 Mar 2014 at 9:30
 =||= ```
We are reverting these changes since @Adapt is a better solution than a magic 
field.
```

Original comment by `inder123` on 11 Mar 2014 at 6:20
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
565Fix javadoc quote on default Gson constructor.Google Code ExporterGoogleCodeExporter03/19/15, 06:34:01 PM"```
What steps will reproduce the problem?
1. Reading the javadoc for the default constructor of Gson(), it says, "" So, a 
Java class field versionNumber will be output as ""versionNumber@quot; in Json.""
2. The actual javadoc code which has the problem: 
will be output as <code>&quot;versionNumber@quot;</code> in

What is the expected output? What do you see instead?
The close quote in the javadoc needs to be changed to:
will be output as <code>&quot;versionNumber&quot;</code> in

What version of the product are you using? On what operating system?
2.2.4 - Ubuntu 13.04

Please provide any additional information below.
None.

```

Original issue reported on code.google.com by `dan.wiec...@gmail.com` on 10 Mar 2014 at 6:37""```
Fixed in r1276
```

Original comment by `inder123` on 26 Mar 2014 at 6:08
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
568TyGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:02 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `JoshuaPi...@gmail.com` on 24 Mar 2014 at 1:02""```
Closing this bug as it seems to be incomplete
```

Original comment by `inder123` on 26 Mar 2014 at 6:03
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
569Typo on the Docs Page.Google Code ExporterGoogleCodeExporter03/19/15, 06:34:03 PM"```
What steps will reproduce the problem?
1. Read the docs.
2. Notice typo.
3. Submit issue.

What is the expected output? What do you see instead?
On: 
https://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deseriali
zing-Collection-with-Objects-of-Arbitrary-Types

Replace occurrences of: excludeFieldsWithModifier

With: excludeFieldsWithModifiers

What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `JoshuaPi...@gmail.com` on 24 Mar 2014 at 1:04""Original comment by `inder123` on 26 Mar 2014 at 6:02
- Changed state: **Fixed**
 =||= ```
:thumbs_up:
```

Original comment by `supp...@insightemissions.com` on 26 Mar 2014 at 6:29
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
571Gson 2.2.4 not recognized in Android Studio Editor (inline compile)Google Code ExporterGoogleCodeExporter03/19/15, 06:34:04 PM"```
What steps will reproduce the problem?

1. Create new Android Studio project
2. add the 'com.google.code.gson:gson:2.2.3' dependency and sync project
3. write some code that invokes the Gson library
4. replace the gson 2.2.3 dependency with 'com.google.code.gson:gson:2.2.3' (or 
'com.google.code.gson:gson:2.2.+') and sync project


What is the expected output? What do you see instead?

- project should compile and show no errors after step 2 and after step 4
- instead, after step 2 everything is OK, but after step 4 the project still 
compiles and I'm able to deploy to device, but the Android Studio Editor shows 
compile errors that the symbol gson cannot be found (see attachment) and there 
is no META-INF or classes shown under the External Libraries in the Project 
window on the left side

What version of the product are you using? On what operating system?

- Gson 2.4.4
- Windows 8.1 N x64
- Java 1.7
- Android Studio 0.5.3
- Android Api 19
```

Original issue reported on code.google.com by `sbi...@gmail.com` on 3 Apr 2014 at 11:09

Attachments:
- [gson-issue-screenshot.png](https://storage.googleapis.com/google-code-attachments/google-gson/issue-571/comment-0/gson-issue-screenshot.png)""```
Sorry, in the above steps to reproduce, step 4, should be of course:
4. replace the gson 2.2.3 dependency with 'com.google.code.gson:gson:2.2.4' (or 
'com.google.code.gson:gson:2.2.+') and sync project
```

Original comment by `sbi...@gmail.com` on 3 Apr 2014 at 11:11
 =||= ```
I suspect that the dependency is being added in the wrong place. Can you show 
us the build.gradle file in the root of the project and also the build.gradle 
inside the app/ directory?

I'm closing the issue because I can assure you the dependency is available. You 
can see it here: 
http://search.maven.org/#search%7Cga%7C1%7Cg%3Acom.google.code.gson%20a%3Agson
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:42
- Changed state: **Invalid**
 =||= ```
This happened to me after i updated the android studio to 1.0.1 but the reason 
was that i had accidentally checked the offline in in gradle setting and then 
was trying to sync. :( 
```

Original comment by `uxyrat...@gmail.com` on 16 Dec 2014 at 5:01
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
572App crashing when I run Proguard on GSON (which using enum)Google Code ExporterGoogleCodeExporter03/19/15, 06:34:06 PM"```
I am using GSON in my Android app to parser the data. I have added an enum in 
my Model object. After adding an enum my app started crashing. When I made 
runProguard false everything works fine. I did everything I could find on 
internet to fix the problem when program is true. But still no luck.

I have already done following thing in Prodgrad-rule file

-keep class com.google.** { *; }

-keepattributes Annotation -keepattributes Signature

-keepclassmembers enum * { public static **[] values(); public static ** 
valueOf(java.lang.String); }

Enum Stuff exmaple

public enum TypeX {
@SerializedName(""live"")
LIVE,

@SerializedName(""upcoming"")
UPCOMING,

@SerializedName(""replay"")
REPLAY; }
My stack trace

java.lang.AssertionError
        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(Unknown Source)
        at com.google.gson.internal.bind.TypeAdapters$26.create(Unknown Source)
        at com.google.gson.Gson.getAdapter(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source)
        at com.google.gson.Gson.getAdapter(Unknown Source)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(Unknown Source)
        at com.google.gson.Gson.getAdapter(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source)
        at com.google.gson.Gson.getAdapter(Unknown Source)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(Unknown Source)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(Unknown Source)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(Unknown Source)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(Unknown Source)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(Unknown Source)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(Unknown Source)
        at com.google.gson.Gson.toJson(Unknown Source)
        at com.google.gson.Gson.toJson(Unknown Source)
        at com.google.gson.Gson.toJson(Unknown Source)
        at com.google.gson.Gson.toJson(Unknown Source)
        at com.theice.gsonapp.app.MainActivity.a(Unknown Source)
        at com.theice.gsonapp.app.MainActivity.onCreate(Unknown Source)
        at android.app.Activity.performCreate(Activity.java:5231)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1087)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2159)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2245)
        at android.app.ActivityThread.access$800(ActivityThread.java:135)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1196)
        at android.os.Handler.dispatchMessage(Handler.java:102)
        at android.os.Looper.loop(Looper.java:136)
        at android.app.ActivityThread.main(ActivityThread.java:5017)
        at java.lang.reflect.Method.invokeNative(Native Method)
        at java.lang.reflect.Method.invoke(Method.java:515)
        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595)
        at dalvik.system.NativeStart.main(Native Method)
```

Original issue reported on code.google.com by `amit.a.v...@gmail.com` on 18 Apr 2014 at 2:27""```
See issue 561 for an explanation of what's happening and the fix. Basically, 
you need to register a type adapter since the enum field names won't match the 
values in JSON after ProGuard and the mangling breaks normal enum conventions.

Furthermore, this violates JLS 8.9.2: 
http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2

> In addition to the members that an enum type E inherits from Enum<E>, for 
each declared enum constant with the name n, the enum type has an implicitly 
declared public static final field named n of type E.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:25
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
578Serialize dates as JavaScript Date constructorGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:08 PM"```
I want to use Gson to create a JSON string with dates represented as literal 
JavaScript Date constructors. For example 

  {v: new Date(2008, 1, 28, 0, 31, 26)}

This is how the Google Charts API's JavaScript literal data parameter can 
receive dates. See 
https://developers.google.com/chart/interactive/docs/reference#dataparam

```

Original issue reported on code.google.com by `davidcwe...@gmail.com` on 5 May 2014 at 7:44""```
You can use a custom TypeAdapter to accomplish this. Please see the 
documentation at 
https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/
TypeAdapter.html
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:45
- Changed state: **Invalid**
 =||= ```
I can see no way how to accomplish exactly this. You can get

{v: ""new Date(2008, 1, 28, 0, 31, 26)""}

but it's not the same. It's a string rather than constructor invocation. 
However, it's no valid JSON either.
```

Original comment by `Maaarti...@gmail.com` on 12 Aug 2014 at 5:01
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
579JsonReader#nextBoolean cannot consume quoted boolean values like nextDouble/Int/LongGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:11 PM"```
JsonReader#nextDouble, nextInt, and nextLong all consume quoted values (e.g., 
both {x: 4} and {x: ""4""} can be parsed).

But nextBoolean will throw an IllegalStateException: Expected a boolean but was 
STRING at ...

Is there a reason for this? Would it violate a spec to handle quoted ""true"" and 
""false"" values in the nextBoolean method?
```

Original issue reported on code.google.com by `o...@fleaflicker.com` on 20 May 2014 at 9:43""```
The quoted numbers are supported to defend against precision loss. In 
particular, for double-precision floating point values in JavaScript. There's 
no equivalent problem with booleans.
```

Original comment by `limpbizkit` on 9 Aug 2014 at 10:30
 =||= ```
Additionally, you can do this with a custom TypeAdapter.

public final class BooleanAdapter extends TypeAdapter<Boolean> {
    @Override
    public void write(JsonWriter out, Boolean value) throws IOException {
        if (value != null) {
            out.value(value);
        } else {
            out.nullValue();
        }
    }

    @Override
    public Boolean read(JsonReader in) throws IOException {
        JsonToken peek = in.peek();
        switch (peek) {
            case BOOLEAN:
                return in.nextBoolean();
            case STRING:
                return Boolean.parseBoolean(in.nextString());
            case NULL:
                in.nextNull();
                return null;
            default:
                throw new IllegalStateException(""Expected BOOLEAN or STRING but was "" + peek);
        }
    }

}
```

Original comment by `j...@squareup.com` on 10 Aug 2014 at 1:42
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
580Json SortingGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:12 PM"```
There is not any example to sort a dynamic json, on the basis of a key
```

Original issue reported on code.google.com by `sumeet.b...@gmail.com` on 22 May 2014 at 12:45""```
Can you please ask this question on StackOverflow using the 'gson' tag?
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:36
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
581please consider checksum in the maven repositoryGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:12 PM"```

Here is an example hash from mvnrepostiory.com:

http://repo1.maven.org/maven2/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar

# md5sum ...
2f54fc24807a4cad7297012dd8cebf3d  lib/gson-2.2.4.jar
1ff6437ccdf5a83f3596da78b7f6118e  lib/gson-2.2.4-sources.jar


Here are the hashes I got from extracting: 
http://code.google.com/p/google-gson/downloads/detail?name=google-gson-2.2.4-rel
ease.zip

$ md5sum lib/gson-2.2.4*
232ea9ab7ec43b8b2ef36181ee7d693b  lib/gson-2.2.4.jar
f8c28d344ebaaf750aaddee6c660e2a5  lib/gson-2.2.4-sources.jar

These are probably identical in functionality, but please consider using the 
same build when updating maven so these will match.

```

Original issue reported on code.google.com by `ja...@jcalfee.info` on 10 Jun 2014 at 2:07""```
Nice find. We will ensure that we do this for the upcoming 2.3 release.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:44
- Changed state: **Accepted**
 =||= ```
This is no longer relevant since we dont host downloads on google code anymore.
```

Original comment by `inder123` on 12 Nov 2014 at 11:33
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
582Bundle-RequiredExecutionEnvironmentGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:13 PM"```
Could you specify all the available execution environments for JDK6,7,8?
Only the pom.xml would need to be modified:

<Bundle-RequiredExecutionEnvironment>J2SE-1.5, JavaSE-1.6, JavaSE-1.7, 
JavaSE-1.8</Bundle-RequiredExecutionEnvironment>

or remove the whole required execution environment all together. 
We're currently unable to load the library in our project because of this.

When loading the library this is the message we get:

Unsatisfied requirement(s): (|(ee=J2SE-1.5)) Gson 
(&(package=com.google.code.gson)(version>=2.2.4))

We're currently running JDK 7.0 update 60.

What version of the product are you using? On what operating system?
2.2.4

```

Original issue reported on code.google.com by `haltal...@gmail.com` on 15 Jul 2014 at 6:57""```
This issue was closed by revision r1306.
```

Original comment by `inder123` on 12 Nov 2014 at 11:35
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
583JsonSyntaxException : Expected BEGIN_OBJECT but was STRINGGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:14 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?

i want to get the account details from mailchimp, but i'm encountered with 
JsonSyntaxException.

What version of the product are you using? On what operating system?

MailChimpAPI 1.3

Please provide any additional information below.

```

Original issue reported on code.google.com by `sanakkay...@gmail.com` on 17 Jul 2014 at 10:37

Attachments:
- [AccountDetail.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-583/comment-0/AccountDetail.java)""```
This exception means that Gson saw a '{' character when it was expecting a 
string.

For instance,

Receiving {""user"": ""jake""} when it was expecting {""user"": {""name"": ""jake""}} 
would cause this. Note how the 'user' type was an object rather than a string.

Your example doesn't have any Gson use in it so it's hard to know what exactly 
is wrong. If you have more questions please ask on StackOverflow using the 
'gson' tag.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:39
- Changed state: **Invalid**
 =||= ```
@Project Member: your statements are contradictory. 
```

Original comment by `sumithnp...@gmail.com` on 10 Oct 2014 at 10:52
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
585TypeAdapterFactory Javadoc incorrectly references TypeAdapter.FactoryGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:15 PM"```
https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/
TypeAdapterFactory.html

Both code examples incorrectly reference TypeAdapter.Factory.
```

Original issue reported on code.google.com by `jakewhar...@gmail.com` on 2 Aug 2014 at 9:42""```
Fixed in r1292.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:36
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
586UnsafeAllocator should use post-GB method before pre-GBGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:15 PM"```
GB is dying. We should optimize for the most likely case first (post-GB).
```

Original issue reported on code.google.com by `jakewhar...@gmail.com` on 2 Aug 2014 at 10:09""```
Fixed in r1291.
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 5:34
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
587DateTypeAdapter, others unnecessarily finalGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:16 PM"```
com.google.gson.internal.bind.DateTypeAdapter is final. Why?

It would be very useful to be able to subclass it. As it is, you're locked into 
using the output format ""enUsFormat"". It's not even configurable. The only 
option is to rewrite the whole class from scratch.

There are lots of other ""final"" classes in the library. There might be cases 
where it's warranted but usually it's just a hindrance to usage.
```

Original issue reported on code.google.com by `nlev...@gmail.com` on 8 Aug 2014 at 12:40""```
This is an internal class and prone to API breakage at any time. The right 
approach is just to copy the implementation to your project and modify as 
needed.

https://groups.google.com/d/msg/google-gson/5qJK9nUynPY/ge-nI7s-CHIJ
```

Original comment by `j...@squareup.com` on 9 Aug 2014 at 6:33
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
588Invalid version range in Maven doclint-java8-disable profile with gson 2.3Google Code ExporterGoogleCodeExporter03/19/15, 06:34:16 PM"```
According to Maven 3.0.4 (maybe other versions) there is an invalid version 
range in the 2.3 POM in the doclint-java8-disable profile.

      <activation>
        <jdk>[1.8,</jdk>
      </activation>

should possibly be 

      <activation>
        <jdk>[1.8,)</jdk>
      </activation>

What steps will reproduce the problem?
1. Create a maven project that depends on gson 2.3
2. Try and build

What is the expected output? What do you see instead?

It should build. Instead I get errors like ""Invalid JDK version in profile 
'doclint-java8-disable': Unbounded range [1.8, for project 
com.google.code.gson:gson [etc]""

What version of the product are you using? On what operating system?

gson 2.3 with JDK 7 and Maven 3.0.4

Please provide any additional information below.
Seems to be a common error, I'd guess copy and pasted from Stack Overflow.
https://github.com/junit-team/junit/issues/965
https://github.com/atteo/parent/issues/1

http://maven.apache.org/enforcer/enforcer-rules/versionRanges.html implies it 
must have the trailing parenthese.
```

Original issue reported on code.google.com by `chad.lee...@gmail.com` on 15 Aug 2014 at 9:32""```
For now, I am switching back to Gson 2.2.4 until this defect is fixed. The POM 
for 2.2.4 doesn't have the problem.
```

Original comment by `bibh...@gmail.com` on 20 Aug 2014 at 8:40
 =||= ```
I've observed the same issue with version 2.3 and am also using version 2.2.4 
for the time being
```

Original comment by `palmerw...@gmail.com` on 8 Sep 2014 at 11:52
 =||= ```
I have the same issue with maven 2.x. Maven 3.0.5 seem to work fine.
```

Original comment by `fschef...@felix-scheffer.de` on 12 Sep 2014 at 8:11
 =||= ```
This issue was closed by revision r1300.
```

Original comment by `limpbizkit` on 16 Sep 2014 at 2:40
- Changed state: **Fixed**
 =||= ```
I noticed there isn't a timeline set for the next release in the Roadmap, so, 
in the meantime, is there a snapshot repository to pick up this change?  
Checking out the one listed here didn't help: 
https://code.google.com/p/google-gson/source/diff?spec=svn1300&r=1300&format=sid
e&path=/trunk/gson/pom.xml
```

Original comment by `john.rod...@gmail.com` on 16 Sep 2014 at 5:21
 =||= ```
I'm seeing this

[INFO] Error building POM (may not be this project's POM).


Project ID: com.google.code.gson:gson

Reason: Invalid JDK version in profile 'doclint-java8-disable': Unbounded 
range: [1.8, for project com.google.code.gson:gson


Using

$ mvn --version
Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)
Java version: 1.7.0_51
Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"" version: ""10.9.5"" arch: ""x86_64"" Family: ""mac""
```

Original comment by `tomkessl...@gmail.com` on 29 Oct 2014 at 12:08
 =||= ```
I updated maven version to 3.1.1 and it worked.
```

Original comment by `dfrnasci...@gmail.com` on 7 Nov 2014 at 9:20
 =||= ```
Maven 3.2.2 and 3.2.3 have the same issue and refuse to import the broken pom.

Would it be possible to make a release fixing this issue, as it's been already 
2 months since it was fixed?
```

Original comment by `dumitru....@gmail.com` on 10 Nov 2014 at 1:45
 =||= ```
Hey Folks.  I'm still seeing this issue as well.  I am unable to reopen this 
myself so will you please re-open it.  Here is what I see on my command line:

Unable to resolve artifact: Unable to get dependency information: Unable to 
read the metadata file for artifact 'com.google.code.gson:gson:jar': Invalid 
JDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, for 
project com.google.code.gson:gson
  com.google.code.gson:gson:jar:2.3

And here is what is in the POM file I am receiving 
(.m2/repository/com/google/code/gson/gson/2.3/gson-2.3.pom):

    <profile>
      <id>doclint-java8-disable</id>
      <activation>
        <jdk>[1.8,</jdk>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <configuration>
              <additionalparam>-Xdoclint:none</additionalparam>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

Tried nuking local repo and re-downloading twice to no avail.
```

Original comment by `Andrew.S...@gmail.com` on 12 Jan 2015 at 6:34
 =||= ```
Should also include my environment info:

$ mvn -v
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 
2014-08-11T15:58:10-05:00)
Maven home: /usr/local/Cellar/maven/3.2.3/libexec
Java version: 1.7.0_60, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.10.1"", arch: ""x86_64"", family: ""mac""

[artifact:dependencies] from the specified remote repositories:
[artifact:dependencies]   central (http://repo1.maven.org/maven2)
```

Original comment by `Andrew.S...@gmail.com` on 12 Jan 2015 at 6:37
 =||= ```
This bug report is against 2.3. It's only fixed in 2.3.1.
```

Original comment by `chad.lee...@gmail.com` on 13 Jan 2015 at 12:00
 =||= ```
Ahh... well that explains that.  Would you like me to file a new bug against 
2.3?
```

Original comment by `Andrew.S...@gmail.com` on 13 Jan 2015 at 1:37
 =||= ```
I'm just a fellow user/bug reporter/internet citizen, but this is fixed in 
2.3.1 which is available in Maven central so you should try that. Unfortunately 
google code is pretty crappy as an issue mgmt system so it's not obvious here 
which release it was fixed in.
```

Original comment by `chad.lee...@gmail.com` on 13 Jan 2015 at 2:02
 =||= ```
> but this is fixed in 2.3.1 which is available in Maven central so you should 
try that

I wish it were that easy (and maybe it is and I am totally missing something) 
but that won't work in my case.  The reason is gson 2.3 is a dependency of 
another artifact I am trying to use (google-maps-services).  Now even if I use 
gson locally in my project (which I do) and I bump up the version of my local 
artifact to 2.3.1 (which I did), mvn will still grab the 2.3 artifact, process 
its pom file and explode.  So I would need to unfairly ask the maintainers of 
the google-services-api to update their dependency (which I did in 
https://code.google.com/p/gmaps-api-issues/issues/detail?id=7525&thanks=7525&ts=
1421186415) even though the issue is not with them, its with the gson code.  
That is not cool since this bug is not their problem nor does the resolution of 
this bug in any way affect the functionality and feature set of Gson.  So IMHO 
the maintainers of the project need to re-release this version with a fixed POM 
file so the rest of us can move on.

But I am also young to maven and perhaps there are workaround that I am unaware 
of.  If you (or anyone else for that matter) happen to know of a better way PM 
me please.  I would love to know it or be shown where to look.  
```

Original comment by `Andrew.S...@gmail.com` on 13 Jan 2015 at 10:16
 =||= ```
> But I am also young to maven and perhaps there are workaround that I am 
unaware of.

Use <dependencyManagement> to set the version of gson pulled in as a transitive 
dependency  
http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism
.html#Dependency_Management


```

Original comment by `cheis...@squareup.com` on 13 Jan 2015 at 10:20
 =||= ```
In any case, software versions are never re-released with the same version 
number. That would fundamentally break Maven version management (dependencies 
and POMs are cached locally and in proxied repos) as well as being extremely 
bad practice from a general software perspective. A POM is part of the artifact 
and coupled with the jar, its source etc. You'd essentially have two different 
artifacts of the same version number, which is supposed to be an artifact's 
unique identifier.

Anyway, in addition to dependencyManagement, Maven dependencies should always 
pull in a higher level version off the dependency tree in preference to a 
transitive dependency at a deeper depth so normally this should work by default 
unless you have a complex structure or are using a very outdated Maven version 
with bugs/weaknesses. The link in #15 notes this. Another alternative is to 
exclude the GSON dependency from google-services-api dependency with the 
<exclusions> section.

This bug may not be gmaps-api's fault, but the reality is that a library is 
responsible for all its dependencies. If they add a dependency on another 
library that has a bug affecting their users; they need to move that forward so 
you're right to raise it with them; even though there are several workarounds 
you can apply at your end.
```

Original comment by `chad.lee...@gmail.com` on 14 Jan 2015 at 12:57
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
589toJson converts map's Integer key into a StringGoogle Code ExporterGoogleCodeExporter12/04/17, 03:06:02 PM"```
What steps will reproduce the problem?
1. Construct a Map with Integer key
2. Put key/value pair into the map, making sure the key is an Integer
3. Write JSON stream using toJson to convert the map to JSON
4. Check the output file

What is the expected output? What do you see instead?
Expect to see the key represented as an Integer with no quotes. The key is 
represented as a String with double quotes.

What version of the product are you using? On what operating system?
Goobuntu. The latest in third_party/java.

Please provide any additional information below.
Might have the same root cause as issue 524, but I'm seeing the problem in 
toJson instead of fromJson.

Here's some sample code to demonstrate the bug:

private void writeJsonStreamTest(OutputStream out) throws IOException {
  JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, ""UTF-8""));
  writer.setIndent(""  "");
  writer.beginArray();
  Map<Integer, String> data = new HashMap<Integer, String>();
  data.put(new Integer(4), ""Hello"");
  new Gson().toJson(data, HashMap.class, writer);
  writer.endArray();
  writer.close();
}

Here's the actual output from calling that method:
[
  {
    ""4"": ""Hello""
  }
]

Expected this instead:
[
  {
    4: ""Hello""
  }
]
```

Original issue reported on code.google.com by `vivienne...@google.com` on 19 Aug 2014 at 5:29""```
As yonmost pointed out in issue 524, if the Integer is a value instead of key 
then it works as expected. I swapped the Integer and String in the data map 
above, and got this expected output:

[
  {
    ""Hello"": 4
  }
]
```

Original comment by `vivienne...@google.com` on 19 Aug 2014 at 5:32
 =||= ```
My colleague pointed out that JSON keys have to be Strings. Would it be 
possible then to add documentation in toJson so the end user doesn't get 
confused when trying to parse the JSON back into a Map?
```

Original comment by `vivienne...@google.com` on 19 Aug 2014 at 5:58
 =||= ```
You should use

new Gson().toJson(data, new TypeToken<Map<Integer, String>>() {}.getType())

Otherwise, gson can't know what kind of map you want.

http://google-gson.googlecode.com/svn/tags/1.1.1/docs/javadocs/com/google/gson/r
eflect/TypeToken.html
```

Original comment by `Maaarti...@gmail.com` on 27 Aug 2014 at 3:54
 =||= ```
""new Gson().toJson(data, new TypeToken<Map<Integer, String>>() {}.getType())""
The above method is not work.

```

Original comment by `androida...@gmail.com` on 31 Dec 2014 at 4:15
 =||= For reference, [RFC4627](https://tools.ietf.org/html/rfc4627) makes clear:

> An object is an unordered collection of zero or more name/value pairs, where a **name is a string** and a value is a string, number, boolean, null, object, or array.

*(emphasis mine)* =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
592JsonObject.add does not add, it sets/replaces/putsGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:21 PM"```
The JsonObject.add() method name and JavaDoc suggest that it is an _additive_ 
operation, but it isn't.

What steps will reproduce the problem?

        JsonObject obj = new JsonObject();
        obj.add(""languages"", new JsonPrimitive(""en""));
        obj.add(""languages"", new JsonPrimitive(""it""));
        System.out.println(obj.get(""languages""));

What is the expected output? What do you see instead?

A programmer with no access to the code (just API and Javadoc) would probably 
expect [""en"",""it""] to be printed. The actual result is ""it"".

Suggested fix:

Deprecate/remove ALL JsonObject.add() methods and call them ""set"" or ""put"".

I know this won't happen because nothing can be removed from the API, but I 
still had to vent ;-)
```

Original issue reported on code.google.com by `hussdl` on 22 Aug 2014 at 10:29""```
:) Yes, we should have named the methods better. And you are right that we will 
not change it because of backward compatibility. 
```

Original comment by `inder123` on 12 Nov 2014 at 11:37
- Changed state: **WontFix**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
593when I'm writing the phone freezesGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:21 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? KgWhat do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `bertieda...@googlemail.com` on 25 Aug 2014 at 7:05""```
insufficient details
```

Original comment by `inder123` on 12 Nov 2014 at 11:34
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
596Maven dependency issue for 2.3 - Invalid JDK version in profile 'doclint-java8-disable'Google Code ExporterGoogleCodeExporter03/19/15, 06:34:22 PM"```
What steps will reproduce the problem?
1. use gson 2.3 as maven dependency
2. include that project as a dependency in another project
3. use IntelliJ

Unable to get dependency information: Unable to read the metadata file for 
artifact 'com.google.code.gson:gson:jar': 
Invalid JDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, 
for project com.google.code.gson:gson
  com.google.code.gson:gson:jar:2.3

Looks to me that it is a maven setup issue, as the issue was noted/discovered 
in a maven library.

What is the expected output? What do you see instead?
Maven itself works fine - i.e. ignores the issue.
IntelliJ bombs out (yes it's their problem, but you are the cause)

What version of the product are you using? On what operating system?
2.3

Please provide any additional information below.

-----
Path to dependency: 
    1) com.bizfabrik:xcompiere:war:1.0-SNAPSHOT
    2) com.bizfabrik:biz-base:jar:1.0-SNAPSHOT


java.lang.RuntimeException: 
org.apache.maven.artifact.resolver.ArtifactResolutionException: Unable to get 
dependency information: Unable to read the metadata file for artifact 
'com.google.code.gson:gson:jar': Invalid JDK version in profile 
'doclint-java8-disable': Unbounded range: [1.8, for project 
com.google.code.gson:gson
  com.google.code.gson:gson:jar:2.3

from the specified remote repositories:
  public (http://rep.bizfabrik.com/nexus/content/groups/public),
  central (http://repo1.maven.org/maven2),
  releases (http://rep.bizfabrik.com/nexus/content/repositories/releases),
  splunk-release (http://splunk.artifactoryonline.com/splunk/ext-releases-local),
  snapshots (http://rep.bizfabrik.com/nexus/content/repositories/snapshots),
  audaxis-snapshots (http://support.audaxis.com/m2-snapshots)

Path to dependency: 
    1) com.bizfabrik:xcompiere:war:1.0-SNAPSHOT
    2) com.bizfabrik:biz-base:jar:1.0-SNAPSHOT


    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:430)
    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:435)
    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.collect(DefaultArtifactCollector.java:74)
    at org.apache.maven.artifact.resolver.DefaultArtifactResolver.resolveTransitively(DefaultArtifactResolver.java:316)
    at org.jetbrains.maven.embedder.MavenEmbedder.resolveProject(MavenEmbedder.java:210)
    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$2.execute(Maven2ServerEmbedderImpl.java:135)
    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$2.execute(Maven2ServerEmbedderImpl.java:132)
    at org.jetbrains.idea.maven.server.embedder.Maven2ServerEmbedderImpl$6.run(Maven2ServerEmbedderImpl.java:532)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask.run(FutureTask.java:262)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: 
org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException: Unable 
to read the metadata file for artifact 'com.google.code.gson:gson:jar': Invalid 
JDK version in profile 'doclint-java8-disable': Unbounded range: [1.8, for 
project com.google.code.gson:gson
    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetadataSource.java:200)
    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedArtifact(MavenMetadataSource.java:94)
    at org.apache.maven.artifact.resolver.DefaultArtifactCollector.recurse(DefaultArtifactCollector.java:387)
    ... 12 more
Caused by: java.lang.RuntimeException: 
org.apache.maven.project.ProjectBuildingException: Invalid JDK version in 
profile 'doclint-java8-disable': Unbounded range: [1.8, for project 
com.google.code.gson:gson
    at org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfiles(DefaultMavenProjectBuilder.java:1502)
    at org.apache.maven.project.DefaultMavenProjectBuilder.assembleLineage(DefaultMavenProjectBuilder.java:1194)
    at org.apache.maven.project.DefaultMavenProjectBuilder.buildInternal(DefaultMavenProjectBuilder.java:823)
    at org.apache.maven.project.DefaultMavenProjectBuilder.buildFromRepository(DefaultMavenProjectBuilder.java:255)
    at org.apache.maven.project.artifact.MavenMetadataSource.retrieveRelocatedProject(MavenMetadataSource.java:163)
    ... 14 more
Caused by: java.lang.RuntimeException: 
org.apache.maven.profiles.activation.ProfileActivationException: Invalid JDK 
version in profile 'doclint-java8-disable': Unbounded range: [1.8,
    at org.apache.maven.profiles.activation.JdkPrefixProfileActivator.isActive(JdkPrefixProfileActivator.java:57)
    at org.apache.maven.profiles.DefaultProfileManager.isActive(DefaultProfileManager.java:273)
    at org.apache.maven.profiles.DefaultProfileManager.getActiveProfiles(DefaultProfileManager.java:209)
    at org.apache.maven.project.DefaultMavenProjectBuilder.injectActiveProfiles(DefaultMavenProjectBuilder.java:1496)
    ... 18 more

```

Original issue reported on code.google.com by `jorg.ja...@accorto.com` on 12 Sep 2014 at 11:36""```
uups ... duplicate of 588
```

Original comment by `jorg.ja...@accorto.com` on 12 Sep 2014 at 11:50
 =||= ```
I am having the exact same issue with Maven 3.2.3, IntelliJ, and gson 2.3
```

Original comment by `ryanlan...@gmail.com` on 18 Sep 2014 at 2:00
 =||= ```
as quick fix open the pom file at your local repository and add ')' and should 
looks like

 91         <jdk>[1.8,)</jdk>

save and execute again
```

Original comment by `arterza...@gmail.com` on 25 Sep 2014 at 3:39
 =||= ```
Fixed in https://code.google.com/p/google-gson/source/detail?r=1300
```

Original comment by `inder123` on 12 Nov 2014 at 11:25
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
602cant let me play in a server in minecraftGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:25 PM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `jepbig...@gmail.com` on 26 Oct 2014 at 7:34""```
I am afraid you will need to give us a lot more details on how we fix Gson to 
fix the issue in Minecraft. 

On the bright side, I am elated to note that Minecraft uses Gson. My kids love 
playing Minecraft, and I now stand tall in front of them because of this. :)
```

Original comment by `inder123` on 12 Nov 2014 at 10:18
- Changed state: **Invalid**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
606Feature request: Add a JsonArray reverse methodGoogle Code ExporterGoogleCodeExporter08/09/15, 09:50:52 AM"```
Can we get a JsonArray.reverse() function to simply reverse its backing List?

Right now I have to manually iterate through the JsonArray in reverse and add 
those elements to a new/temp JsonArray.

I noticed that in an old revision of the JsonArray.java class 
(https://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/co
m/google/gson/JsonArray.java?r=486) there used to be a reverse() method, 
however it was package private:

  /**
   * Reverses the elements of the array.
   */
  void reverse() {
    Collections.reverse(elements);
  }

Can we reintroduce this method and make it public?
```

Original issue reported on code.google.com by `theother...@gmail.com` on 8 Nov 2014 at 8:48""Not sure if usage is sufficient enough for this feature to place it in the Gson API.
 =||= A better solution will be to make JsonArray implement List, which will then allow Collections.reverse() method to be applied to it.
 =||= https://github.com/google/gson/pull/683
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
607pathIndices not updatedGoogle Code ExporterGoogleCodeExporter03/19/15, 06:34:26 PM"```
What steps will reproduce the problem?
1. Create a new instance of JsonReader with this json: ""{\""array\"" 
:[{\""test\"":1},{\""test\"":1},{\""test\"":1}]}""
2. Let the reader read all items until the second object in the array with 
these statements:
reader.beginObject();
reader.nextName();
reader.beginArray();
reader.beginObject();
reader.nextName();
reader.nextInt();
reader.endObject();
reader.beginObject();
3. See that the JsonPath = $.array[0]. while the reader is in the second object 
of the array so the value should be $.array[1].

What is the expected output? What do you see instead?
When i close an object in an array i expect the JsonPath index of that array to 
be increased. Instead it stays the same.


What version of the product are you using? On what operating system?
2.3 in an android gradle project on OSX


Please provide any additional information below.
In all the next.... methods of JsonReader the pathIndex of the top item of the 
stack is increased by 1. This does not happen in endObject or endArray.

```

Original issue reported on code.google.com by `remcomok...@gmail.com` on 10 Nov 2014 at 8:49""```
My bug! Fix:
https://code.google.com/p/google-gson/source/detail?r=1303
```

Original comment by `limpbizkit` on 11 Nov 2014 at 2:00
- Changed state: **Fixed**
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
608Enum serializes to null when nothing matches (instead of throwing IOException)Google Code ExporterGoogleCodeExporter03/19/15, 06:34:27 PM"```
> What steps will reproduce the problem?

1. Implement a POJO that has an enum
2. Attempt to deserialize the POJO using a bad string for the enum's value
3. See that the enum's value is set to null

> What is the expected output? What do you see instead?

I expect to see an exception (probably IOException?), but instead the value is 
initialized to null.

> What version of the product are you using? On what operating system?

GSON 2.3, Android 4.4.2

> Please provide any additional information below.

Here's the relevant part of TypeAdapters.EnumTypeAdapter

    public T read(JsonReader in) throws IOException {
      if (in.peek() == JsonToken.NULL) {
        in.nextNull();
        return null;
      }
      return nameToConstant.get(in.nextString());
    }

`nameToConstant.get()` gives null when nothing is found.
```

Original issue reported on code.google.com by `me@benjam.info` on 12 Nov 2014 at 2:17""```
It is debatable what the correct behavior is. Gson in general ignores 
additional fields or input.

You can easily write a custom type adapter for your enum to assert the correct 
behavior.
```

Original comment by `inder123` on 12 Nov 2014 at 10:16
- Changed state: **WontFix**
 =||= The problem is that the adapter makes no difference between an input value: null  and a invalid enum value (for example a typo in the enum value). Both return null. While the first is valid, the second is invalid. Thus the adapter returns the same kind of data for both valid and invalid input. It's not possible to know if the input was valid or invalid without performing an extra additional check if the input was null  in case the result is null. I don't think that is correct behavior and should not be solved by writing a custom adapter. Shouldn't it throw an IllegalArgumentException when an invalid enum value is given?
 =||= Throwing an exception will cause backward compatibility issues. If you introduce a new enum value, you dont want all existing clients to break.
 =||= Trying to understand. But how would  this cause backward compatibility issues? The case I can think of were there might be a problem is when json data (newer version) containing a new enum field, would be read by a java implementation (old version) using gson. In that case this will throw an exception and not be compatible. But from the java point of view. I would call this not being forward compatible. The question is if that should be a problem. Because one can not be expected to be prepared for the future. So that should not be a limitation to fix this.
Regarding ignoring additional field, input. I would consider this more of a change of input type then an additional field. For changed fields it would also throw exceptions If a field name changes. Also what if the type changes in the json data. From String to double that would cause an exception. But what if the type changed from enum to string that should cause an exception if it gets an new value.... but it doesn't it will simply return null for all the unknown enum fields.
It also doesn't ignore the input in the case of a new/wrong enum value. It just reads it with a different value, the value null.
It can also be seen different from for example UUID reading. That would throw an IllegalArgumentException in case the UUID is incorrect. If it had the same behavior as the enum parsing it should then return null. One could argue that if UUID parsing could be a problem no UUID should be used. The same can be argued for enum field. If it might be a problem with new enum values. One should probably read strings and parse them in code, not let the gson library handle it.
In general the gson library should not make the decision to interpret the input different then expected, but let the user of the library handle it and thus throw an IllegalArgumentException in this case.
 =||= You can always install your custom type adapter for your enum that enforces this. Gson isn't going to support this, sorry.
 =||= Too bad that there are no option to decide to throw an exception in that case.
If someone add an extra enum value, there won't be an issue with the existing json which don't use those value. =||= I agree it would be great to make the behavior configurable - both globally and on enum level (via annotation).

On enum level there could be 3 options:

- throw exception
- parse as `null`
- set a default value from the existing enum values =||= I also support this as a configurable behavior. =||= Ok, it has been on a todo list for me as well.
please present a concrete proposal if you can. thanks =||= How about something like this:

@SerializedName(defaultValue = TrafficLight.RED)
public enum TrafficLight {
   RED, ORANGE, GREEN
}

// defaultValue will also allowed to be null
// if this annotation is not present, enum maintains current behavior.

Comments @JakeWharton @swankjesse @joel-leitch? =||= ^^ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
613Document that Gson instances are thread safeGoogle Code ExporterGoogleCodeExporter08/10/15, 02:06:23 PM"```
Issue #63 [1] and the gson mailing list [2] indicate that Gson instances are 
thread safe. It would be good to document that in the Gson class, either in the 
Javadoc or with a JSR-305 @ThreadSafe annotation.

Background for this request is that I recently found quite a few places in 
multi-threaded code where Gson instances were unnecessarily created because the 
developers didn't know that these instances are thread safe.

[1] http://code.google.com/p/google-gson/issues/detail?id=63
[2] https://groups.google.com/forum/#!topic/google-gson/Vju1HuJJUIE
```

Original issue reported on code.google.com by `st.fer...@gmail.com` on 28 Nov 2014 at 1:42""```
I created a patch that adds a JSR-305 @ThreadSafe annotation to the Gson class.

I declared the dependency to the JSR-305 library as optional so that it doesn't 
get downloaded transitively when using google-gson. This is fine because the 
@ThreadSafe annotation has only a documentary purpose and it is not retained at 
runtime.
```

Original comment by `st.fer...@gmail.com` on 29 Nov 2014 at 11:16

Attachments:
- [issue-613.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-613/comment-1/issue-613.patch)
 =||= https://github.com/google/gson/pull/685
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
623Correct JsonWriter class-level JavadocGoogle Code ExporterGoogleCodeExporter09/27/15, 01:11:27 AM"```
The JsonWriter class-level Javadoc has a reference to a non-existent method 
'setIndentSpaces'.

I believe the statement on line 80 should be:

    writer.setIndent(""  "");

rather than:

    writer.setIndentSpaces(4);
```

Original issue reported on code.google.com by `jonathan...@gmail.com` on 27 Jan 2015 at 1:39"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
624Error desirialization of ConcurrentNavigableMap Google Code ExporterGoogleCodeExporter11/05/15, 12:25:34 PM"```
What steps will reproduce the problem?
1. Create POJO with filled ConcurrentNavigableMap field
2. Sirialize to json string
3. Desirialize from json string

What is the expected output? What do you see instead?
Original state is expected. IllegalArgumentException is thrown

What version of the product are you using? On what operating system?
Gson 2.3.1, java 8, windows 7

Please provide any additional information below.
Gson works only with class type field such as ConcurrentSkipListMap.
Good programming style is using interface type such as ConcurrentNavigableMap. 
See attach for log and unit-test

```

Original issue reported on code.google.com by `dkhomya...@gmail.com` on 29 Jan 2015 at 8:34

Attachments:
- [gsonErrLog.TXT](https://storage.googleapis.com/google-code-attachments/google-gson/issue-624/comment-0/gsonErrLog.TXT)
- [JsonUtilsTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-624/comment-0/JsonUtilsTest.java)""ConcurrentNavigableMap was introduced in JDK 1.6.
@swankjesse @JakeWharton @joel-leitch  Shall we abandon support for JDK 1.5?
 =||= I'm in favor. JVM users on Java 5 aren't likely going to be updating their Gson instances at any frequent pace. The stronger realization of this change is that it eliminates Android 2.2 and older. This accounts for 0.2% of the 1.some billion devices that talk to Google Play in the last 2 weeks. As far as I know, Google has stopped officially supporting it with their apps, and this was well behind others who have long since moved on from this far outdated platform.
 =||= Yeah, those users can continue to use earlier releases.
 =||= Ok. Agreed. Let's switch to Java 6 as the minimum version once we introduce support for ConcurrentNavigableMap and other Java 6 standard classes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
627LazilyParsedNumber does not implement eqals and hashCode methodsGoogle Code ExporterGoogleCodeExporter09/27/15, 09:25:05 PM"```
test case to reproduce the issue

package com.google.gson.internal;

import junit.framework.TestCase;

public class LazilyParsedNumberTest extends TestCase {

    public void testHashCode(){
        LazilyParsedNumber n1 = new LazilyParsedNumber(""1"");
        LazilyParsedNumber n1Another = new LazilyParsedNumber(""1"");
        assertEquals(n1.hashCode(), n1Another.hashCode());
    }

    public void testEquals(){
        LazilyParsedNumber n1 = new LazilyParsedNumber(""1"");
        LazilyParsedNumber n1Another = new LazilyParsedNumber(""1"");
        assertTrue(n1.equals(n1Another));
    }


What is the expected output? What do you see instead?
Any class should implement hashCode and equals when implementing Number 
interface.

What version of the product are you using? On what operating system?
2.3

Please provide any additional information below.
https://code.google.com/p/google-gson/issues/detail?id=523
Similar one.

I could work on these, but first I would like to know if there was any reason 
you decided not to implement these methods? 
```

Original issue reported on code.google.com by `vrab...@gmail.com` on 4 Feb 2015 at 12:06""```
This was an oversight. We should fix this. Thanks for the bug report and a 
nicely written test.
```

Original comment by `inder123` on 12 Feb 2015 at 5:31
- Changed state: **Accepted**
 =||= ```
Thanks.
Do you have any plans with the 523?

I am not sure what the comment in the 523 bug report means.

Do you try implement equals to behave like in javascript?
1.0 == 1 

In this case implementing equals and hashCode to fulfill the java contract 
would need more work than just ask IDE to generate equals and hashCode methods.
```

Original comment by `vrab...@gmail.com` on 13 Feb 2015 at 8:18
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
628private inheritanceGoogle Code ExporterGoogleCodeExporter06/24/15, 12:56:27 AM"```
-What steps will reproduce the problem?
When I run this code :
import com.google.gson.Gson;

/**
 * Created by Razi on 2/12/2015.
 */
public class Main {

    public static void main(String[] args)
    {
        Child child = new Child();
        Gson gson = new Gson();
        String json = gson.toJson(child);
    }
}
class Parent{
    protected int a;
    private int b;
}

class Child extends Parent{
    private float b;
}

I see this exception:
java.lang.IllegalArgumentException: class messages.BlockData declares multiple 
JSON fields named other

- What is the expected output? What do you see instead?
ignore parent private field


- What version of the product are you using? On what operating system?
gson-2.3.1
windows 7
java version 1.8.0


- Please provide any additional information below.
Tnx.

```

Original issue reported on code.google.com by `sm.raz...@gmail.com` on 12 Feb 2015 at 11:01""The private modifier in java isn't ignored by the serialization process. I recommend that you add the transient modifier to the field.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
631phoneGoogle Code ExporterGoogleCodeExporter10/04/15, 05:39:55 AM"```
What steps will reproduce the problem?
1.
2.
3.

What is the expected output? What do you see instead?


What version of the product are you using? On what operating system?


Please provide any additional information below.

```

Original issue reported on code.google.com by `noahgarc...@gmail.com` on 6 Mar 2015 at 10:52"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
632UI ISSUE IN DROPDOWN LISTGoogle Code ExporterGoogleCodeExporter05/30/15, 07:32:58 PM"```
UI ISSUE IN DROPDOWN LIST

Thanks 
Anurag Dikshit
```

Original issue reported on code.google.com by `dixit.an...@gmail.com` on 12 Mar 2015 at 8:49

Attachments:
- [UI issue.png](https://storage.googleapis.com/google-code-attachments/google-gson/issue-632/comment-0/UI issue.png)""Not relevant anymore, nor was even a Gson bug in the first place.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
633README file contains broken linksNatasha ChernyavskyNatashaCh04/13/15, 04:40:22 PMFor the Gson user guide and design.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
634Correct 'user guide' and 'design document' Markdown links.Jake WhartonJakeWharton04/13/15, 04:40:22 PMCloses #633. NaNCorrect 'user guide' and 'design document' Markdown links.Jake WhartonJakeWharton04/13/15, 04:40:22 PMCloses #633. NaNJake Wharton04/13/15, 04:22:11 PMCorrect 'user guide' and 'design document' Markdown links.1
635Throw errors when essential field missingQianliang Zhangzhangqianliang04/15/15, 06:09:42 AM"I got a class, like:

class Resource {
    private final String res;
    public Resource(String res) {
        if (res == null) {
            throw new IllegalArgumentException(""resource can not be null"");
        }
    }
}

Gson gson = new Gson();
Resource res = gson.fromJson(json, Resource .class);
How can Gson throw error when ""res"" not given?""You will need to write a custom type adapter for Gson to achieve this.
Son currently doesn't provide a callback after an object is created.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
636add parse format for ISO8601 with millisecondYeti Snoyetisno04/15/15, 03:23:51 PMformat yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
637Add parse format for ISO8601 with millisecond and test caseYeti Snoyetisno04/16/15, 01:17:39 AMparse format yyyy-MM-dd'T'HH:mm:ss.SSS'Z'NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
638reduce precision of millisecond to fit ISO8601Yeti Snoyetisno11/19/15, 11:55:09 PM"make format yyyy-MM-dd'T'HH:mm:ss.SSS'Z' fit yyyy-MM-dd'T'HH:mm:ss'Z'.

Some api provide millisecond precision, but it'll throw exception. This change cut millisecond part to fit ISO8601 format.""@swankjesse @JakeWharton What do you think about this one?
 =||= ISO 8601 specifies that you do can have fraction of seconds in your date format.
From http://en.wikipedia.org/wiki/ISO_8601 : ""There is no limit on the number of decimal places for the decimal fraction.""
Another quick fix would be to add another iso8601Format with milliseconds. :-1: 
Or, try using
`return DatatypeConverter.parseDate(json.getAsString()).getTime();`
instead of 
`return iso8601Format.parse(json);`
It should be able to parse all of ISO8601 formats ;) :+1: 
 =||= I'm not comfortable with this proposal. My recommendation is to use `UtcDateTypeAdapter`, which is smarter & faster than the built-in date formatting.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
639SerializedName should allow multiple names to be matched to a single name for inputInderjeet Singhinder12310/04/15, 05:40:57 AMNaN"+1
 =||= @inder123 @ikkyu0319 Do you mean something like this (this isn't available yet) ?

``` java
@SerializedName({""name"", ""firstName"", ""userName""})
public String name;

@SerializedName(""id"")
public String id;
```

where the idea is to re-use a model for multiple API endpoints but the attribute returned has a different name?
 =||= Yes~ I need this~~ @JakeWharton @inder123 @fahimk 
 =||= To maintain backward compatibility, I revised it to:

@SerializedName(value=""default_name"", alternate={""name"", ""firstName"", ""userName""})
public String name;

Let me know if you see a problem with this.
 =||= This shipped in 2.4
 =||= @inder123 this is great, thanks for working on it.
 =||= @fahimk great. Looking forward to learning how it worked for you.
 =||= How can i use this in kotlin  ? 
 @SerializedName(value=""name"", alternate={""person"", ""user""})
this gives me unexpected token error =||= Use arrayOf

On Mon, Aug 7, 2017 at 11:55 PM GaniduAsh <notifications@github.com> wrote:

> How can i use this in kotlin ?
> @serializedname(value=""name"", alternate={""person"", ""user""})
> this gives me unexpected token error
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/639#issuecomment-320867508>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEWhHbwfZtXFbc8zp8jr8iunW36zOks5sWAZzgaJpZM4EFYUt>
> .
>
 =||= yes found it thanks  =||= Can we let the alternative or on of the alternatives get chosen when serializing object that will be sent to server ? =||= For Kotlin ` @SerializedName(value=""firstName"", alternate= [""userName""])` =||= I am trying this, but it's not working.
@SerializedName(value = ""text"", alternate = {""text"", ""image"", ""document"", ""voice"", ""audio"", ""video"", ""location"", ""contacts""})
    private String content;

@inder123, any suggestion ?
 =||= @sunil965 alternate should be an array not object. =||= What up? May i help u.?


On Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com>
wrote:

> @sunil965 <https://github.com/sunil965> alternate should be an array not
> object.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/639#issuecomment-677819572>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ>
> .
>
 =||= Hi Google/Gson,


I don't know why I am getting this message, can you please confirm.

On Thu, 20 Aug, 2020, 11:45 PM AungHtetKyawWho, <notifications@github.com>
wrote:

> What up? May i help u.?
>
>
> On Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com>
> wrote:
>
> > @sunil965 <https://github.com/sunil965> alternate should be an array not
> > object.
> >
> > —
> > You are receiving this because you are subscribed to this thread.
> > Reply to this email directly, view it on GitHub
> > <https://github.com/google/gson/issues/639#issuecomment-677819572>, or
> > unsubscribe
> > <
> https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ
> >
> > .
> >
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/639#issuecomment-677820577>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AGL6N5Z5DJMJVBWEEMY7LQLSBVR3FANCNFSM4BAVQUWQ>
> .
>
 =||= 🙏🙏

On Sun, 23 Aug 2020, 7:47 am Sunil Kumar, <notifications@github.com> wrote:

> Hi Google/Gson,
>
>
> I don't know why I am getting this message, can you please confirm.
>
> On Thu, 20 Aug, 2020, 11:45 PM AungHtetKyawWho, <notifications@github.com>
> wrote:
>
> > What up? May i help u.?
> >
> >
> > On Fri, 21 Aug 2020, 12:43 am Akinsete Sunday, <notifications@github.com
> >
> > wrote:
> >
> > > @sunil965 <https://github.com/sunil965> alternate should be an array
> not
> > > object.
> > >
> > > —
> > > You are receiving this because you are subscribed to this thread.
> > > Reply to this email directly, view it on GitHub
> > > <https://github.com/google/gson/issues/639#issuecomment-677819572>, or
> > > unsubscribe
> > > <
> >
> https://github.com/notifications/unsubscribe-auth/AJJORC54DRGF7YDFHGJK7OLSBVRS3ANCNFSM4BAVQUWQ
> > >
> > > .
> > >
> >
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub
> > <https://github.com/google/gson/issues/639#issuecomment-677820577>, or
> > unsubscribe
> > <
> https://github.com/notifications/unsubscribe-auth/AGL6N5Z5DJMJVBWEEMY7LQLSBVR3FANCNFSM4BAVQUWQ
> >
> > .
> >
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/639#issuecomment-678716487>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AJJORCZ5ODZBKWAO36CAOZLSCBU4DANCNFSM4BAVQUWQ>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
641RuntimeTypeAdapterFactory removes the type field during deserializationDarren Kennedyzaphod7204/22/15, 03:45:00 PM"/trunk/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
Line 202: JsonElement labelJsonElement = jsonElement.getAsJsonObject().remove(typeFieldName);

This seems counter-intuitive.
If registered types have the typeFieldName as a field then it will not be deserialized as expected.""This factory is designed to create a new fictitious field name. But I agree with you, in my usage, often I do want that field to be present as an enum.
Look at the this test class:
https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java

The RuntimeTypeAdapterFactory in this test class implements the behavior you want.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
643Getters and settersSteven Wexlersteaks07/09/15, 06:18:22 AM"Hi Gson team,

My company ([Hurdlr](hurdlr.com)) uses gson extensively.  We really enjoy the library and appreciate all your work!

This pull request includes an attempt to implement support for getters and setters.  I realize you probably have deliberately chosen to not implement this feature.  However, the other day I stumbled across a problem where I really wanted to serialize a computed property.  So along the way I implemented support for getters and setters for my company.  (A full explanation of my use case is explained below.)

After implementing this feature for my own purposes, I figured creating a pull request couldn't hurt.  And after seeing [others with similar requests](http://stackoverflow.com/questions/6203487/why-does-gson-use-fields-and-not-getters-setters) I hope this pull request will make it into the codebase or inspire ideas for getter/setter support.

Before I invest more effort into this feature, I'm curious to hear initial thoughts and reactions.  If you want to proceed with this feature, I'd be interested to learn what I can do for a next step.

**Basic usage**

```
class Foo {
  private String bar;

  @GsonGetter
  public String getBar() {
    return this.bar;
  }

  @GsonSetter
  public String setBar(String value) {
    this.bar = value;
  }
}

//JSON
{ ""bar"": ""baz"" }  //using getter and setter, not the private field

Gson gson = new GsonBuilder().allowGetterAndSetterMethods().create();
```

_More examples can be found in MethodTest.java_

**API additions**
- @GsonGetter
- @GsonSetter
- GsonBuilder.allowGettersAndSetterMethods
- Excluder.allowGettersAndSetterMethods
- MethodAndFieldNamingStrategy (new interface)
- MethodAndFieldNamingPolicy (new enum)

**Expected common use cases**
- Computed properties via getters
- Lazily evaluated properties via getters
- Safer way to expose only public API
  - Often private fields can mistakenly be serialized because we often overlook them when thinking about our exposed API
- Data formatting via getters and/or setters
- Data validation via getters and/or setters

```
public void setFoo(String value) {
  if (value < 0) { throw new IllegalArgumentException(); }
  this.foo = value;
}
```

**Positives**
- Simple and readable annotations
- Fully backwards compatible
- Opt-in
  - allowGetterAndSetterMethods is necessary on GsonBuilder
  - @GsonGetter and @GsonSetter are required for gson to consider a method
- Intuitive default naming 
  - e.g. getBar => ""bar"", setBar => ""bar""
- Handles collisions
  - e.g. getBar/setBar take precedence over bar

**Negatives**
- Extra annotations added...more bloated API
- Extra MethodAndFieldNamingStrategy interface and MethodAndFieldNamingPolicy policy make the API more bloated and confusing.

**Implementation / Testing gaps**
- No tests for naming
- No performance testing
- No Java support testing.  I'm pretty sure it works for Java 1.6+

**Context for the use case that prompted me to implement @GsonGetter and @GsonSetter:**

We factored out functionality in class `Foo` into a separate helper class.  But we wanted to preserve the JSON API in order to not break backwards compatibility.

There are a few way so solve this problem.  Three include
- Shadow fooHelper.bar in NewFoo
- Create a custom serializer/deserializer
- Use a GsonGetter for a computed property.  IMO this solution is the simplest and most elegant :)

```
class Foo {
  private String bar;
}
//JSON
{  ""bar"": ""baz"" }
```

```
class NewFoo {
   private FooHelper fooHelper;
}
//Current JSON
{  ""fooHelper"": { ""bar"": ""baz"" } }
//Desired JSON
{ ""bar"": ""baz"" }
```

_Solution 3: Computed getter_

```
class NewFoo {
  private FooHelper fooHelper;

  @ GsonGetter
  public getBar() {
    return this.fooHelper.bar;
  }
}
```""Personally I don't want this in the core. Have you considered implementing this using a custom `TypeAdapter`? They're very powerful.
 =||= I think a TypeAdapter would work for a one off case.  But being able to serialize/deserialize getters and setters easily in any class, not just one off cases, would be more valuable to me.  I could implement a TypeAdapterFactory.

Maybe something like:

```
class GettersAndSettersTypeAdapterFactory implements TypeAdapterFactory {
  @Override
  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
    GsonGettersAndSetters a = type.getClass().getAnnotation(GsonGettersAndSetters.class);
    if (a != null) {
      //Basically do everything I do in my modified ReflectiveTypeAdapterFactory
      //...get bound methods, get bound fields, create Adapter
    }
    return null;
  }
}
```

```
@GsonGettersAndSetters
class Foo { 
  @GsonGetter
   public String getBaz() { }
}

@GsonGettersAndSetters
class Bar { 
 @GsonGetter
  public String getBaz() { }
}
```

But this solution doesn't seem great because I'm basically reimplementing ReflectiveTypeAdapterFactory and miss any improvements to ReflectiveTypeAdapterFactory when new commits are made.

Are there other ways I'm missing?
 =||= Any updates here?
 =||= Nothing from me. I think a custom TypeAdapter is still the best option.
 =||= Yes, philosophically we haven't considered supporting getters and setters. Some users have asked for it, but majority seems fine without it. We wont add it to core Gson unless there was a greater need.

Appreciate your effort in writing the type adapter. I think you should publish it for use with Gson. Would be great to see if people find it useful.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
644How can I change the indent of pretty output?Yiding Tiankilla121805/12/15, 11:23:33 AM"I want to output formatted `JsonArray/JsonObject` using `\t` as indent into a file. But the `PrettyPrint` of gson has an unchangable double space as indent. Currently I use `JsonWriter` to set indent, and use `new Gson().toJson(jsonArrayToBeOutput, jsonWriter)` to write. The problem is that the content of output file is not complete, just like the output progress was interrupted.
![image](https://cloud.githubusercontent.com/assets/5045159/7581904/ed61bc64-f8ba-11e4-931c-b3759f5b3414.png)""Please use stack overflow to ask why this is happening. This issue tracker is for bug reports and feature requests only. Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
645Convenience methods in JsonObjectVidar Wahlbergcanidae06/21/15, 04:53:04 PM"I've added several convenience methods to JsonObject. I find that whenever I use Gson for directly parsing JSON I end up creating similar convenience methods in my own project.
See second commit message for a simple example of the change.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= Signed the CLA thingy...
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Hi. Appreciate your efforts and the detailed tests for adding this.
However, I am concerned about the code bloat. I am not sure about the value of primitive accessor methods in JsonObject.

Similarly, Not too sure about providing the getAsBooleanWrapper() either. We are not providing wrappers for anything else. So, why do it for boolean.
 =||= I would like to close this pull request in the next day or two. If any one has a strong preference for keeping it, please speak up.
 =||= Thank you for the feedback. I am however slightly confused by some of the points made:
1. getBooleanAsWrapper(): I don't see the need for such methods myself, I added it only because it already exists for the parent class (JsonElement). JsonArray has methods for all ""getAs<something>()"" methods specified in JsonElement, except this one. Even if you disagree with adding the convenience methods in JsonObject, I would argue that you still should add this method to JsonArray for conformity (or remove ""getAsBooleanWrapper()"" from the other classes, but that breaks backwards compatability).
2. Code bloat: I share the concern for code bloat. As of such, I'm curious why there are methods such as ""getAsString()"" and other data types for JsonArray that throws an unique exception if there are more than 1 element in the array.

I do however not feel that adding these convenience methods are bloating the code. I would be surprised if I'm the only one who create a wrapper for Gson to avoid the extensive code you'll need whenever you're dealing with JSON input where some fields are optional.
 =||= 1. Get as BooleanWrapper is package private, not part of the public API. We can remove it if needed.
2. If we were to redo the API, these methods will probably not make the cut. They did seem like a good idea at the time we created Gson.
   With the newer releases of Gson, the DOM style API of JsonElement and subclasses is not really needed. 

I am curious, what kind of wrapper are you creating for Gson. 
 =||= I did not see that getBooleanAsWrapper() was package private, that is a fair point.

The wrapper I'm creating do exactly the same as the convenience methods I added to JsonObject: Return a default value when the member I want doesn't exist in the JSON. In all the last three projects I've used Gson I've been in the situation that some data is optional (and if not present, a default value is to be used). All these projects have been work related and I don't have access to the code now (on vacation), but basically I create an utility class with methods for all getAs...() methods, like this:

``` java
    public static String getAsString(JsonObject object, String member, String defaultValue) {
      JsonPrimitive primitive = object.getAsJsonPrimitive(member);
      String value = null;
      if (primitive != null)
        value = primitive.getAsString(member);
      return value != null ? value : defaultValue;
    }
```

(I'm coding by head here, I could dig up the exact code in some days when I'm back at work, but I assume the above example shows well enough what the wrappers I'm creating do). In short terms: Methods just like the ones I added to JsonObject, in a utility class.
As such, the convenience methods I've added are by no means crucial, the problem can be solved by such wrapper methods. I'm however not the only developer in the project, other developers may very well overlook the utility class and create their own solutions, which in the long term will create messy code. This is less likely to happen when the library itself present these convenience methods.

I did create a very simple example in one of the commit messages, here's a slightly larger example that hopefully shows that parsing even more complex JSON structure can lead to fairly unreadable code without convenience methods:

``` json
    {
      ""optional1"": {
        ""optional2"": {
          ""optional3"": {
            ""valueWanted"": ""FooBar""
          }
        }
      }
    }
```

With convenience methods:

``` java
    JsonObject defObject = new JsonObject();
    String valueWanted = json.getAsJsonObject(""optional1"", defObject)
      .getAsJsonObject(""optional2"", defObject)
      .getAsJsonObject(""optional3"", defObject)
      .getAsString(""valueWanted"", ""optionalDefaultValue"");
```

Without convenience method, something like this:

``` java
    String valueWanted = null;
    JsonObject jsonObj = json.getAsJsonObject(""optional1"");
    if (jsonObj != null) {
      jsonObj = jsonObj.getAsJsonObject(""optional2"");
      if (jsonObj != null) {
        jsonObj = jsonObj.getAsJsonObject(""optional3"");
        if (jsonObj != null) {
          JsonPrimitive wanted = jsonObj.getAsJsonPrimitive(""valueWanted"");
          if (wanted != null)
            valueWanted = wanted.getAsString();
        }
      }
    }
    // if we want a default value when member is missing:
    if (valueWanted == null)
      valueWanted = ""defaultValue"";
```

From my point of view it would be beneficial if these methods were within the library rather than creating a utility class in projects using Gson, but I do see your point about code bloating. I feel these methods would be within the gist of Gson and not actually bloat the code significantly, if you feel differently that's well understandable.
 =||= Thanks for the details. Yes, having a default object option for getters may be convenient and is similar to the pattern followed elsewhere (such as with Android preferences). Will keep an open mind in adding these.

Overall, I would recommend that you use the binding to Java classes instead of dealing with JsonElement parse trees directly. Also, overall, Gson has moved towards TypeAdapters since they don't generate the parse tree and are more efficient in memory and performance.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
646toJson stops with work still to doParker YoungParker828306/21/15, 09:55:01 PM"This is quite the interesting one, but I can't seem to figure out why this is happening...

Whenever I try to serialize a List<${myCustomObject}>, it serializes just fine...to a point. At some point, it just stops, in the middle of a value:

``` json
    ""question"": ""CELEBRITY TWEET! 2:49 PM - 15 Nov 13 Richard Simmons\u0027 Twitter handle @TheWeightSaint tweeted: \""At the airport ____ everyone.\"""",
    ""truth"": ""Hugging""
  },
  {
    ""keyword"": ""Smuggle"",
    ""question"": ""In 2010, Customs officers on the Morway-Sweden border intercepted a 
```

The file just ends there. I can't seem to figure out why.

My Gson object is created like so:

``` java
    public static final Gson GSON = new GsonBuilder().registerTypeAdapter(Question.class, new JsonQuestion()).setPrettyPrinting().create();
```

Where JsonQuestion is a custom object implementing JsonDeserializer and JsonSerializer.

I invoke it like so:

``` java
Constants.GSON.toJson(questionsToWrite, new FileWriter(jsonFile));
```

Where jsonFile is a File object, and questionsToWrite is the List.

Again, it works fine, but stops randomly with a good 20-30 elements to go in the list.

Using Gson 2.3.1""To isolate the problem, can you read your file in a String first, and then pass it through Gson?
 =||= I'm not sure I'm understanding what you're asking...
 =||= Sorry, I miswrote.
Since you are serializing, can you do String json = toJson(questionsToWrite) and then see if the serialization produced correct output.
 =||= Ah, I see. Yes, I will try that next opportunity I get.
 =||= You're probably forgetting to close the JsonWriter or stream.
 =||= You mean the file writer that I construct upon calling toJson?
 =||= Yeah, that or whatever `JsonWriter`/`OutputStreamWriter` you're wrapping it with.
 =||= I'm not wrapping it with anything. I put all the gson code in the issue. The serializers work for all the elements prior to that one spot. And the one spot changes sometimes.
 =||= Yeah, you're doing it wrong. You need to do this:

```
FileWriter fileWriter = new FileWriter(jsonFile);
Constants.GSON.toJson(questionsToWrite, fileWriter);
fileWriter.close();
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
648Android M: Cannot make field constructor accessibleJake WhartonJakeWharton08/23/16, 07:46:28 PM"```
D/Retrofit﹕java.lang.SecurityException: Can't make field constructor accessible
            at java.lang.reflect.Constructor.setAccessible(Constructor.java:334)
            at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:97)
            at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:79)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:82)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
            at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
            at com.google.gson.Gson.getAdapter(Gson.java:359)
            at com.google.gson.Gson.fromJson(Gson.java:809)
            at com.google.gson.Gson.fromJson(Gson.java:775)
            at retrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)
            at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:367)
            at retrofit.RestAdapter$RestHandler.access$100(RestAdapter.java:220)
            at retrofit.RestAdapter$RestHandler$2.obtainResponse(RestAdapter.java:278)
            at retrofit.CallbackRunnable.run(CallbackRunnable.java:42)
            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)
            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
            at retrofit.Platform$Android$2$1.run(Platform.java:142)
            at java.lang.Thread.run(Thread.java:818)
```

Originally filed at https://github.com/square/retrofit/issues/870.

Note: this might be a bug in the preview OS runtime and not Gson, but it's definitely not a Retrofit problem.""Maybe relevant: http://developer.android.com/preview/behavior-changes.html#behavior-art-runtime

Not exactly the cause here, but not surprising that since it's in the same vein it might have been effected.
 =||= @JakeWharton I tried simulate this error without success. 
I used the android emulator with api version 22. Can you provide more information like device and the class that generated the problem?
 =||= Are we trying to deserialize an instance of `java.lang.reflect.Field` ? It's pretty reasonable that that doesn't work. Here's a snippet of `Constructor.java`:

```
    public void setAccessible(boolean flag) {
        Class<?> declaringClass = getDeclaringClass();
        if (declaringClass == Class.class) {
            throw new SecurityException(""Can't make class constructor accessible"");
        } else if (declaringClass == Field.class) {
            throw new SecurityException(""Can't make field constructor accessible"");
        } else if (declaringClass == Method.class) {
            throw new SecurityException(""Can't make method constructor accessible"");
        }
        super.setAccessible(flag);
```
 =||= Seems a reasonable guess. This isn't my original bug, I was just moving it from a project I work on.
 =||= I get this with an app on a Nexus 6 running Android M.
 =||= just updated the Nexus 5 to the latest Android M preview and getting the same error. As it was working before, it seems to be only a problem with the most recent version of Android M (Build MPA44I)?
 =||= Hopefully Google will fix it before releasing Android M. Gson is used in a fairly large number of Android projects, and breaking them will be a big no no.
 =||= @cdreier are you using Gson on an instance of java.lang.reflect.Field? That's superweird. 

The right fix for this is to write a type adapter for that class.
 =||= @swankjesse no, i'm using Retrofit for a few rest-calls. I think i figured out a bit more, perhaps something changed in the List interface?

Simple Retrofit service:

``` java
    public interface SynchronisationService {
        @GET(""/rooms/all"")
        public void getAll(Callback<List<Room>> rooms);
    }
```

`Room` is a stupi POJO, but with a List of light-switches... 

``` java
    public class Room {

        private String name;
        private int id;

        private List<LightSwitch> switches;

        /** ... **/
    }
```

Response is something like this:

``` json
    [
        {
            ""name"": ""livingroom"",
            ""id"": ""1"",
            ""switches"": [
                {
                    ""name"": ""big lamp"",
                    ""id"": ""1""
                },
                {
                    ""name"": ""smaller lamp"",
                    ""id"": ""2""
                }
            ]
        }
    ]
```

**Without this switch-list in my room, everything is working fine!**
If i want Retrofit / gson to parse my switch-list directly in the room, im getting the stacktrace Jake Wharton posted.
 =||= You can try  adding GsonConverter 

``` java
new GsonConverter(new GsonBuilder()
                .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
                .serializeNulls()
                .create())
```

In your RestAdapter.Builder()

``` java
RestAdapter.Builder()
                .setConverter(new GsonConverter(new GsonBuilder()
                        .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
                        .serializeNulls()
                        .create()))
                .setEndpoint(endPoint)
                .build()
```
 =||= I am using Retrofit and GSON in a project and only encountered this issue on Android M after replacing SugarORM with ActiveAndroid.
 =||= Is there any progress with this one? It is present with the official Android 6 release. 
 =||= We experienced this same issue on our app on official Android 6 release. Adding this to our GsonBuilder as seen above seemed to resolve the issue.

``` Java
new GsonBuilder()
            .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
```
 =||= perhaps something changed with the reflection api in android 6? 
my workaround was to declare these fields causing the error as transient.

``` java
public class Switch {
    public String name;
    public Room room;
    public int id;

    private transient SwitchService switchService;

}
```
 =||= yeah @crowdcast-hk already resolve this issue. its work.
 =||= It seams  bug has been fixed in new version (2.4) .
""com.google.code.gson:gson:2.4""
 =||= upgraded to 2.4 but app still crashes with the same exception on Marshmallow
 =||= Did you try to exclude fields with modifiers?
new GsonBuilder().excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
 =||= @inisic if you need to add these lines, problem is not fixed :)

In my case, I don't use gson with retrofit (only gson) but i have the same problem.
If i only add

``` java
.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
```

problem is still here. To solve my problem, i have to set

``` java
excludeFieldsWithoutExposeAnnotation()
```

But i have to expose all fields i need ><. Is there a way to know where is the problem ? In the stacktrace, there is no reference to my code
 =||= This exclude(excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC) didn't help me. Class which extends Object is deserialized correctly, but classes which extends Model from ActiveAndroid throws exception. I found only one solution => write custom deserializer. I hope this is only temporary solution and this will be fix at GSON library.
 =||= The cause continues to seem like the use of Class or Field in the
serialized object's fields without marking it transient. There is no reason
to be serializing either of these types.

On Tue, Oct 27, 2015, 9:02 PM DavidKrybus notifications@github.com wrote:

> This exclude(excludeFieldsWithModifiers(Modifier.FINAL,
> Modifier.TRANSIENT, Modifier.STATIC) didn't help me. Class which extends
> Object is deserialized correctly, but classes which extends Model from
> ActiveAndroid throws exception. I found only one solution => write custom
> deserializer. I hope this is only temporary solution and this will be fix
> at GSON library.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/648#issuecomment-151687960.
 =||= I'm in the same boat. My tests pass running in API 22, but fail for API 23.
 =||= I had the same issue. I'm using Gson with Retrofit and ActiveAndroid. 

The solution with

```
excludeFieldsWithoutExposeAnnotation()
```

suggested by @aat-antoine works for me.
 =||= Im using Retrofit + Gson so I used the excludeFIeldsWithouAnnotation() option and it worked.

```
Retrofit retrofit =
        new Retrofit.Builder()
                .baseUrl(Api.ENDPOINT)
                .addConverterFactory(
                        GsonConverterFactory.create(new GsonBuilder()
                                .excludeFieldsWithoutExposeAnnotation()
                                .create()))
                .client(new OkHttpClient())
                .build();
```
 =||= @jirivrany Thanks `excludeFieldsWithoutExposeAnnotation()` worked for me.
 =||= I'm having this issue on Android M as well. Any idea what `Can't make field constructor accessible` refers to? I think setting _that_ to `transient` would be a better solution than using the `@Expose` property on every single member.
 =||= You’re using `Gson` to encode an instance of `java.lang.reflect.Field`. Don’t do that.
 =||= @swankjesse That's an log error I'm getting (along with everyone else using `Gson` in this thread) while using the default `Gson` instance  on Android 6.0.

Anyone using ActiveAndroid having problems using the `.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)` workaround? Any data that is persisted using the default `GsonBuilder()` and then models deserialized with the new exclude rule causes some errors querying / storing models deserialized against this new rule.
 =||= @AeroEchelon I was trying to use ActiveAndroid and Gson and my workaround is fine for parsing the data with gson, but when I try to save fields that have relationships it doesnt work.
 =||= I use Gson's ExclusionStrategy to skip `java.lang.reflect.Field` and `java.lang.reflect.Method`, my simple demo.

```
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    String json = ""{\""name\"": \""Ricky\"", \""age\"": 25}"";

    ExclusionStrategy exclusionStrategy = new ExclusionStrategy() {

        @Override
        public boolean shouldSkipField(FieldAttributes fieldAttributes) {
            return false;
        }

        @Override
        public boolean shouldSkipClass(Class<?> clazz) {
            return clazz == Field.class || clazz == Method.class;
        }
    };

    Gson gson = new GsonBuilder()
            .addSerializationExclusionStrategy(exclusionStrategy)
            .addDeserializationExclusionStrategy(exclusionStrategy)
            .create();

    // Student is a simple class extends com.activeandroid.Model
    Student student = gson.fromJson(json, Student.class);
    student.save();

    List<Student> students = new Select().from(Student.class).execute();
    if (students != null && students.size() > 0) {
        Student stu = students.get(0);
        Log.d(""zlx"", stu.name + ""'s age: "" + stu.age);
    }
}
```
 =||= I  had the same problem when using Retrofit + Gson + ActiveAndroid, but when i insert this line excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)"" in my GsonBuilder() it worked, but I do not understand what happened :(
 =||= :+1:  to `excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)`
 =||= @jirivrany  `excludeFieldsWithoutExposeAnnotation()`work for me
 =||= i tried this like   

Gson gson = new GsonBuilder().excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)
                .excludeFieldsWithoutExposeAnnotation()
                .create();

retrofit = new Retrofit.Builder()
               .baseUrl(BASE_URL)
               .addConverterFactory(GsonConverterFactory.create(gson))
               .client(httpClient)
               .build();

but still getting same error. i am using retrofit + GSON+ Active Android.
what should i do for this...
 =||= I'm using OkHttp + Gson + ActiveAndroid

```
GsonBuilder builder = new GsonBuilder();
builder.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC);
Gson gson = builder.create();
```

work for me
 =||= This continues to look like the serialization of `java.lang.reflect.Field` or `java.lang.reflect.Method`. No action to take.
 =||= I'm using Retrofit+ Gson + ActiveAndroid

GsonBuilder builder = new GsonBuilder();
builder.excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC);
Gson gson = builder.create();

worked for me
 =||= Mmm. Did you using extension of Kotlin language?
I have same problem when using kotlin extension, details below:

I've writen function exension for base model:

`ModelExtension.kt`

```kotlin
fun Model.toJson(): String {
   return try {
      Gson().toJson(this@toJson, Model::class.java)
   } catch(exception: Exception) {
      ""{}""
   }
}
```

I move it into `Model` class and it solve my problem... =||= > I use Gson's ExclusionStrategy to skip `java.lang.reflect.Field` and `java.lang.reflect.Method`, my simple demo.
> 
> ```
> @Override
> protected void onCreate(Bundle savedInstanceState) {
>     super.onCreate(savedInstanceState);
> 
>     String json = ""{\""name\"": \""Ricky\"", \""age\"": 25}"";
> 
>     ExclusionStrategy exclusionStrategy = new ExclusionStrategy() {
> 
>         @Override
>         public boolean shouldSkipField(FieldAttributes fieldAttributes) {
>             return false;
>         }
> 
>         @Override
>         public boolean shouldSkipClass(Class<?> clazz) {
>             return clazz == Field.class || clazz == Method.class;
>         }
>     };
> 
>     Gson gson = new GsonBuilder()
>             .addSerializationExclusionStrategy(exclusionStrategy)
>             .addDeserializationExclusionStrategy(exclusionStrategy)
>             .create();
> 
>     // Student is a simple class extends com.activeandroid.Model
>     Student student = gson.fromJson(json, Student.class);
>     student.save();
> 
>     List<Student> students = new Select().from(Student.class).execute();
>     if (students != null && students.size() > 0) {
>         Student stu = students.get(0);
>         Log.d(""zlx"", stu.name + ""'s age: "" + stu.age);
>     }
> }
> ```

This worked for me, thanks @zhenglingxiao  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
649Added support for duplicate keys in Map while deserializing. The last…Inderjeet Singhinder12308/31/21, 05:14:15 PM… value overrides any previous values."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it

On Sat, May 30, 2015 at 4:23 PM, googlebot notifications@github.com wrote:

> Thanks for your pull request. It looks like this may be your first
> contribution to a Google open source project, in which case you'll need to
> sign a Contributor License Agreement (CLA).
> 
> [image: :memo:] _Please visit https://cla.developers.google.com/
> https://cla.developers.google.com/ to sign._
> 
> Once you've signed, please reply here (e.g. I signed it!) and we'll
> 
> ## verify. Thanks.
> - If you've already signed a CLA, it's possible we don't have your
>   GitHub username or you're using a different email address. Check your
>   existing CLA data https://cla.developers.google.com/clas and verify
>   that your email is set on your git commits
>   https://help.github.com/articles/setting-your-email-in-git/.
> - If you signed the CLA as a corporation, please let us know the
>   company's name.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/649#issuecomment-107098777.

## 

http://www.singhinderjeet.com/
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= I think this is a bad idea. It should reject invalid JSON.
 =||= Jesse: Can you point me to the spec that says that it is invalid JSON?
Also, we do support it for objects. Why treat it differently for Maps?
 =||= @swankjesse I think Gson should be lenient in accepting JSON. Also, I can't seem to find spec that says that duplicate keys are not allowed.
 =||= From the [JSON RFC](https://tools.ietf.org/html/rfc7159):

> An object whose names are all unique is interoperable in the sense
> that all software implementations receiving that object will agree on
> the name-value mappings.  When the names within an object are not
> unique, the behavior of software that receives such an object is
> unpredictable.  Many implementations report the last name/value pair
> only.  Other implementations report an error or fail to parse the
> object, and some implementations report all of the name/value pairs,
> including duplicates.

Duplicate keys is a potential security hole, and I'm against them. 
 =||= @swankjesse The spec says ""The names within an object SHOULD be unique.""  It is a SHOULD not a MUST. In fact, the para you quote implies that names can be duplicate, and many implementations pick the last name/value.

Can you elaborate on the security hole specific to this case? Clients should always validate user input anyway, I don't see duplicate keys causing any extra issues.

Overall, for Gson, we are generally lenient while receiving input. In fact, we already do that for duplicate keys in JsonObject. Applying a higher level of strictness to Map sounds a little arbitrary.
 =||= The security hole is that you validate the first occurrence of a value, but use the last occurrence, or vice-versa. For example, you might write code like this:

```
  public boolean userHasLimitedPermissions(String json) {
    JsonReader r = new JsonReader(...);
    r.beginObject();
    while (r.hasNext()) {
      String key = r.nextKey();
      String value = r.nextString();
      if (key.equals(""userid"")) return !value.equals(""root"");
    }
    r.endObject();
  }
```

Bugs like this happen all the time. Most recently the Android code that checks signatures on `.apk` files failed on this.

It's a bug that we permit duplicates in JsonObject, but a more defensible one: checking the alternative there is more work.

Here's a better question: who wants this? Nobody sane should be using JSON that has duplicated keys.
 =||= What is status of this commit? Will Gson have ability to control duplicated key behavior?
 =||= @swankjesse Someone who wants this is me - for example recent versions of the RabbitMQ management API have a bug where duplicate keys are, in fact, returned: https://github.com/rabbitmq/rabbitmq-management/issues/278 This causes our deserialisation with GSON to fail. It has since been fixed, but we need to support all versions in our library.

In the real world, you can't always control what data you get, but might still need to be able to handle it somehow.

If GSON cannot support this, we'll need to switch library, which would be a shame since GSON is otherwise convenient and easy to work with. So either an option to fail versus ignore duplicates, or changing the current behaviour, would be preferable.
 =||= @svetob you.can install your own TypeAdapter to workaround this I'd you like. It’s a few lines of code to write the adapter and install it.
 =||= @svetob this is a terrible idea. If all JSON parsers behaved this way we would discover https://github.com/rabbitmq/rabbitmq-management/issues/278 much later. =||= If we were going to do this it would certainly be via a configurable option, as in #1884. I think we can close this old PR in favour of that one. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
651How to decode JsonObject in JsonObject?booker010806/10/15, 03:18:50 PM"Hi, all.

I am a newbie to GSON and I would like to ask how can I decode below object into my custom class object.

{
        ""uid"": ""2"",
        ""title"": ""TITLE_HERE"",
        ""description"": ""DES_HERE"",
        ""type"": ""1"",
        ""message_type"": ""7"",
        ""option_1"": [
          {
            ""option_1"": ""Q1"",
            ""option_1_1"": ""Q11"",
            ""option_1_2"": ""Q12"",
            ""option_1_3"": ""Q13""
          }
        ],
        ""option_2"": [
          {
            ""option_2"": ""Q2"",
            ""option_2_1"": ""Q21"",
            ""option_2_2"": ""Q22"",
            ""option_2_3"": ""Q23""
          }
        ],
        ""option_3"": [
          {
            ""option_3"": ""Q3"",
            ""option_3_1"": ""Q31"",
            ""option_3_2"": ""Q32"",
            ""option_3_3"": ""Q33""
          }
        ],
        ""option_other"": """",
        ""status"": ""3"",
        ""read"": ""0"",
        ""att_get"": ""0"",
        ""attachment"": ""0""
      }

How can I decode those ""options""?""Please post questions like this to: https://groups.google.com/forum/#!forum/google-gson
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
652Fix issues if runing in an environment with a Turkish localeSebastian Chlanschlan08/08/15, 04:10:48 PM"### Description

When using `LOWER_CASE_WITH_DASHES` or `LOWER_CASE_WITH_UNDERSCORES` as FieldNamingPolicy it could happen that certain fields won't get serialized/deserialized. 
I've seen that behavior on devices with a turkish (`tr-TR`) locale. `toLowerCase()` uses the device's locale and converts an `I` into an `ı`. ([JavaDoc](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase%28%29))
### Example

A field with the name: 

```
...
int lowerId = 8;
....
```

will turn into:

```
{ ... 'lower-ıd':8 ... }
```
### Recreation steps

Check out the first commit (299ee89) and run the test with the following JVM flags:  `-Duser.language=tr -Duser.region=TR`
### References

https://code.google.com/p/google-gson/issues/detail?id=541
http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= :+1: 
Thanks for the fix.
 =||= "Fix issues if runing in an environment with a Turkish localeSebastian Chlanschlan08/08/15, 04:10:48 PM"### Description

When using `LOWER_CASE_WITH_DASHES` or `LOWER_CASE_WITH_UNDERSCORES` as FieldNamingPolicy it could happen that certain fields won't get serialized/deserialized. 
I've seen that behavior on devices with a turkish (`tr-TR`) locale. `toLowerCase()` uses the device's locale and converts an `I` into an `ı`. ([JavaDoc](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase%28%29))
### Example

A field with the name: 

```
...
int lowerId = 8;
....
```

will turn into:

```
{ ... 'lower-ıd':8 ... }
```
### Recreation steps

Check out the first commit (299ee89) and run the test with the following JVM flags:  `-Duser.language=tr -Duser.region=TR`
### References

https://code.google.com/p/google-gson/issues/detail?id=541
http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()"NaNSebastian Chlan06/09/15, 02:17:08 PMFieldNamingPolicy: Use Locale.ENGLISH to be locale insensitive1
654Add the plain, basic visitor pattern to JsonElement and childrenOlivier Grégoireogregoire06/24/15, 03:46:15 AM"I'm trying to develop several utilities to extend gson, mostly based on `JsonElement`, meaning that I don't parse directly to an object.

I'm referring to the following kind of extensions: an xpath-like mechanism, a css-like selector, batch modifications (avoiding the cost of reflection), etc.

Technically I can do without, as I've made a 20+ lines external implementation using only the `JsonElement` and its four public children but still, I feel like it's something that misses as a hierarchical data structure.""When we first wrote Gson, we did add a visitor pattern for it. It was quite unsatisfying though, so we removed it from the final release. Now, I am not sure what is a good design for it: is it a visitor, or an xpath like mechanism. If you have a proposal, please share. Thanks.
 =||= Well, the visitor pattern is, in my view, the very base for everything that uses a tree. A selection mechanism like xpath is interesting and might be more user friendly (that's why I'm implementing it) but to do so I need to be able to traverse the element tree.

How I would do it?

The base is rather clear: an interface `JsonTraverser`:

``` Java
public interface JsonTraverser {
  default public void visit(JsonObject jsonObject) { }
  default public void visit(JsonArray jsonArray) { }
  default public void visit(JsonPrimitive jsonPrimitive) { }
  default public void visit(JsonNull jsonNull) { }
}
```

Then in `JsonElement`, there'd exist the ""accept"" method: `visiting(JsonTraverser traverser)`.

``` Java
public abstract class JsonElement {
  ...
  void visiting(JsonTraverser traverser) { throw new RuntimeException(""Not implemented""); }
  ...
}
```

Then each implementation extends the `visiting` method:

`JsonObject`

``` Java
  @Override void visiting(JsonTraverser traverser) {
    traverser.visit(this);
    this.entrySet().forEach(e -> e.getValue().visiting(traverser));
  }
```

`JsonArray`

``` Java
  @Override void visiting(JsonTraverser traverser) {
    traverser.visit(this);
    this.forEach(e -> e.visiting(traverser));
  }
```

`JsonPrimitive`

``` Java
  @Override void visiting(JsonTraverser traverser) { traverser.visit(this); }
```

`JsonNull`

``` Java
  @Override void visiting(JsonTraverser traverser) { traverser.visit(this); }
```

Now the question of the entry point. That's a bit fuzzy. As you've seen the methods are package-private, that's to avoid showing too much. So I'd add the following:

``` Java
public final class JsonTraversers {
  private JsonTraversers () { }
  public static void traverse(JsonElement element, JsonTraverser traverser) {
    element.visiting(traverser);
  }
}
```

With this approach and in terms of API, none of the 5 classes are impacted: only an interface and the entry point are added.

The only actual impact is if somehow there exist other `JsonElement` implementations (since the default constructor is public for some reason). In that case, making all the methods public as well isn't an issue (though, I'd reduce the visibility of the `JsonElement` constructor if it were up to me).

With such an implementation, it's become very easy to implement the functionalities I'm developing like the xpath selector, the batch modifications, etc.
 =||= Thanks for the detailed explanation. We had something similar to this. It was an unsatisfying approach. Adds too much API code for a minor use-case. We decided to let the third-parties write such a visitor themselves.
 =||= Thanks for considering, even though I'm not really sure I understand the reasons of refusal given the facts that none of the existing API is touched and that,  you said it yourself, each person has to write it him/herself. The pattern itself is quite discreet and isn't really a minor use-case given that `JsonElement` is exposed.

Anyways, as I mentioned, I've already an implementation that uses the existing API so it's no big deal for me.
 =||= It adds some conceptual weight to the API. The names of class and methods are a little unsatisfying.
Also, when you talk about traversal, why support only Depth-first traversal? Why not breadth-first as well?
Actually, in your implementation, JsonTraverser needs only one method instead of four.
visit(JsonElement element);
Why did you consider one for each sub-class of JsonElement.
 =||= _Unsatisfying class names_: I'm not a native English speaker. If you have better names, I'm entirely open.

_Depth-first vs. Breadth-first_: This was written quickly without any other consideration in order to answer your question.

_One method per subclass_: That's the goal of the visitor pattern. A few known implementations in a hierarchical standard are perfect for it. You implement only the methods for what you want to visit. All the Primitives ? Ok, implmeent only one method. All the containers? Right, implement only the JsonArray and JsonObject methods. Future implementations come in? Well, there's only one default method to add instead of all implementation to adapt to make sure we're still compatible with everything without breaking the existing visitors.

But it seems you've made your mind a long time ago. So unless you're really thinking about doing it, I suggest to close this issue.
 =||= You are partly right: I made up my mind a long time ago, and was hoping that someone will come up with a much better rendition of the visitor pattern that I did. So far, it is elusive, though yours is somewhat better than mine.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
656Update ReflectiveTypeAdapterFactory.javaDsWorkskeychen06/17/15, 06:03:21 PMfit declares multiple JSON fields named"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||=  I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= I don't think we want this behavior change.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
657There is no I/O writing to a StringWriter.Jake WhartonJakeWharton06/18/15, 02:15:34 AMNaN"Source incompatible!
 =||= "There is no I/O writing to a StringWriter.Jake WhartonJakeWharton06/18/15, 02:15:34 AMNaNNaNJake Wharton06/18/15, 02:00:03 AMThere is no I/O writing to a StringWriter.1
658Add Travis CI build.Jake WhartonJakeWharton06/18/15, 02:48:27 AMNaNNaNAdd Travis CI build.Jake WhartonJakeWharton06/18/15, 02:48:27 AMNaNNaNJake Wharton06/18/15, 02:10:06 AMAdd Travis CI build.1
659Add gitignore for Maven, Eclipse, IDEA, and OSX files.Jake WhartonJakeWharton06/18/15, 02:55:15 PMNaN":+1: 
 =||= "Add gitignore for Maven, Eclipse, IDEA, and OSX files.Jake WhartonJakeWharton06/18/15, 02:55:15 PMNaNNaNJake Wharton06/18/15, 02:32:15 PMAdd gitignore for Maven, Eclipse, IDEA, and OSX files.1
660added a strategy to manage unknown fields during deserializationmcerina06/20/15, 07:30:54 AM"See issue https://github.com/google/gson/issues/188
While I understand the design choice of ignoring unknown fields during deserialization by default, I definitely think that there are use cases in which throwing an exception, or at least being able to log something is preferred.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Appreciate you taking the time to write this. However, I think the usecase for this is too infrequent to warrant inclusion in standard Gson. Also, the approach is too narrow (for just unknown properties). We have had many requests to provide ability to intercept and validate a Gson generated instance. We would like to see a simple elegant solution to the broader issue.
 =||= It is quite frequent. And I would reject solutions as not good enough only when there are other better alternatives presented. But it doesn't look like @inder123 is going to come up with any idea regarding this at all.
 =||= I would agree that this is a common problem. For instance, a client sends a JSON object with a field name misspelled.  If it is valid for that field to be omitted, you would never know that there was an issue.  It would simply get silently ignored.
 =||= I would like to have a choice to decide whether GSON should ignore unknown fields or should reject such requests. Sadly, I'm switching now to Jackson to get that.
 =||= @inder123 I see a comment from you from over a year ago where you mention many requests like this one to support validation ... can you point me to a discussion where you are working on a more general and elegant solution? If not, please reconsider this PR as it is a simple and elegant approach to the specific problem of receiving unexpected fields in the JSON.
 =||= I agree that the user should have the choice.
 =||= ""I think the usecase for this is too infrequent to warrant inclusion in standard Gson""

We would like this use case - and from the looks of the comments so do many others.  Jackson has this feature and it seems fairly frequently used (do a search on tutorials and examples).

""Also, the approach is too narrow (for just unknown properties). We have had many requests to provide ability to intercept and validate a Gson generated instance. We would like to see a simple elegant solution to the broader issue.""

That maybe the case, but we came here looking for this exact feature, and only this feature.  We want a way to be be able to detect/intercept additional fields in the JSON so that we can report/handle fields that we were not expecting.  We spent quite a while trying to shoe-horn this feature in, and there are no hooks available to us to provide this functionality without duplicating all of the core type adapter factory and its supporting classes - that seems a tad wasteful.

We took a quick review of the PR code, and it seems very simple, logical and well thought out.  Keep the default behavior as is, and existing users wont have to change any code.  Provide the builder option and everyone is happy/happier. :-)

+1 for taking this PR.
 =||= Throwing Exception on encountering an unnknown fields seems weird. JSON is an extensible and flexible format: a client shouldn't be broken by adding a new property in JSON.

What about missing fields? Wouldn't you want a similar action?

A better way is to use https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java =||= @inder123 As @mcerina mentions in the first comment above, the UnknownFieldHandlingStrategy is extensible and could be used to just log unknown fields if throwing an exception doesn't suit your needs.

I looked at PostConstructAdapterFactoryTest and see that your test throws an exception when the sandwich is too cheesy ... and I can see how that could also be used to take some action if a ""required"" field was missing (i.e. still null during post construct validation) ... but I can't figure out how to use the PostConstructAdapterFactory to catch when an unknown field was present in the original JSON. Can you provide a code example of how the PostConstructAdapterFactory could be used to solve the OP's issue about handling unknown fields? =||= Can you deserialize the JSON object to get your Java object, then serialize your Java object back to JSON and see if you get the same result (compare the original JSON object to the converted Java JSON)! if not...extra fields! Haven't tried, yet, but this is just a thought. =||= I am looking for this feature right now. Is the reason for its absence just adherence to dogma?  =||= Still no solution for this problem.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
661Small error of documentationRicardo FariaRicardoRFaria06/27/15, 02:50:17 PMFixed name of class in JsonDeserializer.html as requested by the issue #626 "If you're going to fix the Javadocs, you should fix the original source code, not the generated output.
 =||= Sorry, my bad. I fixed in the class, it's a idiot fix, but only to close the issue.
 =||= Also, please http://rebaseandsqua.sh
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
663"fixed the error of printing new line for system that dont use '\n'"Guy Langford-Leegazzdingo08/08/15, 04:09:10 PMI have changed it so that it will work on more OS when you are wanting to print a new line "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I don't think this makes sense. JSON doesn't care what OS it's being generated on.
 =||= But on windows the pretty mode does not do pretty mode

On Thu, 9 Jul 2015 3:06 AM Jesse Wilson notifications@github.com wrote:

>  I don't think this makes sense. JSON doesn't care what OS it's being
> generated on.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/663#issuecomment-119616780.
 =||= Because it will not do a new line

On Thu, 9 Jul 2015 8:17 AM Guy Langford-lee guy@langford-lee.com wrote:

> But on windows the pretty mode does not do pretty mode
> 
> On Thu, 9 Jul 2015 3:06 AM Jesse Wilson notifications@github.com wrote:
> 
> >  I don't think this makes sense. JSON doesn't care what OS it's being
> > generated on.
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/google/gson/pull/663#issuecomment-119616780.
 =||= I think this is a bug in Windows. Please consider sending them a Pull Request!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
664Add a JSR-305 @ThreadSafe annotation to the Gson classStefan Ferstlferstl07/13/15, 05:47:37 PM"This PR solves Issue #613 that I submitted several months ago on Google Code.

Summary:
- Add an optional dependency to com.google.code.findbugs:jsr305.
  The optional scope is used in order to avoid introducing a new
  transitive dependency to the jsr305 library. This is fine because the 
  @ThreadSafe annotation has only a documentary purpose and it is not
  retained at runtime.
- Annotate the Gson class as @ThreadSafe""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed the CLA

On Mon, Jul 13, 2015 at 6:39 PM, googlebot notifications@github.com wrote:

> Thanks for your pull request. It looks like this may be your first
> contribution to a Google open source project, in which case you'll need to
> sign a Contributor License Agreement (CLA).
> 
> [image: :memo:] _Please visit https://cla.developers.google.com/
> https://cla.developers.google.com/ to sign._
> 
> Once you've signed, please reply here (e.g. I signed it!) and we'll
> 
> ## verify. Thanks.
> - If you've already signed a CLA, it's possible we don't have your
>   GitHub username or you're using a different email address. Check your
>   existing CLA data https://cla.developers.google.com/clas and verify
>   that your email is set on your git commits
>   https://help.github.com/articles/setting-your-email-in-git/.
> - If you signed the CLA as a corporation, please let us know the
>   company's name.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/664#issuecomment-120989107.
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= @swankjesse  I dont like this pull request. It adds an unncessary dependency to Gson. I am not sure the benefit is all that much. Can we revert this please?
 =||= @inder123 @swankjesse Since the dependency is declared as `optional`, it will neither be resolved nor downloaded when Gson is used as a dependency.
That was exactly my intention.
 =||= I don't feel strongly either way.
 =||= (Which is to say, if you want to rollback, I'll merge!)
 =||= If you revert this PR, please document at least in the Javadoc that the Gson class is thread-safe. Otherwise one has to assume that it is not (which makes things complicated and slow if you want to use Gson in a multi-threaded environment).
 =||= @ferstl  @swankjesse  I am not sure entirely how optional dependencies work. I thought they work fine when you use reflection to lookup code.

Since Gson class has the ThreadSafe annotation added, the dependency will get forced, isn't it? Otherwise, we will have compilation error. Correct?
 =||= @inder123 @swankjesse [Here](https://maven.apache.org/pom.html#Dependencies) is a good description about optional dependencies.

You will have the new dependency when you are compiling Gson. But when you use Gson as a dependency, it will be ignored entirely. This also won't cause any errors at runtime because the `ThreadSafe` annotation's retention policy is `CLASS`.

Btw, Guava does [exactly the same](https://github.com/google/guava/blob/master/guava/pom.xml#L25).
 =||= @ferstl  Thanks for the explanation.
Retention policy class definition from Javadoc: Annotations are to be recorded in the class file by the compiler but need not be retained by the VM at run time.

This to me indicates that any library using Gson will probably need ThreadSafe while compiling, but it is possible that the compiler ignores annotations with missing classes. I will try it out and see what this leads to. 
 =||= As we are readying for a new release, I am having second thoughts on this one.
So far Gson has avoided all external dependencies. So I would like to continue doing the same. I will update the Gson documentation to indicate Threadsafe. I will revert this change.
 =||= "Add a JSR-305 @ThreadSafe annotation to the Gson classStefan Ferstlferstl07/13/15, 05:47:37 PM"This PR solves Issue #613 that I submitted several months ago on Google Code.

Summary:
- Add an optional dependency to com.google.code.findbugs:jsr305.
  The optional scope is used in order to avoid introducing a new
  transitive dependency to the jsr305 library. This is fine because the 
  @ThreadSafe annotation has only a documentary purpose and it is not
  retained at runtime.
- Annotate the Gson class as @ThreadSafe"NaNStefan Ferstl07/13/15, 04:34:38 PM"Add a JSR-305 @ThreadSafe annotation to the Gson class

- Add an optional dependency to com.google.code.findbugs:jsr305.
  The optional scope is used in order to avoid introducing a new
  transitive dependency to the jsr305 library. This is fine because the 
  @ThreadSafe annotation has only a documentary purpose and it is not
  retained at runtime.
- Annotate the Gson class as @ThreadSafe

Fixes Issue #613"1
665Create a generalized serializer/deserializer that can interpret AutoValue types and do the right thing.Christian Edward Grubercgruber07/14/15, 02:34:00 AM"Autovalue is massively convenient, and GSON is very convenient.  Having some ways to ease integration between the two might prove quite powerful.

Serialization is largely taken care of, since an AutoValue instance has its generated private fields which can be read and written out.  AutoValue ensures fields are in property-declaration-order in the generated subclass, so as long as Java keeps field order in reflection consistent, it's fine. 

The more pertinent issue is creation/deserialization

I see two approaches: 

What I have in mind right now is an automatic deserializer which would reflectively figure out the constructor based on field order (which is declaration order for AutoValue, and aligns with the constructor.  A variant could detect whether there was a builder and use that.

An alternative would be an autovalue plugin which generated a gson serializer/deserializer as it was generating the autovalue implementation. That might be better in several respects, but requires that autovalue support pluggable extensions.  Not sure if it is there yet. (@eamonnmcmanus ?)  ""@rharter is currently working on AutoValue extensibility in https://github.com/google/auto/pull/237.
 =||= It's almost trivial to build a Gson TypeAdapterFactory that supports all AutoValue types. In fact, here it is:

```
    class AutoValueTypeAdapterFactory implements TypeAdapterFactory {
      @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        TypeToken<?> autoValueClass = autoValueClass(type);
        if (autoValueClass != null) {
          return (TypeAdapter<T>) gson.getDelegateAdapter(this, autoValueClass);
        }
        return null; // Not an AutoValue type.
      }

      /** Returns the generated implementation type for {@code type} if it has one. */
      private TypeToken<?> autoValueClass(TypeToken<?> type) {
        // TODO: does AutoValue have an API for this or do I need to do it manually?
      }
    }
```
 =||= Im sorry... How exactly does this adapter as written create the autovalue?

On Mon, Jul 13, 2015, 19:34 Jesse Wilson notifications@github.com wrote:

> Closed #665 https://github.com/google/gson/issues/665.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/665#event-354969277.
 =||= Gson creates it reflectively. Here's a full-working copy from a year ago: https://gist.github.com/JakeWharton/0d67d01badcee0ae7bc9
 =||= If you don't want reflection, write your own annotation processor to code gen type adapters and/or a type adapter factory.
 =||= Sorry... I didn't actually realize that we were generating a no-args constructor in auto-value generated classes.  Otherwise, the above would have made total sense when I looked at it.   I'm slightly surprised that we do, actually. 
 =||= Do you even need `@AutoGson` @JakeWharton?  Can't you just use `@JsonAdapter(YourAutoValueTypeAdapterFactory.class)` ?
 =||= And reflection is fine for my purposes. 
 =||= Yeah that works too. I've never used the linked gist, just wrote it to stop people complaining that AutoValue / AutoParcel needed explicit Gson support.
 =||= @cgruber there's no no-args constructor. Gson is magic.
 =||= (Here's the [latest incarnation](https://github.com/square/moshi/blob/master/moshi/src/main/java/com/squareup/moshi/ClassFactory.java) of such magic, if you're curious)
 =||= So it'll basically make an instance using Unsafe.allocateInstance and then bang the values into the final fields using Field.setAccessible? I don't think that guarantees safe publication of the field values to other threads, does it? Also, since it doesn't execute the constructor logic, it doesn't verify that every field was actually present, which means that non-`@Nullable` fields could be null, violating their contract. And of course it won't work in environments where either Unsafe or Field.setAccessible are unavailable (App Engine, for one). So, it's way better than nothing, but not quite as good as what we might have with explicit support.

I think one fairly simple way to make this work cleanly would be an adapter that constructs the builder for the AutoValue type and sets each of its properties. That can be done without any Unsafe nastiness and will correctly invoke validation logic, including user-written validation. It's a bit more work for the user because they have to write the abstract builder, but on the whole I think it would be better.
 =||= The threading is safe because the allocated instance is thread-confined. If you can show me a counterexample, I'll be impressed!
 =||= If I instantiate an AutoValue object and put a reference to it in a volatile field or an AtomicReference, then another thread can see it. That seems like a reasonable thing for a worker thread to do to communicate its results, for example. Then I am asking if there is any guarantee that the AutoValue's field values will be seen by the other thread.

To be clear, though, this is not what bothers me the most. The fact that the constructor isn't executed and therefore there can be missing properties is more concerning. Could an adapter verify that every non-`@Nullable` property is present?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
666Provide an annotation which can be used to register Serializer/Deserializers, instead of just adapters.Christian Edward Grubercgruber07/14/15, 02:21:49 AM"Allow @JsonAdapter to supply Serializer and Deserializers as well as TypeAdapters, or provide an alternative annotation, e.g. 

``` java
@JsonSerializable(adapters = Foo.Deserializer.class, forHierarchy = true)
class Foo {
    ...

    static class Deserializer implements JsonDeserializer<Foo> {
      @Override Foo deserialize(...) { ... }
    }
}
```

This permits one to package a type, it's serializer, and all the configuration bits together and elides the need for `Gson.builder().registerTypeHierarchyAdapter(...)`, etc.

Recommended that the `.registerTypehierarchyAdapter(...)` supercede any annotated configuration. ""Oooh! I got the issue of the beast!
 =||= This exists.

```
 @JsonAdapter(UserJsonAdapter.class)
```
 =||= The beast!
 =||= How does this exist?  What I described doesn't exist - what the issue states is insufficient exists. 

`@JsonAdapter` lets you register a type adapter, not a serializer and/or deserializer.  Looking at TypeAdapter, I don't think I want one.  I don't get context in a TypeAdapter, which I need to deserialize bits of complex types.  I don't see how a JsonReader (what I do get) is sufficient to do nested complex types, without manually digging deep into the json message.   
 =||= It gives you a `TypeAdapterFactory`, which offers phenomenal cosmic power. It lets you compose a type adapter by delegation. And if you don't love that API because it's pretty reflective, I've been working on Moshi's adapter methods which are even better.
https://github.com/square/moshi#custom-type-adapters
 =||= You can also do custom types easily by asking the Gson instance for a type adapter of whatever type you want and handing it the given reader.
 =||= I think I hadn't yet understood the full power of TypeAdapterFactory, as I""m pretty new to Json.  Just TypeAdapter.  I see now a bit better how to do this (and both you and Jake did a good chunk of what I was intending to do in the other thread). 

I'll look at Moshi, but for my purposes, reflective creation and assignment is fine. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
667JsonWriter#value supports opaque JSON values.Adam Tanneradmtnnr07/20/15, 06:21:23 PM"Add a polymorphic version of `value(String value)` that takes an additional boolean argument (`encode`) that can be used to write the string directly to the underlying writer without modification, while maintaining the state of the `JsonWriter` so that it can continue to be written to.

The intended use case for this is when building JSON that contains a pre-serialized JSON string as a value in an object or array.

Alternative API ideas/open questions:
-  Should a separate method be used instead of a polymorphic version of `value(String)`? Maybe something like `rawValue(String)`?""Rename to `jsonValue()` ?
 =||= ...and I don't think there's much value to sharing code between strings and raw JSON strings. I'd rather you copy&paste to make this separate.
 =||= Renamed to `jsonValue`, decoupled from `value(String)`, and squashed into a single commit.

Let me know if there's anything else. :smile:

Thanks!
 =||= Brilliant. 
 =||= "JsonWriter#value supports opaque JSON values.Adam Tanneradmtnnr07/20/15, 06:21:23 PM"Add a polymorphic version of `value(String value)` that takes an additional boolean argument (`encode`) that can be used to write the string directly to the underlying writer without modification, while maintaining the state of the `JsonWriter` so that it can continue to be written to.

The intended use case for this is when building JSON that contains a pre-serialized JSON string as a value in an object or array.

Alternative API ideas/open questions:
-  Should a separate method be used instead of a polymorphic version of `value(String)`? Maybe something like `rawValue(String)`?"NaNAdam Tanner07/19/15, 07:46:26 PM"JsonWriter#jsonValue writes raw JSON values.

Add a jsonValue(String value) method that takes a raw JSON string that
can be used to write the string directly to the underlying writer
without modification.

The intended use case for this is when building JSON that contains a
pre-serialized JSON string as a value in an object or array."1
668Maven release?Adam Tanneradmtnnr10/04/15, 01:00:43 AM"Just wondering if you have any upcoming plans to do a Maven release. I'm happy to help if I can.

Thanks!""Any specific feature/bug that you are looking forward to?
 =||= Yeah, we're looking to use the `jsonValue` feature I just added in #667 for a Java client we're writing for [Martian Proxy](https://www.github.com/google/martian). I was going to wait, but it seemed like releases are few and far between so I figured I'd ask. :smile:

Thanks!
 =||= Bump. Just wondering what your thoughts are on this. We want to release and I need to know if I should rework the library to work without this feature or wait a bit longer.
 =||= I do want to cut a release. @swankjesse @JakeWharton @joel-leitch 
Shall we do a review of the proposed changes so far?
 =||= Looks like history was rewritten but the tags weren't updated?

https://github.com/google/gson/compare/gson-2.3.1...master
 =||= Ok. Do you know what to do to update the tags? If so, go ahead. Thanks.
 =||= I too would like a new release to use this same change.
 =||= Haven't gotten around to updating the tags. Here's the commit list though: https://github.com/google/gson/compare/eba6825a...master
 =||= Let's get this done before October 1st?
 =||= Yes! @inder123 ready to sign off?
https://github.com/google/gson/blob/master/CHANGELOG.md
 =||= I am comfortable with a new release. However, do we want to do a quick
review of pending pull requests and filed issues?

On Sat, Sep 26, 2015 at 4:48 PM, Jesse Wilson notifications@github.com
wrote:

> Yes! @inder123 https://github.com/inder123 ready to sign off?
> https://github.com/google/gson/blob/master/CHANGELOG.md
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/668#issuecomment-143505867.

## 

http://www.singhinderjeet.com/
 =||= I did a few. Will try to get to more soon.

On Sat, Sep 26, 2015 at 8:41 PM inder123 notifications@github.com wrote:

> I am comfortable with a new release. However, do we want to do a quick
> review of pending pull requests and filed issues?
> 
> On Sat, Sep 26, 2015 at 4:48 PM, Jesse Wilson notifications@github.com
> wrote:
> 
> > Yes! @inder123 https://github.com/inder123 ready to sign off?
> > https://github.com/google/gson/blob/master/CHANGELOG.md
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/google/gson/issues/668#issuecomment-143505867.
> 
> ## 
> 
> http://www.singhinderjeet.com/
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/668#issuecomment-143507252.
 =||= Just a +1 for another release.  We want a stable release for https://github.com/j2objc-contrib/j2objc-common-libs-e2e-test/issues/35#issuecomment-143769534, and some of the unit tests at tag 2.3.1 fail (which you have fixed in the mean time).

cc @brunobowden
 =||= It will be this week, in all likelihood.

On Mon, Sep 28, 2015 at 3:20 PM Advay Mengle notifications@github.com
wrote:

> Just a +1 for another release. We want a stable release for j2objc-contrib/j2objc-common-libs-e2e-test#35
> (comment)
> https://github.com/j2objc-contrib/j2objc-common-libs-e2e-test/issues/35#issuecomment-143769534,
> and some of the unit tests at tag 2.3.1 fail (which you have fixed in the
> mean time).
> 
> cc @brunobowden https://github.com/brunobowden
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/668#issuecomment-143848955.
 =||= @JakeWharton @swankjesse  Shall I go ahead and cut a new release?
 =||= Sounds good to me!

On Sat, Oct 3, 2015, 8:07 PM inder123 notifications@github.com wrote:

> @JakeWharton https://github.com/JakeWharton @swankjesse
> https://github.com/swankjesse Shall I go ahead and cut a new release?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/668#issuecomment-145300798.
 =||= Yes please!
 =||= Just cut and pushed a new release to Maven Central. Also, published Javadocs on GitHub pages.
 =||= will this populate to jcenter as well?
https://bintray.com/inder123/maven/com.google.code.gson%3Agson/view

it is the default for android builds.
 =||= It's published to Maven Central which JCenter (which is not what you
linked) proxies.

On Sun, Oct 4, 2015 at 6:48 AM Advay Mengle notifications@github.com
wrote:

> will this populate to jcenter as well?
> https://bintray.com/inder123/maven/com.google.code.gson%3Agson/view
> 
> it is the default for android builds.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/668#issuecomment-145336380.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
669Replace localhost lookup with static IP to fix test.Adam Tanneradmtnnr07/26/15, 09:13:32 PM"Calling InetAddress.getLocalHost() will cause a lookup to occur that may
fail with a java.net.UnknownHostException if the system the test is
running on is not configured correctly.

This is often fixed by echoing ""127.0.0.1 $HOSTNAME"" to /etc/hosts, but
in this case it seems easier to pick a static IP string to avoid the
lookup entirely and prevent false negatives in the test.""Ok. Won't this force a network connection and DNS lookup?
 =||= Based on my understanding of the code from JDK 1.7 it looks like it won't make a network connection if the host is an IP address.

see: http://www.docjar.com/html/api/java/net/InetAddress.java.html#1081

May have missed something on my part though.
 =||= Ok, Thanks for checking. :+1: 
 =||= "Replace localhost lookup with static IP to fix test.Adam Tanneradmtnnr07/26/15, 09:13:32 PM"Calling InetAddress.getLocalHost() will cause a lookup to occur that may
fail with a java.net.UnknownHostException if the system the test is
running on is not configured correctly.

This is often fixed by echoing ""127.0.0.1 $HOSTNAME"" to /etc/hosts, but
in this case it seems easier to pick a static IP string to avoid the
lookup entirely and prevent false negatives in the test."NaNAdam Tanner07/20/15, 09:01:45 PM"Replace localhost lookup with static IP to fix test.

Calling InetAddress.getLocalHost() will cause a lookup to occur that may
fail with a java.net.UnknownHostException if the system the test is
running on is not configured correctly.

This is often fixed by echoing ""127.0.0.1 $HOSTNAME"" to /etc/hosts, but
in this case it seems easier to pick a static IP string to avoid the
lookup entirely and prevent false negatives in the test."1
670Change references to Google Code to Github in pom.xml.Adam Tanneradmtnnr07/21/15, 06:01:33 AM"Not sure if this is entirely correct, but thought this might be blocking new releases so I figured I'd give it a shot. Let me know if this looks right.

Related: #668 "":+1: 
 =||= "Change references to Google Code to Github in pom.xml.Adam Tanneradmtnnr07/21/15, 06:01:33 AM"Not sure if this is entirely correct, but thought this might be blocking new releases so I figured I'd give it a shot. Let me know if this looks right.

Related: #668 "NaNAdam Tanner07/20/15, 09:01:05 PMChange references to Google Code to Github.1
671Support for adding primitives directly to JsonArray instancesownaginatious07/26/15, 09:17:10 PM"Overloaded the ""add(...)"" method in JsonArray to support directly putting in primitives as arguments.

Now instead of inserting them in the old overly verbose way:

``` java
JsonArray array = new JsonArray();
array.add(new JsonPrimitive(true));
array.add(new JsonPrimitive(12));
array.add(new JsonPrimitive(""hello""));
array.add(new JsonPrimitive('c'));
```

You can do:

``` java
JsonArray array = new JsonArray();
array.add(true);
array.add(12);
array.add(""hello"");
array.add('c');
```""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= I don't know the DOM API well because it's inefficient to use, but if this was determined as something merge-worthy it needs litmus tests verifying behavior of null and non-null arguments of each of these methods.
 =||= Sorry about that; I was too hasty on committing my changes and submitting a pull request. Dumb oversight on my part.

Every other Java JSON library I've used (org.json, Jackson. etc) supports inserting primitives directly into arrays, so I found it odd that this one doesn't. I find it looks a lot cleaner if you ever have to implement your own JSON serializers.

I added a JUnit test for null/non-null tests as well as tests for other things.
 =||= If you have to implement your own serializers you would use `JsonReader` and `JsonWriter`, not the DOM-based `JsonObject` / `JsonElement` things.
 =||= Interesting. I don't think I've found any examples anywhere online of anyone using `JsonReader` and `JsonWriter` rather than the DOM elements in a (de)serializer.

Here are all the top results when I search for how to make a Gson serializer/deserializer:
- http://www.studytrails.com/java/json/java-google-json-custom-serializer-deserializer.jsp
- http://www.javacreed.com/gson-serialiser-example/
- http://www.programcreek.com/java-api-examples/index.php?api=com.google.gson.JsonSerializer

I can see why `JsonReader` and `JsonWriter` would make more sense in a streaming API, but I guess for simple things where performance is not a high priority, many find it complicated or verbose to use as opposed to the DOM.

Doesn't the API for JsonDeserializer kind of push you in the DOM direction, seeing as the method signature gives you a `JsonElement` rather than a `JsonReader` instance to work with?

Anyway, would you say this is enough reason is enough to justify this pull request?
 =||= I defer to @inder123 .
 =||= I should also add that `JsonObject` does expose methods for adding primitives directly instead of only `JsonElement`. Oddly though, only for `Number` and `String` and not for `Boolean` or `Character`, which `JsonElement` also supports as primitives.

``` java
public void add(String property, JsonElement value);
public void addProperty(String property, Number value);
public void addProperty(String property, String value);
```

Seems like it would make sense to also add these to `JsonObject` from a completeness standpoint.

``` java
public void addProperty(String property, Boolean value);
public void addProperty(String property, Character value);
```

Of course, this is just my opinion.
 =||= @ownaginatious  Thanks for the changes. I am going to accept them.
Feel free to send another pull request with addProperty changes.
 =||= :+1: 
 =||= "Support for adding primitives directly to JsonArray instancesownaginatious07/26/15, 09:17:10 PM"Overloaded the ""add(...)"" method in JsonArray to support directly putting in primitives as arguments.

Now instead of inserting them in the old overly verbose way:

``` java
JsonArray array = new JsonArray();
array.add(new JsonPrimitive(true));
array.add(new JsonPrimitive(12));
array.add(new JsonPrimitive(""hello""));
array.add(new JsonPrimitive('c'));
```

You can do:

``` java
JsonArray array = new JsonArray();
array.add(true);
array.add(12);
array.add(""hello"");
array.add('c');
```"NaNDillon Dixon07/24/15, 06:02:46 AMAdded test for nulls1
673Passing JSONObject [from org.json] (not JsonObject [from com.google.gson]) to gson.toJson()Divyendu Singhdivyenduz09/26/15, 11:43:16 PM"Something like this 

```
fileString = ""{\""name\"":\""divyendu\"", \""age\"": \""23\""}"";
JSONObject jsonObject = new JSONObject(fileString); 
Gson gson = new Gson();
System.out.println(jsonObject.toString());
System.out.println(gson.toJson(jsonObject));
System.out.println(jsonObject.toString().equals(gson.toJson(jsonObject)));
```

The output of 1st S.O.P is {""age"":""23"",""name"":""divyendu""}
The output of 2nd S.O.P is {""map"":{""age"":""23"",""name"":""divyendu""}} (it gets wrapped in a 'map' key)
The output of 3rd S.O.P is false
How can I avoid it being wrapped in S.O.P, without using StringBuilder which is called when I call `jsonObject.toString()` directly. It was causing a OutOfMemory error for me.""You can write a `TypeAdapter<JSONObject>` which walks the tree structure of the `org.json` model objects and emits the tree into Gson's `JsonWriter`. Similarly, if you need to parse JSON into the `org.json` model from Gson (which is a really strange thing to do). You would do the same but with `JsonReader`.

You could also write a `JsonSerializer<JSONObject>` (and, again, if you wanted a `JsonDeserializer<JSONObject>`) to deal with Gson's DOM model instead of streaming model which, funny enough, is very similar to `org.json`'s API.

The scope of doing this is outside what I'm willing to write, and not something that's a bug or feature request on Gson. If you are unable to figure this out, I suggest you post on StackOverflow about how to write a `TypeAdapter` for `org.json.JSONObject` as that community is primed to help and serves as a much better place for storing the solution for future searchers.
 =||= Thanks
 =||= [org.json.JSONObject and org.json.JSONArray JsonSerializer and JsonDeserializer](https://github.com/google/gson/issues/782#issuecomment-419424521) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
674Readme points to the new homepage at GithubLars Vogelvogella07/29/15, 11:24:31 PMNaNNaNReadme points to the new homepage at GithubLars Vogelvogella07/29/15, 11:24:31 PMNaNNaNLars Vogel07/29/15, 04:45:24 PMReadme points to the new homepage at Github1
675StackOverflowError in delegating TypeAdapterFactoryDeleted userghost08/25/16, 05:38:07 PM"GSON Version: 2.3.1
Description: `gson.getDelegateAdapter(this, type)` causes inifinite recursion when used with a @JsonAdapter annotated type.

Minimal example:

``` java
package test.gson;

import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.reflect.TypeToken;

/* @formatter:off */
public class GsonStackOverflowError {

    public static void main(final String[] args) {
        new Gson().fromJson(""{}"", A.class);
    }

    @JsonAdapter(Adapter.class)
    public static class A {}

    public static class Adapter implements TypeAdapterFactory {
        @Override
        public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> type)
        {
            gson.getDelegateAdapter(this, type);
            throw new IllegalStateException(""Not reproducible"");
        }
    }
}
```""GSON 2.3 throws IllegalArgumentException instead, see http://stackoverflow.com/questions/29445165/
 =||= Yup, `getDelegateAdapter()` doesn't work with `@JsonAdapter`. Needs to be fixed.
 =||= Any updates on this issue?
 =||= I can confirm that the issue is resolved as of Gson 2.7. Should this issue be closed?
 =||= Thanks for following up
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
678Merge Gson and JsonObjectVernon LeeVernonLee08/06/15, 05:29:30 AM"I have Gson and JsonObject, such as:

Gson gson = new Gson();
String deviceJson = gson.toJson(device); // device is a entity

deviceJson: {
  ""id"": 1,
  ""name"":""JP-1""
}       

JsonObject json = new JsonObject();
json.addProperty(""oid"", 12);

json: {
  ""oid"":12
}

I want to merge gson and json object together, result like this:
newJson: {
   ""id"": 1,
  ""name"":""JP-1"",
  ""oid"":12
}

Does any way in Gson do this? Thanks.
Sorry for my English.""``` java
      JsonObject jsonObject = new JsonObject();
      jsonObject.addProperty(""old"", 12);

      Object device = new Object();
      JsonObject deviceJson = new Gson().toJsonTree(device).getAsJsonObject();

      for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
          deviceJson.add(entry.getKey(), entry.getValue());
      }
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
679Required annotation implementAnisov AlekseyAnisovAleksey08/08/15, 03:28:43 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Seems interesting, however I think we should have a more general way of validating an object post deserialization. @swankjesse  @JakeWharton @joel-leitch  Any thoughts?
 =||= sorry, my mistake. copied from fork
 =||= Yeah, if we're going to validate that all required fields are present, we probably also want to support arbitrary validation, and that will require careful & thoughtful API design. What do other JSON libraries do?
 =||= Closing this pull request, as we will opt for a more general validation design. Thank you for your work @threat70. Appreciate the fact that you took the time to write unit tests as well.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
680RuntimeTypeAdapterFactory not null-safeLachlan Cootelcoote08/06/15, 09:49:19 PM"`RuntimeTypeAdapterFactory` creates a `TypeAdapter` that is not null-safe. This shows up when the adapted-type is the property of another object. Test below:

```
public void testSerializeWrappedNullValue() {
  TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)
      .registerSubtype(CreditCard.class)
      .registerSubtype(BankTransfer.class);

  Gson gson = new GsonBuilder()
      .registerTypeAdapterFactory(billingAdapter)
      .create();

  // throws NullPointerException
  gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);
}

static class BillingInstrumentWrapper {
  BillingInstrument instrument;
  BillingInstrumentWrapper(BillingInstrument instrument) {
    this.instrument = instrument;
  }
}
```

Fails with the stacktrace:

```
java.lang.NullPointerException
at com.google.gson.typeadapters.RuntimeTypeAdapterFactory$1.write(RuntimeTypeAdapterFactory.java:218)
at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:68)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:99)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:219)
at com.google.gson.Gson.toJson(Gson.java:600)
at com.google.gson.Gson.toJson(Gson.java:579)
at com.google.gson.Gson.toJson(Gson.java:534)
at com.google.gson.typeadapters.RuntimeTypeAdapterFactoryTest.testSerializeWrappedNullValue(RuntimeTypeAdapterFactoryTest.java:180)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:483)
at junit.framework.TestCase.runTest(TestCase.java:164)
at junit.framework.TestCase.runBare(TestCase.java:130)
at junit.framework.TestResult$1.protect(TestResult.java:106)
at junit.framework.TestResult.runProtected(TestResult.java:124)
at junit.framework.TestResult.run(TestResult.java:109)
at junit.framework.TestCase.run(TestCase.java:120)
at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:131)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
681fix #680 - make RuntimeTypeAdapterFactory null-safeLachlan Cootelcoote08/06/15, 09:49:18 PMNaN"Thanks! And sorry for the hold-up.
 =||= "fix #680 - make RuntimeTypeAdapterFactory null-safeLachlan Cootelcoote08/06/15, 09:49:18 PMNaNNaNLachlan Coote08/05/15, 11:27:18 PMfix #680 - make RuntimeTypeAdapterFactory null-safe1
683Made JsonArray implement the List interface.Inderjeet Singhinder12309/27/15, 11:13:09 PMNaN"@swankjesse @JakeWharton Is this a good idea (to implement List instead of Iterable for JsonArray)? Bloats the API a little bit, but useful nonetheless.
 =||= It isn't a binary-compatible change.
 =||= Don't forget equals().
 =||= It don't feel strongly either way.

If we make this change we will need to figure out the binary compatibility problem.

Also if we make this change we should change JsonObject to implement Map for symmetry.
 =||= I agree we should keep binary compatibility. Closing the pull request.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
684"Revert ""Add a JSR-305 @ThreadSafe annotation to the Gson class"""Inderjeet Singhinder12308/10/15, 02:02:00 PMReverts google/gson#664"@swankjesse 
 =||= LGTM
 =||= ""Revert ""Add a JSR-305 @ThreadSafe annotation to the Gson class"""Inderjeet Singhinder12308/10/15, 02:02:00 PMReverts google/gson#664NaNinder12308/10/15, 02:01:18 PM"Revert ""Add a JSR-305 @ThreadSafe annotation to the Gson class"""1
685Updated Gson Javadoc to indicate thread-safety.Inderjeet Singhinder12308/10/15, 02:05:10 PMNaN"@swankjesse for your optional review. I will go ahead and merge anyway.
 =||= LGTM
 =||= "Updated Gson Javadoc to indicate thread-safety.Inderjeet Singhinder12308/10/15, 02:05:10 PMNaNNaNInderjeet Singh08/10/15, 02:04:07 PMUpdated Gson Javadoc to indicate thread-safety.1
686fromJson Json to String  JsonSyntaxExceptionStringKBCode08/14/15, 03:02:57 PM"com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
    at com.google.gson.Gson.assertFullConsumption(Gson.java:786)
    at com.google.gson.Gson.fromJson(Gson.java:776)
    at com.google.gson.Gson.fromJson(Gson.java:724)
    at com.inspeed.commons.tools.GsonTools.fromJson(GsonTools.java:19)
Caused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
    at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1574)
    at com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1424)
    at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:547)
    at com.google.gson.stream.JsonReader.peek(JsonReader.java:429)
    at com.google.gson.Gson.assertFullConsumption(Gson.java:782)
    ... 27 more

test code below
String timeStr=GsonTools.fromJson(""2015-08-14 10:30:20"",String.class);

 my view the source code of the STRING TypeAdapter is called found JsonReader nextString ( ) go to nextUnquotedValue() This method is positioned to see the case' ' : Will break, why?

if Use JsonReader.setLenient(true)  the result is 2015-08-14,This is not the result I want.

my expect value is '2015-08-14 10:30:20'""`2015-08-14 10:30:20` is not a JSON string. You want `""2015-08-14 10:30:20""` (note the quotes). In JSON the space character is a delimiter for a token which is why it stops.
 =||= @JakeWharton Should we disable GsonConverterFactory for requests that return Strings with colons or should we create a special deserializer for String return type? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
687Add METHOD Target to SerializedName attributeRyan Harterrharter08/14/15, 10:58:18 PM"I'm in the process of making an AutoValue extension that will generate a Gson TypeAdapterFactory for generated data types, and I'd like to support `@SerializedName`.  Currently, the attribute only targets `ElementType.FIELD`s, meaning users can't put it on the abstract property methods that AutoValue uses.  I'd like to have `ElementType.METHOD` added to the list of supported `ElementType`s so that I don't have to include a separate annotation for AutoValue users.

Here is what the user's class would look like in this case:

``` java
@AutoValue public abstract class Foo {
  @SerializedName(""Baz"") public abstract String baz();
}
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
688Add METHOD target for use with AutoValue's abstract property methodsMichael EvansMichaelEvans08/14/15, 10:58:18 PMCloses #687 "It's a pragmatic solution to the problem AutoValue users have. I don't think it obligates us to doing getters and setters, and I'm quite against doing that!
 =||= Details are here: https://github.com/google/gson/issues/687
 =||= Ok
 =||= "Add METHOD target for use with AutoValue's abstract property methodsMichael EvansMichaelEvans08/14/15, 10:58:18 PMCloses #687 NaNMichael Evans08/14/15, 06:08:56 PMAdd METHOD target for use with AutoValue's abstract property methods1
689Add unit tests for constructors from util classesVladislav Bauervbauer08/15/15, 12:42:31 AM"I think that constructors from util classes should pass the following rules (best practices):
1. Each util class should have only the one constructor without parameters.
2. Constructor should be private.
3. Code should not have possibility to instantiate this class even using reflection mechanism (UnsupportedOperationException)""PR was updated, thank you for review.
 =||= Thanks!
 =||= Thank you!
 =||= "Add unit tests for constructors from util classesVladislav Bauervbauer08/15/15, 12:42:31 AM"I think that constructors from util classes should pass the following rules (best practices):
1. Each util class should have only the one constructor without parameters.
2. Constructor should be private.
3. Code should not have possibility to instantiate this class even using reflection mechanism (UnsupportedOperationException)"NaNVladislav Bauer08/14/15, 09:05:42 PMAdd unit tests for constructors from util classes1
690publish proto to Maven central?Bjørn Borudborud08/23/15, 01:20:02 AM"While waiting for protobuf version 3 to get support for JSON I've started using Gson to transform protobuffers into JSON and I found `ProtoTypeAdapter` written by Inderjeet Singh under the `proto` directory.  However this does not appear to be part of Gson proper (wouldn't hurt that much if it was) and it does not appear to be pushed to Maven central.

In my project I've just included the code in the source, but I'm not really comfortable with that.  I'd like to get it from somewhere that is being properly maintained.

Would you consider moving this code into the `gson` proper or pushing this artifact to Maven central?  ""Hi. Proto is not a very popular technology and will not make into Gson proper. We may publish an additional maven sub-project. However, I haven't maintained this version after writing it.
I think you did the right thing by including the source code.
 =||= OK, thanks for the quick response @inder123!
 =||= com.google.code.gson.proto is needed in our project. Now we need to copy the source code to use and it would be much better if we can rely to the maven repo with compatible version. @borud @inder123  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
692Double cannot be casted to Integer.Adrian Antkowiakadiantek10/07/15, 08:14:23 PM"Long cannot be casted to Integer, Integer cannot be casted to Short, etc. Could you fix it in https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java? When serializing Map&lt;String, Object&gt; and deserializing, it throws Exception. I can't edit this, because I can't edit Spigot/Bukkit. If JSON save Integer, it should read Integer, not make Double unnecessarily.

I maked it in issue, because I had to download sources GSON and edit this:.

```
    case NUMBER:
      try {
        return in.nextInt();
      } catch(NumberFormatException exception) {
      }
      try {
        return in.nextLong();
      } catch(NumberFormatException exception) {
      }
      return in.nextDouble();
```""@swankjesse In our original parser, I tried to convert any number to its smallest form first. So, first see if it fits in short, int and long, then try double.
Any reason why we should convert it to double by default?
 =||= I wrote, that serializing and deserializing Object doesn't work correctly. Try serialize Integer number, then deserialize it as fromJson(..., Object.class). It will return double. Why double, not Integer?

I think that it should convert it default to integer, no double. Integer can be casted to double, but double cannot be casted to Integer.
 =||= It may be because of routine, which converts all numbers to double.
case NUMBER:
      return in.nextDouble();
 =||= Double by default is the best for simplicity. Things like equals() break if we use a mix of different types here.
 =||= @swankjesse It is definitely not the best. Crucial difference is double is a floating point. Right now gson is forcing any numerical value to have fractional part. There's no integers support. Which is ridiculous.
 =||= There's int support, as long as you provide the target type. When you ask Gson to decode an object without a target type, it needs a policy and Gson’s policy is to be consistent with JavaScript.
 =||= (Arguing int vs. double is particularly awkward because there's no data loss.)
 =||= Double cannot be casted to Integer. I have Object in main app and plugin
that using Gson cannot modify it. It will throw Exception, so I can't use
it in plugins.
7 paź 2015 14:16 ""Jesse Wilson"" notifications@github.com napisał(a):

> (Arguing int vs. double is particularly awkward because there's no data
> loss.)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/692#issuecomment-146179250.
 =||= @swankjesse Why there's should be data loss? If value has ""."" (`{rating: 3.4}`) , it can be parsed to double, if not - into long (`{comments: 15}`).
 =||= @swankjesse I do understand you stand for simplicity. But treating numeric without floating point as a numeric with floating point has a serious impact on business logic. There's not much difference between Integer and Long from business logic point of view, but difference between Long and Double is huge. (`{comments: 15.0}`, anyone?). Current implementation is making things either unusable for serious tasks (having no proper integer support) or overly complicated (writing own IntegerAwareObjectAdapter). Serializing/deserializing Properties, for example, is a pain.
 =||= Why are you decoding it as `Object`?
 =||= Ie. if you want type safety, provide the types!
 =||= But I don't know, what's type is it. I need Object, which can be Integer.
7 paź 2015 20:00 ""Jesse Wilson"" notifications@github.com napisał(a):

> Ie. if you want type safety, provide the types!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/692#issuecomment-146278854.
 =||= @swankjesse  I'm deserializing it as a Map (and it is actually a map).
And it is not about type safety, it is about using most specific type. Java was built that way - when dealing with polymorphism, most specific type is considered. 
 =||= @swankjesse: I'm afraid you do not understand my problem with Properties. I'm providing the types when serializing it, and gson correctly serializes integers as integers. But when I'm deserializing my Properties back (let's say, from json received from server), all integers are becoming doubles, and that's breaking a lot of things. I have to check every entry which I expect to be integer and convert it from double to integer. This particular method we're talking about is meant to deserialize maps, and it is definitely broken, as it considers any number in map being a floating point. Using most specific type instead of most generic type is more correct, imho.
 =||= Could the convention be that anything missing a `.` is an integer and anything with a `.` is a double?
 =||= @oleersoy: yup, I'm using exactly that logic in my custom adapter.
 =||= I think you want to decode it as a `Map<String, Integer>`. No action to take here.
 =||= No. Some keys is String, some Double, some Float, some Map. Map is parsed
by Bukkit for ItemStack, so I can't modify it.
7 paź 2015 22:14 ""Jesse Wilson"" notifications@github.com napisał(a):

> I think you want to decode it as a Map<String, Integer>. No action to
> take here.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/692#issuecomment-146315171.
 =||= Values*
 =||= It may be check while converting string to number:

if (number . contains( ""."" ) || number . contains( ""e"" ) || number . contains( ""E"" )) {
return Double . valueOf(number);
} else {
return Long . valueOf(number);
}
 =||= Or:

```
  try {
    return in.nextInt();
  } catch(NumberFormatException exception) {
  }
  try {
    return in.nextLong();
  } catch(NumberFormatException exception) {
  }
  return in.nextDouble();
```
 =||= Is there a way to override this behavior?  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
693Added tests for deserialization of double arrayInderjeet Singhinder12309/02/15, 02:57:01 AMNaNNaNAdded tests for deserialization of double arrayInderjeet Singhinder12309/02/15, 02:57:01 AMNaNNaNInderjeet Singh09/02/15, 12:49:34 AMAdded tests for deserialization of double array1
694getDelegateAdapter is order dependant and skips more than one typeAdapterFactory.Benjamin AUGUSTINDorvaryn09/04/15, 02:17:23 AM"### Problem:

`getDelegateAdapter` is not only skipping the passed in TypeAdapterFactory but all the previous one in the registered list. It seems unlikely that this is expected behaviour as this is not documented and makes this feature dependant on the order of the registration of the given factories.
#### Example:

``` java
TypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()
new GsonBuilder()
                .registerTypeAdapterFactory(factoryA)
                .registerTypeAdapterFactory(new TypeAdapterFactoryB(factoryA))
                .create()
```

If TypeAdapterFactoryB calls `getDelegateAdapter(factoryA, ...)` and TypeAdapterFactoryA calls `getDelegateAdapter(this, ...) then TypeAdapterFactoryB is not invoked back.

Inverting order in creation makes the resolution work as expected.

``` java
TypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()
TypeAdapterFactoryB factoryB = new TypeAdapterFactoryB(factoryA)
new GsonBuilder()
                .registerTypeAdapterFactory(factoryB)
                .registerTypeAdapterFactory(factoryA)
                .create()
```
### Proposed solution (not working):

Only skipping the factory passed in parameter.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= Humm this behaviour seems to run deeper than I expected. I started poking around to understand This failing test, not sure I understand what the `testDeserializerForAbstractClass` is testing.

Any ideas on how to fix this strange behaviour that would not compromise the rest of the Gson code structure ?
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= The implemented behavior is working as intended, and order of registration is significant. Otherwise you could get into trouble with multiple-delegation.
 =||= @swankjesse Thanks for the fast response. Maybe this should simply be more explicit in the documentation. I attached a proposed update to the javadoc.
 =||= "getDelegateAdapter is order dependant and skips more than one typeAdapterFactory.Benjamin AUGUSTINDorvaryn09/04/15, 02:17:23 AM"### Problem:

`getDelegateAdapter` is not only skipping the passed in TypeAdapterFactory but all the previous one in the registered list. It seems unlikely that this is expected behaviour as this is not documented and makes this feature dependant on the order of the registration of the given factories.
#### Example:

``` java
TypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()
new GsonBuilder()
                .registerTypeAdapterFactory(factoryA)
                .registerTypeAdapterFactory(new TypeAdapterFactoryB(factoryA))
                .create()
```

If TypeAdapterFactoryB calls `getDelegateAdapter(factoryA, ...)` and TypeAdapterFactoryA calls `getDelegateAdapter(this, ...) then TypeAdapterFactoryB is not invoked back.

Inverting order in creation makes the resolution work as expected.

``` java
TypeAdapterFactoryA factoryA = new TypeAdapterFactoryA()
TypeAdapterFactoryB factoryB = new TypeAdapterFactoryB(factoryA)
new GsonBuilder()
                .registerTypeAdapterFactory(factoryB)
                .registerTypeAdapterFactory(factoryA)
                .create()
```
### Proposed solution (not working):

Only skipping the factory passed in parameter."NaNDorvaryn09/03/15, 01:43:34 PMClarify the fact that the behaviour of getDelegateAdapter depends on registration order.1
695Documentation for strict/non-lenient modeChristian Zangllaktak11/08/15, 10:44:49 PM"I was a bit surprised that Gson parses invalid JSON by default. The [user guide](https://sites.google.com/site/gson/gson-user-guide) does not mention this pitfall.

I found `getAdapter` in #457 by accident. Is `new Gson().getAdapter(Map.class).fromJson(json)` the correct way to parse in strict mode? Could you update the documentation?""Gson philosophy is to accept JSON leniently, but emit strictly. This is not a bug. If you want specific documentation edits, consider sending a pull request with changes.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
697Update EnumMap serialization logic to handle SerializedName annotatio…Han Qiaosweatybridge09/06/15, 05:44:33 PM…ns on enums - fix #473 and fix #562"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= This is not the right fix for the problem. The right solution is to use `enableComplexMapKeySerialization()` on your GsonBuilder.

```
  enum Bool {
    @SerializedName(""yes"") TRUE,
    @SerializedName(""no"") FALSE
  }

  public void testEnumSerializedName() {
    Map<Bool, Integer> map = new LinkedHashMap<Bool, Integer>();
    map.put(Bool.TRUE, 1);
    map.put(Bool.FALSE, 2);

    Gson gson = new GsonBuilder()
        .enableComplexMapKeySerialization()
        .create();

    Type type = new TypeToken<Map<Bool, Integer>>() {}.getType();
    String json = gson.toJson(map, type);
    assertEquals(""{\""yes\"":1,\""no\"":2}"", json);
    assertEquals(map, gson.fromJson(json, type));
  }
```
 =||= I signed it!
 =||= Hi swankjesse, please build your library.
I cant re-build it to jar :(
 =||= > This is not the right fix for the problem. The right solution is to use `enableComplexMapKeySerialization()` on your GsonBuilder.
> 
> ```
>   enum Bool {
>     @SerializedName(""yes"") TRUE,
>     @SerializedName(""no"") FALSE
>   }
> 
>   public void testEnumSerializedName() {
>     Map<Bool, Integer> map = new LinkedHashMap<Bool, Integer>();
>     map.put(Bool.TRUE, 1);
>     map.put(Bool.FALSE, 2);
> 
>     Gson gson = new GsonBuilder()
>         .enableComplexMapKeySerialization()
>         .create();
> 
>     Type type = new TypeToken<Map<Bool, Integer>>() {}.getType();
>     String json = gson.toJson(map, type);
>     assertEquals(""{\""yes\"":1,\""no\"":2}"", json);
>     assertEquals(map, gson.fromJson(json, type));
>   }
> ```

This is not solving my problem with EnumMap. I am still facing com.google.gson.JsonSyntaxException: duplicate key: null.

json ""orderDimension"": {
          ""0"": 5,
          ""1"": 10
        }
Here is orderDimension

public class Dimension {
    private EnumMap<DimensionEnum,Integer> orderDimension;
}

public enum DimensionEnum {
    ORDER_CAPACITY,
    CRATE_CAPACITY,
    KG_CAPACITY
} =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
698updated maven plugin versions to latestInderjeet Singhinder12309/07/15, 07:10:39 PMNaNNaNupdated maven plugin versions to latestInderjeet Singhinder12309/07/15, 07:10:39 PMNaNNaNInderjeet Singh09/07/15, 07:02:45 PMupdated maven plugin versions to latest1
699Implemented support for multiple values for SerializedName annotation.Inderjeet Singhinder12310/03/15, 11:25:47 AMNaN"@JakeWharton @joel-leitch @swankjesse Please review and comment on this new feature that I implemented. See https://github.com/google/gson/issues/639 for the original feature request.
 =||= Maybe just add another field for alternate names?
 =||= @JakeWharton @swankjesse Ok, I have revised this pull request to be binary-compatible by using an additional field to specify alternate values. Take another look.
 =||= This has ballooned into a pretty big feature. Do we really need it?
 =||= @swankjesse Look at the entire diff again. I have reduced it to be of relatively small size. Does that allay your concerns?
 =||= This is Gson's inner loop on encoding, so I'm anxious about doing extra work that makes that slower. In this case I think we should avoid doing an extra `String.equals()` call for every single field, whether or not it uses this new annotation!
 =||= Ok, all these changes have further shrunk the overall diff. Good stuff.
Please take another look.
 =||= LGTM

Please rebase and squash (http://rebaseandsqua.sh) so our git log has only one commit!
 =||= Rebased and squashed (learned something new today, neat!). Take another look.
 =||= Cool!
 =||= "Implemented support for multiple values for SerializedName annotation.Inderjeet Singhinder12310/03/15, 11:25:47 AMNaNNaNInderjeet Singh10/03/15, 09:01:16 AMImplemented support for multiple values for SerializedName annotation.1
700Expose serializeNulls with an accessor.Jesse Wilsonswankjesse09/08/15, 02:44:05 AMUseful for frameworks that build on Gson."Your local copy is so old (how old is it?) that the SHA on which this branch is based didn't have a `.travis.yml`.
 =||= Yeah, something is unhappy here. Won't happen again!
 =||= "Expose serializeNulls with an accessor.Jesse Wilsonswankjesse09/08/15, 02:44:05 AMUseful for frameworks that build on Gson.NaNjwilson09/08/15, 02:31:43 AM"Expose serializeNulls with an accessor.

Useful for frameworks that build on Gson."1
703Prefer long(timestamp) for default date serialization/deserialization.Ravshan Samandarovravshansbox09/26/15, 11:16:05 PMNaN"Too late to change, sorry. You can plug in your own date adapters if you like.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
704Expose newJsonWriter wrapper instead of just options.Jake WhartonJakeWharton09/26/15, 11:26:16 PMThis is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly."LGTM
 =||= @JakeWharton  When did we introduce serializeNulls()? I presume it hasn't been released yet.
 =||= I don't understand the use-case of newJsonWriter(writer)? What would programmers use it for? Why can't they just use the Gson instance to do the same?
 =||= When you cache `TypeAdapter` instances you have no way of creating a `JsonWriter` whose configuration matches that of what the `Gson` instance would create. Instead, it has unsatisfactory behaviors like serializing nulls by default. This allows those caching (or bringing their own) `TypeAdapter` instances to serialize with the same settings as if they had just called one of the convenience methods on `Gson`.
 =||= @JakeWharton Thanks for the explanation. Yes, I have run into that as well.
Also, checked that serializeNulls was recently introduced and hence can be safely removed.
 =||= Yeah Jesse added that method for this very same use-case. But it only
encompasses one of a few options that can be configured.

On Sun, Sep 27, 2015 at 5:01 PM inder123 notifications@github.com wrote:

> @JakeWharton https://github.com/JakeWharton Thanks for the explanation.
> Yes, I have run into that as well.
> Also, checked that serializeNulls was recently introduced and hence can be
> safely removed.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/704#issuecomment-143594847.
 =||= "Expose newJsonWriter wrapper instead of just options.Jake WhartonJakeWharton09/26/15, 11:26:16 PMThis is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly.NaNJake Wharton09/26/15, 11:19:38 PM"Expose newJsonWriter wrapper instead of just options.

This is more future proof to ensure that consumers holding on to TypeAdapters for efficiency can always encode JSON in the same way as if the Gson instance was used directly."1
705Implemented equals and hashcode for LazilyParsedNumber to fixInderjeet Singhinder12309/27/15, 09:25:04 PMhttps://github.com/google/gson/issues/627"LGTM with some nitpicks
 =||= Great comments! incorporated them in the pull request.
 =||= "Implemented equals and hashcode for LazilyParsedNumber to fixInderjeet Singhinder12309/27/15, 09:25:04 PMhttps://github.com/google/gson/issues/627NaNInderjeet Singh09/27/15, 08:58:01 PMincorporated code review feedback: optimized LazilyParsedNumber.equals/hashcode() by utilizing the fact that value is never passed as null.1
706Fixed javadoc for JsonWriter as reported inInderjeet Singhinder12309/27/15, 01:11:07 AMhttps://github.com/google/gson/issues/623":+1:
 =||= "Fixed javadoc for JsonWriter as reported inInderjeet Singhinder12309/27/15, 01:11:07 AMhttps://github.com/google/gson/issues/623NaNInderjeet Singh09/27/15, 01:10:00 AM"Fixed javadoc for JsonWriter as reported in
https://github.com/google/gson/issues/623"1
707typoDushyant Mistrydushmis09/27/15, 02:51:25 PMs/subytpes/subtypes/gNaNtypoDushyant Mistrydushmis09/27/15, 02:51:25 PMs/subytpes/subtypes/gNaNdushyant09/27/15, 10:31:27 AMtypo1
709Fix javadoc of SerializedNameRoman Mazurroman-mazur10/04/15, 07:11:20 PMIn #699 the approach was changed but docs were left for the first implementation.NaNFix javadoc of SerializedNameRoman Mazurroman-mazur10/04/15, 07:11:20 PMIn #699 the approach was changed but docs were left for the first implementation.NaNRoman Mazur10/04/15, 04:53:02 PM"Fix javadoc of SerializedName

In #699 the approach was changed but docs were left for the first implementation."1
710Updating the ProtoTypeAdapter to support custom field names/values annotationsAllInOneMighty10/07/15, 06:10:24 AM"The current ProtoTypeAdapter is quite old, doesn't work for a few things correctly (I don't remember what exactly but it had some failures when I tried to use it), so I decided to update it and to make it better.

This version of ProtoTypeAdapter now:
- Lets you customize the proto field name serialization per field
- Lets you use different cases for serialization (e.g. you could use UpperCamelCase for your proto field names and willing to serialize them using LowerHyphen)
- Lets you choose to serialize enum values with their value (0, 1, 2, ...) instead of their name.

We've been using it in prod for a while, I added quite a few unit tests to make sure everything works properly.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= :+1: 
 =||= "Updating the ProtoTypeAdapter to support custom field names/values annotationsAllInOneMighty10/07/15, 06:10:24 AM"The current ProtoTypeAdapter is quite old, doesn't work for a few things correctly (I don't remember what exactly but it had some failures when I tried to use it), so I decided to update it and to make it better.

This version of ProtoTypeAdapter now:
- Lets you customize the proto field name serialization per field
- Lets you use different cases for serialization (e.g. you could use UpperCamelCase for your proto field names and willing to serialize them using LowerHyphen)
- Lets you choose to serialize enum values with their value (0, 1, 2, ...) instead of their name.

We've been using it in prod for a while, I added quite a few unit tests to make sure everything works properly."NaNEmmanuel Cron10/07/15, 05:52:01 AMUpdating Gson version to 2.41
711Change Json string format in java before deserializing it to POJO using GSONruisousa1010/09/15, 02:32:15 AM"I have the following Json string:

{
  ""Status"": ""true"",
  ""Result"": {
    ""rows"": {
      ""row"": {
        ""status"": true,
        ""subareas"": [
          {
            ""nome"": ""Associacao Utente"",
            ""id"": 9,
            ""grafs"": {
              ""rows"": {
                ""row"": {
                  ""id"": 6,
                  ""nome"": ""Associacao Utente"",
                  ""tipo"": ""PIE"",
                  ""serv"": ""MV_AS_UTENTE_POR_NEGOCIO"",
                  ""periodo"": ""ANO""
                }
              }
            }
          },
          {
            ""nome"": ""Chaves"",
            ""id"": 60,
            ""grafs"": {
              ""rows"": [
                {
                  ""id"": 35,
                  ""nome"": ""Chaves Criados por ano"",
                  ""tipo"": ""LINHA"",
                  ""serv"": ""MV_ASSOC_TOTAL_CHAVES"",
                  ""periodo"": ""ANO""
                },
                {
                  ""id"": 592,
                  ""nome"": ""Chaves Associado Ao User Portal"",
                  ""tipo"": ""BAR"",
                  ""serv"": ""MV_ASSOC_USER_CHAVES"",
                  ""periodo"": ""TODOS""
                },
                {
                  ""id"": 593,
                  ""nome"": ""Chaves Associado Ao Negocios"",
                  ""tipo"": ""BAR"",
                  ""serv"": ""MV_ASSOC_CHAVES"",
                  ""periodo"": ""TODOS""
                }
              ]
            }
          }
        ]
      }
    }
  }
}

I'm suppose to deserialize it using GSON but i have an issue. If you look at the first ""subarea"" you will notice it as a ""grafs"" key like this:
""grafs"": {
              ""rows"": {
                ""row"": {
and the second ""suberarea"" have ""grafs"" this way:
 ""grafs"": {
              ""rows"": [
i.e one is an object and the second an array. The is valid but the data is inconsistent, so i need to change this string programmaticaly, without touching the raw string since it comes from a server.
How can i change the string before deserialize. I want to make both ""grafs"" arrays.

thanks for your help!""Something like:

``` java
public final class ListFromObjectAdapter implements TypeAdapterFactory {
  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
    if (List.class != type.getRawType()) {
      throw new AssertionError(""Adapter can only be set on List type."");
    }
    final TypeAdapter<T> delegateAdapter = gson.getDelegateAdapter(this, type);

    Type collectionType = $Gson$Types.getCollectionElementType(type.getType(), type.getRawType());
    final TypeAdapter<?> elementAdapter = gson.getAdapter(TypeToken.get(collectionType));

    return new TypeAdapter<T>() {
      @Override public void write(JsonWriter out, T value) throws IOException {
        delegateAdapter.write(out, value);
      }

      @Override public T read(JsonReader in) throws IOException {
        if (in.peek() != JsonToken.BEGIN_ARRAY) {
          Object value = elementAdapter.read(in);
          //noinspection unchecked
          return (T) Collections.singletonList(value);
        }
        return delegateAdapter.read(in);
      }
    };
  }

  public static void main(String... args) {
    String jsonCorrect = ""{\""things\"":[\""hey!\""]}"";
    String jsonBroken = ""{\""things\"":\""hey!\""}"";

    Gson gson = new Gson();
    Test testCorrect = gson.fromJson(jsonCorrect, Test.class);
    System.out.println(""Correct: "" + testCorrect.things);
    Test testBroken = gson.fromJson(jsonBroken, Test.class);
    System.out.println(""Broken (but fixed!): "" + testBroken.things);
  }

  private static class Test {
    @JsonAdapter(ListFromObjectAdapter.class)
    List<String> things;
  }
}
```

Note: this uses Gson's internal `$Gson$Types` class which is subject to change, deletion, or general breakage at any time!
 =||= Output is:

```
Correct: [hey!]
Broken (but fixed!): [hey!]
```
 =||= @JakeWharton  Using @JsonAdapter in my class it's giving me this error.

![listfromobject](https://cloud.githubusercontent.com/assets/15041888/10394480/abc892ac-6e7e-11e5-8184-e4732ada5203.JPG)
 =||= Are you using Gson 2.4?

On Fri, Oct 9, 2015, 9:11 AM ruisousa10 notifications@github.com wrote:

> Using @JsonAdapter in my class it's giving me this error.
> 
> [image: listfromobject]
> https://cloud.githubusercontent.com/assets/15041888/10394480/abc892ac-6e7e-11e5-8184-e4732ada5203.JPG
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/711#issuecomment-146867373.
 =||= @JakeWharton 2.2.4
 =||= Then you likely are importing the wrong versions of those classes. Both
should be coming from Gson's package. $Gson$Types comes from the 'internal'
package.

On Fri, Oct 9, 2015 at 10:20 AM ruisousa10 notifications@github.com wrote:

> Yes
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/711#issuecomment-146884745.
 =||= @JakeWharton i've imported $Gson$Types and still gives me the error. Should i use Gson 2.4?
 =||= @JakeWharton it is working with Gson 2.4. The only issue i have now is the following. Those null are values, but it is showing as nulls in the output.

![listfromobject](https://cloud.githubusercontent.com/assets/15041888/10397320/30c39f10-6e8e-11e5-9ee5-d99422d5b68a.JPG)

I think i'm on the right way, almost there, thanks to you.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
713Pro-guard issueTonyTangTonyTangAndroid10/18/15, 05:21:33 PM"I don't believe that the following code snippets should be added in the proguard.cfg.

-keep public class \* {
    public protected *;
}

It will cause all methods will included.""Who told you to add it?
 =||= Sorry, I had thought that I added the link. The code is  from the following link between Line 66 to 68:

https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg

As it is from official example, it could be misleading for beginners. And I did not pay attention to it when I was copying the pro guard snippet.
 =||= Ah, ok. I looked in a few places but couldn't find it! Yeah we should get that changed.
 =||= Good to know that. Thank you very much for getting back to this issue so quickly. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
715Moved the .gitignore file to a more appropriate placeAllInOneMighty10/21/15, 07:07:58 AMThat will avoid committing the generated/ folder that is useless in the repository.":+1: 
 =||= "Moved the .gitignore file to a more appropriate placeAllInOneMighty10/21/15, 07:07:58 AMThat will avoid committing the generated/ folder that is useless in the repository.NaNEmmanuel Cron10/20/15, 07:09:17 PMMerge https://github.com/google/gson1
716Perf: Moving string length calculation to local variable.Chris Arriolaarriolac10/21/15, 01:39:29 AMPerformance improvement by moving string length calculation to local variable. Previous implementation calculated the string's length for each each loop iteration."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= This method is intrinsic.
 =||= Yikes. I thought `length()` was O(n). However, this is still a very minor pref improvement because of the cost of making a method call.
 =||= The cost of the method call is like, actually zero. You should send us performance improvements, but they should be based on performance problems, not speculation.
 =||= Thanks for the PR though. I want you to send me something that makes a measured improvement, with before/after benchmarks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
717Support for anonymous class serializationJedediah Smithjedediah10/22/15, 04:40:54 AM"Add a flag to `GsonBuilder` that lets anonymous classes through the serialization pipeline. Among other things, this allows for convenient creation of ad-hoc documents e.g.:

```
gson.toJson(new Object() {
    final int things = 17;
    final String stuff = ""fun"";
});
```
### Rationale

Currently, anonymous classes are silently dropped or replaced with null, unconditionally. This is needlessly restrictive, and likely to take developers by surprise. The Gson design document already says it best, though on a slightly different subject:

> We could have chosen to restrict the serialization to support only generic collections, but chose not to. This is because often the user of the library are concerned with either serialization or deserialization, but not both. In such cases, there is no need to artificially restrict the serialization capabilities. ""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I'm not a fan. If you want this, just embed the raw JSON.
 =||= Like this?

`""{\""things\"":17,\""stuff\"":\""fun\""}""`

Pretty gross IMHO, particularly the manual string escaping. And if the values are anything non-trivial, you have to serialize them and splice them in, which is even more gross. And you get no syntax checking or anything else you might have in the serialization pipeline. And any serialization API layers you have on top of Gson have to accept raw strings as well as objects.

But the ad-hoc objects were just the simplest example I could think of. Here is the reason _we_ want this IRL: We use interfaces to define JSON messages, like this:

``` java
interface NameChange {
    String name();
}

```

Custom serializers know to call the getter method. We use interfaces instead of classes because they are composable, and to avoid copying values, and to ensure that messages are complete. It's a nice system.

It would be much nicer though if we could implement messages inline, like this:

``` java
void changeName(User user) {
    send(gson.toJson(new NameChange() {
        @Override String name() { return user.getName(); }
    }));
}
```

Unfortunately, Gson makes it absolutely impossible to pass anonymous classes through the pipeline, no matter how much we are willing to customize it. There's no reason we shouldn't be able to opt-in to allow them.
 =||= How would you deserialize this?
 =||= Nothing per-se prevents Gson from deserializing an anonymous class. If it's also a non-static inner class, i.e. bound to an outer instance, then it can't be deserialized without a custom instance creator, but that is equally true for named inner classes, which Gson is happy to work with. An anonymous class from a static context can be deserialized just fine, as far as I know.

Regardless, you would have to write some pretty strange looking code to even attempt to deserialize an anonymous class. If someone actually goes to the trouble of doing it, there's no reason for Gson to stand in their way.
 =||= I think you might have better luck with another framework. Gson is opinionated and the pattern you've invented that causes this requirement doesn't fit with the rest of the project.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
719Fix type hierarchy adapters to do a runtime check.Jesse Wilsonswankjesse10/22/15, 04:29:01 PM"Otherwise if we have a type hierarchy adapter for Vehicle, and we
attempt to decode a JSON string as a Car, we get the right exception
if the JSON string is actually decoded as a Truck."":+1: 
 =||= "Fix type hierarchy adapters to do a runtime check.Jesse Wilsonswankjesse10/22/15, 04:29:01 PM"Otherwise if we have a type hierarchy adapter for Vehicle, and we
attempt to decode a JSON string as a Car, we get the right exception
if the JSON string is actually decoded as a Truck."NaNjwilson10/21/15, 03:40:24 PM"Fix type hierarchy adapters to do a runtime check.

Otherwise if we have a type hierarchy adapter for Vehicle, and we
attempt to decode a JSON string as a Car, we get the right exception
if the JSON string is actually decoded as a Truck."1
721Publish version 2.4 to jcenterSergey Chelombitkotechnoir4210/22/15, 07:35:52 PM"Hi!
Could you please upload the latest version to jcenter? Thanks!""Why? It proxies maven central.
 =||= True. It turned out I just forgot to turn off the offline mode. Sorry.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
724Thread safe method cacheChris Conroycconroy10/28/15, 11:59:23 PMNaN"Is `MapMaker` major overkill? Would adding `synchronized` on the requesting method be sufficient?
 =||= Upon further inspection, this entire thing is doing things the Gson 1.x way which is slow and bad. The right long term fix is to migrate this to `TypeAdapterFactory` which would mean we'd look up the method once, rather than once per field being decoded.

In the interim, this seems reasonable enough.
 =||= If you and @dragonsinth wanna port this to `TypeAdapterFactory`, everything will be faster & we won't need this memory-hungry cache!
 =||= yeah, perhaps i'll tackle that during hackweek
 =||= "Thread safe method cacheChris Conroycconroy10/28/15, 11:59:23 PMNaNNaNChris Conroy10/28/15, 12:01:38 AMThread safe method cache1
726java.lang.IncompatibleClassChangeErrorKhalid Eldehairykdehairy11/16/15, 11:55:55 PM"I'm getting this crash lately. It complains about SerializedName class missing the ""value"" method.

This is the stacktrace:

```
java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
at java.lang.reflect.Field.getAnnotation(Field.java:242)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
at com.google.gson.Gson.getAdapter(Gson.java:359)
at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)
at com.google.gson.Gson.getAdapter(Gson.java:359)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.(ReflectiveTypeAdapterFactory.java:92)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
at com.google.gson.Gson.getAdapter(Gson.java:359)
at com.google.gson.Gson.fromJson(Gson.java:809)
at com.google.gson.Gson.fromJson(Gson.java:875)
at com.google.gson.Gson.fromJson(Gson.java:848)
```""Any ideas how to fix/omit this problem. I have been reading about this issue and it looks it is realted to Annotations handling on Android 5+ devices (mostly Samsung). 
The related issues are:
https://code.google.com/p/android/issues/detail?id=172339
http://developer.samsung.com/forum/board/thread/view.do?boardName=General&messageId=280930
 =||= Did you upgrade to Gson 2.4? Try downgrading to Gson 2.3.1 and see if that fixes the problem.
 =||= Actually I had version 2.2.4. Is it still a case?
 =||= No, in that case, it is some other issue.
 =||= No action for us to take here.
 =||= Any hints there?
I changed JSON library from Gson to Jackson and the problem is the same. I get exceptions 
java.lang.IncompatibleClassChangeError: Couldn't find com.fasterxml.jackson.annotation.JsonProperty.value

Any ideas how to omit this? Maybe different version of Android annotation from V4 library?
It looks like millions of apps across the world are affected because who doesn't use JSON with annotations processing?
 =||= That seems a stretch, our app uses Gson and annotation processing and does
not experience this problem.

On Mon, Nov 23, 2015 at 12:33 PM Dominik Tomczak notifications@github.com
wrote:

> Any hints there?
> I changed JSON library from Gson to Jackson and the problem is the same. I
> get exceptions
> java.lang.IncompatibleClassChangeError: Couldn't find
> com.fasterxml.jackson.annotation.JsonProperty.value
> 
> Any ideas how to omit this? Maybe different version of Android annotation
> from V4 library?
> It looks like millions of apps across the world are affected because who
> doesn't use JSON with annotations processing?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/726#issuecomment-159005293.
 =||= Really odd. I can see on my error console growing number of that exceptions.
Previously it was:
(GSON)
java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value

(Jackson)
Now it is:
java.lang.IncompatibleClassChangeError: Couldn't find com.fasterxml.jackson.annotation.JsonProperty.value

I use Eclipse, Android 23 (6.0 SDK) as build SDK and latest v4/v7 libraries. I don't add special proguard file, it is a default one.
I can see this error being reported for Samsung 5.+ devices. 
Any ideas are highly appreciated.

Thanks
 =||= I digged into this issue. It happens with _any_ annotation class with a ""value"" method in it. SerializedName it is or other.
In the libcore code, it tries to grap the Method with the ""value"" name through reflection, and for some reason it fails to find it ""MethodNotFound"" exception which is re-thrown as what we see here.
It is not related to gson specifically as I can see.
 =||= I'm from Optimizely, and we have some clients who are seeing this issue as well.  Is this something that can be fixed?
 =||= We did some research and patched gson to make sure that the annotation would not use `value` and used a dedicated name for the annotation value. We basically we added a new annotation: `@SerializedNamePatched(json = 'foo')` vs `@SerializedName('foo')`. For reference code is available in https://github.com/potyl/gson/tree/booking/serialized-name-2.4 with unit tests changes too.

Turns out that this ended up causing crashes too, so the problem is not with the annotation using `value`.

The new crash we get:

```
java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedNamePatched.name
  at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
  at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
  at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
  at java.lang.reflect.Field.getAnnotation(Field.java:242)
  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:79)
  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:72)
  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:167)
  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:108)
  at com.google.gson.Gson.getAdapter(Gson.java:360)
  at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:52)
  at com.google.gson.Gson.getAdapter(Gson.java:360)
  at com.google.gson.Gson.fromJson(Gson.java:813)
  at com.google.gson.Gson.fromJson(Gson.java:779)
  at com.google.gson.Gson.fromJson(Gson.java:728)
```

TL;DR the problem is not with the annotation using `value` but with the loading of the annotation.
 =||= Likely a build tools problem. Using ProGuard or similar? Those tools wreck your code.
 =||= I turned off ProGuard but it's still a problem. It's all affected Samsung 5.0 Devices 
![untitled](https://cloud.githubusercontent.com/assets/867179/11953723/e2a99d80-a8d4-11e5-9c13-191774f77368.png)
 =||= It looks like only Samsung Android 5 devices have this issue indeed

![screenshot from 2015-12-23 13 27 10](https://cloud.githubusercontent.com/assets/130584/11979244/e9ad814c-a978-11e5-8b8f-bcc2d3d8f956.png)
 =||= We are also seeing this crash with gson 2.3.1 on Android 5 on Samsung.

![screen shot 2016-02-25 at 1 21 12 pm](https://cloud.githubusercontent.com/assets/1451634/13334810/af20eb50-dbc2-11e5-9923-94880fb23ae8.png)
 =||= Anyone got a fix for this? I am also facing this issue.
 =||= Im also getting this error in Samsung device when users update app from play store.

Please check below log.

```
java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
    at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
    at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
    at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
    at java.lang.reflect.Field.getAnnotation(Field.java:242)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
    at com.google.gson.Gson.getAdapter(Gson.java:359)
    at com.google.gson.Gson.fromJson(Gson.java:809)
    at com.google.gson.Gson.fromJson(Gson.java:775)
    at com.google.gson.Gson.fromJson(Gson.java:724)
    at com.google.gson.Gson.fromJson(Gson.java:696)
    at com.cubii.utils.SessionManager.getUserID(SessionManager.java:70)
    at com.cubii.BluetoothLeService.broadcastUpdate(BluetoothLeService.java:188)
    at com.cubii.BluetoothLeService.access$400(BluetoothLeService.java:47)
    at com.cubii.BluetoothLeService$1.onCharacteristicChanged(BluetoothLeService.java:139)
    at android.bluetooth.BluetoothGatt$1.onNotify(BluetoothGatt.java:443)
    at android.bluetooth.IBluetoothGattCallback$Stub.onTransact(IBluetoothGattCallback.java:399)
    at android.os.Binder.execTransact(Binder.java:446)
```
 =||= Is the same error?

```
Fatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.a.c.a
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
       at java.lang.reflect.Field.getAnnotation(Field.java:242)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(SourceFile:76)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(SourceFile:71)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(SourceFile:156)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(SourceFile:97)
       at com.google.gson.Gson.getAdapter(SourceFile:407)
       at com.google.gson.Gson.fromJson(SourceFile:860)
       at com.google.gson.Gson.fromJson(SourceFile:826)
       at com.google.gson.Gson.fromJson(SourceFile:775)
       at com.google.gson.Gson.fromJson(SourceFile:747)
       at com.anyapp.common.GsonUtil.parse(SourceFile:23)
       at com.anyapp.dataprovider.network.UsersService$3$1.onDataChange(SourceFile:174)
       at com.firebase.client.Query$1.onDataChange(SourceFile:144)
       at com.firebase.client.core.ValueEventRegistration.fireEvent(SourceFile:53)
       at com.firebase.client.core.view.DataEvent.fire(SourceFile:45)
       at com.firebase.client.core.view.EventRaiser$1.run(SourceFile:38)
       at android.os.Handler.handleCallback(Handler.java:739)
       at android.os.Handler.dispatchMessage(Handler.java:95)
       at android.os.Looper.loop(Looper.java:145)
       at android.app.ActivityThread.main(ActivityThread.java:5938)
       at java.lang.reflect.Method.invoke(Method.java)
       at java.lang.reflect.Method.invoke(Method.java:372)
       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1400)
       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1195)
```
 =||= I've got the same issue here and using 2.6.2. Again Samsung devices on Android 5:

`Caused by java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
       at java.lang.reflect.Field.getAnnotation(Field.java:242)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:75)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:70)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:155)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.Gson.fromJson(Gson.java:878)
       at com.google.gson.Gson.fromJson(Gson.java:844)
       at com.google.gson.Gson.fromJson(Gson.java:793)
       at com.google.gson.Gson.fromJson(Gson.java:765)`
 =||= I just update to 2.2.4 ,then solve this problem , but I  don not know why ? =||= Why is this issue closed? Was the resolution to rename all ""value"" keys? =||= Still getting these crashed on Samsung Android 5.0.1 devices =||= Any workaround? =||= Using gson 2.8.0 and still have the problem =||= +1 =||= Same thing here. Has anyone found a workaround for this?

<img width=""756"" alt=""samsung5"" src=""https://user-images.githubusercontent.com/2055468/31886578-487c6fe6-b7cb-11e7-9523-c3d645358553.png"">
 =||= Did anyone find a workaround for this? =||= This is constantly crashing our clients apps. While it only happens on a limited set of devices, it still makes up for more than 90% of our crashes. 
Is there anything that can be done, beside moving away from gson? =||= We are also facing this issue for Android 5 only, did anyone find any solution for this ? 
GSON : 2.8.0

<img width=""1166"" alt=""screen shot 2018-03-24 at 12 11 35 pm"" src=""https://user-images.githubusercontent.com/7509084/37861274-975dfdec-2f5c-11e8-90b0-400b47449f7c.png"">
 =||= 3 years later and this still happening with our app on Android 5 Samsung devices also! =||= Using Gson 2.8.5 and still experiencing the issue for Samsung lollipop devices. that's ridiculous.
http://crashes.to/s/57554ed9414
Is there a workaround really? =||= +1 =||= +1 Also seeing on 5.0 Lollipop Samsung.

Silly question, but I suppose removing the annotations and making the POJO field names match the JSON will make the bad man go away? =||= @davros1970 I no longer work in the project where we had this issue, but I remember that we tried absolutely everything to get rid of this bug. If this bug is really annoying you the best thing is to try to move to another JSON parsing library. =||= Any updates on this? =||= I'm keep getting crashes on Samsung Galaxy Note 3 - Android 5.0:

```
Fatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
       at java.lang.reflect.Field.getAnnotation(Field.java:242)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:74)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:161)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)
       at com.google.gson.Gson.getAdapter(Gson.java:458)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)
       at com.google.gson.Gson.getAdapter(Gson.java:458)
       at com.google.gson.Gson.toJson(Gson.java:696)
       at com.google.gson.Gson.toJson(Gson.java:683)
       at com.google.gson.Gson.toJson(Gson.java:638)
       at com.google.gson.Gson.toJson(Gson.java:618)
```

It looks like it can't convert to String Json if the class contains List or Object.

This is how the parsing made:
`String data = new Gson().toJson(product);`

And this is the **Product** model object:

```
public class Product {
        private String id;
        private String name;
        
        private User user;
        
        public Product() {
            
        }
    }
```

As I said, I think the exception is thrown because the class contains another reference to another object. In my case is **User** =||= I have too many crashes  with Gson 2.8.1 only on Android 5 Samsung devices. Isn't there any solution for this issue yet?? =||= I am also facing the same issue only on Samsung 5.0 devices.
![Screenshot 2019-05-16 at 5 01 47 PM](https://user-images.githubusercontent.com/2102271/57850837-99f5d680-77fc-11e9-8ffe-012920c33697.png)
 =||= After 4 Years, We are still facing the same crash and the sad part is we haven't got the fix and the Issue is in Closed state. =||= @morerohit86 If we wait 3,4 years more maybe Android 5 gonna get outdated and the issue will fix itself ¯\_(ツ)_/¯  =||= > I'm keep getting crashes on Samsung Galaxy Note 3 - Android 5.0:
> 
> ```
> Fatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
>        at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
>        at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
>        at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
>        at java.lang.reflect.Field.getAnnotation(Field.java:242)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldNames(ReflectiveTypeAdapterFactory.java:74)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:161)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)
>        at com.google.gson.Gson.getAdapter(Gson.java:458)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)
>        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)
>        at com.google.gson.Gson.getAdapter(Gson.java:458)
>        at com.google.gson.Gson.toJson(Gson.java:696)
>        at com.google.gson.Gson.toJson(Gson.java:683)
>        at com.google.gson.Gson.toJson(Gson.java:638)
>        at com.google.gson.Gson.toJson(Gson.java:618)
> ```
> 
> It looks like it can't convert to String Json if the class contains List or Object.
> 
> This is how the parsing made:
> `String data = new Gson().toJson(product);`
> 
> And this is the **Product** model object:
> 
> ```
> public class Product {
>         private String id;
>         private String name;
>         
>         private User user;
>         
>         public Product() {
>             
>         }
>     }
> ```
> 
> As I said, I think the exception is thrown because the class contains another reference to another object. In my case is **User**

Is there any workaround for this problem? =||= Hi also have such crash. Any workaround ?  =||= Still have this crash, waiting for 5 to deprecate, so, it must be the only way to fix it :`( =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
727can use gson to convert json into nested map ?DongYelytasky11/04/15, 09:12:50 AM"like that:
 {""result"": {
      ""update"": {
           ""title"": ""双11抢10亿现金券啦"",
            ""msg"": ""峰峰说，升级新版之后双十一抢购杠杠的！新版还有不一样的峰峰彩蛋哦"",
},
     ""ts"": 1446446129,
}
Map<String,Object> resultMap = new  HashMap<>();
Map<String,Object> map1 = new  HashMap<>();
map1.put(""title"",""双11抢10亿现金券啦"");
map1.put(""msg"",""峰峰说，升级新版之后双十一抢购杠杠的！新版还有不一样的峰峰彩蛋哦"");
resultMap.put(""update"",map1);
resultMap.put(""ts"",""1446446129"");

can gson do it above directly？""If your type is Map<String, Map<String, String>> I can't imagine why not.
You'd need to use a Type rather than a Class, obtained from TypeToken,
since you're tryign to deserialize a parameterized type.

```
Type typeOfT = new TypeToken<Map<String, Map<String,
String>>>(){}.getType();
Map<String, Map<String, String>> map = gson.fromJson(jsonString, typeOfT);
```

On Tue, 3 Nov 2015 at 17:31 lytasky notifications@github.com wrote:

> like that:
> {""result"": {
> ""update"": {
> ""title"": ""双11抢10亿现金券啦"",
> ""msg"": ""峰峰说，升级新版之后双十一抢购杠杠的！新版还有不一样的峰峰彩蛋哦"",
> },
> ""ts"": 1446446129,
> }
> Map resultMap = new HashMap<>();
> Map map1 = new HashMap<>();
> map1.put(""title"",""双11抢10亿现金券啦"");
> map1.put(""msg"",""峰峰说，升级新版之后双十一抢购杠杠的！新版还有不一样的峰峰彩蛋哦"");
> resultMap.put(""update"",map1);
> resultMap.put(""ts"",""1446446129"");
> 
> can gson do it above directly？
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/727.
 =||= my type is  Map<String,Map<String,Map<String,Map<String,String>>>> , map in map, the level is  indefinitely ，only the deepest map is Map<String,String > ， can gson do this ？
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
728minor modificationwildpeanut11/05/15, 03:26:13 AMfor internal IOException throw correct mapping Exception(JsonIOException)"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Unfortunately, I don't think this is compatible with what callers currently expect.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
729updated minimum JDK version to 1.6.Inderjeet Singhinder12311/05/15, 03:24:05 AMAdded Overrides for methods implementing an interface."`String.isEmpty()` !
 =||= "updated minimum JDK version to 1.6.Inderjeet Singhinder12311/05/15, 03:24:05 AMAdded Overrides for methods implementing an interface.NaNInderjeet Singh11/05/15, 02:55:23 AMLinking to JDK 6 javadocs1
730Added support to serialize/deserialize ConcurrentMap and ConcurrentNa…Inderjeet Singhinder12311/05/15, 12:25:34 PM…vigableMap. This fixes https://github.com/google/gson/issues/624"Isn't this like, particularly sketchy? Because it might be changing as we encode?
 =||= @swankjesse Please explain what you mean by ""encode"". 
We already do something similar for Maps (use LinkedHashMap), and List. This is just an extension to support additional java.util.concurrent classes.
 =||= It's very weird to serialize a value that's under active modification. When would you do this?
 =||= Where is it under active modification? Are you saying it because it is a concurrent map? 
 =||= For that matter, ANY java object can be under active modification while Gson is serializing it.
 =||= Works for me. I still think code that does this is weird, but I can imagine non-weird use cases.
 =||= "Added support to serialize/deserialize ConcurrentMap and ConcurrentNa…Inderjeet Singhinder12311/05/15, 12:25:34 PM…vigableMap. This fixes https://github.com/google/gson/issues/624NaNInderjeet Singh11/05/15, 05:25:15 AMAdded support to serialize/deserialize ConcurrentMap and ConcurrentNavigableMap.1
731Added support for AtomicInteger, AtomicBoolean, AtomicLong and Atomic…Inderjeet Singhinder12311/06/15, 05:20:11 PM…IntegerArray."LGTM
 =||= Self-merging since @swankjesse  LGTM'd it.
 =||= "Added support for AtomicInteger, AtomicBoolean, AtomicLong and Atomic…Inderjeet Singhinder12311/06/15, 05:20:11 PM…IntegerArray.NaNInderjeet Singh11/06/15, 05:43:10 AMfixed typos1
732renamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTestInderjeet Singhinder12311/06/15, 11:24:53 PMNaNNaNrenamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTestInderjeet Singhinder12311/06/15, 11:24:53 PMNaNNaNInderjeet Singh11/06/15, 11:24:15 PMrenamed JavaUtilConcurrentLocksTest to JavaUtilConcurrentAtomicTest1
733Supported Currency and added additional tests for Vector, Stack and Properties.Inderjeet Singhinder12311/18/15, 01:57:59 AMNaN"@swankjesse  review please?
 =||= LGTM, though I'm quite surprised that you're adding such a bogus type.

Also, please squash.
 =||= No one asking for it, but I noticed that the default serialization was not correct.
 =||= Got it. Slightly scary, this change is not interoperable to anyone (accidentally) relying on the current broken behavior. I like Moshi's behavior here, which is to throw an exception! `Platform class java.util.Vector annotated [] requires explicit JsonAdapter to be registered`
 =||= @swankjesse  I only added support for Currency, not vector.
Yes, it breaks with the current behavior, but I think this is what any normal user will expect. In the past, we have added default adapters for classes from java.util.\* packages over time, technically breaking the serialization semantics.
 =||= merging based on earlier LGTM
 =||= "Supported Currency and added additional tests for Vector, Stack and Properties.Inderjeet Singhinder12311/18/15, 01:57:59 AMNaNNaNInderjeet Singh11/07/15, 12:17:47 AMadded tests for Properties1
734support contains(string),contains(int) in jsonarray classarungcloudbow11/10/15, 04:50:29 AMThis change is to support searching string in JsonArray since a novice developer may not really know about JsonPrimitves"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= marginal value for this PR, adds 2 extra methods.
Sorry, I am inclined to ignore it.

Thank you for the effort nonetheless. Also, appreciate the fact that you wrote a test.
 =||= Agreed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
736deserialize Map incorrectlyTsukiTsuki11/12/15, 08:10:48 AM"``` Java
HashMultimap<String, templateVo> templateBag = HashMultimap.create();
templateBag.put(templateVo.getId(), templateVo);
gson.toJson(templateBag.asMap())
Map<String, Collection<templateVo>> fromJson = null;
fromJson = gson.fromJson(fileReader.toString(), 
new TypeToken<Map<String,Collection<templateVo>>>() {
}.getType());
```

It show  
com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $""Sorry for open issue,

Just java.io.FileReader@1deeb40 problem in fileReader.toString()
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
738Added details and causes while throwing AssertionErrorInderjeet Singhinder12311/16/15, 10:27:50 PMNaN"LGTM. Rebase & squash.
 =||= Rebase and squash script no longer works for me.
 =||= "Added details and causes while throwing AssertionErrorInderjeet Singhinder12311/16/15, 10:27:50 PMNaNNaNInderjeet Singh11/16/15, 05:16:23 PMAdded the cause to Assertions1
740ISO8601 Date deserializationIgorMiller11/24/15, 03:06:51 AMAdded support for all ISO8601 formats, including milliseconds. You already have `UtcDateTypeAdapter` in `gson-extras` project, which was using the code from https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java to parse dates. Therefore I did the same, I created an utils class in gson project with that code and made it used by `DateTypeAdapter` and `DefaultDateTypeAdapter`"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= :+1: 
 =||= @JakeWharton @swankjesse I am merging this since this supports deserialization from lot more formats.

Thanks Igor.
 =||= "ISO8601 Date deserializationIgorMiller11/24/15, 03:06:51 AMAdded support for all ISO8601 formats, including milliseconds. You already have `UtcDateTypeAdapter` in `gson-extras` project, which was using the code from https://github.com/FasterXML/jackson-databind/blob/master/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java to parse dates. Therefore I did the same, I created an utils class in gson project with that code and made it used by `DateTypeAdapter` and `DefaultDateTypeAdapter`NaNGorik11/23/15, 06:21:41 AMRemoved unused code in ISO8601Utils1
741Ability to ignore a property if value is already set (Deserialization).Joe Ginleygintechsystems11/24/15, 03:00:59 AM"I have been using GSON for awhile and it is a great library, however I ran into one major issue for me. If I have an object in my application and I set its values from a JSON string, it is working as intended but if I pull in another JSON string with updated values but one of the values is missing from the string, it overwrites it and sets the value to null to a property that already had a value set beforehand. I found this from the GSON documentation but don't think there is an easy workaround.

From the documentation of GSON:
While deserialization, a missing entry in JSON results in setting the corresponding field in the object to null.""It's a feature. A missing field indicates it is set to null.
Your option is to define an InstanceCreator for your type and set it to whichever default value you want.
 =||= Can you give an example for this specific case please?
 =||= https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
742There is no gson 2.4 in jcenterJiawen Genggengjiawen11/26/15, 05:05:49 AM"https://jcenter.bintray.com/com/google/code/gson/gson/
there is no folder for 2.4, through I can still download.""2.4 and 2.5 are in Maven central: http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.google.code.gson%22%20AND%20a%3A%22gson%22
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
743README: Update old Google Sites links to GitHubPi DelportPiDelport11/26/15, 05:45:40 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it.
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= :+1: 
 =||= "README: Update old Google Sites links to GitHubPi DelportPiDelport11/26/15, 05:45:40 PMNaNNaNPiët Delport11/26/15, 10:22:42 AMREADME: Update old Google Sites links to GitHub1
745Added code formatting; removed HTML tags.Misha Brukmanmbrukman11/27/15, 09:27:25 PMAlso fixed minor grammar issues."Thanks!!
 =||= "Added code formatting; removed HTML tags.Misha Brukmanmbrukman11/27/15, 09:27:25 PMAlso fixed minor grammar issues.NaNMisha Brukman11/27/15, 08:45:21 PM"Added code formatting; removed HTML tags.

Also fixed minor grammar issues."1
746Add full license text for Apache License 2.0Misha Brukmanmbrukman11/27/15, 09:48:32 PMNaN"Can you move the applied license (the previous contents of this file) to the bottom of the README?
 =||= @JakeWharton — done; please take a look.
 =||= Perfect. Thanks for spotting this.
 =||= "Add full license text for Apache License 2.0Misha Brukmanmbrukman11/27/15, 09:48:32 PMNaNNaNMisha Brukman11/27/15, 09:02:19 PM"Add full license text for Apache License 2.0

Moved the short-form license to README."1
747Docs fixes: markdown, links, formatting.Misha Brukmanmbrukman11/27/15, 10:27:00 PM"- Removed extra spacing after bullets in list
- Removed extra blank lines; fixed indentation
- Fixed all links (including examples) to code.google.com to use github.com
  instead; deep links to code.google.com redirect to top-level GitHub project
  page, thus rendering them useless
- Removed extra strings in Markdown link targets
- Fixed capitalization and grammar
- Added more code formatting"":+1: 
 =||= "Docs fixes: markdown, links, formatting.Misha Brukmanmbrukman11/27/15, 10:27:00 PM"- Removed extra spacing after bullets in list
- Removed extra blank lines; fixed indentation
- Fixed all links (including examples) to code.google.com to use github.com
  instead; deep links to code.google.com redirect to top-level GitHub project
  page, thus rendering them useless
- Removed extra strings in Markdown link targets
- Fixed capitalization and grammar
- Added more code formatting"NaNMisha Brukman11/27/15, 09:56:59 PM"Docs fixes: markdown, links, formatting.

* Removed extra spacing after bullets in list
* Removed extra blank lines; fixed indentation
* Fixed all links (including examples) to code.google.com to use github.com
  instead; deep links to code.google.com redirect to top-level GitHub project
  page, thus rendering them useless
* Removed extra strings in Markdown link targets
* Fixed capitalization and grammar
* Added more code formatting"1
748Release process: cleanups and formatting fixesMisha Brukmanmbrukman11/28/15, 12:31:32 AM"- Formatted multi-line and complex commands via multi-line blocks and
  line-wrapping for readability and ease of copy-pasting
- Hid URLs behind text links for readability and brevity
- Added missing code formatting, both inline and blocks

You can see what the new page looks like in its entirety via [my branch](https://github.com/mbrukman/gson/blob/docs-release-process/ReleaseProcess.md)."NaNRelease process: cleanups and formatting fixesMisha Brukmanmbrukman11/28/15, 12:31:32 AM"- Formatted multi-line and complex commands via multi-line blocks and
  line-wrapping for readability and ease of copy-pasting
- Hid URLs behind text links for readability and brevity
- Added missing code formatting, both inline and blocks

You can see what the new page looks like in its entirety via [my branch](https://github.com/mbrukman/gson/blob/docs-release-process/ReleaseProcess.md)."NaNMisha Brukman11/27/15, 10:39:05 PM"Cleanups and formatting fixes

* Formatted multi-line and complex commands via multi-line blocks and
  line-wrapping for readability and ease of copy-pasting
* Hid URLs behind text links for readability and brevity
* Added missing code formatting, both inline and blocks"1
749Added language annotations to code blocks.Misha Brukmanmbrukman11/28/15, 12:31:10 AM"This enables GitHub to do proper syntax highlighting, thus improving the
readability of multi-line code blocks. As a result, some changes were required
to make the code blocks syntactically correct, since they're actually parsed by
language-aware parsers; primarily, this meant inserting comments.

You can see what this looks like via [my branch](https://github.com/mbrukman/gson/blob/docs-user-guide/UserGuide.md)."NaNAdded language annotations to code blocks.Misha Brukmanmbrukman11/28/15, 12:31:10 AM"This enables GitHub to do proper syntax highlighting, thus improving the
readability of multi-line code blocks. As a result, some changes were required
to make the code blocks syntactically correct, since they're actually parsed by
language-aware parsers; primarily, this meant inserting comments.

You can see what this looks like via [my branch](https://github.com/mbrukman/gson/blob/docs-user-guide/UserGuide.md)."NaNMisha Brukman11/27/15, 11:33:31 PM"Added language annotations to code blocks.

This enables GitHub to do proper syntax highlighting, thus improving the
readability of multi-line code blocks. As a result, some changes were required
to make the code blocks syntactically correct, since they're actually parsed by
language-aware parsers; primarily, this meant inserting comments."1
751Remove explicit step numbers; use autonumbering.Misha Brukmanmbrukman11/28/15, 06:39:01 PM"Markdown supports automatic list numbering; using this approach makes it easier
to add or remove new items without having to update all the following entries.""I think the current format reads better as plaintext.
 =||= Inder?
 =||= Thanks for checking with me, @swankjesse.
Auto-numbering is fine by me. Thanks for the change @mbrukman 
 =||= "Remove explicit step numbers; use autonumbering.Misha Brukmanmbrukman11/28/15, 06:39:01 PM"Markdown supports automatic list numbering; using this approach makes it easier
to add or remove new items without having to update all the following entries."NaNMisha Brukman11/28/15, 01:09:46 AM"Remove explicit step numbers; use autonumbering.

Markdown supports automatic list numbering; using this approach makes it easier
to add or remove new items without having to update all the following entries."1
753if I use the gson, how can I write the proguard-rules.pro? or nothing to do? Subsidiarycaixuejian12/01/15, 03:36:58 AM"if I add the following proguard content , It will work well?

-keepattributes Signature
-keepattributes _Annotation_

-keep class sun.misc.Unsafe { _; }
-keep class com.google.gson.stream._\* { *; }""They're here: https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
755Added failing test for #722Kristen Kozakgrayjay12/13/15, 02:10:09 AM"This commit adds three test cases created from the examples in https://github.com/google/gson/issues/722#issuecomment-162139672, as suggested in https://github.com/google/gson/issues/722#issuecomment-162250053.  The test `testParameterizedTypeSubclassInstanceVariableSerialization` currently fails with `expected:<{""optional"":{""value"":""string""}}> but was:<{""optional"":{}}>`

The tests use a simplified version of guava's `Optional` type to avoid a dependency on guava.  I noticed that all three tests pass when they use the `Optional` type from Java 8, because Java 8 implements `Optional` as one final class instead of a class hierarchy.""Closing the pull request as it is reproduced in https://github.com/google/gson/pull/757
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
757Using Raw class for serialization in case a parameterized type has no…Inderjeet Singhinder12312/13/15, 02:10:43 AM… fields."This solution has performance overhead of counting of class fields.
It is also an edge case, so I am closing the pull request.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
758Would it be possible to return a JSON input stream when adding to an Appendable is not possible?Lyubomyr Shaydarivlyubomyr-shaydariv12/21/15, 02:02:58 PM"Hi.

I've recently asked this question on [Stack Overflow](http://stackoverflow.com/questions/34363974/serializing-an-object-to-a-json-input-stream-using-gson), but I still don't know if what I asked for was good. The reason of the question was an attempt to stream JSON as if it were a pure streaming implementation. Let's say, there are cases when `Appendable` cannot be used, so there's simply nothing to append to (in it's, I guess, simplest form):

``` java
final String json = gson.toJson(value);
final byte[] bytes = json.getBytes(charset);
try ( final InputStream inputStream = new ByteArrayInputStream(bytes) ) {
    inputStreamConsumer.accept(inputStream);
}
```

In the code snippet above, the whole JSON is referenced by the `json` variable not matter how big the JSON string is. And, what is more wasting: `json.getBytes(...)` actually creates a new byte array so that I could adapt the byte array to an `InputStream` and pass it to the `inputStreamConsumer`. Well, I guess, I can write a pure `String` to `InputStream` adapter without holding an intermediate byte array, but I still have to hold a reference to the whole JSON.

Would it be possible to add a ""reverse"" `GSON.toJsonInputStream(...)` that could return an `InputStream` instance but not accept the `Appendable` instance, and not produce the whole JSON at once? Let's assume a single-thread application here, so we could be sure that the `value` object is not mutated while reading from the JSON input stream. Probably something like this:

``` java
try ( final InputStream inputStream = gson.toJsonInputStream(value) ) {
    inputStreamConsumer.accept(inputStream);
}
```

Sorry if this is a wrong place to ask questions or the feature request that doesn't meet GSON ideas, and if it isn't please feel free to close the issue.

Thanks.""Take a look at JsonWriter and JsonReader.
 =||= @swankjesse I can't seem to use any of them. `JsonReader` is definitely not what I'm looking for -- I don't have intention to read a JSON from an external source and to deserialize manually -- I need to generate the JSON out of an object in a streaming manner as if I worked with `Appendable`. `JsonWriter` is not what I'm looking for too. If I'd use `toJson` with an `Appendable` overload -- I'd face with an `OutputStream->InputStream` problem that can be solved either using bufferization (actually, what I've described in the post), or use, let's say, two threads to combine `PipedInputStream` and `PipedOutputStream`. What am I missing?
 =||= You can make a `JsonWriter` write to an arbitrary `Appendable` by building your own subclass of `Writer` that delegates to the `Appendable`, and passing that to `new JsonWriter()`. You can then pass that to `toJson`.
 =||= I feel confused. Sorry if I can't see it right, but doesn't what you suggest works over instances with write-semantics only (writers, appendables, and so on)? I can't have any of them, but I have to provide an input stream (or a reader) that could be passed to an input stream consumer. What I'm looking for is reading JSON tokens while _serializing an object_, not reading/tokenizing a JSON string obtained from elsewhere. Let's say, I have a `Map<Integer, String>` built with `ImmutableMap.of(1, ""foo"", 2, ""bar"")`, which I'd like to adapt to an input stream, that could produce/generate on sequential `read()`ing: `{`, `""`, `1`, `""`, ..., `}`... That's it.
 =||= Ah, got it. That we don't have.
 =||= @swankjesse ok, I see. Thank you for clarification.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
761Remove synthetic accessors from being generated.Jake WhartonJakeWharton12/27/15, 07:08:23 PM"Removes 14 methods being generated for trampolining to private members which brings the total to 1294 from 1308.

```
-rw-r--r--   1 jw  jw   176K Dec 27 01:39 after.dex
-rw-r--r--   1 jw  jw   221K Dec 27 01:38 after.jar
-rw-r--r--   1 jw  jw   177K Dec 27 01:39 before.dex
-rw-r--r--   1 jw  jw   223K Dec 27 01:39 before.jar
```""Excellent, I have been meaning to do the same after seeing a similar pull request in Moshi.
How do we add a comment explaining why we are making things package private?
 =||= LGTM
 =||= How do you know these are the only culprits for synthetic methods? Did you use a tool to find this out?
 =||= I used IntelliJ's ""Private member access between outer and inner classes"" inspection.

You can also use the `dx` tool in the Android SDK to compile the .jar to .dex and then use `dexdump` to list all methods and match on ones which start with 'access$':

```
$ dexdump -f before.dex | grep 'access\$' | wc -l
      12

$ dexdump -f after.dex | grep 'access\$' | wc -l
       0
```
 =||= "Remove synthetic accessors from being generated.Jake WhartonJakeWharton12/27/15, 07:08:23 PM"Removes 14 methods being generated for trampolining to private members which brings the total to 1294 from 1308.

```
-rw-r--r--   1 jw  jw   176K Dec 27 01:39 after.dex
-rw-r--r--   1 jw  jw   221K Dec 27 01:38 after.jar
-rw-r--r--   1 jw  jw   177K Dec 27 01:39 before.dex
-rw-r--r--   1 jw  jw   223K Dec 27 01:39 before.jar
```"NaNJake Wharton12/27/15, 06:39:19 AMRemove synthetic accessors from being generated.1
762Anonymous Map initialization does not serialize correctly.Prateek Srivastavaf2prateek12/30/15, 08:30:13 AM"Here's a sample to demonstrate the issue:

``` java
HashMap<String, String> context = new HashMap<String, String>() {{
  put(""city"", ""Toronto"");
}};
Gson gson = new Gson();
System.out.println(""context - "" + context);
System.out.println(""JSON - "" + gson.toJson(context));
```

Output:

```
context - {City=Toronto}
JSON - null
```

Initializing the map with the code below works fine:

``` java
HashMap<String, String> context = new HashMap<String, String>();
context.put(""city"", ""Toronto"");
```

While the first method is obviously a wasteful way to initialize a map, is this serialization behaviour for anonymous initialization expected? If so, can you clarify why?

The closest reference I could find to this was https://github.com/google/gson/issues/298, which is about fields in anonymous classes.""This is working as designed. Anonymous classes cannot be deserialized & for symmetry we forbid serialization also. You should get the expected result if you hint the actual Map.class type.
 =||= Ah so serialization is forbidden for anonymous classes in general, not just fields declared in anonymous classes!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
766Provide a way to deserialize null valuesPollospacitron01/05/16, 08:22:10 PM"I have the following json object: 

``` javascript
""elements"":[{
    {
        ""read_only"": false, 
        ""required"": true, 
        ""id"": ""12"", 
        ""type"": ""TimeDay"", 
        ""options"": [
          {
            ""name"": ""Peter"", 
            ""value"": 11
          }, 
          {
            ""name"": ""George"", 
            ""value"": 13
          }, 
          {
            ""name"": ""Laura"", 
            ""value"": 14
          }
        ]
      }]
    }
```

Which is correctly maps to the following class:

``` java
 public class Response{

     List<Element> elements
     public class Element {

        boolean read_only;
        boolean required;
        String id;
        String type;
        List<Option> options;

        class Option {
            String name;
            int value;
        }
    }
}
```

The problem however starts when I meet the following: 

``` javascript
""elements"":[{
{
    ""read_only"": false, 
    ""required"": true, 
    ""id"": ""12"", 
    ""type"": ""TimeDay"", 
    ""options"": null
  }]
}
```

Here Gson complaints that there is a String where it expects to find an Array, indicating that it is parsing the null value as a String with the value of ""null"" rather than setting my list to null. I searched everywhere for a way around this and all I found was to write my custom deserializer. So I did this:

``` java
         class NullCollectionDeserializer implements JsonDeserializer<List> {
            @Override
            public List deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {

                if (json.isJsonNull()) {
                    return null;
                }
                return new Gson().fromJson(json, typeOfT);
            }
        }
```

Not only I find it odd that I have to write a custom solution to provide what should be standard functionality but - due to the fact that the ""options"" list is nested within another list - the above code does not even work. This is because the deserialize method will be called when Gson meets the ""elements"" list, asking the new Gson instance at the end of the method to parse its contents, which in turn may contain the null list. Because this instance does not know how to handle null lists, the result is that Gson again complaints about finding a String where it expected to find an Array.""I am surprised at the behavior, we have plenty of tests that ensure that null behavior is correct in Gson.
https://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional

Can you send a pull request with a test that replicates this behavior?
 =||= Wrote a test and it passed. After further investigation I finally realised that the problem was with my api as in some cases the options array would be mistakenly wrapped in double quotes, thereby turning it into a string. Thank you for your help. I'll close this issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
768ISO8601 is not fully implementedDan Souzapaniko002/03/16, 04:23:52 AM"Hi guys,

I'm working on a project where I have to parse `2016-01-11T11:06:14.000-02` to java.util.Date which is a valid date according to [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) on page 12.

But I got an Exception trying to archive it

```
Caused by: com.google.gson.JsonSyntaxException: 2016-01-11T11:06:14.000-02
        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:107)
        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:84)
        at com.google.gson.DefaultDateTypeAdapter.deserialize(DefaultDateTypeAdapter.java:38)
        at com.google.gson.TreeTypeAdapter.read(TreeTypeAdapter.java:58)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:40)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)
        at com.google.gson.Gson.fromJson(Gson.java:861)
        at com.google.gson.Gson.fromJson(Gson.java:926)
        at com.google.gson.Gson.fromJson(Gson.java:899)
        at ...
Caused by: java.text.ParseException: Failed to parse date [""2016-01-11T11:06:14.000-02']: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00
        at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:270)
        at com.google.gson.DefaultDateTypeAdapter.deserializeToDate(DefaultDateTypeAdapter.java:105)
        ... 31 more
Caused by: java.lang.IndexOutOfBoundsException: Mismatching time zone indicator: GMT-02 given, resolves to GMT-02:00
        at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:236)
        ... 32 more
```

I'm able to fix this if it sounds reasonable.""Does using the `UtcDateTypeAdapter` work? https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java
 =||= It doesn't seem to work:

``` java
public class Bla {
        private Date createdAt;

        public Date getCreatedAt() {
            return createdAt;
        }

        public void setCreatedAt(Date createdAt) {
            this.createdAt = createdAt;
        }
    }
```

registering adapter:

``` java
public class GsonFactory {

    public Gson getGson(){

        GsonBuilder gsonBuilder = new GsonBuilder();

        return gsonBuilder.registerTypeAdapter(Date.class, new UtcDateTypeAdapter()).create();
    }
}
```

test case:

``` java
public class GsonFactoryTest {

    @Test
    public void dateShouldBeParsed() throws Exception {
        GsonFactory gsonFactory = new GsonFactory();
        Gson gson = gsonFactory.getGson();

        Bla bla = gson.fromJson(""{\""createdAt\"": \""2016-01-08T17:29:05.730-02\""}"", Bla.class);

        Calendar calendar = Calendar.getInstance();
        calendar.setTime(bla.getCreatedAt());

        assertEquals(2016, calendar.get(Calendar.YEAR));
    }
}
```

and the return:

```
com.google.gson.JsonParseException: java.text.ParseException: Failed to parse date [""2016-01-08T17:29:05.730-02']: null
    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:60)
    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:33)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:117)
    at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:217)
    at com.google.gson.Gson.fromJson(Gson.java:861)
    at com.google.gson.Gson.fromJson(Gson.java:826)
    at com.google.gson.Gson.fromJson(Gson.java:775)
    at com.google.gson.Gson.fromJson(Gson.java:747)
    at notificador.domain.config.factory.GsonFactoryTest.dateShouldBeParsed(GsonFactoryTest.java:18)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
Caused by: java.text.ParseException: Failed to parse date [""2016-01-08T17:29:05.730-02']: null
    at notificador.domain.config.factory.UtcDateTypeAdapter.parse(UtcDateTypeAdapter.java:234)
    at notificador.domain.config.factory.UtcDateTypeAdapter.read(UtcDateTypeAdapter.java:57)
    ... 37 more
```

Am I doing something wrong?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
769timezones without minutes should be valid according RFC3339Dan Souzapaniko002/03/16, 04:23:52 AM"According to RFC, the format is:

time-numoffset    = (""+"" / ""-"") time-hour [["":""] time-minute]

it fixes #768 ""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= @swankjesse @JakeWharton I am going to merge this, as this is additional support with seemingly no backward incompatibility.
 =||= "timezones without minutes should be valid according RFC3339Dan Souzapaniko002/03/16, 04:23:52 AM"According to RFC, the format is:

time-numoffset    = (""+"" / ""-"") time-hour [["":""] time-minute]

it fixes #768 "NaNDanillo Souza01/11/16, 05:33:55 PMtimezones without minutes should are valid according RFC33391
770Fix typo in JsonArray docsGabriel BorgesPsidium01/12/16, 03:16:19 PM"Hey, sorry to bother you guys with such an small pull request, but I saw this typo in the documentation and I couldn't let it go.

:stuck_out_tongue_closed_eyes: 
thankss""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= @Psidium Thanks for the typo fix. Small pull requests like these are perfect.
 =||= "Fix typo in JsonArray docsGabriel BorgesPsidium01/12/16, 03:16:19 PM"Hey, sorry to bother you guys with such an small pull request, but I saw this typo in the documentation and I couldn't let it go.

:stuck_out_tongue_closed_eyes: 
thankss"NaNPsidium01/12/16, 01:02:42 PMfix typo in JsonArray docs1
771Add setting for leniency on Gson instance.Jake WhartonJakeWharton01/18/16, 07:03:23 PMAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings."This is good. It’s a bit unfortunate that by default `Gson` is actually lenient in some cases and not-lenient in others. Oh well.
 =||= LGTM. @inder123 any thoughts?
 =||= > It’s a bit unfortunate that by default Gson is actually lenient in some cases and not-lenient in others. Oh well.

Agree! Too late to change. Just trying to make the best of that unfortunate situation. 
 =||= LGTM!
 =||= "Add setting for leniency on Gson instance.Jake WhartonJakeWharton01/18/16, 07:03:23 PMAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.NaNJake Wharton01/17/16, 08:03:04 AM"Add setting for leniency on Gson instance.

Add a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings."1
772Add nullsafe option to JsonAdapter annotationJerzy Chałupskichalup01/18/16, 04:56:14 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= CLA signed.
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= I think this is a weird API. Should we just do null safety automatically with `@JsonAdapter`?
 =||= That would be reasonable, but strictly speaking it's a backward
incompatible change. Not sure what's the project's policy.
On Jan 17, 2016 18:23, ""Jesse Wilson"" notifications@github.com wrote:

> I think this is a weird API. Should we just do null safety automatically
> with @JsonAdapter?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/772#issuecomment-172354642.
 =||= @inder123  ?
 =||= @JakeWharton ?
 =||= > Should we just do null safety automatically with `@JsonAdapter`?

Yeah this is probably best since it's in line with the behavior without being annotated. Or at least for fields it is. Not sure about classes in that case.
 =||= Nits fixed.

So we really have two questions: should nullsafe wrap be configurable and what should be the default behavior. I can't think of the non-contrived use case for not nullsafe adapter, so I'd be fine with making it non-configurable default.

Let me know what you think, and I'll update my PR.
 =||= Not configurable by default is my preference.
 =||= So please update your PR!
 =||= Updated.
 =||= LGTM
 =||= "Add nullsafe option to JsonAdapter annotationJerzy Chałupskichalup01/18/16, 04:56:14 PMNaNNaNJerzy Chalupski01/18/16, 03:41:07 PMMake TypeAdapters created by @JsonAdapter null-safe1
773Update reader and writer for RFC 7159.Jake WhartonJakeWharton01/18/16, 08:16:01 PMThis allows for top-level value types without the requirement of leniency.NaNUpdate reader and writer for RFC 7159.Jake WhartonJakeWharton01/18/16, 08:16:01 PMThis allows for top-level value types without the requirement of leniency.NaNJake Wharton01/18/16, 08:07:33 PMUpdate reader and writer for RFC 7159.1
774Convert integer 1 & 0 to the boolean true & false when parsingMaheshwar LigademaheshwarLigade01/21/16, 01:51:54 PM"I have JSON response which contains the object of user, which also  has the status as 1 & 0 which says that the value is true or false. please let me know how to parse the integer value to boolean.

I have the Custom object Users. From API I am getting the {""status"":1}, I need to convert it into the boolean i.e true, But I am not interested to serialise  all the other fields, they are as it is, I just need the solution for only boolean.""You can write a type adapter. See the part about `@ToJson` on the readme for an example.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
775Fix for jdk 8: add Override annotationAlain Vitryavitry01/22/16, 11:52:41 AMCosmetic only"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
777HITomikkyu031901/28/16, 05:02:23 PM"> {
>   ""id"": 234,
>   ""users"": [
>     {
>       ""age"": 11,
>       ""name"": ""ddd""
>     },
>     {
>       ""age"": 22,
>       ""name"": ""ccc""
>     }
>   ]
> } 

I want Bean is 

> String id；
>    String users；

but 

> java.lang.IllegalArgumentException: field com.qyer.android.plan.bean.Bean xxxx  has type java.lang.String, got java.util.ArrayList 

how do about it？ please help！！""@willnorris @adamtanner @vogella 
 =||= The `users` key is an array in the JSON, not a string. You need to use the type `List<User>` for the `users` field and create a `User` object which has both `age` and `name` fields.

For more help in the future, please ask a questions on StackOverflow with the 'gson' tag. There's a lot of helpful people over there and it usually results in a much faster answer.
 =||= Yes ，I know List<User> is OK，but I want Use string  and save the string，Can I do that?
 =||= As in, you want the JSON array to be stored as a raw String?
 =||= yes~~ so i use ""string users""
 =||= Gson does not support that. You can use `JsonArray` as the type which will represent the array in a simple object model form.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
778Setting lenient in Retrofit-2Maximmaxblumental01/28/16, 09:35:39 PMHow about make this setting through providing an optional argument to the factory. I can't see a short way to that now. Here's a more detailed description of my problem and attempt to solve it: http://stackoverflow.com/questions/35072287/gsonconverterfactory-for-retrofit2-lenient-setting"Leniency has been added to `GsonBuilder` for the next release (https://github.com/google/gson/pull/771) and will be supported in Retrofit once available (https://github.com/square/retrofit/issues/1465).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
779json conversion error in retrofit 2abhishekgarggabhishekgargg02/01/16, 02:39:57 PM"I am facing problem in fetching json data from a GET request using retrofit.
Below is the stack trace to the problem. How do I get rid of this error?

java.io.EOFException: End of input at line 1 column 1
                                                                                           at com.google.gson.stream.JsonReader.nextNonWhitespace(JsonReader.java:1414)
                                                                                           at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:553)
                                                                                           at com.google.gson.stream.JsonReader.peek(JsonReader.java:429)
                                                                                           at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:202)
                                                                                           at com.google.gson.TypeAdapter.fromJson(TypeAdapter.java:260)
                                                                                           at retrofit2.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:33)
                                                                                           at retrofit2.GsonResponseBodyConverter.convert(GsonResponseBodyConverter.java:23)
                                                                                           at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:154)
                                                                                           at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:92)
                                                                                           at okhttp3.RealCall$AsyncCall.execute(RealCall.java:133)
                                                                                           at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:33)
                                                                                           at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
                                                                                           at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
                                                                                           at java.lang.Thread.run(Thread.java:818)""I am using these libraries..
compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
compile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'
 =||= This happens because you told Gson to deserialize data from a stream into some object and the stream is empty. If there is no data, Gson should not be called (and you can return null or however you want to indicate to the calling code that there's no data).
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
780not able to manage cookies in android using retrofit2 and okhttp3abhishekgarggabhishekgargg02/02/16, 03:18:31 PM"I am sending a POST login request which gets me a jSessionId, and I want to add this jSessionId in my consecutive requests to fetch logged in data.

I think this kind of task is handled by cookies in android, and I have found a couple of solutions for the same, but most of the solutions are either not compatible with okhttp3 OR don't work.

Can anyone please help me out with any suggestions or a small working sample that works with okhttp3 and retrofit2?""Gson is a JSON serializer and has nothing to do with cookies or either of these libraries. This type of question is best suited for StackOverflow using tags of the libraries you mention.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
781"Gson converts \/ to \\/"HaiderZkHaider02/03/16, 04:05:18 AM"How can I fix this? I am trying to pass a request with `Retrofit`, something like this:

```
http:\/\/something.com\/something\/else.json
```

But `Gson` converts this into:

```
http:\\/\\/something.com\\/something\\/else.json
```""The JSON RFC dictates this in section 7: https://tools.ietf.org/html/rfc7159#section-7, emphasis added.

> All Unicode characters may be placed within the quotation marks, **except for the characters that must be escaped**: quotation mark, **reverse solidus**, and the control characters (U+0000 through U+001F).

The reverse solidus is the `\` character and must be escaped inside strings.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
782JSONObject  transforms to nameValuePairNick UnuchekKolyall02/03/16, 03:09:36 PM"Example:

```
class Example {
 @SerializedName(""exampleField"")
    public JSONObject exampleField = new JSONObject(""{\""name\"":\""Nick\""}"");
}
```

`Log.e(TAG,gson.toJson(new Example()))`

result:

```
""exampleField"": {
  ""nameValuePairs"": {
   ""name"": ""Nick""
  }
 }

```

expected Result:

```
""exampleField"": {
   ""name"": ""Nick""
   }
```""Use `com.google.gson.JsonObject` not `org.json.JSONObject`.
 =||= Or write a `TypeAdapterFactory` that can handle `org.json*` types, but using Gson's own types seems a lot easier.
 =||= with JsonObject my result is

""exampleField"": {
  ""members"": {
   ""name"": ""Nick""
  }
 }

instead of the expected result.

Can I create a JsonObject without any LinkedTreeMap or similar? =||= GsonBuilder registerTypeAdapter

```
new GsonBuilder()
.registerTypeAdapter(JSONObject.class, JSONObjectAdapter.sInstance)
.registerTypeAdapter(JSONArray.class, JSONArrayAdapter.sInstance)
```

``` 
    static class JSONObjectAdapter implements JsonSerializer<JSONObject>, JsonDeserializer<JSONObject> {

        public static JSONObjectAdapter sInstance = new JSONObjectAdapter();

        @Override
        public JsonElement serialize(JSONObject src, Type typeOfSrc, JsonSerializationContext context) {
            if (src == null) {
                return null;
            }

            JsonObject jsonObject = new JsonObject();
            Iterator<String> keys = src.keys();
            while (keys.hasNext()) {
                String key = keys.next();
                Object value = src.opt(key);

                JsonElement jsonElement = context.serialize(value, value.getClass());
                jsonObject.add(key, jsonElement);
            }
            return jsonObject;
        }

        @Override
        public JSONObject deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            if (json == null) {
                return null;
            }
            try {
                return new JSONObject(json.toString());
            } catch (JSONException e) {
                e.printStackTrace();
                throw new JsonParseException(e);
            }
        }
    }


    static class JSONArrayAdapter implements JsonSerializer<JSONArray>, JsonDeserializer<JSONArray> {

        public static final JSONArrayAdapter sInstance = new JSONArrayAdapter();

        @Override
        public JsonElement serialize(JSONArray src, Type typeOfSrc, JsonSerializationContext context) {
            if (src == null) {
                return null;
            }
            JsonArray jsonArray = new JsonArray();
            for (int i = 0; i < src.length(); i++) {
                Object object = src.opt(i);
                JsonElement jsonElement = context.serialize(object, object.getClass());
                jsonArray.add(jsonElement);
            }
            return jsonArray;
        }

        @Override
        public JSONArray deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            if (json == null) {
                return null;
            }
            try {
                return new JSONArray(json.toString());
            } catch (JSONException e) {
                e.printStackTrace();
                throw new JsonParseException(e);
            }
        }
    }

```
 =||= > GsonBuilder registerTypeAdapter
> 
> ```
> new GsonBuilder()
> .registerTypeAdapter(JSONObject.class, JSONObjectAdapter.sInstance)
> .registerTypeAdapter(JSONArray.class, JSONArrayAdapter.sInstance)
> ```
> 
> ```
>     static class JSONObjectAdapter implements JsonSerializer<JSONObject>, JsonDeserializer<JSONObject> {
> 
>         public static JSONObjectAdapter sInstance = new JSONObjectAdapter();
> 
>         @Override
>         public JsonElement serialize(JSONObject src, Type typeOfSrc, JsonSerializationContext context) {
>             if (src == null) {
>                 return null;
>             }
> 
>             JsonObject jsonObject = new JsonObject();
>             Iterator<String> keys = src.keys();
>             while (keys.hasNext()) {
>                 String key = keys.next();
>                 Object value = src.opt(key);
> 
>                 JsonElement jsonElement = context.serialize(value, value.getClass());
>                 jsonObject.add(key, jsonElement);
>             }
>             return jsonObject;
>         }
> 
>         @Override
>         public JSONObject deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
>             if (json == null) {
>                 return null;
>             }
>             try {
>                 return new JSONObject(json.toString());
>             } catch (JSONException e) {
>                 e.printStackTrace();
>                 throw new JsonParseException(e);
>             }
>         }
>     }
> 
> 
>     static class JSONArrayAdapter implements JsonSerializer<JSONArray>, JsonDeserializer<JSONArray> {
> 
>         public static final JSONArrayAdapter sInstance = new JSONArrayAdapter();
> 
>         @Override
>         public JsonElement serialize(JSONArray src, Type typeOfSrc, JsonSerializationContext context) {
>             if (src == null) {
>                 return null;
>             }
>             JsonArray jsonArray = new JsonArray();
>             for (int i = 0; i < src.length(); i++) {
>                 Object object = src.opt(i);
>                 JsonElement jsonElement = context.serialize(object, object.getClass());
>                 jsonArray.add(jsonElement);
>             }
>             return jsonArray;
>         }
> 
>         @Override
>         public JSONArray deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
>             if (json == null) {
>                 return null;
>             }
>             try {
>                 return new JSONArray(json.toString());
>             } catch (JSONException e) {
>                 e.printStackTrace();
>                 throw new JsonParseException(e);
>             }
>         }
>     }
> ```

NB =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
785Simple Gson Java sample yields nullbruce-osnexus02/09/16, 03:15:48 AM"The simplest sample code, as shown on several sites, doesn't seem to work as shown. Disclaimer - I am very new to Java. Scratching my head, it looks like I'm doing it exactly as shown in the simplest of simple examples.
Here is what I am trying:

```
   class BagOfPrimitives {
          private int value1 = 1;
          private String value2 = ""abc"";
          private transient int value3 = 3;
          BagOfPrimitives() {
              // no-args constructor
          }
    }
    BagOfPrimitives obj = new BagOfPrimitives();
    Gson gson1 = new Gson();
    String jsonStr = gson1.toJson(obj);   
    System.out.println( ""jsonStr = "" + jsonStr );
```

And it prints: 
    jsonStr = 

Similarly, trying to go the other way:

```
 class testClass {
        public String vendorId = ""foo"";
        public String productId = ""bar"";
        testClass() {}
    }
    testClass myInst2 = new testClass();    // Could or should be ""null""?
    String inpStr = ""{\""vendorId\"": \""Acme\"",\""productId\"": \""WhizBang\""}"";
    myInst2 = gson.fromJson( inpStr, testClass.class );
    System.out.println( ""    vendorId = "" + myInst2.vendorId );
    System.out.println( ""    productId = "" + myInst2.productId );
```

And it prints:
    vendorId = null
    productId = null""All of these examples should work as long as BagOfPrimitives and testClass are not inner classes.
Static inner classes are just fine.

Look at these tests for examples of what works:
https://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional
 =||= Thanks for the quick reply.> BagOfPrimitives and testClass are not inner classesThat was it. I had those classes defined inside my test method. Putting those outside as ""public"" (still inside the main test class) made it work.Thanks!!-bBruce LoweOS NEXUS Engineeringbruce.lowe@osnexus.comhttp://www.osnexus.com

-------- Original Message --------
Subject: Re: [gson] Simple Gson Java sample yields null (#785)
From: inder123 notifications@github.com
Date: Mon, February 08, 2016 8:16 pm
To: google/gson gson@noreply.github.com
Cc: bruce-osnexus bruce.lowe@osnexus.com

All of these examples should work as long as BagOfPrimitives and testClass are not inner classes. Static inner classes are just fine. Look at these tests for examples of what works: https://github.com/google/gson/tree/master/gson/src/test/java/com/google/gson/functional —Reply to this email directly or view it on GitHub.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
786new JsonElement() constructor not compileVasiliybasvas02/11/16, 02:16:13 PM"IDE say that error and not compile code
JsonElement je = new JsonElement();
""Cannot instantiate the type JsonElement""""`JsonElement` is an abstract class. `JsonObject` and `JsonArray` are the implementations that you can instantiate.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
787Simplify Gson poms.Jesse Wilsonswankjesse02/11/16, 05:58:53 PM"A lot of the configuration in these poms has been taken over by improvements
to the Maven release plugin.""LGTM. I would do a `mvn clean javadoc:jar sources:jar` to verify those tasks do what you expect and generate the output we expect.
 =||= "Simplify Gson poms.Jesse Wilsonswankjesse02/11/16, 05:58:53 PM"A lot of the configuration in these poms has been taken over by improvements
to the Maven release plugin."NaNjwilson02/11/16, 05:47:25 PM"Simplify Gson poms.

A lot of the configuration in these poms has been taken over by improvements
to the Maven release plugin."1
789Use the Java 7 language but limit to Java 6 APIs.Jesse Wilsonswankjesse02/12/16, 03:42:56 AM"This way we get nice features like ARM blocks and diamonds, but still work
on Android.""https://github.com/google/gson/pull/790
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
790Build Gson for Java 1.6.Jesse Wilsonswankjesse02/12/16, 03:52:16 AMThe upgrade to Java 1.7 was a clumsy bug."LGTM
 =||= "Build Gson for Java 1.6.Jesse Wilsonswankjesse02/12/16, 03:52:16 AMThe upgrade to Java 1.7 was a clumsy bug.NaNjwilson02/12/16, 03:42:41 AM"Build Gson for Java 1.6.

The upgrade to Java 1.7 was a clumsy bug."1
791Fixed code style to remove explicit casting op.Marcelo Camargohaskellcamargo02/14/16, 11:56:35 PM"· Separated binary operator

This is a very, very, **very** small change, but that unnecessary explicit `(double)` casting with joined expressions on binary operator was affecting my OCD.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= "Fixed code style to remove explicit casting op.Marcelo Camargohaskellcamargo02/14/16, 11:56:35 PM"· Separated binary operator

This is a very, very, **very** small change, but that unnecessary explicit `(double)` casting with joined expressions on binary operator was affecting my OCD."NaNMarcelo Camargo02/14/16, 05:47:05 AM"Fixed code style to remove explicit casting op.

· Separated binary operators"1
792Fix some typos in gson comments.Dongjoon Hyundongjoon-hyun02/15/16, 10:15:46 PMNaN"Thank you, @JakeWharton .
 =||= "Fix some typos in gson comments.Dongjoon Hyundongjoon-hyun02/15/16, 10:15:46 PMNaNNaNDongjoon Hyun02/15/16, 10:11:23 PMFix some typos in gson comments.1
793Fix RuntimeTypeAdapterFactory javadocEgor Neliubaegor-n02/19/16, 02:55:24 PMNaN"Thanks
 =||= "Fix RuntimeTypeAdapterFactory javadocEgor Neliubaegor-n02/19/16, 02:55:24 PMNaNNaNEgor N02/19/16, 02:14:55 PMFix RuntimeTypeAdapterFactory javadoc1
794Collapse bullets into a paragraphJonathan Paughjpaugh02/23/16, 01:32:16 AM"The section entitled ""Collections Limitations"" contains 3 bullets, but one semantic point, which is confusing.

Make this point in a paragraph instead of a bullet list.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= "Collapse bullets into a paragraphJonathan Paughjpaugh02/23/16, 01:32:16 AM"The section entitled ""Collections Limitations"" contains 3 bullets, but one semantic point, which is confusing.

Make this point in a paragraph instead of a bullet list."NaNJonathan Paugh02/22/16, 09:30:29 PM"Collapse bullets into a paragraph

The section entitled ""Collections Limitations"" contains 3 bullets, but one semantic point.

Make this point in a paragraph instead of a bullet list."1
795Gson.fromJson methods now respect the lenient flagScott Brownsgbrown02/23/16, 01:03:28 PM"Gson.fromJson(JsonReader, Type) would previously override the lenient flag in the JsonReader to always be true while being used from here.  This would cause all instances of Gson to act as though the lenient flag is set to true regardless of the actual state in the Gson object.  I have corrected this to respect the lenient flag.

also updated JsonReader.nextDouble() method to deserialize infinite values, following the comments
in GsonBuilder.serializeSpecialFloatingPointValues() method which claims:
""Gson always accepts these special values during deserialization""

These fixes should also address issue #372""Unfortunately, as the tests suggest, this is massively incompatible. If you'd like this behavior in your own code, avoid toJson/fromJson and use a TypeAdapter instead.
 =||= I think Gson.lenient flag probably does more harm than good in the current state.  The comments on the GsonBuilder.setLenient() method say 

> By default, Gson is strict and only accepts JSON as specified by <a href=""http://www.ietf.org/rfc/rfc4627.txt"">RFC 4627</a>.

The comments on Gson.setLenient() also references the JsonReader.setLenient(boolean) method which has a great explanation of what should and shouldn't be considered when using the lenient flag.

The unfortunate fact here is that due to the Gson.fromJson(JsonReader, Type) method always setting the lenient flag to true when parsing, almost none of what is commented in GsonBuilder about the default behavior of Gson is true.  The only affect that setting the lenient flag on Gson will do is to allow comments to be at the end of your json buffer when calling Gson.fromJson(Reader, Type) since the assertFullConsumption(Object, JsonReader) method will be called from here and only checks for data at the end of the buffer having not been consumed (e.g. comments at the end).

Consider, for example, the test in com.google.gson.functional.LeniencyTest

```
    @Override
   protected void setUp() throws Exception {
     super.setUp();
     gson = new GsonBuilder().setLenient().create();
   }

   public void testLenientFromJson() {
     List<String> json = gson.fromJson(""""
         + ""[ # One!\n""
         + ""  'Hi' #Element!\n""
         + ""] # Array!"", new TypeToken<List<String>>() {}.getType());
     assertEquals(singletonList(""Hi""), json);
   }
```

If you were to remove the comment at the end of the String (""# Array!""), then it would not make any difference at all whether or not the lenient flag had been set.  The following would also pass:

```
     List<String> json = new GsonBuilder().create().fromJson(""""
         + ""[ # One!\n""
         + ""  'Hi' #Element!\n""
         + ""]"", new TypeToken<List<String>>() {}.getType());
     assertEquals(singletonList(""Hi""), json);
```

It seems counterintuitive that with the lenient flag unset, comments in the middle of the JSON data would be ignored but comments at the end would cause a failure when the Gson parser is supposed to be ""strict"".

If it is considered undesirable to change the default behavior (to the behavior that is documented) by actually respecting a default lenient flag being set to false (i.e. default to strict), then perhaps the correct answer is to respect the lenient flag, default Gson to have the lenient flag set to true, and update the javadocs to reflect that Gson by default is lenient.

Do you have any thoughts on this alternate approach?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
796OSGi manifest headers removed?Sean Brightseanbright02/25/16, 05:08:20 AM"The OSGi headers were removed as part of https://github.com/google/gson/commit/2016e9553eb946a09a9e70d83d31f4e8da675805

These should be restored"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
797Restore OSGi manifest headersSean Brightseanbright02/25/16, 05:08:20 AM"Commit 2016e95 removed the necessary MANIFEST.MF headers for Gson to
resolve in an OSGi environment. This patch restores them.

Fixes #796""Thanks!
 =||= The 2.5 bundle exported the `com.google.gson.internal.*` packages, so for backwards compatibility I was doing the same here. I've updated the PR to exclude them.
 =||= Awesome, thanks!
 =||= (I like this approach much better than the OSGi plugins I’ve encountered elsewhere)
 =||= "Restore OSGi manifest headersSean Brightseanbright02/25/16, 05:08:20 AM"Commit 2016e95 removed the necessary MANIFEST.MF headers for Gson to
resolve in an OSGi environment. This patch restores them.

Fixes #796"NaNSean Bright02/23/16, 04:25:21 PM"Restore OSGi manifest headers

Commit 2016e95 removed the necessary MANIFEST.MF headers for Gson to
resolve in an OSGi environment. This patch restores them."1
798Minor readability editDaniel Debertghandhikus02/25/16, 05:06:41 AMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= "Minor readability editDaniel Debertghandhikus02/25/16, 05:06:41 AMNaNNaNghandhikus02/24/16, 06:50:07 PMMinor readability edit1
800Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapt…Inderjeet Singhinder12302/26/16, 06:35:59 PM…erFactory.create() returned null."I would like to cut Gson 2.6.2 with this change. Let me know if you have any concerns @swankjesse and @JakeWharton 
 =||= Fix looks reasonable but the test case looks like you just pulled it from another codebase. Could you write a targeted test case instead?
 =||= Done, take another look.
 =||= I still don’t really understand this test. Would end users use ThreadLocals ?
 =||= @swankjesse  This is production code written by me for a specific use-case.
I was interacting with a REST service that, unfortunately, stored JSON as s String in a field. To support that with JSON, I wrote this adapter class. I didn't start with ThreadLocals, but the recursive invocation from JsonAdapterFactory forced my hand.
 =||= Rather than starting with the test you used to trigger this in your application, can you build a test case from scratch specifically to reproduce this bug?
 =||= (I don't imagine that parsing JSON as a string is necessary for the fix made here.)
 =||= Erm, you shouldn't need to convert a string from JSON within another type adapter. 
 =||= Ok, revised the test to eliminate string to JSON conversion.
 =||= Yeah, that's more obvious. Thanks!
 =||= "Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapt…Inderjeet Singhinder12302/26/16, 06:35:59 PM…erFactory.create() returned null.NaNInderjeet Singh02/26/16, 05:25:23 PMincorporated code review feedback by eliminating the stringified type adapter.1
801Added JDK 8 doclint exclusion sectionInderjeet Singhinder12302/27/16, 02:14:08 AMNaN"LGTM!
 =||= "Added JDK 8 doclint exclusion sectionInderjeet Singhinder12302/27/16, 02:14:08 AMNaNNaNInderjeet Singh02/27/16, 02:13:43 AMAdded JDK 8 doclint exclusion section1
802previous mvn release:prepare failed but updated GitHub anyway. Fixing…Inderjeet Singhinder12302/27/16, 02:21:38 AM… that."LGTM
 =||= "previous mvn release:prepare failed but updated GitHub anyway. Fixing…Inderjeet Singhinder12302/27/16, 02:21:38 AM… that.NaNInderjeet Singh02/27/16, 02:19:41 AMprevious mvn release:prepare failed but updated GitHub anyway. Fixing that.1
803How can I custom deserialize some fields only?burakkilic02/28/16, 09:21:16 PM"   My shop json is:

```
 ""shop"":{
""name"" : {
    ""en"" : ""My Shop"",
    ""es"" : ""Mi Tienda"" 
}, 
""order"" : 0
}
```

And shop model is:

```
class Shop{
    public String name;
   public int order
}
```

So how can I deserialize that kind of Json to this model? Can I write a custom serializer for only ""name"" field?""You can use the [`@JsonAdapter`](https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/annotations/JsonAdapter.html) annotation on the first for which you want to deserialize using custom logic. In your example, you would write a `TypeAdapter` or `TypeAdapterFactory` which handled selecting the correct language from the object and return the string value.
 =||= Thank you,

```
public class MultilingualStringAdapter extends TypeAdapter<String> {


@Override
public void write(JsonWriter out, String value) throws IOException {
    Log.d(""multilingual test"", value);
}

@Override
public String read(JsonReader in) throws IOException {
    String value = null;
    in.beginObject();
    while(in.hasNext()){
        String name = in.nextName();
        if(name.equals(Global.getAppLanguage().code)){
            value = in.nextString();
        }
        else {
            in.skipValue();
        }
    }
    in.endObject();
    return value;
}
}
```

solved my issue.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
805List of Tuples is parsed as LinkedTreeMapBenbes1002t03/06/16, 12:07:49 AM"I have a Nested construct named Tuple<String, Object>(String left, Object right). So it has a left side and a right side. In my Application this structure looks like:
Tuple(left=1, right=List(Tuple(left=2, right=Tuple(left=3, right=""test"")), Tuple(left=4, right=""test2""))))

It's just an example but you get the idea. It's a random nested structure of Tuples and the right var at the bottom of the structure is everytime a String. 

Now the Problem: Encoding and Decoding with Gson works. The first layer of the structure is accessable as Tuple. I can also access the List of Tuples by casting it to a List of Objects.  BUT if I try to cast one of the List entries to Tuple I get an java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.my.package.name.Tuple.

I can not explain this behavior except that Gson internally creates a map structur with that list of tuples (because a map is nothing else than a list of tuples). But why do I get an error by casting the list entries and not by casting the list? And is there a way to avoid this behavior? My Tuple already implements Serializable but this fact has no effect.""Write an appropriate InstanceCreator?
 =||= Thanks for your quick reply, but an instance creator changed nothing. The reason for this is, that before I encode my structure, the Tuple is (String, Object) so while decoding it, gson will just see the object at this place, even if it's actually a Tuple. I need to do this, because the right side of my Tuple could be another Tuple, a List of Tuples or a String. 
 =||= If the types on the right are finite you can annotate the field with
@JsonAdapter(TupleRightTypeAdapter.class) and write a type adapter which
deserializes one of the three types you expect based on whether the JSON
indicates a scalar string, list, or Tuple object.

On Thu, Mar 3, 2016 at 5:03 PM Ben notifications@github.com wrote:

> Thanks for your quick reply, but an instance creator changed nothing. The
> reason for this is, that before I encode my structure, the Tuple is
> (String, Object) so while decoding it, gson will just see the object at
> this place, even if it's actually a Tuple. I need to do this, because the
> right side of my Tuple could be another Tuple, a List of Tuples or a
> String.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/805#issuecomment-191985575.
 =||= Thanks for your suggestions, I tried both but finally I used the JsonDeserializer<Tuple> and it worked really good.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
806Gson synchronized map replaced with concurrent hash mapVsevolod Tolstopyatovqwwdfsad03/05/16, 09:54:12 PM"Internally Gson class uses Collections#synchronizedMap as a thread-safe map for typeTokenCache.
In a highly-contended environment I'm experiencing unpredictable latency spikes, 
while the performance of Gson#toJson degrades significantly even for simple objects. 
It's typical for an application thread to hang on typeTokenCache#get average 3-15 ms in such situations.
See [this](https://gist.github.com/qwwdfsad/a72692ab56a1a946a5fb) benchmark results to observe this problem (results for patch included).

For a more or less generic serialization code it's impossible to use TypeAdapter directly. One of the solutions might be to use thread-local Gson instances, but from programmer's perspective it makes code more obfuscated, requires an additional explanation on why this was done and floods the heap with duplicate objects. Gson is declared as thread-safe, so it seems reasonable to expect fine-grained concurrency level internally.  Moreover, after initial application warmup typeTokenCache becomes a mostly read-only structure (in fact, read-only), so allowing non-blocking reads looks like a perfect fit. 

Provided patch replaces synchronized map with j.u.c.ConcurrentHashMap. The main difference between synchronized map and CHM is null keys prohibition, so implicit code-path for null is added. 
As you can see in benchmark results, even despite of additional code path for null keys, overall throughput increases even in single-threaded case due to absence of explicit synchronization (though JVM optimizes uncontended locks, some overhead is still present), so there is no risks or performance degradation associated with this patch.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= What happens if you extract a TypeAdapter and keep a reference to it? There’s not reason to go through that cache when you can just keep the TypeAdapter you need in a field.
 =||= As I said before, I can't: I'm serializing complex objects which contain maps/collections of other objects, and for every such object custom type adapter is registered (~50 adapters in total), so I need this cache. Otherwise I should write whole Gson class myself to use this adapters directly. There’s not reason to keep obvious performance bottleneck in Gson either :)
 =||= Its a mistake to call into the Gson instance multiple times if you can avoid it. What's your top-level object? You want to lookup the adapter for that exactly once, which will recursively fetch all of its dependent adapters.

In other words, rather than removing contention while reading from the map I think your best fix is to not read from the map at all.
 =||= I'm trying to keep Gson usage as simple as I can, so I call Gson#fromJson(object, clazz), which should be very common and obvious use case of Gson. I don't want adapters and other json-related classes leak to my code (at least I want to limit such places). What you are offering is nothing but hack solving problem on wrong level which limits gson usage and forces me to write more duplicate code (which is already written inside of Gson) for reader creation, lenitent check, exception handling and whatever-else-happens-in-fromJson-method (in fact when I got multiple top-level objects in different places I will end up with my own wrapper with gson and concurrent map of adapters inside) and write additional explanation of why I've done this instead of plain gson#fromJson call. Suggestion to rewrite part of gson implementation is not the way such problems should be solved. And my solution just solves the problem in the right place without any performance degradation at all (even for single-threaded case) or incompatible API changes, so everyone will benefit: performance of overall gson usage increases, old code isn't broken, problem solved.

In other words, rather than rewriting gson and propagating it's model classes to my code I think best fix is to remove synchronizedMap usage and replace it with something modern with the same contract.
 =||= I agree, if synchronized map is not performing well, we should look at alternatives.
My question is what do we lose? Does the performance degrade in normal operations?
 =||= @swankjesse What is the advantage of using synchronizedMap over ConcurrentMap?
I think we should accept this change.
 =||= As with many optimizations, this one is about tradeoffs. Here we have two options:
- The synchronized map has a small memory footprint. It’s best for mobile.
- The `ConcurrentHashMap` has low contention under heavy load. This is best on servers.

And there’s actually a third option that makes everyone happy. Avoid using the cache altogether. Lookup a type adapter instance from the Gson instance once, and avoid all contention. This keeps the memory low for mobile & makes servers even faster than the `ConcurrentHashMap`.

I think TypeAdapter’s `toJson()` and `fromJson()` methods have _better_ behavior than similar methods on `Gson`; these don’t do weird things for backwards compatibility like force leniency or hide exceptions.
 =||= @swankjesse Gson.toJson()/fromJson() work really well for most use-cases. Getting an adapter and using it is cumbersome, and sometimes doesn't produce correct results (I have had issues in the past where it will serialize nulls incorrectly, or not pretty print). We should not impose our programming style on others.

How real is the memory overhead? Gson creates a lot of maps internally (and anonymous inner classes with specific type adapters for various java.\* types), this specific ConcurrentMap can't be all that big. From what I read, ConcurrentHashMaps perform really well:
http://crunchify.com/hashmap-vs-concurrenthashmap-vs-synchronizedmap-how-a-hashmap-can-be-synchronized-in-java/
http://stackoverflow.com/questions/510632/whats-the-difference-between-concurrenthashmap-and-collections-synchronizedmap

I think we should accept this PR.
 =||= Works for me.
 =||= Thanks @qwwdfsad for the pull request and @swankjesse for accommodating it. 
:+1: 
 =||= @qwwdfsad  Also love the detailed write up PR. I am assuming you ran all the tests and they passed.
Ideally, in the PR you should cut-n-paste command-line print to show that. Something like:

```
Results :

Tests run: 986, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ gson ---
[INFO] Adding existing MANIFEST to archive. Found under: /Users/inder/tmp/gson/gson/target/classes/META-INF/MANIFEST.MF
[INFO] Building jar: /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ gson ---
[INFO] Installing /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.jar
[INFO] Installing /Users/inder/tmp/gson/gson/pom.xml to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Gson Parent ........................................ SUCCESS [  1.671 s]
[INFO] Gson ............................................... SUCCESS [  5.048 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
```
 =||= Travis CI runs all the tests. You'll see a big red X if they fail.

On Sat, Mar 5, 2016, 4:57 PM inder123 notifications@github.com wrote:

> @qwwdfsad https://github.com/qwwdfsad Also love the detailed write up
> PR. I am assuming you ran all the tests and they passed.
> Ideally, in the PR you should cut-n-paste command-line print to show that.
> Something like:
> 
> Results :
> 
> Tests run: 986, Failures: 0, Errors: 0, Skipped: 0
> 
> [INFO]
> [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ gson ---
> [INFO] Adding existing MANIFEST to archive. Found under: /Users/inder/tmp/gson/gson/target/classes/META-INF/MANIFEST.MF
> [INFO] Building jar: /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar
> [INFO]
> [INFO] --- maven-install-plugin:2.4:install (default-install) @ gson ---
> [INFO] Installing /Users/inder/tmp/gson/gson/target/gson-2.6.3-SNAPSHOT.jar to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.jar
> [INFO] Installing /Users/inder/tmp/gson/gson/pom.xml to /Users/inder/.m2/repository/com/google/code/gson/gson/2.6.3-SNAPSHOT/gson-2.6.3-SNAPSHOT.pom
> [INFO] ------------------------------------------------------------------------
> [INFO] Reactor Summary:
> [INFO]
> [INFO] Gson Parent ........................................ SUCCESS [  1.671 s]
> [INFO] Gson ............................................... SUCCESS [  5.048 s]
> [INFO] ------------------------------------------------------------------------
> [INFO] BUILD SUCCESS
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/806#issuecomment-192748978.
 =||= @JakeWharton  Good point, so yes, not needed.
 =||= Thank you!
Any chances there will be 2.6.3 soon?
 =||= "Gson synchronized map replaced with concurrent hash mapVsevolod Tolstopyatovqwwdfsad03/05/16, 09:54:12 PM"Internally Gson class uses Collections#synchronizedMap as a thread-safe map for typeTokenCache.
In a highly-contended environment I'm experiencing unpredictable latency spikes, 
while the performance of Gson#toJson degrades significantly even for simple objects. 
It's typical for an application thread to hang on typeTokenCache#get average 3-15 ms in such situations.
See [this](https://gist.github.com/qwwdfsad/a72692ab56a1a946a5fb) benchmark results to observe this problem (results for patch included).

For a more or less generic serialization code it's impossible to use TypeAdapter directly. One of the solutions might be to use thread-local Gson instances, but from programmer's perspective it makes code more obfuscated, requires an additional explanation on why this was done and floods the heap with duplicate objects. Gson is declared as thread-safe, so it seems reasonable to expect fine-grained concurrency level internally.  Moreover, after initial application warmup typeTokenCache becomes a mostly read-only structure (in fact, read-only), so allowing non-blocking reads looks like a perfect fit. 

Provided patch replaces synchronized map with j.u.c.ConcurrentHashMap. The main difference between synchronized map and CHM is null keys prohibition, so implicit code-path for null is added. 
As you can see in benchmark results, even despite of additional code path for null keys, overall throughput increases even in single-threaded case due to absence of explicit synchronization (though JVM optimizes uncontended locks, some overhead is still present), so there is no risks or performance degradation associated with this patch."NaNqwwdfsad03/04/16, 11:08:26 PMMore appropriate usage of null key surrogate in Gson#getAdapter for backward compatibility1
807Request For Comments: How about annotation processing?FUJI Gorogfx03/20/16, 03:37:47 PM"I'm writing a Gson extension, which uses annotation processing to generate type adapter factories: 
- https://github.com/gfx/StaticGson

This is faster than the reflection based adapters which gson has. In fact, even faster than Moshi.

And here is a question: should I develop this extension as a standalone library? Or should I make a pull-request to Gson as a `processor` module?

P.S. here is a benchmark result. ""dynamic gson"" is the original reflection based with Gson 2.6.2, ""static gson"" is StaticGson, and moshi is Moshi v1.1.0:

```
D/XXX : start benchmarking dynamic gson
D/XXX : dynamic gson in serialization: 318ms
D/XXX : dynamic gson in deserialization: 298ms

D/XXX : start benchmarking static gson
D/XXX : static gson in serialization: 141ms
D/XXX : static gson in deserialization: 177ms

D/XXX : start benchmarking moshi
D/XXX : moshi in serialization: 204ms
D/XXX : moshi in deserialization: 449ms
```""Sounds similar to [Logan Square](https://github.com/bluelinelabs/LoganSquare). My preference is as a standalone project.
 =||= I will developing this project as a standalone. Thanks.

BTW, Logan Square is great. It seems fastest in serialization.

Interestingly, however, static gson is faster than Logan Square in deserialization. 

Added LoganSquare benchmark to the StaticGson with the same JSON data:

```
D/XXX: start benchmarking LoganSquare
D/XXX: LoganSquare in serialization: 82ms
D/XXX: LoganSquare in deserialization: 243ms
```
 =||= @gfx Yes, makes sense to develop as a standalone project, and as it matures, we can consider borrowing some features in Gson core.

Great idea, BTW. I wasn't familiar with Logan Square either. Looking forward to more documentation/tutorial on your project page and trying it out.
 =||= @gfx Wow, this is pretty crazy timing. I was looking for a project that did this over a week ago.

Since you hadn't posted this at the time, I have also started working on a very similar project:
- https://github.com/lachlanm/gsonpath

My project generates type adapters as well. I have also added a very basic json path generator as part of the project.

e.g. ""Parent.Child"" would create nested loops within the type adapter which can help flatten the POJO

Did you have any plans to implement something similar? Or is the main focus to keep it fairly simplistic?
 =||= @lachlanm OMG. If I knew your project, I wouldn't make Static Gson. lol.

JSON path style seems interesting although I didn't have a plan yet. My first aim is to use Static Gson in my projects with least effort. JSON path will be the second milestone.
 =||= StaticGson starts is released as an independent artifact: https://bintray.com/gfx/maven/static-gson/

Thanks.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
809allow unquoted long and integer keysScott Brownsgbrown03/12/16, 08:51:22 PM"Fixes a bug in JsonReader.nextInt() and JsonReader.nextLong() whereby PEEKED_UNQUOTED is not handled.  This bug caused failure to deserialize maps with Long or Integer keys when the key is unquoted.

This fixes issues #604 and #524 ""Nice find!
 =||= "allow unquoted long and integer keysScott Brownsgbrown03/12/16, 08:51:22 PM"Fixes a bug in JsonReader.nextInt() and JsonReader.nextLong() whereby PEEKED_UNQUOTED is not handled.  This bug caused failure to deserialize maps with Long or Integer keys when the key is unquoted.

This fixes issues #604 and #524 "NaNScott Brown03/12/16, 06:52:13 PMallow unquoted long and integer keys1
810Allow the non-execute prefix to be terminated by non-Unix line endingsSebastian Schuberthsschuberth06/27/19, 09:41:03 AMAllowing non-Unix line endings for the non-execute prefix is particularly useful when running unit tests against committed JSON files that may have platform-specific line endings in the working tree."@inder123 @JakeWharton @enhdless @swankjesse Now that 2.7 is released, is there any interest in this PR?
 =||= @JakeWharton @swankjesse @inder123 Could we please get *any* feedback on whether this has a chance to get merged any time soon, or whether it makes sense to close it unmerged? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
813Improving InterceptorFactory to allow usage without Intercept annotation.Bartłomiej Żarnowskithetoster03/24/16, 11:11:58 AM"I wan't to use Intercept functionality in my project, however it requires usage of annotation. In fact this is not something which I want to put into my code, this will break my abstraction. So I decided to extend current solution to allow developer ""inject"" binding without need to annotate classes.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.

<!-- need_author_cla -->
 =||= I signed it!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
815Garbage collection pressure for escaped htmlVsevolod Tolstopyatovqwwdfsad04/01/16, 02:55:50 AM"Currently JsonWriter#string uses String#format to escape html characters one by one. 
It is extremely costly due to format method internals (because it's general purpose mechanism for formatting): it creates at least Formatter object, Matcher object (for large regexp, see formatSpecifier + usages of this matcher), multiple new StringBuilder+toString() inside of FormatSpecifier (methods justify and print), not well-sized ArrayLists (with expanding and array cloning) and finally new StringBuilder+toString as a result. For one symbol encoding it's way too much, in my case this is one of the biggest garbage sources at all. Guess format method is not very fast either (it is one of the hottest method in my application profile, but profiler is sampling and calls are near IO code so this can be imprecise).

Format method call can be replaced from this 

``` java
 out.write(String.format(""\\u%04x"", (int) c));
```

with something like this: 

``` java
out.write(""\\u"");
out.write(HEX_DIGITS[(c >> 12) & 15]);
out.write(HEX_DIGITS[(c >> 8) & 15]);
out.write(HEX_DIGITS[(c >> 4) & 15]);
out.write(HEX_DIGITS[c & 15]);
```

If my arguments seem reasonable I'm ready to create pull request with proper tests+benchmarks""Please send a PR!
 =||= Sorry, I've got overlapped older version of GSON due to my mistake. In current version this issue was fixed, so issue could be closed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
816Add some useful badges with automatic version detection: Maven and Javadocvalery1707valery170703/25/16, 04:20:28 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Thanks. This helps. Like the Javadoc link, I will switch to that.
 =||= "Add some useful badges with automatic version detection: Maven and Javadocvalery1707valery170703/25/16, 04:20:28 PMNaNNaNValeriy.Vyrva03/25/16, 10:16:19 AMAdd some useful badges with automatic version detection: Maven and Javadoc1
818moved the JsonSerializationContext/JsonDeserializationContext fields …Inderjeet Singhinder12303/28/16, 11:20:02 PM"…to where they are used.

Also moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory."NaNmoved the JsonSerializationContext/JsonDeserializationContext fields …Inderjeet Singhinder12303/28/16, 11:20:02 PM"…to where they are used.

Also moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory."NaNInderjeet Singh03/28/16, 09:46:02 PM"moved the JsonSerializationContext/JsonDeserializationContext fields to where they are used.
Also moved TreeTypeAdapter to internal.bind package for potential use in JsonAdapterAnnotationFactory."1
820Fixed unbound range bug issue# 819Inderjeet Singhinder12303/30/16, 11:31:57 AMNaNNaNFixed unbound range bug issue# 819Inderjeet Singhinder12303/30/16, 11:31:57 AMNaNNaNInderjeet Singh03/30/16, 08:02:24 AMFixed unbound range bug issue# 8191
821Refactoring: Keep track of registered JsonAdapters in ThreadLocals.Inderjeet Singhinder12306/14/16, 11:41:04 PMNaN"This is a big complicated change with no motivating test case.
 =||= @swankjesse @JakeWharton I have revised this pull request to support JsonSerializer and JsonDeserializer in JsonAdapter. Please take a look.
 =||= What’s the motivation? ThreadLocals make me nervous.
 =||= Threadlocal for TypeAdapter is not really needed here, it just provide caching for reusing a JsonAdapter.

It is needed for a TypeAdapterFactory to support skipPast.

What's your concern with ThreadLocals.
 =||= I don’t see why the ThreadLocals are necessary to solve this problem. Which is the test case that needs it?
 =||= JsonAdapterNullSafeTest.testNullSafeBugSerialize will fail if we remove the TypeAdapterFactory ThreadLocal.
 =||= @swankjesse  Please review (note the test that fails if we remove ThreadLocal for the factory. I can remove the other threadlocal, but it may have a performance benefit).
 =||= I looked at this and it’s a bit difficult to trace. It’s unfortunate that the test that fails seems particularly contrived. A simpler test would just fail with a StackOverflowError rather than using a thread local to try to defeat the recursion.

What should the precedence rules be with `@JsonAdapter` ? That is, if I say `@JsonAdapter` on a type that also has a user-configured adapter, does that adapter get used with `getDelegateAdapter()` ? Or does it always delegate to the reflective implementation?

One thing that’s potentially surprising is that `getDelegateAdapter()` can yield different results for different `Gson` instances. That’s probably okay, but it’s awkward to spread the configuration in both the callsite code (at field declaration) and also in the GsonBuilder.

I think it’s pretty straightforward to avoid either of the new ThreadLocals by making a tweak to `getDelegateAdapter()` like this:

```
    if (!factories.contains(skipPast)) {
      skipPast = jsonAdapterFactory;
    }
```

But that impacts the precedence of the delegate adapter. It also causes potentially surprising behavior in the non-`@JsonAdapter` case because an unknown `skipPast` is treated as a sentinel value.
 =||= @swankjesse 
precedence rules. I think with GsonBuilder setting should always take precedence since that allows a user to override a pre-configured behavior. Obviously, JsonAdapter on a field is NOT overridable in GsonBuilder, but the user has the option of attaching a TypeAdapter to the enclosing class.

I think you are saying that you don't want me to use your solution of avoid threadlocals. Anything else that needs to be done for this pull request?
 =||= BTW, those precedence rules are asserted in JsonAdapterAnnotationOnClassesTest
 =||= @swankjesse  Once this is merged, I would like to cut a new Gson release.
 =||= I think avoiding ThreadLocals would be great. At least for me they’re difficult to reason about.
 =||= Ok. Removed one of the ThreadLocals. Can't remove the other ThreadLocal without breaking (admittedly convoluted, but from real production code) JsonAdapterNullSafeTest.testNullSafeBugSerialize test.

Since this line of code is only invoked when JsonAdapter annotation is present, I think it is OK to leave it as is. If you are worried about performance impact, I can make instantiation of ThreadLocal conditional.
 =||= @swankjesse I don't see any further enhancements in this PR. Please complete this review, or provide alternate code that I can use the ThreadLocal with.
 =||= Here’s a branch that shows one approach to solving this problem without a ThreadLocal.
https://github.com/google/gson/compare/master...jwilson.0601.get_delegate_adapter?expand=1#files_bucket
 =||= This approach looks good to me. Let me issue a pull request to you from
this branch.

On Wed, Jun 1, 2016 at 9:34 PM, Jesse Wilson notifications@github.com
wrote:

> Here’s a branch that shows one approach to solving this problem without a
> ThreadLocal.
> 
> https://github.com/google/gson/compare/master...jwilson.0601.get_delegate_adapter?expand=1#files_bucket
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/pull/821#issuecomment-223193208, or mute
> the thread
> https://github.com/notifications/unsubscribe/ABCwypOrLi3LQj_033Prly-pht_DOueAks5qHl1XgaJpZM4H8Wzm
> .

## 

http://www.singhinderjeet.com/
 =||= As #873 has been merged and is a duplicate of this, closing this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
822Parsing SparseArray return empty resultPavel SukhoterinPaulProject04/04/16, 01:45:02 PMI trying parse SparseArray, but gson return empty SparseArray, not null, just empty. What am I doing wrong?"You need to write a custom TypeAdapter / JsonDeserializer for SparseArray since it is a collection type that Gson doesn't know about. There are some details on how to do this here: https://github.com/google/gson/blob/master/UserGuide.md#TOC-Custom-Serialization-and-Deserialization.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
823UserGuide Grammar CorrectionsRyan Scheidterrs01799104/05/16, 04:45:18 PMAlso fixed a broken link"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Thanks.
 =||= "UserGuide Grammar CorrectionsRyan Scheidterrs01799104/05/16, 04:45:18 PMAlso fixed a broken linkNaNRyan Scheidter04/05/16, 02:20:14 PMUserGuide Grammar Corrections1
825Lint: unused declarationsfrakc05/04/16, 05:46:10 PM"If  `@SerializedName(""id"") @Expose private Integer id;` is assigned only via gson.fromJson Lint will warn, that field id is never assigned.
How to make lint know about such assignment or specificly ignore all checks if field is ever assigned, if field is annotated with `@SerializedName` ?""If you're using Android Studio, _Alt+Enter_ on the field warning, you'll find among other options ""Suppress for fields annotated with `com.google.gson.annotations.SerializedName`"".
You only need to do this once, but you'll have to export some of your Studio settings to the version control system for the rest of your team to adopt it automatically if necessary.
 =||= You can also use @SuppressWarnings(""unused"") on the class or the field.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
826minor javadoc @code block cleanupScott Brownsgbrown04/09/16, 07:28:44 AM"Fix for minor error on javadoc for <a href=""http://static.javadoc.io/com.google.code.gson/gson/2.6.2/com/google/gson/Gson.html#getDelegateAdapter-com.google.gson.TypeAdapterFactory-com.google.gson.reflect.TypeToken-"">Gson.getDelegateAdapter()</a> method

text in <a href=""http://docs.oracle.com/javase/1.5.0/docs/guide/javadoc/whatsnew-1.5.0.html#{@code}"">@code</a> blocks is not treated as html when javadoc is compiled"NaNminor javadoc @code block cleanupScott Brownsgbrown04/09/16, 07:28:44 AM"Fix for minor error on javadoc for <a href=""http://static.javadoc.io/com.google.code.gson/gson/2.6.2/com/google/gson/Gson.html#getDelegateAdapter-com.google.gson.TypeAdapterFactory-com.google.gson.reflect.TypeToken-"">Gson.getDelegateAdapter()</a> method

text in <a href=""http://docs.oracle.com/javase/1.5.0/docs/guide/javadoc/whatsnew-1.5.0.html#{@code}"">@code</a> blocks is not treated as html when javadoc is compiled"NaNScott Brown04/09/16, 01:34:05 AMminor javadoc fix ... @code block not treated as html1
827Add the interface, GsonInterface, to the Gson object to enable cleaner unit testingArthur Naseefartnaseef04/11/16, 02:57:49 AM"Since the Gson object is final, it is not possible to mock it, making unit testing more difficult for users of the class.

Adding an interface to the class eliminates the problem as users of the Gson object can operate on the interface instead, and thereby enable mocks to be injected for testing purposes.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= Thanks for taking the time to write a pull request. Such concrete feedback is much more helpful than just a feature request.
Unfortunately, however, we are not yet ready to expand Gson API. Can you use a mocking library instead? 
 =||= Mocking libraries cannot mock final classes, thus the benefit and purpose of this pull request.

Note that the changes in this pull request do not change the API itself.  It simple adds an interface with the same API (method signatures are exactly the same) so that users can choose to make accesses through the interface rather than directly against the class.  Doing so makes mocking possible.

Like this:

```
// ORIGINAL 
public final class MyUtil {
    public int add(int x, int y) {
        return x + y;
    }
}
```

# 

```
// UPDATED
public final class MyUtil implements MyUtilInterface {
    @Override
    public int add(int x, int y) {
        return x + y;
    }
}

public interface MyUtilInterface {
    int add(int x, int y);
}
```

Would you please reconsider?  Without this, unit testing code that use Gson become significantly harder.
 =||= Why are you mocking Gson? Seems like a huge anti-pattern.

On Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef notifications@github.com
wrote:

> Mocking libraries cannot mock final classes, thus the benefit and purpose
> of this pull request.
> 
> Note that the changes in this pull request do not change the API itself.
> It simple adds an interface with the same API (method signatures are
> exactly the same) so that users can choose to make accesses through the
> interface rather than directly against the class. Doing so makes mocking
> possible.
> 
> Like this:
> 
> // ORIGINAL
> public final class MyUtil {
>     public int add(int x, int y) {
>         return x + y;
>     }
> }
> 
> // UPDATED
> public final class MyUtil implements MyUtilInterface {
>     @Override
>     public int add(int x, int y) {
>         return x + y;
>     }
> }
> 
> public interface MyUtilInterface {
>     int add(int x, int y);
> }
> 
> Would you please reconsider? Without this, unit testing code that use Gson
> become significantly harder.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/827#issuecomment-208161571
 =||= Hey Jake - mocking is a unit testing technique that allows one to limit all
test interactions to the class-under-test.  In order for that to work
properly, all other objects with which that class operates need to be
mocked.  Without mocking, those classes are being tested too, which leads
to more complicated tests that are more brittle (i.e. break more easily),
and making it far harder to track down bugs as bugs manifest themselves
across multiple unit tests instead of only showing up in the one for the
class that introduced the bug.

I can clarify and provide examples if that helps.

There's a lot of good information on mocking out there.

If you can explain the concern and why it feels like an anti-pattern, I'll
address the same.

Art

On Sun, Apr 10, 2016 at 9:52 PM, Jake Wharton notifications@github.com
wrote:

> Why are you mocking Gson? Seems like a huge anti-pattern.
> 
> On Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef notifications@github.com
> wrote:
> 
> > Mocking libraries cannot mock final classes, thus the benefit and purpose
> > of this pull request.
> > 
> > Note that the changes in this pull request do not change the API itself.
> > It simple adds an interface with the same API (method signatures are
> > exactly the same) so that users can choose to make accesses through the
> > interface rather than directly against the class. Doing so makes mocking
> > possible.
> > 
> > Like this:
> > 
> > // ORIGINAL
> > public final class MyUtil {
> > public int add(int x, int y) {
> > return x + y;
> > }
> > }
> > 
> > // UPDATED
> > public final class MyUtil implements MyUtilInterface {
> > @Override
> > public int add(int x, int y) {
> > return x + y;
> > }
> > }
> > 
> > public interface MyUtilInterface {
> > int add(int x, int y);
> > }
> > 
> > Would you please reconsider? Without this, unit testing code that use
> > Gson
> > become significantly harder.
> > 
> > —
> > You are receiving this because you are subscribed to this thread.
> > Reply to this email directly or view it on GitHub
> > https://github.com/google/gson/pull/827#issuecomment-208161571
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/827#issuecomment-208162522
 =||= I know what mocking is. Why are you wanting to mock the Gson object instead
of just letting it serialize?

On Mon, Apr 11, 2016 at 12:59 AM Arthur Naseef notifications@github.com
wrote:

> Hey Jake - mocking is a unit testing technique that allows one to limit all
> test interactions to the class-under-test. In order for that to work
> properly, all other objects with which that class operates need to be
> mocked. Without mocking, those classes are being tested too, which leads
> to more complicated tests that are more brittle (i.e. break more easily),
> and making it far harder to track down bugs as bugs manifest themselves
> across multiple unit tests instead of only showing up in the one for the
> class that introduced the bug.
> 
> I can clarify and provide examples if that helps.
> 
> There's a lot of good information on mocking out there.
> 
> If you can explain the concern and why it feels like an anti-pattern, I'll
> address the same.
> 
> Art
> 
> On Sun, Apr 10, 2016 at 9:52 PM, Jake Wharton notifications@github.com
> wrote:
> 
> > Why are you mocking Gson? Seems like a huge anti-pattern.
> > 
> > On Mon, Apr 11, 2016 at 12:46 AM Arthur Naseef <notifications@github.com
> > 
> > wrote:
> > 
> > > Mocking libraries cannot mock final classes, thus the benefit and
> > > purpose
> > > of this pull request.
> > > 
> > > Note that the changes in this pull request do not change the API
> > > itself.
> > > It simple adds an interface with the same API (method signatures are
> > > exactly the same) so that users can choose to make accesses through the
> > > interface rather than directly against the class. Doing so makes
> > > mocking
> > > possible.
> > > 
> > > Like this:
> > > 
> > > // ORIGINAL
> > > public final class MyUtil {
> > > public int add(int x, int y) {
> > > return x + y;
> > > }
> > > }
> > > 
> > > // UPDATED
> > > public final class MyUtil implements MyUtilInterface {
> > > @Override
> > > public int add(int x, int y) {
> > > return x + y;
> > > }
> > > }
> > > 
> > > public interface MyUtilInterface {
> > > int add(int x, int y);
> > > }
> > > 
> > > Would you please reconsider? Without this, unit testing code that use
> > > Gson
> > > become significantly harder.
> > > 
> > > —
> > > You are receiving this because you are subscribed to this thread.
> > > Reply to this email directly or view it on GitHub
> > > https://github.com/google/gson/pull/827#issuecomment-208161571
> > 
> > —
> > You are receiving this because you authored the thread.
> > Reply to this email directly or view it on GitHub
> > https://github.com/google/gson/pull/827#issuecomment-208162522
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/827#issuecomment-208163241
 =||= Jake - it sounds like you and I have a different approach to unit testing.

In the approach I use and advocate, letting Gson ""serialize"" (or perform any of the other operations for which we us it) during unit testing of our own classes is not appropriate.  Perhaps some day we'll have the opportunity to grab a beer and discuss our various approaches.
 =||= In that case you should be completely abstracting your serialization
library in an application-defined type. It's not the library's
responsibility to provide that abstraction.

On Mon, Apr 11, 2016 at 1:31 AM Arthur Naseef notifications@github.com
wrote:

> Jake - it sounds like you and I have a different approach to unit testing.
> 
> In the approach I use and advocate, letting Gson ""serialize"" (or perform
> any of the other operations for which we us it) during unit testing of our
> own classes is not appropriate. Perhaps some day we'll have the opportunity
> to grab a beer and discuss our various approaches.
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/827#issuecomment-208169200
 =||= That is true - the library doesn't have to do so.  I was hoping it would,
though, as this is a very simple and minimal update.  Making a thin layer
in my own code increases the amount of code to solve the problem (compared
with this solution), and the complexity of the same, by a fair amount.
And, on every product on which I work, I need to repeat the same exercise
(i.e. the complexity is distributed).

Honestly, I was at first discouraged to see that all the Gson classes are
marked as final, but when I read that the reason is to prevent extending of
classes by users of the library - i.e. that the classes are ""final"" in
order to create the contract ""we don't support extending this class,"" I
realized that's a great approach.  So then I thought about how I could make
the code easy-to-mock and this hit me:
1. The new interface does not affect anybody that does not use it.
2. All that is needed from the library is to add the interface and
   maintain the list of methods.
3. Folks that want ""mockable"" use can then easily transition to the use
   of ""GsonInterface"" in place of ""Gson"" where needed.
4. As the API of Gson changes across versions, the GsonInterface would
   track along quite simply as well.

This increased ease-of-use will increase my adoption of the library as
well.  So, win/win for very little effort.  Writing a layer in-between my
application and third-party libraries that is nothing more than a
pass-through to the third-party library is not a practice that I want to
adopt.  Creating code that's easy to unit test already leads to too much
boiler-plate code.  Honestly, I keep wishing the JVM offered a ""test mode""
in which interactions with all classes could easily be mocked - especially
built-in classes interacting with system resources (such as files and
sockets).

Art

On Sun, Apr 10, 2016 at 10:49 PM, Jake Wharton notifications@github.com
wrote:

> In that case you should be completely abstracting your serialization
> library in an application-defined type. It's not the library's
> responsibility to provide that abstraction.
> 
> On Mon, Apr 11, 2016 at 1:31 AM Arthur Naseef notifications@github.com
> wrote:
> 
> > Jake - it sounds like you and I have a different approach to unit
> > testing.
> > 
> > In the approach I use and advocate, letting Gson ""serialize"" (or perform
> > any of the other operations for which we us it) during unit testing of
> > our
> > own classes is not appropriate. Perhaps some day we'll have the
> > opportunity
> > to grab a beer and discuss our various approaches.
> > 
> > —
> > You are receiving this because you commented.
> > 
> > Reply to this email directly or view it on GitHub
> > https://github.com/google/gson/pull/827#issuecomment-208169200
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/827#issuecomment-208173467
 =||= Adding this interface actively hurts the public API. What happens when we need to add a new method to `Gson` in the future? Adding methods to interfaces is not source or binary compatible so some hypothetical (and illogical) user which created another implementation of this interface would have their application break.

You also haven't justified the need for mocking. `Gson` is deterministic and side-effect free type so there's no reason tests should avoid calling it. If anything, providing a fake or mock implementation is likely to cause _more_ problems than it solves. You may inadvertently create behavior differences between what your tests code against and what actually happens at runtime. This is usually a sign of overly-white box tests that should actually be seeking more black box behavior. You're testing _how_ the code interacts with the library instead of testing _what_ the code does (e.g., what outputs certain inputs create).

I would have been :-1: on this change even if it wasn't closed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
828Converted object in List<Image> isn't the right typeRunning man!Aspsine04/12/16, 01:58:56 PM"E/AndroidRuntime: FATAL EXCEPTION: main
java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.aspsine.irecyclerview.demo.model.Image

``` java
private void loadImages() {
        NetworkAPI.requestImages(new NetworkAPI.Callback<List<Image>>() {
            @Override
            public void onSuccess(List<Image> images) {
                if (!ListUtils.isEmpty(images)) {

                    // Exception is throwed here
                    Image image = mImages.get(0);

                }
            }

            @Override
            public void onFailure(Exception e) {
                e.printStackTrace();
            }
        });
    }
```

Image class is very simple java pojo

``` java
public class Image {
    public String image;
    public String title;
}
```

``` java
public class NetworkAPI {
    public static void requestImages(final Callback<List<Image>> callback) {
        String url = Constants.BannerAPI;
        final Request request = new Request.Builder().get().url(url).build();
        OkHttp.getOkHttpClient().newCall(request).enqueue(new GsonCallbackWrapper<List<Image>>(callback));
    }

    public interface Callback<T> {
        void onSuccess(T t);

        void onFailure(Exception e);
    }
}
```

``` java
public class GsonCallbackWrapper<T> implements okhttp3.Callback {

    private static final Handler sHandler = new Handler(Looper.getMainLooper());

    private static final Gson sGson = new Gson();

    private NetworkAPI.Callback<T> mCallback;

    public GsonCallbackWrapper(NetworkAPI.Callback<T> callback) {
        this.mCallback = callback;
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
        if (response.isSuccessful()) {
            ResponseBody responseBody = response.body();
            TypeToken<T> typeToken = new TypeToken<T>() {
            };
            final T t = sGson.getAdapter(typeToken).fromJson(responseBody.charStream());
            deliverToMainThread(new Runnable() {
                @Override
                public void run() {
                    mCallback.onSuccess(t);
                }
            });
        }
    }

    @Override
    public void onFailure(Call call, final IOException e) {
        deliverToMainThread(new Runnable() {
            @Override
            public void run() {
                mCallback.onFailure(e);
            }
        });
    }

    public void deliverToMainThread(Runnable runnable) {
        sHandler.post(runnable);
    }
}
```""Generics (and thus `T`) are erased to `Object` at runtime. `TypeToken<T>` is effectively `TypeToken<Object>` at runtime and when the you tell Gson to create `Object` it creates a `Map`.
 =||= Awesome! Thanks for clear answer.
 =||= @JakeWharton could you please help me to solve the question at stackoverflow, [here](http://stackoverflow.com/questions/42666100/java-lang-classcastexception-com-google-gson-internal-linkedtreemap-cannot-be-c) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
829Check if class can be instantiated based on class modifiers. Fix for #817Ugljesa Jovanovicionspin04/22/16, 04:47:08 PMIf class can't be instantiated throw an unsupported operation exception. On different android devices attempt to instantiate interface or abstract class would crash the VM sometimes with only a segmentation fault message and no other useful logs (Issue #817). Checking for interface or abstract class modifiers before trying to allocate instance and throwing an exception will help debugging."Looks good but I’ve got some comments
 =||= @swankjesse Should I squash this into one commit?
 =||= LGTM!
 =||= Yes, please squash into one commit.
 =||= @swankjesse Done! Thanks for the comments!
 =||= Thanks!
 =||= "Check if class can be instantiated based on class modifiers. Fix for #817Ugljesa Jovanovicionspin04/22/16, 04:47:08 PMIf class can't be instantiated throw an unsupported operation exception. On different android devices attempt to instantiate interface or abstract class would crash the VM sometimes with only a segmentation fault message and no other useful logs (Issue #817). Checking for interface or abstract class modifiers before trying to allocate instance and throwing an exception will help debugging.NaNUgljesa Jovanovic04/12/16, 08:34:16 PMCheck if class can be instantiated based on class modifiers. If not throw an unsupported operation exception.1
830fixed throwing RuntimeException instead of JsonIOExceptionArthur Gavlyukovskiygavlyukovskiy04/16/16, 05:31:31 AMJavadoc says that JsonIOException will be thrown if any problem happened, but actually I'm getting RuntimeException only in that method."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= "fixed throwing RuntimeException instead of JsonIOExceptionArthur Gavlyukovskiygavlyukovskiy04/16/16, 05:31:31 AMJavadoc says that JsonIOException will be thrown if any problem happened, but actually I'm getting RuntimeException only in that method.NaNgavlyukovskiy04/15/16, 06:00:59 PMfixed throwing RuntimeException instead of JsonIOException1
831JsonAdapter annotation ignored for primitive fieldsBrandon Minternmintern05/20/16, 05:29:10 PM"`ReflectiveTypeAdapterFactory` correctly detects the `@JsonAdapter` annotation and registers the custom adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133)), but its `write` method wraps that type adapter in a `TypeAdapterRuntimeTypeWrapper` ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111)), which overrides the adapter with the default Gson adapter ([source](https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65)).

Here's a test that demonstrates the behavior:

``` diff
diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest
index 4c745ec..8cae980 100644
--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
       this.part = part;
     }
   }
+
+  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
+    Gson gson = new Gson();
+    String json = gson.toJson(new GadgetWithPrimitivePart(42));
+    assertEquals(""{\""part\"":\""42\""}"", json);
+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
+    assertEquals(42, gadget.part);
+  }
+
+  private static final class GadgetWithPrimitivePart {
+    @JsonAdapter(LongToStringTypeAdapterFactory.class)
+    final long part;
+
+    private GadgetWithPrimitivePart(long part) {
+      this.part = part;
+    }
+  }
+
+  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
+      @Override public void write(JsonWriter out, Long value) throws IOException {
+        out.value(value.toString());
+      }
+      @SuppressWarnings(""unchecked"")
+      @Override public Long read(JsonReader in) throws IOException {
+        return in.nextLong();
+      }
+    };
+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
+      Class<?> cls = type.getRawType();
+      if (Long.class.isAssignableFrom(cls)) {
+        return (TypeAdapter<T>) ADAPTER;
+      } else if (long.class.isAssignableFrom(cls)) {
+        return (TypeAdapter<T>) ADAPTER;
+      }
+      throw new IllegalStateException(""Non-long field of type "" + type
+          + "" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)"");
+    }
+  }
 }
```

And here's the result of running it:

```
[snip]
Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest
Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!
[snip]
Results :

Failed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{""part"":[""42""]}> but was:<{""part"":[42]}>

Tests run: 990, Failures: 1, Errors: 0, Skipped: 0
```

Is this the intended behavior? If so, `JsonAdapter`'s documentation is a bit misleading.

If it's not, I unfortunately do not have a suggested fix. I was actually a bit surprised to see that a new `TypeAdapterRuntimeTypeWrapper` object is constructed for each field that is serialized, on every serialization.

In case you would like to incorporate my test into Gson, I hereby assign copyright of that test to Google.

Thanks!""Looks like a bug, indeed.

On Tue, Apr 19, 2016 at 7:03 PM Brandon Mintern notifications@github.com
wrote:

> ReflectiveTypeAdapterFactory correctly detects the @JsonAdapter
> annotation and registers the custom adapter (source
> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L133),
> but its write method wraps that type adapter in a
> TypeAdapterRuntimeTypeWrapper (source
> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L111),
> which overrides the adapter with the default Gson adapter (source
> https://github.com/google/gson/blob/6f6af8050799bec5321d2c06cd3230daadbb6535/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java#L65
> ).
> 
> Here's a test that displays the behavior:
> 
> diff --git a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest
> index 4c745ec..8cae980 100644--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java@@ -220,4 +220,43 @@ public final class JsonAdapterAnnotationOnFieldsTest extends TestCase {
>        this.part = part;
>      }
>    }++  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {+    Gson gson = new Gson();+    String json = gson.toJson(new GadgetWithPrimitivePart(42));+    assertEquals(""{\""part\"":\""42\""}"", json);+    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);+    assertEquals(42, gadget.part);+  }++  private static final class GadgetWithPrimitivePart {+    @JsonAdapter(LongToStringTypeAdapterFactory.class)+    final long part;++    private GadgetWithPrimitivePart(long part) {+      this.part = part;+    }+  }++  private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {+    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {+      @Override public void write(JsonWriter out, Long value) throws IOException {+        out.value(value.toString());+      }+      @SuppressWarnings(""unchecked"")+      @Override public Long read(JsonReader in) throws IOException {+        return in.nextLong();+      }+    };+    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {+      Class<?> cls = type.getRawType();+      if (Long.class.isAssignableFrom(cls)) {+        return (TypeAdapter<T>) ADAPTER;+      } else if (long.class.isAssignableFrom(cls)) {+        return (TypeAdapter<T>) ADAPTER;+      }+      throw new IllegalStateException(""Non-long field of type "" + type+          + "" annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)"");+    }+  }
>  }
> 
> And here's the result of running it:
> 
> [snip]
> Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest
> Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE!
> [snip]
> Results :
> 
> Failed tests:   testPrimitiveFieldAnnotationTakesPrecedenceOverDefault(com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest): expected:<{""part"":[""42""]}> but was:<{""part"":[42]}>
> 
> Tests run: 990, Failures: 1, Errors: 0, Skipped: 0
> 
> Is this the intended behavior? If so, JsonAdapter's documentation is a
> bit misleading.
> 
> If it's not, I unfortunately do not have a suggested fix. I was actually a
> bit surprised to see that a new TypeAdapterRuntimeTypeWrapper object is
> constructed for each field that is serialized, on every serialization.
> 
> In case you would like to incorporate my test into Gson, I hereby assign
> copyright of that test to Google.
> 
> Thanks!
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/831
 =||= Fixed in https://github.com/google/gson/pull/832
 =||= That was a fast fix! Thank you very much!
 =||= I'm happy for you to close this if you like. I'm only leaving it open in case you prefer to close issues after merging the fix, after releasing it, or according to some other policy.
 =||= Yes, I prefer to close issue only after the fix has been merged. Thanks for reporting it with a test to reproduce, @mintern 
 =||= Should this be closed?
 =||= yes
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
832Ensuring that JsonAdapter annotation works correctly for primitive fi…Inderjeet Singhinder12305/17/16, 09:26:53 PM…elds."Fix for https://github.com/google/gson/issues/831
 =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.

<!-- need_author_cla -->
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= @swankjesse I have revised the code per feedback. Now if JsonAdapter annotation is present, we ignore  the run-time type specific adapter.

Also, rebased and squashed. Please review.
 =||= @swankjesse  Ok. I have removed that check. Please review.
 =||= Thumbs up
 =||= "Ensuring that JsonAdapter annotation works correctly for primitive fi…Inderjeet Singhinder12305/17/16, 09:26:53 PM…elds.NaNInderjeet Singh05/17/16, 08:30:59 PM"Don't use a runtime wrapper if a JsonAdapter annotation is present on a field.

This ensures that JsonAdapter annotation works correctly on a primitive field.
This is a potentially backward incompatible change."1
833Add annotation that enables null serialization per fieldMarkus Pfeiffermarkuspfeiffer04/21/16, 12:55:47 AM"This adds the ability to specify whether to serialize a `null` value on a per-field basis, using the new `@Serialize` annotation.

If the `@Serialize` annotation is not specified, or its value is set to `Inclusion.DEFAULT` the behavior of Gson remains unchanged. A class member's value will be included in the JSON if it has a value other than `null`. If Gson has been configured to always include null values the member's value will be included even if it's `null`.

By adding `@Serialize(Inclusion.ALWAYS)` to a class member, it will always be included in the JSON even if its value is `null`. Basically this annotation makes it possible to enable inclusion of nulls on a per-field basis. If Gson has been configured to always include null values adding the annotation in this form does nothing.

By adding `@Serialize(Inclusion.NON_NULL)` to a class member, it will always be excluded from the JSON if its value is `null`. Normally this matches Gson's default behavior, unless Gson has been configured to include null values. In this case the annotation allows to exclude nulls on a per-field basis.

**Be aware** that this does not change any other of Gson's rules. If a member is excluded for any other reason, for example if it has a `transient` modifier, this annotation will not change this. Also if Gson has been configured to exclude fields that do not have an `@Expose` annotation you will still need to add @Expose to class members that should be serialized. In other words the `@Serialize` annotation only works on members that are serialized under normal circumstances and only changes the behavior of Gson in regards to `null`.

**Examples**

```
public class Main {

    public static class Example {

        @Serialize(Inclusion.ALWAYS)
        public String field1 = null;

         @Serialize(Inclusion.NON_NULL)
        public String field2 = null;

         //@Serialize(Inclusion.DEFAULT)
         public String field3 = null;

        public String field4 = ""Field 4"";
    }

    public static void main(final String[] args) {

        final Gson gson1 = new GsonBuilder().create();
        final Gson gson2 = new GsonBuilder().serializeNulls().create();

        final Example example1 = new Example();

        final String json1 = gson1.toJson(example1);
        System.out.println(json1);

        final String json2 = gson2.toJson(example1);
        System.out.println(json2);
    }
}
```

Without support for `@Serialize` the output of Gson would be:

```
// Output for gson1 (don't serialize nulls)
{ ""field4"": ""Field 4"" }

// Output for gson2 (serialize nulls)
{ ""field1"": null, ""field2"": null, ""field3"": null, ""field4"": ""Field 4"" }
```

**With** support for `@Serialize` its output instead becomes:

```
// Output for gson1 (don't serialize nulls)
{ ""field1"": null, ""field4"": ""Field 4"" }

// Output for gson2 (serialize nulls)
{ ""field1"": null, ""field3"": null, ""field4"": ""Field 4"" }
```""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= This is a very heavyweight solution to a problem I have trouble understanding. When would you need such granular control vs. always emitting or always omitting `null` literals?
 =||= Agree with Jake. Can there be a much lighter-weight solution to this problem. Something that extends the existing annotations (such as SerializedName), for example.
 =||= BTW, appreciate the detailed tests and the pull request. 
 =||= > This is a very heavyweight solution to a problem I have trouble understanding. When would you need such granular control vs. always emitting or always omitting `null` literals?

Example: You want to omit `null` in general to keep the size of your JSON to the minimum. However there are some fields where `null` and _not-present_ are treated differently.

When you send a value to the server, the server will update its field to that value. When you send `null` to the server, the server will clear its field. When you do not send a value, the server will leave its field as it is.

So in general you want to omit `null` for reasons of size, but for some models you require `null` values to be able to reset fields.

Instead of a separate annotation this could probably be added to either `SerializedName` or `Expose`. Using `SerializedName` feels just wrong to me, because its name suggests no functionality of such kind. `Expose` on the other hand already controls serialize/deserialize, so adding a more fine-grained control for serialize makes sense to me (e.g. serialize=[true|false], deserialize=[true|false], serializeNulls=[default, always, never]).
 =||= @markuspfeiffer  Agree. This is the partial updates problem for JSON/REST services. However, not sure if you solution solves that problem.
I think what you want is to pass this information at the time of invoking toJson().
Moreover, I am not clear how this information is obtained in fromJson() since the field could be null because it was absent, or because it was explicitly set to null.

Outline of a solution:
We can have a map of JsonPath expressions referring to fields that are explicitly set to null. This map is passed at toJson time by the caller, and returned by Gson after fromJson is called. Not sure how we will structure the code to support this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
835JsonReader not strict about JSON document consumptionEric CochranNightlyNexus04/22/16, 08:20:39 PM"Say I have a class:
`final class MyType {}`

and a `TypeAdapter`:

```
final class MyTypeAdapter extends TypeAdapter<MyType> {
  // ...
  @Override public MyType read(JsonReader in) throws IOException {
    in.beginObject();
    return new MyType();
    }
}
```

Note the missing `in.endObject()` call.

My calling code:

```
String json = ""{}"";
Gson gson = new GsonBuilder().registerTypeAdapter(MyType.class, new MyTypeAdapter()).create();
StringReader stringReader = new StringReader(json);
MyType myType = gson.fromJson(stringReader, MyType.class);
```

The above will correctly fail (`JsonIOException: JSON document was not fully consumed.`).

However, using a `JsonReader` instead (`gson.fromJson(new JsonReader(stringReader), MyType.class)`) will not fail.
Is this working as intended?""If you are passing a `JsonReader` instance then it's your responsibility to do the assertion.

The implementation of `fromJson(String, Class<?>)` is:

``` java
JsonReader jsonReader = newJsonReader(json);
Object object = fromJson(jsonReader, classOfT);
assertFullConsumption(object, jsonReader);
return object;
```

In the case where you are the one creating the `JsonReader` there's no opportunity to assert completion since you may just be deserializing part of the whole document.
 =||= Oh, yes, I should have dug one step deeper into that. Thanks. Makes sense.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
836Add boxed boolean value() overload.Jake WhartonJakeWharton04/23/16, 12:54:25 AM"When calling value() with a Boolean, overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.

Proof this happens: https://github.com/bugsnag/bugsnag-android/pull/42""Sigh.
 =||= "Add boxed boolean value() overload.Jake WhartonJakeWharton04/23/16, 12:54:25 AM"When calling value() with a Boolean, overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly.

Proof this happens: https://github.com/bugsnag/bugsnag-android/pull/42"NaNJake Wharton04/22/16, 11:50:10 PM"Add boxed boolean value() overload.

When calling value() with a Boolean overload resolution would choose value(boolean) which would throw an NPE on null. The other boxed types are all numbers which would resolve to value(Number) and behave correctly."1
837 Documentation Error轻微zzz4050004/23/16, 05:40:53 PM"String anotherStr = gson.fromJson(""[\""abc\""]"", String.class); => String[] anotherStr = gson.fromJson(""[\""abc\""]"", String[].class);""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= Thanks!
 =||= " Documentation Error轻微zzz4050004/23/16, 05:40:53 PM"String anotherStr = gson.fromJson(""[\""abc\""]"", String.class); => String[] anotherStr = gson.fromJson(""[\""abc\""]"", String[].class);"NaNzzz4050004/23/16, 05:36:52 PM" Documentation Error

String anotherStr = gson.fromJson(""[\""abc\""]"", String.class); => String[] anotherStr = gson.fromJson(""[\""abc\""]"", String[].class);"1
838Adds getters for config fields.Ryan Harterrharter04/26/16, 07:30:58 PMThis adds simple getters for certain config fields that would be helpful in custom `TypeAdapter`s to deal with situations like this: https://github.com/rharter/auto-value-gson/issues/18"Merged manually. I updated your copyright header!
 =||= Merged commit is a851569ab916b5f9466949ed106d2abff1d1650c
 =||= Hah, I just copied that from another file and didn't pay attention.  I didn't actually write this in 2008 :)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
839Optimize list allocation for every reflective field.Jake WhartonJakeWharton04/27/16, 04:32:02 AM"The common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.

This is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for.""👍 
 =||= "Optimize list allocation for every reflective field.Jake WhartonJakeWharton04/27/16, 04:32:02 AM"The common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.

This is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for."NaNJake Wharton04/27/16, 04:28:51 AM"Optimize list allocation for every reflective field.

The common cases (no @SerializedName and a single-value @SerializedName) now use a specialized one-element collection. Cases with alternate names use a much more space efficient ArrayList which is exactly sized.

This is also a performance win for adapter initialization since an index-based loop was used on the returned type for which LinkedList is not suited for."1
840Switch default Queue implementation to ArrayDeque.Jake WhartonJakeWharton04/27/16, 04:40:58 AMNow that we require Java 1.6 or newer this much more efficient implementation can be used as the default.NaNSwitch default Queue implementation to ArrayDeque.Jake WhartonJakeWharton04/27/16, 04:40:58 AMNow that we require Java 1.6 or newer this much more efficient implementation can be used as the default.NaNJake Wharton04/27/16, 04:37:28 AM"Switch default Queue implementation to ArrayDeque.

Now that we require Java 1.6 or newer this much more efficient implementation can be used as the default."1
841json-sanitizerAndres Ponttandrespontt05/02/16, 06:23:39 PM"Hi,
This is not a bug, is a question. Sorry if this is not the right place to put it.

I was requested to include the OWASP json sanitizer to gson.fromJson function, anybody knows if GSON sanitize the string out of the box or this is something that I should include manually?

https://www.owasp.org/index.php/OWASP_JSON_Sanitizer

Thanks in advance."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
842"Serialising ""Bundle"" in Android"kushaldr05/03/16, 07:14:33 AM"When tried to serialise a Model which contains Bundle as a member, Serialisation fails and run out of memory.

Code Snippet below:

[TempModel.java.zip](https://github.com/google/gson/files/246375/TempModel.java.zip)

TempModel t = new TempModel();

```
        Bundle b = new Bundle();
        b.putString(""A"", ""a"");

        t.setDataBundle(b);
        t.setId(""A"");

        Gson gs = new Gson();

        String jsonContent = gs.toJson(t, TempModel.class);
        Log.i(""DF"", ""Temp Model -> New JSON : "" + jsonContent);
```""You need to use a BundleTypeAdapterFactory. Something like this: 
https://github.com/google-gson/typeadapters/blob/master/android/src/main/java/BundleTypeAdapterFactory.java
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
843How to deserialize the complex Nested Generic Type like below?GuangGuangGuang123456705/03/16, 02:02:54 PM"Hello @GsonDev:

I hava a complex POJO like below, How to deserialize?  Thanks.

``` ruby
{""id"":-9876543,""result"":{""username"":""user01"",""name"":""john"",""status"":""normal"",""tenemnetIds"":[""77777"", ""8888""],""tenementId"":""77777""},""jsonrpc"":""2.0""}
```

``` java
// I have  tried this, but not work for me!  But FastJson work!
Gson gson = new GsonBuilder().create();
        Type fooType = new TypeToken<
                JsonRpcResponse<
                        PreLoginResult,
                        PreLoginError>
                >() {}.getType();
        GzbApisService.JsonRpcResponse<
                PreLoginResult,
                PreLoginError> rpcResponse2 = gson.fromJson(jsonString, fooType);
```

``` java
 final public static class JsonRpcResponse<RESULT extends IRpcResult, ERROR extends IRpcError> {
        protected String mJsonrpc;
        protected int mId;
        protected RESULT mResult;
        protected ERROR mError;

        public JsonRpcResponse() {
        }

        public boolean isSuccessful() {
            return mResult != null ? true : false;
        }

        public String getJsonrpc() {
            return mJsonrpc;
        }

        public void setJsonrpc(String jsonrpc) {
            this.mJsonrpc = jsonrpc;
        }

        public int getId() {
            return mId;
        }

        public void setId(int id) {
            mId = id;
        }

        public RESULT getResult() {
            return mResult;
        }

        public void setResult(RESULT result) {
            mResult = result;
        }

        public ERROR getError() {
            return mError;
        }

        public void setError(ERROR error) {
            mError = error;
        }
    }

    public static interface IRpcResult {
    }

    public static interface IRpcError {
    }


        public static class PreLoginResult implements IRpcResult {
            private String username;
            private String name;
            private String status;
            private String tenementId;
            @SerializedName(""tenemnetIds"")
            @Expose
            @JSONField(name=""tenemnetIds"")
            private List<String> tenementIds = new ArrayList<>();
            private Installation installation;

            public String getUsername() {
                return username;
            }

            public void setUsername(String username) {
                this.username = username;
            }

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }

            public String getStatus() {
                return status;
            }

            public void setStatus(String status) {
                this.status = status;
            }

            public String getTenementId() {
                return tenementId;
            }

            public void setTenementId(String tenementId) {
                this.tenementId = tenementId;
            }

            public List<String> getTenementIds() {
                return tenementIds;
            }

            public void setTenementIds(List<String> tenementIds) {
                this.tenementIds = tenementIds;
            }

            public Installation getInstallation() {
                return installation;
            }

            public void setInstallation(Installation installation) {
                this.installation = installation;
            }

public static class Installation {

                private String version;
                private String downloadURL;
                private String extControl;
                private List<String> versionLog = new ArrayList<>();

                public String getVersion() {
                    return version;
                }

                public void setVersion(String version) {
                    this.version = version;
                }

                public String getDownloadURL() {
                    return downloadURL;
                }

                public void setDownloadURL(String downloadURL) {
                    this.downloadURL = downloadURL;
                }

                public String getExtControl() {
                    return extControl;
                }

                public void setExtControl(String extControl) {
                    this.extControl = extControl;
                }

                public List<String> getVersionLog() {
                    return versionLog;
                }

                public void setVersionLog(List<String> versionLog) {
                    this.versionLog = versionLog;
                }
            }
        }

        public static class PreLoginError implements IRpcError {
            private Integer code;
            private String message;

            public Integer getCode() {
                return code;
            }

            public void setCode(Integer code) {
                this.code = code;
            }

            public String getMessage() {
                return message;
            }

            public void setMessage(String message) {
                this.message = message;
            }
        }
```""You need to use `@SerializedName` on your `m`-prefixed fields or they won't match.

Please ask general usage questions on StackOverflow with the 'gson' tag. We tend to reserve GitHub issues for bugs and feature requests only as it is an extremely poor support system otherwise.
 =||= Thanks a lot, you are right.

In addition, why Gson doesnt auto match the **m-prefixed fields**  that has the standard **getter and setter**?

I find the answer in  [GsonDesignDocument](https://github.com/google/gson/blob/master/GsonDesignDocument.md) (**Gson is fields-based**)

> Using fields vs getters to indicate Json elements
> 
> Some Json libraries use the getters of a type to deduce the Json elements. We chose to use all fields (up the inheritance hierarchy) that are not transient, static, or synthetic. We did this because not all classes are written with suitably named getters. Moreover, getXXX or isXXX might be semantic rather than indicating properties.
> 
> However, there are good arguments to support properties as well. We intend to enhance Gson in a latter version to support properties as an alternate mapping for indicating Json fields. For now, Gson is fields-based.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
844Deserialization awareManish Goyalmanishgo05/04/16, 03:51:13 AMThis feature will enable the user to provide hook in Java object to perform additional steps after that object is deserialized from JSON."You can do this already with a `TypeAdapter.Factory` and your own callback interface. Why should it be added to Gson?
 =||= Wouldn't it be easier to just implement this interface and write the required code in the class' method itself rather than writing it in another class (TypeAdapter) in which case user has to deal with TypeAdapter syntax. Also user needs to write additional logic for performing default deserialization in the adapter and then calling interface method which can be hidden in GSON library.
 =||= You can have the exact same behavior as this PR by checking for an
interface and calling a method on the type though.

On Tue, May 3, 2016 at 11:29 PM Manish Goyal notifications@github.com
wrote:

> Wouldn't it be easier to just implement this interface and write the
> required code in the class' method itself rather than writing it in another
> class (TypeAdapter) in which case user has to deal with TypeAdapter syntax.
> Also user needs to write additional logic for performing default
> deserialization in the adapter and then calling interface method which can
> be hidden in GSON library.
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/844#issuecomment-216733276
 =||= Agreed. But doesn't it make sense to provide a convenient feature to the user so that he can just implement this interface and thats it!
 =||= Not unless there's a clear value proposition desired by large chunks of
users and even then it needs a well-designed and thought out API that we
are comfortable maintaining. It only takes 2 seconds to send a PR but we
have to live with the ramifications and compatibility concerns for years.

On Tue, May 3, 2016 at 11:36 PM Manish Goyal notifications@github.com
wrote:

> Agreed. But doesn't it make sense to provide a convenient feature to the
> user so that he can just implement this interface and thats it!
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/pull/844#issuecomment-216733796
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
845gson-extras not available in The Central RepositoryMark Fultonmfulton2605/05/16, 06:16:16 PM"Searching [The Central Repository](http://search.maven.org/) for [g:com.google.code.gson a:gson-extras](http://search.maven.org/#search%7Cga%7C1%7Cg%3Acom.google.code.gson%20a%3Agson-extras) reveals no results.

Is/will `gson-extras` be published? I'd like to be able to use the `UtcDateTypeAdapter` along with other extras.

Thank you.""It's intentionally not published because we make not guarantees about API stability or compatibility. It exists so that you can copy them into your project and adapt as needed.
 =||= Okay. Thanks @JakeWharton for the explanation.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
846adding @DateFormat annotation to accept date formatsPrateekjainsahab05/12/16, 07:04:30 AM"this field annotation will allow passing date formats to GSON in order to parse/format
date strings while deserialization/serialization. It will work for `java.util.Date` and `java.sql.Date` type fields.

```
public class Trip {
    @DateFormat(""yyyy-MM-dd"")
    private Date startDate;

    @DateFormat(""yyyy/MM/dd"")
    private Date endDate;

    public Trip(Date startDate, Date endDate) {
      this.startDate = startDate;
      this.endDate = endDate;
    }
}
```

that's how we can pass date formats for different fields to Gson.""Thanks for the concrete proposal.
There is no need for a new annotation. You can write a TypeAdapter with this format, and use the JsonAdapter annotation. Overall, we set a very high bar to expand the Gson API. Simple short APIs have a smaller conceptual weight and appreciated by user.
 =||= Apologies for the late reply.
I thought this change could be of generic use like in our case an external vendor develops the API and those guys don't really care about the date format in the JSON response. Different API's have different date formats. So we thought instead of writing different TypeAdapter for different date formats, we can just write a GSON annotation that can tell the expected date format for a field. =||= I need this feature. I use Gson not because it's quick library or for his ""simple short APIs""; I use Gson because it save development time and it make code really clean. Writing a TypeAdapter each time a backend dev use a different date format take time, add a lot of boilerplate code and it's very frustrating. 

Please, consider this feature.   =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
848Typo in the user guide.David Hwanghwangist05/08/16, 04:00:52 AM"Changed ""Serialiers"" to ""Serializers""""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it.
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Thanks
 =||= "Typo in the user guide.David Hwanghwangist05/08/16, 04:00:52 AM"Changed ""Serialiers"" to ""Serializers"""NaNNth Circle05/08/16, 03:48:54 AM"Typo

Changed ""Serialiers"" to ""Serializers"""1
849Bug: (De)Serialization of java.io.FileStephanPraetsch05/09/16, 03:10:56 PM"Hi there,

you have a bug while (de)serialization of java.io.File. There is a flag prefixLength that is not deserialized. For absolute files it must be greater than 0. Erroneously an absolute file that was serialized and deserialized is recognized as a relative file.

Easily reproducable with

gson(new File(""/tmp/foo.txt""));

on

 private static void gson(File file) {
        System.out.println(""++++++++++++ gson ++++++++++++"");
        Gson gson = new Gson();
        System.out.println(""file = "" + file + "" (absolute = "" + file.getAbsoluteFile() + "")"");
        String serialization = gson.toJson(file);
        File deserialization = gson.fromJson(serialization, File.class);
        System.out.println(""deserialization = "" + deserialization + "" (absolute = ""
                + deserialization.getAbsoluteFile() + "")"");
    }

> ++++++++++++ gson ++++++++++++
> file = /tmp/foo.txt (absolute = /tmp/foo.txt)
> deserialization = /tmp/foo.txt (absolute = /home/stephan/zTest.Art.Id/tmp/foo.txt)

Regards
Stephan""Java platform types should not be serialized like this since you are relying on their internals which are implementation details. Register a TypeAdapter which writes out `File.toString()` when serializing a `File` and reads the string an invokes `new File(String)` when deserializing.
 =||= Well, I don't agree. File implements Serializable thus I expect GSON to be able to serialize it, too. But ok... 

Which java platform types are supported by GSON? At least it's String. Something else? E.g. java.lang.Integer.

By the way: On Unix serialize(new File(...).toString()) and on Windows new File(deserialize(...)) won't work because of the different file separator: '/' vs '\'.
 =||= Serializable has nothing to do with JSON nor Gson. It's Java's native
(terrible) binary format.

As far as which platform types are supported, the answer is far too many.
There's a bunch of historical weakness in the types that contain native
adapters which needlessly bloats Gson and creates an endless stream of
people wanting more types added.

You'll want to stick to int, long, double, Integer, Long, Double, and
String as well as List and arrays of those types. These are the primitives
of JSON and thus those which map easily and directly. For anything else,
register your own type adapter to provide a sane, stable format which can
be dictated by your application requirements.

On Tue, May 10, 2016 at 1:50 AM SteppXXL notifications@github.com wrote:

> Well, I don't agree. File implements Serializable thus I expect GSON to be
> able to serialize it, too. But ok...
> 
> Which java platform types are supported by GSON? At least it's String.
> Something else? E.g. java.lang.Integer.
> 
> By the way: On Unix serialize(new File(...).toString()) and on Windows new
> File(deserialize(...)) won't work because of the different file separator:
> '/' vs '\'.
> 
> —
> You are receiving this because you modified the open/close state.
> 
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/849#issuecomment-218065056
 =||= Alright. Thanx for your reply.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
850made nullSafe wrapper of JsonAdapter optionalLucastestcenter05/10/16, 08:32:12 AM"as there could be the need of handling `null` values within a custom adapter (which is added via the `@JsonAdapter` annotation), the `nullSafe` wrapper is made optional now.

as the annotation has a default value, it is no problem to specify the adapter as before
`@JsonAdapter(MyCustomAdapter.class)`

to remove the nullSafe wrapper, call
`@JsonAdapter(value = MyCustomAdapter.class, nullSafe = false);""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.

<!-- need_author_cla -->
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
851made nullSafe wrapper of JsonAdapter optionalLucastestcenter06/28/16, 07:11:39 AM"as there could be the need of handling `null` values within a custom adapter (which is added via the `@JsonAdapter` annotation), the `nullSafe` wrapper is made optional now.

as the annotation has a default value, it is no problem to specify the adapter as before
`@JsonAdapter(MyCustomAdapter.class)`

to remove the nullSafe wrapper, call
`@JsonAdapter(value = MyCustomAdapter.class, nullSafe = false);""Doesn't seem like an important enough usecase. 
 =||= @inder123 an important use case would be to be compatible with the JSON-API:

JSON API specifies setting a value like this:
- if any value is set it will be set / updated on the server
- if any value is `null` it will be deleted on the server
- if any value is not serialized (excluded from the request), it will not be updated on the server (stays as it is)

so how should i realize following scenario:
i have a very complex object, which means the object contains some other objects and a lot of primitive values. all in all about 40-50 elements.
one of these primitive values is a `Long` value: `deletedAt`.

on the one hand, i want to deserialize the timestamp `deletedAt`, because i have to delete a database entry on the phone if this timestamp is set.

on the other hand i am only allowed to serialize valid values (so the server entry gets deleted).
if i serialize null, the server throws an error (because the server tries to undelete the value).
-> so if i want to update this entry, i am not allowed to serialize this value

in this scenario i would add a special adapter to the given `deletedAt` value via the annotation `@JsonAdapter`.
this adapter does simply not serialize the value if set to `null`.
but this will not work, if the `nullSafe` wrapper is wrapping my adapter.

in this case, i would have to create an adapter for the whole complex object, handling 40-50 primitives, just because of one value...
the way better solution would be, to simply set a `@JsonAdapter` to this one specific value.

**by the way**: this was the behaviour before you upgraded to version 2.6. which means passing `null` values to a `@JsonAdapter` adapter worked on versions <= 2.5
 =||= Can you do this without @JsonAdapter? It's a relatively recent addition and it should be possible to accomplish your goals without it.
 =||= @swankjesse it would be possible, but i would have to write a custom serializer for several complex objects which all have about 20-50 members.... which is really a pain in the a... :smile: 
other than that, our structure would not be easily extendable.

i already saw, that this addition is relatively new (if i can recall correctly, the change was made this february).
this new behaviour breaks our system since the upgrade to the version 2.6 (which contains this change).
the solution i propose in this pull request does not affect the new behaviour at all.
but if the developer does set the additional `nullSafe` flag in the annotation the ""old"" behaviour is recreated.
 =||= I defer to Inder on this, @JsonAdapter is his API.
 =||= @inder123 any updates on this after the conversation with @swankjesse ?
 =||= @testcenter ok, let me think it through more. 
 =||= @swankjesse I am fine with this change. Never quite liked the fact that we wrapped the adapter with nullSafe() to guard against sloppy code. 
Any thoughts?
 =||= Works for me.
 =||= If you want this merged, please update pull request to enable merging.
Also do http://rebaseandsqua.sh
 =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.

<!-- need_author_cla -->
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Can you do http://rebaseandsqua.sh ?
 =||= The pull request has changes from other branches. You probably forgot to pull master correctly.
Can you clone gson git repository directly, create a branch and make changes in it directly? I can then help you do rebase and squash if needed. Thanks.
 =||= @inder123 i am sorry for the inconvenience. it seems as i am too stupid for github (rebase and squash)... :P

i accidentally closed this pull request by force pushing the current state of the upstream/master branch to the master of my fork.
so i created a new pull request:

see pull request #881 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
853Corrected documentation, copy&paste errorSebastian BischoffBaschdl05/12/16, 03:57:34 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Thanks!
 =||= "Corrected documentation, copy&paste errorSebastian BischoffBaschdl05/12/16, 03:57:34 PMNaNNaNBaschdl05/12/16, 12:47:03 PMCorrected documentation, copy&paste error1
854issue#672.add IterableTypeAdapterFactoryianate05/14/16, 02:46:56 PMadd IterableTypeAdapterFactory for Iterable. no enough testcase.some exceptions unhandled"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= please write tests as well.
 =||= I see many issues related to IterableTypeAdapterFactory: #672 #691 #428 

In recent version of Gson 2.8.0, I still don't see the IterableTypeAdapterFactory class. So whats is the status of it. Is it implemented in master or not ? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
855No autocomplete with Eclipsenyg05/14/16, 03:56:56 PM"Hello all,

I've made a very simple maven project in Eclipse, adding only one dependency, gson. For some reason I can't get any autocompletion for gson and Eclipse's Organize imports feature doesn't seem to be aware of the gson library. If I manually write the `import` statements and create a `Gson` using `GsonBuilder` then doing a `mvn clean package` from the command line will compile everything. It seems I have this problem only with gson.

Here's my POM:

``` xml
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>

    <groupId>edu.self.gson</groupId>
    <artifactId>gson-test</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.6.2</version>
        </dependency>
    </dependencies>
</project>
```

``` java
package edu.self.gson.test;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class Main {

    public static void main(String[] args) {
        Gson gson = new GsonBuilder().create();
    }
}
```

Thanks for your help.

java 1.8.0_66
mvn 3.3.9
Eclipse Mars.2 JEE edition
OS X 10.11.4""Please don't ask questions like this on GitHub. StackOverflow is the right place.

Your local maven repo could be screwed up.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
856a little question while use Retrofi2 with gsonconvetbianzijiaruiz08/27/16, 07:08:28 PM"hi, android big big ~ I have a little question while i use **retrofit2** with **Gson** .here two kind repsones
One is
data : {""**response**"":{""sex"":"""",""phone"":"""",""account_id"":122,""status"":0,
     ""session_timeout"":"""",""account_reg_type"":1,""nick_name"":"""",""time"":""20160510174922"",
      ""weixin"":"""",""address"":"""",""email"":"""",""session"":"""",
      ""name"":"""",""head"":"""",""weibo"":""""},""time"":""20160510174922""}

anthor is
""data"":{""**response**"":"""",""time"":""20160517104147""} 

you konw,it will Expected BEGIN_OBJECT but was STRING at line 1 column 54 path.
i wish ,maybe gson can atuo ingore the type of responese while is empty string.or how fix it just in android not modify response format
excuse me, my engilish is poor""You can use @JsonAdapter to write a TypeAdapterFactory which conditionally
deserializes the response either as an object or as a string.

On Mon, May 16, 2016 at 8:19 PM bianzi notifications@github.com wrote:

> hi, android big big ~ I have a little question while i use _retrofit2_
> with _Gson_ .here two kind repsones
> One is
> data : {""_response_"":{""sex"":"""",""phone"":"""",""account_id"":122,""status"":0,
> 
> ""session_timeout"":"""",""account_reg_type"":1,""nick_name"":"""",""time"":""20160510174922"",
> ""weixin"":"""",""address"":"""",""email"":"""",""session"":"""",
> ""name"":"""",""head"":"""",""weibo"":""""},""time"":""20160510174922""}
> 
> anthor is
> ""data"":{""_response_"":"""",""time"":""20160517104147""}
> 
> you konw,it will Expected BEGIN_OBJECT but was STRING at line 1 column 54
> path.
> i wish ,maybe gson can atuo ingore the type of responese while is empty
> string.or how fix it just in android not modify response format
> excuse me, my engilish is poor
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/google/gson/issues/856
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
857Replaced a JDK 1.7 specific method with its JDK 1.6 equivalent.Inderjeet Singhinder12305/17/16, 11:38:51 AMNaNNaNReplaced a JDK 1.7 specific method with its JDK 1.6 equivalent.Inderjeet Singhinder12305/17/16, 11:38:51 AMNaNNaNInderjeet Singh05/17/16, 08:03:00 AMReplaced a JDK 1.7 specific method with its JDK 1.6 equivalent.1
859Complex JSON deserializationDeleted userghost05/19/16, 01:24:09 AM"> How can I deserialize this complex JSON . 
> I want to access all Strings, objects. 
> For example SelectionId and AdditionalPriceInfo fields by indexing. 
> get(0).getSelectionId() --> d51d38c9-6e51-473c-b843-f24fef632f89

```
{
    ""Status"": 0,
    ""Message"": """",
    ""Result"": {
        ""HasMore"": ""False"",
        ""Itineraries"": [{
            ""SelectionId"": ""d51d38c9-6e51-473c-b843-f24fef632f89"",
            ""AdditionalPriceInfo"": null

        }, {
            ""SelectionId"": ""dda40b80-d8e4-4b76-9f78-83297b52afe9"",
            ""AdditionalPriceInfo"": null
        }]
    }
}
```""Ask this question on stackoverflow or on https://groups.google.com/forum/#!forum/google-gson
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
861Gson.toJson problem with Map when Map is initialised with double braceMax Lammaxlam7905/21/16, 04:45:07 AM"I've discovered that Gson could not serialize a Map to json if the Map is initialized in the double brace way.

I'm running on:
Mac OSX El Capitan
Gson 2.6.2
java version ""1.8.0_92""
Java(TM) SE Runtime Environment (build 1.8.0_92-b14)

Steps to reproduce, just run the following and you'll see the result:

``` java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.util.HashMap;
import java.util.Map;

public class GsonTest {

    public static void main( String[] args ) {
        Map<String, String> map1 = new HashMap();
        map1.put( ""test"", ""123"" );

        Map<String, String> map2 = new HashMap() {
            {
                put( ""test"", ""123"" );
            }
        };

        Gson gson = new GsonBuilder().create();
        System.out.println( gson.toJson( map1 ) );    // Will print correctly
        System.out.println( gson.toJson( map2 ) );    // Will only print null
    }
}
```""Dupe of #762. Please see reasoning (and workaround) there.
 =||= Thanks for the pointers.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
862Enhancing the json reader, adding corresponding test case for it; #824Archit Deydeyboy9006/02/16, 01:31:15 PM"As discussed in the issue #824, when invalid escape sequences are provided the parse is still successful.

eg. "" \""h\ello\"": true"",  the parser never used to complain; but after making the below enhancement when ever an unknown escape is encountered then the code will throw syntax error and rightfully inform the user rather than making assumptions.

Also added a test case to demonstrate this. Have executed all the existing tests to avoid any regression bugs.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= LGTM. Some small style issues.
 =||= Have made the necessary changes. Hope the indentation is fine now.
 =||= Merged manually!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
863handle explicit null values in JSONNykolas Laurentino de Limanykolaslima05/24/16, 06:17:54 AM"Fix error when trying deserialize JSON with explicit `NULL` value.

```
{msg:'foo', count:null}
```""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= "handle explicit null values in JSONNykolas Laurentino de Limanykolaslima05/24/16, 06:17:54 AM"Fix error when trying deserialize JSON with explicit `NULL` value.

```
{msg:'foo', count:null}
```"NaNNykolas Lima05/23/16, 07:44:30 PMhandle explicit null values in JSON1
864Minor documentation fix on RuntimeTypeAdapterFactoryJuan Andrésjuandiana05/24/16, 08:58:21 PM"Instances of classes that implement `RuntimeTypeAdapterFactory` should be registered using the `registerTypeAdapterFactory` method instead of `registerTypeAdapter` method on `GsonBuilder`.

Note that since `registerTypeAdapter(Type type, Object typeAdapter)` accepts an `Object`. Therefore, users of this class might not notice this until runtime."NaNMinor documentation fix on RuntimeTypeAdapterFactoryJuan Andrésjuandiana05/24/16, 08:58:21 PM"Instances of classes that implement `RuntimeTypeAdapterFactory` should be registered using the `registerTypeAdapterFactory` method instead of `registerTypeAdapter` method on `GsonBuilder`.

Note that since `registerTypeAdapter(Type type, Object typeAdapter)` accepts an `Object`. Therefore, users of this class might not notice this until runtime."NaNJuan Andrés Diana05/24/16, 07:45:55 PM"Docs fix for the RuntimeTypeAdapterFactory class.
Instances of classes that implement RuntimeTypeAdapterFactory should be registered using the registerTypeAdapterFactory method instead of registerTypeAdapter."1
865Fix registerTypeAdapterFactory method usageJuan Andrésjuandiana05/25/16, 07:10:18 PMSee @JakeWharton's comment on #864."Thanks!
 =||= "Fix registerTypeAdapterFactory method usageJuan Andrésjuandiana05/25/16, 07:10:18 PMSee @JakeWharton's comment on #864.NaNJuan Andrés Diana05/25/16, 06:49:39 PMThe method registerTypeAdapterFactory accepts a TypeAdapterFactory instance only.1
866a bug at android phone(moto xt1085,android 5.1) about datezgmf075707/28/16, 04:28:18 PM"`String json = ""{\""icon\"":\""icon_warning_0201\"",\""title1\"":\""暴雨蓝色预警信号\"",\""title2\"":\""防御指南\"",\""content\"":\""!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"",\""content2\"":\""1.政府及相关部门按照职责做好防暴雨准备工作；2.学校、幼儿园采取适当措施，保证学生和幼儿安全；3.驾驶人员应当注意道路积水和交通阻塞，确保安全；4.检查城市、农田、鱼塘排水系统，做好排涝准备。\"",\""valid\"":\""May 29, 2016 6:17:13 PM\"",\""video\"":\""rain.mp4\""}"";`
`java.lang.reflect.Type type1 = new TypeToken<Warning>() {}.getType();`
`Warning w = (Warning) new Gson().fromJson(json, type1);`
`System.out.println(w.getValid());`

In JSON String the date ""May 29, 2016 6:17:13 PM"" to java oject would be decoded as ""May 29, 2016 6:17:13 AM""

It seems works good at which phone' system version lower then 5.0""Solve by this...
`Gson gson = new GsonBuilder().setDateFormat(""MMM d,yyyy h:m:s a"").create();`
 =||= @zgmf0757 since the issue was solved by forcing the date format, can you close the issue?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
867Deserializing a Map<String, String> returns nullZoroarkutybo05/31/16, 07:20:36 PM"The following code

``` java
Type t = new TypeToken<Map<String, String>>(){}.getClass();
String s = ""{\""somestring\"":\""someotherstring\""}"";
Map<String, String>  map = new Gson().fromJson(s, t);
if(map == null)
    System.out.println(""Null map"");
```

always returns a null map (and thus ""Null map"" is sent to System.out)""Use `getType()`, not `getClass()`. Calling `getClass()` returns `TypeToken.class`.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
868java.lang.StackOverflowError  com.google.gson.internal.$Gson$Types.resolve() @ Line: 372 in $Gson$Types.javajikun200803/30/17, 10:02:14 AM"android:  gson 1.7.1 do not have this bug,. but the higher have.   look at this log

com.google.gson.internal    $Gson$Types.java line 372 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 381 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 376 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal    $Gson$Types.java line 356 in com.google.gson.internal.$Gson$Types.resolve()
com.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 141 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields()
com.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 83 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create()
com.google.gson Gson.java line 359 in com.google.gson.Gson.getAdapter()
com.google.gson.internal.bind   ReflectiveTypeAdapterFactory.java line 122 in com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(""What type are you serializing?

On Tue, May 31, 2016 at 10:32 PM jikun2008 notifications@github.com wrote:

> android: gson 1.7.1 do not have this bug,. but the higher have. look at
> this log
> 
> com.google.gson.internal $Gson$Types.java line 372 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 381 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 376 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal $Gson$Types.java line 356 in
> com.google.gson.internal.$Gson$Types.resolve()
> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 141
> in
> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields()
> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 83 in
> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create()
> com.google.gson Gson.java line 359 in com.google.gson.Gson.getAdapter()
> com.google.gson.internal.bind ReflectiveTypeAdapterFactory.java line 122
> in
> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/868, or mute the thread
> https://github.com/notifications/unsubscribe/AAEEESCy0aeX54b3ZxKvZ0Xd4jXBIY01ks5qHO8jgaJpZM4IrIdm
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
869Add support to look ahead / go backward / polymorphic JSONDaniele Segatodanielesegato06/03/16, 03:49:12 PM"## The issue

The Gson parser only allow parsing the json if you know before you are parsing it which object each field contain.

If a field contains polymorphic data it can't be parsed with GSon.

As by JSON specificaiton: _""An object is an **unordered** set of name/value pairs.""_
Thus being forced to know the order of the fields to parse the JSON becames a problem.
### Examples:

1) you have a _type_ field and you need to change the object type to of the Object (and thus the parser) given that field value
2) you need to adapt the way you parse the object given some field of the JSon within the data itself.
## Possible solutions? (what would work for me)

The choice of parsing the object with **a cursor is extremely efficient**, I agree with that, but I think we, developer, should have a way of also handling polymorphic data. Even if I have to give away some performance for that portion of the JSON.

Currently I'm forced to parse the object into a Map and then manually create my objects, which is really bad in performance and Object allocation anyway.

I still like GSon better then alternatives and I would love if it could implement one or more of these features (in order or preference):
### A) Go Backward

Allow placing marks in the JSonParser:

```
in.mark(""name"");
// do stuff (beginObject(), next() etc..)
in.resetTo(""name"");
```
### B) natively support parsing into an org.json JsonObject / JsonArray

Add

`in.nextJsonObject();`

and

`in.nextJsonArray();`

to consume a value.

this is far for optimum but at least gives a way of handling cases like this with a custom TypeAdapter.

This require to keep some kind of buffer or use an InputStream / Reader that support marking.
### C) Look Ahead

Using JSON Path getting a specific value inside the JSON
This gives away the performance inside that particular portion of the JSON of course because it has to be parsed completely into a JSON object and then the JsonParser will just visit an already parsed object.""Gson already has its own DOM API with `JsonObject`, no need to use that org.json.\* filth. You can use that to pull out any properties in a type adapter and then delegate to another TypeAdapter to ""rasterize"" it back into a proper Java type.
 =||= Do you mean JsonElement and JsonDeserializer?
I honestly completely missed this two :-/
Using a TypeAdapterFactory and having to return a TypeAdapter I completely missed it.

And now feel stupid for asking :-)
 =||= Mind giving a short example / reference?
 =||= Here's a full example of polymorphic array deserialization I helped with: http://stackoverflow.com/a/36784255/132047
 =||= Something like this?

```
public BaseObj deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
    JsonObject obj = json.getAsJsonObject();
    if (checkIsTypeA(obj)) {
         return context.deserialize(json, A.class);
    } else {
         return context.deserialize(json, B.class);
    }
}
```

couldn't find much documentation about this.
 =||= Oh I see thank you!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
870Consolidate location and path rendering for exceptions.Jake WhartonJakeWharton06/09/16, 10:26:10 PMNaNNaNConsolidate location and path rendering for exceptions.Jake WhartonJakeWharton06/09/16, 10:26:10 PMNaNNaNJake Wharton06/09/16, 10:02:36 PMConsolidate location and path rendering for exceptions.1
871Implement JSON Path for JsonTreeReader.Jake WhartonJakeWharton06/10/16, 06:32:24 AMSince @swankjesse did the JSON Path for `JsonReader`, please review this for correctness (although it passes your tests!).NaNImplement JSON Path for JsonTreeReader.Jake WhartonJakeWharton06/10/16, 06:32:24 AMSince @swankjesse did the JSON Path for `JsonReader`, please review this for correctness (although it passes your tests!).NaNJake Wharton06/10/16, 04:08:33 AMImplement JSON Path for JsonTreeReader.1
872Expose JsonObject size.Jake WhartonJakeWharton06/10/16, 06:06:51 AMI ran into this being absent when attempting to pre-size a collection based on the contents of a `JsonObject`.NaNExpose JsonObject size.Jake WhartonJakeWharton06/10/16, 06:06:51 AMI ran into this being absent when attempting to pre-size a collection based on the contents of a `JsonObject`.NaNJake Wharton06/10/16, 04:46:32 AMExpose JsonObject size.1
873Add support for JsonSerializer/JsonDeserializer in the JsonAdapter annotationInderjeet Singhinder12306/14/16, 11:37:14 PMNaN"We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.

<!-- need_author_consent -->
 =||= This pull request is a carry forward from https://github.com/google/gson/pull/821
 =||= confirmed
 =||= confirmed

On Fri, Jun 10, 2016 at 5:44 PM, googlebot notifications@github.com wrote:

> We found a Contributor License Agreement for you (the sender of this pull
> request) and all commit authors, but as best as we can tell these commits
> were authored by someone else. If that's the case, please add them to this
> pull request and have them confirm that they're okay with these commits
> being contributed to Google. If we're mistaken and you did author these
> commits, just reply here to confirm.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/pull/873#issuecomment-225326396, or mute
> the thread
> https://github.com/notifications/unsubscribe/ABCwyhUFLHY4Vt5A7TaOluE0ykmybrnSks5qKgUBgaJpZM4Izbo3
> .

## 

http://www.singhinderjeet.com/
 =||= @googlebot these commits are mine; I approve.
 =||= LGTM
 =||= merging per LGTM.
Great feedback overall, guys! Tiresome but rigorous process. 👍 
 =||= "Add support for JsonSerializer/JsonDeserializer in the JsonAdapter annotationInderjeet Singhinder12306/14/16, 11:37:14 PMNaNNaNInderjeet Singh06/14/16, 11:34:34 PMaddressed code review comments.1
874Brief Question About Google Gson Internal InterfaceAline Britoalinebrito06/13/16, 12:00:34 AM"Dear Google Gson developers,

I am a master student at UFMG, Brazil. Currently, I am researching the use of internal interfaces by client projects. I mean, public interfaces for use only by internal modules (e.g., com.google.gson.internal.Streams).

In my research, I found 54 internal interfaces in Google Gson (see the list at: [Internal Interfaces Google Gson](https://www.dropbox.com/s/3yap9k2nnsysjm6/)). By mining data provided by the [Boa Language and Infrastructure](http://boa.cs.iastate.edu/), I also found 147 client projects that are using these internal interfaces. Therefore, these internal interfaces are usual in other projects.
1. Did you know that internal interfaces are used by clients?
2. From the presented interfaces, there is some interface that is a candidate to be promoted to the public one?""Interesting info about the use of internal APIs, Aline.
I didn't quite know this, but am not very surprised.

None of these are candidates for promotion to public APIs.
 =||= Hi @inder123 

Thanks for the answer! It is very useful for my research.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
875Preparing 2.7-SNAPSHOT to cut the 2.7 release.Inderjeet Singhinder12306/14/16, 11:46:57 PMNaN"I intend to cut 2.7 today, after merging this.
 =||= lgtm :+1:
 =||= "Preparing 2.7-SNAPSHOT to cut the 2.7 release.Inderjeet Singhinder12306/14/16, 11:46:57 PMNaNNaNInderjeet Singh06/14/16, 11:39:19 PMPreparing 2.7-SNAPSHOT to cut the 2.7 release.1
876JsonArray.contains checking for a String which has a single digit numeric.Arun RamakrishnanRamakrishnanArun06/15/16, 01:41:03 AM"I've got a Json array something like this as an example

``` json
[""a"", ""2"", ""3""]
```

and I'm trying to check for the existence of the values in the array using code like so:

``` java
    public static void main(String[] args)
    {
        String json = ""[\""a\"", \""2\"", \""3\""]"";
        JsonElement element = new JsonParser().parse(json);
        Assert.assertTrue(element.isJsonArray());
        JsonArray array = element.getAsJsonArray();

        JsonElement idA = new JsonParser().parse(""a"");
        Assert.assertTrue(array.contains(idA.getAsJsonPrimitive())); // Passes

        JsonElement id2 = new JsonParser().parse(""2"");
        Assert.assertTrue(array.contains(id2.getAsJsonPrimitive())); // Fails
    }
```

The first contains assertion passes checking for the string ""a"" however the second fails when I check for the string ""2"". It is still a string even though it has a numeric. Shouldn't the second assertion also pass?""God I feel daft. My mistake, not enough sleep.

``` java
JsonElement id2 = new JsonParser().parse(""2"");
```

should have been

``` java
JsonElement id2 = new JsonParser().parse(""\""2\"""");
```
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
877GSON flagging Json Object as Stringxelarmutz06/23/16, 04:21:28 PM"This is my Json {""success""=1} but I am getting this error : com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $.

I don't get it.""Please provide an executable test case that shows the problem. You omitted your model object so it's impossible to know what you're doing.
 =||= Note that = is not valid JSON, you should use "":""

This question is not appropriate as a GitHub issue. Post on StackOverflow or on Gson Google Group.
 =||= My bad. Thanks though, Got it to work. Cheers.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
878gson-joda-time and gson-jsr310Christophe Bornetcbornet06/27/16, 06:56:22 AM"Jackson has jackson-datatype-jsr310 and jackson-datatype-joda artifacts to provide support of truely usable date types.
I am willing to do the same kind of modules for gson with type adapters. I think this has more value to make it as maven sub-modules to this project (like gson-extras) but I can also do it as a personal project.
What do you prefer ?""It's your choice. 
You can also issue a pull request to https://github.com/google-gson/typeadapters
(note that some JodaTime type adapters are already present there).
 =||= @inder123 is that an official gson repo ? It doesn't seem very lively nor popular...
 =||= @inder123 It seems maintained by you. Don't you think it would have more visibility if it were hosted in the main repo ? Or if there was some documentation pointing to it ?
Anyway, I will PR on it. Thx for notifying.
 =||= Agreed, it makes sense to move it to Gson extras.

Feel free to issue a PR to move it there.
 =||= OK. I'll move it here.
Since joda pulls an external library and jsr310 requires java8, they should have their own pom.xml.
So I propose to make 3 modules in extras directory: gson-extras, gson-extras-joda-time, gson-extras-jsr-310. OK with that ?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
879Added flush() to toJson() method when using Appendable writerGábor Antalgaborantal07/05/17, 10:28:33 AM"If you use Appendable writer (e.g.: FileWriter), it can happen that the Appendable object never gets flushed. Example:

```
List<MyClassType> current = /* */;
Gson gson = /* */;
gson.toJson(current, new FileWriter(""MYFILE.JSON""));
```

If you do something like this, it can happen, that the created file is empty. It is not the best solution, as the opened file never gets closed, and so, but  if you create some really simple app to the work for you, maybe a fast solution.  After adding an extra flush() call, after write finished, all the contents will must be in the file.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Since `JsonWriter` doesn't buffer I'm tempted to say that Gson has no obligation here. Any reason you're not using something like this?

``` java
try (Writer writer = new FileWriter(""MYFILE.JSON"")) {
  gson.toJson(current, writer);
}
```
 =||= True point, i can live with it. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
880Make JsonPrimitive setValue publicValerievalerieTurlington06/28/16, 05:16:27 PM"Why is this method class protected?

I've been working with unpredictable json, so I can't put it into specific Java objects. I'm working with basic JsonElement objects and such. Everything was working fine up to the point where I tried to modify the primitive, so I could then deserialize it again later...but I can't directly modify primitive values. Simply having access to this method would let my program work perfectly, or even extending JsonPrimitive to make it public myself, but the class is final so I can't even do that.""`JsonPrimitive` is immutable. If you need to change the value, create a new instance with the new value and replace it in the parent object.
 =||= @JakeWharton @swankjesse Well, JsonObject and JsonArray are not immutable, so we should consider this request.
 =||= Those are collection types equivalent to `Map` and `List` though. `JsonPrimitive` is like `String` or `Long`.
 =||= Gotcha. It's a bit of a pain to keep track of the parent each primitive is
part of rather than the way I had a reference to each primitive stored, but
I can see the reasoning behind it if Primitive is meant to be like String.

On Wed, Jun 29, 2016 at 9:04 AM Jake Wharton notifications@github.com
wrote:

> Those are collection types equivalent to Map and List though.
> JsonPrimitive is like String or Long.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/880#issuecomment-229404326, or mute
> the thread
> https://github.com/notifications/unsubscribe/ADIuJBQrVcNEtEfp3thC5cir9S4etULuks5qQpeXgaJpZM4I_oZi
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
881made nullSafe wrapper of JsonAdapter optionalLucastestcenter07/03/16, 08:53:19 AMsee pull request #851 NaNmade nullSafe wrapper of JsonAdapter optionalLucastestcenter07/03/16, 08:53:19 AMsee pull request #851 NaNtestcenter06/28/16, 07:18:03 AMmade nullSafe wrapper of JsonAdapter optional1
883Add JsonElement.getAsDateIzz Abudakaizzabudaka07/03/16, 08:41:17 AM"See #714

Added convenience method `public Date getAsDate(String pattern)` to get JsonPrimitive Date Strings as java.util.Date and corresponding JsonArray implementation.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= This is a strange thing to specialize, and the asymmetry of the
implementation makes me even less excited about the prospect of its
addition.

On Sat, Jul 2, 2016, 12:27 PM googlebot notifications@github.com wrote:

> CLAs look good, thanks!
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/pull/883#issuecomment-230110092, or mute
> the thread
> https://github.com/notifications/unsubscribe/AAEEEYW8bOVxHa_Cq2EqqfBYB5ETVqSCks5qRpF7gaJpZM4JDtLw
> .
 =||= Please indicate why this must be done inside Gson.
 =||= Using Gson in multiple projects, I have found myself implementing similar Date parsing/validation functionality. I believe this change would offer greater convenience to the users. Any comments on how to make it more symmetric are welcomed :)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
886Implement NullObject pattern for JsonObject, JsonArray, JsonPrimitiveSamuel Urbanowiczsamiuelson07/11/16, 02:24:14 PM"There is `JsonNull` class extending JsonElement. But I'd find it very useful if the null object pattern was applied to JsonObject, JsonArray, JsonPrimitive classes as well. 
1. It'd introduce classes: `JsonObject.Empty` extending `JsonObject`, `JsonArray.Empty` extending `JsonObject` and `JsonPrimitive.Empty` extending `JsonPrimitive`. 
2. Create `isEmpty()` methods for JsonObject, JsonArray, JsonPrimitive

What do you think?""Aside from the fact that this would be a major behavior change that
couldn't happen until a hypothetical Gson v3, these types are meant to
model the JSON data that's was parsed. Thischange  would make it impossible
to distinguish from an absent value and one that was present but empty (in
the case of array/object).

On Mon, Jul 11, 2016 at 6:12 AM Samuel Urbanowicz notifications@github.com
wrote:

> There is JsonNull class extending JsonElement. But I'd find it very
> useful if the null object pattern was applied to JsonObject, JsonArray,
> JsonPrimitive classes as well.
> 1. It'd introduce classes: JsonObject.Empty extending JsonObject,
> JsonArray.Empty extending JsonObject and JsonPrimitive.Empty extending
> JsonPrimitive.
> 2. Create isEmpty() methods for JsonObject, JsonArray, JsonPrimitive
> 
> What do you think?
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/886, or mute the thread
> https://github.com/notifications/unsubscribe/AAEEETevKQ2qpD9Af6TfpG-kd9omZt9tks5qUhcBgaJpZM4JJN9B
> .
 =||= Ok, I see.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
887Exception on Android MMudavath Srinivassrinivas312008/27/16, 07:09:40 PM"java.lang.SecurityException: Can't make field constructor accessible
                                                                       at java.lang.reflect.Constructor.setAccessible(Constructor.java:334)
                                                                       at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:97)
                                                                       at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:79)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:71)
                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)
                                                                       at com.google.gson.internal.bind.MapTypeAdapterFactory.getKeyAdapter(MapTypeAdapterFactory.java:140)
                                                                       at com.google.gson.internal.bind.MapTypeAdapterFactory.create(MapTypeAdapterFactory.java:125)
                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)
                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)
                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:82)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:81)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:118)
                                                                       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:72)
                                                                       at com.google.gson.Gson.getAdapter(Gson.java:356)
                                                                       at com.google.gson.Gson.toJson(Gson.java:585)
                                                                       at com.google.gson.Gson.toJson(Gson.java:572)
                                                                       at com.google.gson.Gson.toJson(Gson.java:527)
                                                                       at com.google.gson.Gson.toJson(Gson.java:507)""Maybe #648 will be useful.
 =||= Your model contains a `java.lang.reflect.Field` which is not a serializable type. Mark it as `transient` or exclude it from serialization using other means.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
890Use json element tree directly in type adaptersToddtodoooo11/11/16, 03:39:05 AM"The Tree type adapter and Runtime type adapter use a json element to perform serialization/deserialization. Parsing a json reader into a tree structure and then back into a reader for consumption by other adapters is inefficient. e.g the RuntimeTypeAdapter uses the tree structure to find the class ""type"" and then finds another registered (possibly the Tree type) adapter to serialize/deserialize the descendant class. 

These changes allow the tree structure to be consumed directly by a type adapter.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it.

On Tue, Jul 19, 2016 at 5:25 PM, googlebot notifications@github.com wrote:

> Thanks for your pull request. It looks like this may be your first
> contribution to a Google open source project. Before we can look at your
> pull request, you'll need to sign a Contributor License Agreement (CLA).
> 
> 📝 _Please visit https://cla.developers.google.com/
> https://cla.developers.google.com/ to sign._
> 
> Once you've signed, please reply here (e.g. I signed it!) and we'll
> 
> ## verify. Thanks.
> - If you've already signed a CLA, it's possible we don't have your
>   GitHub username or you're using a different email address. Check your
>   existing CLA data https://cla.developers.google.com/clas and verify
>   that your email is set on your git commits
>   https://help.github.com/articles/setting-your-email-in-git/.
> - If you signed the CLA as a corporation, please let us know the
>   company's name.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/pull/890#issuecomment-233535393, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AObwKUEP0toG30lR0l5y6SsNOTLuVin2ks5qXF_FgaJpZM4JPYlv
> .
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Not sure I really follow this. JsonTreeReader is pretty efficient because it doesn’t actually decode anything. Currently fromJsonTree() delegates to read(); this flips the order of delegation which could be problematic.
 =||= @swankjesse 
Nothing has changed for TypeAdapters that read/write from the reader/writer objects. 

I'm considering the situation where an adapter (i.e. RunTimeTypeAdapter) specifically converts the Reader/Writer into json elements and then calls a delegate jsonFromTree/jsonToTree method. When a developer uses custom JsonSerializer/JsonDeserializer classes they are wrapped by TreeTypeAdapters which convert the json reader/writer into json elements for processing. In this case the RunTimeTypeAdapter would convert a reader/writer into json elements and then its call to ""delegate.to/fromJsonTree()"" would convert them back into a reader/writer for a TreeTypeAdapter to convert them back into json elements. Inefficient!
 =||= Have you looked at how JsonTreeReader works?
 =||= Yes. It wraps the json elements which is fine. However, the TreeTypeAdapter then converts that reader/writer back into a new tree of json elements for serializing/deserializing.

It is unfortunate that some adapters (RunTimeTypeAdapter, TreeTypeAdapter) have to specifically use a tree of json elements, to perform their operations, instead of accessing the stream directly. Generating it twice makes no sense. Not to mention the additional memory consumption.
 =||= One more question – what happens if the type adapter mutates the JsonObject? I believe the current implementation gets a copy, and your change makes it so that there’s a single instance that’s shared. That could be surprising?
 =||=  I can't think of a reason for not wanting to mutate the shared tree instance, but at least the new implementation gives the developer a choice. Either mutate the existing tree or clone it, as the RunTimeTypeAdapter does during serialization. (Although I'm not sure why, since it doesn't clone the tree during deserialisation.)
 =||= We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.

<!-- need_author_consent -->
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
891Help~Please tell me how to change.ThanksLunYing07/20/16, 03:59:18 AM"```
public static <T> PackageModel<T> getData(Class<T> cls) {
    String json = ""{\""code\"":0,\""data\"":{\""account\"":\""test009\"",\""createdBy\"":\""\"",\""email\"":\""123@qq.com\"",\""enabledFlag\"":1,\""id\"":\""8735\"",\""language\"":\""zh\"",\""name\"":\""test123\"",\""phone\"":\""18566219120\"",\""timeZones\"":\""77\"",\""type\"":\""8\""},\""ok\"":true}"";
    Gson gson = new Gson();
    PackageModel<T> vPackageModel = gson.fromJson(json, new TypeToken<PackageModel<T>>() {
    }.getType());
    return vPackageModel;
}
```

erro:java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.jimi.app.entitys.UserInfo""Generics are erased so that `T` becomes `Object` and therefore Gson creates a `Map` instead of whatever `T` was supposed to be. You need to wrap `cls` in the `PackageModel` parameterized type and there's no good API to do that.

Can you ask your question on StackOverflow since it's a usage problem not a bug with the library? Use the 'gson' tag, and also feel free to link it here.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
892Prevent deserializing null valuesRobin Singhrobinsingh-bw07/26/16, 01:47:21 AM"Hi,

I have a pojo like this:
public class User implements Serializable {
@SerializedName(""name"")
public String name;
@SerializedName(""favorites"")
public ArrayList favorites = new ArrayList<>;
}

Sometimes the server can respond with json such as: { ""name"": ""my name"", ""favorites"": null }

In such cases I want to keep the default initialized array instead of setting it to null. I had a similar issue with strings but I solved that by registering a custom type adapter. I dont want to keep registering custom adapters for all different objects though. Is there any way to force retrofit to just ignore 'null' values?

Regards.""Use @JsonAdapter annotation on favorites.

Please don't ask questions on issues. Ask them on StackOverflow.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
893Added a GsonBuilder method to register a post deserialization annotat…Inderjeet Singhinder12309/27/16, 12:48:51 AM…ion."This addresses Issue https://github.com/google/gson/issues/269
 =||= This is similar to what https://github.com/google/gson/pull/844 wanted.

You can currently write and register a delegating TypeAdapterFactory which checked for annotated methods post-deserialization without needing support in Gson itself. Is that enough?
 =||= @JakeWharton  I don't understand the delegating TypeAdapterFactory solution. Can you illustrate? Thanks.
 =||= This specific solution is good in one specific way: You can just map the javax.annotation.PostConstruct annotation and that will benefit users of frameworks such as JPA.
 =||= Can you suggest a better name for the GsonBuilder method, or even a different signature?
For example, should this method apply the annotation to All classes or match them with a regular expression?
Are there actions beyond post-deserialization where we could look for annotation? For example, pre/post serialization.
 =||= Here’s an example that does it standalone:
https://gist.github.com/swankjesse/20df26adaf639ed7fd160f145a0b661a
 =||= One other difference with this PR vs the gist above – this only applies to field bindings; that applies to any type.
 =||= Nice @swankjesse. That's exactly what I was thinking. 
 =||= Thanks @swankjesse for writing this up. I will try it out.
I think overall something like this needs to be part of Gson. We have talked about it for a very long time but without acting.
 =||= Closing this PR since the specified GIST is a workaround.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
894Gson interprets number as StringDmitriy Zharikhindzharikhin07/28/16, 04:27:24 PM"public class User {
    public String department;
}
User user = new Gson().fromJson(""{\""department\"": 123}"", User.class); //user.department = ""123"";

and it should throw JsonSyntaxException""Use a TypeAdapter which is not lenient by default.

```
gson.getAdapter(User.class).read(...);
```
 =||= Nope
 =||= This is by design. Many Gson users prefer lenient behavior.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
896Support omitting default valuesSebastian Schuberthsschuberth06/27/19, 09:41:31 AM"Functionality is based on

https://groups.google.com/forum/#!msg/google-gson/pk2vAcUk5rQ/SUCK2C4DY10J
https://groups.google.com/forum/#!msg/google-gson/pk2vAcUk5rQ/q6Pet53qgjIJ

Fixes #459.""Can this be merged? =||= @JakeWharton @swankjesse @inder123 Could we please get *any* feedback on whether this has a chance to get merged any time soon, or whether it makes sense to close it unmerged? =||= I’m not in favor of adding this feature at this time. =||= why not? =||= And why not ""at this time""? I.e., what could make you chance your opinion over time? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
897Add complex parametrized type handlingSebastian Schuberthsschuberth06/27/19, 09:41:56 AMNaN"This doesn't support types with multiple generics like `Map`.
 =||= @mmarcon @spaltis Could you maybe comment on this?
 =||= @JakeWharton can you please provide an example JSON and Java class for which deserialization would not work? 
 =||= What will it take for this to be merged? =||= This exists; it’s called getParameterized(). =||= Apparently getParameterized() was [added in version 2.8](https://github.com/google/gson/blob/41e48f7aa3a686778e95328693b830856538e9e3/CHANGELOG.md#L10) after this PR was created.

@spaltis Would the existing getParameterized() feature work for you? =||= @swankjesse Is there example of handling complex parameterized type using getParameterized()? =||= Closing this unmerged due to a lack of interest from the project maintainers. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
898Unable to parse below JSON using GSON.Sumit Sonibloggersumitsoni08/10/16, 12:45:31 PM"I need to parse this json string and want to map it with my bean class.
Also I don't need to parse it via key index as index of the key might change.

{""keyobject"": {""keyarray"": [""key1"", ""key2"", ""key3""]},
""valueobject"": [{""valuearray"": [""arr1_val1"", ""arr1_val2"",""arr1_val3""]},
{""valuearray"": [""arr2_val1"", ""arr2_val2"",""arr2_val3""]}]}

Please suggest.""Please use StackOverflow for usage questions.
 =||= I have first tried stackoverflow then on google gson group but no response from anyone.
Finally I have to try it here.
 =||= You'll need to study the Gson documentation and source code!
 =||= I tried to read the gson documentation but I didn't found a way to parse the above json format using GSON in which keys are all together and array of values are all together.
Any hint or suggestion will be highly appreciated.
 =||= point us to the StackOverflow thread and we will try to answer there.
 =||= The question has marked as duplicate on stackoverflow. Though I have posted a new one.
http://stackoverflow.com/questions/38877535/unable-to-parse-different-json-format-string-via-gson

Also find the similar question on google gson group through this link-
https://groups.google.com/forum/#!topic/google-gson/5P7H8GP1nfw
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
899 Couldn't find com.google.gson.annotations.SerializedName.valuevaibhavjaiswal908/11/16, 09:11:05 PM"I am getting this crash.

Fatal Exception: java.lang.RuntimeException: An error occured while executing doInBackground()
       at android.os.AsyncTask$3.done(AsyncTask.java:300)
       at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:355)
       at java.util.concurrent.FutureTask.setException(FutureTask.java:222)
       at java.util.concurrent.FutureTask.run(FutureTask.java:242)
       at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:231)
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
       at java.lang.Thread.run(Thread.java:818)
Caused by java.lang.IncompatibleClassChangeError: Couldn't find com.google.gson.annotations.SerializedName.value
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
       at java.lang.reflect.Field.getAnnotation(Field.java:242)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:71)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(ReflectiveTypeAdapterFactory.java:67)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
       at com.google.gson.Gson.getAdapter(Gson.java:359)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:122)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.access$100(ReflectiveTypeAdapterFactory.java:46)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:92)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:91)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:142)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:83)
       at com.google.gson.Gson.getAdapter(Gson.java:359)
       at com.google.gson.Gson.fromJson(Gson.java:809)
       at com.google.gson.Gson.fromJson(Gson.java:775)
       at com.google.gson.Gson.fromJson(Gson.java:724)
       at com.google.gson.Gson.fromJson(Gson.java:696)""Dupe of #726. This isn't caused by Gson, but by the (likely broken) OS the phone is using.
 =||= Can u pls assist me how to resolve it??

Thanks.

On 12-Aug-2016 2:41 AM, ""Jake Wharton"" notifications@github.com wrote:

> Dupe of #726 https://github.com/google/gson/issues/726. This isn't
> caused by Gson, but by the (likely broken) OS the phone is using.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/899#issuecomment-239293838, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ALb35p2XC4V6u6xJZWfHkL2vAKVnoBfQks5qe4_7gaJpZM4JijLk
> .
 =||= Yes this happens in most of Samsung's phones. I also got same issue.

I got the solution of it. 

At first all phone's company was ignoring comments ( //  or  /* */ ) in .json File.

But now Samsung developers are not ignoring it. 

So The best Solution is that you have to remove all comments ( // or /* */ ) lines in your .json file =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
900Add static factories for array and parameterized type tokens.Jake WhartonJakeWharton08/12/16, 04:58:55 PM"These are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.

Equivalent methods are exposed on Moshi's `Types` utility.

Some examples of where these are needed:
- Writing a Retrofit `Converter.Factory` which automatically wraps your model object type in an envelope type (like JSON-RPC). For example, `TypeToken.getParameterized(JsonRpcRequest.class, userType)`.
- When doing compile-time code generation of `TypeAdapter` implementations that support generics. To handle `T[]` you need to generate code that combines the statically known type with the runtime generic type. For example, `TypeToken.getArray(runtimeType)`.""Looks good to me. 
 =||= "Add static factories for array and parameterized type tokens.Jake WhartonJakeWharton08/12/16, 04:58:55 PM"These are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique.

Equivalent methods are exposed on Moshi's `Types` utility.

Some examples of where these are needed:
- Writing a Retrofit `Converter.Factory` which automatically wraps your model object type in an envelope type (like JSON-RPC). For example, `TypeToken.getParameterized(JsonRpcRequest.class, userType)`.
- When doing compile-time code generation of `TypeAdapter` implementations that support generics. To handle `T[]` you need to generate code that combines the statically known type with the runtime generic type. For example, `TypeToken.getArray(runtimeType)`."NaNJake Wharton08/12/16, 04:11:57 PM"Add static factories for array and parameterized type tokens.

These are useful when creating TypeAdapterFactories that delegate to others with more complex types. They also are useful when writing dynamic code that deals with types that cannot be fully reified using the normal subclass technique."1
901Enable subclassing of ReflectiveTypeAdapterFactoryF43nd1r08/14/16, 04:29:41 PM"Usecase: I need to serialize a subclass of a collection which adds additional fields, see https://github.com/F43nd1r/Multitool/blob/master/app/src/main/java/com/google/gson/internal/bind/CollectionReflectiveTypeAdapter.java .
As you can see, this requires a lot of duplicated code from ReflectiveTypeAdapter.
To prevent this, it would be nice to be able to access this method and inner class from subclasses.
(ReflectiveTypeAdapterFactory requires a ConstructorConstructor in its constructor, which is why it is necessary that gson exposes its ConstructorConstructor.)""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= You can accomplish this with delegation rather than inheritance. Look at TypeAdapterFactory and its APIs to compose adapters from other adapters.
 =||= @swankjesse That is not possible in this case, as Gson will always return a `CollectionTypeAdapterFactory.Adapter` if i try to access a delegate adapter for a type extending collection.
But I need a `CollectionTypeAdapterFactory.Adapter` and a `ReflectiveTypeAdapterFactory.Adapter` _for the same type_ if I would solve this with composition.
 =||= If there is a way to enable compostion in this case I'd happily use it, but I could not think of a way of doing that without seriously messing with the existing API.
 =||= Got it. What you're doing is pretty weird! I don’t think it's a good idea to depend on Gson’s internal package. In this case your best bet is probably to change your JSON or Java models to be less weird!
 =||= I found that suggestion on [stackoverflow](http://stackoverflow.com/questions/27506989/how-do-i-gson-serialize-an-object-extending-a-collection) too. 
However, my datamodel is enforced by the connected view.
This is why I'm trying to simulate composition on the JSON model, while my Java model uses inheritance. (As Gson/Json does not support properties on an array.)
 =||= I just thought of an alternative:
A method like this in `Gson` would do it too: 

``` java
  public <C, T extends TypeAdapter<C>>  T getAdapterOfType(Class<? super T> adapterClass, TypeToken<C> forType){
    for (TypeAdapterFactory factory : factories) {
      TypeAdapter<C> candidate = factory.create(this, forType);
      if (candidate != null && adapterClass.isAssignableFrom(candidate.getClass())) {
        //noinspection unchecked
        return (T) candidate;
      }
    }
    throw new IllegalArgumentException(""GSON cannot find adapter of class "" + adapterClass + "" for type "" + forType);
  }
```

Does that look better?
 =||= The Stack Overflow answer with the checkmark is what you want. Your value should have a list, not be a list.
 =||= > However, my datamodel is enforced by the connected view.

I'd need to create a deep copy of my datastructure each time I want to persist it, as changing the datamodel in usage is not an option.
 =||= Got it. Too bad. In that case I recommend copying the code you need into your project. I don’t want to encourage anyone to pull code from Gson’s `internal` package.
 =||= Oh well, not what I wanted. But I understand the notion to keep internals hidden. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
905BigInteger equals bugfixybank08/22/16, 11:58:50 PMThe BigInteger conversion may lose precision so when compare with a small integer it can incorrectly regard them as equal to each other. This fix removes this bug and updated tests to prevent regression."Sorry, duplicate to #903 ! 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
908Gson.toJson(PropertyChangeSupport) cause SecurityException in Android NJQniorgai08/04/17, 08:32:05 AM"It only happen in Android N.

Here is the test code(with `compileSdkVersion` 24):

```
PropertyChangeSupport support = new PropertyChangeSupport(this);
new Gson().toJson(support);
```

And here is some exception stack:

```
java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible
                                                     at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133)
                                                     at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119)
                                                     at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)
                                                     at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:99)
                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                     at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)
                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                     at com.google.gson.Gson.getAdapter(Gson.java:423)
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
909Customize InstanceCreator for hierarchiesFabian Zeindlfab1an12/30/17, 07:11:18 AM"I want to deserialise a widget-hierarchy, where each object in the tree get's a reference to the root.

I don't need complex graph, what I want to tell Gson is essentially that if a class implements some interface AND has a constructor that accepts a single type `TreeRoot`, than create the object using this constructor and a `TreeRoot` that I supply.

Other than that I want to keep default serialization.

I haven't found any way to do this because I can't register a generic `InstanceCreator` for an interface.""Followup question: Is it possible to return an `InstanceCreator` from a `TypeAdapterFactory`? 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
910TypeAdapterFactory.getDelegate return wrong TypeAdaptersFabian Zeindlfab1an12/30/17, 07:11:13 AM"I've registered a `TypeAdapterFactory` and some custom `JsonSerializers` for interfaces.

When I call `getDelegateAdapter` in my factory, it doesn't give me the custom Serializer, but a generic one. When I remove the factory it works. ""I solved this by converting my `JsonSerializer` into a `TypeAdapter`.

Just for the record: Apparently TypeAdapters overwrite Serializers, am I right?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
911not response 杨春ijustyce08/30/16, 06:54:29 AM"json string is 
`{
    ""result"": 1,
    ""error"": ""操作成功！"",
    ""logistics"": [{
        ""logisticsId"": ""105_882222020797337064"",
        ""logisticsCode"": ""882222020797337064"",
        ""logisticsType"": 5,
        ""logisticsName"": ""圆通"",
        ""state"": 3,
        ""traceJSON"": ""[{\""AcceptStation\"":\""【广东省深圳市宝安区龙华公司】 已打包\"",\""AcceptTime\"":\""2016-07-06 22:37:03\""},{\""AcceptStation\"":\""【广东省深圳市宝安区龙华公司】 已收件\"",\""AcceptTime\"":\""2016-07-06 22:37:03\""},{\""AcceptStation\"":\""【杭州转运中心】 已发出 下一站 【浙江省杭州市余杭区闲林公司】\"",\""AcceptTime\"":\""2016-07-08 01:58:14\""},{\""AcceptStation\"":\""【浙江省杭州市余杭区闲林公司】 已收入\"",\""AcceptTime\"":\""2016-07-08 05:56:35\""},{\""AcceptStation\"":\""【浙江省杭州市余杭区闲林公司】 派件人 : 侯理想 派件中 派件员电话18058708397\"",\""AcceptTime\"":\""2016-07-08 08:33:54\""},{\""AcceptStation\"":\""客户 签收人 : 邮件收发章 已签收 感谢使用圆通速递，期待再次为您服务\"",\""AcceptTime\"":\""2016-07-08 13:32:30\""}]"",
        ""createtime"": 1471920974000,
        ""updatetime"": 1467955950000,
        ""remark"": ""hahahahahhah"",
        ""traces"": [{
            ""acceptTime"": ""2016-07-06 22:37:03"",
            ""acceptStation"": ""【广东省深圳市宝安区龙华公司】 已打包"",
            ""remark"": null
        }, {
            ""acceptTime"": ""2016-07-06 22:37:03"",
            ""acceptStation"": ""【广东省深圳市宝安区龙华公司】 已收件"",
            ""remark"": null
        }, {
            ""acceptTime"": ""2016-07-08 01:58:14"",
            ""acceptStation"": ""【杭州转运中心】 已发出 下一站 【浙江省杭州市余杭区闲林公司】"",
            ""remark"": null
        }, {
            ""acceptTime"": ""2016-07-08 05:56:35"",
            ""acceptStation"": ""【浙江省杭州市余杭区闲林公司】 已收入"",
            ""remark"": null
        }, {
            ""acceptTime"": ""2016-07-08 08:33:54"",
            ""acceptStation"": ""【浙江省杭州市余杭区闲林公司】 派件人 : 侯理想 派件中 派件员电话18058708397"",
            ""remark"": null
        }, {
            ""acceptTime"": ""2016-07-08 13:32:30"",
            ""acceptStation"": ""客户 签收人 : 邮件收发章 已签收 感谢使用圆通速递，期待再次为您服务"",
            ""remark"": null
        }]
    }]
}`
when i call fromJson, Gson not response, not return value for a long long time, then app crash""I use it on android
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
914Enumsl3eta08/29/16, 04:54:10 PM"Enums always return null. 

`public static class EnumDeserial implements JsonDeserializer<Enum> {

```
@Override
public Enum deserialize(JsonElement je, Type type, JsonDeserializationContext jdc) throws JsonParseException {
    try {
        return Enum.valueOf((Class<Enum>) Class.forName(type.getTypeName()), je.getAsString());
    } catch (Exception ex) {
        throw new JsonParseException(ex.getMessage());
    }
}
```

}`

Along with this of course 
`
b.registerTypeHierarchyAdapter(Enum.class, new EnumDeserial());
`

Example of why they don't work

I believe Java 1.5 is around your support target so this would be the patch to fix, I would figure out where this would go on your side but not my job :)""We have tests proving that enums work: https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/EnumTest.java. If you believe there is a bug, please provide a failing test case.
 =||= How do I get code mark up to work?
 =||= https://help.github.com/articles/getting-started-with-writing-and-formatting-on-github/

On Sat, Aug 27, 2016 at 3:08 PM l3eta notifications@github.com wrote:

> How do I get code mark up to work?
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/914#issuecomment-242935086, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEZ6HKljezf2EMNQ0F_Gu5nRV-WSiks5qkIswgaJpZM4Juwtq
> .
 =||= The problem came from incoming json was ""val: upper"" instead of ""val: UPPER"" I do believe returning null should be a JsonParseException
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
915Gson.instancepiegamespiegamesde08/29/16, 05:57:53 PM"I often use `new Gson().xxx();` for quick serialization. How about a `Gson.instance` or a `Gson.instance()` to re-use that object easily? 
People are [doing it already](http://stackoverflow.com/questions/21709219/should-gson-be-declared-as-static-final) so I think the Gson class should add the line

```
 public static final Gson GSON= new Gson();
```

somewhere. I did not create a pull request since a) a pull request for only one line? and b) someone familiar to the API should say how to implement it exactly.""The difference between projects declaring their own instance and Gson exposing a singleton instance is that when it's done in individual projects the user can choose the configuration options that they want.
 =||= But many times the Gson is used without any special configuration. Could adding this line do any damage elsewhere?
 =||= We have plenty of usecases where we use multiple instances of Gson. Having a single Gson.instance() method sets incorrect expectations and will cause confusion. You are not even typing more characters by using new Gson() instead of Gson.getInstance()
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
916Add the exports for the internal packages for backwards compatibilityIgnasi Barreranacx08/30/16, 03:30:10 PM"Exports for the `com.google.gson.internal.*` packages where not added back in https://github.com/google/gson/pull/797.

Apache jclouds heavily relies on Gson and does many complex (de)serialization stuff at its core to leverage clean interfaces for the supported providers. It relies on [some classes in the internal packages](https://github.com/jclouds/jclouds/search?utf8=%E2%9C%93&q=%22com.google.gson.internal%22&type=Code) and it is now broken in OSGi, which is a real blocker to upgrade Apache jclouds to the latest version of Gson.

The classes and methods being used are all public, so I'm wondering whether they are really internal (as they provide some features that could be used by downstream consumers). Could the internal packages be added back again to the OSGi exports, to keep backwards compatibility? ""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= I don't get it. What’s the point of OSGi if not to strongly encapsulate implementation details?
 =||= Absolutely.

The problem here is the deprecation path and the inconsistencies between regular apps and OSGI deployed ones. Those packages were _explicitly_ exported in previous versions and have been removed directly, without a reference in the changelog or release notes. There is also no deprecation warning or migration path for the downstream users so they can upgrade Gson and their apps. In one release, those packages literally _disappeared_ in OSGi without any warning or alternative.

I agree that internal classes should not be exposed, but with the current setup, a standalone Java app can use those classes, apps deployed in servlet containers can use them too, but apps deployed in OSGi containers can't. And that is not consistent. Visibility and scope of internal classes shouldn't be enforced by a package name, but the visibility of their constructors and methods, and those internal classes are all public. Otherwise one should expect downstream users to be using them (just like people uses `sun.misc.Unsafe`).

I'd suggest a friendly upgrade path, so users of old Gson versions affected by this can upgrade without issues:
1. Add the exports back, and add a warning in the release notes that those packages won't be exported in future releases, and cut a bugfix release exporting those packages.
2. Make all internal classes constructors package-private and limit the visibility of their methods so they can't be instantiated/used from the outside.
3. Consider providing a public interface to leverage the functionality that will be hidden, so users have an upgrade path.

I think this makes sense. There is no actual impact on Gson itself for adding the exports back and helps users upgrade properly.
 =||= > In one release, those packages literally disappeared in OSGi without any warning or alternative.

But they were not part of the public API. This is exactly what normal Java users experience when they depend on `internal` packages and upgrade to find that they changed.

> Visibility and scope of internal classes shouldn't be enforced by a package name, but the visibility of their constructors and methods, and those internal classes are all public.

Java has no mechanism of sharing internal classes among different packages before Jigsaw so that's not really a viable option.
 =||= This is sensible, as in the end it is all enforced by naming, and this leads to interpretations.

The `com.google.gson.internal` package is explicitly exported since Gson 1.7, and that means that it is _explicitly_ made part of the public API in OSGi environments. 

I'm not arguing about the need to hide those classes, but highlighting the fact that if they were internal, they weren't properly tagged as such (at least in OSGi). Someone seeing an explicit export of a package may think that package is OK to be used (why exporting it if not?).

Since it's been there for 15 releases, I'm just asking for a proper deprecation path. From an OSGi perspective, removing an export is like removing an entire package of a public API, and that has a big impact if not advertised properly or a deprecation path is provided.
 =||= > The com.google.gson.internal package is explicitly exported since Gson 1.7

@JakeWharton @swankjesse Just to clarify: if I'm reading the thread correctly, the export was inadvertent rather than intentional?

From an Apache jclouds perspective (just echoing Ignasi's point here) I think we're in full agreement that using internal classes is not ""the right thing to do"". The question is whether it's possible to provide a deprecation path that would allow us to use the latest minor whilst preparing for an upgrade to the next major by removing use of those classes.
 =||= I'm betting someone external contributed the required bits for OSGi and exposed everything. Since none of us use OSGi, it was likely merged without a close enough inspection or understanding as to what the implications were.
 =||= > I'm betting someone external contributed the required bits for OSGi and exposed everything.

@JakeWharton Ah, OK, thanks for clarifying. Would it be possible to consider restoring those exports in 2.6.x only, assuming there are plans for another minor release there?

That would leave master ""clean"" but allow us and potentially other consumers to at least use the latest 2.6.x version - it would be great if we could at least get up to 2.6.
 =||= Can somebody just fix jclouds? Maybe send a PR that copy-pastes the relevant `internal` classes from Gson into that project?
 =||= > Maybe send a PR that copy-pastes the relevant internal classes from Gson into that project?

This is definitely one of the options being considered - see thread [here](http://markmail.org/message/olgebygfgdy3hwtm). The concern is that that's more of a patch than a real fix, since we obviously would rather use Gson cleanly and depend only on public and recommended classes.

@swankjesse Any input on that thread, and especially any suggestions as to what the right way would be to access the needed functionality, would be very much appreciated.

@nacx is probably in a better position to comment on why we'd like to avoid copying the classes if possible, but that's a discussion perhaps better taken to the thread? Of course, also happy to continue here if preferred.
 =||= Thanks for all the feedback. I'll just file an issue in jclouds to stop relying on the internal packages and discard this PR.
I don't have enough knowledge of gson to safely replace that code, but I agree this is the right path. Let's work on removing the offending bits from jclouds.

Thanks!
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
917Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?Vyshnav Rameshvyshnavkr08/31/16, 02:37:34 PM"This is regarding the StackOverflow question http://stackoverflow.com/q/39232330/6737655
The request is being done, but the response data seems empty. I guess it's due to an empty string fetched. Am I wrong?""Answered on StackOverflow
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
918Prepare a Gson 2.7.1 release.Jake WhartonJakeWharton02/07/17, 03:47:10 PM"Two minor changes: https://github.com/google/gson/compare/gson-parent-2.7...master

Incoming changes have slowed so it'd be nice to get these out since they were driven by actual use cases of users. Anything else we want to include?

@inder123 @swankjesse ""Ship it!
 =||= Because this adds new APIs I’d be tempted to call this Gson 2.8. (In that it’s not safe to run code compiled against 2.7.1 with 2.7. I gotta go read what semver says)
 =||= I would like to introduce a new feature: Ability to map unknown JSON values
to a default enum value. This has been the biggest reason why I stopped
using Enums in Gson.

Let me think about how I will implement it today, and if it can't be done
quickly, it can be done in a later version.

On Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com
wrote:

> Because this adds new APIs I’d be tempted to call this Gson 2.8. (In that
> it’s not safe to run code compiled against 2.7.1 with 2.7. I gotta go read
> what semver says)
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/918#issuecomment-243786641, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl
> .

## 

http://www.singhinderjeet.com/
 =||= @inder123 punt that to 2.8? That sounds like something that make take some time to get exactly right.
 =||= That should be able to be done with a TypeAdapterFactory that delegates to
the built-in enum adapter. Does it need to be built-in?

On Wed, Aug 31, 2016 at 10:51 AM inder123 notifications@github.com wrote:

> I would like to introduce a new feature: Ability to map unknown JSON values
> to a default enum value. This has been the biggest reason why I stopped
> using Enums in Gson.
> 
> Let me think about how I will implement it today, and if it can't be done
> quickly, it can be done in a later version.
> 
> On Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com
> wrote:
> 
> > Because this adds new APIs I’d be tempted to call this Gson 2.8. (In that
> > it’s not safe to run code compiled against 2.7.1 with 2.7. I gotta go
> > read
> > what semver says)
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub
> > https://github.com/google/gson/issues/918#issuecomment-243786641, or
> > mute
> > the thread
> > <
> > https://github.com/notifications/unsubscribe-auth/ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl
> > 
> > .
> 
> ## 
> 
> http://www.singhinderjeet.com/
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/918#issuecomment-243789549, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEeDfFuBcpqwUYCI3eO5RpRyZJL0Wks5qlZUGgaJpZM4JxsLl
> .
 =||= I think it should be built in. The current version shouldn't be used to
deseralize enum because an future addition of enum breaks all existing
clients. Unsuspecting users won't realize this until it's too late.

On Aug 31, 2016 8:43 AM, ""Jake Wharton"" notifications@github.com wrote:

> That should be able to be done with a TypeAdapterFactory that delegates to
> the built-in enum adapter. Does it need to be built-in?
> 
> On Wed, Aug 31, 2016 at 10:51 AM inder123 notifications@github.com
> wrote:
> 
> > I would like to introduce a new feature: Ability to map unknown JSON
> > values
> > to a default enum value. This has been the biggest reason why I stopped
> > using Enums in Gson.
> > 
> > Let me think about how I will implement it today, and if it can't be done
> > quickly, it can be done in a later version.
> > 
> > On Wed, Aug 31, 2016 at 7:43 AM, Jesse Wilson notifications@github.com
> > wrote:
> > 
> > > Because this adds new APIs I’d be tempted to call this Gson 2.8. (In
> > > that
> > > it’s not safe to run code compiled against 2.7.1 with 2.7. I gotta go
> > > read
> > > what semver says)
> > > 
> > > —
> > > You are receiving this because you were mentioned.
> > > Reply to this email directly, view it on GitHub
> > > https://github.com/google/gson/issues/918#issuecomment-243786641, or
> > > mute
> > > the thread
> > > <
> > > https://github.com/notifications/unsubscribe-auth/
> > > ABCwyvW6Mg1hA8AmFA3NH5tayGofue66ks5qlZL2gaJpZM4JxsLl
> > > 
> > > .
> > 
> > ## 
> > 
> > http://www.singhinderjeet.com/
> > 
> > —
> > You are receiving this because you authored the thread.
> > Reply to this email directly, view it on GitHub
> > https://github.com/google/gson/issues/918#issuecomment-243789549, or
> > mute
> > the thread
> > <https://github.com/notifications/unsubscribe-auth/
> > AAEEEeDfFuBcpqwUYCI3eO5RpRyZJL0Wks5qlZUGgaJpZM4JxsLl>
> > .
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/918#issuecomment-243790725, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ABCwyjorJMWzS-oM3hBL4gAZaxGQVB6xks5qlZXVgaJpZM4JxsLl
> .
 =||= I prefer time pressure of having to release quickly. Otherwise hard to find
time.

On Aug 31, 2016 8:16 AM, ""Jesse Wilson"" notifications@github.com wrote:

> @inder123 https://github.com/inder123 punt that to 2.8? That sounds
> like something that make take some time to get exactly right.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/918#issuecomment-243790291, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/ABCwyrLpp_SoMGPiWocm7_TzUq7c2wAKks5qlZWLgaJpZM4JxsLl
> .
 =||= https://github.com/google/gson/pull/919 implements regular expressions
patterns for SerializedName for enums.

If you like this approach, I can expand it to fields of regular Java
objects.

On Wed, Aug 31, 2016 at 9:29 AM, Inderjeet Singh inder123@gmail.com wrote:

> I prefer time pressure of having to release quickly. Otherwise hard to
> find time.
> 
> On Aug 31, 2016 8:16 AM, ""Jesse Wilson"" notifications@github.com wrote:
> 
> > @inder123 https://github.com/inder123 punt that to 2.8? That sounds
> > like something that make take some time to get exactly right.
> > 
> > —
> > You are receiving this because you were mentioned.
> > Reply to this email directly, view it on GitHub
> > https://github.com/google/gson/issues/918#issuecomment-243790291, or mute
> > the thread
> > https://github.com/notifications/unsubscribe-auth/ABCwyrLpp_SoMGPiWocm7_TzUq7c2wAKks5qlZWLgaJpZM4JxsLl
> > .

## 

http://www.singhinderjeet.com/
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
921Add @Documented annotation to @SerializedName to help with generating javadocAmiruddin Nagrianagri09/16/16, 01:44:34 AMAll the retrofit methods have `@Documented` annotation, so they are documented when a javadoc is generated. It will be useful if we have `@Documented` annotation for `@SerializedName`, `@Expose`, `@Since`, `@Until` annotations in gson."Yes, this is a good idea
 =||= https://github.com/google/gson/pull/922
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
922Added @Documented to Gson annotations.Inderjeet Singhinder12309/16/16, 01:25:59 AMThis is useful since it shows the JSON format for a class which the user of that class should typically know."lgtm
 =||= Removed Documented from JsonAdapter.
 =||= Merging since got LGTM
 =||= "Added @Documented to Gson annotations.Inderjeet Singhinder12309/16/16, 01:25:59 AMThis is useful since it shows the JSON format for a class which the user of that class should typically know.NaNInderjeet Singh09/16/16, 01:24:21 AM"Added @Documented to Gson annotations.

This is useful since it shows the JSON format for a class which the user of that class should typically know."1
924NoSuchFieldException when serializing objects with an enumeration field on Samsung devices running Android 5.0.xangelocoiro09/06/16, 02:37:47 PM"## Stack trace

```
java.lang.AssertionError: java.lang.NoSuchFieldException: ENUM_CONSTANT_NAME
at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter#<init>(808)
at com.google.gson.internal.bind.TypeAdapters$30#create(834)
at com.google.gson.Gson#getAdapter(423)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#createBoundField(115)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#getBoundFields(164)
at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory#create(100)
at com.google.gson.Gson#getAdapter(423)
at com.google.gson.Gson#toJson(661)
at com.google.gson.Gson#toJson(648)
at com.google.gson.Gson#toJson(603)
at com.google.gson.Gson#toJson(583)
at com.myapp.mypackage.MyClass#myMethod()
```
## Crash Descriprion

I can see this crash on Samsung devices running Android 5.0.x only.
I'm using gson-2.7 and I'm not usin ProGurad.

The crash occurs when I try to serialize an object of a specific type that contains a field of type enumeration.
However, it does not occur sistematically but rather randomly.

As fas as I understand, such an exception cannot be caused by my app's code.
Moreover, by inspecting gson code, I cannot understand why this exception is generated. It seems to me that this should never happen:

```
for (T constant : classOfT.getEnumConstants()) {
          String name = constant.name();
          SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);
...
}
```

The NoSuchFieldException exception is thrown when the `Class.getField(String name)` method is called (line 797)

Any idea on why this exception is thrown? 
What could be the reason that causes a similar crash?""This is a bug in Samsung's version of Android. I don't think there's anything you can do and there's certainly nothing we can do.
 =||= Thanks for your support @JakeWharton. That is exactly what I suspected.
 =||= this is not a bug in samsungs version of android. i get the same thing on a nexus5x running android 8.1.0.  its more lily a pro guard issue. See: https://stackoverflow.com/questions/15543607/assertionerror-in-gson-enumtypeadapter-when-using-proguard-obfuscation =||= @bpappin as described in the issue pro guard was not used  =||= I also got same exception but problem was i extending model with facebook native ad i just make that field transient and it worked fine. =||= Anyone resolved this ? I am getting this issue on all my devices  =||= > Anyone resolved this ? I am getting this issue on all my devices

Try method from this article:
https://medium.com/@hanru.yeh/gson-will-crash-at-enum-fields-in-custom-class-with-proguard-bbcf5ad1b623
It helped me =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
925Prevent Proguard from stripping interface info from TypeAdapterFactory implementationsChaitanya PramodChaitanyaPramod09/14/16, 11:54:11 PM"Proguard strips away interface information from `TypeAdapterFactory` implementations. This leaves `@JsonAdapter(MyTypeAdapterFactory.class)` useless as `JsonAdapterAnnotationTypeAdapterFactory` doesn't detect the class to be a `TypeAdapterFactory` instance. See https://github.com/google/gson/blob/193349f4aa7eecf43cc6ebf104e218e704db21d9/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java#L60

The solution would involve updating the proguard snippet to keep all `TypeAdapterFactory` implementations""Now that I think about it, this applies to `JsonSerializer` and `JsonDeserializer` instances as well
 =||= Ok. Can you send another PR? Thanks.
 =||= The merged PR #926 already keeps `JsonSerializer` and `JsonDeserializer` implementations.
Cheers! 😊
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
926Prevent Proguard from stripping interface info from @JsonAdapter classesChaitanya PramodChaitanyaPramod09/14/16, 11:54:11 PM"Previously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.

Fixes #925"NaNPrevent Proguard from stripping interface info from @JsonAdapter classesChaitanya PramodChaitanyaPramod09/14/16, 11:54:11 PM"Previously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.

Fixes #925"NaNChaitanya Pramod09/14/16, 01:27:35 PM"Prevent Proguard from stripping interface info from @JsonAdapter classes

Previously after Proguard, the classes would no longer implement the interfaces, leading to `JsonAdapterAnnotationTypeAdapterFactory` throwing.

Fixes #925"1
927Self-reference tests are inconsistentMatteo Franciaw4bo10/25/16, 07:20:20 PM"Self-reference is not supported by gson serialization (see [CircularReferenceTest.java](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java)). However, it is required in gson-extras (see [GraphAdapterBuilderTest.java](https://github.com/google/gson/blob/ee8d6be59ff6f2466d65be746b96ccf07ddb9ddf/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java)).

Test ""testSerializationDirectSelfReference"" in [GraphAdapterBuilderTest.java](https://github.com/google/gson/blob/ee8d6be59ff6f2466d65be746b96ccf07ddb9ddf/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java) is inconsistent with ""testSelfReferenceIgnoredInSerialization"" in [CircularReferenceTest.java](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java). Fixing the former breaks the latter.""How do both sets of tests pass?
 =||= That is the fact. They do not pass together as they are complementary, so why keeping both? 

I try to give a better explanation: gson-extras depends on gson. The former has a test which asserts that _direct self-reference_ serialization works (_testSerializationDirectSelfReference_). The latter has a test which asserts that self-reference is not supported (_testSelfReferenceIgnoredInSerialization_). If _testSelfReferenceIgnoredInSerialization_ passes, then _testSerializationDirectSelfReference_ must fail.

Is it useful to open a pull request to make gson-extras support direct self-serialization? This solution may impact the gson main project.
 =||= They _do_ both pass.
 =||= :+1: 
 =||= gson-extra's version works because it registers a custom adapter (see GraphAdapterBuilder), which does support limited self-references in the reigistered types ('Roshambo.class' in the test). Without that adapter, the test would fail.
So, it all works as expected.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
928useDefaultManifestFile deprecated in Maven JAR PluginHeidi Dongheidid09/23/16, 12:32:16 AM[Maven JAR Plugin 3.0](https://maven.apache.org/plugins/maven-jar-plugin/) removes useDefaultManifestFile, which is currently used in [pom.xml](https://github.com/google/gson/blob/master/pom.xml). The file should be updated or a version number should be added."Thanks. Can you send a pull request to fix?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
929Problems with Gson library. Passing Info in IntentJose Gonzalezjose92040509/16/16, 04:19:48 PM"Have a bug with `Gson` when call `fromJson` func the object come bad. 

I'm passing `toJson`a `Video` object, model from youtube. 

**Code:**

When pass:

```
Gson gson = new Gson();
String myJson = gson.toJson(ytVideo); //ytvideo ==> com.google.api.services.youtube.model.Video
i.putExtra(""youtubeVideo"", myJson);
```

When Receive:

```
Gson gson = new Gson();
youtubeVideo = gson.fromJson(getIntent().getStringExtra(""youtubeVideo""), Video.class);
```

The error is

> field `com.google.api.services.youtube.model.Video.contentDetails` has type `com.google.api.services.youtube.model.VideoContentDetails`, got `com.google.gson.internal.LinkedTreeMap` .

 I suppose that `Gson` fails when trying to repair my object Video.

http://stackoverflow.com/questions/39535222/problems-with-gson-library-passing-info-in-intent""StackOverflow is the right place for usage questions. This isn't a bug with the library. This happens when you have a generic type (presumably `Video`) and are not passing generic information with a `TypeToken`.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
930Added PostConstruct Factory sample in Extras.Inderjeet Singhinder12310/03/16, 11:46:58 PMNaN":100: 
 =||= "Added PostConstruct Factory sample in Extras.Inderjeet Singhinder12310/03/16, 11:46:58 PMNaNNaNInderjeet Singh09/17/16, 12:35:34 AMAdded PostConstruct Factory sample in Extras.1
931Remove deprecated useDefaultManifestFile for jar pluginHeidi Dongheidid09/19/16, 05:44:19 AMAddresses #928 "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it!
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Thanks
 =||= "Remove deprecated useDefaultManifestFile for jar pluginHeidi Dongheidid09/19/16, 05:44:19 AMAddresses #928 NaNHeidi Dong09/17/16, 07:23:49 AMRemove deprecated useDefaultManifestFile for jar plugin1
932JsonPrimitive equals() Class<?> comparisonCarter Hudsoncarterhudson09/20/16, 12:04:00 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
933Security scan reported problem with com.google.gson.internal.StringMapvenusjain1002/07/17, 03:46:57 PM"We are using GSON APIs in our project and security scan on our code has reported following problem. Could you please let me know if this is of any concern or it can be fixed in new version of this API.

**Problem:** Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().
**Recommendations (Generated by tool)**
If this random number is used where security is a concern, such as generating a session identifier or cryptographic key, use a trusted cryptographic random number generator instead

com.google.gson.internal.StringMap""This type no longer exists.
 =||= Does that mean switching to the latest API version would resolve the issue?
 =||= It means whatever issue you purport to have found doesn't exist in the
latest version and thus is hard to access.

On Mon, Sep 26, 2016, 8:05 PM abhisheksharma43 notifications@github.com
wrote:

> Does that mean switching to the latest API version would resolve the issue?
> 
> —
> You are receiving this because you commented.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/933#issuecomment-249732492, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEckv201gCIg-u3n-GzPZfYZ9zf8qks5quF3QgaJpZM4KHDYE
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
934Security scan reported problem with com.google.gson.stream.JsonReader venusjain1009/27/16, 02:45:47 AM"We are using GSON APIs in our project and security scan on our code has reported following problem. Could you please let me know if this is of any concern or it can be fixed in new version of this API.

**Problem:** Using '==' to compare two strings for equality or '!=' for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.

**Recommendations (Generated by tool)**
Use the equals() method to compare strings, not the '==' or '!=' operator

**Class:**
 com.google.gson.stream.JsonReader""There are no string comparisons. Only char or int.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
937Json primitive lru cacheDeleted userghost12/15/16, 06:04:22 AM"This addresses performance problems found in our message passing system daemon that uses Gson for JSON serialization.  The pattern followed is the same as in the Java VM for string interning or StringPool by using an LRU cache to reduce allocations of the same immutable objects.  

In this particular use case, we are processing multiple concurrent requests with large JSON payloads.  The process was crashing with the exception: “java.lang.OutOfMemoryError: GC overhead limit exceeded”.  We found by use of a profiler that Gson JsonPrimitive object creation was overloading the GC with allocations.   After these changes this use case is successful.   

By adding a small, optionally enabled, LRU Cache we found that for strings we get 100:1 hit to miss ratio resulting in significantly fewer allocations by reusing the same immutable JsonPrimitive objects.  JsonPrimitive of Numbers type are less reused, though our system is strongly weighted towards using strings.

The JsonPrimitive of type Boolean is cached in static objects given there are only two permutations.

Preferably I wanted to make the JsonPrimitive fully immutable but didn’t want to break the backwards compatibility for those not wanting to enable the cache.

The cache:
1.  Can be optionally enabled/disabled
void JsonPrimitive.setCacheEnabled(boolean enableCache)
2.  Has a settable max size for caches for String and Number types
void JsonPrimitive.setCacheSizes(boolean string, boolean number)
3.  Has settable max size of JsonPrimitive of type String to be cached
void setMaxStringCacheSize(int maxStringSize)
4.  Get statistics for hit/miss ratio
CacheStats getCacheStats()""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= If you are concerned about memory consumption, you should not use Gson to parse into a DOM of JsonElements. 
 =||= @inder123 The LRU cache is less about overall memory consumption and more about the fact that small objects are created and destroyed quickly.  The Java Object to JSON String format conversion introduces many small short lived objects.  The creation of these can outpace the garbage collector's ability to clean them up.  Making the JsonPrimitive objects (the key contributor) to use a cache makes it such that the same JsonPrimitive for a String or Number can be reused and just referenced instead of allocated and de-allocated in the heap.  This presumes that your object model has some repetition in it, the cache would not be useful if all your JSON name/values were all unique in every use.  For example, we have a reference field our object model called ""selfLink"".  When users access our REST API the same cached JsonPrimitive(""selfLink"") can be referenced over and over again by different requests without adding any allocation / de-allocation beyond the initial one that gets cached.

The trade-offs here are memory consumed by the cache vs CPU usage in allocation / de-allocation.  This is disabled by default (existing behavior), each consumer of Gson would need to make the choice to enable this new feature or not and tune for their program's and environment.
 =||= Thanks for the details @speters-f5 
In general, we much prefer Pull Requests with no new APIs. Is there a way to do smaller scale version of this PR that interns the repeated objects?
 =||= Also, note that Gson internally doesn't use JsonElement based DOM anymore for toJson() calls. So, the memory consumption is there only when you explicitly ask Gson to parse to a DOM.
 =||= @inder123 I wasn't aware of the shift to no longer use JsonElements internally when going from Java object to JSON string in toJson().  That will likely make this pull request irrelevant.  Please disregard this pull request for now.  We will need to re-factor our code and profile it with the latest Gson to see if a cache is even still necessary and keep performance where we need it.  Can you confirm that fromJson() also bypasses JsonElement objects now when going from string to Java Object?

Thank you.
 =||= Yes, fromJson also bypasses JsonElements. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
938Make GsonBuilder non-finalMartin von Gagerngagern10/04/16, 04:57:34 PM"This allows for projects to store common project-specific settings in the constructor of a derived class, which in some scenarios feels more natural than a static method which creates a new builder instance.

Or is there a reason the builder has to be final? Unfortunately the public history doesn't extend that far into the past, so the git log doesn't help answering that question.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= As a design principle, Gson doesn't support extension through inheritence. The reason is to avoid unforseen API commitments that we will need to continue supporting in future.

You will need to indicate a substantial benefit before we will accept this.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
939Serialization randomly hangs with RetrofitNoHarmDan10/19/16, 12:05:12 PM"Hello,

When using Retrofit's Gson Converter, the serialization sometimes randomly hangs as [described in this StackOverflow question](http://stackoverflow.com/questions/34735639/retrofit-realmlist-gson-stuck-in-a-loop-until-out-of-memory). With the only difference that it doesn't run out of memory but ultimately after several minutes (3-7) sends the request and gets response normally.

I blamed it on Realm, [as described in this Retrofit issue thread](https://github.com/square/retrofit/issues/2040), but it turns out the same issue happens with the simplest POJOs as well. There are no circular references and I wouldn't expect lists, inheritance and object attributes to be the cause (happens also with objects that only have the simplest attribute types, for example integers and strings).

I'm using Retrofit v2.1.0, build tools v23.0.3, target SDK v23 and compile SDK v24. I have tried older versions of Gson Converter and other SDK combinations to no effect - although it seems this problem didn't start happening until about a week ago, after a release of an SDK update (I'm uncertain about that though, because we started noticing the problem very slowly and can't really tell the circumstances of when it started to happen.)""Please provide a test case

On Thu, Oct 6, 2016 at 10:47 AM NoHarmDan notifications@github.com wrote:

> Hello,
> 
> When using Retrofit's Gson Converter, the serialization sometimes randomly
> hangs as described in this StackOverflow question
> http://stackoverflow.com/questions/34735639/retrofit-realmlist-gson-stuck-in-a-loop-until-out-of-memory.
> With the only difference that it doesn't run out of memory but ultimately
> after several minutes (3-7) sends the request and gets response normally.
> 
> I blamed it on Realm, as described in this Retrofit issue thread
> https://github.com/square/retrofit/issues/2040, but it turns out the
> same issue happens with the simplest POJOs as well. There are no circular
> references and I wouldn't expect lists, inheritance and object attributes
> to be the cause (happens also with objects that only have the simplest
> attribute types, for example integers and strings).
> 
> I'm using Retrofit v2.1.0, build tools v23.0.3, target SDK v23 and compile
> SDK v24. I have tried older versions of Gson Converter and other SDK
> combinations to no effect - although it seems this problem didn't start
> happening until about a week ago, after a release of an SDK update (I'm
> uncertain about that though, because we started noticing the problem very
> slowly and can't really tell the circumstances of when it started to
> happen.)
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/939, or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEfrzU5p5_EXQlalaUv6rQxhn6tDFks5qxQnygaJpZM4KQB7J
> .
 =||= When using Retrofit 2.1.1 snapshot and not trying to convert RealmObjects, all works just fine. It was probably a combination of issues with Realm and Retrofit not closing all connections. (Curiously trying to convert Json into a RealmObject works with no issues whatsoever.)
 =||= I have seen that the current InputStreamReader hangs if the response is too big.
Retrofit should consider wrapping it in BufferedReader, @JakeWharton.
 =||= Retrofit uses Okio not java.io. There's already a layer of buffering
beneath the Reader we pass to Gson.

On Wed, Oct 26, 2016, 2:03 AM inder123 notifications@github.com wrote:

> I have seen that the current InputStreamReader hangs if the response is
> too big.
> Retrofit should consider wrapping it in BufferedReader, @JakeWharton
> https://github.com/JakeWharton.
> 
> —
> You are receiving this because you were mentioned.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/939#issuecomment-256222049, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAEEETMtgvNJy8wLb_-_oJPxSKh6BAIZks5q3qbLgaJpZM4KQB7J
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
940"""type"" field in RuntimeTypeAdapterFactory is getting removed from JSON"Aravind Santhanamaravinds0310/07/16, 09:33:15 PM"Hi,
In https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java#L202, I see that ""type"" field is getting removed while reading JSON. 

Hence, I am not able to identify exact subType without using this field now. Instead, I have to use ""instanceof"" to identify what exact sub-class is de-serialized from gson lib.

Is there any reason why you are altering the JSON?
If yes, what is the best way to identify the exact sub-class after retrieving the object ?""Look at the class RuntimeTypeAdapterFactory in 
https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java that does what you are asking for.
 =||= Are you saying that I should copy-paste the RuntimeTypeAdapterFactory class defined in FunctionalTest file?

Shouldn't be fixed in extras package itself?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
941Get JsonObject Keys?Mark Hesshessmjr12/14/16, 06:46:34 AMIs there specific reason a JsonObject doesn't return a set of keys as Strings such as Java's Map data structure?  Seems like a simple and useful method especially considering the similarities between the two data structures."Submitted a PR for this since its fairly simple. #942 
 =||= This is done. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
942Add keySet method and testMark Hesshessmjr12/14/16, 06:15:49 AM"# Overview

Adds keySet method similar to that of Java Map.  Since all Map.entries utilize strings as a key.  Test method also included.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= This addresses the issue I opened, #941 .
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= 👍  =||= "Add keySet method and testMark Hesshessmjr12/14/16, 06:15:49 AM"# Overview

Adds keySet method similar to that of Java Map.  Since all Map.entries utilize strings as a key.  Test method also included."NaNmark10/07/16, 10:35:07 PMAdd keySet method and test1
943README.md Add a 2nd third party tutorial resourceNorman Peitekpeitek10/26/16, 01:23:43 AM[Future Studio](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) has published over 20 tutorials on Gson with some more to come soon. Developers interested in Gson would benefit from practical introductions to this amazing library.NaNREADME.md Add a 2nd third party tutorial resourceNorman Peitekpeitek10/26/16, 01:23:43 AM[Future Studio](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) has published over 20 tutorials on Gson with some more to come soon. Developers interested in Gson would benefit from practical introductions to this amazing library.NaNNorman Peitek10/07/16, 08:40:45 PMREADME.md Add a 2nd third party tutorial resource1
945Added support for customising non-executable prefix for json Yash Srivastavyashsriv12/05/16, 01:20:36 PM"This adds support for setting a custom non-executable prefix, during generation of JSON as well as during parsing.

Fixes #551 

P.S. Criticisms and suggestions welcome.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it! @googlebot 
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= This has been pending for a long time. Is there anything I can do to get this to merge? =||= No. If you need this, consume the prefix before creating your JsonReader. =||= GsonBuilder already removes one of the (semi?) standard prefix - `)]}'\n`, this PR adds an option to customize the prefix. 

I originally sent in this P.R. while working with Retrofit on Android. They expect a `GsonBuilder` instance for parsing JSON. Now, we wanted to consume the prefix and I thought - wow it already has support for a prefix - `)]}'\n`. So I don't need to do anything. Turns out the default prefix supported by Angular2 is `)]}',\n` (an additional comma before newline -- another semi-standard?). This simple change must have been easy to set using Gson settings.

Unfortunately there was no way to do that and we had to copy another Retrofit class and change it in just one place before sending it to json for parsing. Changes - `+122 -3`. If this feature was available `+1 -1`.

Now its debatable that it is not the responsibility of the json parser to handle this extra prefix but rather the job of the client code before sending it to the parser. But, there's an issue already filed to do it in Gson repository, so its not an isolated requirement and no one has sent a PR to it as yet. Its convenient to expose the api to configure the prefix so that more such 'standard' prefixes can be taken care of in future.

As a friend of mine suggested, changing the base constructor of `Gson` might break the api for some other clients. I'm willing to add an overloaded constructor in case that is needed.

Request you to please consider #551 again =||= +1 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
948Gson skip call of specified TypeAdapter if value is nullStanisVS11/27/16, 11:24:08 PM"reproduced on 2.7 version

Here is some test.

``` java
 public static class A {
        @JsonAdapter(NullTolerantStringAdapter.class)
        String nonNullString = """";

        public static class NullTolerantStringAdapter extends TypeAdapter<String> {

            @Override
            public void write(JsonWriter out, String value) throws IOException {
                out.value(value);
            }

            @Override
            public String read(JsonReader in) throws IOException {
                String val = in.nextString();
                return val != null ? val : """";
            }
        }
    }

    @Test
    public void testNullDeserialization () {
        A a = new A();
        a.nonNullString = null;

        Gson gson = new GsonBuilder().create();
        String json = gson.toJson(a);
        A deserialized = gson.fromJson(json, A.class);

        assertThat(deserialized.nonNullString).isNotNull();

        Gson gsonWithNull = new GsonBuilder().serializeNulls().create();
        String jsonWithNull = gson.toJson(a);
        A deserializedWithNull = gsonWithNull.fromJson(jsonWithNull, A.class);

        assertThat(deserializedWithNull.nonNullString).isNotNull();
    }
```

First assert is passed (with no value for field custom read method is also not called but ok)

Second assert is not passed because custom read never called.

So I can't see how to guarantee non nullability for field without custom TypeAdapter for the whole class. ""This is the default behavior of Gson. Null values don't invoke type adapters. =||= > This is the default behavior of Gson. Null values don't invoke type adapters.

Seriously? Null values do not invoke type adapters. Null values do not invoke custom deserializers... Does it mean it's impossible to override null deserialization in Gson? 

Sucks if it's true. =||= If this is the default behavior, then is there a way to override it? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
953How can I open .json file and add JsonObject to exists JSONArray?akhorevich01/02/17, 08:29:11 PMPlease help me! I tryed to create new .json file and append to JsonArray new JsonObject? Thank you!Please ask usage questions on StackOverflow with the 'gson' tag. This tracker is for bugs and feature requests only. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
954Allow existing type field name if it serializes to the same valueStefan Kerstenkaoskorobase11/16/17, 09:18:13 PM"Instead of failing in `RuntimeTypeAdapterFactory` when there is an existing `type` field name, only fail if its value differs from the computed value. This allows to store the type name in the serialized object's type field.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= Signed.
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= Assigned to @swankjesse, the author of this feature. =||= I need the `type` field to be included in deserialization; AFAIU `transient` excludes the field from both serialization and deserialization, doesn't it?

What makes you think it's not a good idea? I've just noticed that an additional check is required before calling `getAsString()`, I can adapt the PR if needed.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
955Update gson version to 2.8 in Maven exampleGregmelquiadess11/08/16, 04:16:33 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= "Update gson version to 2.8 in Maven exampleGregmelquiadess11/08/16, 04:16:33 PMNaNNaNGreg Koblanski (melquiades)11/08/16, 04:13:31 PMUpdate gson version used in the Maven example1
958Design Document links to old site, which links back to GithubChristen Gottschlichgatchi11/15/16, 05:21:30 AM"The link to the Design Document on the User Guide on github links to an old site for this project (https://sites.google.com/site/gson/gson-design-document), which links to the same github the User Guide is hosted on (https://github.com/google/gson/blob/master/GsonDesignDocument.md).  Might as well link directly instead using a beautiful, giant ""**THIS PAGE HAS BEEN MOVED TO GITHUB AT**:"" indirect redirect.""Thanks for the bug report.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
959null-valued properties are not serializedAndy Edwardsjedwards121111/16/16, 05:02:39 AM"```java
JsonObject obj = new JsonObject();
obj.add(""hello"", JsonNull.INSTANCE);
System.out.println(new Gson().toJson(obj));
```
Expected output: `{""hello"": null}`
Actual output: `{}`
GSON 2.8.0""By default, `null` fields are ignored.
See https://github.com/google/gson/blob/master/UserGuide.md#TOC-Null-Object-Support
 =||= Oh, okay, thanks for the link.  Is this the default for any other JSON libraries?  I know it's not the default for `JSON.stringify` in JS.
 =||= It's the default for all of the big ones for Java for surem

On Wed, Nov 16, 2016, 8:14 AM Andy Edwards notifications@github.com wrote:

> Oh, okay, thanks for letting me know. Is this the default for any other
> JSON libraries? I know it's not the default for JSON.stringify in JS.
> 
> —
> You are receiving this because you modified the open/close state.
> 
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/959#issuecomment-260989341, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEQwyE54TTfC8_mvyVAODvEbGPtoCks5q-yuegaJpZM4KzVZH
> .
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
960Escaping throws exception when escaping a non special characterGyula Lakatoslaxika11/18/16, 02:09:23 PM"Escaping throws a MalformedJsonException when trying to escape a character that's not special and doesn't require escaping.

Example:
`
{
  ""property"": ""123456\!@""
}
`

As far as I know the [RFC ](https://tools.ietf.org/html/rfc7159#section-7)says that:

> ""Any character may be escaped.""

It's broke first in 2.7 in the https://github.com/google/gson/commit/3f8726ecafe9c40498255eed1d1893fd665e237b commit.

This is a problem for us because we have a huge amount of json files to read and can't replace the occurrence of this ambiguous escaping because it happens a LOT of times.""When the spec says “any character may be escaped” it means that any character may be replaced with a `\u0000` escape. It doesn’t mean that any character can be preceded by a `\`. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
961Stackoverflow Exceptionly_onepinkApple11/22/16, 05:06:22 AM"this is my code:
```    
public <T> T strToObj(String jsonText, Class<T> clazz) {

try {
             ...
              ...
               ...
            return gson.fromJson(otherText, clazz);
        } catch (Exception e) {
            return null;
        }
    }
```

and I get this error:
    `



`
            



""Please provide a failing test case or full sample that demonstrates the
problem.

On Fri, Nov 18, 2016, 10:18 PM 刘尧 notifications@github.com wrote:

> this is my code:
> public <T> T strToObj(String jsonText, Class<T> clazz) { try { ... ... ...
> return gson.fromJson(otherText, clazz); } catch (Exception e) { return
> null; } }
> 
> and I get this error:
> `
> 
> `
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> https://github.com/google/gson/issues/961, or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAEEEWSaumYPYe2SMl6rARiLg5oe8r84ks5q_mpngaJpZM4K3JUG
> .
 =||= @JakeWharton 
maybe I find out what cause the problem : too many threads all start!
the more threads , the slower the gson be.
because I have many requests when app start -- > sync data from server;
 requests callback commonly in main thread, and i should to use gson to deal with it.
so my app stuck, and the logcat like this:

```
7:01:01.640 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 31.135ms
11-19 17:01:01.680 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 196373(4MB) AllocSpace objects, 63(1512KB) LOS objects, 11% free, 50MB/56MB, paused 28.821ms total 266.507ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:02.540 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 99.532ms
11-19 17:01:02.610 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 175180(4MB) AllocSpace objects, 57(1368KB) LOS objects, 9% free, 51MB/56MB, paused 22.182ms total 246.153ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:02.610 3880-3900/com.angding.smartnote I/art: WaitForGcToComplete blocked for 130.090ms for cause HeapTrim
11-19 17:01:03.450 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 7.613ms
11-19 17:01:03.490 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 169932(4MB) AllocSpace objects, 54(1296KB) LOS objects, 8% free, 52MB/56MB, paused 27.245ms total 209.410ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:03.500 3880-3901/com.angding.smartnote W/art: Suspending all threads took: 6.016ms
11-19 17:01:03.950 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 5.420ms
11-19 17:01:04.210 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 94.489ms
11-19 17:01:04.260 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 135096(3MB) AllocSpace objects, 47(1128KB) LOS objects, 7% free, 52MB/56MB, paused 23.050ms total 191.522ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:04.990 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 130048(3MB) AllocSpace objects, 38(912KB) LOS objects, 5% free, 53MB/56MB, paused 26.509ms total 206.805ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:06.200 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 752.960ms
11-19 17:01:06.270 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 25.067ms
11-19 17:01:06.320 3880-3901/com.angding.smartnote I/art: Background partial concurrent mark sweep GC freed 135880(3MB) AllocSpace objects, 38(912KB) LOS objects, 23% free, 53MB/69MB, paused 22.769ms total 926.133ms at GCDaemon thread CareAboutPauseTimes 1
11-19 17:01:06.410 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 6.861ms
11-19 17:01:06.640 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 6.576ms
11-19 17:01:07.970 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 5.436ms
11-19 17:01:08.500 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 29.346ms
11-19 17:01:08.550 3880-3901/com.angding.smartnote I/art: Background sticky concurrent mark sweep GC freed 460108(11MB) AllocSpace objects, 142(3MB) LOS objects, 12% free, 55MB/63MB, paused 28.407ms total 257.707ms at GCDaemon thread CareAboutPauseTimes 1
c11-19 17:01:09.580 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 109.908ms
11-19 17:01:09.660 3880-3895/com.angding.smartnote W/art: Suspending all threads took: 22.475ms
```

but using gson 1.7 do not have this problem.
what's diff to use 2.8?
 =||= something new I found , the circular reference causes this problem,
it happened in this situation:
      tag
---------- tag
     tag
---------tag   tag  tag

  so , one partner made this fool design,   tag --> filed , List\<tag\>
it finally crashed with StackOverflowError~

and this not happened in version 1.7, when updated to 2.8, this problem occurred. 

this issue resolved -- closed it. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
962Add a convenience builder method to register a collection of TypeAdapterFactoriesZac SweersZacSweers03/28/20, 12:35:11 AM"To use us as an example: We have cases where we hand down a set of factories (via Dagger 2's multibindings) downstream, so this is a nice convenience.

Note that I didn't see where the appropriate place to add tests for this were, as `GsonBuilderTest` seems more focused on its construction semantics rather than verifying that its builder methods behave correctly. Let me know if there's a place where I should add any.""I don't find it much useful. Build a stronger case please. =||= It's a convenience method on a builder. While it might not be personally useful to you, it would be useful to others, and comes at no real cost. Dagger multibindings seem like a fair enough example, it comes in handy if you have multiple modules supplying their own factories into a multibinding.

What usefulness bar do you think it needs to meet your requirements? =||= The cost is bloating of GsonBuilder API, we don't add methods just because it is a minor convenience to some.
Dagger multibinding seems interesting but I have never used something like that (I haven't used Dagger). May be @JakeWharton or @swankjesse can opine?  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
963#957 Added maven-bundle-plugin and changed packaging to 'bundle'.Rakesh.Aiamrakesh09/20/17, 01:22:43 AMFix for #957 "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit https://cla.developers.google.com/ to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---
- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla -->
 =||= I signed it
 =||= CLAs look good, thanks!

<!-- ok -->
 =||= When we did this in OkHttp it broke our users.
https://github.com/square/okhttp/issues/2243 =||= @swankjesse - Issue you mentioned (ClassNotFoundException for OkHostnameVerifier) is due to usage of class from 'okhttp3.internal.tls' package, which seems internal and was not supposed to be directly used (if I've to go by package name); Same case with gson as well, 'internal' package is not supposed to be directly used, it is not exported by default, and is not available in an OSGI environment. =||= It seems [this](https://github.com/google/gson/commit/08c7bffba0e93611162cadfaf2ee03e3d143e7d1#diff-b870e20e5600e8e051854b3fa6a8a1b5) check-in tries to solve this in a different way.

Though I have one observation on the generated MANIFEST.MF -
'Import-Package' manifest entry with value 'com.google.gson.annotations' is not correct. =||= Hi All,

changing the packaging to bundle may have other side effects on the .class packaged inside the final jar.

I instead suggest that the maven-bundle-plugin is used in it form that does not change the ""packaging"" like it is described [here](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#adding-osgi-metadata-to-existing-projects-without-changing-the-packaging-type). In synthesis, it is required the manifest goal bound to the process-classes phase, and configure the maven-jar-plugin to package the processed manifest:

```
<plugin>
  <artifactId>maven-jar-plugin</artifactId>
  <configuration>
    <archive>  
      <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
    </archive> 
  </configuration>
</plugin>  
<plugin>   
  <groupId>org.apache.felix</groupId>
  <artifactId>maven-bundle-plugin</artifactId>
  <executions>
    <execution>
      <id>bundle-manifest</id>
      <phase>process-classes</phase>
      <goals>    
        <goal>manifest</goal>
      </goals>
    </execution>
  </executions>
</plugin>
```

 =||= Another note:
I suggest to use a more recent version of the, [maven-bundle-plugin](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.felix%22%20AND%20a%3A%22maven-bundle-plugin%22) 

last release is the one month old 3.3.0.
 =||= > changing the packaging to bundle may have other side effects on the .class packaged inside the final jar.

Could you please elaborate or provide a link that I can refer ? =||= Finally, 
the <Export-Package> should be specified explicitly so to export also packages `com.google.gson.internal` and `com.google.gson.internal.bind`, which are excluded by the [maven-bundle-plugin defaults](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#default-behavior)

GSON 2.5 was exporting these packages:
![image](https://cloud.githubusercontent.com/assets/2135798/25282654/6f3f8fec-26b1-11e7-97a4-355466a6b62f.png)
(and I used these packages to develop a TypeAdapter that supports polymorphism)

In GSON 2.6 and 2.7 these <Export-Package> are disappeared:
![image](https://cloud.githubusercontent.com/assets/2135798/25282623/55a171b8-26b1-11e7-9e61-5e5526d77ab8.png)
(and my TypeAdapter does not work anymore)
 =||= Hi @iamrakesh 

> Could you please elaborate or provide a link that I can refer ?

check the [instructions of Export-Package](http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#instructions):

> _...These packages are copied into the resulting bundle JAR file from the available classes (i.e., project classes, dependencies, and class path); thus, it is possible to include classes into your bundle that are not associated with source files in your project..._

This, as far as I remember, only happens if you change the packaging type to bundle, and it could potentially change the contents of the final Jar as it is different from what it happen using the jar packaging.

With the plugin defaults this side effect of  **including classes from dependencies** won't happen, but for this reason, when I develop general purpose libraries used also outside of OSGi context, I always prefer to keep the packaging of type ""jar"" and add OSGi headers with the configuration described in the previous message.  =||= Excluding internal is intended. You shouldn't have used those types since
they're clearly marked internal.

On Fri, Apr 21, 2017, 9:56 AM Cristiano <notifications@github.com> wrote:

> Hi @iamrakesh <https://github.com/iamrakesh>
>
> Could you please elaborate or provide a link that I can refer ?
>
> check the instructions of Export-Package
> <http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html#instructions>
> :
>
> *...These packages are copied into the resulting bundle JAR file from the
> available classes (i.e., project classes, dependencies, and class path);
> thus, it is possible to include classes into your bundle that are not
> associated with source files in your project...*
>
> with the plugin defaults this *inclusion of classes from dependencies*
> won't happen, but for this reason, when developing general purpose
> libraries used also outside of OSGi context, I always prefer to keep the
> packaging of type ""jar"" and include OSGi headers as described in the
> previous message.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/963#issuecomment-296214126>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEXMEVpuQUrLyvlLS8q17Xt1B08Qnks5ryMOugaJpZM4K3iZ9>
> .
>
 =||= I don't think using the bundle packaging will cause issues in this case, especially if you use the plugin's default settings (which work for most cases).  Also, the plugin will *not* (by default) export any packages with ""impl"" or ""internal"" in them.  This is by design as these are typically classes not meant for folks to use outside the bundle.  
 =||= > Excluding internal is intended. You shouldn't have used those types since
they're clearly marked internal.

There is difference between ""I shouldn't use"" and ""I can't use"": for an open source project, an internal package is discouraged to be used. For an OSGi project it is different prohibited.
As a result, my library works with GSON 2.6 and 2.7 everywhere except inside OSGi...

GSON is not designed as bundle and it won't be maintained as such. Also, in the recent history of GSON, OSGi headers have been removed and re-added many times, probably by people unaware of OSGi technology. 

I think a less intrusive approach (packaging of type **jar** AND exporting all packages including **com.google.gson.internal** and  **com.google.gson.internal.bind**) would have avoided these problems and made GSON more stable for OSGi users.
 =||= It's easy to export the other packages, but the packaging type really doesn't make a difference (in this case).  If folks are terribly paranoid about the maven-bundle-plugin including extra classes in the jar file, then switch the packaging type to ""jar"" and let's move on.  If the GSON folks want to export the ""internal"" packages, that's pretty easy too.  Just add the following instruction line to the plugin:
```xml
<Export-Package>{local-packages},com.google.gson.internal.*</Export-Package>
```

All we're really interested in is a proper MANIFEST.MF file with the appropriate exports/imports.  @iamrakesh do you want to modify your PR with these settings so we can get this thing moving forward?    =||= By choosing to use OSGi you are at the mercy of the project owners creating
the bundle, and since it's us and since the internal package isn't for
public use, marking it as not exposed seems like a good thing.

On Fri, Apr 21, 2017, 12:16 PM James Carman <notifications@github.com>
wrote:

> It's easy to export the other packages, but the packaging type really
> doesn't make a difference
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/963#issuecomment-296250571>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZvKURN8q67Jnhb5vF6lT72zChJWks5ryORPgaJpZM4K3iZ9>
> .
>
 =||= @JakeWharton totally agree with you.  I'd rather not expose the ""internal"" stuff.  With OSGi, you have the opportunity to make sure folks don't use the classes they're not supposed to be using.  If it were me, I'd take advantage of that fine-grained control that OSGi provides you. =||= @JakeWharton since you and @swankjesse are the two GSON contributors who have commented on this issue, how do you guys propose we move forward?  Would you like to see this PR changed?  Would you like us to provide an alternative approach?  Our team loves GSON and we're an OSGi shop, so we've been stuck with 2.6.2 for a while now.  This prevents us from upgrading to security patches if they come out, so we would really like to see OSGi support come back.   =||= I would love to get it fixed for 2.8 so that it just works for OSGi users
and we don't have to think about it. None of us are experts here, we just
know what our intent is. So if this affords you a working library in OSGi
and it represents our intent with 'internal' than I'm very supportive.

On Fri, Apr 21, 2017, 1:58 PM James Carman <notifications@github.com> wrote:

> @JakeWharton <https://github.com/JakeWharton> since you and @swankjesse
> <https://github.com/swankjesse> are the two GSON contributors who have
> commented on this issue, how do you guys propose we move forward? Would you
> like to see this PR changed? Would you like us to provide an alternative
> approach? Our team loves GSON and we're an OSGi shop, so we've been stuck
> with 2.6.2 for a while now. This prevents us from upgrading to security
> patches if they come out, so we would really like to see OSGi support come
> back.
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/963#issuecomment-296277577>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEET2V5ynpcSRglYUcVWck6hfBoIGjks5ryPxsgaJpZM4K3iZ9>
> .
>
 =||= I too agree that 'internal' package not exported, this also gives flexibility for authors to change implementation when required even if it is kind of API break (in classes/methods of 'internal' package).

> @iamrakesh do you want to modify your PR with these settings so we can get this thing moving forward?

Latest master already has fix, which uses 'maven-jar-plugin', see [this commit](https://github.com/google/gson/commit/08c7bffba0e93611162cadfaf2ee03e3d143e7d1#diff-b870e20e5600e8e051854b3fa6a8a1b5)
'mave-jar-plugin' solution does the required job, any one is fine as long as it works.
 =||= Since this hasn't been resolved so far, I am just going to close this for now. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
964Allow deserialization of a Number represented as a StringEgor Neliubaegor-n11/26/16, 07:40:14 AM"This works:
```
gson.fromJson(""\""15\"""", int.class)
```

This doesn't:
```
gson.fromJson(""\""15\"""", Number.class)
```

This PR makes it so the second case works too."👍  =||= Allow deserialization of a Number represented as a StringEgor Neliubaegor-n11/26/16, 07:40:14 AM"This works:
```
gson.fromJson(""\""15\"""", int.class)
```

This doesn't:
```
gson.fromJson(""\""15\"""", Number.class)
```

This PR makes it so the second case works too."NaNEgor Neliuba11/24/16, 02:36:44 PMAllow deserialization of a Number represented as a String1
965Expected BEGIN_OBJECT but was STRINGDennis Leelby199211/26/16, 01:05:08 PM"I'm using Gson lib to deserialize the json stirng into Java object, but there is a error occurs.<br>
below is the json string:
<pre>
<code>
{
    ""pageInfo"": [
      {
        ""detail"": ""{\""key1\"":\""value1\"",\""key2\"":\""value2\""}"",
        ""id"": 4,
        ""type"": 0
      }]
}
</code>
</pre>
and the java class:
<pre>
<code>
public java.util.List<CreditDetailItem> pageInfo;
class CreditDetailItem {
    public String id;
    public int type;
    public String detail;
}
</code>
</pre>
And then an exception thrown: ‘Expected BEGIN_OBJECT but was STRING’ on the 'detail' property.
<p>
Is there any one can help me?"Sorry, I didn't build the project after, it runs fine when I rebuild the project. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
966Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $LucianWang11/27/16, 06:49:30 PM"com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
	at com.google.gson.Gson.fromJson(Gson.java:826)
	at com.google.gson.Gson.fromJson(Gson.java:779)
	at com.google.gson.Gson.fromJson(Gson.java:728)
	at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)
	at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)
	at android.os.Handler.handleCallback(Handler.java:733)
	at android.os.Handler.dispatchMessage(Handler.java:95)
	at android.os.Looper.loop(Looper.java:136)
	at android.app.ActivityThread.main(ActivityThread.java:5013)
	at java.lang.reflect.Method.invokeNative(Native Method)
	at java.lang.reflect.Method.invoke(Method.java:515)
	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)
Caused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
	at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)
	at com.google.gson.Gson.fromJson(Gson.java:814)
	... 12 more
java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
	at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)
	at com.google.gson.Gson.fromJson(Gson.java:814)
	at com.google.gson.Gson.fromJson(Gson.java:779)
	at com.google.gson.Gson.fromJson(Gson.java:728)
	at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)
	at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)
	at android.os.Handler.handleCallback(Handler.java:733)
	at android.os.Handler.dispatchMessage(Handler.java:95)
	at android.os.Looper.loop(Looper.java:136)
	at android.app.ActivityThread.main(ActivityThread.java:5013)
	at java.lang.reflect.Method.invokeNative(Native Method)
	at java.lang.reflect.Method.invoke(Method.java:515)
	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)


Often this kind of problem, I hope you can tell me how to deal with the simple. Or where it is. I don't think it's our problem.""The exception indicates the problem. The type you asked Gson to deserialize
was a list or array but the JSON contained a string or wasn't JSON at all
(and thus appeared like a string).

On Sun, Nov 27, 2016, 3:04 AM LucianWang <notifications@github.com> wrote:

> com.google.gson.JsonSyntaxException: java.lang.IllegalStateException:
> Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
> at com.google.gson.Gson.fromJson(Gson.java:826)
> at com.google.gson.Gson.fromJson(Gson.java:779)
> at com.google.gson.Gson.fromJson(Gson.java:728)
> at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)
> at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)
> at android.os.Handler.handleCallback(Handler.java:733)
> at android.os.Handler.dispatchMessage(Handler.java:95)
> at android.os.Looper.loop(Looper.java:136)
> at android.app.ActivityThread.main(ActivityThread.java:5013)
> at java.lang.reflect.Method.invokeNative(Native Method)
> at java.lang.reflect.Method.invoke(Method.java:515)
> at
> com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)
> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)
> Caused by: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was
> STRING at line 1 column 1 path $
> at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)
> at
> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)
> at
> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)
> at com.google.gson.Gson.fromJson(Gson.java:814)
> ... 12 more
> java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at
> line 1 column 1 path $
> at com.google.gson.stream.JsonReader.beginArray(JsonReader.java:350)
> at
> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:79)
> at
> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:60)
> at com.google.gson.Gson.fromJson(Gson.java:814)
> at com.google.gson.Gson.fromJson(Gson.java:779)
> at com.google.gson.Gson.fromJson(Gson.java:728)
> at readtv.ghs.tv.util.RewardRuleUtil$1.onSuccess(RewardRuleUtil.java:63)
> at readtv.ghs.tv.http.AsyncHttpClient$2$2.run(AsyncHttpClient.java:116)
> at android.os.Handler.handleCallback(Handler.java:733)
> at android.os.Handler.dispatchMessage(Handler.java:95)
> at android.os.Looper.loop(Looper.java:136)
> at android.app.ActivityThread.main(ActivityThread.java:5013)
> at java.lang.reflect.Method.invokeNative(Native Method)
> at java.lang.reflect.Method.invoke(Method.java:515)
> at
> com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:811)
> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:627)
>
> Often this kind of problem, I hope you can tell me how to deal with the
> simple. Or where it is. I don't think it's our problem.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/966>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZ7Q9ENsJiHfxUpQMEVlZRWlsbk6ks5rCTmhgaJpZM4K9FyN>
> .
>
 =||= Thank you. =||= Hi I have the same problem and this happened all of a sudden previously it was working fine,i'm having a real hard time analyzing what has changed that led to this problem,can someone please have a look at this and help me out,

if the formatting here is not clear, i have posted in stackoverflow
https://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line

 I have this Json Response coming from server:


`[{
		""disposal_type_category"": {
			""category_entry_total"": ""21""
		},
		""disposal_types"": [{
				""ID"": ""78"",
				""entries"": [{
						""ID"": 2584,
						""entry_tally"": ""1""
					},
					{
						""ID"": 2578,
						""entry_tally"": ""1""
					}
				]
			},
			{
				""ID"": ""1323"",
				""entries"": [{
						""ID"": 2583,
						""entry_tally"": ""1""
					},
					{
						""ID"": 2579,
						""entry_tally"": ""1""
					}
				]
			}
		]
	},
	{
		""disposal_type_category"": {
			""category_entry_total"": ""25.2""
		},
		""disposal_types"": [{
				""ID"": ""80"",
				""entries"": []
			},
			{
				""ID"": ""84"",
				""entries"": []
			}
		]
	}
]
`

This is in my ApiClient.java:

`public static Retrofit getClient() {
        if (retrofit==null) {
            Gson gson = new GsonBuilder().setLenient().create();
            retrofit = new Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .addConverterFactory(ScalarsConverterFactory.create())
                    .addConverterFactory(GsonConverterFactory.create(gson))
                    .build();
        }
        return retrofit;
    }`

This is in ApiInterface.java:

`Call<List<Disposal>> getCollection(@Header(""Authorization"") String token);`

Disposal.java:

`public class Disposal {
    @SerializedName(""disposal_type_category"")
    @Expose
    public DisposalTypeCategory disposalTypeCategory;
    @SerializedName(""disposal_types"")
    @Expose
    public List<DisposalType> disposalTypes = null;
}
`

DisposalTypeCategory.java:

`public class DisposalTypeCategory {
@SerializedName(""category_entry_total"")
    @Expose
    public String categoryEntryTotal;
}`

DisposalType.java:

`public class DisposalType {
@SerializedName(""ID"")
    @Expose
    public String iD;
@SerializedName(""entries"")
    @Expose
    public List<Entries> entries = null;
}`

Entries.java:

`
public class Entries {
@SerializedName(""ID"")
    @Expose
    private int iD;
}`

I have set setLineant(true) for Gson because if i remove it i will get malformed json exception, even this issue started recently previously was fine, not sure if its related.
The issue started after 2-3 new fields were added to API and the base url was changed but still the core remains same.


 =||= how do you solve this problem =||= @kalyakiplangat for me checking everything again with the backend developer and seeing if any API response is returning something not as expected by the app. There were changes made in return format of the API response by backend Dev which I wasn't aware of..so I was expecting string in app but API was sending array =||= I have not declared JSON or Gson anywhere , but why I'm getting error =||= @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked =||= Cleaning the project worked for me =||= Cleaning the project worked for me as well =||= Clean the Project 
 =||= java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $


I got a similar error message but cleaning the app did the trick for me  =||= it worked for me too.. =||= cleaning and rebuilding the project helped me to solve this problem... =||= for me too.  =||= for me too =||= For me the problem was this one -> java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 12 column 11 path $.items[0].id

Changing  `@SerializedName(""id"")  val id: Id `
to  ` @SerializedName(""id"")  val id: String `
worked.
 =||= If someone is getting this error in AndroidStudio :
Try two things:
1. Roll back to last working conditions. (Revert if you use VCS).
2. In build options Clean project and rebuild. (Worked for me.)

I'm fairly new to android. Excuse any mistakes if committed.
Suggestions are welcome :) =||= Please go to Build, then clean. This option worked for me. =||= > Please go to Build, then clean. This option worked for me.

Happy learning :) =||= After cleaning project and rebuilding, still I'm having issue with the same error. Don' t know how to resolve as i already checked all parameter naming conventions not once but thrice. =||= Thanks bro, cleaning project worked for me  =||= > @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked

whoa it worked thanks for sharing. =||= Rebuilding the project will fix the issue. =||= cleaning and rebuilding did the trick =||= thanks alot cleaning the project is remedy for the error =||= i got this: 
Expected BEGIN_OBJECT but was STRING at line 1 column 2

i solve by:
you need an object ""Class"", but you got List<""Class""> 
so your API need to return response using $data: Class::find()->first();
dont use get() or all(); =||= I got this problem when making some changes to square calendar widget.
But thankfully, I solved it by **cleaning and rebuilding** the project! 
I hate these errors that come out of blue without reason ;/
 =||= cleaning project and rebuilding worked for me as well =||= Cleaning the project worked for me
 =||= gradlew clean worked for me. =||= * What went wrong:
Execution failed for task ':app:mergeDexDebug'.
> java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $


plz suggest the solution of the error =||= Here are two answer on stack overflow for the same type of issue. Plz,  have a look once.

https://stackoverflow.com/questions/28418662/expected-begin-object-but-was-string-at-line-1-column-1

https://stackoverflow.com/questions/31424372/json-error-java-lang-illegalstateexception-expected-begin-object-but-was-strin/31425418 =||= clean project and rebuild project doesn't work for my issue
https://stackoverflow.com/questions/60568620/retrofit2-get-method-failure-response =||= It's weird but I am still getting this error even did everything listed on the web. What my case is I am trying to update the app over the existing one. They both separately working well without error but when I try to update latest version over the previous one I am receiving the following exception;

`java.lang.IllegalStateException: Expected an int but was BEGIN_ARRAY at line 1 column 99 path $[0].e`

There is no error in the retrieved Json file. The funny thing is when I revert my code all working well. And in that code I am using sorting like comparable and comparator over serialized class. =||= Cleaning and rebuiding the project didnt work for me! iam getting the same exception again and again
 =||= ### First :- clean and rebuild 
**if it not worked then** 
### Second:- Just delete previous release apk folder
 =||= Cleaning the app did it for me =||= Thanks

On Wed, 24 Jun 2020, 8:21 pm Adebisi Adetoba, <notifications@github.com>
wrote:

> Cleaning the app did it for me
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/966#issuecomment-648869280>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AGK3TMPFS464OKZPIQBNTILRYIHF7ANCNFSM4CXULSGQ>
> .
>
 =||= > @uniquelipu try to clean the project, you can go `build >> clean project`, for me, it worked

i am not getting option of clean project in build dropdown? How to enable it =||= > ### First :- clean and rebuild
> **if it not worked then**
> 
> ### Second:- Just delete previous release apk folder

i am not getting option of clean project in build dropdown? How to enable it =||= > ### First :- clean and rebuild
> **if it not worked then**
> 
> ### Second:- Just delete previous release apk folder
i am not getting option of clean project in build dropdown? How to enable it =||= > java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
> 
> I got a similar error message but cleaning the app did the trick for me

how to clean the app? =||= Updating the version of Gradle I target fixed this for me when clean/rebuild would not when receiving this as a project build error in Android Studio. =||= Clear the project and rebuild
![tmp-cam-7806164340706841378](https://user-images.githubusercontent.com/75389770/109183777-98f22700-778e-11eb-89fb-5273dd230cd5.jpg)
 =||= not resolve issue after cleaning project =||= still getting Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $

 =||= Google should deprecate or abandon this gson structure. It is a time stealer. Developers waste alot of precious time on this bug or error or design flaw. My opinion. We should work best with json. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
970Reflection access to field in custom TypeAdaptersFabian Zeindlfab1an12/30/17, 07:11:03 AMIn custom adapters: Is it possible to get access to the `Field` being reflectively set, so that one can add it to logging, or change serialization based on reflective properties?Any ideas for this? =||= this would be a great idea =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
973"hope show error field not ""Expected an int but was BEGIN_OBJECT at line 1 column 1151"""zhanglsihrthk12/07/16, 02:36:17 PMNaNUse the latest version and the JSON path to the offending field will be included in the message.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
974[Crash] IncompatibleClassChangeError: Couldn't find com.google.b.a.c.aFelipe S. Pereirafeludens01/02/17, 08:28:25 PM"My application got some crashes because of this. 
Similarly to other IncompatibleClassChangeError, it only happens to Samsung devices (Os 5 and 6).

Does anybody know what causes this and how it should be fixed?

Here's the stack trace:

```
Fatal Exception: java.lang.IncompatibleClassChangeError: Couldn't find com.google.b.a.c.a
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:659)
       at libcore.reflect.AnnotationAccess.toAnnotationInstance(AnnotationAccess.java:641)
       at libcore.reflect.AnnotationAccess.getDeclaredAnnotation(AnnotationAccess.java:170)
       at java.lang.reflect.Field.getAnnotation(Field.java:242)
       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:72)
       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:159)
       at com.google.b.b.a.q.a(ReflectiveTypeAdapterFactory.java:100)
       at com.google.b.k.a(Gson.java:423)
       at com.google.b.k.a(Gson.java:886)
       at com.google.b.k.a(Gson.java:852)
       at com.google.b.k.a(Gson.java:801)
       at com.google.b.k.a(Gson.java:773)
       at com.mypackage.android.sdk.core.setup.ConfigurationAPI.loadApplicationConfiguration(ConfigurationAPI.java:62)
       at com.mypackage.android.sdk.core.setup.ConfigurationManager.loadApplicationConfiguration(ConfigurationManager.java:58)
       at com.mypackage.loader.ConfigurationLoadTask.executeTask(ConfigurationLoadTask.java:39)
       at com.mypackage.loader.ApplicationLoaderTask.run(ApplicationLoaderTask.java:28)
       at com.mypackage.loader.ApplicationLoader.setup(ApplicationLoader.java:42)
       at com.mypackage.loader.ApplicationLoaderService.onHandleIntent(ApplicationLoaderService.java:74)
       at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:65)
       at android.os.Handler.dispatchMessage(Handler.java:102)
       at android.os.Looper.loop(Looper.java:145)
       at android.os.HandlerThread.run(HandlerThread.java:61)
```

Thanks"This is likely due to ProGuard and your configuration of ProGuard in your build. It is not a problem with Gson itself and thus unsuited for this issue tracker which is only for Gson bugs and feature requests. Perhaps try StackOverflow? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
975@JsonAdapter's documentation does not mention support for JsonSerializer and JsonDeserializerKevin Mostkevinmost02/07/17, 03:43:24 PM"The documentation [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java#L79) and further down the page [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java#L94) only mentions that `TypeAdapter` and `TypeAdapterFactory` are supported at the moment. 

However, according to the [changelog](https://github.com/google/gson/blob/master/CHANGELOG.md#version-27), as of version 2.7, `JsonSerializer` and `JsonDeserializer` are also supported. 

I'm happy to submit a pull request and add this documentation if it's useful."Yes, please send a PR. Thanks. =||= @inder123 #976  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
976Update JsonAdapter documentationKevin Mostkevinmost12/12/16, 06:37:55 AMInclude mention of JsonDeserializer and JsonSerializer as valid JsonAdapter classes."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= 👍  =||= Thanks =||= "Update JsonAdapter documentationKevin Mostkevinmost12/12/16, 06:37:55 AMInclude mention of JsonDeserializer and JsonSerializer as valid JsonAdapter classes.NaNKevin Most12/12/16, 02:04:10 AM"Update JsonAdapter documentation

Include mention of JsonDeserializer and JsonSerializer."1
982Add missing comma in toString()Yutaro IinoytRino12/20/16, 03:21:11 PM"I noticed `Gson#toString()` prints  a bit unreadable string.
Though I don't know why `toString()` is printing such 3 fields only, this PR fixes missing comma only."NaNAdd missing comma in toString()Yutaro IinoytRino12/20/16, 03:21:11 PM"I noticed `Gson#toString()` prints  a bit unreadable string.
Though I don't know why `toString()` is printing such 3 fields only, this PR fixes missing comma only."NaNYutaro Iino12/20/16, 03:00:33 PMAdd missing comma in toString()1
984$Gson$Types.canonicalize包子君shuangqingfeng12/23/16, 08:06:52 AM" FATAL EXCEPTION: OkHttp Dispatcher
                                                                 Process: com.fengunion.scf, PID: 9971
                                                                 java.lang.StackOverflowError: stack size 1038KB
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:546)
                                                                     at com.google.gson.internal.$Gson$Types.canonicalize($Gson$Types.java:111)
                                                                     at com.google.gson.internal.$Gson$Types$WildcardTypeImpl.<init>($Gson$Types.java:553)
                                                                 	at com.google.gson.intern"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
985not initialize int fields with zeromegadminimahermeg1712/26/16, 05:29:11 PM"Hi,

I have an int field in my object but not defined into the json string.
when Gson create objects from the json, it initiate the int field by zero even it's initiated into the class definition [ int x= -1; ]
I need to initiate it with (-1).

any way to do that ? (without setting the field by a setter after parsing)

Thanks in advance,""Add a no-args constructor to the type.

On Mon, Dec 26, 2016, 12:24 PM megadmini <notifications@github.com> wrote:

> Hi,
>
> I have an int field in my object but not defined into the json string.
> when Gson create objects from the json, it initiate the int field by zero
> even it's initiated into the class definition [ int x= -1; ]
> I need to initiate it with (-1).
>
> any way to do that ? (without setting the field by a setter after parsing)
>
> Thanks in advance,
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/985>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEUHmVaCZnRCQrBVkww-5bk-uUJQsks5rL_gwgaJpZM4LV23p>
> .
>
 =||= thanks. it works. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
987Gson date format to parse/output unix-timestampsAnis LounisAnixPasBesoin03/15/17, 07:27:48 AM"
I am using Gson to serialize/deserialize my pojos and currently looking for a clean way to tell Gson to parse/output date attributes as unix-timestamps. Here's my attempt:

`    Gson gson = new GsonBuilder().setDateFormat(""U"").create();`

Comming from PHP where ""U"" is the dateformat used to parse/output date as unix-timestamps, when running my attempt code, I am getting this RuntimeException:

>     Unknown pattern character 'U'

I am assuming that Gson uses SimpleDateformat under the hood which doesn't define the letter ""U"".

I could write a DateTypeAdapter and pass it the GsonBuilder but I am looking for a cleaner way to achieve that. Simply changing the dateformat would be great.

I have asked this same question [here ](http://stackoverflow.com/questions/41348055/gson-date-format-to-parse-output-unix-timestamps)at stackoverflow. No answers so far."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
989enhance ObjectTypeBinder to works with number type 'int'BKBK-Choi12/29/17, 07:50:18 PM"- number double or integer #525
- integer values of array become a float values #559

### the reason I pr this:
- Spring's `@RequestBody` parses integer params to double values
- this behavior is not right when you parse HTTP request body parameters. 
  - Web App never knows whether the parameter type is wrong or not
  - `int` should be parsed `int`, not `double`
- [RFC-4627](http://www.ietf.org/rfc/rfc4627.txt) and [JSON](http://json.org) defines type `int`,
so I hope this PR does not violate any rules.

### related issues
- number double or integer #525
- integer values of array become a float values #559""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= CLA signed (individual) =||= CLAs look good, thanks!

<!-- ok --> =||= A few issues. Most importantly, check for integer overflow (NumberFormatException), and exponent notation (""e"" in addition to "".""). Maybe use Long instead of Integer?

Now, even Long and Double may overflow, in the latter case losing precision. Also, doubles typically lose precision when converting from decimal, even if not overflowing. I think the best option would be to return BigDecimal instead of Double, and BigInteger instead of Integer. Opinions? =||= When it will be merged to muster and released? =||= @jobh 
my opinion is,
- integer should be ok with common number use
- Long sounds good to me
- BigDecimal sounds not good
  - waste of memory and time for some people; performance issue
  - maybe what we need is an option for BigDecimal parsing.
- exponential expression
  - oh nice pointing out. thank you.

I can change the ""integer"" code to ""long"" one anytime,
however one GSON contributor said GSON is never going to support integer(or long).
(couldn't find the reference, short-term-memory :( )
So, the contributors' affirmitive opinion first, then I can use my time to fix codes. =||= I believe not only me wait for this fix... =||= @swankjesse  Looks like a reasonable change to me. I plan to merge it in the next few days unless I hear a concern from you. =||= Changing the type of a thing is extremely incompatible. If we merge this, nobody will be able to upgrade safely. =||= @swankjesse does it mean that in gson int will be never converted to correct type if it is not specified in end object directly? =||= > RFC-4627 and JSON defines type int,
so I hope this PR does not violate any rules.

Though the label `int` is used to describe the number type, an `int` is not a standalone value. That’s `number` and JSON doesn’t offer different types depending on whether a `.0` is in the encoded form.

```
 value = false / null / true / object / array / number / string 
```

Making `.0` significant would be not unlike making whitespace significant. =||= @swankjesse but with current implementation if we deserialize json and serialize it back we will get different jsons. I believe it is not an expected behavior. =||= This class looks like it was designed for the purpose - 

[com.google.gson.internal.LazilyParsedNumber](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java
)

- it is an abstract number (like JSON), not a specific type
- it roundtrips perfectly, since the string rep is stored
- converts to whatever is needed, even BigDecimal etc
 =||= @swankjesse 
In GSON world, you said that `0` and `0.0` are the same.
So no need to fix this.
please close this PR (or should I?)

@jobh
thank you! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
990Caused by: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT程序员徐公gdutxiaoxu01/02/17, 04:48:38 PM"


When I use Gson,I'm trying to parse a JSON string like this one

```
{""showapi_res_code"": 0,
  ""showapi_res_error"": ""1"",
  ""showapi_res_body"": {
    ""totalNum"": 44,
    ""ret_code"": 0
   }
 }
```

When I use this like below,it is ok

Bean bean = gson.fromJson(stringFromSource, 
				Bean.class);


```
public class Bean{
    int showapi_res_code;
    String showapi_res_error;
    Body showapi_res_body;
    
    public static class Body{
        int totalNum;
        int ret_code;
    }
}
```


But when I use this like follow

	Bean1 bean1 = gson.fromJson(stringFromSource, Bean1.class);

```
public class Bean1 {
	int showapi_res_code;
    String showapi_res_error;
    String showapi_res_body;
    
   
}
```


It is error

> Caused by: java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 3 column 24 path $.showapi_res_body

What should I to to suppport this style for Gson? Tanke you very mush.
""Why are you trying to use the second version? `showapi_res_body` is clearly not a string in the response, it's an object with two key/value pairs?

Please ask usage questions on StackOverflow using the 'gson' tag. This issue tracker is for bugs and feature requests only. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
991serialize UsbDeviceMohammadmneckoee01/02/17, 08:26:25 PMI can serialize UsbDevice with Gson  (too slowly) but cannot deserialize it !"`UsbDevice` is a platform type from Android. There's no guarantee that its fields can be serialized or that it can be deserialized. You should not try to serialize it directly, but instead use an alternate representation that you control.

Unfortunately it's far too late to prevent serializing `java.*` and `android.*` types with Gson, but ideally that's what you should be doing. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
994#957 OSGi headers from the bnd.bnd will be included in the jarMartin Lindspegelref01/11/17, 06:38:34 PMThis would ensure that the headers created by the bnd maven plugin where included in the jar (as per the documentation found here https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin#important-note).👍  Thanks =||= #957 OSGi headers from the bnd.bnd will be included in the jarMartin Lindspegelref01/11/17, 06:38:34 PMThis would ensure that the headers created by the bnd maven plugin where included in the jar (as per the documentation found here https://github.com/bndtools/bnd/tree/master/maven/bnd-maven-plugin#important-note).NaNMartin Lind01/11/17, 04:32:23 PMFix for #9571
995Gson Design QuestionMichael Kingrgkjhshi01/12/17, 07:17:38 AMWhy there is no  a `@Ignore` annotation that indicates a member should not be serialization or deserialization?The `transient` keyword in Java can be used for that. =||= I know `transient` is useful. But how can I do if I want to deserialize a member from a json and not to serialize the member to a json  just like `@Expose`? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
998I user gson to generate json data，there are some prolem李涛江ltaoj01/18/17, 10:07:19 PM"java.lang.ClassNotFoundException: com.google.gson.Gson
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1332)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1166)
	at com.ltj.transmission.UsersServlet.doPost(UsersServlet.java:63)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:670)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2508)
	at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2497)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Unknown Source)""Are you using a tool like Proguard? Something's removing your Gson class.
GitHub issues are better with a reproducible test case for a bug report.
For usage questions and errors, use StackOverflow with the Gson tag. More people can help there. =||= Thank you for your advice.I have solved my problem.I placed the .jar at a wrong place. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
999Fixed typotwlkyaotwlkyao01/22/17, 05:05:56 PMFixed typo"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "Fixed typotwlkyaotwlkyao01/22/17, 05:05:56 PMFixed typoNaNShiyao Qi01/22/17, 10:00:33 AM"Fixed typo

Fixed typo"1
1000JsonElement casting methods don't all tell the user what actual type is when cast failsKevin Mostkevinmost02/08/17, 12:17:40 AM"`JsonElement.getAsJsonObject()` [shows the user the JSON in the exception when it fails to cast](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86). The other 3 `getAsJson___` methods do not. It would be nice if this style of exception message was adopted for the other 3 as well.

I can send a PR if this is a desired change."A PR would be great. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1004It's only a testing!dhdhjmjava01/26/17, 02:42:32 AMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1010Support to omit deserializing empty String just like null valueUsherBabyUsherBaby02/07/17, 06:02:49 AMGsonBuild can config to omit empty String just like null valueYou can write your own TypeAdapter for String which behaves this way and add it to your Gson instances. Adding this to Gson is unreasonable since those two values are not equivalent and you're much better off correcting whomever is posting such JSON. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1012All JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's messageJoão Vitor Verona BiazibettiJoaaoVerona02/08/17, 12:17:29 AMAs noted in https://github.com/google/gson/issues/1000, this change aims to symmetrize the message of thrown exceptions on methods [getAsJsonObject](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86), [getAsJsonArray](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L102), [getAsJsonPrimitive](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L118), [getAsJsonNull](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L135), by appending the JSON information ([toString](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L319)) to the messages.NaNAll JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's messageJoão Vitor Verona BiazibettiJoaaoVerona02/08/17, 12:17:29 AMAs noted in https://github.com/google/gson/issues/1000, this change aims to symmetrize the message of thrown exceptions on methods [getAsJsonObject](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L86), [getAsJsonArray](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L102), [getAsJsonPrimitive](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L118), [getAsJsonNull](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L135), by appending the JSON information ([toString](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/JsonElement.java#L319)) to the messages.NaNBloodShura02/08/17, 12:04:22 AMAll JsonElement::getAsJsonXXX methods now include the JSON string on thrown exception's message1
1013Bug when skipping a value while using the JsonTreeReaderAndré Rouélarouel02/18/17, 04:52:44 PM"When using a `JsonReader` to read a JSON object, `skipValue()` skips the structure successfully.
```Java
@Test
public void testSkipValue_JsonReader() throws IOException {
  try (JsonReader in = new JsonReader(new StringReader(""{}""))) {
    in.skipValue();
  }
}
```
But when using a `JsonTreeReader` to read a JSON object, `skipValue()` throws a `ArrayIndexOutOfBoundsException`.
```Java
@Test
public void testSkipValue_JsonTreeReader() throws IOException {
  try (JsonTreeReader in = new JsonTreeReader(new JsonObject())) {
    in.skipValue();
  }
}
```
Stacktrace
```
java.lang.ArrayIndexOutOfBoundsException: -1
	at com.google.gson.internal.bind.JsonTreeReader.skipValue(JsonTreeReader.java:262)
```
The method `popStack()` is being called on line 261 with a `stackSize` of `1` and afterwards the `stackSize` is `0` and the call on line 262 must result in an `ArrayIndexOutOfBoundsException`."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1014Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTre…André Rouélarouel02/16/17, 02:41:40 AM…eReader #1013👍  Thanks for the PR and the tests.  =||= Fix ArrayIndexOutOfBoundsException when skipping a value with JsonTre…André Rouélarouel02/16/17, 02:41:40 AM…eReader #1013NaNAndré Rouél02/08/17, 12:34:35 PMFix ArrayIndexOutOfBoundsException when skipping a value with JsonTreeReader #10131
1015Memory optimisation in JsonReaderMohammad Yasiryasirmhd02/17/17, 03:58:17 AM"The default constructor of StringReader gives a capacity of 16. It expands and does an array copy in the event of the capacity being exceeded while appending characters.

JsonReader.nextQuotedValue was initializing the default constructor. If the entire string was in buffer and there were no characters to be escaped then we can directly create a string object and return it back (based on the profiling for our sample JSON payload this was the flow this code goes into for 90% of the times).


In the event of it going into other code paths trying to estimate a length to be the double of the current length and ensure it is not less than 16. ""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= Looks good to me. But @swankjesse  and @JakeWharton understand the implications better. =||= @JakeWharton Thank you for the review. I have made the changes requested  =||= "Memory optimisation in JsonReaderMohammad Yasiryasirmhd02/17/17, 03:58:17 AM"The default constructor of StringReader gives a capacity of 16. It expands and does an array copy in the event of the capacity being exceeded while appending characters.

JsonReader.nextQuotedValue was initializing the default constructor. If the entire string was in buffer and there were no characters to be escaped then we can directly create a string object and return it back (based on the profiling for our sample JSON payload this was the flow this code goes into for 90% of the times).


In the event of it going into other code paths trying to estimate a length to be the double of the current length and ensure it is not less than 16. "NaNMohammad Yasir02/17/17, 01:55:23 AMIncorporating code review suggestions1
1016Incorporating the review comments in #1015Mohammad Yasiryasirmhd02/17/17, 03:09:16 PM"Incorporating the review comments in #1015. 

While readEscapeCharacter might read more than one character from the buffer it will also write 1 to the output. So the right thing to do is len+1"@swankjesse Thanks for catching this in #1015 . This should fix that issue. =||= Incorporating the review comments in #1015Mohammad Yasiryasirmhd02/17/17, 03:09:16 PM"Incorporating the review comments in #1015. 

While readEscapeCharacter might read more than one character from the buffer it will also write 1 to the output. So the right thing to do is len+1"NaNMohammad Yasir02/17/17, 06:24:30 AMIncorporating the review comments. While more than 1 charachter might be read from the buffer the output will have only one escaped charachter.1
1017GsonBuilder Perf optimizationsourabh guptaguptasourabh02/18/17, 11:19:28 AM"In HierarchFactories we are keep inserting the items at first position due to all the pointers in the list have to be moved up one position to before the new one can be inserted into the list.

With collection.reverse it will only run for the one time , rather than keep moving pointer every time whenver a insert is happening.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= @JakeWharton Please review
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1018JsonPrimitive code correction and Perf changessourabh guptaguptasourabh02/18/17, 03:56:35 PM"Changes done -:
1) FieldNamingPolicy -: Validating the condition before starting while loop.
2) GsonBuilder -: Instead of keep adding item at first position in hierarchyList , its more performance efficient to add all the items in last and then reverse at once while adding them all in the factories. As reversing a list is 15-16 times more faster than adding the item at first position and moving all the pointers when ever a new insert happens.
Along with that datePattern.trim.length() is much faster to check as compare to equal which will check if both objects are instanceof String then check length and then iterate over while loop.
3) JsonArray -: While making deepCopy of array , we know the size of the array that needs to be copy.
4) JsonNull = Unnecessary check is added in equal condition , only the check of other instance is instanceof JsonNull is needed.
5) JsonPrimitve -: we are calling getAsString when the object is not a number , which again checks whether the object is number or not which results in redundant checks.
Apart from it getAsString is creating new instance of LazilyParsedNumber which is not needed , if we want to only access the string.

""@JakeWharton @swankjesse for review
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1019gson builder perf improvement and code correctionssourabh guptaguptasourabh03/01/17, 08:11:07 PM"**Changes done** -:
**FieldNamingPolicy** -: Validating the condition before starting while loop.
**GsonBuilder** -: Instead of keep adding item at first position in hierarchyList , its more performance efficient to add all the items in last and then reverse at once while adding them all in the factories. As reversing a list is 15-16 times more faster than adding the item at first position and moving all the pointers when ever a new insert happens.
Along with that datePattern.trim.length() is much faster to check as compare to equal which will check if both objects are instanceof String then check length and then iterate over while loop.
**JsonArray/JsonObject** -: While making deepCopy of array , we know the size of the array that needs to be copy.
**JsonElement** -: No closure of JsonWriter.
**JsonPrimitve** -: getAsString is creating new instance of LazilyParsedNumber which is not needed , if we want to only access the string.""@JakeWharton @swankjesse for review
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1021Gson parser able to parse illegal jsonDevangceleritas902/21/17, 08:28:25 PM"I am using the gson in my code and it's able to parse an invalid json.

Json simply is:
{ dummy : ""abc""}

Whereas, I think the valid json should be:
{ ""dummy"" : ""abc""}

Is it really an issue?

Also, why JsonParser sets the leniency of JsonReader to true every time? Shouldn't it read the leniency value from the JsonReader supplied?""It's legacy, broken behavior we can't change unfortunately.

To work around it you can use the `getAdapter` method to look up a `TypeAdapter` for the type you want to serialize/deserialize. Then use its `fromJson` / `toJson` methods instead of those on the `Gson` object which will provide strict behavior. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1024Gson polymorphism: request similar feature like Json.Net's TypeNameHandling.Autozenglian05/22/20, 04:06:09 AM"( I'm not sure this is a duplicate one as there were issues raised for ""polymorphism"")

The main idea is to **automatically** add an extra ""@type"" field if the actual instance's type is not the same as (should be a direct or **indirect** subclass of) the declaring type.

see [**Json.Net's TypeNameHandling.Auto**](http://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm)

[Edit]
 Json.Net's approach is more generic and simpler than [RuntimeTypeAdapterFactory](https://github.com/google/gson/blob/e0f0854ac23c07658cce5877b1fc9bc5995b1688/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java). It holds the full class name so you do not need to register type adapter. Everything is automatic.

It will be good if gson has similar feature. Thanks.""Will this do what you want?
https://github.com/google/gson/blob/e0f0854ac23c07658cce5877b1fc9bc5995b1688/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java =||= I think Json.Net's approach is more generic and simpler.  It holds the full class name so you do not need to register type adapter. Everything is automatic. 
 
E.g., a List<Object> contains any objects can be deseriazlied, including nested collections. Not sure if RuntimeTypeAdapterFactory can do the same thing yet. =||= @NightlyNexus Also, there is no official release (on Maven Central) for gson-extras, is there? =||= Personally I am not that convinced because deserializing based on class names can easily make you vulnerable to deserialization exploits, see [ysoserial](https://github.com/frohoff/ysoserial).
Having this as separate library is fine if you know what you are doing, but having it in Gson might lead to incautious usage just because it is ""easier"".

Though in the end the maintainers of this project decide of course. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1025camcamcam199302/24/17, 04:21:54 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1026Eliminating Code OverheadAnirudh Ramanananirudhramanan03/01/17, 04:13:56 PM"* Calculating length and size beforehand in cases of for loops
* Avoid creation of StringBuilder object if type argument's length is 0 ($Gson$Types.java : 485)
* Removed boilerplate null checks from TypeAdapter, and replaced with nullSafe()""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= Thanks! =||= "Eliminating Code OverheadAnirudh Ramanananirudhramanan03/01/17, 04:13:56 PM"* Calculating length and size beforehand in cases of for loops
* Avoid creation of StringBuilder object if type argument's length is 0 ($Gson$Types.java : 485)
* Removed boilerplate null checks from TypeAdapter, and replaced with nullSafe()"NaNanirudh.r03/01/17, 07:04:21 AMbuild fix, missed braces1
1027code correctionsourabh guptaguptasourabh03/12/17, 06:53:39 PMcode correction + setting of array size."Please minimize all avoidable changes such as reordering of imports, or even inlining statements. 

I see that the primary change you want is JsonArray constructor with a capacity parameter. Is that correct? Please edit the PR title accordingly.

Thank you for your contributions. =||= @inder123  changes done in PR https://github.com/google/gson/pull/1033 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1030When is the next release /snapshot version being planned ?Anirudh Ramanananirudhramanan06/20/17, 05:07:40 PM"We did some benchmarking on the data sets, and have noticed around 25 % gain with the changes that went in #1015 

<img width=""404"" alt=""screen shot 2017-03-04 at 1 05 09 am"" src=""https://cloud.githubusercontent.com/assets/16556984/23566545/51d6d4e2-0078-11e7-924a-11e518888b51.png"">""We don't really plan releases. Ideally Gson development would slowly come to a stop and it would just stay stable.

That said, there's some fixes on master that could go into a 2.8.1 in the coming weeks: https://github.com/google/gson/compare/gson-parent-2.8.0...master =||= Ok. Thanks! =||= Nice gains. Let's plan a cut @JakeWharton  @swankjesse in the coming weeks.
 =||= @swankjesse , @inder123  : any updates on the next release? =||= @swankjesse @JakeWharton  Let's do a release now. I will go ahead and do the needful. =||= @inder123 : gentle reminder for this. Please do let us know if we can be of any help with this. =||= For anyone interested, I saw similar reading speed improvements - https://github.com/hzsweers/json-serialization-benchmarking/pull/1 =||= @hzsweers  Thanks for the benchmarks links. Great to see a real performance improvement. Keep such suggestions coming. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1031Fluent interface for the `add*` methodsLyubomyr Shaydarivlyubomyr-shaydariv03/07/17, 06:35:20 PM"Not sure if it was asked before, but would it be possible to let the `add*` method family work in fluent interface style? Say, the following JSON

```json
{""key"":""whatever"",""value"":[""foo"",""bar""]}
```

can be easily built as a `JsonObject` with

```java
final JsonObject jsonObject = new JsonObject();
jsonObject.addProperty(""key"", ""whatever"");
final JsonArray jsonArray = new JsonArray();
jsonArray.add(""foo"");
jsonArray.add(""bar"");
jsonObject.add(""value"", jsonArray);
```

However, if the `add*` methods family would be non-`void` and return their respective instances, it could be done with:

```java
final JsonElement root = new JsonObject()
	.addProperty(""key"", ""whatever"")
	.addProperty(""value"", new JsonArray()
		.add(""foo"")
		.add(""bar"")
	);
```

As the pros I can see eliminating redundant variables; ""tree-shaped"" code; should not break if the `add*` methods are used without any ""hacks"". As the cons: probably would break if someone analyzes the return type for the `add*` methods via reflection or byte-code processing. I believe you also had such a scenario in mind before, but I'm wondering: what would you say for pros and cons? Thanks.""This would be a great change but it's backward incompatible and we have no plans to ever do a Gson 3.0. =||= @JakeWharton thanks for the reply. I have a few more questions: could you please clarify more on the backwards compatibility? (I seem to have some misunderstanding here) And, would adding a ""satellite"" `addFluently*` (or whatever it could be called) methods family be considered some kind of code bloat and something that should never be a part of Gson? Thanks. =||= Yep. We could add new methods but I'm not sure that we should because it
adds API surface for very little benefit.

On Tue, Mar 7, 2017, 1:13 PM Lyubomyr Shaydariv <notifications@github.com>
wrote:

> @JakeWharton <https://github.com/JakeWharton> thanks for the reply. I
> have a few more questions: could you please clarify more on the backwards
> compatibility? (I seem to have some misunderstanding here) And, would
> adding a ""satellite"" addFluently* (or whatever it could be called)
> methods family be considered some kind of code bloat and something that
> should never be a part of Gson? Thanks.
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1031#issuecomment-284808108>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEETpp3iBuE945Y9EDVFf0KzpSjJi1ks5rjZ5OgaJpZM4MVQ01>
> .
>
 =||= @JakeWharton Ok, got it, so the issue can be closed. Thanks for your time. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1033JsonArray with capacity support in constructorsourabh guptaguptasourabh03/13/17, 02:59:41 AMJsonArray with capacity support in constructor@inder123 changes done =||= Thanks. 👍  =||= JsonArray with capacity support in constructorsourabh guptaguptasourabh03/13/17, 02:59:41 AMJsonArray with capacity support in constructorNaNguptasourabh03/12/17, 06:49:29 PM"JsonArray with capacity in constructor

JsonArray with capacity in constructor"1
1034Nested Objects that require custom JsonSerializers not working if the parent object is requires a custom JsonSerializersreejithraman03/15/17, 12:07:20 PM"I have a json object that looks like this:
````json
    {
        ""user"": {
            ""id"": 1234
            ... 
            ""photos"": {
                ""abc"": {
                    ""url"": ""http://.....""
                    ...
                }
            }
        }
    }
````
I want to write a custom deserializer for both `user` and `photos`. 

so I have:

````java
    public class User {
        private long id;
        private ArrayList<Photo> photos;
        ... 

        public static class Deserializer implements JsonDeserializer<User> {
            ... // does the custom serialization of the User object 
        }  
    }

    public class Photo {
        private String url;
        ... 

        public static class Deserializer implements JsonDeserializer<Photos> {
            ... // does the custom serialization of the Photo object 
        }  
    }
````

and when initializing I do this:
````java
    new GsonBuilder()
       .registerTypeAdapter(User.class, new User.Deserializer());
       .registerTypeAdapter(Photos.class, new Photos.Deserializer());
````
However, when i deserialize the `User` class, it hits the `User`'s deserializer but never hits the `Photo`'s deserializer. But if i get a json with the photo object not nested in the user json object like this:
````json
    {
        ""photos"": {
             ""abc"": {
                 ""url"": ""http://.....""
                  ...
             }
             ""bcd"": {
                 ""url"": ""http://.....""
                  ...
             }
             ""cde"": {
                 ""url"": ""http://.....""
                  ...
             }
    }
````
it will properly hit the `Photo`'s deserializer

SO question: http://stackoverflow.com/questions/42772466/jsonserializer-not-working-for-nested-objects-using-gson"Can you create a pull request with a JUnit test that reproduces this problem? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1036Github has this repository marked as HTML in search resultsStuart Wattmorungos03/15/17, 06:26:58 PMJust a tiny meta-issue, I was doing some Github API tests and found that this repository is tagged as language `HTML`, which doesn't seem right. It might be worth amending that, not that it is especially visible, except to search results.  "We don't really control this. It's based on the contents of the repo. =||= Hmm, you're right, although there are overrides: https://github.com/github/linguist#overrides. The generated code (i.e., the Javadocs) should be tagged, and in theory that's possible through one of these overrides, but it isn't 100% clear how. Vendored components can be tagged easily enough. 

I think it might still be an open Github issue: https://github.com/github/linguist/issues/2206.

I'll close as it's patently not fixable here (yet!) =||= This issue has a duplicate #1348 and an attempt to fix in #1349. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1037elimiating code overheadsourabh guptaguptasourabh03/18/17, 07:34:10 PM"Changes are -:
1) Calculating length and size beforehand in cases of for loops.
2) index can never be equal to length in FieldNamingPolicy.
""@inder123 for review
 =||= @JakeWharton for review =||= "elimiating code overheadsourabh guptaguptasourabh03/18/17, 07:34:10 PM"Changes are -:
1) Calculating length and size beforehand in cases of for loops.
2) index can never be equal to length in FieldNamingPolicy.
"NaNSourabh Gupta03/15/17, 05:11:42 PMelimiating code overhead1
1038list addition optimizationsourabh guptaguptasourabh03/17/17, 04:16:39 AM"Changes -:
1) Instead of always adding item at 0th position and then shifting the list every time with the new addition, add the item in the last and then reverse the complete list.
2) Correctly allocation of array sizes."Thanks for the explanation. 👍  =||= list addition optimizationsourabh guptaguptasourabh03/17/17, 04:16:39 AM"Changes -:
1) Instead of always adding item at 0th position and then shifting the list every time with the new addition, add the item in the last and then reverse the complete list.
2) Correctly allocation of array sizes."NaNguptasourabh03/16/17, 06:24:35 PM"Optimized imports

Optimized imports"1
1039optimized Redundant isNumber() instance checks.sourabh guptaguptasourabh03/18/17, 07:36:34 PMIn JsonPrimitive getAsString getting called when its not a number , but inside that also its again checking if it's a number or not which is redundant"@inder123 for review
 =||= Overall, I don't know if this really improves anything. Probably the resulting code is a little less readable. =||= @inder123 yes but when we knew its a instanceof Number then calling getAsNumber and then checking if it's instance of String doesn't make sense .
 =||= Yeah, I don’t think this is an improvement. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1040gson concurrent problems if I have static hashMapLino Oscar García GarcíaLinoOscar03/20/17, 01:32:18 PM"Hi friends!

Thanks for your work! I will going to open this issue, but it is the typical problem that is in the frontier of products, and is the fault of one or another according to the eyes that you are using for study it :-)

This is my stack trace:

java.util.ConcurrentModificationException
	at java.util.HashMap$AbstractMapIterator.checkConcurrentMod(HashMap.java:197)
	at java.util.HashMap$AbstractMapIterator.makeNext(HashMap.java:202)
	at java.util.HashMap$EntryIterator.next(HashMap.java:263)
	at java.util.HashMap$EntryIterator.next(HashMap.java:256)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
	at com.google.gson.Gson.toJson(Gson.java:669)
	at com.google.gson.Gson.toJson(Gson.java:648)
	at com.google.gson.Gson.toJson(Gson.java:603)
	at com.google.gson.Gson.toJson(Gson.java:583)
	at es.isban.portlets.util.JSONUtils.toJson(JSONUtils.java:41)

I review your code and i discover that the problem is that you are using one iterator over the same map that i am sending to you.... and I obtain one problem in your code due that there are more than one thread over my Hashmap

Obsiously, if i use concurrentHashMap or hastTable I avoid the problem but... really you aren't thread-safe in this case, at least, theorically...

So, i open this issue only for inform you... are this one bug, maybe must you clone income map for avoid problems? Who knows!!!

Thanks for your great product!!

Regards,
Lino""What would you expect Gson to do in this case? Even if we try and make a
defensive copy (which would be crazy slow), it still uses an Iterator to
copy the data.

On Sun, Mar 19, 2017 at 10:18 PM LinoOscar <notifications@github.com> wrote:

> Hi friends!
>
> Thanks for your work! I will going to open this issue, but it is the
> typical problem that is in the frontier of products, and is the fault of
> one or another according to the eyes that you are using for study it :-)
>
> This is my stack trace:
>
> java.util.ConcurrentModificationException
> at
> java.util.HashMap$AbstractMapIterator.checkConcurrentMod(HashMap.java:197)
> at java.util.HashMap$AbstractMapIterator.makeNext(HashMap.java:202)
> at java.util.HashMap$EntryIterator.next(HashMap.java:263)
> at java.util.HashMap$EntryIterator.next(HashMap.java:256)
> at
> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)
> at
> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
> at
> com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
> at
> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)
> at
> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
> at com.google.gson.Gson.toJson(Gson.java:669)
> at com.google.gson.Gson.toJson(Gson.java:648)
> at com.google.gson.Gson.toJson(Gson.java:603)
> at com.google.gson.Gson.toJson(Gson.java:583)
> at es.isban.portlets.util.JSONUtils.toJson(JSONUtils.java:41)
>
> I review your code and i discover that the problem is that you are using
> one iterator over the same map that i am sending to you.... and I obtain
> one problem in your code due that there are more than one thread over my
> Hashmap
>
> Obsiously, if i use concurrentHashMap or hastTable I avoid the problem
> but... really you aren't thread-safe in this case, at least, theorically...
>
> So, i open this issue only for inform you... are this one bug, maybe must
> you clone income map for avoid problems? Who knows!!!
>
> Thanks for your great product!!
>
> Regards,
> Lino
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1040>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEfY6u7uiczPxAJyoRSApdkC5tQk3ks5rneHjgaJpZM4Mh-MP>
> .
>
 =||= Hi Jake

I'm agree with you that any change in this case is unacceptable in performance terms; i will change my code, but I have considered important collaborate in your great work; if anyone in the future have this problem, he will be able to read this thread and discover that the same instance map  of this code is the printted map, and he must solved in own code concurrent problem. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1041Fix headers format in the README.mdEgor Neliubaegor-n03/20/17, 12:40:50 PMNaNNaNFix headers format in the README.mdEgor Neliubaegor-n03/20/17, 12:40:50 PMNaNNaNEgor Neliuba03/20/17, 11:11:18 AMFix headers format in the README.md1
1042Simplified access of getSimpleNamesourabh guptaguptasourabh03/20/17, 09:25:53 PMinstead of calling getClass.getSimpleName() that will check too many conditions inside , we can make it as final String and use it directly."@inder123 for review
 =||= @JakeWharton requested changes done
 =||= 👍  =||= "Simplified access of getSimpleNamesourabh guptaguptasourabh03/20/17, 09:25:53 PMinstead of calling getClass.getSimpleName() that will check too many conditions inside , we can make it as final String and use it directly.NaNsourabh gupta03/20/17, 06:11:38 PM"Simplified access of getSimpleName

Code Review changes"1
1043Optimized no of iterations for copying values.sourabh guptaguptasourabh03/21/17, 03:09:48 AMFor copying the values we are iterating 3 times over the stackSize with the use of arrayCopy individually for stack,patchIndices and pathNames instead of that we can run a single for loop that will iterate till stackSize and copy all the values of stack,pathIndixes and pathNames in new array.Please don’t contribute micro-optimizations without motivating benchmarks. In this case it might be a pessimization because arraycopy is intrinsic. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1044t resolve symbol N android studioZionQ03/21/17, 10:25:37 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1045UserGuide formatting fixMatthew Haughton3flex03/21/17, 06:14:47 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "UserGuide formatting fixMatthew Haughton3flex03/21/17, 06:14:47 PMNaNNaNMatthew Haughton03/21/17, 05:37:22 PMUserGuide formatting fixes1
1046Processing non-standard JSONSteinerOkay03/22/17, 04:18:02 PM"Good day, I have a non-standard JSON, here it is:
```
{
  ""0"": {
    ""case"": {
      ""case_id"": 6724565,
      ""case_number"": ""316-862565"",
      ""labels"": []
    }
  },
  ""1"": {
    ""case"": {
      ""case_id"": 6724094,
      ""case_number"": ""766-765118"",
      ""labels"": [
        13244
      ]
    }
  },
  ""3"": {
    ""case"": {
      ""case_id"": 6724091,
      ""case_number"": ""766-765232328"",
      ""labels"": [
        13243
      ]
    }
  },
  ""total_count"": 5
}
```
Is there any adequate way to process this JSON?"Please ask usage questions on StackOverflow. Also I don't see anything non-standard about that JSON. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1047Size allocation of StringBuildersourabh guptaguptasourabh05/24/17, 10:49:09 PMSize allocation of StringBuilder"@inder123 for review
 =||= "Size allocation of StringBuildersourabh guptaguptasourabh05/24/17, 10:49:09 PMSize allocation of StringBuilderNaNsourabh gupta03/23/17, 02:24:13 AM"Size allocation of StringBuilder

Size allocation of StringBuilder"1
1050Accessing FieldType single timesourabh guptaguptasourabh03/23/17, 02:57:08 PMPresently we are creating FieldType every time in the for loop , we can create the single instance before starting for loop.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1051Optimization of TypeToken Generationsourabh guptaguptasourabh03/23/17, 06:57:26 PMin createBoundFiled , while creating new TypeToken we are generating type , rawType and hashCode every time , instead of that we can generate it once and use the same.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1052Update GsonDesignDocument.mdTimmy Villaluztvillaluz03/23/17, 10:15:43 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "Update GsonDesignDocument.mdTimmy Villaluztvillaluz03/23/17, 10:15:43 PMNaNNaNTimmy Villaluz03/23/17, 09:58:52 PMUpdate GsonDesignDocument.md1
1053Negative zeroMichele Vivodaeleumik04/19/17, 09:26:52 PM"Hi,

I have been cross testing various json parsers looking for those that expose the lexical of json numbers and not only their bound java.lang.Number. Because of the lazy parsing done by gson with `LazilyParsedNumber`,  that keeps the lexical, all my roundtrip tests pass apart one: the lexical  `-0` that is treated as it were `0`

I read some threads about negative zero: 
https://www.ietf.org/mail-archive/web/json/current/msg03668.html
https://www.ietf.org/mail-archive/web/json/current/msg01520.html
https://www.ietf.org/mail-archive/web/json/current/msg01523.html
https://www.ietf.org/mail-archive/web/json/current/msg01525.html

I created this issue thinking that `-0` is a float, the same as `-0.0`, since a signed zero makes sense only in floating point numbers and also because in Java only Double/Float preserve sign of zero.  This would have the implication that `-0` could not be validated by jsonschema `type` `integer` , and that a jsonschema implementation would have the need to know if a `-0` is present in json data, but probably this is not the case.

After I started to (re)consider that `-0` could be an integer, only that seems that in no programming language there is an integer that preserves sign for zero.

In any case, differentiating between `0` and `-0`  at lexical level would allow a client of gson to be able to refuse the value `-0`.

Gson could easily support differentiating between `0` and `-0`: in code `-0` is [treated as an integer (PEEKED_LONG) in JsonReader](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731) so its value is stored in a Java `long` that cannot represent negative zero. I noted that `-0.0` roundtrips correctly because is treated as a PEEKED_NUMBER that is kept as a Java String. So the case of `-0` could be trapped and treated as `-0.0`, as a PEEKED_NUMBER, in this way the `toString()` method of `LazilyParsedNumber` will return `-0` and gson will be able to roundtrip any valid number value found in source, only clients using `Number.toString()` will notice any difference.

My proposal is to change [this code](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonReader.java#L731)  from

          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {
    
to 

          if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value!=0 || false==negative) && (value != Long.MIN_VALUE || negative)) {
    

Thanks,
Michele""@swankjesse Any concerns if we accept this change? 

@eleumik Thank you for taking time to write the issue with considerable detail. It would be great if you can also send a pull request that we can just merge. Please include a test-case for negative zero as well. =||= If somebody knows if `-0` is an integer with no representation in any language or a float same as `-0.0` or other, please let me know.

Thanks for merging, happy you liked it
 =||= all languages that use Two's complement can not represent -0 as ints. =||= @eleumik  Did the test that you write fail without your fix?  =||= yes, I wrote first the test.  I double checked now. =||= Thanks. Yes, TDD for bug fixes is awesome. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1054Please expose JsonReader/JsonWriter stack state and provide JsonReader.skipToken() methodLyubomyr Shaydarivlyubomyr-shaydariv05/01/18, 10:26:29 AM"Hi,

First of all, apologies for reporting two issues as one, however they are really relevant to each other. Please consider the following scenario. Suppose there is a service that produces valid JSON documents that the documents have design flaws. For example

```json
[
	{""foo"": 1,""bar"": 2},
	{""foo"": 1,""bar"": ""bar""}
]
```

The mapping is as follows:

```java
final class Dto {
	final Integer foo = null;
	final Integer bar = null;
	@Override public String toString() { return ""("" + foo + ',' + bar + ')'; }
}
```

As you can see, Gson will fail at `$[1].bar`:

>java.lang.NumberFormatException: For input string: ""bar""

Suppose I would like to skip invalid array elements:

```java
final class IgnoreInvalidElementsTypeAdapterFactory
		implements TypeAdapterFactory {

	private static final TypeAdapterFactory ignoreInvalidElementsTypeAdapterFactory = new IgnoreInvalidElementsTypeAdapterFactory();

	private IgnoreInvalidElementsTypeAdapterFactory() {
	}

	static TypeAdapterFactory getIgnoreInvalidElementsTypeAdapterFactory() {
		return ignoreInvalidElementsTypeAdapterFactory;
	}

	@Override
	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
		if ( List.class.isAssignableFrom(typeToken.getRawType()) ) {
			@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
			final TypeAdapter<?> typeAdapter = new IgnoreInvalidElementsTypeAdapter<>(
					(TypeAdapter<Object>) gson.getDelegateAdapter(this, TypeToken.get(getElementType(typeToken.getType()))),
					(TypeAdapter<List<Object>>) gson.getDelegateAdapter(this, typeToken)
			);
			@SuppressWarnings(""unchecked"")
			final TypeAdapter<T> castTypeAdapter = (TypeAdapter<T>) typeAdapter;
			return castTypeAdapter;
		}
		return null;
	}

	private static Type getElementType(final Type type) {
		if ( !(type instanceof ParameterizedType) ) {
			return Object.class;
		}
		final ParameterizedType parameterizedType = (ParameterizedType) type;
		return parameterizedType.getActualTypeArguments()[0];
	}

	private static final class IgnoreInvalidElementsTypeAdapter<E>
			extends TypeAdapter<List<E>> {

		private final TypeAdapter<E> elementTypeAdapter;
		private final TypeAdapter<List<E>> originalListTypeAdapter;

		private IgnoreInvalidElementsTypeAdapter(final TypeAdapter<E> elementTypeAdapter, final TypeAdapter<List<E>> originalListTypeAdapter) {
			this.elementTypeAdapter = elementTypeAdapter;
			this.originalListTypeAdapter = originalListTypeAdapter;
		}

		@Override
		public void write(final JsonWriter out, final List<E> value)
				throws IOException {
			originalListTypeAdapter.write(out, value);
		}

		@Override
		public List<E> read(final JsonReader in)
				throws IOException {
			if ( in.peek() == NULL ) {
				return null;
			}
			final List<E> list = new ArrayList<>();
			in.beginArray();
			while ( in.hasNext() ) {
				final int oldStackSize = getStackSize(in);
				try {
					list.add(elementTypeAdapter.read(in));
				} catch ( final Exception ignored ) {
					skipBack(in, oldStackSize);
				}
			}
			in.endArray();
			return list;
		}

		private static void skipBack(final JsonReader in, final int oldStackSize)
				throws IOException {
			final int newStackSize = getStackSize(in);
			if ( newStackSize == oldStackSize ) {
				skipToken(in);
			} else if ( newStackSize > oldStackSize ) {
				do {
					skipToken(in);
				} while ( getStackSize(in) > oldStackSize );
			}
		}

		private static void skipToken(final JsonReader in)
				throws IOException {
			final JsonToken token = in.peek();
			switch ( token ) {
			case BEGIN_ARRAY:
				in.beginArray();
				break;
			case END_ARRAY:
				in.endArray();
				break;
			case BEGIN_OBJECT:
				in.beginObject();
				break;
			case END_OBJECT:
				in.endObject();
				break;
			case NAME:
				in.nextName();
				break;
			case STRING:
			case NUMBER:
			case BOOLEAN:
			case NULL:
				in.skipValue();
				break;
			case END_DOCUMENT:
			default:
				throw new AssertionError(token);
			}
		}

		private static final Field stackSizeField = getAccessibleDeclaredField(JsonReader.class, ""stackSize"");

		private static int getStackSize(final JsonReader in) {
			return getFieldValue(in, stackSizeField);
		}

		private static Field getAccessibleDeclaredField(final Class<?> clazz, final String name) {
			try {
				final Field field = clazz.getDeclaredField(name);
				field.setAccessible(true);
				return field;
			} catch ( final NoSuchFieldException ex ) {
				throw new RuntimeException(ex);
			}
		}

		private static <T> T getFieldValue(final Object object, final Field field) {
			try {
				@SuppressWarnings(""unchecked"")
				final T castValue = (T) field.get(object);
				return castValue;
			} catch ( final IllegalAccessException ex ) {
				throw new RuntimeException(ex);
			}
		}

	}

}
```

Now if adding the type adapter factory above, I can skip invalid array elements in Gson 2.8.0. The output is as follows (there is no the element in the result list):

>[(1,2)]

However, there are two points I would like to outline:

* `JsonReader` does not provide any information on its internal parsing stack like stack itself, stack size, current node, etc. So, since I'm working with Gson 2.8.0, implemented a dirty hack using reflection in order to get the `JsonReader.stackSize` field value.
* From time to time I re-impement the `skipToken` method not bothering to create a custom Gson extensions library for internal use.

My questions are:

* Would you let both `JsonReader` and `JsonWriter` expose their current stack or at least its top state information?
* What if `JsonReader` could also have something like `JsonReader.skipToken()` along with `skipValue()` to let `JsonReader` do exactly what the static `skipToken()` does above?

Thank you."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1056Add constructor to UtcDateTypeAdapterGreg Pendleburygreg-pendlebury03/28/17, 12:00:06 AM…  to allow setting of the boolean 'millis' flag that was present in the format() method."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= Oh well, sorry, but I can't agree to the CLA: ""Grant of Copyright License.""

The apache license it seriously not enough? =||= You should probably also check the source code for that class. I think there's clear references there to code lifted from the Jackson libraries which may not comply with the way that CLA is written. =||= Yes, Apache is not enough.

On Mon, Mar 27, 2017, 8:30 PM Greg Pendlebury <notifications@github.com>
wrote:

> You should probably also check the source code for that class. I think
> there's clear references there to code lifted from the Jackson libraries
> which may not comply with the way that CLA is written.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1056#issuecomment-289622010>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEUZEraew9-asmN0tm0lLsH6N_FQlks5rqE5bgaJpZM4Mq-VP>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1057Why Gson fromJson get List is null ?letie03/28/17, 03:59:48 PM"Hi ,guys
**1. Json String is like this:**
{
    ""mac"":""56:78:90:12:34:56"",
    ""pin"":""[
        {\""pin\"":\""0\"",\""status\"":\""0\""},    
        {\""pin\"":\""1\"",\""status\"":\""0\""},
        {\""pin\"":\""2\"",\""status\"":\""1\""},
        {\""pin\"":\""3\"",\""status\"":\""1\""},
        {\""pin\"":\""4\"",\""status\"":\""0\""},
        {\""pin\"":\""5\"",\""status\"":\""0\""},
        {\""pin\"":\""6\"",\""status\"":\""0\""},
        {\""pin\"":\""7\"",\""status\"":\""0\""},
        {\""pin\"":\""8\"",\""status\"":\""0\""},
        {\""pin\"":\""9\"",\""status\"":\""0\""},
        {\""pin\"":\""10\"",\""status\"":\""0\""},
        {\""pin\"":\""11\"",\""status\"":\""0\""},
        {\""pin\"":\""12\"",\""status\"":\""0\""}
    ]
""} 

**2. Class is :**

import java.util.List;


public class ESP8266 {

	public String mac;
	public List<pin> pins;
	
	public class pin {
		int pin;
		int status;
		
		public int getPin() {
			return pin;
		}
		public void setPin(int pin) {
			this.pin = pin;
		}
		public int getStatus() {
			return status;
		}
		public void setStatus(int status) {
			this.status = status;
		}
	}

	public String getMac() {
		return mac;
	}

	public void setMac(String mac) {
		this.mac = mac;
	}

	public List<pin> getPins() {
		return pins;
	}

	public void setPins(List<pin> pins) {
		this.pins = pins;
	}

}

**3. Gson vesion is 2.8.0 Use like this :**

Gson gson = new Gson();
ESP8266 esp = gson.fromJson(data,ESP8266.class);
System.out.println(""json:""+esp.pins);                        //out   json:null

Why esp.mac is ok , just the list esp.pins is null ?
Is anybody help me , thanks very much!""- Your  json structure has problem.  In your structure you have an array of  pin as 
`""pin"":""[]""`
Instead it should be `""pin"" :  []`

- Your POJO class has this property : `public List<pin> pins;`
you have to initialize that list, change it to:  `public List<pin> pins = new ArrayList<pin>();`

- Please use stackoverflow for this kind of issues. =||= **Hi , gajeralalji .
Thank you !**
My json String is ESP8266(nodeMCU) lua created:
    the lua code is :
   json={}
    pins=""[""
    for pin=0,12,1 do
        pins=pins..'{""pin"":""'..pin..'"",""status"":""'..gpio.read(pin)..'""},'
    end
    
    pins=string.sub(pins,1,string.len(pins)-1)..""]""
    json.mac=wifi.sta.getmac()
    json.pin=pins
  
    ok,data = pcall(cjson.encode, json)
    print(data)

I can't change it !
I changed the pojo just you say

it  result :json []

I think the error is json type.  =||= it's running
one place changed the json string name must be same as class,like:public List<pin> `pins` = new ArrayList<pin>();

thank you ! =||= Yes , i get it.
thank you !

At 2017-03-28 17:57:44, ""Lalji Gajera"" <notifications@github.com> wrote:


Your json structure has problem. In your structure you have an array of pin as
""pin"":""[]""
Instead it should be ""pin"" : []

Your POJO class has this property : public List<pin> pins;
you have to initialize that list, change it to: public List<pin> pins = new ArrayList<pin>();

Please use stackoverflow for this kind of issues.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub, or mute the thread. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1058SerializedName should allow regex names to be matched to a single name for input Tomas CarrilloNotengoID04/07/17, 10:53:09 PMNaN"You can use alternate tag instead. https://google.github.io/gson/apidocs/com/google/gson/annotations/SerializedName.html

If you have a proposal on how this will work, please send it out. A PR is even better. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1060Serialize class name with objectspiegamespiegamesde04/11/17, 11:44:14 AM"I'd like to use GSON as a replacement for the java default Serialization API. The only thing missing is to serialize the class of an object instance along with the object to allow full serialization.

In Genson, [this is possible](http://stackoverflow.com/a/19132243/6094756):

>     Genson genson = new Genson.Builder().setWithClassMetadata(true).create();
>     String json = genson.serialize(yourNode);

How difficult would it be to implement such a thing into GSON?

I tried it with custom TypeAdapters, but because I don't have enough access to the API, I'm stuck with an StackOverflowError.""Using [Gson on Fire](https://github.com/julman99/gson-fire) fixed my problem fixed my problem using the following preprocesssors:

	private static <T> TypeSelector getTypeSelector(Class<T> clazz) {
		return new TypeSelector<T>() {
			@Override
			public Class<? extends T> getClassForElement(JsonElement readElement) {
				String kind = readElement.getAsJsonObject().get(""kind"").getAsString();
				try {
					return (Class<? extends T>) Class.forName(kind);
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
					return null;
				}
			}
		};
	}

	private static <T> PostProcessor getPostProcessor(Class<T> clazz) {
		return new PostProcessor<T>() {

			@Override
			public void postDeserialize(T result, JsonElement src, Gson gson) {
			}

			@Override
			public void postSerialize(JsonElement result, T src, Gson gson) {
				result.getAsJsonObject().add(""kind"", new JsonPrimitive(src.getClass().getName()));
			}
		};
	}

And calling them with

		new GsonFireBuilder()
				.registerTypeSelector(MyClass.class, getTypeSelector(MyClass.class))
				.registerPostProcessor(MyClass.class, getPostProcessor(MyClass.class))
				[...]

for each class that should be serialized with its class name. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1061java.util.ConcurrentModificationException         at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)MajorMudmrudangit04/11/17, 11:07:35 PM"Getting java.util.ConcurrentModificationException from time to time. 

I had multiple threads doing :+1: 

  String json = objectToJSON.toJson(payload);

payload is HashMap<String,Object>

Object in the HashMap is simple 

Object of type is this class
public class PriceLevel {

    private double px;
    @Expose private long bs;
    @Expose private long as;

    @Override
    public String toString() {
        return ""PriceLevel{"" +
                ""px="" + px +
                "", bs="" + bs +
                "", as="" + as +
                '}';
    }

    public PriceLevel(double price, long bidSize, long askSize){
        this.px = price;
        this.bs = bidSize;
        this.as = askSize;
    }


    public String getDecimalPx(){
        return  BigDecimal.valueOf(px).setScale(10,BigDecimal.ROUND_HALF_EVEN).stripTrailingZeros().toPlainString();
    }

    public Double getPx() {
        return px;
    }

    public void setPx(Double px){
        this.px = px;
    }

    public long getBs() {
        return bs;
    }

    public void setBs(long bs) {
        this.bs = bs;
    }

    public long getAs() {
        return as;
    }

    public void setAs(long as) {
        this.as = as;
    }


}

I even made the method doing   String json = objectToJSON.toJson(payload);  synchronized

still i get the exception 


java.util.ConcurrentModificationException
        at java.util.HashMap$HashIterator.nextNode(HashMap.java:1429)
        at java.util.HashMap$EntryIterator.next(HashMap.java:1463)
        at java.util.HashMap$EntryIterator.next(HashMap.java:1461)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:206)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
        at com.google.gson.Gson.toJson(Gson.java:669)
        at com.google.gson.Gson.toJson(Gson.java:648)
        at com.google.gson.Gson.toJson(Gson.java:603)
        at com.google.gson.Gson.toJson(Gson.java:583)

""Please write it as a JUnit test that reproduces the problem. Thanks. =||= Thanks. Never mind . it was application issue. I had 2 threads working on same HashMap while in thread 1 gson was iterating over hashmap to convert to JSON , thread 2 tried to update the same hashMap

it wasn't concurrent hashmap

 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1063Gson static initialisation takes close to 27 ms on a Nexus 5 deviceMohammad Yasiryasirmhd04/12/17, 08:13:57 PM"![image](https://cloud.githubusercontent.com/assets/13655724/24973102/3209df38-1fdb-11e7-98cf-3f1310a334f1.png)

This is because of the static initialisation of **NULL_KEY_SURROGATE** in Gson class. 
Given this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1064Performance fix to do lazy initialization of null key surrogateMohammad Yasiryasirmhd04/12/17, 08:11:21 PM"Fixes issue #1063

![image](https://cloud.githubusercontent.com/assets/13655724/24973945/41484432-1fde-11e7-835b-2451c8478a16.png)

This is because of the static initialisation of NULL_KEY_SURROGATE in Gson class.
Given this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)""I suspect a measurement error. What’s the latency to parse a value before and after this change? =||= @swankjesse This is the cost that was being paid by the app just to create an instance of the Gson =||= btw, this was on a 4.4 Nexus 5 device =||= The complete call stack : 

![image](https://cloud.githubusercontent.com/assets/13655724/24974476/e3a84e88-1fdf-11e7-857b-f3ee5e4a0e3e.png)
 =||= This should use `TypeToken.get(Object.class)`. There's no need for the subclass and reflection hacks. =||= @JakeWharton : Agreed. Will make the changes in a bit. =||= Thanks @JakeWharton . It will be great if we get a SNAPSHOT version of the library with the changes done for this as well as #1015.  =||= I don't have the bits to push a SNAPSHOT. Perhaps @swankjesse can. =||= "Performance fix to do lazy initialization of null key surrogateMohammad Yasiryasirmhd04/12/17, 08:11:21 PM"Fixes issue #1063

![image](https://cloud.githubusercontent.com/assets/13655724/24973945/41484432-1fde-11e7-835b-2451c8478a16.png)

This is because of the static initialisation of NULL_KEY_SURROGATE in Gson class.
Given this is quite expensive and this is required only when someone passes in a null for the type parameter (which would be very rare, we should look at lazy initialisation of this variable)"NaNMohammad Yasir04/12/17, 07:31:07 PMImplementing code review changes1
1067JsonAdapterAnnotationTypeAdapterFactory exception when wrong type is used for @JsonAdapter could be more helpfulKevin Mostkevinmost04/20/17, 12:08:32 AM"The exception thrown [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java#L71) when you pass an invalid type to `@JsonAdapter` doesn't tell you what the invalid type was that was registered. It might be nice if it also included `instance.getClass().getName()` in the exception message.

Can submit a PR if this is something of interest."Might also be nice to include the `type` that was targeted by the `@JsonAdapter` annotation? Having both of these pieces of info in the exception message would make it very easy to track down where the error is. =||= Good suggestion. Fixed in https://github.com/google/gson/pull/1068 =||= Great, thanks for the quick fix! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1068Printing more debugging information to help track an invalid JsonAdap…Inderjeet Singhinder12304/20/17, 12:08:21 AM"…ter.

Now the thrown exception carries this information:
java.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer."@JakeWharton please review when you get a chance. I am going to merge this now. =||= Printing more debugging information to help track an invalid JsonAdap…Inderjeet Singhinder12304/20/17, 12:08:21 AM"…ter.

Now the thrown exception carries this information:
java.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer."NaNInderjeet Singh04/18/17, 06:54:27 PM"Printing more debugging information to help track an invalid JsonAdapter.

Now the thrown exception carries this information:
java.lang.IllegalArgumentException: Invalid attempt to bind an instance of java.lang.Integer as a @JsonAdapter for com.google.gson.functional.JsonAdapterAnnotationOnClassesTest$D. @JsonAdapter value must be a TypeAdapter, TypeAdapterFactory, JsonSerializer or JsonDeserializer."1
1069negative zero test and fixMichele Vivodaeleumik04/19/17, 09:26:37 PMFor issue #1053 "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= Thank you. 👍  =||= Thanks ! =||= "negative zero test and fixMichele Vivodaeleumik04/19/17, 09:26:37 PMFor issue #1053 NaNMichele Vivoda04/19/17, 04:03:51 PMnegative zero test and fix1
1070Migrate DefaultDateTypeAdapter to streaming adapterLyubomyr Shaydarivlyubomyr-shaydariv05/31/17, 01:12:50 AM"* Migrated `DefaultDateTypeAdapter` to streaming adapter, removing one item from the in-source TODO list.
* `DefaultDateTypeAdapter` does not introduce its own type parameter like `<T extends Date>` in order to keep compatiblity.
* `DefaultDateTypeAdapter` now requires a `Class<? extends Date>` to be passed to the primary constructor: all package-protected constructors always accept the `dateType` parameter; however, there was one public constructor accepting no `dateType`, so now there are two constructors and another one accepts `dataType` in order not to break public interface.
* `dateType` default value is `java.util.Date.class`.
* `dateType` must be one of: `java.util.Date.class`, `java.sql.Timestamp.class`, or `java.sql.Date.class`. Otherwise a fail-fast `IllegalArgumentException` that is migrated from the former `deserialize` method (`AssertionError` is thrown instead) and now thrown in the new constructor. I hope this is acceptable however I cannot recall fail-fast constructors in Gson (factory methods only).""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I signed it. Please verify. =||= CLAs look good, thanks!

<!-- ok --> =||= Thank you! 👍  =||= "Migrate DefaultDateTypeAdapter to streaming adapterLyubomyr Shaydarivlyubomyr-shaydariv05/31/17, 01:12:50 AM"* Migrated `DefaultDateTypeAdapter` to streaming adapter, removing one item from the in-source TODO list.
* `DefaultDateTypeAdapter` does not introduce its own type parameter like `<T extends Date>` in order to keep compatiblity.
* `DefaultDateTypeAdapter` now requires a `Class<? extends Date>` to be passed to the primary constructor: all package-protected constructors always accept the `dateType` parameter; however, there was one public constructor accepting no `dateType`, so now there are two constructors and another one accepts `dataType` in order not to break public interface.
* `dateType` default value is `java.util.Date.class`.
* `dateType` must be one of: `java.util.Date.class`, `java.sql.Timestamp.class`, or `java.sql.Date.class`. Otherwise a fail-fast `IllegalArgumentException` that is migrated from the former `deserialize` method (`AssertionError` is thrown instead) and now thrown in the new constructor. I hope this is acceptable however I cannot recall fail-fast constructors in Gson (factory methods only)."NaNLyubomyr Shaydariv04/21/17, 10:13:31 AMMigrate DefaultDateTypeAdapter to streaming adapter1
1071Adding maven-bundle-plugin.James Carmanjwcarman05/24/17, 10:25:50 PM"This patch adds OSGi support to GSON, without changing the packaging type to ""bundle"".  It also uses a more recent version of the maven-bundle-plugin, 3.2.0 (3.3.0 is having some issues right now with CDNs or something).""@JakeWharton I have provided a patch that avoids changing the packaging type.  I don't really think it matters, but it seemed to be controversial, so I removed it.   =||= By the way, if you want to check out what is happening in the jar/MANIFEST.MF file, just add this plugin to the build:

```xml
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <configuration>
          <target>
            <echo message=""--------------------------------------------------""/>
            <echo message=""Manifest File Contents""/>
            <echo message=""--------------------------------------------------""/>
            <echo message=""${line.separator}""/>
            <exec executable=""cat"">
              <arg value=""${project.build.outputDirectory}/META-INF/MANIFEST.MF""/>
            </exec>
            <echo message=""${line.separator}""/>
            <echo message=""--------------------------------------------------""/>
            <echo message=""Jar File Contents""/>
            <echo message=""--------------------------------------------------""/>
            <echo message=""${line.separator}""/>
            <exec executable=""jar"">
              <arg value=""-tf""/>
              <arg value=""${project.basedir}/target/${project.build.finalName}.jar""/>
            </exec>
            <echo message=""${line.separator}""/>
          </target>
        </configuration>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
``` =||= Thank you! =||= "Adding maven-bundle-plugin.James Carmanjwcarman05/24/17, 10:25:50 PM"This patch adds OSGi support to GSON, without changing the packaging type to ""bundle"".  It also uses a more recent version of the maven-bundle-plugin, 3.2.0 (3.3.0 is having some issues right now with CDNs or something)."NaNJames Carman04/21/17, 07:26:27 PMAdding maven-bundle-plugin.1
1072Remove need for synthetic accessor methods.Eric CochranNightlyNexus04/23/17, 01:44:27 AMNaNNaNRemove need for synthetic accessor methods.Eric CochranNightlyNexus04/23/17, 01:44:27 AMNaNNaNEric Cochran04/23/17, 12:32:59 AMRemove need for synthetic accessor methods.1
1073Remove helper methods mentioned in the TODO listLyubomyr Shaydarivlyubomyr-shaydariv05/02/17, 02:37:11 PMNaN(trying to kick @googlebot) =||= Ah, we're good. I guess it doesn't do tags anymore. =||= Remove helper methods mentioned in the TODO listLyubomyr Shaydarivlyubomyr-shaydariv05/02/17, 02:37:11 PMNaNNaNLyubomyr Shaydariv04/23/17, 12:38:39 PMRemove helper methods mentioned in the TODO list1
1074$Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowErrorAndrey Mogilevamogilev02/04/19, 04:54:45 PM"While resolving recursive generic types, $Gson$Types.resolve() sometimes starts to generate chains of type bounds like  ""super ? extends ? .... ? extends A"" , causing infinite recursion and thus StackOverflowError's like 
`java.lang.StackOverflowError
	at com.google.gson.internal.$Gson$Types.resolveTypeVariable($Gson$Types.java:407)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:330)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:379)
	at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:384)
...
`
This can be reproduced on the following simple ccde:
```java
  private static class Foo1<A> {
    Foo2<? extends A> foo2;
  }
  private static class Foo2<B> {
    Foo1<? super B> foo1;
  }
  public void testRecursiveResolveSimple() {
    new Gson().getAdapter(Foo1.class);
  }
```

This is the root cause of StackOverflowError's described in Issue #440 and Issue #603.

In order to fix them, such chains need to be collapsed using the following rules:
- supertypeOf(supertypeOf(X)) == supertypeOf(X)
- subtypeOf(subtypeOf(X)) == subtypeOf(X)
- supertypeOf(subtypeOf(X)) == subtypeOf(Object.class)
- subtypeOf(supertypeOf(X)) == subtypeOf(Object.class)"The proposed change is implemented in the pull request above =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1075Fix StackOverflowError on resolving recursive types by collapsing chains of type boundsAndrey Mogilevamogilev05/31/17, 12:47:04 AM"As described in Issue #1074, $Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError on attempts to serialize objects of such types or just obtain the type adapter.

The suggested change fixes StackOverflowError's in a number of issues, including Issue #440 and Issue #603.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= Signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*

<!-- need_author_consent --> =||= Looks good to me. 👍  Thanks =||= "Fix StackOverflowError on resolving recursive types by collapsing chains of type boundsAndrey Mogilevamogilev05/31/17, 12:47:04 AM"As described in Issue #1074, $Gson$Types.resolve() shall collapse chains of super/extends type bounds to avoid StackOverflowError on attempts to serialize objects of such types or just obtain the type adapter.

The suggested change fixes StackOverflowError's in a number of issues, including Issue #440 and Issue #603."NaNinder12305/31/17, 12:45:50 AMadded copyright header1
1076Persist gsonTudor Dragantudorgk05/03/17, 01:26:17 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1077NullPointerException on toJsonTree()gauravtyagi7701/02/19, 11:58:48 AM"Hi,

I am getting below error but not every time it comes once in a month while running. Not able to reach exact root cause so please help.

2017-05-08 08:51:02,228 ERROR [pool-36-thread-5] c.n.f.t.p.t.m.FormattedMessage [FormattedMessage.java:252] Message generation in formatted message class -->java.lang.NullPointerException
	at com.google.gson.Gson.getAdapter(Gson.java:353)
	at com.google.gson.Gson.toJson(Gson.java:578)
	at com.google.gson.Gson.toJsonTree(Gson.java:479)
	at com.google.gson.Gson.toJsonTree(Gson.java:458)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

Library version i am using is gson-2.2.2 .""Gson 2.2.2 has been released [5 years ago](https://github.com/google/gson/releases/tag/gson-2.2.2). Can you reproduce the issue on the latest version? =||= I know it's an old version but I am unable to change it as it is in my production environment on which this issue is coming and can not change version in production . I need to know if this was issue in existing version and changed in newer versions than I may try. =||= Thanks for such an immediate response. =||= I saw the same behavior on 2.1 only once in 5000 attempts and I can not reproduce it. Yes I can upgrade it but I am not if this is problem with my application or GSON. Does anyone know the root cause for this?  =||= If we use and initialize shared GSON object in multi threading environment then this exception occurs randomly. 
Please use below code in synchronized manner and make sure only one thread initialize this object once.
GsonBuilder gsonBuilder = new GsonBuilder();
Gson gson = gsonBuilder.create(); =||= I have a static gson builder from which every thread creates its Gson object. Did you have a similar setup? It has failed only twice for me and I can reproduce it. Which makes it even more hard to debug. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1078Gson keep parse my Double value to Long valueDo Hong Haiseatkgames05/25/17, 05:58:55 PM"Hi GSON team,

I used GSON 2.8.0 and today i faced a problem when trying to parse a JSON String into Map<String, Object>. GSON keep parse my Double value into Long value and i don't know why.

My json to test
`String testJson = ""{\""dropLatitude\"":10.801679,\""dropLongitude\"":-106.5986286}"";`

My parsing code:
```
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.registerTypeAdapter(new TypeToken<Map<String, Object>>() {
        }.getType(), new GsonMapDeserializer());

        son = gsonBuilder.create();

        Type type = new TypeToken<Map<String, Object>>() {
        }.getType();

        Map<String, Object> myMap = son.fromJson(testJson, type);
        Console.gI().log(""Test json "" + testJson + "" parse "" + myMap.size());
        for (Map.Entry<String, Object> entry : myMap.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            String valueString = value.toString();

            System.out.println("""" + key + ""("" + key.getClass() + "")"" + ""=>"" + valueString + ""("" + value.getClass() + "")"");
        }
```

And the result logs:
```
dropLatitude(class java.lang.String)=>10.801679(class java.lang.Double) 
dropLongitude(class java.lang.String)=>-106(class java.lang.Long)
```

But when i try to parse like this, the value return right
`String testJson = ""{\""dropLatitude\"":10.801679,\""dropLongitude\"":106.5986286}"";`

```
dropLatitude(class java.lang.String)=>10.801679(class java.lang.Double)
dropLongitude(class java.lang.String)=>106.5986286(class java.lang.Double)
```

I don't know if this is a bug. When i try to parse a Double value that < 0, GSON parse wrong.""Can anyone support me please? Point me if i do something wrong, thank you very much :) =||= Ask this question on Stackoverflow... =||= Map of String,Object is not a very smart idea.
Use, String,Double? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1080how should i convert a map to json String with gsonwykCNwykCN06/22/17, 04:27:44 PM"My code likes:
```

    @Test
    public void testGsonTransferMap(){
        HashMap<String, Object> map = new HashMap<String, Object>() {{
            put(""Request"", new HashMap<String ,Object>(){{
                put(""Data"",new HashMap<String,Object>(){{
                    put(""NWExID"", ""7019"");
                    put(""OrgOrderNo"", ""123"");
                    put(""OrgTransDate"", ""20170518"");
                }});
            }});
        }};
        Gson gson = new Gson();
        Type gsonType = new TypeToken<HashMap<String ,Object>>(){}.getType();
        String gsonString = gson.toJson(map,gsonType);
        System.out.println(gsonString);
    } 

```

and the output is : ""{}""
so,what's wrong with my code , how should i do.""You are trying to serialize an anonymous inner class. Don't. =||= All other json implementations I can find seems to handle this well, while `new Gson().toJson()` returns null when I give it an one-liner map:

    Map map = new HashMap() {{ put(""hei"", ""sann""); }};
    new Gson().toJson(map);  // returns null!

Other implementations works as expected:

    new JSONObject(map).toString();             // returns {""hei"":""sann""}
    JsonOutput.toJson(map);                     // returns {""hei"":""sann""}
    new ObjectMapper().writeValueAsString(map); // returns {""hei"":""sann""}

It works if I wrap the map:

    new Gson().toJson(new HashMap(map));  // returns {""hei"":""sann""}

A regular map works too:

    map = new HashMap();
    map.put(""hei"", ""sann"");
    new Gson().toJson(map);  // returns {""hei"":""sann""}

Is this an expected Gson feature, @NightlyNexus ?

I've created a test project at https://github.com/henrik242/map2json
 

 =||= Yes. This is working as intended. =||= This has been fixed in Gson new version, tested with gson-2.8.5.jar  =||= what about to throw exception if anonymous inner class? (instead of returning just ``""null""``) =||= Running @wykCN's code with gson-2.8.5.jar (under openjdk-1.8) still returns ""{}"".
Using anonymous inner class is convinent and elegant, why gson doesn't support it? =||= > Running @wykCN's code with gson-2.8.5.jar (under openjdk-1.8) still returns ""{}"".
> Using anonymous inner class is convinent and elegant, why gson doesn't support it?

In my case it still returns null with version 2.8.6 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1081exclude NULL from JsonArray while de-serializing jsonharshharsh-mittal02/10/20, 10:35:48 AM"I receive an invalid json (extra comma in the end of the list) in request body, which is being successfully deserialized by GSON library. On inspection I see that GSON is inserting a NULL object in the end.

    {
	    ""content"": ""Test 2"",
	    ""timestamp"": 1494311947530,
	    ""entities"": [
		    {""name"": ""entity1""},
		    {""name"": ""entity2""},
		    {""name"": ""entity3""},
		    {""name"": ""entity4""},
		    {""name"": ""entity5""},
	    ]
    }

Is there a way by which I can either instruct GSON not to accept invalid json or remove NULL objects from JsonArray.

I have tried registering type adapter for Set.class but I can't proceed further with this solution as it is not possible to get `Type` of the parameterized object.

    public class RemoveNullCollectionSerializer<T> implements JsonDeserializer<Set<T>> {
        @Override
        public Set<T> deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext context) throws JsonParseException {
            JsonArray elements = jsonElement.getAsJsonArray();

            Set<T> result = new HashSet();
            for (JsonElement element : elements) {
                if (element.isJsonNull()) continue;

                T value = (T) context.deserialize(element, Object.class);
                result.add(value);
            }
            return result;
        }
    }
"Is there any solution to solve this problem?  =||= check out [this](https://stackoverflow.com/a/44066592/2225648) answer by @lyubomyr-shaydariv  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1083kotlin's default value don't work benli.shibeilly05/23/17, 02:30:59 AM"when i deserialize json without the “age”， it give “0” not the default value(""18"")
![qq 20170523102034](https://cloud.githubusercontent.com/assets/7353956/26335936/d8923d88-3fa1-11e7-80ce-13239f244326.png)"This is also true in Java. You need a zero-arg constructor for it to work. Add default values to all properties and add `@JvmOverloads` to the constructor =||= Or write a reflection-based type adapter using kotlin-reflect. You can copy the Moshi one for inspiration. =||= Thanks，Add default values to all properties，it work. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1086Convert a map initialized by inner class to JSON is null?xho2205/25/17, 02:22:34 PM"        Map<String, Integer> overviewData1 = new ConcurrentHashMap<String, Integer>() {
            {
                put(""1"", 44);
                put(""2"", 44);
            }
        };
        Map<String, Integer> overviewData2 = new ConcurrentHashMap<>();
        overviewData2.put(""1"", 44);
        overviewData2.put(""2"", 44);

        System.out.println(GSON.toJson(overviewData1)); // output null
        System.out.println(GSON.toJson(overviewData2)); // correct

The Fastjson in this place is all right."Gson doesn't not serialize anonymous classes as it has no way to deserialize them. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1088Gson when used in a javaagent premain makes the JVM very unstable Cody Laedervalarauca05/30/17, 09:29:31 PM"### Usecase:

I was using gson within a javaagent premain to load configuration for how to modify the byte code of other classes. Effectively `gson` was loading a list of `class.methods`, and within this method the user would declare `LocalIndex + Method` in order to get a debug output _of_ that variable before that method call.

This was being done via JavaAgent -> Premain -> ClassLoader

### Expected Result:

- [x] Data from `gson` would be loaded properly
- [x] Class loader would be passed to the JVM with data from `gson` to filter classes by user specification.
- [x] ClassLoader debug output would dump matching classes names in `stdout`
- [ ] ClassLoader would then dump matching method names + locals into `stdout`.

### Actual Result:

The JVM crashes. Because it cannot load `java.lang.invoke.MethodHandleNatives`. This happens within `gson` deserialize call I'm making this is roughly.

[CrashLog](https://pastebin.com/jVnuDmiV)

```java
public static void premain(String agentArgs, Instrumentation inst) {
   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string
   LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);
   inst.addTransformer(new TransformEntry(data), true);
}
```

### Work Around: (kind of)

```java
public static void premain(String agentArgs, Instrumentation inst) {
   ClassLoader cl = ClassLoader.getSystemClassLoader();
   cl.loadClass(""java.lang.invoke.MethodHandleImpl"");
   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string
   LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);
   inst.addTransformer(new TransformEntry(data), true);
}
```

Except this doesn't work. *and down the rabbit hole we go*.

Within `TransformEntry` I'm using [ASM](http://asm.ow2.org/) to manage my bytecode transformations. Even with the `ClassReader.append(new MyVisitorClass(), ClassReader.EXPAND_FRAMES)` set I'll never see that classes have **ANY** methods except `<init>()V`. 

If I just do

```java
public static void premain(String agentArgs, Instrumentation inst) {
  ClassLoader cl = ClassLoader.getSystemClassLoader();
  cl.loadClass(""java.lang.invoke.MethodHandleImpl"");
   String utf8str = loadUTF8(agentArgs); //this is a static call to open the file, and load it in UTF8 string
   //LoadedData data = new GsonBuilder.setLenient().create().load(utf8str, LoadedData.class);
   inst.addTransformer(new TransformEntry(), true);
}
```

Now ASM works properly. So I'm really confused. Even with the above fix and ASM acting _slightly_ unstable I'll see random crashes periodically elsewhere within even the core app or premain.

### Platform Data

```
$ java -version
openjdk version ""1.8.0_131""
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)

$ uname -a
Linux cody-x1 4.4.0-78-generic #99-Ubuntu SMP Thu Apr 27 15:29:09 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux

$ uname -r
4.4.0-78-generic
```"I've done some deeper digging it isn't actually `gson` this deals with how the JVM `premain` semantics of startup. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1089crashMyeongwon-Kang05/29/17, 03:27:02 PM"Error while using gson 2.8.


Fatal Exception: java.lang.NoClassDefFoundError: Failed resolution of: Lcom/google/gson/internal/
       at com.google.gso.<clinit>(TypeAdapters.java:426)
       at com.google.gson.Gson.<init>(Gson.java:199)
       at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)

device : Galaxy Note5""This is either a problem with your packaging of the APK or a problem with
the OS on the device. There's no action to take on our part.

On Mon, May 29, 2017, 4:09 AM Myeongwon-Kang <notifications@github.com>
wrote:

> Error while using gson 2.8.
>
> Fatal Exception: java.lang.NoClassDefFoundError: Failed resolution of:
> Lcom/google/gson/internal/
> at com.google.gso.(TypeAdapters.java:426)
> at com.google.gson.Gson.(Gson.java:199)
> at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)
>
> device : Galaxy Note5
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1089>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEcMPQ3WOqimzVCLc608HedDniwk4ks5r-n0ggaJpZM4NpBC5>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1090JsonWriter#value(java.lang.Number) can be lenient, but JsonWriter#value(double) can't,MikeMiha-x6405/31/17, 04:50:45 PM"In lenient mode, JsonWriter#value(java.lang.Number) can write pseudo-numeric values like `NaN`, `Infinity`, `-Infinity`:
```java
    if (!lenient
        && (string.equals(""-Infinity"") || string.equals(""Infinity"") || string.equals(""NaN""))) {
      throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);
    }
```

But JsonWriter#value(double) behaves in different way: 
```java
    if (Double.isNaN(value) || Double.isInfinite(value)) {
      throw new IllegalArgumentException(""Numeric values must be finite, but was "" + value);
    }
```

So, while working with streaming, it's impossible to write semi-numeric value without boxing a double (e. g. `out.value((Number) Double.valueOf(Double.NaN))`).

I think, this should be possible, because boxing gives worse performance."Can you create a Pull Request with a JUnit test that fails? Even better would be a fix that makes the test pass. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1091Made deepCopy publicInderjeet Singhinder12305/31/17, 05:33:38 PMNaNNaNMade deepCopy publicInderjeet Singhinder12305/31/17, 05:33:38 PMNaNNaNInderjeet Singh05/31/17, 05:29:29 PMsince 2.8.21
1092Deserialize JSON non-fp literals to Long by defaultAndrey Mogilevamogilev06/03/17, 04:47:02 AM"See issue #1084.

Before this fix, ObjectTypeAdapter deserialized both fp and non-fp
literals to Double. In case of very big numbers, it caused undesired
rounding, as Double cannot fit large integers without loosing precision.

From now on, a JSON integer literal (without a decimal point) is mapped
to Long if it fits into Long ranges. The JSON literals with decimal
point, and out-of-range integer literals are still mapped to Double.""Doesn't it break backwards compatibility? =||= In practice, there are two changes which may affect backward compatibility:

1) Some numbers de-serialized as Objects (i.e. by ObjectTypeAdapter) may change the resulting type from Double to Long. That is exactly what fixes the issue, so I guess it is fine. Although toString() may change (e.g. from ""5.0"" to ""5""), I cannot imagine a reason to compare this other than in Unit tests. 

2) Numbers de-serialized as Number (by TypeAdapters.NUMBER) change from LazilyParsedNumber to Long or Double. This part is optional, but made for consistency. And I guess nobody would really cast to LazilyParsedNumber in their code.
 =||= This is not backwards compatible and I’m not willing to burden Gson’s userbase with the costs of this change. =||= Sorry, we can't break backward compatibility =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1093value(double) can write NaN and infinite values when lenient, as value(Number) doesMikeMiha-x6405/31/17, 04:50:45 PMFixes #1090."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If you signed the CLA as a corporation, please let us know the company's name.

<!-- need_sender_cla --> =||= I've signed it. =||= CLAs look good, thanks!

<!-- ok --> =||= "value(double) can write NaN and infinite values when lenient, as value(Number) doesMikeMiha-x6405/31/17, 04:50:45 PMFixes #1090.NaNmike05/31/17, 08:19:57 AMFixed JsonWriter#value(double) to write infinite and NaN values when lenient, as JsonWriter#value(Number) does. (fixes #1090)1
10962.8.1 can't serialize and deserialize date null (2.8.0 works fine)Alessandro Scarozzaxanscale10/10/17, 02:30:49 PM"```
W/System.err: com.google.gson.JsonParseException: The date should be a string value
W/System.err:     at com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:96)
W/System.err:     at com.google.gson.DefaultDateTypeAdapter.read(DefaultDateTypeAdapter.java:40)
W/System.err:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:129)
W/System.err:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:220)
W/System.err:     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
W/System.err:     at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:82)
W/System.err:     at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(CollectionTypeAdapterFactory.java:61)
```

https://github.com/google/gson/blob/b8f616c939c652b8540c95fa2b377b8c628ef3ff/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java#L95

this will trows JsonParseException
```
    if (in.peek() != JsonToken.STRING) {
      throw new JsonParseException(""The date should be a string value"");
    }
```

this is my conf
`new GsonBuilder().serializeNulls().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS"").create()`""Can you create a PR with a failing test? Thanks. =||= Having similar issue in serialization.
```
Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"").create()
gson.toJson(myObjectWhoContainsNullDates)
```
throws `NullPointerException` from Gson 2.8.1
2.8.0 works fine.

if you remove `setDateFormat` serialization works  
```
Gson gson = new GsonBuilder().create()
gson.toJson(myObjectWhoContainsNullDates)
``` =||= Faced the same issue with 2.8.1.
2.8.0 works well. =||= Hi,

This is my workaround for this bug, waiting for 2.8.2:

    private Gson getGson() {
        // Trick to get the DefaultDateTypeAdatpter instance
        // Create a first instance a Gson
        Gson gson = new GsonBuilder()
                .setDateFormat(DATE_FORMAT_COMPLETE)
                .create();

        // Get the date adapter
        TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);

        // Ensure the DateTypeAdapter is null safe
        TypeAdapter<Date> safeDateTypeAdapter = dateTypeAdapter.nullSafe();

        // Build the definitive safe Gson instance
        return new GsonBuilder()
                .registerTypeAdapter(Date.class, safeDateTypeAdapter)
                .create();
    }

Hope it will help

BR =||= Nice @bmarty . 
I get the impression the last `.setDateFormat(DATE_FORMAT_COMPLETE)` is not needed. You actually defined within the safeDateTypeAdapter all the details to parse the date. =||= @rafa0809 yes, indeed! =||= Facing the same .
Edit: @bmarty solution worked for me. And also the 2.8.0 worked fine. =||= >  TypeAdapter<Date> safeDateTypeAdapter = dateTypeAdapter.nullSafe();

it worked for me @bmarty 
thank you =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1098Gson 2.8.1 DefaultDateTypeAdapter is not null safe.Eric CochranNightlyNexus07/19/17, 01:37:52 PM"```java
public void testNullSafe() throws IOException {
  TypeAdapter<Date> date =
    new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss Z"").create().getAdapter(Date.class);
  assertNull(date.fromJson(""null""));
}
```
fails.
The recent change to the streaming adapter unfortunately broke some backwards compatibility for some of my projects."Dupe of #1096 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1099Add failing DefaultDateTypeAdapterTest case.Eric CochranNightlyNexus06/08/17, 06:18:40 PM"referencing #1096 and #1098.
I'm not sure where the correct place to fix the problem is. In GsonBuilder or in the DefaultDateTypeAdapter itself?"">I'm not sure where the correct place to fix the problem is. In GsonBuilder or in the DefaultDateTypeAdapter itself?

It looks like the `DefaultDateTypeAdapter` itself.  All internal type adapters in `com.google.gson.internal.bind.TypeAdapters` use the nullability check. However, the nullability case was not tested in older pre-stream tests, therefore I missed the nullability point in b8f616c939c652b8540c95fa2b377b8c628ef3ff.

I think this PR can be closed since I have fixed the issue in #1100. =||= Great! Thank you! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1100Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contractLyubomyr Shaydarivlyubomyr-shaydariv09/18/17, 06:49:14 AM"Regression in:

* b8f616c939c652b8540c95fa2b377b8c628ef3ff - Migrate DefaultDateTypeAdapter to streaming adapter (#1070)

Bug reports:

* #1096 - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)
* #1098 - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.
* #1095 - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?""What about writing null values?

As I alluded to earlier, I'd be tempted to say use `TypeAdapter.nullSafe()`, but, like you said, the other internal TypeAdapters do the null check themselves. So, it's probably worth being consistent.
 👍  =||= @NightlyNexus  Thanks for spotting another issue! Pushed 435cc9f05ad2cd159be22b17ba160a7d2851cdac. =||= #1095 =||= #1145 =||= 🤦‍♂️  ^ forgive my gaffe above.

Is this something that can be merged soon? =||= 👍  =||= "Fixed DefaultDateTypeAdapter nullability issue and JSON primitives contractLyubomyr Shaydarivlyubomyr-shaydariv09/18/17, 06:49:14 AM"Regression in:

* b8f616c939c652b8540c95fa2b377b8c628ef3ff - Migrate DefaultDateTypeAdapter to streaming adapter (#1070)

Bug reports:

* #1096 - 2.8.1 can't serialize and deserialize date null (2.8.0 works fine)
* #1098 - Gson 2.8.1 DefaultDateTypeAdapter is not null safe.
* #1095 - serialize date sometimes TreeTypeAdapter, sometimes DefaultDateTypeAdapter?"NaNLyubomyr Shaydariv06/08/17, 06:42:17 PMFixed DefaultDateTypeAdapter nullability on write1
1101Kotlin var does not save generic type (deserialized to LinkedTreeMap instead)Egor Neliubaegor-n06/26/17, 06:55:29 AM"```kotlin
data class BigClass(var inBig: Map<String, List<SmallClass>>? = null)
data class SmallClass(var inSmall: String? = null)

fun main(args: Array<String>) {
    val json = """"""
{
    ""inBig"": {
        ""key"": [
            { ""inSmall"": ""hello"" }
        ]
    }
}
""""""

    val deserialized = Gson().fromJson(json, BigClass::class.java)
    println(deserialized.inBig!![""key""]!![0].inSmall) // should print ""hello"" but throws instead
}
```

Executing the code above will lead to the following Exception:

```
Exception in thread ""main"" java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to SmallClass
	at MyClass.main(MyClass.kt:18)
```

The `List<SmallClass>` is actually deserialized to `List<LinkedTreeMap>`.

However, if I changed the definition of `inBig ` variable to be a constant, then it deserializes just fine:

```
data class BigClass(val inBig: Map<String, List<SmallClass>>? = null)
```

I changed `var` to `val` and the code prints ""hello"" as expected.

Kotlin 1.1.1 and Gson 2.8.1.""I have run `javap` on both cases and here are the results:

```
// `BigClass` with `val inBig` is compiled to
public final class BigClass {
  private final java.util.Map<java.lang.String, java.util.List<SmallClass>> inBig;
  public final java.util.Map<java.lang.String, java.util.List<SmallClass>> getInBig();
  // ...
}

// `BigClass` with `var inBig` is compiled to
public final class BigClass {
  private java.util.Map<java.lang.String, ? extends java.util.List<SmallClass>> inBig;
  public final java.util.Map<java.lang.String, java.util.List<SmallClass>> getInBig();
  // ...
}
```

The `var` case adds `? extends` in front of the `java.util.List<SmallClass>`. =||= Yes, I have same problem, but this issue reproduce only in some devices =||= yep, you probably want `@JvmSuppressWildcards`.
https://github.com/google/dagger/issues/668#issuecomment-289713497 =||= Yes, looks like annotating the `List` with `@JvmSuppressWildcards` helps:

```kotlin
data class BigClass(var inBig: Map<String, @JvmSuppressWildcards List<SmallClass>>? = null)
``` =||= Seems like Gson supports wildcard types, though – see #39 and [this test](https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java#L271). =||= Also, when using Jackson, it works just fine without an annotation. =||= I have done some more research and it seems like Kotlin is not at fault. Gson fails with the same exception for the following Java class (which is similar to the Kotlin one in the issue description):

```java
class BigClass {
    Map<String, ? extends List<SmallClass>> inBig;
}

// ...

class SmallClass {
    String inSmall;
}
``` =||= Closed in favor of #1107. =||= after adding in data class ```@JvmSuppressWildcards(suppress = true)``` to problematic field I still get ```LinkedTreeMap```

```
@JvmSuppressWildcards(suppress = true)
    @SerializedName(""patient"")
    @Expose
    var patient: Any? = null
``` =||= as not worked so and not works, why the problem is considered solved? @egor-n  =||= @abbath0767 this is a duplicate of #1107. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1103Avoid NPE in PostConstructAdapterFactoryNiv Singernivs06/20/17, 01:04:20 AMThe RawType's Superclass might be null. This happens, for example, when the type is a collection."Can you include a test case that demonstrates the bug? =||= Test case added. Without the fix it causes a NPE.

```
java.lang.NullPointerException
	at com.google.gson.typeadapters.PostConstructAdapterFactory.create(PostConstructAdapterFactory.java:36)
	at com.google.gson.Gson.getAdapter(Gson.java:423)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
	at com.google.gson.Gson.getAdapter(Gson.java:423)
	at com.google.gson.Gson.fromJson(Gson.java:886)
	at com.google.gson.Gson.fromJson(Gson.java:852)
	at com.google.gson.Gson.fromJson(Gson.java:801)
	at com.google.gson.Gson.fromJson(Gson.java:773)
	at com.google.gson.typeadapters.PostConstructAdapterFactoryTest.testList(PostConstructAdapterFactoryTest.java:45)

``` =||= 👍  =||= "Avoid NPE in PostConstructAdapterFactoryNiv Singernivs06/20/17, 01:04:20 AMThe RawType's Superclass might be null. This happens, for example, when the type is a collection.NaNNiv Singer06/19/17, 07:22:57 PMImprove the code quality of PostConstructAdapterFactoryTest1
1104gson-extras is not available as a Maven artifactNiv Singernivs06/19/17, 09:44:08 PM"`gson-extras` is not distributed as part of the main artifact, and there is no independent artifact for it.
This leads to either including the source code, or relying on [3rd party artifacts](https://mvnrepository.com/artifact/org.danilopianini/gson-extras) (outdated).""That is by design. We have no intention of maintaining backward compatibility on extras. You should include source-code. =||= It seems there is now a `gson-extras` artifact available. Is it an official artifact? Was the decision mentioned in @inder123's comment changed? 

https://mvnrepository.com/artifact/com.google.code.gson/gson-extras/2.8.5 =||= It is not an official artifact. Not sure how it got there. =||= The link: https://mvnrepository.com/artifact/com.google.code.gson/gson-extras/2.8.5

It's not on Maven Central. The page says:

```
Note: this artifact it located at CronApp repository (https://artifactory.cronapp.io/public-release/)
``` =||= I am currently maintaining a build of gson-extras and shipping it to Central.
https://search.maven.org/artifact/org.danilopianini/gson-extras/ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1105Fix well formed exceptionStefan M.StefMa06/23/17, 04:32:04 PM"The previous exception was styled in the following way:
... [""DATE']...
This commit will fix the different quote marks and replace the "" with '"👍  =||= Fix well formed exceptionStefan M.StefMa06/23/17, 04:32:04 PM"The previous exception was styled in the following way:
... [""DATE']...
This commit will fix the different quote marks and replace the "" with '"NaNStefMa06/23/17, 01:20:21 PM"Fix well formed exception

The previous exception was styled in the following way:
... [""DATE']...
This commit will fix the different quote marks and replace the "" with '"1
1106Unable to deserialize a map of generic objectslauradP12/29/17, 07:43:00 PM"Hi, I'm trying to deserialize the following json map:
```
{
   ""result"":true,
   ""duration"":""3603.312"",
   ""output-json"":""smb://usr:pwd@172.17.0.8/secured/file.json"",
   ""success"":true,
   ""isValid"":""true"",
   ""output-xml"":""smb://usr:pwd@172.17.0.8/secured/file.xml""
}
```
but I get the following result:

- result => java.lang.Object@202d8fd4;
- duration => java.lang.Object@241d929c;
- output-json => java.lang.Object@3e16d488;
- success => java.lang.Object@5f916590;
- isValid => java.lang.Object@138e0299;
- output-xml => java.lang.Object@5bcfeb06


I use the following code to deserialize maps:
```
public Map<String, Object> deserializeMapOfObj(String jsonString) {
		Gson gson = new Gson();
		Map<String, Object> result = gson.fromJson(jsonString, new TypeToken<Map<String, Object>>() {}.getType());
		return result;
	}
```

Is there any error? Can you help me deserializing this map?

Thanks, 
Laura
""using your code above:
```java
String json = ""{\n""
    + ""   \""result\"":true,\n""
    + ""   \""duration\"":\""3603.312\"",\n""
    + ""   \""output-json\"":\""smb://usr:pwd@172.17.0.8/secured/file.json\"",\n""
    + ""   \""success\"":true,\n""
    + ""   \""isValid\"":\""true\"",\n""
    + ""   \""output-xml\"":\""smb://usr:pwd@172.17.0.8/secured/file.xml\""\n""
    + ""}"";
System.out.println(deserializeMapOfObj(json));
```
prints
`{result=true, duration=3603.312, output-json=smb://usr:pwd@172.17.0.8/secured/file.json, success=true, isValid=true, output-xml=smb://usr:pwd@172.17.0.8/secured/file.xml}`

Do you have a reproducible test case to show the problem? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1109Reflected TypeAdapter does not respect Gson FieldNamingPolicyFrancisco SaldañaFrankSalad07/04/17, 01:32:09 AM"Initially reported https://github.com/square/retrofit/issues/2383

The adapter returned by `gson.getAdapter(TypeToken)` creates its `boundFields` mapping using  camelCased field names instead of field names determined by the `FieldNamingPolicy` used to configure the Gson instance. 

When this adapter [is then used](https://github.com/square/retrofit/blob/master/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonResponseBodyConverter.java) to read an object, underscore_cased field names are not resolved to a field using the [lookup](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L216) so their deserialization is skipped. ""Sorry! It was my mistake. This is not broken, it totally works. My fields were actually camelCased and I was using the wrong `FieldNamingPolicy` 🥇 

![image](https://confessionsofa20somethingklutz.files.wordpress.com/2014/04/sleepy-homer_lurking.gif)
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1111gson 2.8.1 toJson NullPointerException bug magicbest07/05/17, 03:56:36 AM"Using gson2.8.1, set ""Gson gson = new GsonBuilder().setDateFormat(""yyyyMMddHHmmss"").create();"".
When the object which needs to be serialized into Json has Date type attribute, and the value of that attribute is null, using method ""toJson"" will throw NullPointerException. gson2.8.0 does not have this problem under same situation."Dupe #1098 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1113  compile 'com.google.code.gson:gson:2.4'，will happen ANR(anroid 4.42,but 7.0 is ok).white_or_blacklucklyperson07/19/17, 01:38:32 PM"this issue happened the Android 4.4.2.But the 7.0 is ok.This is the build gradle.
 compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:support-v4:24.2.1'
    compile project(':easeui')
    compile project(':pulltorefresh_library')
    compile files('libs/butterknife-7.0.1.jar')
    compile files('libs/umeng-analytics-v6.0.9.jar')
    compile files('libs/eventbus-3.0.0.jar')
    compile files('libs/alipaySdk-20161222.jar')
    compile files('libs/wechat-sdk-android-with-mta-1.0.2.jar')
    compile 'com.youth.banner:banner:1.4.9'
    compile 'com.android.support:recyclerview-v7:24.2.1'
    compile 'com.meiqia:meiqiasdk:3.4.0@aar'
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'
    compile 'com.google.code.gson:gson:2.4'"It's not clear why you think Gson causes this. =||= ok,i have handler it.thank you. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1114Getting more done in GitHub with ZenHubSylvie BERTRANDsylvie1979107/10/17, 10:10:40 PM"Hola! @sylvie19791 has created a [ZenHub](http://www.zenhub.com) account for the **google** organization. ZenHub is the only project management tool integrated natively in GitHub – created specifically for fast-moving, software-driven teams.

----

#### How do I use ZenHub?

To get set up with ZenHub, all you have to do is **[download the browser extension](https://www.zenhub.com?utm_source=ZHOnboarding)** and log in with your GitHub account. Once you do, you’ll get access to ZenHub’s complete feature-set immediately.

#### What can ZenHub do?

ZenHub adds a series of enhancements directly inside the GitHub UI:

- Real-time, customizable task boards for GitHub issues;
- Multi-Repository burndown charts, estimates, and velocity tracking based on GitHub Milestones;
- Personal to-do lists and task prioritization;
- Time-saving shortcuts – like a quick repo switcher, a “Move issue” button, and much more.

### [Add ZenHub to GitHub](https://www.zenhub.com?utm_source=ZHOnboarding)

_Still curious? See [more ZenHub features](https://www.zenhub.com/features?utm_source=ZHOnboarding) or read [user reviews](https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd/reviews). This issue was written by your friendly ZenHub bot, posted by request from @sylvie19791._

![ZenHub Board](https://cloud.githubusercontent.com/assets/8771909/11153956/233ac4a8-89f1-11e5-94b1-1569d3f38b4d.png)"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1115How to skip the field when the exception “java.lang.IllegalStateException” occurred？李志敏AndSync07/12/17, 01:40:57 PM"Model
```
public class Result<User> {
    private String code;
    private String msg;
    private User data;

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public User getData() {
        return data;
    }

    public void setData(User data) {
        this.data = data;
    }
}
```
Api result

Success

```
{
    ""code"":200,
    ""msg"":""success"",
    ""data"":{
               ""name"":""zhangsan"",
                ""age"":18
             }
}
```

Failure
```
{
    ""code"":401,
    ""msg"":""success"",
    ""data"":[]
}
```
or
```
{
    ""code"":401,
    ""msg"":""success"",
    ""data"":""""
}
```
When the result  is Failure the The exception occurred
```
java.lang.IllegalStateException: Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 23 path $.data
```
I just want to skip the field ""data"" because it is unused when the failure result,
And keep the other fields. not an exception

how can I do???""Annotate the `data` field with `@JsonAdapter` and write a `TypeAdapter` for `User` which checks for a string or array and turns them into whatever `User` value you want in that case (like `null`).

This is a usage question and so best asked on StackOverflow. Issues are for feature requests and bugs with test cases only. =||= `data` maybe is a string,list and so on,can use `TypeAdapter` to skip` data`? =||= @JakeWharton How did you solve this problem? User class is a generic. =||= @FlyInTheSkyToMe 
好家伙，这么久了还问
```Kotlin
interface TAny
```
```Kotlin
class EmptyCheckTypeAdapterFactory : TypeAdapterFactory {

    override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
        // We filter out the EmptyCheckTypeAdapter as we need to check this for emptiness!
        if (TAny::class.java.isAssignableFrom(type.rawType)) {
            val delegate = gson.getDelegateAdapter(this, type)
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            return EmptyCheckTypeAdapter(delegate, elementAdapter).nullSafe()
        }
        return null
    }

    class EmptyCheckTypeAdapter<T>(
        private val delegate: TypeAdapter<T>,
        private val elementAdapter: TypeAdapter<JsonElement>
    ) : TypeAdapter<T>() {

        @Throws(IOException::class)
        override fun write(out: JsonWriter, value: T) {
            this.delegate.write(out, value)
        }

        @Throws(IOException::class)
        override fun read(reader: JsonReader): T? {
            val jsonElement = elementAdapter.read(reader)
            if (jsonElement == null || jsonElement.isJsonNull)
                return null
            val jstring = jsonElement.toString()
            if (TextUtils.isEmpty(jstring) || ""\""\"""" == jstring)
                return null
            val asJsonObject = jsonElement.asJsonObject
            return if (asJsonObject.entrySet().isEmpty()) null else this.delegate.fromJsonTree(
                asJsonObject
            )
        }
    }

}
```
```Kotlin
GsonBuilder().registerTypeAdapterFactory(EmptyCheckTypeAdapterFactory()).create()
```
要跳过的实体类继承TAny就可以了 =||= @JakeWoki 好的，谢谢！ 我带会儿去学习学习。 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1116Update GsonBuilder.javaAyoAyoPrez12/29/17, 07:41:34 PMA small improvement in readability"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1118Gson parse json,double value loss precisioniamzjiamzj07/15/17, 08:47:36 PMmy json contains double value like 5.00,but gson parse it to 5.0,how to deal with this problem?"Numbers represent values and not display formats. 5.00 and 5.0 are
numerically equivalent. If you want something like 5.00 it should be
represented as a string.

On Fri, Jul 14, 2017 at 11:57 PM iamzj <notifications@github.com> wrote:

> my json contails double value like 5.00,but gson parse it to 5.0,how to
> deal with this problem?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1118>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEQf8WnilOfDAC-8sXWtbujOANrOFks5sODiPgaJpZM4OY6Es>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1119ProtoTypeAdapter uses wrong case format to find repeated field's generic type via reflectionOri Schwartzorischwartz09/18/17, 06:46:53 AM"`fieldNameSerializationFormat` is a converter from protobuf case format -> json case format.

When deserializing json -> protobuf, `ProtoTypeAdapter` uses reflection to determine the Java field name of a repeated protobuf field (to obtain its generic type).

The Java protobuf implementation always uses lower camel case for its field names, but `ProtoTypeAdapter` was using the caller-specified proto->json converter. 

Before this PR, if the JSON case format didn't produce the same name as lower camel, deserialization would fail.

This PR:
* Removes the `Converter` and instead stores both proto and json `CaseFormat`s so the json `CaseFormat` can be referenced.
* Fixes the field name translation used in reflection so it always converts to lower camel.
* Adds deserialization and serialization unit tests on a protobuf with a repeated field name that exposes the error."Anything I can do to help get this merged/reviewed? Thanks! =||= 👍  =||= ProtoTypeAdapter uses wrong case format to find repeated field's generic type via reflectionOri Schwartzorischwartz09/18/17, 06:46:53 AM"`fieldNameSerializationFormat` is a converter from protobuf case format -> json case format.

When deserializing json -> protobuf, `ProtoTypeAdapter` uses reflection to determine the Java field name of a repeated protobuf field (to obtain its generic type).

The Java protobuf implementation always uses lower camel case for its field names, but `ProtoTypeAdapter` was using the caller-specified proto->json converter. 

Before this PR, if the JSON case format didn't produce the same name as lower camel, deserialization would fail.

This PR:
* Removes the `Converter` and instead stores both proto and json `CaseFormat`s so the json `CaseFormat` can be referenced.
* Fixes the field name translation used in reflection so it always converts to lower camel.
* Adds deserialization and serialization unit tests on a protobuf with a repeated field name that exposes the error."NaNOri Schwartz07/19/17, 02:13:25 PMJava protobuf uses lower camel for all field names. When using reflection to find the generic type of repeated fields, can't use the user specified formats for field name conversion.1
1120DefaultDateTypeAdapter does not serialize null valueskbudaeus07/19/17, 01:38:04 PM"The following code gives a NPE:

```
class WrapperObject {
        Date date = null;
        WrapperObject() {};
    }
        
Gson parser = new GsonBuilder().serializeNulls().setDateFormat(DateFormat.LONG, DateFormat.LONG).create();
WrapperObject wrapper = new WrapperObject();
String jsonString = parser.toJson(wrapper);
System.out.println(jsonString);
```

With the following stack trace:

```
        java.lang.NullPointerException
	at java.util.Calendar.setTime(Calendar.java:1770)
	at java.text.SimpleDateFormat.format(SimpleDateFormat.java:943)
	at java.text.SimpleDateFormat.format(SimpleDateFormat.java:936)
	at java.text.DateFormat.format(DateFormat.java:345)
	at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)
	at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)
```

The DefaultDateTypeAdapter should handle null values. E.g.:

```
    public void write(JsonWriter out, Date value) throws IOException {
        synchronized (localFormat) {
            // Fix to deal with null values.
            if (value == null) {
                out.nullValue();
            }
            else {
                String dateFormatAsString = enUsFormat.format(value);
                out.value(dateFormatAsString);
            }
        }
    }
```"Dupe of #1096 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1121fix javaDocIgor Mysakimysak07/20/17, 10:49:51 PMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_author_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1122fix javaDocIgor Mysakimysak07/21/17, 05:12:25 PMNaNThanks =||= fix javaDocIgor Mysakimysak07/21/17, 05:12:25 PMNaNNaNIgor Mysak07/20/17, 10:45:46 PMfix javaDoc1
1123Export extra folder to maven centralYonni Chencheninator09/09/21, 08:37:03 PMCurrently, only https://github.com/google/gson/tree/master/gson is available on maven central and it would be nice to have https://github.com/google/gson/tree/master/extras also available. Thus, we can reuse the type adapters for deserializing nested interfaces"The classes in there are not versioned nor have API stability guarantees.

On Fri, Jul 21, 2017, 12:43 PM Yonni CHEN <notifications@github.com> wrote:

> Currently, only https://github.com/google/gson/tree/master/gson is
> available on maven central and it would be nice to have
> https://github.com/google/gson/tree/master/extras also available. Thus,
> we can reuse the type adapters for deserializing nested interfaces
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1123>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZTp0C7X7bJVU1-Kaud_X2jkbHZGks5sQNU0gaJpZM4Ofow_>
> .
>
 =||= If you need them, you can use this package: https://search.maven.org/artifact/org.danilopianini/gson-extras/ =||= See also https://github.com/google/gson/issues/1104

Is the fact that there are no compat guarantees a blocker for publishing an artifact? Version 0.x would be pretty clear that it's not stable. + A documentation in Readme.md that it exists, but use at your own. =||= @TWiStErRob, I know it's not the same as having google publishing the package themselves, but I am keeping the artifact mentioned before aligned with the mainline. I also intend (and help is welcome) to automate the pull / release. =||= We don't have plans to publish new Gson-related artifacts to Maven Central. (We will continue to publish updated versions of existing ones.) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1125"Request - Annotation for specific fields to not print as ""Pretty""?"Deleted userghost07/26/17, 11:22:48 PM"**Example class:**
```
public class Example {
    @Expose int a;
    @Expose boolean b;
    @Expose String c;
    @Expose int[] d; //Would be nice if we could get something like.. @Compact, which would bypass the pretty formatting.
}
```

**Pretty Output:**

> {
>   ""a"": 999,
>   ""b"": false,
>   ""c"": ""Lalalala"",
>   ""d"": [
>     0,
>     1,
>     2,
>     3,
>     4
>   ]
> }

**Desired Output:** (Mostly pretty formatting, except for array ""d"")

> {
>   ""a"": 999,
>   ""b"": false,
>   ""c"": ""Lalalala"",
>   ""d"": [0,1,2,3,4]
> }

Is this already possible? If not, I'd like to suggest adding a new custom annotation which would indicate that the field does not want to be formatted ""pretty"".. such as an annotation called Compact "This is not supported. If you need a custom formatter you'll have to supply it yourself iterating over a JsonObject model representation. Gson doesn't want to be in the business of formatting JSON and dealing with all the crazy customizations therein. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1126Kotlin Support :)MarcinmarcinOz07/28/17, 01:15:15 PMKotlin Data Classes and default values support pls :)"This isn't going to happen. A third-party project can provide support or
you can take a look at Moshi which supports this.

On Fri, Jul 28, 2017, 2:03 PM marcinOz <notifications@github.com> wrote:

> Kotlin Data Classes and default values support pls :)
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1126>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEVHP2oouGjGCWzhLNk5fsWca0fCyks5sSc4UgaJpZM4OmhZv>
> .
>
 =||= Also, provide a no-args constructor and this already works.

On Fri, Jul 28, 2017, 3:14 PM Jake Wharton <jakewharton@gmail.com> wrote:

> This isn't going to happen. A third-party project can provide support or
> you can take a look at Moshi which supports this.
>
> On Fri, Jul 28, 2017, 2:03 PM marcinOz <notifications@github.com> wrote:
>
>> Kotlin Data Classes and default values support pls :)
>>
>> —
>> You are receiving this because you are subscribed to this thread.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/google/gson/issues/1126>, or mute the thread
>> <https://github.com/notifications/unsubscribe-auth/AAEEEVHP2oouGjGCWzhLNk5fsWca0fCyks5sSc4UgaJpZM4OmhZv>
>> .
>>
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1128Fix StackOverflowError on resolving types with TypeVariable recursionAndrey Mogilevamogilev07/31/17, 05:50:30 PM"Sample failing code:
  private static class TestType<X> {
    TestType<? super X> superType;
  }
  ...
  new Gson().getAdapter(TestType.class);"👍  =||= Thank you for a test that demonstrates the problem! =||= Fix StackOverflowError on resolving types with TypeVariable recursionAndrey Mogilevamogilev07/31/17, 05:50:30 PM"Sample failing code:
  private static class TestType<X> {
    TestType<? super X> superType;
  }
  ...
  new Gson().getAdapter(TestType.class);"NaNAndrey Mogilev07/31/17, 05:16:34 PMfix build errors1
1129Stream Base64-String to JsonWriterFabian Zeindlfab1an12/29/17, 07:38:40 PMWhen using a `JsonWriter`, is it possible to directly output a base64 String loaded from the file-system without having to construct the entire String in memory first?"Sure. use JsonWriter(Writer) constructor? =||= No, I mean I'm somewhere deep in a hierarchy using a `JsonWriter` to construct a stream.

Then I want to add a `String` with using `.value(str)` but rather stream it directly into the `JsonWriter`.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1130"support hidden fields, fix IllegalArgumentException ""... declares multiple JSON fields named ..."""Andrey Mogilevamogilev12/28/17, 12:45:21 AM"Before this fix, an attempt to serialize a class with a hidden field
(e.g. class C2 defined as below:
  class C1 { String f; }
  class C2 extends C1 { String f; }
)
failed with IllegalArgumentException with a message like ""C2 declares multiple JSON fields named f"".

This is fixed by mangling the hidden fields with a ""^i"" suffix, where i is the number of the field-declaring class in the chain of super-classes, e.g. ""f^1"" stands for the hidden field ""f"" declared in the first super-class of the class being serialized.

So, JSON for C2 now may look like {""f"":""c2Field"", ""f^1"":""c1Field""}"This seems like a non-standard convention. We wouldn't want to support it unless it was accepted practice in some JSON standard. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1132Gson conversion errorzhaoyunxingzhaoyunxing9208/02/17, 03:48:04 AM"```java
 @Override
    public Map<String, Object> getProjectByUserUuId(ProjectForm form) {
        Map<String, Object> map = new HashMap<>();
        List<ProjectVo> pros = projectMapper.selectProjectByUserUuId(form);
        int count = projectMapper.selectProjectCountByUserUuId(form);
        
        //Here's the problem        
        map.put(""pros"", pros);
        map.put(""count"", count);
        return map;
    }
```
when you put a list in a map, it's wrong to use gson
what should I do

>error:
class com.sunny.bugmanage.project.model.vo.ProjectVo declares multiple JSON fields named serialVersionUID
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1134fix typo in ConstructorConstructor exceptionTom Magnussontommagnusson08/03/17, 02:56:25 PMSimple typo fix in `com.google.internal.ConstructorConstructor` exception message."Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= I signed the CLA agreement. =||= CLAs look good, thanks!

<!-- ok --> =||= "fix typo in ConstructorConstructor exceptionTom Magnussontommagnusson08/03/17, 02:56:25 PMSimple typo fix in `com.google.internal.ConstructorConstructor` exception message.NaNTom Magnusson08/03/17, 01:28:31 PMfix typo in ConstructorConstructor exception1
1139newBuilder() APIWarren Smithnaturalwarren07/20/18, 12:47:54 AMFor the pour souls that aren't on Moshi would a PR be welcomed that adds a `newBuilder` API to `Gson`?Sure, good idea. =||= Shouldn't this be closed since #1142 was merged and released already? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1140fromJson() hangs and silently crashes with graphics Pathdenisdjdance08/14/17, 04:30:10 AM"I need to serialize Path object and faced with weird impossibility. App just stops.

Let's place a simple test right in onCreate()

```
    import com.google.gson.Gson;
    import android.graphics.Path;

    ...

    Gson g=new Gson();
    Path p=new Path();
    p.addRect(0,0,100,100, Path.Direction.CCW);
    String s=g.toJson(p).toString(); 
    p = g.fromJson(s, Path.class); //(1)

```
run the app and wait ~5-15 sec. First it hangs, then will silently crash. If you comment the string (1), it will work. If you change (1)'s Path.class to p.getClass() or new TypeToken&lt;Path>(){}.getType() - it will not help. So the reason is in fromJson.

I tried 4 devices with SDK from 17 to 25, and behavior is the same. What's wrong, how to store Path to JSON? my assumption is infinite Path's loop, which is confusing GSON.""You should never serialize an object that is outside of your control and which weren't explicitly designed for serialization. In this example, the internals of Path are an implementation detail. The correct way to serialize this would be to register a TypeAdapter for the type and use its public API to decide what representation you want in JSON.

In Moshi, the spiritual successor to Gson, we actually forbid serializing anything in the android.* package by default unless you register a manual adapter to define the JSON format. Unfortunately it's too late to change Gson to do the same.

As to the actual cause here, your guess of a reference cycle in the implementation details of Path is the cause. =||= thank you for the detailed answer.
I've spent >2 hours trying to store Path, thus let this issue helps another men.

The simple solution of such a task is some workaround with creating parallel ArrayList to store changes in path, i.e. you leave path for fast drawing, but use array for serializing. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1141Make GsonBuilder.create() factory order idempotent.Warren Smithnaturalwarren08/14/17, 03:56:16 PM"Calling `GsonBuilder.create()` multiple times results in the builder's underlying hierarchy factory list being reversed.

This change copies hierarchy factories to a new local list when `GsonBuilder.create()` is called so subsequently calls don't result in a change in factory ordering."NaNMake GsonBuilder.create() factory order idempotent.Warren Smithnaturalwarren08/14/17, 03:56:16 PM"Calling `GsonBuilder.create()` multiple times results in the builder's underlying hierarchy factory list being reversed.

This change copies hierarchy factories to a new local list when `GsonBuilder.create()` is called so subsequently calls don't result in a change in factory ordering."NaNWarren Smith08/14/17, 03:21:33 PMUse better initializer.1
1142Add newBuilder() APIWarren Smithnaturalwarren09/21/17, 01:53:10 AM"Addresses #1139 

`Gson.newBuilder()` returns `GsonBuilder`

Few changes here:
- Increases visibility of `Gson` member variables so they can be seen by `GsonBuilder`
- Adds additional member variables to `Gson` to save state required to transform `Gson` back to `GsonBuilder`""@inder123 What do you think about this? =||= @inder123 @swankjesse Is there interest in this? We'd find it particularly useful in our stack for sharing Gson instances but if there isn't I can abandon.  =||= This built fine locally, CI is having trouble:

```
0.01s$ mvn -f gson install -DskipTests=true
Error: JAVA_HOME is not defined correctly.
  We cannot execute /usr/lib/jvm/java-7-oracle/bin/java
The command ""mvn -f gson install -DskipTests=true"" failed and exited with 1 during .
``` =||= @JakeWharton  This looks interesting. I am inclined to accept, what do you think? =||= I'm fine with it, yes.

On Mon, Sep 18, 2017 at 2:52 AM inder123 <notifications@github.com> wrote:

> @JakeWharton <https://github.com/jakewharton> This looks interesting. I
> am inclined to accept, what do you think?
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1142#issuecomment-330140542>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEESTjC8aingVr3qhW30ruwN4O7Asaks5sjhNGgaJpZM4O2pvA>
> .
>
 =||= 👍  =||= "Add newBuilder() APIWarren Smithnaturalwarren09/21/17, 01:53:10 AM"Addresses #1139 

`Gson.newBuilder()` returns `GsonBuilder`

Few changes here:
- Increases visibility of `Gson` member variables so they can be seen by `GsonBuilder`
- Adds additional member variables to `Gson` to save state required to transform `Gson` back to `GsonBuilder`"NaNWarren Smith09/12/17, 12:35:10 AMReduce visibility of GsonBuilder constructor.1
1144GSON deserialize value of JSON property to Nullsidswnt08/17/17, 02:12:58 AM"I have json String userJson = {""id"" : ""2221"", ""name"" : ""xyz"" }

I am using following code to deserialize it to User class :

```
Gson gson = new Gson();
User user  = gson.fromJson(userJson, User.class}
```

And I am getting User class with id : null and name : null.

Can someone tell me where I am making mistake ?""Works fine for me:
```java
public class Blah {
  public static void main(String[] args) {
    String json = ""{\""id\"" : \""2221\"", \""name\"" : \""xyz\"" }"";
    User user = new Gson().fromJson(json, User.class);
    System.out.println(user.id);
    System.out.println(user.name);
  }
}

class User {
  public final String id;
  public final String name;

  User(String id, String name) {
    this.id = id;
    this.name = name;
  }
}
```
```
2221
xyz
```
If you think you have a bug please provide a failing test case like above. Otherwise for usage questions StackOverflow and the 'gson' tag is your best bet. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1145"call new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create().toJson exception.[2.8.1]"yuli1324408/23/17, 04:58:25 AM"when a pojo object with null-value field and use ""GsonBuilder().setDateFormat(""yyyy-MM-dd"")"",will throw exception.

code:
//data class
class Person{
  private Date age;
  //getter setter
}

//demo
Gson gson = new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();
Person p = new Person(); //age is null
System.out.println(gson.toJson(p));

//exception
Exception in thread ""main"" java.lang.NullPointerException
	at java.util.Calendar.setTime(Calendar.java:1770)
	at java.text.SimpleDateFormat.format(SimpleDateFormat.java:943)
	at java.text.SimpleDateFormat.format(SimpleDateFormat.java:936)
	at java.text.DateFormat.format(DateFormat.java:345)
	at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)
	at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)
	at com.google.gson.Gson.toJson(Gson.java:669)
	at com.google.gson.Gson.toJson(Gson.java:648)
	at com.google.gson.Gson.toJson(Gson.java:603)
	at com.google.gson.Gson.toJson(Gson.java:583)
"@lyubomyr-shaydariv  I get it , thank you. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1146fix issue #1107: resolve element type in wildcard collection typesAndrey Mogilevamogilev09/22/17, 12:50:42 AM"This change fixes of detecting element types by method $Gson$Types.getCollectionElementType() when the generic collection type is declared using wildcards. For example, for the collection type ""? extends List&lt;Something&gt;"" it shall extract ""Something"" as the element type. 

This change fixes issue #1107."👍  =||= fix issue #1107: resolve element type in wildcard collection typesAndrey Mogilevamogilev09/22/17, 12:50:42 AM"This change fixes of detecting element types by method $Gson$Types.getCollectionElementType() when the generic collection type is declared using wildcards. For example, for the collection type ""? extends List&lt;Something&gt;"" it shall extract ""Something"" as the element type. 

This change fixes issue #1107."NaNAndrey Mogilev08/19/17, 09:26:00 AMfix Codacy warnings1
1148Kotlin null safetyVolodymyr Kropyvkovkropivko09/06/17, 12:17:27 PM"Hi, 
When there is a field with a null value, it is written to the notnull field in the Kotlin object. How to make sure that the default value is not overwritten by null"You would need to write a custom `TypeAdapter` which used Kotlin's reflection library to call the primary constructor and set values via properties. Moshi has an adapter you can port to Gson if you want: https://github.com/square/moshi/blob/master/kotlin/src/main/java/com/squareup/moshi/KotlinJsonAdapter.kt, but we won't be adding one to Gson. =||= Thank you =||= Hi, does anybody know about solution for Gson? I found https://github.com/sargunv/gson-kotlin but it seems to have some flaws with primitive types (see [issue 3](https://github.com/sargunv/gson-kotlin/issues/3)), also, reusing full reflection seems quite heavy. Or is it better to switch to other library? =||= Try https://github.com/ansman/kotshi =||= Hi, just curious what's the reason behind not supporting/planning to support it in Gson? does it require a huge refactoring or something? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1149Run Unit and Instrumentation Test in Fastlane with EmulotorMuthukathiravanMurugasan09/06/17, 12:15:58 PMHow to integrate the instrumentation and unit test in FastLane Please ask usage questions on StackOverflow with the 'gson' tag. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1150[FEATURE-REQUEST] Make com.google.gson.Gson non-finalllech09/08/17, 02:00:43 PM"The issue: class com.google.gson.Gson has 'final' classifier. I see no rationale behind it, but very strong rationale against: this makes Gson extremely unfriendly to use in service-oriented architecture.

For example, I've tried to export Gson instance as Service in OSGi container and failed to do that, because framework was not able to create proxy for class with 'final' modifier (It's what that modifier is meant for). Of course it's possible to create wrapping interfaces or factories, but it requires creating extra layers and dependencies, which could be easily avoided by removing that classifier. ""The class is not designed for inheritance is the rationale.

On Thu, Sep 7, 2017 at 4:18 AM llech <notifications@github.com> wrote:

> The issue: class com.google.gson.Gson has 'final' classifier. I see no
> rationale behind it, but very strong rationale against: this makes Gson
> extremely unfriendly to use in service-oriented architecture.
>
> For example, I've tried to export Gson instance as Service in OSGi
> container and failed to do that, because framework was not able to create
> proxy for class with 'final' modifier (It's what that modifier is meant
> for). Of course it's possible to create wrapping interfaces or factories,
> but it requires creating extra layers and dependencies, which could be
> easily avoided by removing that classifier.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1150>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEESfc068Jl3TlqP6DhOas56BLS-Ewks5sf6btgaJpZM4PPdA0>
> .
>
 =||= And what is the rationale behind designing class that way? I've heard claims that the code runs a few percent faster, but at the cost of being incompatibile with any modern Java framework. 
If there were some tests prooving any significant performance impact, maybe they should be re-run under java 8? =||= It has nothing to do with performance. It's a design decision. All classes
should be final by default unless they're explicitly designed for
inheritance.

Considering Gson's widespread adoption it would seem almost all modern Java
frameworks (a group in which I would not put OSGi) are doing just fine.

On Thu, Sep 7, 2017 at 10:01 AM llech <notifications@github.com> wrote:

> And what is the rationale behind designing class that way? I've heard
> claims that the code runs a few percent faster, but at the cost of being
> incompatibile with any modern Java framework.
> If there were some tests prooving any significant performance impact,
> maybe they should be re-run under java 8?
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1150#issuecomment-327808668>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEeEvntLie-UVbuJ6rnjVJdcNdqYPks5sf_c6gaJpZM4PPdA0>
> .
>
 =||= I understand your point of view, but it represents a paradigma, which is no longer valid. The whole development of java in at least last 10 years has gone in opposite direction. 
Making classes final without really good reason is a big anti-pattern because practically any enterprise java framework uses proxies, so any final class that could otherwise be used as a service, for example, is a big pain that must be dealt with wrapper classes. 
That design decisions were made in times before spring, blueprint or CDI have practically monopolized java world, so it's the high time to review them. It would not affect people who do not use such frameworks, all other would profit. =||= Well except the opposite of everything you said is what's true. 10 years
ago people weren't making things final and now we know better. No one from
the libraries you list has come asking for non-final types in any of the
projects we manage. And you haven't addressed the fact that we're opening
up the class to inheritance despite it not being designed for it which
limits our options in the future.

On Thu, Sep 7, 2017 at 10:23 AM llech <notifications@github.com> wrote:

> I understand your point of view, but it represents a paradigma, which is
> no longer valid. The whole development of java in at least last 10 years
> has gone in opposite direction.
> Making classes final without really good reason is a big anti-pattern
> because practically any enterprise java framework uses proxies, so any
> final class that could otherwise be used as a service, for example, is a
> big pain that must be dealt with wrapper classes.
> That design decisions were made in times before spring, blueprint or CDI
> have practically monopolized java world, so it's the high time to review
> them. It would not affect people who do not use such frameworks, all other
> would profit.
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1150#issuecomment-327815305>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEXIpSqQjNRgyfrgZlyi-TZ06fSGaks5sf_x1gaJpZM4PPdA0>
> .
>
 =||= I'm very confused by your remark about not addressing the opening up the class to inheritance because it's exactly the starting point of the discussion...  Or you're addressing only a first part of my request, because the second one is exactly the explanation. 

Or should I understand, that you've made a design decision that should prevent directly using Gson as a service in service oriented architecture not possible? Or you consider that every moder framework should be able to remove final modifier runtime? (how would this work in OSGi? the service consumer would get a modified class from registry, but non-modified class from package import...)

I've created a wrapper class in separate bundle. I have one project extra. I fail to see any benefit of being forced to do that... =||= The starting point was to enable proxies, not inheritance, and they're not
the same thing. One is very damaging to our control to compile-time usage
and the other is a side-effect of a runtime requirement.

Nothing about Gson prevents using it in service-oriented architecture
because it's an architecture. The final bit prevents its use directly in
your implementation of said architecture because of the choices of that
implementation. And now you're trying to leak that implementation's
restrictions to all your libraries. This is not adequate justification for
us to remove the final bit (ignoring the fact you haven't addressed the
inheritance problem).

You can investigate a javaagent to remove the final bit at classload time
to enable proxying. This allows every library to retain the final bit and
prevent inheritance at compile time but have it removed such that you can
proxy it at runtime. Libraries like Mockito 2 do this. Otherwise, wrapping
is a logic approach.

On Fri, Sep 8, 2017 at 4:58 AM llech <notifications@github.com> wrote:

> I'm very confused by your remark about not addressing the opening up the
> class to inheritance because it's exactly the starting point of the
> discussion... Or you're addressing only a first part of my request, because
> the second one is exactly the explanation.
>
> Or should I understand, that you've made a design decision that should
> prevent directly using Gson as a service in service oriented architecture
> not possible? Or you consider that every moder framework should be able to
> remove final modifier runtime? (how would this work in OSGi? the service
> consumer would get a modified class from registry, but non-modified class
> from package import...)
>
> I've created a wrapper class in separate bundle. I have one project extra.
> I fail to see any benefit of being forced to do that...
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1150#issuecomment-328045524>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEVAx4SWzMM4MBMByyPYaD5QN_qPeks5sgQGugaJpZM4PPdA0>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1151Update fromJson Javadoc.Nels Beckmannbeckman09/18/17, 07:08:23 AMFor the string-based fromJson() method, mention that the result will be null if the given string is empty.NaNUpdate fromJson Javadoc.Nels Beckmannbeckman09/18/17, 07:08:23 AMFor the string-based fromJson() method, mention that the result will be null if the given string is empty.NaNNels Beckman09/08/17, 05:02:56 PM"Update fromJson Javadoc.

For the string-based fromJson() method, mention that the result will be null if the given string is empty."1
1152java.lang.securityExceptionkailandrewhamili09/09/17, 01:43:50 PM"Caused by: java.lang.SecurityException: Can not make a java.lang.reflect.Field constructor accessible

I am experiencing this runtime error when deserializing JSON to Java object.

That error does not show up on Android API 17 up to API 21 (API 22 not tested). It show on API 23 and up.""You should not have a Field in your model. Either move it outside or mark it transient. =||= What do you mean?

This is my Model:

`public class ProductList extends Model {

    @Column(name=""productId"")
    public Integer productId;

    @Column(name=""productName"")
    public String productName;

    @Column(name=""productTypeId"")
    public Integer productTypeId;

    @Column(name=""amount"")
    public double amount;` =||= Then it's in Model or the subclass that whatever library you are using is
generating.

On Sat, Sep 9, 2017, 10:03 AM kailandrewhamili <notifications@github.com>
wrote:

> What do you mean?
>
> This is my Model:
>
> `public class ProductList extends Model {
>
> @Column(name=""productId"")
> public Integer productId;
>
> @Column(name=""productName"")
> public String productName;
>
> @Column(name=""productTypeId"")
> public Integer productTypeId;
>
> @Column(name=""amount"")
> public double amount;`
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1152#issuecomment-328279215>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEX4NLdYH4op-AsxGvnk0MjRLBj7Uks5sgpqrgaJpZM4PR_S8>
> .
>
 =||= Can you please check my repository 'SmarAirportApp' i have an assumption that Gson does not work on Nougat and up. =||= Gson is used by tens or maybe hundreds of thousands of apps which run on
Nougat and above. Something is putting a java.lang.reflect.Field into an
object that you are passing to Gson. It's probably another library or tool
which is rewriting your classes. Based on your @Column annotation I'll take
a wild guess that it's either Realm or ObjectBox, and you should consult
the authors of that library as to the best way to deal with what they're
doing in order to use Gson.

On Sat, Sep 9, 2017 at 8:55 PM kailandrewhamili <notifications@github.com>
wrote:

> Can you please check my repository 'SmarAirportApp' i have an assumption
> that Gson does not work on Nougat and up.
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1152#issuecomment-328312558>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEeicEhdfd4715AgNQv5m1TrppCsfks5sgzNtgaJpZM4PR_S8>
> .
>
 =||= Okay. I'll try to remove those annotations and I'll see if it works. =||= I use Gson together with ActiveAndroid. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
11532.8.2 release?Éamonn McManuseamonnmcmanus09/20/17, 02:06:29 AMAny chance of a 2.8.2 release? We're running into #1128, which was fixed by https://github.com/google/gson/commit/03a72e752ef68269990f984c9fd613cfd59224bc.Let's do it this week. Thanks. =||= Maybe we cut this as 2.9 if #1142 makes it into the release? =||= Done http://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.2/ =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1154mismatch size of array response if we have comma after last item in arrayIvanivk180009/15/17, 02:58:26 AM"example json response: 

> {
>   ""items"": [
>     {
>       ""id"": 1
>     },
>     {
>       ""id"": 2
>     }**,**
>   ]
> }
> 

items is array. so if we have comma after last item in array, we have issue here:
size of ArrayList after json parsing via Gson library is 3, but in fact item at index 2 is null.
is it correct? 
if we check our example  via online validator(http://json.parser.online.fr/ , https://jsonlint.com/), we will see that our json is incorrect.

May be it will be better to throw JsonSyntaxException

version gson 2.8.1"This is the behavior when in lenient mode, which is tragically the Gson default. You can get strict behavior by using `gson.typeAdapter(typeToken).fromJson(gson.newJsonReader(json))` instead of `gson.fromJson(json, typeToken)`. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1155Gson Proguard Config Warren Smithnaturalwarren09/15/17, 04:05:08 PM"The sample proguard config specifies to keep `sun.misc`. This seems really strange since that package ships with the runtime. 

https://github.com/google/gson/blob/d9cc7bc60b492664fe9f328d1bab9f9ae873f4d4/examples/android-proguard-example/proguard.cfg#L10

Should we update the proguard config to use don't warn? This seems to the precedent:

RxJava: https://github.com/ReactiveX/RxJava/issues/1415
PlayServices: https://github.com/krschultz/android-proguard-snippets/issues/116
""The 'android-proguard-snippets' repo is a tragedy of the commons and should never be used to justify correct rules.

But yeah, this should be `-dontwarn`. Want to PR? =||= Will do, thanks Jake. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1156gson:2.8.0 proguard issuephanthoa09/15/17, 02:56:01 AM"File proguard-rules.pro
-keepattributes Signature

# For using GSON @Expose annotation
-keepattributes *Annotation*

# Gson specific classes
-keep class sun.misc.Unsafe { *; }
#-keep class com.google.gson.stream.** { *; }

# Application classes that will be serialized/deserialized over Gson
-keep class com.google.gson.examples.android.model.** { *; }

# Prevent proguard from stripping interface information from TypeAdapterFactory,
# JsonSerializer, JsonDeserializer instances (so they can be used in @JsonAdapter)
-keep class * implements com.google.gson.TypeAdapterFactory
-keep class * implements com.google.gson.JsonSerializer
-keep class * implements com.google.gson.JsonDeserializer"It's unclear to me what the ask is here. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1157problem serializing null Date in version 2.8.1Davidchinhub200109/15/17, 01:35:32 PM"Hello,

I was using gson 2.8.0 in my project and I had no problem at all, but after updating to 2.8.1 an exception is thrown serializing to json an object which has a null Date field.

this is the class code where the problem is:

```
public class CollectionAdapterGson implements JsonSerializer<Collection<?>> {

    @Override
    public JsonElement serialize(Collection<?> src, Type typeOfSrc, JsonSerializationContext context) {
        if (src == null || src.isEmpty()) // exclusion is made here
            return null;

        JsonArray array = new JsonArray();

        for (Object child : src) {
            JsonElement element = context.serialize(child);
            array.add(element);
        }

        return array;
    }
}
```


If the ""child"" object is something like this
```
class MyClass{
   Date myDate = null;
  ...
}
```

I've got following exception:
`java.lang.NullPointerException: Attempt to invoke virtual method 'long java.util.Date.getTime()' on a null object reference
                                                                  at java.util.Calendar.setTime(Calendar.java:1195)
                                                                  at java.text.SimpleDateFormat.formatImpl(SimpleDateFormat.java:518)
                                                                  at java.text.SimpleDateFormat.format(SimpleDateFormat.java:820)
                                                                  at java.text.DateFormat.format(DateFormat.java:314)
                                                                  at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:88)
                                                                  at com.google.gson.DefaultDateTypeAdapter.write(DefaultDateTypeAdapter.java:40)
                                                                  at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
                                                                  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)
                                                                  at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)
                                                                  at com.google.gson.Gson.toJson(Gson.java:669)
                                                                  at com.google.gson.Gson.toJsonTree(Gson.java:562)
                                                                  at com.google.gson.Gson.toJsonTree(Gson.java:541)
                                                                  at com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)
                                                                  at com.asdf.services.serialize.CollectionAdapterGson.serialize(CollectionAdapterGson.java:25)`

Any ideas what's going on?

Thanks!!!"Dupe of #1096 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1158Update proguard rules to not warn on sun.misc package.Warren Smithnaturalwarren09/15/17, 04:04:29 PMAddresses #1155.NaNUpdate proguard rules to not warn on sun.misc package.Warren Smithnaturalwarren09/15/17, 04:04:29 PMAddresses #1155.NaNWarren Smith09/15/17, 03:18:32 PMDont warn on sun.misc package.1
1159ConcurrentModificationException in CollectionTypeAdapterFactory$AdapterPhillipLoki-Afro09/19/17, 01:15:45 PM"Hi,
according to https://groups.google.com/forum/#!topic/google-gson/Vju1HuJJUIE gson is thread safe however I am facing the following exception from time to time with gson 2.8.0

```
 Exception in thread ""Thread-17"" java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)
	at java.util.ArrayList$Itr.next(ArrayList.java:851)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:96)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243)
	at com.google.gson.Gson.toJson(Gson.java:669)
	at com.google.gson.Gson.toJson(Gson.java:648)
	at com.google.gson.Gson.toJson(Gson.java:603)
```"The Gson object is threadsafe, yes, but serialization of user objects is not. You should either make a defensive copy or use a lock when an object needs serialized but can also be manipulated from other threads concurrently. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1160How to add FieldAttributes in JsonDeserializer interface?ycyc25601/26/18, 02:25:58 AM"    public static Date convertDateFromJson(String json) throws ParseException {
			if (json == null || json == """") {
				return null;
			}
			if (!json.contains(""Date"")) {
				SimpleDateFormat dataFormat = new SimpleDateFormat(receiveDateFormat);
				return dataFormat.parse(json);
			}
			json = json.replace(""Date"", """").replace(""+0800"", """").replace('\\',
					' ').replace('/', ' ').replace('(', ' ').replace(')', ' ')
					.trim();
			return new Date(Long.parseLong(json));
		}`
I want custom 'receiveDateFormat' through @interface value."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1161Upgraded plugin versionsInderjeet Singhinder12309/20/17, 01:37:00 AMNaNNaNUpgraded plugin versionsInderjeet Singhinder12309/20/17, 01:37:00 AMNaNNaNInderjeet Singh09/20/17, 01:16:13 AMUpgraded plugin versions1
1162Proguard configsmohammadzzz09/23/17, 04:44:18 PM"Hi. I looked into documents and didn't find anything about proguard. Is there any thing related to Gson to add in our proguard file?

thanks in advance""ProGuard rules are under examples/

https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1163No user guide section on how to add library using Gradle Talha Hasan Ziatalhahasanzia09/29/17, 10:44:36 PM"No section in [user guide](https://github.com/google/gson/blob/master/UserGuide.md) to show how we can add this library using gradle.

An [answer ](https://stackoverflow.com/questions/29549421/is-there-an-easier-way-to-add-gson-to-my-project)at Stack Overflow discusses that and provides a package link for gradle.

```
dependencies {
    compile 'com.google.code.gson:gson:2.8.2'
}
```

Shouldnt be this mentioned in the user guides or somewhere for a noob developer like me?

Regards,
Me.""Good point. Added it to readme
https://github.com/google/gson/blob/master/README.md =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1164"I want to parse array but the value in json string is """""Joy WhaleJoy-Whale09/28/17, 01:49:35 PM"json:
```
{
  ""user"":[
    {
      ""name"": ""a"",
      ""interest"": [
        ""game"",
        ""music""
      ]
    },
    {
      ""name"": ""b"",
      ""interest"": """"
    }
  ]
}
```

bean:
```
class User{
  String name;
  List<String> interest;
}
```

I want parse the json String to User list, but the 'interest' value of 'b' is """", so the Gson will not work, how should I do to parse the empty string value as a empty list"Please ask general usage questions on StackOverflow with the 'gson' tag. This issue tracker is for bug reports and feature requests only. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1165Invalid LOC header (bad signature)pushbit09/28/17, 12:57:36 PMI'm using Eclipse Neon.3 and the m2e plugin.  When depending on Gson 2.8.2, the `Gson` class cannot be resolved.  If I try to open it in Eclipse (Maven Dependencies > gson-2.8.2.jar > com.google.gson > Gson.class), I get an error, `java.util.zip.ZipException: invalid LOC header (bad signature)`.  Other files, like JsonArray.class, open fine.  Depending on 2.8.1 resolves this.  Just maybe something to watch out for in the next release."Seems I just had a corrupt download.  Deleting my `.m2/repository/com/google/code/gson/gson/2.8.2` directory and updating the Maven project resolved it. =||= Hi, i have the same problem, but i dont know how to delete that .m2 file and dont know how to find it. can u help me?
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1166User Guide: primitive missing entries in JSON Elliotte Rusty Haroldelharo10/08/17, 05:12:10 PM"The user guide states, ""While deserializing, a missing entry in JSON results in setting the corresponding field in the object to null.""

This is incomplete. What happens when the missing entry in the JSON is a primitive type such as boolean or int that cannot be null?"Right, those are set to default values. Feel free to send a PR with edits. Thanks =||= I can send a PR but this issue should be reopened until the PR is committed.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1167API report for GsonAndrey P.lvc12/29/17, 07:35:39 PM"Hi,

I'd like to share report on API changes and backward binary compatibility for the Gson library with the community: https://abi-laboratory.pro/java/tracker/timeline/gson/

The report is generated by the https://github.com/lvc/japi-tracker tool, which I've created recently. The basic https://github.com/lvc/japi-compliance-checker tool verifies changes in all public API methods and classes according to the article https://wiki.eclipse.org/Evolving_Java-based_APIs_2.

Hope it will be helpful for users and maintainers of the library to be aware of past and future API changes.

Thank you.

![gson-2](https://user-images.githubusercontent.com/1517837/31372734-df0b6ed4-ad9f-11e7-9197-d756235ab961.png)

![gson-1](https://user-images.githubusercontent.com/1517837/31372735-df277a70-ad9f-11e7-80df-3cf484d7bc43.png)""Good info. Added it to the README.md
Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1168Gson change default Boolean Value to false if the field doesn't exist in jsonFaraz Khonsarifarazbern10/11/17, 02:04:44 PM"I have  model like  this 

  ```
  public class testModel {
    
        public boolean a = true;
        public Test2 test2 = new Test2();
    
        public class Test2 {
            public boolean b = true;
        }
    }
```

and a  json like this

  ```
  {
    ""test2"":{}
    }

```
when i parse this json with Gson 

```
    testModel testModel = new Gson().fromJson(""{ \""test2\"":{}}"", testModel.class);
        Log.e(""test"", testModel.a + "" "" + testModel.test2.b);
      
```
and the log is:
 

`    E/test: true false `

testModel.a is 'true'  but testmodel.test2.b is 'false' 
why Gson changed the default value of b while b is not exist in json?
what is the difference between b and a ?

is it a Gson bug?
i used 2.8.1 version of Gson

""TestModel has a no-arg constructor while Test2 implicitly has one that
takes an instance of TestModel. Mark Test2 as a static class and it will
work.

On Wed, Oct 11, 2017, 6:34 AM Faraz Khonsari <notifications@github.com>
wrote:

> I have model like this
>
> public class testModel {
>
>       public boolean a = true;
>       public Test2 test2 = new Test2();
>
>       public class Test2 {
>           public boolean b = true;
>       }
>   }
>
> and a json like this
>
> {
>   ""test2"":{}
>   }
>
>
> when i parse this json with Gson
>
>     testModel testModel = new Gson().fromJson(""{ \""test2\"":{}}"", testModel.class);
>         Log.e(""test"", testModel.a + "" "" + testModel.test2.b);
>
>
> and the log is:
>
> E/test: true false
>
> testModel.a is 'true' but testmodel.test2.b is 'false'
> why Gson changed the default value of b while b is not exist in json?
> what is the difference between b and a?
>
> is it a Gson bug?
> i used 2.8.1 version of Gson
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1168>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEd2zgxqixFQpMmwvRZWARalYrR7Hks5srJm1gaJpZM4P1QcE>
> .
>
 =||= @JakeWharton  yes it  solved my problem . thank you for quick answer =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1169Clarify handling of non-object omitted fieldsElliotte Rusty Haroldelharo10/28/17, 11:41:26 PM"fix ##1166

@inder123 While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.

Also added some missing periods and corrected one word. "Looks like there's a flaky test. Someone with commit rights may need to restart it. =||= Thank you! =||= Clarify handling of non-object omitted fieldsElliotte Rusty Haroldelharo10/28/17, 11:41:26 PM"fix ##1166

@inder123 While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.

Also added some missing periods and corrected one word. "NaNElliotte Rusty Harold10/11/17, 08:14:38 PM"Clarify handling of non-object omitted fields

While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans."1
1170"can't analyze ""="" in the object value"pinkerpinker-god10/12/17, 08:06:48 PM"```
 String expected = ""{\""driver\"":\""com.mysql.jdbc.Driver\"", \""password\"":\""password123456\"",\""url\"":\""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\"", \""username\"":\""username123456\"", \""port\"":\""0\""}"";
    String actual = new Gson().toJson(result);
    System.out.println(actual);
    System.out.println(expected);
```
**output**
```
{""driver"":""com.mysql.jdbc.Driver"",""password"":""password123456"",""url"":""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\u003dUTF-8"",""username"":""username123456"",""port"":""0""}
{""driver"":""com.mysql.jdbc.Driver"",""password"":""password123456"",""url"":""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8"",""username"":""username123456,""port"":""0""}
```
we can find the value of url is analyse incorrectly and in which ""="" is parsed ""\u003d""""`\u0036` is the character `6`. If you think you have a bug, please provide a failing test case that reproduces the problem. =||= Of course
```
@Test
  public void test() throws Exception {
    DataSourceConfig result = new DataSourceConfig(""com.mysql.jdbc.Driver"", ""password123456"", ""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8"", ""username123456"", ""0"");
    String expected = ""{\""driver\"":\""com.mysql.jdbc.Driver\"",\""password\"":\""password123456\"",\""url\"":\""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\"",\""username\"":\""username123456\"",\""port\"":\""0\""}"";
    String unexpected = ""{\""driver\"":\""com.mysql.jdbc.Driver\"",\""password\"":\""password123456\"",\""url\"":\""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\\u003dUTF-8\"",\""username\"":\""username123456\"",\""port\"":\""0\""}"";
    assertNotEquals(expected, new Gson().toJson(result));
    assertEquals(unexpected, new Gson().toJson(result));
  }
``` =||= What is DataSourceConfig and are you sure that it isn't encoding the string
you pass in?

On Thu, Oct 12, 2017 at 12:08 AM pinker <notifications@github.com> wrote:

> Of course
>
> @Test
>   public void test() throws Exception {
>     DataSourceConfig result = new DataSourceConfig(""com.mysql.jdbc.Driver"", ""password123456"", ""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8"", ""username123456"", ""0"");
>     String expected = ""{\""driver\"":\""com.mysql.jdbc.Driver\"",\""password\"":\""password123456\"",\""url\"":\""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8\"",\""username\"":\""username123456\"",\""port\"":\""0\""}"";
>     String unexpected = ""{\""driver\"":\""com.mysql.jdbc.Driver\"",\""password\"":\""password123456\"",\""url\"":\""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding\\u003dUTF-8\"",\""username\"":\""username123456\"",\""port\"":\""0\""}"";
>     assertNotEquals(expected, new Gson().toJson(result));
>     assertEquals(unexpected, new Gson().toJson(result));
>   }
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1170#issuecomment-336015258>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZ_lluvG7DIvFHrCHAXYygXRzfz1ks5srZCqgaJpZM4P2bX6>
> .
>
 =||= ```
@Data
@AllArgsConstructor
@NoArgsConstructor
public class DataSourceConfig implements Serializable {
  private static final long serialVersionUID = 3178620210804628886L;
  private String driver;
  private String password;
  private String url;
  private String username;
  private String port;
}
```
and you must add dependency in pom.xml 
```
<dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.16.10</version>
    </dependency>
```
i'm sure i hope `""url"": ""jdbc:mysql://DEVIP:PORT/DBNAME?characterEncoding=UTF-8""` should be parsed itself , but in which ""="" parsed ""\u003d"".

 =||= https://groups.google.com/forum/#!topic/google-gson/JDHUo9DWyyM =||= Yep. That's it. It's existing behavior that we now cannot change. =||= Looks like `.disableHtmlEscaping()` on `GsonBuilder` disables this. =||= thanks! it really can be solved like this. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1172Add module-info.javahrchuhrchu12/27/17, 12:41:06 AM"So that projects depend on this can be published to a public artifact repository.
Note that this is not breaking backward compatibility. All codes except this file can be still compiled in Java 6.""https://github.com/google/gson/pull/1179

![resize](https://user-images.githubusercontent.com/24902181/32078727-00475198-ba76-11e7-83f3-f2af7f3ac496.jpeg) =||= Any update on this? :confused:  =||= @hrchu The pull request has now been merged. I suggest closing this as done. ✅ =||= Is there any plans for when this will be released? =||= Is there going to be a 2.9 or 3.0 release that has a module-info.class file in it? =||= No, there will probably never be a module-info.class. We can merge an automatic module name. =||= Is there something I am missing about modules then? Automatic modules seem like glorified backwards compatibility hacks and maven builds introduce a big fat warning to not publish your module in a public repo if it depends on an automatic module. Unless I am missing something about modules, wouldn't this mean that now project that wants to properly move forward with Java 9+ cannot depend on GSON? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1173parse error that parse the 0 to 0-E8 niebinnb31210/27/17, 03:08:24 PMAs the title, when I parse the network JSON string to model, the parse error occurs changing 0 to 0-E8."Please provide a failing test case that demonstrates your problem.

On Thu, Oct 19, 2017, 3:23 AM niebin <notifications@github.com> wrote:

> As the title, when I parse the network JSON string to model, the parse
> error occurs changing 0 to 0-E8.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1173>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEETnAM5OXXgdXYIb8Vs5_RSLrsH7Pks5stvjvgaJpZM4P-zMv>
> .
>
 =||= example as this: 
{""age"":0} change to a Java model Person with field age. 
`
public class Person{
private String age;
public void setAge(String age){
this.age=age;
}
public String getAge(){
  return this.age;
}
} 
` 
then the age person.age have became to ""0-E8"". =||= which version of gson in your case?  i can't see the problem with 2.8.x  @nb312  =||= this is should be closed, I found that this error is about the fast JSON. Sorry about this.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1175Fix README.md grammatical errorMichael Edwardmtotowamkwe10/20/17, 05:25:36 AMNaN"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= I have signed the CLA agreement. =||= I have signed it!

On 19 October 2017 at 21:06, googlebot <notifications@github.com> wrote:

> Thanks for your pull request. It looks like this may be your first
> contribution to a Google open source project. Before we can look at your
> pull request, you'll need to sign a Contributor License Agreement (CLA).
>
> 📝 *Please visit https://cla.developers.google.com/
> <https://cla.developers.google.com/> to sign.*
>
> Once you've signed, please reply here (e.g. I signed it!) and we'll
> verify. Thanks.
> ------------------------------
>
>    - If you've already signed a CLA, it's possible we don't have your
>    GitHub username or you're using a different email address. Check your
>    existing CLA data <https://cla.developers.google.com/clas> and verify
>    that your email is set on your git commits
>    <https://help.github.com/articles/setting-your-email-in-git/>.
>    - If your company signed a CLA, they designated a Point of Contact who
>    decides which employees are authorized to participate. You may need to
>    contact the Point of Contact for your company and ask to be added to the
>    group of authorized contributors. If you don't know who your Point of
>    Contact is, direct the project maintainer to go/cla#troubleshoot.
>    - In order to pass this check, please resolve this problem and have
>    the pull request author add another comment and the bot will run again.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1175#issuecomment-338100703>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/APED2zCPr8qU0Kdo50szotkkvkV6E0aSks5suBw_gaJpZM4QAKcx>
> .
>
 =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_author_cla --> =||= Issue resolved!

On 19 October 2017 at 21:54, googlebot <notifications@github.com> wrote:

> We found a Contributor License Agreement for you (the sender of this pull
> request), but were unable to find agreements for the commit author(s). If
> you authored these, maybe you used a different email address in the git
> commits than was used to sign the CLA (login here
> <https://cla.developers.google.com/> to double check)? If these were
> authored by someone else, then they will need to sign a CLA as well, and
> confirm that they're okay with these being contributed to Google.
> In order to pass this check, please resolve this problem and have the pull
> request author add another comment and the bot will run again.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1175#issuecomment-338105830>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/APED24PEW0w86i1sF0HY00UNDoAORlo6ks5suCeNgaJpZM4QAKcx>
> .
>
 =||= "Fix README.md grammatical errorMichael Edwardmtotowamkwe10/20/17, 05:25:36 AMNaNNaNmichaelmkwelele10/20/17, 03:57:39 AMFix README.md grammatical error1
1176Converting a large java object to String containing json formatAshokcoded910/24/17, 10:04:22 AM"```
               Gson gson = null;
		GsonBuilder gsonBuilder = new GsonBuilder();
		gson = gsonBuilder.serializeNulls().create();
		return gson.toJson(this);
```
this refers to a large java object,I get out of memory exception while converting,also our heap size is 1 GB.Any workaround for this ?""There are overloads of `toJson` which take destination streams that you can write directly to. This saves having to create an intermediate `String` object and will work better on low-memory environments and with extremely large JSON objects. =||= I did use this method in the below mentioned code,but it seems to use more memory compared to (gson.toJson(this))
```
GsonBuilder gsonBuilder = new GsonBuilder();
		gson = gsonBuilder.serializeNulls().create();
		//return gson.toJson(this);
		// OutputStream out = new ByteArrayOutputStream();
		 ByteArrayOutputStream outt = new ByteArrayOutputStream();
		JsonWriter writer = new JsonWriter(new OutputStreamWriter(outt, ""UTF-8""));
        writer.beginArray();
       
            gson.toJson(this, this.getClass(), writer);
        
        writer.endArray();
        writer.close();
``` =||= That still buffers the entire payload in memory as bytes. The stream should
be hooked up to your destination such as a file or socket.

On Tue, Oct 24, 2017, 12:01 PM Ashok Borra <notifications@github.com> wrote:

> I did use this method in the below mentioned code,but it seems to use more
> memory compared to (gson.toJson(this))
>
> GsonBuilder gsonBuilder = new GsonBuilder();
> 		gson = gsonBuilder.serializeNulls().create();
> 		//return gson.toJson(this);
> 		// OutputStream out = new ByteArrayOutputStream();
> 		 ByteArrayOutputStream outt = new ByteArrayOutputStream();
> 		JsonWriter writer = new JsonWriter(new OutputStreamWriter(outt, ""UTF-8""));
>         writer.beginArray();
>
>             gson.toJson(this, this.getClass(), writer);
>
>         writer.endArray();
>         writer.close();
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1176#issuecomment-338953741>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEQS5H8nqjvmcOV36p3IiteTNT6Llks5svcN0gaJpZM4QCsMU>
> .
>
 =||= In the end state we need it as a String,what approach do you suggest ? =||= There's no magic fix. You either need a larger heap or a smaller object.

On Tue, Oct 24, 2017, 1:05 PM Ashok Borra <notifications@github.com> wrote:

> In the end state we need it as a String,what approach do you suggest ?
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1176#issuecomment-338967882>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEWhvmPTTtvQWIUu8O4dWVgcUGRZZks5svdKJgaJpZM4QCsMU>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1179Java 9 modulemichaelsavich12/26/17, 04:28:20 PMI've added a module-info.java file. Right now it's disabled by default-- I'm no maven wizard, so I didn't want to mess with the pom more than absolutely necessary. To try compiling the GSON as a jigsaw module, delete `<excludes>**/module-info.java</excludes>` and set java.version to 1.9, then run mvn compile."Hey, can someone check what's going on with Travis CI? It seems like everybody's builds are failing… =||= Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= I signed it!

Sent from my Mac

> On Oct 26, 2017, at 5:58 PM, googlebot <notifications@github.com> wrote:
> 
> Thanks for your pull request. It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).
> 
> 📝 Please visit https://cla.developers.google.com/ <https://cla.developers.google.com/> to sign.
> 
> Once you've signed, please reply here (e.g. I signed it!) and we'll verify. Thanks.
> 
> If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.
> If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
> In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub <https://github.com/google/gson/pull/1179#issuecomment-339813192>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AXv6JeyirheQQco7n2iUAAaFUhy4ykk5ks5swQChgaJpZM4QIQGl>.
> 

 =||= CLAs look good, thanks!

<!-- ok --> =||= Can Travish be re-run? It looks like the error is with the CI system (JAVA_HOME not set) rather than with this pull request. =||= "Java 9 modulemichaelsavich12/26/17, 04:28:20 PMI've added a module-info.java file. Right now it's disabled by default-- I'm no maven wizard, so I didn't want to mess with the pom more than absolutely necessary. To try compiling the GSON as a jigsaw module, delete `<excludes>**/module-info.java</excludes>` and set java.version to 1.9, then run mvn compile.NaNmichaelsavich10/26/17, 09:32:39 PMExclude module-info.java by default1
1181parse errorzhenzhengoogle10/30/17, 02:57:12 AM"{""mAllOutputFormats"":{""mKeys"":[32,33,34,35,0,0,0,0,0,0,0],""mSize"":4,""mValues"":[1,11,21,21,0,0,0,0,0,0,0]},""mConfigurations"":[{""mFormat"":32,""mHeight"":3456,""mInput"":false,""mWidth"":4608},{""mFormat"":33,""mHeight"":480,""mInput"":false,""mWidth"":640},{""mFormat"":33,""mHeight"":240,""mInput"":false,""mWidth"":320},{""mFormat"":33,""mHeight"":720,""mInput"":false,""mWidth"":1280},{""mFormat"":33,""mHeight"":1080,""mInput"":false,""mWidth"":1920},{""mFormat"":33,""mHeight"":2448,""mInput"":false,""mWidth"":3264},{""mFormat"":33,""mHeight"":3456,""mInput"":false,""mWidth"":3456},{""mFormat"":33,""mHeight"":3456,""mInput"":false,""mWidth"":4608},{""mFormat"":33,""mHeight"":1536,""mInput"":false,""mWidth"":2048},{""mFormat"":33,""mHeight"":1952,""mInput"":false,""mWidth"":2592},{""mFormat"":33,""mHeight"":1840,""mInput"":false,""mWidth"":3264},{""mFormat"":33,""mHeight"":2592,""mInput"":false,""mWidth"":4608},{""mFormat"":34,""mHeight"":3456,""mInput"":false,""mWidth"":4608},{""mFormat"":34,""mHeight"":2592,""mInput"":false,""mWidth"":4608},{""mFormat"":34,""mHeight"":3456,""mInput"":false,""mWidth"":3456},{""mFormat"":34,""mHeight"":2448,""mInput"":false,""mWidth"":3264},{""mFormat"":34,""mHeight"":1840,""mInput"":false,""mWidth"":3264},{""mFormat"":34,""mHeight"":1952,""mInput"":false,""mWidth"":2592},{""mFormat"":34,""mHeight"":1536,""mInput"":false,""mWidth"":2048},{""mFormat"":34,""mHeight"":1080,""mInput"":false,""mWidth"":1920},{""mFormat"":34,""mHeight"":1080,""mInput"":false,""mWidth"":1440},{""mFormat"":34,""mHeight"":960,""mInput"":false,""mWidth"":1280},{""mFormat"":34,""mHeight"":720,""mInput"":false,""mWidth"":1280},{""mFormat"":34,""mHeight"":720,""mInput"":false,""mWidth"":960},{""mFormat"":34,""mHeight"":720,""mInput"":false,""mWidth"":720},{""mFormat"":34,""mHeight"":414,""mInput"":false,""mWidth"":736},{""mFormat"":34,""mHeight"":480,""mInput"":false,""mWidth"":640},{""mFormat"":34,""mHeight"":408,""mInput"":false,""mWidth"":544},{""mFormat"":34,""mHeight"":400,""mInput"":false,""mWidth"":400},{""mFormat"":34,""mHeight"":288,""mInput"":false,""mWidth"":352},{""mFormat"":34,""mHeight"":240,""mInput"":false,""mWidth"":320},{""mFormat"":34,""mHeight"":144,""mInput"":false,""mWidth"":208},{""mFormat"":34,""mHeight"":144,""mInput"":false,""mWidth"":176},{""mFormat"":35,""mHeight"":3456,""mInput"":false,""mWidth"":4608},{""mFormat"":35,""mHeight"":2592,""mInput"":false,""mWidth"":4608},{""mFormat"":35,""mHeight"":3456,""mInput"":false,""mWidth"":3456},{""mFormat"":35,""mHeight"":2448,""mInput"":false,""mWidth"":3264},{""mFormat"":35,""mHeight"":1840,""mInput"":false,""mWidth"":3264},{""mFormat"":35,""mHeight"":1952,""mInput"":false,""mWidth"":2592},{""mFormat"":35,""mHeight"":1536,""mInput"":false,""mWidth"":2048},{""mFormat"":35,""mHeight"":1080,""mInput"":false,""mWidth"":1920},{""mFormat"":35,""mHeight"":1080,""mInput"":false,""mWidth"":1440},{""mFormat"":35,""mHeight"":960,""mInput"":false,""mWidth"":1280},{""mFormat"":35,""mHeight"":720,""mInput"":false,""mWidth"":1280},{""mFormat"":35,""mHeight"":720,""mInput"":false,""mWidth"":960},{""mFormat"":35,""mHeight"":720,""mInput"":false,""mWidth"":720},{""mFormat"":35,""mHeight"":414,""mInput"":false,""mWidth"":736},{""mFormat"":35,""mHeight"":480,""mInput"":false,""mWidth"":640},{""mFormat"":35,""mHeight"":408,""mInput"":false,""mWidth"":544},{""mFormat"":35,""mHeight"":400,""mInput"":false,""mWidth"":400},{""mFormat"":35,""mHeight"":288,""mInput"":false,""mWidth"":352},{""mFormat"":35,""mHeight"":240,""mInput"":false,""mWidth"":320},{""mFormat"":35,""mHeight"":144,""mInput"":false,""mWidth"":208},{""mFormat"":35,""mHeight"":144,""mInput"":false,""mWidth"":176}],""mDepthConfigurations"":[],""mDepthMinFrameDurations"":[],""mDepthOutputFormats"":{""mKeys"":[0,0,0,0,0,0,0,0,0,0,0],""mSize"":0,""mValues"":[0,0,0,0,0,0,0,0,0,0,0]},""mDepthStallDurations"":[],""mHighResOutputFormats"":{""mKeys"":[0,0,0,0,0,0,0,0,0,0,0],""mSize"":0,""mValues"":[0,0,0,0,0,0,0,0,0,0,0]},""mHighSpeedVideoConfigurations"":[{""mBatchSizeMax"":1,""mFpsMax"":120,""mFpsMin"":30,""mFpsRange"":{""mLower"":30,""mUpper"":120},""mHeight"":720,""mSize"":{""mHeight"":720,""mWidth"":1280},""mWidth"":1280},{""mBatchSizeMax"":1,""mFpsMax"":120,""mFpsMin"":120,""mFpsRange"":{""mLower"":120,""mUpper"":120},""mHeight"":720,""mSize"":{""mHeight"":720,""mWidth"":1280},""mWidth"":1280}],""mHighSpeedVideoFpsRangeMap"":{""[30, 120]"":1,""[120, 120]"":1},""mHighSpeedVideoSizeMap"":{""1280x720"":2},""mInputFormats"":{""mKeys"":[0,0,0,0,0,0,0,0,0,0,0],""mSize"":0,""mValues"":[0,0,0,0,0,0,0,0,0,0,0]},""mInputOutputFormatsMap"":{""mEntry"":[],""mInputCount"":0},""mListHighResolution"":false,""mMinFrameDurations"":[{""mDurationNs"":33331760,""mFormat"":32,""mHeight"":3456,""mWidth"":4608},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":480,""mWidth"":640},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":240,""mWidth"":320},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":720,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":1080,""mWidth"":1920},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":2448,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":3456,""mWidth"":3456},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":3456,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":1536,""mWidth"":2048},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":1952,""mWidth"":2592},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":1840,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":33,""mHeight"":2592,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":3456,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":2592,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":3456,""mWidth"":3456},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":2448,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":1840,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":1952,""mWidth"":2592},{""mDurationNs"":50000000,""mFormat"":34,""mHeight"":1536,""mWidth"":2048},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":1080,""mWidth"":1920},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":1080,""mWidth"":1440},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":960,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":720,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":720,""mWidth"":960},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":720,""mWidth"":720},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":414,""mWidth"":736},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":480,""mWidth"":640},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":408,""mWidth"":544},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":400,""mWidth"":400},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":288,""mWidth"":352},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":240,""mWidth"":320},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":144,""mWidth"":208},{""mDurationNs"":33331760,""mFormat"":34,""mHeight"":144,""mWidth"":176},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":3456,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":2592,""mWidth"":4608},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":3456,""mWidth"":3456},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":2448,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":1840,""mWidth"":3264},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":1952,""mWidth"":2592},{""mDurationNs"":50000000,""mFormat"":35,""mHeight"":1536,""mWidth"":2048},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":1080,""mWidth"":1920},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":1080,""mWidth"":1440},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":960,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":720,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":720,""mWidth"":960},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":720,""mWidth"":720},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":414,""mWidth"":736},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":480,""mWidth"":640},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":408,""mWidth"":544},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":400,""mWidth"":400},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":288,""mWidth"":352},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":240,""mWidth"":320},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":144,""mWidth"":208},{""mDurationNs"":33331760,""mFormat"":35,""mHeight"":144,""mWidth"":176}],""mOutputFormats"":{""mKeys"":[32,33,34,35,0,0,0,0,0,0,0],""mSize"":4,""mValues"":[1,11,21,21,0,0,0,0,0,0,0]},""mStallDurations"":[{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":480,""mWidth"":640},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":240,""mWidth"":320},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":720,""mWidth"":1280},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":1080,""mWidth"":1920},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":2448,""mWidth"":3264},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":3456,""mWidth"":3456},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":3456,""mWidth"":4608},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":1536,""mWidth"":2048},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":1952,""mWidth"":2592},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":1840,""mWidth"":3264},{""mDurationNs"":33331760,""mFormat"":33,""mHeight"":2592,""mWidth"":4608}]}

com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 3918 path $.mHighSpeedVideoFpsRangeMap."This is a disagreement between your Java model and the supplied JSON, not a bug in the library. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1182GSON `fromJson` can't parse JSON without quotes!SwayChen09/28/18, 02:26:26 PM"For example:
```json
{
   name : Google Company,
   age:19
}
```
That's OK following codes, I can get correct value:
```java
JsonObject jsonObject = new JsonParser().parse(jsonSt).getAsJsonObject();
String name = jsonObject.get(""name"").getAsString();
int age = jsonObject.get(""age"").getAsInt();
```
but it can't parse into a bean class using `fromJson`

will cause Exception like this:
```
java.lang.RuntimeException: 
com.google.gson.JsonSyntaxException: 
com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 15 path $.name
```""This is correct behavior.
Your example is not valid JSON.
See https://www.json.org/ =||= @danorton2 Hi, I know it's a invalid JSON. My puzzle is why I can parse it into a JsonObject and get value correctly, but can't parse it into a bean. :)

In my opinion, it should do parse into a bean because it can get value from a JsonObject. =||= @SwayChen Just to be clear, you want `fromJson` try to parse invalid Json into a bean?  Why?  =||= @rafritts @danorton2 

Don't make misunderstanding :)

What make me puzzle is why JsonObject can parse that invalid JSON at the same time the valid JSON can't be parse into a bean.

The point is ""Why JsonObject can recognize that invalid JSON"", I know JSON must be with quotes mark after I meet program. Now JSON without quotes can be parsed. -_- =||= How to reproduce?
```java
        String invalidJson = """"
                + ""{\n""
                + ""   name : Google Company,\n""
                + ""   age:19\n""
                + ""}"";
        new JsonParser().parse(invalidJson);
```
This will (correctly) throw `com.google.gson.stream.MalformedJsonException`... =||= I also have like issue but my case seem like have **space**, please see https://github.com/thinkerou/karate-grpc/issues/3 thanks! =||= > I also have like issue but my case seem like have **space**, please see [thinkerou/karate-grpc#3](https://github.com/thinkerou/karate-grpc/issues/3) thanks!

The author have marked as a bug. =||= One follow-up question, still: why does `JsonParser.parse(...)` accept content that does not enclose Object keys in double-quotes? I have seen test code that seems to rely on this behavior, but Javadocs:

https://static.javadoc.io/com.google.code.gson/gson/2.8.5/com/google/gson/JsonParser.html#parse-java.io.Reader-

do not really mention anything about more lenient handling. So it would seem like this SHOULD indicate exception, too. But apparently it does not. Would that part be considered a bug, or perhaps missing documentation if more lenient handling is intentional?

 =||= > One follow-up question, still: why does `JsonParser.parse(...)` accept content that does not enclose Object keys in double-quotes? 

See #41, #372 and #1208 on current lenient situation.

 =||= Hola, he citado recientemente una duda en: `https://stackoverflow.com/questions/43412261/make-gson-accept-single-objects-where-it-expects-arrays/58943838#58943838`

Con respecto al mismo problema pero ya encontré el origen del problema, no sé cómo solucionarlo.

Gracias =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1183Fix a small typochinhodado10/31/17, 06:43:25 PMThe quotes were mismatched"Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.

<!-- need_sender_cla --> =||= "Fix a small typochinhodado10/31/17, 06:43:25 PMThe quotes were mismatchedNaNTrung Do10/31/17, 03:18:45 PMFix a small typo1
1184Replaced oracle JDK 7 with openJDK 7 to fix broken build.Inderjeet Singhinder12310/31/17, 06:42:50 PMNaNNaNReplaced oracle JDK 7 with openJDK 7 to fix broken build.Inderjeet Singhinder12310/31/17, 06:42:50 PMNaNNaNInderjeet Singh10/31/17, 06:40:29 PMReplaced oracle JDK 7 with openJDK 7 to fix broken build.1
1187Why does registerTypeAdapter for Object not work?onriv11/04/17, 08:33:19 PM"just tried to custom deserializer for object, and wrote the following code but it dosn't work:

```
JsonDeserializer<Object> objectJsonDeserializer = new JsonDeserializer<Object>() {

    @Override
    public Object deserialize(JsonElement json,
                              Type typeOfT,
                              JsonDeserializationContext context) throws JsonParseException {
        // can't reach this statement
        return null;
    }
};
gsonBuilder.registerTypeAdapter(Object.class, objectJsonDeserializer);
```

and all other deserializers for other types like map, list, and custom class work fine.""found the reason at

https://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/gson/src/main/java/com/google/gson/Gson.java#L224

so it seems just impossible to override the builtin deserializer for object.

But I want to deserialize decimal as BigDecimal, interger as Long, array as ImmutableList, object as ImmutableMap when wirting something like

```
gsonBuilder.create().fromJson(""string"", Object.class);
```
 =||= duplicate of #1177. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1190Warning with 2.8.2 with Java 9JThomp200003/22/18, 01:49:01 PM"Recently changed to java 9 from java 8 and now this warning is popping up

WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/C:/Users/JThompson/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field java.time.LocalDate.year
WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release""As a temporary fix: add this as a VM option: --add-opens java.base/java.time=gson =||= Does not works for me. It gives me the message:

> Error: Could not find or load main class java.base.java.time=gson

Any advice?  =||= @FabianPerl You seem to be reporting an entirely different issue. If you're sure it's related to Gson (and not your development environment), please post a new issue at https://github.com/google/gson/issues =||= @danorton2 Thanks for your fast comment! I should write it a little bit more about my Problem. When I start my project, I get this warnings:

> WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/...../repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field javafx.beans.property.SimpleStringProperty.bean
WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

I tried @jfbenckhuijsen suggestion with his temporary fix, but unfortunately I received the message up below.  =||= @FabianPerl You seem to be putting the option in the wrong place.  It should be before `-jar`. Please post the full java command line you are using. =||= @danorton2 

Here's my command line: 
> /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/bin/java
 --add-opens java.base/java.time=gson ""-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52288:/Applications/IntelliJ IDEA.app/Contents/bin"" -Dfile.encoding=UTF-8 -classpath /Users/FabianPerl/Desktop/Project/thurn-und-taxis/target/classes:/Users/FabianPerl/.m2/repository/org/apache/commons/commons-lang3/3.7/commons-lang3-3.7.jar:/Users/FabianPerl/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar:/Users/FabianPerl/.m2/repository/org/jetbrains/annotations/15.0/annotations-15.0.jar de.oceans.tut.Main



and after all

> WARNING: Unknown module: gson specified to --add-opens
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.gson.internal.bind.ReflectiveTypeAdapterFactory (file:/Users/FabianPerl/.m2/repository/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar) to field javafx.beans.property.SimpleStringProperty.bean
WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release =||= What is the plan for a permanent fix? Is this a difficult one? =||= is there a plan to fix this for JDK9? =||= No. You should not be serializing types you don't control with reflection as you cannot guarantee their internals are stable. Register a TypeAdpater for platform types and serialize/deserialize them using their public APIs. =||= Thanks Jake, a project I am contributing to was serialising Void. I'll register a TypeAdapter and should be sorted. =||= Yeah unfortunately it's too late to change Gson's default behavior here so it's easy to fall into this trap. Moshi prevents all serialization of things inside `java.*` (and `kotlin.*`, `scala.*`, `android.*`, etc.) for the same reasons unless you explicitly specify a custom adapter.

You can register a custom TypeAdapter which logs when types in `java.*` are being requested (ignoring List, Set, etc.) and then just `return null` to let the real one handle it to audit your code bases. And then once you migrate everything away, change that adapter to throw! =||= >You can register a custom TypeAdapter which logs when types in java.* are being requested (ignoring List, Set, etc.) and then just return null to let the real one handle it to audit your code bases. And then once you migrate everything away, change that adapter to throw!

Excellent idea!

My stuff all working now, needed to register a custom `TypeAdapterFactory` to handle fields in serialized objects. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1191Use Message instead of GeneratedMessage which is specific to protobuf v2Ori Schwartzorischwartz11/28/17, 02:13:40 AM"This change allows `ProtoTypeAdapter` to work with both protobuf 2.x and 3.x.

The pom currently requires [version 2.6.1](https://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/proto/pom.xml#L65). But because this artifact is not published on Maven central, most users will [copy it into their project](https://github.com/google/gson/issues/690#issuecomment-133768886).

`Message` is a common superclass of both `GeneratedMessage` and `GeneratedMessageV3` so after this change `ProtoTypeAdapter` can be used with either.

### Changes
* Use `com.google.protobuf.Message` instead of v2-specific `com.google.protobuf.GeneratedMessage`.
* Throw an exception if adapter is ever called on a subclass of `com.google.protobuf.DynamicMessage`, which was probably the original intent of using `GeneratedMessage`."NaNUse Message instead of GeneratedMessage which is specific to protobuf v2Ori Schwartzorischwartz11/28/17, 02:13:40 AM"This change allows `ProtoTypeAdapter` to work with both protobuf 2.x and 3.x.

The pom currently requires [version 2.6.1](https://github.com/google/gson/blob/855f0493d0edba5d6f6ec4c72a46bfef225ef22c/proto/pom.xml#L65). But because this artifact is not published on Maven central, most users will [copy it into their project](https://github.com/google/gson/issues/690#issuecomment-133768886).

`Message` is a common superclass of both `GeneratedMessage` and `GeneratedMessageV3` so after this change `ProtoTypeAdapter` can be used with either.

### Changes
* Use `com.google.protobuf.Message` instead of v2-specific `com.google.protobuf.GeneratedMessage`.
* Throw an exception if adapter is ever called on a subclass of `com.google.protobuf.DynamicMessage`, which was probably the original intent of using `GeneratedMessage`."NaNOri Schwartz11/15/17, 03:30:19 PMUse Message instead of GeneratedMessage which is specific to protobuf v2. Message is a common superclass of both GeneratedMessage and GeneratedMessageV3. Also throw an exception to notify caller that DynamicMessage is not supprorted.1
1192No documentation on creating java object from arbitrary jsonPhilip Rego7--11/19/17, 05:45:30 AM"Given some JSON like this. How would I know what object to create so gson can desalinize to it. 

For example JSON:
https://poloniex.com/public?command=returnOrderBook&currencyPair=BTC_LTC

This Java works, but List<double[]> doesnt describe the data enough :
```
public OrderBook(List<double[]> asks, List<double[]> bids, String isFrozen, long seq){
        this.asks = asks;
        this.bids = bids;
        this.isFrozen = isFrozen;
        this.seq = seq;
    }
```
This didnt work. So how do I describe my data better like this?
```
   public OrderBook(List<Ask> asks, List<Bid> bids, String isFrozen, long seq){
        this.asks = asks;
        this.bids = bids;
        this.isFrozen = isFrozen;
        this.seq = seq;
    }

    public static final class Ask {
    	double price;
    	double quantity;
    	
        public Ask(double[] ask){
            this.price = ask[0];
            this.quantity = ask[1];
        }
    }
```""You'll want to use the [TypeAdapter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/TypeAdapter.java) API.
Check StackOverflow for countless examples of its usage. =||= Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1194Support for ISO 8601 Calendar formatSaifur Rahman Mohsinmohsin12/05/17, 12:28:57 AM"I'm using an ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZ) in one of my Android apps and gson keeps throwing this error:

```
java.lang.NumberFormatException: For input string: ""2017-11-23 19:30:26.000000""
at java.lang.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1306)
```

I used [this](https://stackoverflow.com/a/10621553/997147) to perform the conversions. I realize that the problem lies with the TypeAdapters and one solution might be to write my own custom converter but wouldn't it be better if this library supports it out of the box? I can see that the current adapter is [written here](https://github.com/google/gson/blob/9e44d60b83d667d96150eeff4e3f04cd4f157e9a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L592-L655) and I guess the solution would be to adapt that StackOverflow answer's code into it or using Calendar class' timezone field in to achieve it?""You specify the ISO-8601 format with a ""T"" separator, but you show an example for a slightly different format, without the ""T"".

Can you provide the actual JSON string that is failing, with surrounding components, if any? Does it include the quotation marks? (Do not include quotation marks if they are not in the actual input.) =||= I finally figured out the issue. I thought that something was going wrong on my app and then I realized that the server was returning the object json for every successful request and gson was converting it back to the original object format. The server messed up and was returning a non-ISO8601 complaint json output as shown in my initial comment which was the reason the app was crashing. Anyway, I've fixed it now so it solves the issue. My apologies for the trouble and thank you for your time. =||= Does GSON still require the incoming data to be formatted as an object like `{year:2017,month:1,dayOfMonth:13,hourOfDay:2,minute:20,second:23}`. I tried returning the data as an ISO 8601 format string from the server but it gave me a **JsonSyntaxException: Expected BEGIN_OBJECT but was STRING** exception. [Looking at the code](https://github.com/google/gson/blob/9e44d60b83d667d96150eeff4e3f04cd4f157e9a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L592-L655) it appears to be parsing an object of the abovesaid format but wouldn't it be better if it parses a proper ISO 8601 format string by default? I also noticed that there's yet another confusion this introduces i.e. when it deserializes the month needs to be 0-indexed so looks like the ISO 8601 format would solve this issue too. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1196Push Android to use gson as the default JSON parser...zenglian11/28/17, 02:04:07 PMPush Android team to use gson as default JSON parser...We have no control over this and it's not clear as to what you want it to be the default for. =||= currently android use org.json which is apprently not so good as gson. since both both you are googlers, maybe you can contact them to to make gson available on android ootb.  =||= I'll try to get org.json deprecated, but adding Gson to the platform doesn't seem like a good idea to me. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1197Getting this issue while using GSON ApiMM0036081511/28/17, 11:30:38 PM"S:Fault 	xmlns:ns4=""http://www.w3.org/2003/05/soap-envelope"">
<faultcode>S:Server</faultcode>
<faultstring>
EJB Exception: : java.lang.StackOverflowError
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:380)
 at com.google.gson.internal.$Gson$Types.resolve($Gson$Types.java:375)"#1128 fixes this. Use Gson 2.8.2. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1198Optimised the create() call for Excluder TypeAdapterFactoryAnirudh Ramanananirudhramanan11/30/17, 12:06:09 PM"excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.

<img width=""646"" alt=""screen shot 2017-11-30 at 2 51 22 pm"" src=""https://user-images.githubusercontent.com/16556984/33423326-7818ca34-d5de-11e7-97dd-32b101f1d764.png"">

With this change, we only check once and return if the class has to be excluded."Closing this, breaking test cases. Will raise a new one =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1199Optimised the create() call for Excluder TypeAdapterFactoryAnirudh Ramanananirudhramanan12/28/17, 12:33:45 AM"excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.

<img width=""646"" alt=""screen shot 2017-11-30 at 2 51 22 pm"" src=""https://user-images.githubusercontent.com/16556984/33430061-2b37aa3e-d5f5-11e7-85fb-54882606579e.png"">

With this change, we only check once and return if the class has to be excluded.""@inder123 kindly review this. 

This has given us good gains as the number of times this gets called is high.  =||= @inder123 Shall I break this into 2 separate PR's ? =||= "Optimised the create() call for Excluder TypeAdapterFactoryAnirudh Ramanananirudhramanan12/28/17, 12:33:45 AM"excludeClass used to get called twice, which internally used to check if class is a innerClass, or an anonymous or local class. Attaching the CPU Profiler snapshot.

<img width=""646"" alt=""screen shot 2017-11-30 at 2 51 22 pm"" src=""https://user-images.githubusercontent.com/16556984/33430061-2b37aa3e-d5f5-11e7-85fb-54882606579e.png"">

With this change, we only check once and return if the class has to be excluded."NaNanirudhramanan12/07/17, 08:49:01 AMremoved the method, will raise it as a separate PR1
1204Include maven dependency snippet on READMELucas Blemeandreybleme12/13/17, 03:15:11 AM"As many java developers are using Maven, would be quite convenient to add to the readme file, the Maven Central dependency snippet. 

If there's no restriction on doing it, I can create a PR including a new README with the snippet just below the Gradle one."Absolutely! Please send a PR =||= Fixed on PR 1205 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1205Including Maven snippet on README.mdLucas Blemeandreybleme12/13/17, 02:13:54 AM"Adding maven dependency to readme file.
Fixes issue #1204.

:white_check_mark:  I have signed the CLA agreement.""So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*

<!-- need_author_consent --> =||= "Including Maven snippet on README.mdLucas Blemeandreybleme12/13/17, 02:13:54 AM"Adding maven dependency to readme file.
Fixes issue #1204.

:white_check_mark:  I have signed the CLA agreement."NaNinder12312/13/17, 02:12:31 AMincorporated feedback1
1206Flatten Json Structure when keys and values have the same nameKalle Eidhagenrythmic12/13/17, 05:14:00 PM"Example:

```Java
class A {
 private B value = new B(5);
}

class B {
  private int value;
  public B(int v) {
    this.value = v;
  }
  
}

A a = new A();
new Gson().toJson(a); // returns {value:{value:5}}
```
Maybe there could be a GsonBuilder option to compress the json output to ```{value: 5}``` in such cases. If value would be a collection, the output would be ```{value:[{},{}...]}```"You can use `@JsonAdapter` on the `B value` field declaration to control how it's serialized. We don't want to bake in options like this because they tend to not be generally applicable. Having an extension mechanism which allows you to control serialization, like `@JsonAdapter`, means we can prevent Gson from becoming more complex than it needs to be. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1207"How to handle ""null"" JSON fields with custom Deserializer?"Marko Gajicgajicm9312/14/17, 09:02:18 PM"I want to deserialize JsonNull objects as pure Java null? How do I do that, since the only way I can see right now is to do ""instance of"" check on the object whether it's JsonNull or not, and then just ignore it if it is?

Is there any smarter way for this? I tried digging through your code to see how you handle it, but didn't find anything much useful, you could also just point me to the part of code where you check for existing but ""null"" fields.

Thanks.""Can you rephrase your question in the context of this code snippet?
```Java
  JsonObject obj;
  ... // populate obj
  if (obj.has(""myfield"")) {
    JsonElement e = obj.get(""myfield"");
    if (e.isJsonNull()) {
      // stuff to do if e is null
    } else {
      // stuff to do if e is not null
    }
  } else {
    // stuff to do if ""myfield"" is not present
  }
``` =||= The question is, most simply put, do I have to do ""if (e.isJsonNull())"", or I can just get null value somehow directly from JsonNull object..

Most specifically, I'd like for e.g. ""getAsString()"" to return null when invoked on JsonNull object instead of throwing exception.

Can you please tell me where you got this code snippet from? Cause anyway, if this is the way you do it, then there's probably no better way. =||= https://github.com/google/gson/blob/6b20e3aaec0b3280f01c7785b5dd391ab6de9cc7/gson/src/main/java/com/google/gson/JsonElement.java#L192

I'd just change the default JsonElement implementation above to return null instead of throwing exception.. That would solve my ""problem"" completely.. Would it be a breaking change in any way? =||= Yes, that would be a breaking change, as it changes the functionality and, more generally, the overall concept of the meaning of a null value. =||= You seem to be asking for this snippet to not throw an exception:
```Java
JsonNull.INSTANCE.getAsString();
``` =||= @danorton2 Well yeah you could say it that way too, I would like that snippet to just return null. But if it's not possible, I'll just do an instance of check.. 😃  =||= Alternatively, if you get the field from an object, `get()` will return `null` if the field is not present or `JsonNull.INSTANCE` if the field value is null. =||= Yeah great thanks, I just wanted to check if there's a better way to do this, but will handle it easily 😃  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1210Java9 DateFormat changesAndrey Mogilevamogilev01/21/18, 09:06:21 AM"The default formats used in DateFormat has changes in Java 9. For example:

- Java8 (and below): ""Jan 1, 1970 12:00:00 AM""
- Java9: ""Jan 1, 1970, 12:00:00 AM""
- Java8 (and below): ""Thursday, January 1, 1970 12:00:00 AM UTC""
- Java9: ""Thursday, January 1, 1970 at 12:00:00 AM Coordinated Universal Time""

As a result, a number of Gson unit tests currently fail when run on Java 9. Additionally, this causes some sort of a backward incompatibility: a date written by Gson in Java 8 cannot be parsed back in Java 9. 

In order to fix it, I suggest the following changes:
- provide a way for Gson to read default ""old"" formats. As Gson by default uses only US date formats, it is possible;
- change ""write"" unit tests so that they check the results depending on the current Java version. If run on Java 9 or later, expect the new formats to be used; otherwise, expect the ""old"" results"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1211fix Java9 DateFormat changesAndrey Mogilevamogilev12/29/17, 07:14:44 PMAdopts Gson for Java9 DateFormat changes, as described in issue #1210 When do you plan to release a new version which includes this fix? =||= fix Java9 DateFormat changesAndrey Mogilevamogilev12/29/17, 07:14:44 PMAdopts Gson for Java9 DateFormat changes, as described in issue #1210 NaNAndrey Mogilev12/20/17, 05:36:40 AMfix Codacy warnings1
1212Dynamic JSON structureDenisredradist12/26/17, 04:29:32 PM"Hello guys,

I need to create model with dynamic structure, something like this:

    class DataInfo {
        @SerializedName(""status"")
        public String status;
        @SerializedName(""id"")
        public long id;
        @SerializedName(""type"")
        public String type;
        @SerializedName(value=""dynamicData0"",
                        alternate={""Data"", ""Name""}) // Depends on requests parameters
        public String dynamicData0;
        @SerializedName(value=""dynamicData1"",
                        alternate={""Name"", ""Data""}) // Depends on requests parameters
        public String dynamicData1;
    }

The issue is that **dynamicData0** and **dynamicData1** have dynamic names in json and alternatives does not work because dynamicData0 and dynamicData1 could have similar alternative names like ""Name"" == ""Name"" depending on arguments, but in different requests.
How to handle such case ? the above model does not compile because the similar alternates in dynamicData0 and dynamicData1.

For example, for first request model is:

    class DataInfo {
        @SerializedName(""status"")
        public String status;
        @SerializedName(""id"")
        public long id;
        @SerializedName(""type"")
        public String type;
        @SerializedName(**""Name""**) // Depends on requests parameters
        public String dynamicData0;
        @SerializedName(**""Data""**) // Depends on requests parameters
        public String dynamicData1;
    }

For second request:

    class DataInfo {
        @SerializedName(""status"")
        public String status;
        @SerializedName(""id"")
        public long id;
        @SerializedName(""type"")
        public String type;
        @SerializedName(**""Data""**) // Depends on requests parameters
        public String dynamicData0;
        @SerializedName(**""Name""**) // Depends on requests parameters
        public String dynamicData1;
    }

Is there a solution for such cases ?""Write a type adapter for DataInfo? 
Also, please post questions like this on StackOverflow. The GitHub issues is already way too cluttered =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1215Avoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstanceOri Schwartzorischwartz12/28/17, 03:14:17 AM"Before this PR, a protobuf message was being built and then discarded for every field.

Using the instance returned via `getDefaultInstance()` avoids creating unused objects. "NaNAvoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstanceOri Schwartzorischwartz12/28/17, 03:14:17 AM"Before this PR, a protobuf message was being built and then discarded for every field.

Using the instance returned via `getDefaultInstance()` avoids creating unused objects. "NaNOri Schwartz12/28/17, 01:47:07 AMavoid repeated calls to build() during deserialization by obtaining field types from the Message's defaultInstance1
1216"JSON-serialization causes ""Illegal reflective access"" warning on JDK 9"emulov04/30/18, 09:44:36 PM"Hi,

Since upgrading to JDK 9 (Gson v2.8.1), we keep getting warning messages like the following when doing JSON-serialization using Gson: 

WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.gson.internal.ConstructorConstructor (./lib/gson-2.8.1.jar) to constructor java.text.NumberFormat()
WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.ConstructorConstructor
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release

It seems that with the introduction of modularization in Java 9, reflective access is only permitted to classes within the same module. However, Gson apparently accesses classes in the module java.base (in this example java.text.NumberFormat) which causes above warning message (by default, it is only displayed once on the first illegal reflective access). Since illegal access of this form will be prohibited in future releases (probably in Java 10), and because of this annoying warning message, this should be fixed as soon as possible.

Thanks!""Can you propose a solution, or may be send a PR? Thanks. =||= Don't serialize types in java.*. Write a custom type adapter which converts
them to JSON primitives rather than serializing internals of the JDK which
are not guaranteed across versions.

On Fri, Dec 29, 2017 at 1:37 PM inder123 <notifications@github.com> wrote:

> Can you propose a solution, or may be send a PR? Thanks.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1216#issuecomment-354483760>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEV4WKeTuQC18xdCNu_oQdjndLgh-ks5tFTFUgaJpZM4RO_XR>
> .
>
 =||= @JakeWharton Do we do that somewhere in Gson? If so, we should fix that. =||= Gson allows users to include types from java.* in their models and Gson
happily serializes their internal contents. In this case, NumberFormat,
which should never be in your model without a custom serializer to convert
it to some other representation (like a String).

On Fri, Dec 29, 2017 at 2:00 PM inder123 <notifications@github.com> wrote:

> @JakeWharton <https://github.com/jakewharton> Do we do that somewhere in
> Gson? If so, we should fix that.
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1216#issuecomment-354486696>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZPdSFPu8N5CTUUTQJesIpr23qJXks5tFTbEgaJpZM4RO_XR>
> .
>
 =||= I see. One solution will be to explicitly add type-adapters for each of the java.* classes in Gson. 
But we will only be able to do that for classes up to JDK 6 (since we can't include classes for JDK 7+ given JDK 6 being the minimally supported version).

Your suggestion to @emulov is right: don't serialize java.* classes without writing an explicit type-adapter.

@emulov if you do write type adapters for java.* classes (especially JDK 9), feel free to contribute them back in the extras package for the benefit of others.  =||= I would rather see an option to prevent the serialization. Sadly we'll
never be able to turn it on by default.

On Fri, Dec 29, 2017 at 2:08 PM inder123 <notifications@github.com> wrote:

> I see. One solution will be to explicitly add type-adapters for each of
> the java.* classes in Gson.
> But we will only be able to do that for classes up to JDK 6 (since we
> can't include classes for JDK 7+ given JDK 6 being the minimally supported
> version).
>
> Your suggestion to @emulov <https://github.com/emulov> is right: don't
> serialize java.* classes without writing an explicit type-adapter.
>
> @emulov <https://github.com/emulov> if you do write type adapters for
> java.* classes (especially JDK 9), feel free to contribute them back in the
> extras package for the benefit of others.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1216#issuecomment-354487723>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEETIMJdeOGqigdOAYwG__qaiB-Q1Kks5tFTizgaJpZM4RO_XR>
> .
>
 =||= The current trend for avoiding ""illegal reflective access"" warnings and errors is using Unsafe for setting ""accessible"" flag. See https://github.com/amogilev/j9-reflection-utils for details. 
If you are interested, I can make a pull request with changes similar to https://github.com/amogilev/yagson/commit/471352264e04e6fb97a4c2b2fca80e3915138ba0 =||= @amogilev Yes, that would work. 
1. Please don't add a maven dependency to j9-reflection-utils, just copy over the minimal set of classes.
2. Please ensure compatibility with JDk 6 onwards
Thanks =||= Thanks for all replies.

@JakeWharton @inder123 Your are right when you stated that developers should not serialize internal java.* classes. However, I don't think it is a good idea to prevent such serialization in the future for the following reasons:

- This policy should have been enforced right away from the beginning, when introducing Gson. I am sure that now, many developers already have code serializing internal java.* classes and strictly preventing this in a future version of Gson might break their code (even though you would do this for the greater good). It is the responsibility of the developers who have this practice to keep an eye on the compatibility of their serialized java.* classes and adjustments must be made on their side when java.* classes do in fact change.

- Also, we use Gson many times to quickly serialize an object in memory to perform some analysis on the data (e. g. using JSON path), or converting it to other formats (e. g. to XML using org.json.XML) without persisting or deserializing the data at all. In such cases, I think it very much makes sense to perform the serialization of java.* classes, just as it was done till now. Strictly preventing in the current state would be counter-productive imo.

@amogilev @inder123 That seems be a good fix and also guarantees backwards-compatibility and the same semantics Gson had till now. Please let us know when it has been implemented.

Thanks a lot for your effort! =||= @emulov The pull request with the fix is ready, so there is a chance that it will be in the next Gson release.
However, I am not quite sure that you example would work with it. At first, `NumberFormat` is an abstract class, so one cannot deserialize to it. Secondly, if your actual instance is `DecimalFormat`, that class cannot be serialized because of multiple fields named `maximumIntegerDigits` (and my fix which supported multiple fields with the same name was rejected recently) =||= @amogilev Thanks for the fix, looking forward to use the new version!

I understand what you're saying and the mentioned case with NumberFormat actually corresponds to the second use case I mentioned in my last post, so deserialization does never take place. It probably wasn't the best example for triggering the warning message. The object just needs to be serialized to analyze some actual data fields of the class and this worked well without any warning message till now. In general, I was rather referring before to classes like LocalDate, LocalDateTime, etc., which might change in the future (but probably won't) and should be allowed to be serialized and deserialized, at the risk of the developer. In case the classes are changed, deserialization should take an eager approach by eagerly deserializing the matching fields and not initializing non-matching fields. I do think that this is how Gson currently works anyways, but correct me if I'm wrong.

Thanks again! =||= As I said, preventing java.* would be an option and we'd rely on module
encapsulation to be the slow enforcement.

On Mon, Jan 1, 2018, 7:25 AM emulov <notifications@github.com> wrote:

> @amogilev <https://github.com/amogilev> Thanks for the fix, looking
> forward to use the new version!
>
> I completely understand what you're saying and the mentioned case with
> NumberFormat actually corresponds to the second use case I mentioned in my
> last post, so deserialization does never take place. The object just needs
> to be serialized to analyze some actual data fields of the class and this
> worked well without any warning message till now. In general, I was rather
> referring before to classes like LocalDate, LocalDateTime, etc., which
> might change in the future (but probably won't) and should be allowed to be
> serialized and deserialized, at the risk of the developer. In case the
> classes are changed, deserialization should take an eager approach by just
> deserializing the matching fields and not initializing non-matching fields.
> I do think that this is how Gson currently works anyways, but correct me if
> I'm wrong.
>
> Thanks again!
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1216#issuecomment-354650720>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEVbHXaP_MslQmyRa6sGIGe120enaks5tGM6cgaJpZM4RO_XR>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1218Java 9 support: use Unsafe-based reflection in Java 9+Andrey Mogilevamogilev01/03/18, 07:08:51 PM"Fixes ""illegal reflective access"" warnings and exceptions, like one in #1216 ""Thanks for the PR =||= All of these classes should be in `internal`. They're not public API. =||= @inder123 Thanks for the review, I have changed the code according to your comments.
@JakeWharton Do you mean that the code shall be moved to the package 'com.google.gson.internal.reflect'? Guess it makes sense... =||= Thanks for patiently incorporating all the feedback =||= So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*

<!-- need_author_consent --> =||= I think this might be the wrong solution to the problem. Unfortunately, the right solution to this problem is a lot of work.

Instead of using a bigger, more powerful weapon to read & write platform types, I think Gson should have a new java-platform-typeadapters module.

Wherever Gson’s users are relying on reflection to read+write a platform type like java.util.UUID, we should handwrite a type adapter. That way we avoid getting into an arms race with the JDK maintainers who really don’t want their fields to be reflected upon. =||= ... anyone who wants to use Gson with Java 9 to read+write platform types would need this module. And the Gson-using community would have to built the module to cover as many types as is reasonable. =||= Strongly agree https://github.com/google/gson/issues/1216#issuecomment-354657771. The module system is the opportunity to enforce something which never should have been allowed! =||= @swankjesse Agree with you. We can start on adding some of these type adapters, and build upon it gradually. =||= "Java 9 support: use Unsafe-based reflection in Java 9+Andrey Mogilevamogilev01/03/18, 07:08:51 PM"Fixes ""illegal reflective access"" warnings and exceptions, like one in #1216 "NaNinder12301/03/18, 06:52:38 PMinlined createReflectionAccessor method1
1220can not make a java.lang.reflect.method constructor accessibledanponce01/02/18, 08:02:00 PM"Everything in my code was fine a few days ago till this error started to happened on every conversion I do on the different classes I have. (APi version 24) This is the error stack trace:

`Fatal Exception: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible
       at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133)
       at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119)
       at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)
       at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:95)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)
       at com.google.gson.Gson.getAdapter(Gson.java:416)
       at com.google.gson.Gson.fromJson(Gson.java:878)
       at com.google.gson.Gson.fromJson(Gson.java:844)
       at com.google.gson.Gson.fromJson(Gson.java:793)
       at com.moviit.pbbchile_android.sync.ProducerGroupSyncer$DataReceivedHandler.OnSuccess(ProducerGroupSyncer.java:80)
       at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:321)
       at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:309)
       at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:60)
       at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:30)`""You are trying to serialize a type that has a field whose type is `java.lang.reflect.Method`. This either needs marked `transient` or you need to write a custom type adapter for it. =||= Can you explain a little bit more? It may be because I have a list inside my object? =||= No. One of your objects or or one of the types it extends from has a field
whose type is Method.

On Tue, Jan 2, 2018 at 3:06 PM danponce <notifications@github.com> wrote:

> Can you explain a little bit more? It may be because I have a list inside
> my object?
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1220#issuecomment-354862712>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEER6VUJKKpF68CvFoM-1uaGKVwMBvks5tGow1gaJpZM4RQ_PO>
> .
>
 =||= I'm having this same issue only on Samsung Galazy 8 and up and some Huawei. It runs on most other android phones. Any reason for the inconsistancy on devices? =||= I'm having the same issue on the Samsung device. Could anyone help me with this? =||= You need to use transient on the properties you don't want to serialize in your object. =||= > Everything in my code was fine a few days ago till this error started to happened on every conversion I do on the different classes I have. (APi version 24) This is the error stack trace:
> 
> `Fatal Exception: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:133) at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:119) at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101) at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:95) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldAdapter(ReflectiveTypeAdapterFactory.java:135) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.<init>(ReflectiveTypeAdapterFactory.java:105) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:104) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:160) at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:96) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53) at com.google.gson.Gson.getAdapter(Gson.java:416) at com.google.gson.Gson.fromJson(Gson.java:878) at com.google.gson.Gson.fromJson(Gson.java:844) at com.google.gson.Gson.fromJson(Gson.java:793) at com.moviit.pbbchile_android.sync.ProducerGroupSyncer$DataReceivedHandler.OnSuccess(ProducerGroupSyncer.java:80) at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:321) at com.moviit.moviitlibrary.network.NetworkRequests$SuccessResponseListener.onResponse(NetworkRequests.java:309) at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:60) at com.android.volley.toolbox.StringRequest.deliverResponse(StringRequest.java:30)`

Can you tell me how did you fix it? Please. =||= > I'm having this same issue only on Samsung Galazy 8 and up and some Huawei. It runs on most other android phones. Any reason for the inconsistancy on devices?

I am having the same issue on a huawei p20. Is there any solution for this? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1222Added a check for use of type variable to TypeToken constructor.Jorn VerneeJornVernee09/10/20, 07:54:07 PM"A pull request that addresses my earlier issue #1219.

This adds a check to the protected `TypeToken` constructor that will now throw a runtime exception if the `TypeToken` uses a type variable. So that this design time error produces a more clear error earlier during execution.""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_sender_cla --> =||= CLAs look good, thanks!

<!-- ok --> =||= I've used a `RuntimeException`  because `getSuperclassTypeParameter` does the same for missing type parameters. So I think that issue can be ignored?

I've also made the accessibility of the `usesTypeVariable` method the same as `getSuperclassTypeParameter`. That could also be made `private` not sure what to do there.

I also haven't added any javadoc yet. I see you are not using javadoc annotations, so I'm not entirely sure  what to do there either. I also haven't added myself as an author in the javadoc yet, not sure if that's ok? Or if it starts at a certain level of contribution.
  
  
   =||= Closing old PR =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1223TypeAdapterFactory only for serialization / deserializationMartin Mlostekmlostekk01/09/18, 02:26:10 AM"Is it possible to register a TypeAdapterFactory that is used only for serialization (toJson), not for deserialization('fromJson') or vice versa with the same Gson instance?
  ""Look up the next adapter for the same type and delegate to it for whichever
method you don't want to change.

On Mon, Jan 8, 2018, 6:55 AM Martin Mlostek <notifications@github.com>
wrote:

> Is it possible to register a TypeAdapterFactory that is used only for
> serialization (toJson), not for deserialization('fromJson') or vice versa?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1223>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEYmVmTT9HAVRlHvH4c25Hv-tLnVXks5tIgIpgaJpZM4RWRQo>
> .
>
 =||= ```java
public final class OnlySerializeOrDeserialize implements TypeAdapterFactory {
  final TypeToken<?> type;
  final boolean serialize;

  public static TypeAdapterFactory onlySerializeType(TypeToken<?> type) {
    return new OnlySerializeOrDeserialize(type, true);
  }

  public static TypeAdapterFactory onlyDeserializeType(TypeToken<?> type) {
    return new OnlySerializeOrDeserialize(type, false);
  }

  OnlySerializeOrDeserialize(TypeToken<?> type, boolean serialize) {
    this.type = type;
    this.serialize = serialize;
  }

  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
    if (!this.type.equals(type)) {
      return null;
    }
    final TypeAdapter<T> delegate = gson.getDelegateAdapter(this, type);
    return new TypeAdapter<T>() {
      @Override public void write(JsonWriter out, T value) throws IOException {
        if (!serialize) throw new UnsupportedOperationException(""Don't serialize "" + type);
        delegate.write(out, value);
      }

      @Override public T read(JsonReader in) throws IOException {
        if (serialize) throw new UnsupportedOperationException(""Don't deserialize "" + type);
        return delegate.read(in);
      }
    };
  }
}
```

Something like this should work. [Stack Overflow might be able to help.](https://stackoverflow.com/questions/tagged/gson) =||= I think he wants custom behavior for `read` or `write` and then to delegate otherwise. =||= But yes, let's go to StackOverflow for this usage question. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1226A collection of strings json turn nullzhiyuanzzy114701/10/18, 02:33:58 PM"`public static void main(String[] args) {
		 List<String> list=new ArrayList<String>() {
			{
				add(""1"");
				add(""2"");
				add(""3"");
			}
		
	};
		
		Gson gson=new Gson();
                String jsonStr=gson.toJson(list);
		System.out.println(json);
		
	}`
the jsonStr is null,
Why is this, thank you
  ""Don't make an anonymous inner class subtype of ArrayList.
Gson has no way to deserialization them. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1227illegalAccessErrorwangkuiazq01/11/18, 10:43:32 PM"Hi,
 When I try to deserialize a List from json string, some time will occur IllgealAccessError. The error code as follow:

`Exception in thread ""gamePool-2"" java.lang.IllegalAccessError: tried to access class com.jgame.job.net.role.RoleViewDataJob$1 from class com.jgame.job.net.role.RoleViewDataJob`

And my java code as follow:

`GSONUtils.fromJson(jsonStr,new TypeToken<List<WeaponData>>(){}.getType());`

Any Idea in gson to handle this kind of situation??""looks like you have an anonymous inner class within `RoleViewDataJob`. Gson has no way of serializing anonymous inner classes. Consider making it a static or top-level class.

If you can provide a minimum failing test case to demonstrate the problem, somebody on [Stack Overflow](stackoverflow.com/questions/tagged/gson) might be able to help. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1228How to deserialize this format with tksiaokia01/14/18, 04:55:30 AM"{
  ""status"": 0,
  ""result"": true,
  ""accounts"": [{
    ""bank_name"": ""xx"",
    ""id"": 1,
    ""account_id"": ""xxx""
  }]
}
i Just want the Account Array
Option:
1. Create class ResponseAccount{
int status;
boolean result;
List<Account> accounts;
}
ResponseAccount model = new Gson().fromJson(response,ResponseAccount.class);
List<Account> accounts = model.account

2.
TypedValue typedValue = xxx;
List<Account> accounts = new Gson().fromJson(response.getJsonObject(""accounts"",typedValue);

What i want is 
List<Account> accounts = new Gson().fromJson(response,Account.class);
which can ignore the first layer and straight go to ""accounts""
 "Please ask generate usage questions on StackOverflow with the 'gson' tag. This issue tracked is for bugs and feature requests only. Thanks. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1231Serializer/Deserializer AnnotationJulian Ostarekjlnstrk01/16/18, 09:17:09 PM"I'd like to see the possibility of annotating classes with something like an @Serializer annotation in the following way:

```java
@Serializer(FooSerializer.class)
@Deserializer(FooDeserializer.class)
public class Foo {
    ...
}
```

This would tell Gson to use an instance of the denoted class (default constructor being a requirement) for (De-)Serialization of the annotated type. 
As we're messing with Gson-specific annotations in our model classes anyway, I feel like this shouldn't be too much of a complication/overhead. Thoughts?"This already exists. You can use `@JsonAdapter` with a `TypeAdapterFactory`, `TypeAdapter`, `JsonSerializer`, or `JsonDeserializer` to provide custom logic for a type or member. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1232Create a GsonBuilder from GsonBojan Tomićkaqqao01/17/18, 03:53:45 PM"I'd like to request a feature that would allow obtaining a `GsonBuilder`instance from an existing `Gson` instance, similar to what Jackson enables via its `ObjectMapper#copy` method.

The rationale is that it would allow reusing existing configuration. E.g. frameworks often include a preconfigured `Gson`  instance and this way other libraries using Gson would be able to inherit the same configurations, but still override/add what they need."Dupe of #1139 added by #1142. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1237Edit MalformedJsonException.java avoid mistakemontlikadanimontlikadani03/03/18, 02:21:35 PM"Welcome!
There would be a problem with **MalformedJsonException.java**. When I start a server, sometimes this error is present:
**I think this is just a mistake I've transcribed.**
> [14:29:10] [Server thread/WARN]:    at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
> [14:29:10] [Server thread/WARN]:    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
> [14:29:10] [Server thread/WARN]: Caused by: com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 60
> [14:29:10] [Server thread/WARN]: Caused by: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 60
> [14:29:10] [Server thread/WARN]:    ... 18 more""Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_sender_cla --> =||= This PR is invalid. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1239move module-info.java to the correct locationRiley Parkkashike12/15/18, 07:04:08 PMhttp://openjdk.java.net/projects/jigsaw/quick-start"Seems to be already in place:
https://github.com/google/gson/commit/5bbc768fa6cd3e8a3a7bebf52b0ac1e4c6e0bd12 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1240Unable to add gson library to mavenshruthikakwe01/30/18, 10:38:55 PM"Build fails with this error:
---------------------------------------------------------------------
------------------------------------------------------------------------
Building helloworld-web 1.0-SNAPSHOT
------------------------------------------------------------------------
The POM for com.google.code.gson:gson:jar:2.8.0 is missing, no dependency information available
------------------------------------------------------------------------

Failed to execute goal on project helloworld-web: Could not resolve dependencies for project com.twitter:helloworld-web:war:1.0-SNAPSHOT: Failure to find com.google.code.gson:gson:jar:2.8.0 in http://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]

To see the full stack trace of the errors, re-run Maven with the -e switch.
Re-run Maven using the -X switch to enable full debug logging.""It's definitely there: http://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.0/. This is likely a hiccup with your internet connection. =||= Yes, I can see it there. But when I build my project after adding the jar
file I get this error.

Can you give me the pom.xml details for this library?

Regards,
Shruthi

On Tue, Jan 30, 2018 at 5:39 PM Jake Wharton <notifications@github.com>
wrote:

> Closed #1240 <https://github.com/google/gson/issues/1240>.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1240#event-1449634179>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AHfk__BgmACYdYJrGLYW6tv6tjEvTd7Nks5tP5oQgaJpZM4RzHxh>
> .
>
 =||= They're available at the link above to browse.

On Tue, Jan 30, 2018 at 5:41 PM shruthikakwe <notifications@github.com>
wrote:

> Yes, I can see it there. But when I build my project after adding the jar
> file I get this error.
>
> Can you give me the pom.xml details for this library?
>
> Regards,
> Shruthi
>
> On Tue, Jan 30, 2018 at 5:39 PM Jake Wharton <notifications@github.com>
> wrote:
>
> > Closed #1240 <https://github.com/google/gson/issues/1240>.
> >
> > —
> > You are receiving this because you authored the thread.
> > Reply to this email directly, view it on GitHub
> > <https://github.com/google/gson/issues/1240#event-1449634179>, or mute
> > the thread
> > <
> https://github.com/notifications/unsubscribe-auth/AHfk__BgmACYdYJrGLYW6tv6tjEvTd7Nks5tP5oQgaJpZM4RzHxh
> >
> > .
> >
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1240#issuecomment-361759547>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEdqkbB4jmpsjFuZRZvGZjdhUMZTKks5tP5qkgaJpZM4RzHxh>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1245how to format  two date attributes in one object as different ?木木大叔HongKing02/03/18, 08:29:37 PM"the class like this:
```
class User {
  private Date serviceBgn;
  private Date serviceEnd;
  private Date createTime;
}
```
to json string like :
```
{
  serviceBgn : ""2017-10-01"",
  serviceEnd : ""2018-09-30"",
  createTime : ""2017-09-10 10:50:55"",
}
```
I can register a type adapter to deserializer, but I can't serializer. I think can I create an annotations do this like :
```
class User {
  @DateFormat(""yyyy-mm-dd"")
  private Date serviceBgn;

  @DateFormat(""yyyy-mm-dd"")
  private Date serviceEnd;

  @DateFormat(""yyyy-mm-dd hh:mm:ss"")
  private Date createTime;
}
```
but I try it as failed, how can I do it? It would be better if gson supports custom annotations."Please ask general usage questions on StackOverflow. This issue tracker is for bug reports and feature requests only. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1248How to convert ArrayListMultimap to json use Gson?passionofvcpassionofvc02/05/18, 01:17:41 PM"I use below code to convert map to json,
how to resolved my problem?
```
final Multimap<String, String> data = ArrayListMultimap.create();
data.put(""addr1"", ""20.44"");
data.put(""addr2"", ""10.44"");
data.put(""addr2"", ""40.44"");
Gson gson = new Gson();  
String json = gson.toJson(data.asMap()); 
System.out.printf( ""JSON: %s"", json.toString() );
```
the result is
`JSON: {""addr2"":[""10.44"",""40.44""],""addr1"":[""20.44""]}
`
but I want the below result[key:value], not [key:list].
`JSON: {""addr2"":""10.44"",""addr2"":""40.44"",""addr1"":""20.44""}`"You can write a TypeAdapter for this, although the latter is not valid JSON and might be mangled by other tools. If you need assistance please ask on StackOverflow. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1249Serialize a HashMap, result is nullJiang Yuchengfatjyc02/05/18, 01:16:41 PM"the code is
```java
Map map1 = new HashMap() {{
    put(""a"", ""1"");
    put(""b"", ""2"");
    put(""c"", ""3"");
}};

String json1 = new Gson().toJson(map1);

Map map2 = new HashMap();
map2.put(""a"", ""1"");
map2.put(""b"", ""2"");
map2.put(""c"", ""3"");

String json2 = new Gson().toJson(map2);

System.out.println(""json1 = "" + json1); // null
System.out.println(""json2 = "" + json2); // {""a"":""1"",""b"":""2"",""c"":""3""}
System.out.println(""Is Equals: "" + map1.equals(map2)); // true
```

the result is 
```
json1 = null
json2 = {""a"":""1"",""b"":""2"",""c"":""3""}
Is Equals: true
```

Why the json1 is null ?""Gson doesn't serialize anonymous classes. Use `Map.of` to create maps, not subclasses. =||= 
http://www.softwaregeek.net/2012/12/double-brace-initialization-in-java.html

 =||= @JakeWharton @Dhirajpandit  THX =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1251Gson Version : 2.8.2, java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessibleAmit Siddhpurasiddhpuraamitr02/13/18, 01:35:44 PM"I am using Gson version 2.8.2

I have used below code 

```
public void saveObject(View view){
        SharedPreferences prefs = this.getSharedPreferences(
                ""com.example.app"", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        Gson gson = new Gson();
        String str = gson.toJson(view, View.class);
        editor.putString(""text"", str);
        editor.commit();
    }
```
but I am getting an error like below

```
Process: com.example.amitsiddhpura.paperview, PID: 17252
                                                                                     java.lang.RuntimeException: Unable to start activity ComponentInfo{com.example.amitsiddhpura.paperview/com.example.amitsiddhpura.paperview.MainActivity}: **java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible**
                                                                                         at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2778)
                                                                                         at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856)
                                                                                         at android.app.ActivityThread.-wrap11(Unknown Source:0)
                                                                                         at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589)
                                                                                         at android.os.Handler.dispatchMessage(Handler.java:106)
                                                                                         at android.os.Looper.loop(Looper.java:164)
                                                                                         at android.app.ActivityThread.main(ActivityThread.java:6494)
                                                                                         at java.lang.reflect.Method.invoke(Native Method)
                                                                                         at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
                                                                                         at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)
                                                                                      Caused by: java.lang.SecurityException: Can not make a java.lang.reflect.Method constructor accessible
                                                                                         at java.lang.reflect.AccessibleObject.setAccessible0(AccessibleObject.java:131)
                                                                                         at java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:115)
                                                                                         at com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:101)
                                                                                         at com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:83)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:99)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.internal.bind.ArrayTypeAdapter$1.create(ArrayTypeAdapter.java:48)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
                                                                                         at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
                                                                                         at com.google.gson.Gson.getAdapter(Gson.java:423)
                                                                                         at com.google.gson.Gson.toJson(Gson.java:661)
                                                                                         at com.google.gson.Gson.toJson(Gson.java:648)
                                                                                         at com.google.gson.Gson.toJson(Gson.java:603)
                                                                                         at com.example.amitsiddhpura.paperview.MainActivity.saveObject(MainActivity.java:34)
                                                                                         at com.example.amitsiddhpura.paperview.MainActivity.onCreate(MainActivity.java:23)
                                                                                         at android.app.Activity.performCreate(Activity.java:6999)
                                                                                         at android.app.Activity.performCreate(Activity.java:6990)
                                                                                         at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1214)
                                                                                         at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2731)
                                                                                         at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2856) 
                                                                                         at android.app.ActivityThread.-wrap11(Unknown Source:0) 
                                                                                         at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1589) 
                                                                                         at android.os.Handler.dispatchMessage(Handler.java:106) 
                                                                                         at android.os.Looper.loop(Looper.java:164) 
                                                                                         at android.app.ActivityThread.main(ActivityThread.java:6494) 
                                                                                         at java.lang.reflect.Method.invoke(Native Method) 
                                                                                         at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438) 
                                                                                         at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807) 


```""Gson cannot serialize types which have fields of type java.lang.reflect.Method. Either remove the field, mark it as transient, or define a custom TypeAdapter to perform serialization. =||= Open =||= > Gson cannot serialize types which have fields of type java.lang.reflect.Method. Either remove the field, mark it as transient, or define a custom TypeAdapter to perform serialization.

This worked for me. The problem is that I used CharSequence instead of String. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1252Possible dereference of a null value in JsonWriter.java from static analysis tool.Ashish Ranaashishrana16079602/16/18, 06:14:52 PM"While doing a static code analysis from CheckerFramework tool, field `stack` might lead to possible null dereference. Here is comparison of suggested code and original code. 
Code change suggestion for `push` method when it called from anonymous block. Here is original code:
```
  private void push(int newTop) {
    if (stackSize == stack.length) {
```
Suggested changes based on class instance still being in under-initialization state. Hence, dereferencing  of `stack` can be problematic.
Error message :
```
JsonWriter.java:360: error: [dereference.of.nullable] dereference of possibly-null reference stack
    if (stackSize == stack.length) {    // Annotation added from nullness checker analysis.
```
Suggested Changes :
```
  private void push(/*>>>@UnknownInitialization(java.lang.Object.class) JsonWriter this,*/ int newTop) {
    if (stack!=null && stackSize == stack.length) {    // Annotation added from nullness checker analysis.
``` 
If this issue is needed to be considered a `pr` can be made for update.
Here annotated file is also attached in reference to this issue with txt extension.
[JsonWriter.txt](https://github.com/google/gson/files/1727619/JsonWriter.txt)

""Good  =||= Looks like a bug in the tool. This can never be null. What is its justification? =||= Yes @JakeWharton  your analysis from `pr` comment is right and I have raised an issue for this regarding this problem. Considering a justification for such behavior is this following case :

@NonNull @UnderInitialization C b; | b | @NonNull
-- | -- | --
  | b.f | @MonotonicNonNull
---
Where b is class instance and f can be stack field. Hence, it gets treated as null type object when under initialization.  
Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1253USE GETTER AND SETTERandroid.israeldtingz02/16/18, 02:25:25 PM"HI GUYS PLEASE ADD OPTION TO USE IT."Dupe #232. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1255JsonWriter null dereference issue #1252 resolved.Ashish Ranaashishrana16079602/16/18, 02:23:52 PMBased on static tool analysis of Issue #1252. "Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed, please reply here (e.g. `I signed it!`) and we'll verify.  Thanks.

---

- If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address on your commit.  Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
- If your company signed a CLA, they designated a Point of Contact who decides which employees are authorized to participate. You may need to contact the Point of Contact for your company and ask to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to go/cla#troubleshoot. The email used to register you as an authorized contributor must be the email used for the Git commit.
- In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= This variable can never be null. It's initialized upon construction and only overwritten with `newStack` which also is never null. This class is not thread safe so there's no issues with cross-thread visibility. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1256Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $ Siddarth GSiddarthG02/17/18, 04:35:47 PM"Hi onFailure in retrofit is throwing this exception mentioned in title and this happened all of a sudden previously it was working fine,i'm having a real hard time analyzing what has changed that led to this problem,can someone please have a look at this and help me out,

if the formatting here is not clear, i have posted in stackoverflow
[https://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line](https://stackoverflow.com/questions/48840747/onfailure-methods-throws-exception-expected-begin-array-but-was-string-at-line)

I have this Json Response coming from server:

[{ ""disposal_type_category"": { ""category_entry_total"": ""21"" }, ""disposal_types"": [{ ""ID"": ""78"", ""entries"": [{ ""ID"": 2584, ""entry_tally"": ""1"" }, { ""ID"": 2578, ""entry_tally"": ""1"" } ] }, { ""ID"": ""1323"", ""entries"": [{ ""ID"": 2583, ""entry_tally"": ""1"" }, { ""ID"": 2579, ""entry_tally"": ""1"" } ] } ] }, { ""disposal_type_category"": { ""category_entry_total"": ""25.2"" }, ""disposal_types"": [{ ""ID"": ""80"", ""entries"": [] }, { ""ID"": ""84"", ""entries"": [] } ] } ]

This is in my ApiClient.java:

public static Retrofit getClient() { if (retrofit==null) { Gson gson = new GsonBuilder().setLenient().create(); retrofit = new Retrofit.Builder() .baseUrl(BASE_URL) .addConverterFactory(ScalarsConverterFactory.create()) .addConverterFactory(GsonConverterFactory.create(gson)) .build(); } return retrofit; }

This is in ApiInterface.java:

`Call<List<Disposal>> getCollection(@Header(""Authorization"") String token);`

Disposal.java:

public class Disposal { @SerializedName(""disposal_type_category"") @Expose public DisposalTypeCategory disposalTypeCategory; @SerializedName(""disposal_types"") @Expose public List<DisposalType> disposalTypes = null; }

DisposalTypeCategory.java:

public class DisposalTypeCategory { @SerializedName(""category_entry_total"") @Expose public String categoryEntryTotal; }

DisposalType.java:

public class DisposalType { @SerializedName(""ID"") @Expose public String iD; @SerializedName(""entries"") @Expose public List<Entries> entries = null; }

Entries.java:

public class Entries { @SerializedName(""ID"") @Expose private int iD; }

I have set setLineant(true) for Gson because if i remove it i will get malformed json exception, even this issue started recently previously was fine, not sure if its related.
The issue started after 2-3 new fields were added to API and the base url was changed but still the core remains same."StackOverflow is the correct place for this question. It's not a Gson feature or bug. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1260Serializing object created by Spring AOPzenglian02/26/18, 04:39:05 AM"See https://stackoverflow.com/questions/48961551/how-to-make-gson-ignore-the-fields-added-by-spring-aop.

In below code, `student` is created via Spring AOP which is a proxy, 
With the below exclusion `toJson(student)` returns ""{}"". Without it it throw exception.


```
public class ExcludeAspects implements ExclusionStrategy {
    @Override
    public boolean shouldSkipField(FieldAttributes f) {
        if(f.getName().startsWith(""CGLIB$""))
            return true;
        return false;
    }

    @Override
    public boolean shouldSkipClass(Class<?> clazz) {
        return false;
    }
}

@Data @NoArgsConstructor @AllArgsConstructor
public class Student {
    private Integer age;
    private String name;
}

public static void main(String[] args) {
   Gson gson = new GsonBuilder().setPrettyPrinting().addSerializationExclusionStrategy(new ExcludeAspects()).create();
   ApplicationContext context = new ClassPathXmlApplicationContext(""aop.xml"");

   //return ""{}""
   Student student = (Student) context.getBean(""student"");
   gson.toJson(student);       

   //works fine
   Student student2 = new Student(11,""Zara"");
   gson.toJson(student2);       
}

<aop:config>
    <aop:aspect id=""log"" ref=""logging"">
        <aop:pointcut id=""selectAll"" expression=""execution(* com.tutorial.Student.getName(..))""/>
        <aop:before pointcut-ref=""selectAll"" method=""beforeAdvice""/>
        <aop:after pointcut-ref=""selectAll"" method=""afterAdvice""/>
    </aop:aspect>
</aop:config>
<bean id=""student"" class=""com.tutorial.Student"">
    <property name=""name""  value=""Zara"" />
    <property name=""age""  value=""11""/>
</bean>
```
"It's rare to add aspect to a POJO, closing it. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1263return Long instead of Double if number has no dotzenglian03/03/18, 03:19:50 PM"e.g., ""1.0"" is parsed as Double while ""1"" is parsed as Long.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to `go/cla#troubleshoot`.
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= tests fail =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1264Parse number to Integer, Long, BigInteger and Double respectivelyzenglian04/16/18, 10:19:12 AM"e.g., ""1.0"" and ""1e6"" is parsed as Double,  ""1"" is parsed as int, ""9223372036854775807"" is parsed as long.""IMHO it requires more logic to be added. Instead of just processing `case NUMBER`, it could be better to introduce new JsonToken parameter, say separate `NUMBER` into `DOUBLE_NUMBER` and `LONG_NUMBER`, and then process more straight. =||= I think it will be better than using Double for all. But I think it's a good idea of `DOUBLE_NUMBER` and `LONG_NUMBER`. =||= 
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= CLAs look good, thanks!

<!-- ok --> =||= I do not understand the reason for adding BigInteger, without adding BigDecimal as well... =||= I think Double is able to hold arbitrary big decimal, but Long is limited to MAX_LONG. =||= see #1288 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1265Gradle config snippet to use `implementation`serv-inc05/16/18, 01:45:56 PM"As of https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation, 

> The `compile` configuration still exists but should not be used as it will not offer the guarantees that the `api` and `implementation` configurations provide.

See also https://stackoverflow.com/questions/44493378/whats-the-difference-between-implementation-and-compile-in-gradle and https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html."Another PR was merged for this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1266Added in Type Adapters to be able to deal with LocalDate and LocalDat…Raihaanreegz09/18/19, 05:35:53 PMAdded in Type Adapters to be able to deal with serialization and deserialization of LocalDate and LocalDateTime objects."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the project maintainer to `go/cla#troubleshoot`.
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= This will not work on JDK 6 =||= Any update on this, would be an urgent feature. =||= > Any update on this, would be an urgent feature.

Kinda forgot about this. I'll try making the requested fixes asap and resubmit for review. =||= > I signed it!

I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_author_cla --> =||= Let's spin into a separate library for JDK 8 type adapters for Gson. =||= Please contribute these in https://github.com/google/gson/tree/master/extras/src =||= > Please contribute these in https://github.com/google/gson/tree/master/extras/src

Being new to this - can I get clarification on what you're requesting please?

Do I need to submit this PR to the referenced repository? =||= @reegz I am suggesting that we provide these as sample type adapters instead of the main Gson distribution.  Our extras directory holds such sample code, so you can move these classes there.

Probably a better location would be a java8 specific sub-directory where we add providers for Java 8. But that isn't setup yet. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1268JsonWriter#jsonValue(String) throws AssertionErrorMiroslav VasilevHaedHutner03/19/18, 06:09:55 PM"Relevant code:

https://github.com/Atherys-Horizons/AtherysCore/blob/master/src/main/java/com/atherys/core/gson/AbstractConfigurateAdapter.java#L39

Without getting into the details of it, `logger.info(json)` outputs the proper Json string. However, JsonWriter#jsonValue(String) right after it throws an AssertionError. Here is the relevant error:

`[19:35:59] [Server thread/INFO] [atheryscore]: Write: {""ContentVersion"":1,""ItemType"":""minecraft:anvil"",""Count"":1,""UnsafeDamage"":0,""UnsafeData"":{""display"":{""Name"":""The Magical Anvil""}}}

[19:35:59] [Server thread/ERROR] [Sponge]: Could not pass FMLServerStartedEvent to Plugin{id=atherysquests, name=A'therys Quests, version=1.0.0b, description=A quest plugin written for the A'therys Horizons server., source=D:\Sponge1122\Server\mods\AtherysQuests-all.jar}
java.lang.AssertionError: null
        at com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36) ~[JsonTreeWriter$1.class:?]
        at java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]
        at java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]
        at java.io.Writer.append(Unknown Source) ~[?:1.8.0_161]
        at com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436) ~[JsonWriter.class:?]
        at com.atherys.core.gson.AbstractConfigurateAdapter.write(AbstractConfigurateAdapter.java:44) ~[AbstractConfigurateAdapter.class:?]
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]
        at com.google.gson.TypeAdapter.toJsonTree(TypeAdapter.java:234) ~[TypeAdapter.class:?]
        at com.atherys.core.utils.RuntimeTypeAdapterFactory$1.write(RuntimeTypeAdapterFactory.java:222) ~[RuntimeTypeAdapterFactory$1.class:?]
        at com.google.gson.TypeAdapter$1.write(TypeAdapter.java:191) ~[TypeAdapter$1.class:?]
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[CollectionTypeAdapterFactory$Adapter.class:?]
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[CollectionTypeAdapterFactory$Adapter.class:?]
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]
        at com.google.gson.Gson.toJson(Gson.java:669) ~[Gson.class:?]
        at com.google.gson.Gson.toJson(Gson.java:648) ~[Gson.class:?]
        at com.google.gson.Gson.toJson(Gson.java:603) ~[Gson.class:?]
        at com.atherys.quests.AtherysQuests.start(AtherysQuests.java:120) ~[AtherysQuests.class:?]
        at com.atherys.quests.AtherysQuests.onStart(AtherysQuests.java:141) ~[AtherysQuests.class:?]
        at org.spongepowered.common.event.listener.GameStartedServerEventListener_AtherysQuests_onStart5.handle(Unknown Source) ~[?:?]
        at org.spongepowered.common.event.RegisteredListener.handle(RegisteredListener.java:95) ~[RegisteredListener.class:1.12.2-2611-7.1.0-BETA-2970]
        at org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:335) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]
        at org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:368) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]
        at org.spongepowered.common.SpongeImpl.postEvent(SpongeImpl.java:213) [SpongeImpl.class:1.12.2-2611-7.1.0-BETA-2970]
        at org.spongepowered.mod.SpongeMod.onStateEvent(SpongeMod.java:240) [SpongeMod.class:1.12.2-2611-7.1.0-BETA-2970]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]
        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]
        at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]
        at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]
        at net.minecraftforge.fml.common.LoadController.sendEventToModContainer(LoadController.java:278) [LoadController.class:?]
        at net.minecraftforge.fml.common.LoadController.propogateStateMessage(LoadController.java:256) [LoadController.class:?]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]
        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]
        at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]
        at com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]
        at com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]
        at net.minecraftforge.fml.common.LoadController.redirect$onPost$zza000(LoadController.java:560) [LoadController.class:?]
        at net.minecraftforge.fml.common.LoadController.distributeStateMessage(LoadController.java:148) [LoadController.class:?]
        at net.minecraftforge.fml.common.Loader.serverStarted(Loader.java:784) [Loader.class:?]
        at net.minecraftforge.fml.common.FMLCommonHandler.handleServerStarted(FMLCommonHandler.java:301) [FMLCommonHandler.class:?]
        at net.minecraft.server.MinecraftServer.run(MinecraftServer.java:486) [MinecraftServer.class:?]
        at java.lang.Thread.run(Unknown Source) [?:1.8.0_161]`"Not a Gson-related error. Please ignore. =||= This is in part actually a valid Gson issue, see #1651. In general using `jsonValue(String)` should be avoided if you cannot know for sure that the JsonWriter is not actually a JsonTreeWriter at runtime. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1269How to deal with false values instead of objectPaulo Coutinhopaulo-coutinho03/20/18, 08:57:39 PM"Hi,

Im using an old API that come with a false value instead of object. The structure is:

```
{
    ""customer"": {
          ""subscription"": {  }
     }
}
```

But sometime it come:

```
{
    ""customer"": {
          ""subscription"": false
     }
}
```

But gson throw exception because the expected object come as false value.

There is any easy way to deal with it?

Thanks for any help."You can write a TypeAdapter for this. Please ask this question on StackOverflow. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1270String vonvert to Date exceptionNothingismaonothingismao03/21/18, 12:53:54 PM"```
@Test
    public void testDateBug() {
        Gson gson = new GsonBuilder()
            .setDateFormat(""yyyy-MM-dd HH:mm:ss:SSS"").create();
        try {
            Date
                newDate = gson.fromJson(""2018-03-21 17:43:32:562"", Date.class);
            System.out.println(newDate);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
```
System throw exception when convert ""2018-03-21 17:43:32:562"" to Date by me.


```
com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
	at com.google.gson.Gson.assertFullConsumption(Gson.java:864)
	at com.google.gson.Gson.fromJson(Gson.java:854)
	at com.google.gson.Gson.fromJson(Gson.java:802)
	at com.google.gson.Gson.fromJson(Gson.java:774)
	at com.alibaba.butterfly.core.invoke.GsonTest.testDateBug(GsonTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568)
	at com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1409)
	at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:542)
	at com.google.gson.stream.JsonReader.peek(JsonReader.java:425)
	at com.google.gson.Gson.assertFullConsumption(Gson.java:860)
	... 26 more
```"That string is not valid JSON. Perhaps you meant to surround it with quotes? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1271Issue with mapping empty array Expected BEGIN_ARRAY but was BEGIN_OBJECTSureshSureshSc03/22/18, 12:32:58 PM"Hi 

I have json structure line 

```
 { ""data"" : [ {""name"":""Suresh"", ""Age"":26}, {""name"":""Nat"", ""Age"":27}]
 }
```

when i map above JSON with Gson i dont get any exception.

When i parse my response when there is no data (refer below JSON)

```
 { ""data"" : [ ]
 }
```
i am getting below exception.
`java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $`

How to parse Array of objects when array is empty?"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1276Unexpected error when using gsonDeleted userghost04/02/18, 08:57:54 AM"- I have wrote a JsonWebToken class like below:
` 
   public class JsonWebToken {

     public static class Header{} //with some properties

     public static class Payload{}//with some properties

     public static class Crypto{}// with some peroperties

  }
`
when I use **toJson**,everything is ok,
but when i want to parse the Json String to Object, a error like this occurs:
 java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:224)

can u give me some instructions?
Thanks "sorry ,i solved it just now. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1277How to solve the problem when i use parameter with Any type?Plusjiahao-shen04/02/18, 12:47:28 PM"I write a class like this:
```kotlin
data class SocketResponse(val msg: Int,
                          val info: Any?)

data class AddFriendRequest(val fromTelephone: String,
                            val fromUserName: String,
                            val toTelephone: String,
                            val message: String?)
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        Logger.addLogAdapter(AndroidLogAdapter())
        val text = Gson().toJson(SocketResponse(10, AddFriendRequest(""123456"", ""sam"", ""435789"", ""
Hello World"")))

        val temp = Gson().fromJson(text, SocketResponse::class.java)

        val info = temp.info as AddFriendRequest

    }

}
```
Android Studio tell me the error:java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.sam.letsrun.Model.AddFriendRequest,why Gson cannot deal with the data of ""Any"" type"Please ask general usage questions on StackOverflow. These issues are for tracking bugs and feature requests only. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1278Add FieldNamingPolicy.LOWER_CASE_WITH_DOTSzenglian04/28/18, 01:50:09 AM"Dot separated property naming is one of the most common field naming policies, used in many products like Spark, hadoop, log4j etc, e.g., `spark.executors.memory`, which is mapped to `sparkExecutorsMemory` as class field name.
This is very similar to LOWER_CASE_WITH_DASHES, the only difference is using `.` instead of `-`.""An example

```
{
  ""monitor.interval"": 120,
  ""monitor.max.retries"": 100,
  ""monitor.emails"": """",
  ""server.address"": ""0.0.0.0"",
  ""server.port"": 8091,
  ""server.max.connections"": 10,
  ""jdbc.driver"": ""org.h2.Driver"",
  ""jdbc.url"": ""jdbc:h2:tcp://slc09woc:19092/h2-db"",
  ""jdbc.auth"": {
    ""user"": ""user"",
    ""password"": ""password""
  }
}
``` =||= "Add FieldNamingPolicy.LOWER_CASE_WITH_DOTSzenglian04/28/18, 01:50:09 AM"Dot separated property naming is one of the most common field naming policies, used in many products like Spark, hadoop, log4j etc, e.g., `spark.executors.memory`, which is mapped to `sparkExecutorsMemory` as class field name.
This is very similar to LOWER_CASE_WITH_DASHES, the only difference is using `.` instead of `-`."NaNLeon04/02/18, 12:36:36 PMadd FieldNamingPolicy.LOWER_CASE_WITH_DOTS1
1279Add custom indent for pretty printingVasyl FranchukWasylF06/09/21, 06:17:15 PM"It would be great if we can specify custom indent while call pretty printing. Currently pretty printing always use 2 spaces for indent. This customization also allows to reduce size of resulting json. 
Comparison table and code for generating json below:

| Indent \ setsCount | 100 | 2000 |
| --- | --- | --- |
| 2 spaces |  99,7 kb |  50,9 MB |
| 1 tab |  79,5 kb | 42,9 MB |
| nothing | 59,3 kb | 34,9 MB |


```
        List<Set<Integer>> sets = new ArrayList<Set<Integer>>();
        int setsCount = 2000;
        for (int setN = 0; setN < setsCount; setN++) {
            TreeSet<Integer> set = new TreeSet<Integer>();
            for (int i = 0; i < setsCount; i++) {
                set.add(setN * setsCount + i);
            }
            sets.add(set);
        }

        String json = gsonManager.getGson().toJson(sets);

```""What's the motivation? If you care about size you aren't using pretty printing. =||= My team's project stores some large configuration data in the git repository as JSON. If I don't use pretty option the resulting file contains a single line with the whole JSON, so git couldn't show a difference between different versions. Currently, I use pretty JSON, but in my case, it increases the size of the JSON from 30 - 40 MB up to 100+ MB. Bigger resulting JSON also requires more RAM for converting. So, I suppose it would be cool to have such feature as a custom indent.
And the other reason is that war between people using tabs and spaces is endless:) So, it is great to have both options. =||= I agree, if you are appending to an existing Json with either 2, 4 spaces or tab indent, it would be nice to have such a feature. I'm actually suprised there isn't. =||= +1 for configurable indent size

@JakeWharton , my motivation is being able to compare jsons generated with gson against json files formatted in other tools, in my case IntelliJ Idea.  =||= +1 for configurability! =||= Already implemented in 2.8.7 release. 

Class `com.google.gson.stream.JsonWriter` has `public final void setIndent​(String indent);` which:

> Sets the indentation string to be repeated for each level of indentation in the encoded document. If `indent.isEmpty()` the encoded document will be compact. Otherwise the encoded document will be more human-readable.

This implementation indents with tab and appends final newline:

	void run(final File file, final JsonElement element) {
		final Gson gsonPrettyPrinting = new GsonBuilder().setPrettyPrinting().create();
		try (final PrintWriter pWriter = new PrintWriter(file)) {
			final JsonWriter jWriter = gsonPrettyPrinting.newJsonWriter(pWriter);
			jWriter.setIndent(""\t"");
			gsonPrettyPrinting.toJson(element, jWriter);
			pWriter.println();
		} catch (final IOException e) {
		}
	}

Best regards! =||= I believe @Conrad-T-Pino is right that this feature has been implemented, so the issue can be closed. =||= Untested `JasonElement` to `String` case:

	String run(final JsonElement element) {
		final Gson gsonPrettyPrinting = new GsonBuilder().setPrettyPrinting().create();
		try (final StringWriter sWriter = new StringWriter(file)) {
			final JsonWriter jWriter = gsonPrettyPrinting.newJsonWriter(sWriter);
			jWriter.setIndent(""\t"");
			gsonPrettyPrinting.toJson(element, jWriter);
			sWriter.write(System.lineSeparator());
			return sWriter.toString();
		} catch (final IOException e) {
			return null;
		}
	}

Best regards. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1280Add custom indent for pretty printing #1279Vasyl FranchukWasylF10/04/19, 08:31:54 PMImplementation for issue #1279 "
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= CLAs look good, thanks!

<!-- ok --> =||= I think this is a pretty useful feature to have in `GsonBuilder`. By the way, did you consider something like `.setPrettyPrintingByTabs(int count)` and `.setPrettyPrintingBySpaces(int count)` rather than allowing a user to specify an arbitrary indent string? I know that `JsonWriter` allows arbitrary indent strings, but it looks more of a design issue allowing to emit illegal JSON. Your thoughts? =||= @lyubomyr-shaydariv, Thanks for your review! Your proposal looks good. I could implement it. But what about just add check for indent string? smth like:

```
    if (indent != null && !indent.matches(""\\s*"")) {
        throw new IllegalArgumentException(""Indent could contains ONLY whitespaces"");
    }

```
 =||= @WslF The `\s` pattern also accepts CR, LF, FF and VT. I hardly imagine any of these as an indent character, so the `matches` can be improved:

* the `^(?: *|\t*)$` is more strict and it does not allow a mixture of spaces and tabs (e.g. `\t \t`);
* extracting the regex to a static field of `java.util.regex.Pattern` might slightly increase the performance having the regex already-compiled and ready to use).

But if I'd design a new API, I'd probably would go with methods that do not allow to add characters other than ` ` and `\t`, but accept non-negative `count`. Additionally, checking for a non-negative value, `count < 0`, is just cheaper than matching against the pattern: I saw a lot of cases at StackOverflow where people create a new `GsonBuilder` every time they need it even if the `GsonBuilder` requires no dynamic arguments.

However, my idea has at lease on disadvantage and would complicate things for indent strings that are stored elsewhere, let's say, as configuration. This would require a user to store both indent character and indent character count or have some defaults to these + and dynamically dispatch to either to `setPrettyPrintingByTabs` or to `setPrettyPrintingBySpaces`. From other perspective, instead of having the latter two, there could be another overload: `setPrettyPrinting(char indent, int count)`. This would require no a regex at all and would never go into a tab/spaces mixture + it might be aligned with indentation settings stored elsewhere. So, in general, three methods perhaps something like:

* `setPrettyPrinting(char indent, int count)` with `indent != ' ' && indent != '\t'` and `count < 0` invariants;
* `setPrettyPrintingByTabs(count)` with just a call to `setPrettyPrinting('\t', count)` (will never throw an 'Invalid indent character' exception);
* and `setPrettyPrintingBySpaces` with a call to `setPrettyPrinting(' ', count)` (will never throw an `Invalid indent character ` as well).

Anyway, the final decisions always go to the Gson development team. =||= I'd love to see this PR merged (or some variation), this is pretty old now. Any possibility it will get merged? =||= We would like to see a more general solution. For example, something that supplies a formatter that walks through a DOM tree and prints it.  =||= @inder123 but does it really need to be such complicated, and doesn't this PR merely implement a minor tweak for an existing currently poorly customizable indentation feature (that's pretty old itself) rather than implementing a neat well-designed formatter from scratch? =||= @lyubomyr-shaydariv It's not a minor tweak if you are introducing a new API.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1281updated README to use implementation instead of compileYaakovgreatjack105/16/18, 01:39:33 PM"As of io 17, google reccomends using implementation when adding gradle dependencies instead of compile as compile is now depreciated.

I updated the readme to use implementation instead of compile.

See https://youtu.be/7ll-rkLCtyk?t=22m20s for more details.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it!

> On Apr 3, 2018, at 3:21 PM, googlebot <notifications@github.com> wrote:
> 
> Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).
> 
> 📝 Please visit https://cla.developers.google.com/ <https://cla.developers.google.com/> to sign.
> 
> Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.
> 
> What to do if you already signed the CLA
> 
> Individual signers
> 
> It's possible we don't have your GitHub username or you're using a different email address on your commit. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.
> Corporate signers
> 
> Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to go/cla#troubleshoot <x-msg://2/go/cla#troubleshoot> (Public version <https://opensource.google.com/docs/cla/#troubleshoot>).
> The email used to register you as an authorized contributor must be the email used for the Git commit. Check your existing CLA data <https://cla.developers.google.com/clas> and verify that your email is set on your git commits <https://help.github.com/articles/setting-your-email-in-git/>.
> The email used to register you as an authorized contributor must also be attached to your GitHub account <https://github.com/settings/emails>.
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub <https://github.com/google/gson/pull/1281#issuecomment-378366111>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AV53pa1vUzrkYNGhNhk8yt-3UEibhCwzks5tk8utgaJpZM4TFo2r>.
> 

 =||= CLAs look good, thanks!

<!-- ok --> =||= So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.*

<!-- need_author_consent --> =||= I confirm I am ok with the pull request =||= "updated README to use implementation instead of compileYaakovgreatjack105/16/18, 01:39:33 PM"As of io 17, google reccomends using implementation when adding gradle dependencies instead of compile as compile is now depreciated.

I updated the readme to use implementation instead of compile.

See https://youtu.be/7ll-rkLCtyk?t=22m20s for more details."NaNinder12305/09/18, 08:11:43 PMMerge branch 'master' into master1
1282Invalid number: Dec trying to parse dateSAldoussaldous04/06/18, 11:55:47 PM"If I have a date of: **Dec 22, 2014 12:00:00 PM**

and I set the gson format like below:

`val gson = GsonBuilder().setDateFormat(""MMM d, yyyy HH:mm:ss a"").create() `
`val json = gson.toJson(input)`

When I read back the date the app crashes.

```
val caseType = object : TypeToken<ArrayList<MyCase>>() {}.type
return gson.fromJson<ArrayList<MyCase>>(json, caseType)
```

`java.lang.NumberFormatException: Invalid number: Dec at com.google.gson.internal.bind.util.ISO8601Utils.parseInt(ISO8601Utils.java:311)`

Any ideas why / how to fix?

thank you.""```
Gson gson = new GsonBuilder().setDateFormat(""MMM d, yyyy HH:mm:ss a"").create();
gson.toJson(""Dec 22, 2014 12:00:00 PM""));
```
works for me.
Do you have a failing test case?
I'd also be interested in seeing the full stack trace. =||= sorry, I think I found the issue, it was in a different file, my bad. =||= could you specify where the problem originated? I'm finding a similar error =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1283Remove final from public classes such as GsonDavid Hofferdhoffer04/12/18, 08:02:37 PMRemove final from public classes such as Gson so Gson can be mocked in unit testing.  How can Gson be used in unit testing with final classes?  We use EasyMock for our mocking framework."There's no reason to mock Gson or any of its types. You should only mock types that you control so if you have an abstraction for serialization you could mock that, but if not, just call into Gson and let it do normal serialization. =||= That is not the case, one often needs to mock 3rd party objects just like any other.  In my case I will need to mock Gson#fromJson().  I don't want to have to wrap the Gson API with another layer just to be able to mock.

In my case I have used PowerMock to get around this problem.

@RunWith(PowerMockRunner.class)
@PrepareForTest({Gson.class}) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1284Format ReleaseProcess.md using GFMJoonHo Parkpjhjohn04/28/18, 01:42:54 AM"### Changes

- Space in `h1` header
- Indent code block & nested bullets properly with 3 spaces
- Unify numbered list indicator to `1.`

Since markdown automatically converts `1.` to `<li>` under `<ol>`, bullet numbers are automatically assigned in increment manner. Therefore there is no need to use other than `1.` for numbered list. So, I converted `2.` `3.` ... to `1.` for consistency.
Moreover, using only `1.` makes document easy to change: no number arrangement is required when adding / removing items in the ordered list"NaNFormat ReleaseProcess.md using GFMJoonHo Parkpjhjohn04/28/18, 01:42:54 AM"### Changes

- Space in `h1` header
- Indent code block & nested bullets properly with 3 spaces
- Unify numbered list indicator to `1.`

Since markdown automatically converts `1.` to `<li>` under `<ol>`, bullet numbers are automatically assigned in increment manner. Therefore there is no need to use other than `1.` for numbered list. So, I converted `2.` `3.` ... to `1.` for consistency.
Moreover, using only `1.` makes document easy to change: no number arrangement is required when adding / removing items in the ordered list"NaNJoonHo Park04/13/18, 04:45:33 AM"Format ReleaseProcess.md using GFM

Changes
- Space in `h1` header
- Indent code block & nested bullets properly with 3 spaces
- Unify numbered list indicator to `1.`"1
1285Solve the robot legs problemschernic04/13/18, 07:51:04 AMSorry, posted to the wrong repository. Please delete.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1286JsonParser stops parsing at first whitespaceHansgeorg Schwibbehgschwibbe04/13/18, 01:35:56 PM"The JsonParser stops parsing at the first whitespace. 

The following unit test describes the problem

```
import java.io.StringReader;

import org.junit.Assert;
import org.junit.Test;

import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;

public class JsonParserTest {
    @Test
    public void whitespaceTest() {
        StringReader stringReader = new StringReader(""ABC_DEF GHI"");
        JsonReader jsonReader = new JsonReader(stringReader);
        final JsonParser jsonParser = new JsonParser();
        JsonElement parsed = jsonParser.parse(jsonReader);
        Assert.assertEquals(""ABC_DEF GHI"", parsed.getAsString());
    }
}
```

The unit test results with the following error: 
`org.junit.ComparisonFailure: expected:<ABC_DEF[ GHI]> but was:<ABC_DEF[]>`""Escaping the string with doulbe quotes works: `new StringReader(""\""ABC_DEF GHI\"""")`

But why do I have to quote the strings?
When I pass a `StringReader` to the `JsonReader` it should be clear that I want to parse a string literal.
If I want to parse an integer I would pass an `IntegerReader` to the `JsonReader`. =||= Reopened because from my opinion this is a big pitfall. 
The unit test should work as it is (regardles of double quoting input strings or not). =||= > But why do I have to quote the strings?

Because [RFC 7159](https://tools.ietf.org/html/rfc7159) says so.
`ABC_DEF GHI` is not valid JSON, while `""ABC_DEF GHI""` is. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1287Gson causes Project structure in IntelliJ not to openSilfalion04/14/18, 02:51:39 PM"Hi everyone,

I'm reporting an issue that causes the project structure in intelliJ to not open after adding the Gson library to the global libraries. The problem disappears after disabling it.

Thanks for reading."Please report this to JetBrains. Nothing about the library should affect this and we have no control over this behavior from the library. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1289Gson serialization from JsonSerializationContext triggers an exception if a typeadapter uses jsonValueLaurentCrystark04/23/18, 04:18:17 PM"Hi,

I'm having trouble combining a JsonSerializer with a TypeAdapter that uses `JsonWriter ::jsonValue`

Here is the TypeAdapter for BigDecimals that I created:

```java
	public class BigDecimalTypeAdapter extends TypeAdapter<BigDecimal> {
		public static final BigDecimalTypeAdapter INSTANCE = new BigDecimalTypeAdapter();

		@Override
		public void write(JsonWriter out, BigDecimal value) throws IOException {
			if (value == null) {
				out.nullValue();
			} else {
				out.jsonValue(value.stripTrailingZeros().toPlainString());
			}
		}

		@Override
		public BigDecimal read(JsonReader in) throws IOException {
			return TypeAdapters.BIG_DECIMAL.read(in);
		}
	}
```
And that is a generic serializer for one of my interfaces:

```java
	public class MyInterfaceJsonSerializer implements JsonSerializer<IMyInterface> {
		@Override
		public JsonElement serialize(IMyInterface src, Type typeOfSrc, JsonSerializationContext context) {
			Map<String, Object> map = new TreeMap<>();
			
			Map<String, Object> map = new TreeMap<>();
			Map<String, Object> failed = new TreeMap<>();
			Method[] methods = IMyInterface.class.getMethods();

			for (int i = 0; i < methods.length; i++) {
				Method method = methods[i];
				String key = makePropertyName(method.getName());
				try {
					Object result = method.invoke(src);
					map.put(key, result);
				} catch (Exception e) {
					failed.put(key, e.getMessage());
				}
			}

			if (!failed.isEmpty())
				map.put(""__failed"", failed);

			return context.serialize(map); // Here that will call the BigDecimalTypeAdapter if any value is BigDecimal
		}
	}
```
When I try to serialize an instance of `IMyInterface`
```
java.lang.AssertionError
	at com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36)
	at java.io.Writer.write(Writer.java:192)
	at java.io.Writer.write(Writer.java:157)
	at java.io.Writer.append(Writer.java:227)
	at com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436)
	at my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:22)
	at my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:1)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)
	at com.google.gson.Gson.toJson(Gson.java:669)
	at com.google.gson.Gson.toJsonTree(Gson.java:562)
	at com.google.gson.Gson.toJsonTree(Gson.java:541)
	at com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)
	at my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:37)
	at my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:1)
	at com.google.gson.internal.bind.TreeTypeAdapter.write(TreeTypeAdapter.java:81)
	at com.google.gson.Gson.toJson(Gson.java:669)
	at com.google.gson.Gson.toJson(Gson.java:648)
	at com.google.gson.Gson.toJson(Gson.java:603)
	at com.google.gson.Gson.toJson(Gson.java:583)
	at my.service.ib.MyHandlerTest.test_gson(MyHandlerTest.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
```
This error comes from `JsonTreeWriter.UNWRITABLE_WRITER::write`.

I'm not sure if i'm doing something wrong here. If I change `jsonValue` to `value` it works nice except that I get double quotes around my BigDecimal values which i'd like to avoid.

Here is how i create my Gson object:
```java
	public static final Gson				GSON	= new GsonBuilder()
		.registerTypeHierarchyAdapter(IMyInterface.class, new MyInterfaceJsonSerializer())
		.registerTypeAdapter(BigDecimal.class, BigDecimalTypeAdapter.INSTANCE)
		.create();
```
Am I missing something here ?""Not an issue. If you take a look at what the documentation says on `jsonValue`, you see that it's a low-level method not to be used in high-level manner:

> Writes `value` directly to the writer without quoting or escaping.

This method is also not overridden in `JsonTreeWriter` (does it make any sense?) causing the `AssertionError` that's mostly ever an indicator that something is going totally wrong. Just replace the `jsonValue` method with the `value` method, and it will dispatch to the string overload that will properly escape and accumulate the the value into the internal JSON tree collected by `JsonTreeWriter`. =||= Thanks @lyubomyr-shaydariv!  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1292Please make JsonObject not finalfaissaloo04/17/18, 01:49:26 PMI want to be able to create derived classes of it, this is somewhat related to #1291.This class is not designed for inheritance and wanting to add helper methods to it is not a sufficient enough use case to abandon `final`. Static methods are your friend here, or use a language like Kotlin where you can define extension methods. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1293pass json to sugar ormSha_Raemashara04/18/18, 12:48:09 PM"how to pass Json object to sugar Orm database

 Gson gson = new Gson();
        Product baseWatch = gson.fromJson(jsonString, Product.class);"Please ask general usage questions on StackOverflow with the 'gson' tag. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1294List of Object having Nested HashMap,String,ArrayList & HashMap converting to JSON is incorrectswapnil050404/19/18, 04:08:16 AMI have a List<Object> and that list has nested hashmaps,json,maps,array and string, whenever I am converting  into JSON, GSON library  is skipping few hashmaps."Provide a failing test case. =||= I have got the problem my implementation was incorrect.
Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1295How i Remove Field from Json which values is Empty and Null?Nikunj paradvanikunjparadva04/21/18, 04:12:10 PMNaNPlease ask general usage questions on StackOverflow with the 'gson' tag or the Gson mailing list. This issue tracker is for bugs and feature requests only. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1296gson.toJson(obj,writer) function; Conversion object write file does not have all conversionAaronWanXinTao04/22/18, 03:20:41 PM"`Gson gson = new Gson();
BufferedWriter writer = new BufferedWriter(new FileWriter(new File(filePath)));
gson.toJson(spectrum,writer);`
I found that this object is not completely converted to json and saved in a .json file
This is the display of the last line of the converted json file
{""x"":1774.0,""y"":0.401832277657573},{""x"":1775.0,""y"":0.400960027494681},{""x"":1776
The last line of the object I want to convert is
 { ""x"": 1799.0,""y"": 0.386117120263839}, { ""x"": 1800.0,""y"": 0.385834181003457}]
I don't know if there is a problem with my function usage or this is a bug
Because I used the gson.toJson(obj) method to see the return value I found to be normally converted.
Hope to get help Thanks"You have to call `close()` on the buffered writer. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1297Invalid time zone indicator ' 'libsgh07/02/18, 02:56:19 AM"This my Gson code:
```
protected Object fromJson(String json, Type t) {
try {
			Gson g = new Gson();
			Object o = g.fromJson(json, t);
			return o;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return null;
  }
}
```
I have an object which have a 2 Timestamp fields and I want to consume a json response using Gson but I have got an Invalid time zone indicator ' '**.But this is not always happening. I don't know why**.
So this is out put :
```
Caused by: java.text.ParseException: Failed to parse date [""2018-04-12 18:38:02']: Invalid time zone indicator ' '
	at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:274) ~[gson-2.8.2.jar!/:?]
	at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:72) ~[gson-2.8.2.jar!/:?]
	... 106 more
Caused by: java.lang.IndexOutOfBoundsException: Invalid time zone indicator ' '
	at com.google.gson.internal.bind.util.ISO8601Utils.parse(ISO8601Utils.java:245) ~[gson-2.8.2.jar!/:?]
	at com.google.gson.internal.bind.DateTypeAdapter.deserializeToDate(DateTypeAdapter.java:72) ~[gson-2.8.2.jar!/:?]
	... 106 more
```
This my Gson data:
```
[
    {
        ""id"": 2267,
        ""code"": ""2100130106335294543080001"",
        ""name"": ""ly123"",
        ""servicetype"": ""VOD"",
        ""showname"": ""ly123"",
        ""type1"": 1,
        ""pictureurl1"": """",
        ""pictureurl2"": """",
        ""status"": 1,
        ""isdelete"": false,
        ""checkstatus1"": 10,
        ""createtime"": ""2018-04-12 18:38:02"",
        ""updatetime"": ""2018-04-12 18:38:15"",
        ""description"": """",
        ""sgs"": [],
        ""sgCodes"": [],
        ""isPool"": false
    }
]
```""我也碰到了 =||= Same issue here, did you get a solution? =||= 同问，求解决办法呢 =||= @duyanhan1995 需要设置时间格式才能用，默认的不是标准格式。 new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"") =||= @fradrick Need to set the time format to use, the default is not the standard format. new GsonBuilder().setDateFormat(""yyyy-MM-dd HH:mm:ss"") =||= @7788jay 多谢！问题已经解决 =||= @7788jay  我哭辽 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1298NullPointerException during parsing objectimakhalova04/27/18, 04:53:44 PM"I'm getting some blob from network and trying to parse it. Like that:
Gson gson = new Gson();
            if (!TextUtils.isEmpty(header)) {
                JWSHeader jwsHeader = gson.fromJson(header, JWSHeader.class);
            }

Most of the time it works well, but for some users it crashes. My guess is that data was corrupted ( I don't have sample of corrupted data). But shouldn't gson handle gracefully any wrong data and return null object instead?

Stack trace:
java.lang.NullPointerException: Attempt to invoke virtual method 'int java.lang.Object.hashCode()' on a null object reference
              at libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)
              at com.google.gson.reflect.TypeToken.<init>(TypeToken.java:74)
              at com.google.gson.reflect.TypeToken.get(TypeToken.java:296)
              at com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:53)
              at com.google.gson.Gson.getAdapter(Gson.java:423)
              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:115)
              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:164)
              at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:100)
              at com.google.gson.Gson.getAdapter(Gson.java:423)
              at com.google.gson.Gson.fromJson(Gson.java:886)
              at com.google.gson.Gson.fromJson(Gson.java:852)
              at com.google.gson.Gson.fromJson(Gson.java:801)
              at com.google.gson.Gson.fromJson(Gson.java:773)""If the top-level String is null, Gson returns null.
If the JSON is corrupted, it's a good idea to surface it to the client code, instead of silently ignoring it. That is what Gson does. =||= Should this be surfaced with JSONException but not NullPointerException? =||= @imakhalova possibly... would love a specific proposal with a PR =||= @inder123 @imakhalova Can you give example of corrupt json which can cause above exception?If below is the sample json which is send inside fromJson() and which works fine,then what possible change I can make to this so that it generates above exception?The exception logs doesn't explain what is making it corrupt..and i just want to recreate the exception so that i can get an idea that which key or value is getting corrupt.
{""A"":{""B"":0.0,""C"":1542198709727,""D"":0.0}} =||= @bhuvnesh123 
I don't really think it's a Gson-related issue, and I believe it has nothing to do with probably corrupted JSON documents: according to the exception, [here](https://android.googlesource.com/platform/libcore/+/5d930ca/luni/src/main/java/libcore/reflect/TypeVariableImpl.java#47), it may be thrown:

* either at `getName().hashCode()`
* or at `getGenericDeclaration().hashCode()`

I guess, that something causes the `Type` instance to get into a wrong state, and I guess something gets erased (let's say with Proguarding (similar [example](https://github.com/orhanobut/hawk/issues/143)); not sure how it deals with ""some users"" though). Make sure your type passed to `fromJson` and whatever types that might play in deserialization are well-wormed. =||= ```
java.lang.NullPointerException
Attempt to invoke virtual method 'int java.lang.Object.hashCode()' on a null object reference
1 libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)
2 java.util.HashMap.hash(HashMap.java:338)
3 java.util.HashMap.containsKey(HashMap.java:595)
4 java.util.HashSet.contains(HashSet.java:203)
5 com.google.gson.internal.$Gson$Types.resolve(Unknown Source:16)
6 com.google.gson.internal.$Gson$Types.resolve(Unknown Source:188)
7 com.google.gson.internal.$Gson$Types.resolve(Unknown Source:5)
8 com.google.gson.internal.$Gson$Types.getSupertype(Unknown Source:24)
9 com.google.gson.internal.$Gson$Types.getCollectionElementType(Unknown Source:3)
10 com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(Unknown Source:18)
11 com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)
12 com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:32)
13 com.google.gson.Gson.getAdapter(Unknown Source:75)
14 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source:38)
15 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source:117)
16 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source:22)
17 com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)
18 com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:162)
19 com.google.gson.Gson.getAdapter(Unknown Source:75)
20 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(Unknown Source:38)
21 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(Unknown Source:117)
22 com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(Unknown Source:22)
23 com.google.gson.Gson.getDelegateAdapter(Unknown Source:35)
24 com.eom.utils.gson.TypeSafeAdapterFactory.create(Unknown Source:162)
25 com.google.gson.Gson.getAdapter(Unknown Source:75)
26 com.google.gson.Gson.fromJson(Unknown Source:17)
27 com.google.gson.Gson.fromJson(Unknown Source:4)
28 com.google.gson.Gson.fromJson(Unknown Source:9)
```
 =||= Please provide a solution to this exception if the issue is resolved or Reopen it please. =||= same problem for some users =||= @lll-01  Has this problem been resolved? It happens to me on version Gson 2.8.5  =||= I got this problem too.

I'm sure that top-level String is not null, and the data was not corrupted.I just want to get an object from a specific json file which would not be changed.

This problem occurred occasionally. Is there any solutions or suggestions?
@inder123  =||= I got the same problem too. It happens to me on version Gson 2.9.0 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1300Removed the executable flag from clearly text filesLyubomyr Shaydarivlyubomyr-shaydariv04/26/18, 12:34:32 PM"Removed the `x` flag from the text files:

```shell
git ls-files \
    | xargs -I {} find {} -executable \
    | xargs chmod -x
```"NaNRemoved the executable flag from clearly text filesLyubomyr Shaydarivlyubomyr-shaydariv04/26/18, 12:34:32 PM"Removed the `x` flag from the text files:

```shell
git ls-files \
    | xargs -I {} find {} -executable \
    | xargs chmod -x
```"NaNLyubomyr Shaydariv04/26/18, 07:23:15 AMRemoved the executable flag from clearly text files1
1301Fixed excludes section in maven-compiler-pluginInderjeet Singhinder12304/27/18, 10:30:36 PMNaNNaNFixed excludes section in maven-compiler-pluginInderjeet Singhinder12304/27/18, 10:30:36 PMNaNNaNInderjeet Singh04/27/18, 10:29:53 PMFixed excludes section in maven-compiler-plugin1
1302Added gradle/Idea supportInderjeet Singhinder12304/30/18, 04:54:25 PMNaNNaNAdded gradle/Idea supportInderjeet Singhinder12304/30/18, 04:54:25 PMNaNNaNInderjeet Singh04/28/18, 01:08:23 AMAdded gradle/Idea support1
1303Added a test for deserialization of fields using lowercase-dot naming…Inderjeet Singhinder12304/28/18, 01:54:49 AM… policyNaNAdded a test for deserialization of fields using lowercase-dot naming…Inderjeet Singhinder12304/28/18, 01:54:49 AM… policyNaNInderjeet Singh04/28/18, 01:54:07 AMAdded a test for deserialization of fields using lowercase-dot naming policy1
1305NoClassDefFoundError: sun.misc.Unsafe since version 2.8.3╭∩╮ (òÓ,) ╭∩╮cnsgithub05/01/18, 06:22:54 PM"After upgrading gson to version 2.8.3 I receive a NoClassDefFoundError when starting up my WildFly 12 server.

**Reproducer:**
```java
public class Foo {
   private static final Gson gson = new GsonBuilder().create();
}
```

**Stacktrace:**
```
Caused by: java.lang.NoClassDefFoundError: sun/misc/Unsafe
	at com.google.gson//com.google.gson.internal.reflect.UnsafeReflectionAccessor.getUnsafeInstance(UnsafeReflectionAccessor.java:47)
	at com.google.gson//com.google.gson.internal.reflect.UnsafeReflectionAccessor.<init>(UnsafeReflectionAccessor.java:31)
	at com.google.gson//com.google.gson.internal.reflect.ReflectionAccessor.<clinit>(ReflectionAccessor.java:36)
	at com.google.gson//com.google.gson.internal.ConstructorConstructor.<init>(ConstructorConstructor.java:51)
	at com.google.gson//com.google.gson.Gson.<init>(Gson.java:205)
	at com.google.gson//com.google.gson.GsonBuilder.create(GsonBuilder.java:597)
	at deployment.Foo.ear//Foo.<clinit>(Foo.java:24)
...
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:488)
	at java.base/java.lang.Class.newInstance(Class.java:558)
	at org.jboss.as.weld.common//org.jboss.as.weld.deployment.WeldPortableExtensions.tryRegisterExtension(WeldPortableExtensions.java:53)
	at org.jboss.as.weld//org.jboss.as.weld.deployment.processors.WeldPortableExtensionProcessor.loadAttachments(WeldPortableExtensionProcessor.java:119)
	at org.jboss.as.weld//org.jboss.as.weld.deployment.processors.WeldPortableExtensionProcessor.deploy(WeldPortableExtensionProcessor.java:79)
	at org.jboss.as.server@4.0.0.Final//org.jboss.as.server.deployment.DeploymentUnitPhaseService.start(DeploymentUnitPhaseService.java:144)
	... 8 more
```

**Workaround in WildFly 12 module.xml:**
```xml
<module xmlns=""urn:jboss:module:1.1"" name=""com.google.gson"">
    <resources>
        <resource-root path=""gson-2.8.3.jar""/>
    </resources>
    <dependencies>
        <module name=""sun.jdk"" export=""true"" >
            <imports>
                <include path=""sun/misc/Unsafe"" />
            </imports>
        </module>
    </dependencies>   
</module>
```

**Question:**
Why did gson introduce this weird dependency?""Are you using Java 9? This code path gets exercised only for Java 9.
This stacktrace is harmless as we check whether Sun's Unsafe allocator is available. If unsafe allocator is not available, we use something else. 

I will remove this spurious stacktrace in the next release. =||= Fixed in Gson 2.8.4 through https://github.com/google/gson/pull/1306. 
Please try it out and let me know if you still need the sun.misc.Unsafe dependency. =||= Yes, I am using Java 9.

And I am not getting this stacktrace any longer with gson 2.8.4. Thanks for fixing and releasing it so quickly. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1306If sun.misc.Unsafe not found on Java 9, try field.setAccessibleInderjeet Singhinder12305/01/18, 04:57:46 PM"Also using Unsafe using reflection
Also removed exception traces when sun.misc.Unsafe or override are not found"https://github.com/google/gson/issues/1305 =||= https://github.com/google/gson/issues/1216 =||= If sun.misc.Unsafe not found on Java 9, try field.setAccessibleInderjeet Singhinder12305/01/18, 04:57:46 PM"Also using Unsafe using reflection
Also removed exception traces when sun.misc.Unsafe or override are not found"NaNInderjeet Singh04/30/18, 10:23:28 PM"Using sun.misc.Unsafe only through reflection to avoid binary dependency

If sun.misc.Unsafe not found on Java 9, try field.setAccessible
Also removed exception traces when sun.misc.Unsafe or override are not found"1
1308HO to handle &, $, + Special characters in GSONAdityaBendre05/02/18, 01:54:42 PMPlease suggest me how can we handle &, $, + Special characters in GSON APIPlease ask general usage questions on StackOverflow with the 'gson' tag. This issue tracker is for bug reports and feature requests. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1309Deserialization of java.time.OffsetDateTime with zero time offsetsmile1805/03/18, 01:10:42 AM"When serializing / deserializing an object with the java.time.OffsetDateTime  API, the results are diferent from expected if zero sec are given.

For excample, here's a  java.time.OffsetDateTime serialized with gson (using version 2.8.0):
 @SerializedName(""orderTime"")
 private OffsetDateTime orderTime = null;


""orderTime"":""2018-05-02T14:23:00Z"" 

but I get the value as 2018-05-02T14:23Z where I should get the value as 2018-05-02T14:23:00Z"`java.time` APIs are not supported by Gson's built-in date format configuration. We generally regard that as a mistake. For all types in `java.time` you should register your own type adapter which uses the type's public API to serialize to and from the JSON primitives. =||= @smile18 we would love to have your contribution for java.time TypeAdapter in gson-extras project =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1310ExceptionInInitializerError when using Java 9 on DebianAndy Wilkinsonwilkinsona05/09/18, 08:10:26 PM"`VersionUtils`, introduced in [this commit](https://github.com/google/gson/commit/0aaf5ff408a54eb7dc238d3569b5d1cef9273047), makes some assumptions about the format of the `java.version` system property that do not always hold true. For example, when using Java 9 on Debian, the following failure occurs:

```
java.lang.ExceptionInInitializerError
	at com.google.gson.internal.reflect.ReflectionAccessor.<clinit>(ReflectionAccessor.java:36)
	at com.google.gson.internal.ConstructorConstructor.<init>(ConstructorConstructor.java:51)
	at com.google.gson.Gson.<init>(Gson.java:205)
	at com.google.gson.GsonBuilder.create(GsonBuilder.java:597)
	at org.springframework.boot.json.GsonJsonParser.<init>(GsonJsonParser.java:40)
	at org.springframework.boot.json.GsonJsonParserTests.getParser(GsonJsonParserTests.java:28)
	at org.springframework.boot.json.AbstractJsonParserTests.<init>(AbstractJsonParserTests.java:40)
	at org.springframework.boot.json.GsonJsonParserTests.<init>(GsonJsonParserTests.java:24)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:488)
	at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)
	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:379)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:340)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:125)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:413)
Caused by: java.lang.NumberFormatException: For input string: ""9-Debian""
	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.base/java.lang.Integer.parseInt(Integer.java:652)
	at java.base/java.lang.Integer.parseInt(Integer.java:770)
	at com.google.gson.util.VersionUtils.determineMajorJavaVersion(VersionUtils.java:28)
	at com.google.gson.util.VersionUtils.<clinit>(VersionUtils.java:24)
	... 32 more
```""Thanks for the bug report. If you have a proposed solution, please share or send a PR. 
Otherwise, we will figure out how to address it.  =||= Fixed in https://github.com/google/gson/pull/1311 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1311Fixed https://github.com/google/gson/issues/1310Inderjeet Singhinder12305/09/18, 08:10:09 PM"Also renamed VersionUtils to more readable abstraction JavaVersion
Added support for debian naming convention
Using min supported version (6) as the default if JDK version can't be figured out"@JakeWharton  can you take another look?  =||= @JakeWharton merging. Please review and send me feedback, and I will incorporate it in another PR =||= Fixed https://github.com/google/gson/issues/1310Inderjeet Singhinder12305/09/18, 08:10:09 PM"Also renamed VersionUtils to more readable abstraction JavaVersion
Added support for debian naming convention
Using min supported version (6) as the default if JDK version can't be figured out"NaNInderjeet Singh05/07/18, 09:17:35 PMMoved JavaVersion to an internal package1
1312Expected BEGIN_OBJECT but was NUMBERjingchangfa05/08/18, 06:01:01 PM"![image](https://user-images.githubusercontent.com/19325158/39755912-1d94df1e-52fa-11e8-9acf-4f41a72e975b.png)

![image](https://user-images.githubusercontent.com/19325158/39755958-3f76b120-52fa-11e8-840c-5e9a85be3f0d.png)"This is not a bug in Gson but a data mismatch between your JSON and your model object. Your model expects an object but the JSON had a number. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1314Hibernateairtonct05/09/18, 05:39:25 PMDoes gson already have support for hibernate?You can use Gson with Hibernate but there's no specific integration. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1315Move module-info.java to /src/main/javacayhorstmann10/18/18, 03:49:27 PM"To build gson as a JPMS module, the `module-info.java` file needs to be in `src/main/java`, not in `src/main/java/com.google.gson`. 

I checked [https://guides.gradle.org/building-java-9-modules/](https://guides.gradle.org/building-java-9-modules/) for confirmation.

With that change, and with these changes in build.gradle, the JAR builds fine as a modular JAR.

```
sourceCompatibility = 9
targetCompatibility = 9
// sourceSets.main.java.exclude(""**/module-info.java"")
```""Yeah, today I lost some time to figure out why I had to `require gson` instead of `require com.google.gson` (as specified in the module-info.java file). 

As it stands right now, I don't believe the [module-info.java](https://github.com/google/gson/blob/master/gson/src/main/java/com.google.gson/module-info.java) file is actually used. =||= That's normal--_you_ don't use the module-info.java. But if _I_ want to use gson as a modular JAR because my app is modular, it needs to be in the right place.  =||= @cayhorstmann you are almost right I think, except for the Gradle part, since this project seems to use both Maven and Gradle for build automation.

I made this work locally by doing the following:

- Move `module-info.java` to `src/main/java` (in the `gson` module directory)
- Set the `java.version` property for the `gson-parent` pom from `1.6` to `9`.
- Set the `biz.aQute.bnd` plugin's version from `3.1.0` to `4.0.0`.

Then after running

```bash
mvn clean install -DskipTests=true
```

from the root of the project I could require the `requires com.google.gson` module in my project. For gson to work, you also need to open up your module, so gson's reflection magic can do its work:

```java
module com.internetofdrums.api.web {

    requires com.google.gson;

    opens com.internetofdrums.api.web.view to com.google.gson;
}
```

I can now even use `jlink` to make a trimmed image of my app, which was my goal in the first place.

I'm gonna find out how to make a pull request for this. =||= I've create a pull request: https://github.com/google/gson/pull/1401 =||= This solution targets Java 9 and up, I'll come up with a fix to support 1.6 and up later. =||= It's possible to target an older version of Java (e.g. 1.6) while also providing module information: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html =||= Okay, another pull request, this time ensuring backwards compatibility up until Java 1.6: https://github.com/google/gson/pull/1402 =||= Will this fix be released soon? I had to update my JavaFX projects to Java 11 because of the removal of FX out of the JDK and the old program therefore no longer executing on the newer JDK. But now I'm unable to package it using jlink because Gson 2.8.5 isn't modular yet. =||= 👋 Does anyone know when this fix is anticipated to be available in a release? =||= So will it be a thing one day or not?
Still no modular jar on maven. =||= You could build it yourself... I waited for it for like 6 months, and I needed it because of jlink. =||= This was resolved almost 1 year ago yet there is still no release. Considering we're on a stable Java 12 release and some running Java 14 pre-builds and modularity should have been completely adopted by Java 11, can we please at least get a release addressing this issue? Even if it's a minor release, 2.8.5.1. For projects where automatic modules aren't an option (jlink for instance), it's an inconvenience. =||= The solution is easy. Do not use Gson, or anything else from Google. =||= The problem is current, jlink + Java 11 =||= @microwin7 , I've just tested and version `2.8.8` works for me. The module name is `com.google.gson`.

pom.xml:
```
...
<dependencies>
    <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.8.8</version>
    </dependency>
</dependencies>
...
```

module-info.java:
```
module my_module {
  requires com.google.gson;
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1318Expose a FieldNamingPolicy renaming methodMatthew Haughton3flex01/11/20, 07:43:40 AM"I'm working on an enhancement for auto-value-gson (https://github.com/rharter/auto-value-gson/pull/124) which adds the feature of allowing FieldNamingStrategy to be set to a FieldNamingPolicy and taking care of renaming the field within a generated TypeAdapter. Right now setting a FieldNamingStrategy on GsonBuilder has no effect when auto-value-gson is used.

The methods used to rename fields in FieldNamingPolicy are package-private so I've reimplemented those methods in auto-value-gson. To avoid using reflection the FieldNamingPolicy methods are copied into every TypeAdapter, then FieldNamingStrategy is checked to see if FieldNamingPolicy was used, then the reimplemented methods are called to rename the fields in the TypeAdapter.

Problems with this approach:
* methods are copied to every TypeAdapter, even though they may not be used, since we don't know at compile time which FieldNamingStrategy will be used (could be avoided by having a runtime dependency on a new auto-value-gson runtime artifact like dagger does with dagger & dagger-compiler, but that could be a disruptive change)
* any behaviour change within Gson has to be reimplemented in auto-value-gson
* new built-in field naming policies like FieldNamingPolicy.LOWER_CASE_WITH_DOTS have to be manually reimplemented in auto-value-gson

If a method in Gson were exposed allowing Gson's FieldNamingPolicy to be used directly this would remove the need to replicate the code in auto-value-gson, as well as every generated TypeAdapter.""I am not sure I understand fully. May be share an example, or send a PR that will make the change?  =||= When UPPER_CAMEL_CASE is the FieldNamingPolicy being used, the field is renamed from ""lowerCamel"" in Java to ""LowerCamel"" in JSON.

auto-value-gson (a-v-g) creates type adapters to avoid using reflection. When the code generation step occurs, a-v-g looks at the Java class and creates a type adapter that supports this renaming. Because the FieldNamingPolicy can be chosen at runtime, the type adapter has to support all of the same renaming methods that Gson supports, and allow any of them to be used at runtime.

Because the methods are private in Gson, all the methods have to be reimplemented in the generated typeadapter itself - see this block from the tests (it's checking the required methods are included in the generated type adapter): https://github.com/rharter/auto-value-gson/pull/124/files#diff-8e4502416b2612f664d2027e125a54f6R512 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1319change the field value 7 to 7%EHappyLennyYi05/14/18, 01:37:38 PM"[
{
.......
""prTaxCode"":""TH_I_SID_DOM_S""
""prTaxRate"":""7"",
...
}
].
I build a class named  ""IbuySystem""   for this json. This class has 30-40 fields,but I just want change prTaxRate value  to 7%,Please tell me how can I code ？"I‘m try   (IbuySystemAdapter)TypeAdapter but，others field I don‘t want write one by one，because others fields I don’t want change。  =||= This issue tracker is for bug reports and feature requests only. For general usage questions, please as on StackOverflow with the 'gson' tag or on Gson's mailing list. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1321Issue 1242: Printing Gson version when throwing AssertionError and Il…Inderjeet Singhinder12305/17/18, 04:41:21 PM"…legalArgumentException

On some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.
For those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue.""@swankjesse @JakeWharton @joel-leitch 
I would like to include this PR into the new build 2.8.5. This will help us isolate problems in specific versions of Gson. =||= "Issue 1242: Printing Gson version when throwing AssertionError and Il…Inderjeet Singhinder12305/17/18, 04:41:21 PM"…legalArgumentException

On some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.
For those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue."NaNInderjeet Singh05/15/18, 10:28:00 PM"Issue 1242: Printing Gson version when throwing AssertionError and IllegalArgumentException

On some versions of Android (probably on some variants of the popular Samsung S4 phone), an older version of Gson is suspected to be bundled in, and gets picked up from the system classpath.
For those versions, the applications that include the latest Gson fail unexpectedly. This debug print will help confirm this issue."1
1322Use java.class.version to detect Java version (#1316)Kai Burjackhttpdigest05/16/18, 05:52:22 PM"It has a much more consistent format compared to java.version and
therefore does not require to handle all corner cases of JVMs reporting
the Java version in any arbitrary way they want.

This also makes the JavaVersionTest somewhat obsolete, since no
actual parsing is necessary anymore.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= > We should use multi-release jars to check Runtime.Version on Java 9 or newer which is the only actually supported mechanism for doing this.

Alright. Fine by me. Closing then. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1324Private constructorJoel Leitchjoel-leitch05/22/18, 03:04:23 AMAdd private constructors to utility classes and update the release process."We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_author_cla --> =||= "Private constructorJoel Leitchjoel-leitch05/22/18, 03:04:23 AMAdd private constructors to utility classes and update the release process.NaNJoel Leitch05/22/18, 03:00:15 AMRemove obsolete step1
1325Non-blocking JsonReaderJason Pickenssteinybot05/24/18, 03:43:05 AM"It would be really nice if there was a non-blocking reader which would return a result that either contains a valid token or some information about what happened (e.g. underflow). [CharsetDecoder](https://docs.oracle.com/javase/8/docs/api/java/nio/charset/CharsetDecoder.html) is a good example of the desired semantics.

I want to use this with an implementation of JEP-266 (akka-streams) which means I need to backpressure when there are not enough characters rather than block in the Reader."Never mind I'm not sure there is much point having this in gson. I'm probably better off just using Jackson instead since it has async support and the low level tokens I would need. =||= What about Kotlin Coroutine support with cancellation benefit? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1327Parse empty JSON array, the result is null when generating signed APK.주재호JaehoJu05/24/18, 01:51:50 PM"I use Kotlin, Android.

```
val dataString = GsonBuilder().create().fromJson(""""""
{""friends"":[],""money"":null}
"""""", Animal::class.java)
Log.d(""ABC"", ""log=$dataString"")
```

Result from above code:
release APK - Animal(friends=null, money=null)
Run - Animal(firends=[], money=null)

Why this behavior is different. I can't find reasons or clues."Behavior differences between variants means that your build configuration is causing a problem. This isn't a problem with Gson itself. Since we know nothing about your build system or its configuration we are ill-suited to help. I would suggest asking your question on StackOverflow with the 'gson' tag and including more information about your build system configuration since that is where the behavioral difference is being created. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1328Invalid date format when using a date as a mapping keyСтанислав Агарковagarkoff05/27/18, 08:15:55 AM"    public static void main(String[] args) {
        Date d = new Date();
        Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(""yyyy-MM-dd'T'HH:mm:ssz"").create();
        System.out.println(gson.toJson(d));
        Map<Date, String> map = new LinkedHashMap<>();
        map.put(new Date(), ""Hello"");
        System.out.println(gson.toJson(map));
    }

""2018-05-27T10:09:46MSK""
{
  ""Sun May 27 10:09:46 MSK 2018"": ""Hello""
}""Duplicate #538 
It is solved using the method enableComplexMapKeySerialization. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1329NoSuchMethodException on Android 4.2.2Gaurav Aroragauravarora9005/28/18, 03:59:46 PM"[Here is my complete question. 
](https://stackoverflow.com/questions/50565875/gson-nosuchmethodexception-for-android-4-2-2-devices)

I am using latest gson library version""No need to cross post =||= @JakeWharton. Can you pls update ? Why my issue is closed. ? =||= We are now experiencing the exact same problem.
Here are crash reports on Crashlytics:
[http://crashes.to/s/c226c112c6b](http://crashes.to/s/c226c112c6b)
[http://crashes.to/s/c226c112c6b](http://crashes.to/s/591ae5372f4)
Need to mention that all of the models are using empty constructors as:

    public class MessageNotification {
        public MessageNotification() {}
    }

Any help would be appreciated. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1330README.md Updated dependency examples to version 2.8.5Christian SchwarzChristianSchwarz06/07/18, 01:14:47 AMNaN"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= CLA: I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "README.md Updated dependency examples to version 2.8.5Christian SchwarzChristianSchwarz06/07/18, 01:14:47 AMNaNNaNChristian Schwarz06/06/18, 01:29:56 PMUpdated dependency examples to version 2.8.51
1332Get member value as a string - helper methodPhilip Whitehousephilipwhiuk06/06/18, 07:28:49 PM"This is a proposal for adding helper methods that remove boiler plate when getting values from objects.

Obviously it needs tests and probably other similar helpers for other value types, but I'm interested in feedback on the approach.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= This would then open the door for more convenience methods like getAsInt, getAsBoolean, etc.
That's too much overhead for little benefit. =||= Let's keep the discussion in #1291  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1333[Question] [Performance?] JSONPrimitive constructor performanceLucas Nelaupelucas3406/23/18, 10:13:45 AM"Hi

Short question
---
 Why `JsonPrimitive(true)` is calling `setValue()` method instead of assigning directly the value to the instance variable `value ` ?

Description
---
I'm reading `JsonPrimitive` code and I'm a bit confuse with the implementation.
If I call `JsonPrimitive(true)`, it will call the first constructor and immediately delegate to `setValue(Object primitive)` method.
Then `setValue` will do a series of `instanceOf` such as `primitive instanceof Character` and `primitive instanceof Number` then call isPrimitiveOrString() and so on.

Is there any specific reason why you don't do:
```
  public JsonPrimitive(Boolean bool) {
    value = bool;
  }
```"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1334Extract getContainerElementType() method in $Gson$TypesTomasz Linkowskitlinkowski07/20/18, 09:44:32 PM"Currently, `$Gson$Types` class contains the following public method:
```
public static Type getCollectionElementType(Type context, Class<?> contextRawType)
```

This method works like a charm for all kind of `Collection`s but it is unnecessarily fixed to work only on `Collection`s, and it cannot be applied to work on other `Iterable`s (e.g. on `Stream`s, or any other type of containers that do not implement `Collection`).

I suggest extracting from this method a method like:
```
public static Type getContainerElementType(Type context, Class<?> contextRawType, Class<?> containerSupertype) {
  Type containerType = getSupertype(context, contextRawType, containerSupertype);

  if (containerType instanceof WildcardType) {
    containerType = ((WildcardType) containerType).getUpperBounds()[0];
  }
  if (containerType instanceof ParameterizedType) {
    return ((ParameterizedType) containerType).getActualTypeArguments()[0];
  }
  return Object.class;
}
```
and rewrite `getCollectionElementType` as:
```
public static Type getCollectionElementType(Type context, Class<?> contextRawType) {
  return getContainerElementType(context, contextRawType, Collection.class);
}
```

PS. I came upon this issue when trying to implement a `TypeAdapterFactory` for `Stream`s - see https://stackoverflow.com/questions/50881488/is-it-possible-to-pass-a-java-util-stream-to-gson/50895699#50895699""This method isn't for public use though. =||= I understand - the package with the ""internal"" keyword (`com.google.gson.internal`) and the class name with dollar signs (`$Gson$Types`) clearly tells it's not an API that you want your users to rely on (or even use at all). I guess that if the library were modularized, this entire package wouldn't be exported.

On the other hand, when you look at #1335, you'll see that it's not possible to implement a reliable generic interface-based `TypeAdapterFactory` without resorting to this class. So maybe you could consider providing this one method (`getContainerElementType`) in a public API?

Or you could simply provide such public method in `$Gson$Types` (as I proposed in this issue) which would mean: ""This is internal API. It may change anytime without prior notice. Use at your own risk if you must."" =||= @tlinkowski  We don't want you to use an internal class as a binary dependency. Please copy it over and change it to suit your needs.  =||= Fair enough.

I wonder, however, what you are going to do about the `Multiset` example in `TypeAdapterFactory`s JavaDoc (#1335) because I cannot see a way to make it work without resorting to `$Gson$Types.getCollectionElementType`. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1336Java 8 time jsr310 supportAndrea Santithedarkdestructor06/20/18, 12:51:21 PM"Gson do **NOT** support jsr310 out of the box. To the best of my knowledge there is no ufficial support for the new Java 8 API.

I am well awere that there are already two similiar tickets (#878 and #739) however they are old and not ""really"" solved. 

Jackson has its [dedicated serializer and de-serializer](https://github.com/FasterXML/jackson-modules-java8), I know that for Gson we have serveral community-driven projects that do the same (e.g. [this one](https://github.com/gkopff/gson-javatime-serialisers))

**I'm sincerly really frustrated that a library like gson do not have yet an official support for deadling with stardard Java 8 date and time object**s. For me is a key feature: in almost all applications there is the need to deal with a date or a datetime, so I expect the serialzier/deserializers to be there...

Am I missing something here?
"#739 is still open so you should voice your support there. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1337Add possibility to maintain type variable in created pojoLuca Taddeolucalas06/28/18, 07:59:26 AMInstead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not."We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_author_cla --> =||= Used wrong account to commit.
I'll recheck and add new pull request. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1340Exception while using fromJson(String json, Class<T> classOfT). I'm using gson library 2.8.5 Ashutosh Kumar Guptaashutoshcp07/01/18, 07:06:28 AM"com.google.gson.JsonSyntaxException: duplicate key: null
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:190)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)
	at com.google.gson.Gson.fromJson(Gson.java:927)
	at com.google.gson.Gson.fromJson(Gson.java:892)
	at com.google.gson.Gson.fromJson(Gson.java:841)
	at com.google.gson.Gson.fromJson(Gson.java:813)
ex.getMessage(): duplicate key: null
ex.getCause(): null"I resolved this.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1341Less Fields than JSONviper111viper61907/01/18, 12:58:32 PM"Hi,
    I'm using GSON to convert JSON to JAVA POJO. But I want to have less number of fields than it is in JSON. so if it is possible how will it be converted? Or do I need same number of fields in POJO as well?""Thanks for your question. This issue tracker is only for bug reports with test cases and feature requests. Please ask usage questions on Stack Overflow.
https://stackoverflow.com/questions/tagged/gson =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1342Add possibility to maintain type variable in created pojoLuca Taddeolucalas07/20/18, 09:34:46 PMInstead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.NaNAdd possibility to maintain type variable in created pojoLuca Taddeolucalas07/20/18, 09:34:46 PMInstead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not.NaNlucalas07/03/18, 10:11:38 AM"Add possibility to maintain type variable in created pojo

Instead of completely remove type variable, give the possibility to decide if maintain type value (if pojo has type variable declaration) or not."1
1344Android - JSON to List<object> cast issue “Expected BEGIN_ARRAY”Abhishek TomarImAbhishekTomar07/08/18, 07:51:36 PM"Hello,
Please help on this issue.

I am new with android and java development. I am trying to cast JOSN to List in Android but i ma facing issue. Can you please help in this issue ?

> Error : java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $

Convert Code
```
Gson gson = new Gson();
String jsonOutput = githubSearchResults;
Type listType = new TypeToken<List<GitRepo>>(){}.getType();
List<GitRepo> oData = gson.fromJson(jsonOutput, listType);
```

Object Git Repo Class

```
public class GitRepo {
    private String total_count;
    private String incomplete_results;
    private List<items> items;
}

class  items{
    private  String id;
    private String name;
    private String full_name;
    private String html_url;
    private List<owner> owner;
    private List<license> license;
}

class owner{
    private String login;
    private String id;
    private String avatar_url;
}

class  license{
    private String key;
    private String name;
}
```

My JSON String DATA

```

{
  ""total_count"": 68,
  ""incomplete_results"": false,
  ""items"": [
    {
      ""id"": 1604375,
      ""node_id"": ""MDEwOlJlcG9zaXRvcnkxNjA0Mzc1"",
      ""name"": ""w2ui"",
      ""full_name"": ""vitmalina/w2ui"",
      ""owner"": {
        ""login"": ""vitmalina"",
        ""id"": 561995,
        ""node_id"": ""MDQ6VXNlcjU2MTk5NQ=="",
        ""avatar_url"": ""https://avatars0.githubusercontent.com/u/561995?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/vitmalina"",
        ""html_url"": ""https://github.com/vitmalina"",
        ""followers_url"": ""https://api.github.com/users/vitmalina/followers"",
        ""following_url"": ""https://api.github.com/users/vitmalina/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/vitmalina/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/vitmalina/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/vitmalina/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/vitmalina/orgs"",
        ""repos_url"": ""https://api.github.com/users/vitmalina/repos"",
        ""events_url"": ""https://api.github.com/users/vitmalina/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/vitmalina/received_events"",
        ""type"": ""User"",
        ""site_admin"": false
      },
      ""private"": false,
      ""html_url"": ""https://github.com/vitmalina/w2ui"",
      ""description"": ""JavaScript UI library for data-driven web applications"",
      ""fork"": false,
      ""url"": ""https://api.github.com/repos/vitmalina/w2ui"",
      ""forks_url"": ""https://api.github.com/repos/vitmalina/w2ui/forks"",
      ""keys_url"": ""https://api.github.com/repos/vitmalina/w2ui/keys{/key_id}"",
      ""collaborators_url"": ""https://api.github.com/repos/vitmalina/w2ui/collaborators{/collaborator}"",
      ""teams_url"": ""https://api.github.com/repos/vitmalina/w2ui/teams"",
      ""hooks_url"": ""https://api.github.com/repos/vitmalina/w2ui/hooks"",
      ""issue_events_url"": ""https://api.github.com/repos/vitmalina/w2ui/issues/events{/number}"",
      ""events_url"": ""https://api.github.com/repos/vitmalina/w2ui/events"",
      ""assignees_url"": ""https://api.github.com/repos/vitmalina/w2ui/assignees{/user}"",
      ""branches_url"": ""https://api.github.com/repos/vitmalina/w2ui/branches{/branch}"",
      ""tags_url"": ""https://api.github.com/repos/vitmalina/w2ui/tags"",
      ""blobs_url"": ""https://api.github.com/repos/vitmalina/w2ui/git/blobs{/sha}"",
      ""git_tags_url"": ""https://api.github.com/repos/vitmalina/w2ui/git/tags{/sha}"",
      ""git_refs_url"": ""https://api.github.com/repos/vitmalina/w2ui/git/refs{/sha}"",
      ""trees_url"": ""https://api.github.com/repos/vitmalina/w2ui/git/trees{/sha}"",
      ""statuses_url"": ""https://api.github.com/repos/vitmalina/w2ui/statuses/{sha}"",
      ""languages_url"": ""https://api.github.com/repos/vitmalina/w2ui/languages"",
      ""stargazers_url"": ""https://api.github.com/repos/vitmalina/w2ui/stargazers"",
      ""contributors_url"": ""https://api.github.com/repos/vitmalina/w2ui/contributors"",
      ""subscribers_url"": ""https://api.github.com/repos/vitmalina/w2ui/subscribers"",
      ""subscription_url"": ""https://api.github.com/repos/vitmalina/w2ui/subscription"",
      ""commits_url"": ""https://api.github.com/repos/vitmalina/w2ui/commits{/sha}"",
      ""git_commits_url"": ""https://api.github.com/repos/vitmalina/w2ui/git/commits{/sha}"",
      ""comments_url"": ""https://api.github.com/repos/vitmalina/w2ui/comments{/number}"",
      ""issue_comment_url"": ""https://api.github.com/repos/vitmalina/w2ui/issues/comments{/number}"",
      ""contents_url"": ""https://api.github.com/repos/vitmalina/w2ui/contents/{+path}"",
      ""compare_url"": ""https://api.github.com/repos/vitmalina/w2ui/compare/{base}...{head}"",
      ""merges_url"": ""https://api.github.com/repos/vitmalina/w2ui/merges"",
      ""archive_url"": ""https://api.github.com/repos/vitmalina/w2ui/{archive_format}{/ref}"",
      ""downloads_url"": ""https://api.github.com/repos/vitmalina/w2ui/downloads"",
      ""issues_url"": ""https://api.github.com/repos/vitmalina/w2ui/issues{/number}"",
      ""pulls_url"": ""https://api.github.com/repos/vitmalina/w2ui/pulls{/number}"",
      ""milestones_url"": ""https://api.github.com/repos/vitmalina/w2ui/milestones{/number}"",
      ""notifications_url"": ""https://api.github.com/repos/vitmalina/w2ui/notifications{?since,all,participating}"",
      ""labels_url"": ""https://api.github.com/repos/vitmalina/w2ui/labels{/name}"",
      ""releases_url"": ""https://api.github.com/repos/vitmalina/w2ui/releases{/id}"",
      ""deployments_url"": ""https://api.github.com/repos/vitmalina/w2ui/deployments"",
      ""created_at"": ""2011-04-12T14:26:20Z"",
      ""updated_at"": ""2018-07-02T20:33:42Z"",
      ""pushed_at"": ""2018-06-11T02:02:49Z"",
      ""git_url"": ""git://github.com/vitmalina/w2ui.git"",
      ""ssh_url"": ""git@github.com:vitmalina/w2ui.git"",
      ""clone_url"": ""https://github.com/vitmalina/w2ui.git"",
      ""svn_url"": ""https://github.com/vitmalina/w2ui"",
      ""homepage"": ""http://w2ui.com"",
      ""size"": 38068,
      ""stargazers_count"": 1612,
      ""watchers_count"": 1612,
      ""language"": ""JavaScript"",
      ""has_issues"": true,
      ""has_projects"": true,
      ""has_downloads"": true,
      ""has_wiki"": true,
      ""has_pages"": false,
      ""forks_count"": 562,
      ""mirror_url"": null,
      ""archived"": false,
      ""open_issues_count"": 309,
      ""license"": {
        ""key"": ""mit"",
        ""name"": ""MIT License"",
        ""spdx_id"": ""MIT"",
        ""url"": ""https://api.github.com/licenses/mit"",
        ""node_id"": ""MDc6TGljZW5zZTEz""
      },
      ""forks"": 562,
      ""open_issues"": 309,
      ""watchers"": 1612,
      ""default_branch"": ""master"",
      ""score"": 150.9138
    }
  ]
}
```

Issue stack url : https://stackoverflow.com/questions/51235236/android-json-to-listobject-cast-issue-expected-begin-array

JSON URL : https://api.github.com/search/repositories?q=w2ui""Issue Resolved....
Solution URL

https://stackoverflow.com/questions/51235236/android-json-to-listobject-cast-issue-expected-begin-array/51235256#51235256 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1347One key to multiple fieldsFrancisco Contrerasfcontreras07/12/18, 05:00:52 PM"First of all, thanks for the awesome job you do. I have a question regarding the following specific situation:

I have a field that comes with a value that I need to split into various fields, a simplistic example below

```
public class User {
    public int userId;
    public String username;
}
```
the json will be something like this

`{ ""userinfo"": ""001:myusername"" }`

In this example, I need to take the value, split them and the first will be the ""userId"" and the second the ""username"". Any ideas on how to do this? Thanks in advance.""This can be achieved using a TypeAdapter through a `@JsonAdapter` annotation on the type.

Since this is a usage question and not a bug or feature request for the library, can you ask on the mailing list or on StackOverflow with the 'gson' tag? =||= Will do. Thanks =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1348HTML library ??? Alex Alexandrovichjf1707/20/18, 09:33:25 PM"Please add in the "".gitattributes""
  line ""*.html linguist-language = Java"" !
Thank you)"open new pull request #1350 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1349add .gitattributesAlex Alexandrovichjf1707/17/18, 10:08:19 AMis not HTML library ."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= @lyubomyr-shaydariv look good, thanks! =||= By the way,

* You don't need to have both 4790307eef5be79eff0bc7517754a4b4916134b2 and a6e6c61de10f15ed2272c2bfdcec7a38ddc74f79 commits. Could you please simply combine both commits into a single one (by amending the initial commit or rebasing the two using ```fixup```/```squash```)?
* I would preserve the commit message from the second commit. I think that its ```Use the linguist-documentation attribute to mark paths as documentation.``` is much more accurate. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1350add .gitattributesAlex Alexandrovichjf1707/20/18, 09:18:19 PMUse the linguist-documentation attribute to mark paths as documentation.(This PR obsoletes #1349) =||= @lyubomyr-shaydariv Thank you very much for your help !!! =||= Yay, ```Java 100.0%```! :) =||= add .gitattributesAlex Alexandrovichjf1707/20/18, 09:18:19 PMUse the linguist-documentation attribute to mark paths as documentation.NaNAlexey Alexandrovich07/17/18, 10:09:55 AM"add .gitattributes 

Use the linguist-documentation attribute to mark paths as documentation."1
1351reading json file integer values as double values in ObjectTypeAdapterprem-jason07/20/18, 09:17:25 PM"Hi,

My sample json is as following:
{
   ""myevents"": [1234, 4567]
}

String path = ""src//main//resources/sample.json"";		
FileReader fileReader = new FileReader(path);
JsonReader jsonReader = new JsonReader(fileReader);
Map<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
Gson gson = new Gson();
Map<String, ArrayList<Integer>> map1 =gson.fromJson(jsonReader, map.getClass());

System.out.println(map1.get(""myevents"").toString());

Prints:  [1234.0, 5678.0]

**Reason**:
com.google.gson.internal.bind.ObjectTypeAdapter's read method reads jsons numbers as double values, can you introduce integers, floats or double as case types? instead of treating all numbers as double values.  Thanks 

@Override public Object read(JsonReader in) throws IOException {
    JsonToken token = in.peek();
    switch (token) {
    case BEGIN_ARRAY:
      List<Object> list = new ArrayList<Object>();
      in.beginArray();
      while (in.hasNext()) {
        list.add(read(in));
      }
      in.endArray();
      return list;

    case BEGIN_OBJECT:
      Map<String, Object> map = new LinkedTreeMap<String, Object>();
      in.beginObject();
      while (in.hasNext()) {
        map.put(in.nextName(), read(in));
      }
      in.endObject();
      return map;

    case STRING:
      return in.nextString();

    case NUMBER:
      return in.nextDouble();

    case BOOLEAN:
      return in.nextBoolean();

    case NULL:
      in.nextNull();
      return null;

    default:
      throw new IllegalStateException();
    }
  }"Changing the types will break backward compatibility =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1353Verifier rejected class com.google.gson.GsonRob MansRobMans42609/24/18, 02:56:41 PM"Hi, I am developing Android app and I faced wired issue recently.
My app worked smoothly before, then it broke down few days ago.
When I run my app, I got this error.
`    java.lang.VerifyError: Verifier rejected class com.google.gson.Gson due to bad method void com.google.gson.Gson.<clinit>() (declaration of 'com.google.gson.Gson' appears in /data/app/com.xxx.xx-1/base.apk)
`

I tried many ways, but I still did not fix this error.
Could someone help me for this error?

Best Regards.""I am also facing the same issue. 
Play store sending prelaunch report with errors.
Issue: java.lang.NoSuchMethodError: No virtual method a(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; in class Lcom/google/gson/d; or its super classes (declaration of 'com.google.gson.d' appears in /data/app/com.google.android.apps.mtaas.crawler-1/base.apk)

java.lang.IllegalAccessError: Illegal class access: <my_package>.Network.e' attempting to access 'com.google.gson.d' (declaration of '<my_package>.Network.e' appears in /data/app/<my_package>-1/base.apk)

Any quick work around for this issue. =||= Hi, @Iavkush

This is not related with this gson library.
This is related with other 3rd part libraries that you used in your app level gradle.
Some libraries include gson inside.
You need to exclude gson from other libraries.

Please add following code in the app level gradle.

`configurations.all{
    exclude group: 'com.google.code.gson', module: 'gson'
}`

Hope this will help you! =||= @RobMans426 
My App module uses the GSON library extensively. 
I have tried your solution but now getting compilation issues with errors as below --
` error: package com.google.gson.annotations does not exist
import com.google.gson.annotations.Expose;`
`error: package com.google.gson.annotations does not exist
import com.google.gson.annotations.SerializedName;`

If I do not add below line in my app/build.gradle file, compilation is success. But when I upload my app to playstore, it gives me errors which I have mentioned in previous comment [These errors I am getting in latest release to my app, previously no errors]. 
> configurations.all{ exclude group: 'com.google.code.gson', module: 'gson' }

Please help.  =||= @lavkush-verma 
Can you run your app in your device with release mode without any issues?

please exclude gson from all libraries.
And add gson module like this.
`implementation 'com.google.code.gson:gson:2.8.5`

 =||= Yes, I am able to run on Release mode in my device set running on L, M, N
and O variant.

On Wed, Jul 25, 2018 at 19:28 RobMans426 <notifications@github.com> wrote:

> @lavkush-verma <https://github.com/lavkush-verma>
> Can you run your app in your device with release mode?
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1353#issuecomment-407763377>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/ACK414XJJ6i3lP92kmbl4xG6qBxet-czks5uKHl-gaJpZM4VVtud>
> .
>
-- 
-----
 =||= Could  u copy your app level gradle file here? =||= Hi, 
I'm getting the same thing in Google's Pre-Launch report. 
The strange thing is that I haven't changed a thing regarding the JSON library from the previous version and that version passed Pre-Launch without any errors

`Issue: java.lang.VerifyError: Verifier rejected class com.google.gson.Gson: void com.google.gson.Gson.<clinit>() failed to verify: void com.google.gson.Gson.<clinit>(): [0x5] register v0 has type Precise Reference: com.google.gson.Gson$1 but expected Reference: com.google.gson.reflect.TypeToken (declaration of 'com.google.gson.Gson' appears in /data/app/com.bluegate.app-TXgbYn54WvvOMWt27q0CxQ==/base.apk)`

Occurs on Pixel w/Android 8.0 and Pixel 2 w/Android P Preview =||= @RobMans426  
Dependencies are add in this way ...
With GSON version = 2.8.2 or 2.8.5 (same issues)

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':volley')
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    implementation ""com.android.support:support-v4:$rootProject.supportLibraryVersion""
    implementation ""com.android.support:appcompat-v7:$rootProject.supportLibraryVersion""
    implementation ""com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion""
    implementation ""com.android.support:design:$rootProject.supportLibraryVersion""
    implementation ""com.android.support:cardview-v7:$rootProject.supportLibraryVersion""
    implementation ""com.android.support:support-vector-drawable:$rootProject.supportLibraryVersion""
    implementation ""com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion""

    implementation ""com.google.code.gson:gson:$rootProject.gsonVersion""
    implementation ""com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion""
    implementation ""com.google.firebase:firebase-messaging:$rootProject.firebaseMessagingVersion""

    implementation ""com.facebook.android:facebook-android-sdk:$rootProject.facebookSDKVersion""
    implementation ""com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion""

    implementation ""com.github.bumptech.glide:glide:$rootProject.glideVersion""
    implementation ""com.github.chrisbanes:PhotoView:$rootProject.photoViewVersion""

    implementation ""com.jakewharton:butterknife:$rootProject.butterKnifeVersion""
    annotationProcessor ""com.jakewharton:butterknife-compiler:$rootProject.butterKnifeVersion""
    implementation ""org.greenrobot:eventbus:$rootProject.eventBusVersion""
} =||= I have the same problem with @tomerpetel . 
Everything is fine until yesterday...
Do you have any idea about this problem? =||= I have the same problem with @tomerpetel @nostel 
Everything is fine until yesterday...
Do you have any idea about this problem?

Dependencies are added in this way ...

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.github.badoualy:stepper-indicator:1.0.6'
    compile 'com.google.android.gms:play-services-analytics:11.2.2'
    compile 'com.google.android.gms:play-services-ads:11.2.2'
    compile 'com.google.android.gms:play-services-location:11.2.2'
    compile 'com.google.android.gms:play-services-gcm:11.2.2'
    compile 'com.google.android.gms:play-services-auth:11.2.2'
    compile 'com.facebook.android:audience-network-sdk:4.27.1'
    compile 'com.github.nguyenhoanglam:ImagePicker:1.1.3'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.onesignal:OneSignal:3.6.2'
    compile 'com.getkeepsafe.relinker:relinker:1.2.3'
    compile 'com.android.support:multidex:1.0.1'
    compile 'io.huq:sourcekit:1.1.19'
    compile 'com.writingminds:FFmpegAndroid:0.3.2'
    compile 'org.bytedeco:javacv:1.2'
    compile 'org.bytedeco:javacpp:1.2.3'
    testCompile 'junit:junit:4.12'
    compile project(':colorselector')
    compile files('libs/jar_sans.jar')


 =||= Hi, guy. I'm sure this is a bug from Firebase Testlab. And I found the steps to reproduce it and a quick fix: 

Steps to reproduce:
- Create an empty android application
- Add gson library dependency into app graddle: compile 'com.google.code.gson:gson:2.8.0'
- In MainActivity file, add below lines to OnCreate function
final Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Gson gson = new Gson();
            }
        }, 5000);
- Build the app and run a test on Firebase Testlab. Select device google pixel/ google pixel2. API version 26,27,28.
- Wait for the report for Crashes

Here is a quick Cheat:
- In MainActivity file, OnCreate function:

Replace:
final Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Gson gson = new Gson();
            }
        }, 5000);
With:
Gson gson = new Gson();

So basically, create a new Gson () instance immeadiately when app launch will prevent the crashes on Firebase test lab.

Hope that help you! =||= I think this is related to this: https://github.com/googlesamples/google-services/issues/358 =||= @ispam Why do you think it's related?
@nostel So do you think it's the pre-launch report bug? I was about to upload a version to production but I'm not sure now... =||= @tomerpetel Because Im experiencing the same issue only in production. Tested on 4 Real devices from API 19-23. Plus im not rlly using GSON but i know some other libraries rely big on it. =||= @ispam thanks for the answer. So if I'm understanding it right the fix was pushed to 100% of Android users (version v12.8.74) 3 days ago. So why I'm still seeing it in a report from 2 days ago? =||= @tomerpetel Its been rolling out, but currently not update on my phones yet. =||= @ispam Thanks mate 👍  =||= Hey,

I am getting this issue all of a sudden. Is there anything which should be fixed. Everything seemed to work fine until today. I have rolled out a build which was not at all related to this, but it started crashing. 

Fatal Exception: java.lang.VerifyError: Verifier rejected class com.google.gson.Gson: void com.google.gson.Gson.<clinit>() failed to verify: void com.google.gson.Gson.<clinit>(): [0x5] register v0 has type Precise Reference: com.google.gson.Gson$1 but expected Reference: com.google.gson.reflect.TypeToken (declaration of 'com.google.gson.Gson' appears in /data/app/com.appname-aj6tBqViZ3DxYl_xUqAW_g==/base.apk:classes2.dex)
       at com.google.gson.GsonBuilder.create(GsonBuilder.java:569)

How can I fix this? It seems like this error came only on the pixel device.  =||= @anudeepreddygopu see @ispam answer, fix has been released but it'll take time until propagated to all devices =||= For me it was a pre-launch update on Google Publish. Once I opted out for pre-signing, everything passed. Go to the settings under pre-launch reports, go down to ""Pre-launch report version"", and select to opt-out so your app doesn't get recompiled. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1355JsonElement#getAsCharacter()incrementiinc07/30/18, 05:44:22 PM"JsonElement 
public char getAsCharacter()
“convenience method to get this element as a primitive character value.”

I expected calling getAsCharacter would convert an integer to its character value. Instead, it returns the first character of the toString().

```
JsonPrimitive jp = new JsonPrimitive(100);
System.out.println(jp.getAsCharacter());     Output: 1
System.out.println((char) jp.getAsInt());    Output: d
```

Perhaps the documentation should be more descriptive.""PR welcome.

I would probably deprecate the entire method… =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1358No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes Shyak Dasshyakdas07/30/18, 05:07:58 PMCrashing in Huawei, Samsung "I have the same error in test production apk
`FATAL EXCEPTION: AsyncTask #2
Process: taxiplus.passenger, PID: 14524
java.lang.RuntimeException: An error occurred while executing doInBackground()
	at android.os.AsyncTask$3.done(AsyncTask.java:330)
	at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:354)
	at java.util.concurrent.FutureTask.setException(FutureTask.java:223)
	at java.util.concurrent.FutureTask.run(FutureTask.java:242)
	at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:255)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
	at java.lang.Thread.run(Thread.java:776)
Caused by: java.lang.NoSuchMethodError: No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes (declaration of 'com.google.gson.Gson$1' appears in /data/app/com.google.android.apps.mtaas.crawler-1/base.apk)
	at com.google.gson.Gson.doubleAdapter(Gson.java:313)
	at com.google.gson.Gson.<init>(Gson.java:242)
	at com.google.gson.Gson.<init>(Gson.java:186)
	at myapp.passenger.SplashActivity1$BackgroundTaskGetAboutUs.doInBackground(SplashActivity1.java:127)
	at myapp.passenger.SplashActivity1$BackgroundTaskGetAboutUs.doInBackground(SplashActivity1.java:81)
	at android.os.AsyncTask$2.call(AsyncTask.java:316)
	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
	... 4 more` =||= Yes, I got them same crash in Huawei and Samsung too:

```
Fatal Exception: java.lang.NoSuchMethodError: No direct method <init>(Lcom/google/gson/Gson;)V in class Lcom/google/gson/Gson$1; or its super classes (declaration of 'com.google.gson.Gson$1'
``` =||= Same as #1354  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1359Impossible to retrieve nested Objects with same key without overwriting or throw an exceptionmarco-levantesi07/31/18, 10:07:59 AMEven if having json files with more than one key field named the same is wrong by definition, thirdy party servers and programs (as Wireshark concerning the SIP protocol) actually use them. It should be possible to insert all fields with same keys in an array rather than just throwing them in the trash or overwriting the same object. "You can use the streaming API to handle this. I don't see why or how one would support this in the object binding API though. =||= This is a part of the file i am trying to parse:

, `  ""sip.contact.uri_tree"": {
                ""sip.contact.user"": ""24b26efe-da16-4688-a383-2a76bfcb3b91"",
                ""sip.contact.host"": ""192.168.116.131"",
                ""sip.contact.port"": ""41494""
              },
              ""sip.contact.parameter"": ""expires=0"",
              ""sip.contact.parameter"": ""reg-id=1"",
              ""sip.contact.parameter"": ""+sip.instance=\""<urn:gsma:imei:00440245-885095-0>\"""",
              ""sip.contact.parameter"": ""audio"",
              ""sip.contact.parameter"": ""+g.3gpp.accesstype=\""cellular2\"""",
              ""sip.contact.parameter"": ""+g.3gpp.icsi-ref=\""urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\""\r\n""
            },`

As one can notice, this file is to big to generate custom classes, a much more quick workaround would be the one i have suggested. I don't think that using streaming API would make the work easier.  =||= Your suggested behavior change is backwards incompatible. You would have to write your own TypeAdapter for that behavior. Or write a JSON pre-processor using the streaming API to turn multiple keys into a list of values prior to sending it to the object binder. =||= A custom TypeAdapter would not be the most feasible solution due to the very high degree of nested objects inside the json.  Maybe the solution including the json preprocessor would be acceptable but also, it would require a lot of coding in my opinion. Again there isn't a simple workaround to this method. I have tried modifying the ""put"" method in the LinkedTreeMap class but it does not seem a very clear solution. I have also tried to modify ObjectTypeAdapter class but does not seem to work either. Any idea? =||= You can have a generic type adapter not modifying the Gson source code. It's not the best from the performance perspective, but it can give you an idea on going further.

```java
final class MultiValuesTypeAdapterFactory
		implements TypeAdapterFactory {

	private static final TypeAdapterFactory instance = new MultiValuesTypeAdapterFactory();

	private MultiValuesTypeAdapterFactory() {
	}

	static TypeAdapterFactory getInstance() {
		return instance;
	}

	@Override
	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
		final TypeAdapter<T> delegateTypeAdapter = gson.getDelegateAdapter(this, typeToken);
		// ReflectiveTypeAdapterFactory is the thing we'll override
		if ( !(delegateTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter) ) {
			return null;
		}
		return new MultiValuesTypeAdapter<>(delegateTypeAdapter);
	}

	private static final class MultiValuesTypeAdapter<T>
			extends TypeAdapter<T> {

		private final TypeAdapter<T> delegateTypeAdapter;

		private MultiValuesTypeAdapter(final TypeAdapter<T> delegateTypeAdapter) {
			this.delegateTypeAdapter = delegateTypeAdapter;
		}

		@Override
		public void write(final JsonWriter out, final T value) {
			throw new UnsupportedOperationException(""TODO"");
		}

		@Override
		public T read(final JsonReader in)
				throws IOException {
			final JsonToken jsonToken = in.peek();
			// If the current token is not an object begin, {
			if ( jsonToken != JsonToken.BEGIN_OBJECT ) {
				// ... then we cannot handle it and there can be a more sophisticated deserialization in use
				// Or it's just a null.
				return delegateTypeAdapter.read(in);
			}
			// Open the object, {
			in.beginObject();
			final JsonObject buffer = new JsonObject();
			// Holding names of multi-properties to transform the tree
			final Collection<String> multiProperties = new HashSet<>();
			// For each key/value in the object
			while ( in.hasNext() ) {
				final String property = in.nextName();
				final JsonElement value = Streams.parse(in);
				// Check if the buffer already contains the property name
				if ( !buffer.has(property) ) {
					// If it does not, then just add the read value
					buffer.add(property, value);
				} else {
					// Otherwise, there should be an array holder and a value to be added to it
					final JsonArray multiValuesHolder;
					final JsonElement singleValue;
					// If it's the very first duplicate property
					if ( !multiProperties.contains(property) ) {
						// Then evict the current single property
						final JsonElement evictedValue = buffer.remove(property);
						// Create an array buffer to store multiple values
						final JsonArray multiValuesHolder = new JsonArray();
						// Replace the original single property by the multiple values array
						buffer.add(property, multiValuesHolder);
						// Append the original value
						multiValuesHolder.add(evictedValue);
						// And the current one
						multiValuesHolder.add(value);
						// Remembering that this property now holds multiple values already
						multiProperties.add(property);
					} else {
						// Otherwise just append the current value to the previously created array
						final JsonArray multiValuesHolder = buffer.getAsJsonArray(property);
						multiValuesHolder.add(value);
					}
				}
			}
			// ""Close"" the object
			in.endObject();
			// And now deserialize the entire, probably transformed buffer, to an object 
			return delegateTypeAdapter.fromJsonTree(buffer);
		}

	}

}
```

```java
private static final Gson gson = new GsonBuilder()
		.registerTypeAdapterFactory(MultiValuesTypeAdapterFactory.getInstance())
		.create();
```

```java
final class Doc {

	@SerializedName(""sip.contact.parameter"")
	final List<String> parameters = null;

}
```

So now

```java
doc.parameters.forEach(System.out::println);
```

would output the following:

```
expires=0
reg-id=1
+sip.instance=""<urn:gsma:imei:00440245-885095-0>""
audio
+g.3gpp.accesstype=""cellular2""
+g.3gpp.icsi-ref=""urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel""
```

I hope it can help you. =||= In the end i have developed a workaround acting in the put() method in the LinkedTreeMap source code. I know it is not the most elegant solution but time is stringent and i didn't have enought time to develop a custom type adapter class; indeed most of all the original file is much more bigger than the one i published (which is just a sample) so the read() method would have required a total and time consuming rewriting. 

Issue is however closed since it is avoidable, even if it is not the most efficient solution. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1360MapTypeAdapter does not serialize into Date objectsjohnernest0207/30/18, 12:57:07 PM"I have a use case where I get the object as  a json string and consecutively needs to transform it into a HashMap<String, Object>. My code is as follows:

```
public Map<String, Object> toMap(String jsonString) {
        Gson gson = new Gson();

        Type type = new TypeToken<Map<String, Object>>() {
        }.getType();
        Map<String, Object> mapped = gson.fromJson(jsonString, type);
        return mapped;
    }
```
The date value I get from jsonString is `""date"": ""2018-07-29T23:52:35.814Z""` but upon serialization into HashMap, the ""date"" value is a String and not a Date object. Is there a way around it?"How is Gson supposed to know that? Without a proper model with type information all it can do is deserialize to the types that are declared in the JSON which is a string. The fix is to define a proper class with fields and types corresponding to the properties in the JSON. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1362Simplify maintainType logic.Eric CochranNightlyNexus07/30/18, 05:43:53 PMWhen we maintain the label value, we do not need to make a new JsonObject and copy over the keys and values when writing. The ordering will change, though. Before this change, it always put the label first.NaNSimplify maintainType logic.Eric CochranNightlyNexus07/30/18, 05:43:53 PMWhen we maintain the label value, we do not need to make a new JsonObject and copy over the keys and values when writing. The ordering will change, though. Before this change, it always put the label first.NaNEric Cochran07/30/18, 05:32:01 PMFix return.1
1363Deprecate JsonElement.getAsCharacter.Eric CochranNightlyNexus07/30/18, 05:44:22 PMCloses #1355.NaNDeprecate JsonElement.getAsCharacter.Eric CochranNightlyNexus07/30/18, 05:44:22 PMCloses #1355.NaNEric Cochran07/30/18, 05:34:02 PMAdd Deprecated annotation.1
1371Java 11 Compatibility check: gsonKryniuPL08/16/18, 01:21:29 PM"Hi,
We are reaching out to you to check Java 11 compatibility of the library: gson.

Could you help us by answering the following questions:

1. Library Name: <library name.="""" e.g:="""" activation="""">
2. Latest version: <latest 1.1.1="""" eg:="""" version.="""">
3. Latest version Is the library compatible with Java 11 Compatible? (Y/N)
4. Is the library supported with Java 11? (Y/N)
5. (If “N” in compatibility or support) What is the versions that would be compatible and Supported?
6. Date of support availability?</latest></library>

Appreciate your response by 19.08.2018.

Thanks,
Krzysztof Dragan,
PTC Inc. Contractor""1. Gson
2. 2.8.5
3. Don't know
4. This is an open source project. It offers no support whatsoever.
5. If it works, the latest. If it doesn't, we welcome any PRs to fix.
6. No official support will ever be offered ever.

If you have any problems with Java 11, please file bugs or better yet send PRs to fix them! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1372Change the obsolete 'compile' to 'implementation' Karan Kumarknjk0408/21/18, 09:40:00 PM"In your ""[Using Gson with Gradle/Android](https://github.com/google/gson/blob/master/UserGuide.md#using-gson-with-gradleandroid)"" section within your user guide, you have ```compile``` instead of ```implementation```. Since this will be removed at the end of 2018, perhaps it will be better to advise programmers to use 'implementation'?""send a PR? =||= Will do, thanks.

Edit: submitted PR. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1373Change 'compile' to 'implementation' Karan Kumarknjk0408/21/18, 09:39:52 PM"Fix for issue https://github.com/google/gson/issues/1372.

Summarised here again:
Changed the obsolete 'compile' to 'implementation' in the Gradle dependency section""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= CLAs look good, thanks!

<!-- ok --> =||= "Change 'compile' to 'implementation' Karan Kumarknjk0408/21/18, 09:39:52 PM"Fix for issue https://github.com/google/gson/issues/1372.

Summarised here again:
Changed the obsolete 'compile' to 'implementation' in the Gradle dependency section"NaNKaran Kumar08/21/18, 08:12:12 PMChange 'compile' to 'implementation'1
1375Field,  parameter,  and  variable  could  be  finalreudismam08/23/18, 01:55:27 AMThe final modifier can be used in fields, parameters, and local variablesto indicate they cannot be reassigned. This edit improves clarity and it helps with debugging since it shows what values will change at runtime.NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1376Clean up the README a bitJake WhartonJakeWharton08/23/18, 03:55:32 PM"* Remove a lot of ""Gson"" as it's implied nearly everywhere.
* Remove broken Javadoc badge. Move other badges to be near the content to which they apply
* Not an official Google product
* Make download section more general. People other than Android developers use Gradle, for example."NaNClean up the README a bitJake WhartonJakeWharton08/23/18, 03:55:32 PM"* Remove a lot of ""Gson"" as it's implied nearly everywhere.
* Remove broken Javadoc badge. Move other badges to be near the content to which they apply
* Not an official Google product
* Make download section more general. People other than Android developers use Gradle, for example."NaNJake Wharton08/23/18, 03:08:20 PM"Clean up the README a bit

* Remove a lot of ""Gson"" as it's implied nearly everywhere.
* Remove broken Javadoc badge. Move other badges to be near the content to which they apply
* Not an official Google product
* Make download section more general. People other than Android developers use Gradle, for example."1
1380Boolean literal validationShawnshawn71208/21/19, 08:44:05 PM"For Boolean type it appears that gson de-serializes any literals not ""true"" to ""false"". A json document such as:
```
{
   ""a"": wat,
   ""b"": trrue
}
```
and both `a` and `b` would be de-serialized to false despite this not being a valid json document.

```
{
   ""c"": true""
}
```
In this document c will also be de-serialized to `false` the end double quote is probably parsed as part of the literal. I think gson should at least log a MalformedJsonException. It does that if I move the double quote to the beginning (`""true` )"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1382Error in Gradle Buildrkarimi8809/11/18, 04:54:31 AM"Hi.
I always use your lib to serialize my objects, it's really easy to handle. Thank You.

The problem is in adding your lib to my new project. I've got this error after adding gson 2.8.5 as a module (zip file) to project:
**Error: cannot find symbol variable GsonBuildConfig**
what is this for?

I didn't have this problem until i upgraded my android studio.""I used the github link to import the module:
`implementation 'com.github.google:gson:1.7'`

(and of course adding `maven { url 'https://jitpack.io' }` in repositories of allprojects)
Thank you. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1383com.google.gson.LruCache causing stuck thread with com.google.code.gson version 1.5parthapratimpradhan09/12/18, 04:45:22 PM"Version:
<groupId>com.google.code.gson</groupId>
  <artifactId>gson</artifactId>
  <version>1.5</version>
Issue details:
[STUCK] ExecuteThread: '355' for queue: 'weblogic.kernel.Default (self-tuning)'"" daemon prio=10 tid=0x00007f128c081800 nid=0xd95 runnable [0x00007f11eecaa000]
   java.lang.Thread.State: RUNNABLE
	at java.util.HashMap.getEntry(HashMap.java:469)
	at java.util.LinkedHashMap.get(LinkedHashMap.java:301)
	at com.google.gson.LruCache.getElement(LruCache.java:49)
	at com.google.gson.FieldAttributes.getAnnotations(FieldAttributes.java:150)
	at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:138)
	at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:44)
	at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)
	at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)
	at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)
	at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)
	at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)
	at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)
	at com.google.gson.Gson.fromJson(Gson.java:495)
	at com.google.gson.Gson.fromJson(Gson.java:444)
	at com.google.gson.Gson.fromJson(Gson.java:396)
	at com.google.gson.Gson.fromJson(Gson.java:372)"This version of Gson is no longer supported. We only work on the 2.x version. =||= Hi can you please at least confirm that in the latest version of com.google.code.gson we are not using Lru cache which was the primary cause of the issue? =||= LruCache doesn't exist anymore, yes. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1384proguard null pointer PascalTang09/13/18, 06:53:59 PM"hi
I have Crashlytics on my user .
All about NullPointerException with network.

`Fatal Exception: java.lang.RuntimeException
Unable to start activity ComponentInfo{com.ilulutv.lulu/com.ilulutv.lulu.main.MainActivity}: java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String com.ilulutv.lulu.e.a.a.a$a.a()' on a null object reference`

I set my json string to object by gson when volley callback.

Then I cant copy this issue , its not always happen.
I follow the solution from google .
But not work . 
Plz help

<img width=""1017"" alt=""2018-09-13 10 32 45"" src=""https://user-images.githubusercontent.com/12624322/45495971-feaced00-b7a6-11e8-9f9d-1e6046306f26.png"">
<img width=""1111"" alt=""2018-09-13 10 57 48"" src=""https://user-images.githubusercontent.com/12624322/45496770-cc03f400-b7a8-11e8-82fb-a3110db70a7c.png"">
<img width=""765"" alt=""2018-09-13 8 48 18"" src=""https://user-images.githubusercontent.com/12624322/45495968-fe145680-b7a6-11e8-82b8-074562f177da.png"">
<img width=""320"" alt=""2018-09-13 8 48 42"" src=""https://user-images.githubusercontent.com/12624322/45495969-feaced00-b7a6-11e8-8181-ffe436b68a83.png"">
<img width=""806"" alt=""2018-09-13 8 49 04"" src=""https://user-images.githubusercontent.com/12624322/45495970-feaced00-b7a6-11e8-9ba9-10f96865179b.png"">

""Seems like your JSON contained null and you didn't check for it? Or your serialized name annotation was being removed and so the property wasn't being matched?

In either case, this isn't a problem with Gson itself. If it works with ProGuard disabled then Gson is behaving correctly. You'll have to consult assistance for using the ProGuard tool from its documentation such that you configure it correctly. Code obfuscation is designed to mangle your code so you'll need to figure out how to keep around what Gson requires. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1385Deserisation fails with when using null numeric primitives as map keysAudrius ButkeviciusAudriusButkevicius09/14/18, 01:21:15 AM"**What did you do:**

Ran:
```java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.util.HashMap;
import java.util.Map;

public class Test {
    static class MyType {
        public Map<Integer, Integer> map = new HashMap<>();
    }

    public static void main(String[] args) {
        MyType instance = new MyType();
        instance.map.put(null, 1);

        Gson serialiser = new GsonBuilder()
                .enableComplexMapKeySerialization()
                .serializeNulls()
                .setPrettyPrinting()
                .create();

        String data = serialiser.toJson(instance);
        System.out.println(data);

        try {
            MyType newInstance = serialiser.fromJson(data, MyType.class);
            System.out.println(""Success"");
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }
}
```

**What happened**

Deserialisation fails:

```java
{
  ""map"": {
    ""null"": 1
  }
}
com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input string: ""null""
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:228)
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:218)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)
	at com.google.gson.Gson.fromJson(Gson.java:927)
	at com.google.gson.Gson.fromJson(Gson.java:892)
	at com.google.gson.Gson.fromJson(Gson.java:841)
	at com.google.gson.Gson.fromJson(Gson.java:813)
	at Test.main(Test.java:27)
Caused by: java.lang.NumberFormatException: For input string: ""null""
	at java.base/jdk.internal.math.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2054)
	at java.base/jdk.internal.math.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.base/java.lang.Double.parseDouble(Double.java:543)
	at com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1201)
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:226)
	... 11 more
```

**What did you expect to happen:**

Either both serialisation and deserilisation to either succeed or fail (making the handling consistent between the two modes).

It seems that only one mode does not handle this case.
I know that `null` is an invalid json map key, but perhaps the library should handle a special ""null"" key when the type is a nullable primitive.

It seems that this is also broken for strings, as you can serialise a `null`, and  get `""null""` back after deserilisation.


**_Note_**

Strangely it works okay if you serialise a simple map (not embedded in an object).""Ask these questions on StackOverflow please.

Your Map has Integer keys. So, Gson is trying to convert ""null"" to integer and failing. You shouldn't be surprised. 
Define the Map to be Map<String, Integer> =||= This issue is not really a question, I understand loud and clear what's happening. I am asserting that the behaviour is incorrect and that this should be fixed.

I do expect it to convert the keys to integers, I also expect it to eat it's own dog food and be able to deserialise a value it produced on serilisation.


The library should either refuse to serialise null primitive keys (as it cannot deserialise them), or be fixed to deserialise the values it produced when serialising.

The test works ok when using a map that is not embedded in an object, and fails when map is embedded in an object, which further shows inconsistencies in the behaviour, implying an issue. =||= While there may be some merit in your argument, we can't break backwards compatibility by changing behavior. =||= What exactly would you be breaking? Preventing null key serialisation? What about deserialising ""null"" strings into nulls for boxed primitives (other than string I guess) =||= I also think it is an issue, here is the code: 

Scenario 1: 
```
Gson gson = new GsonBuilder().serializeNulls().create();
Map<String, Integer> mapData = new HashMap<>();
mapData.put(""abc"", null);
String data = gson.toJson(mapData);
System.out.println(data);
Type type = TypeToken.getParameterized(HashMap.class, String.class, Integer.class).getType();
Object obj = gson.fromJson(data, type);
System.out.println(obj);
```
The code runs well and got the result
```
{""abc"":null}
{abc=null}
```
Scenario 2:
```
Gson gson = new GsonBuilder().serializeNulls().create();
Map<Integer, String> mapData = new HashMap<>();
mapData.put(null, ""abc"");
String data = gson.toJson(mapData);
System.out.println(data);
Type type = TypeToken.getParameterized(HashMap.class, Integer.class, String.class).getType();
Object obj = gson.fromJson(data, type);
System.out.println(obj);
```
The  code runs failed, and get an exception:
```
Exception in thread ""main"" com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: For input string: ""null""
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:227)
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:217)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)
	at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)
	at com.google.gson.Gson.fromJson(Gson.java:888)
	at com.google.gson.Gson.fromJson(Gson.java:853)
	at com.google.gson.Gson.fromJson(Gson.java:802)
	at com.delta.cornerstone.common.serialization.gson.user.UserSerializationByGson.main(UserSerializationByGson.java:41)
Caused by: java.lang.NumberFormatException: For input string: ""null""
	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)
	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)
	at java.lang.Double.parseDouble(Double.java:538)
	at com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1201)
	at com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:225)
	... 8 more
```

So it seems Gson can only handle the ""NULL"" when it is the value of the map.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1386"Iterable<> object return a empty json ""{}"""Wangchenjadedrip09/17/18, 01:00:20 PMThis is a bug?can you please provide more information? =||= Dupe of #672  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1388@Transient breaks Kotlin's non-null guaranteesBenjamin Hillsalamanders09/20/18, 11:57:19 PM"Annotating a field with `@Transient` correctly skips saving that field to the JSON representation.  

However, when deserializing back to a class, it skips the in-class and in-constructor defaults, leaving the value = null, which breaks Kotlin's promises about not-null values.

I couldn't work around it using `@delegate:Transient val myVal:Double by lazy { 0.0 }` either, it seems to think it is initialized, but to null.  (again, not something that should ever happen in Kotlin)

```
class Temp(@Transient val myVal1:Double = 0.0) {
    @Transient val myVal2:Double = 0.0
}
```
both myVal1 and myVal2 are missing when saved to disk (which is correct) and null when reloaded `GSON.fromJson(it, this::class.java)` (which is unexpected.)

**Expected behavior:** Values are set to their default if they are not included in the deserialized value.""This also happens in Java because Gson skips calling the constructor. You need to provide a default constructor either explicitly or in the bytecode with `@JvmOverloads` if you want class initializers to run.

Or, give Moshi and its first-party Kotlin support a try! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1389Added java.lang.Iterable supportLyubomyr Shaydarivlyubomyr-shaydariv05/24/20, 08:10:24 PMNaN"Related tickets: #428, #672, #691, #1386. =||= I'm new at this am I suppose to download or this  =||= I'm new at this am I suppose to download or this
Or just the ones like this should fix 672 =||= > Maybe there should be a warning somewhere because Iterable is not guaranteed to support calling iterator() multiple times (see DirectoryStream), so it might be surprising why after serializing an object, it suddenly behaves differently.

I agree to some extent, but that interface has been added since 1.7 whereas Gson is still strongly 1.6-oriented, so even if that stream behaves surprisingly, let's just consider that implementation (and those like that) poorly designed violating the LSP. Why: calling the `Iterable.iterator()` method contract is not declared or documented to throw exceptions. I have never used that stream, but it looks like it has to be an iterator, not iterable as it violates the LSP for being ""iterable"", with closeable capabilities. By the way, later in Java 1.8 `Stream` is closeable and I find it done right. Also, even if anyone supplies such one-time-only iterables (with a special iterable type adapter on their own -- so adding the built-in won't break), they must have seen the illegal state exception and collect its result to a truly iterable collection, as the surprising behavior is described as a bold waning right in the Java 1.7 Javadoc. And finally, people, as StackOverflow tells, tend to misuse Gson in many cases and get runtime exceptions: for example, there are dozens questions of why a JavaFX object/property cannot be serialized (duplicate names on serializing) or why de/serializing an Android parcelable results in totally different behavior on different Android versions (obviosly, in both cases the `ReflectiveTypeAdapterFactory` works perfect only with classes they can control in full). So I wouldn't add warnings or Javadocs. =||= > Additionally doesn't com.google.gson.internal.bind.CollectionTypeAdapterFactory.Adapter have to be adjusted as well by this pull request?

I was thinking of this too, and I'm not sure but it's probably better to leave the current ""collection-only"" implementation as is and only mix the iterable support into it. The collection type adapter factory is declared public, and it might be used externally, not via Gson indirectly. =||= Ah nevermind, I am rather certain that you **definitely have to adjust `CollectionTypeAdapterFactory.Adapter`** . It currently only works due to Java's type erasure and **only** for `Iterable`s which are also instances of `Collection`. I am pretty sure that this code would throw `ClassCastException`s once you try to serialize Iterables which do not extend Collection (note also that this should have a separate test method). =||= > I am pretty sure that this code would throw `ClassCastException`s once you try to serialize Iterables which do not extend Collection (note also that this should have a separate test method).

Hm, a good point. I definitely missed that it and going to check it again. Thanks for pointing that out! =||= @Marcono1234 
I'll most likely close this PR due to my poor design and my wrong assumptions. Once I patched the collection type adapter factory for `Iterable`, I realized that now it can be serialized, but cannot be deserialized without a custom deserializer: there is no way to add elements to the iterable that is not a collection. In the force-pushed commit, there is a test that serializes `Chars implements Iterable<Character>`, but cannot be deserialize into a `Chars` instance properly causing a class cast exception since the default `Iterable` constructor is configured to `ArrayList` that obviously cannot be cast to `Chars` (that is effectively a generator, not a ""plain"" collection of elements).

I believe this is the biggest ""why"" why Gson does not support it out of box due to the symmetry issues and I feel ashamed to be blind not seeing it earlier. =||= ```patch
From 86a605c4b33a9fb18ff76b9101b25d65e7e7f3d1 Mon Sep 17 00:00:00 2001
From: Lyubomyr Shaydariv <lyubomyr-shaydariv@users.noreply.github.com>
Date: Sun, 23 Sep 2018 12:11:24 +0300
Subject: [PATCH] Added java.lang.Iterable support

---
 gson/src/main/java/com/google/gson/Gson.java  |  1 +
 .../com/google/gson/internal/$Gson$Types.java | 16 ++++++
 .../gson/internal/ConstructorConstructor.java |  8 +++
 .../bind/CollectionTypeAdapterFactory.java    | 32 +++++++++---
 .../gson/functional/CollectionTest.java       | 49 +++++++++++++++++++
 5 files changed, 100 insertions(+), 6 deletions(-)

diff --git a/gson/src/main/java/com/google/gson/Gson.java b/gson/src/main/java/com/google/gson/Gson.java
index 27f3ee92..30498ffc 100644
--- a/gson/src/main/java/com/google/gson/Gson.java
+++ b/gson/src/main/java/com/google/gson/Gson.java
@@ -270,6 +270,7 @@ public final class Gson {
 
     // type adapters for composite and user-defined types
     factories.add(new CollectionTypeAdapterFactory(constructorConstructor));
+    factories.add(new CollectionTypeAdapterFactory(constructorConstructor, true));
     factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));
     this.jsonAdapterFactory = new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor);
     factories.add(jsonAdapterFactory);
diff --git a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
index adea605f..5a38adfa 100644
--- a/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
+++ b/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
@@ -294,6 +294,22 @@ public final class $Gson$Types {
         : ((Class<?>) array).getComponentType();
   }
 
+  /**
+   * Returns the element type of this iterable type.
+   * @throws IllegalArgumentException if this type is not an iterable.
+   */
+  public static Type getIterableElementType(Type context, Class<?> contextRawType) {
+    Type iterableType = getSupertype(context, contextRawType, Iterable.class);
+
+    if (iterableType instanceof WildcardType) {
+      iterableType = ((WildcardType)iterableType).getUpperBounds()[0];
+    }
+    if (iterableType instanceof ParameterizedType) {
+      return ((ParameterizedType) iterableType).getActualTypeArguments()[0];
+    }
+    return Object.class;
+  }
+
   /**
    * Returns the element type of this collection type.
    * @throws IllegalArgumentException if this type is not a collection.
diff --git a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
index 5fab4601..8d3aedd6 100644
--- a/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
+++ b/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java
@@ -177,6 +177,14 @@ public final class ConstructorConstructor {
       }
     }
 
+    if (Iterable.class.isAssignableFrom(rawType)) {
+      return new ObjectConstructor<T>() {
+        @Override public T construct() {
+          return (T) new ArrayList<Object>();
+        }
+      };
+    }
+
     if (Map.class.isAssignableFrom(rawType)) {
       if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) {
         return new ObjectConstructor<T>() {
diff --git a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
index 1d57844a..5d79b56d 100644
--- a/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
+++ b/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
@@ -35,9 +35,15 @@ import java.util.Collection;
  */
 public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
   private final ConstructorConstructor constructorConstructor;
+  private final boolean supportIterable;
 
   public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor) {
+    this(constructorConstructor, false);
+  }
+
+  public CollectionTypeAdapterFactory(ConstructorConstructor constructorConstructor, boolean supportIterable) {
     this.constructorConstructor = constructorConstructor;
+    this.supportIterable = supportIterable;
   }
 
   @Override
@@ -45,11 +51,11 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
     Type type = typeToken.getType();
 
     Class<? super T> rawType = typeToken.getRawType();
-    if (!Collection.class.isAssignableFrom(rawType)) {
+    if (!isRawTypeSupported(rawType)) {
       return null;
     }
 
-    Type elementType = $Gson$Types.getCollectionElementType(type, rawType);
+    Type elementType = getElementType(type, rawType);
     TypeAdapter<?> elementTypeAdapter = gson.getAdapter(TypeToken.get(elementType));
     ObjectConstructor<T> constructor = constructorConstructor.get(typeToken);
 
@@ -58,7 +64,21 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
     return result;
   }
 
-  private static final class Adapter<E> extends TypeAdapter<Collection<E>> {
+  private boolean isRawTypeSupported(Class<?> rawType) {
+    if (supportIterable) {
+      return Iterable.class.isAssignableFrom(rawType);
+    }
+    return Collection.class.isAssignableFrom(rawType);
+  }
+
+  private Type getElementType(Type type, Class<?> rawType) {
+    if (supportIterable) {
+      return $Gson$Types.getIterableElementType(type, rawType);
+    }
+    return $Gson$Types.getCollectionElementType(type, rawType);
+  }
+
+  private static final class Adapter<E> extends TypeAdapter<Iterable<E>> {
     private final TypeAdapter<E> elementTypeAdapter;
     private final ObjectConstructor<? extends Collection<E>> constructor;
 
@@ -86,14 +106,14 @@ public final class CollectionTypeAdapterFactory implements TypeAdapterFactory {
       return collection;
     }
 
-    @Override public void write(JsonWriter out, Collection<E> collection) throws IOException {
-      if (collection == null) {
+    @Override public void write(JsonWriter out, Iterable<E> iterable) throws IOException {
+      if (iterable == null) {
         out.nullValue();
         return;
       }
 
       out.beginArray();
-      for (E element : collection) {
+      for (E element : iterable) {
         elementTypeAdapter.write(out, element);
       }
       out.endArray();
diff --git a/gson/src/test/java/com/google/gson/functional/CollectionTest.java b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
index 8aa36e21..85bef1b2 100644
--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java
+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java
@@ -25,6 +25,7 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.NoSuchElementException;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
@@ -59,6 +60,27 @@ public class CollectionTest extends TestCase {
     gson = new Gson();
   }
 
+  public void testCollectionSubstitutesIterable() {
+    BagOfPrimitives foo = new BagOfPrimitives(1L, 2, true, ""foo"");
+    BagOfPrimitives bar = new BagOfPrimitives(3L, 4, false, ""bar"");
+    Iterable<BagOfPrimitives> before = Arrays.asList(foo, bar);
+    Type iterableType = new TypeToken<Iterable<BagOfPrimitives>>() {}.getType();
+    Type collectionType = new TypeToken<Collection<BagOfPrimitives>>() {}.getType();
+    String actualJson = gson.toJson(before, iterableType);
+    String expectedJson = gson.toJson(before, collectionType);
+    assertEquals(expectedJson, actualJson);
+    Iterable<BagOfPrimitives> after = gson.fromJson(actualJson, iterableType);
+    assertTrue(after instanceof Collection);
+    assertEquals(before, after);
+  }
+
+  public void testIterableThatIsNotACollection() {
+    Iterable<Character> charsBefore = new Chars('0', '9');
+    String json = gson.toJson(charsBefore, Chars.class);
+    assertEquals(""[\""0\"",\""1\"",\""2\"",\""3\"",\""4\"",\""5\"",\""6\"",\""7\"",\""8\"",\""9\""]"", json);
+    Chars charsAfter = gson.fromJson(json, Chars.class);
+  }
+
   public void testTopLevelCollectionOfIntegersSerialization() {
     Collection<Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
     Type targetType = new TypeToken<Collection<Integer>>() {}.getType();
@@ -413,4 +435,31 @@ public class CollectionTest extends TestCase {
     assertEquals(""hello"", small.inSmall);
   }
 
+  private static final class Chars implements Iterable<Character> {
+
+    private final char from;
+    private final char to;
+
+    private Chars(char from, char to) {
+      this.from = from;
+      this.to = to;
+    }
+
+    @Override public Iterator<Character> iterator() {
+      return new Iterator<Character>() {
+        private char i = from;
+        @Override public boolean hasNext() {
+          return i <= to;
+        }
+        @Override public Character next() {
+          if ( !hasNext() ) {
+            throw new NoSuchElementException();
+          }
+          return i++;
+        }
+        @Override public void remove() { throw new UnsupportedOperationException(); }
+      };
+    }
+  }
+
 }
-- 
2.26.2
```
 =||= @lyubomyr-shaydariv, actually breaking symmetry is not only a problem for your pull request, but a general one, see #1708.
I have created #1709 now which only adds (de-)serialization support for `Iterable`, but not for any subtypes, which is therefore not affected by the symmetry problems.
 =||= @Marcono1234 
Well... I dropped the PR because the symmetry cannot be guaranteed by the _simple_ Gson core patching. I see two ways:

* **(1)** The `Iterable` problem should be both documented explaining why it is not supported out of box and why the user should prefer `Collection` (actually just explaining why Gson works like that now: collections can be added to), and a bidirectional type adapter factory with subtype support might be added to the gson-extras (like the polymorphic type adapter is a part of the extras package, not the core). I still think that serialization should be bi-directional and support subtypes with no exceptions.
* **(2)** OR maybe implement the _full_ `Iterable` support by adding a new ""adding"" interface to conform the ""adding problem"". For example, Gson provides `InstanceCreator` to instantiate types that cannot be easily instantiated by Gson itself (like interfaces). What if add something like ""`IterableAdder`""? This would bloat the Gson API a little, but most likely it is not worth it (i.e., why not use `Collection`?). I think this way does not have enough strength too, and I don't see the way of supporting ""addable"" iterables this way.

In short, I don't think Gson should support `Iterable`. =||= > I still think that serialization should be bi-directional and support subtypes with no exceptions.

Yes, that is why the pull request I created only supports `Iterable` and not any sub types. This preserves symmetry because it allows the deserialization to freely choose any `Iterable` sub type it wants (in this case `ArrayList`). I assume that should cover some use cases where support for `Iterable` (de-)serialization was requested (see also the example on that pull request), though probably not all. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1390Recursive TypeVariable resolution results in ClassCastException when type var is referenced multiple timesMike Cumingsmcumings08/02/21, 11:43:19 PM"The recursive type variable resolution protections put into place in Gson 2.8.2 to fix #1128 does not work if a TypeVariable is referenced multiple times.

Example failing code:
```
    enum TestEnum { ONE, TWO, THREE }

    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}

    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}

    private static class BaseCollection<U, C extends Collection<U>>
    {
        public C collection;
    }
```

When used with the following code to unmarshal
```
TestEnumSetCollection withSet = gson.fromJson(""{\""collection\"":[\""ONE\"",\""THREE\""]}"", TestEnumSetCollection.class);
```
The enum values are unmarshaled as `String` instances instead of as `TestEnum` instances, causing `ClassCastException` to be raised at runtime.  This is due to the fact that the `visitedTypeVariables` map receives an entry for `T`, resolves it properly, and then upon subsequent attempt to resolve `T` fails, since the `visitedTypeVariables` set indicates that `T` has already been resolved."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1391Fix issue with recursive type variable protections to fix #1390Mike Cumingsmcumings08/02/21, 11:43:19 PM"When a type variable is referenced multiple times it needs to resolve to the same value.  Previously, the second attempt would abort resolution early in order to protect against infinite recursion.

NOTE: I could use some scrutiny on this as I don't fully understand the implications of all the code branches.  This commit does resolve the issue but stylistically I'm not really sold on breaking out of the while loop in order to capture the final result for subsequent resolution attempts.

Fixes #1390 ""The Codacy check is flagging existing code with a legitimate `==` check.  Not sure how I should respond to that... =||= > The Codacy check is flagging existing code with a legitimate `==` check. Not sure how I should respond to that...

Neither `componentType` nor `newComponentType` are declared as `java.lang.Class` instances, hence `==` is not guaranteed to work properly. My IntelliJ IDEA code analisys reports a lot of `==`/`equals` issues for `$Gson$Type` too, and I think you should simply rewrite it using `equals()` (the old code is dated 2010, most likely prior to Codacy). Codacy seems to analyze the modified code, so that's probably why it reports your change only. =||= Fair point.  There were a couple points in the `resolve` method where instance equality checks were sufficient (i.e., it was checking to see if the original value was being returned, etc.).  I updated the others to use the `equal` method.  I didn't want to spread this too broadly however, so I stopped there.

Cadacy is now happy. 😃  =||= Could you please edit the description and include:
> Fixes #1390

It appears otherwise GitHub does not understand that this pull request and the issue are related. =||= Done.  Hopefully this PR isn't too old as to be useless at this point. =||= Thanks! There haven't been any other changes to `$Gson$Types` since then so this PR is still useful.
Hopefully the maintainers have a look at all the open pull requests soon. =||= "Fix issue with recursive type variable protections to fix #1390Mike Cumingsmcumings08/02/21, 11:43:19 PM"When a type variable is referenced multiple times it needs to resolve to the same value.  Previously, the second attempt would abort resolution early in order to protect against infinite recursion.

NOTE: I could use some scrutiny on this as I don't fully understand the implications of all the code branches.  This commit does resolve the issue but stylistically I'm not really sold on breaking out of the while loop in order to capture the final result for subsequent resolution attempts.

Fixes #1390 "NaNMike Cumings09/27/18, 05:38:53 AMReplace instance equality checks in $Gson$Types#resolve1
1392Deserialize JSON to nested objects with default valueskraskkrz10/01/18, 07:48:31 AM"```
@Getter
@Setter
@NoArgsConstructor
@ToString
public class Destination {
    @Getter
    @Setter
    @NoArgsConstructor
    @ToString
    public class Inner {
        private Integer e1 = 200; 
        private String  e2 = ""..."";
        private Integer e3 = 500;
    }

    private int p1 = 100;
    private Inner[ ] p2;
}

@Getter
@Setter
@NoArgsConstructor
@ToString
public class Source {
    private int p1;
    private Destination.Inner[ ] p2;
}

public class Main {
   private static final String JSON = ""{ `p1`: `100`, `p2`: [ { `e1`:`300` } ] }"".replaceAll( ""`"", ""\"""" );
   
   public static void main(String...args)  {
        Source source = new GsonBuilder( ).create( ).fromJson( JSON, Source.class );
        System.out.println( source );
    }
}
```
The output is:

`Source(p1=100, p2=[Destination.Inner(e1=300, e2=null, e3=null)]) `

I expected default values for the Inner nested objects, i.e.:

`Source(p1=100, p2=[Destination.Inner(e1=300, e2=..., e3=500)])`

but nested objects don't have them. What is a problem?""Once you make the `Inner` class `static`, it will work as you're expecting. =||= I'm aware that Gson works correctly for static nested classes. In my real code it's not possible to convert a non-static inner class to a static nested class.
I also know the following solution (registering a custom InstanceCreator):

```
public class Main {
   private static final String JSON = ""{ `p1`: `100`, `p2`: [ { `e1`:`300` } ] }"".replaceAll( ""`"", ""\"""" );
   
   public static void main(String...args)  {
        Source source = new GsonBuilder()
                .registerTypeAdapter(Destination.Inner.class, (InstanceCreator<Destination.Inner>) (type) -> new Destination().new Inner())
                .create().fromJson(JSON, Source.class);
        System.out.println( source );
    }
}
```


But I wonder if there is a more concise (maybe more elegant) solution to this problem? After all, without the custom InstanceCreator, GSON creates new instances of the Inner class, but doesn't give them default values for fields. =||= @kraskkrz 
I don't think it's possible to find a better way than registering a custom instance creator in your case. The reason of your issue is that Gson omits invoking constructors while instantiating classes that do not have default constructors, with `UnsafeAllocator`. Since the fields default values are assigned in constructors, creating an inner class instance using `UnsafeAllocator` makes the created object unconstructed with the fields left uninitialized. Here is an example output for `java -p -c Destination\$Inner.class` of what is constructed under the hood:

```
  public i1392.Destination$Inner(i1392.Destination);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field this$0:Li1392/Destination;
       5: aload_0
       6: invokespecial #5                  // Method java/lang/Object.""<init>"":()V
       9: aload_0
      10: sipush        200
      13: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      16: putfield      #1                  // Field e1:Ljava/lang/Integer;
      19: aload_0
      20: ldc           #7                  // String ...
      22: putfield      #2                  // Field e2:Ljava/lang/String;
      25: aload_0
      26: sipush        500
      29: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: putfield      #3                  // Field e3:Ljava/lang/Integer;
      35: return
```

If inner class implicit constructors would not have the only parameter referencing its enclosed class, Gson would use regular Reflection API `outerClass.newInstance()` therefore all fields would be initialized. So, registering an instance creator is a hint to Gson for a way how an particular instance can be created and properly constructed. I don't think you can make it all more concise, sorry. =||= To all of you that took time and patience I m sorry I'm  just know responding to you .please accept my apology.
But I dont understand how things work on your website. For instance did you make the changes that was requested or do I.
I diffently understand all the string line stuff
The was 2 that said this issue when I tried I cannot do.
All these issues are on zte Grand X4 Z956 Android smartphone.
It was even hard for me to tell which messages where mine.
I'm sorry I wasted your time.
If someone could explain things to me what I'm suppose to or not, explain how to I give up 
I can't any response from what help center
One scan thank you & I'm sorry I wasted your time
Critterloversrv

 =||= @lyubomyr-shaydariv Thank you for your help. The `UnsafeAllocator `source code explains how Gson works. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1393Add Diffblue Deeptest testsDiffblue Assistantdiffblue-assistant04/10/19, 10:41:27 AM"The test cases contained in this PR were automatically generated by [Diffblue](http://www.diffblue.com/)'s [Deeptest](http://www.diffblue.com/papers/overview.pdf) software.

Diffblue is an Oxford-based start-up that aims to automate traditional coding tasks to increase developer productivity. One of our missions is to provide useful tests to open source projects. In return we would appreciate your feedback on our tests to help us further improve our tool.

These tests are part of a batch of 479 in total, providing an increase of approximately 18% in line coverage.
We would be happy to provide the remaining tests via a subsequent PR.

Results for various open source projects can be viewed at:

[http://diff.blue/demo](http://diff.blue/demo)

We welcome any feedback you have on these tests.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= CLAs look good, thanks!

<!-- ok --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1396refactor similar test casesJunyannickzj10/09/18, 01:25:53 AM"Hi!

As part of our research, we have developed a tool to suggest refactorings for test cases that appear to be similar. For Gson, it suggested these refactorings. We believe that they can improve test maintainability going forward and hope that you will accept this pull request. Please contact me or Patrick Lam <patrick.lam@uwaterloo.ca> if you have any questions."PS this research was supported in part by a Google Faculty Research Award (thanks!) =||= Sorry, the PR doesn't create more readable/maintainable code from my perspective =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1399Strange issue between release and debug build variantsNiels v/d Speknielsnl6810/10/18, 02:14:03 PM"I just found out that the result is different between my release and debug build's
When i use the debug version all data is loaded properly but when i switch to the release build the data is empty.
---
`public class SearchItem implements Serializable {
    private long   id;
    private String title ="""";

    private String url ="""";
    private int rating =0;
    private String description ="""";
    private String twitter ="""";
    private String facebook ="""";
    private String other ="""";
    private String schedule ="""";
    private String genres ="""";
    private String banner ="""";
    private int active =0;

    public SearchItem() {
    }

    public long getID() {  return id; }
    public String getTitle() {  return title; }
    public int getRating() {  return rating; }
    public String getUrl() {     return url; }
    public String getDescription() {    return description;   }
    public String getTwitter()  {  return twitter; }
    public String getFacebook() {  return facebook; }
    public String getOther()    {    return other;   }
    public String getSchedule() {  return schedule; }
    public String getGenres()   {  return genres; }
    public String getBanner()   {    return banner;   }
    public int getActive()      { return active; }
}
`

`loadjson() {
String response = '[{""id"":488,
                                ""title"":""\""Avibus\"""",
                                ""url"":""http:\/\/topwebcomics.com\/twcout\/22197"",
                                ""description"":""After bringing home a strange homeless girl named 'Scarlet,' Kelley Russo discovers a fascinating hidden world of cryptids and legends. \r\nBut she is far from welcome."",
                                ""twitter"":""https:\/\/twitter.com\/LotMinx"",
                                ""facebook"":""https:\/\/www.facebook.com\/LotMinx\/"",
                                ""other"":""http:\/\/avibus.thewebcomic.com"",""schedule"":""Friday"",""genres"":""Adventure, Fantasy"",
                                ""banner"":""https:\/\/s3-us-west-2.amazonaws.com\/twc.images\/images\/comicbanner\/22197_468 x 60 banner ad avi 2.jpg"",
                                ""active"":""1"",
                                ""rating"":""2""},
                               {""id"":7282,
                                ""title"":""\""Curing Cancer\"""",
                                ""url"":""http:\/\/topwebcomics.com\/twcout\/15443"",
                                ""description"":""A webcomic that does much. Except cure your cancer."",
                                ""twitter"":"""",
                                ""facebook"":"""",
                                ""other"":""http:\/\/www.curingcancercomics.com"",
                                ""schedule"":"""",
                                ""genres"":"""",
                                ""banner"":"""",
                                ""active"":""1"",
                                ""rating"":""3""}];
                            Type listType = new TypeToken<List<SearchItem>>() {}.getType();
                            List<SearchItem> items = new Gson().fromJson(response,  listType);
}
`

The list is created with all the SearchItems but the SearchItems objects are empty.""This is a build configuration problem and not a problem with Gson, likely as the result of the use of ProGuard. Since it's not a Gson problem, we are not equipped to assist. You'll have better luck on StackOverflow provided you can supply more detail about your build configuration and the tool which is (presumably) obfuscating your code. =||= I'm using the default Android studio settings. So i dont get why this should not be an GSON issue.  =||= Gson doesn't know anything about build types. The fact that it works in one and not the other means there's no problem with Gson. =||= You can fix this adding a line like this: ""-keep class com.example.project.models.device.** { *; }"" in proguard-rules file to avoid obfuscation for the field variables and that are sent outside the app via OkHttpClient or similar. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1400Typo in JavaDoc exampleSamyak Bakliwalhmble10/10/18, 03:09:11 PMNaN"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "Typo in JavaDoc exampleSamyak Bakliwalhmble10/10/18, 03:09:11 PMNaNNaNhmble10/10/18, 02:58:10 PMTypo in JavaDoc example1
1401Fix JPMS module setup (fixes #1315)Piet van Dongenpietvandongen10/10/18, 08:22:49 PMNaNWe need to maintain compatibility all the way to Java 6. =||= Aw, right, I'll do a new one that targets 1.6 and up then. Thanks! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1402Fix JPMS module setup (fixes #1315)Piet van Dongenpietvandongen10/18/18, 03:49:09 PM"I've followed the instructions from the Apache Maven Compiler Plugin team here: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html

This should ensure compatibility with Java 6+ while providing module info for Java 9+.

Also, in `gson/src/main/java/com/google/gson/Gson.java` I've removed calls to a constructor only introduced in Java 1.7, which broke backwards compatibility."NaNFix JPMS module setup (fixes #1315)Piet van Dongenpietvandongen10/18/18, 03:49:09 PM"I've followed the instructions from the Apache Maven Compiler Plugin team here: https://maven.apache.org/plugins/maven-compiler-plugin/examples/module-info.html

This should ensure compatibility with Java 6+ while providing module info for Java 9+.

Also, in `gson/src/main/java/com/google/gson/Gson.java` I've removed calls to a constructor only introduced in Java 1.7, which broke backwards compatibility."NaNPiet van Dongen10/18/18, 07:57:16 AMRe-added cause to AssertionErrors1
1403GsonResponseBodyConverter - java.lang.OutOfMemoryError Thanh Lechuoichien10/18/18, 04:26:21 AM"Hi,

Recently, i got this exception from my application, may not be due to source code or my data.

Caused by java.lang.OutOfMemoryError: Failed to allocate a 30536292 byte allocation with 4194304 free bytes and 28MB until OOM
       at java.util.ArrayList.add(ArrayList.java:118)
       at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(SourceFile:1083)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(SourceFile:129)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(SourceFile:220)
       at retrofit2.converter.gson.GsonResponseBodyConverter.convert(SourceFile:37)
       at retrofit2.converter.gson.GsonResponseBodyConverter.convert(SourceFile:25)
       at retrofit2.ServiceMethod.toResponse(SourceFile:118)
       at retrofit2.OkHttpCall.parseResponse(SourceFile:212)
       at retrofit2.OkHttpCall.execute(SourceFile:174)
       at retrofit2.adapter.rxjava.CallExecuteOnSubscribe.call(SourceFile:40)
       at retrofit2.adapter.rxjava.CallExecuteOnSubscribe.call(SourceFile:24)
       at retrofit2.adapter.rxjava.BodyOnSubscribe.call(SourceFile:33)
       at retrofit2.adapter.rxjava.BodyOnSubscribe.call(SourceFile:25)
       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)
       at rx.Observable.unsafeSubscribe(SourceFile:10151)
       at rx.internal.operators.OnSubscribeMap.call(SourceFile:1048)
       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)
       at rx.Observable.unsafeSubscribe(SourceFile:10151)
       at rx.internal.operators.OnSubscribeMap.call(SourceFile:1048)
       at rx.internal.operators.OnSubscribeLift.call(SourceFile:1048)
       at rx.Observable.unsafeSubscribe(SourceFile:10151)
       at rx.internal.operators.OperatorSubscribeOn$1.call(SourceFile:94)
       at rx.internal.schedulers.ScheduledAction.run(SourceFile:55)
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:422)
       at java.util.concurrent.FutureTask.run(FutureTask.java:237)
       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:152)
       at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:265)
       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)
       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)
       at java.lang.Thread.run(Thread.java:818)

Please help me resolve this!

Thanks.
`com.google.code.gson:gson:2.8.2`""OOMs are never caused directly by the stacktrace which they contain. There is usually a build-up of events which lead to them. This is a combination of leaks (intentional or not) or producers which outrun their consumers or any number of other causes.

Suffice to say, Gson is doing what you told it. Trying to allocate a 30MB something which your JSON and model dictated was required. The OOM comes from the JVM being unable to provide Gson with what it requested, and not from Gson itself. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1409Should MapTypeAdapterFactory.Adapter throw an exception while reading objects with duplicate keys?Lyubomyr Shaydarivlyubomyr-shaydariv12/05/18, 07:45:35 PM"Today I came across an interesting [question](https://stackoverflow.com/questions/52855391/javajson-to-map-using-gson) on StackOverflow. The author asks why the following JSON document cannot be deserialized:

```json
{
	""K1"": ""V1"",
	""K2"": ""V2"",
	""K1"": ""V3""
}
```

If deserializing the above document with `gson.fromJson(..., Map.class)`, the following exception is thrown:

```
JsonSyntaxException: duplicate key: key0
```

However, if the document is deserialized with `gson.fromJson(..., Object.class)`, as found by another user, the deserialized map is as follows:

```
{K1=V3, K2=V2}
```

This is obviously an inconsistent behavior, but I find the ""`Object`"" implementation more useful. As far as I know, JSON [does not prohibit](https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object) use of duplicate keys simply describing its grammar.

Should `ObjectTypeAdapter` throw an exception on duplicate keys, or should `MapTypeAdapterFactory.Adapter` not check duplicate keys (however, the check was added by a clear intention in a98d6eae472df67317d58d34f13438bb958668b1)?

----

Related: #386, #649"Closed as a duplicate of #649. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1411Updated copyright year in readme filehansblafoo10/23/18, 02:13:20 PMupdated the copyright information in this central readme file because an outdated copyright year imposes license issues in using this software correctly"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= We are advised to not update this number =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1412toString vs asString behavior for string types in javajmiodownik10/23/18, 06:32:42 PMTO WHOM IT MAY CONCERN, I AM VERY UNHAPPY WITH TOSTRING(). MY GRANDSON KEEPS RUNNING IT ON THE COMPUTER AND IT PULLS UP WORDS WITH EXTRA QUOTES. PLEASE FIX THIS AS I NEED TO PRINT OUT MY COUPONS FOR THE CRACKER BARGAL EARLY BIRD SPECIAL. ALL THE BEST HAROLD. XXXNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1413Display null-handling details as sublistJeremy W. Shermanjeremy-w10/26/18, 03:57:13 PM"Indent the details of null handling.

Comparing against the [old, Google Sites user guide][gsites] shows that the two items following the ""handles nulls correctly"" item are intended as a sublist under that item.

[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= "Display null-handling details as sublistJeremy W. Shermanjeremy-w10/26/18, 03:57:13 PM"Indent the details of null handling.

Comparing against the [old, Google Sites user guide][gsites] shows that the two items following the ""handles nulls correctly"" item are intended as a sublist under that item.

[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects"NaNJeremy W. Sherman10/26/18, 03:12:00 PM"Display null-handling details as sublist

Indent the details of null handling.

Comparing against the [old, Google Sites user guide][gsites] shows that the two items following the ""handles nulls correctly"" item are intended as a sublist under that item.

[gsites]: https://sites.google.com/site/gson/gson-user-guide#TOC-Finer-Points-with-Objects"1
1414Question: Replacing TypeToken from Guava with Gson ?Olivier Rogeroroger03/07/19, 07:54:11 AM"I am currently trying to refactor a project to avoid having to use guava as a dependency.
I was using it mainly for reflection related features, but in most case I could find an altenative.

However, there is one case left I cannot fix for now:
I try to retrieve the class of a generic parameter of the current class.

It works fine using Guava since the Type returned by TokenType can be casted to Class<I>.

Guava:
`(Class<I>) new com.google.common.reflect.TypeToken<I>(getClass()) {}.getType();`

I attempted to substitute this call using the TypeToken from Gson instead, but apparently the information about I is lost and there result of this call is a TypeVariable than is kept as a Class<Object> after executing:

Gson:
`(Class<I>) com.google.gson.reflect.TypeToken<I>() {}.getType();	`

As far as I can tell the getClass() parameter is a clue to why context is not kept.
When I use Guava with the same signature:

`(Class<I>) com.google.gson.reflect.TypeToken<I>() {}.getType();	`

I get this error message:

> java.lang.IllegalStateException: Cannot construct a TypeToken for a type variable.
> You probably meant to call new TypeToken<I>(getClass()) that can resolve the type variable for you.
> If you do need to create a TypeToken of a type variable, please use TypeToken.of() instead.

I see Gson also as a (package protected) constructor using a Type as argument.

Is there a way to obtain the class of a Generic Parameter using Gson only ?""I also asked the question on [StackOverflow](https://stackoverflow.com/q/53060057/957103)  =||= Do you really need type tokens? It looks like the use of type tokens here is a bit of an overkill, since you still  only need the type it _can_ hold. =||= You are right, it does seems overkill.

I just have not found a better way to go from generic Type parameter to its corresponding class right now.
I would be interested in your idea to do that. =||= @oroger 
You should merely bound to `java.lang.reflect.Type` and not `java.lang.Class`, if possible. Types represent classes, parameterized classes, wildcards, arrays, etc, whilst `Class` is a special case of a type that represents a class and not parameterization (by design; please also see the `java.lang.reflect.ParameterizedType` interface) -- this is why a type parameter cannot be cast to a class because javac merely does not have any clue on that. If you want to have your code to be more type-safe, you might want to bound to `TypeToken<T>`, not `Type`, but you'll need to cast its `.getType()` to `Class` if possible and necessary (note that type tokens are a bit tricky because they rely on a fact that Java preserves super classes/interfaces parameterization, therefore requiring a new anonymous classe for each type token declaration; but if you're fine with `Type`s, you can simply construct your `ParameterizedType` instances).
 =||= I missed that point 3 months ago, but:

> Is there a way to obtain the class of a Generic Parameter using Gson only ?

(IF I understood your question 100% clear) You can't do this in _your_ case, because you're trying to obtain the actual class while can obtain a type variable only (at least this is what I can see in your original question). For example, suppose you want to have your code play nice with generics and type safety, and you're deciding to get rid of Gson `TypeToken` completely, then you could implement a simple type-safe wrapper:

```java
abstract class T<TYPE>
		implements Supplier<Type> {

	private final Type type;

	protected T() {
		type = resolveType();
	}

	@Override
	public final Type get() {
		return type;
	}

	@Override
	public final boolean equals(final Object o) {
		if ( this == o ) {
			return true;
		}
		if ( o == null || getClass() != o.getClass() ) {
			return false;
		}
		final T<?> that = (T<?>) o;
		return type.equals(that.type);
	}

	@Override
	public final int hashCode() {
		return type.hashCode();
	}

	@Override
	public final String toString() {
		return type.toString();
	}

	private Type resolveType() {
		@SuppressWarnings({ ""unchecked"", ""rawtypes"" })
		final Class<T<TYPE>> superclass = (Class) T.class;
		@SuppressWarnings(""unchecked"")
		final Class<? extends T<TYPE>> thisClass = (Class<T<TYPE>>) getClass();
		final Class<?> actualSuperclass = thisClass.getSuperclass();
		if ( actualSuperclass != superclass ) {
			throw new IllegalArgumentException(thisClass + "" must extend "" + superclass + "" directly but it extends "" + actualSuperclass);
		}
		final Type genericSuperclass = thisClass.getGenericSuperclass();
		if ( !(genericSuperclass instanceof ParameterizedType) ) {
			throw new IllegalArgumentException(thisClass + "" must parameterize its superclass "" + genericSuperclass);
		}
		final ParameterizedType parameterizedGenericSuperclass = (ParameterizedType) genericSuperclass;
		final Type[] actualTypeArguments = parameterizedGenericSuperclass.getActualTypeArguments();
		if ( actualTypeArguments.length != 1 ) {
			throw new AssertionError(actualTypeArguments.length);
		}
		return actualTypeArguments[0];
	}

}
```

Now suppose you have a quick test like this:

```java
public static <ANY> void main(final String... args) {
	System.out.println(new T<Integer>() {}.get());
	System.out.println(new T<Map<Integer, List<String>>>() {}.get());
	System.out.println(new T<ANY>() {}.get());
}
```

The code above produces

```
class java.lang.Integer
java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>
ANY
```

whose classes are `class java.lang.Class`, `class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl`, and `class sun.reflect.generics.reflectiveObjects.TypeVariableImpl` (for example). Note that each of them are implemented differently therefore have different classes. In the case of `<ANY>` you can't have an actual type when invoking the method with different type parameters. It won't work unless you let it know the actual type somehow. For example:

```java
public static void main(final String... args) {
	// ...
	final Integer i1 = thisCanWork(new T<Integer>() {});
	final Map<Integer, List<String>> m1 = thisCanWork(new T<Map<Integer, List<String>>>() {});
	// ...
	final Integer i2 = thisCannotWork();
	final Map<Integer, List<String>> m2 = thisCannotWork();
}

private static <ANY> ANY thisCanWork(final T<ANY> type) {
	System.out.println(type);
	return null; // pretend
}

private static <ANY> ANY thisCannotWork() {
	System.out.println(new T<ANY>() {});
	return null; // pretend
}
```

This results in

```
class java.lang.Integer
java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>
ANY
ANY
```

The `T` implementation is a simple wrapper demonstrating why type tokens can work and how they obtain the type information. Additionally, `Class<I>` cannot work here because `Class` only represents a class loaded by a class loader in JVM, these classes cannot be _actually_ parameterized (but can can extend parameterized classes and this makes the type tokens work + and can hold _type variable_ being not able to work as well as the `thisCannotWork()` method can't).

Consider type tokens only as a type safe alternative for holding types your application work with (this makes methods like `thisCanWork()` control what types are used as ""in"" and ""out""), however this is just a wrapper around a `Type` instance that actually represents a type, not class. In my comment above I marked that `Type` is the essential part here, and it does not really matter where you can obtain it from: either construct it yourself just implementing proper interfaces, or ask `javac` to put type information into the subclass' superclass metadata and then use type token mechanism.

Sorry for a long and vague answer, I hope it can shed some more light on how types and type tokens work. =||= Thank you for the detailed explanation. This is actually clearer in my mind. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1415Fast finderสุธีร์ วรรณศิริกุลdeninzane11/04/18, 04:44:46 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1416Deserialization using genericsMatejmatejhacin11/07/18, 04:26:12 PM"I'm trying to implement a generic abstract class (in Kotlin) which support deserialization using Gson.

To simplify, the code is something like this:

    abstract class Callback<T> {

        ...

        init {

            value = gson.fromJson<T>(json, object : TypeToken<T>() {}.type)

        }

        ...

    }

On the `init` line, the `type` is underlined and the error says _Type inference failed: Not enough information to infer parameter T_

Now I understand why this error is happening, but I wonder if there's a workaround that works. I am guessing there is, because Retrofit also works using generics and it has no problem deserializing response using Gson.

Any help greatly appreciated.""`T` is `Object` an runtime. Gson needs to know the type to look up the correct type adapter. You'll need to pass in the type or the type adapter. =||= Thanks. Since this is not possible, I'll just close the issue then. For now, I solved it by passing `Type` as a parameter. Still not a fan of the solution though, since now I always have to create Type by doing `object : TypeToken<MyObject>() {}.type` every time and it makes code a bit more messy.

I still wonder how Retrofit does it though, since it works using generics and gson. If anyone can explain that, it will be appreciated. =||= Retrofit uses reflection to see the type and looks up a Converter for the type. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1419Delete LICENSELukety8811/07/18, 06:50:29 PMNaN"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= Why do we want to delete this? I understand that the license is available in GitHub anyway, but having an explicit LICENSE file is not a bad idea. =||= Sorry I was trying to figure out how to delete api put on my phone by my gf
while I was sleeping.

On Nov 7, 2018 12:51 PM, ""inder123"" <notifications@github.com> wrote:

> Closed #1419 <https://github.com/google/gson/pull/1419>.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1419#event-1952444527>, or mute the
> thread
> <https://github.com/notifications/unsubscribe-auth/Aqw9L25YRwhf5dA6pnJsXED0E8tjl_Vxks5usyuagaJpZM4YSmyG>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1422Infer type in generic instance creation.reudismam11/10/18, 06:54:11 PMThis edit replaces type parameters to invoke the constructor of a generic class with an empty set (<>), diamond operator and allow inference of type parameters by the context. This edit ensures the use of generic instead of the deprecated raw types.This projects builds with JDK 6 (or `-release 6`) which does not allow the diamond operator. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1424toJson() fails when trying to serialize an object of DoublyLinkedList<Record>Muddi WalidMuddz11/29/18, 05:49:53 PM"I have a `DoublyLinkedList<Record>` object I want to jsonify with Gson, but when doing so I get this common infinite loop error even when I have done everything by the books: 

    at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)




**Record.java**

    class Record {

    private String objectName;
    private Object object;

    Record(String objectName, Object object) {
        this.objectName = objectName;
        this.object = object;
    }

    Object getObject() {
        return object;
    }
    String getObjectName() {
        return objectName;
      }
    }

**Gson Deserializing:**

      Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();
      DoublyLinkedList<Record> linkedList = new Gson().fromJson(json, classType);

**Gson Serializing:**

      Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();
      String json = gson.toJson(list,classType);

""Please provide the full exception trace.

On Sun, Nov 11, 2018, 6:53 AM Muddi Walid <notifications@github.com wrote:

> I have a DoublyLinkedList<Record> object I want to jsonify with Gson, but
> when doing so I get this common infinite loop error even when I have done
> everything by the books:
>
> at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
>     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
>     at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
>     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
>
> *Record.java*
>
> class Record {
>
> private String objectName;
> private Object object;
>
> Record(String objectName, Object object) {
>     this.objectName = objectName;
>     this.object = object;
> }
>
> Object getObject() {
>     return object;
> }
> String getObjectName() {
>     return objectName;
>   }
> }
>
> *Gson Serializing:*
>
>   Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();
>   DoublyLinkedList<Record> linkedList = new Gson().fromJson(json, classType);
>
> *Gson Deserializing:*
>
>   Type classType = new TypeToken<DoublyLinkedList<Record>>() {}.getType();
>   String json = gson.toJson(list,classType);
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1424>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEZ1UVS9vjdBdAgbews5ALHvXPy9Iks5uuA-sgaJpZM4YYckO>
> .
>
 =||= Here you go @JakeWharton 

Gson version: 2.8.5
Gradle version: 3.2.0

```
    java.lang.StackOverflowError: stack size 8MB
        at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:946)
        at com.google.gson.Gson.getAdapter(Gson.java:434)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:56)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.internal.bind.ObjectTypeAdapter.write(ObjectTypeAdapter.java:107)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
2018-11-11 15:08:55.594 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) 2018-11-11 15:08:55.731 17647-17658/com.muddzdev.regret.demo I/zygote64: Background                         concurrent copying GC freed 71214(1859KB) AllocSpace objects, 4(6MB) LOS objects, 42% free,                 33MB/57MB, paused 105.092ms total 246.181ms
        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo I/chatty: uid=11187(u0_a1187)         com.muddzdev.regret.demo identical 2276 lines
        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at         com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        2018-11-11 15:08:56.227 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson$FutureTypeAdapter.write(Gson.java:1018)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
        at         com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
        at com.google.gson.Gson.toJson(Gson.java:704)
        at com.google.gson.Gson.toJson(Gson.java:683)
        at com.google.gson.Gson.toJson(Gson.java:638)
        at com.muddzdev.regret.Session.saveList(Session.java:49)
        at com.muddzdev.regret.Session.setList(Session.java:26)
        at com.muddzdev.regret.RegretHandler.save(RegretHandler.java:17)
        2018-11-11 15:08:56.228 17647-17647/com.muddzdev.regret.demo E/AndroidRuntime:     at         com.muddzdev.regret.Regret.add(Regret.java:17)
        at com.muddzdev.regret.demo.MainActivity.onCreate(MainActivity.java:62)
        at android.app.Activity.performCreate(Activity.java:7183)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1220)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2910)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3032)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1696)
        at android.os.Handler.dispatchMessage(Handler.java:105)
        at android.os.Looper.loop(Looper.java:164)
        at android.app.ActivityThread.main(ActivityThread.java:6944)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)
``` =||= I can't tell if you have a really deeply nested tree or a cyclic reference (or both). Can you provide an executable sample that demonstrates the problem? =||= @JakeWharton Here is a simple sample projekt https://github.com/Muddz/GsonDoublyLinkedListSample/blob/master/app/src/main/java/com/muddzdev/gsondoublylinkedlistsample/MainActivity.java

While doing the sample projekt I figured out that `toJson()` only fails when `DoublyLinkedList` has nodes. If `DoublyLinkedList` is empty then it works. Further more the `DoublyLinkedList.java` is a my own implementation with a private inner class of `Node`  =||= @JakeWharton It seem to be a problem with my own implementation of `DoublyLinkedList`. I tried use `Gson` on the default java `LinkedList` class and it worked. The problem lies in the `Node` inner class of my `DoublyLinkedList
` =||= Hi again @JakeWharton. I haven't been able to fix the problem and I'm not sure where the problem is. When I try to parse an instance of `LinkedList<Integer>` with `toJson()` of the original implementation by Java it works fine. But with this [DoublyLinkedList](https://github.com/Muddz/Regret/blob/master/regret/src/main/java/com/muddzdev/regret/DoublyLinkedList.java) it will just cause the same error as mentioned above.  =||= Your object graph conntains cycles. You need to register a custom type
adapter that delegates to the adapter for a regular List. Or just specify
your fields as List instead of the concrete DoublyLinkedList type so that
will be done automatically.

On Wed, Nov 28, 2018, 8:57 AM Muddi Walid <notifications@github.com wrote:

> Hi again @JakeWharton <https://github.com/JakeWharton>. I haven't been
> able to fix the problem and I'm not sure where the problem is. When I try
> to parse an instance of LinkedList<Integer> with toJson() of the original
> implementation by Java it works fine. But with this DoublyLinkedList
> <https://github.com/Muddz/Regret/blob/master/regret/src/main/java/com/muddzdev/regret/DoublyLinkedList.java>
> it will just cause the same error as mentioned above.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1424#issuecomment-442455337>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEdh2Qf0m79OA0va0QAeRYOa2M6muks5uzpY4gaJpZM4YYckO>
> .
>
 =||= I tried to look at `TypeAdapter` but as I can see, this will only support primitive types of data. 
When using the `out` and `in` objects.

The DoublyLinkedList should be able to contain native Android objects such as `Paint`
Maybe Gson isn't acutally suited for my use case, I'm right here?


Can you provide me with more information on this part _"" just specify
your fields as List instead of the concrete DoublyLinkedList type so that
will be done automatically.""_ =||= Type adapters are for any type. I think you should ask your question on
StackOverflow since it's not a bug or feature request.

On Wed, Nov 28, 2018, 11:07 AM Muddi Walid <notifications@github.com wrote:

> I tried to look at TypeAdapter but as I can see, this will only support
> primitive types of data.
> When using the out and in objects.
>
> The DoublyLinkedList should be able to contain native Android objects such
> as Paint
> Maybe Gson isn't acutally suited for my use case, I'm right here?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1424#issuecomment-442502830>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEfhfqPa8ufEdpoaF1ARPuQJgk1SWks5uzrS9gaJpZM4YYckO>
> .
>
 =||= @JakeWharton Yes. Thank you for your time.  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1428Refactor JsonParser to use static accessDegubiDegubi11/18/18, 12:17:28 AM"Deprecate the default and only constructor of the JsonParser class and make the parser methods statically accessible. Because the constructor is only deprecated, no code change is required. The constructor is marked ""forRemoval"", although it is not a requirement to keep the ""forRemoval"" marked as true.
Edit: Removed forRemoval because of Java8""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= While this may be a good idea, we don't accept breaking changes in this project. =||= Is this a breaking change at the bytecode level? Because at source level it works the old way and the new way too. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1430Add static method alternatives to JsonParserDegubiDegubi03/29/19, 10:28:54 PMAlternative request to add static methods to JsonParser. This way no bytecode changes. I didn't mark the constructor as deprecated this time to avoid warnings.  The PR adds 3 new static methods to JsonParser and refactors the existing 3 instance methods to use the static ones."ok =||= What is the key issue you are trying to solve? 
Is it the creation of the JsonParser object that is bothering you? Or is it a deeper philosophical issue. =||= I just don't like the look of it. And the need to create a new parser object every time. Also, the method names ""parse"" vs ""parseString"" I can see that I'm parsing the Json from a string, not from a Reader. =||= @Degubi why did you close this pull request?

You were definitely not the only one with this opinion, see [this StackOverflow comment](https://stackoverflow.com/questions/4110664/gson-directly-convert-string-to-jsonobject-no-pojo#comment30505372_4527044) =||= @Marcono1234 I reopened it with better deprecations, see #1513 . I really think it they should be statics, but I'm not sure about others thinking the same... (See the discussion in #1513) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1431JSON API SupportTaynã Bonaldotaynanbonaldo11/21/18, 12:04:27 AM"Are [JSON API](https://jsonapi.org) specification supported by GSON?

If it's not supported, why?""Gson doesn't care about the format of your JSON so you're free to model that if you like, but there's no built-in support or anything. =||= Thank you so much @JakeWharton! 

But can I handle an array of ""included"" objects that represents all type of relations in JSON API specification? ie.:

``` json
{
    ""data"": [
        {
            ""id"": ""2"",
            ""type"": ""my_type"",
            ""attributes"": {
                ""a"": """",
                ""b"": 1
            },
            ""relationships"": {
                ""type_as"": {
                    ""data"": {
                        ""id"": ""21"",
                        ""type"": ""type_a""
                    }
                }
                ""type_bs"": {
                    ""data"": [
                        {
                            ""id"": ""40"",
                            ""type"": ""type_b""
                        }
                    ]
                }
            }
        }
    ],
    ""included"": [
        {
            ""id"": ""21"",
            ""type"": ""type_a"",
            ""attributes"": {
                ""updated_at"": ""2018-11-19 18:07:30 -0200"",
                ""url"": ""https://...""
            }
        },
        {
            ""id"": ""40"",
            ""type"": ""type_b"",
            ""attributes"": {
                ""name"": """",
                ""address"": """"
            }
        }
    ]
}
``` 

Given this format where ""included"" is an array of multiple types, how can I solve this parse? =||= You would have to interpret those at a higher layer of abstraction than
Gson which is only concerned with the raw conversion to the JSON format.

On Tue, Nov 20, 2018, 7:22 PM Taynã Bonaldo <notifications@github.com wrote:

> Thank you so much @JakeWharton <https://github.com/JakeWharton>!
>
> But can I handle an array of ""included"" objects that represents all type
> of relations in JSON API specification? ie.:
>
> { ""data"": [ { ""id"": ""2"", ""type"": ""my_type"", ""attributes"": { ""a"": """", ""b"":
> 1 }, ""relationships"": { ""type_as"": { ""data"": { ""id"": ""21"", ""type"": ""type_a""
> } } ""type_bs"": { ""data"": [ { ""id"": ""40"", ""type"": ""type_b"" } ] } } } ],
> ""included"": [ { ""id"": ""21"", ""type"": ""type_a"", ""attributes"": { ""updated_at"":
> ""2018-11-19 18:07:30 -0200"", ""url"": ""https://..."" } }, { ""id"": ""40"",
> ""type"": ""type_b"", ""attributes"": { ""name"": """", ""address"": """" } } ] }
>
> Given this format where ""included"" is an array of multiple types, how can
> I solve this parse?
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1431#issuecomment-440479005>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEXUW0J209GZF1k_bYWSP3qWn1H-xks5uxJzOgaJpZM4YsJkD>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1433fromJson() ObjectId bugvaliaVal900011/23/18, 10:36:29 AM"I've no idea why but somehow the gson.fromJson() method changes the ObjectId... I even have tried multiple versions of GSON still the same bug.

side note : Using MongoDB (mlab)
![image](https://user-images.githubusercontent.com/30831748/48937684-322a9700-ef0f-11e8-9a8c-0439dddb6c8d.png)

![image](https://user-images.githubusercontent.com/30831748/48937417-428e4200-ef0e-11e8-9ac7-88032dc11e87.png)

Id changes from : 

5bf7368be3ee7f3bd05c98d1
 to 
5bf73bdce3ee7f2678544c2a


`public class Car {

    private ObjectId _id;
    private String name, description;
    private int hp, year;

    public Car(String name, String description, int hp, int year) {
        this.name = name;
        this.description = description;
        this.hp = hp;
        this.year = year;
    }

    public Car(ObjectId _id, String name, String description, int hp, int year) {
        this._id = _id;
        this.name = name;
        this.description = description;
        this.hp = hp;
        this.year = year;
    }

    public ObjectId getId() {
        return _id;
    }

    public void setId(ObjectId _id) {
        this._id = _id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getHp() {
        return hp;
    }

    public void setHp(int hp) {
        this.hp = hp;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    @Override
    public String toString() {
        return """" + name + "", "" + year + "", "" + hp + "", "" + description;  
    }

}`""Found out you need to write an ""Adapter"" because GSON doesn't support that.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1434Bug in JsonDeserializer?Tracy Snelltjsnell11/29/18, 08:24:37 PM"When you have a list<someBaseClass> with a custom deserializer it works fine except when you have nested cases. Example attached. Used version 2.8.5

```

import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonDeserializationContext
import com.google.gson.JsonDeserializer
import com.google.gson.JsonElement
import com.google.gson.JsonParseException
import java.lang.reflect.Type


open class BaseClass {
    var myType: String? = null
    var myList = mutableListOf<BaseClass>()
    var dep: BaseClass? = null
}

open class ClassA : BaseClass() {
    val astuff: String? = null
}

open class ClassB : BaseClass() {
    val bstuff: String? = null
}

open class Resources {
    val myList = mutableListOf<BaseClass>()
}


val json1 = """"""
{
  ""myList"": [
    {
      ""myType"": ""ClassA"",
      ""astuff"": ""a stuff""
    },
    {
      ""myType"" : ""ClassB"",
      ""bstuff"" : ""things b needs""
    }
  ]
}
"""""".trimIndent()

val json2 = """"""
          {
            ""myType"" : ""ClassA"",
            ""astuff"" : ""a stuff"",
            ""myList"" : [
              {
                ""myType"" : ""ClassB"",
                ""bstuff"" : ""things b needs""
              }
            ]
          }
"""""".trimIndent()

val json3 = """"""
          {
            ""myType"" : ""ClassA"",
            ""astuff"" : ""a stuff"",
            ""dep"" :               {
                ""myType"" : ""ClassB"",
                ""bstuff"" : ""things b needs""
              },
            ""myList"" : [
              {
                ""myType"" : ""ClassB"",
                ""bstuff"" : ""things b needs""
              }
            ]
          }
"""""".trimIndent()


fun main(args: Array<String>) {

    val gson = getGson()

    // working example
    val test1 = gson.fromJson(json1, Resources::class.java)
    if (!(test1.myList[0] is ClassA)) {
        println(""Test1 Error: first array entry should be ClassA but is ${test1.myList[0]::class.java}"")
    }

    if (!(test1.myList[1] is ClassB)) {
        println(""Test1 Error: first array entry should be ClassB but is ${test1.myList[1]::class.java}"")
    }

    // broken examples
    val test2 = gson.fromJson(json2, BaseClass::class.java)
    if (!(test2.myList[0] is ClassA)) {
        println(""Test3 Error: first array entry should be ClassA but is ${test2.myList[0]::class.java}"")
    }

    val test3 = gson.fromJson(json3, BaseClass::class.java)

}

fun getGson(): Gson {
    return GsonBuilder()
            .registerTypeAdapter(BaseClass::class.java, ClassDeserializerAdapter1<BaseClass>(""myType""))
            .create()
}

class ClassDeserializerAdapter1<T> internal constructor(private val typeName: String) : JsonDeserializer<T> {
    private val gson: Gson

    init {
        gson = GsonBuilder()
                .create()
    }

    @Throws(JsonParseException::class)
    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): T {
        val jsonObject = json.asJsonObject
        val typeElement = jsonObject.get(typeName)
        val method = typeElement.asString
        val classType = Class.forName(""com.juicelabs.fhir.base.$method"") as Class<out T>
        return gson.fromJson(json, classType)
    }
}
```"Pending writeup on my learnings and the right way to do this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1441The JavaDoc is now more accurate about the type adapter serialization and deserializationLyubomyr Shaydarivlyubomyr-shaydariv10/28/19, 11:11:16 PMThis should fix `RuntimeTypeAdapterFactory` JavaDoc missing information for proper serialization and deserialization, originally raised in #1440.NaNThe JavaDoc is now more accurate about the type adapter serialization and deserializationLyubomyr Shaydarivlyubomyr-shaydariv10/28/19, 11:11:16 PMThis should fix `RuntimeTypeAdapterFactory` JavaDoc missing information for proper serialization and deserialization, originally raised in #1440.NaNLyubomyr Shaydariv12/08/18, 11:42:38 AMThe JavaDoc is now more accurate about the type adapter serialization and deserialization1
1442Add j2objc annotations to fix memory leak in transpiled objective-c iousin12/17/18, 06:34:21 AM"The issue has been discussed on j2objc page here, j2objc team recommended to create a PR to be merged into mainstream gson codebase. 
https://github.com/google/j2objc/issues/921

The guava project already has j2objc annotations. 
These annotations will fix memory leak related to LinkedTreeMap when transpiled to objective-c code using j2objc. 

Thanks.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

<!-- need_author_cla --> =||= We don't accept any dependency on external jars =||= @inder123  I just wonder if this kind memory leak is fixed in latest Gson version? I also meet the leak in 2.8.0 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1445Parsing HATEOAS HAL has an issue.Deleted userghost12/12/18, 10:30:11 AMI am using Swagger CodeGen on rest-assured which is using Gson for deserializing JSON to DTOs, but the Gson has an issue to parse this JSON because of HAL format (_links).You haven't provided any information about what the issue is or how we can reproduce it. Without this there's no action to take as it's not clear whether there's an actual problem or whether the library is just being used incorrectly. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1454Implemented Fixes suggested by #1432Paul Kassianikpaulkass10/04/19, 06:29:14 PMImplemented some fixes suggested by @fridrich in issue #1432."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it. =||= CLAs look good, thanks!

<!-- ok --> =||= "Implemented Fixes suggested by #1432Paul Kassianikpaulkass10/04/19, 06:29:14 PMImplemented some fixes suggested by @fridrich in issue #1432.NaNPaul Kassianik01/11/19, 12:49:50 AMFixed tests for java 111
1457GSON deserialization breaks java.util.regex.PatternСергей Цыпановstsypanov01/21/19, 11:27:58 AM"1. Checkout https://github.com/stsypanov/gson_bug_example
2. Run `GsonTest` (test is green)
3. Switch JDK to 11 (jdk-11.0.1)
4. Run `GsonTest` (test is red)

I think the reason here is usage of Unsafe in `UnsafeAllocator`""Gson does not have any special support for the `Pattern` class. You should not serialize and deserialize classes you don't control having no proper type adapters. In general, you should always have something like this for such classes:

```java
.registerTypeAdapter(Pattern.class, (JsonSerializer<Pattern>) (pattern, type, context) -> {
	final JsonObject jsonObject = new JsonObject();
	jsonObject.addProperty(""pattern"", pattern.pattern());
	jsonObject.addProperty(""flags"", pattern.flags());
	return jsonObject;
})
.registerTypeAdapter(Pattern.class, (JsonDeserializer<Pattern>) (jsonElement, type, context) -> {
	final JsonObject jsonObject = jsonElement.getAsJsonObject();
	final String pattern = jsonObject.get(""pattern"").getAsString();
	if ( !jsonObject.has(""flags"") ) {
		return Pattern.compile(pattern);
	}
	return Pattern.compile(pattern, jsonObject.get(""flags"").getAsInt());
})
```

Now all test become green and the types you work with are well-controlled. I guess this one can be closed? =||= Indeed, test doesn't fail now, thanks!

However I still wonder why there's a difference between behaviour on different JDKs. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1459"Unable to parse š character (\u009a) from JSON."Jake LeeJakeSteam01/24/19, 04:29:06 PM"Whilst parsing JSON data from NASA's APOD API ([this in particular](https://api.nasa.gov/planetary/apod?date=2019-01-23&api_key=DEMO_KEY)), the following is returned: `""Luk\u00e1\u009a Vesel\u00fd""`.

I would expect this to be parsed as `Lukáš Veselý`, instead `Luká Veselý` comes out. Interestingly, Postman also manages to parse the 2 other characters, but fails on the [\u009a](http://www.fileformat.info/info/unicode/char/9a/index.htm) (š) too.

It's entirely possible this isn't a GSON issue, but the 2nd and 3rd screenshots below *do* imply that.

Postman, Gson parsing, raw string:
![image](https://user-images.githubusercontent.com/12380876/51641158-634e3480-1f5d-11e9-9a96-9b7e71f4dd36.png)""As per the [Unicode Latin-1 supplement](https://www.unicode.org/charts/PDF/U0080.pdf) code point \u009A stands for _Single Character Introducer_ and it is a control character thus having no graphical representation.

The character you are looking for is _LATIN SMALL LETTER S WITH CARON_, code point \u0161 as per the [Latin Extended-A](https://www.unicode.org/charts/PDF/U0100.pdf).

Also tested your text changing the character and it worked without any error. =||= Hmm, so essentially the NASA API is returning the wrong character, or using the wrong unicode definition, and the reference site I listed is too?

I couldn't see a way to change the unicode version GSON uses, so this API's response is unusable without using some third party conversion, right? =||= @JakeSteam 
The demo API call seems to return a wrong character that looks more of a typo. If you decode the ""s with caron"" in your issue title, you'll get `\u0161` that is what you're actually expecting from the response, not `\u009A`. =||= Fair enough, I'll take it up with NASA then! Thanks. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1460Incredibly HUGE bugAntonio Sorrentiniansorre01/29/19, 02:05:35 PM"Gson version 2.8.5.
I think this is so bad and huge and eloquent that no other comment is necessary than showing the code:

import com.google.gson.Gson;

public class Gson_HUGE_Bug
{
 public String fieldOne;
 public String fieldTwo;

 public static void main(String args[])
 {
  Gson_HUGE_Bug workingOk=new Gson_HUGE_Bug();
  workingOk.fieldOne=""ok value one"";
  workingOk.fieldTwo=""ok value two"";
  System.out.println(new Gson().toJson(workingOk));

  Gson_HUGE_Bug notWorkingAtAll=new Gson_HUGE_Bug(){{fieldOne=""so bad value one"";fieldTwo=""so bad value two"";}};
  System.out.println(new Gson().toJson(notWorkingAtAll));

  System.out.println(
   ""Infact notWorkingAtAll.fieldOne=\""""+notWorkingAtAll.fieldOne+
    ""\"" as well notWorkingAtAll.fieldTwo=\""""+notWorkingAtAll.fieldTwo+
    ""\"" and of course notWorkingAtAll is not null at all!"");
 }

 /*
 Expected result:
    {""fieldOne"":""ok value one"",""fieldTwo"":""ok value two""}
    {""fieldOne"":""so bad value one"",""fieldTwo"":""so bad value two""}
    Infact notWorkingAtAll.fieldOne=""so bad value one"" as well notWorkingAtAll.fieldTwo=""so bad value two"" and of course notWorkingAtAll is not null at all!

 What instead it produces:
    {""fieldOne"":""ok value one"",""fieldTwo"":""ok value two""}
    null
    Infact notWorkingAtAll.fieldOne=""so bad value one"" as well notWorkingAtAll.fieldTwo=""so bad value two"" and of course notWorkingAtAll is not null at all!

  */

}""the gson  ingnore Anonymous Class!
please see
com.google.gson.internal.Excluder

```java
private boolean excludeClassChecks(Class<?> clazz) {
      if (version != Excluder.IGNORE_VERSIONS && !isValidVersion(clazz.getAnnotation(Since.class), clazz.getAnnotation(Until.class))) {
          return true;
      }

      if (!serializeInnerClasses && isInnerClass(clazz)) {
          return true;
      }

      if (isAnonymousOrLocal(clazz)) {
          return true;
      }

      return false;
  }
```

@Ansorre  =||= This is working as intended. Gson doesn't support anonymous classes because they cannot be symmetrically deserialized. =||= Thank you all for your replays. :-)  =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1461Deserialize JSON with references $id, $ref from JsonNet C#LucaGabi01/31/19, 03:32:22 PMHow to deserialize json string that contains $ref, $id ? There is no automatic handling of this. You will have to write a layer on top of Gson's deserialization in order to perform linking of JSON references. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1462java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $Ayşenur GökdemirAysenurGokdemir01/31/19, 09:16:48 PM"why am I getting this error ? I'm working on it since two days. Please Help Me !

java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 colum 


public interface BorsaApi {
    @GET(""json/all_prices.json?=1548332164791"")
    Call<List<Example>> getResult();

}

Example.java

public class Example {
    @SerializedName(""altin"")

    public List<BorsaResult> altin=new ArrayList<>();

    public List<BorsaResult> getAltin() {
        return altin;
    }

    public void setAltin(List<BorsaResult> altin) {
        this.altin = altin;
    }
}

OncekiKapanis.java class

public class OncekiKapanis {
    @SerializedName(""alis"")

    public String alis;
    @SerializedName(""satis"")

    public String satis;
    @SerializedName(""tarih"")

    public String tarih;

    public OncekiKapanis(String alis, String satis, String tarih) {
        this.alis = alis;
        this.satis = satis;
        this.tarih = tarih;
    }

    public String getAlis() {
        return alis;
    }

    public void setAlis(String alis) {
        this.alis = alis;
    }

    public String getSatis() {
        return satis;
    }

    public void setSatis(String satis) {
        this.satis = satis;
    }

    public String getTarih() {
        return tarih;
    }

    public void setTarih(String tarih) {
        this.tarih = tarih;
    }
}
public class BorsaResult{
 @SerializedName(""alis"")
    public String alis;
    @SerializedName(""satis"")
    public String satis;
    @SerializedName(""tarih"")

    public String tarih;
    @SerializedName(""onceki_kapanis"")

    public List<OncekiKapanis> onceki_kapanis;


    public BorsaResult(String alis, String satis, String tarih,List<OncekiKapanis> onceki_kapanis) {

        this.alis = alis;
        this.satis = satis;
        this.tarih = tarih;
        this.onceki_kapanis = onceki_kapanis;

        /*onceki_kapanis.alis=o_alis;
        onceki_kapanis.satis=o_satis;
        onceki_kapanis.tarih=o_tarih;*/
    }


    public String getAlis() {
        return alis;
    }

    public void setAlis(String alis) {
        this.alis = alis;
    }

    public String getSatis() {
        return satis;
    }

    public void setSatis(String satis) {
        this.satis = satis;
    }

    public String getTarih() {
        return tarih;
    }

    public void setTarih(String tarih) {
        this.tarih = tarih;
    }

    public List<OncekiKapanis> getOnceki_kapanis() {
        return onceki_kapanis;
    }

    public void setOnceki_kapanis(List<OncekiKapanis> onceki_kapanis) {
        this.onceki_kapanis = onceki_kapanis;
    }
}
FragmentResult .java

public class FragmentResult extends Fragment {
    public static final Object TAG="""";
    LinearLayoutManager layoutManager;
    List<Example> borsaResultList=new ArrayList<>();

    BorsaAdapter borsaAdapter;
    RecyclerView recyclerView;
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
      View view=inflater.inflate(R.layout.fragment_result, container, false);

        recyclerView = view.findViewById(R.id.rv_result);
        layoutManager = new LinearLayoutManager(this.getActivity());

        borsaAdapter = new BorsaAdapter(getActivity(),borsaResultList);


        BorsaApi apiService= ClientApi.getRetrofit().create(BorsaApi.class);
        Call<List<Example>> call=apiService.getResult();
        call.enqueue(new Callback<List<Example>>() {
            @Override
            public void onResponse(Call<List<Example>> call, Response<List<Example>> response) {
                List<Example>models=response.body();
                BorsaAdapter shopAdap = new BorsaAdapter((Example) models, R.layout.fragment_result,getActivity());

                recyclerView.setLayoutManager(layoutManager);
                recyclerView.setHasFixedSize(true);
                recyclerView.setAdapter(shopAdap);

                int x=0;
            }

            @Override
            public void onFailure(Call<List<Example>> call, Throwable t) {
                int x=0;
            }
        });

        return view;
    }}

Adapter class

public class BorsaAdapter extends RecyclerView.Adapter<BorsaAdapter.MyHolder>implements ListAdapter {

    private Context context;
    public List<Example> borsa_result=new ArrayList<Example>();

    public BorsaAdapter(Context context, List<Example> borsa_result) {
        this.context = context;
        this.borsa_result=borsa_result;


    }
    public BorsaAdapter(Example models, int fragment_result, FragmentActivity activity) {
        this.borsa_result= (List<Example>) models;
    }


    @NonNull
    @Override
    public BorsaAdapter.MyHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view= LayoutInflater.from(parent.getContext()).inflate(R.layout.result_recyclerview_items,null,false);
        view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT,RecyclerView.LayoutParams.WRAP_CONTENT));
        MyHolder myHolder=new MyHolder(view);
        return myHolder;
    }

    @Override
    public void onBindViewHolder(@NonNull BorsaAdapter.MyHolder holder, int position) {
                holder.onceki_kapanis_tarih.setText((CharSequence) borsa_result.get(position).getAltin());
    }
    public static  class  MyHolder extends  RecyclerView.ViewHolder{
        TextView tv_altin,alis,satis,tarih,onceki_kapanis,onceki_kapanis_alis,onceki_kapanis_satis,onceki_kapanis_tarih;

        public MyHolder(View itemView) {
            super(itemView);
            tv_altin=itemView.findViewById(R.id.altin);
            alis=itemView.findViewById(R.id.alis);
            satis=itemView.findViewById(R.id.satis);
            tarih=itemView.findViewById(R.id.tarih);
            onceki_kapanis=itemView.findViewById(R.id.onceki_kapanis);
            onceki_kapanis_alis=itemView.findViewById(R.id.onceki_kapanis_alis);
            onceki_kapanis_satis=itemView.findViewById(R.id.onceki_kapanis_satis);
            onceki_kapanis_tarih=itemView.findViewById(R.id.onceki_kapanis_tarih);

        }
    }
""Your JSON does not match the model you asked Gson to bind. This is fairly common and is a usage question which has been written about a lot on blogs, mailing lists, and StackOverflow. I would suggest you consult StackOverflow questions of similar nature. =||= Thank you for answer.
problem is solved .  =||= You have solved the problem, I need help =||= how did you solve the problem? =||= > problem





 I was explained in my website.
http://aysenurgokdemir.com/2020/03/16/solution-of-the-java-lang-illegalstate-exception/
 =||= thank you =||= > Thank you for answer.
> problem is solved .

how you can solve your problem?
please answer me because i have a same problem. =||= I was explained in my website.
http://aysenurgokdemir.com/2020/03/16/solution-of-the-java-lang-illegalstate-exception/ =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1464Update Gson.java documentation to explicitly state behavior for empty stringsMárton Braunzsmb1302/17/19, 08:32:44 AMEmpty strings result in `null` being returned, but this is only stated for `null` strings in the documentation.NaNUpdate Gson.java documentation to explicitly state behavior for empty stringsMárton Braunzsmb1302/17/19, 08:32:44 AMEmpty strings result in `null` being returned, but this is only stated for `null` strings in the documentation.NaNMárton Braun02/04/19, 12:54:51 PMUpdate Gson.java documentation to explicitly state behavior for empty strings1
1465kkirtan22702/05/19, 02:12:04 PM"k

_Originally posted by @kirtan227 in https://github.com/google/github-issue-mover/issues/140#issuecomment-460625342_"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1466Gson cannot handle equals as per documentationmmanna-sapfgl02/06/19, 08:50:54 PM"In GSON documentation, the following is mentioned

https://sites.google.com/site/gson/gson-user-guide#TOC-Object-

> **Collections Examples**
> Gson gson = new Gson();
> Collection<Integer> ints = Lists.immutableList(1,2,3,4,5);
> 
> (Serialization)
> String json = gson.toJson(ints); ==> json is [1,2,3,4,5]
> 
> (Deserialization)
> Type collectionType = new TypeToken<Collection<Integer>>(){}.getType();
> Collection<Integer> ints2 = gson.fromJson(json, collectionType);
> **ints2 is same as ints**

but this is not correct. If you do a JUnit test and do assertEquals(ints, ints2) it always fails. 
Please provide a fix or update documentation to suggest that a ""Deep"" equals should be tested when dealing with nested/custom/primitive inner types in a List."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1468Updated readme with dynamic versioningTalha Hasan Ziatalhahasanzia02/07/19, 01:48:09 PM"Hi,

As many libraries do this, I updated readme with dynamic versioning, with links to release versions, this make sure users check latest release version when using gson in their project.

Previously:

```gradle
dependencies {
  implementation 'com.google.code.gson:gson:2.8.5'	 
}
```

Now,

See [releases](https://github.com/google/gson/releases) for latest version.

```gradle
dependencies {
  implementation 'com.google.code.gson:gson:2.x.x'	 
}
```


Similarly Maven dependency,

Previously,

```
<dependency>
  <groupId>com.google.code.gson</groupId>
  <artifactId>gson</artifactId>
  <version>2.8.5</version>
</dependency>
```

Now,
```
<dependency>
  <groupId>com.google.code.gson</groupId>
  <artifactId>gson</artifactId>
  <version>2.x.x</version>
</dependency>
```""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

<!-- ok --> =||= I find the previous version,

```xml
<dependency>
  <groupId>com.google.code.gson</groupId>
  <artifactId>gson</artifactId>
  <version>2.8.5</version>
</dependency>
```

much easier to copy/paste. :smiley:  =||= > I find the previous version,
> 
> ```
> <dependency>
>   <groupId>com.google.code.gson</groupId>
>   <artifactId>gson</artifactId>
>   <version>2.8.5</version>
> </dependency>
> ```
> 
> much easier to copy/paste. 😃

It is just a matter of opinion, lets see what general public has to say, it is easier yes, what if in some cases update is always good? like a critical bug fix, so this approach will allow user to always check for the latest version :-) =||= Part of the release process is to update this so it doesn't get out of date. We too prefer the ability to directly copy/paste. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1469"java.lang.NumberFormatException: For input string: ""11-ea"""Reza Farrahi Mimriss04/04/21, 11:18:00 PM"It seems that the fix for ""9-Debian"" Java version does not work for ""11-ea"" like string:
```
Caused by: java.lang.NumberFormatException: For input string: ""11-ea""
    at java.lang.NumberFormatException.forInputString (NumberFormatException.java:65)
    at java.lang.Integer.parseInt (Integer.java:652)
    at java.lang.Integer.parseInt (Integer.java:770)
    at com.google.gson.util.VersionUtils.determineMajorJavaVersion (VersionUtils.java:28)
    at com.google.gson.util.VersionUtils.<clinit> (VersionUtils.java:24)
    at com.google.gson.internal.reflect.ReflectionAccessor.<clinit> (ReflectionAccessor.java:36)
    at com.google.gson.internal.ConstructorConstructor.<init> (ConstructorConstructor.java:51)
    at com.google.gson.Gson.<init> (Gson.java:205)
    at com.google.gson.Gson.<init> (Gson.java:185)
    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.listInstalledPlugins (ScannerPluginInstaller.java:108)
    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.loadPlugins (ScannerPluginInstaller.java:78)
    at org.sonar.scanner.bootstrap.ScannerPluginInstaller.installRemotes (ScannerPluginInstaller.java:62)
    at org.sonar.scanner.bootstrap.ScannerPluginRepository.start (ScannerPluginRepository.java:59
```

It seems to be called from here via `Gson().fromJson`:
https://github.com/SonarSource/sonarqube/blob/138171d657c57fe015c4dcc4be996973f87f5365/sonar-scanner-engine/src/main/java/org/sonar/scanner/bootstrap/ScannerPluginInstaller.java#L103

Thanks

[1] - Fix for ""9-Debian"" Java version string: https://github.com/google/gson/pull/1311/files
[2] - [Report of ""9-Debian"" Java version issue: ](https://github.com/google/gson/issues/1310)"Ugh. We should just create a multi-release jar so that we can use `Runtime.Version` on 9+. =||= Hi, is there any way to work around the issue until a patch is available ? =||= Ok, Updating to 2.8.5 solved the issue for me. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1471Added Adapter Layering FeaturePaul Kassianikpaulkass02/20/19, 01:25:19 AM"**Why this is useful:** Suppose you have a class with a lot of fields. Most of them can be easily interpreted by the Gson reader, possibly with a field naming strategy. But some have such weird names that the field naming strategy might not necessarily properly match them to the target properties. Especially if the JSON comes from a third party (like an API), the best course of action as of today is to create your own `TypeAdapter` and manually map *all* of the fields, including the ones that GSON could map on it's own. This is why I added the ""Fill-In"" feature. The `registerTypeAdapterWithFillIn` method allows you to manually define only the fields that Gson can not map properly, while not having to map trivial mappings.

**Implementation Details:** The way to register a custom adapter with Fill-in is through the `GsonBuilder#registerTypeAdapterWithFillIn` method. This method wraps the adapter into a constructor object that is then passed to an instance of the `ReflectiveTypeAdapterFactory.Adapter` class. In other words, when the `read` method is called on a `ReflectiveTypeAdapterFactory.Adapter` instance, the `ObjectContstructor` object calls the custom adapter and generates an instance of the target class whose fields are written to or overwritten (see the Conditions section).

When calling the `create` method on the `ReflectiveTypeAdapterFactory` responsible for producing a fill-in adapter, it will only return the adapter when the target type is or is a subclass of the desired target class. This is unlike the usual `ReflectiveTypeAdapterFactory` instances which serve to create a catch-all type adapter for non-standard classes.

In order to support the construction of instances while reading from the input `JsonReader`, the `InstanceCreator` and `ObjectConstructor` have methods that accept a `JsonReader` object. If not overridden by the implementation, they default to the normal `construct` method (for backwards compatibility). 

I wrote some tests in the `test/.../gson/internal/bind/LayeredAdapterTest.java` class to demonstrate and test some common use cases that I thought of for this feature.

**Notes:** 
* The outside adapter field will overwrite any field values previously written to in the instance returned by the user-defined Adapter. To avoid this, add the `@Expose` annotation to the fields that you want to be protected from overwriting. 
* Due to the use of `default` methods in interfaces, this only supports java versions of 8+, and **will fail the travis-ci check**. I would really appreciate if someone pointed out a way to achieve the same thing in a backwards-compatible way without relying on Java 8 features. Also, if there is going to be a multi-release jar as suggested in #1469, this can go in the java 8+ jar."Java 6 compatibility fixed in #1473  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1472Adapt gson/gson/README to match with gson/README.mdLorenz NickelLorenzNickel03/03/19, 07:28:01 PMAdapt [README](https://github.com/google/gson/blob/master/gson/README) to match exactly with the beginning of [README.md](https://github.com/google/gson/blob/master/README.md)NaNAdapt gson/gson/README to match with gson/README.mdLorenz NickelLorenzNickel03/03/19, 07:28:01 PMAdapt [README](https://github.com/google/gson/blob/master/gson/README) to match exactly with the beginning of [README.md](https://github.com/google/gson/blob/master/README.md)NaNBlockLab02/19/19, 10:53:23 PMAdapt gson/gson/README to match with gson/README.md1
1474Code cleanup (Removed spaces)Lorenz NickelLorenzNickel03/03/19, 07:18:07 PMI removed one space in many comments, where double spaces were used improperly, unified comments and removed spaces in code where they were more confusing than helpful.NaNCode cleanup (Removed spaces)Lorenz NickelLorenzNickel03/03/19, 07:18:07 PMI removed one space in many comments, where double spaces were used improperly, unified comments and removed spaces in code where they were more confusing than helpful.NaNBlockLab02/21/19, 12:49:02 AMRemoved spaces in code1
1476Gson Nested classes are null while using proguardKushaal Singlakksingla09/02/21, 05:12:18 PM"Warning: class 'com.google.gson.internal.bind.ReflectiveTypeAdapterFactory' is calling Class.getDeclaredFields on class.

After enabling proguard found some issues mentioned below:
1. Nested static classes are null.
2. List of a custom object in a class is null"What is Gson supposed to do here? This sounds like you've failed to configure ProGuard correctly for use of Gson. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1477java.lang.IllegalStateException: Expected a string but was BEGIN_OBJECT at line 1 column 2 path $NodeGIS02/27/19, 01:31:27 PM"code is:
`
 String userInfoStr = new Gson().fromJson(""{\""name\"":\""admin\""}"", String.class);
`"This is not a bug in the library. Your JSON contains an object but you asked it to deserialize as a string. There are many questions on StackOverflow which explain this error. I would also recommend going through the Gson documentation about binding to objects which talks about how you create objects which represent JSON. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1478Failed to invoke public com.amazonaws.services.s3.model.lifecycle.LifecycleFilterPredicate() with no argsdharmeshmehta03/02/19, 04:11:46 PM"I am trying to apply Lifecycle Configurations on S3 bucket. Trying to apply using following JSON:

	[{
	""id"": ""tmpdelete"",
	""status"": ""Enabled"",
	""filter"": {
		""predicate"": {
			""prefix"": ""tmp""
		}
	},
	""transitions"": [{
		""days"": ""1"",
		""storageClass"": ""GLACIER""
	}],
	""noncurrentVersionTransitions"": [{
		""days"": ""1"",
		""storageClass"": ""GLACIER""
	}],
	""expirationInDays"": ""2"",
	""noncurrentVersionExpirationInDays"": ""2"",
	""expiredObjectDeleteMarker"": ""true""
	}]

When i am trying to map it with Rule[].class it is not working. I am using following code:

    String json = above_json;
    Rule[] rules = null;

    Gson gson = new GsonBuilder().serializeNulls().excludeFieldsWithModifiers(Modifier.FINAL,
				Modifier.TRANSIENT, Modifier.STATIC, Modifier.ABSTRACT).create();
    rules = gson.fromJson(json, Rule[].class);

    try {

        amazonS3.setBucketLifecycleConfiguration(bucketName, new BucketLifecycleConfiguration().withRules(rules));
    } catch (Exception e) {
        throw e;
    }

LifecycleFilterPredicate is an abstract class which implements Serializable and it doesn't have no-args contructor

How to solve this problem.?""You need to write an instance creator which knows how to create instances of this abstract class: https://github.com/google/gson/blob/master/UserGuide.md#writing-an-instance-creator =||= I got the solution I was pointing to parent class i should have point the class which doesn't have no-arg. Only change is Gson gson = new GsonBuilder().registerTypeAdapter(LifecycleFilterPredicate.class, new RuleInstanceCreator()).create();  But now  I have one problem that LifecycleFilterPredicate is extended by Three class the one which i want to use is LifecyclePrefixPredicate in that i have one constructor with String argument as prefix. So from json that prefix value must be read. But it my RuleInstanceCreator is making it empty value. So what i did is i harded the value in it like this: 


    public class RuleInstanceCreator implements InstanceCreator<LifecycleFilterPredicate> {

	@Override
	public LifecycleFilterPredicate createInstance(Type type) {

		return new LifecycleFilterPredicate() {

			private static final long serialVersionUID = 1L;

			@Override
			public void accept(LifecyclePredicateVisitor lifecyclePredicateVisitor) {
				lifecyclePredicateVisitor.visit(new LifecyclePrefixPredicate(""temp""));
			}

		};
	}

}


So how to have dynamic values in prefix from json (""filter"": {""predicate"": {""prefix"": ""tmp""}}) because this value can be different
 =||= Found solution of that too. Used TypeAdapter instead of InstanceCreator =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1479Arraycopy optimizationDegubiDegubi03/05/19, 05:12:34 PM"Optimize array copies inside JsonTreeReader, JsonReader and JsonWriter. Faster & nicer.

Benchmark code: https://pastebin.com/80ztCuVx
Benchmark run: https://pastebin.com/RwfGAmnh"Squashed, fixed whitespace, and merged as bac26b8e429150d4cbf807e8692f207b7ce7d40d. Thanks! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1480App crashes as Json element is empty String (“”) and not ObjectAvinash Kumaravikr2203/06/19, 05:27:44 AM"I am working on an android project and using RxAndroid, Retrofit to make API call and retrieve json. The json looks something like following :

```
{
    ""result"": [
        {
            ""parent"": ""jhasj"",
            ""u_deviation"": ""skasks"",
            ""caused_by"": ""ksks"",
            ""u_owner_mi"": {
                ""link"": ""https://gddhdd.service-now.com/api/now/v1/table/sys_user/ghtytu"",
                ""value"": ""ghtytu""
            },
            ""impact"": """",  
}
]
}
```

I am using gson to parse the Json. The problem is ""u_owner_mi"" sometimes reruns empty string """" when there is no value assigned to it. This is making my app crash as I am expecting an object here. I get the following error : Expected BEGIN_OBJECT but was STRING""Please ask this question on StackOverflow with the 'gson' tag so that the answer helps future travelers looking for similar solutions.

This basically requires registering a type adapter factory for all object types which wraps the built-in type adapter for that type, checks for an empty string to replace with null, or else delegates to the built-in adapter. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1481Deal with UTF-8 BOMFranklin YuFranklinYu03/24/19, 10:41:01 PM"I see that currently BOM (Byte Order Mark) for UTF-16 is dealt with properly:

https://github.com/google/gson/blob/bac26b8e429150d4cbf807e8692f207b7ce7d40d/gson/src/main/java/com/google/gson/stream/JsonReader.java#L1294-L1299

It would be awesome if BOM for UTF-8 (`EF BB BF`) is also dealt with. Currently Gson cannot decode JSON with UTF-8 BOM.""Send us a PR? =||= Gson really shouldn't deal with BOMs because it deals with characters, not
bytes. That existing BOM handling is some unfortunate old baggage. If
you're consuming bytes you should handle the BOM yourself to determine how
to interpret those bytes as characters before passing to Gson.

Additionally, BOMs are a document-level construct whereas Gson happily
works on subsets of data where you likely will never have a BOM. For
example, OkHttp parses BOMs because a response is a full, byte-based
document which may have a BOM (ignoring the fact that it shouldn't because
of the Content-Type's charset parameter). When you ask for a character
stream or string from an OkHttp response it interprets the bytes according
to the BOM to create the characters. Responses are fundamentally a
document, but I might be using Gson to parse individual lines of a file
where BOMs don't exist.

On Thu, Mar 7, 2019, 3:27 AM inder123 <notifications@github.com wrote:

> Send us a PR?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1481#issuecomment-470431927>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEQ6a3aJMJE5nxYWodA6mQf5bkqDlks5vUM1ogaJpZM4bfefV>
> .
>
 =||= In case anyone's interested, Apache Commons IO includes a `BOMInputStream` which makes it a bit easier to consume/stream a string with a BOM:

https://commons.apache.org/proper/commons-io/javadocs/api-2.6/org/apache/commons/io/input/BOMInputStream.html =||= Closing this since there are already 300+ issues. We’ll try to solve it ourselves. Thanks! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1482Fix wrong reference in Versioning Support exampleTomy JayaTomyJaya03/07/19, 08:26:23 AMJust a minor fix of wrong object being referenced. "
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1482) for more info**.

<!-- need_sender_cla --> =||= I signed it! =||= "Fix wrong reference in Versioning Support exampleTomy JayaTomyJaya03/07/19, 08:26:23 AMJust a minor fix of wrong object being referenced. NaNTomy Jaya03/06/19, 12:03:13 PMFix wrong reference in Versioning Support example1
1484Read json file using Gson in Kotlinanonym2403/07/19, 07:39:37 AM"I'm trying to read a json file (its root object is array) with Gson


    val gson = Gson()
    val reader = JsonReader(FileReader(file))
    val data = gson.fromJson(reader, JsonArray::javaClass)
    // also tried JsonArray::class and JsonArray::class.java

[![enter image description here][1]][1]

  [1]: https://i.stack.imgur.com/JOS3H.png

next constructors are available

    public <T> T fromJson(JsonReader reader, Type typeOfT)

    public <T> T fromJson(Reader json, Class<T> classOfT)"Solved: `val data: JsonArray = gson.fromJson(reader, JsonArray::class.java)` =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1485JsonObject/JsonArray not extendablejredfox03/07/19, 02:58:16 PM"I wanted to expand the library and add more features via my own code like java libraries are suppose to do. I wanted the ability to have methods called add that are overloaded for various objects and convert them to string if not valid before entering them.

I also had reason to add more utility methods like add a static array > converts to json array then puts it into the json object/array many other utilities I had written for another json library but, wanted to use this one as the others appear to be broken.

Cannot do this as the classes are all freaken final. Undo the final on these objects as people want to expand upon them. I realize this would include on adding the ability to change the json classes in the gjson builder for json obj and json arrays. ""These are value types. There's no reason to extend them with inheritance. You can use composition to mix in behavior and/or use a language like Kotlin which allows defining extension methods on types you don't control. =||= Right and some people want to extend this behavior and add their own logic there are lots of reasons to extend class lookup object orientation. Using a wrapper would create a weird json as you also don't have control now what said json looks like this is now unacceptiable behavior.

Either provide alot more methods so people can lazy load this crap or allow this to be extended. Some objects like minecraft resource location you don't always want to append .toString() to them you want it if it's not a valid json object to always be .toString() if it's not null and if it's not a static or dynamic array. =||= Inheritance isn't a good way to accomplish this. You don't extend String
when you want to add functionality around something represented as a
string. You encapsulate and expose a semantic API because it composes.

On Thu, Mar 7, 2019 at 1:14 PM jredfox <notifications@github.com> wrote:

> Right and some people want to extend this behavior and add their own logic
> there are lots of reasons to extend class lookup object orientation. Using
> a wrapper would create a weird json as you also don't have control now what
> said json looks like this is now unacceptiable behavior.
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1485#issuecomment-470635522>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEVOFtCSDdc_oRr3L-lZfwiOqJX3-ks5vUVb8gaJpZM4bisbD>
> .
>
 =||= When you use composition as a wrapper class at least you have control over what the string now looks like. With your gson system there is no no way of controlling what the json string looks like besides using gson.toJSon(wrapperObject) which not looks very ugly especially with inner json objects. =||= If you want to control the JSON representation you should use a normal
object with fields and annotate it with @JsonAdapter pointing at a
TypeAdapter, TypeAdapter.Factory, or JsonSerializer

On Thu, Mar 7, 2019 at 1:20 PM jredfox <notifications@github.com> wrote:

> When you use composition as a wrapper class at least you have control over
> what the string now looks like. With your gson system there is no no way of
> controlling what the json string looks like besides using
> gson.toJSon(wrapperObject())
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1485#issuecomment-470637559>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEER7fndtjD2HcWnQmlrosnr_itzxrks5vUVhfgaJpZM4bisbD>
> .
>
 =||= how about a pr directly to the json object that adds lazy methods for modern versions? And for minecraft and older gson versions I simply do what you said above?

 I will have to look into controlling the output of said json as gson is the only thing that seems to work out there fully with pretty print and parsing.

Thank you you have been helpful.  =||= Possibly. You haven't explained what's missing in any detail yet.

On Thu, Mar 7, 2019, 1:26 PM jredfox <notifications@github.com wrote:

> how about a pr directly to the json object that adds lazy methods for
> modern versions? And for minecraft and older gson versions I simply do what
> you said above?
>
> I will have to look into controlling the output of said json as gson is
> the only thing that seems to work out there fully with pretty print and
> parsing.
>
> Thank you you have been helpful.
>
> —
> You are receiving this because you modified the open/close state.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1485#issuecomment-470639780>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEERMVv1C4C01BxjcL-WNMW-kMKKOmks5vUVnmgaJpZM4bisbD>
> .
>
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1487Optimize UnsafeReflectionAccessor with MethodHandlesDegubiDegubi03/17/19, 11:14:43 PM"Replace reflection invocation with MethodHandles. Avoids boxing, allows better inlining. Afaik all of the MethodHandle methods used in the code are available since java 7. Needs more investigating. Code may need formatting.

Benchmark Code: https://pastebin.com/cqPTUc7i
JMH Output: https://pastebin.com/RcyZ3C05"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1488Remove object parameterized methods in JsonObject & JsonPrimitiveDegubiDegubi03/11/19, 02:55:45 PM"-Refactor JsonPrimitive.value to be final
-Remove JsonPrimitive object parameterized constructor
-Remove some unnecessary helper methods"There was missing test coverage around null which this regresses. Tests added in a817604a417349af15df0daf1589319282565f22 and I've manually merged this as 8bf2949c2934cf9a168df24d0d2a29c702556a91 with a necessary fix to retain behavior. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1490Add Json Bodyhandlers for new Http Client (Java 11)DegubiDegubi05/15/19, 08:21:39 AM"-Add class for creating custom Json parsing BodyHandlers for the new HttpClient added in Java11.
-Only the 5 static methods are public, everything else in the class is implementation detail.
-At the moment everybody needs to create a class like this, or use BodyHandlers.ofString() as a bodyhandler to then parse it.

Example code: https://pastebin.com/ZeHGdkwL""Closing this, solvable with a simple method:
```
public static BodyHandler<JsonObject> ofJsonObject(){
		return info -> BodySubscribers.mapping(BodySubscribers.ofString(StandardCharsets.ISO_8859_1), data -> parser.parse(data).getAsJsonObject());
	}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1491proguardZaaachzaaach03/14/19, 07:34:59 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1492Remove getter in Gson exposing internal classDegubiDegubi03/27/19, 09:43:09 PM"-Remove getter for Excluder. Excluder is an internal class, it should not get returned to user code.
-Move DefaultDateTypeAdapter into ...internal/bind package.
-Presize factories list in Gson constructor
-Make the last 2 private TypeAdapter factories static in Gson class
-Refactor Gson toString
-Fix tests for changes"Closing this, might split into smaller requests. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1494SerializedName annotation workaround for obfuscated enums by ProGuardYOUNG HO CHA (aka ganachoco)ganadist03/22/19, 08:30:31 AM"SerializedName annotation cannot be applied on enums when obfuscated by
proguard.
Because EnumTypeAdapter cannot find obfuscated enum constant field
with its name.
So, EnumTypeAdapter should load annotation from DeclaredFields, not EnumConstants""We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1494) for more info**.

<!-- need_author_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1495Make EnumTypeAdapter friendly with obfuscationYOUNG HO CHA (aka ganachoco)ganadist08/04/21, 01:58:15 PM"When enum value was obfuscated by proguard, EnumTypeAdapter raise NoSuchFieldException, even if apply SerializedName annotation.
Because EnumTypeAdapter cannot find obfuscated enum constant field with its name.
But without this workaround, there is no way to obfuscate enum name.""Test case? =||= I tried to integrate proguard obfuscation on testcase like this.

https://github.com/ganadist/gson/commit/251ec476aa49fbb4653b164c67d22e17445625c4

And intent of this mvn rule are this order.
* copy-resources (pre-obfuscate-class)
* proguard (default)
* copy-resources (post-obfuscate-class)

But order of plugin execution does not work as intended.
* copy-resources (pre-obfuscate-class)
* copy-resources (post-obfuscate-class)
* proguard (default)

Can I get any idea? =||= You don't need to integrate ProGuard. Just specify a different name and
ensure it's honored in the JSON output.
On Fri, Mar 22, 2019 at 3:37 PM YOUNG HO CHA (aka ganachoco) <
notifications@github.com> wrote:

> I tried to integrate proguard obfuscation on testcase like this.
>
> ganadist@251ec47
> <https://github.com/ganadist/gson/commit/251ec476aa49fbb4653b164c67d22e17445625c4>
>
> And intent of this mvn rule are this order.
>
>    - copy-resources (pre-obfuscate-class)
>    - proguard (default)
>    - copy-resources (post-obfuscate-class)
>
> But order of plugin execution does not work as intended.
>
>    - copy-resources (pre-obfuscate-class)
>    - copy-resources (post-obfuscate-class)
>    - proguard (default)
>
> Can I get any idea?
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1495#issuecomment-475754232>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEabvLIMEqbJOJAtqlKXYhGQvUzj4ks5vZTEVgaJpZM4cDGDK>
> .
>
 =||= > Just specify a different name and ensure it's honored in the JSON output.

Gson has already [com.google.gson.functional.testEnumCaseMapping()](https://github.com/google/gson/blob/master/gson/src/test/java/com/google/gson/functional/EnumTest.java#L147) testcase.

 =||= I updated first conversation comment of this PR. because it could be misleading.
 =||= I ran into this problem as well. This is a good fix. Let's add a testcase. =||= To verify this change, enum class in testcase must be obfuscated by proguard.
And I updated testcase on https://github.com/ganadist/gson/commit/1b65e3aae9f549c7a6adaf4dc533263cb7e1be4c , added to check enum class is obfuscated.

But it still has a problem to integrate proguard. :( =||= Proguard integration on Maven testcase is pretty dirty, but.
```
Running com.google.gson.functional.EnumWithObfuscatedTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
```

``` 
$ cat gson/target/proguard_map.txt
com.google.gson.functional.EnumWithObfuscatedTest -> com.google.gson.functional.EnumWithObfuscatedTest:
    com.google.gson.Gson gson -> a
    void <init>() -> <init>
    void setUp() -> setUp
    void testEnumClassWithObfuscated() -> testEnumClassWithObfuscated
com.google.gson.functional.EnumWithObfuscatedTest$Gender -> com.google.gson.functional.EnumWithObfuscatedTest$Gender:
    com.google.gson.functional.EnumWithObfuscatedTest$Gender MALE -> a
    com.google.gson.functional.EnumWithObfuscatedTest$Gender FEMALE -> b
    com.google.gson.functional.EnumWithObfuscatedTest$Gender[] $VALUES -> c
    com.google.gson.functional.EnumWithObfuscatedTest$Gender[] values() -> values
    com.google.gson.functional.EnumWithObfuscatedTest$Gender valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
```


 =||= This pull request would fix #924 and #1776 =||= "Make EnumTypeAdapter friendly with obfuscationYOUNG HO CHA (aka ganachoco)ganadist08/04/21, 01:58:15 PM"When enum value was obfuscated by proguard, EnumTypeAdapter raise NoSuchFieldException, even if apply SerializedName annotation.
Because EnumTypeAdapter cannot find obfuscated enum constant field with its name.
But without this workaround, there is no way to obfuscate enum name."NaNYOUNG HO CHA08/04/21, 03:30:07 AMFix indentation of EnumWithObfuscatedTest1
1496Include adding operation in a specified indexDaniel Campos Olivaresdacamposol03/22/19, 03:08:18 PMIncludes the adding operation to the List implementation of the JsonArray."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1496) for more info**.

<!-- need_sender_cla --> =||= I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1496) for more info**.

<!-- need_author_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1497Implement add operation into an specified positionDaniel Campos Olivaresdacamposol03/22/19, 03:27:06 PMIncludes the add(index, element) operation to the List implementation for the JsonArray."Tests? =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1497) for more info**.

<!-- need_author_cla --> =||= I will fix the CLA with my two users and I will reopen after. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1498Implement add with index wrapper for JsonElement and primitive typesDaniel Campos Olivaresdacamposol11/08/20, 02:33:56 PM"- Implementation for the add method in an specifies position of the List to the wrapper.
- Unit tests for the different primitives.

Solves: Issue #1486""It might also be good to document the `IndexOutOfBoundsException` these methods can throw.
Note that #1486 also requests `set(int, ...)` overloads apparently which this pull request does not add, though maybe at some point this bloats the API of the class too much. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1499Primitives refactorDegubiDegubi04/15/19, 03:10:00 PM"Refactor & Clean up the Primitives class to use array lookup instead of HashMap lookup. There's no need to use a HashMap for 9 elements.
Benchmark code: https://pastebin.com/cG8w2pyy
Benchmark output: https://pastebin.com/dCKfacCy"I was thinking about that, I will update to use normal if-s instead of array lookup. =||= I think this looks good now. =||= Reformatted, squashed, and merged as 477b3f77e159d15531fd30f41688d4b732a8b042. Thanks! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1500"Make ""requires java.sql"" transitive"DegubiDegubi03/29/19, 04:34:13 PM"Make the ""java.sql"" dependency transitive in the module-info.java file. It's not transitive, so every module that requires the ""gson"" module also needs to explicitly require the ""java.sql"" module. Without requiring it application startups fails with a ""java.lang.NoClassDefFoundError: java/sql/Time"" exception every time."NaN"Make ""requires java.sql"" transitive"DegubiDegubi03/29/19, 04:34:13 PM"Make the ""java.sql"" dependency transitive in the module-info.java file. It's not transitive, so every module that requires the ""gson"" module also needs to explicitly require the ""java.sql"" module. Without requiring it application startups fails with a ""java.lang.NoClassDefFoundError: java/sql/Time"" exception every time."NaNDegubi03/14/19, 10:26:46 AMMake sql module dependency transitive1
1501Removing unnecessary 'final' access modifier from constructorManuel Kollusmanuelkollus03/28/19, 04:22:37 PM"Hello Dear, Google Developers!

I have removed the 'final' access modifier from the constructor because they are not necessary.

Yours sincerely,
Manuel Kollus""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1501) for more info**.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1501) for more info**.

<!-- ok --> =||= "Removing unnecessary 'final' access modifier from constructorManuel Kollusmanuelkollus03/28/19, 04:22:37 PM"Hello Dear, Google Developers!

I have removed the 'final' access modifier from the constructor because they are not necessary.

Yours sincerely,
Manuel Kollus"NaNManuel Kollus03/28/19, 03:47:15 PMRemoving 'final' accessor from constructor1
1502Compatible versionsquzhongrensan03/29/19, 01:04:15 PMWhat is the lowest compatible version of androidAPI 14 =||= Ok, thank you =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1503——漩涡小强coolxiao03/29/19, 01:03:41 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1505Refactor JsonReader's consumeNonExecutePrefix methodDegubiDegubi10/04/19, 08:45:07 PM"- Remove static array in JsonReader.
- Replace loop if-s with 5 explicit if statements, each checking 1 character at a time."NaNRefactor JsonReader's consumeNonExecutePrefix methodDegubiDegubi10/04/19, 08:45:07 PM"- Remove static array in JsonReader.
- Replace loop if-s with 5 explicit if statements, each checking 1 character at a time."NaNDegubi03/31/19, 04:03:33 PMRefactor prefix array & loop logic, use if-s instead1
1507Java 11 LocalDateTime problemcolesico04/05/19, 01:34:31 PM"When deserialize an object with LocalDateTime field an error occurring:

InaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not ""opens java.time"" to module gson
java.lang.RuntimeException: java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not ""opens java.time"" to module gson""I fixed this with custom converter. Close pls. =||= > I fixed this with custom converter. Close pls.

Can you provide the custom code implementation ? 
 =||= > > I fixed this with custom converter. Close pls.
> 
> Can you provide the custom code implementation ?

here is package with code

https://github.com/colesico/colesico-framework/tree/master/modules/colesico-restlet/src/main/java/colesico/framework/restlet/internal/gsonconv

custom handler is registered in GsonConverter.java
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1508Gson 3.0?DegubiDegubi04/17/19, 07:44:13 PMHi, I just wanted to ask if there are any plans to release a new gson version for newer java versions, like 11, removing unsafe usages and providing some api-s for functional paradigms.?"No.

What functional paradigms are you referring to specifically?

On Sun, Apr 7, 2019, 10:38 AM Degubi <notifications@github.com> wrote:

> Hi, I just wanted to ask if there are any plans to release a new gson
> version for newer java versions, like 11, removing unsafe usages and
> providing some api-s for functional paradigms.?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1508>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEQqxmYBguC9oH5G7dLWkaqLfh5nRks5vegLOgaJpZM4cgzJA>
> .
>

On Sun, Apr 7, 2019, 10:38 AM Degubi <notifications@github.com> wrote:

> Hi, I just wanted to ask if there are any plans to release a new gson
> version for newer java versions, like 11, removing unsafe usages and
> providing some api-s for functional paradigms.?
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1508>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEQqxmYBguC9oH5G7dLWkaqLfh5nRks5vegLOgaJpZM4cgzJA>
> .
>
 =||= Sorry I worded it wrong, I meant functional Api-s like stream methods for containers etc. =||= Do you mean for JsonArray and JsonObject?

On Sun, Apr 7, 2019 at 1:33 PM Degubi <notifications@github.com> wrote:

> Sorry I worded it wrong, I meant functional Api-s like stream methods for
> containers etc.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/issues/1508#issuecomment-480612727>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEERFTweN-UVRwMZdGrsAFd_R1mjlYks5veivmgaJpZM4cgzJA>
> .
>
 =||= Yes. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1512Remove package private helpers in JsonElement & JsonPrimitiveDegubiDegubi04/14/19, 09:58:42 PM"-Remove documentation & code for ""getAsBooleanWrapper"" in JsonElement.
-Remove uses of ""getAsBooleanWrapper"" in JsonPrimitive.
-Inline ""getAsBooleanWrapper"" into methods where it was used.

-Not breaking backwards compatibility, because the methods were package private."👍  =||= Remove package private helpers in JsonElement & JsonPrimitiveDegubiDegubi04/14/19, 09:58:42 PM"-Remove documentation & code for ""getAsBooleanWrapper"" in JsonElement.
-Remove uses of ""getAsBooleanWrapper"" in JsonPrimitive.
-Inline ""getAsBooleanWrapper"" into methods where it was used.

-Not breaking backwards compatibility, because the methods were package private."NaNDegubi04/05/19, 02:20:06 PMRemove unnecessary explicit else statement1
1513Add static methods to JsonParserDegubiDegubi04/16/19, 02:46:36 AM"-Add static parser method alternatives to JsonParser.class.
-Mark the default constructor of JsonParser as deprecated.
-Point of this pr is to stop forcing people to create a JsonParser instance per parsing.
-People usually store a JsonParser instance as a global somewhere in their projects, and call the parser methods on that instance. With this pr, all these globals could be removed.
-No deprecations or warnings on parser method calls, single deprecation warning on JsonParser constructor.
-No breaking changes, the old solution works just like before.
-Fixed all tests to use the new static methods.""Merged as c5a3f21fbad3828deba1deb88168e1f76829f807. Thanks! =||= Do we really need new static methods @JakeWharton 
We could instead just provide a singleton instance. 
That would have aligned a little better with the existing design. =||= The existing design was the problem though. These methods are stateless and should never have been instance methods. =||= @JakeWharton Yes, it can be argued that way. A counter-argument will be that making them instance-methods allowed for more testability. 

In general, my philosophy is to NOT try to fix APIs unless they are really bad, or the alternate is substantially better. 

This didn't pass that test. In fact, we have made it worse for the developers as now they will be confused on whether to use static method or the instance method.

Please consider reverting this change. Thanks. =||= More testability how? Static stateless methods are far easier to test than instance methods.

The deprecation makes it clear which to use. =||= Better testability by allowing fake JsonParser, instead of having to mock static methods.

Regarding deprecations: I don't like deprecations much for stylistic changes. If it was a bad bug or broken interface, deprecation is acceptable. 
Gson has had a philosophy of keeping a minimal stable API. Every change has to fight to get in. 
Please help us keep it that way.  =||= Except you never need a fake JsonParser because it's stateless so that argument doesn't work.

Sure I'll help keep it stable. Consider me retired from Gson. =||= @JakeWharton It will be a big loss for Gson if you retire. So, I certainly wouldn't want that. Let's talk off-line. 

I don't have a strong use-case. Best I can come up with is a from a Gson user's perspective:
Think of a user who is writing a Java test for code that uses JsonParser. That user may want to install a different JsonParser than may be transforms input before processing. 
 =||= The type was already final so you couldn't replace its functionality in any way. If you need parsing behavior that can be configured then you would have already needed to build your own abstraction (like `Function<String, JsonElement>`) where one of them can be backed by this type (using `new JsonParser()::parse` or the new `JsonParser::parseString`). =||= @JakeWharton If need be, we can lift the final from the class. That is a much smaller change than new methods. 

Overall, this is a solution in search of a problem.  =||= No! That would be so much worse! Gson isn't your abstraction. It's an
implementation.

This change is how good API's are designed. Stateless wherever possible.

On Tue, Apr 16, 2019, 7:38 PM inder123 <notifications@github.com> wrote:

> @JakeWharton <https://github.com/JakeWharton> If need be, we can lift the
> final from the class. That is a much smaller change than new methods.
>
> Overall, this is a solution in search of a problem.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/google/gson/pull/1513#issuecomment-483882214>, or mute
> the thread
> <https://github.com/notifications/unsubscribe-auth/AAEEEeYGWFMCF7HgM4RXZphIx6vJ50lYks5vhl8QgaJpZM4cw7VH>
> .
>
 =||= @JakeWharton I agree with generally designing APIs to be stateless.
We possibly have an inferior design in JsonParser. However, I remain unconvinced that this feature addition is good. I prefer our APIs to be small and solve a burning problem. This doesn't achieve either. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1515Refactor FieldNamingPolicy.upperCaseFirstLetterDegubiDegubi04/26/19, 10:49:23 PM"-Refactor upperCaseFirstLetter in FieldNamingPolicy.
-Add some comments for special case handling
-Add additional test field to keep 100% coverage (branch in loop for checking to not go out of bounds).
-Shorter, faster. Except for the newly added case. I hope no one writes fields without letters.

Benchmark code: https://pastebin.com/63VJWF03
Benchmark run: https://pastebin.com/su29iePu"NaNRefactor FieldNamingPolicy.upperCaseFirstLetterDegubiDegubi04/26/19, 10:49:23 PM"-Refactor upperCaseFirstLetter in FieldNamingPolicy.
-Add some comments for special case handling
-Add additional test field to keep 100% coverage (branch in loop for checking to not go out of bounds).
-Shorter, faster. Except for the newly added case. I hope no one writes fields without letters.

Benchmark code: https://pastebin.com/63VJWF03
Benchmark run: https://pastebin.com/su29iePu"NaNDegubi04/17/19, 10:05:15 PMRefactor uppercaseFirstLetter, add additional field to test1
1520Update https://google.github.io/gson/apidocs/ or take it downMarcono123405/07/19, 10:23:29 PM"The documentation on https://google.github.io/gson/apidocs/ appears to be outdated (is for 2.6.2 while the current version is 2.8.5). It appears the doc is now hosted on http://www.javadoc.io/doc/com.google.code.gson/gson.

Could you therefore please either update the docs on https://google.github.io/gson/apidocs/, or take it down and remove the links to it from https://github.com/google/gson/blob/master/UserGuide.md

Otherwise it might be confusing for new users."Deleted gh-pages branch to stop publishing github.io javadocs =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1521Change URLs from http to httpsMarcono123405/07/19, 11:27:45 PMNaN"So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the `cla` label to `yes` (if enabled on your project), and then merge this pull request when appropriate.*

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1521) for more info**.

<!-- need_author_consent --> =||= "Change URLs from http to httpsMarcono123405/07/19, 11:27:45 PMNaNNaNinder12305/07/19, 10:48:14 PMChanged github.io to javadoc1
1522Clean up some deprecations & warnings in testsDegubiDegubi10/03/19, 10:49:25 PM"- Add some SuppressWarnings(""unused"") to some fields & classes that are used in reflection code.
- Replace MoreAsserts.assertEquals with Assert.assertArrayEquals.
- Replace primitive wrapper constructor calls with autoboxing or explicit valueOf calls. (Wrapper class constructors deprecated after j9)
- Fix wrong assert imports in MoreAsserts & JsonReaderPathTest.
- Noticed that one of the test methods are failing when using newer java versions in DefaultDateTypeAdapterTest.java, there's already a pr for that: #1454
- Was thinking about refactoring all the test methods to use the Junit4 @Test annotations instead of using the TestCase class"NaNClean up some deprecations & warnings in testsDegubiDegubi10/03/19, 10:49:25 PM"- Add some SuppressWarnings(""unused"") to some fields & classes that are used in reflection code.
- Replace MoreAsserts.assertEquals with Assert.assertArrayEquals.
- Replace primitive wrapper constructor calls with autoboxing or explicit valueOf calls. (Wrapper class constructors deprecated after j9)
- Fix wrong assert imports in MoreAsserts & JsonReaderPathTest.
- Noticed that one of the test methods are failing when using newer java versions in DefaultDateTypeAdapterTest.java, there's already a pr for that: #1454
- Was thinking about refactoring all the test methods to use the Junit4 @Test annotations instead of using the TestCase class"NaNDegubi04/27/19, 06:27:11 PMMinor cleanups in deprecations and other warnings1
1523Android studio 3.4版本问题ydl0009/05/19, 03:58:37 AM"在 最新版 Android studio 3.4 时  使用 推荐的 gradle:3.4.0  
如果 开启 混淆( minifyEnabled true) 那么
 在使用 Gson 时  调用此方法 错误,但是 以前版本gradle 无此问题

    private <T> Map<String, T> parse(String json) {
        Map<String, T> map = null;
        try {
            map = new GsonBuilder().create().fromJson(json, new TypeToken<Map<String, T>>() {
            }.getType());
        } catch (JsonSyntaxException e) {
            e.printStackTrace();
        }
        return map;
        
    }

尝试 修改泛型 为 Object  无问题

Error info:

java.lang.AssertionError: illegal type variable reference  
	at libcore.reflect.TypeVariableImpl.resolve(TypeVariableImpl.java:111)  
	at libcore.reflect.TypeVariableImpl.getGenericDeclaration(TypeVariableImpl.java:125)  
	at libcore.reflect.TypeVariableImpl.hashCode(TypeVariableImpl.java:47)  
	at java.util.Arrays.hashCode(Arrays.java:4074)  
	at Tb$b.hashCode($Gson$Types.java:502)  
	at Md.<init>(TypeToken.java:64)  
	at Pa.<init>(Unknown Source:0)  
	at Qa.a(Unknown Source:8)  
	at ------------hide------------.onViewClicked(RegActivity.java:182)  
	at ja.a(RegActivity_ViewBinding.java:67)  
	at I.onClick(DebouncingOnClickListener.java:18)  
	at android.view.View.performClick(View.java:6266)  
	at android.view.View$PerformClick.run(View.java:24730)  
	at android.os.Handler.handleCallback(Handler.java:793)  
	at android.os.Handler.dispatchMessage(Handler.java:98)  
	at android.os.Looper.loop(Looper.java:176)  
	at android.app.ActivityThread.main(ActivityThread.java:6701)  
	at java.lang.reflect.Method.invoke(Native Method)  
	at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:249)  
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:783)  ""可能是 Android Studio 3.4 默认开启 R8 导致的。可以尝试编辑 gradle.properties 关闭 R8

```
# Disables R8 for Android Library modules only.
android.enableR8.libraries = false
# Disables R8 for all modules.
android.enableR8 = false
``` =||= > 可能是Android Studio 3.4默认开启R8导致的。可以尝试编辑gradle.properties关闭R8
> 
> ```
> # Disables R8 for Android Library modules only.
> android.enableR8.libraries = false
> # Disables R8 for all modules.
> android.enableR8 = false
> ```

谢谢,关闭R8 的确 可以解决了这个问题, =||= 淡腾了，遇到同样的问题，关闭R8重新运行好像也不生效，依然爆这个异常 =||= > 淡腾了，遇到同样的问题，关闭R8重新运行好像也不生效，依然爆这个异常

我是改成Object 了,   
 同时还存在一个问题  内部静态类 也会报错 =||= > > 淡腾了，遇到同样的问题，关闭R8重新运行好像也不生效，依然爆这个异常
> 
> 我是改成Object 了,
> 同时还存在一个问题 内部静态类 也会报错

是的，我也是把T类型去掉了，毕竟即使传了T类型，也解析不到正确的类型，还是需要转换一次 =||= > > > 淡腾了，遇到同样的问题，关闭R8重新运行好像也不生效，依然爆这个异常
> > 
> > 
> > 我是改成Object 了,
> > 同时还存在一个问题 内部静态类 也会报错
> 
> 是的，我也是把T类型去掉了，毕竟即使传了T类型，也解析不到正确的类型，还是需要转换一次


找到原因了,应该 是 gson 混淆配置 问题 

[ Prevent R8 from leaving Data object members always null](https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1524Kotlin inline classes not correctly serialised in HashMapGeert Berkersgeertberkers05/02/19, 12:32:20 PM"I am using the following code:

    inline class Identifier(val value: String)

    data class FormInstance(
        var formId: Identifier,
        var createdAt: Date = Date(),
        var modifiedAt: Date = Date(),
        var fieldValues: HashMap<Identifier, String> = hashMapOf()
    )

And the result is serialized as:

    {
        ""formId"": ""ADDISON_DIARY"",
        ""modifiedAt"": ""2019-05-01T23:44:22.703+0200""
        ""createdAt"": ""2019-04-30T23:44:22.701+0200"",
        ""fieldValues"": {
          ""Identifier(value\u003dfrustration)"": ""VERYMUCH"",
          ""Identifier(value\u003dstress)"": ""NONE"",
          ""Identifier(value\u003dlimitations)"": ""ALITTLE"",
          ""Identifier(value\u003dsleep)"": ""ALOT"",
          ""Identifier(value\u003dnegative_effect_partner)"": ""ALITTLE"",
          ""Identifier(value\u003dsomber_feelings)"": ""VERYLITTLE"",
    }


So the problem is that the Identifier gets it value when its parsed itself, but when parsing the hashmap, it uses the following code: (screenshot line 207)
<img width=""993"" alt=""Screenshot 2019-05-01 23 48 31"" src=""https://user-images.githubusercontent.com/8653723/57044698-afe79100-6c6b-11e9-91f5-7f9bef469449.png"">


I think the code needs to check for inline classes if this is possible, because these are experimental in kotlin 1.3, and the library is written in java.""I don't believe Gson should support Kotlin or its experimental features. It's _probably_ a design problem that the `Map` type adapter uses static `String.valueOf` instead of a key-to-string strategy (and not rejecting non-String-keyed maps), but I would consider implementing a `FormInstance` to `FormInstanceDto` (having a map with true `String` keys, not inline classes) converter and vice versa.
 =||= You can write a TypeAdapter which unwraps the class yourself or just override `toString()` and write out the wrapped property value. Gson won't be seeing updates for Kotlin. =||= Relates to #1722 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1525Json response with hyphenTim Hansenwillc0de4food05/03/19, 10:32:46 PM"I have some JSON that is formatted as such:
```
{
  ""meta"": {
    ""token-type"": ""type"",
    ""access-token"": ""token""
  }
}
```
How can I map the keys with hyphens to variables? I've tried camel casing the variables, concatenating the words (i.e. tokentype), and using underscores. Neither option worked :(
```
data class Meta(var token_type: String, val access_token: String) {

    class Deserializer: ResponseDeserializable<Meta> {
        override fun deserialize(content: String): Meta? = Gson().fromJson(content, Meta::class.java)
    }
}
```

Thanks!""Figured it out. In case anyone else comes across this, I just needed to setup custom field names with @SerializedName()
```
data class Meta(@SerializedName(""token-type"") var token_type: String, @SerializedName(""access-token"") val access_token: String) {

    class Deserializer: ResponseDeserializable<Meta> {
        override fun deserialize(content: String): Meta? = Gson().fromJson(content, Meta::class.java)
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1527update proguard to fix R8 compatibility issueFarid Forootan Shadfaridfor05/07/19, 10:19:00 PM[described here](https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always)"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1527) for more info**.

<!-- need_sender_cla --> =||= I signed it! :) =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1527) for more info**.

<!-- ok --> =||= "update proguard to fix R8 compatibility issueFarid Forootan Shadfaridfor05/07/19, 10:19:00 PM[described here](https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always)NaNFarid Forootan Shad05/05/19, 10:28:29 AM"update proguard to fix R8 compatibility issue

https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md#member-in-a-data-object-is-always"1
1530Update sample ProGuard config to mark fields instead of all members.donaldchai05/08/19, 10:44:18 PM"GSON only needs to reflect based on fields:
https://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152

There's no reason to disallow optimizing methods.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1530) for more info**.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1531Update sample ProGuard config to mark fields instead of all members.donaldchai05/09/19, 06:23:54 AM"GSON only needs to reflect based on fields:
https://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152

There's no reason to disallow optimizing methods."NaNUpdate sample ProGuard config to mark fields instead of all members.donaldchai05/09/19, 06:23:54 AM"GSON only needs to reflect based on fields:
https://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152

There's no reason to disallow optimizing methods."NaNDonald Chai05/08/19, 10:31:47 PM"Update sample ProGuard config to mark fields instead of all members.

GSON only needs to reflect based on fields:
https://github.com/google/gson/blob/4d942db168c593ba86e46e2b26b026ff2b0d1018/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L152

There's no reason to disallow optimizing methods."1
1533Convert key value to lowercaseLucas Alveslucalves07/17/19, 05:56:19 PM"Hello sirs,

I have a problem with convert json key value to lowercase, using gson. I have this json:

`{""CODIBEG"":2704302,""CODESTADO"":27,""CEP"":""57072"",""LOGRADOURO"":""Rua E"",""COMPLEMENTO"":""(Cj Eustáquio Gomes)"",""BAIRRO"":""Eslovênia"",""CIDADE"":""Barreiras"",""ESTADO"":""AL""};`

Using gson, how I convert this key's (ex, to: codibge, codestado, cep, logradouro)?

I develop to Android, using Java."using annotations? =||= I have solved the problem using the RetroFit library. Thanks! @guptaaditya13  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1534Refactor CostructorConstructor to be statelessDegubiDegubi12/03/20, 10:54:59 AM"- Remove ConstructorConstructor.java constructor, make all methods static
- Remove CostructorConstructor field from gson, pass the instanceCreator map to adapters
- Remove ReflectionAccessor fields, no need to store them in fields, avoids loading some classes when not used(Reflection classes)""why is this preferred over existing implementation @Degubi ? =||= > why is this preferred over existing implementation @Degubi ?

- Remove some unnecessary constructors and state.
- Avoid loading some classes.
Nothing special, just to remove some unnecessary code bloat. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1535Add docs to module-info.javaDegubiDegubi10/03/19, 10:51:19 PM- Add javadocs to module-info.javaNaNAdd docs to module-info.javaDegubiDegubi10/03/19, 10:51:19 PM- Add javadocs to module-info.javaNaNDegubi05/26/19, 02:49:54 PMAdd docs to module-info.java1
1538Add IDEA generated classes folder to gitignoreWilliam CollishawWilliamCollishaw10/04/19, 08:37:41 PM"Intellij IDEA generates a few classes during build that should be ignored
<img width=""492"" alt=""Screen Shot 2019-06-02 at 3 04 07 PM"" src=""https://user-images.githubusercontent.com/16943514/58767437-37b10b80-8548-11e9-98b6-7881f7f3a781.png"">"NaNAdd IDEA generated classes folder to gitignoreWilliam CollishawWilliamCollishaw10/04/19, 08:37:41 PM"Intellij IDEA generates a few classes during build that should be ignored
<img width=""492"" alt=""Screen Shot 2019-06-02 at 3 04 07 PM"" src=""https://user-images.githubusercontent.com/16943514/58767437-37b10b80-8548-11e9-98b6-7881f7f3a781.png"">"NaNWilliam Collishaw06/02/19, 09:05:45 PMAdd IDEA generated classes folder to gitignore1
1539Simplify BagOfPrimitives if statementWilliam CollishawWilliamCollishaw06/04/19, 06:03:45 PMRemoves some redundant if statements"So there's good news and bad news.

:thumbsup: The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there.

:confused: The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request.

*Note to project maintainer: This is a terminal state, meaning the `cla/google` commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the `cla` label to `yes` (if enabled on your project), and then merge this pull request when appropriate.*

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1539) for more info**.

<!-- need_author_consent --> =||= "Simplify BagOfPrimitives if statementWilliam CollishawWilliamCollishaw06/04/19, 06:03:45 PMRemoves some redundant if statementsNaNinder12306/04/19, 06:03:26 PMformatting1
1542GSON not deserialising nested JSONAman Pratap Singhapsknight06/13/19, 09:18:42 AM"I'm trying to deserialise a following JSON String:
```json
{
    ""Hello"" : {""S"" : ""World""},
    ""Foo"" : {""S"": ""Bar""}
}
```
to `Map<String, AttributeValue>` where [`AttributeValue`](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/dynamodbv2/model/AttributeValue.html)  is a Class of DynamoDB Model.

I've wrote this code to achieve the same:
```java
Map<String, AttributeValue> outputMap = new Gson().fromJson(jsonString,
                new TypeToken<Map<String, AttributeValue>>() {}.getType());

System.out.println(outputMap);
```
but I'm getting the following as output:
```
{Hello={}, Foo={}}
```

However, when I deserialise the following JSON String:
```json
{
    ""Hello"": {""S"": ""World""}
}
```
using the same code, I get the correct output, i.e. 
```
{Hello={S: World,}}
```

GSON is not deserialising the nested JSON when it has more than one key, value pair.""It turns out that the error was occurring because I was using uppercase ""S"". 

The conversion works fine when using lowecase ""s"" instead. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1546Keep `TypeAdapter`s from being strippedhqzxzwb10/03/19, 10:50:22 PM`TypeAdapter` implementations used in JsonAdapter annotation sometimes are never instantiated explicitly without reflection, causing R8 to strip their instance methods."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here (e.g. `I signed it!`) and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1546) for more info**.

<!-- need_sender_cla --> =||= I signed it! =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1546) for more info**.

<!-- ok --> =||= Do I need to do anything more for this getting reviewed? =||= "Keep `TypeAdapter`s from being strippedhqzxzwb10/03/19, 10:50:22 PM`TypeAdapter` implementations used in JsonAdapter annotation sometimes are never instantiated explicitly without reflection, causing R8 to strip their instance methods.NaNhqzxzwb07/01/19, 04:09:18 AMKeep `TypeAdapter`s from being stripped1
1547After Proguard: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.hvinodvinodvarghese07/09/19, 03:09:23 PM"My app is crashing in the update scenario .below code breaks.

**Gson aGson = new Gson();
String json = sharedPreferences.getString(START_UP_DETAILS, """");
return aGson.fromJson(json, **StartupDetails.class);**


java.lang.RuntimeException: Unable to resume activity : com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.h
        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3672)
        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3712)
        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2949)
        at android.app.ActivityThread.-wrap11(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1630)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:164)
        at android.app.ActivityThread.main(ActivityThread.java:6626)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)
     Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was STRING at line 1 column 90 path $.h
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)
        at com.google.gson.Gson.fromJson(Gson.java:927)
        at com.google.gson.Gson.fromJson(Gson.java:892)
        at com.google.gson.Gson.fromJson(Gson.java:841)

please help."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1549Long class hashcode function returning different hashcode for same values when objects are created using gson serializationKiran Mohankiranmohantp07/15/19, 04:15:04 AM"When  gson is used for serialization  Long fields are returning different hash codes for same values.
This usually happens in java when we use constructor (ex new Long(1l) ) for creating an instance of the Long .
please have a look at this issue.
thanks"Sounds as something impossible :) Could you please provide a test case and I will take a look? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1550[bug] Default properties are null even after initializationDeleted userghost07/08/20, 07:44:38 PM"I made a data class and it has all the objects of json to be serialized and deserialized. I created an additional field called `id` and initialized it as `var id: Int? = 20`. Now when I populate the object with json and get the `data.id`. It is null.

If I use a non nullable property like `var id: Int = 20`, then the value becomes 0. This has to be externally handled by adding a `get()` block to the data class. ""This might be expected behaviour. Gson has [versioning support](https://sites.google.com/site/gson/gson-user-guide#TOC-Versioning-Support). =||= See #1444. =||= In short, not a bug.

Gson does not provide any Kotlin-specific support. Even more, it does not yet have any special support for Java 8, and probably there are no any plans of doing this, but Gson is pretty extensible to implement such a thing. I don't write in Kotlin at all, but yesterday I digged into how Kotlin default constructors are implemented (using [`cfr`](https://github.com/leibnitz27/cfr) to decompile data classes). This explains why my previous answer to #1444 was not sufficient enough.

Suppose, your data class is declared as follows:

```kotlin
data class Whatever(
        val id: Int = 20,
        val name: String = ""(unknown)""
);
```

`cfr` decompiles it successfully, and its default constructor would look like this if it'd be written in Java:

```java
public /* synthetic */ Whatever(int n, String string, int n2, DefaultConstructorMarker defaultConstructorMarker) {
    if ((n2 & 1) != 0) {
        n = 20;
    }
    if ((n2 & 2) != 0) {
        string = ""(unknown)"";
    }
    this(n, string);
}
```

`n2` is clearly a bitset of what's supposed to be filled with default values. So, an attempt of making Gson work with Kotlin default classes would look like this (not sure how robust it is anyway):

```java
final class KotlinSupport {

	private static final int MAX_PARAMETERS_SUPPORTED = 32;
	private static final int ALL_DEFAULTS_MASK = 0xFFFFFFFF;

	private static final Class<?> defaultConstructorMarkerClass;
	private static final Object defaultConstructorMarker;
	private static final Map<Class<?>, Object> defaultPrimitives;

	static {
		try {
			defaultConstructorMarkerClass = Class.forName(""kotlin.jvm.internal.DefaultConstructorMarker"");
			final Constructor<?> declaredConstructor = defaultConstructorMarkerClass.getDeclaredConstructor();
			declaredConstructor.setAccessible(true);
			defaultConstructorMarker = declaredConstructor.newInstance();
			defaultPrimitives = new HashMap<>();
			defaultPrimitives.put(boolean.class, false);
			defaultPrimitives.put(byte.class, (byte) 0);
			defaultPrimitives.put(short.class, (short) 0);
			defaultPrimitives.put(int.class, 0);
			defaultPrimitives.put(long.class, 0L);
			defaultPrimitives.put(char.class, '\u0000');
			defaultPrimitives.put(float.class, 0F);
			defaultPrimitives.put(double.class, 0D);
		} catch ( final ClassNotFoundException | IllegalAccessException | InstantiationException | NoSuchMethodException | InvocationTargetException ex ) {
			throw new RuntimeException(ex);
		}
	}

	private KotlinSupport() {
	}

	static TypeAdapterFactory getDefaultsTypeAdapterFactory() {
		return DefaultsTypeAdapterFactory.instance;
	}

	private static final class DefaultsTypeAdapterFactory
			implements TypeAdapterFactory {

		private static final TypeAdapterFactory instance = new DefaultsTypeAdapterFactory();

		@Override
		@Nullable
		public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
			final Class<? super T> clazz = typeToken.getRawType();
			@Nullable
			final Constructor<? super T> defaultConstructor = findDefaultConstructor(clazz);
			if ( defaultConstructor == null ) {
				return null;
			}
			@SuppressWarnings(""unchecked"")
			final TypeAdapter<T> typeAdapter = (TypeAdapter<T>) new DefaultsTypeAdapter<>(gson.getDelegateAdapter(this, TypeToken.get(clazz)), defaultConstructor, ConstructorParameter.scan(clazz, this, gson))
					.nullSafe();
			return typeAdapter;
		}

	}

	private static final class DefaultsTypeAdapter<T>
			extends TypeAdapter<T> {

		private final TypeAdapter<? super T> delegateTypeAdapter;
		private final Constructor<? super T> constructor;
		private final ConstructorParameter[] parameters;
		private final Map<String, ConstructorParameter> parametersByName;

		private DefaultsTypeAdapter(final TypeAdapter<? super T> delegateTypeAdapter, final Constructor<? super T> constructor,
				final ConstructorParameter[] parameters) {
			this.delegateTypeAdapter = delegateTypeAdapter;
			this.constructor = constructor;
			this.parameters = parameters;
			parametersByName = new HashMap<>();
			for ( final ConstructorParameter constructorParameter : parameters ) {
				parametersByName.put(constructorParameter.name, constructorParameter);
			}
		}

		@Override
		public void write(final JsonWriter out, final T value)
				throws IOException {
			delegateTypeAdapter.write(out, value);
		}

		@Override
		public T read(final JsonReader in)
				throws IOException {
			in.beginObject();
			final int parameterLength = parameters.length;
			final Object[] arguments = new Object[parameterLength + 2]; // TODO consider thread-local storage
			for ( int i = 0; i < parameterLength; i++ ) {
				arguments[i] = parameters[i].defaultValue;
			}
			// consider there can be an empty object, so each parameter would use its default value
			int useDefaults = ALL_DEFAULTS_MASK;
			while ( in.hasNext() ) {
				final String name = in.nextName();
				@Nullable
				final ConstructorParameter constructorParameter = parametersByName.get(name);
				// if the current JSON object entry name is unknown
				if ( constructorParameter == null ) {
					// then just skip it
					in.skipValue();
				} else {
					// TODO handle duplicate keys somehow
					@Nullable
					final Object argument = constructorParameter.typeAdapter.read(in);
					// if the current JSON object has a non-null value defined, consider no its default value is required
					if ( argument != null ) {
						// then use the current JSON object entry value
						arguments[constructorParameter.position] = argument;
						// and tell the constructor not use the defaults by clearing the respective bit
						useDefaults &= ~(1 << constructorParameter.position);
					}
				}
			}
			in.endObject();
			arguments[arguments.length - 2] = useDefaults;
			arguments[arguments.length - 1] = defaultConstructorMarker; // TODO is using defaultConstructorMarker useless and passing a null is safe?
			try {
				@SuppressWarnings(""unchecked"")
				final T object = (T) constructor.newInstance(arguments);
				return object;
			} catch ( final InstantiationException | IllegalAccessException | InvocationTargetException ex ) {
				throw new RuntimeException(ex);
			}
		}

	}

	@Nullable
	private static <T> Constructor<? super T> findDefaultConstructor(final Class<T> clazz)
			throws UnsupportedOperationException {
		if ( !clazz.isAnnotationPresent(Metadata.class) ) {
			return null;
		}
		@SuppressWarnings(""unchecked"")
		final Constructor<T>[] declaredConstructors = (Constructor<T>[]) clazz.getDeclaredConstructors();
		for ( final Constructor<T> declaredConstructor : declaredConstructors ) {
			if ( declaredConstructor.isSynthetic() ) {
				final Parameter[] parameters = declaredConstructor.getParameters();
				final int parameterCount = parameters.length;
				if ( parameterCount > 0 && parameters[parameterCount - 1].getType() == defaultConstructorMarkerClass ) {
					if ( parameterCount - 2 > MAX_PARAMETERS_SUPPORTED ) {
						throw new UnsupportedOperationException(declaredConstructor + "" has too many parameters: "" + parameterCount);
					}
					return declaredConstructor;
				}
			}
		}
		return null;
	}

	private static final class ConstructorParameter {

		private final int position;
		private final String name;
		@Nullable
		private final Object defaultValue;
		private final TypeAdapter<?> typeAdapter;

		private ConstructorParameter(final int position, final String name, @Nullable final Object defaultValue, final TypeAdapter<?> typeAdapter) {
			this.position = position;
			this.name = name;
			this.defaultValue = defaultValue;
			this.typeAdapter = typeAdapter;
		}

		private static ConstructorParameter[] scan(final Class<?> clazz, final TypeAdapterFactory typeAdapterFactoryToSkip, final Gson gson) {
			final Field[] declaredFields = clazz.getDeclaredFields();
			final int length = declaredFields.length;
			final ConstructorParameter[] constructorParameters = new ConstructorParameter[length];
			for ( int i = 0; i < length; i++ ) {
				final Field field = declaredFields[i];
				field.setAccessible(true);
				@Nullable
				final Object defaultValue;
				final Class<?> fieldClass = field.getType();
				if ( !fieldClass.isPrimitive() ) {
					defaultValue = null;
				} else {
					defaultValue = defaultPrimitives.get(fieldClass);
					if ( defaultValue == null ) {
						throw new AssertionError(fieldClass + "" is not registered"");
					}
				}
				constructorParameters[i] = new ConstructorParameter(i, field.getName(), defaultValue, gson.getDelegateAdapter(typeAdapterFactoryToSkip, TypeToken.get(field.getGenericType())));
			}
			return constructorParameters;
		}

	}

}
```

```java
private static final Gson[] gsons = {
		new GsonBuilder()
				.disableHtmlEscaping()
				.create(),
		new GsonBuilder()
				.disableHtmlEscaping()
				.registerTypeAdapterFactory(KotlinSupport.getDefaultsTypeAdapterFactory())
				.create()
};

private static final String[] jsons = {
		""{}"",
		""{name:null}"",
		""{id:3,name:\""foo\""}""
};

public static void main(final String... args) {
	for ( final Gson gson : gsons ) {
		for ( final String json : jsons ) {
			System.out.println(gson.fromJson(json, Whatever.class));
		}
	}
}
```

would produce the following result:

```
Whatever(id=20, name=(unknown))
Whatever(id=20, name=null)
Whatever(id=3, name=foo)
Whatever(id=20, name=(unknown))
Whatever(id=20, name=(unknown)) <---- reset to default since the type adapter marks null values are required to be default
Whatever(id=3, name=foo)
``` =||= Thanks @lyubomyr-shaydariv. Closing it. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1557Gson serialization doesn't work with classes defined within methodsAbhirama Mallelakauphylover07/28/19, 12:38:51 AM"I have a class defined within a method. Gson serializes it to null. Here's what I'm talking about:

```
public class GsonTestWithClassInsideMethod {
    public static void main(String[] args) {
        final class ABC {
            String a;
            int i;

            public ABC(String a, int i) {
                this.a = a;
                this.i = i;
            }

            @Override public String toString() {
                final StringBuilder sb = new StringBuilder(""ABC{"");
                sb.append(""a='"").append(a).append('\'');
                sb.append("", i="").append(i);
                sb.append('}');
                return sb.toString();
            }
        }

        ABC abc = new ABC(""aaa"", 200);

        System.out.println(new Gson().toJson(abc, ABC.class)); // prints null

        XYZ xyz = new XYZ(""bbb"", 400);

        System.out.println(new Gson().toJson(xyz, XYZ.class)); // prints {""x"":""bbb"",""y"":400}
    }

    private static class XYZ {
        String x;
        int y;

        public XYZ(String x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override public String toString() {
            final StringBuilder sb = new StringBuilder(""XYZ{"");
            sb.append(""x='"").append(x).append('\'');
            sb.append("", y="").append(y);
            sb.append('}');
            return sb.toString();
        }
    }
}
```

Am I doing something wrong or is Gson unable to serialize these classes by design? If this is by design, is there a way I can still continue to have the class be defined within the method and make it work? Or is the only solution to move the definition to outside the method?"Gson does not support local and anonymous classes [by design](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/Excluder.java#L202) due to how these classes work in Java. You should prefer either package-level classes, or nested static ones (that don't have implicit references to their respective outer classes) like `XYZ`. =||= Thank you @lyubomyr-shaydariv. Closing. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1572Fix typo in UserGuidePrempal Singhprempalsingh09/18/19, 05:39:14 PMNaNNaNFix typo in UserGuidePrempal Singhprempalsingh09/18/19, 05:39:14 PMNaNNaNPrempal Singh08/27/19, 05:41:35 PMFix typo in UserGuide1
1573Gson fails to convert ContentValues with Android 10Trey Ethridgetethridge09/17/19, 01:48:33 PM"The internal implementation of ContentValues changed from using a Hashmap to using an ArrayMap in Android 10.  I've included some sample code below to demonstrate how it fails now.

```
ContentValues values = new ContentValues();
values.put(""Key 1"", ""Key 1 value"");
values.put(""Key 2"", ""Key 2 value"");
values.put(""Key 3"", ""Key 3 value"");
String json = new Gson().toJson(values);
Log.d(""XXX"", String.format(""Content values json: '%s'"", json));
```

On Android 10 the output looks like:
Output: XXX: Content values json: '{}'

On Android 9 the output looks like:
Output: XXX: Content values json: {""mValues"":{""Key 1"":""Key 1 value"",""Key 2"":""Key 2 value"",""Key 3"":""Key 3 value""}}""Not a bug: 1) you should not (de)serialize classes you don't control (do you really have your content values stored under the `mValues` property key in your JSON documents?); 2) ... unless you implement a custom type adapter that might use, I guess, the built-in `Map` type adapter. =||= 1) Good point.  However, in this case, Gson was just used to pass a lot of information to an instance of a worker with the new WorkManager JetPack library.  The data you pass to it must be Parcelable.  Using ContentValues with Gson to serialize was an easy hack that used to work.  The JSON that was output didn't matter as long as the worker could deserialize it and pull the values from the ContentValues instance.
2) That's the interesting part to me.  I wrote my own serialization/deserialization code to fix the issue.  I'm still unsure as to why this fails now.  The implementation is using an ArrayMap instead of a HashMap.  I would imagine that it would use the same Map type adapter to serialize both objects, but I haven't traced that far into the Gson code base.  Do you see the issue? =||= @tethridge 

I'm not into the Android API, but I don't really believe using Gson for this case is a good choice. (Except probably an attempt of nesting/packing some data as string values, however `Parcelable` looks like a (de)serialization tool already.) If you still need using Gson, you probably might fine-tune the example below (avoid intermediate maps, avoid the map type adapter and use readers/writers directly, etc):

```java
@SuppressWarnings(""all"")
class FakeContentValues {

	private final Map<String, Object> mValues = new LinkedHashMap<>();

	FakeContentValues() {
	}

	// @formatter:off
	void putNull(final String key) { mValues.put(key, null); }
	void put(final String key, final Short value) { mValues.put(key, value); }
	void put(final String key, final Long value) { mValues.put(key, value); }
	void put(final String key, final Double value) { mValues.put(key, value); }
	void put(final String key, final Integer value) { mValues.put(key, value); }
	void put(final String key, final String value) { mValues.put(key, value); }
	void put(final String key, final Boolean value) { mValues.put(key, value); }
	void put(final String key, final Float value) { mValues.put(key, value); }
	void put(final String key, final byte[] value) { mValues.put(key, value); }
	void put(final String key, final Byte value) { mValues.put(key, value); }
	Object get(final String key) { return mValues.get(key); }
	Set<String> keySet() { return mValues.keySet(); }
	// @formatter:on

	@Override
	public boolean equals(final Object o) {
		if ( this == o ) {
			return true;
		}
		if ( o == null || getClass() != o.getClass() ) {
			return false;
		}
		final FakeContentValues that = (FakeContentValues) o;
		return mValues.equals(that.mValues);
	}

	@Override
	public int hashCode() {
		return mValues.hashCode();
	}

	@Override
	public String toString() {
		return ""{mValues="" + mValues + ""}"";
	}

}
```

```java
private static final Gson gson = new GsonBuilder()
	.disableHtmlEscaping()
	.disableInnerClassSerialization()
	.registerTypeAdapterFactory(new TypeAdapterFactory() {
		@Override
		@SuppressWarnings(""ReturnOfNull"")
		public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
			final Class<? super T> rawType = typeToken.getRawType();
			if ( !FakeContentValues.class.isAssignableFrom(rawType) ) {
				return null;
			}
			final TypeAdapter<LinkedHashMap<String, Object>> delegateTypeAdapter = gson.getDelegateAdapter(this, mapStringToObjectTypeToken);
			final TypeAdapter<FakeContentValues> typeAdapter = new TypeAdapter<FakeContentValues>() {
				@Override
				public void write(final JsonWriter out, final FakeContentValues contentValues)
						throws IOException {
					final LinkedHashMap<String, Object> intermediate = new LinkedHashMap<>();
					for ( final String key : contentValues.keySet() ) {
						intermediate.put(key, contentValues.get(key));
					}
					delegateTypeAdapter.write(out, intermediate);
				}

				@Override
				@SuppressWarnings(""IfStatementWithTooManyBranches"")
				public FakeContentValues read(final JsonReader in)
						throws IOException {
					final Map<String, Object> intermediate = delegateTypeAdapter.read(in);
					final FakeContentValues contentValues = new FakeContentValues();
					for ( final Map.Entry<String, Object> e : intermediate.entrySet() ) {
						final String k = e.getKey();
						final Object v = e.getValue();
						// @formatter:off
						if ( v == null ) { contentValues.putNull(k); }
						else if ( v instanceof Short ) { contentValues.put(k, (Short) v); }
						else if ( v instanceof Long ) { contentValues.put(k, (Long) v); }
						else if ( v instanceof Double ) { contentValues.put(k, (Double) v); }
						else if ( v instanceof Integer ) { contentValues.put(k, (Integer) v); }
						else if ( v instanceof String ) { contentValues.put(k, (String) v); }
						else if ( v instanceof Boolean ) { contentValues.put(k, (Boolean) v); }
						else if ( v instanceof Float ) { contentValues.put(k, (Float) v); }
						else if ( v instanceof byte[] ) { contentValues.put(k, (byte[]) v); }
						else if ( v instanceof Byte ) { contentValues.put(k, (Byte) v); }
						else { throw new UnsupportedOperationException(String.valueOf(v.getClass())); }
						// @formatter:on
					}
					return contentValues;
				}
			};
			@SuppressWarnings(""unchecked"")
			final TypeAdapter<T> castTypeAdapter = (TypeAdapter<T>) typeAdapter;
			return castTypeAdapter;
		}
	})
	.create();
```

```java
final FakeContentValues before = new FakeContentValues();
before.put(""Key 1"", ""Key 1 value"");
before.put(""Key 2"", ""Key 2 value"");
before.put(""Key 3"", ""Key 3 value"");
System.out.println(""before="" + before);
final String json = gson.toJson(before);
System.out.println(json);
final FakeContentValues after = gson.fromJson(json, FakeContentValues.class);
System.out.println(""after="" + after);
System.out.println(""equals="" + before.equals(after));
```

gives

```
before={mValues={Key 1=Key 1 value, Key 2=Key 2 value, Key 3=Key 3 value}}
{""Key 1"":""Key 1 value"",""Key 2"":""Key 2 value"",""Key 3"":""Key 3 value""}
after={mValues={Key 1=Key 1 value, Key 2=Key 2 value, Key 3=Key 3 value}}
equals=true
``` =||= Thanks for the advice.  I'm still curious why their small change broke Gson serialization.  They switched from one class that implements Map to another that also implements Map. =||= Each Android version, starting with 9, tightens hidden API usage.
Gson is known as `sun.misc.Unsafe` ""abuser"". It's nice to have private (and even final) fields accessible, but Android doesn't like it.
Check your logs for `Accessing hidden method` logs. =||= Thanks for the feedback.  I'll close this issue.  I resolved the issue in my app by implementing my own serialization code. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1576Prefer writing chars instead of strings of length oneDavid Maplesdendmap09/18/19, 05:33:50 PM"This results in a noticeable performance improvement with most writer
implementations (including BufferedWriter).

The scale of the improvement obviously depends on the exact data being written but in my test cases the improvement in the performance critical `JsonWriter.string()` method when writing to a writer constructed as 
```
final Writer writer = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new ByteArrayOutputStream()), ""UTF-8""), 8192);
```
was around 12.5%.  Given that the bulk of the time is spent doing the content compression the relative change in the non-compression is much larger... removing the `GZIPOutputStream` from the test makes the improvement around 30%.

The reason for the improvement is that the `BufferedWriter` code for writing a single char is much more efficient than the code for writing a string (when that string is length 1)."I'm not sure exactly why the build failed but it appears to be failing in a similar manner on other branches. =||= Thank you for a simple focused change with a great description and performance numbers! =||= Prefer writing chars instead of strings of length oneDavid Maplesdendmap09/18/19, 05:33:50 PM"This results in a noticeable performance improvement with most writer
implementations (including BufferedWriter).

The scale of the improvement obviously depends on the exact data being written but in my test cases the improvement in the performance critical `JsonWriter.string()` method when writing to a writer constructed as 
```
final Writer writer = new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new ByteArrayOutputStream()), ""UTF-8""), 8192);
```
was around 12.5%.  Given that the bulk of the time is spent doing the content compression the relative change in the non-compression is much larger... removing the `GZIPOutputStream` from the test makes the improvement around 30%.

The reason for the improvement is that the `BufferedWriter` code for writing a single char is much more efficient than the code for writing a string (when that string is length 1)."NaNDavid Maplesden09/16/19, 08:08:32 PM"Prefer writing chars instead of strings of length one

This results in a noticeable performance improvement with most writer
implementations (including BufferedWriter)."1
1577Deprecated `new Gson()`, added `Gson.DEFAULT_GSON`MikeMiha-x6409/18/19, 05:31:52 PMThere is a popular anti-pattern: `new Gson().fromJson(json, type)`. No need to create new Gson instances as all of them have the same default configuration and work equally.We don't like to change Gson api for nice to haves.  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
15812.8.6 Build?zc0nf10/05/19, 08:36:02 PM"Hello,

Is there a new build in 2.8.6?

thank you,

zc0nf"A jpms 2.86 build would be great. =||= Thx! :D =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1585Made the build work again with JDK 8Inderjeet Singhinder12310/03/19, 10:08:39 PMNaNNaNMade the build work again with JDK 8Inderjeet Singhinder12310/03/19, 10:08:39 PMNaNNaNInderjeet Singh10/03/19, 10:07:46 PMMade the build work again with JDK 81
1586restored Java 9 buildInderjeet Singhinder12310/03/19, 11:36:16 PMNaNNaNrestored Java 9 buildInderjeet Singhinder12310/03/19, 11:36:16 PMNaNNaNInderjeet Singh10/03/19, 11:31:34 PMrestored Java 9 build1
1591Update CHANGELOG.mdAlireza Afkaralirezaafkar10/15/19, 12:01:36 AMNaNNaNUpdate CHANGELOG.mdAlireza Afkaralirezaafkar10/15/19, 12:01:36 AMNaNNaNAlireza Afkar10/13/19, 07:02:24 AMUpdate CHANGELOG.md1
1592JsonTreeWriter.put(): IllegalStateExceptionjasoncqjason11/25/19, 05:51:01 AMAfter calling JsonTreeWriter.name(null), calling JsonTreeWriter.vule() will cause JsonTreeWriter.put(): IllegalStateException because of internal calling JsonTreeWriter.put(). So why not check if the param of name() is null?  The check is done in super class！"Can you provide more detail on how to reproduce the issue? =||= public void testNullStringNameInSuperClass() throws IOException {
    StringWriter stringWriter = new StringWriter();
    JsonWriter jsonWriter = new JsonWriter(stringWriter);
    jsonWriter.beginObject();
    jsonWriter.name(null);     //throw  java.lang.NullPointerException: name == null
                                           //at com.google.gson.stream.JsonWriter.name(JsonWriter.java:386)
    jsonWriter.value((String) null);
    jsonWriter.endObject();
  }

public void testNullStringName() throws IOException {
    JsonWriter jsonWriter = new JsonTreeWriter();
    jsonWriter.beginObject();
    jsonWriter.name(null);
    jsonWriter.value((String) null);//throw java.lang.IllegalStateException
	//at com.google.gson.internal.bind.JsonTreeWriter.put(JsonTreeWriter.java:89)
	//at com.google.gson.internal.bind.JsonTreeWriter.nullValue(JsonTreeWriter.java:153)
	//at com.google.gson.internal.bind.JsonTreeWriter.value(JsonTreeWriter.java:146)
    jsonWriter.endObject();
  }

       I think it is appropriate behavior that throw NullPointerException when name(null). Because It can help client discover problem early. It has done in super class. But it‘s poor that JsonTreeWriter.name() didn't do it when JsonTreeWriter.name() override it in super class. 

 =||= (Note: your reply has the response in code ticks, while the code is in normal text formatting - it's switched around for some reason)

I'll look more at the relevant areas of the code and most likely make a pull request; I agree that it makes sense for the behavior here to be consistent with the superclass unless there is a demonstrable use case in which the inconsistent behavior is necessary. =||= It's fine to fix it and it‘s very nice to commit it quickly.  I‘ll close the issue for solving. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1594Update android.ymlTang_wikiabc5209024103/17/21, 09:55:58 PMAdd...."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google.com/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1594) for more info**.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1595Objects Serialize/Deserialize to nullZachLastZactionHero10/21/19, 06:36:24 PM"I'm attempting to deserialize JSON with gson, but my output comes out null.

```
class Term {
  // Actual documentation uses private, didn't work for me either
  public String uuid;

  Term() {
  }

  // Tried with and without setters/getters, but doesn't seem to make a difference
  public void setUuid(String uuid){
    this.uuid = uuid;
  }
  public String getUuid() {
    return this.uuid;
  }
}

Type collectionType = new TypeToken<List<Term>>(){}.getType();
Gson gson = new Gson();
String json = ""[{\""uuid\"": \""aaaa\""}]"";
List<Term> terms = gson.fromJson(json, collectionType);
```

Resulting list is just <[null]>. Expecting some Term objects with uuid set.

Any thoughts on what I might be doing wrong here? Even the `BagOfPrimitives` examples is serializing to a null string.""Adding public constructors or accessors, or making fields public won't help unless you make your DTO class `Term` non-local:

* Gson merely does not support local classes (those that are declared in methods). This also describes why your list is output as `[null]` and not something like `[Term@01234567]`.
* In its simplest configuration `Gson` does not need your DTO classes to have any public constructors since it's able to apply some low-level object instantiation mechanics. Also, by default, Gson doesn't need any accessor methods declared (no getters no setters at all) and doesn't need the fields to be declared non-`private`. Making any of these changes wouldn't affect the object instantiation because it's merely a local class.

The following code would work for you:

```java
public final class I1595 {

	private I1595() {}

	private static final Type listOfTermsType = new TypeToken<List<Term>>(){}.getType();
	private static final Gson gson = new Gson();

	public static final class Term {
		private String uuid;
		@Override public String toString() { return uuid; }
	}

	public static void main(final String... args) {
		final List<Term> terms = gson.fromJson(""[{\""uuid\"": \""aaaa\""}]"", listOfTermsType);
		System.out.println(terms);
	}

}
```

producing `[aaaa]` to stdout. =||= Had the same problem as @LastZactionHero 

> @lyubomyr-shaydariv Gson merely does not support local classes

This should be warned about on the README of gson. I literally spent an hour poking through gson's implementation trying to understand why it interpreted

```java
class Cat {
    public String name;
}
String json = ""{ \""name\"": \""sprinkles\"" }"";
Cat c = g.fromJson(json, Cat.class);
```
as `null`. A very unintuitive limitation. AT LEAST throw an exception so that developers can understand why gson rejects the specified class. =||= @KevinTyrrell
I agree to some extent, but why using anonymous and local classes that are hard to reuse outside statement blocks that declare them if such DTO classes are typically reusable by design? You might suggest/submit a PR making the current documentation at https://github.com/google/gson/blob/master/UserGuide.md#finer-points-with-objects a bit more clear (probably by providing code for ""bad"" and ""good"" scenarios):

> Fields corresponding to the outer classes in inner classes, anonymous classes, and local classes are ignored and not included in serialization or deserialization.
 =||= That did the trick!

I was just trying out the sample code in a unit test to see how it worked before implementing it. I'm a bit new to Java, makes sense why it would have trouble with a local class. 

Thanks for your help, @lyubomyr-shaydariv  =||= @LastZactionHero 
no problem. The reason of why such classes are not supported is that they have implicit references to their outer classes (generated by `javac`) and those classes may be extremely hard to deserialize (if possible). I do believe it dictated the design choice. For example, if you compile the following code:

```java
class Outer {
	Outer() { // constructor, actually a statement block
		class Inner { } // local class
	}
}
```

and run `javap Outer$1Inner.class` to disassemble the inner class, it would reveal the internals:

```
Compiled from ""test.java""
class Outer$1Inner {
  final Outer this$0;
  Outer$1Inner(Outer);
}
```

`Outer` can be any class that is not designed to be a data-transfer class (a test suite in your case, application-level `I1595` in my case above, etc). Package-level classes and static classes do not have any implicit references making them more safe to deserialize. =||= #1589 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1598Not able to use JsonObject as ResponseEntityIvan KaloyanovIvanKaloyanov11/02/19, 10:26:50 AM"I've used ResponseEntity<JsonObject> for one of the endpoints and noticed a strange behavior. Even though the logic was executed properly and no exception occurs, every time I requested the resource I get a status 500 response.

After that, I've created a dummy endpoint for testing and realized that the reason for this 500 result is using JsonObject for the ResponseEntity. 
```
    @GetMapping
    public ResponseEntity<JsonObject> status() {
        JsonObject test = new JsonObject();
        test.addProperty(""key"",""value"");
        return ResponseEntity.ok(test);
    }
```

What's the reason for this behavior? The object is not able to be serialized properly or it's something completely different?

P.S. I am using Gson v2.8.5 and Spring Boot v2.1.1""Spring Boot must log 5xx errors by default. What exception log entries are you getting + are you using Gson message converter instead of the default one that's built on top of Jackson? =||= Hi, @lyubomyr-shaydariv I am using the standard Gson JsonObject. The interesting part is that I do not see any exception being logged or even thrown and even though I am starting the service on a port and excess it directly referring to the port seems to me that there is some 3rd party involved because I tried it on a completely isolated environment and it was working fine. 

Still the rest of the JSON Libraries I've tried worked fine and even though I've managed to solve it for myself I am really interested in what's actually causing this. I am attaching 3 screenshots with status 200 using a string literal and status 500 using Gson JsonObject.
![1](https://user-images.githubusercontent.com/16307530/67506396-a88ec680-f695-11e9-94f0-f2eb1e0d629f.png)
![2](https://user-images.githubusercontent.com/16307530/67506397-a88ec680-f695-11e9-9c20-aa00398f8b78.png)
![3](https://user-images.githubusercontent.com/16307530/67506398-a88ec680-f695-11e9-850a-7b0d0b0f0305.png)

Any recommendations on how can I troubleshoot it efficiently?

Thanks!  =||= @IvanKaloyanov 
No idea, but I guess you have your Spring Boot instance configured improperly missing `GsonHttpMessageConverter` (I meant this class above). As far as I remember how Spring MVC work, its default JSON message converter is Jackson-oriented (instance of `AbstractJackson2HttpMessageConverter`). I don't have a test Spring Boot application right at me, but having the controller method like you mentioned in the screenshot gives HTTP 500 for my Spring MVC-based test I have in my project after adding Gson and the exact controller method. It gets working properly with HTTP 200 by adding `GsonHttpMessageConverter` to the message converters registry in my tests:

```java
final MockMvc mockMvc = MockMvcBuilders
	.standaloneSetup(...)
	.setControllerAdvice(...)
	// default
	.setMessageConverters(new MappingJackson2HttpMessageConverter(objectMapper))
	// new
	.setMessageConverters(new GsonHttpMessageConverter())
	.build();

```

I believe it would work for you once you do the same in your MVC configuration (not mocks in tests like mine):

```java
@Configuration
@EnableWebMvc
public class MvcConfiguration
		extends WebMvcConfigurerAdapter {

	...

	@Override
	public void configureMessageConverters(final List<HttpMessageConverter<?>> converters) {
		...
		converters.add(new GsonHttpMessageConverter());
		...
	}

	...

}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1601OSGi metadata on 2.8.6 requires Java 9 or greaterBrian de Alwisbriandealwis11/04/19, 11:37:46 PM"gson 2.8.6's `MANIFEST.MF` includes the following line:
```
Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=9.0))""
```

And so it requires Java 9 (or greater, as `osgi.ee` is typically populated with all lesser versions too) and so refuses to install on Java 8 (or below).""2.8.5's `MANIFEST.MF` has:
```
Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.6))""
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1602Gson OSGi metadata claims support for JavaSE-1.5 but target generation is 1.6Brian de Alwisbriandealwis11/08/19, 11:21:08 PM"Although the OSGi metadata claims Gson will work with Java 1.5 or greater:
https://github.com/google/gson/blob/47b28d99a17d492b37fcdd0fc41290419a010a0f/gson/bnd.bnd#L6

the compilation configuration sets the target as 1.5 and the classes themselves are Java 1.6:
https://github.com/google/gson/blob/47b28d99a17d492b37fcdd0fc41290419a010a0f/pom.xml#L89-L95

```sh
$ file gson/target/classes/com/google/gson/Gson.class
gson/target/classes/com/google/gson/Gson.class:                       compiled Java class data, version 50.0 (Java 1.6)
```

And that looks to have been a decision made a while ago #790."fixed by #1603 =||= Please close this. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1603Fix OSGi metadata generation to work on JavaSE < 9Brian de Alwisbriandealwis11/04/19, 11:37:47 PM"Fixes #1601 #1602

  - explicitly specifies `Require-Capability: osgi.ee` for 1.6 or greater to disable `bnd`'s autogeneration which is deceived by the `module-info.class` file
  - drop the JavaSE 1.5 reference since it hasn't been true for years (#790)
  - remove the unused `org.apache.felix:maven-bundle-plugin` plugin reference

Here are the differences in the resulting manifests:
```diff
--- gson-manifest-2.8.6	2019-10-31 12:24:51.000000000 -0400
+++ gson-manifest-2.8.7-SNAPSHOT	2019-10-31 11:49:39.000000000 -0400
@@ -1,23 +1,22 @@
 Manifest-Version: 1.0
 Archiver-Version: Plexus Archiver
-Created-By: 11.0.4 (Oracle Corporation)
-Built-By: inder
+Created-By: 11.0.4 (AdoptOpenJDK)
+Built-By: bsd
 Build-Jdk: 11.0.4
-Bnd-LastModified: 1570215293550
+Bnd-LastModified: 1572539070059
 Bundle-ContactAddress: https://github.com/google/gson
 Bundle-Description: Gson JSON library
 Bundle-ManifestVersion: 2
 Bundle-Name: Gson
-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, J
- avaSE-1.8
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8
 Bundle-SymbolicName: com.google.gson
 Bundle-Vendor: Google Gson Project
-Bundle-Version: 2.8.6
+Bundle-Version: 2.8.7.201910311624
 Export-Package: com.google.gson;uses:=""com.google.gson.reflect,com.googl
- e.gson.stream"";version=""2.8.6"",com.google.gson.annotations;version=""2.8
- .6"",com.google.gson.reflect;version=""2.8.6"",com.google.gson.stream;vers
- ion=""2.8.6""
+ e.gson.stream"";version=""2.8.7"",com.google.gson.annotations;version=""2.8
+ .7"",com.google.gson.reflect;version=""2.8.7"",com.google.gson.stream;vers
+ ion=""2.8.7""
 Import-Package: com.google.gson.annotations
-Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=9.0))""
+Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.6))""
 Tool: Bnd-4.0.0.201805111645
 
```"Oh! I didn’t receive an email from Travis so I assumed it had passed :-( =||= https://github.com/google/gson/issues/1605 =||= Fix OSGi metadata generation to work on JavaSE < 9Brian de Alwisbriandealwis11/04/19, 11:37:47 PM"Fixes #1601 #1602

  - explicitly specifies `Require-Capability: osgi.ee` for 1.6 or greater to disable `bnd`'s autogeneration which is deceived by the `module-info.class` file
  - drop the JavaSE 1.5 reference since it hasn't been true for years (#790)
  - remove the unused `org.apache.felix:maven-bundle-plugin` plugin reference

Here are the differences in the resulting manifests:
```diff
--- gson-manifest-2.8.6	2019-10-31 12:24:51.000000000 -0400
+++ gson-manifest-2.8.7-SNAPSHOT	2019-10-31 11:49:39.000000000 -0400
@@ -1,23 +1,22 @@
 Manifest-Version: 1.0
 Archiver-Version: Plexus Archiver
-Created-By: 11.0.4 (Oracle Corporation)
-Built-By: inder
+Created-By: 11.0.4 (AdoptOpenJDK)
+Built-By: bsd
 Build-Jdk: 11.0.4
-Bnd-LastModified: 1570215293550
+Bnd-LastModified: 1572539070059
 Bundle-ContactAddress: https://github.com/google/gson
 Bundle-Description: Gson JSON library
 Bundle-ManifestVersion: 2
 Bundle-Name: Gson
-Bundle-RequiredExecutionEnvironment: J2SE-1.5, JavaSE-1.6, JavaSE-1.7, J
- avaSE-1.8
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6, JavaSE-1.7, JavaSE-1.8
 Bundle-SymbolicName: com.google.gson
 Bundle-Vendor: Google Gson Project
-Bundle-Version: 2.8.6
+Bundle-Version: 2.8.7.201910311624
 Export-Package: com.google.gson;uses:=""com.google.gson.reflect,com.googl
- e.gson.stream"";version=""2.8.6"",com.google.gson.annotations;version=""2.8
- .6"",com.google.gson.reflect;version=""2.8.6"",com.google.gson.stream;vers
- ion=""2.8.6""
+ e.gson.stream"";version=""2.8.7"",com.google.gson.annotations;version=""2.8
+ .7"",com.google.gson.reflect;version=""2.8.7"",com.google.gson.stream;vers
+ ion=""2.8.7""
 Import-Package: com.google.gson.annotations
-Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=9.0))""
+Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.6))""
 Tool: Bnd-4.0.0.201805111645
 
```"NaNBrian de Alwis10/31/19, 04:18:50 PMDrop JavaSE-1.5 since that boat sailed a long time ago1
1606Fix Travis CIMarcono123411/05/19, 06:29:12 PM"# Description
Travis CI fails for all builds. The relevant Travis log part is probably:
```
openjdk version ""9.0.4""
OpenJDK Runtime Environment (build 9.0.4+11)
OpenJDK 64-Bit Server VM (build 9.0.4+11, mixed mode)
$ javac -J-Xmx32m -version
javac 9.0.4
3.54s$ mvn -f gson install -DskipTests=true
[INFO] Scanning for projects...
Downloading from google-maven-central: https://maven-central.storage-download.googleapis.com/repos/central/data/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
Downloading from sonatype: https://oss.sonatype.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
Downloading from sonatype-apache: https://repository.apache.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
[ERROR] [ERROR] Some problems were encountered while processing the POMs:
[FATAL] Non-resolvable parent POM for com.google.code.gson:gson-parent:2.8.6-SNAPSHOT: Could not transfer artifact org.sonatype.oss:oss-parent:pom:7 from/to google-maven-central (https://maven-central.storage-download.googleapis.com/repos/central/data/): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target and 'parent.relativePath' points at wrong local POM @ com.google.code.gson:gson-parent:2.8.6-SNAPSHOT, /home/travis/build/google/gson/pom.xml, line 6, column 11
```

It appears it tries all configured repositories and then fails:
1. maven-central.storage-download.googleapis.com
2. oss.sonatype.org (this just redirects to central!)
3. repository.apache.org

It looks like Maven mixes the exception messages, but the actual problem is:
> sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

If we now compare the last [successful build](https://travis-ci.org/google/gson/jobs/541365646) with the [first known failing](https://travis-ci.org/google/gson/jobs/583845328) (there might have been earlier ones through pull requests, but Travis does not show them), we will see:

<table>
    <thead>
        <tr>
            <th>Successful</th>
            <th>Failed</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
<pre>
java version ""9.0.1""
Java(TM) SE Runtime Environment (build 9.0.1+11)
</pre>
            </td>
            <td>
<pre>
openjdk version ""9.0.4""
OpenJDK Runtime Environment (build 9.0.4+11)
</pre>
            </td>
        </tr>
    </tbody>
</table>

And indeed there is [JDK-8189357](https://bugs.openjdk.java.net/browse/JDK-8189357) which describes that the `cacerts` file for OpenJDK is empty.  
To fix this a different truststore has to be specified, the certificates have to be imported, or you could switch to OpenJDK > 9 (see JEP [319](https://openjdk.java.net/jeps/319)), e.g. 11 which runs the build successfully as well and is also LTS."Thanks. Can you send a PR that fixes the issue?  =||= Done, see #1607, that seems to fix the problem =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1607Use OpenJDK 11 for Travis CIMarcono123411/05/19, 06:29:12 PMFixes #1606 (?)NaNUse OpenJDK 11 for Travis CIMarcono123411/05/19, 06:29:12 PMFixes #1606 (?)NaNMarcono123411/05/19, 06:11:09 PM"Use OpenJDK 11 for Travis CI

Fixes #1606 (?)"1
1608Java 9 Requirement in GSON LibraryAmit Kumar Mondalamitjoy11/08/19, 11:16:04 PM"The newest version 2.8.6 comprises the following in its MANIFEST.MF

`Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=9.0))""`

This prevents the bundle to be installed in Java 8 execution environment. Is there really any Java 9 dependency in this version at all? I hope not since the patch version is only bumped up and the 2.8.5 version is compatible with Java 8."Yes, this is a bug that we will fix soon. Can you test the latest snapshot to see if the issue is gone? =||= This is a dupe of #1601. It's fixed at head. When is the next release with this fix scheduled? =||= @inder123 I just noticed. It has already been fixed. =||= #1601 (and this one as a dup) fixed by #1603. Please close this. =||= Can we please get a new release to fix this?  Pretty please?  Before Christmas? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1610JsonPrimitive: considers LazilyParsedNumbers with integral values as integral when computing hashCode.pterry2611/09/19, 08:32:06 PMThis fixes the bug described in https://github.com/google/gson/issues/992 where two JsonPrimitives could be equal but have different hashCodes."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.

<!-- need_author_cla --> =||= @googlebot I fixed it! =||= 
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1610) for more info**.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1611JsonPrimitive: considers integral LazilyParsedNumber as integral when evaluating hashCodepterry2611/09/19, 09:00:00 PMThis fixes the bug described in https://github.com/google/gson/issues/992 where two JsonPrimitives could equal each other but have different hashCodes."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1611) for more info**.

<!-- need_sender_cla --> =||= @googlebot I fixed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1611) for more info**.

<!-- need_author_cla --> =||= pht5 is me; I can't sign the CLA for both accounts =||= Fixed my issue before that was resulting in the commit being made under the wrong account; closing this and opening a new PR =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1613targetSdkVersion 29 does not serialize Location objects properlyy20ky20k11/11/19, 09:04:25 AM"I observed a problem when I updated from `targetSdkVersion 27` to `targetSdkVersion 29` in a project. GSON failes to serialize a Location object when using `targetSdkVersion 29`.

### Location JSON string produced with targetSdkVersion 27
`""location"":{""mAltitude"":0.0,""mBearing"":0.0,""mBearingAccuracyDegrees"":0.0,""mElapsedRealtimeNanos"":33676559450037,""mHorizontalAccuracyMeters"":20.0,""mLatitude"":38.06770166666667,""mLongitude"":-122.58285666666667,""mProvider"":""gps"",""mSpeed"":0.0,""mSpeedAccuracyMetersPerSecond"":0.0,""mTime"":1573423211000,""mVerticalAccuracyMeters"":0.0}`

### Location JSON string produced with targetSdkVersion 29
`""location"":{""mElapsedRealtimeNanos"":33918570517227}`

Only `mElapsedRealtimeNanos` get serialized when using `29`. Location implements `@Parcelable` as far as I know. I am using the following code to handle de/serialization:

```
data class WayPoint(var location: Location = Location(LocationManager.GPS_PROVIDER)): Parcelable {

    constructor(parcel: Parcel) : this(parcel.readParcelable(Location::class.java.classLoader) ?: Location(LocationManager.GPS_PROVIDER)) {
    }

    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeParcelable(location, flags)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<WayPoint> {
        override fun createFromParcel(parcel: Parcel): WayPoint {
            return WayPoint(parcel)
        }

        override fun newArray(size: Int): Array<WayPoint?> {
            return arrayOfNulls(size)
        }
    }
}
```"You should not serialize/deserialize classes you don't control over. See a similar issue: #1573  =||= Thanks for the quick answer. I will copy over the values from the Location object to my own WayPoint class. That should result in a shorter JSON string as a side effect. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1614support strings empty return nullchenyichengthinking-github11/13/19, 12:36:52 PMsupport strings empty return null"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1614) for more info**.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1615support strings empty return nullchenyichengthinking-github11/13/19, 12:54:05 PMsupport strings empty return null "We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1615) for more info**.

<!-- need_author_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1618Add asList()vulkman11/15/19, 02:54:22 PMI'd love to have direct access to the element list so I don't have to convert the iterator to something that supports the Java 8 Stream API"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1618) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1618) for more info**.

<!-- need_author_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1620Fixing issue #1592Matthew Leefmmmlee11/26/19, 09:05:48 PM"As cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.

To resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java).

Edit: I had made a few style changes to the design document on this fork, but reverted them in order to keep the changes issue-related.""Would it be possible to force push only 49280df or squash the commits? I assume the maintainers here would like to not include commits which are then reverted in a later commit. =||= I believe maintainers have the option to squash when merging a pull request, so it only shows up as a single commit. I don't think they can be squashed before merging, though; only when performing the merge.

Edit: Closed issue and opened #1623 that only has the relevant commit. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1623Fixing issue #1592Matthew Leefmmmlee03/02/20, 10:57:43 PM"Condensed #1620. 

As cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.

To resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java)."NaNFixing issue #1592Matthew Leefmmmlee03/02/20, 10:57:43 PM"Condensed #1620. 

As cqjason describes in [issue #1592](https://github.com/google/gson/issues/1592), the behavior of `JsonTreeWriter.name()` is inconsistent with the method it overrides in its parent JsonWriter. When calling `JsonWriter.name(null)`, a NullPointerException is thrown, while calling `JsonTreeWriter.name(null)` does not throw an exception, leading to a potentially misleading IllegalStateException when calling `JsonTreeWriter.value()` later in execution.

To resolve this, I just copied the null check from lines 385-387 of [JsonWriter](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/stream/JsonWriter.java)."NaNMatthew Lee11/26/19, 08:54:50 PM"Fixing https://github.com/google/gson/issues/1592

adding null parameter check to name(), fixing the issue and being consistent with superclass behavior"1
1628Date.class   registerTypeAdapter huomingbo952712/06/19, 03:04:55 AM"Parsing Date is not accurate 

 
        DateFormat formatterUtc = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS"",Locale.getDefault());
        formatterUtc.setTimeZone(TimeZone.getTimeZone(""UTC""));

        @SuppressLint(""SimpleDateFormat"") SimpleDateFormat  formatterCommon = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");

           gsonBuilder.registerTypeAdapter(Date.class, (JsonDeserializer<Date>) (json, typeOfT, context) -> {
            String asString = json.getAsString();
            try {
                return formatterUtc.parse(asString);
            } catch (ParseException e) {
                e.printStackTrace();
                try {
                    return formatterCommon.parse(asString);
                } catch (ParseException e1) {
                    e1.printStackTrace();
                }
            }
            return new Date();
        });

use Retrofit ,Parsing Date is not accurate
When the app started to request a large amount of data, there was an error in the timing of some data
for example:
1123-05-04 ------  Fri May 04 14:25:57 GMT+08:00 1123 
0024-11-07 ------ Tue Nov 07 10:53:14 GMT+08:00 24 

It is ok when a small amount of data is requested，
but I only set gsonBuilder.setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS"")   is right
"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1629Remove support for java.sql typesdernasherbrezondernasherbrezon08/25/21, 06:26:59 PM"The original idea #134 was OK in 2015. Since then, Java got modular support and java.sql is no longer available by default. This is causing sporadic issues in random places: 

- https://github.com/google/gson/issues/134#issuecomment-410848727 
- [java.lang.ClassNotFoundException: java.sql.Time](https://travis-ci.org/dernasherbrezon/jsp-openapi/builds/620333411)
- [stackoverflow](https://stackoverflow.com/search?q=gson+java.sql)
- [gson pom.xml](https://github.com/google/gson/blob/master/pom.xml#L84)

Would be great to deprecate support for java.sql and suggest writing type adapters instead.""https://github.com/google/gson/blob/1a9469a8c5aa31deacd36b3d15347f873ce7e889/gson/src/main/java/module-info.java#L11

Would have to be changed as well, right? =||= I am not as familiar with Java 10+ (as have stayed mostly with Android). So, if someone was willing to write a PR that maintains full backward compatibilty, I will take a look. =||= Lol, it can't be backward compatible because of ""Remove support"". =||= I think it can be backwards compatible by using an optional module dependency (`requires static`) and then not trying to load any SQL classes if they are not present.
I have a local branch which should hopefully solve this, but I am not confident enough in it, so it will take a few days before I will create a pull request. =||= Wonderful! 
Please write some tests as well. Backward compatibility is paramount for Gson as lots and lots of projects depend on it. =||= Created #1707 now. Though I am not that familiar with the module system so any feedback is appreciated! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1638Add new testcasesJiechuan ChenOmega-Ariston02/17/20, 10:55:19 PM"Improved testcases for JsonPrimitive and JsonTreeWriter
Added testcases for ISO8601Utils""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1638) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1638) for more info**.

<!-- ok --> =||= "Add new testcasesJiechuan ChenOmega-Ariston02/17/20, 10:55:19 PM"Improved testcases for JsonPrimitive and JsonTreeWriter
Added testcases for ISO8601Utils"NaNOmega-Ariston01/03/20, 02:57:58 AMAdd Tests for ISO8601Utils1
1639gson don't support parse Anonymous-Class-Object逝兮诚lusson-luo01/19/20, 03:40:13 AM"if i create a Anonymous-Class object, gson can't parse it, will set null value.
I create object like this way。
```
new List() {
  {
    add(new Filter() {
      {
        setName("""");
        setCode(""dd"")
      }
    });
    add(new Filter() {
      {
        setName("""");
        setCode(""dd"")
      }
    });
  }
}
```

and gson parse like that
```
'filter':[
    	null,
    	null
    ]
```""u should read the front page about how to due with non static inner class =||= i search issue for inner class and find many same issues，and the answer is gson will not support to this, cause by gson design boundary? #298 
there are other issues about serialize anonymous object, and the answers are will not support:
#1510 
#717
cause of here is open issue #1510 ,so i close mine. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1640Add isEmpty method to JsonArray classGabriel Basilio BritoGabrielBB03/02/20, 10:52:38 PMThe method returns true if the array is empty"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1640) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1640) for more info**.

<!-- ok --> =||= "Add isEmpty method to JsonArray classGabriel Basilio BritoGabrielBB03/02/20, 10:52:38 PMThe method returns true if the array is emptyNaNGabriel Basilio Brito01/14/20, 05:47:23 AM"Add isEmpty method to JsonArray class

The method will return true if the array is empty and false if it's not"1
1643infinite recursion of adaptersigoryan1701/24/20, 11:48:37 AM"I use 2.8.6 version. And firstly i created custom adapters and get StackOverflowError. Then i commented all my custom adapters in GsonBuilder and got following stack trace:
`java.lang.StackOverflowError
	at java.io.StringWriter.append(StringWriter.java:143)
	at java.io.StringWriter.append(StringWriter.java:41)
	at com.google.gson.stream.JsonWriter.beforeValue(JsonWriter.java:650)
	at com.google.gson.stream.JsonWriter.value(JsonWriter.java:417)
	at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(TypeAdapters.java:804)
	at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(TypeAdapters.java:773)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:127)
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:245)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97)
	at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61)
	at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)
`
I'm stupid or it's bug?""The reason that i try serialise class with circular reference.
class A {
A a;
}  =||= I had infinite circular references =||= I might have the same problem; will let you know when I finish counting. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1644com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].signNatsuHanaStarWishsama06/17/20, 02:48:03 PM"Original json: https://api.vtbs.moe/v1/info

Stack trace:

> com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].sign
        at com.google.gson.Gson.fromJson(Gson.java:947)
        at com.google.gson.Gson.fromJson(Gson.java:897)
        at com.google.gson.Gson.fromJson(Gson.java:846)
        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLivers(Live
Utils.java:27)
        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLiverList(L
iveUtils.java:42)
        at io.github.starwishsama.namelessbot.utils.LiveUtils.getBiliLiver(LiveU
tils.java:34)
        at io.github.starwishsama.namelessbot.commands.DebugCommand.groupMessage
(DebugCommand.java:59)
        at cc.moecraft.icq.command.CommandManager.runCommand(CommandManager.java
:130)
        at cc.moecraft.icq.command.CommandListener$CommandRunnable.run(CommandLi
stener.java:80)
        at java.lang.Thread.run(Unknown Source)
Caused by: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 17675 path $[27].sign
        at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1564)
        at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:492)
        at com.google.gson.stream.JsonReader.hasNext(JsonReader.java:415)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.re
ad(ReflectiveTypeAdapterFactory.java:216)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(Type
AdapterRuntimeTypeWrapper.java:41)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.re
ad(CollectionTypeAdapterFactory.java:82)
        at com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.re
ad(CollectionTypeAdapterFactory.java:61)
        at com.google.gson.Gson.fromJson(Gson.java:932)
        ... 9 more

Code:
`    
private static Gson gson = new GsonBuilder().setLenient().create();

    public static List<BiliLiver> getBiliLivers() throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(BotConstants.cfg.getLiveApi()).openConnection();
        conn.connect();
        if (conn.getResponseCode() == HttpURLConnection.HTTP_OK){
            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            return gson.fromJson(br.readLine().trim(), new TypeToken<List<BiliLiver>>(){}.getType());
        }
        conn.disconnect();
        return new ArrayList<>();
    }`

Beans:
BiliLiver.java 
` 
@Data
public class BiliLiver {
    public int mid;
    public String uuid;
    public String uname;
    public int video;
    public int roomid;
    public String sign;
    @SerializedName(""notice"")
    public String announcement;
    @SerializedName(""face"")
    public String faceImgLink;
    public int rise;
    public String topPhoto;
    public int archiveView;
    public int follower;
    public int liveStatus;
    @SerializedName(""recordNum"")
    public int recordNumber;
    @SerializedName(""guardNum"")
    public int guardNumber;
    public LastLive lastLive;
    public int guardChange;
    public List<Integer> guardType;
    public int areaRank;
    public int online;
    @SerializedName(""title"")
    public String liveTitle;
    public long time;

    public boolean isStreaming(){
        return getLiveStatus() == 1;
    }
}`
LastLive.java:
`
@Data
public class LastLive {
    public int online;
    public long time;
}`"Could be that there are some escaped quotes or similar escapable characters in the string return by 'path $[27].sign' of your JSON, which fails on serializing attempt. You will need to sanitize this on the serverside response. This is the only clean and sustainable way. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1645System-dependent line separator when generate jsonIvan MiatselskiALEUT01/28/20, 10:25:53 PM"Currently `newline` method in `JsonWriter` looks like
```
private void newline() throws IOException {
    if (indent == null) {
      return;
    }

    out.write('\n');
    for (int i = 1, size = stackSize; i < size; i++) {
      out.write(indent);
    }
  }
```

As we can see it just prints \n for new line. As result for Windows we have jsons with LF line ends (UNIX standard) instead of standard CRLF for Windows.

As an option to have `out.write(System.lineSeparator());` (it will have LF for UNIX and CRLF for Windows) or even have an option what to use as separator."The problem with your proposal is that Gson will output different JSON depending on the machine it ran on.  We opted for consistency of the response. =||= @inder123 JSON will be the same, just the correct line-endings will be used. Btw, Jackson generated JSON correctly using system-defined line separators. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1646Same @SerializedName for differents variableBROGGI ThomasSkiizoo03/05/20, 10:24:11 AM"Hi,

i wanted to know if there is a way to get this working :

""@SerializedName(value=""value1"", alternate=""value3"")
public String var1;
	
@SerializedName(value=""value2"", alternate=""value3"")
public String var2;""

I'm using two services
- The first one is giving me value1 & value2
- The second one is only giving me value3 so i wanted to match this value for both of my variable


Thanks""Not sure if you can solve this using `@SerializedName`, but you can write your own `TypeAdapter`:
```
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

public class GsonTest {
    public static class Test {
        String var1;
        String var2;
    }
    
    static class MyAdapter extends TypeAdapter<Test> {
        public static final TypeAdapter<Test> INSTANCE = new MyAdapter().nullSafe();
        
        private MyAdapter() { }
        
        @Override
        public Test read(JsonReader in) throws IOException {
            Test t = new Test();
            
            in.beginObject();
            while (in.hasNext()) {
                String name = in.nextName();
                
                if (name.equals(""value1"")) {
                    t.var1 = in.nextString();
                } else if (name.equals(""value2"")) {
                    t.var2 = in.nextString();
                } else if (name.equals(""value3"")) {
                    t.var1 = t.var2 = in.nextString();
                } else {
                    // Only needed if there are more entries in the JSON and you are 
                    // not interested in them
                    in.skipValue();
                }
            }
            in.endObject();
            
            // Maybe validate first that properties existed in JSON and if not throw exception
            return t;
        }
        
        @Override
        public void write(JsonWriter out, Test value) throws IOException {
            throw new UnsupportedOperationException();
        }
    }
    
    public static void main(String[] args) {
        Gson gson = new GsonBuilder()
            // Register your custom type adapter
            .registerTypeAdapter(Test.class, MyAdapter.INSTANCE)
            .create();
        
        Test t = gson.fromJson(""{\""value1\"":\""a\"",\""value2\"":\""b\""}"", Test.class);
        System.out.println(t.var1 + "", "" + t.var2);
        
        Test t2 = gson.fromJson(""{\""value3\"":\""a\""}"", Test.class);
        System.out.println(t2.var1 + "", "" + t2.var2);
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1648Official Gradle Wrapper Validation ActionJonathan LeitschuhJLLeitschuh02/05/20, 11:11:44 PMSee: https://github.com/gradle/wrapper-validation-action"Thanks for the PR. Please add some information to indicate that this works. =||= > Please add some information to indicate that this works.

That's not how this works, you'll need to merge this first. You should, from then on, see the status check on all PR's. I've tested this exact action workflow on many repositories and have proved it works (including against other Google projects). =||= Example:
https://github.com/google/flexbox-layout/pull/531 =||= "Official Gradle Wrapper Validation ActionJonathan LeitschuhJLLeitschuh02/05/20, 11:11:44 PMSee: https://github.com/gradle/wrapper-validation-actionNaNJonathan Leitschuh02/04/20, 04:49:38 PM"Official Gradle Wrapper Validation Action

See: https://github.com/gradle/wrapper-validation-action"1
1649rfcAutthapol Korkaewautthapol-k02/10/20, 12:47:30 PMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1653Fix javadoc doclint HTML warningsMarcono123402/17/20, 10:46:16 PMNaNNaNFix javadoc doclint HTML warningsMarcono123402/17/20, 10:46:16 PMNaNNaNMarcono123402/11/20, 05:00:38 PMFix javadoc doclint HTML warnings1
1654Remove unused filesMarcono123403/02/20, 10:49:48 PMIt appears `gson/docs/javadocs` has been generated and its content is not used anymore, but please let me know if this is incorrect."Thank you for the change. Yes, we should delete these files. 
However, gson/Gson 2.1 notes.txt shouldn't be deleted. =||= It appears `CHANGELOG.md` already covers this:
https://github.com/google/gson/blob/87b1d26d06d47ae709b7e953392257b7cbef1b62/CHANGELOG.md#L165-L171

If not, I would suggest adding the missing information there instead. However it appears it is partially already covered and changes to a test (`TypeHierarchyAdapterTest`) should not be mentioned anyways. =||= "Remove unused filesMarcono123403/02/20, 10:49:48 PMIt appears `gson/docs/javadocs` has been generated and its content is not used anymore, but please let me know if this is incorrect.NaNMarcono123402/11/20, 03:39:05 PM"Remove unused Maven assembly plugin file

Plugin usage has been removed in 2016e95"1
1655Change links from HTTP to HTTPSMarcono123402/17/20, 10:42:28 PMNaNNaNChange links from HTTP to HTTPSMarcono123402/17/20, 10:42:28 PMNaNNaNMarcono123402/11/20, 05:23:24 PMChange links from HTTP to HTTPS1
1656Warning fixesMarcono123409/01/21, 01:09:51 AMFixes some `javac` warnings and implements `DefaultDateTypeAdapter` (internal class) in a type-safer way.Changes have been integrated by #1707. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1661What changed from 2.6.2 to 2.8.2 in fromJson method ?cafebabe1991raul199103/12/20, 09:01:34 AM"input json

{
""constraint"":""^\d+$""
}

`Command`

`gson.fromJson(input_json, JsonElement.class)`

**In 2.6.2,**
The fromJson method removes the single '\\'

**In 2.8.2,**

It throws the exception
> com.google.gson.JsonSyntaxException: com.google.gson.stream.MalformedJsonException: Invalid escape sequence at line 8 column 22 path $[0].constraint
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568)
	at com.google.gson.stream.JsonReader.readEscapeCharacter(JsonReader.java:1559)
	at com.google.gson.stream.JsonReader.nextQuotedValue(JsonReader.java:1014)
	at com.google.gson.stream.JsonReader.nextString(JsonReader.java:815)
	at com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:701)
	at com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:722)
	at com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:714)
	at com.google.gson.internal.bind.TypeAdapters$29.read(TypeAdapters.java:697)
	at com.google.gson.internal.bind.TypeAdapters$35$1.read(TypeAdapters.java:893)
	at com.google.gson.Gson.fromJson(Gson.java:887)
	at com.google.gson.Gson.fromJson(Gson.java:852)
	at com.google.gson.Gson.fromJson(Gson.java:801)
	at com.google.gson.Gson.fromJson(Gson.java:773)""```bash
git log -p gson-parent-2.6.2..gson-parent-2.7 gson/src/main/java/com/google/gson/stream/JsonReader.java
```

There were no many changes but one of them, 3f8726ecafe9c40498255eed1d1893fd665e237b, was the fix you're referring to as your input JSON is invalid since `\d` is not a valid escape sequence:

```diff
diff --git a/gson/src/main/java/com/google/gson/stream/JsonReader.java b/gson/src/main/java/com/google/gson/stream/JsonReader.java
index 7a5e9cbb..20656f6c 100644
--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java
+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java
@@ -1561,8 +1561,11 @@ public class JsonReader implements Closeable {
     case '\'':
     case '""':
     case '\\':
+    case '/':  
+       return escaped;
     default:
-      return escaped;
+       // throw error when none of the above cases are matched
+       throw syntaxError(""Invalid escape sequence"");
     }
   }
```
 =||= Thanks for clearing it out via code reference. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1662Custom parser is not called in case of undefined fieldZoltán Farkasfzoli03/18/20, 10:04:30 PM"First of all here is a sample project with **unit tests**:
https://github.com/fzoli/gson-bugreport

Short description of the bug:
We have a custom data-type. It behaves like an `Optional` wrapper so it is never `null`.
If the JSON does not contain the field, its value should be ""empty"" so there is no need to check `null`.
We could not solve this with `TypeAdapter`. It works if the field is `null` in the JSON, **but** if the field is `undefined` then `TypeAdapter#read` is not called.""Gson does not touch missing values for, I guess, performance reasons and simplicitiy. You can easily implement a post-processing type adapter that would set the unaffected null-fields supposed to be optional to their default values (must precede `ValidatingTypeAdapterFactory` in the `gsonBuilder`):

```java
final class OptionalTypeTypeAdapterFactory
		implements TypeAdapterFactory {

	private static final TypeAdapterFactory instance = new OptionalTypeTypeAdapterFactory();

	private OptionalTypeTypeAdapterFactory() {
	}

	static TypeAdapterFactory get() {
		return instance;
	}

	@Nullable
	@Override
	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
		final Collection<Field> optionalTypeFields = classesOf(typeToken.getRawType())
				.stream()
				.flatMap(c -> Stream.of(c.getDeclaredFields()))
				.filter(field -> field.getAnnotation(OptionalType.class) != null)
				.peek(field -> field.setAccessible(true))
				.collect(Collectors.toList());
		if ( optionalTypeFields.isEmpty() ) {
			// if the class does not have any OptionalType-annotated fields, delegate it elsewhere
			return null;
		}
		final TypeAdapter<T> delegateTypeAdapter = gson.getDelegateAdapter(this, typeToken);
		return new TypeAdapter<T>() {
			@Override
			public void write(final JsonWriter out, final T value)
					throws IOException {
				delegateTypeAdapter.write(out, value);
			}

			@Override
			public T read(final JsonReader in)
					throws IOException {
				final T read = delegateTypeAdapter.read(in);
				normalizeAbsents(read, optionalTypeFields);
				return read;
			}
		};
	}

	private static Collection<Class<?>> classesOf(final Class<?> clazz) {
		final List<Class<?>> classes = new ArrayList<>();
		for ( Class<?> c = clazz; c != null && c != Object.class; c = c.getSuperclass() ) {
			classes.add(0, c);
		}
		return classes;
	}

	private static void normalizeAbsents(final Object o, final Iterable<Field> optionalTypeFields) {
		for ( final Field field : optionalTypeFields ) {
			try {
				final Object fieldValue = field.get(o);
				if ( fieldValue == null ) {
					final Class<?> fieldType = field.getType();
					final Object absent;
					// Maintain the supported classes somehow...
					if ( fieldType == PhoneNumber.class ) {
						absent = PhoneNumber.absent();
					} else {
						throw new UnsupportedOperationException(""Cannot normalize "" + fieldType);
					}
					field.set(o, absent);
				}
			} catch ( final IllegalAccessException ex ) {
				throw new RuntimeException(ex);
			}
		}
	}

}
```

P.S. Gson has a special ""extra"" code to implement common tasks, but these are not the core Gson: https://github.com/google/gson/tree/master/extras/src/main/java/com/google/gson/interceptors
P.P.S. Well-designed sample project! =||= Thanks for the working solution :-)

Here is my solution based on the code snippet:
https://github.com/fzoli/gson-bugreport/tree/0149a48a6e75d766e7021d044e73f538a6fe1887

I implemented a simple `PhoneNumberTypeAdapter` so it can handle the `present` and `null` cases.
`DefaultValueFactoryContainer` holds a strategy to create an empty `PhoneNumber` and `OptionalTypeTypeAdapterFactory` uses that immutable container.

I accept that Gson does not touch missing values so I close the issue. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1663How to serialize an object to a list of one elements with gsonlanpangzibestbugwriter03/26/20, 02:14:30 PM"I have some json string like this:
example1
`{
  ""path"":{
    ""start"":""abc""
  },
  ""name"":""Fork1""
}`

example2
`{
  ""path"":[{
    ""start"":""abc""
  },
  {
    ""start"":""def""
  }],
  ""name"":""Fork1""
}`

and I want to serialize with **one** JAVA object like this:

    @Data
    public static class ForkNode {
        private List<Path> path;
        private String name;
    }

    @Data
    public static class Path {
        private String start;
    }
    new Gson().fromJson(jsonStr, ForkNode.class)

but it will throw an exception 
`IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 2 column 11 path $.path`

So how do I treat the first example as a list of one elements? 
Or is there any way I can serialize two different types of json strings with one object?""> I don't think it is a good way to serialize two different types of json strings with ONE object.
> 
> For example 1, the Object should be like this:
> 
> @DaTa
> public static class ForkNode {
> // only one path
> private Path path;
> private String name;
> }
> 
> @DaTa
> public static class Path {
> private String start;
> }
> new Gson().fromJson(jsonStr, ForkNode.class)
> While For example 2, the Object should be like this:
> 
> @DaTa
> public static class ForkNode {
> // several paths
> private List path;
> private String name;
> }
> 
> @DaTa
> public static class Path {
> private String start;
> }
> new Gson().fromJson(jsonStr, ForkNode.class)
> In JSON:
> 
> Objects are enclosed directly in curly brackets {} While JSON
> Arrays that are enclosed in square brackets [] inside JSON Objects.
> One more thing, If you do really want to do that, I think you need to implement a custom deserializer by yourself. Please ref the doc of Gson.

Why are your answers the same? Are you the same person?
https://stackoverflow.com/a/60824041/3126580 =||= (The copy/paste person has removed their comment addressed below.)
It's kind of shame copying/pasting someone else's quotation not even giving a link to the source and missing the original answer author. Especially, copying/pasting an answer to the cross-posted question of presumably the same author who would probably read the original answer first. Shame.

@bestbugwriter 
The _**de**serialization_ problem you're facing is pretty common for JSON documents generated by serializers that save two characters for `[` and `]` when serializing a single element array. Please refer [Make GSON accept single objects where it expects arrays](https://stackoverflow.com/questions/43412261/make-gson-accept-single-objects-where-it-expects-arrays) that addresses the same issue.

I believe the issue can be closed as ""not a bug"". Thanks. =||= @lyubomyr-shaydariv thanks, it is not a bug. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1668TypeAdapter only appears as AbstractClassLorenz NickelLorenzNickel05/21/20, 10:10:45 PMFixes https://github.com/google/gson/issues/1658"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1668) for more info**.

<!-- need_sender_cla --> =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1668) for more info**.

<!-- ok --> =||= Has been fixed by  #1693 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1669Gson @Expose annotations doesn't work on kotlin data classesBrill Pappinbpappin04/08/20, 02:31:30 PM"The @Expose annotation is ignored by GSON when applied to a Kotlin data class. For example:

data class MyDataClass (@Expose val firstValue:String, val secondValue:String)

println(GsonBuilder()
            .excludeFieldsWithoutExposeAnnotation()
            .create().toJson(MyDataClass(""first"", ""second"")))

output:
{}

you mucst not set the exclude option to get any output""Works fine for me. What versions of Gson and the Kotlin runtime are you using? =||= Android Studio 3.6.1
Gson 2.8.6
Kotlin 2.1.4

I've been messing with it for a while. If you try @get:Expose you get an error that you can't use it on the value property target, or something like that. It's just an annotation in java that doesn't know the difference.

it *does* serialize, it just ignores the Expose annotation, and exposes all value properties.
 =||= It appears i may be mistaken.

I'm not sure what caused gson not to handle the '@'Expose in my previous tests, but if I set up a basic clean test for just this ticket, it works just fine.

So, I will close this ticket as bogus, but I will include the test I wrote to check it.

```kotlin
class GsonKotlinTest {

    private lateinit var poko: Poko
    private lateinit var gson: Gson

    @Before
    fun setUp() {
        gson = GsonBuilder()
            .excludeFieldsWithoutExposeAnnotation()
            .create()

        poko = Poko(one = ""1 (one)"", two = ""2 (two)"", three = ""3 (three)"")
    }


    @Test
    fun onlyExposedPropertiesAreIncludedInJson() {
        val actual = gson.toJson(poko)
        assertEquals(""{\""mytwo\"":\""2 (two)\""}"", actual)
    }

    data class Poko(
        val one: String,
        @Expose @SerializedName(""mytwo"") val two: String,
        @Expose(serialize = false) val three: String
    )
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1672Re-add & fix testStringsWithRawChineseCharactersSerialization()Lorenz NickelLorenzNickel05/22/20, 09:13:13 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1673New getAsStringByForce method added.AKASH YADAVakashyadav2011199204/10/20, 09:12:01 PM"This new method, in addition to what getAsString method has, also checks for null element and returns """" if it is null. It helps when you have large number json attributes and every attribute needs to be checked for null.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1673) for more info**.

<!-- need_sender_cla --> =||= > @googlebot I signed it!

 =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1673) for more info**.

<!-- ok --> =||= > Okay, I'm not talking about the usefulness of this feature or anything, but just from the code perspective, you could and probably respecting the DRY-principle should re-use the `getAsString()` method here:
> 
> ```java
> @Override
> public String getAsStringByForce() {
>   if(value == null) {
>     return """";
>   }
>   return getAsString();
> }
> ```

Didn't came to me. Thanks for the suggestion. =||= @LorenzNickel I have made the changes suggested by you. Thanks. =||= Thanks, additionally I'd encourage you to add test-coverage for this functionality. =||= @LorenzNickel test-coverage added for getAsStringByForce(). =||= Okay I'm not sure about the following but:
- regarding your test, shouldn't you use something like `json = new JsonPrimitive(null);`, because you want the value of the json to be null, not the json itself?
- if the point above is true, this shouldn't be allowed, since `$Gson$Preconditions.checkNotNull`, which is part of every constructor, will cause the instantiation of every JsonPrimitve with a null-value to fail? Therefore does you method even make sense, because if I got this right, the value must never be null.

I'm not really into gson, so I might be wrong here, feel free to correct me in this case.

I'm a bit confused about this right now, I'll also try to figure out how exactly the JsonPrimitive works in the next days when I find time, then I can also clarify this myself. =||= @LorenzNickel 
{
""id"":""123"",
""name"":""Akash""
}
If for above json, JsonObject.getAsJsonPrimitive(""name""), it will result in ""Akash"", but for below json,
{
""id"":""123"",
}
now, JsonObject.getAsJsonPrimitive(""name"") will throw null pointer exception. 
getAsStringByForce() will handle this and will return """". This will spare us the null check for each attribute.
This method will be helpfull where primitive attributes are not fixed and may or may not be present.

Please let know if this clears your concerns or not. =||= Thanks for the explanation, that was clear enough 👍  =||= @LorenzNickel 
Sorry, this is my first time. Is there anything pending from side to get it merged? What's the next step? =||= You need to wait for approval from someone with write access, so as long as you don't get any comments, you just have to wait. =||= I don't see any reason of adding such a method:

1. This merely makes the API bloated without any significant convenience. Many languages have a so-called Elvis operator that can hold such a case right using the language facilities (Groovy, C#, Kotlin). In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava, or bulild a lazy overload so that the right-hand operand could only be evaluated when necessary, or use `Optional<T>` (which I'm not a fan of), or use `@Nullable`/`@Nonnull` static analysis support.
1. This would only add the String support, but this is not the only ""primitive"" value: there are booleans and numbers too.
1. Having such a method would encourage bad practices: `""""` is not a null and vice versa, `0` is not a null and vice versa, `false` is not a nul too.
1. Some languages (C#, Kotlin) support extension methods that can have the same effect and usually are designed for methods that have such convenience and utility purposes. =||= > I don't see any reason of adding such a method:
> 
> 1. This merely makes the API bloated without any significant convenience. Many languages have a so-called Elvis operator that can hold such a case right using the language facilities (Groovy, C#, Kotlin). In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava, or bulild a lazy overload so that the right-hand operand could only be evaluated when necessary, or use `Optional<T>` (which I'm not a fan of), or use `@Nullable`/`@Nonnull` static analysis support.
> 2. This would only add the String support, but this is not the only ""primitive"" value: there are booleans and numbers too.
> 3. Having such a method would encourage bad practices: `""""` is not a null and vice versa, `0` is not a null and vice versa, `false` is not a nul too.
> 4. Some languages (C#, Kotlin) support extension methods that can have the same effect and usually are designed for methods that have such convenience and utility purposes.

Thanks for such a detailed explanation. =||= > In Java, that does not support the operator, one can use an eager Elvis-like `MoreObjects.firstNonNull` from libraries like Google Guava

Java 9 also added [`Objects.requireNonNullElse`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Objects.html#requireNonNullElse(T,T)). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1675gson : get value of a field in a particular record based on value of other field in the same record out of an array of recordsA. K. Puvvadaakpuvvada04/09/20, 11:14:44 PM"
I Have JSON like below:

```
{
    ""FuncName"": ""PYMT"",
    ""InputFields"": [
        {
            ""FieldName"": ""I_KUNNR"",
            ""Value"": ""2354234""
        },
        {
            ""FieldName"": ""I_OPEN_ITEM"",
            ""Value"": ""X""
        },
        {
            ""FieldName"": ""I_SOURCE_CODE"",
            ""Value"": ""TV""
        },
        {
            ""FieldName"": ""I_NUMBER_MONTHS"",
            ""Value"": ""12""
        }
    ],
    ""InputTableName"": null
}
```

I want to get value in 'Value' field, based on value in 'FieldName' field in a single statement. Something like -> `jsonObject.getAsJsonArray(""InputFields"").get(0).getAsJsonObject()[get(""FieldName"").getAsString().equals(""I_KUNNR"")].get(""Value"").getAsString());`

Is there as way for that? I am using Java by the way.""For Java 8, `JsonArray` cannot return a stream easily so that you could write a one-liner, and probably the closest thing here is:

```java
StreamSupport.stream(root.getAsJsonObject().getAsJsonArray(""InputFields"").spliterator(), false)
	.filter(jsonElement -> jsonElement.getAsJsonObject().getAsJsonPrimitive(""FieldName"").getAsString().equals(""I_KUNNR""))
	.findFirst()
	.map(jsonElement -> jsonElement.getAsJsonObject().getAsJsonPrimitive(""Value"").getAsString())
	.get()
```

Or, use a special querying tool, e.g. JsonPath:

```java
private static final Configuration configuration = Configuration.builder()
	.jsonProvider(new GsonJsonProvider())
	.build();
..
private static final JsonPath jsonPath = JsonPath.compile(""$.InputFields[?(@.FieldName=='I_KUNNR')].Value"");
...
((JsonArray) jsonPath.read(root, configuration))
	.get(0)
	.getAsString()
```

Both return `2354234`. I think the issue can be closed? =||= Thanks, that helped. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1676Gson throws IllegalStateException when attempting to parse List or List wrapper classJ-Daniel-S04/12/20, 10:16:23 AM"Good evening,

The question is linked to below.  I can repeat it here if this is inappropriate.  I also want to add that the exception does not occur if I convert to JSON String and then convert back to the class, a list of the classes, or a wrapper class for the list.  When using Files.newBufferedWriter() or Files.write() the exceptions listed on the stack overflow post.  When visually inspecting the Strings saved to file against the same String written to the console they appear identical.  I should also mention that I get the same JSON String whether using types or whether just using StocksList.class (or Stock.class). 
 I have not (as of this post) received any replies so any help Would be quite greatly appreciated.

https://stackoverflow.com/questions/60769033/gson-throws-illegalstateexception-when-attempting-to-parse-list

Thank you for your time.""All the code you've provided can be greatly fixed, improved and refactored.

* No need to create multiple `Gson` instances: they are relatively expensive to instantiate, but are designed to be thread-safe and immutable therefore can be reused.
* No need to serialize to and deserialize from `java.lang.String` -- this is just expensive as long as it has to create multiple strings in the heap merely wasting the heap and time decreasing the performance.
* Why it does **not** work in your case is that `Files.readAllBytes(...)` returns `byte[]` you're trying to convert to a string. In Java, no arrays have an intuitive `toString` implementation (you can check it by simply printing any byte array to `System.out`). In order to convert it to a string (that might be a memory-consuming instance), `new String(byte[])` (or even `new String(byte[], Charset)`) is an appropriate way.
* I don't really remember how `Files` works, but there's probably no need to check the file to exist: they can be overwritten without any additional checks.
* No type tokens are necessary in this case: `StockList.class` is a `Type` too.

Essentially, all is you need is just as follows:

```java
private static final Gson gson = new GsonBuilder()
		.disableHtmlEscaping()
		.disableInnerClassSerialization()
		.create();

public static void main(final String... args)
		throws IOException {
	final StocksList before = new StocksList(ImmutableList.of(new Stock(""INTC""), new Stock(""HCC"")));
	final Path path = Paths.get(""doc.json"");
	write(path, before);
	final StocksList after = read(path);
	System.out.println(after.equals(before));
}

private static void write(final Path path, final StocksList stocks)
		throws IOException {
	try ( final Writer writer = new OutputStreamWriter(new FileOutputStream(path.toFile())) ) {
		gson.toJson(stocks, writer);
	}
}

private static StocksList read(final Path path)
		throws IOException {
	try ( final Reader reader = new InputStreamReader(new FileInputStream(path.toFile())) ) {
		return gson.fromJson(reader, StocksList.class);
	}
}
```

That's it. Also, `write` and `read` methods can be improved by making them generic and accepting type information. The stock-stuff classes I've reconstructed for simplicity:

```java
final class Stock {

	final String ticker;

	Stock(final String ticker) {
		this.ticker = ticker;
	}

}
```

```java
final class StocksList {

	final List<Stock> stocks;

	StocksList(final List<Stock> stocks) {
		this.stocks = stocks;
	}

}
``` =||= Thank you very much for your answer.  Your solution resulted in a working parser class. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1678How to transform empty with [] in TypeAdapterFactoryTiimorVeiZhang04/16/20, 12:58:18 AM"For example:
```
[
  {
    id: ""0"",
    screenshots: ""null""
  },
  {
    id: ""1"",
    screenshots: """"
  },
  {
    id: ""2"",
    screenshots: [
      ""http:\/\/line.myott.net:80\/images\/73901_tv_backdrop_0.jpg"",
      ""http:\/\/line.myott.net:80\/images\/73901_tv_backdrop_1.jpg""
    ]
  }
]
```

`screenshots` is array list, I want to covert it with ""[]"" when it is empty or size is 0.
Or it will case **Expected BEGIN_ARRAY but was STRING**.


I create a `TypeAdapterFactory`, but I don't know how to do. Please give me a help, thanks.
And I follow this step [stackoverflow](https://stackoverflow.com/questions/37251521/one-json-param-contains-data-in-array-or-object-how-to-check-data-is-array-or-o), but it doesn't work."I also try to convert screenshot to string, but it cause another exception: `Expected STRING but was: BEGIN_ARRAY` =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1685doc(UserGuide): mention TypeAdapters classSimon Legnersimon0405/02/20, 08:01:44 AM"In the section Built-in Serializers and Deserializers,
* clarify that URL, URI are only examples
* link to TypeAdapters class"NaNdoc(UserGuide): mention TypeAdapters classSimon Legnersimon0405/02/20, 08:01:44 AM"In the section Built-in Serializers and Deserializers,
* clarify that URL, URI are only examples
* link to TypeAdapters class"NaNSimon Legner04/30/20, 09:35:52 AMdoc(UserGuide): mention TypeAdapters class1
1687Fix ISO8601UtilsTest failing on systems with UTC+XMarcono123405/14/21, 12:19:27 AM"Previously `ISO8601UtilsTest.testDateFormatString()` would fail on systems where the time zone is UTC+X because `getTime()` returned ""2018-06-24"" for them.

Additionally the tests which previously changed the system locale and time zone have been rewritten to create a UTC calendar instead. Setting locale seems to not be necessary because `ISO8601Utils.parse(...)` does not do that either.""Hey, I had the same problem while running the test and also created a PR for it (https://github.com/google/gson/pull/1665), where I use another approach to the same problem =||= Thanks for pointing this out, I did not search before creating the pull request, which I should probably have done.

I am biased since I created this pull request, but I prefer this approach because
- It also sets `Locale.US`, so it behaves the same as `ISO8601Utils.format`, not sure if otherwise the test could fail for certain Locales
- It removes changing the system time zone and locale since that is error-prone if a test forgets to reset them and also prevent concurrent use =||= Thanks! I agree that the approach here seems reasonable, even if it is a bit more complicated than the simplest possible fix. =||= "Fix ISO8601UtilsTest failing on systems with UTC+XMarcono123405/14/21, 12:19:27 AM"Previously `ISO8601UtilsTest.testDateFormatString()` would fail on systems where the time zone is UTC+X because `getTime()` returned ""2018-06-24"" for them.

Additionally the tests which previously changed the system locale and time zone have been rewritten to create a UTC calendar instead. Setting locale seems to not be necessary because `ISO8601Utils.parse(...)` does not do that either."NaNMarcono123405/02/20, 10:34:08 PM"Fix ISO8601UtilsTest failing on systems with UTC+X

Previously ISO8601UtilsTest.testDateFormatString() would fail on systems
where the time zone is UTC+X because getTime() returned ""2018-06-24"" for them.

Additionally the tests which previously changed the system locale and time
zone have been rewritten to create a UTC calendar instead. Setting locale
seems to not be necessary because ISO8601Utils.parse(...) does not do that
either."1
1688Fix #1684: Allow explicit JSON null for JsonElementMarcono123408/17/20, 12:05:18 PM"Adds a new annotation `@ExplicitlyNullableJsonElement` which can be placed on fields of type JsonElement or subclasses. When deserialized using the reflection-based approach, `null` instead of JsonNull will be used as value. This allows explicit `null` JSON values for JsonElement subclasses which would otherwise cause an exception (except for JsonNull).

Note that this does not cover all use cases where one might want `JsonElement` or some of its subclasses to be deserialized as `null`, see discussion in #1684.
Additionally a user might also be able to use `Object` instead of `JsonElement` as type of fields to prevent the issue this pull request tries to solve. However, numbers are treated differently: Deserializing `Object` treats all numbers as  `double` (see `ObjectTypeAdapter`).

E.g. the following currently throws an exception:
```
class MyClass {
  JsonObject f;
}

new Gson().fromJson(""{\""f\"": null}"", MyClass.class);
```

With the changes of this pull request, the following would be possible:
```
class MyClass {
  @ExplicitlyNullableJsonElement
  JsonObject f;
}

new Gson().fromJson(""{\""f\"": null}"", MyClass.class);
```

Edit: It would also be possible to solve this by using the `@JsonAdapter` annotation on the fields and implementing a `TypeAdapterFactory` which creates type adapters which return `null` in case of JSON `null` or otherwise delegate to the default adapter. Edit 2: Probably not possible due to  #1028.""Closing this pull request because the same functionality provided by this pull request can indeed be implemented using `@JsonAdapter`:
```java
/**
 * Factory for deserializing {@link JsonElement} and all of its subclasses as
 * {@code null} instead of {@code JsonNull.INSTANCE}.
 * 
 * <p>Must <b>only</b> be used in combination with {@link JsonAdapter @JsonAdapter}
 * on fields:
 * <pre>
 * class MyClass {
 *     &#x40;JsonAdapter(NullableJsonElementTypeAdapterFactory.class)
 *     JsonElement f;
 * }
 * </pre>
 */
public class NullableJsonElementTypeAdapterFactory implements TypeAdapterFactory {
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        if (JsonElement.class.isAssignableFrom(type.getRawType())) {
            // Due to Gson issue #1028 have to call getAdapter(...) instead of getDelegateAdapter(...)
            TypeAdapter<JsonElement> delegateAdapter = gson.getAdapter(JsonElement.class);
            
            // Safe due to type check at beginning
            @SuppressWarnings(""unchecked"")
            TypeAdapter<T> adapter = (TypeAdapter<T>) new NullableJsonElementTypeAdapter(delegateAdapter);
            return adapter;
        } else {
            return null;
        }
    }
    
    private static class NullableJsonElementTypeAdapter extends TypeAdapter<JsonElement> {
        private final TypeAdapter<JsonElement> delegate;
        
        public NullableJsonElementTypeAdapter(TypeAdapter<JsonElement> delegate) {
            this.delegate = delegate;
        }
        
        @Override
        public void write(JsonWriter out, JsonElement value) throws IOException {
            delegate.write(out, value);
        }

        @Override
        public JsonElement read(JsonReader in) throws IOException {
            if (in.peek() == JsonToken.NULL) {
                return null;
            } else {
                return delegate.read(in);
            }
        }
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1689Prevent custom JsonElement subclassesMarcono123405/18/20, 11:08:48 PM"Adds a package-private constructor to JsonElement to prevent custom subclasses. JsonElement models the JSON data types so there should probably be no need for custom subclasses because the existing JsonElement subclasses cover all of them. Additionally custom subclasses would cause issues during (de-)serialization because the default type adapter does not support them.

However, maybe there are use cases (in unit tests?) where custom subclasses are desired?
Would it be better to only deprecate the public constructor for now?""Yeah, we didn't envision JsonElement to be subclassed. However, at this point in time, it will be a backward incompatible change, and not worth making. =||= ~Should the public constructor be marked as deprecated at least?~

Edit: Nevermind, creating custom subclasses might not actually be that problematic because the default type adapter only calls the `JsonElement` methods, but does not perform and checks on the class of the object. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1691GitHub does not check Travis build anymoreMarcono123405/18/20, 10:56:22 PM"It appears GitHub is not checking the Travis build anymore. This might mean that a broken build would therefore pass (show a green checkmark) on GitHub.

See 55acc23 which when clicking on the green checkmark shows that Travis was checked.
And compare it with recent commits or pull requests.
You will see that they only check CLA and ""Validate Gradle Wrapper"".

However, Travis is still building the project, which can be seen on https://travis-ci.org/github/google/gson, but GitHub is for some reason not considering it anymore in its commit checks.""Thanks for pointing that out. Would welcome a PR to fix the issue. =||= I assume this has to be managed in the GitHub project settings, though I am not sure.

Anyways, it looks like this has been resolved because the Travis build was checked for ceae88b again, so I am closing this issue. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1693Update proguard.cfgMarius VolkhartMariusVolkhart05/13/20, 07:50:00 PMTypeAdapter is an abstract class, and R8 warns about this during the build.NaNUpdate proguard.cfgMarius VolkhartMariusVolkhart05/13/20, 07:50:00 PMTypeAdapter is an abstract class, and R8 warns about this during the build.NaNMarius Volkhart05/12/20, 05:03:50 PM"Update proguard.cfg

TypeAdapter is an abstract class, and R8 warns about this during the build."1
1694Json htmlSave set falseDalerXYZDaller999905/14/20, 01:20:37 PM"In json I need to use symbols ""<"" and "">"" and others.
But when I use it, it looks like: `""Data"":""\u003SomeText\u003e""`
I need : `""Data"":""<SomeText>""`
How can I make this?

I found in JsonWriter and Gson classes - htmlSave parameter, but i can't to change it.""Maybe if somebody will have some problems with this. I have a decision:
`Gson gson = new GsonBuilder().disableHtmlEscaping().create();` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1696Unable to deserialize JsonNull as Option.none() in customized JsonDeserializerLuo Chenluochen199006/17/20, 05:03:45 AM"I'm trying to customize the Serializer/Deserializer for Option<T> (using io.vavr.control.Option, or Optional<T> if using java.utils.*, which is similar here).

And there are 2 requirement for what I want:

1. serialize `Option.none()` as `null` in JSON, and `Option.some(""hello"")` as `""hello""`, so that there is no redundancy (I'm assuming that both the value inside `Option.some` and the value itself are @NotNull).
2.  Option<T> value keep not changed after serialize and deserialze.

And following is my code:

```
@Override
public Option<T> deserialize(JsonElement json, Type typeOfRes, JsonDeserializationContext context) {
     if (json.isJsonNull()) {
          return Option.none();  //NOTE: this branch seems never reached!
     } else {
          return Option.some(context.deserialize(json, typeOfT));
     }
}
```

And the corresponding test code:

```
JsonElement jsome = jsonParser.parse(""\""abcd\"""");
JsonElement jnone = jsonParser.parse(""null"");
Object r1 = JsonHelper.gson.fromJson(jsome, new TypeToken<Option<String>>(){}.getType());
Object r2 = JsonHelper.gson.fromJson(jnone, new TypeToken<Option<String>>(){}.getType());
System.out.println(""r1: "" + r1); // `Some(""abcd"")`
System.out.println(""r2: "" + r2); // `null`  (expecting `Option.none()`)
```

My entire example code: https://gist.github.com/luochen1990/bd63b2d6e9c7c9b77961208920ec3edf

related SO questions:
- https://stackoverflow.com/questions/33301036/gson-ignore-null-when-deserializing-object
- https://stackoverflow.com/questions/61892161/how-to-customize-serializer-and-deserializer-for-option-in-gson-without-redundan""It appears the `GsonBuilder.registerTypeAdapter` makes `JsonSerializer` and `JsonDeserializer` `null`-safe, i.e. they are not called for `null` values, see #1697.

So you should use `TypeAdapter` respectively `TypeAdapterFactory` instead. See [this StackOverflow answer](https://stackoverflow.com/a/25078422/) for a working implementation (except that `read(...)` has to consume the `null`, which is currently wrong in the answer). =||= @Marcono1234 Thanks very much!

I have solved this problem referecing your SO answer, and [here](https://gist.github.com/luochen1990/319de4c73f7269d197a2a3fe4523a1f7) is my full code, just for anybody which might need it. =||= No problem.
Instead of `in.peek() != JsonToken.END_ARRAY` you can also use [`in.hasNext()`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/stream/JsonReader.html#hasNext()). =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1698Gson is unable to properly serialize and then deserialize Kotlin HashMap<T1, T2>linuxctlinuxct05/20/20, 05:13:16 PM"I've written a code in which I am serializing an object to store it and later retrieve it, from within the same application.  

Steps I followed: 
- Setup a data class for the object I'm dealing with

```kotlin
...
import kotlin.collections.HashMap

object AchievementsModel {
    data class UserCalendarModel(var achievementList: HashMap<LocalDateTime, DailyMilestonesAchieved>)
    data class DailyMilestonesAchieved(var achievedA: Boolean, var achievedB: Boolean, var achievedC: Boolean)
}
```

- Set up an initialization and serialization code
```kotlin
val value = AchievementsModel.UserCalendarModel(hashMapOf())
val currentAchievements = value as AchievementsModel.UserCalendarModel
currentAchievements.achievementList[LocalDateTime.now().truncatedTo(ChronoUnit.DAYS)] =
  AchievementsModel.DailyMilestonesAchieved(
    achievedA = false,
    achievedB = false,
    achievedC = false
  )
val gson = Gson()
val serialized = gson.toJson(value)
// Store the value
```

- Check that the serialized contents here are:
```json
{""achievementList"":{""2020-05-20T00:00"":{""achievedA"":false,""achievedB"":false,""achievedC"":false}}}
```

- Set up a deserialization code
```kotlin
val serialized = //retrieve the value above as String!
val gson = Gson()
gson.fromJson(serialized, AchievementsModel.UserCalendarModel::class.java)
```
Which causes the following exception:
`com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.`

I believe because of the way HashMap<T1,T2> is serialized by Gson it expects a different token to begin deserializing it, or I just may be doing something wrong... 

Full Stacktrace: 
```prolog
    com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186)
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)
        at com.google.gson.Gson.fromJson(Gson.java:927)
        at com.google.gson.Gson.fromJson(Gson.java:892)
        at com.google.gson.Gson.fromJson(Gson.java:841)
        at com.google.gson.Gson.fromJson(Gson.java:813)
        at it.androidclient.Views.ReadActivity$onCreate$$inlined$apply$lambda$1.onClick(ReadActivity.kt:82)
        at android.view.View.performClick(View.java:7259)
        at android.view.View.performClickInternal(View.java:7236)
        at android.view.View.access$3600(View.java:801)
        at android.view.View$PerformClick.run(View.java:27892)
        at android.os.Handler.handleCallback(Handler.java:883)
        at android.os.Handler.dispatchMessage(Handler.java:100)
        at android.os.Looper.loop(Looper.java:214)
        at android.app.ActivityThread.main(ActivityThread.java:7356)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:491)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)
     Caused by: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 22 path $.achievementList.
        at com.google.gson.stream.JsonReader.beginObject(JsonReader.java:385)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:215)
        at com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRuntimeTypeWrapper.java:41) 
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:186) 
        at com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145) 
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131) 
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222) 
        at com.google.gson.Gson.fromJson(Gson.java:927) 
        at com.google.gson.Gson.fromJson(Gson.java:892) 
        at com.google.gson.Gson.fromJson(Gson.java:841) 
        at com.google.gson.Gson.fromJson(Gson.java:813) 
        at it.androidclient.Views.ReadActivity$onCreate$$inlined$apply$lambda$1.onClick(ReadActivity.kt:82) 
        at android.view.View.performClick(View.java:7259) 
        at android.view.View.performClickInternal(View.java:7236) 
        at android.view.View.access$3600(View.java:801) 
        at android.view.View$PerformClick.run(View.java:27892) 
        at android.os.Handler.handleCallback(Handler.java:883) 
        at android.os.Handler.dispatchMessage(Handler.java:100) 
        at android.os.Looper.loop(Looper.java:214) 
        at android.app.ActivityThread.main(ActivityThread.java:7356) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:491) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) 
```  

Edit: I'm currently using com.google.code.gson:gson:2.8.6 on Android Studio 3.6.3, Builtool 29.0.2, Kotlin Runtime version 1.3.71.""The issue is actually the fact Gson is unable to deserialize LocalDateTime properly on it's own without a proper TypeAdapter fed to it, not the HashMap, so I was looking at this wrongly all the time. 

The solution went through adding a custom GsonBuilder().registerTypeAdapter specifically for LocalDateTime so it would be able to parse ""2020-05-20T00:00"" back into a proper date. 

```kotlin
val gson = GsonBuilder().registerTypeAdapter(
  LocalDateTime::class.java,
  JsonDeserializer<Any?> { json, _, _ ->
    LocalDateTime.parse(json.asJsonPrimitive.asString)
  }).create()
gson.fromJson(serialized, AchievementsModel.UserCalendarModel::class.java)
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1707Make dependency on java.sql optionalMarcono123408/25/21, 06:26:59 PM"Note: This is based on #1656
Fixes #1629

Makes the dependency on the `java.sql` module optional. If its classes are present at runtime, the respective type adapters will be used, otherwise Gson will not try to load the classes and will therefore not fail with a `ClassNotFoundException` anymore. The entry point for all SQL type adapters is now `SqlTypesSupport`.

I am however, not that familiar with the module system so it would be good if others who are more familiar with it can check if this is a sane implementation.

Especially #1500 (@Degubi) is confusing me because from what I understood about the JPMS `requires transitive` is only so modules depending on Gson would also be ""reading"" `java.sql`, which however makes no sense because Gson does not expose these types publicly anywhere, so it should not provide them transitively. To my understanding `requires` should have been enough to require `java.sql` being present at runtime, however based on the `ClassNotFoundException` reports this was not the case?
Or are they using tools (as it is the case [here](https://stackoverflow.com/q/57222110) which break the module system)? Though that would be a rather common issue then, see the question [""java.sql.Time exception""](https://stackoverflow.com/q/50877484).

Also pinging @nicolaiparlog, if you have any spare time, any hints regarding the JPMS would be appreciated :)
Sorry to pester you in case you don't have any time.""Don't worry, I don't pester easily. :wink: I'm happy to provide input, but keep in mind that I don't know GSON or the diff in detail (don't have the time to study them right now), so I may be off. Caveat emptor, I guess. Also, I wrote [a blog post about optional dependencies](https://blog.codefx.org/java/module-system-optional-dependencies/) that may help understand the feature.

As I understand the situation, GSON only needs to work with _java.sql_ types if the user already uses them, right? I.e. there's never a situation where a GSON user doesn't need the _java.sql_ module, but GSON uses its types anyway. If that is so, `requires static` is the right way to go.

Note that `requires static` alone does not make the module available at run time. That means, even if GSON is launched on a Java runtime that contains the module, it will only be available at run time if some other module requires it (or the app is launched from the class path).

In case you're interested, the blog post shows a method `isModulePresent(String)` that, well, does what the name suggests. :grin: You can use it (I hereby provide it under the Apache Software License 2.0) if you need to programmatically determine whether _java.sql_ made it into the module graph.

I agree with your confusion about #1500. Turning `requires` into `requires transitive` doesn't make a difference regarding its presence at run time - it is present either way ([another vlog post](https://blog.codefx.org/java/implied-readability/)). I agree with [Alan Bateman's comment](https://stackoverflow.com/questions/50877484/java-sql-time-exception#comment88763419_50877484) - this looks like class loader shenanigans to me. =||= Thanks for your clarification! Yes Gson does not need any `java.sql` types on its own, it only provides (de-)serialization support for them in case they are used.

Your `isModulePresent(String)` is quite verbose for what it tries to solve. Though maybe there is no better / more complete way of doing this (I have created a [StackOverflow question](https://stackoverflow.com/q/61703051) for that). However, Gson cannot use this solution because it wants to support Java 6, so this pull requests checks using `Class.forName` for a class present in `java.sql`, assuming that the other classes must be present then as well:
https://github.com/google/gson/blob/a4a235e14a63b9a4f902805641f1160c6bf5aa93/gson/src/main/java/com/google/gson/internal/sql/SqlTypesSupport.java#L37-L40

Regarding previously reported `ClassNotFoundException` and class loader shenanigans: It looks like Gson itself does not create or uses any special class loaders, so I assume the callers have a broken setup then. =||= Heres another example of the same problem this time with CLosureCompiler, so+++ from me as well.

```java
[INFO]         java.lang.SecurityException: Prohibited package name: java.sql
[INFO]         	at java.base/java.lang.ClassLoader.preDefineClass(ClassLoader.java:889)
[INFO]         	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1005)
[INFO]         	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174)
[INFO]         	at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:545)
[INFO]         	at java.base/java.net.URLClassLoader.access$100(URLClassLoader.java:83)
[INFO]         	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:453)
[INFO]         	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:447)
[INFO]         	at java.base/java.security.AccessController.doPrivileged(Native Method)
[INFO]         	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:446)
[INFO]         	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromSelf(ClassRealm.java:425)
[INFO]         	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:42)
[INFO]         	at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
[INFO]         	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
[INFO]         	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
[INFO]         	at com.google.gson.Gson.<init>(Gson.java:265)
[INFO]         	at com.google.gson.Gson.<init>(Gson.java:186)
[INFO]         	at com.google.javascript.jscomp.AbstractCommandLineRunner.<init>(AbstractCommandLineRunner.java:224)
``` =||= This pull request worked great for me in a java agent (which cant use java.sql)

When building it I got this test failure though : 

`Failed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest): expected:<2018-06-2[5]> but was:<2018-06-2[4]>`

I'm wondering if this is a timezone issue.  
Tests on master branch passed.

TZ=""Europe/Berlin""
Ubuntu 20.04 =||= Yes the `ISO8601UtilsTest` is faulty and will be fixed by #1665 / #1687 =||= Thanks for your work on resolving this issue with this pull request, @Marcono1234.

@inder123, Is it possible we could get a review on this PR? 

When using the `jlink` CLI tool to build a custom minimal JRE, `gson`'s explicit module dependency adds another 10MB+ of Java module dependencies. A prominent use case of using `jlink` is building lean Docker images; however, this explicit SQL dependency adds dead weight to the final image (a 20% size increase for my project). Intentionally removing the `java.sql` module results in a runtime error of `java.lang.NoClassDefFoundError: java/sql/Time`, despite it not being necessary for execution.

The indirect/transitive module dependencies that end up being added are listed here: https://docs.oracle.com/javase/9/docs/api/java.sql-summary.html

I would really appreciate seeing the `java.sql` dependency being optional. Thank you for your time. =||= I ran this against all of Google's internal tests that depend (directly or indirectly) on Gson, and didn't see any problems. I think this is good to go. =||= "Make dependency on java.sql optionalMarcono123408/25/21, 06:26:59 PM"Note: This is based on #1656
Fixes #1629

Makes the dependency on the `java.sql` module optional. If its classes are present at runtime, the respective type adapters will be used, otherwise Gson will not try to load the classes and will therefore not fail with a `ClassNotFoundException` anymore. The entry point for all SQL type adapters is now `SqlTypesSupport`.

I am however, not that familiar with the module system so it would be good if others who are more familiar with it can check if this is a sane implementation.

Especially #1500 (@Degubi) is confusing me because from what I understood about the JPMS `requires transitive` is only so modules depending on Gson would also be ""reading"" `java.sql`, which however makes no sense because Gson does not expose these types publicly anywhere, so it should not provide them transitively. To my understanding `requires` should have been enough to require `java.sql` being present at runtime, however based on the `ClassNotFoundException` reports this was not the case?
Or are they using tools (as it is the case [here](https://stackoverflow.com/q/57222110) which break the module system)? Though that would be a rather common issue then, see the question [""java.sql.Time exception""](https://stackoverflow.com/q/50877484).

Also pinging @nicolaiparlog, if you have any spare time, any hints regarding the JPMS would be appreciated :)
Sorry to pester you in case you don't have any time."NaNÉamonn McManus08/24/21, 08:41:12 PMMerge branch 'master' into optional-sql1
1712Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessiblerichard hernandezrhernandez3508/04/21, 12:27:54 AM"I'm the lucky owner of a post-jigsaw Java platform that has restrictive security manager installed. Failing to catch the `SecurityException` thrown by a cross-classloader `getDeclaredField` call in `UnsafeReflectionAllocator::getOverrideField` prevents any Gson instances from being created.

I'm hoping the fallback behavior in this class will be enough for us to use Gson without having to loosen our security policy.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1712) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= CLAs look good, thanks!

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1712) for more info**.

<!-- ok --> =||= This looks reasonable. Thanks for the carefully-constructed test! =||= "Fix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessiblerichard hernandezrhernandez3508/04/21, 12:27:54 AM"I'm the lucky owner of a post-jigsaw Java platform that has restrictive security manager installed. Failing to catch the `SecurityException` thrown by a cross-classloader `getDeclaredField` call in `UnsafeReflectionAllocator::getOverrideField` prevents any Gson instances from being created.

I'm hoping the fallback behavior in this class will be enough for us to use Gson without having to loosen our security policy."NaNRichard Hernandez05/27/20, 03:12:06 AMFix fallback behavior of UnsafeReflectionAllocator when AccessibleObject isn't so accessible1
1713java.lang.IllegalStateException: Nesting problem.willwaywang6jhwsx05/28/20, 10:59:24 PM"I want to use custom `TypeAdapter` to serialize a nest class.
But an exception occured:
```text
Exception in thread ""main"" java.lang.IllegalStateException: Nesting problem.
	at com.google.gson.stream.JsonWriter.beforeValue(JsonWriter.java:655)
	at com.google.gson.stream.JsonWriter.open(JsonWriter.java:326)
	at com.google.gson.stream.JsonWriter.beginObject(JsonWriter.java:309)
	at com.example.gsonlib._01_basic_use.Test$AddressTypeAdapter.write(Test.java:30)
	at com.example.gsonlib._01_basic_use.Test$StudentTypeAdapter.write(Test.java:53)
	at com.example.gsonlib._01_basic_use.Test$StudentTypeAdapter.write(Test.java:41)
	at com.google.gson.Gson.toJson(Gson.java:704)
	at com.google.gson.Gson.toJson(Gson.java:683)
	at com.google.gson.Gson.toJson(Gson.java:638)
	at com.google.gson.Gson.toJson(Gson.java:618)
	at com.example.gsonlib._01_basic_use.Test.main(Test.java:22)
```
My code is the following:
```java
public class Test {
    public static void main(String[] args) {
        Student student = new Student(""wzc"", 18, new Student.Address(""earth""));
        Gson gson2 = new GsonBuilder()
                .serializeNulls()
                .registerTypeAdapter(Student.class, new StudentTypeAdapter(new AddressTypeAdapter()))
                .create();
        String json2 = gson2.toJson(student);
        System.out.println(json2);
    }

    static class AddressTypeAdapter extends TypeAdapter<Student.Address> {

        @Override
        public void write(JsonWriter out, Student.Address value) throws IOException {
            out.beginObject();
            out.name(""address"").value(value.nation);
            out.endObject();
        }

        @Override
        public Student.Address read(JsonReader in) throws IOException {
            return null;
        }
    }

    static class StudentTypeAdapter extends TypeAdapter<Student> {
        private AddressTypeAdapter mAddressTypeAdapter;

        public StudentTypeAdapter(AddressTypeAdapter addressTypeAdapter) {
            mAddressTypeAdapter = addressTypeAdapter;
        }

        @Override
        public void write(JsonWriter out, Student student) throws IOException {
            out.beginObject()
                    .name(""name"").value(student.name)
                    .name(""age"").value(student.age);
            mAddressTypeAdapter.write(out, student.adress);
            out.endObject();
        }

        @Override
        public Student read(JsonReader in) throws IOException {
            return null;
        }
    }
}
```
```java
public class Student {
    public String name;
    public int age;
    public Address adress;

    public Student() {
    }

    public Student(String name, int age, Address adress) {
        this.name = name;
        this.age = age;
        this.adress = adress;
    }

    public static class Address {
        public String nation;

        public Address(String nation) {
            this.nation = nation;
        }
    }
}
```""```java
mAddressTypeAdapter.write(out, student.adress);
```

This is a dangling call. Use `out.name(""address"")` before it. =||= @lyubomyr-shaydariv It really works. However, I wonder that what a dangling call means. Moreover, could we have other workaround to solve this problem? =||= @jhwsx 
I meant that Gson prevents your code from creating an illegal JSON document with the ""address"" property value not bound to the ""address"" property key, therefore the inner objects would get dangling:

```json
{
  ""name"": ""wzc"",
  ""age"": 18,
  {
    ""nation"": ""Earth""
  }
}
```

Once you fix your code (the error is highlighted red at GitHub), the generated document becomes syntactically correct:

```json
{
  ""name"": ""wzc"",
  ""age"": 18,
  ""address"": {
    ""nation"": ""Earth""
  }
}
```
 =||= Well, dangling means that I intend to write a value without a corresponding key, which is not allowed by Gson, because of breaking key-value structure. Is my understanding right?
 =||= @jhwsx 
yes, if you're writing a JSON object (in curly braces `{...}`), you must write key/value pairs. You can't put anonymous values in objects as this is disallowed by the JSON grammar, not Gson (any sane JSON tool would reject such a JSON document). =||= Thanks a lot. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1715"Cannot deserialize the string end with '\0' whether is in lenient mode or not"Warkeeper06/04/20, 02:05:43 AM"## Issue Description

When deserialize a string which ends with '\0' ,it shows this error:
```
Caused by: com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 30 path $
	at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1564)
	at com.google.gson.stream.JsonReader.checkLenient(JsonReader.java:1405)
	at com.google.gson.stream.JsonReader.doPeek(JsonReader.java:543)
	at com.google.gson.stream.JsonReader.peek(JsonReader.java:426)
	at com.google.gson.Gson.assertFullConsumption(Gson.java:904)
	... 4 more
```
If set lenient to true, the error changes to:
```
Exception in thread ""main"" com.google.gson.JsonIOException: JSON document was not fully consumed.
	at com.google.gson.Gson.assertFullConsumption(Gson.java:905)
	at com.google.gson.Gson.fromJson(Gson.java:898)
	at com.google.gson.Gson.fromJson(Gson.java:846)
	at com.google.gson.Gson.fromJson(Gson.java:817)
	at com.unionpay.magpie.util.GsonTest.main(GsonTest.java:13)
```


### How to reproduce it 
Here's the code.
```java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class GsonTest {
    public static void main(String[] args) {
        String appleStr = ""{\""color\"":\""red\"",\""weight\"":200}\0"";
        Gson gson = new GsonBuilder().setLenient().create();
        System.out.println(gson.fromJson(appleStr, Apple.class));
    }

    public static class Apple {
        String color = ""red"";
        int weight = 200;
        @Override
        public String toString() {
            return ""Apple{"" +
                    ""color='"" + color + '\'' +
                    "", weight="" + weight +
                    '}';
        }
    }
}
```


""I think it's pretty usual that a C client produces a json string which is ended with '\0', and the Java Client using gson to deserialize it.
Is it possible to fix this issue? =||= > I think it's pretty usual that a C client produces a json string which is ended with '\0'....

I would say that it should not produce a `\0`-terminated payload, and the string you provided is actually a _malformed_ JSON document, so Gson refuses to parse it.

> Is it possible to fix this issue?

You can work around it by reading the JSON document via `JsonReader`, a reader that reads JSON tokens lazily:

```java
final Reader reader = new StringReader(""{\""color\"":\""red\"",\""weight\"":200}\0"");
final JsonReader jsonReader = new JsonReader(reader);
final Apple apple = gson.fromJson(jsonReader, Apple.class);
System.out.println(apple);
```

This does not fail because `JsonReader` reads the backing reader/input stream token by token, and once it consumes the final `}`, it suspends parsing not failing at `\0`. Once you ask it to parse/peek the next token with `peek()`, you'll get the syntax error exception:

```
...
jsonReader.peek();
```

A brief conclusion:

* It's most likely not a bug and Gson seems to be initially designed like that.
* It's recommended to use readers backed with input streams, not strings (deserializing the JSON document using `StringReader` is actually reading a string), for performance reasons.
* The JSON producer you're consuming produces invalid JSON documents and should be fixed if possible.
* You might also want to use `FilterReader`/`PushbackReader` to detect such malformed documents if you have to work with other libraries. =||= Thanks for reply. @lyubomyr-shaydariv 
I can understand that Gson (with default configuration) refuses to deserialize a '\0'-ended string since it's not a valid JSON. 
However, when I set lenient to true, I may except that Gson will accept this kind of ""JSON"".  Do I understand the lenient mode correctly?
 =||= @Warkeeper 
To some extent. The lenient mode handles other special cases: https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/stream/JsonReader.java#L295 (some of the items are weird IMHO). Your case is out of the list, but your issue is that `Gson.deserialize` (at least in the `java.lang.String` and `java.io.Reader` overloads) first deserializes the JSON document,and **then** checks whether the input document was fully consumed: the dangling `\0` character is neither a valid JSON token (as `jsonReader.peek()` fails above right after the deserialization), nor the end of the JSON document. =||= Got it.Thanks a lot. @lyubomyr-shaydariv 
For now I will work around it by using JsonReader , and maybe in the future I would make a pr to add this case for the lenient mode.
This issue could be closed for now. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1722TypeAdapters don't apply to map keysJamesNycto06/23/20, 05:39:52 PM"When converting a Map to Json, `TypeAdapters` are not being used to generate the keys. Here is a minimal repro:

```java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

class Main {

    /** An example class that just wraps a String. */
    static class Thinger {
        public final String key;

        Thinger(String key) {
            this.key = key;
        }

        @Override
        public String toString() {
            return ""Thinger("" + key + "")"";
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Thinger that = (Thinger) o;
            return Objects.equals(key, that.key);
        }

        @Override
        public int hashCode() {
            return Objects.hash(key);
        }
    }

    /** A TypeAdapter that can encode and decode a Thinger */
    static class ThingerAdapter extends TypeAdapter<Thinger> {

        @Override
        public void write(JsonWriter out, Thinger value) throws IOException {
            out.value(value.key);
        }

        @Override
        public Thinger read(JsonReader in) throws IOException {
            return new Thinger(in.nextString());
        }
    }

    public static void main(String[] args) {

        // Sample data with custom keys and values
        final Map<Thinger, Thinger> map = new HashMap<>();
        map.put(new Thinger(""Foo""), new Thinger(""Bar""));
        map.put(new Thinger(""Baz""), new Thinger( ""Qux""));

        // Register the adapter we defined above
        final Gson gson = new GsonBuilder().registerTypeAdapter(Thinger.class, new ThingerAdapter()).create();

        // Print the encoded JSON
        System.out.println(gson.toJson(map));
    }
}
```

I expect this to print:

```
{""Foo"":""Bar"",""Baz"":""Qux""}
```

But it actually calls the `toString` method and prints:

```
{""Thinger(Foo)"":""Bar"",""Thinger(Baz)"":""Qux""}
```

I'm not familiar with your code base, but it looks like the problem is related to [this line of code](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L207)""I think they don't have to. If you'd change the type adapter so that it writes/reads other than just a single string (including nulls) how would this type adapter recognize the  context and distinguish between map keys that must be strings and map values of arbitrary JSON structure? =||= Yup, I definitely agree that it’s problematic. But I think the spirit of this request is that some mechanism should exist for encoding keys. For example, a new function could be added to TypeAdapter that is just responsible for encoding a key name. =||= Actually, it looks like there is already a built-in mechanism for handling complex JsonElements as keys in that file:

https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L245-L262

That appears to be for when you're encoding JsonElements, not encoding into a stream, though. However, I think it definitely defines a precedent. =||= Looks like this is my miss. Picking through the code more, this functionality is hidden behind a feature flag, `enableComplexMapKeySerialization`:

```Java
final Gson gson = new GsonBuilder()
    .enableComplexMapKeySerialization()
    .registerTypeAdapter(Thinger.class, new ThingerAdapter())
    .create();
```

Based on the implementation, I understand why this is hidden behind a flag -- it has to instantiate JsonElement instances for every key, which is slow. Would you be amenable to adding functionality to `TypeAdapter`? I'm thinking a function like this would solve the problem without changing the performance much:

```Java
public abstract class TypeAdapter<T> {
  // ... SNIP ...
  public String toKey(T value) throws IOException {
    return String.valueOf(value);
  }
  // ... SNIP ...
}
```

This would allow the default behaviour to continue, shouldn't break any existing consumers, would allow custom key serialization, maintains type safety, and should have reasonable performance.

Thoughts? Again, I'm new to your code base so I assume I'm missing some nuances here. =||= >  a new function could be added to TypeAdapter that is just responsible for encoding a key name.

You could just implement your custom map type adapter factory that might do the job for you or provide a transformed `Map<String, ...>` _before_ its gets to the `toJson` method. The reason why the default map type adapter deals with strings only is that JSON object keys **must** be strings, that also keeps the type adapter API more simple requiring no provided context or adding special methods, whereas type adapters are designed for JSON values of arbitratry structure only. I'm afraid it's not a good idea to add a new JSON objects-only method to type adapters (I can see at least two pitfalls: sacrificing the type adapter class design for JSON objects; potentially complex reuse because of inheritance). By the way, type JsonReader and JsonWriter use `nextName()` and `name()` for JSON object keys, not `nextString()`/`value(String)`.

> Actually, it looks like there is already a built-in mechanism for handling complex JsonElements as keys in that file:

It does not produce/consume a JSON object: it represents a map using a two-dimensional JSON array (with n x 2 elements, literally `[[k1, v1], [k2, v2], ...]`), since arrays can hold arbitrary JSON elements, including null values. This is where `keyToString` comes into play.

I do believe that if you find that the `Map`-dedicated type adapter does not work for you, you might reimplement it not diving deep into the core design.

```java
final class TransformedKeyMapTypeAdapterFactory
		implements TypeAdapterFactory {

	private static final Type[] rawKeyValueTypes = { Object.class, Object.class };

	private final IKeyConverter keyConverter;
	private final Function<? super Type, ? extends Map<?, ?>> createMap;

	private TransformedKeyMapTypeAdapterFactory(final IKeyConverter keyConverter, final Function<? super Type, ? extends Map<?, ?>> createMap) {
		this.keyConverter = keyConverter;
		this.createMap = createMap;
	}

	static TypeAdapterFactory create(final IKeyConverter keyConverter) {
		return new TransformedKeyMapTypeAdapterFactory(keyConverter, MapFactory::create);
	}

	static TypeAdapterFactory create(final IKeyConverter keyConverter, final Function<? super Type, ? extends Map<?, ?>> createMap) {
		return new TransformedKeyMapTypeAdapterFactory(keyConverter, createMap);
	}

	@Override
	@Nullable
	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
		if ( !Map.class.isAssignableFrom(typeToken.getRawType()) ) {
			return null;
		}
		final Type mapType = typeToken.getType();
		// insufficient type check for simplicity
		final Type[] actualTypeArguments = mapType instanceof ParameterizedType
				? ((ParameterizedType) mapType).getActualTypeArguments()
				: rawKeyValueTypes;
		final Type keyType = actualTypeArguments[0];
		final Type valueType = actualTypeArguments[1];
		@SuppressWarnings(""unchecked"")
		final TypeAdapter<Object> valueTypeAdapter = gson.getAdapter((TypeToken<Object>) TypeToken.get(valueType));
		final TypeAdapter<? extends Map<?, ?>> mapTypeAdapter = TransformedKeyMapTypeAdapter.create(
				key -> keyConverter.toName(keyType, key),
				name -> keyConverter.fromName(keyType, name),
				() -> {
					@SuppressWarnings(""unchecked"")
					final Map<Object, Object> castMap = (Map<Object, Object>) createMap.apply(mapType);
					return castMap;
				},
				valueTypeAdapter
		);
		@SuppressWarnings(""unchecked"")
		final TypeAdapter<T> castMapTypeAdapter = (TypeAdapter<T>) mapTypeAdapter;
		return castMapTypeAdapter;
	}

	private static final class TransformedKeyMapTypeAdapter<K, V>
			extends TypeAdapter<Map<K, V>> {

		private final Function<? super K, String> toName;
		private final Function<? super String, ? extends K> fromName;
		private final Supplier<? extends Map<K, V>> createMap;
		private final TypeAdapter<V> valueTypeAdapter;

		private TransformedKeyMapTypeAdapter(final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName,
				final Supplier<? extends Map<K, V>> createMap, final TypeAdapter<V> valueTypeAdapter) {
			this.toName = toName;
			this.fromName = fromName;
			this.createMap = createMap;
			this.valueTypeAdapter = valueTypeAdapter;
		}

		private static <K, V> TypeAdapter<Map<K, V>> create(final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName,
				final Supplier<? extends Map<K, V>> createMap, final TypeAdapter<V> valueTypeAdapter) {
			return new TransformedKeyMapTypeAdapter<>(toName, fromName, createMap, valueTypeAdapter)
					.nullSafe();
		}

		@Override
		@SuppressWarnings(""resource"")
		public void write(final JsonWriter out, final Map<K, V> map)
				throws IOException {
			out.beginObject();
			for ( final Map.Entry<K, V> e : map.entrySet() ) {
				out.name(toName.apply(e.getKey()));
				valueTypeAdapter.write(out, e.getValue());
			}
			out.endObject();
		}

		@Override
		public Map<K, V> read(final JsonReader in)
				throws IOException {
			in.beginObject();
			final Map<K, V> map = createMap.get();
			while ( in.hasNext() ) {
				final String name = in.nextName();
				final K key = fromName.apply(name);
				final V value = valueTypeAdapter.read(in);
				final V replaced = map.put(key, value);
				if ( replaced != null ) {
					throw new JsonSyntaxException(""duplicate key: "" + key);
				}
			}
			in.endObject();
			return map;
		}

	}

}
```

```java
interface IKeyConverter {

	@Nonnull
	<K> String toName(@Nonnull Type type, @Nullable K key);

	@Nullable
	<K> K fromName(@Nonnull Type type, @Nonnull String name);

}
```

```java
final class KeyConverter
		implements IKeyConverter {

	private final BiFunction<? super Type, Object, String> toName;
	private final BiFunction<? super Type, ? super String, Object> fromName;

	private KeyConverter(final BiFunction<? super Type, Object, String> toName, final BiFunction<? super Type, ? super String, Object> fromName) {
		this.toName = toName;
		this.fromName = fromName;
	}

	public static IKeyConverter of(final BiFunction<? super Type, Object, String> toName,
			final BiFunction<? super Type, ? super String, Object> fromName) {
		return new KeyConverter(toName, fromName);
	}

	@Nonnull
	@Override
	public <K> String toName(@Nonnull final Type type, @Nullable final K key) {
		return toName.apply(type, key);
	}

	@Nullable
	@Override
	public <K> K fromName(@Nonnull final Type type, @Nonnull final String name) {
		@SuppressWarnings(""unchecked"")
		final K key = (K) fromName.apply(type, name);
		return key;
	}

}
```

```java
final class KeyConverterBuilder {

	@AllArgsConstructor(access = AccessLevel.PRIVATE)
	private static final class Mapper<K> {

		private final Function<? super K, String> toName;
		private final Function<? super String, ? extends K> fromName;

	}

	private final Map<Class<?>, Mapper<?>> classMappers = new HashMap<>();
	private final Map<Class<?>, Mapper<?>> subClassMappers = new HashMap<>();

	private KeyConverterBuilder() {
	}

	static KeyConverterBuilder create() {
		return new KeyConverterBuilder();
	}

	<K> KeyConverterBuilder forClass(final Class<K> clazz, final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName) {
		classMappers.put(clazz, new Mapper<>(toName, fromName));
		return this;
	}

	<K> KeyConverterBuilder forSubClass(final Class<K> clazz, final Function<? super K, String> toName, final Function<? super String, ? extends K> fromName) {
		subClassMappers.put(clazz, new Mapper<>(toName, fromName));
		return this;
	}

	IKeyConverter build() {
		return KeyConverter.of(
				(type, key) -> toName(type, key, classMappers, subClassMappers),
				(type, name) -> fromName(type, name, classMappers, subClassMappers)
		);
	}

	private static <K> String toName(final Type type, final K key, final Map<Class<?>, Mapper<?>> classMappers,
			final Map<Class<?>, Mapper<?>> subClassMappers) {
		@Nullable
		final Mapper<K> classMapper = resolveMapper(type, classMappers, subClassMappers);
		if ( classMapper == null ) {
			return String.valueOf(key);
		}
		return classMapper.toName.apply(key);
	}

	private static <K> K fromName(@Nonnull final Type type, @Nonnull final String name, final Map<Class<?>, Mapper<?>> classMappers,
			final Map<Class<?>, Mapper<?>> subClassMappers) {
		@Nullable
		final Mapper<K> classMapper = resolveMapper(type, classMappers, subClassMappers);
		if ( classMapper == null ) {
			throw new IllegalArgumentException(""Cannot convert "" + name + "" to "" + type);
		}
		return classMapper.fromName.apply(name);
	}

	@Nullable
	private static <K> Mapper<K> resolveMapper(final Type type, final Map<Class<?>, Mapper<?>> classMappers,
			final Map<Class<?>, Mapper<?>> subClassMappers) {
		// TODO cache
		if ( type instanceof Class ) {
			final Class<?> clazz = (Class<?>) type;
			@Nullable
			@SuppressWarnings(""unchecked"")
			final Mapper<K> classMapper = (Mapper<K>) classMappers.get(type);
			if ( classMapper != null ) {
				return classMapper;
			}
			for ( final Map.Entry<Class<?>, Mapper<?>> e : subClassMappers.entrySet() ) {
				if ( e.getKey().isAssignableFrom(clazz) ) {
					@SuppressWarnings(""unchecked"")
					final Mapper<K> subClassMapper = (Mapper<K>) e.getValue();
					return subClassMapper;
				}
			}
		}
		return null;
	}

}
```

```java
final class MapFactory {

	private MapFactory() {
	}

	static <K, V> Map<K, V> create(final Type mapType) {
		if ( mapType instanceof Class ) {
			return create((Class<?>) mapType);
		}
		if ( mapType instanceof ParameterizedType ) {
			final ParameterizedType mapParameterizedType = (ParameterizedType) mapType;
			return create(mapParameterizedType.getRawType());
		}
		throw new IllegalArgumentException(""Cannot resolve a default map instance for "" + mapType);
	}

	private static <K, V> Map<K, V> create(final Class<?> mapClass) {
		if ( LinkedHashMap.class.isAssignableFrom(mapClass) ) {
			return new LinkedHashMap<>();
		}
		if ( HashMap.class.isAssignableFrom(mapClass) ) {
			return new HashMap<>();
		}
		if ( TreeMap.class.isAssignableFrom(mapClass) ) {
			return new TreeMap<>();
		}
		if ( Map.class.isAssignableFrom(mapClass) ) {
			return new LinkedHashMap<>();
		}
		throw new IllegalArgumentException(""Cannot create a default map instance for "" + mapClass);
	}

}
```

----

```java
@Data
private static final class Name {

	private final String value;

}

private static final Type nameToNameMapType = new TypeToken<Map<Name, Name>>() {}.getType();

private static final Gson gson = new GsonBuilder()
		.disableHtmlEscaping()
		.registerTypeAdapterFactory(TransformedKeyMapTypeAdapterFactory.create(
				KeyConverterBuilder.create()
						.forClass(Name.class, name -> name.value, Name::new)
						.build()
		))
		.create();

public static void main(final String... args) {
	final Map<Name, Name> before = ImmutableMap.of(new Name(""foo""), new Name(""bar""));
	System.out.println(before);
	final String json = gson.toJson(before, nameToNameMapType);
	System.out.println(json);
	final Map<Name, Name> after = gson.fromJson(json, nameToNameMapType);
	System.out.println(after);
	System.out.println(before.equals(after));
}
```

```
{I1722.Name(value=foo)=I1722.Name(value=bar)}
{""foo"":{""value"":""bar""}}
{I1722.Name(value=foo)=I1722.Name(value=bar)}
true
``` =||= Thanks for your help with this! I'm going to go ahead and resolve this issue. Seems like, at a philosophical level, it's believed this should be the responsibility of the library consumers and not the library itself.

Cheers! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1725"object values has ""\u"", to json string .it has problem"taolinstl71406/23/20, 01:02:22 AM"when I use gson to convert a object to a json string, I found a problem. When the object which field value contains ""\u"", gson convert object to json string will generate two ""\\""  ,it comes ""\\u"". Result json like 

object field     
     path = /abc\u6d4b\u8bd5test.pdf
json string 
{""autorename"":true,""mode"":""add"",""mute"":false,""path"":""/abc\\u6d4b\\u8bd5test.pdf"",""strict_conflict"":false}""Gson should not process these characters in any way. Are you sure you're not confused with these two:

```java
System.out.println(""/abc\u6d4b\u8bd5test.pdf"");
System.out.println(""/abc\\u6d4b\\u8bd5test.pdf"");
```

? =||=  Sorry, I make a mistake. Thanks your suggestion. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1728Case insensitive serialization and deserialization not supportedANKUR PRAMANIKankurpramanik06/26/20, 02:05:51 PM"I have worked with GSON library but one thing bothered me that serialization and deserialization in case insensitive  manner is not supported. Suppose in json key is ""Sort""  and ""SOrt"" both will consider in the time of deserialization, We can use @SerializedName(value=""Sort"", alternatives={""SOrt""}), but how many combination will I have I don't know. It may be ""sORT"" or ""sorT"", ""sOrt"". I can add all these things in alternatives={...} but in case of long word like ""SortKunde"" how many combination I will write? So please provide Case insensitivity feature""> serialization and deserialization in case insensitive manner is not supported

And probably should not be supported. Why do you need Gson to support such specific cases? What if you can merely fix your API so that there were no a guess game for the properties you're trying to deserialize? Since you don't really need it to be a part of Gson, and Gson is able to provide you enough tools, you can implement like this:

```java
abstract class DelegateJsonReader
		extends JsonReader {

	private static final Reader noRead = new Reader() {
		@Override public int read(final char[] cbuf, final int off, final int len) { return -1; }
		@Override public void close() { /* do nothing */ }
	};

	protected final JsonReader delegate;

	protected DelegateJsonReader(final JsonReader delegate) {
		super(noRead);
		this.delegate = delegate;
	}

	// @formatter:off
	@Override public void beginArray() throws IOException { delegate.beginArray(); }
	@Override public void endArray() throws IOException { delegate.endArray(); }
	@Override public void beginObject() throws IOException { delegate.beginObject(); }
	@Override public void endObject() throws IOException { delegate.endObject(); }
	@Override public boolean hasNext() throws IOException { return delegate.hasNext(); }
	@Override public JsonToken peek() throws IOException { return delegate.peek(); }
	@Override public String nextName() throws IOException { return delegate.nextName(); }
	@Override public String nextString() throws IOException { return delegate.nextString(); }
	@Override public boolean nextBoolean() throws IOException { return delegate.nextBoolean(); }
	@Override public void nextNull() throws IOException { delegate.nextNull(); }
	@Override public double nextDouble() throws IOException { return delegate.nextDouble(); }
	@Override public long nextLong() throws IOException { return delegate.nextLong(); }
	@Override public int nextInt() throws IOException { return delegate.nextInt(); }
	@Override public void close() throws IOException { delegate.close(); }
	@Override public void skipValue() throws IOException { delegate.skipValue(); }
	@Override public String toString() { return delegate.toString(); }
	@Override public String getPath() { return delegate.getPath(); }
	// @formatter:on

}
```

```java
final class CaseInsensitiveTypeAdapterFactory
		implements TypeAdapterFactory {

	private static final TypeAdapterFactory instance = new CaseInsensitiveTypeAdapterFactory();

	private CaseInsensitiveTypeAdapterFactory() {
	}

	static TypeAdapterFactory getInstance() {
		return instance;
	}

	@Override
	@Nullable
	public <T> TypeAdapter<T> create(final Gson gson, final TypeToken<T> typeToken) {
		final TypeAdapter<T> delegateAdapter = gson.getDelegateAdapter(this, typeToken);
		if ( !(delegateAdapter instanceof ReflectiveTypeAdapterFactory.Adapter) ) {
			return null;
		}
		return new TypeAdapter<T>() {
			@Override
			public void write(final JsonWriter out, final T value)
					throws IOException {
				delegateAdapter.write(out, value);
			}

			@Override
			public T read(final JsonReader in)
					throws IOException {
				final DelegateJsonReader delegateJsonReader = new DelegateJsonReader(in) {
					@Override
					public String nextName()
							throws IOException {
						return super.nextName().toLowerCase();
					}

					@Override
					public void close() {
						// do nothing
					}
				};
				return delegateAdapter.read(delegateJsonReader);
			}
		};
	}

}
```

And the unit test that covers all possible 512 (!) ""sortkunde"" values:

```java
private static final String UNIQUE_VALUE = UUID.randomUUID().toString();

private static final Gson gson = new GsonBuilder()
		.disableHtmlEscaping()
		.registerTypeAdapterFactory(CaseInsensitiveTypeAdapterFactory.getInstance())
		.create();

private static final class Wrapper {

	private static final String ALTERNATE = ""sortkunde"";

	@SerializedName(value = ""sort"", alternate = ALTERNATE)
	final String sort = null;

}

private static Stream<Arguments> test() {
	final Set<Character>[] sets = Wrapper.ALTERNATE.chars()
			.<Set<Character>>mapToObj(ch -> ImmutableSet.of((char) Character.toLowerCase(ch), (char) Character.toUpperCase(ch)))
			.toArray((IntFunction<Set<Character>[]>) Set[]::new);
	return Sets.cartesianProduct(sets)
			.stream()
			.map(strings -> strings.stream().map(Object::toString).collect(Collectors.joining()))
			.<JsonElement>map(s -> {
				JsonObject jsonObject = new JsonObject();
				jsonObject.addProperty(s, UNIQUE_VALUE);
				return jsonObject;
			})
			.map(Arguments::of);
}

@ParameterizedTest
@MethodSource
public void test(final JsonElement json) {
	final Wrapper wrapper = gson.fromJson(json, Wrapper.class);
	System.out.println(json + "" => "" + wrapper.sort);
	Assertions.assertEquals(UNIQUE_VALUE, wrapper.sort);
}
```

Here is a quick report from the unit test above, first 10 tests:

```
[1] {""sortkunde"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[2] {""sortkundE"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[3] {""sortkunDe"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[4] {""sortkunDE"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[5] {""sortkuNde"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[6] {""sortkuNdE"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[7] {""sortkuNDe"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[8] {""sortkuNDE"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[9] {""sortkUnde"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
[10] {""sortkUndE"":""76e92ad2-8525-4bf5-b4d4-e7a84be6b90e""}
```

The idea behind this that:
- you can modify the input JSON names streams and transform the names to lower case;
- such names must appear in either `@SerializedName.value` or `@SerializedName.alternate`.
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1730com.google.gson.jsonsyntaxexception java.lang.illegalstateexception expected an int but was booleanMrudula Choudary Amirnenimrudulamrudu07/07/20, 01:48:52 PM"In my app I have search functionality, when ever user searches for something I make a network call fetch suggestions. When user clicks on any of the suggestion I am storing that POJO into shared preferences using Gson and when the screen loads fist I am fetching the stored data from the preferences and deserializing using Gson. It all worked fine but recently I have added ProductTier object to the search item, it never crashed during testing. But it started crashing after the release. I understood that the gson is throwing error while deserializing but I can't think of any scenario where I am passing an int instead of boolean.

```
public class SearchItem implements Parcelable {

private static final int ITEM_KEY_WORD = 0;
private static final int ITEM_PRODUCT = 1;

@SerializedName(""name"")
private String name;

@SerializedName(""itemKeyword"")
private String itemKeyWord;

@SerializedName(""productId"")
private String productId;

@SerializedName(""productTier"")
private ProductTier productTier;

private int itemType;
private boolean isHeader = false;
private boolean isPopular = false;

public SearchItem(String name, String productId){
    this.name = name;
    this.productId = productId;
}

public SearchItem(String name, String itemKeyWord, String productId, int itemType,
                  boolean isHeader, boolean isPopular) {
    this.name = name;
    this.itemKeyWord = itemKeyWord;
    this.productId = productId;
    this.itemType = itemType;
    this.isHeader = isHeader;
    this.isPopular = isPopular;
}

private SearchItem(Parcel in) {
    this.name = in.readString();
    this.itemKeyWord = in.readString();
    this.productId = in.readString();
    itemType = TextUtils.isEmpty(itemKeyWord) ? ITEM_PRODUCT : ITEM_KEY_WORD;
    productTier = in.readParcelable(ProductTier.class.getClassLoader());
}

public static final Creator<SearchItem> CREATOR = new Creator<SearchItem>() {
    @Override
    public SearchItem createFromParcel(Parcel in) {
        return new SearchItem(in);
    }

    @Override
    public SearchItem[] newArray(int size) {
        return new SearchItem[size];
    }
};

public String getItemKeyWord() {
    return itemKeyWord;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public String getProductId() {
    return productId;
}

public int getItemType() {
    return itemType;
}

public void setItemType(int itemType) {
    this.itemType = itemType;
}

public boolean isHeader() {
    return isHeader;
}

public void setHeader(boolean header) {
    isHeader = header;
}

public boolean isPopular() {
    return isPopular;
}

public void setPopular(boolean popular) {
    isPopular = popular;
}

public ProductTier getProductTier() {
    return productTier;
}

@Override
public int describeContents() {
    return 0;
}

@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeString(name);
    dest.writeString(itemKeyWord);
    dest.writeString(productId);
    dest.writeParcelable(productTier, flags);
}

@Override
public boolean equals(@Nullable Object obj) {
    SearchItem that = (SearchItem) obj;
    if (that == null) return false;
    return this.name.equals(that.name);
}
}

//

public class ProductTier implements Parcelable {

@SerializedName(""categoryId"")
private String categoryId;

@SerializedName(""liquorTypeId"")
private String liquorTypeId;

@SerializedName(""subCategoryId"")
private String subCategoryId;

protected ProductTier(Parcel in) {
    categoryId = in.readString();
    liquorTypeId = in.readString();
    subCategoryId = in.readString();
}

@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeString(categoryId);
    dest.writeString(liquorTypeId);
    dest.writeString(subCategoryId);
}

@Override
public int describeContents() {
    return 0;
}

public static final Creator<ProductTier> CREATOR = new Creator<ProductTier>() {
    @Override
    public ProductTier createFromParcel(Parcel in) {
        return new ProductTier(in);
    }

    @Override
    public ProductTier[] newArray(int size) {
        return new ProductTier[size];
    }
};

public String getCategoryId() {
    return categoryId;
}

public String getLiquorTypeId() {
    return liquorTypeId;
}

public String getSubCategoryId() {
    return subCategoryId;
}
}

class Utils {

  public static ArrayList<SearchItem> getRecentSearches(Context context) {
        ArrayList<SearchItem> searchItems = new ArrayList<>();
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
        String list = preferences.getString(Constants.RECENT_SEARCHES, """");
        try {
            JSONArray jsonArray = new JSONArray(list);
            if (jsonArray.length() > 0) {
                Gson gsonVal = new Gson();
                int i = 0;
                while (i < jsonArray.length()) {
                    searchItems.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class));
                    i++;
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return searchItems;
    }

 public static void storeSearchItemToRecentSearches(Context context, SearchItem searchItem) {
        if (searchItem == null) return;
        searchItem.setPopular(false);
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
        SharedPreferences.Editor editor = preferences.edit();
        String list = preferences.getString(Constants.RECENT_SEARCHES, """");
        ArrayList<SearchItem> previousResults = new ArrayList<>();
        try {
            JSONArray jsonArray = new JSONArray(list);
            if (jsonArray.length() > 0) {
                Gson gsonVal = new Gson();
                int i = 0;
                while (i < jsonArray.length()) {
                    previousResults.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class));
                    i++;
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

  if (previousResults.size() == 5) {
            previousResults.remove(previousResults.size() - 1);
            previousResults.add(0, searchItem);
        }else {
            previousResults.add(0, searchItem);
        }
        Gson gson = new Gson();
        String val = gson.toJson(previousResults);
        editor.putString(Constants.RECENT_SEARCHES, val);
        editor.apply();
    }
}
```

the crash is at this line searchItems.add(gsonVal.fromJson(jsonArray.getJSONObject(i).toString(), SearchItem.class)); in the getRecentSearches method."NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1746I get a MalformedJsonException when there is a space in the json, using method fromJsonFabian Osoriofadavidos08/01/20, 03:05:48 PM"I'm trying to convert from String to JsonObject, but I always get `com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 11 path $.text`.

String (Json):
`{		
        ""name"":""event1"",
        ""type"":""2"",
        ""message"":{
        	""text"":""my text""
        }
}`

Code:
`private Function1<String, Try<JsonObject>> tryStringToJsonObject = (jsonString) ->
        Try.of(() ->new GsonBuilder().create().fromJson(jsonString, JsonObject.class));`

If I remove the space in `text` (`mytext`) the conversion is successful.

Into the `text` I need to receive any String, with spaces.""hey @fadavidos, I hope you closed this issue 'cause you solved it, can plz share a solution?
Thank you! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1747MalformedJsonException: Unterminated string at line 1 column xxxxxxxxx path $.fieldname[random index].fieldname[random index].fieldnameCheng Chencheng-chen-91605788608/07/20, 05:56:25 PM"I am using `JsonReader` from `Gson` to read and parse huge JSON file line by line, however, recently I have found that the parsing could go wrong with the exception message of `MalformedJsonException: Unterminated string at line 1 column xxxxxxxxx path $.fieldname[random index].fieldname[random index].fieldname`, but the position that caused this exception to be thrown will be varied every time I tested it with the exact same file, and I have also tested the same JSON file with a different parsing library (different than I parsed line by line using `Gson`, for this library I just loaded everything into the memory and then convert to an object), and there was no parsing error at all, so I am guessing this could be a BUG in the `JsonReader` class.

PS: I am afraid I cannot provide any file that caused this problem to occur at this point since they are from the company I am working with, I can ask for a permission to share it if you really need it for debugging""You should provide:

- your platform;
- exact `JsonReader`-driven code you're using to reproduce it (it might tell why your Gson might fail, but other libraries succeed);
- stacktrace you're getting when reproducing it (obfuscate your company/product packages to keep them in secret);
- the most common `xxxxxxxx` range and the size of your files, or unusual things like huge string literals (their length actually);
- a JSON file that mimics your real file somehow (not sure if you really need several GBs shared elsewhere), or a simple Java generator tool that can generate the mimicking file (in both cases all your company/product secrets remain secret). =||= You seem to have resolved it already. https://stackoverflow.com/questions/63252842/gson-library-is-not-working-reliably-as-intended-for-parsing-large-json-file/63274792#63274792 I don't think huge JSON oneliners are the very cause though. =||= I apologize for not providing enough details for this issue
Unfortunately, I asked my direct supervisor and colleague, we are not allowed to share any JSON file that has this issue since they contain sensitive data from our customers, I personally did my best to try to create a JSON file that can reproduce the above problem, however, I failed to do so
But I do can provide you the error stacktrace (the platform is `JAVA` and I used `Gson-2.8.6`):
`com.google.gson.stream.MalformedJsonException: Unterminated string at line 1 column 45301761 path $.new_rows[113].new_rows[70].sql_query at com.google.gson.stream.JsonReader.syntaxError(JsonReader.java:1568) at com.google.gson.stream.JsonReader.nextQuotedValue(JsonReader.java:1031) at com.google.gson.stream.JsonReader.nextString(JsonReader.java:815) at xxxxx.parseEachNewRow(MultiplierResponseSubscriber.java:369) at xxxxx.processNewRows(MultiplierResponseSubscriber.java:210) at xxxxx.processNewRows(MultiplierResponseSubscriber.java:214) at xxxxx.processMultiplicationResults(MultiplierResponseSubscriber.java:176) at xxxxx.processMultiplierResponse(MultiplierResponseSubscriber.java:113) at xxxxx.consume(MultiplierResponseSubscriber.java:60) at org.springframework.cloud.gcp.pubsub.core.subscriber.PubSubSubscriberTemplate.lambda$subscribe$0(PubSubSubscriberTemplate.java:136) at com.google.cloud.pubsub.v1.MessageDispatcher$4.run(MessageDispatcher.java:438) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1750Password securityrayanyousif8408/10/20, 07:48:11 PMNaNI'm looking to make my password stronger =||= My account has been develop 2 months ago and I wake up one day all think has been deleted and somebody went to my account and change everything so I would like to some help to backup everything because I try it didn't work =||= how is this related to Gson? =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1752Invalid de-serialization for complex inputCatalin Dinutadinuta08/14/20, 09:40:12 AM"Let's suppose we have a JSON
```
{
    ""code"": 1000,
    ""message"": ""Success"",
    ""description"": {
        ""finished"": true,
        ""started"": false,
        ""startedat"": ""2020-08-14 08:47:59.193872"",
        ""finishedat"": ""2020-08-14 08:47:59.195087"",
        ""duration"": 0.001,
        ""pid"": 2315,
        ""id"": ""none"",
        ""commands"": {
            ""-cmd replaceTextInFile -arg \""/home/greg/install4j/response.varfile;{DB_PORT2};3306;false\"""": {
                ""status"": ""finished"",
                ""details"": {
                    ""out"": """",
                    ""err"": """",
                    ""code"": 0,
                    ""pid"": 2315,
                    ""args"": [
                        ""/home/greg/install4j/response.varfile"",
                        ""{DB_PORT2}"",
                        ""3306"",
                        ""false""
                    ]
                },
                ""startedat"": ""2020-08-14 08:47:59.193888"",
                ""finishedat"": ""2020-08-14 08:47:59.194963"",
                ""duration"": 0.001
            }
        }
    },
    ""time"": ""2020-08-14 08:47:59.195114"",
    ""name"": ""estuary-agent"",
    ""version"": ""4.0.8""
}
```

And a Glue class as per this example:
https://github.com/dinuta/estuary-agent-java/blob/078f14df94caa49aabea7c8a184dd03991f0e8d3/src/main/java/com/github/dinuta/estuary/agent/model/api/CommandDescription.java#L9

The result of the de-serialization context puts line: 
-cmd replaceTextInFile -arg \""/home/greg/install4j/response.varfile;{DB_PORT2};3306;false\""
into
-cmd replaceTextInFile -arg ""/home/greg/install4j/response.varfile;{\n\t\t\tDB_PORT2\t\t};3306;false""

Gson version: https://mvnrepository.com/artifact/com.google.code.gson/gson/2.3.1


Later edit: I will try with the latest version""Confirmed on 2.8.5 =||= For rapid tests you can take the dep:
<dependency>
    <groupId>com.github.dinuta.estuary</groupId>
    <artifactId>agent</artifactId>
    <version>4.0.8-SNAPSHOT</version>
</dependency>

 =||= Closing issue. I used toFormattedString() for one object and not toString() =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1754How to distinguish null(non-exist key) and JsonNull when serializing?ArcticLampyridArcticLampyrid08/17/20, 02:16:30 PM"Hi, I want to control whether a key will be serialized at run time

```kotlin
data class JsonRpcResponse(
        val result: JsonElement?
){}
```
When result is `null`, the field is ignored, which is my expected output.
But when result is `JsonNull.INSTANCE`, it is still ignored.
I know I can call `serializeNulls` to force to serialize **all** null-values, but how can I control whether **a field** is ignored or not at run time?""Relates to #959.

You could specify a custom adapter on the field using the [`@JsonAdapter`](https://javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/annotations/JsonAdapter.html) annotation. This even works to overwrite the built-in JsonElement adapter:
```java
/**
 * Factory for serializing {@link JsonNull} as {@code null} regardless of
 * {@link JsonWriter#getSerializeNulls()} value.
 * 
 * <p>Must <b>only</b> be used in combination with {@link JsonAdapter @JsonAdapter}
 * on fields:
 * <pre>
 * class MyClass {
 *     &#x40;JsonAdapter(NullSerializingTypeAdapterFactory.class)
 *     JsonElement f;
 * }
 * </pre>
 */
public class NullSerializingTypeAdapterFactory implements TypeAdapterFactory {
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
        if (JsonElement.class.isAssignableFrom(type.getRawType())) {
            // Due to Gson issue #1028 have to call getAdapter(...) instead of getDelegateAdapter(...)
            TypeAdapter<JsonElement> delegateAdapter = gson.getAdapter(JsonElement.class);
            
            // Safe due to type check at beginning
            @SuppressWarnings(""unchecked"")
            TypeAdapter<T> adapter = (TypeAdapter<T>) new NullSerializingTypeAdapter(delegateAdapter);
            return adapter;
        } else {
            return null;
        }
    }
    
    private static class NullSerializingTypeAdapter extends TypeAdapter<JsonElement> {
        private final TypeAdapter<JsonElement> delegate;
        
        public NullSerializingTypeAdapter(TypeAdapter<JsonElement> delegate) {
            this.delegate = delegate;
        }
        
        @Override
        public void write(JsonWriter out, JsonElement value) throws IOException {
            if (value == JsonNull.INSTANCE) {
                boolean wasSerializingNulls = out.getSerializeNulls();
                try {
                    out.setSerializeNulls(true);
                    out.nullValue();
                } finally {
                    out.setSerializeNulls(wasSerializingNulls);
                }
            } else {
                delegate.write(out, value);
            }
        }

        @Override
        public JsonElement read(JsonReader in) throws IOException {
            return delegate.read(in);
        }
    }
}
``` =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1758About generics causing ClassCastException, How can i modifychaoyang-zhou08/20/20, 09:36:13 AM"Kotlin Code
``` kotlin
class ResponseBody<T> {
    var code : Int = 0
    var msg : String = """"
    var data : T? = null
}

class ExampleT {
    var text: String = """"
    // var list: List<String>? = null
}

// utils fun
fun <T> request(json : String) : ResponseBody<T>? {
    val gson = Gson()
    var responseBody: ResponseBody<T>? = null
    if (json.contains(""code"") && json.contains(""data"")) {         
         responseBody = gson.fromJson(json, object : TypeToken<ResponseBody<T>>() {}.type)
    } else {
         val tdata : T = gson.fromJson(json, object : TypeToken<T>() {}.type)
         responseBody = ResponseBody()
         responseBody.code = 200
         responseBody.msg = ""success""
         responseBody.data = tdata
    }
    return responseBody
}

// main
val json : String = ""{\""code\"":200,\""msg\"":\""success\"",\""data\"":{\""text\"":\""text text text\""}}""
// val json : String = ""{\""text\"":\""text text text\""}""
val responseBody : ResponseBody<ExampleT> = request(json)

// result error 
// ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to ExampleT
```
Any answer will help me, Thanks !!!""OH !!  Found a solution and fixed it.
``` Kotlin
inline fun <reified T> request(json) : Any {} 
```
https://kotlinlang.org/docs/reference/inline-functions.html =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1762hakskkiran720705/13/21, 11:38:33 PMshsksks"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1762) for more info**.

<!-- need_sender_cla --> =||= 
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1762) for more info**.

<!-- need_sender_cla --> =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1767Fix JsonReader.nextDouble() throwing wrong exception type for NaN and InfinityMarcono123408/26/20, 10:54:43 PM"The documentation says that a NumberFormatException will be thrown in case the value is not finite (i.e. NaN or Infinity). However, the JsonReader implementation actually throws a MalformedJsonException.

Note that JsonTreeReader currently throws a NumberFormatException, as expected."When in doubt, I prefer to preserve the current behavior. =||= So should the documentation then be updated to state that a MalformedJsonException is thrown and JsonTreeReader be adjusted accordingly? Because the current behavior is inconsistent. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1773When mapping to HashMap in Gson, the behavior of the `contains` method is sometimes strange.PM_Coffeepm-coffee09/03/20, 05:43:51 AM"* AndroidStudio 4.0.0
* gson version: 2.8.6
* Sample Code: https://github.com/pm-coffee/GsonBugSample

* data.json : aasets json file
    ```json
    {
      ""1"": {
        ""id"": 1,
        ""name"": ""aaa""
      },
      ""2"": {
        ""id"": 2,
        ""name"": ""bbb""
      },
      ...
    }
    ```

* AssetsMapper.kt : loading and mapping json
    ```kotlin
    class AssetsMapper private constructor() {
    
    	companion object {
    		val instance: AssetsMapper by lazy { AssetsMapper() }
    	}
    
    	val originalMap = ConcurrentHashMap<Int, Data1>()
    	val castedMap : Map<Int, Data1>
    
    	init {
    		loadAssets()
    		castedMap = originalMap
    	}
    
    	private fun loadAssets(){
    		if(originalMap.isEmpty()) {
    			try {
    				(JsonReader(MyApp.instance.assets.open(""data.json"").reader(StandardCharsets.UTF_8)) as Closeable)
    					.use {
    						val rootElement = JsonParser.parseReader(it as JsonReader)
    						val listType = object : TypeToken<ConcurrentHashMap<Int, Data1>>() {}.type
    
    						originalMap.putAll(Gson().fromJson<Map<Int, Data1>>(rootElement, listType))
    					}
    			} catch (e: Exception) {
    				Log.e(""loadAssets()"", ""error"", e)
    			}
    		}
    	}
    
    }
    ```


originalMap.contains is false. Is this a bug?
```kotlin
val originalMapDataContains = AssetsMapper.instance.originalMap.contains(2)// <----- result is false. this result is strange.
val castedMapDataContains = AssetsMapper.instance.castedMap.contains(2)// <----- result is true
```""The `contains` methods from the `originalMap` object is **directly** bound to [a legacy method](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#contains-java.lang.Object-) from the JDK.

> `public boolean contains(Object value)`
>
> Legacy method testing if some key maps into the specified value in this table. This method is identical in functionality to containsValue(Object), and exists solely to ensure full compatibility with class Hashtable, which supported this method prior to introduction of the Java Collections framework.

However, the `castedObject` instance type is unknown at the compile time, and Kotlin uses its inline overload

> `@kotlin.internal.InlineOnly`
> `public inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)`

that is bound to the [method](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#containsKey-java.lang.Object-) you're expecting for.

Not a Gson bug but an _unexpected_ clash between a legacy method from JDK and an operator from Kotlin.

Interesting enough, the infix syntax, `2 in originalMap` produces a warning in my default Kotlin settings (in IntelliJ IDEA though): _Method contains from ConcurrentHashMap may have unexpected semantics: It calls containsValue instead of containsKey_.
But it's funny, that the ""Replace overloaded operator with function call"" ignores that warning and replaces the infix operator with the clashing `contains` method invocation, not `containsKey`.

----

MWE:

```kotlin
val concurrentHashMap = ConcurrentHashMap<Any, Any>()
concurrentHashMap.put(2, Object())
val map: Map<*, *> = concurrentHashMap
println(concurrentHashMap.contains(2))
println(map.contains(2))
``` =||= So that's what happened.
Sorry to hear that it's not a gson bug.

But thank you. I understand. =||= @pm-coffee could you please close the issue? Thank you. =||= FYI this is tracked and partially fixed in Kotlin:
Hashtable https://youtrack.jetbrains.com/issue/KT-48007
ConcurrentHashMap https://youtrack.jetbrains.com/issue/KT-18053 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1776java.lang.NoSuchFieldException for kotlin enums with ProGuard (and R8 enabled)Konstantin Liakhovskiik-liakhovskii-hs08/20/21, 03:58:11 PM"Hey, we noticed that we are getting `java.lang.NoSuchFieldException` when we use the latest sample rules on ProGuard with R8 enabled. Please find more details below.

Example of Enum definition:
```
enum class NetworkMessageTypeDTO{
    @SerializedName(""IG_STORY"") IG_STORY_1,
    @SerializedName(""IG_FEED"") IG_FEED
}
```

Stack trace is:
```
java.lang.AssertionError: java.lang.NoSuchFieldException: IG_STORY_1
        at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(TypeAdapters.java:12)
        at com.google.gson.internal.bind.TypeAdapters$30.create(TypeAdapters.java:5)
        at com.google.gson.Gson.n(Gson.java:9)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.a(ReflectiveTypeAdapterFactory.java:4)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.d(ReflectiveTypeAdapterFactory.java:15)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:4)
        at com.google.gson.Gson.n(Gson.java:9)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.a(ReflectiveTypeAdapterFactory.java:4)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.d(ReflectiveTypeAdapterFactory.java:15)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:4)
        at com.google.gson.Gson.n(Gson.java:9)
        at s.r.a.a.b(GsonConverterFactory.java:1)
        at s.n.i(Retrofit.java:6)
```

We use the [sample rules](https://github.com/google/gson/blob/master/examples/android-proguard-example/proguard.cfg#L23-L26), including the following R8 change:
```
...
# Prevent R8 from leaving Data object members always null
-keepclassmembers,allowobfuscation class * {
  @com.google.gson.annotations.SerializedName <fields>;
}
```

**WORKAROUND:**
It looks like the actual problem is not in SerializedName, but in binding between it and the real enum case. Removing of `allowobfuscation` in the rules above solves this issue as it stops obfuscating the names of enum cases. But not sure if that is a proper change, or the problem is in implementation of `ReflectiveTypeAdapter`.

It seems that the issue is related to the EnumTypeAdapter binding [here](https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java#L779-L781). Looks like similar issues were highlighted [here](https://github.com/google/gson/issues/924) and [here](https://stackoverflow.com/questions/15543607/assertionerror-in-gson-enumtypeadapter-when-using-proguard-obfuscation)."Should be fixed by #1495. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1780ISO8601UtilsTest failed when System Timezone is between UTC-1 and UTC-12YOUNG HO CHA (aka ganachoco)ganadist05/14/21, 12:34:20 AM"In ISO8601UtilsTest.ISO8601UtilsTest, calendar is initiated with Local Timezone.
But ISO8601Utils.format is processing time with UTC, so following error can be raised on UTC-1 and UTC-12

```
$ env TZ=UTC-1 mvn -f gson test

Running com.google.gson.internal.bind.util.ISO8601UtilsTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec <<< FAILURE!
testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<2018-06-2[5]> but was:<2018-06-2[4]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:26)

```"Should be fixed by https://github.com/google/gson/pull/1687. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1786Improve incorrect JsonStreamParser docMarcono123405/13/21, 11:45:36 PMNaNThanks! =||= Thanks for merging! And thanks a lot for bringing some activity into this project again :heart: =||= Improve incorrect JsonStreamParser docMarcono123405/13/21, 11:45:36 PMNaNNaNMarcono123409/19/20, 11:30:50 AMImprove incorrect JsonStreamParser doc1
1790Gson cannot finduskyssochi09/28/20, 02:30:07 AMNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1797There is a vulnerability in Guava: Google Core Libraries for Java(18.0) ,upgrade recommended奇安信CodeSafeQiAnXinCodeSafe09/02/21, 12:11:48 AM"https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/proto/pom.xml#L69-L74

CVE-2018-10237

Recommended upgrade version：1.0.1
latest version：29.0-jre"@eamonnmcmanus https://snyk.io/vuln/maven:com.google.guava%3Aguava =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1800Bump junit from 3.8.2 to 4.13.1 in /extrasdependabot[bot]05/13/21, 11:43:18 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNBump junit from 3.8.2 to 4.13.1 in /extrasdependabot[bot]05/13/21, 11:43:18 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNdependabot[bot]10/12/20, 10:55:48 PM"Bump junit from 3.8.2 to 4.13.1 in /extras

Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)
- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)

Signed-off-by: dependabot[bot] <support@github.com>"1
1801Bump junit from 4.12 to 4.13.1 in /protodependabot[bot]05/13/21, 11:43:05 PM"Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r4.12...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNBump junit from 4.12 to 4.13.1 in /protodependabot[bot]05/13/21, 11:43:05 PM"Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r4.12...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNdependabot[bot]10/12/20, 10:56:03 PM"Bump junit from 4.12 to 4.13.1 in /proto

Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)
- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.1)

Signed-off-by: dependabot[bot] <support@github.com>"1
1802Bump junit from 3.8.2 to 4.13.1 in /codegendependabot[bot]05/13/21, 11:42:49 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNBump junit from 3.8.2 to 4.13.1 in /codegendependabot[bot]05/13/21, 11:42:49 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNdependabot[bot]10/12/20, 10:56:05 PM"Bump junit from 3.8.2 to 4.13.1 in /codegen

Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)
- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)

Signed-off-by: dependabot[bot] <support@github.com>"1
1803Bump junit from 4.12 to 4.13.1dependabot[bot]05/13/21, 11:31:39 PM"Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r4.12...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"Superseded by #1892. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1804Bump junit from 3.8.2 to 4.13.1 in /metricsdependabot[bot]05/13/21, 11:42:28 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNBump junit from 3.8.2 to 4.13.1 in /metricsdependabot[bot]05/13/21, 11:42:28 PM"Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.12</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.12.md"">release notes</a> for details.</p>
<h2>JUnit 4.12 Beta 2</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.12 Beta 1</h2>
<p>No release notes provided.</p>
<h2>JUnit 4.11</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md"">junit's changelog</a>.</em></p>
<blockquote>
<h2>Summary of changes in version 4.13.1</h2>
<h1>Rules</h1>
<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>
<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=""https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp"">security advisory</a> for details.</p>
<h1>Test Runners</h1>
<h3>[Pull request <a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1669"">#1669</a>:](<a href=""https://github-redirect.dependabot.com/junit-team/junit/pull/1669"">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>
<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66""><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2""><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>
<li><a href=""https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24""><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>
<li><a href=""https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567""><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>
<li><a href=""https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9""><code>543905d</code></a> Use separate line for annotation in Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944""><code>510e906</code></a> Add sub headlines to class Javadoc</li>
<li><a href=""https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae""><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec""><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1671"">#1671</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646""><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1672"">#1672</a>)</li>
<li><a href=""https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8""><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1660"">#1660</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=3.8.2&new-version=4.13.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/google/gson/network/alerts).

</details>"NaNdependabot[bot]10/12/20, 10:56:23 PM"Bump junit from 3.8.2 to 4.13.1 in /metrics

Bumps [junit](https://github.com/junit-team/junit4) from 3.8.2 to 4.13.1.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md)
- [Commits](https://github.com/junit-team/junit4/compare/r3.8.2...r4.13.1)

Signed-off-by: dependabot[bot] <support@github.com>"1
1805What is the difference when I use `toJson` and `toJsonTree`?zxa4fd10/16/20, 09:58:52 PMWhat is the difference between the two and when should they be used?"[`Gson.toJson`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#toJson(java.lang.Object)) and its overloads are for serializing an object to a JSON string. They are useful for sending the JSON data to a different host, saving it to file, ... They are probably the most commonly used methods.

[`Gson.toJsonTree`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#toJsonTree(java.lang.Object)) is for serializing an object into an in-memory representation of the JSON document represented by [`JsonElement`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/JsonElement.html). This might be useful when want to modify the JSON before further processing it. For example when you have two objects which you want to merge to one JSON object you could serialize both to `JsonObject` and then copy the members of one object to the other one.

Do you have a specific use case where this question came up? =||= Yeah I saw it in an example =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1808Excluder class produces a lot of Strings objectsOleksandr Papchenkoolpapchenko10/22/20, 09:10:30 AM"Hi, 
`com.google.gson.internal.Excluder` class contains method `isAnonymousOrLocal` which in turn calls `clazz.isAnonymousClass()`
```
  private boolean isAnonymousOrLocal(Class<?> clazz) {
    Boolean res = memo.get(clazz);

    if(res != null) {
      return res;
    }

    res = !Enum.class.isAssignableFrom(clazz)
        && (clazz.isAnonymousClass() || clazz.isLocalClass());
    memo.put(clazz, res);
    return res;
  }
```
Inside `isAnonymousClass` performed substring operation - thus each time a new string is created. If the application deserializes/serialize a lot of objects with a lot of fields - we get a lot of strings in the heap that cause frequent GCs
For each class Excluder calls `isAnonymousClass` and each time it creates a substring  - does it make sense to use caching here - so for each particular class only the first time the call to substring is performed? ""It looks like this is fixed in JDK 11: [JDK-8187123](https://bugs.openjdk.java.net/browse/JDK-8187123)

If this should be solved in Gson, the cache would then probably have to use `WeakReference`s; otherwise it would prevent classes from being unloaded.

----

Note that I am not a maintainer of this project. =||= Thank you @Marcono1234,  Checked on `openjdk version ""11.0.7"" 2020-04-14 LTS` - the new implementation of `Class.getSimpleName` helped a lot. Strings are not allocated on each call - as the result much less frequent GCs. 
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1809Make ISO8601UtilsTest run successfully in any time zoneDaniel Graydanielthegray10/22/20, 11:26:07 AM"In some timezones, ISO8601UtilsTest fails with:

```
Failed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest):
      expected:<2018-06-2[5]> but was:<2018-06-2[4]>
```
This PR simply forced the timezone to always be UTC so that the test passes regardless of the timezone of the person running the test.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1809) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Thanks for the pull request, but there are already three existing ones for this issue:
- #1665
- #1687
- #1781 =||= Ahh apologies... I was looking for something too specific. I hope something gets merged soon! =||= The other pull requests are more complete and solve the problem. It should not be hard to get them merged in! Some action would be nice on the maintainer's side! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1812ConcurrentModification exception on serialization of a mutable collectionMarco SignorettoMarcoSignoretto11/05/20, 03:34:47 PM"In the case where you want to serialize a Mutable collection and this collection get changed by another thread while Gson is serializing it you got the following error:

```
java.util.ArrayList$Itr.next (ArrayList.java:860)
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:96)
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:61)
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write (TypeAdapterRuntimeTypeWrapper.java:69)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write (ReflectiveTypeAdapterFactory.java:127)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write (ReflectiveTypeAdapterFactory.java:245)
com.google.gson.Gson.toJson (Gson.java:704)
com.google.gson.Gson.toJson (Gson.java:683)
com.google.gson.Gson.toJson (Gson.java:638)
com.google.gson.Gson.toJson (Gson.java:618)
```

Starting from the fact that having a mutable collection shared between threads is bad, I think the library should handle it in the sense that is should take a snapshot of the collection and serialize that one.

Suggested solution: https://github.com/google/gson/pull/1813"Duplicate of: https://github.com/google/gson/issues/1159 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1813Avoid to crash with ConcurrentModificationException on serializationMarco SignorettoMarcoSignoretto11/05/20, 03:35:43 PM"Avoid crashing with ConcurrentModificationException during json serialization when Gson is serializing a Mutable collection 

Fixes: https://github.com/google/gson/issues/1812""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1813) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Could you please edit the description to say ""Fixes #XYZ"" instead of ""Issue: #XYZ"", otherwise GitHub does not understand that this pull request is related to the issue.

Most concurrent collection classes of the JDK are ""[weakly consistent](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/package-summary.html#Weakly)"", i.e. they never throw `ConcurrentModificationException`s. Additionally most, if not all, do not synchronize on `this` when performing modifications, so your `synchronized (collection) { ... }` would have no effect on them.

Do you have a specific class in mind where this is not the case?

Additionally always performing a shallow copy will decrease performance (and increase memory consumption) for applications which are not concurrently modifying collections.

----

Note that I am not a maintainer of this project. =||= Issue reported: https://github.com/google/gson/issues/1159 where defensive copy should live into the client =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1819Support `jsonValue` in JsonTreeWriterZac SweersZacSweers06/20/21, 08:11:43 AM"Resolves #1289 and resolves #1268 

Supersedes #1651 

This adds support for `JsonWriter#jsonValue()` in `JsonTreeWriter`, which currently just throws a nondescript assertion error"Can update the map key and doc. I don't expect this would ever appear in a reader, but maybe converting it to a JsonElement directly rather than a raw value could allow seamless interoperability. Will look =||= @Marcono1234 I managed to make this work without introducing a new type, which came out a lot simpler and just reuses existing types by eagerly parsing the JSON. It's a little less performant in theory for large blobs, but seems worth the tradeoff and maybe even adds a bit of extra peace of mind for validating the JSON structure is sound. =||= Note that a workaround for anyone that needs this and is willing to touch internal APIs - you can convert your string to a `JsonElement` (i.e. via `JsonParser`) and then write it directly to the writer with GSON's internal JsonElement adapter (i.e. `TypeAdapters.JSON_ELEMENT.write(writer, jsonElement)`) =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1820Fix gradle buildZac SweersZacSweers06/20/21, 08:11:23 AMNot sure if this is maintained, but this at least updates the gradle version and fixes the project version injectionNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1821[Question] : is gson still maintained?raditya gumayradityagumay07/01/21, 09:39:07 PM"Rationale behind this is, gson looks like not actively maintained. The [last PR](https://github.com/google/gson/commit/ceae88bd6667f4263bbe02e6b3710b8a683906a2) was on may. and looks like there's no roadmap on gson to provide [new features and fix bugs.](https://github.com/google/gson/pulls)

Will appreciated if the maintainer able to put some thoughts on this. 

Thank you!""I am not a maintainer / member of this project and had the same question the last months as well and always thought about creating an issue too because activity here has sadly slowed down.

There are several critical issues (with corresponding pull requests) which have not been touched for a rather long time (subjective selection):
- Issues with generic parameter being used multiple times: #1391
- ProGuard issues with enums: #1495
- `ISO8601UtilsTest` being faulty (#1665, #1687, #1781)
- Optional `java.sql` module dependency: #1707
- Problem with SecurityManager: #1712
- `module-info.class` not being in `META-INF` multi release folder (#1627)
- Incorrect OSGi JRE requirement: #1677 (has already been fixed by  #1603, but has not been released)
- Serialization for some objects created by JDK classes fails because Gson tries to access private constructors using reflection: #1875
- Records are not supported: #1794

It appears @joel-leitch, one of the original maintainers, is not very active on GitHub anymore. @swankjesse and @JakeWharton are not active here either. I am not completely familiar with their biography, but if I understand it correctly they (or one of them) quit their job at Google and are now working at Square where they are working on https://github.com/square/moshi, a competitor of Gson. Maybe they do not even have the GitHub project roles and permissions anymore to directly work on Gson.
@inder123 is the one who made the most recent changes, but it looks like they are not that active at the moment either.

It is not my goal to blame them for the lack of activity, they put great efforts in this project in the past and are the reason for the popularity of it. It is completely understandable that after more than 10 years, the motivation of working on the same project decreases. Especially when (as it is likely the case for all projects) design flaws or decisions hindering future development become apparent over time. And as with all open source projects, enough free time might also not always be available.

However, because Gson is still widely used it is important that a clear decision is made about how Gson's future development (if any) will look like. Otherwise users will be forced to switch to other frameworks when bugs remain unfixed. While switching to other frameworks is not necessarily bad, being forced to do this creates extra stress and work for the users; it should ideally happen voluntarily.

Would it at least be possible to keep developing Gson in _maintenance mode_: Only bug fixes are implemented, but no major new features are added? =||= I found this anwser on reddit written by @swankjesse

https://www.reddit.com/r/androiddev/comments/684flw/why_use_moshi_over_gson/dgx3gpm?utm_source=share&utm_medium=web2x&context=3

In short, it seem Gson is already in maintenance mode because it was mostly replaced by ""moshi"", a new project build by some of the same contributor with less short-comming than Gson =||= Moshi is a suitable alternative to Gson.  I just switched my code over.

https://github.com/square/moshi

Moshi throws exceptions in cases where Gson silently returns `null`.  I'm happy with this.

Moshi doesn't support `Optional` yet ([square/moshi#1329](https://github.com/square/moshi/issues/1329)).
 =||= Thanks @eamonnmcmanus and @cgdecker for bringing some activity back into this project! What are the future plans for Gson? =||= Is Gson actively maintained  =||= We've taken ownership of this project so that we can do basic maintenance and such (for example the release we made last month) but we don't have any specific plans for it at the moment. =||= > We've taken ownership of this project so that we can do basic maintenance and such (for example the release we made last month) but we don't have any specific plans for it at the moment.

Please fix Java 16 related issues. =||= I am planning to spend some time this month studying open issues and PRs, consistent with the maintenance mode that @cgdecker mentioned. We are unlikely to add new features at this point but we can attempt to address some important issues. The list compiled by @Marcono1234 [above](https://github.com/google/gson/issues/1821#issuecomment-729807911) will likely be very helpful in this regard.

I think we've addressed the question asked in this issue, so I'm going to close it. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1824fix bug,string json to map,int automatic conversion doubleCouragelsm199811/25/20, 01:51:04 AMnextNumber() is more reasonable than nextDouble(),It solves the problem of converting integer to floating point number automatically."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1824) for more info**.

<!-- need_sender_cla --> =||= > 感谢您的请求。看来这可能是您对Google开源项目的第一个贡献（如果没有，请在下面寻求帮助）。在我们查看您的拉取请求之前，您需要签署贡献者许可协议（CLA）。
> 
> 📝 **请访问https://cla.developers.google.com/进行签名。**
> 
> 签署（或解决任何问题）后，请在此处回复`@googlebot I signed it!`，我们将对其进行验证。
> 
> #### 如果您已经签署了CLA，该怎么办
> ##### 个人签名人
> * 可能我们没有您的GitHub用户名，或者您在提交时使用了其他电子邮件地址。检查[您现有的CLA数据，](https://cla.developers.google.com/clas)并验证是否[在git commit上设置了电子邮件](https://help.github.com/articles/setting-your-email-in-git/)。
> 
> ##### 公司签名人
> * 您的公司有一个联络点，可以决定授权哪些员工参加。要求将您的POC添加到授权贡献者组中。如果您不知道联络人是谁，请指示Google项目维护者进行[go / cla＃troubleshoot](http://go/cla#troubleshoot)（[公开版本](https://opensource.google/docs/cla/#troubleshoot)）。
> * 用于将您注册为授权贡献者的电子邮件必须是用于Git提交的电子邮件。检查[您现有的CLA数据，](https://cla.developers.google.com/clas)并验证是否[在git commit上设置了电子邮件](https://help.github.com/articles/setting-your-email-in-git/)。
> * 用于将您注册为授权贡献者的电子邮件还必须[附加到您的GitHub帐户中](https://github.com/settings/emails)。
> 
> ℹ️ **Google员工：请[点击此处](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1824)获取更多信息**。

@googlebot I signed it! =||= Anything that breaks backwards compatibility will not be accepted. =||= > 任何破坏向后兼容性的内容均不接受。
I'm sorry for my rashness. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1836Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor (/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar) to field java.time.LocalDate.yearFrédérick SauvageFrederickFrance12/11/20, 03:45:17 PM"Hi

I have this warning message but I don't find the place to trace it and, of course, how to fix that :+1: 

> WARNING: An illegal reflective access operation has occurred
> WARNING: Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor (file:/home/fred/.m2/repository/com/google/code/gson/gson/2.8.6/gson-2.8.6.jar) to field java.time.LocalDate.year
> WARNING: Please consider reporting this to the maintainers of com.google.gson.internal.reflect.UnsafeReflectionAccessor
> WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
> WARNING: All illegal access operations will be denied in a future release
 

I don'y know which information I can add.

```
    <java.version>1.8</java.version>
    <tomcat.version>9.0.37</tomcat.version>
```

Do not hesitate to ask me any information if my message isn't enough clear""Gson is a Java 6 oriented library. All standard runtime library classes to appear in Java 8 are not supported by Gson out of box. All ""simple"" data classes of java.time.* are among of those. You should create a custom type adapter to support `java.time.LocalDate`, and do the same for all the classes you need from that package. See also: #1059, #1807, and please don't forget to close the issue. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1838Update UserGuide.mdFiordyFiordy05/13/21, 11:41:42 PMfixed typo in generic"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1838) for more info**.

<!-- need_sender_cla --> =||= As noted by @Marcono1234 the existing text is correct. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1848toJson() returns empty string while using desugar_jdk_libsAlanFeng2001/13/21, 10:44:58 AM"I add JDK8 library  support in my build.gradle file:

```
android{
        compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'
}
```


But when I serialize the instance of LocalDateTime using Gson, I get a wrong result:

```
val time=LocalDateTime.now()
val json=Gson().toJson(time)
//variable ""json"" is """"
```

How can I solve this problem?"ohhh.........writing a TypeAdapter can help. Sorry for disturbing  =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1849Gson serialized HashMap object returns null吴就业wujiuye01/14/21, 01:44:35 PM"Gson serialized HashMap object returns null

The unit test is as follows:
```java
public class JsonTest {
    @Test
    public void testGsonMap() {
        Map<String, Object> data = new HashMap<String, Object>() {{
            put(""xxx"", ""yyy"");
        }};
        System.out.println(JsonUtils.toJsonString(data));
    }
}
```
JsonUtils#toJsonString actually calls Gson#toJson, and the test outputs null. But switching to the jackson framework can be serialized successfully.

It can be seen from the compiled bytecode that “data” is actually an anonymous class object. The anonymous class inherits HashMap and the anonymous class ends with ""$1"".

The following is the call stack traced by DEBUG:
```java
com.google.gson.internal.Excluder#create
  >com.google.gson.internal.Excluder#excludeClassChecks
       >com.google.gson.internal.Excluder#isAnonymousOrLocal
            >java.lang.Class#isAnonymousClass
```

java.lang.Class#isAnonymousClass
```java
public final class Class<T> {
    public boolean isAnonymousClass() {
        return """".equals(getSimpleName());
    }
}
```

The getSimpleName method removes the ""$"" of the anonymous class ""$1"" and the following number and returns """", so the serialization of the anonymous class object is skipped."路过.... 今天也碰见这个事了,上来看看 =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1854Is Gson dead ?HybridGaw02/02/21, 09:09:26 PMlast release was 2019 , now it's 2021 , is it dead ???"There are projects which have went without a release for longer periods of time, but which aren't ""dead"" either. =||= Yeah, we can create a new release when we want. What specific problems are you looking to solve with a new release?
Overall, Gson is a mature library with massive usage. We have to be very careful in adding features that may break backward compatibility. =||= @inder123, do you mind having a look at #1821?
There are a few severe issues (most of them have pull requests) which have been open for years. It appears multiple people who want to contribute have the impression that this project is not actively maintained anymore. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1855Copyright year and owner are missing in license - replace placeholdersts-twt06/18/21, 10:17:53 PMhttps://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/LICENSE#L190That line is part of the [template](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/LICENSE#L179) to be used by people applying the Apache license to their own work. It is supposed to look like that. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1857JsonDeserializer throws runtime error when parameterized type is not of type collection and JsonElement is of type JsonArrayBrandon Johnsonbitforce02/05/21, 06:15:46 PM"When `jsonElement` is of type `JsonArray` and the `JsonDeserialization<T>` type is not a collection, Gson will always throw an `IllegalStateException`.

<img width=""1253"" alt=""image"" src=""https://user-images.githubusercontent.com/24510536/106795661-58d4d400-6628-11eb-9db4-c81fe068df8e.png"">

Above is the full code, note that `Example` is an empty class.
Below is an image of the direct deserialization in debug mode. Note that the contents of `instrumentJson` are irrelevant and that it is a correctly streamed `JsonObject` from a `JsonArray`.

<img width=""602"" alt=""image"" src=""https://user-images.githubusercontent.com/24510536/106793902-0c889480-6626-11eb-949c-f290b7f700af.png"">

However, if I decide to serialize to most-any other Objects, the `jsonDeserializerContext#deserialize` has no problem whatsoever. 

<img width=""602"" alt=""deserialize object"" src=""https://user-images.githubusercontent.com/24510536/106794060-45c10480-6626-11eb-8c25-044e4be472ea.png"">

<img width=""601"" alt=""random"" src=""https://user-images.githubusercontent.com/24510536/106794662-27a7d400-6627-11eb-8447-b91d2c16a2b5.png"">

<img width=""601"" alt=""stream support"" src=""https://user-images.githubusercontent.com/24510536/106794664-28406a80-6627-11eb-9a2b-a19cdf5942be.png"">

So my educated guess is if the current type is not matching the `JsonElement` subtype (`JsonObject` or `JsonArray`), then it causes problems.

Below is confirmation that `jsonElement` is of type `JsonArray`

<img width=""602"" alt=""image"" src=""https://user-images.githubusercontent.com/24510536/106794198-7a34c080-6626-11eb-99ba-4d01c0a6a7da.png"">

My problem is *sovled* if I change the return type to `List<Example>` as seen below.

<img width=""1258"" alt=""problem solved"" src=""https://user-images.githubusercontent.com/24510536/106794870-6473cb00-6627-11eb-8575-b8bd021496cc.png"">

But this does not fix my use-case of only wanting to return the first element from this list. It doesn't fit my design pattern either. 


## Context
The original issue is the designers of the API I am deserializing from, thought it would be _cool_ for a singular resource endpoint to instead of return a `JsonObject`, return a `JsonArray` that would always be of size 1. It is confirmed that this array will always be size one but they have no plans to change the API and I would prefer to keep the `list#get(0)` logic out of my controller if possible and return the single element from the deserializing class. 

## Major Inquiry
It is possible to deserialize a `JsonArray` without *having* to return a collection type when implementing `JsonDeserializer<T>`? ""Could you please provide a self-contained small code example demonstrating this issue?
And could you also please include the full stack trace of the exception? I am unable to find any code in this project which throws an exception with the message ""This is not a JSON Array"" (not even the prefix ""This is not""); are you sure that Gson is actually throwing that exception? It looks more like Gson is only wrapping it inside a `JsonSyntaxException`. =||= ```
Exception in thread ""main"" com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: This is not a JSON Array.
	at com.google.gson.Gson.fromJson(Gson.java:899)
	at com.google.gson.Gson.fromJson(Gson.java:952)
	at com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(TreeTypeAdapter.java:162)
	at <my package dir>.ExampleDeserializer.lambda$deserialize$0(ExampleDeserializer.java:25)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1812)
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464)
	at <my package dir>.ExampleDeserializer.deserialize(ExampleDeserializer.java:26)
	at <my package dir>.ExampleDeserializer.deserialize(ExampleDeserializer.java:16)
	at com.google.gson.internal.bind.TreeTypeAdapter.read(TreeTypeAdapter.java:69)
	at com.google.gson.Gson.fromJson(Gson.java:887)
	at com.google.gson.Gson.fromJson(Gson.java:952)
	at com.google.gson.Gson.fromJson(Gson.java:925)
	at <my package dir>.ExampleDeserializationTest.main(ExampleDeserializationTest.java:17)

``` =||= Below is a way to run this code and recreate the issue:

```
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

public class ExampleDeserializationTest  {

  public static void main(String[] args) {
    Gson gson = new GsonBuilder().registerTypeAdapter(Example.class, new ExampleDeserializer())
         .create();
    JsonArray array = new JsonArray();
    JsonObject object = new JsonObject();
    object.addProperty(""name"", ""bitforce"");
    array.add(object);
    Example example = gson.fromJson(array, Example.class);
    System.out.println(example);
  }

}
// main
```

```
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;

import java.lang.reflect.Type;
import java.util.stream.StreamSupport;

public class ExampleDeserializer implements JsonDeserializer<Example> {
  @Override
  public Example deserialize(
      JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)
      throws JsonParseException {
    return StreamSupport.stream(jsonElement.getAsJsonArray().spliterator(), false)
        .map(
            instrumentJson ->
                (Example) jsonDeserializationContext.deserialize(instrumentJson, Example.class))
        .findFirst()
        .orElseThrow(RuntimeException::new);
  }
}
// deserializer
```

```
public class Example {}
``` =||= Thanks! The exception message does indeed come from Gson, but it appears you are using Gson 2.8.1 (or older). It might be worth upgrading to the latest version (2.8.6).

The problem is that the `JsonDeserializer` you are registering is calling itself: Initially you are telling Gson to deserialize your Example JSON array as `Example.class` which works fine but then your JsonDeserializer calls `jsonDeserializationContext.deserialize(instrumentJson, Example.class)` which invokes itself again (since it is registered for `Example.class`), this time with a single Example JSON object which therefore causes the exception you are seeing.

If you already know that your data is an array of Example and you only want the first one, then it might be easiest to directly access the `JsonArray` element or to use a `JsonReader` (depending on the form in which you receive the JSON data):
```java
public static void main(String[] args) throws IOException {
    JsonArray array = new JsonArray();
    JsonObject object = new JsonObject();
    object.addProperty(""name"", ""bitforce"");
    array.add(object);
    
    System.out.println(fromJsonArray(array));
    
    try (Reader jsonString = new StringReader(""[{\""name\"":\""bitforce\""}]"")) {
        System.out.println(fromJsonString(jsonString));
    }
}

private static Example fromJsonArray(JsonArray jsonArray) {
    if (jsonArray.size() > 0) {
        return new Gson().fromJson(jsonArray.get(0), Example.class);
    } else {
        throw new IllegalArgumentException(""..."");
    }
}

private static Example fromJsonString(Reader jsonString) throws IOException {
    JsonReader jsonReader = new JsonReader(jsonString);
    jsonReader.beginArray();
    if (jsonReader.hasNext()) {
        return new Gson().fromJson(jsonReader, Example.class);
    }
    throw new IllegalArgumentException(""..."");
}
```

Otherwise if the Example array appears nested within other model classes, it becomes slightly more complicated. How this can be solved depends on the actual model classes you are using.
You could implement a custom [`TypeAdapterFactory`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/TypeAdapterFactory.html) which creates an adapter which begins reading the array and then calls a delegate for deserializing the `Example` object. If you always wan't JSON arrays of Example to be deserialized as single Example, then you could register that factory on the `GsonBuilder`. Otherwise you could use the [`@JsonAdapter`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/annotations/JsonAdapter.html) annotation on fields of type `Example` and then specify the  `TypeAdapterFactory` for that annotation (though don't use `Gson.getDelegateAdapter(...)` in the `TypeAdapterFactory` then because it is currently broken for `@JsonAdapter`, see #1028). =||= Thank you for the deep insight; apologies, I did not include the version I was using (`2.8.0`). Consider this closed. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1860fromJson(String json, Class<T> classOfT) does not throw JsonSyntaxException when passing invalid json stringtantandt5302/22/21, 04:06:25 AM"Gson v2.8.6

Example code:
```
String text = ""{name:\""sample name\"",\""phone\"":\""0117000532\"",\""email\"":\""sample_mail@gmail.com\"",\""legalName\"":\""sample legal name\"",\""representPhone\"":\""01170000001\""}"";
        Gson gson = new Gson();
        try {
            gson.fromJson(text, JsonElement.class);
            System.out.println(""text is VALID json string"");
        } catch (JsonSyntaxException e) {
            System.out.println(""text is INVALID json string"");
        }
```
Ouput
```
text is VALID json string
```

`text` in sample is invalid json string, cause it does not contain double quote in `name` ""`Gson.fromJson` always parses leniently, regardless of what settings you used for the `GsonBuilder` or `JsonReader`, see also #372. Sadly this is not documented.

If you want strict parsing, you could first get the corresponding adapter for the class you want to parse through [`Gson.getAdapter(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.6/com.google.gson/com/google/gson/Gson.html#getAdapter(com.google.gson.reflect.TypeToken)) and then call `fromJson(...)` on the adapter. =||= Thanks @Marcono1234 
I found a workaround solution for that [here](https://stackoverflow.com/questions/43233898/how-to-check-if-json-is-valid-in-java-using-gson/47890960#47890960) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1863Deserialization fails with TypeToken.getParameterizedYevhen Vasylievyvasyliev02/19/21, 09:37:36 AM"Hi,

I faced with the next problem: when I want to deserialize a generic type which includes 3 (or more) nested types, Gson returns LinkedTreeMap starting from the 3rd level.

Quick example:
```java
public class GsonTest {
    static class L1<T> {
        public T l1;
    }

    static class L2<T> {
        public T l2;
    }

    static class L3<T> {
        public T l3;
    }

    @Test
    public void test1() {
        String json = ""{\""l1\"":{\""l2\"":{\""l3\"":15}}}"";
        L1<L2<L3<Integer>>> obj1 = new Gson().fromJson(json, new TypeToken<L1<L2<L3<Integer>>>>() {}.getType());
        System.out.println(obj1.l1.l2.l3);
        L1<L2<L3<Integer>>> obj2 = new Gson().fromJson(json, TypeToken.getParameterized(L1.class, L2.class, L3.class, Integer.class).getType());
        System.out.println(obj2.l1.l2.l3);
    }
}

```

Output:
```
15

java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to GsonTest$L3

	at GsonTest.test1(GsonTest.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)

```

Using debug I see that `obj2.l1.l2` field is type of `LinkedTreeMap` instead of `L3`:
![image](https://user-images.githubusercontent.com/44120348/108343032-25777500-71e4-11eb-82fc-8ba39d0aabe2.png)

I use `TypeToken.getParameterized(L1.class, L2.class, L3.class, Integer.class).getType()` instead of 
`new TypeToken<L1<L2<L3<Integer>>>>() {}.getType()` to make it a bit readable. 

Is it expected to return `LinkedTreeMap`?

Gson version: 2.8.6""**UPD:** found possible WA:
```java
@Test
public void test2() {
    String json = ""{\""l1\"":{\""l2\"":{\""l3\"":15}}}"";
    L1<L2<L3<Integer>>> obj3 = new Gson().fromJson(json, collectParameterized(L1.class, L2.class, L3.class, Integer.class));
    System.out.println(obj3.l1.l2.l3);
}

private Type collectParameterized(Type... typeArguments) {
    return collectParameterized(new LinkedList<>(Arrays.asList(typeArguments)));
}

private Type collectParameterized(LinkedList<Type> typeArguments) {
    return typeArguments.size() == 1
            ? TypeToken.getParameterized(typeArguments.getFirst()).getType()
            : TypeToken.getParameterized(typeArguments.removeFirst(), collectParameterized(typeArguments)).getType();
}
```
Output:
```
15
``` =||= Your second type in `test1` constructs a parameterized type as if it were `L1<L2, L3, Integer>` which is obviously wrong. What you were looking for, in `test1`, is the following:

```java
TypeToken.getParameterized(L1.class,
		TypeToken.getParameterized(L2.class,
				TypeToken.getParameterized(L3.class, Integer.class)
						.getType()
		).getType()
).getType()
```

`collectParameterized` seems to do a similar thing, but only works for generic types with one type parameter. =||= Looks I misunderstood the purpose of `TypeToken.getParameterized` method... 😄 
@lyubomyr-shaydariv, thanks a lot for the clarification! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1864#equals for JsonPrimitive with the same Float and LazilyParsedNumber values says they aren't equalAndreyTimeConqueror02/28/21, 09:17:41 AM"I have two `JsonObject`s, one is parsed from the file, and one is created manually.
Both contains some properties, where some are converted to `JsonPrimitive`s.

`JsonPrimitive` from the first object contains `LazilyParsedNumber` as a value.
`JsonPrimitive` from the second object, which I set manually, contains `Float` as a value.

Let's imagine that both of them contain the value `4558.08`, so it should be the same.
But when I try to compare them using `JsonPrimitive#equals`, it says, that they are not the same.

While calling this method, `JsonPrimitive` values are compared, using `Number#doubleValue()`.
When converting to double, `JsonPrimitive` with `LazilyParsedNumber` value becomes `4558.08`.
But` JsonPrimitive` with `Float` value becomes `4558.080078125`, so they are not the same.

So how can properly compare them?"">  so they are not the same.

They [cannot](https://stackoverflow.com/questions/916081/convert-float-to-double-without-losing-precision) be equal.

> So how can properly compare them?

* either using the ""[epsiloned](https://stackoverflow.com/questions/1088216/whats-wrong-with-using-to-compare-floats-in-java)"" way;
* or using a container, say strings or `BigDecimal`s.

```java
public final class ComparisonTest {

	@Test
	public void testDoubleEquals() {
		final double v1 = 4558.08D;
		final double v2 = 4558.08F;
		Assertions.assertFalse(Math.abs(v1 - v2) < 0.00000001D);
	}

	@Test
	public void testBigDecimalEquals() {
		final JsonPrimitive v1 = new JsonPrimitive(new LazilyParsedNumber(""4558.08""));
		final JsonPrimitive v2 = new JsonPrimitive(4558.08);
		Assertions.assertTrue(v1.getAsBigDecimal().equals(v2.getAsBigDecimal()));
	}

}
``` =||= Got it, thanks! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1866java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 45 path $.USD (Kotlin)TexasT509/08/21, 01:19:07 PM"I have Problem ""java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 45 path $.USD""
I did some research on this issue, but there was no result.


My Code Build

### Interface
```
 interface ApiService {
    @Headers(""Content-Type: application/json"")
     @GET(""today.json"")
   fun getData() : Call<Data>
 }
```


### Data Class
```
data class Data(
 @SerializedName(""Update_Date"")
 val Update_Date : String,
 @SerializedName(""USD"")
 var USD: List<USDList>,
)
```
### **List<USDList>**

```
data class USDList ( 
    @SerializedName(""Buying"")
    @Expose
    var buying: String? = null,

    @SerializedName(""Selling"")
    @Expose
    var selling: String? = null,

     @SerializedName(""Type"")
     @Expose
      var type: String? = null,

      @SerializedName(""Name"")
      @Expose
       var name: String? = null)
```

### MainActivity

```
val retrofit = Retrofit.Builder()
           .addConverterFactory(GsonConverterFactory.create())
           .baseUrl(""https://finans.truncgil.com/v2/"")
           .build()

        val retrofitCreate = retrofit.create(ApiService::class.java)
        retrofitCreate.getData().enqueue(object : Callback<Data>{
            override fun onResponse(call: Call<Data>, response: Response<Data>) {
                println(""Datas : ${response.body().toString()}"")
                showData(response.body())
            }

            private fun showData(body: Data?) {
                recylerViewDöviz.apply {
                    adapter = body.let { DövizRecylerView(it!! , this@DovizActivity) }
                    layoutManager = LinearLayoutManager(this@DovizActivity)
                }
            }

            override fun onFailure(call: Call<Data>, t: Throwable) {
                Log.e(TAG , t.localizedMessage.toString())
            }

        })
```

How to fix problem?   I don't know if it is forbidden to share links  https://finans.truncgil.com/v2/today.json I get the json data from here
""As described by the exception message your data class makes Gson expect a JSON array (because you are using `List<...>`), but the actual JSON data is using a JSON object:
```json
""USD"":{""Buying"":""7,0253"",""Selling"":""7,0380"",""Type"":""Exchange"",""Name"":""ABD DOLARI""}
```
You will have to fix your data class to correctly repesent the JSON structure. =||= @TexasT5 This is the kind of problem that would be better for Stack Overflow. It's a problem you're encountering using the library and you haven't confirmed that it's a bug (aka ""issue"") with the library. Usually, folks on Stack Overflow can help you find the bug in your code (since that's where the problem is in this case) and if no one can help find an issue with your code, it means it's a problem with the library and you'd post here. =||= I also facing the same problem. I appreciate the answer of marcono1234 but he didn't provide any useful structure for objects to get data from. So, i will also be thankful if someone post the right article or answer here. Thanks =||= The comment from @mattwelke sums up the situation well. This sounds like a problem with using the library rather than with the library itself, and Stack Overflow would be a better venue. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1868Is this project actively maintained? Do you need help?Yeikelyeikel03/01/21, 08:25:05 PM"Hi team, 

Last release for this project was in Oct, 2019 and there are over 400 issues and 155 PRs open at the time of this issue. 

Is this project still maintained?  Do you need help to manage it? 

Thank you! ""Hi Yeikel,

The project is in mostly a maintenance mode, with few updates being accepted at this time. Gson is used very widely and 100% backward compatibility is very critical to us. We are also quite averse to expanding the API footprint substantially.

You can certainly help by looking at the open PRs that are small scoped and add review comments to help us accept or reject them. Also, please look at whether good test-cases are added.

Thanks
Inder
 =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1869Caling .toArray on a LinkedTreeMap of LinkedTreeMap's throws an array store exceptionAnilPeresDaSilva03/03/21, 12:58:25 AM"here is sample code that reproduces the issue... (reproduced with build 2.8.6)
		String s = ""[{\""self\"":\""https://microfocus.atlassian.net/rest/api/2/version/10312\"",\""id\"":\""10312\"",\""name\"":\""Release 1\"",\""archived\"":false,\""released\"":false,\""projectId\"":12111}]"";
		LinkedTreeMap[] mm = (LinkedTreeMap[]) new Gson().fromJson(s, LinkedTreeMap[].class);
		for (LinkedTreeMap m : mm) {
			LinkedTreeMap[] members = (LinkedTreeMap[])m.keySet().toArray(new LinkedTreeMap[0]);
		}"" apologies.
The result of this parse is a list of nodes, not a list of maps. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1872why ? to json return nullYanQin-JAVA03/08/21, 01:53:25 AM"
       public static void main(String[] args) throws JsonProcessingException {
		class User{
			private String a;

			public User() {
			}

			public User(String a) {
				this.a = a;
			}

			@Override
			public String toString() {
				return ""User{"" +
						""a='"" + a + '\'' +
						'}';
			}

			public String getA() {
				return a;
			}

			public void setA(String a) {
				this.a = a;
			}
		}

		ArrayList<Object> users = Lists.newArrayList(new User(""a""), new User(""b""));
		Gson gson = new GsonBuilder().create();
		String s = gson.toJson(new User(""c""));
		String s1 = (new ObjectMapper()).writeValueAsString(users);
		System.out.println(""s = "" + s);
		System.out.println(""s1 = "" + s1);


	}



//return :
s = null
s1 = [{""a"":""a""},{""a"":""b""}]""gson version : 2.8.6 =||= Local classes are not supported. See #1510 and https://github.com/google/gson/blob/master/UserGuide.md#finer-points-with-objects. To solve this make `User` either a top-level class or a `static` nested class.

(comment copied from lyubomyr-shaydariv's comment [here](https://github.com/google/gson/issues/1795#issuecomment-706591619)) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1874Serializer-Adapter not working in Objects in an array [GSON 2.8.6]iubye03/18/21, 10:57:47 AM"I am using a LocalDateSerializer registered with GsonBuilder.

`
class LocalDateSerializer implements JsonSerializer<LocalDate> {
  
  public JsonElement serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context) {
    return new JsonPrimitive(date.format(DateTimeFormatter.ISO_LOCAL_DATE));
  }
}
`
`
new GsonBuilder() //
        .disableHtmlEscaping() //
        .setFieldNamingPolicy(FieldNamingPolicy.IDENTITY) //
        .registerTypeAdapter(LocalDate.class, new LocalDateSerializer()).create();
`
Now i am trying to convert the following json
`
String json = ""[{\""date\"":\""2012-04-22\""},{\""date\"":\""1877-02-18\""}]"";
`
to a Java-Object. But I get this error:
`
com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 11 path $[0].date
`
When i am not useing the Json-Object in an array, it works fine!
`
String json = ""{\""date\"":\""2012-04-22\""}"";
`

When I use a TypeAdapter<LocalDate> it works as Object and in an Array.

I am not sure if this is an error or if thats a wanted behaviour.
"Ok... I mus use the Deserializer, that was my mistake! =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1878replaced deprecated constructor call with static factory callNils Wendenilswende09/13/21, 07:35:45 PMNaNLooks like this was already fixed by #1953. =||= Indeed, this is already fixed. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1879[Question]: Return new ParameterizedTypeHossein AbbasiDrjacky04/04/21, 06:10:04 PM"In Moshi library, we could do something like this:
```kotlin
val observableEmissionType = getParameterUpperBound(0, returnType)
val successBodyType = getParameterUpperBound(0, observableEmissionType)
val delegateType = Types.newParameterizedType( //Types: com.squareup.moshi.Types -> https://square.github.io/moshi/1.x/moshi/com/squareup/moshi/Types.html#newParameterizedType-java.lang.reflect.Type-java.lang.reflect.Type...-
    Observable::class.java,
    successBodyType
)
```

How we could do the same in Gson?

In old versions, we had a similar thing:
https://javadoc.io/doc/com.google.code.gson/gson/1.7.1/com/google/gson/internal/$Gson$Types.html"It sounds like you are looking for [`TypeToken.getParameterized(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/reflect/TypeToken.html#getParameterized(java.lang.reflect.Type,java.lang.reflect.Type...)). This gives you a `TypeToken` on which you can then invoke `getType()` to get a `Type` (which is actually a `ParameterizedType`). =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1882"Changed the name of the method ""equal"""RosieKatze08/31/21, 04:33:57 PMNaN"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1882) for more info**.

<!-- need_sender_cla --> =||= I don't think there's a compelling reason for this change and the CLA has not been signed. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1888Bump maven-bundle-plugin from 3.3.0 to 5.1.2dependabot[bot]05/13/21, 11:39:58 PM"Bumps maven-bundle-plugin from 3.3.0 to 5.1.2.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.felix:maven-bundle-plugin&package-manager=maven&previous-version=3.3.0&new-version=5.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-bundle-plugin from 3.3.0 to 5.1.2dependabot[bot]05/13/21, 11:39:58 PM"Bumps maven-bundle-plugin from 3.3.0 to 5.1.2.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.felix:maven-bundle-plugin&package-manager=maven&previous-version=3.3.0&new-version=5.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/13/21, 11:31:25 PM"Bump maven-bundle-plugin from 3.3.0 to 5.1.2

Bumps maven-bundle-plugin from 3.3.0 to 5.1.2.

Signed-off-by: dependabot[bot] <support@github.com>"1
1889Bump maven-javadoc-plugin from 2.10.4 to 3.2.0dependabot[bot]05/13/21, 11:39:39 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d3b77d6e1bbd079a0d5d0659a183871b3f638c53""><code>d3b77d6</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/41bc516c85cdd832a521f3acc64128533139e0af""><code>41bc516</code></a> back to 3.2.0-SNAPSHOT</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/819cf1eb954952c3a194d3973e5d416b592db1bc""><code>819cf1e</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/45f4b3e6b501ac05d99e529fc1abdaa4edf32b1b""><code>45f4b3e</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d772fce836c44fb64bd67b103cb839c2de213bb4""><code>d772fce</code></a> MJAVADOC-610 Add IT test for multirelease jar</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/37d0ef59000410a0e33e0cd3fc48fe727ab76108""><code>37d0ef5</code></a> [MJAVADOC-638] upgrade Doxia Sitetools to 1.9.2 to remove dependency on Strut...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/528ce30dae9932c153f11b834f1e3450a06c14c6""><code>528ce30</code></a> [MJAVADOC-639] Switch to Oracle OpenJDK 11 compatible jar, see MJAVADOC-610</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/405b16dc1de312d31f8a4f31c1cf8a07db3220eb""><code>405b16d</code></a> [MJAVADOC-639] include requires static from external dependencies for all mod...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/aaa200709beef93a57af399a7247410f027c6962""><code>aaa2007</code></a> [MJAVADOC-637] make build Reproducible</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/7bfa76d3b9bdf61cb78152292420843a15b7bd76""><code>7bfa76d</code></a> [MJAVADOC-636] exclude some modules from aggregated javadoc</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=2.10.4&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-javadoc-plugin from 2.10.4 to 3.2.0dependabot[bot]05/13/21, 11:39:39 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d3b77d6e1bbd079a0d5d0659a183871b3f638c53""><code>d3b77d6</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/41bc516c85cdd832a521f3acc64128533139e0af""><code>41bc516</code></a> back to 3.2.0-SNAPSHOT</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/819cf1eb954952c3a194d3973e5d416b592db1bc""><code>819cf1e</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/45f4b3e6b501ac05d99e529fc1abdaa4edf32b1b""><code>45f4b3e</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d772fce836c44fb64bd67b103cb839c2de213bb4""><code>d772fce</code></a> MJAVADOC-610 Add IT test for multirelease jar</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/37d0ef59000410a0e33e0cd3fc48fe727ab76108""><code>37d0ef5</code></a> [MJAVADOC-638] upgrade Doxia Sitetools to 1.9.2 to remove dependency on Strut...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/528ce30dae9932c153f11b834f1e3450a06c14c6""><code>528ce30</code></a> [MJAVADOC-639] Switch to Oracle OpenJDK 11 compatible jar, see MJAVADOC-610</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/405b16dc1de312d31f8a4f31c1cf8a07db3220eb""><code>405b16d</code></a> [MJAVADOC-639] include requires static from external dependencies for all mod...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/aaa200709beef93a57af399a7247410f027c6962""><code>aaa2007</code></a> [MJAVADOC-637] make build Reproducible</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/7bfa76d3b9bdf61cb78152292420843a15b7bd76""><code>7bfa76d</code></a> [MJAVADOC-636] exclude some modules from aggregated javadoc</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=2.10.4&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/13/21, 11:31:25 PM"Bump maven-javadoc-plugin from 2.10.4 to 3.2.0

Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 2.10.4 to 3.2.0.
- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)
- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-2.10.4...maven-javadoc-plugin-3.2.0)

Signed-off-by: dependabot[bot] <support@github.com>"1
1890Bump bnd-maven-plugin from 4.0.0 to 5.3.0dependabot[bot]05/13/21, 11:39:26 PM"Bumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/bndtools/bnd/releases"">bnd-maven-plugin's releases</a>.</em></p>
<blockquote>
<h2>Bnd/Bndtools 5.3.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.3.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.2.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.2.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.2</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.2"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.1</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.1"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.0.1</h2>
<p>Maintenance release.</p>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.0.1"">Release Notes</a>.</p>
<h2>5.0.1.RC2</h2>
<p>No release notes provided.</p>
<h2>5.0.1.RC1</h2>
<p>No release notes provided.</p>
<h2>Bnd/Bndtools 5.0.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.0.0"">Release Notes</a>.</p>
<h2>4.4.0.DEV</h2>
<p>No release notes provided.</p>
<h2>4.3.1</h2>
<p>Maintenance fix release for 4.3.0</p>
<h2>4.3.1.DEV</h2>
<p>No release notes provided.</p>
<h2>4.3.1.RC1</h2>
<p>No release notes provided.</p>
<h2>4.3.0.REL</h2>
<p>No release notes provided.</p>
<h2>4.2.0.REL</h2>
<p>No release notes provided.</p>
<h2>4.1.0.REL</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/bndtools/bnd/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:bnd-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=5.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump bnd-maven-plugin from 4.0.0 to 5.3.0dependabot[bot]05/13/21, 11:39:26 PM"Bumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/bndtools/bnd/releases"">bnd-maven-plugin's releases</a>.</em></p>
<blockquote>
<h2>Bnd/Bndtools 5.3.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.3.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.2.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.2.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.2</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.2"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.1</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.1"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.1.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.1.0"">Release Notes</a>.</p>
<h2>Bnd/Bndtools 5.0.1</h2>
<p>Maintenance release.</p>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.0.1"">Release Notes</a>.</p>
<h2>5.0.1.RC2</h2>
<p>No release notes provided.</p>
<h2>5.0.1.RC1</h2>
<p>No release notes provided.</p>
<h2>Bnd/Bndtools 5.0.0</h2>
<p>See <a href=""https://github.com/bndtools/bnd/wiki/Changes-in-5.0.0"">Release Notes</a>.</p>
<h2>4.4.0.DEV</h2>
<p>No release notes provided.</p>
<h2>4.3.1</h2>
<p>Maintenance fix release for 4.3.0</p>
<h2>4.3.1.DEV</h2>
<p>No release notes provided.</p>
<h2>4.3.1.RC1</h2>
<p>No release notes provided.</p>
<h2>4.3.0.REL</h2>
<p>No release notes provided.</p>
<h2>4.2.0.REL</h2>
<p>No release notes provided.</p>
<h2>4.1.0.REL</h2>
<p>No release notes provided.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/bndtools/bnd/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:bnd-maven-plugin&package-manager=maven&previous-version=4.0.0&new-version=5.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/13/21, 11:31:27 PM"Bump bnd-maven-plugin from 4.0.0 to 5.3.0

Bumps [bnd-maven-plugin](https://github.com/bndtools/bnd) from 4.0.0 to 5.3.0.
- [Release notes](https://github.com/bndtools/bnd/releases)
- [Changelog](https://github.com/bndtools/bnd/blob/master/docs/ADDING_RELEASE_DOCS.md)
- [Commits](https://github.com/bndtools/bnd/commits)

Signed-off-by: dependabot[bot] <support@github.com>"1
1891Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2dependabot[bot]05/13/21, 11:39:13 PM"Bumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.9.5&new-version=1.11.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-scm-provider-gitexe from 1.9.5 to 1.11.2dependabot[bot]05/13/21, 11:39:13 PM"Bumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.9.5&new-version=1.11.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/13/21, 11:31:28 PM"Bump maven-scm-provider-gitexe from 1.9.5 to 1.11.2

Bumps maven-scm-provider-gitexe from 1.9.5 to 1.11.2.

Signed-off-by: dependabot[bot] <support@github.com>"1
1892Bump junit from 4.12 to 4.13.2dependabot[bot]05/13/21, 11:38:58 PM"Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.2.md"">release notes</a> for details.</p>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/05fe2a64f59127c02135be22f416e91260d6ede6""><code>05fe2a6</code></a> [maven-release-plugin] prepare release r4.13.2</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ff57344f7171ea8b0935c4f842cacf1097266592""><code>ff57344</code></a> Add build for JDK 17-ea</li>
<li><a href=""https://github.com/junit-team/junit4/commit/02aaa01b8f74c0eb496d76685ec49fddeb311087""><code>02aaa01</code></a> Improve check that thread is stopped</li>
<li><a href=""https://github.com/junit-team/junit4/commit/e9a75f4be71a4d5a794ccd063522eea4b0f3194f""><code>e9a75f4</code></a> Merge test for exception type and message</li>
<li><a href=""https://github.com/junit-team/junit4/commit/d27ad5259228e84c235dac24cd62f974ac0a8e1d""><code>d27ad52</code></a> Rename DelegateStatement to DelegatingStatement</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b83dc2e8c4ff06cf233cd347f1280bb417482985""><code>b83dc2e</code></a> Better name for test that stops statement</li>
<li><a href=""https://github.com/junit-team/junit4/commit/527f3a3d0d71ad6dc66ede6f68f6fc316904ed2a""><code>527f3a3</code></a> Replace InfiniteLoop with RunForASecond</li>
<li><a href=""https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52""><code>2db6394</code></a> Tidy up FailOnTimeoutTest</li>
<li><a href=""https://github.com/junit-team/junit4/commit/64634e1c3e357251a84278c26b73b04fc3450ea3""><code>64634e1</code></a> Update 4.13.2 release notes to document pull 1654</li>
<li><a href=""https://github.com/junit-team/junit4/commit/f8ee412316b1a94d3dc35498359cc2f0ca273216""><code>f8ee412</code></a> Fix serialization of AssumptionViolatedException (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1654"">#1654</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r4.12...r4.13.2"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump junit from 4.12 to 4.13.2dependabot[bot]05/13/21, 11:38:58 PM"Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/junit-team/junit4/releases"">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13.2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.2.md"">release notes</a> for details.</p>
<h2>JUnit 4.13.1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.1.md"">release notes</a> for details.</p>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href=""https://github.com/junit-team/junit4/wiki/4.13-Release-Notes"">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/junit-team/junit4/commit/05fe2a64f59127c02135be22f416e91260d6ede6""><code>05fe2a6</code></a> [maven-release-plugin] prepare release r4.13.2</li>
<li><a href=""https://github.com/junit-team/junit4/commit/ff57344f7171ea8b0935c4f842cacf1097266592""><code>ff57344</code></a> Add build for JDK 17-ea</li>
<li><a href=""https://github.com/junit-team/junit4/commit/02aaa01b8f74c0eb496d76685ec49fddeb311087""><code>02aaa01</code></a> Improve check that thread is stopped</li>
<li><a href=""https://github.com/junit-team/junit4/commit/e9a75f4be71a4d5a794ccd063522eea4b0f3194f""><code>e9a75f4</code></a> Merge test for exception type and message</li>
<li><a href=""https://github.com/junit-team/junit4/commit/d27ad5259228e84c235dac24cd62f974ac0a8e1d""><code>d27ad52</code></a> Rename DelegateStatement to DelegatingStatement</li>
<li><a href=""https://github.com/junit-team/junit4/commit/b83dc2e8c4ff06cf233cd347f1280bb417482985""><code>b83dc2e</code></a> Better name for test that stops statement</li>
<li><a href=""https://github.com/junit-team/junit4/commit/527f3a3d0d71ad6dc66ede6f68f6fc316904ed2a""><code>527f3a3</code></a> Replace InfiniteLoop with RunForASecond</li>
<li><a href=""https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52""><code>2db6394</code></a> Tidy up FailOnTimeoutTest</li>
<li><a href=""https://github.com/junit-team/junit4/commit/64634e1c3e357251a84278c26b73b04fc3450ea3""><code>64634e1</code></a> Update 4.13.2 release notes to document pull 1654</li>
<li><a href=""https://github.com/junit-team/junit4/commit/f8ee412316b1a94d3dc35498359cc2f0ca273216""><code>f8ee412</code></a> Fix serialization of AssumptionViolatedException (<a href=""https://github-redirect.dependabot.com/junit-team/junit4/issues/1654"">#1654</a>)</li>
<li>Additional commits viewable in <a href=""https://github.com/junit-team/junit4/compare/r4.12...r4.13.2"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/13/21, 11:31:34 PM"Bump junit from 4.12 to 4.13.2

Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.2.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)
- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.2)

Signed-off-by: dependabot[bot] <support@github.com>"1
1894Bump maven-javadoc-plugin from 3.2.0 to 3.3.0dependabot[bot]05/24/21, 10:30:36 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/aa3e12c52f0845f0561f3b4db719c0e8ede1aada""><code>aa3e12c</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/55982df63f8de5bfbb48aee353bc29b35b1c6a2c""><code>55982df</code></a> [MJAVADOC-584] excludePackageNames is not working as documented anymore</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/e9729cecf01bd1962b5fd4cbff14996bad8f92a6""><code>e9729ce</code></a> [MJAVADOC-453] Using Alternate Doclet documentation example snippet is out of...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/9f98af73ec59629415926374cfe4f6ff3b198e45""><code>9f98af7</code></a> [MJAVADOC-592] detectJavaApiLink should also respect maven.compiler.source pr...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/1028afcf24ba35eedf1ebbbe62bd9418e06fb7f6""><code>1028afc</code></a> [MJAVADOC-592] Prepare integration tests</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/1963ee882e6eb0e4f6c15d5eb6205c31d9f73740""><code>1963ee8</code></a> Bump actions/checkout from 2 to 2.3.4</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/f27c99dcf35a27ab06b00ad1e2b30336de39fdf8""><code>f27c99d</code></a> [MJAVADOC-590] Setting nooverview option always causes a build failure</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d5b80c06c9d243a3e267c5dbb5961fd9d514ab87""><code>d5b80c0</code></a> Revert &quot;(doc) enable streamLogsOnFailure&quot;</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/3926bd4cadaa6e4c49c7f973f04927602e384d40""><code>3926bd4</code></a> [MJAVADOC-619] Maven Javadoc bottom claims copyright for future years</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/15a02d6f7928681be6d11a7866ccc09d73a9c869""><code>15a02d6</code></a> (doc) enable streamLogsOnFailure</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"@dependabot rebase =||= Looks like this PR is already up-to-date with master! If you'd still like to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`. =||= Bump maven-javadoc-plugin from 3.2.0 to 3.3.0dependabot[bot]05/24/21, 10:30:36 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/aa3e12c52f0845f0561f3b4db719c0e8ede1aada""><code>aa3e12c</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/55982df63f8de5bfbb48aee353bc29b35b1c6a2c""><code>55982df</code></a> [MJAVADOC-584] excludePackageNames is not working as documented anymore</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/e9729cecf01bd1962b5fd4cbff14996bad8f92a6""><code>e9729ce</code></a> [MJAVADOC-453] Using Alternate Doclet documentation example snippet is out of...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/9f98af73ec59629415926374cfe4f6ff3b198e45""><code>9f98af7</code></a> [MJAVADOC-592] detectJavaApiLink should also respect maven.compiler.source pr...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/1028afcf24ba35eedf1ebbbe62bd9418e06fb7f6""><code>1028afc</code></a> [MJAVADOC-592] Prepare integration tests</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/1963ee882e6eb0e4f6c15d5eb6205c31d9f73740""><code>1963ee8</code></a> Bump actions/checkout from 2 to 2.3.4</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/f27c99dcf35a27ab06b00ad1e2b30336de39fdf8""><code>f27c99d</code></a> [MJAVADOC-590] Setting nooverview option always causes a build failure</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d5b80c06c9d243a3e267c5dbb5961fd9d514ab87""><code>d5b80c0</code></a> Revert &quot;(doc) enable streamLogsOnFailure&quot;</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/3926bd4cadaa6e4c49c7f973f04927602e384d40""><code>3926bd4</code></a> [MJAVADOC-619] Maven Javadoc bottom claims copyright for future years</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/15a02d6f7928681be6d11a7866ccc09d73a9c869""><code>15a02d6</code></a> (doc) enable streamLogsOnFailure</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.2.0&new-version=3.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]05/24/21, 06:27:14 AM"Bump maven-javadoc-plugin from 3.2.0 to 3.3.0

Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.2.0 to 3.3.0.
- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)
- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.2.0...maven-javadoc-plugin-3.3.0)

Signed-off-by: dependabot[bot] <support@github.com>"1
1895Update user guide and change log to reflect 2.8.7 release.Éamonn McManuseamonnmcmanus05/25/21, 12:42:32 AMNaNNaNUpdate user guide and change log to reflect 2.8.7 release.Éamonn McManuseamonnmcmanus05/25/21, 12:42:32 AMNaNNaNÉamonn McManus05/24/21, 11:39:52 PMUpdate user guide and change log to reflect 2.8.7 release.1
1897Update README.md version 2.8.6 -> 2.8.7Conclure05/27/21, 02:16:48 PMversion 2.8.6 -> 2.8.7 for gradle and maven dependencies block"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1897) for more info**.

<!-- need_sender_cla --> =||= > @googlebot I signed it!

 =||= Thanks! =||= "Update README.md version 2.8.6 -> 2.8.7Conclure05/27/21, 02:16:48 PMversion 2.8.6 -> 2.8.7 for gradle and maven dependencies blockNaNConclure05/26/21, 11:27:53 AM"Update README.md version 2.8.6 -> 2.8.7

version 2.8.6 -> 2.8.7 for gradle and maven dependencies block"1
1909Test cases for testing the exceptional behavior of JsonArray get... methodsAjay Kumar JhaHiFromAjay08/07/21, 02:54:13 PMTest cases for testing the exceptional behavior of `get`, `getAsBoolean`, `getAsDouble`, `getAsInt`, `getAsJsonArray`, `getAsJsonObject`, `getAsLong`, and `getAsString` methods of `JsonArray` class. These test cases, which we wrote according to the specified behavior of each method, that helped us in identifying the documentation bugs in `JsonArray` and `JsonElement` classes, which we submitted issues for (Issue #1908). Note that we have adapted these test cases based on similar tests from the [JSON-java](https://github.com/stleary/JSON-java) project."
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1909) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= "Test cases for testing the exceptional behavior of JsonArray get... methodsAjay Kumar JhaHiFromAjay08/07/21, 02:54:13 PMTest cases for testing the exceptional behavior of `get`, `getAsBoolean`, `getAsDouble`, `getAsInt`, `getAsJsonArray`, `getAsJsonObject`, `getAsLong`, and `getAsString` methods of `JsonArray` class. These test cases, which we wrote according to the specified behavior of each method, that helped us in identifying the documentation bugs in `JsonArray` and `JsonElement` classes, which we submitted issues for (Issue #1908). Note that we have adapted these test cases based on similar tests from the [JSON-java](https://github.com/stleary/JSON-java) project.NaNHiFromAjay08/05/21, 11:23:28 PMRemove unused imports [#1909, #1908]1
1911FieldNamingPolicy.IDENTITY causes Gson to stop respecting other settingsKyland HolmesKyKoPho06/17/21, 09:32:57 PM"We are seeing that when initializing an instance of Gson like so:

`new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).setPrettyPrinting().disableHtmlEscaping().create();`
that the returned instance no longer respects the pretty printing or the disable HTML escaping settings.

For a Java pojo that looks like

```
public class Recipe implements java.io.Serializable  {
  public java.lang.String id;
  
  public java.lang.String name;
}
```

If we serialize the following json into an instance of that `Recipe` class:

```
{
	""id"": ""abc123"",
	""name"": ""<div> Test </div>""
}
```

Then subsequently deserialize the resultind `Recipe` back to json, the output is:

`{""id"":""abc123"",""name"":""\u003cdiv\u003e Test \u003c/div\u003e""}`

Note that the naming convention has been respected, but there is no whitespace from the pretty printing setting, nor is the HTML unescaped."Note that this is happening in version 2.8.7 of the com.google.code.gson java lib for Gson. =||= This looks like it has to do with the way Spring is autowiring references.  Closing as the repro is not reliable. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1914MD.MAMUNSAAD ->GitHub.com_apache.orgsaadmamun7g06/29/21, 08:34:49 PM"libphonenumber

Project: https://github.com/googlei18n/libphonenumber.git

© 2012 The Libphonenumber Authors

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


gson

Project: https://github.com/google/gson.git

© 2008 Google Inc.

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


commons-codec

Project: http://svn.apache.org/repos/asf/commons/proper/codec/trunk

© 2002-2014 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


commons-logging

Project: http://svn.apache.org/repos/asf/commons/proper/logging/trunk/

© 2002-2014 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


httpcomponents

Project: http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk

© 1999-2015 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


httpcore

Project: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk

© 2005-2014 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


json

Project: https://github.com/douglascrockford/JSON-java

© 2002 JSON.org

License: JSON http://www.json.org/license.html


disklrucache

Project: https://github.com/JakeWharton/DiskLruCache

© 2012 Jake Wharton

© 2011 The Android Open Source Project

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


javax.inject

Project: https://code.google.com/archive/p/atinject/

© 2009 The JSR-330 Expert Group

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


android-priority-jobqueue

Project: https://github.com/path/android-priority-jobqueue

© 2013 Path, Inc.

License: The MIT License (MIT) https://opensource.org/licenses/MIT


org.khronos:opengl-api:gl1.1-android-2.1_r1

Project: https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/opengl/java/javax/microedition/khronos

© 2006, The Android Open Source Project

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


Xerces

Project: http://svn.apache.org/repos/asf/xerces/java/trunk

© 1999-2015 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


MXP1

Project: http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/

© 2001-2003 The Apache Software Foundation. All rights reserved.

© 2003 Extreme! Lab, Indiana University. All rights reserved.

© 2002-2004 Extreme! Lab, Indiana University. All rights reserved.

© 2003 The Trustees of Indiana University.

© 2002-2004 The Trustees of Indiana University.

© 2002 Raphael Szwarc. All Rights Reserved.

License: Apache 1.1 https://www.apache.org/licenses/LICENSE-1.1


stickyheadersrecyclerview

Project: https://github.com/timehop/sticky-headers-recyclerview.git

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


slidinguppanel

Project: https://github.com/umano/AndroidSlidingUpPanel.git

© 1999-2015 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


linear-layout-manager

Project: https://github.com/serso/android-linear-layout-manager.git

© 2014, 2015 serso aka se.solovyev

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


Underscore.js

Project: http://underscorejs.org/

© 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative

License: https://github.com/jashkenas/underscore/blob/master/LICENSE


java-util/CaseInsensitiveMap

Project: https://github.com/jdereg/java-util

© Cedar Software LLC

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


CountingOutputStream/CountingInputStream

Project: https://github.com/google/guava/tree/master/guava/src/com/google/common/io

© Google, Inc.

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


mustache.js

Project: https://github.com/janl/mustache.js

© 2009 Chris Wanstrath (Ruby)

© 2010-2014 Jan Lehnardt (JavaScript)

© 2010-2015 The mustache.js community

License: The MIT License (MIT) https://opensource.org/licenses/MIT


Lodash

Project: https://github.com/lodash/lodash

© JS Foundation and other contributors <https://js.foundation/>

License: The MIT License (MIT) https://opensource.org/licenses/MIT


Glide

Project: https://github.com/bumptech/glide

© 2012 Jake Wharton

© 2011 The Android Open Source Project

© 2013 Xcellent Creations, Inc.

© 1994 Anthony Dekker

License: BSD, part MIT and Apache 2.0https://github.com/bumptech/glide/blob/master/LICENSE


json-simple

Project: https://code.google.com/p/json-simple

© 2009 Fang Yidong and Chris Nokleberg

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


SuperSLiM

Project: https://github.com/TonicArtos/SuperSLiM

© 2014-2015 Tonic Artos

© 2014 Lucas Rocha

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


android-job

Project: https://github.com/evernote/android-job

© 2007-2016 by Evernote Corporation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


vcard

Project: https://android.googlesource.com/platform/frameworks/opt/vcard

© 2009 The Android Open Source Project

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


httpclient-legacy

Project: http://hc.apache.org/httpclient-legacy

© 2014 The Apache Software Foundation

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


OkHttp

Project: http://square.github.io/okhttp/

© 2016 Square, Inc.

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0


lottie-android

Project: https://github.com/airbnb/lottie-android/

License: Apache 2.0 https://www.apache.org/licenses/LICENSE-2.0""Flow me on twitter#saadmamun1 =||= > Flow me on twitter#saadmamun1
![23260.jpg](https://user-images.githubusercontent.com/85457867/123854785-f666d200-d940-11eb-8d93-d0a69443198e.jpg) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1915Refactored three test methods in CustomSerializerTest, and two test methods in ThrowableFunctionalTestAli ImanAliIman07/01/21, 10:58:30 PM"As part of a research project at the University of Waterloo, we are exploring automatic test refactoring tools and submitting vetted proposed refactorings upstream. These refactorings make it easier to add additional related test methods and should help with the maintainability of the tests. In this pull request, we have two refactoring cases that refactors five test methods. We've checked both cases and ensured that all the test runs pass successfully.

If it helps, we can also propose a test case that uses these five refactored test methods. We explained each of the two refactoring cases below.

1. In CustomSerializerTest, after declaration of gson, the only difference between the three test methods ""testBaseClassSerializerInvokedForBaseClassFields() "", ""testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances"", and ""testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances"" is in a class type (new Base() vs new Sub()) and a string (BaseSerializer.NAME vs SubSerializer.NAME). We create ""testSerializerInvokedForBaseClassFieldsTemplate(Gson gson, Class<TBase> clazzTBase, String string1)"" parametrized method, which allows you to add similar test cases with different arguments gson, clazzTBase and string1.

2. In ThrowableFunctionalTest, the only difference between the two test methods ""testExceptionWithoutCause()"" and ""testErrorWithoutCause()"" is in a class type (RuntimeException.class vs OutOfMemoryError.class). We create ""testThrowableWithoutCauseTemplate(Class<TThrowable> clazzTThrowable, String msg, String jsonString)"" parametrized method, which allows you to add similar test cases with different arguments clazzTThrowable, msg, and jsonString.""Thanks for your contribution!

A few remarks.

1. This project is in maintenance mode, and we're generally going to be reluctant to accept PRs that are essentially cosmetic, especially if it is not trivially obvious that they don't change anything.
2. Anyway, I'm not really convinced that the change would be an improvement. The new helper methods seem more complicated than I would expect. I don't see why they catch and rethrow exceptions, for example. They also have type parameters that don't seem useful.
3. As a more general remark, refactoring test methods to remove duplication isn't as obviously beneficial as with production code. It's an advantage to be able to understand a test method in isolation, without having to look elsewhere in the test class.

So I think we're not going to accept this one. Thanks for thinking of us, though, and best wishes for your research! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1916error on latest openjdkchengweiou07/05/21, 11:42:44 PM"### **Summary**:

work on oracle jdk 11, docker openjdk 11.
not work on docker openjdk latest


### **Request info:**

String: {""person"":{""id"":1}}
Method: new Gson().fromJson(accountJson, Account.class);
Account.class: https://github.com/chengweiou/carina/blob/dev/src/main/java/chengweiou/universe/carina/base/converter/Account.java



### **Solution for now:  (pick one)**

1. using jdk11.
2. using gsonbuilder to add localdate and localdatetime typeadapter


### **Exception Stack:**

Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not ""opens java.time"" to unnamed module @27abe2cd'} java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.time.LocalDate java.time.LocalDateTime.date accessible: module java.base does not ""opens java.time"" to unnamed module @27abe2cd
	at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:357) ~[?:?]
	at java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) ~[?:?]
	at java.lang.reflect.Field.checkCanSetAccessible(Field.java:177) ~[?:?]
	at java.lang.reflect.Field.setAccessible(Field.java:171) ~[?:?]
	at com.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(UnsafeReflectionAccessor.java:44) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:159) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.getAdapter(Gson.java:458) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.fromJson(Gson.java:931) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.fromJson(Gson.java:897) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.fromJson(Gson.java:846) ~[gson-2.8.7.jar!/:?]
	at com.google.gson.Gson.fromJson(Gson.java:817) ~[gson-2.8.7.jar!/:?]
	at chengweiou.universe.carina.interceptor.AuthInterceptorMe.preHandle(AuthInterceptorMe.java:21) ~[classes!/:?]
	at org.springframework.web.servlet.HandlerExecutionChain.applyPreHandle(HandlerExecutionChain.java:148) ~[spring-webmvc-5.3.7.jar!/:5.3.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1058) [spring-webmvc-5.3.7.jar!/:5.3.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963) [spring-webmvc-5.3.7.jar!/:5.3.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.3.7.jar!/:5.3.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.3.7.jar!/:5.3.7]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:497) [jakarta.servlet-api-4.0.4.jar!/:4.0.4]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.3.7.jar!/:5.3.7]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:584) [jakarta.servlet-api-4.0.4.jar!/:4.0.4]
	at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.3.7.jar!/:5.3.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.3.7.jar!/:5.3.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96) [spring-boot-actuator-2.5.0.jar!/:2.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.3.7.jar!/:5.3.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.3.7.jar!/:5.3.7]
	at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99) [undertow-servlet-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:387) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:841) [undertow-core-2.2.7.Final.jar!/:2.2.7.Final]
	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]
	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1423) [jboss-threads-3.1.0.Final.jar!/:3.1.0.Final]
	at java.lang.Thread.run(Thread.java:831) [?:?]""The reason for this is that you are trying to serialize a JDK class (`java.time.LocalDateTime`) using Gson's reflection-based type adapter. That adapter is used if no built-in adapter exists (see also #1059) and you have not provided your own.

This issue is similar to #1216; you should avoid using (implicitly) the reflective type adapter for third party classes because you make yourself dependent on the internal implementation of these classes (which could change at any point).

> using gsonbuilder to add localdate and localdatetime typeadapter

This is the proper solution to this problem. Alternatively you could look for third party projects adding support for `LocalDateTime`, for example https://github.com/gkopff/gson-javatime-serialisers, but that project might not be actively maintained anymore. =||= Hi, @Marcono1234 
Maybe I didn't explain clearly

Without any changes, the only thing I do to make it work again is switch back to jdk 11

At the beginning,
I was using: java11 + gson:2.8.7
and the api i was using: new Gson().fromJson(string, classType);
I didn't have any adapter.
It worked as expect for a long time.

And then, 
Today, sorry, I mean yesterday. I used docker openjdk latest version deployed my project.
This exception was thrown.

And then,
I thought I have changed something made it didn't work, 
so I added a localdate and localdatetime adapter. It worked again.

At the end,
I think I shouldn't made any changes that relate to this part of my project,
so I deleted this adapter and used my computer to run my project. It worked fine.
after this, I guess maybe is oraclejdk and openjdk's different. but I tried using docker jdk 11, It also worked.

 =||= > I think I shouldn't made any changes that relate to this part of my project,
so I deleted this adapter and used my computer to run my project. It worked fine.
after this, I guess maybe is oraclejdk and openjdk's different. but I tried using docker jdk 11, It also worked.

No, you really should write a custom `TypeAdapter`. Your application is currently relying on the internal representation of `LocalDateTime`; have a look at the JSON data and you should see that it uses the names of the private fields of that class. Your program could break at any point when the internal `LocalDateTime` implementation changes. And in fact, the exception you are experiencing is related to that. Since JDK 16, you cannot access JDK internals using reflection anymore by default (see [JDK-8256358](https://bugs.openjdk.java.net/browse/JDK-8256358)).

So if you want to make sure your application runs on JDK 16 and all future versions your only choice is to write a custom `TypeAdapter`. =||= @Marcono1234 
Thanks for shared the document. I understand now =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1918Serialization JSonaschmidt7007/13/21, 01:37:03 PM"By the serealization of my objects to Json I get a strange behaviour. The properties are not filled correctly by a release app.
After the ""inventory"" it fills the properties with ""a"",""b"",""c"". And that is not correct. There are names as at the beginning .

When I compile a debug app all is fine.

The values are correct.
(Here in the example I have deleted the values).

But it happens in the moment only on one device app.

Any ideas?

The Result is:

{""base"":{""manufacturer"":"""",""model"":"""",""name"":"""",""org-id"":"""",""serial"":"""",""time"":""2021-07-13T09:17:38+0200""},""apps"":{""app"":[{"""",""version"":""0.7.2.1"",""last-active"":""2021-07-13T09:17:38+0200"",""attribute1"":"""",""attribute2"":""""}]},""inventory"":
{""a"":{""a"":[{""a"":"""",""b"":"""",""c"":"""",""d"":""1""},{""a"":"""",""b"":"""",""c"":"""",""d"":""""},{""a"":"""",""b"":"""",""c"":"""",""d"":""1""},{""a"":"""",""b"":"""",""c"":"""",""d"":""1""}]}}}"NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1919(Not a bug) Corrupted JSON file with Files.writeStringdelvh08/17/21, 10:05:24 PM"
## Usage
```java
new Gson().toJson(<a Map storing all kinds of values and strings as keys>);
```

## GSON version
`2.8.6`, `2.8.7`

## Problem
I have noticed a possibility to corrupt the output of a generated JSON file.
In the json file below, you can see that, even though the JSON object has already been closed, something else is still appended, subsequently breaking the JSON file.

```json
{
  ""last_file_chooser_dir"": ""/home/delvh/git/project/target"",
  ""recent_documents"": [
    ""/home/delvh/git/project/test1.xml"",
    ""/home/delvh/git/project/test2.xml"",
    ""/home/delvh/git/project/test3.xml""
  ],
  ""config_version"": 1,
  ""open_documents"": [
    ""/home/delvh/git/project/target"",
    ""/home/delvh/git/project""
  ]
}ect/target"",""config_version"":1}
```
## Another example
```json
{
  ""last_file_chooser_dir"": ""/home/delvh/git/test/project"",
  ""recent_documents"": [],
  ""language"": ""en"",
  ""open_paths"": [
    ""/home/delvh/git/test/project""
  ],
  ""open_documents"": [],
  ""config_version"": 1
}project""],""open_documents"":[""/home/delvh/git/test/project/test.xml""]}
```""I recognize this problem as it had affected me in the past. I believe that you are using `Files.writeString` or `Files.write`, right? Well, these methods by default only change the beginning of the file meaning if the new JSON is shorter than the JSON already in the file, there will be leftover parts. So to fix this you need to add `StandardOpenOption.TRUNCATE_EXISTING` like for example `Files.writeString(Path.of(""abc.json""), myJson, StandardOpenOption.TRUNCATE_EXISTING);`

Hope it helps. =||= Thanks a lot, @ogrammer.
Now I can consistently reproduce this issue, and what you mentioned seems indeed correct.
Who would have known that supplying **less** parameters would solve this issue.
For context, as you mentioned, previously I used
```java
Files.writeString(path, string, StandardOpenOptions.CREATE, StandardOpenOptions.WRITE)
```
But as it seems, correct would have been either
```java
Files.writeString(path, string, StandardOpenOptions.CREATE, StandardOpenOptions.WRITE, StandardOpenOptions.TRUNCATE_EXISITING)
```
or
```java
Files.writeString(path, string)
```
which appear to do the same as write apparently uses exactly these three options if none are given…

In conclusion, this was not the fault of GSON, but the fault of semi-intuitive API design in `Files.writeString`. =||= @delvh No problem, happy to help. I didn't know just using writeString without any open options already supplies `CREATE` and `TRUNCATE_EXISTING`, my code will be cleaner now, thanks :) We both learned something =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1922"Unable to make field private java.lang.String java.lang.Throwable.detailMessage accessible: module java.base does not ""opens java.lang"" to unnamed module @2baf3d81"Magnus NeumannTheMagBum07/22/21, 08:56:00 PM"Error: https://paste.timo.cloud/vewikidonu.cs
JDK 16

i have regested a StringConverter in the builder, but unfortunately this did not fix this problem and now i am stuck. ""> i have regested a StringConverter in the builder, but unfortunately this did not fix this problem and now i am stuck

Do you mean a `TypeAdapter` (or `JsonSerializer`)? Could you please provide a small, runnable example showing the code you are using. =||=  I made a JsonSerilizer for a Third Party class with extended RuntimeException, thats solve the issue. Thank you! =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1924Adjust some minor details of #1391.Éamonn McManuseamonnmcmanus08/03/21, 12:37:53 AM"Use two-space indentation for the new test.
Use standard Google import style.
Supply missing type argument for `TypeVariable`."NaNAdjust some minor details of #1391.Éamonn McManuseamonnmcmanus08/03/21, 12:37:53 AM"Use two-space indentation for the new test.
Use standard Google import style.
Supply missing type argument for `TypeVariable`."NaNÉamonn McManus08/03/21, 12:33:10 AM"Adjust some minor details of #1391.

Use two-space indentation for the new test.
Use standard Google import style.
Supply missing type argument for `TypeVariable`."1
1925Bump maven-resources-plugin from 2.7 to 3.2.0dependabot[bot]08/05/21, 01:28:52 PM"Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/61096d9200bc226311d92effc3de3cbe8086d1ad""><code>61096d9</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/fa28224811262ae045bd96cdff7540f993a0ba17""><code>fa28224</code></a> Rollback to make a new release attempt.</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/22120e9eae074ef29a1ed61de8a2e9829010682d""><code>22120e9</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/6bf362e05843eef5fb05c4e1654ccfb6042d65a9""><code>6bf362e</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/0f26239591eace68def9d0045a437ef256936570""><code>0f26239</code></a> [MRESOURCES-263] Update to maven-filtering 3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/6624e45411b02b1c31694042e9b5f9b386422904""><code>6624e45</code></a> future proof method that is marked for incompatible change (<a href=""https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/6"">#6</a>)</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/b974fb27221a78c41c8cc70a2530da722a939184""><code>b974fb2</code></a> try with resources (<a href=""https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/5"">#5</a>)</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/b42cd5a1f66e87b7466373e2d1415c7044fc3f2a""><code>b42cd5a</code></a> [MRESOURCES-232] Resource copy filtering should use different encoding for so...</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/4b468985e02465f9991a2d14ce7f3e4b2e611091""><code>4b46898</code></a> [MRESOURCES-257] property from list element in pom model</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/a2fb8d421f62f354b69c227f06280cc30eadbeea""><code>a2fb8d4</code></a> Bump version to a new minor version, since we have added functionality.</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=2.7&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-resources-plugin from 2.7 to 3.2.0dependabot[bot]08/05/21, 01:28:52 PM"Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/61096d9200bc226311d92effc3de3cbe8086d1ad""><code>61096d9</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/fa28224811262ae045bd96cdff7540f993a0ba17""><code>fa28224</code></a> Rollback to make a new release attempt.</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/22120e9eae074ef29a1ed61de8a2e9829010682d""><code>22120e9</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/6bf362e05843eef5fb05c4e1654ccfb6042d65a9""><code>6bf362e</code></a> [maven-release-plugin] prepare release maven-resources-plugin-3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/0f26239591eace68def9d0045a437ef256936570""><code>0f26239</code></a> [MRESOURCES-263] Update to maven-filtering 3.2.0</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/6624e45411b02b1c31694042e9b5f9b386422904""><code>6624e45</code></a> future proof method that is marked for incompatible change (<a href=""https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/6"">#6</a>)</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/b974fb27221a78c41c8cc70a2530da722a939184""><code>b974fb2</code></a> try with resources (<a href=""https://github-redirect.dependabot.com/apache/maven-resources-plugin/issues/5"">#5</a>)</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/b42cd5a1f66e87b7466373e2d1415c7044fc3f2a""><code>b42cd5a</code></a> [MRESOURCES-232] Resource copy filtering should use different encoding for so...</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/4b468985e02465f9991a2d14ce7f3e4b2e611091""><code>4b46898</code></a> [MRESOURCES-257] property from list element in pom model</li>
<li><a href=""https://github.com/apache/maven-resources-plugin/commit/a2fb8d421f62f354b69c227f06280cc30eadbeea""><code>a2fb8d4</code></a> Bump version to a new minor version, since we have added functionality.</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-resources-plugin&package-manager=maven&previous-version=2.7&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]08/05/21, 03:02:56 AM"Bump maven-resources-plugin from 2.7 to 3.2.0

Bumps [maven-resources-plugin](https://github.com/apache/maven-resources-plugin) from 2.7 to 3.2.0.
- [Release notes](https://github.com/apache/maven-resources-plugin/releases)
- [Commits](https://github.com/apache/maven-resources-plugin/compare/maven-resources-plugin-2.7...maven-resources-plugin-3.2.0)

---
updated-dependencies:
- dependency-name: org.apache.maven.plugins:maven-resources-plugin
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1926Bump proguard-maven-plugin from 2.3.1 to 2.4.0dependabot[bot]08/05/21, 01:28:13 PM"Bumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md"">proguard-maven-plugin's changelog</a>.</em></p>
<blockquote>
<h1>Changelog</h1>
<h2>Unreleased</h2>
<ul>
<li>Minimum Java version bumped to 1.8 (<a href=""https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/127"">127</a>)</li>
<li>Support workaround for long command line problems (<a href=""https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/113"">113</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/wvengen/proguard-maven-plugin/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.github.wvengen:proguard-maven-plugin&package-manager=maven&previous-version=2.3.1&new-version=2.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump proguard-maven-plugin from 2.3.1 to 2.4.0dependabot[bot]08/05/21, 01:28:13 PM"Bumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md"">proguard-maven-plugin's changelog</a>.</em></p>
<blockquote>
<h1>Changelog</h1>
<h2>Unreleased</h2>
<ul>
<li>Minimum Java version bumped to 1.8 (<a href=""https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/127"">127</a>)</li>
<li>Support workaround for long command line problems (<a href=""https://github-redirect.dependabot.com/wvengen/proguard-maven-plugin/pull/113"">113</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/wvengen/proguard-maven-plugin/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.github.wvengen:proguard-maven-plugin&package-manager=maven&previous-version=2.3.1&new-version=2.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]08/05/21, 03:03:00 AM"Bump proguard-maven-plugin from 2.3.1 to 2.4.0

Bumps [proguard-maven-plugin](https://github.com/wvengen/proguard-maven-plugin) from 2.3.1 to 2.4.0.
- [Release notes](https://github.com/wvengen/proguard-maven-plugin/releases)
- [Changelog](https://github.com/wvengen/proguard-maven-plugin/blob/master/CHANGELOG.md)
- [Commits](https://github.com/wvengen/proguard-maven-plugin/commits)

---
updated-dependencies:
- dependency-name: com.github.wvengen:proguard-maven-plugin
  dependency-type: direct:development
  update-type: version-update:semver-minor
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1927Bump copy-rename-maven-plugin from 1.0 to 1.0.1dependabot[bot]08/05/21, 01:27:55 PM"Bumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/coderplus/copy-rename-maven-plugin/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.coderplus.maven.plugins:copy-rename-maven-plugin&package-manager=maven&previous-version=1.0&new-version=1.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump copy-rename-maven-plugin from 1.0 to 1.0.1dependabot[bot]08/05/21, 01:27:55 PM"Bumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/coderplus/copy-rename-maven-plugin/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.coderplus.maven.plugins:copy-rename-maven-plugin&package-manager=maven&previous-version=1.0&new-version=1.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]08/05/21, 03:03:02 AM"Bump copy-rename-maven-plugin from 1.0 to 1.0.1

Bumps [copy-rename-maven-plugin](https://github.com/coderplus/copy-rename-maven-plugin) from 1.0 to 1.0.1.
- [Release notes](https://github.com/coderplus/copy-rename-maven-plugin/releases)
- [Commits](https://github.com/coderplus/copy-rename-maven-plugin/commits)

---
updated-dependencies:
- dependency-name: com.coderplus.maven.plugins:copy-rename-maven-plugin
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1930Retain generic signature of TypeToken with R8 version 3.0 and higherChristoffer Quist Adamsenchristofferqa08/05/21, 01:40:03 PM"R8 version 3.0 started to remove generic signatures from items that are not matched by a -keep rule in full mode (see also https://r8.googlesource.com/r8/+/744d742137a82656b8ee27513f975e0528aecd78). The motivation for this change is to avoid that all generic signatures are retained in programs, when only a few are typically required for reflection.

This change adds a rule that causes the generic signatures of com.google.gson.reflect.TypeToken and its subclasses to be retained. This is needed because [com.google.gson.reflect.TypeToken reflectively accesses its own generic signature](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L62).

References:
* http://issuetracker.google.com/issues/188703877#comment28""Thanks! =||= @eamonnmcmanus 
Can you look #1929 to apply proguard/r8 rules automatically? =||= "Retain generic signature of TypeToken with R8 version 3.0 and higherChristoffer Quist Adamsenchristofferqa08/05/21, 01:40:03 PM"R8 version 3.0 started to remove generic signatures from items that are not matched by a -keep rule in full mode (see also https://r8.googlesource.com/r8/+/744d742137a82656b8ee27513f975e0528aecd78). The motivation for this change is to avoid that all generic signatures are retained in programs, when only a few are typically required for reflection.

This change adds a rule that causes the generic signatures of com.google.gson.reflect.TypeToken and its subclasses to be retained. This is needed because [com.google.gson.reflect.TypeToken reflectively accesses its own generic signature](https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L62).

References:
* http://issuetracker.google.com/issues/188703877#comment28"NaNChristoffer Quist Adamsen08/05/21, 07:18:32 AMRetain generic signature of TypeToken with R8 version 3.0 and higher1
1932Getting exception after converting library to Objective Cdreemz1708/12/21, 12:02:44 AM"After converting GSON library to objective C through J2OBJC
Getting random error like java.lang.ArrayStoreException: attempt to add object of type java.util.Formatter$FixedString to array with type java.util.Formatter$FormatString (JavaLangArrayStoreException)""It may be that someone else has tried this and may be able to help you. For the purposes of this project, though, we can't support this configuration and it isn't useful for us to keep this issue open.

You could try asking on Stack Overflow? =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1933Serializing a Calendar with @JsonAdapter uses default Calendar formatoutzenj08/13/21, 02:53:44 PM"I'm using the @JsonAdapter annotation to mark a particular Calendar object to use a specific format, like this:

```Java
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

public class TypeA {

	@JsonAdapter(CalendarAdapter.class)
	public Calendar date;


	public static class CalendarAdapter extends TypeAdapter<Calendar> {

		public static final DateFormat DATE_FORMAT = new SimpleDateFormat(""yyyy MM dd HH:mm"");

		@Override
		public Calendar read(JsonReader reader) throws IOException {
			String value = reader.nextString();
			try {
				Calendar result = Calendar.getInstance();
				result.setTime(DATE_FORMAT.parse(value));
				return result;
			} catch (ParseException pe) {
				throw new IOException(pe);
			}
		}

		@Override
		public void write(JsonWriter writer, Calendar value) throws IOException {
			writer.value(DATE_FORMAT.format(value.getTime()));
		}

	}

	public static void main(String[] args) {
		Gson gson = new Gson();

		TypeA a = new TypeA();
		a.date = Calendar.getInstance();

		String serialized = gson.toJson(a);
		System.out.println(serialized);

	}

}
```

This produces the following output, which uses the GSON-standard Calendar format instead of the format specified by the TypeAdapter:

`{""date"":{""year"":2021,""month"":7,""dayOfMonth"":11,""hourOfDay"":16,""minute"":15,""second"":32}}`""Which Gson version are you using?
For version 2.8.7 (currently the latest) I see the expected output `{""date"":""2021 08 13 00:09""}`.

Are you using a code minimizer, such as Proguard, which might be removing the `JsonAdapter` annotation? =||= Ugh, my IDE silently included GSON 2.6.2 alongside 2.8.7. Running manually with 2.8.7 alone works fine. Now I just have to fix my IDE.

Sorry for any confusion or effort expended. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1935Bump maven-scm-api from 1.11.2 to 1.11.3dependabot[bot]08/12/21, 06:47:28 PM"Bumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-scm/commit/f5a162b06b4e1f4080b7846812848e6ce64e1727""><code>f5a162b</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/c53157e2d386ff55487f92d2b65936ad9dfac684""><code>c53157e</code></a> [maven-release-plugin] rollback the release of maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/156294efda49fc12d399a901cc6f5e948e02e87b""><code>156294e</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-scm/commit/77c9f77ed67a445ee36e1d6e9c076de7cb3e08aa""><code>77c9f77</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/f21ca5a8c55f05130db98400d85506a383628138""><code>f21ca5a</code></a> [SCM-947] Improve ChangeLogMojo by using ChangeLogRequest</li>
<li><a href=""https://github.com/apache/maven-scm/commit/4cafe0f5031f7ca0be79f2e4944b535a8c812ac5""><code>4cafe0f</code></a> [SCM-948] Make limit parameter work for svnexe and gitexe changelog goal</li>
<li><a href=""https://github.com/apache/maven-scm/commit/a434fe6fffe110dc78e4c84f6c0d41e72a932e33""><code>a434fe6</code></a> [SCM-955] gitexe and svnexe provider TCK tests fail when path is absolute</li>
<li><a href=""https://github.com/apache/maven-scm/commit/3a10d0f52b1e564b8bdad71161d7c74ac1dd3d99""><code>3a10d0f</code></a> [SCM-954] Always use --internal-diff for SvnDiffCommand in svnexe provider</li>
<li><a href=""https://github.com/apache/maven-scm/commit/e58ccd65fd11e427b89bdede8a6b2b8c3a059d93""><code>e58ccd6</code></a> update CI url</li>
<li><a href=""https://github.com/apache/maven-scm/commit/541c8a4c68e55805a45f2ba5370ffee46268ee0c""><code>541c8a4</code></a> Bump mockito-core from 1.10.19 to 2.28.2</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-api&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-scm-api from 1.11.2 to 1.11.3dependabot[bot]08/12/21, 06:47:28 PM"Bumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-scm/commit/f5a162b06b4e1f4080b7846812848e6ce64e1727""><code>f5a162b</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/c53157e2d386ff55487f92d2b65936ad9dfac684""><code>c53157e</code></a> [maven-release-plugin] rollback the release of maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/156294efda49fc12d399a901cc6f5e948e02e87b""><code>156294e</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href=""https://github.com/apache/maven-scm/commit/77c9f77ed67a445ee36e1d6e9c076de7cb3e08aa""><code>77c9f77</code></a> [maven-release-plugin] prepare release maven-scm-1.11.3</li>
<li><a href=""https://github.com/apache/maven-scm/commit/f21ca5a8c55f05130db98400d85506a383628138""><code>f21ca5a</code></a> [SCM-947] Improve ChangeLogMojo by using ChangeLogRequest</li>
<li><a href=""https://github.com/apache/maven-scm/commit/4cafe0f5031f7ca0be79f2e4944b535a8c812ac5""><code>4cafe0f</code></a> [SCM-948] Make limit parameter work for svnexe and gitexe changelog goal</li>
<li><a href=""https://github.com/apache/maven-scm/commit/a434fe6fffe110dc78e4c84f6c0d41e72a932e33""><code>a434fe6</code></a> [SCM-955] gitexe and svnexe provider TCK tests fail when path is absolute</li>
<li><a href=""https://github.com/apache/maven-scm/commit/3a10d0f52b1e564b8bdad71161d7c74ac1dd3d99""><code>3a10d0f</code></a> [SCM-954] Always use --internal-diff for SvnDiffCommand in svnexe provider</li>
<li><a href=""https://github.com/apache/maven-scm/commit/e58ccd65fd11e427b89bdede8a6b2b8c3a059d93""><code>e58ccd6</code></a> update CI url</li>
<li><a href=""https://github.com/apache/maven-scm/commit/541c8a4c68e55805a45f2ba5370ffee46268ee0c""><code>541c8a4</code></a> Bump mockito-core from 1.10.19 to 2.28.2</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-api&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]08/12/21, 03:04:02 AM"Bump maven-scm-api from 1.11.2 to 1.11.3

Bumps [maven-scm-api](https://github.com/apache/maven-scm) from 1.11.2 to 1.11.3.
- [Release notes](https://github.com/apache/maven-scm/releases)
- [Commits](https://github.com/apache/maven-scm/compare/maven-scm-1.11.2...maven-scm-1.11.3)

---
updated-dependencies:
- dependency-name: org.apache.maven.scm:maven-scm-api
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1936Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3dependabot[bot]08/12/21, 06:47:48 PM"Bumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-scm-provider-gitexe from 1.11.2 to 1.11.3dependabot[bot]08/12/21, 06:47:48 PM"Bumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.scm:maven-scm-provider-gitexe&package-manager=maven&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]08/12/21, 03:04:06 AM"Bump maven-scm-provider-gitexe from 1.11.2 to 1.11.3

Bumps maven-scm-provider-gitexe from 1.11.2 to 1.11.3.

---
updated-dependencies:
- dependency-name: org.apache.maven.scm:maven-scm-provider-gitexe
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1938Hello world MgMg8808/16/21, 06:26:23 PMOther responsibility NaNNaNNaNNaNNaNNaNNaNNaNNaNNaN0
1939[Feature Request] bytesRead attribute with JsonReaderPranshu Jainpranshujain2208/17/21, 11:51:12 AM"Hello Gson Team,

Gson has been very helpful in reading files in stream, especially when the file size is huge.

Is it possible to have a method to get **_bytesRead_** (bytes that have been read so far), while using method <code>gson.fromJson(JsonReader reader, java.lang.reflect.Type typeOfT)</code>.

Please consider the following methods as a part of <code>JsonReader</code> :
- <code>jsonReader.getBytesRead()</code>
- <code>jsonReader.resetBytesRead()</code>, to reinitialize the bytesRead attribute to 0.

>This will be very helpful in splitting huge file into equal sized files.""Can't this be done for a custom implementation of `InputStream`? I mean, what if you use `CountingInputStream` from either [Apache Commons](https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/input/CountingInputStream.html) or [Google Guava](https://guava.dev/releases/19.0/api/docs/com/google/common/io/CountingInputStream.html)? =||= > CountingInputStream

No, actually I have a <code>gzip</code> format file, which contain list of objects. 
I have to decompress it, read it and parse the <code>Objects</code> using <code>gson</code> in stream
and then based on the read size I have to create file chunks. =||= I don't see why it doesn't fit your needs since it can be put both before and after decompressing your gzip: say, _open the input stream_ -> `GZIPInputStream` -> `CountingInputStream` -> _read/reset the byte count_ -> `InputStreamReader` -> `JsonReader` -> _inspect the byte count possibly opening a new `JsonWriter`_. Or am I getting it totally wrong, and if so can you please be more specific? =||= <code>CountingInputStream</code> is working fine and meets the requirement  as well.
Thankyou for the quick help. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1941NoSuchMethodError on AndroidRoman ParshikovPromanSEW08/20/21, 04:44:40 PM"After update 2.8.6 to 2.8.7 I got exception:
```
Caused by java.lang.AssertionError: java.lang.NoSuchFieldException: error
       at com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.<init>(TypeAdapters.java:792)
       at com.google.gson.internal.bind.TypeAdapters$30.create(TypeAdapters.java:818)
       at com.google.gson.Gson.getAdapter(Gson.java:458)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:117)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:166)
       at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:102)
       at com.google.gson.Gson.getAdapter(Gson.java:458)
       at retrofit2.converter.gson.GsonConverterFactory.responseBodyConverter(GsonConverterFactory.java:64)
       at retrofit2.Retrofit.nextResponseBodyConverter(Retrofit.java:330)
       at retrofit2.Retrofit.responseBodyConverter(Retrofit.java:313)
       at retrofit2.HttpServiceMethod.createResponseConverter(HttpServiceMethod.java:113)
       at retrofit2.HttpServiceMethod.parseAnnotations(HttpServiceMethod.java:82)
       at retrofit2.ServiceMethod.parseAnnotations(ServiceMethod.java:37)
       at retrofit2.Retrofit.loadServiceMethod(Retrofit.java:170)
       at retrofit2.Retrofit$1.invoke(Retrofit.java:149)
       at java.lang.reflect.Proxy.invoke(Proxy.java:1006)
      ...
```"This should be fixed by #1495, which is included in the just-released 2.8.8. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1942Performance - `JsonTreeReader` & `Streams.parse`Simon GUEROUTsaiimons08/20/21, 03:46:43 PM"Hi, I wanted to get an advice / or offer an idea that would improve performance in some situations.

To give some context, I have to work with structures where a key/value pair inside an object represents the destination type of said object.

```json
{
    ""MyType"" : ""Foo"",
    ""bar"" : ""baz""
}
```

```kotlin
sealed class MyType {
    data class Foo(
        val bar: String
    ) : MyType()
}
```

Because of this specific structure, we have to make a call to `Streams.parse` to access the data within a `JsonObject` and let Gson deal with the rest:

```kotlin
class MyTypeAdapter(private val gson: Gson) : TypeAdapter<MyType>() {
    override fun read(`in`: JsonReader) : MyType {
        val obj = Streams.parse(`in`).asJsonObject
        val type = obj.get(""MyType"").asString
        return when (type) {
            ""Foo"" -> gson.fromJson(obj, MyType.Foo::class.java)
            else -> throw IllegalStateException(""Unsupported $type"")
        }
    }
}
```

When such structures contain other nested structures, we see many calls to `Streams.parse`, which are in fact reading again a document which was already processed, and available as a `JsonElement`.

One interesting improvement for this situation, would be to expose features from `JsonTreeReader` to `Streams`, in order to bypass the parsing, and obtain the current `JsonElement`, which would save a lot of processing, since it won't have to be rebuilt.

Would this be an interesting update to Gson ? Would this risk breaking how Gson operates ?

(I'll try to make a fork quickly with some data and a a flame graph demonstrating where time is being spent and how this could be improved)""In the abstract, the idea is interesting. However, Gson is in maintenance mode and we are generally unlikely to add new features such as this. You may find that [Moshi](https://github.com/square/moshi) better suits your needs. =||= @eamonnmcmanus unfortunately, we heavily rely on `JsonElement` for a couple issues, and switching the whole codebase to Moshi is not something we could do right now.

I'll open a PR with the improvements, as I tested the changes locally, and I reduced some processing time by 90% for very large graphs, with a very small change. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1943Improve the speed of the JSON_ELEMENT TypeAdapter when the object graph has already been turned into a JsonElementSimon GUEROUTsaiimons08/30/21, 04:57:08 PM"Following up th #1942 conversation, here is a small change, which improves the speed of processing a lot in cases where accessing the `JsonElement` is required.

Note - I'm working on providing flame graphs and examples without company-specific data.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1943) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA ([login here](https://cla.developers.google.com/) to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment `@googlebot I fixed it.`. If the bot doesn't comment, it means it doesn't think anything has changed.

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1943) for more info**.

<!-- need_author_cla --> =||= Can you share some micro benchmarks please? =||= @inder123 Here are some results:

Before:

![Screen Shot 2021-08-23 at 11 55 26](https://user-images.githubusercontent.com/6832416/130478807-7060db65-14b3-49a2-8a69-dc39826841f5.png)
After:

![Screen Shot 2021-08-23 at 11 56 12](https://user-images.githubusercontent.com/6832416/130478815-3edb9492-6318-4ca9-b32f-2b700eb7c051.png)

Input:
[input.json.zip](https://github.com/google/gson/files/7033282/input.json.zip)

Async Profiler output:
[profiler.zip](https://github.com/google/gson/files/7033318/profiler.zip)

Test structure:
```kotlin
sealed class Node {
    data class IntNode(
        val left: Node?,
        val right: Node?,
        val value: Int,
    ) : Node()

    data class StringNode(
        val left: Node?,
        val right: Node?,
        val value: String,
    ) : Node()
}

class NodeTypeAdapter(
    private val gson: Gson
) : TypeAdapter<Node>() {

    override fun write(p0: JsonWriter, p1: Node?) {
        if (p1 == null) {
            p0.nullValue()
            return
        }
        val node = when (p1) {
            is Node.IntNode -> gson.toJsonTree(p1, Node.IntNode::class.java)
                .asJsonObject
                .apply { addProperty(""Node"", ""Int"") }
            is Node.StringNode -> gson.toJsonTree(p1, Node.StringNode::class.java)
                .asJsonObject
                .apply { addProperty(""Node"", ""String"") }
        }
        gson.toJson(node, p0)
    }

    override fun read(p0: JsonReader): Node? {
        val node = Streams.parse(p0)
        if (node == null || node == JsonNull.INSTANCE) return null

        val type = node.asJsonObject.get(""Node"").asString
        return when (type) {
            ""Int"" -> gson.fromJson(node, Node.IntNode::class.java)
            ""String"" -> gson.fromJson(node, Node.StringNode::class.java)
            else -> throw IllegalArgumentException(""Failed to read $type"")
        }
    }
}

class NodeTypeAdapterFactory : TypeAdapterFactory {
    override fun <T : Any?> create(p0: Gson, p1: TypeToken<T>): TypeAdapter<T>? {
        if (p1.rawType == Node::class.java) return NodeTypeAdapter(p0) as TypeAdapter<T>?
        return null
    }
}

class NestedJsonBenchmark {
    @Test
    fun `parse gson`() {
        val gson = GsonBuilder().registerTypeAdapterFactory(NodeTypeAdapterFactory()).create()
        measureTimeMillis {
            repeat(1000) {
                gson.fromJson(text, Node::class.java)
            }
        }
    }

    companion object {
        private const val jsonFileName = ""input.json""
        private val loader = NestedJsonBenchmark::class.java.classLoader
        private val benchmarkInput: InputStream =
            loader!!.getResourceAsStream(jsonFileName)!!
        private val text = benchmarkInput.bufferedReader().readText()
    }
}
``` =||= "Improve the speed of the JSON_ELEMENT TypeAdapter when the object graph has already been turned into a JsonElementSimon GUEROUTsaiimons08/30/21, 04:57:08 PM"Following up th #1942 conversation, here is a small change, which improves the speed of processing a lot in cases where accessing the `JsonElement` is required.

Note - I'm working on providing flame graphs and examples without company-specific data."NaNSimon Guerout08/30/21, 02:33:16 PMFix formatting1
1944"Spring-like ""inline"" initialization serialized null objects"juspolo08/27/21, 03:36:01 PM"Few months ago, we experienced issue while serializing some objects. After few hours, it was discovered that the issue was due to the initialization method. While objects initialized ""classic-like"" were successfully serialized, objects initialized ""spring-like"" were serialized as null objects.

The following pseudo-simplified-code provides an example of what it was our case. 

Pretending to be using these classes:
```java
public class Member {

    private String name;
    private String description;

    public String getName() {
        return name;
    }

    public void setName(String Name) {
        this.name = Name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(string Description) {
        this.description= Description;
    }
}

public class Section {

    private String name;
    private ArrayList<Member> members;

    public String getName() {
        return name;
    }

    public void setName(String Name) {
        this.name = Name;
    }

    public ArrayList<Member> getMembers() {
        return members;
    }

    public void setMembers(ArrayList<Member> Members) {
        this.members= Members;
    }
}
```

Then this ""spring-like"" initialization was producing a json with null objects:
```java
Member member = new Member(){{
    setName(""Member"");
    setDescription(""Desc."");
}};

ArrayList<Member> members = new  ArrayList<Member>(){{
    Add(member);
}};

Section root = new Section(){{
     setName(""Root"");
     setMembers(Members);
 }};
```
While this ""classic-like"" initialization was producing a fine json:
```java
Member member = new Member();
member.setName(""Member"");
member.setDescription(""Desc."");

ArrayList<Member> members = new  ArrayList<Member>();
members.Add(member);

Section root = new Section();
root.setName(""Root"");
root.setMembers(Members);
```

I hope that I summarized the issue in a good way and that I recall all the context 😉 ""As far as I remember, Gson cannot handle anonymous classes deserialization because of being unable to initialize references that refer their outer classes. See more: https://github.com/google/gson/blob/master/UserGuide.md#TOC-Nested-Classes-including-Inner-Classes-

Also, I'd consider double-brace initialization a pure anti-pattern: it always creates anonymous classes (yep, that stuff ending with `$1.class`, `$2.class` and so on in your build out directory) without a real need, it cannot work with `final` classes, may break type subclassing assertions, and one should better prefer constructors, static factory methods or whatever like that for convenience, but not double-brace initializer. =||= I agree completely with the comment by @lyubomyr-shaydariv, regarding both the analysis of the problem and the undesirability of using double-brace initialization. =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1947Remove an unused import.Éamonn McManuseamonnmcmanus08/31/21, 09:55:07 PMNaNNaNRemove an unused import.Éamonn McManuseamonnmcmanus08/31/21, 09:55:07 PMNaNNaNÉamonn McManus08/31/21, 09:52:50 PMRemove an unused import.1
1948Add missing  calls when testing for exceptions.Éamonn McManuseamonnmcmanus08/31/21, 10:03:46 PMNaNNaNAdd missing  calls when testing for exceptions.Éamonn McManuseamonnmcmanus08/31/21, 10:03:46 PMNaNNaNÉamonn McManus08/31/21, 10:01:44 PMAdd missing  calls when testing for exceptions.1
1949Update dependencies in proto/pom.xml.Éamonn McManuseamonnmcmanus09/02/21, 12:11:48 AM"Also use `GeneratedMessageV3` rather than `GeneratedMessage`, consistent with recent versions of `protoc`.

Closes #1797.""When will this release? =||= According to `proto/pom.xml`, the artifact id is `com.google.code.gson:proto`. I don't think that has ever been released. https://github.com/google/gson/issues/690 suggests that was mostly intentional. Given that Gson is in maintenance mode we are probably not going to be releasing new subprojects. =||= Right, struggled to understand what ""maintenance mode"" would mean but #1821 explained, thanks =||= "Update dependencies in proto/pom.xml.Éamonn McManuseamonnmcmanus09/02/21, 12:11:48 AM"Also use `GeneratedMessageV3` rather than `GeneratedMessage`, consistent with recent versions of `protoc`.

Closes #1797."NaNÉamonn McManus09/02/21, 12:06:49 AMUse GeneratedMessageV3 rather than GeneratedMessage, consistent with recent protoc versions.1
1951Add license note to GSON POM file.Nikita Novikfriendoye09/06/21, 05:35:44 PM"I use [gradle-license-plugin](https://github.com/jaredsburrows/gradle-license-plugin) to keep information about licenses for my project's dependencies up-to-date. This Gradle plugin heavily relies on POM file to get information about license for `.jar` or `.aar` artifacts.

Unfortunately, for the latest GSON artifact from Maven Central it is impossible to retrieve information about license from [POM file](https://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.8/gson-2.8.8.pom). This PR adds such information to GSON POM file.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1951) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= "Add license note to GSON POM file.Nikita Novikfriendoye09/06/21, 05:35:44 PM"I use [gradle-license-plugin](https://github.com/jaredsburrows/gradle-license-plugin) to keep information about licenses for my project's dependencies up-to-date. This Gradle plugin heavily relies on POM file to get information about license for `.jar` or `.aar` artifacts.

Unfortunately, for the latest GSON artifact from Maven Central it is impossible to retrieve information about license from [POM file](https://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.8/gson-2.8.8.pom). This PR adds such information to GSON POM file."NaNÉamonn McManus09/06/21, 05:33:39 PM"Change `Apache 2.0` to `Apache-2.0`.

As suggested by @Marcono1234.
> The [Maven POM Reference](https://maven.apache.org/pom.html#licenses) says:
> > Using an [SPDX identifier](https://spdx.org/licenses/) as the license name is recommended.
> The identifier for Apache 2.0 seems to be [`Apache-2.0`](https://spdx.org/licenses/Apache-2.0.html).
> (Though even the Maven POM Reference example does not follow that advice; not sure how important it is.)"1
1953update RawCollectionsExample.javaZSuperZ201709/07/21, 03:02:04 PMuse static method instead deprecated method"
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1953) for more info**.

<!-- need_sender_cla --> =||= @googlebot I signed it! =||= Thanks, this is very helpful. =||= "update RawCollectionsExample.javaZSuperZ201709/07/21, 03:02:04 PMuse static method instead deprecated methodNaNZ09/07/21, 03:43:54 AM"update RawCollectionsExample.java

use static method instead deprecated method"1
1954update UserGuide.mdZSuperZ201709/07/21, 03:00:12 PMId Class does not have get method, we should new a instance.Thanks! =||= update UserGuide.mdZSuperZ201709/07/21, 03:00:12 PMId Class does not have get method, we should new a instance.NaNZ09/07/21, 03:58:26 AM"update UserGuide.md

Id Class does not have get method, we should new a instance."1
1955extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.javaEmanuelle Pharandladykraken09/07/21, 06:55:10 PM"extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java

_Originally posted by @ladykraken in https://github.com/google/gson/pull/1953#discussion_r703660335_"I don't know what this means and I'm guessing it was a mistake. =||= NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1956Bump maven-javadoc-plugin from 3.3.0 to 3.3.1dependabot[bot]09/08/21, 01:14:07 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/2d22ccadffc2f22f18e19c2cc6d42fd863b4535d""><code>2d22cca</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.1</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/7b7813e5ee6ba59ba75701c4d689337865bdc1f1""><code>7b7813e</code></a> [MJAVADOC-450] Artifacts with a classifier are ignored when looking for resou...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/0d0e0cc7325fc27b89b7bde0ba2cbe322ff6a040""><code>0d0e0cc</code></a> [MJAVADOC-618] Goal javadoc:aggregate fails with submodules packaged as war</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/a2acaa28f1534b31429589808b630ebe2f08e3d0""><code>a2acaa2</code></a> [MJAVADOC-137] transform verify script from bsh to groovy</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/16ca1192632f2bfc4e10faa4aa24d319957008dc""><code>16ca119</code></a> Clean up slf4j-simple</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/87dbfb209e5b75ead8443d70a0c748d02a4f729b""><code>87dbfb2</code></a> [MJAVADOC-677] Using &quot;requires static transitive&quot; makes javadoc goal fail</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d770460b765d2a3ccb9594a1a016c6700501861f""><code>d770460</code></a> [MJAVADOC-680] JDK 16+: Error fetching link: ...\target\javadoc-bundle-option...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/292ebb7eca37a0cebbff8a40a7d85ea915f211ac""><code>292ebb7</code></a> Bump slf4j-simple from 1.7.30 to 1.7.32</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/fe6d738c2f95a3f5a361f0c4ab2eef49d37ae566""><code>fe6d738</code></a> Bump mockito-core from 3.9.0 to 3.12.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d2dd5321dc02e793d87c722224c40d94a607cb51""><code>d2dd532</code></a> [MJAVADOC-679] &quot;Unable to compute stale date&quot; in a directory with accent char...</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.3.0&new-version=3.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNBump maven-javadoc-plugin from 3.3.0 to 3.3.1dependabot[bot]09/08/21, 01:14:07 PM"Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/2d22ccadffc2f22f18e19c2cc6d42fd863b4535d""><code>2d22cca</code></a> [maven-release-plugin] prepare release maven-javadoc-plugin-3.3.1</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/7b7813e5ee6ba59ba75701c4d689337865bdc1f1""><code>7b7813e</code></a> [MJAVADOC-450] Artifacts with a classifier are ignored when looking for resou...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/0d0e0cc7325fc27b89b7bde0ba2cbe322ff6a040""><code>0d0e0cc</code></a> [MJAVADOC-618] Goal javadoc:aggregate fails with submodules packaged as war</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/a2acaa28f1534b31429589808b630ebe2f08e3d0""><code>a2acaa2</code></a> [MJAVADOC-137] transform verify script from bsh to groovy</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/16ca1192632f2bfc4e10faa4aa24d319957008dc""><code>16ca119</code></a> Clean up slf4j-simple</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/87dbfb209e5b75ead8443d70a0c748d02a4f729b""><code>87dbfb2</code></a> [MJAVADOC-677] Using &quot;requires static transitive&quot; makes javadoc goal fail</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d770460b765d2a3ccb9594a1a016c6700501861f""><code>d770460</code></a> [MJAVADOC-680] JDK 16+: Error fetching link: ...\target\javadoc-bundle-option...</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/292ebb7eca37a0cebbff8a40a7d85ea915f211ac""><code>292ebb7</code></a> Bump slf4j-simple from 1.7.30 to 1.7.32</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/fe6d738c2f95a3f5a361f0c4ab2eef49d37ae566""><code>fe6d738</code></a> Bump mockito-core from 3.9.0 to 3.12.0</li>
<li><a href=""https://github.com/apache/maven-javadoc-plugin/commit/d2dd5321dc02e793d87c722224c40d94a607cb51""><code>d2dd532</code></a> [MJAVADOC-679] &quot;Unable to compute stale date&quot; in a directory with accent char...</li>
<li>Additional commits viewable in <a href=""https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.apache.maven.plugins:maven-javadoc-plugin&package-manager=maven&previous-version=3.3.0&new-version=3.3.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>"NaNdependabot[bot]09/08/21, 03:02:49 AM"Bump maven-javadoc-plugin from 3.3.0 to 3.3.1

Bumps [maven-javadoc-plugin](https://github.com/apache/maven-javadoc-plugin) from 3.3.0 to 3.3.1.
- [Release notes](https://github.com/apache/maven-javadoc-plugin/releases)
- [Commits](https://github.com/apache/maven-javadoc-plugin/compare/maven-javadoc-plugin-3.3.0...maven-javadoc-plugin-3.3.1)

---
updated-dependencies:
- dependency-name: org.apache.maven.plugins:maven-javadoc-plugin
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>"1
1960"Revert ""Replace localhost lookup with static IP to fix test."""Thichcamauninho09/12/21, 01:43:35 PM[dhux](https://luckyfish.io/?c=c_hfqoqajm34x5) "
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1960) for more info**.

<!-- need_sender_cla --> =||= [dhux](https://luckyfish.io/?c=c_hfqoqajm34x5)  =||= Ok =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
1962JsonWriter make indent accessibleSpeigerSpeiger09/13/21, 12:47:56 AM"Motivation for this change.
When using indents in the JsonWriter usually spam newlines for arrays.
I wrote a custom JsonWriter on top of this one which just implements a nicer Pretty Printing style.
Said Style disables newlines & indents when a Array is started, but enables them if a object is started within the array.
It uses a List<Boolean> to keep track of the blockage state.

The only thing that I couldn't override without adding a extra Method is the ""indent"". Which is set to final for reasons I assume,
but a getter should be present to aid people who want to improve their ""Human Readable"" JsonFile.

The idea is that you can seamlessly override the JsonWriter without the need of requiring extra functions to make original behavior work.

Thanks for reading and your time.""
Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).

:memo: **Please visit <https://cla.developers.google.com/> to sign.**

Once you've signed (or fixed any issues), please reply here with `@googlebot I signed it!` and we'll verify it.

----

#### What to do if you already signed the CLA

##### Individual signers

*   It's possible we don't have your GitHub username or you're using a different email address on your commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).

##### Corporate signers

*   Your company has a Point of Contact who decides which employees are authorized to participate. Ask your POC to be added to the group of authorized contributors. If you don't know who your Point of Contact is, direct the Google project maintainer to [go/cla#troubleshoot](http://go/cla#troubleshoot) ([Public version](https://opensource.google/docs/cla/#troubleshoot)).
*   The email used to register you as an authorized contributor must be the email used for the Git commit. Check [your existing CLA data](https://cla.developers.google.com/clas) and verify that your [email is set on your git commits](https://help.github.com/articles/setting-your-email-in-git/).
*   The email used to register you as an authorized contributor must also be [attached to your GitHub account](https://github.com/settings/emails).
		

ℹ️ **Googlers: [Go here](https://goto.google.com/prinfo/https%3A%2F%2Fgithub.com%2Fgoogle%2Fgson%2Fpull%2F1962) for more info**.

<!-- need_sender_cla --> =||= Eh yeah not going to sign it:
Because google lets me not decide which information may or may not be shared publicly.
The main problem being, I would like to select which of my email addresses it uses. (Already tried alternative email address and it says both instead of select one)

If someone wants to take over this patch and submit it instead of me. Go ahead I would be happy enough.
(Technically these lines of code are not copyright-able anyways) =||= "NaNNaNNaNNaNNaNNaNNaNNaNNaN0
